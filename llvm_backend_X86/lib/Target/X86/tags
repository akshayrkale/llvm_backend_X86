!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADC	X86ISelLowering.h	/^      ADD, SUB, ADC, SBB, SMUL,$/;"	e	enum:llvm::X86ISD::NodeType
ADD	X86ISelDAGToDAG.cpp	/^  ADD,$/;"	e	enum:AtomicOpc	file:
ADD	X86ISelLowering.h	/^      ADD, SUB, ADC, SBB, SMUL,$/;"	e	enum:llvm::X86ISD::NodeType
ALL_EA_BASES	Disassembler/X86DisassemblerDecoder.h	/^  ALL_EA_BASES$/;"	e	enum:__anon5
ALL_EA_BASES	Disassembler/X86DisassemblerDecoder.h	/^  ALL_EA_BASES$/;"	e	enum:__anon6
ALL_EA_BASES	Disassembler/X86DisassemblerDecoder.h	371;"	d
ALL_REGS	Disassembler/X86DisassemblerDecoder.h	/^  ALL_REGS$/;"	e	enum:__anon5
ALL_REGS	Disassembler/X86DisassemblerDecoder.h	/^  ALL_REGS$/;"	e	enum:__anon9
ALL_REGS	Disassembler/X86DisassemblerDecoder.h	380;"	d
ALL_SIB_BASES	Disassembler/X86DisassemblerDecoder.h	/^  ALL_SIB_BASES$/;"	e	enum:__anon7
ALL_SIB_BASES	Disassembler/X86DisassemblerDecoder.h	376;"	d
AND	X86ISelDAGToDAG.cpp	/^  AND,$/;"	e	enum:AtomicOpc	file:
AND	X86ISelLowering.h	/^      INC, DEC, OR, XOR, AND,$/;"	e	enum:llvm::X86ISD::NodeType
ANDNP	X86ISelLowering.h	/^      ANDNP,$/;"	e	enum:llvm::X86ISD::NodeType
ASMPREFIX	X86JITInfo.cpp	58;"	d	file:
ASSERT_SORTED	X86FloatingPoint.cpp	604;"	d	file:
ASSERT_SORTED	X86FloatingPoint.cpp	606;"	d	file:
ATOMADD64_DAG	X86ISelLowering.h	/^      ATOMADD64_DAG = ISD::FIRST_TARGET_MEMORY_OPCODE,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMAND64_DAG	X86ISelLowering.h	/^      ATOMAND64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMMAX64_DAG	X86ISelLowering.h	/^      ATOMMAX64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMMIN64_DAG	X86ISelLowering.h	/^      ATOMMIN64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMNAND64_DAG	X86ISelLowering.h	/^      ATOMNAND64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMOR64_DAG	X86ISelLowering.h	/^      ATOMOR64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMSUB64_DAG	X86ISelLowering.h	/^      ATOMSUB64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMSWAP64_DAG	X86ISelLowering.h	/^      ATOMSWAP64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMUMAX64_DAG	X86ISelLowering.h	/^      ATOMUMAX64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMUMIN64_DAG	X86ISelLowering.h	/^      ATOMUMIN64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATOMXOR64_DAG	X86ISelLowering.h	/^      ATOMXOR64_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
ATT	MCTargetDesc/X86MCAsmInfo.cpp	/^  ATT = 0, Intel = 1$/;"	e	enum:AsmWriterFlavorTy	file:
ATTRIBUTE_BITS	Disassembler/X86DisassemblerDecoderCommon.h	/^  ATTRIBUTE_BITS$/;"	e	enum:attributeBits
ATTRIBUTE_BITS	Disassembler/X86DisassemblerDecoderCommon.h	52;"	d
ATTR_max	Disassembler/X86DisassemblerDecoderCommon.h	/^  ATTR_max$/;"	e	enum:attributeBits
AVX	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
AVX2	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
AVX512F	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
AdSize	MCTargetDesc/X86BaseInfo.h	/^    AdSize      = 1 << AdSizeShift,$/;"	e	enum:llvm::X86II::__anon26
AdSizeShift	MCTargetDesc/X86BaseInfo.h	/^    AdSizeShift = OpSizeShift + 2,$/;"	e	enum:llvm::X86II::__anon26
AddImmPrefix	AsmParser/X86AsmParser.cpp	/^    bool StopOnLBrac, AddImmPrefix;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
AddRegFrm	MCTargetDesc/X86BaseInfo.h	/^    AddRegFrm      = 2,$/;"	e	enum:llvm::X86II::__anon26
AddTableEntry	X86InstrInfo.cpp	/^X86InstrInfo::AddTableEntry(RegOp2MemOpTableType &R2MTable,$/;"	f	class:X86InstrInfo
AddrBaseReg	MCTargetDesc/X86BaseInfo.h	/^    AddrBaseReg = 0,$/;"	e	enum:llvm::X86::__anon25
AddrDisp	MCTargetDesc/X86BaseInfo.h	/^    AddrDisp = 3,$/;"	e	enum:llvm::X86::__anon25
AddrIndexReg	MCTargetDesc/X86BaseInfo.h	/^    AddrIndexReg = 2,$/;"	e	enum:llvm::X86::__anon25
AddrNumOperands	MCTargetDesc/X86BaseInfo.h	/^    AddrNumOperands = 5$/;"	e	enum:llvm::X86::__anon25
AddrScaleAmt	MCTargetDesc/X86BaseInfo.h	/^    AddrScaleAmt = 1,$/;"	e	enum:llvm::X86::__anon25
AddrSegmentReg	MCTargetDesc/X86BaseInfo.h	/^    AddrSegmentReg = 4,$/;"	e	enum:llvm::X86::__anon25
AddressOf	AsmParser/X86AsmParser.cpp	/^  bool AddressOf;$/;"	m	struct:__anon2::X86Operand	file:
Align	X86ISelDAGToDAG.cpp	/^    unsigned Align;    \/\/ CP alignment.$/;"	m	struct:__anon47::X86ISelAddressMode	file:
AnalyzeBranch	X86InstrInfo.cpp	/^bool X86InstrInfo::AnalyzeBranch(MachineBasicBlock &MBB,$/;"	f	class:X86InstrInfo
ArgumentStackSize	X86MachineFunctionInfo.h	/^  unsigned ArgumentStackSize;$/;"	m	class:llvm::X86MachineFunctionInfo
AsmPrinter	X86MCInstLower.cpp	/^  X86AsmPrinter &AsmPrinter;$/;"	m	class:__anon51::X86MCInstLower	file:
AsmWriterFlavorTy	MCTargetDesc/X86MCAsmInfo.cpp	/^enum AsmWriterFlavorTy {$/;"	g	file:
AtomicOpc	X86ISelDAGToDAG.cpp	/^enum AtomicOpc {$/;"	g	file:
AtomicOpcEnd	X86ISelDAGToDAG.cpp	/^  AtomicOpcEnd$/;"	e	enum:AtomicOpc	file:
AtomicOpcTbl	X86ISelDAGToDAG.cpp	/^static const uint16_t AtomicOpcTbl[AtomicOpcEnd][AtomicSzEnd] = {$/;"	v	file:
AtomicSz	X86ISelDAGToDAG.cpp	/^enum AtomicSz {$/;"	g	file:
AtomicSzEnd	X86ISelDAGToDAG.cpp	/^  AtomicSzEnd$/;"	e	enum:AtomicSz	file:
AutoDetectSubtargetFeatures	X86Subtarget.cpp	/^void X86Subtarget::AutoDetectSubtargetFeatures() {$/;"	f	class:X86Subtarget
BBSolved	X86VZeroUpper.cpp	/^    BitVector BBSolved;$/;"	m	struct:__anon55::VZeroUpperInserter	file:
BBState	X86VZeroUpper.cpp	/^    SmallVector<uint8_t, 8> BBState;$/;"	m	struct:__anon55::VZeroUpperInserter	file:
BEXTR	X86ISelLowering.h	/^      BEXTR,  \/\/ BEXTR - Bit field extract$/;"	e	enum:llvm::X86ISD::NodeType
BLENDI	X86ISelLowering.h	/^      BLENDI,$/;"	e	enum:llvm::X86ISD::NodeType
BLENDV	X86ISelLowering.h	/^      BLENDV,$/;"	e	enum:llvm::X86ISD::NodeType
BOOL	Disassembler/X86DisassemblerDecoder.h	/^typedef uint8_t BOOL;$/;"	t
BP_DI	Disassembler/X86Disassembler.cpp	/^    BP_DI = 503,$/;"	e	enum:llvm::X86::__anon4	file:
BP_SI	Disassembler/X86Disassembler.cpp	/^    BP_SI = 502,$/;"	e	enum:llvm::X86::__anon4	file:
BRCOND	X86ISelLowering.h	/^      BRCOND,$/;"	e	enum:llvm::X86ISD::NodeType
BSF	X86ISelLowering.h	/^      BSF,$/;"	e	enum:llvm::X86ISD::NodeType
BSR	X86ISelLowering.h	/^      BSR,$/;"	e	enum:llvm::X86ISD::NodeType
BT	X86ISelLowering.h	/^      BT,$/;"	e	enum:llvm::X86ISD::NodeType
BUILT_SOURCES	Makefile	/^BUILT_SOURCES = X86GenRegisterInfo.inc X86GenInstrInfo.inc \\$/;"	m
BX_DI	Disassembler/X86Disassembler.cpp	/^    BX_DI = 501,$/;"	e	enum:llvm::X86::__anon4	file:
BX_SI	Disassembler/X86Disassembler.cpp	/^    BX_SI = 500,$/;"	e	enum:llvm::X86::__anon4	file:
BZHI	X86ISelLowering.h	/^      BZHI,   \/\/ BZHI - Zero high bits$/;"	e	enum:llvm::X86ISD::NodeType
Base	X86InstrBuilder.h	/^  } Base;$/;"	m	struct:llvm::X86AddressMode	typeref:union:llvm::X86AddressMode::__anon43
BasePtr	X86RegisterInfo.h	/^  unsigned BasePtr;$/;"	m	class:llvm::X86RegisterInfo
BaseReg	AsmParser/X86AsmParser.cpp	/^    unsigned BaseReg, IndexReg, TmpReg, Scale;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
BaseReg	AsmParser/X86AsmParser.cpp	/^    unsigned BaseReg;$/;"	m	struct:__anon2::X86Operand::MemOp	file:
BaseType	X86ISelDAGToDAG.cpp	/^    } BaseType;$/;"	m	struct:__anon47::X86ISelAddressMode	typeref:enum:__anon47::X86ISelAddressMode::__anon48	file:
BaseType	X86InstrBuilder.h	/^  } BaseType;$/;"	m	struct:llvm::X86AddressMode	typeref:enum:llvm::X86AddressMode::__anon42
Base_FrameIndex	X86ISelDAGToDAG.cpp	/^    int Base_FrameIndex;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
Base_Reg	X86ISelDAGToDAG.cpp	/^    SDValue Base_Reg;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
BlockAddr	X86ISelDAGToDAG.cpp	/^    const BlockAddress *BlockAddr;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
BuildFILD	X86ISelLowering.cpp	/^SDValue X86TargetLowering::BuildFILD(SDValue Op, EVT SrcVT, SDValue Chain,$/;"	f	class:X86TargetLowering
Bundles	X86FloatingPoint.cpp	/^    EdgeBundles *Bundles;$/;"	m	struct:__anon39::FPS	file:
BytesToPopOnReturn	X86MachineFunctionInfo.h	/^  unsigned BytesToPopOnReturn;$/;"	m	class:llvm::X86MachineFunctionInfo
CALL	X86ISelLowering.h	/^      CALL,$/;"	e	enum:llvm::X86ISD::NodeType
CC_X86_AnyReg_Error	X86CallingConv.h	/^inline bool CC_X86_AnyReg_Error(unsigned &, MVT &, MVT &,$/;"	f	namespace:llvm
CC_X86_CDeclMethod_SRet	X86CallingConv.h	/^inline bool CC_X86_CDeclMethod_SRet(unsigned &ValNo, MVT &ValVT, MVT &LocVT,$/;"	f	namespace:llvm
CFI	X86JITInfo.cpp	74;"	d	file:
CFI	X86JITInfo.cpp	79;"	d	file:
CGBR	X86InstrInfo.cpp	/^    CGBR() : MachineFunctionPass(ID) {}$/;"	f	struct:__anon45::CGBR
CGBR	X86InstrInfo.cpp	/^  struct CGBR : public MachineFunctionPass {$/;"	s	namespace:__anon45	file:
CMOV	X86ISelLowering.h	/^      CMOV,$/;"	e	enum:llvm::X86ISD::NodeType
CMP	X86ISelLowering.h	/^      CMP, COMI, UCOMI,$/;"	e	enum:llvm::X86ISD::NodeType
CMPEQCombine	X86ISelLowering.cpp	/^static SDValue CMPEQCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
CMPM	X86ISelLowering.h	/^      CMPM,$/;"	e	enum:llvm::X86ISD::NodeType
CMPMU	X86ISelLowering.h	/^      CMPMU,$/;"	e	enum:llvm::X86ISD::NodeType
CMPP	X86ISelLowering.h	/^      CMPP,$/;"	e	enum:llvm::X86ISD::NodeType
COMI	X86ISelLowering.h	/^      CMP, COMI, UCOMI,$/;"	e	enum:llvm::X86ISD::NodeType
COND_A	X86InstrInfo.h	/^    COND_A  = 0,$/;"	e	enum:llvm::X86::CondCode
COND_AE	X86InstrInfo.h	/^    COND_AE = 1,$/;"	e	enum:llvm::X86::CondCode
COND_B	X86InstrInfo.h	/^    COND_B  = 2,$/;"	e	enum:llvm::X86::CondCode
COND_BE	X86InstrInfo.h	/^    COND_BE = 3,$/;"	e	enum:llvm::X86::CondCode
COND_E	X86InstrInfo.h	/^    COND_E  = 4,$/;"	e	enum:llvm::X86::CondCode
COND_G	X86InstrInfo.h	/^    COND_G  = 5,$/;"	e	enum:llvm::X86::CondCode
COND_GE	X86InstrInfo.h	/^    COND_GE = 6,$/;"	e	enum:llvm::X86::CondCode
COND_INVALID	X86InstrInfo.h	/^    COND_INVALID$/;"	e	enum:llvm::X86::CondCode
COND_L	X86InstrInfo.h	/^    COND_L  = 7,$/;"	e	enum:llvm::X86::CondCode
COND_LE	X86InstrInfo.h	/^    COND_LE = 8,$/;"	e	enum:llvm::X86::CondCode
COND_NE	X86InstrInfo.h	/^    COND_NE = 9,$/;"	e	enum:llvm::X86::CondCode
COND_NE_OR_P	X86InstrInfo.h	/^    COND_NE_OR_P,$/;"	e	enum:llvm::X86::CondCode
COND_NO	X86InstrInfo.h	/^    COND_NO = 10,$/;"	e	enum:llvm::X86::CondCode
COND_NP	X86InstrInfo.h	/^    COND_NP = 11,$/;"	e	enum:llvm::X86::CondCode
COND_NP_OR_E	X86InstrInfo.h	/^    COND_NP_OR_E,$/;"	e	enum:llvm::X86::CondCode
COND_NS	X86InstrInfo.h	/^    COND_NS = 12,$/;"	e	enum:llvm::X86::CondCode
COND_O	X86InstrInfo.h	/^    COND_O  = 13,$/;"	e	enum:llvm::X86::CondCode
COND_P	X86InstrInfo.h	/^    COND_P  = 14,$/;"	e	enum:llvm::X86::CondCode
COND_S	X86InstrInfo.h	/^    COND_S  = 15,$/;"	e	enum:llvm::X86::CondCode
CONSUME_FUNC	Disassembler/X86DisassemblerDecoder.c	200;"	d	file:
CONTEXTS_STR	Disassembler/X86DisassemblerDecoderCommon.h	38;"	d
CONTEXTS_SYM	Disassembler/X86DisassemblerDecoderCommon.h	28;"	d
CP	X86ISelDAGToDAG.cpp	/^    const Constant *CP;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
CPU	MCTargetDesc/X86AsmBackend.cpp	/^  StringRef CPU;$/;"	m	class:__anon22::X86AsmBackend	file:
CU	MCTargetDesc/X86AsmBackend.cpp	/^namespace CU {$/;"	n	namespace:__anon23	file:
CU_NUM_SAVED_REGS	MCTargetDesc/X86AsmBackend.cpp	/^  enum { CU_NUM_SAVED_REGS = 6 };$/;"	e	enum:__anon23::DarwinX86AsmBackend::__anon24	file:
CallRegIndirect	X86Subtarget.h	/^  bool CallRegIndirect;$/;"	m	class:llvm::X86Subtarget
CalleeSavedFrameSize	X86MachineFunctionInfo.h	/^  unsigned CalleeSavedFrameSize;$/;"	m	class:llvm::X86MachineFunctionInfo
CanFoldXORWithAllOnes	X86ISelLowering.cpp	/^static bool CanFoldXORWithAllOnes(const SDNode *N) {$/;"	f	file:
CanLowerReturn	X86ISelLowering.cpp	/^X86TargetLowering::CanLowerReturn(CallingConv::ID CallConv,$/;"	f	class:X86TargetLowering
ChangeVSETULTtoVSETULE	X86ISelLowering.cpp	/^static SDValue ChangeVSETULTtoVSETULE(SDValue Op1, SelectionDAG &DAG)$/;"	f	file:
CheckBaseRegAndIndexReg	AsmParser/X86AsmParser.cpp	/^static bool CheckBaseRegAndIndexReg(unsigned BaseReg, unsigned IndexReg,$/;"	f	file:
ClassifyBlockAddressReference	X86Subtarget.cpp	/^unsigned char X86Subtarget::ClassifyBlockAddressReference() const {$/;"	f	class:X86Subtarget
ClassifyGlobalReference	X86Subtarget.cpp	/^ClassifyGlobalReference(const GlobalValue *GV, const TargetMachine &TM) const {$/;"	f	class:X86Subtarget
CommuteVectorShuffle	X86ISelLowering.cpp	/^static SDValue CommuteVectorShuffle(ShuffleVectorSDNode *SVOp,$/;"	f	file:
CommuteVectorShuffleMask	X86ISelLowering.cpp	/^static void CommuteVectorShuffleMask(SmallVectorImpl<int> &Mask,$/;"	f	file:
Compact8x32ShuffleNode	X86ISelLowering.cpp	/^SDValue Compact8x32ShuffleNode(ShuffleVectorSDNode *SVOp,$/;"	f	file:
CompactUnwindEncodings	MCTargetDesc/X86AsmBackend.cpp	/^  enum CompactUnwindEncodings {$/;"	g	namespace:__anon23::CU	file:
CompareFP	MCTargetDesc/X86BaseInfo.h	/^    CompareFP  = 5 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
ComputeNumSignBitsForTargetNode	X86ISelLowering.cpp	/^unsigned X86TargetLowering::ComputeNumSignBitsForTargetNode(SDValue Op,$/;"	f	class:X86TargetLowering
Concat128BitVectors	X86ISelLowering.cpp	/^static SDValue Concat128BitVectors(SDValue V1, SDValue V2, EVT VT,$/;"	f	file:
Concat256BitVectors	X86ISelLowering.cpp	/^static SDValue Concat256BitVectors(SDValue V1, SDValue V2, EVT VT,$/;"	f	file:
CondCode	X86InstrInfo.h	/^  enum CondCode {$/;"	g	namespace:llvm::X86
CondMovFP	MCTargetDesc/X86BaseInfo.h	/^    CondMovFP  = 6 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
ConstantI16	X86ISelDAGToDAG.cpp	/^  ConstantI16,$/;"	e	enum:AtomicSz	file:
ConstantI32	X86ISelDAGToDAG.cpp	/^  ConstantI32,$/;"	e	enum:AtomicSz	file:
ConstantI64	X86ISelDAGToDAG.cpp	/^  ConstantI64,$/;"	e	enum:AtomicSz	file:
ConstantI8	X86ISelDAGToDAG.cpp	/^  ConstantI8,$/;"	e	enum:AtomicSz	file:
ContextDecision	Disassembler/X86DisassemblerDecoderCommon.h	/^struct ContextDecision {$/;"	s
ConvertCmpIfNecessary	X86ISelLowering.cpp	/^SDValue X86TargetLowering::ConvertCmpIfNecessary(SDValue Cmp,$/;"	f	class:X86TargetLowering
CopyToFromAsymmetricReg	X86InstrInfo.cpp	/^static unsigned CopyToFromAsymmetricReg(unsigned DestReg, unsigned SrcReg,$/;"	f	file:
CreateCopyOfByValArgument	X86ISelLowering.cpp	/^CreateCopyOfByValArgument(SDValue Src, SDValue Dst, SDValue Chain,$/;"	f	file:
CreateImm	AsmParser/X86AsmParser.cpp	/^  static X86Operand *CreateImm(const MCExpr *Val, SMLoc StartLoc, SMLoc EndLoc){$/;"	f	struct:__anon2::X86Operand
CreateMem	AsmParser/X86AsmParser.cpp	/^  static X86Operand *CreateMem(const MCExpr *Disp, SMLoc StartLoc, SMLoc EndLoc,$/;"	f	struct:__anon2::X86Operand
CreateMem	AsmParser/X86AsmParser.cpp	/^  static X86Operand *CreateMem(unsigned SegReg, const MCExpr *Disp,$/;"	f	struct:__anon2::X86Operand
CreateMemForInlineAsm	AsmParser/X86AsmParser.cpp	/^X86AsmParser::CreateMemForInlineAsm(unsigned SegReg, const MCExpr *Disp,$/;"	f	class:X86AsmParser
CreateReg	AsmParser/X86AsmParser.cpp	/^  static X86Operand *CreateReg(unsigned RegNo, SMLoc StartLoc, SMLoc EndLoc,$/;"	f	struct:__anon2::X86Operand
CreateToken	AsmParser/X86AsmParser.cpp	/^  static X86Operand *CreateToken(StringRef Str, SMLoc Loc) {$/;"	f	struct:__anon2::X86Operand
Ctx	MCTargetDesc/X86MCCodeEmitter.cpp	/^  MCContext &Ctx;$/;"	m	class:__anon29::X86MCCodeEmitter	file:
Ctx	X86MCInstLower.cpp	/^  MCContext &Ctx;$/;"	m	class:__anon51::X86MCInstLower	file:
Cycles	X86PadShortFunction.cpp	/^    unsigned int Cycles;$/;"	m	struct:__anon52::VisitedBBInfo	file:
DEBUG_TYPE	InstPrinter/X86ATTInstPrinter.cpp	15;"	d	file:
DEBUG_TYPE	InstPrinter/X86IntelInstPrinter.cpp	15;"	d	file:
DEBUG_TYPE	MCTargetDesc/X86MCCodeEmitter.cpp	14;"	d	file:
DEBUG_TYPE	X86CodeEmitter.cpp	15;"	d	file:
DEBUG_TYPE	X86FixupLEAs.cpp	16;"	d	file:
DEBUG_TYPE	X86FloatingPoint.cpp	26;"	d	file:
DEBUG_TYPE	X86ISelDAGToDAG.cpp	15;"	d	file:
DEBUG_TYPE	X86ISelLowering.cpp	15;"	d	file:
DEBUG_TYPE	X86JITInfo.cpp	14;"	d	file:
DEBUG_TYPE	X86PadShortFunction.cpp	18;"	d	file:
DEBUG_TYPE	X86SelectionDAGInfo.cpp	14;"	d	file:
DEBUG_TYPE	X86Subtarget.cpp	14;"	d	file:
DEBUG_TYPE	X86TargetTransformInfo.cpp	17;"	d	file:
DEBUG_TYPE	X86VZeroUpper.cpp	17;"	d	file:
DEC	X86ISelDAGToDAG.cpp	/^  DEC,$/;"	e	enum:AtomicOpc	file:
DEC	X86ISelLowering.h	/^      INC, DEC, OR, XOR, AND,$/;"	e	enum:llvm::X86ISD::NodeType
DIRS	Makefile	/^DIRS = InstPrinter AsmParser Disassembler TargetInfo MCTargetDesc Utils$/;"	m
DL	X86TargetMachine.h	/^  const DataLayout   DL; \/\/ Calculates type size & alignment$/;"	m	class:llvm::X86TargetMachine
DWARFFlavour	MCTargetDesc/X86MCTargetDesc.h	/^namespace DWARFFlavour {$/;"	n	namespace:llvm
DarwinX86AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^  DarwinX86AsmBackend(const Target &T, const MCRegisterInfo &MRI, StringRef CPU,$/;"	f	class:__anon23::DarwinX86AsmBackend
DarwinX86AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^class DarwinX86AsmBackend : public X86AsmBackend {$/;"	c	namespace:__anon23	file:
DarwinX86_32AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^  DarwinX86_32AsmBackend(const Target &T, const MCRegisterInfo &MRI,$/;"	f	class:__anon23::DarwinX86_32AsmBackend
DarwinX86_32AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^class DarwinX86_32AsmBackend : public DarwinX86AsmBackend {$/;"	c	namespace:__anon23	file:
DarwinX86_64AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^  DarwinX86_64AsmBackend(const Target &T, const MCRegisterInfo &MRI,$/;"	f	class:__anon23::DarwinX86_64AsmBackend
DarwinX86_64AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^class DarwinX86_64AsmBackend : public DarwinX86AsmBackend {$/;"	c	namespace:__anon23	file:
Data	AsmParser/X86AsmParser.cpp	/^    const char *Data;$/;"	m	struct:__anon2::X86Operand::TokOp	file:
DecodeINSERTPSMask	Utils/X86ShuffleDecode.cpp	/^void DecodeINSERTPSMask(unsigned Imm, SmallVectorImpl<int> &ShuffleMask) {$/;"	f	namespace:llvm
DecodeMOVHLPSMask	Utils/X86ShuffleDecode.cpp	/^void DecodeMOVHLPSMask(unsigned NElts, SmallVectorImpl<int> &ShuffleMask) {$/;"	f	namespace:llvm
DecodeMOVLHPSMask	Utils/X86ShuffleDecode.cpp	/^void DecodeMOVLHPSMask(unsigned NElts, SmallVectorImpl<int> &ShuffleMask) {$/;"	f	namespace:llvm
DecodePALIGNRMask	Utils/X86ShuffleDecode.cpp	/^void DecodePALIGNRMask(MVT VT, unsigned Imm,$/;"	f	namespace:llvm
DecodePSHUFHWMask	Utils/X86ShuffleDecode.cpp	/^void DecodePSHUFHWMask(MVT VT, unsigned Imm,$/;"	f	namespace:llvm
DecodePSHUFLWMask	Utils/X86ShuffleDecode.cpp	/^void DecodePSHUFLWMask(MVT VT, unsigned Imm,$/;"	f	namespace:llvm
DecodePSHUFMask	Utils/X86ShuffleDecode.cpp	/^void DecodePSHUFMask(MVT VT, unsigned Imm, SmallVectorImpl<int> &ShuffleMask) {$/;"	f	namespace:llvm
DecodeSHUFPMask	Utils/X86ShuffleDecode.cpp	/^void DecodeSHUFPMask(MVT VT, unsigned Imm, SmallVectorImpl<int> &ShuffleMask) {$/;"	f	namespace:llvm
DecodeUNPCKHMask	Utils/X86ShuffleDecode.cpp	/^void DecodeUNPCKHMask(MVT VT, SmallVectorImpl<int> &ShuffleMask) {$/;"	f	namespace:llvm
DecodeUNPCKLMask	Utils/X86ShuffleDecode.cpp	/^void DecodeUNPCKLMask(MVT VT, SmallVectorImpl<int> &ShuffleMask) {$/;"	f	namespace:llvm
DecodeVPERM2X128Mask	Utils/X86ShuffleDecode.cpp	/^void DecodeVPERM2X128Mask(MVT VT, unsigned Imm,$/;"	f	namespace:llvm
DecodeVPERMMask	Utils/X86ShuffleDecode.cpp	/^void DecodeVPERMMask(unsigned Imm, SmallVectorImpl<int> &ShuffleMask) {$/;"	f	namespace:llvm
DefaultMemDIOperand	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::DefaultMemDIOperand(SMLoc Loc) {$/;"	f	class:X86AsmParser
DefaultMemSIOperand	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::DefaultMemSIOperand(SMLoc Loc) {$/;"	f	class:X86AsmParser
DetectFamilyModel	MCTargetDesc/X86MCTargetDesc.cpp	/^void X86_MC::DetectFamilyModel(unsigned EAX, unsigned &Family,$/;"	f	class:X86_MC
DetermineREXPrefix	MCTargetDesc/X86MCCodeEmitter.cpp	/^static unsigned DetermineREXPrefix(const MCInst &MI, uint64_t TSFlags,$/;"	f	file:
DisassemblerMode	Disassembler/X86DisassemblerDecoderCommon.h	/^} DisassemblerMode;$/;"	t	typeref:enum:__anon21
Disp	AsmParser/X86AsmParser.cpp	/^    const MCExpr *Disp;$/;"	m	struct:__anon2::X86Operand::MemOp	file:
Disp	X86ISelDAGToDAG.cpp	/^    int32_t Disp;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
Disp	X86InstrBuilder.h	/^  int Disp;$/;"	m	struct:llvm::X86AddressMode
DoSelectCall	X86FastISel.cpp	/^bool X86FastISel::DoSelectCall(const Instruction *I, const char *MemIntName) {$/;"	f	class:X86FastISel
EABase	Disassembler/X86DisassemblerDecoder.h	/^} EABase;$/;"	t	typeref:enum:__anon5
EADisplacement	Disassembler/X86DisassemblerDecoder.h	/^} EADisplacement;$/;"	t	typeref:enum:__anon8
EAX	MCTargetDesc/X86MCTargetDesc.h	/^    EAX = 0, ECX = 1, EDX = 2, EBX = 3, ESP = 4, EBP = 5, ESI = 6, EDI = 7$/;"	e	enum:llvm::N86::__anon31
EA_BASES_16BIT	Disassembler/X86DisassemblerDecoder.h	112;"	d
EA_BASES_32BIT	Disassembler/X86DisassemblerDecoder.h	148;"	d
EA_BASES_64BIT	Disassembler/X86DisassemblerDecoder.h	184;"	d
EA_BASE_NONE	Disassembler/X86DisassemblerDecoder.h	/^  EA_BASE_NONE,$/;"	e	enum:__anon5
EA_DISP_16	Disassembler/X86DisassemblerDecoder.h	/^  EA_DISP_16,$/;"	e	enum:__anon8
EA_DISP_32	Disassembler/X86DisassemblerDecoder.h	/^  EA_DISP_32$/;"	e	enum:__anon8
EA_DISP_8	Disassembler/X86DisassemblerDecoder.h	/^  EA_DISP_8,$/;"	e	enum:__anon8
EA_DISP_NONE	Disassembler/X86DisassemblerDecoder.h	/^  EA_DISP_NONE,$/;"	e	enum:__anon8
EA_max	Disassembler/X86DisassemblerDecoder.h	/^  EA_max$/;"	e	enum:__anon5
EBP	MCTargetDesc/X86MCTargetDesc.h	/^    EAX = 0, ECX = 1, EDX = 2, EBX = 3, ESP = 4, EBP = 5, ESI = 6, EDI = 7$/;"	e	enum:llvm::N86::__anon31
EBX	MCTargetDesc/X86MCTargetDesc.h	/^    EAX = 0, ECX = 1, EDX = 2, EBX = 3, ESP = 4, EBP = 5, ESI = 6, EDI = 7$/;"	e	enum:llvm::N86::__anon31
ECX	MCTargetDesc/X86MCTargetDesc.h	/^    EAX = 0, ECX = 1, EDX = 2, EBX = 3, ESP = 4, EBP = 5, ESI = 6, EDI = 7$/;"	e	enum:llvm::N86::__anon31
EDI	MCTargetDesc/X86MCTargetDesc.h	/^    EAX = 0, ECX = 1, EDX = 2, EBX = 3, ESP = 4, EBP = 5, ESI = 6, EDI = 7$/;"	e	enum:llvm::N86::__anon31
EDX	MCTargetDesc/X86MCTargetDesc.h	/^    EAX = 0, ECX = 1, EDX = 2, EBX = 3, ESP = 4, EBP = 5, ESI = 6, EDI = 7$/;"	e	enum:llvm::N86::__anon31
EH_RETURN	X86ISelLowering.h	/^      EH_RETURN,$/;"	e	enum:llvm::X86ISD::NodeType
EH_SJLJ_LONGJMP	X86ISelLowering.h	/^      EH_SJLJ_LONGJMP,$/;"	e	enum:llvm::X86ISD::NodeType
EH_SJLJ_SETJMP	X86ISelLowering.h	/^      EH_SJLJ_SETJMP,$/;"	e	enum:llvm::X86ISD::NodeType
ELFX86AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^  ELFX86AsmBackend(const Target &T, uint8_t _OSABI, StringRef CPU)$/;"	f	class:__anon23::ELFX86AsmBackend
ELFX86AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^class ELFX86AsmBackend : public X86AsmBackend {$/;"	c	namespace:__anon23	file:
ELFX86_32AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^  ELFX86_32AsmBackend(const Target &T, uint8_t OSABI, StringRef CPU)$/;"	f	class:__anon23::ELFX86_32AsmBackend
ELFX86_32AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^class ELFX86_32AsmBackend : public ELFX86AsmBackend {$/;"	c	namespace:__anon23	file:
ELFX86_64AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^  ELFX86_64AsmBackend(const Target &T, uint8_t OSABI, StringRef CPU)$/;"	f	class:__anon23::ELFX86_64AsmBackend
ELFX86_64AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^class ELFX86_64AsmBackend : public ELFX86AsmBackend {$/;"	c	namespace:__anon23	file:
ENCODINGS	Disassembler/X86DisassemblerDecoderCommon.h	/^    ENCODINGS$/;"	e	enum:__anon18
ENCODINGS	Disassembler/X86DisassemblerDecoderCommon.h	377;"	d
ENCODING_max	Disassembler/X86DisassemblerDecoderCommon.h	/^    ENCODING_max$/;"	e	enum:__anon18
ENTRY	Disassembler/X86Disassembler.cpp	175;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	180;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	418;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	420;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	424;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	428;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	469;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	473;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	524;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	532;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	585;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	589;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	590;"	d	file:
ENTRY	Disassembler/X86Disassembler.cpp	592;"	d	file:
ENTRY	Disassembler/X86DisassemblerDecoder.h	403;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	405;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	406;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	408;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	420;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	425;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	434;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	436;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	455;"	d
ENTRY	Disassembler/X86DisassemblerDecoder.h	457;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	276;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	281;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	335;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	340;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	410;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	415;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	510;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	515;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	534;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	539;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	69;"	d
ENUM_ENTRY	Disassembler/X86DisassemblerDecoderCommon.h	74;"	d
ES	X86ISelDAGToDAG.cpp	/^    const char *ES;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
ESI	MCTargetDesc/X86MCTargetDesc.h	/^    EAX = 0, ECX = 1, EDX = 2, EBX = 3, ESP = 4, EBP = 5, ESI = 6, EDI = 7$/;"	e	enum:llvm::N86::__anon31
ESP	MCTargetDesc/X86MCTargetDesc.h	/^    EAX = 0, ECX = 1, EDX = 2, EBX = 3, ESP = 4, EBP = 5, ESI = 6, EDI = 7$/;"	e	enum:llvm::N86::__anon31
EVEX	MCTargetDesc/X86BaseInfo.h	/^    EVEX = 3,$/;"	e	enum:llvm::X86II::__anon26
EVEX_B	MCTargetDesc/X86BaseInfo.h	/^    EVEX_B      = 1U << 9,$/;"	e	enum:llvm::X86II::__anon26
EVEX_CD8EMask	MCTargetDesc/X86BaseInfo.h	/^    EVEX_CD8EMask = 3,$/;"	e	enum:llvm::X86II::__anon26
EVEX_CD8EShift	MCTargetDesc/X86BaseInfo.h	/^    EVEX_CD8EShift = VEXShift + 10,$/;"	e	enum:llvm::X86II::__anon26
EVEX_CD8VMask	MCTargetDesc/X86BaseInfo.h	/^    EVEX_CD8VMask = 7,$/;"	e	enum:llvm::X86II::__anon26
EVEX_CD8VShift	MCTargetDesc/X86BaseInfo.h	/^    EVEX_CD8VShift = EVEX_CD8EShift + 2,$/;"	e	enum:llvm::X86II::__anon26
EVEX_K	MCTargetDesc/X86BaseInfo.h	/^    EVEX_K      = 1U << 6,$/;"	e	enum:llvm::X86II::__anon26
EVEX_L2	MCTargetDesc/X86BaseInfo.h	/^    EVEX_L2     = 1U << 8,$/;"	e	enum:llvm::X86II::__anon26
EVEX_RC	MCTargetDesc/X86BaseInfo.h	/^    EVEX_RC = 1U << 17$/;"	e	enum:llvm::X86II::__anon26
EVEX_Z	MCTargetDesc/X86BaseInfo.h	/^    EVEX_Z      = 1U << 7,$/;"	e	enum:llvm::X86II::__anon26
EltsFromConsecutiveLoads	X86ISelLowering.cpp	/^static SDValue EltsFromConsecutiveLoads(EVT VT, SmallVectorImpl<SDValue> &Elts,$/;"	f	file:
EmitAnyX86InstComments	InstPrinter/X86InstComments.cpp	/^void llvm::EmitAnyX86InstComments(const MCInst *MI, raw_ostream &OS,$/;"	f	class:llvm
EmitAtomicLoadArith	X86ISelLowering.cpp	/^X86TargetLowering::EmitAtomicLoadArith(MachineInstr *MI,$/;"	f	class:X86TargetLowering
EmitAtomicLoadArith6432	X86ISelLowering.cpp	/^X86TargetLowering::EmitAtomicLoadArith6432(MachineInstr *MI,$/;"	f	class:X86TargetLowering
EmitByte	MCTargetDesc/X86MCCodeEmitter.cpp	/^  void EmitByte(unsigned char C, unsigned &CurByte, raw_ostream &OS) const {$/;"	f	class:__anon29::X86MCCodeEmitter
EmitCmp	X86ISelLowering.cpp	/^SDValue X86TargetLowering::EmitCmp(SDValue Op0, SDValue Op1, unsigned X86CC,$/;"	f	class:X86TargetLowering
EmitConstant	MCTargetDesc/X86MCCodeEmitter.cpp	/^  void EmitConstant(uint64_t Val, unsigned Size, unsigned &CurByte,$/;"	f	class:__anon29::X86MCCodeEmitter
EmitEndOfAsmFile	X86AsmPrinter.cpp	/^void X86AsmPrinter::EmitEndOfAsmFile(Module &M) {$/;"	f	class:X86AsmPrinter
EmitFunctionEntryCode	X86ISelDAGToDAG.cpp	/^void X86DAGToDAGISel::EmitFunctionEntryCode() {$/;"	f	class:X86DAGToDAGISel
EmitImmediate	MCTargetDesc/X86MCCodeEmitter.cpp	/^EmitImmediate(const MCOperand &DispOp, SMLoc Loc, unsigned Size,$/;"	f	class:X86MCCodeEmitter
EmitInstrWithCustomInserter	X86ISelLowering.cpp	/^X86TargetLowering::EmitInstrWithCustomInserter(MachineInstr *MI,$/;"	f	class:X86TargetLowering
EmitInstruction	X86MCInstLower.cpp	/^void X86AsmPrinter::EmitInstruction(const MachineInstr *MI) {$/;"	f	class:X86AsmPrinter
EmitLoweredSegAlloca	X86ISelLowering.cpp	/^X86TargetLowering::EmitLoweredSegAlloca(MachineInstr *MI, MachineBasicBlock *BB,$/;"	f	class:X86TargetLowering
EmitLoweredSelect	X86ISelLowering.cpp	/^X86TargetLowering::EmitLoweredSelect(MachineInstr *MI,$/;"	f	class:X86TargetLowering
EmitLoweredTLSCall	X86ISelLowering.cpp	/^X86TargetLowering::EmitLoweredTLSCall(MachineInstr *MI,$/;"	f	class:X86TargetLowering
EmitLoweredWinAlloca	X86ISelLowering.cpp	/^X86TargetLowering::EmitLoweredWinAlloca(MachineInstr *MI,$/;"	f	class:X86TargetLowering
EmitMemModRMByte	MCTargetDesc/X86MCCodeEmitter.cpp	/^void X86MCCodeEmitter::EmitMemModRMByte(const MCInst &MI, unsigned Op,$/;"	f	class:X86MCCodeEmitter
EmitMonitor	X86ISelLowering.cpp	/^static MachineBasicBlock * EmitMonitor(MachineInstr *MI, MachineBasicBlock *BB,$/;"	f	file:
EmitNops	X86MCInstLower.cpp	/^static void EmitNops(MCStreamer &OS, unsigned NumBytes, bool Is64Bit, const MCSubtargetInfo &STI) {$/;"	f	file:
EmitOpcodePrefix	MCTargetDesc/X86MCCodeEmitter.cpp	/^void X86MCCodeEmitter::EmitOpcodePrefix(uint64_t TSFlags, unsigned &CurByte,$/;"	f	class:X86MCCodeEmitter
EmitPCMPSTRI	X86ISelLowering.cpp	/^static MachineBasicBlock *EmitPCMPSTRI(MachineInstr *MI, MachineBasicBlock *BB,$/;"	f	file:
EmitPCMPSTRM	X86ISelLowering.cpp	/^static MachineBasicBlock *EmitPCMPSTRM(MachineInstr *MI, MachineBasicBlock *BB,$/;"	f	file:
EmitRegModRMByte	MCTargetDesc/X86MCCodeEmitter.cpp	/^  void EmitRegModRMByte(const MCOperand &ModRMReg, unsigned RegOpcodeFld,$/;"	f	class:__anon29::X86MCCodeEmitter
EmitSIBByte	MCTargetDesc/X86MCCodeEmitter.cpp	/^  void EmitSIBByte(unsigned SS, unsigned Index, unsigned Base,$/;"	f	class:__anon29::X86MCCodeEmitter
EmitSegmentOverridePrefix	MCTargetDesc/X86MCCodeEmitter.cpp	/^void X86MCCodeEmitter::EmitSegmentOverridePrefix(unsigned &CurByte,$/;"	f	class:X86MCCodeEmitter
EmitSpecialCodeForMain	X86ISelDAGToDAG.cpp	/^void X86DAGToDAGISel::EmitSpecialCodeForMain(MachineBasicBlock *BB,$/;"	f	class:X86DAGToDAGISel
EmitStartOfAsmFile	X86AsmPrinter.cpp	/^void X86AsmPrinter::EmitStartOfAsmFile(Module &M) {$/;"	f	class:X86AsmPrinter
EmitTailCallLoadRetAddr	X86ISelLowering.cpp	/^X86TargetLowering::EmitTailCallLoadRetAddr(SelectionDAG &DAG,$/;"	f	class:X86TargetLowering
EmitTailCallStoreRetAddr	X86ISelLowering.cpp	/^EmitTailCallStoreRetAddr(SelectionDAG & DAG, MachineFunction &MF,$/;"	f	file:
EmitTargetCodeForMemcpy	X86SelectionDAGInfo.cpp	/^X86SelectionDAGInfo::EmitTargetCodeForMemcpy(SelectionDAG &DAG, SDLoc dl,$/;"	f	class:X86SelectionDAGInfo
EmitTargetCodeForMemset	X86SelectionDAGInfo.cpp	/^X86SelectionDAGInfo::EmitTargetCodeForMemset(SelectionDAG &DAG, SDLoc dl,$/;"	f	class:X86SelectionDAGInfo
EmitTest	X86ISelLowering.cpp	/^SDValue X86TargetLowering::EmitTest(SDValue Op, unsigned X86CC,$/;"	f	class:X86TargetLowering
EmitVAARG64WithCustomInserter	X86ISelLowering.cpp	/^X86TargetLowering::EmitVAARG64WithCustomInserter($/;"	f	class:X86TargetLowering
EmitVAStartSaveXMMRegsWithCustomInserter	X86ISelLowering.cpp	/^X86TargetLowering::EmitVAStartSaveXMMRegsWithCustomInserter($/;"	f	class:X86TargetLowering
EmitVEXOpcodePrefix	MCTargetDesc/X86MCCodeEmitter.cpp	/^void X86MCCodeEmitter::EmitVEXOpcodePrefix(uint64_t TSFlags, unsigned &CurByte,$/;"	f	class:X86MCCodeEmitter
EmitXBegin	X86ISelLowering.cpp	/^static MachineBasicBlock *EmitXBegin(MachineInstr *MI, MachineBasicBlock *MBB,$/;"	f	file:
Emitter	X86CodeEmitter.cpp	/^    explicit Emitter(X86TargetMachine &tm, CodeEmitter &mce)$/;"	f	class:__anon36::Emitter
Emitter	X86CodeEmitter.cpp	/^  class Emitter : public MachineFunctionPass {$/;"	c	namespace:__anon36	file:
EncodeInstruction	MCTargetDesc/X86MCCodeEmitter.cpp	/^EncodeInstruction(const MCInst &MI, raw_ostream &OS,$/;"	f	class:X86MCCodeEmitter
EncodingMask	MCTargetDesc/X86BaseInfo.h	/^    EncodingMask = 0x3 << EncodingShift,$/;"	e	enum:llvm::X86II::__anon26
EncodingShift	MCTargetDesc/X86BaseInfo.h	/^    EncodingShift = SSEDomainShift + 2,$/;"	e	enum:llvm::X86II::__anon26
EndLoc	AsmParser/X86AsmParser.cpp	/^  SMLoc StartLoc, EndLoc;$/;"	m	struct:__anon2::X86Operand	file:
Error	AsmParser/X86AsmParser.cpp	/^  bool Error(SMLoc L, const Twine &Msg,$/;"	f	class:__anon1::X86AsmParser	file:
ErrorAndEatStatement	AsmParser/X86AsmParser.cpp	/^  bool ErrorAndEatStatement(SMLoc L, const Twine &Msg,$/;"	f	class:__anon1::X86AsmParser	file:
ErrorOperand	AsmParser/X86AsmParser.cpp	/^  X86Operand *ErrorOperand(SMLoc Loc, StringRef Msg) {$/;"	f	class:__anon1::X86AsmParser	file:
Expand2AddrUndef	X86InstrInfo.cpp	/^static bool Expand2AddrUndef(MachineInstrBuilder &MIB,$/;"	f	file:
ExpandInlineAsm	X86ISelLowering.cpp	/^bool X86TargetLowering::ExpandInlineAsm(CallInst *CI) const {$/;"	f	class:X86TargetLowering
Externals	X86COFFMachineModuleInfo.h	/^  DenseSet<MCSymbol const *> Externals;$/;"	m	class:llvm::X86COFFMachineModuleInfo
Extract128BitVector	X86ISelLowering.cpp	/^static SDValue Extract128BitVector(SDValue Vec, unsigned IdxVal,$/;"	f	file:
Extract256BitVector	X86ISelLowering.cpp	/^static SDValue Extract256BitVector(SDValue Vec, unsigned IdxVal,$/;"	f	file:
ExtractBitFromMaskVector	X86ISelLowering.cpp	/^static SDValue ExtractBitFromMaskVector(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
ExtractSubVector	X86ISelLowering.cpp	/^static SDValue ExtractSubVector(SDValue Vec, unsigned IdxVal,$/;"	f	file:
FALSE	Disassembler/X86DisassemblerDecoder.c	26;"	d	file:
FAND	X86ISelLowering.h	/^      FAND,$/;"	e	enum:llvm::X86ISD::NodeType
FANDN	X86ISelLowering.h	/^      FANDN,$/;"	e	enum:llvm::X86ISD::NodeType
FGETSIGNx86	X86ISelLowering.h	/^      FGETSIGNx86,$/;"	e	enum:llvm::X86ISD::NodeType
FHADD	X86ISelLowering.h	/^      FHADD,$/;"	e	enum:llvm::X86ISD::NodeType
FHSUB	X86ISelLowering.h	/^      FHSUB,$/;"	e	enum:llvm::X86ISD::NodeType
FILD	X86ISelLowering.h	/^      FILD,$/;"	e	enum:llvm::X86ISD::NodeType
FILD_FLAG	X86ISelLowering.h	/^      FILD_FLAG,$/;"	e	enum:llvm::X86ISD::NodeType
FIRST_NUMBER	X86ISelLowering.h	/^      FIRST_NUMBER = ISD::BUILTIN_OP_END,$/;"	e	enum:llvm::X86ISD::NodeType
FLD	X86ISelLowering.h	/^      FLD,$/;"	e	enum:llvm::X86ISD::NodeType
FMADD	X86ISelLowering.h	/^      FMADD,$/;"	e	enum:llvm::X86ISD::NodeType
FMADDSUB	X86ISelLowering.h	/^      FMADDSUB,$/;"	e	enum:llvm::X86ISD::NodeType
FMAX	X86ISelLowering.h	/^      FMAX, FMIN,$/;"	e	enum:llvm::X86ISD::NodeType
FMAXC	X86ISelLowering.h	/^      FMAXC, FMINC,$/;"	e	enum:llvm::X86ISD::NodeType
FMIN	X86ISelLowering.h	/^      FMAX, FMIN,$/;"	e	enum:llvm::X86ISD::NodeType
FMINC	X86ISelLowering.h	/^      FMAXC, FMINC,$/;"	e	enum:llvm::X86ISD::NodeType
FMSUB	X86ISelLowering.h	/^      FMSUB,$/;"	e	enum:llvm::X86ISD::NodeType
FMSUBADD	X86ISelLowering.h	/^      FMSUBADD,$/;"	e	enum:llvm::X86ISD::NodeType
FNMADD	X86ISelLowering.h	/^      FNMADD,$/;"	e	enum:llvm::X86ISD::NodeType
FNMSUB	X86ISelLowering.h	/^      FNMSUB,$/;"	e	enum:llvm::X86ISD::NodeType
FNSTCW16m	X86ISelLowering.h	/^      FNSTCW16m,$/;"	e	enum:llvm::X86ISD::NodeType
FNSTSW16r	X86ISelLowering.h	/^      FNSTSW16r,$/;"	e	enum:llvm::X86ISD::NodeType
FOR	X86ISelLowering.h	/^      FOR,$/;"	e	enum:llvm::X86ISD::NodeType
FPS	X86FloatingPoint.cpp	/^    FPS() : MachineFunctionPass(ID) {$/;"	f	struct:__anon39::FPS
FPS	X86FloatingPoint.cpp	/^  struct FPS : public MachineFunctionPass {$/;"	s	namespace:__anon39	file:
FPTypeMask	MCTargetDesc/X86BaseInfo.h	/^    FPTypeMask  = 7 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
FPTypeShift	MCTargetDesc/X86BaseInfo.h	/^    FPTypeShift = ImmShift + 4,$/;"	e	enum:llvm::X86II::__anon26
FP_TO_INT16_IN_MEM	X86ISelLowering.h	/^      FP_TO_INT16_IN_MEM,$/;"	e	enum:llvm::X86ISD::NodeType
FP_TO_INT32_IN_MEM	X86ISelLowering.h	/^      FP_TO_INT32_IN_MEM,$/;"	e	enum:llvm::X86ISD::NodeType
FP_TO_INT64_IN_MEM	X86ISelLowering.h	/^      FP_TO_INT64_IN_MEM,$/;"	e	enum:llvm::X86ISD::NodeType
FP_TO_INTHelper	X86ISelLowering.cpp	/^X86TargetLowering:: FP_TO_INTHelper(SDValue Op, SelectionDAG &DAG,$/;"	f	class:X86TargetLowering
FRCP	X86ISelLowering.h	/^      FRSQRT, FRCP,$/;"	e	enum:llvm::X86ISD::NodeType
FRSQRT	X86ISelLowering.h	/^      FRSQRT, FRCP,$/;"	e	enum:llvm::X86ISD::NodeType
FSETCC	X86ISelLowering.h	/^      FSETCC,$/;"	e	enum:llvm::X86ISD::NodeType
FSRL	X86ISelLowering.h	/^      FSRL,$/;"	e	enum:llvm::X86ISD::NodeType
FST	X86ISelLowering.h	/^      FST,$/;"	e	enum:llvm::X86ISD::NodeType
FXOR	X86ISelLowering.h	/^      FXOR,$/;"	e	enum:llvm::X86ISD::NodeType
FastLowerArguments	X86FastISel.cpp	/^bool X86FastISel::FastLowerArguments() {$/;"	f	class:X86FastISel
FixCount	X86FloatingPoint.cpp	/^      unsigned FixCount;$/;"	m	struct:__anon39::FPS::LiveBundle	file:
FixStack	X86FloatingPoint.cpp	/^      unsigned char FixStack[8];$/;"	m	struct:__anon39::FPS::LiveBundle	file:
FixupLEAPass	X86FixupLEAs.cpp	/^    FixupLEAPass() : MachineFunctionPass(ID) {}$/;"	f	class:__anon38::FixupLEAPass
FixupLEAPass	X86FixupLEAs.cpp	/^  class FixupLEAPass : public MachineFunctionPass {$/;"	c	namespace:__anon38	file:
Fixups	MCTargetDesc/X86FixupKinds.h	/^enum Fixups {$/;"	g	namespace:llvm::X86
Flags	X86InstrInfo.cpp	/^  uint16_t Flags;$/;"	m	struct:X86OpTblEntry	file:
FnHasLiveInYmm	X86VZeroUpper.cpp	/^    bool FnHasLiveInYmm;$/;"	m	struct:__anon55::VZeroUpperInserter	file:
FoldMaskAndShiftToExtract	X86ISelDAGToDAG.cpp	/^static bool FoldMaskAndShiftToExtract(SelectionDAG &DAG, SDValue N,$/;"	f	file:
FoldMaskAndShiftToScale	X86ISelDAGToDAG.cpp	/^static bool FoldMaskAndShiftToScale(SelectionDAG &DAG, SDValue N,$/;"	f	file:
FoldMaskedShiftToScaledMask	X86ISelDAGToDAG.cpp	/^static bool FoldMaskedShiftToScaledMask(SelectionDAG &DAG, SDValue N,$/;"	f	file:
FoldOffsetIntoAddress	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::FoldOffsetIntoAddress(uint64_t Offset,$/;"	f	class:X86DAGToDAGISel
ForceFramePointer	X86MachineFunctionInfo.h	/^  bool ForceFramePointer;$/;"	m	class:llvm::X86MachineFunctionInfo
FormMask	MCTargetDesc/X86BaseInfo.h	/^    FormMask       = 127,$/;"	e	enum:llvm::X86II::__anon26
ForwardST0Table	X86FloatingPoint.cpp	/^static const TableEntry ForwardST0Table[] = {$/;"	v	file:
ForwardSTiTable	X86FloatingPoint.cpp	/^static const TableEntry ForwardSTiTable[] = {$/;"	v	file:
FrameIndex	X86InstrBuilder.h	/^    int FrameIndex;$/;"	m	union:llvm::X86AddressMode::__anon43
FrameIndexBase	X86ISelDAGToDAG.cpp	/^      FrameIndexBase$/;"	e	enum:__anon47::X86ISelAddressMode::__anon48	file:
FrameIndexBase	X86InstrBuilder.h	/^    FrameIndexBase$/;"	e	enum:llvm::X86AddressMode::__anon42
FrameLowering	X86TargetMachine.h	/^  X86FrameLowering   FrameLowering;$/;"	m	class:llvm::X86TargetMachine
FramePtr	X86RegisterInfo.h	/^  unsigned FramePtr;$/;"	m	class:llvm::X86RegisterInfo
FuncIsMadeTailCallSafe	X86ISelLowering.cpp	/^static bool FuncIsMadeTailCallSafe(CallingConv::ID CC,$/;"	f	file:
FuseInst	X86InstrInfo.cpp	/^static MachineInstr *FuseInst(MachineFunction &MF,$/;"	f	file:
FuseTwoAddrInst	X86InstrInfo.cpp	/^static MachineInstr *FuseTwoAddrInst(MachineFunction &MF, unsigned Opcode,$/;"	f	file:
GENERIC_FIXUP_FUNC	Disassembler/X86DisassemblerDecoder.c	1364;"	d	file:
GETASMPREFIX	X86JITInfo.cpp	57;"	d	file:
GETASMPREFIX2	X86JITInfo.cpp	56;"	d	file:
GET_ASSEMBLER_HEADER	AsmParser/X86AsmParser.cpp	696;"	d	file:
GET_INSTRINFO_CTOR_DTOR	X86InstrInfo.cpp	39;"	d	file:
GET_INSTRINFO_ENUM	Disassembler/X86Disassembler.cpp	32;"	d	file:
GET_INSTRINFO_ENUM	MCTargetDesc/X86MCTargetDesc.h	117;"	d
GET_INSTRINFO_HEADER	X86InstrInfo.h	22;"	d
GET_INSTRINFO_MC_DESC	MCTargetDesc/X86MCTargetDesc.cpp	33;"	d	file:
GET_MATCHER_IMPLEMENTATION	AsmParser/X86AsmParser.cpp	3009;"	d	file:
GET_REGINFO_ENUM	Disassembler/X86Disassembler.cpp	30;"	d	file:
GET_REGINFO_ENUM	MCTargetDesc/X86MCTargetDesc.h	112;"	d
GET_REGINFO_HEADER	X86RegisterInfo.h	19;"	d
GET_REGINFO_MC_DESC	MCTargetDesc/X86MCTargetDesc.cpp	30;"	d	file:
GET_REGINFO_TARGET_DESC	X86RegisterInfo.cpp	42;"	d	file:
GET_REGISTER_MATCHER	AsmParser/X86AsmParser.cpp	3008;"	d	file:
GET_SUBTARGETINFO_CTOR	X86Subtarget.cpp	28;"	d	file:
GET_SUBTARGETINFO_ENUM	Disassembler/X86Disassembler.cpp	34;"	d	file:
GET_SUBTARGETINFO_ENUM	MCTargetDesc/X86MCTargetDesc.h	120;"	d
GET_SUBTARGETINFO_HEADER	X86Subtarget.h	22;"	d
GET_SUBTARGETINFO_MC_DESC	MCTargetDesc/X86MCTargetDesc.cpp	36;"	d	file:
GET_SUBTARGETINFO_TARGET_DESC	X86Subtarget.cpp	27;"	d	file:
GET_SUBTARGET_FEATURE_NAME	AsmParser/X86AsmParser.cpp	3010;"	d	file:
GOT	X86Subtarget.h	/^  GOT,              \/\/ Used on many 32-bit unices in -fPIC mode.$/;"	e	enum:llvm::PICStyles::Style
GOT_None	MCTargetDesc/X86MCCodeEmitter.cpp	/^  GOT_None,$/;"	e	enum:GlobalOffsetTableExprKind	file:
GOT_Normal	MCTargetDesc/X86MCCodeEmitter.cpp	/^  GOT_Normal,$/;"	e	enum:GlobalOffsetTableExprKind	file:
GOT_SymDiff	MCTargetDesc/X86MCCodeEmitter.cpp	/^  GOT_SymDiff$/;"	e	enum:GlobalOffsetTableExprKind	file:
GV	X86ISelDAGToDAG.cpp	/^    const GlobalValue *GV;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
GV	X86InstrBuilder.h	/^  const GlobalValue *GV;$/;"	m	struct:llvm::X86AddressMode
GVOpFlags	X86InstrBuilder.h	/^  unsigned GVOpFlags;$/;"	m	struct:llvm::X86AddressMode
GetAlignedArgumentStackSize	X86ISelLowering.cpp	/^X86TargetLowering::GetAlignedArgumentStackSize(unsigned StackSize,$/;"	f	class:X86TargetLowering
GetCondBranchFromCond	X86InstrInfo.cpp	/^unsigned X86::GetCondBranchFromCond(X86::CondCode CC) {$/;"	f	class:X86
GetCpuIDAndInfo	MCTargetDesc/X86MCTargetDesc.cpp	/^bool X86_MC::GetCpuIDAndInfo(unsigned value, unsigned *rEAX,$/;"	f	class:X86_MC
GetCpuIDAndInfoEx	MCTargetDesc/X86MCTargetDesc.cpp	/^bool X86_MC::GetCpuIDAndInfoEx(unsigned value, unsigned subleaf, unsigned *rEAX,$/;"	f	class:X86_MC
GetOppositeBranchCondition	X86InstrInfo.cpp	/^X86::CondCode X86::GetOppositeBranchCondition(X86::CondCode CC) {$/;"	f	class:X86
GetRelocType	MCTargetDesc/X86ELFObjectWriter.cpp	/^unsigned X86ELFObjectWriter::GetRelocType(const MCValue &Target,$/;"	f	class:X86ELFObjectWriter
GetScratchRegister	X86FrameLowering.cpp	/^GetScratchRegister(bool Is64Bit, const MachineFunction &MF, bool Primary) {$/;"	f	file:
GetSymbolFromOperand	X86MCInstLower.cpp	/^GetSymbolFromOperand(const MachineOperand &MO) const {$/;"	f	class:X86MCInstLower
GetTLSADDR	X86ISelLowering.cpp	/^GetTLSADDR(SelectionDAG &DAG, SDValue Chain, GlobalAddressSDNode *GA,$/;"	f	file:
GetX86RegNum	MCTargetDesc/X86MCCodeEmitter.cpp	/^  unsigned GetX86RegNum(const MCOperand &MO) const {$/;"	f	class:__anon29::X86MCCodeEmitter
GlobalBaseReg	X86ISelLowering.h	/^      GlobalBaseReg,$/;"	e	enum:llvm::X86ISD::NodeType
GlobalBaseReg	X86MachineFunctionInfo.h	/^  unsigned GlobalBaseReg;$/;"	m	class:llvm::X86MachineFunctionInfo
GlobalOffsetTableExprKind	MCTargetDesc/X86MCCodeEmitter.cpp	/^enum GlobalOffsetTableExprKind {$/;"	g	file:
HADD	X86ISelLowering.h	/^      HADD,$/;"	e	enum:llvm::X86ISD::NodeType
HSUB	X86ISelLowering.h	/^      HSUB,$/;"	e	enum:llvm::X86ISD::NodeType
HandleAVX512Operand	AsmParser/X86AsmParser.cpp	/^X86AsmParser::HandleAVX512Operand(SmallVectorImpl<MCParsedAsmOperand*> &Operands,$/;"	f	class:X86AsmParser
Has3DNow0F0FOpcode	MCTargetDesc/X86BaseInfo.h	/^    Has3DNow0F0FOpcode = 1U << 15,$/;"	e	enum:llvm::X86II::__anon26
HasADX	X86Subtarget.h	/^  bool HasADX;$/;"	m	class:llvm::X86Subtarget
HasAES	X86Subtarget.h	/^  bool HasAES;$/;"	m	class:llvm::X86Subtarget
HasBMI	X86Subtarget.h	/^  bool HasBMI;$/;"	m	class:llvm::X86Subtarget
HasBMI2	X86Subtarget.h	/^  bool HasBMI2;$/;"	m	class:llvm::X86Subtarget
HasCDI	X86Subtarget.h	/^  bool HasCDI;$/;"	m	class:llvm::X86Subtarget
HasCMov	X86Subtarget.h	/^  bool HasCMov;$/;"	m	class:llvm::X86Subtarget
HasCmpxchg16b	X86Subtarget.h	/^  bool HasCmpxchg16b;$/;"	m	class:llvm::X86Subtarget
HasERI	X86Subtarget.h	/^  bool HasERI;$/;"	m	class:llvm::X86Subtarget
HasF16C	X86Subtarget.h	/^  bool HasF16C;$/;"	m	class:llvm::X86Subtarget
HasFMA	X86Subtarget.h	/^  bool HasFMA;$/;"	m	class:llvm::X86Subtarget
HasFMA4	X86Subtarget.h	/^  bool HasFMA4;$/;"	m	class:llvm::X86Subtarget
HasFSGSBase	X86Subtarget.h	/^  bool HasFSGSBase;$/;"	m	class:llvm::X86Subtarget
HasHLE	X86Subtarget.h	/^  bool HasHLE;$/;"	m	class:llvm::X86Subtarget
HasLZCNT	X86Subtarget.h	/^  bool HasLZCNT;$/;"	m	class:llvm::X86Subtarget
HasMOVBE	X86Subtarget.h	/^  bool HasMOVBE;$/;"	m	class:llvm::X86Subtarget
HasNestArgument	X86FrameLowering.cpp	/^HasNestArgument(const MachineFunction *MF) {$/;"	f	file:
HasNoSignedComparisonUses	X86ISelDAGToDAG.cpp	/^static bool HasNoSignedComparisonUses(SDNode *N) {$/;"	f	file:
HasNopl	MCTargetDesc/X86AsmBackend.cpp	/^  bool HasNopl;$/;"	m	class:__anon22::X86AsmBackend	file:
HasPCLMUL	X86Subtarget.h	/^  bool HasPCLMUL;$/;"	m	class:llvm::X86Subtarget
HasPFI	X86Subtarget.h	/^  bool HasPFI;$/;"	m	class:llvm::X86Subtarget
HasPOPCNT	X86Subtarget.h	/^  bool HasPOPCNT;$/;"	m	class:llvm::X86Subtarget
HasPRFCHW	X86Subtarget.h	/^  bool HasPRFCHW;$/;"	m	class:llvm::X86Subtarget
HasRDRAND	X86Subtarget.h	/^  bool HasRDRAND;$/;"	m	class:llvm::X86Subtarget
HasRDSEED	X86Subtarget.h	/^  bool HasRDSEED;$/;"	m	class:llvm::X86Subtarget
HasRTM	X86Subtarget.h	/^  bool HasRTM;$/;"	m	class:llvm::X86Subtarget
HasReturn	X86PadShortFunction.cpp	/^    bool HasReturn;$/;"	m	struct:__anon52::VisitedBBInfo	file:
HasSHA	X86Subtarget.h	/^  bool HasSHA;$/;"	m	class:llvm::X86Subtarget
HasSSE4A	X86Subtarget.h	/^  bool HasSSE4A;$/;"	m	class:llvm::X86Subtarget
HasSecRelSymbolRef	MCTargetDesc/X86MCCodeEmitter.cpp	/^static bool HasSecRelSymbolRef(const MCExpr *Expr) {$/;"	f	file:
HasSlowDivide	X86Subtarget.h	/^  bool HasSlowDivide;$/;"	m	class:llvm::X86Subtarget
HasTBM	X86Subtarget.h	/^  bool HasTBM;$/;"	m	class:llvm::X86Subtarget
HasVectorUAMem	X86Subtarget.h	/^  bool HasVectorUAMem;$/;"	m	class:llvm::X86Subtarget
HasX86_64	X86Subtarget.h	/^  bool HasX86_64;$/;"	m	class:llvm::X86Subtarget
HasXOP	X86Subtarget.h	/^  bool HasXOP;$/;"	m	class:llvm::X86Subtarget
I16	X86ISelDAGToDAG.cpp	/^  I16,$/;"	e	enum:AtomicSz	file:
I32	X86ISelDAGToDAG.cpp	/^  I32,$/;"	e	enum:AtomicSz	file:
I64	X86ISelDAGToDAG.cpp	/^  I64,$/;"	e	enum:AtomicSz	file:
I8	X86ISelDAGToDAG.cpp	/^  I8,$/;"	e	enum:AtomicSz	file:
IC	AsmParser/X86AsmParser.cpp	/^    InfixCalculator IC;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
ICToken	AsmParser/X86AsmParser.cpp	/^    typedef std::pair< InfixCalculatorTok, int64_t > ICToken;$/;"	t	class:__anon1::X86AsmParser::InfixCalculator	file:
IC_AND	AsmParser/X86AsmParser.cpp	/^    IC_AND,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_DIVIDE	AsmParser/X86AsmParser.cpp	/^    IC_DIVIDE,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_IMM	AsmParser/X86AsmParser.cpp	/^    IC_IMM,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_LPAREN	AsmParser/X86AsmParser.cpp	/^    IC_LPAREN,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_LSHIFT	AsmParser/X86AsmParser.cpp	/^    IC_LSHIFT,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_MINUS	AsmParser/X86AsmParser.cpp	/^    IC_MINUS,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_MULTIPLY	AsmParser/X86AsmParser.cpp	/^    IC_MULTIPLY,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_OR	AsmParser/X86AsmParser.cpp	/^    IC_OR = 0,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_PLUS	AsmParser/X86AsmParser.cpp	/^    IC_PLUS,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_REGISTER	AsmParser/X86AsmParser.cpp	/^    IC_REGISTER$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_RPAREN	AsmParser/X86AsmParser.cpp	/^    IC_RPAREN,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_RSHIFT	AsmParser/X86AsmParser.cpp	/^    IC_RSHIFT,$/;"	e	enum:__anon1::X86AsmParser::InfixCalculatorTok	file:
IC_max	Disassembler/X86DisassemblerDecoderCommon.h	/^  IC_max$/;"	e	enum:__anon15
ID	X86CodeEmitter.cpp	/^    static char ID;$/;"	m	class:__anon36::Emitter	file:
ID	X86CodeEmitter.cpp	/^  char Emitter<CodeEmitter>::ID = 0;$/;"	m	class:__anon36::Emitter	file:
ID	X86FixupLEAs.cpp	/^    static char ID;$/;"	m	class:__anon38::FixupLEAPass	file:
ID	X86FixupLEAs.cpp	/^  char FixupLEAPass::ID = 0;$/;"	m	class:__anon38::FixupLEAPass	file:
ID	X86FloatingPoint.cpp	/^    static char ID;$/;"	m	struct:__anon39::FPS	file:
ID	X86FloatingPoint.cpp	/^  char FPS::ID = 0;$/;"	m	class:__anon39::FPS	file:
ID	X86InstrInfo.cpp	/^    static char ID;$/;"	m	struct:__anon45::CGBR	file:
ID	X86InstrInfo.cpp	/^    static char ID;$/;"	m	struct:__anon46::LDTLSCleanup	file:
ID	X86InstrInfo.cpp	/^char CGBR::ID = 0;$/;"	m	class:CGBR	file:
ID	X86InstrInfo.cpp	/^char LDTLSCleanup::ID = 0;$/;"	m	class:LDTLSCleanup	file:
ID	X86PadShortFunction.cpp	/^    static char ID;$/;"	m	struct:__anon52::PadShortFunc	file:
ID	X86PadShortFunction.cpp	/^  char PadShortFunc::ID = 0;$/;"	m	class:__anon52::PadShortFunc	file:
ID	X86TargetTransformInfo.cpp	/^  static char ID;$/;"	m	class:__anon54::LLVM_FINAL	file:
ID	X86TargetTransformInfo.cpp	/^char X86TTI::ID = 0;$/;"	m	class:X86TTI	file:
ID	X86VZeroUpper.cpp	/^    static char ID;$/;"	m	struct:__anon55::VZeroUpperInserter	file:
ID	X86VZeroUpper.cpp	/^  char VZeroUpperInserter::ID = 0;$/;"	m	class:__anon55::VZeroUpperInserter	file:
IES_AND	AsmParser/X86AsmParser.cpp	/^    IES_AND,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_DIVIDE	AsmParser/X86AsmParser.cpp	/^    IES_DIVIDE,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_ERROR	AsmParser/X86AsmParser.cpp	/^    IES_ERROR$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_IDENTIFIER	AsmParser/X86AsmParser.cpp	/^    IES_IDENTIFIER,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_INTEGER	AsmParser/X86AsmParser.cpp	/^    IES_INTEGER,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_LBRAC	AsmParser/X86AsmParser.cpp	/^    IES_LBRAC,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_LPAREN	AsmParser/X86AsmParser.cpp	/^    IES_LPAREN,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_LSHIFT	AsmParser/X86AsmParser.cpp	/^    IES_LSHIFT,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_MINUS	AsmParser/X86AsmParser.cpp	/^    IES_MINUS,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_MULTIPLY	AsmParser/X86AsmParser.cpp	/^    IES_MULTIPLY,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_OR	AsmParser/X86AsmParser.cpp	/^    IES_OR,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_PLUS	AsmParser/X86AsmParser.cpp	/^    IES_PLUS,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_RBRAC	AsmParser/X86AsmParser.cpp	/^    IES_RBRAC,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_REGISTER	AsmParser/X86AsmParser.cpp	/^    IES_REGISTER,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_RPAREN	AsmParser/X86AsmParser.cpp	/^    IES_RPAREN,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
IES_RSHIFT	AsmParser/X86AsmParser.cpp	/^    IES_RSHIFT,$/;"	e	enum:__anon1::X86AsmParser::IntelExprState	file:
II	X86CodeEmitter.cpp	/^    const X86InstrInfo  *II;$/;"	m	class:__anon36::Emitter	file:
INC	X86ISelDAGToDAG.cpp	/^  INC,$/;"	e	enum:AtomicOpc	file:
INC	X86ISelLowering.h	/^      INC, DEC, OR, XOR, AND,$/;"	e	enum:llvm::X86ISD::NodeType
INSERTPS	X86ISelLowering.h	/^      INSERTPS,$/;"	e	enum:llvm::X86ISD::NodeType
INSTRUCTIONS_STR	Disassembler/X86DisassemblerDecoderCommon.h	37;"	d
INSTRUCTIONS_SYM	Disassembler/X86DisassemblerDecoderCommon.h	27;"	d
INSTRUCTION_CONTEXTS	Disassembler/X86DisassemblerDecoderCommon.h	/^  INSTRUCTION_CONTEXTS$/;"	e	enum:__anon15
INSTRUCTION_CONTEXTS	Disassembler/X86DisassemblerDecoderCommon.h	83;"	d
INSTRUCTION_IDS	Disassembler/X86Disassembler.h	80;"	d
INSTRUCTION_IDS	Disassembler/X86Disassembler.h	86;"	d
INSTRUCTION_IDS	Disassembler/X86DisassemblerDecoder.h	26;"	d
INSTRUCTION_IDS	Disassembler/X86DisassemblerDecoder.h	32;"	d
INSTRUCTION_SPECIFIER_FIELDS	Disassembler/X86Disassembler.h	77;"	d
INSTRUCTION_SPECIFIER_FIELDS	Disassembler/X86Disassembler.h	85;"	d
INSTRUCTION_SPECIFIER_FIELDS	Disassembler/X86DisassemblerDecoder.h	23;"	d
INSTRUCTION_SPECIFIER_FIELDS	Disassembler/X86DisassemblerDecoder.h	31;"	d
IOK_LENGTH	AsmParser/X86AsmParser.cpp	/^  IOK_LENGTH,$/;"	e	enum:IntelOperatorKind	file:
IOK_SIZE	AsmParser/X86AsmParser.cpp	/^  IOK_SIZE,$/;"	e	enum:IntelOperatorKind	file:
IOK_TYPE	AsmParser/X86AsmParser.cpp	/^  IOK_TYPE$/;"	e	enum:IntelOperatorKind	file:
Imm	AsmParser/X86AsmParser.cpp	/^    int64_t Imm;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
Imm	AsmParser/X86AsmParser.cpp	/^    struct ImmOp Imm;$/;"	m	union:__anon2::X86Operand::__anon3	typeref:struct:__anon2::X86Operand::__anon3::ImmOp	file:
Imm16	MCTargetDesc/X86BaseInfo.h	/^    Imm16      = 3 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
Imm16PCRel	MCTargetDesc/X86BaseInfo.h	/^    Imm16PCRel = 4 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
Imm32	MCTargetDesc/X86BaseInfo.h	/^    Imm32      = 5 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
Imm32PCRel	MCTargetDesc/X86BaseInfo.h	/^    Imm32PCRel = 6 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
Imm32S	MCTargetDesc/X86BaseInfo.h	/^    Imm32S     = 7 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
Imm64	MCTargetDesc/X86BaseInfo.h	/^    Imm64      = 8 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
Imm8	MCTargetDesc/X86BaseInfo.h	/^    Imm8       = 1 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
Imm8PCRel	MCTargetDesc/X86BaseInfo.h	/^    Imm8PCRel  = 2 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
ImmMask	MCTargetDesc/X86BaseInfo.h	/^    ImmMask    = 15 << ImmShift,$/;"	e	enum:llvm::X86II::__anon26
ImmOp	AsmParser/X86AsmParser.cpp	/^  struct ImmOp {$/;"	s	struct:__anon2::X86Operand	file:
ImmShift	MCTargetDesc/X86BaseInfo.h	/^    ImmShift = REXShift + 1,$/;"	e	enum:llvm::X86II::__anon26
Immediate	AsmParser/X86AsmParser.cpp	/^    Immediate,$/;"	e	enum:__anon2::X86Operand::KindTy	file:
In16BitMode	X86Subtarget.h	/^  bool In16BitMode;$/;"	m	class:llvm::X86Subtarget
In32BitMode	X86Subtarget.h	/^  bool In32BitMode;$/;"	m	class:llvm::X86Subtarget
In64BitMode	X86Subtarget.h	/^  bool In64BitMode;$/;"	m	class:llvm::X86Subtarget
IndexReg	AsmParser/X86AsmParser.cpp	/^    unsigned BaseReg, IndexReg, TmpReg, Scale;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
IndexReg	AsmParser/X86AsmParser.cpp	/^    unsigned IndexReg;$/;"	m	struct:__anon2::X86Operand::MemOp	file:
IndexReg	X86ISelDAGToDAG.cpp	/^    SDValue IndexReg;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
IndexReg	X86InstrBuilder.h	/^  unsigned IndexReg;$/;"	m	struct:llvm::X86AddressMode
InfixCalculator	AsmParser/X86AsmParser.cpp	/^  class InfixCalculator {$/;"	c	class:__anon1::X86AsmParser	file:
InfixCalculatorTok	AsmParser/X86AsmParser.cpp	/^  enum InfixCalculatorTok {$/;"	g	class:__anon1::X86AsmParser	file:
InfixOperatorStack	AsmParser/X86AsmParser.cpp	/^    SmallVector<InfixCalculatorTok, 4> InfixOperatorStack;$/;"	m	class:__anon1::X86AsmParser::InfixCalculator	file:
Info	AsmParser/X86AsmParser.cpp	/^    InlineAsmIdentifierInfo Info;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
InitLLVM2SEHRegisterMapping	MCTargetDesc/X86MCTargetDesc.cpp	/^void X86_MC::InitLLVM2SEHRegisterMapping(MCRegisterInfo *MRI) {$/;"	f	class:X86_MC
Initialize	X86TargetObjectFile.cpp	/^X86LinuxTargetObjectFile::Initialize(MCContext &Ctx, const TargetMachine &TM) {$/;"	f	class:X86LinuxTargetObjectFile
Insert128BitVector	X86ISelLowering.cpp	/^static SDValue Insert128BitVector(SDValue Result, SDValue Vec,$/;"	f	file:
Insert256BitVector	X86ISelLowering.cpp	/^static SDValue Insert256BitVector(SDValue Result, SDValue Vec,$/;"	f	file:
InsertBranch	X86InstrInfo.cpp	/^X86InstrInfo::InsertBranch(MachineBasicBlock &MBB, MachineBasicBlock *TBB,$/;"	f	class:X86InstrInfo
InsertDAGNode	X86ISelDAGToDAG.cpp	/^static void InsertDAGNode(SelectionDAG &DAG, SDValue Pos, SDValue N) {$/;"	f	file:
InsertSubVector	X86ISelLowering.cpp	/^static SDValue InsertSubVector(SDValue Result, SDValue Vec,$/;"	f	file:
InstInfo	AsmParser/X86AsmParser.cpp	/^  ParseInstructionInfo *InstInfo;$/;"	m	class:__anon1::X86AsmParser	file:
InstrInfo	X86TargetMachine.h	/^  X86InstrInfo       InstrInfo;$/;"	m	class:llvm::X86TargetMachine
InstrItins	X86Subtarget.h	/^  InstrItineraryData InstrItins;$/;"	m	class:llvm::X86Subtarget
InstrItins	X86TargetMachine.h	/^  InstrItineraryData InstrItins;$/;"	m	class:llvm::X86TargetMachine
InstrUID	Disassembler/X86DisassemblerDecoderCommon.h	/^typedef uint16_t InstrUID;$/;"	t
InstructionContext	Disassembler/X86DisassemblerDecoderCommon.h	/^} InstructionContext;$/;"	t	typeref:enum:__anon15
InstructionSpecifier	Disassembler/X86DisassemblerDecoderCommon.h	/^struct InstructionSpecifier {$/;"	s
Intel	MCTargetDesc/X86MCAsmInfo.cpp	/^  ATT = 0, Intel = 1$/;"	e	enum:AsmWriterFlavorTy	file:
IntelAtom	X86Subtarget.h	/^    Others, IntelAtom, IntelSLM$/;"	e	enum:llvm::X86Subtarget::X86ProcFamilyEnum
IntelExprState	AsmParser/X86AsmParser.cpp	/^  enum IntelExprState {$/;"	g	class:__anon1::X86AsmParser	file:
IntelExprStateMachine	AsmParser/X86AsmParser.cpp	/^    IntelExprStateMachine(int64_t imm, bool stoponlbrac, bool addimmprefix) :$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
IntelExprStateMachine	AsmParser/X86AsmParser.cpp	/^  class IntelExprStateMachine {$/;"	c	class:__anon1::X86AsmParser	file:
IntelOperatorKind	AsmParser/X86AsmParser.cpp	/^enum IntelOperatorKind {$/;"	g	file:
IntelSLM	X86Subtarget.h	/^    Others, IntelAtom, IntelSLM$/;"	e	enum:llvm::X86Subtarget::X86ProcFamilyEnum
InternalInstruction	Disassembler/X86DisassemblerDecoder.h	/^struct InternalInstruction {$/;"	s
Is16BitMemOperand	MCTargetDesc/X86MCCodeEmitter.cpp	/^  bool Is16BitMemOperand(const MCInst &MI, unsigned Op,$/;"	f	class:__anon29::X86MCCodeEmitter
Is16BitMemOperand	X86CodeEmitter.cpp	/^static bool Is16BitMemOperand(const MachineInstr &MI, unsigned Op) {$/;"	f	file:
Is32BitMemOperand	MCTargetDesc/X86MCCodeEmitter.cpp	/^static bool Is32BitMemOperand(const MCInst &MI, unsigned Op) {$/;"	f	file:
Is32BitMemOperand	X86CodeEmitter.cpp	/^static bool Is32BitMemOperand(const MachineInstr &MI, unsigned Op) {$/;"	f	file:
Is64Bit	MCTargetDesc/X86AsmBackend.cpp	/^  bool Is64Bit;$/;"	m	class:__anon23::DarwinX86AsmBackend	file:
Is64Bit	MCTargetDesc/X86AsmBackend.cpp	/^  bool Is64Bit;$/;"	m	class:__anon23::WindowsX86AsmBackend	file:
Is64Bit	MCTargetDesc/X86WinCOFFObjectWriter.cpp	/^    const bool Is64Bit;$/;"	m	class:__anon34::X86WinCOFFObjectWriter	file:
Is64Bit	X86RegisterInfo.h	/^  bool Is64Bit;$/;"	m	class:llvm::X86RegisterInfo
Is64BitMemOperand	MCTargetDesc/X86MCCodeEmitter.cpp	/^static bool Is64BitMemOperand(const MCInst &MI, unsigned Op) {$/;"	f	file:
Is64BitMemOperand	X86CodeEmitter.cpp	/^static bool Is64BitMemOperand(const MachineInstr &MI, unsigned Op) {$/;"	f	file:
Is64BitMode	X86CodeEmitter.cpp	/^    bool Is64BitMode;$/;"	m	class:__anon36::Emitter	file:
IsBTMemSlow	X86Subtarget.h	/^  bool IsBTMemSlow;$/;"	m	class:llvm::X86Subtarget
IsCCallConvention	X86ISelLowering.cpp	/^static bool IsCCallConvention(CallingConv::ID CC) {$/;"	f	file:
IsDesirableToPromoteOp	X86ISelLowering.cpp	/^bool X86TargetLowering::IsDesirableToPromoteOp(SDValue Op, EVT &PVT) const {$/;"	f	class:X86TargetLowering
IsEligibleForTailCallOptimization	X86ISelLowering.cpp	/^X86TargetLowering::IsEligibleForTailCallOptimization(SDValue Callee,$/;"	f	class:X86TargetLowering
IsLegalToCallImmediateAddr	X86Subtarget.cpp	/^bool X86Subtarget::IsLegalToCallImmediateAddr(const TargetMachine &TM) const {$/;"	f	class:X86Subtarget
IsMemcpySmall	X86FastISel.cpp	/^bool X86FastISel::IsMemcpySmall(uint64_t Len) {$/;"	f	class:X86FastISel
IsPIC	X86CodeEmitter.cpp	/^    bool IsPIC;$/;"	m	class:__anon36::Emitter	file:
IsProfitableToFold	X86ISelDAGToDAG.cpp	/^X86DAGToDAGISel::IsProfitableToFold(SDValue N, SDNode *U, SDNode *Root) const {$/;"	f	class:X86DAGToDAGISel
IsSHLDSlow	X86Subtarget.h	/^  bool IsSHLDSlow;$/;"	m	class:llvm::X86Subtarget
IsTailCallConvention	X86ISelLowering.cpp	/^static bool IsTailCallConvention(CallingConv::ID CC) {$/;"	f	file:
IsUAMemFast	X86Subtarget.h	/^  bool IsUAMemFast;$/;"	m	class:llvm::X86Subtarget
IsWin64	X86RegisterInfo.h	/^  bool IsWin64;$/;"	m	class:llvm::X86RegisterInfo
JITCompilerFunction	X86JITInfo.cpp	/^static TargetJITInfo::JITCompilerFn JITCompilerFunction;$/;"	v	file:
JITInfo	X86TargetMachine.h	/^  X86JITInfo         JITInfo;$/;"	m	class:llvm::X86TargetMachine
JT	X86ISelDAGToDAG.cpp	/^    int JT;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
KORTEST	X86ISelLowering.h	/^      KORTEST,$/;"	e	enum:llvm::X86ISD::NodeType
Kind	AsmParser/X86AsmParser.cpp	/^  } Kind;$/;"	m	struct:__anon2::X86Operand	typeref:enum:__anon2::X86Operand::KindTy	file:
KindTy	AsmParser/X86AsmParser.cpp	/^  enum KindTy {$/;"	g	struct:__anon2::X86Operand	file:
LCMPXCHG16_DAG	X86ISelLowering.h	/^      LCMPXCHG16_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
LCMPXCHG8_DAG	X86ISelLowering.h	/^      LCMPXCHG8_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
LCMPXCHG_DAG	X86ISelLowering.h	/^      LCMPXCHG_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
LDTLSCleanup	X86InstrInfo.cpp	/^    LDTLSCleanup() : MachineFunctionPass(ID) {}$/;"	f	struct:__anon46::LDTLSCleanup
LDTLSCleanup	X86InstrInfo.cpp	/^  struct LDTLSCleanup : public MachineFunctionPass {$/;"	s	namespace:__anon46	file:
LEAUsesAG	X86Subtarget.h	/^  bool LEAUsesAG;$/;"	m	class:llvm::X86Subtarget
LEAusesAG	X86Subtarget.h	/^  bool LEAusesAG() const { return LEAUsesAG; }$/;"	f	class:llvm::X86Subtarget
LEVEL	AsmParser/Makefile	/^LEVEL = ..\/..\/..\/..$/;"	m
LEVEL	Disassembler/Makefile	/^LEVEL = ..\/..\/..\/..$/;"	m
LEVEL	InstPrinter/Makefile	/^LEVEL = ..\/..\/..\/..$/;"	m
LEVEL	MCTargetDesc/Makefile	/^LEVEL = ..\/..\/..\/..$/;"	m
LEVEL	Makefile	/^LEVEL = ..\/..\/..$/;"	m
LEVEL	TargetInfo/Makefile	/^LEVEL = ..\/..\/..\/..$/;"	m
LEVEL	Utils/Makefile	/^LEVEL = ..\/..\/..\/..$/;"	m
LFENCE	X86ISelLowering.h	/^      LFENCE,$/;"	e	enum:llvm::X86ISD::NodeType
LIBRARYNAME	AsmParser/Makefile	/^LIBRARYNAME = LLVMX86AsmParser$/;"	m
LIBRARYNAME	Disassembler/Makefile	/^LIBRARYNAME = LLVMX86Disassembler$/;"	m
LIBRARYNAME	InstPrinter/Makefile	/^LIBRARYNAME = LLVMX86AsmPrinter$/;"	m
LIBRARYNAME	MCTargetDesc/Makefile	/^LIBRARYNAME = LLVMX86Desc$/;"	m
LIBRARYNAME	Makefile	/^LIBRARYNAME = LLVMX86CodeGen$/;"	m
LIBRARYNAME	TargetInfo/Makefile	/^LIBRARYNAME = LLVMX86Info$/;"	m
LIBRARYNAME	Utils/Makefile	/^LIBRARYNAME = LLVMX86Utils$/;"	m
LLVMInitializeX86AsmParser	AsmParser/X86AsmParser.cpp	/^extern "C" void LLVMInitializeX86AsmParser() {$/;"	f
LLVMInitializeX86AsmPrinter	X86AsmPrinter.cpp	/^extern "C" void LLVMInitializeX86AsmPrinter() {$/;"	f
LLVMInitializeX86Disassembler	Disassembler/X86Disassembler.cpp	/^extern "C" void LLVMInitializeX86Disassembler() { $/;"	f
LLVMInitializeX86Target	X86TargetMachine.cpp	/^extern "C" void LLVMInitializeX86Target() {$/;"	f
LLVMInitializeX86TargetInfo	TargetInfo/X86TargetInfo.cpp	/^extern "C" void LLVMInitializeX86TargetInfo() { $/;"	f
LLVMInitializeX86TargetMC	MCTargetDesc/X86MCTargetDesc.cpp	/^extern "C" void LLVMInitializeX86TargetMC() {$/;"	f
LLVMX86CompilationCallback2	X86JITInfo.cpp	/^LLVM_LIBRARY_VISIBILITY void LLVMX86CompilationCallback2(intptr_t *StackPtr,$/;"	f
LLVM_DELETED_FUNCTION	MCTargetDesc/X86MCCodeEmitter.cpp	/^  X86MCCodeEmitter(const X86MCCodeEmitter &) LLVM_DELETED_FUNCTION;$/;"	m	class:__anon29::X86MCCodeEmitter	file:
LLVM_DELETED_FUNCTION	MCTargetDesc/X86MCCodeEmitter.cpp	/^  void operator=(const X86MCCodeEmitter &) LLVM_DELETED_FUNCTION;$/;"	m	class:__anon29::X86MCCodeEmitter	file:
LLVM_FINAL	X86TargetTransformInfo.cpp	/^class X86TTI LLVM_FINAL : public ImmutablePass, public TargetTransformInfo {$/;"	c	namespace:__anon54	file:
LLVM_OVERRIDE	MCTargetDesc/X86WinCOFFObjectWriter.cpp	/^                                  bool IsCrossSection) const LLVM_OVERRIDE;$/;"	m	class:__anon34::X86WinCOFFObjectWriter	file:
LLVM_OVERRIDE	X86AsmPrinter.h	/^                                     raw_ostream &OS) LLVM_OVERRIDE;$/;"	m	class:llvm::X86AsmPrinter
LLVM_OVERRIDE	X86AsmPrinter.h	/^                               raw_ostream &OS) LLVM_OVERRIDE;$/;"	m	class:llvm::X86AsmPrinter
LLVM_OVERRIDE	X86AsmPrinter.h	/^  virtual bool runOnMachineFunction(MachineFunction &F) LLVM_OVERRIDE;$/;"	m	class:llvm::X86AsmPrinter
LLVM_OVERRIDE	X86AsmPrinter.h	/^  virtual void EmitEndOfAsmFile(Module &M) LLVM_OVERRIDE;$/;"	m	class:llvm::X86AsmPrinter
LLVM_OVERRIDE	X86AsmPrinter.h	/^  virtual void EmitInstruction(const MachineInstr *MI) LLVM_OVERRIDE;$/;"	m	class:llvm::X86AsmPrinter
LLVM_OVERRIDE	X86AsmPrinter.h	/^  virtual void EmitStartOfAsmFile(Module &M) LLVM_OVERRIDE;$/;"	m	class:llvm::X86AsmPrinter
LLVM_OVERRIDE	X86ISelLowering.h	/^    virtual bool isNoopAddrSpaceCast(unsigned SrcAS, unsigned DestAS) const LLVM_OVERRIDE;$/;"	m	class:llvm::X86TargetLowering
LLVM_OVERRIDE	X86InstrInfo.h	/^                                      MachineInstr *Second) const LLVM_OVERRIDE;$/;"	m	class:llvm::X86InstrInfo
LLVM_OVERRIDE	X86TargetObjectFile.h	/^        LLVM_OVERRIDE;$/;"	m	class:llvm::X86LinuxTargetObjectFile
LLVM_OVERRIDE	X86TargetObjectFile.h	/^        LLVM_OVERRIDE;$/;"	m	class:llvm::X86WindowsTargetObjectFile
LLVM_OVERRIDE	X86TargetObjectFile.h	/^        LLVM_OVERRIDE;$/;"	m	class:llvm::X86_64MachoTargetObjectFile
LLVM_OVERRIDE	X86TargetObjectFile.h	/^    void Initialize(MCContext &Ctx, const TargetMachine &TM) LLVM_OVERRIDE;$/;"	m	class:llvm::X86LinuxTargetObjectFile
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^                                          OperandValueKind) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^                                      Type *CondTy) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^                                      unsigned Index) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^                                    Type *Src) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^                                    bool IsPairwiseForm) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^                                   unsigned AddressSpace) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^                                  int Index, Type *SubTp) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^                                 Type *Ty) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^  getAddressComputationCost(Type *PtrTy, bool IsComplex) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^  getPopcntSupport(unsigned TyWidth) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^  virtual unsigned getMaximumUnrollFactor() const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^  virtual unsigned getNumberOfRegisters(bool Vector) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_OVERRIDE	X86TargetTransformInfo.cpp	/^  virtual unsigned getRegisterBitWidth(bool Vector) const LLVM_OVERRIDE;$/;"	m	class:__anon54::LLVM_FINAL	file:
LLVM_TARGET_X86_TARGETOBJECTFILE_H	X86TargetObjectFile.h	11;"	d
LLVM_X86_X86FIXUPKINDS_H	MCTargetDesc/X86FixupKinds.h	11;"	d
LOCK	MCTargetDesc/X86BaseInfo.h	/^    LOCK = 1 << LOCKShift,$/;"	e	enum:llvm::X86II::__anon26
LOCKShift	MCTargetDesc/X86BaseInfo.h	/^    LOCKShift = FPTypeShift + 3,$/;"	e	enum:llvm::X86II::__anon26
LastTargetFixupKind	MCTargetDesc/X86FixupKinds.h	/^  LastTargetFixupKind,$/;"	e	enum:llvm::X86::Fixups
LegalFPImmediates	X86ISelLowering.h	/^    std::vector<APFloat> LegalFPImmediates;$/;"	m	class:llvm::X86TargetLowering
Length	AsmParser/X86AsmParser.cpp	/^    unsigned Length;$/;"	m	struct:__anon2::X86Operand::TokOp	file:
LiveBundle	X86FloatingPoint.cpp	/^      LiveBundle() : Mask(0), FixCount(0) {}$/;"	f	struct:__anon39::FPS::LiveBundle
LiveBundle	X86FloatingPoint.cpp	/^    struct LiveBundle {$/;"	s	struct:__anon39::FPS	file:
LiveBundles	X86FloatingPoint.cpp	/^    SmallVector<LiveBundle, 8> LiveBundles;$/;"	m	struct:__anon39::FPS	file:
Lookup	X86FloatingPoint.cpp	/^static int Lookup(const TableEntry *Table, unsigned N, unsigned Opcode) {$/;"	f	file:
Lower	X86MCInstLower.cpp	/^void X86MCInstLower::Lower(const MachineInstr *MI, MCInst &OutMI) const {$/;"	f	class:X86MCInstLower
Lower256IntArith	X86ISelLowering.cpp	/^static SDValue Lower256IntArith(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
Lower256IntVSETCC	X86ISelLowering.cpp	/^static SDValue Lower256IntVSETCC(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerADD	X86ISelLowering.cpp	/^static SDValue LowerADD(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerADDC_ADDE_SUBC_SUBE	X86ISelLowering.cpp	/^static SDValue LowerADDC_ADDE_SUBC_SUBE(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerADJUST_TRAMPOLINE	X86ISelLowering.cpp	/^static SDValue LowerADJUST_TRAMPOLINE(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerANY_EXTEND	X86ISelLowering.cpp	/^static SDValue LowerANY_EXTEND(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerATOMIC_FENCE	X86ISelLowering.cpp	/^static SDValue LowerATOMIC_FENCE(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerATOMIC_STORE	X86ISelLowering.cpp	/^static SDValue LowerATOMIC_STORE(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerAVXCONCAT_VECTORS	X86ISelLowering.cpp	/^static SDValue LowerAVXCONCAT_VECTORS(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerAVXExtend	X86ISelLowering.cpp	/^static SDValue LowerAVXExtend(SDValue Op, SelectionDAG &DAG,$/;"	f	file:
LowerAsSplatVectorLoad	X86ISelLowering.cpp	/^LowerAsSplatVectorLoad(SDValue SrcOp, MVT VT, SDLoc dl, SelectionDAG &DAG) {$/;"	f	file:
LowerAsmOperandForConstraint	X86ISelLowering.cpp	/^void X86TargetLowering::LowerAsmOperandForConstraint(SDValue Op,$/;"	f	class:X86TargetLowering
LowerBITCAST	X86ISelLowering.cpp	/^static SDValue LowerBITCAST(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerBRCOND	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerBRCOND(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerBUILD_VECTOR	X86ISelLowering.cpp	/^X86TargetLowering::LowerBUILD_VECTOR(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerBUILD_VECTORvXi1	X86ISelLowering.cpp	/^X86TargetLowering::LowerBUILD_VECTORvXi1(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerBlockAddress	X86ISelLowering.cpp	/^X86TargetLowering::LowerBlockAddress(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerBuildVectorv16i8	X86ISelLowering.cpp	/^static SDValue LowerBuildVectorv16i8(SDValue Op, unsigned NonZeros,$/;"	f	file:
LowerBuildVectorv8i16	X86ISelLowering.cpp	/^static SDValue LowerBuildVectorv8i16(SDValue Op, unsigned NonZeros,$/;"	f	file:
LowerCMP_SWAP	X86ISelLowering.cpp	/^static SDValue LowerCMP_SWAP(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerCONCAT_VECTORS	X86ISelLowering.cpp	/^static SDValue LowerCONCAT_VECTORS(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerCTLZ	X86ISelLowering.cpp	/^static SDValue LowerCTLZ(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerCTLZ_ZERO_UNDEF	X86ISelLowering.cpp	/^static SDValue LowerCTLZ_ZERO_UNDEF(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerCTTZ	X86ISelLowering.cpp	/^static SDValue LowerCTTZ(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerCall	X86ISelLowering.cpp	/^X86TargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,$/;"	f	class:X86TargetLowering
LowerCallResult	X86ISelLowering.cpp	/^X86TargetLowering::LowerCallResult(SDValue Chain, SDValue InFlag,$/;"	f	class:X86TargetLowering
LowerConstantPool	X86ISelLowering.cpp	/^X86TargetLowering::LowerConstantPool(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerCustomJumpTableEntry	X86ISelLowering.cpp	/^X86TargetLowering::LowerCustomJumpTableEntry(const MachineJumpTableInfo *MJTI,$/;"	f	class:X86TargetLowering
LowerDYNAMIC_STACKALLOC	X86ISelLowering.cpp	/^X86TargetLowering::LowerDYNAMIC_STACKALLOC(SDValue Op,$/;"	f	class:X86TargetLowering
LowerEH_RETURN	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerEH_RETURN(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerEXTRACT_SUBVECTOR	X86ISelLowering.cpp	/^static SDValue LowerEXTRACT_SUBVECTOR(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerEXTRACT_VECTOR_ELT	X86ISelLowering.cpp	/^X86TargetLowering::LowerEXTRACT_VECTOR_ELT(SDValue Op,$/;"	f	class:X86TargetLowering
LowerEXTRACT_VECTOR_ELT_SSE4	X86ISelLowering.cpp	/^static SDValue LowerEXTRACT_VECTOR_ELT_SSE4(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerExternalSymbol	X86ISelLowering.cpp	/^X86TargetLowering::LowerExternalSymbol(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerFABS	X86ISelLowering.cpp	/^static SDValue LowerFABS(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerFCOPYSIGN	X86ISelLowering.cpp	/^static SDValue LowerFCOPYSIGN(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerFGETSIGN	X86ISelLowering.cpp	/^static SDValue LowerFGETSIGN(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerFLT_ROUNDS_	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerFLT_ROUNDS_(SDValue Op,$/;"	f	class:X86TargetLowering
LowerFNEG	X86ISelLowering.cpp	/^static SDValue LowerFNEG(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerFP_EXTEND	X86ISelLowering.cpp	/^static SDValue LowerFP_EXTEND(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerFP_TO_SINT	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerFP_TO_SINT(SDValue Op,$/;"	f	class:X86TargetLowering
LowerFP_TO_UINT	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerFP_TO_UINT(SDValue Op,$/;"	f	class:X86TargetLowering
LowerFRAMEADDR	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerFRAMEADDR(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerFRAME_TO_ARGS_OFFSET	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerFRAME_TO_ARGS_OFFSET(SDValue Op,$/;"	f	class:X86TargetLowering
LowerFSINCOS	X86ISelLowering.cpp	/^static SDValue LowerFSINCOS(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerFormalArguments	X86ISelLowering.cpp	/^X86TargetLowering::LowerFormalArguments(SDValue Chain,$/;"	f	class:X86TargetLowering
LowerGlobalAddress	X86ISelLowering.cpp	/^X86TargetLowering::LowerGlobalAddress(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerGlobalAddress	X86ISelLowering.cpp	/^X86TargetLowering::LowerGlobalAddress(const GlobalValue *GV, SDLoc dl,$/;"	f	class:X86TargetLowering
LowerGlobalTLSAddress	X86ISelLowering.cpp	/^X86TargetLowering::LowerGlobalTLSAddress(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerINIT_TRAMPOLINE	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerINIT_TRAMPOLINE(SDValue Op,$/;"	f	class:X86TargetLowering
LowerINSERT_SUBVECTOR	X86ISelLowering.cpp	/^static SDValue LowerINSERT_SUBVECTOR(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerINSERT_VECTOR_ELT	X86ISelLowering.cpp	/^X86TargetLowering::LowerINSERT_VECTOR_ELT(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerINSERT_VECTOR_ELT_SSE4	X86ISelLowering.cpp	/^static SDValue LowerINSERT_VECTOR_ELT_SSE4(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerINTRINSIC_WO_CHAIN	X86ISelLowering.cpp	/^static SDValue LowerINTRINSIC_WO_CHAIN(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerINTRINSIC_W_CHAIN	X86ISelLowering.cpp	/^static SDValue LowerINTRINSIC_W_CHAIN(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerIntVSETCC_AVX512	X86ISelLowering.cpp	/^static SDValue LowerIntVSETCC_AVX512(SDValue Op, SelectionDAG &DAG,$/;"	f	file:
LowerJumpTable	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerJumpTable(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerLOAD_SUB	X86ISelLowering.cpp	/^static SDValue LowerLOAD_SUB(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerMUL	X86ISelLowering.cpp	/^static SDValue LowerMUL(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerMemArgument	X86ISelLowering.cpp	/^X86TargetLowering::LowerMemArgument(SDValue Chain,$/;"	f	class:X86TargetLowering
LowerMemOpCallTo	X86ISelLowering.cpp	/^X86TargetLowering::LowerMemOpCallTo(SDValue Chain,$/;"	f	class:X86TargetLowering
LowerOperation	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerOperation(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerPATCHPOINT	X86MCInstLower.cpp	/^static void LowerPATCHPOINT(MCStreamer &OS, StackMaps &SM,$/;"	f	file:
LowerREADCYCLECOUNTER	X86ISelLowering.cpp	/^static SDValue LowerREADCYCLECOUNTER(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerRETURNADDR	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerRETURNADDR(SDValue Op,$/;"	f	class:X86TargetLowering
LowerReturn	X86ISelLowering.cpp	/^X86TargetLowering::LowerReturn(SDValue Chain,$/;"	f	class:X86TargetLowering
LowerSCALAR_TO_VECTOR	X86ISelLowering.cpp	/^static SDValue LowerSCALAR_TO_VECTOR(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerSDIV	X86ISelLowering.cpp	/^static SDValue LowerSDIV(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerSELECT	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerSELECT(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerSETCC	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerSETCC(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerSIGN_EXTEND	X86ISelLowering.cpp	/^static SDValue LowerSIGN_EXTEND(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerSIGN_EXTEND_AVX512	X86ISelLowering.cpp	/^static SDValue LowerSIGN_EXTEND_AVX512(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerSIGN_EXTEND_INREG	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerSIGN_EXTEND_INREG(SDValue Op,$/;"	f	class:X86TargetLowering
LowerSINT_TO_FP	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerSINT_TO_FP(SDValue Op,$/;"	f	class:X86TargetLowering
LowerSTACKMAP	X86MCInstLower.cpp	/^static void LowerSTACKMAP(MCStreamer &OS, StackMaps &SM,$/;"	f	file:
LowerSUB	X86ISelLowering.cpp	/^static SDValue LowerSUB(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerScalarImmediateShift	X86ISelLowering.cpp	/^static SDValue LowerScalarImmediateShift(SDValue Op, SelectionDAG &DAG,$/;"	f	file:
LowerScalarVariableShift	X86ISelLowering.cpp	/^static SDValue LowerScalarVariableShift(SDValue Op, SelectionDAG &DAG,$/;"	f	file:
LowerShift	X86ISelLowering.cpp	/^static SDValue LowerShift(SDValue Op, const X86Subtarget* Subtarget,$/;"	f	file:
LowerShiftParts	X86ISelLowering.cpp	/^static SDValue LowerShiftParts(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerSymbolOperand	X86MCInstLower.cpp	/^MCOperand X86MCInstLower::LowerSymbolOperand(const MachineOperand &MO,$/;"	f	class:X86MCInstLower
LowerTRUNCATE	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerTRUNCATE(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerTlsAddr	X86MCInstLower.cpp	/^static void LowerTlsAddr(MCStreamer &OutStreamer,$/;"	f	file:
LowerToBT	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerToBT(SDValue And, ISD::CondCode CC,$/;"	f	class:X86TargetLowering
LowerToTLSExecModel	X86ISelLowering.cpp	/^static SDValue LowerToTLSExecModel(GlobalAddressSDNode *GA, SelectionDAG &DAG,$/;"	f	file:
LowerToTLSGeneralDynamicModel32	X86ISelLowering.cpp	/^LowerToTLSGeneralDynamicModel32(GlobalAddressSDNode *GA, SelectionDAG &DAG,$/;"	f	file:
LowerToTLSGeneralDynamicModel64	X86ISelLowering.cpp	/^LowerToTLSGeneralDynamicModel64(GlobalAddressSDNode *GA, SelectionDAG &DAG,$/;"	f	file:
LowerToTLSLocalDynamicModel	X86ISelLowering.cpp	/^static SDValue LowerToTLSLocalDynamicModel(GlobalAddressSDNode *GA,$/;"	f	file:
LowerUINT_TO_FP	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerUINT_TO_FP(SDValue Op,$/;"	f	class:X86TargetLowering
LowerUINT_TO_FP_i32	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerUINT_TO_FP_i32(SDValue Op,$/;"	f	class:X86TargetLowering
LowerUINT_TO_FP_i64	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerUINT_TO_FP_i64(SDValue Op,$/;"	f	class:X86TargetLowering
LowerVAARG	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerVAARG(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerVACOPY	X86ISelLowering.cpp	/^static SDValue LowerVACOPY(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerVASTART	X86ISelLowering.cpp	/^SDValue X86TargetLowering::LowerVASTART(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerVECTOR_SHUFFLE	X86ISelLowering.cpp	/^X86TargetLowering::LowerVECTOR_SHUFFLE(SDValue Op, SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
LowerVECTOR_SHUFFLE_128v4	X86ISelLowering.cpp	/^LowerVECTOR_SHUFFLE_128v4(ShuffleVectorSDNode *SVOp, SelectionDAG &DAG) {$/;"	f	file:
LowerVECTOR_SHUFFLE_256	X86ISelLowering.cpp	/^LowerVECTOR_SHUFFLE_256(ShuffleVectorSDNode *SVOp, SelectionDAG &DAG) {$/;"	f	file:
LowerVECTOR_SHUFFLEtoBlend	X86ISelLowering.cpp	/^LowerVECTOR_SHUFFLEtoBlend(ShuffleVectorSDNode *SVOp,$/;"	f	file:
LowerVECTOR_SHUFFLEv16i8	X86ISelLowering.cpp	/^static SDValue LowerVECTOR_SHUFFLEv16i8(ShuffleVectorSDNode *SVOp,$/;"	f	file:
LowerVECTOR_SHUFFLEv32i8	X86ISelLowering.cpp	/^SDValue LowerVECTOR_SHUFFLEv32i8(ShuffleVectorSDNode *SVOp,$/;"	f	file:
LowerVECTOR_SHUFFLEv8i16	X86ISelLowering.cpp	/^LowerVECTOR_SHUFFLEv8i16(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerVSETCC	X86ISelLowering.cpp	/^static SDValue LowerVSETCC(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerVectorAllZeroTest	X86ISelLowering.cpp	/^static SDValue LowerVectorAllZeroTest(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerVectorBroadcast	X86ISelLowering.cpp	/^static SDValue LowerVectorBroadcast(SDValue Op, const X86Subtarget* Subtarget,$/;"	f	file:
LowerVectorIntExtend	X86ISelLowering.cpp	/^static SDValue LowerVectorIntExtend(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerXALUO	X86ISelLowering.cpp	/^static SDValue LowerXALUO(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
LowerXConstraint	X86ISelLowering.cpp	/^LowerXConstraint(EVT ConstraintVT) const {$/;"	f	class:X86TargetLowering
LowerZERO_EXTEND	X86ISelLowering.cpp	/^static SDValue LowerZERO_EXTEND(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
LowerZERO_EXTEND_AVX512	X86ISelLowering.cpp	/^static  SDValue LowerZERO_EXTEND_AVX512(SDValue Op,$/;"	f	file:
MAI	X86MCInstLower.cpp	/^  const MCAsmInfo &MAI;$/;"	m	class:__anon51::X86MCInstLower	file:
MBB	X86FloatingPoint.cpp	/^    MachineBasicBlock *MBB;     \/\/ Current basic block$/;"	m	struct:__anon39::FPS	file:
MCE	X86CodeEmitter.cpp	/^    CodeEmitter         &MCE;$/;"	m	class:__anon36::Emitter	file:
MCII	MCTargetDesc/X86MCCodeEmitter.cpp	/^  const MCInstrInfo &MCII;$/;"	m	class:__anon29::X86MCCodeEmitter	file:
MEMBARRIER	X86ISelLowering.h	/^      MEMBARRIER,$/;"	e	enum:llvm::X86ISD::NodeType
MF	X86FixupLEAs.cpp	/^    MachineFunction *MF;$/;"	m	class:__anon38::FixupLEAPass	file:
MF	X86MCInstLower.cpp	/^  const MachineFunction &MF;$/;"	m	class:__anon51::X86MCInstLower	file:
MFENCE	X86ISelLowering.h	/^      MFENCE,$/;"	e	enum:llvm::X86ISD::NodeType
MII	Disassembler/X86Disassembler.h	/^  const MCInstrInfo *MII;$/;"	m	class:llvm::X86Disassembler::X86GenericDisassembler
MMI	X86CodeEmitter.cpp	/^    MachineModuleInfo   *MMI;$/;"	m	class:__anon36::Emitter	file:
MMX	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
MMX_MOVD2W	X86ISelLowering.h	/^      MMX_MOVD2W,$/;"	e	enum:llvm::X86ISD::NodeType
MMX_PINSRW	X86ISelLowering.h	/^      PINSRW, MMX_PINSRW,$/;"	e	enum:llvm::X86ISD::NodeType
MODE_16BIT	Disassembler/X86DisassemblerDecoderCommon.h	/^  MODE_16BIT,$/;"	e	enum:__anon21
MODE_32BIT	Disassembler/X86DisassemblerDecoderCommon.h	/^  MODE_32BIT,$/;"	e	enum:__anon21
MODE_64BIT	Disassembler/X86DisassemblerDecoderCommon.h	/^  MODE_64BIT$/;"	e	enum:__anon21
MODIFIER_TYPES	Disassembler/X86DisassemblerDecoderCommon.h	/^  MODIFIER_TYPES$/;"	e	enum:__anon20
MODIFIER_TYPES	Disassembler/X86DisassemblerDecoderCommon.h	531;"	d
MODIFIER_max	Disassembler/X86DisassemblerDecoderCommon.h	/^  MODIFIER_max$/;"	e	enum:__anon20
MODRMTYPES	Disassembler/X86DisassemblerDecoderCommon.h	/^  MODRMTYPES$/;"	e	enum:__anon17
MODRMTYPES	Disassembler/X86DisassemblerDecoderCommon.h	328;"	d
MODRM_REG_max	Disassembler/X86DisassemblerDecoder.h	/^  MODRM_REG_max$/;"	e	enum:__anon9
MODRM_max	Disassembler/X86DisassemblerDecoderCommon.h	/^  MODRM_max$/;"	e	enum:__anon17
MOVDDUP	X86ISelLowering.h	/^      MOVDDUP,$/;"	e	enum:llvm::X86ISD::NodeType
MOVDQ2Q	X86ISelLowering.h	/^      MOVDQ2Q,$/;"	e	enum:llvm::X86ISD::NodeType
MOVHLPS	X86ISelLowering.h	/^      MOVHLPS,$/;"	e	enum:llvm::X86ISD::NodeType
MOVLHPD	X86ISelLowering.h	/^      MOVLHPD,$/;"	e	enum:llvm::X86ISD::NodeType
MOVLHPS	X86ISelLowering.h	/^      MOVLHPS,$/;"	e	enum:llvm::X86ISD::NodeType
MOVLPD	X86ISelLowering.h	/^      MOVLPD,$/;"	e	enum:llvm::X86ISD::NodeType
MOVLPS	X86ISelLowering.h	/^      MOVLPS,$/;"	e	enum:llvm::X86ISD::NodeType
MOVSD	X86ISelLowering.h	/^      MOVSD,$/;"	e	enum:llvm::X86ISD::NodeType
MOVSHDUP	X86ISelLowering.h	/^      MOVSHDUP,$/;"	e	enum:llvm::X86ISD::NodeType
MOVSLDUP	X86ISelLowering.h	/^      MOVSLDUP,$/;"	e	enum:llvm::X86ISD::NodeType
MOVSS	X86ISelLowering.h	/^      MOVSS,$/;"	e	enum:llvm::X86ISD::NodeType
MO_DARWIN_HIDDEN_NONLAZY_PIC_BASE	MCTargetDesc/X86BaseInfo.h	/^    MO_DARWIN_HIDDEN_NONLAZY_PIC_BASE,$/;"	e	enum:llvm::X86II::TOF
MO_DARWIN_NONLAZY	MCTargetDesc/X86BaseInfo.h	/^    MO_DARWIN_NONLAZY,$/;"	e	enum:llvm::X86II::TOF
MO_DARWIN_NONLAZY_PIC_BASE	MCTargetDesc/X86BaseInfo.h	/^    MO_DARWIN_NONLAZY_PIC_BASE,$/;"	e	enum:llvm::X86II::TOF
MO_DARWIN_STUB	MCTargetDesc/X86BaseInfo.h	/^    MO_DARWIN_STUB,$/;"	e	enum:llvm::X86II::TOF
MO_DLLIMPORT	MCTargetDesc/X86BaseInfo.h	/^    MO_DLLIMPORT,$/;"	e	enum:llvm::X86II::TOF
MO_DTPOFF	MCTargetDesc/X86BaseInfo.h	/^    MO_DTPOFF,$/;"	e	enum:llvm::X86II::TOF
MO_GOT	MCTargetDesc/X86BaseInfo.h	/^    MO_GOT,$/;"	e	enum:llvm::X86II::TOF
MO_GOTNTPOFF	MCTargetDesc/X86BaseInfo.h	/^    MO_GOTNTPOFF,$/;"	e	enum:llvm::X86II::TOF
MO_GOTOFF	MCTargetDesc/X86BaseInfo.h	/^    MO_GOTOFF,$/;"	e	enum:llvm::X86II::TOF
MO_GOTPCREL	MCTargetDesc/X86BaseInfo.h	/^    MO_GOTPCREL,$/;"	e	enum:llvm::X86II::TOF
MO_GOTTPOFF	MCTargetDesc/X86BaseInfo.h	/^    MO_GOTTPOFF,$/;"	e	enum:llvm::X86II::TOF
MO_GOT_ABSOLUTE_ADDRESS	MCTargetDesc/X86BaseInfo.h	/^    MO_GOT_ABSOLUTE_ADDRESS,$/;"	e	enum:llvm::X86II::TOF
MO_INDNTPOFF	MCTargetDesc/X86BaseInfo.h	/^    MO_INDNTPOFF,$/;"	e	enum:llvm::X86II::TOF
MO_NO_FLAG	MCTargetDesc/X86BaseInfo.h	/^    MO_NO_FLAG,$/;"	e	enum:llvm::X86II::TOF
MO_NTPOFF	MCTargetDesc/X86BaseInfo.h	/^    MO_NTPOFF,$/;"	e	enum:llvm::X86II::TOF
MO_PIC_BASE_OFFSET	MCTargetDesc/X86BaseInfo.h	/^    MO_PIC_BASE_OFFSET,$/;"	e	enum:llvm::X86II::TOF
MO_PLT	MCTargetDesc/X86BaseInfo.h	/^    MO_PLT,$/;"	e	enum:llvm::X86II::TOF
MO_SECREL	MCTargetDesc/X86BaseInfo.h	/^    MO_SECREL$/;"	e	enum:llvm::X86II::TOF
MO_TLSGD	MCTargetDesc/X86BaseInfo.h	/^    MO_TLSGD,$/;"	e	enum:llvm::X86II::TOF
MO_TLSLD	MCTargetDesc/X86BaseInfo.h	/^    MO_TLSLD,$/;"	e	enum:llvm::X86II::TOF
MO_TLSLDM	MCTargetDesc/X86BaseInfo.h	/^    MO_TLSLDM,$/;"	e	enum:llvm::X86II::TOF
MO_TLVP	MCTargetDesc/X86BaseInfo.h	/^    MO_TLVP,$/;"	e	enum:llvm::X86II::TOF
MO_TLVP_PIC_BASE	MCTargetDesc/X86BaseInfo.h	/^    MO_TLVP_PIC_BASE,$/;"	e	enum:llvm::X86II::TOF
MO_TPOFF	MCTargetDesc/X86BaseInfo.h	/^    MO_TPOFF,$/;"	e	enum:llvm::X86II::TOF
MRI	MCTargetDesc/X86AsmBackend.cpp	/^  const MCRegisterInfo &MRI;$/;"	m	class:__anon23::DarwinX86AsmBackend	file:
MRM0m	MCTargetDesc/X86BaseInfo.h	/^    MRM0m = 24,  MRM1m = 25,  MRM2m = 26,  MRM3m = 27, \/\/ Format \/0 \/1 \/2 \/3$/;"	e	enum:llvm::X86II::__anon26
MRM0r	MCTargetDesc/X86BaseInfo.h	/^    MRM0r = 16,  MRM1r = 17,  MRM2r = 18,  MRM3r = 19, \/\/ Format \/0 \/1 \/2 \/3$/;"	e	enum:llvm::X86II::__anon26
MRM1m	MCTargetDesc/X86BaseInfo.h	/^    MRM0m = 24,  MRM1m = 25,  MRM2m = 26,  MRM3m = 27, \/\/ Format \/0 \/1 \/2 \/3$/;"	e	enum:llvm::X86II::__anon26
MRM1r	MCTargetDesc/X86BaseInfo.h	/^    MRM0r = 16,  MRM1r = 17,  MRM2r = 18,  MRM3r = 19, \/\/ Format \/0 \/1 \/2 \/3$/;"	e	enum:llvm::X86II::__anon26
MRM2m	MCTargetDesc/X86BaseInfo.h	/^    MRM0m = 24,  MRM1m = 25,  MRM2m = 26,  MRM3m = 27, \/\/ Format \/0 \/1 \/2 \/3$/;"	e	enum:llvm::X86II::__anon26
MRM2r	MCTargetDesc/X86BaseInfo.h	/^    MRM0r = 16,  MRM1r = 17,  MRM2r = 18,  MRM3r = 19, \/\/ Format \/0 \/1 \/2 \/3$/;"	e	enum:llvm::X86II::__anon26
MRM3m	MCTargetDesc/X86BaseInfo.h	/^    MRM0m = 24,  MRM1m = 25,  MRM2m = 26,  MRM3m = 27, \/\/ Format \/0 \/1 \/2 \/3$/;"	e	enum:llvm::X86II::__anon26
MRM3r	MCTargetDesc/X86BaseInfo.h	/^    MRM0r = 16,  MRM1r = 17,  MRM2r = 18,  MRM3r = 19, \/\/ Format \/0 \/1 \/2 \/3$/;"	e	enum:llvm::X86II::__anon26
MRM4m	MCTargetDesc/X86BaseInfo.h	/^    MRM4m = 28,  MRM5m = 29,  MRM6m = 30,  MRM7m = 31, \/\/ Format \/4 \/5 \/6 \/7$/;"	e	enum:llvm::X86II::__anon26
MRM4r	MCTargetDesc/X86BaseInfo.h	/^    MRM4r = 20,  MRM5r = 21,  MRM6r = 22,  MRM7r = 23, \/\/ Format \/4 \/5 \/6 \/7$/;"	e	enum:llvm::X86II::__anon26
MRM5m	MCTargetDesc/X86BaseInfo.h	/^    MRM4m = 28,  MRM5m = 29,  MRM6m = 30,  MRM7m = 31, \/\/ Format \/4 \/5 \/6 \/7$/;"	e	enum:llvm::X86II::__anon26
MRM5r	MCTargetDesc/X86BaseInfo.h	/^    MRM4r = 20,  MRM5r = 21,  MRM6r = 22,  MRM7r = 23, \/\/ Format \/4 \/5 \/6 \/7$/;"	e	enum:llvm::X86II::__anon26
MRM6m	MCTargetDesc/X86BaseInfo.h	/^    MRM4m = 28,  MRM5m = 29,  MRM6m = 30,  MRM7m = 31, \/\/ Format \/4 \/5 \/6 \/7$/;"	e	enum:llvm::X86II::__anon26
MRM6r	MCTargetDesc/X86BaseInfo.h	/^    MRM4r = 20,  MRM5r = 21,  MRM6r = 22,  MRM7r = 23, \/\/ Format \/4 \/5 \/6 \/7$/;"	e	enum:llvm::X86II::__anon26
MRM7m	MCTargetDesc/X86BaseInfo.h	/^    MRM4m = 28,  MRM5m = 29,  MRM6m = 30,  MRM7m = 31, \/\/ Format \/4 \/5 \/6 \/7$/;"	e	enum:llvm::X86II::__anon26
MRM7r	MCTargetDesc/X86BaseInfo.h	/^    MRM4r = 20,  MRM5r = 21,  MRM6r = 22,  MRM7r = 23, \/\/ Format \/4 \/5 \/6 \/7$/;"	e	enum:llvm::X86II::__anon26
MRMDestMem	MCTargetDesc/X86BaseInfo.h	/^    MRMDestMem     = 4,$/;"	e	enum:llvm::X86II::__anon26
MRMDestReg	MCTargetDesc/X86BaseInfo.h	/^    MRMDestReg     = 3,$/;"	e	enum:llvm::X86II::__anon26
MRMSrcMem	MCTargetDesc/X86BaseInfo.h	/^    MRMSrcMem      = 6,$/;"	e	enum:llvm::X86II::__anon26
MRMSrcReg	MCTargetDesc/X86BaseInfo.h	/^    MRMSrcReg      = 5,$/;"	e	enum:llvm::X86II::__anon26
MRMXm	MCTargetDesc/X86BaseInfo.h	/^    MRMXr = 14, MRMXm = 15,$/;"	e	enum:llvm::X86II::__anon26
MRMXr	MCTargetDesc/X86BaseInfo.h	/^    MRMXr = 14, MRMXm = 15,$/;"	e	enum:llvm::X86II::__anon26
MRM_C0	MCTargetDesc/X86BaseInfo.h	/^    MRM_C0 = 32, MRM_C1 = 33, MRM_C2 = 34, MRM_C3 = 35,$/;"	e	enum:llvm::X86II::__anon26
MRM_C1	MCTargetDesc/X86BaseInfo.h	/^    MRM_C0 = 32, MRM_C1 = 33, MRM_C2 = 34, MRM_C3 = 35,$/;"	e	enum:llvm::X86II::__anon26
MRM_C2	MCTargetDesc/X86BaseInfo.h	/^    MRM_C0 = 32, MRM_C1 = 33, MRM_C2 = 34, MRM_C3 = 35,$/;"	e	enum:llvm::X86II::__anon26
MRM_C3	MCTargetDesc/X86BaseInfo.h	/^    MRM_C0 = 32, MRM_C1 = 33, MRM_C2 = 34, MRM_C3 = 35,$/;"	e	enum:llvm::X86II::__anon26
MRM_C4	MCTargetDesc/X86BaseInfo.h	/^    MRM_C4 = 36, MRM_C8 = 37, MRM_C9 = 38, MRM_CA = 39,$/;"	e	enum:llvm::X86II::__anon26
MRM_C8	MCTargetDesc/X86BaseInfo.h	/^    MRM_C4 = 36, MRM_C8 = 37, MRM_C9 = 38, MRM_CA = 39,$/;"	e	enum:llvm::X86II::__anon26
MRM_C9	MCTargetDesc/X86BaseInfo.h	/^    MRM_C4 = 36, MRM_C8 = 37, MRM_C9 = 38, MRM_CA = 39,$/;"	e	enum:llvm::X86II::__anon26
MRM_CA	MCTargetDesc/X86BaseInfo.h	/^    MRM_C4 = 36, MRM_C8 = 37, MRM_C9 = 38, MRM_CA = 39,$/;"	e	enum:llvm::X86II::__anon26
MRM_CB	MCTargetDesc/X86BaseInfo.h	/^    MRM_CB = 40, MRM_D0 = 41, MRM_D1 = 42, MRM_D4 = 43,$/;"	e	enum:llvm::X86II::__anon26
MRM_D0	MCTargetDesc/X86BaseInfo.h	/^    MRM_CB = 40, MRM_D0 = 41, MRM_D1 = 42, MRM_D4 = 43,$/;"	e	enum:llvm::X86II::__anon26
MRM_D1	MCTargetDesc/X86BaseInfo.h	/^    MRM_CB = 40, MRM_D0 = 41, MRM_D1 = 42, MRM_D4 = 43,$/;"	e	enum:llvm::X86II::__anon26
MRM_D4	MCTargetDesc/X86BaseInfo.h	/^    MRM_CB = 40, MRM_D0 = 41, MRM_D1 = 42, MRM_D4 = 43,$/;"	e	enum:llvm::X86II::__anon26
MRM_D5	MCTargetDesc/X86BaseInfo.h	/^    MRM_D5 = 44, MRM_D6 = 45, MRM_D8 = 46, MRM_D9 = 47,$/;"	e	enum:llvm::X86II::__anon26
MRM_D6	MCTargetDesc/X86BaseInfo.h	/^    MRM_D5 = 44, MRM_D6 = 45, MRM_D8 = 46, MRM_D9 = 47,$/;"	e	enum:llvm::X86II::__anon26
MRM_D8	MCTargetDesc/X86BaseInfo.h	/^    MRM_D5 = 44, MRM_D6 = 45, MRM_D8 = 46, MRM_D9 = 47,$/;"	e	enum:llvm::X86II::__anon26
MRM_D9	MCTargetDesc/X86BaseInfo.h	/^    MRM_D5 = 44, MRM_D6 = 45, MRM_D8 = 46, MRM_D9 = 47,$/;"	e	enum:llvm::X86II::__anon26
MRM_DA	MCTargetDesc/X86BaseInfo.h	/^    MRM_DA = 48, MRM_DB = 49, MRM_DC = 50, MRM_DD = 51,$/;"	e	enum:llvm::X86II::__anon26
MRM_DB	MCTargetDesc/X86BaseInfo.h	/^    MRM_DA = 48, MRM_DB = 49, MRM_DC = 50, MRM_DD = 51,$/;"	e	enum:llvm::X86II::__anon26
MRM_DC	MCTargetDesc/X86BaseInfo.h	/^    MRM_DA = 48, MRM_DB = 49, MRM_DC = 50, MRM_DD = 51,$/;"	e	enum:llvm::X86II::__anon26
MRM_DD	MCTargetDesc/X86BaseInfo.h	/^    MRM_DA = 48, MRM_DB = 49, MRM_DC = 50, MRM_DD = 51,$/;"	e	enum:llvm::X86II::__anon26
MRM_DE	MCTargetDesc/X86BaseInfo.h	/^    MRM_DE = 52, MRM_DF = 53, MRM_E0 = 54, MRM_E1 = 55,$/;"	e	enum:llvm::X86II::__anon26
MRM_DF	MCTargetDesc/X86BaseInfo.h	/^    MRM_DE = 52, MRM_DF = 53, MRM_E0 = 54, MRM_E1 = 55,$/;"	e	enum:llvm::X86II::__anon26
MRM_E0	MCTargetDesc/X86BaseInfo.h	/^    MRM_DE = 52, MRM_DF = 53, MRM_E0 = 54, MRM_E1 = 55,$/;"	e	enum:llvm::X86II::__anon26
MRM_E1	MCTargetDesc/X86BaseInfo.h	/^    MRM_DE = 52, MRM_DF = 53, MRM_E0 = 54, MRM_E1 = 55,$/;"	e	enum:llvm::X86II::__anon26
MRM_E2	MCTargetDesc/X86BaseInfo.h	/^    MRM_E2 = 56, MRM_E3 = 57, MRM_E4 = 58, MRM_E5 = 59,$/;"	e	enum:llvm::X86II::__anon26
MRM_E3	MCTargetDesc/X86BaseInfo.h	/^    MRM_E2 = 56, MRM_E3 = 57, MRM_E4 = 58, MRM_E5 = 59,$/;"	e	enum:llvm::X86II::__anon26
MRM_E4	MCTargetDesc/X86BaseInfo.h	/^    MRM_E2 = 56, MRM_E3 = 57, MRM_E4 = 58, MRM_E5 = 59,$/;"	e	enum:llvm::X86II::__anon26
MRM_E5	MCTargetDesc/X86BaseInfo.h	/^    MRM_E2 = 56, MRM_E3 = 57, MRM_E4 = 58, MRM_E5 = 59,$/;"	e	enum:llvm::X86II::__anon26
MRM_E8	MCTargetDesc/X86BaseInfo.h	/^    MRM_E8 = 60, MRM_E9 = 61, MRM_EA = 62, MRM_EB = 63,$/;"	e	enum:llvm::X86II::__anon26
MRM_E9	MCTargetDesc/X86BaseInfo.h	/^    MRM_E8 = 60, MRM_E9 = 61, MRM_EA = 62, MRM_EB = 63,$/;"	e	enum:llvm::X86II::__anon26
MRM_EA	MCTargetDesc/X86BaseInfo.h	/^    MRM_E8 = 60, MRM_E9 = 61, MRM_EA = 62, MRM_EB = 63,$/;"	e	enum:llvm::X86II::__anon26
MRM_EB	MCTargetDesc/X86BaseInfo.h	/^    MRM_E8 = 60, MRM_E9 = 61, MRM_EA = 62, MRM_EB = 63,$/;"	e	enum:llvm::X86II::__anon26
MRM_EC	MCTargetDesc/X86BaseInfo.h	/^    MRM_EC = 64, MRM_ED = 65, MRM_EE = 66, MRM_F0 = 67,$/;"	e	enum:llvm::X86II::__anon26
MRM_ED	MCTargetDesc/X86BaseInfo.h	/^    MRM_EC = 64, MRM_ED = 65, MRM_EE = 66, MRM_F0 = 67,$/;"	e	enum:llvm::X86II::__anon26
MRM_EE	MCTargetDesc/X86BaseInfo.h	/^    MRM_EC = 64, MRM_ED = 65, MRM_EE = 66, MRM_F0 = 67,$/;"	e	enum:llvm::X86II::__anon26
MRM_F0	MCTargetDesc/X86BaseInfo.h	/^    MRM_EC = 64, MRM_ED = 65, MRM_EE = 66, MRM_F0 = 67,$/;"	e	enum:llvm::X86II::__anon26
MRM_F1	MCTargetDesc/X86BaseInfo.h	/^    MRM_F1 = 68, MRM_F2 = 69, MRM_F3 = 70, MRM_F4 = 71,$/;"	e	enum:llvm::X86II::__anon26
MRM_F2	MCTargetDesc/X86BaseInfo.h	/^    MRM_F1 = 68, MRM_F2 = 69, MRM_F3 = 70, MRM_F4 = 71,$/;"	e	enum:llvm::X86II::__anon26
MRM_F3	MCTargetDesc/X86BaseInfo.h	/^    MRM_F1 = 68, MRM_F2 = 69, MRM_F3 = 70, MRM_F4 = 71,$/;"	e	enum:llvm::X86II::__anon26
MRM_F4	MCTargetDesc/X86BaseInfo.h	/^    MRM_F1 = 68, MRM_F2 = 69, MRM_F3 = 70, MRM_F4 = 71,$/;"	e	enum:llvm::X86II::__anon26
MRM_F5	MCTargetDesc/X86BaseInfo.h	/^    MRM_F5 = 72, MRM_F6 = 73, MRM_F7 = 74, MRM_F8 = 75,$/;"	e	enum:llvm::X86II::__anon26
MRM_F6	MCTargetDesc/X86BaseInfo.h	/^    MRM_F5 = 72, MRM_F6 = 73, MRM_F7 = 74, MRM_F8 = 75,$/;"	e	enum:llvm::X86II::__anon26
MRM_F7	MCTargetDesc/X86BaseInfo.h	/^    MRM_F5 = 72, MRM_F6 = 73, MRM_F7 = 74, MRM_F8 = 75,$/;"	e	enum:llvm::X86II::__anon26
MRM_F8	MCTargetDesc/X86BaseInfo.h	/^    MRM_F5 = 72, MRM_F6 = 73, MRM_F7 = 74, MRM_F8 = 75,$/;"	e	enum:llvm::X86II::__anon26
MRM_F9	MCTargetDesc/X86BaseInfo.h	/^    MRM_F9 = 76, MRM_FA = 77, MRM_FB = 78, MRM_FC = 79,$/;"	e	enum:llvm::X86II::__anon26
MRM_FA	MCTargetDesc/X86BaseInfo.h	/^    MRM_F9 = 76, MRM_FA = 77, MRM_FB = 78, MRM_FC = 79,$/;"	e	enum:llvm::X86II::__anon26
MRM_FB	MCTargetDesc/X86BaseInfo.h	/^    MRM_F9 = 76, MRM_FA = 77, MRM_FB = 78, MRM_FC = 79,$/;"	e	enum:llvm::X86II::__anon26
MRM_FC	MCTargetDesc/X86BaseInfo.h	/^    MRM_F9 = 76, MRM_FA = 77, MRM_FB = 78, MRM_FC = 79,$/;"	e	enum:llvm::X86II::__anon26
MRM_FD	MCTargetDesc/X86BaseInfo.h	/^    MRM_FD = 80, MRM_FE = 81, MRM_FF = 82,$/;"	e	enum:llvm::X86II::__anon26
MRM_FE	MCTargetDesc/X86BaseInfo.h	/^    MRM_FD = 80, MRM_FE = 81, MRM_FF = 82,$/;"	e	enum:llvm::X86II::__anon26
MRM_FF	MCTargetDesc/X86BaseInfo.h	/^    MRM_FD = 80, MRM_FE = 81, MRM_FF = 82,$/;"	e	enum:llvm::X86II::__anon26
MUL_IMM	X86ISelLowering.h	/^      MUL_IMM,$/;"	e	enum:llvm::X86ISD::NodeType
MakeM0Inst	X86InstrInfo.cpp	/^static MachineInstr *MakeM0Inst(const TargetInstrInfo &TII, unsigned Opcode,$/;"	f	file:
Mask	X86FloatingPoint.cpp	/^      unsigned Mask;$/;"	m	struct:__anon39::FPS::LiveBundle	file:
MaskRegClassContains	X86InstrInfo.cpp	/^inline static bool MaskRegClassContains(unsigned Reg) {$/;"	f	file:
MatchAddress	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::MatchAddress(SDValue N, X86ISelAddressMode &AM) {$/;"	f	class:X86DAGToDAGISel
MatchAddressBase	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::MatchAddressBase(SDValue N, X86ISelAddressMode &AM) {$/;"	f	class:X86DAGToDAGISel
MatchAddressRecursively	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::MatchAddressRecursively(SDValue N, X86ISelAddressMode &AM,$/;"	f	class:X86DAGToDAGISel
MatchAndEmitInstruction	AsmParser/X86AsmParser.cpp	/^MatchAndEmitInstruction(SMLoc IDLoc, unsigned &Opcode,$/;"	f	class:X86AsmParser
MatchLoadInAddress	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::MatchLoadInAddress(LoadSDNode *N, X86ISelAddressMode &AM){$/;"	f	class:X86DAGToDAGISel
MatchWrapper	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::MatchWrapper(SDValue N, X86ISelAddressMode &AM) {$/;"	f	class:X86DAGToDAGISel
MatchingStackOffset	X86ISelLowering.cpp	/^bool MatchingStackOffset(SDValue Arg, unsigned Offset, ISD::ArgFlagsTy Flags,$/;"	f	file:
MaterializeSETB	X86ISelLowering.cpp	/^static SDValue MaterializeSETB(SDLoc DL, SDValue EFLAGS, SelectionDAG &DAG,$/;"	f	file:
MaxInlineSizeThreshold	X86Subtarget.h	/^  unsigned MaxInlineSizeThreshold;$/;"	m	class:llvm::X86Subtarget
MayFoldIntoStore	X86ISelLowering.cpp	/^static bool MayFoldIntoStore(SDValue Op) {$/;"	f	file:
MayFoldLoad	X86ISelLowering.cpp	/^static bool MayFoldLoad(SDValue Op) {$/;"	f	file:
MayFoldVectorLoad	X86ISelLowering.cpp	/^static bool MayFoldVectorLoad(SDValue V) {$/;"	f	file:
Mem	AsmParser/X86AsmParser.cpp	/^    struct MemOp Mem;$/;"	m	union:__anon2::X86Operand::__anon3	typeref:struct:__anon2::X86Operand::__anon3::MemOp	file:
MemOp	AsmParser/X86AsmParser.cpp	/^  struct MemOp {$/;"	s	struct:__anon2::X86Operand	file:
MemOp	X86InstrInfo.cpp	/^  uint16_t MemOp;$/;"	m	struct:X86OpTblEntry	file:
MemOp2RegOpTable	X86InstrInfo.h	/^  MemOp2RegOpTableType MemOp2RegOpTable;$/;"	m	class:llvm::X86InstrInfo
MemOp2RegOpTableType	X86InstrInfo.h	/^                   std::pair<unsigned, unsigned> > MemOp2RegOpTableType;$/;"	t	class:llvm::X86InstrInfo
MemOp4	MCTargetDesc/X86BaseInfo.h	/^    MemOp4 = 1U << 16,$/;"	e	enum:llvm::X86II::__anon26
Memory	AsmParser/X86AsmParser.cpp	/^    Memory$/;"	e	enum:__anon2::X86Operand::KindTy	file:
ModRMByte	MCTargetDesc/X86MCCodeEmitter.cpp	/^  inline static unsigned char ModRMByte(unsigned Mod, unsigned RegOpcode,$/;"	f	class:__anon29::X86MCCodeEmitter
ModRMByte	X86CodeEmitter.cpp	/^inline static unsigned char ModRMByte(unsigned Mod, unsigned RegOpcode,$/;"	f	file:
ModRMDecision	Disassembler/X86DisassemblerDecoderCommon.h	/^struct ModRMDecision {$/;"	s
ModRMDecisionType	Disassembler/X86DisassemblerDecoderCommon.h	/^} ModRMDecisionType;$/;"	t	typeref:enum:__anon17
ModifierType	Disassembler/X86DisassemblerDecoderCommon.h	/^} ModifierType;$/;"	t	typeref:enum:__anon20
MoveBelowOrigChain	X86ISelDAGToDAG.cpp	/^static void MoveBelowOrigChain(SelectionDAG *CurDAG, SDValue Load,$/;"	f	file:
MoveInstrSize	MCTargetDesc/X86AsmBackend.cpp	/^  unsigned MoveInstrSize;                \/\/\/< Size of a "move" instruction.$/;"	m	class:__anon23::DarwinX86AsmBackend	file:
N86	MCTargetDesc/X86MCTargetDesc.h	/^namespace N86 {$/;"	n	namespace:llvm
NoMMXSSE	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
NoThreeDNow	X86Subtarget.h	/^    NoThreeDNow, ThreeDNow, ThreeDNowA$/;"	e	enum:llvm::X86Subtarget::X863DNowEnum
NodeType	X86ISelLowering.h	/^    enum NodeType {$/;"	g	namespace:llvm::X86ISD
None	X86Subtarget.h	/^  None              \/\/ Set when in -static mode (not PIC or DynamicNoPIC mode).$/;"	e	enum:llvm::PICStyles::Style
NormalizeMask	X86ISelLowering.cpp	/^static void NormalizeMask(SmallVectorImpl<int> &Mask, unsigned NumElems) {$/;"	f	file:
NormalizeVectorShuffle	X86ISelLowering.cpp	/^NormalizeVectorShuffle(SDValue Op, const X86Subtarget *Subtarget,$/;"	f	file:
NotFP	MCTargetDesc/X86BaseInfo.h	/^    NotFP      = 0 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
NotStructReturn	X86ISelLowering.cpp	/^  NotStructReturn,$/;"	e	enum:StructReturnType	file:
NumFPRegs	X86FloatingPoint.cpp	/^      NumFPRegs = 16            \/\/ Including scratch pseudo-registers.$/;"	e	enum:__anon39::FPS::__anon40	file:
NumLocalDynamics	X86MachineFunctionInfo.h	/^  unsigned NumLocalDynamics;$/;"	m	class:llvm::X86MachineFunctionInfo
NumPendingSTs	X86FloatingPoint.cpp	/^    unsigned NumPendingSTs;$/;"	m	struct:__anon39::FPS	file:
NumTargetFixupKinds	MCTargetDesc/X86FixupKinds.h	/^  NumTargetFixupKinds = LastTargetFixupKind - FirstTargetFixupKind$/;"	e	enum:llvm::X86::Fixups
OB	MCTargetDesc/X86BaseInfo.h	/^    OB = 0 << OpMapShift,$/;"	e	enum:llvm::X86II::__anon26
ONEBYTE	Disassembler/X86DisassemblerDecoderCommon.h	/^  ONEBYTE       = 0,$/;"	e	enum:__anon16
ONEBYTE_STR	Disassembler/X86DisassemblerDecoderCommon.h	39;"	d
ONEBYTE_SYM	Disassembler/X86DisassemblerDecoderCommon.h	29;"	d
OR	X86ISelDAGToDAG.cpp	/^  OR,$/;"	e	enum:AtomicOpc	file:
OR	X86ISelLowering.h	/^      INC, DEC, OR, XOR, AND,$/;"	e	enum:llvm::X86ISD::NodeType
OSABI	MCTargetDesc/X86AsmBackend.cpp	/^  uint8_t OSABI;$/;"	m	class:__anon23::ELFX86AsmBackend	file:
OSHasAVXSupport	X86Subtarget.cpp	/^static bool OSHasAVXSupport() {$/;"	f	file:
OffsetOfLoc	AsmParser/X86AsmParser.cpp	/^  SMLoc OffsetOfLoc;$/;"	m	struct:__anon2::X86Operand	file:
OffsetSize	MCTargetDesc/X86AsmBackend.cpp	/^  unsigned OffsetSize;                   \/\/\/< Offset of a "push" instruction.$/;"	m	class:__anon23::DarwinX86AsmBackend	file:
OneArgFP	MCTargetDesc/X86BaseInfo.h	/^    OneArgFP   = 2 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
OneArgFPRW	MCTargetDesc/X86BaseInfo.h	/^    OneArgFPRW = 3 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
OpDecl	AsmParser/X86AsmParser.cpp	/^  void *OpDecl;$/;"	m	struct:__anon2::X86Operand	file:
OpMapMask	MCTargetDesc/X86BaseInfo.h	/^    OpMapMask  = 0x7 << OpMapShift,$/;"	e	enum:llvm::X86II::__anon26
OpMapShift	MCTargetDesc/X86BaseInfo.h	/^    OpMapShift = OpPrefixShift + 3,$/;"	e	enum:llvm::X86II::__anon26
OpPrecedence	AsmParser/X86AsmParser.cpp	/^static const char OpPrecedence[] = {$/;"	m	namespace:__anon1	file:
OpPrefixMask	MCTargetDesc/X86BaseInfo.h	/^    OpPrefixMask  = 0x7 << OpPrefixShift,$/;"	e	enum:llvm::X86II::__anon26
OpPrefixShift	MCTargetDesc/X86BaseInfo.h	/^    OpPrefixShift = AdSizeShift + 1,$/;"	e	enum:llvm::X86II::__anon26
OpSize16	MCTargetDesc/X86BaseInfo.h	/^    OpSize16 = 1,$/;"	e	enum:llvm::X86II::__anon26
OpSize32	MCTargetDesc/X86BaseInfo.h	/^    OpSize32 = 2,$/;"	e	enum:llvm::X86II::__anon26
OpSizeMask	MCTargetDesc/X86BaseInfo.h	/^    OpSizeMask = 0x3 << OpSizeShift,$/;"	e	enum:llvm::X86II::__anon26
OpSizeShift	MCTargetDesc/X86BaseInfo.h	/^    OpSizeShift = 7,$/;"	e	enum:llvm::X86II::__anon26
OpcodeDecision	Disassembler/X86DisassemblerDecoderCommon.h	/^struct OpcodeDecision {$/;"	s
OpcodeShift	MCTargetDesc/X86BaseInfo.h	/^    OpcodeShift   = EncodingShift + 2,$/;"	e	enum:llvm::X86II::__anon26
OpcodeTable	X86FloatingPoint.cpp	/^static const TableEntry OpcodeTable[] = {$/;"	v	file:
OpcodeType	Disassembler/X86DisassemblerDecoderCommon.h	/^} OpcodeType;$/;"	t	typeref:enum:__anon16
OperandEncoding	Disassembler/X86DisassemblerDecoderCommon.h	/^  } OperandEncoding;$/;"	t	typeref:enum:__anon18
OperandSpecifier	Disassembler/X86DisassemblerDecoderCommon.h	/^struct OperandSpecifier {$/;"	s
OperandType	Disassembler/X86DisassemblerDecoderCommon.h	/^} OperandType;$/;"	t	typeref:enum:__anon19
OptForSize	X86ISelDAGToDAG.cpp	/^    bool OptForSize;$/;"	m	class:__anon49::X86DAGToDAGISel	file:
OptimizeConditionalInDecrement	X86ISelLowering.cpp	/^static SDValue OptimizeConditionalInDecrement(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
Others	X86Subtarget.h	/^    Others, IntelAtom, IntelSLM$/;"	e	enum:llvm::X86Subtarget::X86ProcFamilyEnum
PALIGNR	X86ISelLowering.h	/^      PALIGNR,$/;"	e	enum:llvm::X86ISD::NodeType
PCMPEQ	X86ISelLowering.h	/^      PCMPEQ, PCMPGT,$/;"	e	enum:llvm::X86ISD::NodeType
PCMPEQM	X86ISelLowering.h	/^      PCMPEQM, PCMPGTM,$/;"	e	enum:llvm::X86ISD::NodeType
PCMPESTRI	X86ISelLowering.h	/^      PCMPESTRI,$/;"	e	enum:llvm::X86ISD::NodeType
PCMPGT	X86ISelLowering.h	/^      PCMPEQ, PCMPGT,$/;"	e	enum:llvm::X86ISD::NodeType
PCMPGTM	X86ISelLowering.h	/^      PCMPEQM, PCMPGTM,$/;"	e	enum:llvm::X86ISD::NodeType
PCMPISTRI	X86ISelLowering.h	/^      PCMPISTRI,$/;"	e	enum:llvm::X86ISD::NodeType
PD	MCTargetDesc/X86BaseInfo.h	/^    PS = 1 << OpPrefixShift, PD = 2 << OpPrefixShift,$/;"	e	enum:llvm::X86II::__anon26
PEXTRB	X86ISelLowering.h	/^      PEXTRB,$/;"	e	enum:llvm::X86ISD::NodeType
PEXTRW	X86ISelLowering.h	/^      PEXTRW,$/;"	e	enum:llvm::X86ISD::NodeType
PICBase	X86JITInfo.h	/^    uintptr_t PICBase;$/;"	m	class:llvm::X86JITInfo
PICBaseOffset	X86CodeEmitter.cpp	/^    intptr_t PICBaseOffset;$/;"	m	class:__anon36::Emitter	file:
PICStyle	X86Subtarget.h	/^  PICStyles::Style PICStyle;$/;"	m	class:llvm::X86Subtarget
PICStyles	X86Subtarget.h	/^namespace PICStyles {$/;"	n	namespace:llvm
PINSRB	X86ISelLowering.h	/^      PINSRB,$/;"	e	enum:llvm::X86ISD::NodeType
PINSRW	X86ISelLowering.h	/^      PINSRW, MMX_PINSRW,$/;"	e	enum:llvm::X86ISD::NodeType
PMULUDQ	X86ISelLowering.h	/^      PMULUDQ,$/;"	e	enum:llvm::X86ISD::NodeType
PRINT_ALIAS_INSTR	InstPrinter/X86ATTInstPrinter.cpp	32;"	d	file:
PS	MCTargetDesc/X86BaseInfo.h	/^    PS = 1 << OpPrefixShift, PD = 2 << OpPrefixShift,$/;"	e	enum:llvm::X86II::__anon26
PSHUFB	X86ISelLowering.h	/^      PSHUFB,$/;"	e	enum:llvm::X86ISD::NodeType
PSHUFD	X86ISelLowering.h	/^      PSHUFD,$/;"	e	enum:llvm::X86ISD::NodeType
PSHUFHW	X86ISelLowering.h	/^      PSHUFHW,$/;"	e	enum:llvm::X86ISD::NodeType
PSHUFLW	X86ISelLowering.h	/^      PSHUFLW,$/;"	e	enum:llvm::X86ISD::NodeType
PSIGN	X86ISelLowering.h	/^      PSIGN,$/;"	e	enum:llvm::X86ISD::NodeType
PTEST	X86ISelLowering.h	/^      PTEST,$/;"	e	enum:llvm::X86ISD::NodeType
PadShortFunc	X86PadShortFunction.cpp	/^    PadShortFunc() : MachineFunctionPass(ID)$/;"	f	struct:__anon52::PadShortFunc
PadShortFunc	X86PadShortFunction.cpp	/^  struct PadShortFunc : public MachineFunctionPass {$/;"	s	namespace:__anon52	file:
PadShortFunctions	X86Subtarget.h	/^  bool PadShortFunctions;$/;"	m	class:llvm::X86Subtarget
ParseATTOperand	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseATTOperand() {$/;"	f	class:X86AsmParser
ParseDirective	AsmParser/X86AsmParser.cpp	/^bool X86AsmParser::ParseDirective(AsmToken DirectiveID) {$/;"	f	class:X86AsmParser
ParseDirectiveCode	AsmParser/X86AsmParser.cpp	/^bool X86AsmParser::ParseDirectiveCode(StringRef IDVal, SMLoc L) {$/;"	f	class:X86AsmParser
ParseDirectiveWord	AsmParser/X86AsmParser.cpp	/^bool X86AsmParser::ParseDirectiveWord(unsigned Size, SMLoc L) {$/;"	f	class:X86AsmParser
ParseInstruction	AsmParser/X86AsmParser.cpp	/^ParseInstruction(ParseInstructionInfo &Info, StringRef Name, SMLoc NameLoc,$/;"	f	class:X86AsmParser
ParseIntelBracExpression	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseIntelBracExpression(unsigned SegReg, SMLoc Start,$/;"	f	class:X86AsmParser
ParseIntelDotOperator	AsmParser/X86AsmParser.cpp	/^bool X86AsmParser::ParseIntelDotOperator(const MCExpr *Disp,$/;"	f	class:X86AsmParser
ParseIntelExpression	AsmParser/X86AsmParser.cpp	/^bool X86AsmParser::ParseIntelExpression(IntelExprStateMachine &SM, SMLoc &End) {$/;"	f	class:X86AsmParser
ParseIntelIdentifier	AsmParser/X86AsmParser.cpp	/^bool X86AsmParser::ParseIntelIdentifier(const MCExpr *&Val,$/;"	f	class:X86AsmParser
ParseIntelMemOperand	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseIntelMemOperand(int64_t ImmDisp, SMLoc Start,$/;"	f	class:X86AsmParser
ParseIntelOffsetOfOperator	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseIntelOffsetOfOperator() {$/;"	f	class:X86AsmParser
ParseIntelOperand	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseIntelOperand() {$/;"	f	class:X86AsmParser
ParseIntelOperator	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseIntelOperator(unsigned OpKind) {$/;"	f	class:X86AsmParser
ParseIntelSegmentOverride	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseIntelSegmentOverride(unsigned SegReg,$/;"	f	class:X86AsmParser
ParseMemOperand	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseMemOperand(unsigned SegReg, SMLoc MemStart) {$/;"	f	class:X86AsmParser
ParseOperand	AsmParser/X86AsmParser.cpp	/^X86Operand *X86AsmParser::ParseOperand() {$/;"	f	class:X86AsmParser
ParseRegister	AsmParser/X86AsmParser.cpp	/^bool X86AsmParser::ParseRegister(unsigned &RegNo,$/;"	f	class:X86AsmParser
ParseX86Triple	MCTargetDesc/X86MCTargetDesc.cpp	/^std::string X86_MC::ParseX86Triple(StringRef TT) {$/;"	f	class:X86_MC
Parser	AsmParser/X86AsmParser.cpp	/^  MCAsmParser &Parser;$/;"	m	class:__anon1::X86AsmParser	file:
PendingST	X86FloatingPoint.cpp	/^    unsigned char PendingST[8];$/;"	m	struct:__anon39::FPS	file:
PerformADCCombine	X86ISelLowering.cpp	/^static SDValue PerformADCCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformAddCombine	X86ISelLowering.cpp	/^static SDValue PerformAddCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformAndCombine	X86ISelLowering.cpp	/^static SDValue PerformAndCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformBTCombine	X86ISelLowering.cpp	/^static SDValue PerformBTCombine(SDNode *N,$/;"	f	file:
PerformBrCondCombine	X86ISelLowering.cpp	/^static SDValue PerformBrCondCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformCMOVCombine	X86ISelLowering.cpp	/^static SDValue PerformCMOVCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformDAGCombine	X86ISelLowering.cpp	/^SDValue X86TargetLowering::PerformDAGCombine(SDNode *N,$/;"	f	class:X86TargetLowering
PerformEXTRACT_VECTOR_ELTCombine	X86ISelLowering.cpp	/^static SDValue PerformEXTRACT_VECTOR_ELTCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformFADDCombine	X86ISelLowering.cpp	/^static SDValue PerformFADDCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformFANDCombine	X86ISelLowering.cpp	/^static SDValue PerformFANDCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
PerformFANDNCombine	X86ISelLowering.cpp	/^static SDValue PerformFANDNCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
PerformFMACombine	X86ISelLowering.cpp	/^static SDValue PerformFMACombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformFMinFMaxCombine	X86ISelLowering.cpp	/^static SDValue PerformFMinFMaxCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
PerformFORCombine	X86ISelLowering.cpp	/^static SDValue PerformFORCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
PerformFSUBCombine	X86ISelLowering.cpp	/^static SDValue PerformFSUBCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformISDSETCCCombine	X86ISelLowering.cpp	/^static SDValue PerformISDSETCCCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformLOADCombine	X86ISelLowering.cpp	/^static SDValue PerformLOADCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformMulCombine	X86ISelLowering.cpp	/^static SDValue PerformMulCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformOrCombine	X86ISelLowering.cpp	/^static SDValue PerformOrCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformSELECTCombine	X86ISelLowering.cpp	/^static SDValue PerformSELECTCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformSETCCCombine	X86ISelLowering.cpp	/^static SDValue PerformSETCCCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformSExtCombine	X86ISelLowering.cpp	/^static SDValue PerformSExtCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformSHLCombine	X86ISelLowering.cpp	/^static SDValue PerformSHLCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
PerformSIGN_EXTEND_INREGCombine	X86ISelLowering.cpp	/^static SDValue PerformSIGN_EXTEND_INREGCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformSINT_TO_FPCombine	X86ISelLowering.cpp	/^static SDValue PerformSINT_TO_FPCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformSTORECombine	X86ISelLowering.cpp	/^static SDValue PerformSTORECombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformShiftCombine	X86ISelLowering.cpp	/^static SDValue PerformShiftCombine(SDNode* N, SelectionDAG &DAG,$/;"	f	file:
PerformShuffleCombine	X86ISelLowering.cpp	/^static SDValue PerformShuffleCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformShuffleCombine256	X86ISelLowering.cpp	/^static SDValue PerformShuffleCombine256(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformSubCombine	X86ISelLowering.cpp	/^static SDValue PerformSubCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformTruncateCombine	X86ISelLowering.cpp	/^static SDValue PerformTruncateCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformVZEXT_MOVLCombine	X86ISelLowering.cpp	/^static SDValue PerformVZEXT_MOVLCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
PerformXorCombine	X86ISelLowering.cpp	/^static SDValue PerformXorCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PerformZExtCombine	X86ISelLowering.cpp	/^static SDValue PerformZExtCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
PopTable	X86FloatingPoint.cpp	/^static const TableEntry PopTable[] = {$/;"	v	file:
PostRAScheduler	X86Subtarget.h	/^  bool PostRAScheduler;$/;"	m	class:llvm::X86Subtarget
PostfixStack	AsmParser/X86AsmParser.cpp	/^    SmallVector<ICToken, 4> PostfixStack;$/;"	m	class:__anon1::X86AsmParser::InfixCalculator	file:
PreprocessISelDAG	X86ISelDAGToDAG.cpp	/^void X86DAGToDAGISel::PreprocessISelDAG() {$/;"	f	class:X86DAGToDAGISel
PrevState	AsmParser/X86AsmParser.cpp	/^    IntelExprState State, PrevState;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
PrintAsmMemoryOperand	X86AsmPrinter.cpp	/^bool X86AsmPrinter::PrintAsmMemoryOperand(const MachineInstr *MI,$/;"	f	class:X86AsmPrinter
PrintAsmOperand	X86AsmPrinter.cpp	/^bool X86AsmPrinter::PrintAsmOperand(const MachineInstr *MI, unsigned OpNo,$/;"	f	class:X86AsmPrinter
PromoteSplat	X86ISelLowering.cpp	/^static SDValue PromoteSplat(ShuffleVectorSDNode *SV, SelectionDAG &DAG) {$/;"	f	file:
PromoteSplati8i16	X86ISelLowering.cpp	/^static SDValue PromoteSplati8i16(SDValue V, SelectionDAG &DAG, int &EltNo) {$/;"	f	file:
Pseudo	MCTargetDesc/X86BaseInfo.h	/^    Pseudo         = 0,$/;"	e	enum:llvm::X86II::__anon26
PushInstrSize	MCTargetDesc/X86AsmBackend.cpp	/^  unsigned PushInstrSize;                \/\/\/< Size of a "push" instruction.$/;"	m	class:__anon23::DarwinX86AsmBackend	file:
RDRAND	X86ISelLowering.h	/^      RDRAND,$/;"	e	enum:llvm::X86ISD::NodeType
RDSEED	X86ISelLowering.h	/^      RDSEED,$/;"	e	enum:llvm::X86ISD::NodeType
RDTSC_DAG	X86ISelLowering.h	/^      RDTSC_DAG,$/;"	e	enum:llvm::X86ISD::NodeType
REGS_16BIT	Disassembler/X86DisassemblerDecoder.h	130;"	d
REGS_32BIT	Disassembler/X86DisassemblerDecoder.h	166;"	d
REGS_64BIT	Disassembler/X86DisassemblerDecoder.h	202;"	d
REGS_8BIT	Disassembler/X86DisassemblerDecoder.h	90;"	d
REGS_CONTROL	Disassembler/X86DisassemblerDecoder.h	360;"	d
REGS_DEBUG	Disassembler/X86DisassemblerDecoder.h	350;"	d
REGS_MASKS	Disassembler/X86DisassemblerDecoder.h	332;"	d
REGS_MMX	Disassembler/X86DisassemblerDecoder.h	220;"	d
REGS_SEGMENT	Disassembler/X86DisassemblerDecoder.h	342;"	d
REGS_XMM	Disassembler/X86DisassemblerDecoder.h	/^  REGS_XMM$/;"	e	enum:__anon6
REGS_XMM	Disassembler/X86DisassemblerDecoder.h	230;"	d
REGS_YMM	Disassembler/X86DisassemblerDecoder.h	/^  REGS_YMM$/;"	e	enum:__anon6
REGS_YMM	Disassembler/X86DisassemblerDecoder.h	264;"	d
REGS_ZMM	Disassembler/X86DisassemblerDecoder.h	/^  REGS_ZMM$/;"	e	enum:__anon6
REGS_ZMM	Disassembler/X86DisassemblerDecoder.h	298;"	d
REP	MCTargetDesc/X86BaseInfo.h	/^    REP = 1 << REPShift,$/;"	e	enum:llvm::X86II::__anon26
REPShift	MCTargetDesc/X86BaseInfo.h	/^    REPShift = LOCKShift + 1,$/;"	e	enum:llvm::X86II::__anon26
REP_MOVS	X86ISelLowering.h	/^      REP_MOVS,$/;"	e	enum:llvm::X86ISD::NodeType
REP_STOS	X86ISelLowering.h	/^      REP_STOS,$/;"	e	enum:llvm::X86ISD::NodeType
RET_FLAG	X86ISelLowering.h	/^      RET_FLAG,$/;"	e	enum:llvm::X86ISD::NodeType
REXShift	MCTargetDesc/X86BaseInfo.h	/^    REXShift    = OpMapShift + 3,$/;"	e	enum:llvm::X86II::__anon26
REX_W	MCTargetDesc/X86BaseInfo.h	/^    REX_W       = 1 << REXShift,$/;"	e	enum:llvm::X86II::__anon26
RI	X86InstrInfo.h	/^  const X86RegisterInfo RI;$/;"	m	class:llvm::X86InstrInfo
RIPRel	X86Subtarget.h	/^  RIPRel,           \/\/ Used on X86-64 when not in -static mode.$/;"	e	enum:llvm::PICStyles::Style
RU_NotUsed	X86FixupLEAs.cpp	/^    enum RegUsageState { RU_NotUsed, RU_Write, RU_Read };$/;"	e	enum:__anon38::FixupLEAPass::RegUsageState	file:
RU_Read	X86FixupLEAs.cpp	/^    enum RegUsageState { RU_NotUsed, RU_Write, RU_Read };$/;"	e	enum:__anon38::FixupLEAPass::RegUsageState	file:
RU_Write	X86FixupLEAs.cpp	/^    enum RegUsageState { RU_NotUsed, RU_Write, RU_Read };$/;"	e	enum:__anon38::FixupLEAPass::RegUsageState	file:
RawFrm	MCTargetDesc/X86BaseInfo.h	/^    RawFrm         = 1,$/;"	e	enum:llvm::X86II::__anon26
RawFrmDst	MCTargetDesc/X86BaseInfo.h	/^    RawFrmDst      = 9,$/;"	e	enum:llvm::X86II::__anon26
RawFrmDstSrc	MCTargetDesc/X86BaseInfo.h	/^    RawFrmDstSrc   = 10,$/;"	e	enum:llvm::X86II::__anon26
RawFrmImm16	MCTargetDesc/X86BaseInfo.h	/^    RawFrmImm16 = 12,$/;"	e	enum:llvm::X86II::__anon26
RawFrmImm8	MCTargetDesc/X86BaseInfo.h	/^    RawFrmImm8 = 11,$/;"	e	enum:llvm::X86II::__anon26
RawFrmMemOffs	MCTargetDesc/X86BaseInfo.h	/^    RawFrmMemOffs  = 7,$/;"	e	enum:llvm::X86II::__anon26
RawFrmSrc	MCTargetDesc/X86BaseInfo.h	/^    RawFrmSrc      = 8,$/;"	e	enum:llvm::X86II::__anon26
RecordRelocation	MCTargetDesc/X86MachObjectWriter.cpp	/^  void RecordRelocation(MachObjectWriter *Writer,$/;"	f	class:__anon33::X86MachObjectWriter
RecordScatteredRelocation	MCTargetDesc/X86MachObjectWriter.cpp	/^bool X86MachObjectWriter::RecordScatteredRelocation(MachObjectWriter *Writer,$/;"	f	class:X86MachObjectWriter
RecordTLVPRelocation	MCTargetDesc/X86MachObjectWriter.cpp	/^void X86MachObjectWriter::RecordTLVPRelocation(MachObjectWriter *Writer,$/;"	f	class:X86MachObjectWriter
RecordX86Relocation	MCTargetDesc/X86MachObjectWriter.cpp	/^void X86MachObjectWriter::RecordX86Relocation(MachObjectWriter *Writer,$/;"	f	class:X86MachObjectWriter
RecordX86_64Relocation	MCTargetDesc/X86MachObjectWriter.cpp	/^void X86MachObjectWriter::RecordX86_64Relocation(MachObjectWriter *Writer,$/;"	f	class:X86MachObjectWriter
Reg	AsmParser/X86AsmParser.cpp	/^    struct RegOp Reg;$/;"	m	union:__anon2::X86Operand::__anon3	typeref:struct:__anon2::X86Operand::__anon3::RegOp	file:
Reg	Disassembler/X86DisassemblerDecoder.h	/^} Reg;$/;"	t	typeref:enum:__anon9
Reg	X86InstrBuilder.h	/^    unsigned Reg;$/;"	m	union:llvm::X86AddressMode::__anon43
RegBase	X86ISelDAGToDAG.cpp	/^      RegBase,$/;"	e	enum:__anon47::X86ISelAddressMode::__anon48	file:
RegBase	X86InstrBuilder.h	/^    RegBase,$/;"	e	enum:llvm::X86AddressMode::__anon42
RegMap	X86FloatingPoint.cpp	/^    unsigned RegMap[NumFPRegs];$/;"	m	struct:__anon39::FPS	file:
RegNo	AsmParser/X86AsmParser.cpp	/^    unsigned RegNo;$/;"	m	struct:__anon2::X86Operand::RegOp	file:
RegOp	AsmParser/X86AsmParser.cpp	/^  struct RegOp {$/;"	s	struct:__anon2::X86Operand	file:
RegOp	X86InstrInfo.cpp	/^  uint16_t RegOp;$/;"	m	struct:X86OpTblEntry	file:
RegOp2MemOpTable0	X86InstrInfo.h	/^  RegOp2MemOpTableType RegOp2MemOpTable0;$/;"	m	class:llvm::X86InstrInfo
RegOp2MemOpTable1	X86InstrInfo.h	/^  RegOp2MemOpTableType RegOp2MemOpTable1;$/;"	m	class:llvm::X86InstrInfo
RegOp2MemOpTable2	X86InstrInfo.h	/^  RegOp2MemOpTableType RegOp2MemOpTable2;$/;"	m	class:llvm::X86InstrInfo
RegOp2MemOpTable2Addr	X86InstrInfo.h	/^  RegOp2MemOpTableType RegOp2MemOpTable2Addr;$/;"	m	class:llvm::X86InstrInfo
RegOp2MemOpTable3	X86InstrInfo.h	/^  RegOp2MemOpTableType RegOp2MemOpTable3;$/;"	m	class:llvm::X86InstrInfo
RegOp2MemOpTableType	X86InstrInfo.h	/^                   std::pair<unsigned, unsigned> > RegOp2MemOpTableType;$/;"	t	class:llvm::X86InstrInfo
RegSaveFrameIndex	X86MachineFunctionInfo.h	/^  int RegSaveFrameIndex;$/;"	m	class:llvm::X86MachineFunctionInfo
RegStructReturn	X86ISelLowering.cpp	/^  RegStructReturn,$/;"	e	enum:StructReturnType	file:
RegUsageState	X86FixupLEAs.cpp	/^    enum RegUsageState { RU_NotUsed, RU_Write, RU_Read };$/;"	g	class:__anon38::FixupLEAPass	file:
Register	AsmParser/X86AsmParser.cpp	/^    Register,$/;"	e	enum:__anon2::X86Operand::KindTy	file:
RelocationType	X86Relocations.h	/^    enum RelocationType {$/;"	g	namespace:llvm::X86
RemoveBranch	X86InstrInfo.cpp	/^unsigned X86InstrInfo::RemoveBranch(MachineBasicBlock &MBB) const {$/;"	f	class:X86InstrInfo
ReplaceATOMIC_BINARY_64	X86ISelLowering.cpp	/^ReplaceATOMIC_BINARY_64(SDNode *Node, SmallVectorImpl<SDValue>&Results,$/;"	f	file:
ReplaceATOMIC_LOAD	X86ISelLowering.cpp	/^static void ReplaceATOMIC_LOAD(SDNode *Node,$/;"	f	file:
ReplaceNodeResults	X86ISelLowering.cpp	/^void X86TargetLowering::ReplaceNodeResults(SDNode *N,$/;"	f	class:X86TargetLowering
ReplaceTLSBaseAddrCall	X86InstrInfo.cpp	/^    MachineInstr *ReplaceTLSBaseAddrCall(MachineInstr *I,$/;"	f	struct:__anon46::LDTLSCleanup
ReplaceableInstrs	X86InstrInfo.cpp	/^static const uint16_t ReplaceableInstrs[][3] = {$/;"	v	file:
ReplaceableInstrsAVX2	X86InstrInfo.cpp	/^static const uint16_t ReplaceableInstrsAVX2[][3] = {$/;"	v	file:
ReturnAddrIndex	X86MachineFunctionInfo.h	/^  int ReturnAddrIndex;$/;"	m	class:llvm::X86MachineFunctionInfo
ReturnBBs	X86PadShortFunction.cpp	/^    DenseMap<MachineBasicBlock*, unsigned int> ReturnBBs;$/;"	m	struct:__anon52::PadShortFunc	file:
ReverseBranchCondition	X86InstrInfo.cpp	/^ReverseBranchCondition(SmallVectorImpl<MachineOperand> &Cond) const {$/;"	f	class:X86InstrInfo
ReverseST0Table	X86FloatingPoint.cpp	/^static const TableEntry ReverseST0Table[] = {$/;"	v	file:
ReverseSTiTable	X86FloatingPoint.cpp	/^static const TableEntry ReverseSTiTable[] = {$/;"	v	file:
RewriteAsNarrowerShuffle	X86ISelLowering.cpp	/^SDValue RewriteAsNarrowerShuffle(ShuffleVectorSDNode *SVOp,$/;"	f	file:
RewriteIntelBracExpression	AsmParser/X86AsmParser.cpp	/^RewriteIntelBracExpression(SmallVectorImpl<AsmRewrite> *AsmRewrites,$/;"	f	file:
SAHF	X86ISelLowering.h	/^      SAHF,$/;"	e	enum:llvm::X86ISD::NodeType
SBB	X86ISelLowering.h	/^      ADD, SUB, ADC, SBB, SMUL,$/;"	e	enum:llvm::X86ISD::NodeType
SEG_ALLOCA	X86ISelLowering.h	/^      SEG_ALLOCA,$/;"	e	enum:llvm::X86ISD::NodeType
SEG_OVERRIDE_CS	Disassembler/X86DisassemblerDecoder.h	/^  SEG_OVERRIDE_CS,$/;"	e	enum:__anon10
SEG_OVERRIDE_DS	Disassembler/X86DisassemblerDecoder.h	/^  SEG_OVERRIDE_DS,$/;"	e	enum:__anon10
SEG_OVERRIDE_ES	Disassembler/X86DisassemblerDecoder.h	/^  SEG_OVERRIDE_ES,$/;"	e	enum:__anon10
SEG_OVERRIDE_FS	Disassembler/X86DisassemblerDecoder.h	/^  SEG_OVERRIDE_FS,$/;"	e	enum:__anon10
SEG_OVERRIDE_GS	Disassembler/X86DisassemblerDecoder.h	/^  SEG_OVERRIDE_GS,$/;"	e	enum:__anon10
SEG_OVERRIDE_NONE	Disassembler/X86DisassemblerDecoder.h	/^  SEG_OVERRIDE_NONE,$/;"	e	enum:__anon10
SEG_OVERRIDE_SS	Disassembler/X86DisassemblerDecoder.h	/^  SEG_OVERRIDE_SS,$/;"	e	enum:__anon10
SEG_OVERRIDE_max	Disassembler/X86DisassemblerDecoder.h	/^  SEG_OVERRIDE_max$/;"	e	enum:__anon10
SELECT	X86ISelLowering.h	/^      SELECT,$/;"	e	enum:llvm::X86ISD::NodeType
SETCC	X86ISelLowering.h	/^      SETCC,$/;"	e	enum:llvm::X86ISD::NodeType
SETCC_CARRY	X86ISelLowering.h	/^      SETCC_CARRY,  \/\/ R = carry_bit ? ~0 : 0$/;"	e	enum:llvm::X86ISD::NodeType
SFENCE	X86ISelLowering.h	/^      SFENCE,$/;"	e	enum:llvm::X86ISD::NodeType
SHLD	X86ISelLowering.h	/^      SHLD,$/;"	e	enum:llvm::X86ISD::NodeType
SHRD	X86ISelLowering.h	/^      SHRD,$/;"	e	enum:llvm::X86ISD::NodeType
SHUFP	X86ISelLowering.h	/^      SHUFP,$/;"	e	enum:llvm::X86ISD::NodeType
SIBBase	Disassembler/X86DisassemblerDecoder.h	/^} SIBBase;$/;"	t	typeref:enum:__anon7
SIBIndex	Disassembler/X86DisassemblerDecoder.h	/^} SIBIndex;$/;"	t	typeref:enum:__anon6
SIB_BASE_NONE	Disassembler/X86DisassemblerDecoder.h	/^  SIB_BASE_NONE,$/;"	e	enum:__anon7
SIB_BASE_max	Disassembler/X86DisassemblerDecoder.h	/^  SIB_BASE_max$/;"	e	enum:__anon7
SIB_INDEX_NONE	Disassembler/X86DisassemblerDecoder.h	/^  SIB_INDEX_NONE,$/;"	e	enum:__anon6
SIB_INDEX_max	Disassembler/X86DisassemblerDecoder.h	/^  SIB_INDEX_max$/;"	e	enum:__anon6
SIZE	X86JITInfo.cpp	63;"	d	file:
SIZE	X86JITInfo.cpp	66;"	d	file:
SM	X86AsmPrinter.h	/^  StackMaps SM;$/;"	m	class:llvm::X86AsmPrinter
SMAX	X86ISelLowering.h	/^      SMAX, SMIN,$/;"	e	enum:llvm::X86ISD::NodeType
SMIN	X86ISelLowering.h	/^      SMAX, SMIN,$/;"	e	enum:llvm::X86ISD::NodeType
SMUL	X86ISelLowering.h	/^      ADD, SUB, ADC, SBB, SMUL,$/;"	e	enum:llvm::X86ISD::NodeType
SM_SentinelZero	Utils/X86ShuffleDecode.h	/^  SM_SentinelZero = -1$/;"	e	enum:llvm::__anon35
SRetReturnReg	X86MachineFunctionInfo.h	/^  unsigned SRetReturnReg;$/;"	m	class:llvm::X86MachineFunctionInfo
SSE1	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
SSE2	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
SSE3	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
SSE41	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
SSE42	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
SSEDomainShift	MCTargetDesc/X86BaseInfo.h	/^    SSEDomainShift = REPShift + 1,$/;"	e	enum:llvm::X86II::__anon26
SSSE3	X86Subtarget.h	/^    NoMMXSSE, MMX, SSE1, SSE2, SSE3, SSSE3, SSE41, SSE42, AVX, AVX2, AVX512F$/;"	e	enum:llvm::X86Subtarget::X86SSEEnum
ST	X86TargetTransformInfo.cpp	/^  const X86Subtarget *ST;$/;"	m	class:__anon54::LLVM_FINAL	file:
STI	AsmParser/X86AsmParser.cpp	/^  MCSubtargetInfo &STI;$/;"	m	class:__anon1::X86AsmParser	file:
STI	X86FrameLowering.h	/^  const X86Subtarget &STI;$/;"	m	class:llvm::X86FrameLowering
ST_CLEAN	X86VZeroUpper.cpp	/^      ST_CLEAN   = 1,$/;"	e	enum:__anon55::VZeroUpperInserter::__anon56	file:
ST_DIRTY	X86VZeroUpper.cpp	/^      ST_DIRTY   = 2,$/;"	e	enum:__anon55::VZeroUpperInserter::__anon56	file:
ST_INIT	X86VZeroUpper.cpp	/^      ST_INIT    = 3$/;"	e	enum:__anon55::VZeroUpperInserter::__anon56	file:
ST_UNKNOWN	X86VZeroUpper.cpp	/^      ST_UNKNOWN = 0,$/;"	e	enum:__anon55::VZeroUpperInserter::__anon56	file:
SUB	X86ISelDAGToDAG.cpp	/^  SUB,$/;"	e	enum:AtomicOpc	file:
SUB	X86ISelLowering.h	/^      ADD, SUB, ADC, SBB, SMUL,$/;"	e	enum:llvm::X86ISD::NodeType
SUBUS	X86ISelLowering.h	/^      SUBUS,$/;"	e	enum:llvm::X86ISD::NodeType
SavedRegs	MCTargetDesc/X86AsmBackend.cpp	/^  mutable unsigned SavedRegs[CU_NUM_SAVED_REGS];$/;"	m	class:__anon23::DarwinX86AsmBackend	file:
Scale	AsmParser/X86AsmParser.cpp	/^    unsigned BaseReg, IndexReg, TmpReg, Scale;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
Scale	AsmParser/X86AsmParser.cpp	/^    unsigned Scale;$/;"	m	struct:__anon2::X86Operand::MemOp	file:
Scale	X86ISelDAGToDAG.cpp	/^    unsigned Scale;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
Scale	X86InstrBuilder.h	/^  unsigned Scale;$/;"	m	struct:llvm::X86AddressMode
SegReg	AsmParser/X86AsmParser.cpp	/^    unsigned SegReg;$/;"	m	struct:__anon2::X86Operand::MemOp	file:
Segment	X86ISelDAGToDAG.cpp	/^    SDValue Segment;$/;"	m	struct:__anon47::X86ISelAddressMode	file:
SegmentOverride	Disassembler/X86DisassemblerDecoder.h	/^} SegmentOverride;$/;"	t	typeref:enum:__anon10
Select	X86ISelDAGToDAG.cpp	/^SDNode *X86DAGToDAGISel::Select(SDNode *Node) {$/;"	f	class:X86DAGToDAGISel
SelectAddr	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::SelectAddr(SDNode *Parent, SDValue N, SDValue &Base,$/;"	f	class:X86DAGToDAGISel
SelectAtomic64	X86ISelDAGToDAG.cpp	/^SDNode *X86DAGToDAGISel::SelectAtomic64(SDNode *Node, unsigned Opc) {$/;"	f	class:X86DAGToDAGISel
SelectAtomicLoadArith	X86ISelDAGToDAG.cpp	/^SDNode *X86DAGToDAGISel::SelectAtomicLoadArith(SDNode *Node, MVT NVT) {$/;"	f	class:X86DAGToDAGISel
SelectGather	X86ISelDAGToDAG.cpp	/^SDNode *X86DAGToDAGISel::SelectGather(SDNode *Node, unsigned Opc) {$/;"	f	class:X86DAGToDAGISel
SelectInlineAsmMemoryOperand	X86ISelDAGToDAG.cpp	/^SelectInlineAsmMemoryOperand(const SDValue &Op, char ConstraintCode,$/;"	f	class:X86DAGToDAGISel
SelectLEA64_32Addr	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::SelectLEA64_32Addr(SDValue N, SDValue &Base,$/;"	f	class:X86DAGToDAGISel
SelectLEAAddr	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::SelectLEAAddr(SDValue N,$/;"	f	class:X86DAGToDAGISel
SelectMOV64Imm32	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::SelectMOV64Imm32(SDValue N, SDValue &Imm) {$/;"	f	class:X86DAGToDAGISel
SelectScalarSSELoad	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::SelectScalarSSELoad(SDNode *Root,$/;"	f	class:X86DAGToDAGISel
SelectTLSADDRAddr	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::SelectTLSADDRAddr(SDValue N, SDValue &Base,$/;"	f	class:X86DAGToDAGISel
SetRegister	X86InstrInfo.cpp	/^    MachineInstr *SetRegister(MachineInstr *I, unsigned *TLSBaseAddrReg) {$/;"	f	struct:__anon46::LDTLSCleanup
SextConstantI16	X86ISelDAGToDAG.cpp	/^  SextConstantI16,$/;"	e	enum:AtomicSz	file:
SextConstantI32	X86ISelDAGToDAG.cpp	/^  SextConstantI32,$/;"	e	enum:AtomicSz	file:
SextConstantI64	X86ISelDAGToDAG.cpp	/^  SextConstantI64,$/;"	e	enum:AtomicSz	file:
ShouldShrinkFPConstant	X86ISelLowering.h	/^    virtual bool ShouldShrinkFPConstant(EVT VT) const {$/;"	f	class:llvm::X86TargetLowering
ShouldXformToMOVHLPS	X86ISelLowering.cpp	/^static bool ShouldXformToMOVHLPS(ArrayRef<int> Mask, MVT VT) {$/;"	f	file:
ShouldXformToMOVLP	X86ISelLowering.cpp	/^static bool ShouldXformToMOVLP(SDNode *V1, SDNode *V2,$/;"	f	file:
SimplifyMOVSX	X86MCInstLower.cpp	/^static void SimplifyMOVSX(MCInst &Inst) {$/;"	f	file:
SimplifyShortImmForm	X86MCInstLower.cpp	/^static void SimplifyShortImmForm(MCInst &Inst, unsigned Opcode) {$/;"	f	file:
SimplifyShortMoveForm	X86MCInstLower.cpp	/^static void SimplifyShortMoveForm(X86AsmPrinter &Printer, MCInst &Inst,$/;"	f	file:
Size	AsmParser/X86AsmParser.cpp	/^    unsigned Size;$/;"	m	struct:__anon2::X86Operand::MemOp	file:
SlotSize	X86RegisterInfo.h	/^  unsigned SlotSize;$/;"	m	class:llvm::X86RegisterInfo
SpecialFP	MCTargetDesc/X86BaseInfo.h	/^    SpecialFP  = 7 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
Stack	X86FloatingPoint.cpp	/^    unsigned Stack[8];          \/\/ FP<n> Registers in each stack slot...$/;"	m	struct:__anon39::FPS	file:
StackAlignOverride	X86Subtarget.h	/^  unsigned StackAlignOverride;$/;"	m	class:llvm::X86Subtarget
StackDivide	MCTargetDesc/X86AsmBackend.cpp	/^  unsigned StackDivide;                  \/\/\/< Amount to adjust stack stize by.$/;"	m	class:__anon23::DarwinX86AsmBackend	file:
StackPtr	X86RegisterInfo.h	/^  unsigned StackPtr;$/;"	m	class:llvm::X86RegisterInfo
StackStructReturn	X86ISelLowering.cpp	/^  StackStructReturn$/;"	e	enum:StructReturnType	file:
StackTop	X86FloatingPoint.cpp	/^    unsigned StackTop;          \/\/ The current top of the FP stack.$/;"	m	struct:__anon39::FPS	file:
StartLoc	AsmParser/X86AsmParser.cpp	/^  SMLoc StartLoc, EndLoc;$/;"	m	struct:__anon2::X86Operand	file:
StartsWithGlobalOffsetTable	MCTargetDesc/X86MCCodeEmitter.cpp	/^StartsWithGlobalOffsetTable(const MCExpr *Expr) {$/;"	f	file:
State	AsmParser/X86AsmParser.cpp	/^    IntelExprState State, PrevState;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
StopOnLBrac	AsmParser/X86AsmParser.cpp	/^    bool StopOnLBrac, AddImmPrefix;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
StructReturnType	X86ISelLowering.cpp	/^enum StructReturnType {$/;"	g	file:
StubDynamicNoPIC	X86Subtarget.h	/^  StubDynamicNoPIC, \/\/ Used on i386-darwin in -mdynamic-no-pic mode.$/;"	e	enum:llvm::PICStyles::Style
StubPIC	X86Subtarget.h	/^  StubPIC,          \/\/ Used on i386-darwin in -fPIC mode.$/;"	e	enum:llvm::PICStyles::Style
Style	X86Subtarget.h	/^enum Style {$/;"	g	namespace:llvm::PICStyles
Subtarget	X86AsmPrinter.h	/^  const X86Subtarget *Subtarget;$/;"	m	class:llvm::X86AsmPrinter
Subtarget	X86FastISel.cpp	/^  const X86Subtarget *Subtarget;$/;"	m	class:__anon37::X86FastISel	file:
Subtarget	X86ISelDAGToDAG.cpp	/^    const X86Subtarget *Subtarget;$/;"	m	class:__anon49::X86DAGToDAGISel	file:
Subtarget	X86ISelLowering.h	/^    const X86Subtarget *Subtarget;$/;"	m	class:llvm::X86TargetLowering
Subtarget	X86JITInfo.h	/^    const X86Subtarget *Subtarget;$/;"	m	class:llvm::X86JITInfo
Subtarget	X86SelectionDAGInfo.h	/^  const X86Subtarget *Subtarget;$/;"	m	class:llvm::X86SelectionDAGInfo
Subtarget	X86TargetMachine.h	/^  X86Subtarget       Subtarget;$/;"	m	class:llvm::X86TargetMachine
Subtype	MCTargetDesc/X86AsmBackend.cpp	/^  const MachO::CPUSubTypeX86 Subtype;$/;"	m	class:__anon23::DarwinX86_64AsmBackend	file:
SupportsCU	MCTargetDesc/X86AsmBackend.cpp	/^  bool SupportsCU;$/;"	m	class:__anon23::DarwinX86_32AsmBackend	file:
SupportsCU	MCTargetDesc/X86AsmBackend.cpp	/^  bool SupportsCU;$/;"	m	class:__anon23::DarwinX86_64AsmBackend	file:
SwitchMode	AsmParser/X86AsmParser.cpp	/^  void SwitchMode(uint64_t mode) {$/;"	f	class:__anon1::X86AsmParser	file:
Sym	AsmParser/X86AsmParser.cpp	/^    const MCExpr *Sym;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
SymName	AsmParser/X86AsmParser.cpp	/^    StringRef SymName;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
SymName	AsmParser/X86AsmParser.cpp	/^  StringRef SymName;$/;"	m	struct:__anon2::X86Operand	file:
SymbolFlags	X86ISelDAGToDAG.cpp	/^    unsigned char SymbolFlags;  \/\/ X86II::MO_*$/;"	m	struct:__anon47::X86ISelAddressMode	file:
T8	MCTargetDesc/X86BaseInfo.h	/^    T8 = 2 << OpMapShift,  TA = 3 << OpMapShift,$/;"	e	enum:llvm::X86II::__anon26
TA	MCTargetDesc/X86BaseInfo.h	/^    T8 = 2 << OpMapShift,  TA = 3 << OpMapShift,$/;"	e	enum:llvm::X86II::__anon26
TARGET	Makefile	/^TARGET = X86$/;"	m
TARGET_X86_H	X86.h	16;"	d
TB	MCTargetDesc/X86BaseInfo.h	/^    TB = 1 << OpMapShift,$/;"	e	enum:llvm::X86II::__anon26
TB_ALIGN_16	X86InstrInfo.cpp	/^  TB_ALIGN_16    =   16 << TB_ALIGN_SHIFT,$/;"	e	enum:__anon44	file:
TB_ALIGN_32	X86InstrInfo.cpp	/^  TB_ALIGN_32    =   32 << TB_ALIGN_SHIFT,$/;"	e	enum:__anon44	file:
TB_ALIGN_64	X86InstrInfo.cpp	/^  TB_ALIGN_64    =   64 << TB_ALIGN_SHIFT,$/;"	e	enum:__anon44	file:
TB_ALIGN_MASK	X86InstrInfo.cpp	/^  TB_ALIGN_MASK  = 0xff << TB_ALIGN_SHIFT$/;"	e	enum:__anon44	file:
TB_ALIGN_NONE	X86InstrInfo.cpp	/^  TB_ALIGN_NONE  =    0 << TB_ALIGN_SHIFT,$/;"	e	enum:__anon44	file:
TB_ALIGN_SHIFT	X86InstrInfo.cpp	/^  TB_ALIGN_SHIFT = 8,$/;"	e	enum:__anon44	file:
TB_FOLDED_LOAD	X86InstrInfo.cpp	/^  TB_FOLDED_LOAD  = 1 << 6,$/;"	e	enum:__anon44	file:
TB_FOLDED_STORE	X86InstrInfo.cpp	/^  TB_FOLDED_STORE = 1 << 7,$/;"	e	enum:__anon44	file:
TB_INDEX_0	X86InstrInfo.cpp	/^  TB_INDEX_0    = 0,$/;"	e	enum:__anon44	file:
TB_INDEX_1	X86InstrInfo.cpp	/^  TB_INDEX_1    = 1,$/;"	e	enum:__anon44	file:
TB_INDEX_2	X86InstrInfo.cpp	/^  TB_INDEX_2    = 2,$/;"	e	enum:__anon44	file:
TB_INDEX_3	X86InstrInfo.cpp	/^  TB_INDEX_3    = 3,$/;"	e	enum:__anon44	file:
TB_INDEX_MASK	X86InstrInfo.cpp	/^  TB_INDEX_MASK = 0xf,$/;"	e	enum:__anon44	file:
TB_NO_FORWARD	X86InstrInfo.cpp	/^  TB_NO_FORWARD   = 1 << 5,$/;"	e	enum:__anon44	file:
TB_NO_REVERSE	X86InstrInfo.cpp	/^  TB_NO_REVERSE   = 1 << 4,$/;"	e	enum:__anon44	file:
TC_RETURN	X86ISelLowering.h	/^      TC_RETURN,$/;"	e	enum:llvm::X86ISD::NodeType
TD	X86CodeEmitter.cpp	/^    const DataLayout    *TD;$/;"	m	class:__anon36::Emitter	file:
TD	X86ISelLowering.h	/^    const DataLayout *TD;$/;"	m	class:llvm::X86TargetLowering
TESTM	X86ISelLowering.h	/^      TESTM,$/;"	e	enum:llvm::X86ISD::NodeType
TESTNM	X86ISelLowering.h	/^      TESTNM,$/;"	e	enum:llvm::X86ISD::NodeType
TESTP	X86ISelLowering.h	/^      TESTP,$/;"	e	enum:llvm::X86ISD::NodeType
THREEBYTE38_STR	Disassembler/X86DisassemblerDecoderCommon.h	41;"	d
THREEBYTE38_SYM	Disassembler/X86DisassemblerDecoderCommon.h	31;"	d
THREEBYTE3A_STR	Disassembler/X86DisassemblerDecoderCommon.h	42;"	d
THREEBYTE3A_SYM	Disassembler/X86DisassemblerDecoderCommon.h	32;"	d
THREEBYTE_38	Disassembler/X86DisassemblerDecoderCommon.h	/^  THREEBYTE_38  = 2,$/;"	e	enum:__anon16
THREEBYTE_3A	Disassembler/X86DisassemblerDecoderCommon.h	/^  THREEBYTE_3A  = 3,$/;"	e	enum:__anon16
TII	X86FixupLEAs.cpp	/^    const TargetInstrInfo *TII; \/\/ Machine instruction info.$/;"	m	class:__anon38::FixupLEAPass	file:
TII	X86FloatingPoint.cpp	/^    const TargetInstrInfo *TII; \/\/ Machine instruction info.$/;"	m	struct:__anon39::FPS	file:
TII	X86PadShortFunction.cpp	/^    const TargetInstrInfo *TII;$/;"	m	struct:__anon52::PadShortFunc	file:
TII	X86VZeroUpper.cpp	/^    const TargetInstrInfo *TII; \/\/ Machine instruction info.$/;"	m	struct:__anon55::VZeroUpperInserter	file:
TLI	X86SelectionDAGInfo.h	/^  const X86TargetLowering &TLI;$/;"	m	class:llvm::X86SelectionDAGInfo
TLI	X86TargetTransformInfo.cpp	/^  const X86TargetLowering *TLI;$/;"	m	class:__anon54::LLVM_FINAL	file:
TLInfo	X86TargetMachine.h	/^  X86TargetLowering  TLInfo;$/;"	m	class:llvm::X86TargetMachine
TLSADDR	X86ISelLowering.h	/^      TLSADDR,$/;"	e	enum:llvm::X86ISD::NodeType
TLSBASEADDR	X86ISelLowering.h	/^      TLSBASEADDR,$/;"	e	enum:llvm::X86ISD::NodeType
TLSCALL	X86ISelLowering.h	/^      TLSCALL,$/;"	e	enum:llvm::X86ISD::NodeType
TLSOffset	X86JITInfo.h	/^    char* TLSOffset;$/;"	m	class:llvm::X86JITInfo
TM	X86CodeEmitter.cpp	/^    X86TargetMachine    &TM;$/;"	m	class:__anon36::Emitter	file:
TM	X86FixupLEAs.cpp	/^    const TargetMachine *TM;$/;"	m	class:__anon38::FixupLEAPass	file:
TM	X86FrameLowering.h	/^  const X86TargetMachine &TM;$/;"	m	class:llvm::X86FrameLowering
TM	X86InstrInfo.h	/^  X86TargetMachine &TM;$/;"	m	class:llvm::X86InstrInfo
TM	X86JITInfo.h	/^    X86TargetMachine &TM;$/;"	m	class:llvm::X86JITInfo
TM	X86MCInstLower.cpp	/^  const TargetMachine &TM;$/;"	m	class:__anon51::X86MCInstLower	file:
TM	X86PadShortFunction.cpp	/^    const TargetMachine *TM;$/;"	m	struct:__anon52::PadShortFunc	file:
TM	X86RegisterInfo.h	/^  X86TargetMachine &TM;$/;"	m	class:llvm::X86RegisterInfo
TO	X86ISelLowering.h	/^    TargetOptions TO;$/;"	m	class:llvm::X86TargetLowering
TOF	MCTargetDesc/X86BaseInfo.h	/^  enum TOF {$/;"	g	namespace:llvm::X86II
TRUE	Disassembler/X86DisassemblerDecoder.c	25;"	d	file:
TSInfo	X86TargetMachine.h	/^  X86SelectionDAGInfo TSInfo;$/;"	m	class:llvm::X86TargetMachine
TWOBYTE	Disassembler/X86DisassemblerDecoderCommon.h	/^  TWOBYTE       = 1,$/;"	e	enum:__anon16
TWOBYTE_STR	Disassembler/X86DisassemblerDecoderCommon.h	40;"	d
TWOBYTE_SYM	Disassembler/X86DisassemblerDecoderCommon.h	30;"	d
TYPES	Disassembler/X86DisassemblerDecoderCommon.h	/^  TYPES$/;"	e	enum:__anon19
TYPES	Disassembler/X86DisassemblerDecoderCommon.h	421;"	d
TYPE_EVEX	Disassembler/X86DisassemblerDecoder.h	/^  TYPE_EVEX         = 0x3,$/;"	e	enum:__anon14
TYPE_FUNCTION	X86JITInfo.cpp	64;"	d	file:
TYPE_FUNCTION	X86JITInfo.cpp	67;"	d	file:
TYPE_NO_VEX_XOP	Disassembler/X86DisassemblerDecoder.h	/^  TYPE_NO_VEX_XOP   = 0x0,$/;"	e	enum:__anon14
TYPE_VEX_2B	Disassembler/X86DisassemblerDecoder.h	/^  TYPE_VEX_2B       = 0x1,$/;"	e	enum:__anon14
TYPE_VEX_3B	Disassembler/X86DisassemblerDecoder.h	/^  TYPE_VEX_3B       = 0x2,$/;"	e	enum:__anon14
TYPE_XOP	Disassembler/X86DisassemblerDecoder.h	/^  TYPE_XOP          = 0x4$/;"	e	enum:__anon14
TYPE_max	Disassembler/X86DisassemblerDecoderCommon.h	/^  TYPE_max$/;"	e	enum:__anon19
TableEntry	X86FloatingPoint.cpp	/^  struct TableEntry {$/;"	s	namespace:__anon41	file:
TableIsSorted	X86FloatingPoint.cpp	/^static bool TableIsSorted(const TableEntry *Table, unsigned NumEntries) {$/;"	f	file:
TailCallReturnAddrDelta	X86MachineFunctionInfo.h	/^  int TailCallReturnAddrDelta;$/;"	m	class:llvm::X86MachineFunctionInfo
TargetMaterializeAlloca	X86FastISel.cpp	/^unsigned X86FastISel::TargetMaterializeAlloca(const AllocaInst *C) {$/;"	f	class:X86FastISel
TargetMaterializeConstant	X86FastISel.cpp	/^unsigned X86FastISel::TargetMaterializeConstant(const Constant *C) {$/;"	f	class:X86FastISel
TargetMaterializeFloatZero	X86FastISel.cpp	/^unsigned X86FastISel::TargetMaterializeFloatZero(const ConstantFP *CF) {$/;"	f	class:X86FastISel
TargetSelectInstruction	X86FastISel.cpp	/^X86FastISel::TargetSelectInstruction(const Instruction *I)  {$/;"	f	class:X86FastISel
TargetTriple	X86Subtarget.h	/^  Triple TargetTriple;$/;"	m	class:llvm::X86Subtarget
ThreeDNow	X86Subtarget.h	/^    NoThreeDNow, ThreeDNow, ThreeDNowA$/;"	e	enum:llvm::X86Subtarget::X863DNowEnum
ThreeDNowA	X86Subtarget.h	/^    NoThreeDNow, ThreeDNow, ThreeDNowA$/;"	e	enum:llvm::X86Subtarget::X863DNowEnum
Threshold	X86PadShortFunction.cpp	/^    const unsigned int Threshold;$/;"	m	struct:__anon52::PadShortFunc	file:
TmpReg	AsmParser/X86AsmParser.cpp	/^    unsigned BaseReg, IndexReg, TmpReg, Scale;$/;"	m	class:__anon1::X86AsmParser::IntelExprStateMachine	file:
Tok	AsmParser/X86AsmParser.cpp	/^    struct TokOp Tok;$/;"	m	union:__anon2::X86Operand::__anon3	typeref:struct:__anon2::X86Operand::__anon3::TokOp	file:
TokOp	AsmParser/X86AsmParser.cpp	/^  struct TokOp {$/;"	s	struct:__anon2::X86Operand	file:
Token	AsmParser/X86AsmParser.cpp	/^    Token,$/;"	e	enum:__anon2::X86Operand::KindTy	file:
TranslateX86CC	X86ISelLowering.cpp	/^static unsigned TranslateX86CC(ISD::CondCode SetCCOpcode, bool isFP,$/;"	f	file:
TryEmitSmallMemcpy	X86FastISel.cpp	/^bool X86FastISel::TryEmitSmallMemcpy(X86AddressMode DestAM,$/;"	f	class:X86FastISel
TryFoldLoad	X86ISelDAGToDAG.cpp	/^bool X86DAGToDAGISel::TryFoldLoad(SDNode *P, SDValue N,$/;"	f	class:X86DAGToDAGISel
TwoArgFP	MCTargetDesc/X86BaseInfo.h	/^    TwoArgFP   = 4 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
UCOMI	X86ISelLowering.h	/^      CMP, COMI, UCOMI,$/;"	e	enum:llvm::X86ISD::NodeType
UMAX	X86ISelLowering.h	/^      UMAX, UMIN,$/;"	e	enum:llvm::X86ISD::NodeType
UMIN	X86ISelLowering.h	/^      UMAX, UMIN,$/;"	e	enum:llvm::X86ISD::NodeType
UMUL	X86ISelLowering.h	/^      UMUL, \/\/ LOW, HI, FLAGS = umul LHS, RHS$/;"	e	enum:llvm::X86ISD::NodeType
UNPCKH	X86ISelLowering.h	/^      UNPCKH,$/;"	e	enum:llvm::X86ISD::NodeType
UNPCKL	X86ISelLowering.h	/^      UNPCKL,$/;"	e	enum:llvm::X86ISD::NodeType
UNWIND_BP_FRAME_REGISTERS	MCTargetDesc/X86AsmBackend.cpp	/^    UNWIND_BP_FRAME_REGISTERS              = 0x00007FFF,$/;"	e	enum:__anon23::CU::CompactUnwindEncodings	file:
UNWIND_FRAMELESS_STACK_REG_PERMUTATION	MCTargetDesc/X86AsmBackend.cpp	/^    UNWIND_FRAMELESS_STACK_REG_PERMUTATION = 0x000003FF$/;"	e	enum:__anon23::CU::CompactUnwindEncodings	file:
UNWIND_MODE_BP_FRAME	MCTargetDesc/X86AsmBackend.cpp	/^    UNWIND_MODE_BP_FRAME                   = 0x01000000,$/;"	e	enum:__anon23::CU::CompactUnwindEncodings	file:
UNWIND_MODE_DWARF	MCTargetDesc/X86AsmBackend.cpp	/^    UNWIND_MODE_DWARF                      = 0x04000000,$/;"	e	enum:__anon23::CU::CompactUnwindEncodings	file:
UNWIND_MODE_STACK_IMMD	MCTargetDesc/X86AsmBackend.cpp	/^    UNWIND_MODE_STACK_IMMD                 = 0x02000000,$/;"	e	enum:__anon23::CU::CompactUnwindEncodings	file:
UNWIND_MODE_STACK_IND	MCTargetDesc/X86AsmBackend.cpp	/^    UNWIND_MODE_STACK_IND                  = 0x03000000,$/;"	e	enum:__anon23::CU::CompactUnwindEncodings	file:
UpdateOp	X86CodeEmitter.cpp	/^static const MCInstrDesc *UpdateOp(MachineInstr &MI, const X86InstrInfo *II,$/;"	f	file:
UseLeaForSP	X86Subtarget.h	/^  bool UseLeaForSP;$/;"	m	class:llvm::X86Subtarget
VAARG_64	X86ISelLowering.h	/^      VAARG_64$/;"	e	enum:llvm::X86ISD::NodeType
VASTART_SAVE_XMM_REGS	X86ISelLowering.h	/^      VASTART_SAVE_XMM_REGS,$/;"	e	enum:llvm::X86ISD::NodeType
VBROADCAST	X86ISelLowering.h	/^      VBROADCAST,$/;"	e	enum:llvm::X86ISD::NodeType
VBROADCASTM	X86ISelLowering.h	/^      VBROADCASTM,$/;"	e	enum:llvm::X86ISD::NodeType
VEX	MCTargetDesc/X86BaseInfo.h	/^    VEX = 1,$/;"	e	enum:llvm::X86II::__anon26
VEXLeadingOpcodeByte	Disassembler/X86DisassemblerDecoder.h	/^} VEXLeadingOpcodeByte;$/;"	t	typeref:enum:__anon11
VEXPrefixCode	Disassembler/X86DisassemblerDecoder.h	/^} VEXPrefixCode;$/;"	t	typeref:enum:__anon13
VEXShift	MCTargetDesc/X86BaseInfo.h	/^    VEXShift = OpcodeShift + 8,$/;"	e	enum:llvm::X86II::__anon26
VEXTRACT	X86ISelLowering.h	/^      VEXTRACT,$/;"	e	enum:llvm::X86ISD::NodeType
VEX_4V	MCTargetDesc/X86BaseInfo.h	/^    VEX_4V      = 1U << 1,$/;"	e	enum:llvm::X86II::__anon26
VEX_4VOp3	MCTargetDesc/X86BaseInfo.h	/^    VEX_4VOp3   = 1U << 2,$/;"	e	enum:llvm::X86II::__anon26
VEX_I8IMM	MCTargetDesc/X86BaseInfo.h	/^    VEX_I8IMM   = 1U << 3,$/;"	e	enum:llvm::X86II::__anon26
VEX_L	MCTargetDesc/X86BaseInfo.h	/^    VEX_L       = 1U << 4,$/;"	e	enum:llvm::X86II::__anon26
VEX_LIG	MCTargetDesc/X86BaseInfo.h	/^    VEX_LIG     = 1U << 5,$/;"	e	enum:llvm::X86II::__anon26
VEX_LOB_0F	Disassembler/X86DisassemblerDecoder.h	/^  VEX_LOB_0F = 0x1,$/;"	e	enum:__anon11
VEX_LOB_0F38	Disassembler/X86DisassemblerDecoder.h	/^  VEX_LOB_0F38 = 0x2,$/;"	e	enum:__anon11
VEX_LOB_0F3A	Disassembler/X86DisassemblerDecoder.h	/^  VEX_LOB_0F3A = 0x3$/;"	e	enum:__anon11
VEX_PREFIX_66	Disassembler/X86DisassemblerDecoder.h	/^  VEX_PREFIX_66 = 0x1,$/;"	e	enum:__anon13
VEX_PREFIX_F2	Disassembler/X86DisassemblerDecoder.h	/^  VEX_PREFIX_F2 = 0x3$/;"	e	enum:__anon13
VEX_PREFIX_F3	Disassembler/X86DisassemblerDecoder.h	/^  VEX_PREFIX_F3 = 0x2,$/;"	e	enum:__anon13
VEX_PREFIX_NONE	Disassembler/X86DisassemblerDecoder.h	/^  VEX_PREFIX_NONE = 0x0,$/;"	e	enum:__anon13
VEX_W	MCTargetDesc/X86BaseInfo.h	/^    VEX_W       = 1U << 0,$/;"	e	enum:llvm::X86II::__anon26
VFPEXT	X86ISelLowering.h	/^      VFPEXT,$/;"	e	enum:llvm::X86ISD::NodeType
VFPROUND	X86ISelLowering.h	/^      VFPROUND,$/;"	e	enum:llvm::X86ISD::NodeType
VINSERT	X86ISelLowering.h	/^      VINSERT,$/;"	e	enum:llvm::X86ISD::NodeType
VPERM2X128	X86ISelLowering.h	/^      VPERM2X128,$/;"	e	enum:llvm::X86ISD::NodeType
VPERMI	X86ISelLowering.h	/^      VPERMI,$/;"	e	enum:llvm::X86ISD::NodeType
VPERMILP	X86ISelLowering.h	/^      VPERMILP,$/;"	e	enum:llvm::X86ISD::NodeType
VPERMIV3	X86ISelLowering.h	/^      VPERMIV3,$/;"	e	enum:llvm::X86ISD::NodeType
VPERMV	X86ISelLowering.h	/^      VPERMV,$/;"	e	enum:llvm::X86ISD::NodeType
VPERMV3	X86ISelLowering.h	/^      VPERMV3,$/;"	e	enum:llvm::X86ISD::NodeType
VSEXT	X86ISelLowering.h	/^      VSEXT,$/;"	e	enum:llvm::X86ISD::NodeType
VSHL	X86ISelLowering.h	/^      VSHL, VSRL, VSRA,$/;"	e	enum:llvm::X86ISD::NodeType
VSHLDQ	X86ISelLowering.h	/^      VSHLDQ, VSRLDQ,$/;"	e	enum:llvm::X86ISD::NodeType
VSHLI	X86ISelLowering.h	/^      VSHLI, VSRLI, VSRAI,$/;"	e	enum:llvm::X86ISD::NodeType
VSRA	X86ISelLowering.h	/^      VSHL, VSRL, VSRA,$/;"	e	enum:llvm::X86ISD::NodeType
VSRAI	X86ISelLowering.h	/^      VSHLI, VSRLI, VSRAI,$/;"	e	enum:llvm::X86ISD::NodeType
VSRL	X86ISelLowering.h	/^      VSHL, VSRL, VSRA,$/;"	e	enum:llvm::X86ISD::NodeType
VSRLDQ	X86ISelLowering.h	/^      VSHLDQ, VSRLDQ,$/;"	e	enum:llvm::X86ISD::NodeType
VSRLI	X86ISelLowering.h	/^      VSHLI, VSRLI, VSRAI,$/;"	e	enum:llvm::X86ISD::NodeType
VTRUNC	X86ISelLowering.h	/^      VTRUNC,$/;"	e	enum:llvm::X86ISD::NodeType
VTRUNCM	X86ISelLowering.h	/^      VTRUNCM,$/;"	e	enum:llvm::X86ISD::NodeType
VZEXT	X86ISelLowering.h	/^      VZEXT,$/;"	e	enum:llvm::X86ISD::NodeType
VZEXT_LOAD	X86ISelLowering.h	/^      VZEXT_LOAD,$/;"	e	enum:llvm::X86ISD::NodeType
VZEXT_MOVL	X86ISelLowering.h	/^      VZEXT_MOVL,$/;"	e	enum:llvm::X86ISD::NodeType
VZeroUpperInserter	X86VZeroUpper.cpp	/^    VZeroUpperInserter() : MachineFunctionPass(ID) {}$/;"	f	struct:__anon55::VZeroUpperInserter
VZeroUpperInserter	X86VZeroUpper.cpp	/^  struct VZeroUpperInserter : public MachineFunctionPass {$/;"	s	namespace:__anon55	file:
Val	AsmParser/X86AsmParser.cpp	/^    const MCExpr *Val;$/;"	m	struct:__anon2::X86Operand::ImmOp	file:
VarArgsFPOffset	X86MachineFunctionInfo.h	/^  unsigned VarArgsFPOffset;$/;"	m	class:llvm::X86MachineFunctionInfo
VarArgsFrameIndex	X86MachineFunctionInfo.h	/^  int VarArgsFrameIndex;$/;"	m	class:llvm::X86MachineFunctionInfo
VarArgsGPOffset	X86MachineFunctionInfo.h	/^  unsigned VarArgsGPOffset;$/;"	m	class:llvm::X86MachineFunctionInfo
VectorExtensionType	Disassembler/X86DisassemblerDecoder.h	/^} VectorExtensionType;$/;"	t	typeref:enum:__anon14
VisitNode	X86InstrInfo.cpp	/^    bool VisitNode(MachineDomTreeNode *Node, unsigned TLSBaseAddrReg) {$/;"	f	struct:__anon46::LDTLSCleanup
VisitedBBInfo	X86PadShortFunction.cpp	/^    VisitedBBInfo() : HasReturn(false), Cycles(0) {}$/;"	f	struct:__anon52::VisitedBBInfo
VisitedBBInfo	X86PadShortFunction.cpp	/^    VisitedBBInfo(bool HasReturn, unsigned int Cycles)$/;"	f	struct:__anon52::VisitedBBInfo
VisitedBBInfo	X86PadShortFunction.cpp	/^  struct VisitedBBInfo {$/;"	s	namespace:__anon52	file:
VisitedBBs	X86PadShortFunction.cpp	/^    DenseMap<MachineBasicBlock*, VisitedBBInfo> VisitedBBs;$/;"	m	struct:__anon52::PadShortFunc	file:
WIN_ALLOCA	X86ISelLowering.h	/^      WIN_ALLOCA,$/;"	e	enum:llvm::X86ISD::NodeType
WIN_FTOL	X86ISelLowering.h	/^      WIN_FTOL,$/;"	e	enum:llvm::X86ISD::NodeType
WidenMaskArithmetic	X86ISelLowering.cpp	/^static SDValue WidenMaskArithmetic(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
WillBeConstantPoolLoad	X86ISelLowering.cpp	/^static bool WillBeConstantPoolLoad(SDNode *N) {$/;"	f	file:
WindowsX86AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^  WindowsX86AsmBackend(const Target &T, bool is64Bit, StringRef CPU)$/;"	f	class:__anon23::WindowsX86AsmBackend
WindowsX86AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^class WindowsX86AsmBackend : public X86AsmBackend {$/;"	c	namespace:__anon23	file:
Wrapper	X86ISelLowering.h	/^      Wrapper,$/;"	e	enum:llvm::X86ISD::NodeType
WrapperRIP	X86ISelLowering.h	/^      WrapperRIP,$/;"	e	enum:llvm::X86ISD::NodeType
X86	Disassembler/X86Disassembler.cpp	/^namespace X86 {$/;"	n	namespace:llvm	file:
X86	MCTargetDesc/X86BaseInfo.h	/^namespace X86 {$/;"	n	namespace:llvm
X86	MCTargetDesc/X86FixupKinds.h	/^namespace X86 {$/;"	n	namespace:llvm
X86	X86ISelLowering.h	/^  namespace X86 {$/;"	n	namespace:llvm
X86	X86InstrInfo.h	/^namespace X86 {$/;"	n	namespace:llvm
X86	X86Relocations.h	/^  namespace X86 {$/;"	n	namespace:llvm
X863DNowEnum	X86Subtarget.h	/^  enum X863DNowEnum {$/;"	g	class:llvm::X86Subtarget
X863DNowLevel	X86Subtarget.h	/^  X863DNowEnum X863DNowLevel;$/;"	m	class:llvm::X86Subtarget
X86ASMPRINTER_H	X86AsmPrinter.h	11;"	d
X86ATTInstPrinter	InstPrinter/X86ATTInstPrinter.h	/^  X86ATTInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,$/;"	f	class:llvm::X86ATTInstPrinter
X86ATTInstPrinter	InstPrinter/X86ATTInstPrinter.h	/^class X86ATTInstPrinter : public MCInstPrinter {$/;"	c	namespace:llvm
X86AddressMode	X86InstrBuilder.h	/^  X86AddressMode()$/;"	f	struct:llvm::X86AddressMode
X86AddressMode	X86InstrBuilder.h	/^struct X86AddressMode {$/;"	s	namespace:llvm
X86AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^  X86AsmBackend(const Target &T, StringRef _CPU)$/;"	f	class:__anon22::X86AsmBackend
X86AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^class X86AsmBackend : public MCAsmBackend {$/;"	c	namespace:__anon22	file:
X86AsmParser	AsmParser/X86AsmParser.cpp	/^  X86AsmParser(MCSubtargetInfo &sti, MCAsmParser &parser,$/;"	f	class:__anon1::X86AsmParser
X86AsmParser	AsmParser/X86AsmParser.cpp	/^class X86AsmParser : public MCTargetAsmParser {$/;"	c	namespace:__anon1	file:
X86AsmPrinter	X86AsmPrinter.h	/^  explicit X86AsmPrinter(TargetMachine &TM, MCStreamer &Streamer)$/;"	f	class:llvm::X86AsmPrinter
X86AsmPrinter	X86AsmPrinter.h	/^class LLVM_LIBRARY_VISIBILITY X86AsmPrinter : public AsmPrinter {$/;"	c	namespace:llvm
X86BASEINFO_H	MCTargetDesc/X86BaseInfo.h	18;"	d
X86CALLINGCONV_H	X86CallingConv.h	16;"	d
X86COFFMachineModuleInfo	X86COFFMachineModuleInfo.h	/^  X86COFFMachineModuleInfo(const MachineModuleInfo &) {}$/;"	f	class:llvm::X86COFFMachineModuleInfo
X86COFFMachineModuleInfo	X86COFFMachineModuleInfo.h	/^class X86COFFMachineModuleInfo : public MachineModuleInfoImpl {$/;"	c	namespace:llvm
X86COFF_MACHINEMODULEINFO_H	X86COFFMachineModuleInfo.h	15;"	d
X86ChooseCmpImmediateOpcode	X86FastISel.cpp	/^static unsigned X86ChooseCmpImmediateOpcode(EVT VT, const ConstantInt *RHSC) {$/;"	f	file:
X86ChooseCmpOpcode	X86FastISel.cpp	/^static unsigned X86ChooseCmpOpcode(EVT VT, const X86Subtarget *Subtarget) {$/;"	f	file:
X86CompilationCallback	X86CompilationCallback_Win64.asm	/^X86CompilationCallback proc$/;"	l
X86CompilationCallback	X86JITInfo.cpp	/^  _declspec(naked) void X86CompilationCallback(void) {$/;"	f
X86CompilationCallback	X86JITInfo.cpp	/^  void X86CompilationCallback() {$/;"	f
X86DAGToDAGISel	X86ISelDAGToDAG.cpp	/^    explicit X86DAGToDAGISel(X86TargetMachine &tm, CodeGenOpt::Level OptLevel)$/;"	f	class:__anon49::X86DAGToDAGISel
X86DAGToDAGISel	X86ISelDAGToDAG.cpp	/^  class X86DAGToDAGISel : public SelectionDAGISel {$/;"	c	namespace:__anon49	file:
X86DISASSEMBLERDECODERCOMMON_H	Disassembler/X86DisassemblerDecoderCommon.h	23;"	d
X86DISASSEMBLERDECODER_H	Disassembler/X86DisassemblerDecoder.h	17;"	d
X86DISASSEMBLER_H	Disassembler/X86Disassembler.h	75;"	d
X86Disassembler	Disassembler/X86Disassembler.h	/^namespace X86Disassembler {$/;"	n	namespace:llvm
X86ELFMCAsmInfo	MCTargetDesc/X86MCAsmInfo.cpp	/^X86ELFMCAsmInfo::X86ELFMCAsmInfo(const Triple &T) {$/;"	f	class:X86ELFMCAsmInfo
X86ELFMCAsmInfo	MCTargetDesc/X86MCAsmInfo.h	/^  class X86ELFMCAsmInfo : public MCAsmInfoELF {$/;"	c	namespace:llvm
X86ELFObjectWriter	MCTargetDesc/X86AsmBackend.cpp	/^  X86ELFObjectWriter(bool is64Bit, uint8_t OSABI, uint16_t EMachine,$/;"	f	class:__anon22::X86ELFObjectWriter
X86ELFObjectWriter	MCTargetDesc/X86AsmBackend.cpp	/^class X86ELFObjectWriter : public MCELFObjectTargetWriter {$/;"	c	namespace:__anon22	file:
X86ELFObjectWriter	MCTargetDesc/X86ELFObjectWriter.cpp	/^  class X86ELFObjectWriter : public MCELFObjectTargetWriter {$/;"	c	namespace:__anon27	file:
X86ELFObjectWriter	MCTargetDesc/X86ELFObjectWriter.cpp	/^X86ELFObjectWriter::X86ELFObjectWriter(bool IsELF64, uint8_t OSABI,$/;"	f	class:X86ELFObjectWriter
X86FastEmitCompare	X86FastISel.cpp	/^bool X86FastISel::X86FastEmitCompare(const Value *Op0, const Value *Op1,$/;"	f	class:X86FastISel
X86FastEmitExtend	X86FastISel.cpp	/^bool X86FastISel::X86FastEmitExtend(ISD::NodeType Opc, EVT DstVT,$/;"	f	class:X86FastISel
X86FastEmitLoad	X86FastISel.cpp	/^bool X86FastISel::X86FastEmitLoad(EVT VT, const X86AddressMode &AM,$/;"	f	class:X86FastISel
X86FastEmitStore	X86FastISel.cpp	/^X86FastISel::X86FastEmitStore(EVT VT, unsigned ValReg,$/;"	f	class:X86FastISel
X86FastEmitStore	X86FastISel.cpp	/^bool X86FastISel::X86FastEmitStore(EVT VT, const Value *Val,$/;"	f	class:X86FastISel
X86FastISel	X86FastISel.cpp	/^  explicit X86FastISel(FunctionLoweringInfo &funcInfo,$/;"	f	class:__anon37::X86FastISel
X86FastISel	X86FastISel.cpp	/^class X86FastISel : public FastISel {$/;"	c	namespace:__anon37	file:
X86FrameLowering	X86FrameLowering.h	/^  explicit X86FrameLowering(const X86TargetMachine &tm, const X86Subtarget &sti)$/;"	f	class:llvm::X86FrameLowering
X86FrameLowering	X86FrameLowering.h	/^class X86FrameLowering : public TargetFrameLowering {$/;"	c	namespace:llvm
X86GenericDisassembler	Disassembler/X86Disassembler.cpp	/^X86GenericDisassembler::X86GenericDisassembler(const MCSubtargetInfo &STI,$/;"	f	class:X86GenericDisassembler
X86GenericDisassembler	Disassembler/X86Disassembler.h	/^class X86GenericDisassembler : public MCDisassembler {$/;"	c	namespace:llvm::X86Disassembler
X86II	MCTargetDesc/X86BaseInfo.h	/^namespace X86II {$/;"	n	namespace:llvm
X86INSTRBUILDER_H	X86InstrBuilder.h	25;"	d
X86INSTRUCTIONINFO_H	X86InstrInfo.h	15;"	d
X86ISD	X86ISelLowering.h	/^  namespace X86ISD {$/;"	n	namespace:llvm
X86ISELLOWERING_H	X86ISelLowering.h	16;"	d
X86ISelAddressMode	X86ISelDAGToDAG.cpp	/^    X86ISelAddressMode()$/;"	f	struct:__anon47::X86ISelAddressMode
X86ISelAddressMode	X86ISelDAGToDAG.cpp	/^  struct X86ISelAddressMode {$/;"	s	namespace:__anon47	file:
X86InstrInfo	X86InstrInfo.cpp	/^X86InstrInfo::X86InstrInfo(X86TargetMachine &tm)$/;"	f	class:X86InstrInfo
X86InstrInfo	X86InstrInfo.h	/^class X86InstrInfo : public X86GenInstrInfo {$/;"	c	namespace:llvm
X86IntelInstPrinter	InstPrinter/X86IntelInstPrinter.h	/^  X86IntelInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,$/;"	f	class:llvm::X86IntelInstPrinter
X86IntelInstPrinter	InstPrinter/X86IntelInstPrinter.h	/^class X86IntelInstPrinter : public MCInstPrinter {$/;"	c	namespace:llvm
X86JITINFO_H	X86JITInfo.h	15;"	d
X86JITInfo	X86JITInfo.cpp	/^X86JITInfo::X86JITInfo(X86TargetMachine &tm) : TM(tm) {$/;"	f	class:X86JITInfo
X86JITInfo	X86JITInfo.h	/^  class X86JITInfo : public TargetJITInfo {$/;"	c	namespace:llvm
X86LinuxTargetObjectFile	X86TargetObjectFile.h	/^  class X86LinuxTargetObjectFile : public TargetLoweringObjectFileELF {$/;"	c	namespace:llvm
X86MACHINEFUNCTIONINFO_H	X86MachineFunctionInfo.h	15;"	d
X86MCAsmInfoDarwin	MCTargetDesc/X86MCAsmInfo.cpp	/^X86MCAsmInfoDarwin::X86MCAsmInfoDarwin(const Triple &T) {$/;"	f	class:X86MCAsmInfoDarwin
X86MCAsmInfoDarwin	MCTargetDesc/X86MCAsmInfo.h	/^  class X86MCAsmInfoDarwin : public MCAsmInfoDarwin {$/;"	c	namespace:llvm
X86MCAsmInfoGNUCOFF	MCTargetDesc/X86MCAsmInfo.cpp	/^X86MCAsmInfoGNUCOFF::X86MCAsmInfoGNUCOFF(const Triple &Triple) {$/;"	f	class:X86MCAsmInfoGNUCOFF
X86MCAsmInfoGNUCOFF	MCTargetDesc/X86MCAsmInfo.h	/^  class X86MCAsmInfoGNUCOFF : public MCAsmInfoGNUCOFF {$/;"	c	namespace:llvm
X86MCAsmInfoMicrosoft	MCTargetDesc/X86MCAsmInfo.cpp	/^X86MCAsmInfoMicrosoft::X86MCAsmInfoMicrosoft(const Triple &Triple) {$/;"	f	class:X86MCAsmInfoMicrosoft
X86MCAsmInfoMicrosoft	MCTargetDesc/X86MCAsmInfo.h	/^  class X86MCAsmInfoMicrosoft : public MCAsmInfoMicrosoft {$/;"	c	namespace:llvm
X86MCCodeEmitter	MCTargetDesc/X86MCCodeEmitter.cpp	/^  X86MCCodeEmitter(const MCInstrInfo &mcii, MCContext &ctx)$/;"	f	class:__anon29::X86MCCodeEmitter
X86MCCodeEmitter	MCTargetDesc/X86MCCodeEmitter.cpp	/^class X86MCCodeEmitter : public MCCodeEmitter {$/;"	c	namespace:__anon29	file:
X86MCInstLower	X86MCInstLower.cpp	/^X86MCInstLower::X86MCInstLower(const MachineFunction &mf,$/;"	f	class:X86MCInstLower
X86MCInstLower	X86MCInstLower.cpp	/^class X86MCInstLower {$/;"	c	namespace:__anon51	file:
X86MCTARGETDESC_H	MCTargetDesc/X86MCTargetDesc.h	15;"	d
X86MachObjectWriter	MCTargetDesc/X86MachObjectWriter.cpp	/^  X86MachObjectWriter(bool Is64Bit, uint32_t CPUType,$/;"	f	class:__anon33::X86MachObjectWriter
X86MachObjectWriter	MCTargetDesc/X86MachObjectWriter.cpp	/^class X86MachObjectWriter : public MCMachObjectTargetWriter {$/;"	c	namespace:__anon33	file:
X86MachineFunctionInfo	X86MachineFunctionInfo.h	/^  X86MachineFunctionInfo() : ForceFramePointer(false),$/;"	f	class:llvm::X86MachineFunctionInfo
X86MachineFunctionInfo	X86MachineFunctionInfo.h	/^  explicit X86MachineFunctionInfo(MachineFunction &MF)$/;"	f	class:llvm::X86MachineFunctionInfo
X86MachineFunctionInfo	X86MachineFunctionInfo.h	/^class X86MachineFunctionInfo : public MachineFunctionInfo {$/;"	c	namespace:llvm
X86OpTblEntry	X86InstrInfo.cpp	/^struct X86OpTblEntry {$/;"	s	file:
X86Operand	AsmParser/X86AsmParser.cpp	/^  X86Operand(KindTy K, SMLoc Start, SMLoc End)$/;"	f	struct:__anon2::X86Operand
X86Operand	AsmParser/X86AsmParser.cpp	/^struct X86Operand : public MCParsedAsmOperand {$/;"	s	namespace:__anon2	file:
X86PassConfig	X86TargetMachine.cpp	/^  X86PassConfig(X86TargetMachine *TM, PassManagerBase &PM)$/;"	f	class:__anon53::X86PassConfig
X86PassConfig	X86TargetMachine.cpp	/^class X86PassConfig : public TargetPassConfig {$/;"	c	namespace:__anon53	file:
X86ProcFamily	X86Subtarget.h	/^  X86ProcFamilyEnum X86ProcFamily;$/;"	m	class:llvm::X86Subtarget
X86ProcFamilyEnum	X86Subtarget.h	/^  enum X86ProcFamilyEnum {$/;"	g	class:llvm::X86Subtarget
X86REGISTERINFO_H	X86RegisterInfo.h	15;"	d
X86RELOCATIONS_H	X86Relocations.h	15;"	d
X86RegisterInfo	X86RegisterInfo.cpp	/^X86RegisterInfo::X86RegisterInfo(X86TargetMachine &tm)$/;"	f	class:X86RegisterInfo
X86RegisterInfo	X86RegisterInfo.h	/^class X86RegisterInfo : public X86GenRegisterInfo {$/;"	c	namespace:llvm
X86SELECTIONDAGINFO_H	X86SelectionDAGInfo.h	15;"	d
X86SSEEnum	X86Subtarget.h	/^  enum X86SSEEnum {$/;"	g	class:llvm::X86Subtarget
X86SSELevel	X86Subtarget.h	/^  X86SSEEnum X86SSELevel;$/;"	m	class:llvm::X86Subtarget
X86SUBTARGET_H	X86Subtarget.h	15;"	d
X86ScalarSSEf32	X86FastISel.cpp	/^  bool X86ScalarSSEf32;$/;"	m	class:__anon37::X86FastISel	file:
X86ScalarSSEf32	X86ISelLowering.h	/^    bool X86ScalarSSEf32;$/;"	m	class:llvm::X86TargetLowering
X86ScalarSSEf64	X86FastISel.cpp	/^  bool X86ScalarSSEf64;$/;"	m	class:__anon37::X86FastISel	file:
X86ScalarSSEf64	X86ISelLowering.h	/^    bool X86ScalarSSEf64;$/;"	m	class:llvm::X86TargetLowering
X86SelectAddress	X86FastISel.cpp	/^bool X86FastISel::X86SelectAddress(const Value *V, X86AddressMode &AM) {$/;"	f	class:X86FastISel
X86SelectBranch	X86FastISel.cpp	/^bool X86FastISel::X86SelectBranch(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectCall	X86FastISel.cpp	/^bool X86FastISel::X86SelectCall(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectCallAddress	X86FastISel.cpp	/^bool X86FastISel::X86SelectCallAddress(const Value *V, X86AddressMode &AM) {$/;"	f	class:X86FastISel
X86SelectCmp	X86FastISel.cpp	/^bool X86FastISel::X86SelectCmp(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectDivRem	X86FastISel.cpp	/^bool X86FastISel::X86SelectDivRem(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectFPExt	X86FastISel.cpp	/^bool X86FastISel::X86SelectFPExt(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectFPTrunc	X86FastISel.cpp	/^bool X86FastISel::X86SelectFPTrunc(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectLoad	X86FastISel.cpp	/^bool X86FastISel::X86SelectLoad(const Instruction *I)  {$/;"	f	class:X86FastISel
X86SelectRet	X86FastISel.cpp	/^bool X86FastISel::X86SelectRet(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectSelect	X86FastISel.cpp	/^bool X86FastISel::X86SelectSelect(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectShift	X86FastISel.cpp	/^bool X86FastISel::X86SelectShift(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectStore	X86FastISel.cpp	/^bool X86FastISel::X86SelectStore(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectTrunc	X86FastISel.cpp	/^bool X86FastISel::X86SelectTrunc(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectZExt	X86FastISel.cpp	/^bool X86FastISel::X86SelectZExt(const Instruction *I) {$/;"	f	class:X86FastISel
X86SelectionDAGInfo	X86SelectionDAGInfo.cpp	/^X86SelectionDAGInfo::X86SelectionDAGInfo(const X86TargetMachine &TM) :$/;"	f	class:X86SelectionDAGInfo
X86SelectionDAGInfo	X86SelectionDAGInfo.h	/^class X86SelectionDAGInfo : public TargetSelectionDAGInfo {$/;"	c	namespace:llvm
X86Subtarget	X86Subtarget.cpp	/^X86Subtarget::X86Subtarget(const std::string &TT, const std::string &CPU,$/;"	f	class:X86Subtarget
X86Subtarget	X86Subtarget.h	/^class X86Subtarget : public X86GenSubtargetInfo {$/;"	c	namespace:llvm
X86TARGETASMINFO_H	MCTargetDesc/X86MCAsmInfo.h	15;"	d
X86TARGETMACHINE_H	X86TargetMachine.h	15;"	d
X86TTI	X86TargetTransformInfo.cpp	/^  X86TTI() : ImmutablePass(ID), ST(0), TLI(0) {$/;"	f	class:__anon54::LLVM_FINAL
X86TTI	X86TargetTransformInfo.cpp	/^  X86TTI(const X86TargetMachine *TM)$/;"	f	class:__anon54::LLVM_FINAL
X86TargetLowering	X86ISelLowering.cpp	/^X86TargetLowering::X86TargetLowering(X86TargetMachine &TM)$/;"	f	class:X86TargetLowering
X86TargetLowering	X86ISelLowering.h	/^  class X86TargetLowering : public TargetLowering {$/;"	c	namespace:llvm
X86TargetMachine	X86TargetMachine.cpp	/^X86TargetMachine::X86TargetMachine(const Target &T, StringRef TT,$/;"	f	class:X86TargetMachine
X86TargetMachine	X86TargetMachine.h	/^class X86TargetMachine : public LLVMTargetMachine {$/;"	c	namespace:llvm
X86VisitIntrinsicCall	X86FastISel.cpp	/^bool X86FastISel::X86VisitIntrinsicCall(const IntrinsicInst &I) {$/;"	f	class:X86FastISel
X86WinCOFFObjectWriter	MCTargetDesc/X86WinCOFFObjectWriter.cpp	/^  class X86WinCOFFObjectWriter : public MCWinCOFFObjectTargetWriter {$/;"	c	namespace:__anon34	file:
X86WinCOFFObjectWriter	MCTargetDesc/X86WinCOFFObjectWriter.cpp	/^X86WinCOFFObjectWriter::X86WinCOFFObjectWriter(bool Is64Bit_)$/;"	f	class:X86WinCOFFObjectWriter
X86WindowsTargetObjectFile	X86TargetObjectFile.h	/^  class X86WindowsTargetObjectFile : public TargetLoweringObjectFileCOFF {$/;"	c	namespace:llvm
X86_32_DarwinEH	MCTargetDesc/X86MCTargetDesc.h	/^    X86_64 = 0, X86_32_DarwinEH = 1, X86_32_Generic = 2$/;"	e	enum:llvm::DWARFFlavour::__anon30
X86_32_Generic	MCTargetDesc/X86MCTargetDesc.h	/^    X86_64 = 0, X86_32_DarwinEH = 1, X86_32_Generic = 2$/;"	e	enum:llvm::DWARFFlavour::__anon30
X86_64	MCTargetDesc/X86MCTargetDesc.h	/^    X86_64 = 0, X86_32_DarwinEH = 1, X86_32_Generic = 2$/;"	e	enum:llvm::DWARFFlavour::__anon30
X86_64ELFRelocationInfo	MCTargetDesc/X86ELFRelocationInfo.cpp	/^  X86_64ELFRelocationInfo(MCContext &Ctx) : MCRelocationInfo(Ctx) {}$/;"	f	class:__anon28::X86_64ELFRelocationInfo
X86_64ELFRelocationInfo	MCTargetDesc/X86ELFRelocationInfo.cpp	/^class X86_64ELFRelocationInfo : public MCRelocationInfo {$/;"	c	namespace:__anon28	file:
X86_64MCAsmInfoDarwin	MCTargetDesc/X86MCAsmInfo.cpp	/^X86_64MCAsmInfoDarwin::X86_64MCAsmInfoDarwin(const Triple &Triple)$/;"	f	class:X86_64MCAsmInfoDarwin
X86_64MCAsmInfoDarwin	MCTargetDesc/X86MCAsmInfo.h	/^  struct X86_64MCAsmInfoDarwin : public X86MCAsmInfoDarwin {$/;"	s	namespace:llvm
X86_64MachORelocationInfo	MCTargetDesc/X86MachORelocationInfo.cpp	/^  X86_64MachORelocationInfo(MCContext &Ctx) : MCRelocationInfo(Ctx) {}$/;"	f	class:__anon32::X86_64MachORelocationInfo
X86_64MachORelocationInfo	MCTargetDesc/X86MachORelocationInfo.cpp	/^class X86_64MachORelocationInfo : public MCRelocationInfo {$/;"	c	namespace:__anon32	file:
X86_64MachoTargetObjectFile	X86TargetObjectFile.h	/^  class X86_64MachoTargetObjectFile : public TargetLoweringObjectFileMachO {$/;"	c	namespace:llvm
X86_64_JIT	X86JITInfo.cpp	29;"	d	file:
X86_ATT_INST_PRINTER_H	InstPrinter/X86ATTInstPrinter.h	15;"	d
X86_FRAMELOWERING_H	X86FrameLowering.h	15;"	d
X86_INST_COMMENTS_H	InstPrinter/X86InstComments.h	16;"	d
X86_INTEL_INST_PRINTER_H	InstPrinter/X86IntelInstPrinter.h	15;"	d
X86_MAX_OPERANDS	Disassembler/X86DisassemblerDecoderCommon.h	541;"	d
X86_MC	MCTargetDesc/X86MCTargetDesc.h	/^namespace X86_MC {$/;"	n	namespace:llvm
X86_SHUFFLE_DECODE_H	Utils/X86ShuffleDecode.h	16;"	d
XD	MCTargetDesc/X86BaseInfo.h	/^    XS = 3 << OpPrefixShift,  XD = 4 << OpPrefixShift,$/;"	e	enum:llvm::X86II::__anon26
XFormVExtractWithShuffleIntoLoad	X86ISelLowering.cpp	/^static SDValue XFormVExtractWithShuffleIntoLoad(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
XOP	MCTargetDesc/X86BaseInfo.h	/^    XOP = 2,$/;"	e	enum:llvm::X86II::__anon26
XOP8	MCTargetDesc/X86BaseInfo.h	/^    XOP8 = 4 << OpMapShift,$/;"	e	enum:llvm::X86II::__anon26
XOP8_MAP	Disassembler/X86DisassemblerDecoderCommon.h	/^  XOP8_MAP      = 4,$/;"	e	enum:__anon16
XOP8_MAP_STR	Disassembler/X86DisassemblerDecoderCommon.h	43;"	d
XOP8_MAP_SYM	Disassembler/X86DisassemblerDecoderCommon.h	33;"	d
XOP9	MCTargetDesc/X86BaseInfo.h	/^    XOP9 = 5 << OpMapShift,$/;"	e	enum:llvm::X86II::__anon26
XOP9_MAP	Disassembler/X86DisassemblerDecoderCommon.h	/^  XOP9_MAP      = 5,$/;"	e	enum:__anon16
XOP9_MAP_STR	Disassembler/X86DisassemblerDecoderCommon.h	44;"	d
XOP9_MAP_SYM	Disassembler/X86DisassemblerDecoderCommon.h	34;"	d
XOPA	MCTargetDesc/X86BaseInfo.h	/^    XOPA = 6 << OpMapShift,$/;"	e	enum:llvm::X86II::__anon26
XOPA_MAP	Disassembler/X86DisassemblerDecoderCommon.h	/^  XOPA_MAP      = 6$/;"	e	enum:__anon16
XOPA_MAP_STR	Disassembler/X86DisassemblerDecoderCommon.h	45;"	d
XOPA_MAP_SYM	Disassembler/X86DisassemblerDecoderCommon.h	35;"	d
XOPMapSelect	Disassembler/X86DisassemblerDecoder.h	/^} XOPMapSelect;$/;"	t	typeref:enum:__anon12
XOP_MAP_SELECT_8	Disassembler/X86DisassemblerDecoder.h	/^  XOP_MAP_SELECT_8 = 0x8,$/;"	e	enum:__anon12
XOP_MAP_SELECT_9	Disassembler/X86DisassemblerDecoder.h	/^  XOP_MAP_SELECT_9 = 0x9,$/;"	e	enum:__anon12
XOP_MAP_SELECT_A	Disassembler/X86DisassemblerDecoder.h	/^  XOP_MAP_SELECT_A = 0xA$/;"	e	enum:__anon12
XOR	X86ISelDAGToDAG.cpp	/^  XOR,$/;"	e	enum:AtomicOpc	file:
XOR	X86ISelLowering.h	/^      INC, DEC, OR, XOR, AND,$/;"	e	enum:llvm::X86ISD::NodeType
XS	MCTargetDesc/X86BaseInfo.h	/^    XS = 3 << OpPrefixShift,  XD = 4 << OpPrefixShift,$/;"	e	enum:llvm::X86II::__anon26
XTEST	X86ISelLowering.h	/^      XTEST,$/;"	e	enum:llvm::X86ISD::NodeType
ZeroArgFP	MCTargetDesc/X86BaseInfo.h	/^    ZeroArgFP  = 1 << FPTypeShift,$/;"	e	enum:llvm::X86II::__anon26
__USER_LABEL_PREFIX__	X86JITInfo.cpp	54;"	d	file:
aaaFromEVEX4of4	Disassembler/X86DisassemblerDecoder.h	61;"	d
addAbsMemOperands	AsmParser/X86AsmParser.cpp	/^  void addAbsMemOperands(MCInst &Inst, unsigned N) const {$/;"	f	struct:__anon2::X86Operand
addAnalysisPasses	X86TargetMachine.cpp	/^void X86TargetMachine::addAnalysisPasses(PassManagerBase &PM) {$/;"	f	class:X86TargetMachine
addCodeEmitter	X86TargetMachine.cpp	/^bool X86TargetMachine::addCodeEmitter(PassManagerBase &PM,$/;"	f	class:X86TargetMachine
addConstantPoolReference	X86InstrBuilder.h	/^addConstantPoolReference(const MachineInstrBuilder &MIB, unsigned CPI,$/;"	f	namespace:llvm
addDirectMem	X86InstrBuilder.h	/^addDirectMem(const MachineInstrBuilder &MIB, unsigned Reg) {$/;"	f	namespace:llvm
addDstIdxOperands	AsmParser/X86AsmParser.cpp	/^  void addDstIdxOperands(MCInst &Inst, unsigned N) const {$/;"	f	struct:__anon2::X86Operand
addExpr	AsmParser/X86AsmParser.cpp	/^  void addExpr(MCInst &Inst, const MCExpr *Expr) const {$/;"	f	struct:__anon2::X86Operand
addExternalFunction	X86COFFMachineModuleInfo.h	/^  void addExternalFunction(MCSymbol* Symbol) {$/;"	f	class:llvm::X86COFFMachineModuleInfo
addFrameReference	X86InstrBuilder.h	/^addFrameReference(const MachineInstrBuilder &MIB, int FI, int Offset = 0) {$/;"	f	namespace:llvm
addFullAddress	X86InstrBuilder.h	/^addFullAddress(const MachineInstrBuilder &MIB,$/;"	f	namespace:llvm
addGR32orGR64Operands	AsmParser/X86AsmParser.cpp	/^  void addGR32orGR64Operands(MCInst &Inst, unsigned N) const {$/;"	f	struct:__anon2::X86Operand
addILPOpts	X86TargetMachine.cpp	/^bool X86PassConfig::addILPOpts() {$/;"	f	class:X86PassConfig
addImmOperands	AsmParser/X86AsmParser.cpp	/^  void addImmOperands(MCInst &Inst, unsigned N) const {$/;"	f	struct:__anon2::X86Operand
addInstSelector	X86TargetMachine.cpp	/^bool X86PassConfig::addInstSelector() {$/;"	f	class:X86PassConfig
addLegalFPImmediate	X86ISelLowering.h	/^    void addLegalFPImmediate(const APFloat& Imm) {$/;"	f	class:llvm::X86TargetLowering
addMemOffsOperands	AsmParser/X86AsmParser.cpp	/^  void addMemOffsOperands(MCInst &Inst, unsigned N) const {$/;"	f	struct:__anon2::X86Operand
addMemOperands	AsmParser/X86AsmParser.cpp	/^  void addMemOperands(MCInst &Inst, unsigned N) const {$/;"	f	struct:__anon2::X86Operand
addOffset	X86InstrBuilder.h	/^addOffset(const MachineInstrBuilder &MIB, int Offset) {$/;"	f	namespace:llvm
addPadding	X86PadShortFunction.cpp	/^void PadShortFunc::addPadding(MachineBasicBlock *MBB,$/;"	f	class:PadShortFunc
addPostRegAlloc	X86TargetMachine.cpp	/^bool X86PassConfig::addPostRegAlloc() {$/;"	f	class:X86PassConfig
addPreEmitPass	X86TargetMachine.cpp	/^bool X86PassConfig::addPreEmitPass() {$/;"	f	class:X86PassConfig
addPreRegAlloc	X86TargetMachine.cpp	/^bool X86PassConfig::addPreRegAlloc() {$/;"	f	class:X86PassConfig
addRegOffset	X86InstrBuilder.h	/^addRegOffset(const MachineInstrBuilder &MIB,$/;"	f	namespace:llvm
addRegOperands	AsmParser/X86AsmParser.cpp	/^  void addRegOperands(MCInst &Inst, unsigned N) const {$/;"	f	struct:__anon2::X86Operand
addRegReg	X86InstrBuilder.h	/^static inline const MachineInstrBuilder &addRegReg(const MachineInstrBuilder &MIB,$/;"	f	namespace:llvm
addSrcIdxOperands	AsmParser/X86AsmParser.cpp	/^  void addSrcIdxOperands(MCInst &Inst, unsigned N) const {$/;"	f	struct:__anon2::X86Operand
addUnaligned	X86JITInfo.cpp	/^template<typename T> static void addUnaligned(void *Pos, T Delta) {$/;"	f	file:
addressSize	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t addressSize;$/;"	m	struct:InternalInstruction
adjustForHiPEPrologue	X86FrameLowering.cpp	/^void X86FrameLowering::adjustForHiPEPrologue(MachineFunction &MF) const {$/;"	f	class:X86FrameLowering
adjustForSegmentedStacks	X86FrameLowering.cpp	/^X86FrameLowering::adjustForSegmentedStacks(MachineFunction &MF) const {$/;"	f	class:X86FrameLowering
adjustLiveRegs	X86FloatingPoint.cpp	/^void FPS::adjustLiveRegs(unsigned Mask, MachineBasicBlock::iterator I) {$/;"	f	class:FPS
allocateThreadLocalMemory	X86JITInfo.cpp	/^char* X86JITInfo::allocateThreadLocalMemory(size_t size) {$/;"	f	class:X86JITInfo
allowTruncateForTailCall	X86ISelLowering.cpp	/^bool X86TargetLowering::allowTruncateForTailCall(Type *Ty1, Type *Ty2) const {$/;"	f	class:X86TargetLowering
allowsUnalignedMemoryAccesses	X86ISelLowering.cpp	/^X86TargetLowering::allowsUnalignedMemoryAccesses(EVT VT,$/;"	f	class:X86TargetLowering
analyzeCompare	X86InstrInfo.cpp	/^analyzeCompare(const MachineInstr *MI, unsigned &SrcReg, unsigned &SrcReg2,$/;"	f	class:X86InstrInfo
anchor	MCTargetDesc/X86MCAsmInfo.cpp	/^void X86ELFMCAsmInfo::anchor() { }$/;"	f	class:X86ELFMCAsmInfo
anchor	MCTargetDesc/X86MCAsmInfo.cpp	/^void X86MCAsmInfoDarwin::anchor() { }$/;"	f	class:X86MCAsmInfoDarwin
anchor	MCTargetDesc/X86MCAsmInfo.cpp	/^void X86MCAsmInfoGNUCOFF::anchor() { }$/;"	f	class:X86MCAsmInfoGNUCOFF
anchor	MCTargetDesc/X86MCAsmInfo.cpp	/^void X86MCAsmInfoMicrosoft::anchor() { }$/;"	f	class:X86MCAsmInfoMicrosoft
anchor	X86InstrInfo.cpp	/^void X86InstrInfo::anchor() {}$/;"	f	class:X86InstrInfo
anchor	X86MachineFunctionInfo.cpp	/^void X86MachineFunctionInfo::anchor() { }$/;"	f	class:X86MachineFunctionInfo
anchor	X86TargetMachine.cpp	/^void X86TargetMachine::anchor() { }$/;"	f	class:X86TargetMachine
applyFixup	MCTargetDesc/X86AsmBackend.cpp	/^  void applyFixup(const MCFixup &Fixup, char *Data, unsigned DataSize,$/;"	f	class:__anon22::X86AsmBackend
areLoadsFromSameBasePtr	X86InstrInfo.cpp	/^X86InstrInfo::areLoadsFromSameBasePtr(SDNode *Load1, SDNode *Load2,$/;"	f	class:X86InstrInfo
argsAreStructReturn	X86ISelLowering.cpp	/^argsAreStructReturn(const SmallVectorImpl<ISD::InputArg> &Ins) {$/;"	f	file:
attributeBits	Disassembler/X86DisassemblerDecoderCommon.h	/^enum attributeBits {$/;"	g
bFromEVEX2of4	Disassembler/X86DisassemblerDecoder.h	50;"	d
bFromEVEX4of4	Disassembler/X86DisassemblerDecoder.h	59;"	d
bFromREX	Disassembler/X86DisassemblerDecoder.h	46;"	d
bFromVEX2of3	Disassembler/X86DisassemblerDecoder.h	65;"	d
bFromXOP2of3	Disassembler/X86DisassemblerDecoder.h	79;"	d
baseFromSIB	Disassembler/X86DisassemblerDecoder.h	42;"	d
breakPartialRegDependency	X86InstrInfo.cpp	/^breakPartialRegDependency(MachineBasicBlock::iterator MI, unsigned OpNum,$/;"	f	class:X86InstrInfo
buildFromShuffleMostly	X86ISelLowering.cpp	/^static SDValue buildFromShuffleMostly(SDValue Op, SelectionDAG &DAG) {$/;"	f	file:
bundleCFG	X86FloatingPoint.cpp	/^void FPS::bundleCFG(MachineFunction &MF) {$/;"	f	class:FPS
byteReader_t	Disassembler/X86DisassemblerDecoder.h	/^typedef int (*byteReader_t)(const void* arg, uint8_t* byte, uint64_t address);$/;"	t
calcLiveInMask	X86FloatingPoint.cpp	/^    static unsigned calcLiveInMask(MachineBasicBlock *MBB) {$/;"	f	struct:__anon39::FPS	file:
callIsStructReturn	X86ISelLowering.cpp	/^callIsStructReturn(const SmallVectorImpl<ISD::OutputArg> &Outs) {$/;"	f	file:
callRegIndirect	X86Subtarget.h	/^  bool callRegIndirect() const { return CallRegIndirect; }$/;"	f	class:llvm::X86Subtarget
canFoldMemoryOperand	X86InstrInfo.cpp	/^bool X86InstrInfo::canFoldMemoryOperand(const MachineInstr *MI,$/;"	f	class:X86InstrInfo
canInsertSelect	X86InstrInfo.cpp	/^canInsertSelect(const MachineBasicBlock &MBB,$/;"	f	class:X86InstrInfo
canRealignStack	X86RegisterInfo.cpp	/^bool X86RegisterInfo::canRealignStack(const MachineFunction &MF) const {$/;"	f	class:X86RegisterInfo
checkAndUpdateEFLAGSKill	X86ISelLowering.cpp	/^static bool checkAndUpdateEFLAGSKill(MachineBasicBlock::iterator SelectItr,$/;"	f	file:
checkBoolTestSetCCCombine	X86ISelLowering.cpp	/^static SDValue checkBoolTestSetCCCombine(SDValue Cmp, X86::CondCode &CC) {$/;"	f	file:
checkFnHasLiveInYmm	X86VZeroUpper.cpp	/^static bool checkFnHasLiveInYmm(MachineRegisterInfo &MRI) {$/;"	f	file:
classifyLEAReg	X86InstrInfo.cpp	/^bool X86InstrInfo::classifyLEAReg(MachineInstr *MI, const MachineOperand &Src,$/;"	f	class:X86InstrInfo
clobbersAllYmmRegs	X86VZeroUpper.cpp	/^static bool clobbersAllYmmRegs(const MachineOperand &MO) {$/;"	f	file:
clobbersAnyYmmReg	X86VZeroUpper.cpp	/^static bool clobbersAnyYmmReg(MachineInstr *MI) {$/;"	f	file:
clobbersFlagRegisters	X86ISelLowering.cpp	/^static bool clobbersFlagRegisters(const SmallVector<StringRef, 4> &AsmPieces) {$/;"	f	file:
commuteInstruction	X86InstrInfo.cpp	/^X86InstrInfo::commuteInstruction(MachineInstr *MI, bool NewMI) const {$/;"	f	class:X86InstrInfo
computeBytesPoppedByCallee	X86FastISel.cpp	/^static unsigned computeBytesPoppedByCallee(const X86Subtarget &Subtarget,$/;"	f	file:
computeDataLayout	X86TargetMachine.cpp	/^static std::string computeDataLayout(const X86Subtarget &ST) {$/;"	f	file:
computeMaskedBitsForTargetNode	X86ISelLowering.cpp	/^void X86TargetLowering::computeMaskedBitsForTargetNode(const SDValue Op,$/;"	f	class:X86TargetLowering
computeState	X86VZeroUpper.cpp	/^    static unsigned computeState(unsigned PrevState, unsigned CurState) {$/;"	f	struct:__anon55::VZeroUpperInserter	file:
consumeByte	Disassembler/X86DisassemblerDecoder.c	/^static int consumeByte(struct InternalInstruction* insn, uint8_t* byte) {$/;"	f	file:
consumeToken	AsmParser/X86AsmParser.cpp	/^  SMLoc consumeToken() {$/;"	f	class:__anon1::X86AsmParser	file:
consumedDisplacement	Disassembler/X86DisassemblerDecoder.h	/^  BOOL                          consumedDisplacement;$/;"	m	struct:InternalInstruction
consumedModRM	Disassembler/X86DisassemblerDecoder.h	/^  BOOL                          consumedModRM;$/;"	m	struct:InternalInstruction
consumedSIB	Disassembler/X86DisassemblerDecoder.h	/^  BOOL                          consumedSIB;$/;"	m	struct:InternalInstruction
contextForAttrs	Disassembler/X86DisassemblerDecoder.c	/^static InstructionContext contextForAttrs(uint16_t attrMask) {$/;"	f	file:
convert16i16to16ri8	AsmParser/X86AsmParser.cpp	/^static bool convert16i16to16ri8(MCInst &Inst, unsigned Opcode,$/;"	f	file:
convert32i32to32ri8	AsmParser/X86AsmParser.cpp	/^static bool convert32i32to32ri8(MCInst &Inst, unsigned Opcode,$/;"	f	file:
convert64i32to64ri8	AsmParser/X86AsmParser.cpp	/^static bool convert64i32to64ri8(MCInst &Inst, unsigned Opcode,$/;"	f	file:
convertToSExti8	AsmParser/X86AsmParser.cpp	/^static bool convertToSExti8(MCInst &Inst, unsigned Opcode, unsigned Reg,$/;"	f	file:
convertToThreeAddress	X86InstrInfo.cpp	/^X86InstrInfo::convertToThreeAddress(MachineFunction::iterator &MFI,$/;"	f	class:X86InstrInfo
convertToThreeAddressWithLEA	X86InstrInfo.cpp	/^X86InstrInfo::convertToThreeAddressWithLEA(unsigned MIOpc,$/;"	f	class:X86InstrInfo
copyPhysReg	X86InstrInfo.cpp	/^void X86InstrInfo::copyPhysReg(MachineBasicBlock &MBB,$/;"	f	class:X86InstrInfo
copyPhysRegOpcode_AVX512	X86InstrInfo.cpp	/^unsigned copyPhysRegOpcode_AVX512(unsigned& DestReg, unsigned& SrcReg) {$/;"	f	file:
createCleanupLocalDynamicTLSPass	X86InstrInfo.cpp	/^llvm::createCleanupLocalDynamicTLSPass() { return new LDTLSCleanup(); }$/;"	f	class:llvm
createExprForRelocation	MCTargetDesc/X86ELFRelocationInfo.cpp	/^  const MCExpr *createExprForRelocation(RelocationRef Rel) {$/;"	f	class:__anon28::X86_64ELFRelocationInfo
createExprForRelocation	MCTargetDesc/X86MachORelocationInfo.cpp	/^  const MCExpr *createExprForRelocation(RelocationRef Rel) {$/;"	f	class:__anon32::X86_64MachORelocationInfo
createFastISel	X86FastISel.cpp	/^  FastISel *X86::createFastISel(FunctionLoweringInfo &funcInfo,$/;"	f	class:llvm::X86
createFastISel	X86ISelLowering.cpp	/^X86TargetLowering::createFastISel(FunctionLoweringInfo &funcInfo,$/;"	f	class:X86TargetLowering
createGlobalBaseRegPass	X86InstrInfo.cpp	/^llvm::createGlobalBaseRegPass() { return new CGBR(); }$/;"	f	class:llvm
createMCStreamer	MCTargetDesc/X86MCTargetDesc.cpp	/^static MCStreamer *createMCStreamer(const Target &T, StringRef TT,$/;"	f	file:
createObjectWriter	MCTargetDesc/X86AsmBackend.cpp	/^  MCObjectWriter *createObjectWriter(raw_ostream &OS) const {$/;"	f	class:__anon23::DarwinX86_32AsmBackend
createObjectWriter	MCTargetDesc/X86AsmBackend.cpp	/^  MCObjectWriter *createObjectWriter(raw_ostream &OS) const {$/;"	f	class:__anon23::DarwinX86_64AsmBackend
createObjectWriter	MCTargetDesc/X86AsmBackend.cpp	/^  MCObjectWriter *createObjectWriter(raw_ostream &OS) const {$/;"	f	class:__anon23::ELFX86_32AsmBackend
createObjectWriter	MCTargetDesc/X86AsmBackend.cpp	/^  MCObjectWriter *createObjectWriter(raw_ostream &OS) const {$/;"	f	class:__anon23::ELFX86_64AsmBackend
createObjectWriter	MCTargetDesc/X86AsmBackend.cpp	/^  MCObjectWriter *createObjectWriter(raw_ostream &OS) const {$/;"	f	class:__anon23::WindowsX86AsmBackend
createPassConfig	X86TargetMachine.cpp	/^TargetPassConfig *X86TargetMachine::createPassConfig(PassManagerBase &PM) {$/;"	f	class:X86TargetMachine
createTLOF	X86ISelLowering.cpp	/^static TargetLoweringObjectFile *createTLOF(X86TargetMachine &TM) {$/;"	f	file:
createX86Disassembler	Disassembler/X86Disassembler.cpp	/^static MCDisassembler *createX86Disassembler(const Target &T,$/;"	f	file:
createX86ELFObjectWriter	MCTargetDesc/X86ELFObjectWriter.cpp	/^MCObjectWriter *llvm::createX86ELFObjectWriter(raw_ostream &OS,$/;"	f	class:llvm
createX86FixupLEAs	X86FixupLEAs.cpp	/^FunctionPass *llvm::createX86FixupLEAs() {$/;"	f	class:llvm
createX86FloatingPointStackifierPass	X86FloatingPoint.cpp	/^FunctionPass *llvm::createX86FloatingPointStackifierPass() { return new FPS(); }$/;"	f	class:llvm
createX86ISelDag	X86ISelDAGToDAG.cpp	/^FunctionPass *llvm::createX86ISelDag(X86TargetMachine &TM,$/;"	f	class:llvm
createX86IssueVZeroUpperPass	X86VZeroUpper.cpp	/^FunctionPass *llvm::createX86IssueVZeroUpperPass() {$/;"	f	class:llvm
createX86JITCodeEmitterPass	X86CodeEmitter.cpp	/^FunctionPass *llvm::createX86JITCodeEmitterPass(X86TargetMachine &TM,$/;"	f	class:llvm
createX86MCAsmInfo	MCTargetDesc/X86MCTargetDesc.cpp	/^static MCAsmInfo *createX86MCAsmInfo(const MCRegisterInfo &MRI, StringRef TT) {$/;"	f	file:
createX86MCCodeEmitter	MCTargetDesc/X86MCCodeEmitter.cpp	/^MCCodeEmitter *llvm::createX86MCCodeEmitter(const MCInstrInfo &MCII,$/;"	f	class:llvm
createX86MCCodeGenInfo	MCTargetDesc/X86MCTargetDesc.cpp	/^static MCCodeGenInfo *createX86MCCodeGenInfo(StringRef TT, Reloc::Model RM,$/;"	f	file:
createX86MCInstPrinter	MCTargetDesc/X86MCTargetDesc.cpp	/^static MCInstPrinter *createX86MCInstPrinter(const Target &T,$/;"	f	file:
createX86MCInstrAnalysis	MCTargetDesc/X86MCTargetDesc.cpp	/^static MCInstrAnalysis *createX86MCInstrAnalysis(const MCInstrInfo *Info) {$/;"	f	file:
createX86MCInstrInfo	MCTargetDesc/X86MCTargetDesc.cpp	/^static MCInstrInfo *createX86MCInstrInfo() {$/;"	f	file:
createX86MCRegisterInfo	MCTargetDesc/X86MCTargetDesc.cpp	/^static MCRegisterInfo *createX86MCRegisterInfo(StringRef TT) {$/;"	f	file:
createX86MCRelocationInfo	MCTargetDesc/X86MCTargetDesc.cpp	/^static MCRelocationInfo *createX86MCRelocationInfo(StringRef TT,$/;"	f	file:
createX86MCSubtargetInfo	MCTargetDesc/X86MCTargetDesc.cpp	/^MCSubtargetInfo *X86_MC::createX86MCSubtargetInfo(StringRef TT, StringRef CPU,$/;"	f	class:X86_MC
createX86MachObjectWriter	MCTargetDesc/X86MachObjectWriter.cpp	/^MCObjectWriter *llvm::createX86MachObjectWriter(raw_ostream &OS,$/;"	f	class:llvm
createX86PadShortFunctions	X86PadShortFunction.cpp	/^FunctionPass *llvm::createX86PadShortFunctions() {$/;"	f	class:llvm
createX86TargetTransformInfoPass	X86TargetTransformInfo.cpp	/^llvm::createX86TargetTransformInfoPass(const X86TargetMachine *TM) {$/;"	f	class:llvm
createX86WinCOFFObjectWriter	MCTargetDesc/X86WinCOFFObjectWriter.cpp	/^MCObjectWriter *llvm::createX86WinCOFFObjectWriter(raw_ostream &OS,$/;"	f	class:llvm
createX86_32AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^MCAsmBackend *llvm::createX86_32AsmBackend(const Target &T,$/;"	f	class:llvm
createX86_64AsmBackend	MCTargetDesc/X86AsmBackend.cpp	/^MCAsmBackend *llvm::createX86_64AsmBackend(const Target &T,$/;"	f	class:llvm
createX86_64ELFRelocationInfo	MCTargetDesc/X86ELFRelocationInfo.cpp	/^MCRelocationInfo *llvm::createX86_64ELFRelocationInfo(MCContext &Ctx) {$/;"	f	class:llvm
createX86_64MachORelocationInfo	MCTargetDesc/X86MachORelocationInfo.cpp	/^MCRelocationInfo *llvm::createX86_64MachORelocationInfo(MCContext &Ctx) {$/;"	f	class:llvm
cyclesUntilReturn	X86PadShortFunction.cpp	/^bool PadShortFunc::cyclesUntilReturn(MachineBasicBlock *MBB,$/;"	f	class:PadShortFunc
dbgprintf	Disassembler/X86DisassemblerDecoder.c	/^static void dbgprintf(struct InternalInstruction* insn,$/;"	f	file:
debug	Disassembler/X86Disassembler.cpp	51;"	d	file:
debug	Disassembler/X86DisassemblerDecoder.c	29;"	d	file:
debug	Disassembler/X86DisassemblerDecoder.c	31;"	d	file:
decode	Disassembler/X86DisassemblerDecoder.c	/^static InstrUID decode(OpcodeType type,$/;"	f	file:
decodeInstruction	Disassembler/X86DisassemblerDecoder.c	/^int decodeInstruction(struct InternalInstruction* insn,$/;"	f
determineREX	X86CodeEmitter.cpp	/^static unsigned determineREX(const MachineInstr &MI) {$/;"	f	file:
displacement	Disassembler/X86DisassemblerDecoder.h	/^  int32_t                       displacement;$/;"	m	struct:InternalInstruction
displacementOffset	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t displacementOffset;$/;"	m	struct:InternalInstruction
displacementSize	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t displacementSize;$/;"	m	struct:InternalInstruction
dlog	Disassembler/X86DisassemblerDecoder.h	/^  dlog_t dlog;$/;"	m	struct:InternalInstruction
dlogArg	Disassembler/X86DisassemblerDecoder.h	/^  void* dlogArg;$/;"	m	struct:InternalInstruction
dlog_t	Disassembler/X86DisassemblerDecoder.h	/^typedef void (*dlog_t)(void* arg, const char *log);$/;"	t
doSrcDstMatch	AsmParser/X86AsmParser.cpp	/^bool X86AsmParser::doSrcDstMatch(X86Operand &Op1, X86Operand &Op2)$/;"	f	class:X86AsmParser
doesSectionRequireSymbols	MCTargetDesc/X86AsmBackend.cpp	/^  virtual bool doesSectionRequireSymbols(const MCSection &Section) const {$/;"	f	class:__anon23::DarwinX86_64AsmBackend
dump	X86ISelDAGToDAG.cpp	/^    void dump() {$/;"	f	struct:__anon47::X86ISelAddressMode
dumpStack	X86FloatingPoint.cpp	/^    void dumpStack() const {$/;"	f	struct:__anon39::FPS	file:
duplicatePendingSTBeforeKill	X86FloatingPoint.cpp	/^    void duplicatePendingSTBeforeKill(unsigned RegNo, MachineInstr *I) {$/;"	f	struct:__anon39::FPS	file:
duplicateToTop	X86FloatingPoint.cpp	/^    void duplicateToTop(unsigned RegNo, unsigned AsReg, MachineInstr *I) {$/;"	f	struct:__anon39::FPS	file:
eaBase	Disassembler/X86DisassemblerDecoder.h	/^  EABase                        eaBase;$/;"	m	struct:InternalInstruction
eaBaseBase	Disassembler/X86DisassemblerDecoder.h	/^  EABase                        eaBaseBase;$/;"	m	struct:InternalInstruction
eaDisplacement	Disassembler/X86DisassemblerDecoder.h	/^  EADisplacement                eaDisplacement;$/;"	m	struct:InternalInstruction
eaRegBase	Disassembler/X86DisassemblerDecoder.h	/^  EABase                        eaRegBase;$/;"	m	struct:InternalInstruction
eliminateCallFramePseudoInstr	X86FrameLowering.cpp	/^eliminateCallFramePseudoInstr(MachineFunction &MF, MachineBasicBlock &MBB,$/;"	f	class:X86FrameLowering
eliminateFrameIndex	X86RegisterInfo.cpp	/^X86RegisterInfo::eliminateFrameIndex(MachineBasicBlock::iterator II,$/;"	f	class:X86RegisterInfo
emitCalleeSavedFrameMoves	X86FrameLowering.cpp	/^void X86FrameLowering::emitCalleeSavedFrameMoves(MachineFunction &MF,$/;"	f	class:X86FrameLowering
emitConstPoolAddress	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitConstPoolAddress(unsigned CPI, unsigned Reloc,$/;"	f	class:Emitter
emitConstant	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitConstant(uint64_t Val, unsigned Size) {$/;"	f	class:Emitter
emitDisplacementField	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitDisplacementField(const MachineOperand *RelocOp,$/;"	f	class:Emitter
emitEHSjLjLongJmp	X86ISelLowering.cpp	/^X86TargetLowering::emitEHSjLjLongJmp(MachineInstr *MI,$/;"	f	class:X86TargetLowering
emitEHSjLjSetJmp	X86ISelLowering.cpp	/^X86TargetLowering::emitEHSjLjSetJmp(MachineInstr *MI,$/;"	f	class:X86TargetLowering
emitEpilogue	X86FrameLowering.cpp	/^void X86FrameLowering::emitEpilogue(MachineFunction &MF,$/;"	f	class:X86FrameLowering
emitExternalSymbolAddress	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitExternalSymbolAddress(const char *ES,$/;"	f	class:Emitter
emitFMA3Instr	X86ISelLowering.cpp	/^X86TargetLowering::emitFMA3Instr(MachineInstr *MI,$/;"	f	class:X86TargetLowering
emitFunctionStub	X86JITInfo.cpp	/^void *X86JITInfo::emitFunctionStub(const Function* F, void *Target,$/;"	f	class:X86JITInfo
emitGlobalAddress	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitGlobalAddress(const GlobalValue *GV,$/;"	f	class:Emitter
emitGlobalValueIndirectSym	X86JITInfo.cpp	/^void *X86JITInfo::emitGlobalValueIndirectSym(const GlobalValue* GV, void *ptr,$/;"	f	class:X86JITInfo
emitInstruction	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitInstruction(MachineInstr &MI,$/;"	f	class:Emitter
emitJumpTableAddress	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitJumpTableAddress(unsigned JTI, unsigned Reloc,$/;"	f	class:Emitter
emitMemModRMByte	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitMemModRMByte(const MachineInstr &MI,$/;"	f	class:Emitter
emitOpcodePrefix	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitOpcodePrefix(uint64_t TSFlags,$/;"	f	class:Emitter
emitPCRelativeBlockAddress	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitPCRelativeBlockAddress(MachineBasicBlock *MBB) {$/;"	f	class:Emitter
emitPrologue	X86FrameLowering.cpp	/^void X86FrameLowering::emitPrologue(MachineFunction &MF) const {$/;"	f	class:X86FrameLowering
emitRegModRMByte	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitRegModRMByte(unsigned ModRMReg,$/;"	f	class:Emitter
emitRegModRMByte	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitRegModRMByte(unsigned RegOpcodeFld) {$/;"	f	class:Emitter
emitSIBByte	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitSIBByte(unsigned SS,$/;"	f	class:Emitter
emitSPUpdate	X86FrameLowering.cpp	/^void emitSPUpdate(MachineBasicBlock &MBB, MachineBasicBlock::iterator &MBBI,$/;"	f	file:
emitSegmentOverridePrefix	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitSegmentOverridePrefix(uint64_t TSFlags,$/;"	f	class:Emitter
emitVEXOpcodePrefix	X86CodeEmitter.cpp	/^void Emitter<CodeEmitter>::emitVEXOpcodePrefix(uint64_t TSFlags,$/;"	f	class:Emitter
enablePostRAScheduler	X86Subtarget.cpp	/^bool X86Subtarget::enablePostRAScheduler($/;"	f	class:X86Subtarget
encodeCompactUnwindRegistersWithFrame	MCTargetDesc/X86AsmBackend.cpp	/^  uint32_t encodeCompactUnwindRegistersWithFrame() const {$/;"	f	class:__anon23::DarwinX86AsmBackend	file:
encodeCompactUnwindRegistersWithoutFrame	MCTargetDesc/X86AsmBackend.cpp	/^  uint32_t encodeCompactUnwindRegistersWithoutFrame(unsigned RegCount) const {$/;"	f	class:__anon23::DarwinX86AsmBackend	file:
encoding	Disassembler/X86DisassemblerDecoderCommon.h	/^  uint8_t encoding;$/;"	m	struct:OperandSpecifier
execute	AsmParser/X86AsmParser.cpp	/^    int64_t execute() {$/;"	f	class:__anon1::X86AsmParser::InfixCalculator
expandPostRAPseudo	X86InstrInfo.cpp	/^bool X86InstrInfo::expandPostRAPseudo(MachineBasicBlock::iterator MI) const {$/;"	f	class:X86InstrInfo
externals_begin	X86COFFMachineModuleInfo.h	/^  externals_iterator externals_begin() const { return Externals.begin(); }$/;"	f	class:llvm::X86COFFMachineModuleInfo
externals_end	X86COFFMachineModuleInfo.h	/^  externals_iterator externals_end() const { return Externals.end(); }$/;"	f	class:llvm::X86COFFMachineModuleInfo
externals_iterator	X86COFFMachineModuleInfo.h	/^  typedef DenseSet<MCSymbol const *>::const_iterator externals_iterator;$/;"	t	class:llvm::X86COFFMachineModuleInfo
extrn	X86CompilationCallback_Win64.asm	/^extrn LLVMX86CompilationCallback2: PROC$/;"	l
fMode	Disassembler/X86Disassembler.h	/^  DisassemblerMode              fMode;$/;"	m	class:llvm::X86Disassembler::X86GenericDisassembler
finalizePass	X86TargetTransformInfo.cpp	/^  virtual void finalizePass() {$/;"	f	class:__anon54::LLVM_FINAL
findDeadCallerSavedReg	X86FrameLowering.cpp	/^static unsigned findDeadCallerSavedReg(MachineBasicBlock &MBB,$/;"	f	file:
findRepresentativeClass	X86ISelLowering.cpp	/^X86TargetLowering::findRepresentativeClass(MVT VT) const{$/;"	f	class:X86TargetLowering
findReturns	X86PadShortFunction.cpp	/^void PadShortFunc::findReturns(MachineBasicBlock *MBB, unsigned int Cycles) {$/;"	f	class:PadShortFunc
finishBlockStack	X86FloatingPoint.cpp	/^void FPS::finishBlockStack() {$/;"	f	class:FPS
fixupNeedsRelaxation	MCTargetDesc/X86AsmBackend.cpp	/^bool X86AsmBackend::fixupNeedsRelaxation(const MCFixup &Fixup,$/;"	f	class:X86AsmBackend
fixupReg	Disassembler/X86DisassemblerDecoder.c	/^static int fixupReg(struct InternalInstruction *insn,$/;"	f	file:
foldMemoryOperandImpl	X86InstrInfo.cpp	/^MachineInstr* X86InstrInfo::foldMemoryOperandImpl(MachineFunction &MF,$/;"	f	class:X86InstrInfo
foldMemoryOperandImpl	X86InstrInfo.cpp	/^X86InstrInfo::foldMemoryOperandImpl(MachineFunction &MF, MachineInstr *MI,$/;"	f	class:X86InstrInfo
foldMemoryOperandImpl	X86InstrInfo.cpp	/^X86InstrInfo::foldMemoryOperandImpl(MachineFunction &MF,$/;"	f	class:X86InstrInfo
freeStackSlotAfter	X86FloatingPoint.cpp	/^void FPS::freeStackSlotAfter(MachineBasicBlock::iterator &I, unsigned FPRegNo) {$/;"	f	class:FPS
freeStackSlotBefore	X86FloatingPoint.cpp	/^FPS::freeStackSlotBefore(MachineBasicBlock::iterator I, unsigned FPRegNo) {$/;"	f	class:FPS
from	X86FloatingPoint.cpp	/^    uint16_t from;$/;"	m	struct:__anon41::TableEntry	file:
generateCompactUnwindEncoding	MCTargetDesc/X86AsmBackend.cpp	/^  generateCompactUnwindEncoding(ArrayRef<MCCFIInstruction> Instrs) const {$/;"	f	class:__anon23::DarwinX86_32AsmBackend
generateCompactUnwindEncoding	MCTargetDesc/X86AsmBackend.cpp	/^  generateCompactUnwindEncoding(ArrayRef<MCCFIInstruction> Instrs) const {$/;"	f	class:__anon23::DarwinX86_64AsmBackend
generateCompactUnwindEncodingImpl	MCTargetDesc/X86AsmBackend.cpp	/^  generateCompactUnwindEncodingImpl(ArrayRef<MCCFIInstruction> Instrs) const {$/;"	f	class:__anon23::DarwinX86AsmBackend
get512BitSuperRegister	X86RegisterInfo.cpp	/^unsigned get512BitSuperRegister(unsigned Reg) {$/;"	f	namespace:llvm
getADDriOpcode	X86FrameLowering.cpp	/^static unsigned getADDriOpcode(unsigned IsLP64, int64_t Imm) {$/;"	f	file:
getAddImmPrefix	AsmParser/X86AsmParser.cpp	/^    bool getAddImmPrefix() { return AddImmPrefix; }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getAddressComputationCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getAddressComputationCost(Type *Ty, bool IsComplex) const {$/;"	f	class:X86TTI
getAddressOperands	X86ISelDAGToDAG.cpp	/^    inline void getAddressOperands(X86ISelAddressMode &AM, SDValue &Base,$/;"	f	class:__anon49::X86DAGToDAGISel	file:
getAnalysisUsage	X86CodeEmitter.cpp	/^    void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:__anon36::Emitter
getAnalysisUsage	X86FloatingPoint.cpp	/^    virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:__anon39::FPS
getAnalysisUsage	X86InstrInfo.cpp	/^    virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:__anon45::CGBR
getAnalysisUsage	X86InstrInfo.cpp	/^    virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:__anon46::LDTLSCleanup
getArgumentStackSize	X86MachineFunctionInfo.h	/^  unsigned getArgumentStackSize() const { return ArgumentStackSize; }$/;"	f	class:llvm::X86MachineFunctionInfo
getArithmeticInstrCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getArithmeticInstrCost(unsigned Opcode, Type *Ty,$/;"	f	class:X86TTI
getAtomicLoadArithTargetConstant	X86ISelDAGToDAG.cpp	/^static SDValue getAtomicLoadArithTargetConstant(SelectionDAG *CurDAG,$/;"	f	file:
getBZeroEntry	X86Subtarget.cpp	/^const char *X86Subtarget::getBZeroEntry() const {$/;"	f	class:X86Subtarget
getBaseOpcodeFor	MCTargetDesc/X86BaseInfo.h	/^  inline unsigned char getBaseOpcodeFor(uint64_t TSFlags) {$/;"	f	namespace:llvm::X86II
getBaseReg	AsmParser/X86AsmParser.cpp	/^    unsigned getBaseReg() { return BaseReg; }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getBaseRegister	X86RegisterInfo.h	/^  unsigned getBaseRegister() const { return BasePtr; }$/;"	f	class:llvm::X86RegisterInfo
getByValTypeAlignment	X86ISelLowering.cpp	/^unsigned X86TargetLowering::getByValTypeAlignment(Type *Ty) const {$/;"	f	class:X86TargetLowering
getBytesToPopOnReturn	X86MachineFunctionInfo.h	/^  unsigned getBytesToPopOnReturn() const { return BytesToPopOnReturn; }$/;"	f	class:llvm::X86MachineFunctionInfo
getCFIPersonalitySymbol	X86TargetObjectFile.cpp	/^MCSymbol *X86_64MachoTargetObjectFile::getCFIPersonalitySymbol($/;"	f	class:X86_64MachoTargetObjectFile
getCMovFromCond	X86InstrInfo.cpp	/^static unsigned getCMovFromCond(X86::CondCode CC, unsigned RegBytes,$/;"	f	file:
getCallPreservedMask	X86RegisterInfo.cpp	/^X86RegisterInfo::getCallPreservedMask(CallingConv::ID CC) const {$/;"	f	class:X86RegisterInfo
getCalleeSavedFrameSize	X86MachineFunctionInfo.h	/^  unsigned getCalleeSavedFrameSize() const { return CalleeSavedFrameSize; }$/;"	f	class:llvm::X86MachineFunctionInfo
getCalleeSavedRegs	X86RegisterInfo.cpp	/^X86RegisterInfo::getCalleeSavedRegs(const MachineFunction *MF) const {$/;"	f	class:X86RegisterInfo
getCastInstrCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getCastInstrCost(unsigned Opcode, Type *Dst, Type *Src) const {$/;"	f	class:X86TTI
getCmpSelInstrCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getCmpSelInstrCost(unsigned Opcode, Type *ValTy,$/;"	f	class:X86TTI
getCmpXChgOpcode	X86ISelLowering.cpp	/^static unsigned getCmpXChgOpcode(EVT VT) {$/;"	f	file:
getCompactUnwindRegNum	MCTargetDesc/X86AsmBackend.cpp	/^  int getCompactUnwindRegNum(unsigned Reg) const {$/;"	f	class:__anon23::DarwinX86AsmBackend	file:
getCompactUnwindRegNum	X86RegisterInfo.cpp	/^int X86RegisterInfo::getCompactUnwindRegNum(unsigned RegNum, bool isEH) const {$/;"	f	class:X86RegisterInfo
getConcreteOpcode	X86FloatingPoint.cpp	/^static unsigned getConcreteOpcode(unsigned Opcode) {$/;"	f	file:
getCondFromBranchOpc	X86InstrInfo.cpp	/^static X86::CondCode getCondFromBranchOpc(unsigned BrOpc) {$/;"	f	file:
getCondFromCMovOpc	X86InstrInfo.cpp	/^X86::CondCode X86::getCondFromCMovOpc(unsigned Opc) {$/;"	f	class:X86
getCondFromSETOpc	X86InstrInfo.cpp	/^static X86::CondCode getCondFromSETOpc(unsigned Opc) {$/;"	f	file:
getConstraintType	X86ISelLowering.cpp	/^X86TargetLowering::getConstraintType(const std::string &Constraint) const {$/;"	f	class:X86TargetLowering
getCrossCopyRegClass	X86RegisterInfo.cpp	/^X86RegisterInfo::getCrossCopyRegClass(const TargetRegisterClass *RC) const {$/;"	f	class:X86RegisterInfo
getDataLayout	X86TargetMachine.h	/^  virtual const DataLayout *getDataLayout() const { return &DL; }$/;"	f	class:llvm::X86TargetMachine
getDebugThreadLocalSymbol	X86TargetObjectFile.cpp	/^X86LinuxTargetObjectFile::getDebugThreadLocalSymbol($/;"	f	class:X86LinuxTargetObjectFile
getDwarfRegFlavour	MCTargetDesc/X86MCTargetDesc.cpp	/^unsigned X86_MC::getDwarfRegFlavour(StringRef TT, bool isEH) {$/;"	f	class:X86_MC
getEndLoc	AsmParser/X86AsmParser.cpp	/^  SMLoc getEndLoc() const { return EndLoc; }$/;"	f	struct:__anon2::X86Operand
getExecutableRelativeSymbol	X86TargetObjectFile.cpp	/^const MCExpr *X86WindowsTargetObjectFile::getExecutableRelativeSymbol($/;"	f	class:X86WindowsTargetObjectFile
getExecutionDomain	X86InstrInfo.cpp	/^X86InstrInfo::getExecutionDomain(const MachineInstr *MI) const {$/;"	f	class:X86InstrInfo
getExprForPersonalitySymbol	MCTargetDesc/X86MCAsmInfo.cpp	/^X86_64MCAsmInfoDarwin::getExprForPersonalitySymbol(const MCSymbol *Sym,$/;"	f	class:X86_64MCAsmInfoDarwin
getExtractVEXTRACT128Immediate	X86ISelLowering.cpp	/^unsigned X86::getExtractVEXTRACT128Immediate(SDNode *N) {$/;"	f	class:X86
getExtractVEXTRACT256Immediate	X86ISelLowering.cpp	/^unsigned X86::getExtractVEXTRACT256Immediate(SDNode *N) {$/;"	f	class:X86
getExtractVEXTRACTImmediate	X86ISelLowering.cpp	/^static unsigned getExtractVEXTRACTImmediate(SDNode *N, unsigned vecWidth) {$/;"	f	file:
getFPReg	X86FloatingPoint.cpp	/^static unsigned getFPReg(const MachineOperand &MO) {$/;"	f	file:
getFixupKindInfo	MCTargetDesc/X86AsmBackend.cpp	/^  const MCFixupKindInfo &getFixupKindInfo(MCFixupKind Kind) const {$/;"	f	class:__anon22::X86AsmBackend
getFixupKindLog2Size	MCTargetDesc/X86AsmBackend.cpp	/^static unsigned getFixupKindLog2Size(unsigned Kind) {$/;"	f	file:
getFixupKindLog2Size	MCTargetDesc/X86MachObjectWriter.cpp	/^static unsigned getFixupKindLog2Size(unsigned Kind) {$/;"	f	file:
getForceFramePointer	X86MachineFunctionInfo.h	/^  bool getForceFramePointer() const { return ForceFramePointer;}$/;"	f	class:llvm::X86MachineFunctionInfo
getFrameIndexOffset	X86FrameLowering.cpp	/^int X86FrameLowering::getFrameIndexOffset(const MachineFunction &MF, int FI) const {$/;"	f	class:X86FrameLowering
getFrameIndexReference	X86FrameLowering.cpp	/^int X86FrameLowering::getFrameIndexReference(const MachineFunction &MF, int FI,$/;"	f	class:X86FrameLowering
getFrameLowering	X86TargetMachine.h	/^  virtual const TargetFrameLowering  *getFrameLowering() const {$/;"	f	class:llvm::X86TargetMachine
getFrameRegister	X86RegisterInfo.cpp	/^unsigned X86RegisterInfo::getFrameRegister(const MachineFunction &MF) const {$/;"	f	class:X86RegisterInfo
getFullAddress	X86InstrBuilder.h	/^  void getFullAddress(SmallVectorImpl<MachineOperand> &MO) {$/;"	f	struct:llvm::X86AddressMode
getFusedLdStOpcode	X86ISelDAGToDAG.cpp	/^static unsigned getFusedLdStOpcode(EVT &LdVT, unsigned Opc) {$/;"	f	file:
getGR32FromGR64	AsmParser/X86AsmParser.cpp	/^  static unsigned getGR32FromGR64(unsigned RegNo) {$/;"	f	struct:__anon2::X86Operand
getGatherNode	X86ISelLowering.cpp	/^static SDValue getGatherNode(unsigned Opc, SDValue Op, SelectionDAG &DAG,$/;"	f	file:
getGlobalBaseReg	X86ISelDAGToDAG.cpp	/^SDNode *X86DAGToDAGISel::getGlobalBaseReg() {$/;"	f	class:X86DAGToDAGISel
getGlobalBaseReg	X86InstrInfo.cpp	/^unsigned X86InstrInfo::getGlobalBaseReg(MachineFunction *MF) const {$/;"	f	class:X86InstrInfo
getGlobalBaseReg	X86MachineFunctionInfo.h	/^  unsigned getGlobalBaseReg() const { return GlobalBaseReg; }$/;"	f	class:llvm::X86MachineFunctionInfo
getI32Imm	X86ISelDAGToDAG.cpp	/^    inline SDValue getI32Imm(unsigned Imm) {$/;"	f	class:__anon49::X86DAGToDAGISel	file:
getI8Imm	X86ISelDAGToDAG.cpp	/^    inline SDValue getI8Imm(unsigned Imm) {$/;"	f	class:__anon49::X86DAGToDAGISel	file:
getID	Disassembler/X86DisassemblerDecoder.c	/^static int getID(struct InternalInstruction* insn, const void *miiArg) {$/;"	f	file:
getIDWithAttrMask	Disassembler/X86DisassemblerDecoder.c	/^static int getIDWithAttrMask(uint16_t* instructionID,$/;"	f	file:
getIdentifierInfo	AsmParser/X86AsmParser.cpp	/^    InlineAsmIdentifierInfo &getIdentifierInfo() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getImm	AsmParser/X86AsmParser.cpp	/^    int64_t getImm() { return Imm + IC.execute(); }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getImm	AsmParser/X86AsmParser.cpp	/^  const MCExpr *getImm() const {$/;"	f	struct:__anon2::X86Operand
getImmFixupKind	MCTargetDesc/X86MCCodeEmitter.cpp	/^static MCFixupKind getImmFixupKind(uint64_t TSFlags) {$/;"	f	file:
getIndexReg	AsmParser/X86AsmParser.cpp	/^    unsigned getIndexReg() { return IndexReg; }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getInsertVINSERT128Immediate	X86ISelLowering.cpp	/^unsigned X86::getInsertVINSERT128Immediate(SDNode *N) {$/;"	f	class:X86
getInsertVINSERT256Immediate	X86ISelLowering.cpp	/^unsigned X86::getInsertVINSERT256Immediate(SDNode *N) {$/;"	f	class:X86
getInsertVINSERTImmediate	X86ISelLowering.cpp	/^static unsigned getInsertVINSERTImmediate(SDNode *N, unsigned vecWidth) {$/;"	f	file:
getInstrInfo	X86FastISel.cpp	/^  const X86InstrInfo *getInstrInfo() const {$/;"	f	class:__anon37::X86FastISel	file:
getInstrInfo	X86ISelDAGToDAG.cpp	/^    const X86InstrInfo *getInstrInfo() const {$/;"	f	class:__anon49::X86DAGToDAGISel	file:
getInstrInfo	X86TargetMachine.h	/^  virtual const X86InstrInfo     *getInstrInfo() const {$/;"	f	class:llvm::X86TargetMachine
getInstrItineraryData	X86Subtarget.h	/^  const InstrItineraryData &getInstrItineraryData() const { return InstrItins; }$/;"	f	class:llvm::X86Subtarget
getInstrItineraryData	X86TargetMachine.h	/^  virtual const InstrItineraryData *getInstrItineraryData() const {$/;"	f	class:llvm::X86TargetMachine
getInstruction	Disassembler/X86Disassembler.cpp	/^X86GenericDisassembler::getInstruction(MCInst &instr,$/;"	f	class:X86GenericDisassembler
getIntImmCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getIntImmCost(Intrinsic::ID IID, const APInt &Imm,$/;"	f	class:X86TTI
getIntImmCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getIntImmCost(const APInt &Imm, Type *Ty) const {$/;"	f	class:X86TTI
getIntImmCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getIntImmCost(unsigned Opcode, const APInt &Imm,$/;"	f	class:X86TTI
getIntelMemOperandSize	AsmParser/X86AsmParser.cpp	/^static unsigned getIntelMemOperandSize(StringRef OpStr) {$/;"	f	file:
getJITInfo	X86TargetMachine.h	/^  virtual       X86JITInfo       *getJITInfo()         {$/;"	f	class:llvm::X86TargetMachine
getJumpTableEncoding	X86ISelLowering.cpp	/^unsigned X86TargetLowering::getJumpTableEncoding() const {$/;"	f	class:X86TargetLowering
getLEArOpcode	X86FrameLowering.cpp	/^static unsigned getLEArOpcode(unsigned IsLP64) {$/;"	f	file:
getLargestLegalSuperClass	X86RegisterInfo.cpp	/^X86RegisterInfo::getLargestLegalSuperClass(const TargetRegisterClass *RC) const{$/;"	f	class:X86RegisterInfo
getLazyResolverFunction	X86JITInfo.cpp	/^X86JITInfo::getLazyResolverFunction(JITCompilerFn F) {$/;"	f	class:X86JITInfo
getLegalSplat	X86ISelLowering.cpp	/^static SDValue getLegalSplat(SelectionDAG &DAG, SDValue V, int EltNo) {$/;"	f	file:
getLexer	AsmParser/X86AsmParser.cpp	/^  MCAsmLexer &getLexer() const { return Parser.getLexer(); }$/;"	f	class:__anon1::X86AsmParser	file:
getLoadOpcode	X86ISelLowering.cpp	/^static unsigned getLoadOpcode(EVT VT) {$/;"	f	file:
getLoadRegOpcode	X86InstrInfo.cpp	/^static unsigned getLoadRegOpcode(unsigned DestReg,$/;"	f	file:
getLoadStoreRegOpcode	X86InstrInfo.cpp	/^static unsigned getLoadStoreRegOpcode(unsigned Reg,$/;"	f	file:
getLocRange	AsmParser/X86AsmParser.cpp	/^  SMRange getLocRange() const { return SMRange(StartLoc, EndLoc); }$/;"	f	struct:__anon2::X86Operand
getMGatherNode	X86ISelLowering.cpp	/^static SDValue getMGatherNode(unsigned Opc, SDValue Op, SelectionDAG &DAG,$/;"	f	file:
getMOVDDup	X86ISelLowering.cpp	/^SDValue getMOVDDup(SDValue &Op, SDLoc &dl, SDValue V1, SelectionDAG &DAG) {$/;"	f	file:
getMOVHighToLow	X86ISelLowering.cpp	/^SDValue getMOVHighToLow(SDValue &Op, SDLoc &dl, SelectionDAG &DAG) {$/;"	f	file:
getMOVL	X86ISelLowering.cpp	/^static SDValue getMOVL(SelectionDAG &DAG, SDLoc dl, EVT VT, SDValue V1,$/;"	f	file:
getMOVLP	X86ISelLowering.cpp	/^SDValue getMOVLP(SDValue &Op, SDLoc &dl, SelectionDAG &DAG, bool HasSSE2) {$/;"	f	file:
getMOVLowToHigh	X86ISelLowering.cpp	/^SDValue getMOVLowToHigh(SDValue &Op, SDLoc &dl, SelectionDAG &DAG,$/;"	f	file:
getMScatterNode	X86ISelLowering.cpp	/^static SDValue getMScatterNode(unsigned Opc, SDValue Op, SelectionDAG &DAG,$/;"	f	file:
getMachOMMI	X86MCInstLower.cpp	/^MachineModuleInfoMachO &X86MCInstLower::getMachOMMI() const {$/;"	f	class:X86MCInstLower
getMang	X86MCInstLower.cpp	/^  Mangler *getMang() const {$/;"	f	class:__anon51::X86MCInstLower	file:
getMatchingSuperRegClass	X86RegisterInfo.cpp	/^X86RegisterInfo::getMatchingSuperRegClass(const TargetRegisterClass *A,$/;"	f	class:X86RegisterInfo
getMaxByValAlign	X86ISelLowering.cpp	/^static void getMaxByValAlign(Type *Ty, unsigned &MaxAlign) {$/;"	f	file:
getMaxInlineSizeThreshold	X86Subtarget.h	/^  unsigned getMaxInlineSizeThreshold() const { return MaxInlineSizeThreshold; }$/;"	f	class:llvm::X86Subtarget
getMaximumUnrollFactor	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getMaximumUnrollFactor() const {$/;"	f	class:X86TTI
getMemBaseReg	AsmParser/X86AsmParser.cpp	/^  unsigned getMemBaseReg() const {$/;"	f	struct:__anon2::X86Operand
getMemDisp	AsmParser/X86AsmParser.cpp	/^  const MCExpr *getMemDisp() const {$/;"	f	struct:__anon2::X86Operand
getMemIndexReg	AsmParser/X86AsmParser.cpp	/^  unsigned getMemIndexReg() const {$/;"	f	struct:__anon2::X86Operand
getMemScale	AsmParser/X86AsmParser.cpp	/^  unsigned getMemScale() const {$/;"	f	struct:__anon2::X86Operand
getMemSegReg	AsmParser/X86AsmParser.cpp	/^  unsigned getMemSegReg() const {$/;"	f	struct:__anon2::X86Operand
getMemoryOpCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getMemoryOpCost(unsigned Opcode, Type *Src, unsigned Alignment,$/;"	f	class:X86TTI
getMemoryOperandNo	MCTargetDesc/X86BaseInfo.h	/^  inline int getMemoryOperandNo(uint64_t TSFlags, unsigned Opcode) {$/;"	f	namespace:llvm::X86II
getNoPreservedMask	X86RegisterInfo.cpp	/^X86RegisterInfo::getNoPreservedMask() const {$/;"	f	class:X86RegisterInfo
getNonAtomic6432Opcode	X86ISelLowering.cpp	/^static unsigned getNonAtomic6432Opcode(unsigned Opc, unsigned &HiOpc) {$/;"	f	file:
getNonAtomic6432OpcodeWithExtraOpc	X86ISelLowering.cpp	/^static unsigned getNonAtomic6432OpcodeWithExtraOpc(unsigned Opc,$/;"	f	file:
getNonAtomicOpcode	X86ISelLowering.cpp	/^static unsigned getNonAtomicOpcode(unsigned Opc) {$/;"	f	file:
getNonAtomicOpcodeWithExtraOpc	X86ISelLowering.cpp	/^static unsigned getNonAtomicOpcodeWithExtraOpc(unsigned Opc,$/;"	f	file:
getNonexecutableStackSection	MCTargetDesc/X86MCAsmInfo.cpp	/^getNonexecutableStackSection(MCContext &Ctx) const {$/;"	f	class:X86ELFMCAsmInfo
getNoopForMachoTarget	X86InstrInfo.cpp	/^void X86InstrInfo::getNoopForMachoTarget(MCInst &NopInst) const {$/;"	f	class:X86InstrInfo
getNumFixupKinds	MCTargetDesc/X86AsmBackend.cpp	/^  unsigned getNumFixupKinds() const {$/;"	f	class:__anon22::X86AsmBackend
getNumLocalDynamicTLSAccesses	X86MachineFunctionInfo.h	/^  unsigned getNumLocalDynamicTLSAccesses() const { return NumLocalDynamics; }$/;"	f	class:llvm::X86MachineFunctionInfo
getNumOfConsecutiveZeros	X86ISelLowering.cpp	/^static unsigned getNumOfConsecutiveZeros(ShuffleVectorSDNode *SVOp,$/;"	f	file:
getNumberOfRegisters	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getNumberOfRegisters(bool Vector) const {$/;"	f	class:X86TTI
getOffsetOfLoc	AsmParser/X86AsmParser.cpp	/^  SMLoc getOffsetOfLoc() const { return OffsetOfLoc; }$/;"	f	struct:__anon2::X86Operand
getOnesVector	X86ISelLowering.cpp	/^static SDValue getOnesVector(MVT VT, bool HasInt256, SelectionDAG &DAG,$/;"	f	file:
getOpDecl	AsmParser/X86AsmParser.cpp	/^  void *getOpDecl() { return OpDecl; }$/;"	f	struct:__anon2::X86Operand
getOpcodeAfterMemoryUnfold	X86InstrInfo.cpp	/^unsigned X86InstrInfo::getOpcodeAfterMemoryUnfold(unsigned Opc,$/;"	f	class:X86InstrInfo
getOperandBias	MCTargetDesc/X86BaseInfo.h	/^  inline int getOperandBias(const MCInstrDesc& Desc)$/;"	f	namespace:llvm::X86II
getOptimalMemOpType	X86ISelLowering.cpp	/^X86TargetLowering::getOptimalMemOpType(uint64_t Size,$/;"	f	class:X86TargetLowering
getPICBase	X86JITInfo.h	/^    uintptr_t getPICBase() const { return PICBase; }$/;"	f	class:llvm::X86JITInfo
getPICJumpTableEntry	X86JITInfo.cpp	/^uintptr_t X86JITInfo::getPICJumpTableEntry(uintptr_t BB, uintptr_t Entry) {$/;"	f	class:X86JITInfo
getPICJumpTableRelocBase	X86ISelLowering.cpp	/^SDValue X86TargetLowering::getPICJumpTableRelocBase(SDValue Table,$/;"	f	class:X86TargetLowering
getPICJumpTableRelocBaseExpr	X86ISelLowering.cpp	/^getPICJumpTableRelocBaseExpr(const MachineFunction *MF, unsigned JTI,$/;"	f	class:X86TargetLowering
getPICStyle	X86Subtarget.h	/^  PICStyles::Style getPICStyle() const { return PICStyle; }$/;"	f	class:llvm::X86Subtarget
getParser	AsmParser/X86AsmParser.cpp	/^  MCAsmParser &getParser() const { return Parser; }$/;"	f	class:__anon1::X86AsmParser	file:
getPartialRegUpdateClearance	X86InstrInfo.cpp	/^getPartialRegUpdateClearance(const MachineInstr *MI, unsigned OpNum,$/;"	f	class:X86InstrInfo
getPassName	X86CodeEmitter.cpp	/^    virtual const char *getPassName() const {$/;"	f	class:__anon36::Emitter
getPassName	X86FixupLEAs.cpp	/^    virtual const char *getPassName() const { return "X86 Atom LEA Fixup";}$/;"	f	class:__anon38::FixupLEAPass	file:
getPassName	X86FloatingPoint.cpp	/^    virtual const char *getPassName() const { return "X86 FP Stackifier"; }$/;"	f	struct:__anon39::FPS
getPassName	X86ISelDAGToDAG.cpp	/^    virtual const char *getPassName() const {$/;"	f	class:__anon49::X86DAGToDAGISel
getPassName	X86InstrInfo.cpp	/^    virtual const char *getPassName() const {$/;"	f	struct:__anon45::CGBR
getPassName	X86InstrInfo.cpp	/^    virtual const char *getPassName() const {$/;"	f	struct:__anon46::LDTLSCleanup
getPassName	X86PadShortFunction.cpp	/^    virtual const char *getPassName() const {$/;"	f	struct:__anon52::PadShortFunc
getPassName	X86VZeroUpper.cpp	/^    virtual const char *getPassName() const { return "X86 vzeroupper inserter";}$/;"	f	struct:__anon55::VZeroUpperInserter
getPointerRegClass	X86RegisterInfo.cpp	/^X86RegisterInfo::getPointerRegClass(const MachineFunction &MF, unsigned Kind)$/;"	f	class:X86RegisterInfo
getPopcntSupport	X86TargetTransformInfo.cpp	/^X86TTI::PopcntSupportKind X86TTI::getPopcntSupport(unsigned TyWidth) const {$/;"	f	class:X86TTI
getPreviousInstr	X86FixupLEAs.cpp	/^static inline bool getPreviousInstr(MachineBasicBlock::iterator& I,$/;"	f	file:
getPseudoCMOVOpc	X86ISelLowering.cpp	/^static unsigned getPseudoCMOVOpc(EVT VT) {$/;"	f	file:
getRAIndex	X86MachineFunctionInfo.h	/^  int getRAIndex() const { return ReturnAddrIndex; }$/;"	f	class:llvm::X86MachineFunctionInfo
getReductionCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getReductionCost(unsigned Opcode, Type *ValTy,$/;"	f	class:X86TTI
getReg	AsmParser/X86AsmParser.cpp	/^  unsigned getReg() const {$/;"	f	struct:__anon2::X86Operand
getRegForInlineAsmConstraint	X86ISelLowering.cpp	/^X86TargetLowering::getRegForInlineAsmConstraint(const std::string &Constraint,$/;"	f	class:X86TargetLowering
getRegPressureLimit	X86RegisterInfo.cpp	/^X86RegisterInfo::getRegPressureLimit(const TargetRegisterClass *RC,$/;"	f	class:X86RegisterInfo
getRegSaveFrameIndex	X86MachineFunctionInfo.h	/^  int getRegSaveFrameIndex() const { return RegSaveFrameIndex; }$/;"	f	class:llvm::X86MachineFunctionInfo
getRegisterBitWidth	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getRegisterBitWidth(bool Vector) const {$/;"	f	class:X86TTI
getRegisterInfo	X86InstrInfo.h	/^  virtual const X86RegisterInfo &getRegisterInfo() const { return RI; }$/;"	f	class:llvm::X86InstrInfo
getRegisterInfo	X86TargetMachine.h	/^  virtual const X86RegisterInfo  *getRegisterInfo() const {$/;"	f	class:llvm::X86TargetMachine
getRelaxedOpcode	MCTargetDesc/X86AsmBackend.cpp	/^static unsigned getRelaxedOpcode(unsigned Op) {$/;"	f	file:
getRelaxedOpcodeArith	MCTargetDesc/X86AsmBackend.cpp	/^static unsigned getRelaxedOpcodeArith(unsigned Op) {$/;"	f	file:
getRelaxedOpcodeBranch	MCTargetDesc/X86AsmBackend.cpp	/^static unsigned getRelaxedOpcodeBranch(unsigned Op) {$/;"	f	file:
getRelocType	MCTargetDesc/X86WinCOFFObjectWriter.cpp	/^unsigned X86WinCOFFObjectWriter::getRelocType(const MCValue &Target,$/;"	f	class:X86WinCOFFObjectWriter
getReservedRegs	X86RegisterInfo.cpp	/^BitVector X86RegisterInfo::getReservedRegs(const MachineFunction &MF) const {$/;"	f	class:X86RegisterInfo
getRetOpcode	X86MCInstLower.cpp	/^static unsigned getRetOpcode(const X86Subtarget &Subtarget)$/;"	f	file:
getReturnAddressFrameIndex	X86ISelLowering.cpp	/^SDValue X86TargetLowering::getReturnAddressFrameIndex(SelectionDAG &DAG) const {$/;"	f	class:X86TargetLowering
getSEHRegNum	X86RegisterInfo.cpp	/^X86RegisterInfo::getSEHRegNum(unsigned i) const {$/;"	f	class:X86RegisterInfo
getSETFromCond	X86InstrInfo.cpp	/^static unsigned getSETFromCond(X86::CondCode CC,$/;"	f	file:
getSRetReturnReg	X86MachineFunctionInfo.h	/^  unsigned getSRetReturnReg() const { return SRetReturnReg; }$/;"	f	class:llvm::X86MachineFunctionInfo
getSTReg	X86FloatingPoint.cpp	/^    unsigned getSTReg(unsigned RegNo) const {$/;"	f	struct:__anon39::FPS	file:
getSUBriOpcode	X86FrameLowering.cpp	/^static unsigned getSUBriOpcode(unsigned IsLP64, int64_t Imm) {$/;"	f	file:
getScalarShiftAmountTy	X86ISelLowering.h	/^    virtual MVT getScalarShiftAmountTy(EVT LHSTy) const { return MVT::i8; }$/;"	f	class:llvm::X86TargetLowering
getScalarizationOverhead	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getScalarizationOverhead(Type *Ty, bool Insert,$/;"	f	class:X86TTI
getScale	AsmParser/X86AsmParser.cpp	/^    unsigned getScale() { return Scale; }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getScatterNode	X86ISelLowering.cpp	/^static SDValue getScatterNode(unsigned Opc, SDValue Op, SelectionDAG &DAG,$/;"	f	file:
getScratchReg	X86FloatingPoint.cpp	/^    unsigned getScratchReg() const {$/;"	f	struct:__anon39::FPS	file:
getScratchRegisters	X86ISelLowering.cpp	/^const uint16_t *X86TargetLowering::getScratchRegisters(CallingConv::ID) const {$/;"	f	class:X86TargetLowering
getSelectionDAGInfo	X86TargetMachine.h	/^  virtual const X86SelectionDAGInfo *getSelectionDAGInfo() const {$/;"	f	class:llvm::X86TargetMachine
getSetCCResultType	X86ISelLowering.cpp	/^EVT X86TargetLowering::getSetCCResultType(LLVMContext &, EVT VT) const {$/;"	f	class:X86TargetLowering
getShuffleCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getShuffleCost(ShuffleKind Kind, Type *Tp, int Index,$/;"	f	class:X86TTI
getShufflePALIGNRImmediate	X86ISelLowering.cpp	/^static unsigned getShufflePALIGNRImmediate(ShuffleVectorSDNode *SVOp) {$/;"	f	file:
getShufflePSHUFHWImmediate	X86ISelLowering.cpp	/^static unsigned getShufflePSHUFHWImmediate(ShuffleVectorSDNode *N) {$/;"	f	file:
getShufflePSHUFLWImmediate	X86ISelLowering.cpp	/^static unsigned getShufflePSHUFLWImmediate(ShuffleVectorSDNode *N) {$/;"	f	file:
getShuffleSHUFImmediate	X86ISelLowering.cpp	/^static unsigned getShuffleSHUFImmediate(ShuffleVectorSDNode *N) {$/;"	f	file:
getShuffleScalarElt	X86ISelLowering.cpp	/^static SDValue getShuffleScalarElt(SDNode *N, unsigned Index, SelectionDAG &DAG,$/;"	f	file:
getShuffleVPERM2X128Immediate	X86ISelLowering.cpp	/^static unsigned getShuffleVPERM2X128Immediate(ShuffleVectorSDNode *SVOp) {$/;"	f	file:
getShuffleVectorZeroOrUndef	X86ISelLowering.cpp	/^static SDValue getShuffleVectorZeroOrUndef(SDValue V2, unsigned Idx,$/;"	f	file:
getSingleConstraintMatchWeight	X86ISelLowering.cpp	/^  X86TargetLowering::getSingleConstraintMatchWeight($/;"	f	class:X86TargetLowering
getSizeOfImm	MCTargetDesc/X86BaseInfo.h	/^  inline unsigned getSizeOfImm(uint64_t TSFlags) {$/;"	f	namespace:llvm::X86II
getSlot	X86FloatingPoint.cpp	/^    unsigned getSlot(unsigned RegNo) const {$/;"	f	struct:__anon39::FPS	file:
getSlotSize	X86RegisterInfo.h	/^  unsigned getSlotSize() const { return SlotSize; }$/;"	f	class:llvm::X86RegisterInfo
getStackAlignment	X86Subtarget.h	/^  unsigned getStackAlignment() const { return stackAlignment; }$/;"	f	class:llvm::X86Subtarget
getStackCookieLocation	X86ISelLowering.cpp	/^bool X86TargetLowering::getStackCookieLocation(unsigned &AddressSpace,$/;"	f	class:X86TargetLowering
getStackEntry	X86FloatingPoint.cpp	/^    unsigned getStackEntry(unsigned STi) const {$/;"	f	struct:__anon39::FPS	file:
getStackRegister	X86RegisterInfo.h	/^  unsigned getStackRegister() const { return StackPtr; }$/;"	f	class:llvm::X86RegisterInfo
getStartLoc	AsmParser/X86AsmParser.cpp	/^  SMLoc getStartLoc() const { return StartLoc; }$/;"	f	struct:__anon2::X86Operand
getStopOnLBrac	AsmParser/X86AsmParser.cpp	/^    bool getStopOnLBrac() { return StopOnLBrac; }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getStoreRegOpcode	X86InstrInfo.cpp	/^static unsigned getStoreRegOpcode(unsigned SrcReg,$/;"	f	file:
getStubLayout	X86JITInfo.cpp	/^TargetJITInfo::StubLayout X86JITInfo::getStubLayout() {$/;"	f	class:X86JITInfo
getSubClassWithSubReg	X86RegisterInfo.cpp	/^X86RegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC,$/;"	f	class:X86RegisterInfo
getSubtarget	X86AsmPrinter.h	/^  const X86Subtarget &getSubtarget() const { return *Subtarget; }$/;"	f	class:llvm::X86AsmPrinter
getSubtarget	X86ISelLowering.h	/^    const X86Subtarget* getSubtarget() const {$/;"	f	class:llvm::X86TargetLowering
getSubtargetImpl	X86TargetMachine.h	/^  virtual const X86Subtarget     *getSubtargetImpl() const{ return &Subtarget; }$/;"	f	class:llvm::X86TargetMachine
getSwappedCondition	X86InstrInfo.cpp	/^static X86::CondCode getSwappedCondition(X86::CondCode CC) {$/;"	f	file:
getSym	AsmParser/X86AsmParser.cpp	/^    const MCExpr *getSym() { return Sym; }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getSymName	AsmParser/X86AsmParser.cpp	/^    StringRef getSymName() { return SymName; }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
getSymName	AsmParser/X86AsmParser.cpp	/^  StringRef getSymName() { return SymName; }$/;"	f	struct:__anon2::X86Operand
getTCReturnAddrDelta	X86MachineFunctionInfo.h	/^  int getTCReturnAddrDelta() const { return TailCallReturnAddrDelta; }$/;"	f	class:llvm::X86MachineFunctionInfo
getTTypeGlobalReference	X86TargetObjectFile.cpp	/^const MCExpr *X86_64MachoTargetObjectFile::getTTypeGlobalReference($/;"	f	class:X86_64MachoTargetObjectFile
getTargetLowering	X86TargetMachine.h	/^  virtual const X86TargetLowering *getTargetLowering() const {$/;"	f	class:llvm::X86TargetMachine
getTargetMachine	X86FastISel.cpp	/^  const X86TargetMachine *getTargetMachine() const {$/;"	f	class:__anon37::X86FastISel	file:
getTargetMachine	X86ISelDAGToDAG.cpp	/^    const X86TargetMachine &getTargetMachine() const {$/;"	f	class:__anon49::X86DAGToDAGISel	file:
getTargetNodeName	X86ISelLowering.cpp	/^const char *X86TargetLowering::getTargetNodeName(unsigned Opcode) const {$/;"	f	class:X86TargetLowering
getTargetShuffleMask	X86ISelLowering.cpp	/^static bool getTargetShuffleMask(SDNode *N, MVT VT,$/;"	f	file:
getTargetShuffleNode	X86ISelLowering.cpp	/^static SDValue getTargetShuffleNode(unsigned Opc, SDLoc dl, EVT VT,$/;"	f	file:
getTargetTriple	X86Subtarget.h	/^  const Triple &getTargetTriple() const { return TargetTriple; }$/;"	f	class:llvm::X86Subtarget
getTargetVShiftByConstNode	X86ISelLowering.cpp	/^static SDValue getTargetVShiftByConstNode(unsigned Opc, SDLoc dl, MVT VT,$/;"	f	file:
getTargetVShiftNode	X86ISelLowering.cpp	/^static SDValue getTargetVShiftNode(unsigned Opc, SDLoc dl, MVT VT,$/;"	f	file:
getToken	AsmParser/X86AsmParser.cpp	/^  StringRef getToken() const {$/;"	f	struct:__anon2::X86Operand
getTruncatedShiftCount	X86InstrInfo.cpp	/^inline static unsigned getTruncatedShiftCount(MachineInstr *MI,$/;"	f	file:
getTypeForExtArgOrReturn	X86ISelLowering.cpp	/^X86TargetLowering::getTypeForExtArgOrReturn(MVT VT,$/;"	f	class:X86TargetLowering
getUndefRegClearance	X86InstrInfo.cpp	/^getUndefRegClearance(const MachineInstr *MI, unsigned &OpNum,$/;"	f	class:X86InstrInfo
getUnpackh	X86ISelLowering.cpp	/^static SDValue getUnpackh(SelectionDAG &DAG, SDLoc dl, MVT VT, SDValue V1,$/;"	f	file:
getUnpackl	X86ISelLowering.cpp	/^static SDValue getUnpackl(SelectionDAG &DAG, SDLoc dl, MVT VT, SDValue V1,$/;"	f	file:
getVEXRegisterEncoding	MCTargetDesc/X86MCCodeEmitter.cpp	/^  unsigned char getVEXRegisterEncoding(const MCInst &MI,$/;"	f	class:__anon29::X86MCCodeEmitter
getVEXRegisterEncoding	X86CodeEmitter.cpp	/^Emitter<CodeEmitter>::getVEXRegisterEncoding(const MachineInstr &MI,$/;"	f	class:Emitter
getVShift	X86ISelLowering.cpp	/^static SDValue getVShift(bool isLeft, EVT VT, SDValue SrcOp,$/;"	f	file:
getVZextMovL	X86ISelLowering.cpp	/^static SDValue getVZextMovL(MVT VT, MVT OpVT,$/;"	f	file:
getVarArgsFPOffset	X86MachineFunctionInfo.h	/^  unsigned getVarArgsFPOffset() const { return VarArgsFPOffset; }$/;"	f	class:llvm::X86MachineFunctionInfo
getVarArgsFrameIndex	X86MachineFunctionInfo.h	/^  int getVarArgsFrameIndex() const { return VarArgsFrameIndex; }$/;"	f	class:llvm::X86MachineFunctionInfo
getVarArgsGPOffset	X86MachineFunctionInfo.h	/^  unsigned getVarArgsGPOffset() const { return VarArgsGPOffset; }$/;"	f	class:llvm::X86MachineFunctionInfo
getVectorInstrCost	X86TargetTransformInfo.cpp	/^unsigned X86TTI::getVectorInstrCost(unsigned Opcode, Type *Val,$/;"	f	class:X86TTI
getWriteMaskRegisterEncoding	MCTargetDesc/X86MCCodeEmitter.cpp	/^  unsigned char getWriteMaskRegisterEncoding(const MCInst &MI,$/;"	f	class:__anon29::X86MCCodeEmitter
getX86RegNum	X86CodeEmitter.cpp	/^    unsigned getX86RegNum(unsigned RegNo) const {$/;"	f	class:__anon36::Emitter	file:
getX86SubSuperRegister	X86RegisterInfo.cpp	/^unsigned getX86SubSuperRegister(unsigned Reg, MVT::SimpleValueType VT,$/;"	f	namespace:llvm
getX86Subtarget	X86TargetMachine.cpp	/^  const X86Subtarget &getX86Subtarget() const {$/;"	f	class:__anon53::X86PassConfig
getX86TargetMachine	X86TargetMachine.cpp	/^  X86TargetMachine &getX86TargetMachine() const {$/;"	f	class:__anon53::X86PassConfig
getZeroVector	X86ISelLowering.cpp	/^static SDValue getZeroVector(EVT VT, const X86Subtarget *Subtarget,$/;"	f	file:
gvNeedsNonLazyPtr	X86CodeEmitter.cpp	/^static bool gvNeedsNonLazyPtr(const MachineOperand &GVOp,$/;"	f	file:
hadError	AsmParser/X86AsmParser.cpp	/^    bool hadError() { return State == IES_ERROR; }$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
handleCompareFP	X86FloatingPoint.cpp	/^void FPS::handleCompareFP(MachineBasicBlock::iterator &I) {$/;"	f	class:FPS
handleCondMovFP	X86FloatingPoint.cpp	/^void FPS::handleCondMovFP(MachineBasicBlock::iterator &I) {$/;"	f	class:FPS
handleConstantAddresses	X86FastISel.cpp	/^bool X86FastISel::handleConstantAddresses(const Value *V, X86AddressMode &AM) {$/;"	f	class:X86FastISel
handleOneArgFP	X86FloatingPoint.cpp	/^void FPS::handleOneArgFP(MachineBasicBlock::iterator &I) {$/;"	f	class:FPS
handleOneArgFPRW	X86FloatingPoint.cpp	/^void FPS::handleOneArgFPRW(MachineBasicBlock::iterator &I) {$/;"	f	class:FPS
handleSpecialFP	X86FloatingPoint.cpp	/^void FPS::handleSpecialFP(MachineBasicBlock::iterator &I) {$/;"	f	class:FPS
handleTwoArgFP	X86FloatingPoint.cpp	/^void FPS::handleTwoArgFP(MachineBasicBlock::iterator &I) {$/;"	f	class:FPS
handleZeroArgFP	X86FloatingPoint.cpp	/^void FPS::handleZeroArgFP(MachineBasicBlock::iterator &I) {$/;"	f	class:FPS
has3DNow	X86Subtarget.h	/^  bool has3DNow() const { return X863DNowLevel >= ThreeDNow; }$/;"	f	class:llvm::X86Subtarget
has3DNowA	X86Subtarget.h	/^  bool has3DNowA() const { return X863DNowLevel >= ThreeDNowA; }$/;"	f	class:llvm::X86Subtarget
hasADX	X86Subtarget.h	/^  bool hasADX() const { return HasADX; }$/;"	f	class:llvm::X86Subtarget
hasAES	X86Subtarget.h	/^  bool hasAES() const { return HasAES; }$/;"	f	class:llvm::X86Subtarget
hasAVX	X86Subtarget.h	/^  bool hasAVX() const { return X86SSELevel >= AVX; }$/;"	f	class:llvm::X86Subtarget
hasAVX2	X86Subtarget.h	/^  bool hasAVX2() const { return X86SSELevel >= AVX2; }$/;"	f	class:llvm::X86Subtarget
hasAVX512	X86Subtarget.h	/^  bool hasAVX512() const { return X86SSELevel >= AVX512F; }$/;"	f	class:llvm::X86Subtarget
hasBMI	X86Subtarget.h	/^  bool hasBMI() const { return HasBMI; }$/;"	f	class:llvm::X86Subtarget
hasBMI2	X86Subtarget.h	/^  bool hasBMI2() const { return HasBMI2; }$/;"	f	class:llvm::X86Subtarget
hasBaseOrIndexReg	X86ISelDAGToDAG.cpp	/^    bool hasBaseOrIndexReg() const {$/;"	f	struct:__anon47::X86ISelAddressMode
hasBasePointer	X86RegisterInfo.cpp	/^bool X86RegisterInfo::hasBasePointer(const MachineFunction &MF) const {$/;"	f	class:X86RegisterInfo
hasCDI	X86Subtarget.h	/^  bool hasCDI() const { return HasCDI; }$/;"	f	class:llvm::X86Subtarget
hasCMov	X86Subtarget.h	/^  bool hasCMov() const { return HasCMov; }$/;"	f	class:llvm::X86Subtarget
hasCmpxchg16b	X86Subtarget.h	/^  bool hasCmpxchg16b() const { return HasCmpxchg16b; }$/;"	f	class:llvm::X86Subtarget
hasERI	X86Subtarget.h	/^  bool hasERI() const { return HasERI; }$/;"	f	class:llvm::X86Subtarget
hasF16C	X86Subtarget.h	/^  bool hasF16C() const { return HasF16C; }$/;"	f	class:llvm::X86Subtarget
hasFMA	X86Subtarget.h	/^  bool hasFMA() const { return HasFMA; }$/;"	f	class:llvm::X86Subtarget
hasFMA4	X86Subtarget.h	/^  bool hasFMA4() const { return HasFMA4 && !HasFMA; }$/;"	f	class:llvm::X86Subtarget
hasFP	X86FrameLowering.cpp	/^bool X86FrameLowering::hasFP(const MachineFunction &MF) const {$/;"	f	class:X86FrameLowering
hasFPCMov	X86ISelLowering.cpp	/^static bool hasFPCMov(unsigned X86CC) {$/;"	f	file:
hasFSGSBase	X86Subtarget.h	/^  bool hasFSGSBase() const { return HasFSGSBase; }$/;"	f	class:llvm::X86Subtarget
hasFp256	X86Subtarget.h	/^  bool hasFp256() const { return hasAVX(); }$/;"	f	class:llvm::X86Subtarget
hasHLE	X86Subtarget.h	/^  bool hasHLE() const { return HasHLE; }$/;"	f	class:llvm::X86Subtarget
hasHighOperandLatency	X86InstrInfo.cpp	/^hasHighOperandLatency(const InstrItineraryData *ItinData,$/;"	f	class:X86InstrInfo
hasImm	MCTargetDesc/X86BaseInfo.h	/^  inline bool hasImm(uint64_t TSFlags) {$/;"	f	namespace:llvm::X86II
hasInt256	X86Subtarget.h	/^  bool hasInt256() const { return hasAVX2(); }$/;"	f	class:llvm::X86Subtarget
hasLZCNT	X86Subtarget.h	/^  bool hasLZCNT() const { return HasLZCNT; }$/;"	f	class:llvm::X86Subtarget
hasLiveCondCodeDef	X86InstrInfo.cpp	/^static bool hasLiveCondCodeDef(MachineInstr *MI) {$/;"	f	file:
hasMMX	X86Subtarget.h	/^  bool hasMMX() const { return X86SSELevel >= MMX; }$/;"	f	class:llvm::X86Subtarget
hasMOVBE	X86Subtarget.h	/^  bool hasMOVBE() const { return HasMOVBE; }$/;"	f	class:llvm::X86Subtarget
hasPCLMUL	X86Subtarget.h	/^  bool hasPCLMUL() const { return HasPCLMUL; }$/;"	f	class:llvm::X86Subtarget
hasPFI	X86Subtarget.h	/^  bool hasPFI() const { return HasPFI; }$/;"	f	class:llvm::X86Subtarget
hasPOPCNT	X86Subtarget.h	/^  bool hasPOPCNT() const { return HasPOPCNT; }$/;"	f	class:llvm::X86Subtarget
hasPRFCHW	X86Subtarget.h	/^  bool hasPRFCHW() const { return HasPRFCHW; }$/;"	f	class:llvm::X86Subtarget
hasPartialRegUpdate	X86InstrInfo.cpp	/^static bool hasPartialRegUpdate(unsigned Opcode) {$/;"	f	file:
hasRDRAND	X86Subtarget.h	/^  bool hasRDRAND() const { return HasRDRAND; }$/;"	f	class:llvm::X86Subtarget
hasRDSEED	X86Subtarget.h	/^  bool hasRDSEED() const { return HasRDSEED; }$/;"	f	class:llvm::X86Subtarget
hasRTM	X86Subtarget.h	/^  bool hasRTM() const { return HasRTM; }$/;"	f	class:llvm::X86Subtarget
hasReservedCallFrame	X86FrameLowering.cpp	/^bool X86FrameLowering::hasReservedCallFrame(const MachineFunction &MF) const {$/;"	f	class:X86FrameLowering
hasReservedSpillSlot	X86RegisterInfo.cpp	/^bool X86RegisterInfo::hasReservedSpillSlot(const MachineFunction &MF,$/;"	f	class:X86RegisterInfo
hasSHA	X86Subtarget.h	/^  bool hasSHA() const { return HasSHA; }$/;"	f	class:llvm::X86Subtarget
hasSSE1	X86Subtarget.h	/^  bool hasSSE1() const { return X86SSELevel >= SSE1; }$/;"	f	class:llvm::X86Subtarget
hasSSE2	X86Subtarget.h	/^  bool hasSSE2() const { return X86SSELevel >= SSE2; }$/;"	f	class:llvm::X86Subtarget
hasSSE3	X86Subtarget.h	/^  bool hasSSE3() const { return X86SSELevel >= SSE3; }$/;"	f	class:llvm::X86Subtarget
hasSSE41	X86Subtarget.h	/^  bool hasSSE41() const { return X86SSELevel >= SSE41; }$/;"	f	class:llvm::X86Subtarget
hasSSE42	X86Subtarget.h	/^  bool hasSSE42() const { return X86SSELevel >= SSE42; }$/;"	f	class:llvm::X86Subtarget
hasSSE4A	X86Subtarget.h	/^  bool hasSSE4A() const { return HasSSE4A; }$/;"	f	class:llvm::X86Subtarget
hasSSSE3	X86Subtarget.h	/^  bool hasSSSE3() const { return X86SSELevel >= SSSE3; }$/;"	f	class:llvm::X86Subtarget
hasSinCos	X86Subtarget.cpp	/^bool X86Subtarget::hasSinCos() const {$/;"	f	class:X86Subtarget
hasSlowDivide	X86Subtarget.h	/^  bool hasSlowDivide() const { return HasSlowDivide; }$/;"	f	class:llvm::X86Subtarget
hasSymbolicDisplacement	X86ISelDAGToDAG.cpp	/^    bool hasSymbolicDisplacement() const {$/;"	f	struct:__anon47::X86ISelAddressMode
hasTBM	X86Subtarget.h	/^  bool hasTBM() const { return HasTBM; }$/;"	f	class:llvm::X86Subtarget
hasUndefRegUpdate	X86InstrInfo.cpp	/^static bool hasUndefRegUpdate(unsigned Opcode) {$/;"	f	file:
hasVectorUAMem	X86Subtarget.h	/^  bool hasVectorUAMem() const { return HasVectorUAMem; }$/;"	f	class:llvm::X86Subtarget
hasXOP	X86Subtarget.h	/^  bool hasXOP() const { return HasXOP; }$/;"	f	class:llvm::X86Subtarget
hasYmmReg	X86VZeroUpper.cpp	/^static bool hasYmmReg(MachineInstr *MI) {$/;"	f	file:
i64immSExt32	X86ISelDAGToDAG.cpp	/^    inline bool i64immSExt32(SDNode *N) const {$/;"	f	class:__anon49::X86DAGToDAGISel
immSext8	X86ISelDAGToDAG.cpp	/^    inline bool immSext8(SDNode *N) const {$/;"	f	class:__anon49::X86DAGToDAGISel
immediateOffset	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t immediateOffset;$/;"	m	struct:InternalInstruction
immediateSize	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t immediateSize;$/;"	m	struct:InternalInstruction
immediates	Disassembler/X86DisassemblerDecoder.h	/^  uint64_t                      immediates[2];$/;"	m	struct:InternalInstruction
incNumLocalDynamicTLSAccesses	X86MachineFunctionInfo.h	/^  void incNumLocalDynamicTLSAccesses() { ++NumLocalDynamics; }$/;"	f	class:llvm::X86MachineFunctionInfo
indexFromSIB	Disassembler/X86DisassemblerDecoder.h	41;"	d
initializeEnvironment	X86Subtarget.cpp	/^void X86Subtarget::initializeEnvironment() {$/;"	f	class:X86Subtarget
insertSelect	X86InstrInfo.cpp	/^void X86InstrInfo::insertSelect(MachineBasicBlock &MBB,$/;"	f	class:X86InstrInfo
instructionID	Disassembler/X86DisassemblerDecoder.h	/^  uint16_t instructionID;$/;"	m	struct:InternalInstruction
is16Bit	X86Subtarget.h	/^  bool is16Bit() const {$/;"	f	class:llvm::X86Subtarget
is16BitEquivalent	Disassembler/X86DisassemblerDecoder.c	/^static BOOL is16BitEquivalent(const char* orig, const char* equiv) {$/;"	f	file:
is16BitMode	AsmParser/X86AsmParser.cpp	/^  bool is16BitMode() const {$/;"	f	class:__anon1::X86AsmParser	file:
is16BitMode	MCTargetDesc/X86MCCodeEmitter.cpp	/^  bool is16BitMode(const MCSubtargetInfo &STI) const {$/;"	f	class:__anon29::X86MCCodeEmitter
is32Bit	X86Subtarget.h	/^  bool is32Bit() const {$/;"	f	class:llvm::X86Subtarget
is32BitMode	AsmParser/X86AsmParser.cpp	/^  bool is32BitMode() const {$/;"	f	class:__anon1::X86AsmParser	file:
is32BitMode	MCTargetDesc/X86MCCodeEmitter.cpp	/^  bool is32BitMode(const MCSubtargetInfo &STI) const {$/;"	f	class:__anon29::X86MCCodeEmitter
is32ExtendedReg	MCTargetDesc/X86BaseInfo.h	/^  static inline bool is32ExtendedReg(unsigned RegNo) {$/;"	f	namespace:llvm::X86II
is64Bit	X86Subtarget.h	/^  bool is64Bit() const {$/;"	f	class:llvm::X86Subtarget
is64BitMode	AsmParser/X86AsmParser.cpp	/^  bool is64BitMode() const {$/;"	f	class:__anon1::X86AsmParser	file:
is64BitMode	MCTargetDesc/X86MCCodeEmitter.cpp	/^  bool is64BitMode(const MCSubtargetInfo &STI) const {$/;"	f	class:__anon29::X86MCCodeEmitter
isAbsMem	AsmParser/X86AsmParser.cpp	/^  bool isAbsMem() const {$/;"	f	struct:__anon2::X86Operand
isAllOnes	X86ISelLowering.cpp	/^static bool isAllOnes(SDValue V) {$/;"	f	file:
isAndOrOfSetCCs	X86ISelLowering.cpp	/^static bool isAndOrOfSetCCs(SDValue Op, unsigned &Opc) {$/;"	f	file:
isAtTop	X86FloatingPoint.cpp	/^    bool isAtTop(unsigned RegNo) const { return getSlot(RegNo) == StackTop-1; }$/;"	f	struct:__anon39::FPS	file:
isAtom	X86Subtarget.h	/^  bool isAtom() const { return X86ProcFamily == IntelAtom; }$/;"	f	class:llvm::X86Subtarget
isBTMemSlow	X86Subtarget.h	/^  bool isBTMemSlow() const { return IsBTMemSlow; }$/;"	f	class:llvm::X86Subtarget
isCDisp8	MCTargetDesc/X86MCCodeEmitter.cpp	/^static bool isCDisp8(uint64_t TSFlags, int Value, int& CValue) {$/;"	f	file:
isCalleeLoad	X86ISelDAGToDAG.cpp	/^static bool isCalleeLoad(SDValue Callee, SDValue &Chain, bool HasCallSeq) {$/;"	f	file:
isCalleePop	X86ISelLowering.cpp	/^bool X86::isCalleePop(CallingConv::ID CallingConv,$/;"	f	class:X86
isCallingConvWin64	X86Subtarget.h	/^  bool isCallingConvWin64(CallingConv::ID CC) const {$/;"	f	class:llvm::X86Subtarget
isCoalescableExtInstr	X86InstrInfo.cpp	/^X86InstrInfo::isCoalescableExtInstr(const MachineInstr &MI,$/;"	f	class:X86InstrInfo
isCommutedMOVLMask	X86ISelLowering.cpp	/^static bool isCommutedMOVLMask(ArrayRef<int> Mask, MVT VT,$/;"	f	file:
isDefConvertible	X86InstrInfo.cpp	/^inline static bool isDefConvertible(MachineInstr *MI) {$/;"	f	file:
isDisp8	MCTargetDesc/X86MCCodeEmitter.cpp	/^static bool isDisp8(int Value) {$/;"	f	file:
isDisp8	X86CodeEmitter.cpp	/^static bool isDisp8(int Value) {$/;"	f	file:
isDispSafeForFrameIndex	X86ISelDAGToDAG.cpp	/^static bool isDispSafeForFrameIndex(int64_t Val) {$/;"	f	file:
isDstIdx	AsmParser/X86AsmParser.cpp	/^  bool isDstIdx() const {$/;"	f	struct:__anon2::X86Operand
isDstIdx16	AsmParser/X86AsmParser.cpp	/^  bool isDstIdx16() const {$/;"	f	struct:__anon2::X86Operand
isDstIdx32	AsmParser/X86AsmParser.cpp	/^  bool isDstIdx32() const {$/;"	f	struct:__anon2::X86Operand
isDstIdx64	AsmParser/X86AsmParser.cpp	/^  bool isDstIdx64() const {$/;"	f	struct:__anon2::X86Operand
isDstIdx8	AsmParser/X86AsmParser.cpp	/^  bool isDstIdx8() const {$/;"	f	struct:__anon2::X86Operand
isEAXLiveIn	X86FrameLowering.cpp	/^static bool isEAXLiveIn(MachineFunction &MF) {$/;"	f	file:
isFMAFasterThanFMulAndFAdd	X86ISelLowering.cpp	/^X86TargetLowering::isFMAFasterThanFMulAndFAdd(EVT VT) const {$/;"	f	class:X86TargetLowering
isFPCopy	X86FloatingPoint.cpp	/^    static bool isFPCopy(MachineInstr *MI) {$/;"	f	struct:__anon39::FPS	file:
isFPImmLegal	X86ISelLowering.cpp	/^bool X86TargetLowering::isFPImmLegal(const APFloat &Imm, EVT VT) const {$/;"	f	class:X86TargetLowering
isFixed	X86FloatingPoint.cpp	/^      bool isFixed() const { return !Mask || FixCount; }$/;"	f	struct:__anon39::FPS::LiveBundle
isFixupKindRIPRel	MCTargetDesc/X86MachObjectWriter.cpp	/^static bool isFixupKindRIPRel(unsigned Kind) {$/;"	f	file:
isFrameLoadOpcode	X86InstrInfo.cpp	/^static bool isFrameLoadOpcode(int Opcode) {$/;"	f	file:
isFrameOperand	X86InstrInfo.cpp	/^bool X86InstrInfo::isFrameOperand(const MachineInstr *MI, unsigned int Op,$/;"	f	class:X86InstrInfo
isFrameStoreOpcode	X86InstrInfo.cpp	/^static bool isFrameStoreOpcode(int Opcode) {$/;"	f	file:
isGAPlusOffset	X86ISelLowering.cpp	/^bool X86TargetLowering::isGAPlusOffset(SDNode *N,$/;"	f	class:X86TargetLowering
isGR32orGR64	AsmParser/X86AsmParser.cpp	/^  bool isGR32orGR64() const {$/;"	f	struct:__anon2::X86Operand
isGlobalRelativeToPICBase	X86InstrInfo.h	/^inline static bool isGlobalRelativeToPICBase(unsigned char TargetFlag) {$/;"	f	namespace:llvm
isGlobalStubReference	X86InstrInfo.h	/^inline static bool isGlobalStubReference(unsigned char TargetFlag) {$/;"	f	namespace:llvm
isHReg	X86InstrInfo.cpp	/^static bool isHReg(unsigned Reg) {$/;"	f	file:
isHighLatencyDef	X86InstrInfo.cpp	/^bool X86InstrInfo::isHighLatencyDef(int opc) const {$/;"	f	class:X86InstrInfo
isHorizontalBinOp	X86ISelLowering.cpp	/^static bool isHorizontalBinOp(SDValue &LHS, SDValue &RHS, bool IsCommutative) {$/;"	f	file:
isImm	AsmParser/X86AsmParser.cpp	/^  bool isImm() const { return Kind == Immediate; }$/;"	f	struct:__anon2::X86Operand
isImmPCRel	MCTargetDesc/X86BaseInfo.h	/^  inline unsigned isImmPCRel(uint64_t TSFlags) {$/;"	f	namespace:llvm::X86II
isImmSExti16i8	AsmParser/X86AsmParser.cpp	/^  bool isImmSExti16i8() const {$/;"	f	struct:__anon2::X86Operand
isImmSExti16i8Value	AsmParser/X86AsmParser.cpp	/^static bool isImmSExti16i8Value(uint64_t Value) {$/;"	f	file:
isImmSExti32i8	AsmParser/X86AsmParser.cpp	/^  bool isImmSExti32i8() const {$/;"	f	struct:__anon2::X86Operand
isImmSExti32i8Value	AsmParser/X86AsmParser.cpp	/^static bool isImmSExti32i8Value(uint64_t Value) {$/;"	f	file:
isImmSExti64i32	AsmParser/X86AsmParser.cpp	/^  bool isImmSExti64i32() const {$/;"	f	struct:__anon2::X86Operand
isImmSExti64i32Value	AsmParser/X86AsmParser.cpp	/^static bool isImmSExti64i32Value(uint64_t Value) {$/;"	f	file:
isImmSExti64i8	AsmParser/X86AsmParser.cpp	/^  bool isImmSExti64i8() const {$/;"	f	struct:__anon2::X86Operand
isImmSExti64i8Value	AsmParser/X86AsmParser.cpp	/^static bool isImmSExti64i8Value(uint64_t Value) {$/;"	f	file:
isImmSigned	MCTargetDesc/X86BaseInfo.h	/^  inline unsigned isImmSigned(uint64_t TSFlags) {$/;"	f	namespace:llvm::X86II
isImmZExtu32u8	AsmParser/X86AsmParser.cpp	/^  bool isImmZExtu32u8() const {$/;"	f	struct:__anon2::X86Operand
isImmZExtu32u8Value	AsmParser/X86AsmParser.cpp	/^static bool isImmZExtu32u8Value(uint64_t Value) {$/;"	f	file:
isIntegerTypeFTOL	X86ISelLowering.h	/^    bool isIntegerTypeFTOL(EVT VT) const {$/;"	f	class:llvm::X86TargetLowering
isLeaMem	X86InstrInfo.h	/^inline static bool isLeaMem(const MachineInstr *MI, unsigned Op) {$/;"	f	namespace:llvm
isLegalAddImmediate	X86ISelLowering.cpp	/^bool X86TargetLowering::isLegalAddImmediate(int64_t Imm) const {$/;"	f	class:X86TargetLowering
isLegalAddressingMode	X86ISelLowering.cpp	/^bool X86TargetLowering::isLegalAddressingMode(const AddrMode &AM,$/;"	f	class:X86TargetLowering
isLegalICmpImmediate	X86ISelLowering.cpp	/^bool X86TargetLowering::isLegalICmpImmediate(int64_t Imm) const {$/;"	f	class:X86TargetLowering
isLive	X86FloatingPoint.cpp	/^    bool isLive(unsigned RegNo) const {$/;"	f	struct:__anon39::FPS	file:
isLoadFromStackSlot	X86InstrInfo.cpp	/^unsigned X86InstrInfo::isLoadFromStackSlot(const MachineInstr *MI,$/;"	f	class:X86InstrInfo
isLoadFromStackSlotPostFE	X86InstrInfo.cpp	/^unsigned X86InstrInfo::isLoadFromStackSlotPostFE(const MachineInstr *MI,$/;"	f	class:X86InstrInfo
isLoadIncOrDecStore	X86ISelDAGToDAG.cpp	/^static bool isLoadIncOrDecStore(StoreSDNode *StoreNode, unsigned Opc,$/;"	f	file:
isMOVDDUPMask	X86ISelLowering.cpp	/^static bool isMOVDDUPMask(ArrayRef<int> Mask, MVT VT) {$/;"	f	file:
isMOVDDUPYMask	X86ISelLowering.cpp	/^static bool isMOVDDUPYMask(ArrayRef<int> Mask, MVT VT, bool HasFp256) {$/;"	f	file:
isMOVHLPSMask	X86ISelLowering.cpp	/^static bool isMOVHLPSMask(ArrayRef<int> Mask, MVT VT) {$/;"	f	file:
isMOVHLPS_v_undef_Mask	X86ISelLowering.cpp	/^static bool isMOVHLPS_v_undef_Mask(ArrayRef<int> Mask, MVT VT) {$/;"	f	file:
isMOVLHPSMask	X86ISelLowering.cpp	/^static bool isMOVLHPSMask(ArrayRef<int> Mask, MVT VT) {$/;"	f	file:
isMOVLMask	X86ISelLowering.cpp	/^static bool isMOVLMask(ArrayRef<int> Mask, EVT VT) {$/;"	f	file:
isMOVLPMask	X86ISelLowering.cpp	/^static bool isMOVLPMask(ArrayRef<int> Mask, MVT VT) {$/;"	f	file:
isMOVSHDUPMask	X86ISelLowering.cpp	/^static bool isMOVSHDUPMask(ArrayRef<int> Mask, MVT VT,$/;"	f	file:
isMOVSLDUPMask	X86ISelLowering.cpp	/^static bool isMOVSLDUPMask(ArrayRef<int> Mask, MVT VT,$/;"	f	file:
isMem	AsmParser/X86AsmParser.cpp	/^  bool isMem() const { return Kind == Memory; }$/;"	f	struct:__anon2::X86Operand
isMem	X86InstrInfo.h	/^inline static bool isMem(const MachineInstr *MI, unsigned Op) {$/;"	f	namespace:llvm
isMem128	AsmParser/X86AsmParser.cpp	/^  bool isMem128() const {$/;"	f	struct:__anon2::X86Operand
isMem16	AsmParser/X86AsmParser.cpp	/^  bool isMem16() const {$/;"	f	struct:__anon2::X86Operand
isMem256	AsmParser/X86AsmParser.cpp	/^  bool isMem256() const {$/;"	f	struct:__anon2::X86Operand
isMem32	AsmParser/X86AsmParser.cpp	/^  bool isMem32() const {$/;"	f	struct:__anon2::X86Operand
isMem512	AsmParser/X86AsmParser.cpp	/^  bool isMem512() const {$/;"	f	struct:__anon2::X86Operand
isMem64	AsmParser/X86AsmParser.cpp	/^  bool isMem64() const {$/;"	f	struct:__anon2::X86Operand
isMem8	AsmParser/X86AsmParser.cpp	/^  bool isMem8() const {$/;"	f	struct:__anon2::X86Operand
isMem80	AsmParser/X86AsmParser.cpp	/^  bool isMem80() const {$/;"	f	struct:__anon2::X86Operand
isMemOffs16	AsmParser/X86AsmParser.cpp	/^  bool isMemOffs16() const {$/;"	f	struct:__anon2::X86Operand
isMemOffs32	AsmParser/X86AsmParser.cpp	/^  bool isMemOffs32() const {$/;"	f	struct:__anon2::X86Operand
isMemOffs64	AsmParser/X86AsmParser.cpp	/^  bool isMemOffs64() const {$/;"	f	struct:__anon2::X86Operand
isMemOffs8	AsmParser/X86AsmParser.cpp	/^  bool isMemOffs8() const {$/;"	f	struct:__anon2::X86Operand
isMemVX32	AsmParser/X86AsmParser.cpp	/^  bool isMemVX32() const {$/;"	f	struct:__anon2::X86Operand
isMemVX64	AsmParser/X86AsmParser.cpp	/^  bool isMemVX64() const {$/;"	f	struct:__anon2::X86Operand
isMemVY32	AsmParser/X86AsmParser.cpp	/^  bool isMemVY32() const {$/;"	f	struct:__anon2::X86Operand
isMemVY64	AsmParser/X86AsmParser.cpp	/^  bool isMemVY64() const {$/;"	f	struct:__anon2::X86Operand
isMemVZ32	AsmParser/X86AsmParser.cpp	/^  bool isMemVZ32() const {$/;"	f	struct:__anon2::X86Operand
isMemVZ64	AsmParser/X86AsmParser.cpp	/^  bool isMemVZ64() const {$/;"	f	struct:__anon2::X86Operand
isNarrowingProfitable	X86ISelLowering.cpp	/^bool X86TargetLowering::isNarrowingProfitable(EVT VT1, EVT VT2) const {$/;"	f	class:X86TargetLowering
isNoopAddrSpaceCast	X86ISelLowering.cpp	/^bool X86TargetLowering::isNoopAddrSpaceCast(unsigned SrcAS,$/;"	f	class:X86TargetLowering
isOSWindows	X86Subtarget.h	/^  bool isOSWindows() const { return TargetTriple.isOSWindows(); }$/;"	f	class:llvm::X86Subtarget
isOffsetOf	AsmParser/X86AsmParser.cpp	/^  bool isOffsetOf() const {$/;"	f	struct:__anon2::X86Operand
isOffsetSuitableForCodeModel	X86ISelLowering.cpp	/^bool X86::isOffsetSuitableForCodeModel(int64_t Offset, CodeModel::Model M,$/;"	f	class:X86
isPALIGNRMask	X86ISelLowering.cpp	/^static bool isPALIGNRMask(ArrayRef<int> Mask, MVT VT,$/;"	f	file:
isPICStyleGOT	X86Subtarget.h	/^  bool isPICStyleGOT() const { return PICStyle == PICStyles::GOT; }$/;"	f	class:llvm::X86Subtarget
isPICStyleRIPRel	X86Subtarget.h	/^  bool isPICStyleRIPRel() const { return PICStyle == PICStyles::RIPRel; }$/;"	f	class:llvm::X86Subtarget
isPICStyleSet	X86Subtarget.h	/^  bool isPICStyleSet() const { return PICStyle != PICStyles::None; }$/;"	f	class:llvm::X86Subtarget
isPICStyleStubAny	X86Subtarget.h	/^  bool isPICStyleStubAny() const {$/;"	f	class:llvm::X86Subtarget
isPICStyleStubNoDynamic	X86Subtarget.h	/^  bool isPICStyleStubNoDynamic() const {$/;"	f	class:llvm::X86Subtarget
isPICStyleStubPIC	X86Subtarget.h	/^  bool isPICStyleStubPIC() const {$/;"	f	class:llvm::X86Subtarget
isPSHUFDMask	X86ISelLowering.cpp	/^static bool isPSHUFDMask(ArrayRef<int> Mask, MVT VT) {$/;"	f	file:
isPSHUFHWMask	X86ISelLowering.cpp	/^static bool isPSHUFHWMask(ArrayRef<int> Mask, MVT VT, bool HasInt256) {$/;"	f	file:
isPSHUFLWMask	X86ISelLowering.cpp	/^static bool isPSHUFLWMask(ArrayRef<int> Mask, MVT VT, bool HasInt256) {$/;"	f	file:
isParsingIntelSyntax	AsmParser/X86AsmParser.cpp	/^  bool isParsingIntelSyntax() {$/;"	f	class:__anon1::X86AsmParser	file:
isPermImmMask	X86ISelLowering.cpp	/^static bool isPermImmMask(ArrayRef<int> Mask, MVT VT, unsigned& Imm8) {$/;"	f	file:
isPrefixAtLocation	Disassembler/X86DisassemblerDecoder.c	/^static BOOL isPrefixAtLocation(struct InternalInstruction* insn,$/;"	f	file:
isRIPRelative	X86ISelDAGToDAG.cpp	/^    bool isRIPRelative() const {$/;"	f	struct:__anon47::X86ISelAddressMode
isReallyTriviallyReMaterializable	X86InstrInfo.cpp	/^X86InstrInfo::isReallyTriviallyReMaterializable(const MachineInstr *MI,$/;"	f	class:X86InstrInfo
isRedundantFlagInstr	X86InstrInfo.cpp	/^inline static bool isRedundantFlagInstr(MachineInstr *FlagI, unsigned SrcReg,$/;"	f	file:
isReg	AsmParser/X86AsmParser.cpp	/^  bool isReg() const { return Kind == Register; }$/;"	f	struct:__anon2::X86Operand
isSHLDSlow	X86Subtarget.h	/^  bool isSHLDSlow() const { return IsSHLDSlow; }$/;"	f	class:llvm::X86Subtarget
isSHUFPMask	X86ISelLowering.cpp	/^static bool isSHUFPMask(ArrayRef<int> Mask, MVT VT, bool Commuted = false) {$/;"	f	file:
isSafeMemOpType	X86ISelLowering.cpp	/^bool X86TargetLowering::isSafeMemOpType(MVT VT) const {$/;"	f	class:X86TargetLowering
isSafeToClobberEFLAGS	X86InstrInfo.cpp	/^static bool isSafeToClobberEFLAGS(MachineBasicBlock &MBB,$/;"	f	file:
isSafeToMoveRegClassDefs	X86InstrInfo.cpp	/^isSafeToMoveRegClassDefs(const TargetRegisterClass *RC) const {$/;"	f	class:X86InstrInfo
isScalarFPTypeInSSEReg	X86FastISel.cpp	/^  bool isScalarFPTypeInSSEReg(EVT VT) const {$/;"	f	class:__anon37::X86FastISel	file:
isScalarFPTypeInSSEReg	X86ISelLowering.h	/^    bool isScalarFPTypeInSSEReg(EVT VT) const {$/;"	f	class:llvm::X86TargetLowering
isScalarLoadToVector	X86ISelLowering.cpp	/^static bool isScalarLoadToVector(SDNode *N, LoadSDNode **LD = NULL) {$/;"	f	file:
isScale	X86InstrInfo.h	/^inline static bool isScale(const MachineOperand &MO) {$/;"	f	namespace:llvm
isScratchReg	X86FloatingPoint.cpp	/^    static bool isScratchReg(unsigned RegNo) {$/;"	f	struct:__anon39::FPS	file:
isSectionAtomizable	MCTargetDesc/X86AsmBackend.cpp	/^  virtual bool isSectionAtomizable(const MCSection &Section) const {$/;"	f	class:__anon23::DarwinX86_64AsmBackend
isSequentialOrUndefInRange	X86ISelLowering.cpp	/^static bool isSequentialOrUndefInRange(ArrayRef<int> Mask,$/;"	f	file:
isShuffleHigh128VectorInsertLow	X86ISelLowering.cpp	/^static bool isShuffleHigh128VectorInsertLow(ShuffleVectorSDNode *SVOp) {$/;"	f	file:
isShuffleLow128VectorInsertHigh	X86ISelLowering.cpp	/^static bool isShuffleLow128VectorInsertHigh(ShuffleVectorSDNode *SVOp) {$/;"	f	file:
isShuffleMaskConsecutive	X86ISelLowering.cpp	/^bool isShuffleMaskConsecutive(ShuffleVectorSDNode *SVOp,$/;"	f	file:
isShuffleMaskLegal	X86ISelLowering.cpp	/^X86TargetLowering::isShuffleMaskLegal(const SmallVectorImpl<int> &M,$/;"	f	class:X86TargetLowering
isSplatVector	X86ISelLowering.cpp	/^static bool isSplatVector(SDNode *N) {$/;"	f	file:
isSrcIdx	AsmParser/X86AsmParser.cpp	/^  bool isSrcIdx() const {$/;"	f	struct:__anon2::X86Operand
isSrcIdx16	AsmParser/X86AsmParser.cpp	/^  bool isSrcIdx16() const {$/;"	f	struct:__anon2::X86Operand
isSrcIdx32	AsmParser/X86AsmParser.cpp	/^  bool isSrcIdx32() const {$/;"	f	struct:__anon2::X86Operand
isSrcIdx64	AsmParser/X86AsmParser.cpp	/^  bool isSrcIdx64() const {$/;"	f	struct:__anon2::X86Operand
isSrcIdx8	AsmParser/X86AsmParser.cpp	/^  bool isSrcIdx8() const {$/;"	f	struct:__anon2::X86Operand
isStoreToStackSlot	X86InstrInfo.cpp	/^unsigned X86InstrInfo::isStoreToStackSlot(const MachineInstr *MI,$/;"	f	class:X86InstrInfo
isStoreToStackSlotPostFE	X86InstrInfo.cpp	/^unsigned X86InstrInfo::isStoreToStackSlotPostFE(const MachineInstr *MI,$/;"	f	class:X86InstrInfo
isTarget64BitILP32	X86Subtarget.h	/^  bool isTarget64BitILP32() const {$/;"	f	class:llvm::X86Subtarget
isTarget64BitLP64	X86Subtarget.h	/^  bool isTarget64BitLP64() const {$/;"	f	class:llvm::X86Subtarget
isTargetCOFF	X86Subtarget.h	/^  bool isTargetCOFF() const { return TargetTriple.isOSBinFormatCOFF(); }$/;"	f	class:llvm::X86Subtarget
isTargetCygMing	X86Subtarget.h	/^  bool isTargetCygMing() const { return TargetTriple.isOSCygMing(); }$/;"	f	class:llvm::X86Subtarget
isTargetCygwin	X86Subtarget.h	/^  bool isTargetCygwin() const { return TargetTriple.getOS() == Triple::Cygwin; }$/;"	f	class:llvm::X86Subtarget
isTargetDarwin	X86Subtarget.h	/^  bool isTargetDarwin() const { return TargetTriple.isOSDarwin(); }$/;"	f	class:llvm::X86Subtarget
isTargetELF	X86Subtarget.h	/^  bool isTargetELF() const { return TargetTriple.isOSBinFormatELF(); }$/;"	f	class:llvm::X86Subtarget
isTargetFTOL	X86ISelLowering.h	/^    bool isTargetFTOL() const {$/;"	f	class:llvm::X86TargetLowering
isTargetFreeBSD	X86Subtarget.h	/^  bool isTargetFreeBSD() const {$/;"	f	class:llvm::X86Subtarget
isTargetLinux	X86Subtarget.h	/^  bool isTargetLinux() const { return TargetTriple.isOSLinux(); }$/;"	f	class:llvm::X86Subtarget
isTargetMacho	X86Subtarget.h	/^  bool isTargetMacho() const { return TargetTriple.isOSBinFormatMachO(); }$/;"	f	class:llvm::X86Subtarget
isTargetMingw	X86Subtarget.h	/^  bool isTargetMingw() const { return TargetTriple.getOS() == Triple::MinGW32; }$/;"	f	class:llvm::X86Subtarget
isTargetNaCl	X86Subtarget.h	/^  bool isTargetNaCl() const { return TargetTriple.isOSNaCl(); }$/;"	f	class:llvm::X86Subtarget
isTargetNaCl32	X86Subtarget.h	/^  bool isTargetNaCl32() const { return isTargetNaCl() && !is64Bit(); }$/;"	f	class:llvm::X86Subtarget
isTargetNaCl64	X86Subtarget.h	/^  bool isTargetNaCl64() const { return isTargetNaCl() && is64Bit(); }$/;"	f	class:llvm::X86Subtarget
isTargetShuffle	X86ISelLowering.cpp	/^static bool isTargetShuffle(unsigned Opcode) {$/;"	f	file:
isTargetSolaris	X86Subtarget.h	/^  bool isTargetSolaris() const {$/;"	f	class:llvm::X86Subtarget
isTargetWin32	X86Subtarget.h	/^  bool isTargetWin32() const {$/;"	f	class:llvm::X86Subtarget
isTargetWin64	X86Subtarget.h	/^  bool isTargetWin64() const {$/;"	f	class:llvm::X86Subtarget
isTargetWindows	X86Subtarget.h	/^  bool isTargetWindows() const { return TargetTriple.getOS() == Triple::Win32; }$/;"	f	class:llvm::X86Subtarget
isToken	AsmParser/X86AsmParser.cpp	/^  bool isToken() const {return Kind == Token; }$/;"	f	struct:__anon2::X86Operand
isTruncWithZeroHighBitsInput	X86ISelLowering.cpp	/^static bool isTruncWithZeroHighBitsInput(SDValue V, SelectionDAG &DAG) {$/;"	f	file:
isTruncateFree	X86ISelLowering.cpp	/^bool X86TargetLowering::isTruncateFree(EVT VT1, EVT VT2) const {$/;"	f	class:X86TargetLowering
isTruncateFree	X86ISelLowering.cpp	/^bool X86TargetLowering::isTruncateFree(Type *Ty1, Type *Ty2) const {$/;"	f	class:X86TargetLowering
isTruncatedShiftCountForLEA	X86InstrInfo.cpp	/^inline static bool isTruncatedShiftCountForLEA(unsigned ShAmt) {$/;"	f	file:
isTypeDesirableForOp	X86ISelLowering.cpp	/^bool X86TargetLowering::isTypeDesirableForOp(unsigned Opc, EVT VT) const {$/;"	f	class:X86TargetLowering
isTypeLegal	X86FastISel.cpp	/^bool X86FastISel::isTypeLegal(Type *Ty, MVT &VT, bool AllowI1) {$/;"	f	class:X86FastISel
isUNPCKHMask	X86ISelLowering.cpp	/^static bool isUNPCKHMask(ArrayRef<int> Mask, MVT VT,$/;"	f	file:
isUNPCKH_v_undef_Mask	X86ISelLowering.cpp	/^static bool isUNPCKH_v_undef_Mask(ArrayRef<int> Mask, MVT VT, bool HasInt256) {$/;"	f	file:
isUNPCKLMask	X86ISelLowering.cpp	/^static bool isUNPCKLMask(ArrayRef<int> Mask, MVT VT,$/;"	f	file:
isUNPCKL_v_undef_Mask	X86ISelLowering.cpp	/^static bool isUNPCKL_v_undef_Mask(ArrayRef<int> Mask, MVT VT, bool HasInt256) {$/;"	f	file:
isUnalignedMemAccessFast	X86Subtarget.h	/^  bool isUnalignedMemAccessFast() const { return IsUAMemFast; }$/;"	f	class:llvm::X86Subtarget
isUndefOrEqual	X86ISelLowering.cpp	/^static bool isUndefOrEqual(int Val, int CmpVal) {$/;"	f	file:
isUndefOrInRange	X86ISelLowering.cpp	/^static bool isUndefOrInRange(int Val, int Low, int Hi) {$/;"	f	file:
isUnpredicatedTerminator	X86InstrInfo.cpp	/^bool X86InstrInfo::isUnpredicatedTerminator(const MachineInstr *MI) const {$/;"	f	class:X86InstrInfo
isUsedByReturnOnly	X86ISelLowering.cpp	/^bool X86TargetLowering::isUsedByReturnOnly(SDNode *N, SDValue &Chain) const {$/;"	f	class:X86TargetLowering
isVEXTRACT128Index	X86ISelLowering.cpp	/^bool X86::isVEXTRACT128Index(SDNode *N) {$/;"	f	class:X86
isVEXTRACT256Index	X86ISelLowering.cpp	/^bool X86::isVEXTRACT256Index(SDNode *N) {$/;"	f	class:X86
isVEXTRACTIndex	X86ISelLowering.cpp	/^static bool isVEXTRACTIndex(SDNode *N, unsigned vecWidth) {$/;"	f	file:
isVINSERT128Index	X86ISelLowering.cpp	/^bool X86::isVINSERT128Index(SDNode *N) {$/;"	f	class:X86
isVINSERT256Index	X86ISelLowering.cpp	/^bool X86::isVINSERT256Index(SDNode *N) {$/;"	f	class:X86
isVINSERTIndex	X86ISelLowering.cpp	/^static bool isVINSERTIndex(SDNode *N, unsigned vecWidth) {$/;"	f	file:
isVPERM2X128Mask	X86ISelLowering.cpp	/^static bool isVPERM2X128Mask(ArrayRef<int> Mask, MVT VT, bool HasFp256) {$/;"	f	file:
isVPERMILPMask	X86ISelLowering.cpp	/^static bool isVPERMILPMask(ArrayRef<int> Mask, MVT VT) {$/;"	f	file:
isValidEndState	AsmParser/X86AsmParser.cpp	/^    bool isValidEndState() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
isVectorClearMaskLegal	X86ISelLowering.cpp	/^X86TargetLowering::isVectorClearMaskLegal(const SmallVectorImpl<int> &Mask,$/;"	f	class:X86TargetLowering
isVectorShift	X86ISelLowering.cpp	/^static bool isVectorShift(ShuffleVectorSDNode *SVOp, SelectionDAG &DAG,$/;"	f	file:
isVectorShiftByScalarCheap	X86ISelLowering.cpp	/^bool X86TargetLowering::isVectorShiftByScalarCheap(Type *Ty) const {$/;"	f	class:X86TargetLowering
isVectorShiftLeft	X86ISelLowering.cpp	/^static bool isVectorShiftLeft(ShuffleVectorSDNode *SVOp, SelectionDAG &DAG,$/;"	f	file:
isVectorShiftRight	X86ISelLowering.cpp	/^static bool isVectorShiftRight(ShuffleVectorSDNode *SVOp, SelectionDAG &DAG,$/;"	f	file:
isX86CCUnsigned	X86ISelLowering.cpp	/^static bool isX86CCUnsigned(unsigned X86CC) {$/;"	f	file:
isX86LogicalCmp	X86ISelLowering.cpp	/^static bool isX86LogicalCmp(SDValue Op) {$/;"	f	file:
isX86_64ExtendedReg	MCTargetDesc/X86BaseInfo.h	/^  inline bool isX86_64ExtendedReg(unsigned RegNo) {$/;"	f	namespace:llvm::X86II
isX86_64ExtendedReg	X86InstrInfo.h	/^  static bool isX86_64ExtendedReg(const MachineOperand &MO) {$/;"	f	class:llvm::X86InstrInfo
isX86_64NonExtLowByteReg	MCTargetDesc/X86BaseInfo.h	/^  inline bool isX86_64NonExtLowByteReg(unsigned reg) {$/;"	f	namespace:llvm::X86II
isXor1OfSetCC	X86ISelLowering.cpp	/^static bool isXor1OfSetCC(SDValue Op) {$/;"	f	file:
isYmmReg	X86VZeroUpper.cpp	/^static bool isYmmReg(unsigned Reg) {$/;"	f	file:
isZExtFree	X86ISelLowering.cpp	/^bool X86TargetLowering::isZExtFree(EVT VT1, EVT VT2) const {$/;"	f	class:X86TargetLowering
isZExtFree	X86ISelLowering.cpp	/^bool X86TargetLowering::isZExtFree(SDValue Val, EVT VT2) const {$/;"	f	class:X86TargetLowering
isZExtFree	X86ISelLowering.cpp	/^bool X86TargetLowering::isZExtFree(Type *Ty1, Type *Ty2) const {$/;"	f	class:X86TargetLowering
isZero	X86ISelLowering.cpp	/^static bool isZero(SDValue V) {$/;"	f	file:
isZeroNode	X86ISelLowering.cpp	/^bool X86::isZeroNode(SDValue Elt) {$/;"	f	class:X86
isZeroShuffle	X86ISelLowering.cpp	/^static bool isZeroShuffle(ShuffleVectorSDNode *N) {$/;"	f	file:
kSplitStackAvailable	X86FrameLowering.cpp	/^static const uint64_t kSplitStackAvailable = 256;$/;"	v	file:
l2FromEVEX4of4	Disassembler/X86DisassemblerDecoder.h	57;"	d
lFromEVEX4of4	Disassembler/X86DisassemblerDecoder.h	58;"	d
lFromVEX2of2	Disassembler/X86DisassemblerDecoder.h	74;"	d
lFromVEX3of3	Disassembler/X86DisassemblerDecoder.h	69;"	d
lFromXOP3of3	Disassembler/X86DisassemblerDecoder.h	83;"	d
length	Disassembler/X86DisassemblerDecoder.h	/^  size_t length;$/;"	m	struct:InternalInstruction
llvm	Disassembler/X86Disassembler.cpp	/^namespace llvm {  $/;"	n	file:
llvm	Disassembler/X86Disassembler.h	/^namespace llvm {$/;"	n
llvm	InstPrinter/X86ATTInstPrinter.h	/^namespace llvm {$/;"	n
llvm	InstPrinter/X86InstComments.h	/^namespace llvm {$/;"	n
llvm	InstPrinter/X86IntelInstPrinter.h	/^namespace llvm {$/;"	n
llvm	MCTargetDesc/X86BaseInfo.h	/^namespace llvm {$/;"	n
llvm	MCTargetDesc/X86FixupKinds.h	/^namespace llvm {$/;"	n
llvm	MCTargetDesc/X86MCAsmInfo.h	/^namespace llvm {$/;"	n
llvm	MCTargetDesc/X86MCTargetDesc.h	/^namespace llvm {$/;"	n
llvm	MCTargetDesc/X86WinCOFFObjectWriter.cpp	/^namespace llvm {$/;"	n	file:
llvm	Utils/X86ShuffleDecode.cpp	/^namespace llvm {$/;"	n	file:
llvm	Utils/X86ShuffleDecode.h	/^namespace llvm {$/;"	n
llvm	X86.h	/^namespace llvm {$/;"	n
llvm	X86AsmPrinter.h	/^namespace llvm {$/;"	n
llvm	X86COFFMachineModuleInfo.h	/^namespace llvm {$/;"	n
llvm	X86CallingConv.h	/^namespace llvm {$/;"	n
llvm	X86FastISel.cpp	/^namespace llvm {$/;"	n	file:
llvm	X86FrameLowering.h	/^namespace llvm {$/;"	n
llvm	X86ISelLowering.h	/^namespace llvm {$/;"	n
llvm	X86InstrBuilder.h	/^namespace llvm {$/;"	n
llvm	X86InstrInfo.h	/^namespace llvm {$/;"	n
llvm	X86JITInfo.h	/^namespace llvm {$/;"	n
llvm	X86MachineFunctionInfo.h	/^namespace llvm {$/;"	n
llvm	X86RegisterInfo.cpp	/^namespace llvm {$/;"	n	file:
llvm	X86RegisterInfo.h	/^namespace llvm {$/;"	n
llvm	X86Relocations.h	/^namespace llvm {$/;"	n
llvm	X86SelectionDAGInfo.h	/^namespace llvm {$/;"	n
llvm	X86Subtarget.h	/^namespace llvm {$/;"	n
llvm	X86TargetMachine.h	/^namespace llvm {$/;"	n
llvm	X86TargetObjectFile.h	/^namespace llvm {$/;"	n
llvm	X86TargetTransformInfo.cpp	/^namespace llvm {$/;"	n	file:
loadRegFromAddr	X86InstrInfo.cpp	/^void X86InstrInfo::loadRegFromAddr(MachineFunction &MF, unsigned DestReg,$/;"	f	class:X86InstrInfo
loadRegFromStackSlot	X86InstrInfo.cpp	/^void X86InstrInfo::loadRegFromStackSlot(MachineBasicBlock &MBB,$/;"	f	class:X86InstrInfo
logger	Disassembler/X86Disassembler.cpp	/^static void logger(void* arg, const char* log) {$/;"	f	file:
lookAtByte	Disassembler/X86DisassemblerDecoder.c	/^static int lookAtByte(struct InternalInstruction* insn, uint8_t* byte) {$/;"	f	file:
lookup	X86InstrInfo.cpp	/^static const uint16_t *lookup(unsigned opcode, unsigned domain) {$/;"	f	file:
lookupAVX2	X86InstrInfo.cpp	/^static const uint16_t *lookupAVX2(unsigned opcode, unsigned domain) {$/;"	f	file:
lowerEH_SJLJ_LONGJMP	X86ISelLowering.cpp	/^SDValue X86TargetLowering::lowerEH_SJLJ_LONGJMP(SDValue Op,$/;"	f	class:X86TargetLowering
lowerEH_SJLJ_SETJMP	X86ISelLowering.cpp	/^SDValue X86TargetLowering::lowerEH_SJLJ_SETJMP(SDValue Op,$/;"	f	class:X86TargetLowering
lowerUINT_TO_FP_vec	X86ISelLowering.cpp	/^SDValue X86TargetLowering::lowerUINT_TO_FP_vec(SDValue Op,$/;"	f	class:X86TargetLowering
matchAsm	X86ISelLowering.cpp	/^  const VariadicFunction1<bool, StringRef, StringRef, matchAsmImpl> matchAsm={};$/;"	m	namespace:__anon50	file:
matchAsmImpl	X86ISelLowering.cpp	/^  bool matchAsmImpl(StringRef s, ArrayRef<const StringRef *> args) {$/;"	f	namespace:__anon50
matchIntegerMINMAX	X86ISelLowering.cpp	/^matchIntegerMINMAX(SDValue Cond, EVT VT, SDValue LHS, SDValue RHS,$/;"	f	file:
mayBeEmittedAsTailCall	X86ISelLowering.cpp	/^bool X86TargetLowering::mayBeEmittedAsTailCall(CallInst *CI) const {$/;"	f	class:X86TargetLowering
mayNeedRelaxation	MCTargetDesc/X86AsmBackend.cpp	/^bool X86AsmBackend::mayNeedRelaxation(const MCInst &Inst) const {$/;"	f	class:X86AsmBackend
mergeSPUpdates	X86FrameLowering.cpp	/^static int mergeSPUpdates(MachineBasicBlock &MBB,$/;"	f	file:
mergeSPUpdatesDown	X86FrameLowering.cpp	/^void mergeSPUpdatesDown(MachineBasicBlock &MBB,$/;"	f	file:
mergeSPUpdatesUp	X86FrameLowering.cpp	/^void mergeSPUpdatesUp(MachineBasicBlock &MBB, MachineBasicBlock::iterator &MBBI,$/;"	f	file:
mmFromEVEX2of4	Disassembler/X86DisassemblerDecoder.h	52;"	d
mmmmmFromVEX2of3	Disassembler/X86DisassemblerDecoder.h	66;"	d
mmmmmFromXOP2of3	Disassembler/X86DisassemblerDecoder.h	80;"	d
modFromModRM	Disassembler/X86DisassemblerDecoder.h	37;"	d
modRM	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t                       modRM;$/;"	m	struct:InternalInstruction
modRMDecisions	Disassembler/X86DisassemblerDecoderCommon.h	/^  struct ModRMDecision modRMDecisions[256];$/;"	m	struct:OpcodeDecision	typeref:struct:OpcodeDecision::ModRMDecision
modRMExtension	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t modRMExtension;$/;"	m	struct:InternalInstruction
modRMRequired	Disassembler/X86DisassemblerDecoder.c	/^static int modRMRequired(OpcodeType type,$/;"	f	file:
mode	Disassembler/X86DisassemblerDecoder.h	/^  DisassemblerMode mode;$/;"	m	struct:InternalInstruction
modrm_type	Disassembler/X86DisassemblerDecoderCommon.h	/^  uint8_t     modrm_type;$/;"	m	struct:ModRMDecision
moveToTop	X86FloatingPoint.cpp	/^    void moveToTop(unsigned RegNo, MachineBasicBlock::iterator I) {$/;"	f	struct:__anon39::FPS	file:
necessaryPrefixLocation	Disassembler/X86DisassemblerDecoder.h	/^  uint64_t necessaryPrefixLocation;$/;"	m	struct:InternalInstruction
needAddressOf	AsmParser/X86AsmParser.cpp	/^  bool needAddressOf() const {$/;"	f	struct:__anon2::X86Operand
needsStackRealignment	X86RegisterInfo.cpp	/^bool X86RegisterInfo::needsStackRealignment(const MachineFunction &MF) const {$/;"	f	class:X86RegisterInfo
numImmediatesConsumed	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t                       numImmediatesConsumed;$/;"	m	struct:InternalInstruction
numImmediatesTranslated	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t                       numImmediatesTranslated;$/;"	m	struct:InternalInstruction
onAnd	AsmParser/X86AsmParser.cpp	/^    void onAnd() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onDivide	AsmParser/X86AsmParser.cpp	/^    void onDivide() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onIdentifierExpr	AsmParser/X86AsmParser.cpp	/^    void onIdentifierExpr(const MCExpr *SymRef, StringRef SymRefName) {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onInteger	AsmParser/X86AsmParser.cpp	/^    bool onInteger(int64_t TmpInt, StringRef &ErrMsg) {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onLBrac	AsmParser/X86AsmParser.cpp	/^    void onLBrac() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onLParen	AsmParser/X86AsmParser.cpp	/^    void onLParen() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onLShift	AsmParser/X86AsmParser.cpp	/^    void onLShift() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onMinus	AsmParser/X86AsmParser.cpp	/^    void onMinus() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onOr	AsmParser/X86AsmParser.cpp	/^    void onOr() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onPlus	AsmParser/X86AsmParser.cpp	/^    void onPlus() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onRBrac	AsmParser/X86AsmParser.cpp	/^    void onRBrac() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onRParen	AsmParser/X86AsmParser.cpp	/^    void onRParen() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onRShift	AsmParser/X86AsmParser.cpp	/^    void onRShift() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onRegister	AsmParser/X86AsmParser.cpp	/^    void onRegister(unsigned Reg) {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
onStar	AsmParser/X86AsmParser.cpp	/^    void onStar() {$/;"	f	class:__anon1::X86AsmParser::IntelExprStateMachine
opcode	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t opcode;$/;"	m	struct:InternalInstruction
opcodeDecisions	Disassembler/X86DisassemblerDecoderCommon.h	/^  struct OpcodeDecision opcodeDecisions[IC_max];$/;"	m	struct:ContextDecision	typeref:struct:ContextDecision::OpcodeDecision
opcodeRegister	Disassembler/X86DisassemblerDecoder.h	/^  Reg                           opcodeRegister;$/;"	m	struct:InternalInstruction
opcodeType	Disassembler/X86DisassemblerDecoder.h	/^  OpcodeType opcodeType;$/;"	m	struct:InternalInstruction
operands	Disassembler/X86DisassemblerDecoder.h	/^  const struct OperandSpecifier *operands;$/;"	m	struct:InternalInstruction	typeref:struct:InternalInstruction::OperandSpecifier
operator <	X86FloatingPoint.cpp	/^    bool operator<(const TableEntry &TE) const { return from < TE.from; }$/;"	f	struct:__anon41::TableEntry
operator <	X86FloatingPoint.cpp	/^    friend bool LLVM_ATTRIBUTE_UNUSED operator<(unsigned V,$/;"	f	struct:__anon41::TableEntry
operator <	X86FloatingPoint.cpp	/^    friend bool operator<(const TableEntry &TE, unsigned V) {$/;"	f	struct:__anon41::TableEntry
optimizeCompareInstr	X86InstrInfo.cpp	/^optimizeCompareInstr(MachineInstr *CmpInstr, unsigned SrcReg, unsigned SrcReg2,$/;"	f	class:X86InstrInfo
optimizeLoadInstr	X86InstrInfo.cpp	/^optimizeLoadInstr(MachineInstr *MI, const MachineRegisterInfo *MRI,$/;"	f	class:X86InstrInfo
padShortFunctions	X86Subtarget.h	/^  bool padShortFunctions() const { return PadShortFunctions; }$/;"	f	class:llvm::X86Subtarget
performIntegerAbsCombine	X86ISelLowering.cpp	/^static SDValue performIntegerAbsCombine(SDNode *N, SelectionDAG &DAG) {$/;"	f	file:
performShiftToAllZeros	X86ISelLowering.cpp	/^static SDValue performShiftToAllZeros(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
performVZEXTCombine	X86ISelLowering.cpp	/^static SDValue performVZEXTCombine(SDNode *N, SelectionDAG &DAG,$/;"	f	file:
popOperand	AsmParser/X86AsmParser.cpp	/^    int64_t popOperand() {$/;"	f	class:__anon1::X86AsmParser::InfixCalculator
popOperator	AsmParser/X86AsmParser.cpp	/^    void popOperator() { InfixOperatorStack.pop_back(); }$/;"	f	class:__anon1::X86AsmParser::InfixCalculator
popStackAfter	X86FloatingPoint.cpp	/^void FPS::popStackAfter(MachineBasicBlock::iterator &I) {$/;"	f	class:FPS
postRAConvertToLEA	X86FixupLEAs.cpp	/^FixupLEAPass::postRAConvertToLEA(MachineFunction::iterator &MFI,$/;"	f	class:FixupLEAPass
postRAScheduler	X86Subtarget.h	/^  bool postRAScheduler() const { return PostRAScheduler; }$/;"	f	class:llvm::X86Subtarget
ppFromEVEX3of4	Disassembler/X86DisassemblerDecoder.h	55;"	d
ppFromVEX2of2	Disassembler/X86DisassemblerDecoder.h	75;"	d
ppFromVEX3of3	Disassembler/X86DisassemblerDecoder.h	70;"	d
ppFromXOP3of3	Disassembler/X86DisassemblerDecoder.h	84;"	d
prefixLocations	Disassembler/X86DisassemblerDecoder.h	/^  uint64_t prefixLocations[0x100];$/;"	m	struct:InternalInstruction
prefixPresent	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t prefixPresent[0x100];$/;"	m	struct:InternalInstruction
print	AsmParser/X86AsmParser.cpp	/^  virtual void print(raw_ostream &OS) const {}$/;"	f	struct:__anon2::X86Operand
printAVXCC	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printAVXCC(const MCInst *MI, unsigned Op,$/;"	f	class:X86ATTInstPrinter
printAVXCC	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printAVXCC(const MCInst *MI, unsigned Op,$/;"	f	class:X86IntelInstPrinter
printAsmMRegister	X86AsmPrinter.cpp	/^static bool printAsmMRegister(X86AsmPrinter &P, const MachineOperand &MO,$/;"	f	file:
printDstIdx	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printDstIdx(const MCInst *MI, unsigned Op,$/;"	f	class:X86ATTInstPrinter
printDstIdx	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printDstIdx(const MCInst *MI, unsigned Op,$/;"	f	class:X86IntelInstPrinter
printDstIdx16	InstPrinter/X86ATTInstPrinter.h	/^  void printDstIdx16(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printDstIdx16	InstPrinter/X86IntelInstPrinter.h	/^  void printDstIdx16(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printDstIdx32	InstPrinter/X86ATTInstPrinter.h	/^  void printDstIdx32(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printDstIdx32	InstPrinter/X86IntelInstPrinter.h	/^  void printDstIdx32(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printDstIdx64	InstPrinter/X86ATTInstPrinter.h	/^  void printDstIdx64(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printDstIdx64	InstPrinter/X86IntelInstPrinter.h	/^  void printDstIdx64(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printDstIdx8	InstPrinter/X86ATTInstPrinter.h	/^  void printDstIdx8(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printDstIdx8	InstPrinter/X86IntelInstPrinter.h	/^  void printDstIdx8(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printInst	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printInst(const MCInst *MI, raw_ostream &OS,$/;"	f	class:X86ATTInstPrinter
printInst	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printInst(const MCInst *MI, raw_ostream &OS,$/;"	f	class:X86IntelInstPrinter
printIntelMemReference	X86AsmPrinter.cpp	/^static void printIntelMemReference(X86AsmPrinter &P, const MachineInstr *MI,$/;"	f	file:
printLeaMemReference	X86AsmPrinter.cpp	/^static void printLeaMemReference(X86AsmPrinter &P, const MachineInstr *MI,$/;"	f	file:
printMemOffs16	InstPrinter/X86ATTInstPrinter.h	/^  void printMemOffs16(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printMemOffs16	InstPrinter/X86IntelInstPrinter.h	/^  void printMemOffs16(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printMemOffs32	InstPrinter/X86ATTInstPrinter.h	/^  void printMemOffs32(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printMemOffs32	InstPrinter/X86IntelInstPrinter.h	/^  void printMemOffs32(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printMemOffs64	InstPrinter/X86ATTInstPrinter.h	/^  void printMemOffs64(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printMemOffs64	InstPrinter/X86IntelInstPrinter.h	/^  void printMemOffs64(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printMemOffs8	InstPrinter/X86ATTInstPrinter.h	/^  void printMemOffs8(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printMemOffs8	InstPrinter/X86IntelInstPrinter.h	/^  void printMemOffs8(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printMemOffset	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printMemOffset(const MCInst *MI, unsigned Op,$/;"	f	class:X86ATTInstPrinter
printMemOffset	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printMemOffset(const MCInst *MI, unsigned Op,$/;"	f	class:X86IntelInstPrinter
printMemReference	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printMemReference(const MCInst *MI, unsigned Op,$/;"	f	class:X86ATTInstPrinter
printMemReference	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printMemReference(const MCInst *MI, unsigned Op,$/;"	f	class:X86IntelInstPrinter
printMemReference	X86AsmPrinter.cpp	/^static void printMemReference(X86AsmPrinter &P, const MachineInstr *MI,$/;"	f	file:
printOperand	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printOperand(const MCInst *MI, unsigned OpNo,$/;"	f	class:X86ATTInstPrinter
printOperand	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printOperand(const MCInst *MI, unsigned OpNo,$/;"	f	class:X86IntelInstPrinter
printOperand	X86AsmPrinter.cpp	/^static void printOperand(X86AsmPrinter &P, const MachineInstr *MI,$/;"	f	file:
printPCRelImm	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printPCRelImm(const MCInst *MI, unsigned OpNo,$/;"	f	class:X86ATTInstPrinter
printPCRelImm	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printPCRelImm(const MCInst *MI, unsigned OpNo,$/;"	f	class:X86IntelInstPrinter
printPCRelImm	X86AsmPrinter.cpp	/^static void printPCRelImm(X86AsmPrinter &P, const MachineInstr *MI,$/;"	f	file:
printRegName	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printRegName(raw_ostream &OS,$/;"	f	class:X86ATTInstPrinter
printRegName	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printRegName(raw_ostream &OS, unsigned RegNo) const {$/;"	f	class:X86IntelInstPrinter
printRoundingControl	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printRoundingControl(const MCInst *MI, unsigned Op,$/;"	f	class:X86ATTInstPrinter
printRoundingControl	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printRoundingControl(const MCInst *MI, unsigned Op,$/;"	f	class:X86IntelInstPrinter
printSSECC	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printSSECC(const MCInst *MI, unsigned Op,$/;"	f	class:X86ATTInstPrinter
printSSECC	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printSSECC(const MCInst *MI, unsigned Op,$/;"	f	class:X86IntelInstPrinter
printSrcIdx	InstPrinter/X86ATTInstPrinter.cpp	/^void X86ATTInstPrinter::printSrcIdx(const MCInst *MI, unsigned Op,$/;"	f	class:X86ATTInstPrinter
printSrcIdx	InstPrinter/X86IntelInstPrinter.cpp	/^void X86IntelInstPrinter::printSrcIdx(const MCInst *MI, unsigned Op,$/;"	f	class:X86IntelInstPrinter
printSrcIdx16	InstPrinter/X86ATTInstPrinter.h	/^  void printSrcIdx16(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printSrcIdx16	InstPrinter/X86IntelInstPrinter.h	/^  void printSrcIdx16(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printSrcIdx32	InstPrinter/X86ATTInstPrinter.h	/^  void printSrcIdx32(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printSrcIdx32	InstPrinter/X86IntelInstPrinter.h	/^  void printSrcIdx32(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printSrcIdx64	InstPrinter/X86ATTInstPrinter.h	/^  void printSrcIdx64(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printSrcIdx64	InstPrinter/X86IntelInstPrinter.h	/^  void printSrcIdx64(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printSrcIdx8	InstPrinter/X86ATTInstPrinter.h	/^  void printSrcIdx8(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printSrcIdx8	InstPrinter/X86IntelInstPrinter.h	/^  void printSrcIdx8(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printSymbolOperand	X86AsmPrinter.cpp	/^static void printSymbolOperand(X86AsmPrinter &P, const MachineOperand &MO,$/;"	f	file:
printf128mem	InstPrinter/X86ATTInstPrinter.h	/^  void printf128mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printf128mem	InstPrinter/X86IntelInstPrinter.h	/^  void printf128mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printf256mem	InstPrinter/X86ATTInstPrinter.h	/^  void printf256mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printf256mem	InstPrinter/X86IntelInstPrinter.h	/^  void printf256mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printf32mem	InstPrinter/X86ATTInstPrinter.h	/^  void printf32mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printf32mem	InstPrinter/X86IntelInstPrinter.h	/^  void printf32mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printf512mem	InstPrinter/X86ATTInstPrinter.h	/^  void printf512mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printf512mem	InstPrinter/X86IntelInstPrinter.h	/^  void printf512mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printf64mem	InstPrinter/X86ATTInstPrinter.h	/^  void printf64mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printf64mem	InstPrinter/X86IntelInstPrinter.h	/^  void printf64mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printf80mem	InstPrinter/X86ATTInstPrinter.h	/^  void printf80mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printf80mem	InstPrinter/X86IntelInstPrinter.h	/^  void printf80mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printi128mem	InstPrinter/X86ATTInstPrinter.h	/^  void printi128mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printi128mem	InstPrinter/X86IntelInstPrinter.h	/^  void printi128mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printi16mem	InstPrinter/X86ATTInstPrinter.h	/^  void printi16mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printi16mem	InstPrinter/X86IntelInstPrinter.h	/^  void printi16mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printi256mem	InstPrinter/X86ATTInstPrinter.h	/^  void printi256mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printi256mem	InstPrinter/X86IntelInstPrinter.h	/^  void printi256mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printi32mem	InstPrinter/X86ATTInstPrinter.h	/^  void printi32mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printi32mem	InstPrinter/X86IntelInstPrinter.h	/^  void printi32mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printi512mem	InstPrinter/X86ATTInstPrinter.h	/^  void printi512mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printi512mem	InstPrinter/X86IntelInstPrinter.h	/^  void printi512mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printi64mem	InstPrinter/X86ATTInstPrinter.h	/^  void printi64mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printi64mem	InstPrinter/X86IntelInstPrinter.h	/^  void printi64mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printi8mem	InstPrinter/X86ATTInstPrinter.h	/^  void printi8mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printi8mem	InstPrinter/X86IntelInstPrinter.h	/^  void printi8mem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
printopaquemem	InstPrinter/X86ATTInstPrinter.h	/^  void printopaquemem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86ATTInstPrinter
printopaquemem	InstPrinter/X86IntelInstPrinter.h	/^  void printopaquemem(const MCInst *MI, unsigned OpNo, raw_ostream &O) {$/;"	f	class:llvm::X86IntelInstPrinter
processBasicBlock	X86FixupLEAs.cpp	/^bool FixupLEAPass::processBasicBlock(MachineFunction &MF,$/;"	f	class:FixupLEAPass
processBasicBlock	X86FloatingPoint.cpp	/^bool FPS::processBasicBlock(MachineFunction &MF, MachineBasicBlock &BB) {$/;"	f	class:FPS
processBasicBlock	X86VZeroUpper.cpp	/^bool VZeroUpperInserter::processBasicBlock(MachineFunction &MF,$/;"	f	class:VZeroUpperInserter
processFunctionBeforeCalleeSavedScan	X86FrameLowering.cpp	/^X86FrameLowering::processFunctionBeforeCalleeSavedScan(MachineFunction &MF,$/;"	f	class:X86FrameLowering
processInstruction	AsmParser/X86AsmParser.cpp	/^processInstruction(MCInst &Inst,$/;"	f	class:X86AsmParser
processInstruction	X86FixupLEAs.cpp	/^void FixupLEAPass::processInstruction(MachineBasicBlock::iterator& I,$/;"	f	class:FixupLEAPass
pushOperand	AsmParser/X86AsmParser.cpp	/^    void pushOperand(InfixCalculatorTok Op, int64_t Val = 0) {$/;"	f	class:__anon1::X86AsmParser::InfixCalculator
pushOperator	AsmParser/X86AsmParser.cpp	/^    void pushOperator(InfixCalculatorTok Op) {$/;"	f	class:__anon1::X86AsmParser::InfixCalculator
pushReg	X86FloatingPoint.cpp	/^    void pushReg(unsigned Reg) {$/;"	f	struct:__anon39::FPS	file:
r2FromEVEX2of4	Disassembler/X86DisassemblerDecoder.h	51;"	d
rFromEVEX2of4	Disassembler/X86DisassemblerDecoder.h	48;"	d
rFromREX	Disassembler/X86DisassemblerDecoder.h	44;"	d
rFromVEX2of2	Disassembler/X86DisassemblerDecoder.h	72;"	d
rFromVEX2of3	Disassembler/X86DisassemblerDecoder.h	63;"	d
rFromXOP2of3	Disassembler/X86DisassemblerDecoder.h	77;"	d
reMaterialize	X86InstrInfo.cpp	/^void X86InstrInfo::reMaterialize(MachineBasicBlock &MBB,$/;"	f	class:X86InstrInfo
readDisplacement	Disassembler/X86DisassemblerDecoder.c	/^static int readDisplacement(struct InternalInstruction* insn) {$/;"	f	file:
readImmediate	Disassembler/X86DisassemblerDecoder.c	/^static int readImmediate(struct InternalInstruction* insn, uint8_t size) {$/;"	f	file:
readMaskRegister	Disassembler/X86DisassemblerDecoder.c	/^static int readMaskRegister(struct InternalInstruction* insn) {$/;"	f	file:
readModRM	Disassembler/X86DisassemblerDecoder.c	/^static int readModRM(struct InternalInstruction* insn) {$/;"	f	file:
readOpcode	Disassembler/X86DisassemblerDecoder.c	/^static int readOpcode(struct InternalInstruction* insn) {$/;"	f	file:
readOpcodeRegister	Disassembler/X86DisassemblerDecoder.c	/^static int readOpcodeRegister(struct InternalInstruction* insn, uint8_t size) {$/;"	f	file:
readOperands	Disassembler/X86DisassemblerDecoder.c	/^static int readOperands(struct InternalInstruction* insn) {$/;"	f	file:
readPrefixes	Disassembler/X86DisassemblerDecoder.c	/^static int readPrefixes(struct InternalInstruction* insn) {$/;"	f	file:
readSIB	Disassembler/X86DisassemblerDecoder.c	/^static int readSIB(struct InternalInstruction* insn) {$/;"	f	file:
readVVVV	Disassembler/X86DisassemblerDecoder.c	/^static int readVVVV(struct InternalInstruction* insn) {$/;"	f	file:
reader	Disassembler/X86DisassemblerDecoder.h	/^  byteReader_t reader;$/;"	m	struct:InternalInstruction
readerArg	Disassembler/X86DisassemblerDecoder.h	/^  const void* readerArg;$/;"	m	struct:InternalInstruction
readerCursor	Disassembler/X86DisassemblerDecoder.h	/^  uint64_t readerCursor;$/;"	m	struct:InternalInstruction
reg	Disassembler/X86DisassemblerDecoder.h	/^  Reg                           reg;$/;"	m	struct:InternalInstruction
regBase	Disassembler/X86DisassemblerDecoder.h	/^  Reg                           regBase;$/;"	m	struct:InternalInstruction
regFromModRM	Disassembler/X86DisassemblerDecoder.h	38;"	d
regIsPICBase	X86InstrInfo.cpp	/^static bool regIsPICBase(unsigned BaseReg, const MachineRegisterInfo &MRI) {$/;"	f	file:
regionReader	Disassembler/X86Disassembler.cpp	/^static int regionReader(const void* arg, uint8_t* byte, uint64_t address) {$/;"	f	file:
registerSize	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t registerSize;$/;"	m	struct:InternalInstruction
relaxInstruction	MCTargetDesc/X86AsmBackend.cpp	/^void X86AsmBackend::relaxInstruction(const MCInst &Inst, MCInst &Res) const {$/;"	f	class:X86AsmBackend
reloc_absolute_dword	X86Relocations.h	/^      reloc_absolute_dword = 4$/;"	e	enum:llvm::X86::RelocationType
reloc_absolute_word	X86Relocations.h	/^      reloc_absolute_word = 2,$/;"	e	enum:llvm::X86::RelocationType
reloc_absolute_word_sext	X86Relocations.h	/^      reloc_absolute_word_sext = 3,$/;"	e	enum:llvm::X86::RelocationType
reloc_global_offset_table	MCTargetDesc/X86FixupKinds.h	/^  reloc_global_offset_table,                 \/\/ 32-bit, relative to the start$/;"	e	enum:llvm::X86::Fixups
reloc_pcrel_word	X86Relocations.h	/^      reloc_pcrel_word = 0,$/;"	e	enum:llvm::X86::RelocationType
reloc_picrel_word	X86Relocations.h	/^      reloc_picrel_word = 1,$/;"	e	enum:llvm::X86::RelocationType
reloc_riprel_4byte	MCTargetDesc/X86FixupKinds.h	/^  reloc_riprel_4byte = FirstTargetFixupKind, \/\/ 32-bit rip-relative$/;"	e	enum:llvm::X86::Fixups
reloc_riprel_4byte_movq_load	MCTargetDesc/X86FixupKinds.h	/^  reloc_riprel_4byte_movq_load,              \/\/ 32-bit rip-relative in movq$/;"	e	enum:llvm::X86::Fixups
reloc_signed_4byte	MCTargetDesc/X86FixupKinds.h	/^  reloc_signed_4byte,                        \/\/ 32-bit signed. Unlike FK_Data_4$/;"	e	enum:llvm::X86::Fixups
relocate	X86JITInfo.cpp	/^void X86JITInfo::relocate(void *Function, MachineRelocation *MR,$/;"	f	class:X86JITInfo
replaceMachineCodeForFunction	X86JITInfo.cpp	/^void X86JITInfo::replaceMachineCodeForFunction(void *Old, void *New) {$/;"	f	class:X86JITInfo
resetOperationActions	X86ISelLowering.cpp	/^void X86TargetLowering::resetOperationActions() {$/;"	f	class:X86TargetLowering
resetSubtargetFeatures	X86Subtarget.cpp	/^void X86Subtarget::resetSubtargetFeatures(StringRef CPU, StringRef FS) {$/;"	f	class:X86Subtarget
resetSubtargetFeatures	X86Subtarget.cpp	/^void X86Subtarget::resetSubtargetFeatures(const MachineFunction *MF) {$/;"	f	class:X86Subtarget
restoreCalleeSavedRegisters	X86FrameLowering.cpp	/^bool X86FrameLowering::restoreCalleeSavedRegisters(MachineBasicBlock &MBB,$/;"	f	class:X86FrameLowering
rexPrefix	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t rexPrefix;$/;"	m	struct:InternalInstruction
rmFromModRM	Disassembler/X86DisassemblerDecoder.h	39;"	d
runOnMachineFunction	X86AsmPrinter.cpp	/^bool X86AsmPrinter::runOnMachineFunction(MachineFunction &MF) {$/;"	f	class:X86AsmPrinter
runOnMachineFunction	X86CodeEmitter.cpp	/^bool Emitter<CodeEmitter>::runOnMachineFunction(MachineFunction &MF) {$/;"	f	class:Emitter
runOnMachineFunction	X86FixupLEAs.cpp	/^bool FixupLEAPass::runOnMachineFunction(MachineFunction &Func) {$/;"	f	class:FixupLEAPass
runOnMachineFunction	X86FloatingPoint.cpp	/^bool FPS::runOnMachineFunction(MachineFunction &MF) {$/;"	f	class:FPS
runOnMachineFunction	X86InstrInfo.cpp	/^    virtual bool runOnMachineFunction(MachineFunction &MF) {$/;"	f	struct:__anon45::CGBR
runOnMachineFunction	X86InstrInfo.cpp	/^    virtual bool runOnMachineFunction(MachineFunction &MF) {$/;"	f	struct:__anon46::LDTLSCleanup
runOnMachineFunction	X86PadShortFunction.cpp	/^bool PadShortFunc::runOnMachineFunction(MachineFunction &MF) {$/;"	f	class:PadShortFunc
runOnMachineFunction	X86VZeroUpper.cpp	/^bool VZeroUpperInserter::runOnMachineFunction(MachineFunction &MF) {$/;"	f	class:VZeroUpperInserter
scaleFromSIB	Disassembler/X86DisassemblerDecoder.h	40;"	d
searchBackwards	X86FixupLEAs.cpp	/^MachineBasicBlock::iterator FixupLEAPass::searchBackwards(MachineOperand& p,$/;"	f	class:FixupLEAPass
seekLEAFixup	X86FixupLEAs.cpp	/^void FixupLEAPass::seekLEAFixup(MachineOperand& p,$/;"	f	class:FixupLEAPass
segmentOverride	Disassembler/X86DisassemblerDecoder.h	/^  SegmentOverride segmentOverride;$/;"	m	struct:InternalInstruction
segmentRegnums	Disassembler/X86Disassembler.cpp	/^static const uint8_t segmentRegnums[SEG_OVERRIDE_max] = {$/;"	v	file:
setArgumentStackSize	X86MachineFunctionInfo.h	/^  void setArgumentStackSize(unsigned size) { ArgumentStackSize = size; }$/;"	f	class:llvm::X86MachineFunctionInfo
setBaseReg	X86ISelDAGToDAG.cpp	/^    void setBaseReg(SDValue Reg) {$/;"	f	struct:__anon47::X86ISelAddressMode
setBytesToPopOnReturn	X86MachineFunctionInfo.h	/^  void setBytesToPopOnReturn (unsigned bytes) { BytesToPopOnReturn = bytes;}$/;"	f	class:llvm::X86MachineFunctionInfo
setCalleeSavedFrameSize	X86MachineFunctionInfo.h	/^  void setCalleeSavedFrameSize(unsigned bytes) { CalleeSavedFrameSize = bytes; }$/;"	f	class:llvm::X86MachineFunctionInfo
setExecutionDomain	X86InstrInfo.cpp	/^void X86InstrInfo::setExecutionDomain(MachineInstr *MI, unsigned Domain) const {$/;"	f	class:X86InstrInfo
setForceFramePointer	X86MachineFunctionInfo.h	/^  void setForceFramePointer(bool forceFP) { ForceFramePointer = forceFP; }$/;"	f	class:llvm::X86MachineFunctionInfo
setGlobalBaseReg	X86MachineFunctionInfo.h	/^  void setGlobalBaseReg(unsigned Reg) { GlobalBaseReg = Reg; }$/;"	f	class:llvm::X86MachineFunctionInfo
setPICBase	X86JITInfo.h	/^    void setPICBase(uintptr_t Base) { PICBase = Base; }$/;"	f	class:llvm::X86JITInfo
setPICStyle	X86Subtarget.h	/^  void setPICStyle(PICStyles::Style Style)  { PICStyle = Style; }$/;"	f	class:llvm::X86Subtarget
setPrefixPresent	Disassembler/X86DisassemblerDecoder.c	/^static void setPrefixPresent(struct InternalInstruction* insn,$/;"	f	file:
setRAIndex	X86MachineFunctionInfo.h	/^  void setRAIndex(int Index) { ReturnAddrIndex = Index; }$/;"	f	class:llvm::X86MachineFunctionInfo
setRegSaveFrameIndex	X86MachineFunctionInfo.h	/^  void setRegSaveFrameIndex(int Idx) { RegSaveFrameIndex = Idx; }$/;"	f	class:llvm::X86MachineFunctionInfo
setSRetReturnReg	X86MachineFunctionInfo.h	/^  void setSRetReturnReg(unsigned Reg) { SRetReturnReg = Reg; }$/;"	f	class:llvm::X86MachineFunctionInfo
setTCReturnAddrDelta	X86MachineFunctionInfo.h	/^  void setTCReturnAddrDelta(int delta) {TailCallReturnAddrDelta = delta;}$/;"	f	class:llvm::X86MachineFunctionInfo
setTokenValue	AsmParser/X86AsmParser.cpp	/^  void setTokenValue(StringRef Value) {$/;"	f	struct:__anon2::X86Operand
setVarArgsFPOffset	X86MachineFunctionInfo.h	/^  void setVarArgsFPOffset(unsigned Offset) { VarArgsFPOffset = Offset; }$/;"	f	class:llvm::X86MachineFunctionInfo
setVarArgsFrameIndex	X86MachineFunctionInfo.h	/^  void setVarArgsFrameIndex(int Idx) { VarArgsFrameIndex = Idx; }$/;"	f	class:llvm::X86MachineFunctionInfo
setVarArgsGPOffset	X86MachineFunctionInfo.h	/^  void setVarArgsGPOffset(unsigned Offset) { VarArgsGPOffset = Offset; }$/;"	f	class:llvm::X86MachineFunctionInfo
setupBlockStack	X86FloatingPoint.cpp	/^void FPS::setupBlockStack() {$/;"	f	class:FPS
shouldConvertConstantLoadToIntImm	X86ISelLowering.cpp	/^bool X86TargetLowering::shouldConvertConstantLoadToIntImm(const APInt &Imm,$/;"	f	class:X86TargetLowering
shouldScheduleAdjacent	X86InstrInfo.cpp	/^bool X86InstrInfo::shouldScheduleAdjacent(MachineInstr* First,$/;"	f	class:X86InstrInfo
shouldScheduleLoadsNear	X86InstrInfo.cpp	/^bool X86InstrInfo::shouldScheduleLoadsNear(SDNode *Load1, SDNode *Load2,$/;"	f	class:X86InstrInfo
shuffleStackTop	X86FloatingPoint.cpp	/^void FPS::shuffleStackTop(const unsigned char *FixStack,$/;"	f	class:FPS
sib	Disassembler/X86Disassembler.cpp	/^    sib   = 504,$/;"	e	enum:llvm::X86::__anon4	file:
sib	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t                       sib;$/;"	m	struct:InternalInstruction
sib64	Disassembler/X86Disassembler.cpp	/^    sib64 = 505$/;"	e	enum:llvm::X86::__anon4	file:
sibBase	Disassembler/X86DisassemblerDecoder.h	/^  SIBBase                       sibBase;$/;"	m	struct:InternalInstruction
sibIndex	Disassembler/X86DisassemblerDecoder.h	/^  SIBIndex                      sibIndex;$/;"	m	struct:InternalInstruction
sibScale	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t                       sibScale;$/;"	m	struct:InternalInstruction
spec	Disassembler/X86DisassemblerDecoder.h	/^  const struct InstructionSpecifier *spec;$/;"	m	struct:InternalInstruction	typeref:struct:InternalInstruction::InstructionSpecifier
specifierForUID	Disassembler/X86DisassemblerDecoder.c	/^static const struct InstructionSpecifier *specifierForUID(InstrUID uid) {$/;"	f	file:
spillCalleeSavedRegisters	X86FrameLowering.cpp	/^bool X86FrameLowering::spillCalleeSavedRegisters(MachineBasicBlock &MBB,$/;"	f	class:X86FrameLowering
stackAlignment	X86Subtarget.h	/^  unsigned stackAlignment;$/;"	m	class:llvm::X86Subtarget
startLocation	Disassembler/X86DisassemblerDecoder.h	/^  uint64_t startLocation;$/;"	m	struct:InternalInstruction
storeRegToAddr	X86InstrInfo.cpp	/^void X86InstrInfo::storeRegToAddr(MachineFunction &MF, unsigned SrcReg,$/;"	f	class:X86InstrInfo
storeRegToStackSlot	X86InstrInfo.cpp	/^void X86InstrInfo::storeRegToStackSlot(MachineBasicBlock &MBB,$/;"	f	class:X86InstrInfo
to	X86FloatingPoint.cpp	/^    uint16_t to;$/;"	m	struct:__anon41::TableEntry	file:
trackLivenessAfterRegAlloc	X86RegisterInfo.cpp	/^X86RegisterInfo::trackLivenessAfterRegAlloc(const MachineFunction &MF) const {$/;"	f	class:X86RegisterInfo
translateDstIndex	Disassembler/X86Disassembler.cpp	/^static bool translateDstIndex(MCInst &mcInst, InternalInstruction &insn) {$/;"	f	file:
translateFPRegister	Disassembler/X86Disassembler.cpp	/^static void translateFPRegister(MCInst &mcInst,$/;"	f	file:
translateImmediate	Disassembler/X86Disassembler.cpp	/^static void translateImmediate(MCInst &mcInst, uint64_t immediate,$/;"	f	file:
translateInstruction	Disassembler/X86Disassembler.cpp	/^static bool translateInstruction(MCInst &mcInst,$/;"	f	file:
translateMaskRegister	Disassembler/X86Disassembler.cpp	/^static bool translateMaskRegister(MCInst &mcInst,$/;"	f	file:
translateOperand	Disassembler/X86Disassembler.cpp	/^static bool translateOperand(MCInst &mcInst, const OperandSpecifier &operand,$/;"	f	file:
translateRM	Disassembler/X86Disassembler.cpp	/^static bool translateRM(MCInst &mcInst, const OperandSpecifier &operand,$/;"	f	file:
translateRMMemory	Disassembler/X86Disassembler.cpp	/^static bool translateRMMemory(MCInst &mcInst, InternalInstruction &insn,$/;"	f	file:
translateRMRegister	Disassembler/X86Disassembler.cpp	/^static bool translateRMRegister(MCInst &mcInst,$/;"	f	file:
translateRegister	Disassembler/X86Disassembler.cpp	/^static void translateRegister(MCInst &mcInst, Reg reg) {$/;"	f	file:
translateSrcIndex	Disassembler/X86Disassembler.cpp	/^static bool translateSrcIndex(MCInst &mcInst, InternalInstruction &insn) {$/;"	f	file:
translateX86FSETCC	X86ISelLowering.cpp	/^static int translateX86FSETCC(ISD::CondCode SetCCOpcode, SDValue &Op0,$/;"	f	file:
tryAddingPcLoadReferenceComment	Disassembler/X86Disassembler.cpp	/^static void tryAddingPcLoadReferenceComment(uint64_t Address, uint64_t Value,$/;"	f	file:
tryAddingSymbolicOperand	Disassembler/X86Disassembler.cpp	/^static bool tryAddingSymbolicOperand(int64_t Value, bool isBranch,$/;"	f	file:
tryToFoldLoadIntoMI	X86FastISel.cpp	/^bool X86FastISel::tryToFoldLoadIntoMI(MachineInstr *MI, unsigned OpNo,$/;"	f	class:X86FastISel
type	Disassembler/X86DisassemblerDecoderCommon.h	/^  uint8_t type;$/;"	m	struct:OperandSpecifier
unconsumeByte	Disassembler/X86DisassemblerDecoder.c	/^static void unconsumeByte(struct InternalInstruction* insn) {$/;"	f	file:
unfoldMemoryOperand	X86InstrInfo.cpp	/^X86InstrInfo::unfoldMemoryOperand(SelectionDAG &DAG, SDNode *N,$/;"	f	class:X86InstrInfo
unfoldMemoryOperand	X86InstrInfo.cpp	/^bool X86InstrInfo::unfoldMemoryOperand(MachineFunction &MF, MachineInstr *MI,$/;"	f	class:X86InstrInfo
useLeaForSP	X86Subtarget.h	/^  bool useLeaForSP() const { return UseLeaForSP; }$/;"	f	class:llvm::X86Subtarget
usesRegister	X86FixupLEAs.cpp	/^FixupLEAPass::RegUsageState FixupLEAPass::usesRegister(MachineOperand& p,$/;"	f	class:FixupLEAPass
usesTheStack	X86FrameLowering.cpp	/^static bool usesTheStack(const MachineFunction &MF) {$/;"	f	file:
v2FromEVEX4of4	Disassembler/X86DisassemblerDecoder.h	60;"	d
vectorExtensionPrefix	Disassembler/X86DisassemblerDecoder.h	/^  uint8_t vectorExtensionPrefix[4];$/;"	m	struct:InternalInstruction
vectorExtensionType	Disassembler/X86DisassemblerDecoder.h	/^  VectorExtensionType vectorExtensionType;$/;"	m	struct:InternalInstruction
vvvv	Disassembler/X86DisassemblerDecoder.h	/^  Reg                           vvvv;$/;"	m	struct:InternalInstruction
vvvvFromEVEX3of4	Disassembler/X86DisassemblerDecoder.h	54;"	d
vvvvFromVEX2of2	Disassembler/X86DisassemblerDecoder.h	73;"	d
vvvvFromVEX3of3	Disassembler/X86DisassemblerDecoder.h	68;"	d
vvvvFromXOP3of3	Disassembler/X86DisassemblerDecoder.h	82;"	d
wFromEVEX3of4	Disassembler/X86DisassemblerDecoder.h	53;"	d
wFromREX	Disassembler/X86DisassemblerDecoder.h	43;"	d
wFromVEX3of3	Disassembler/X86DisassemblerDecoder.h	67;"	d
wFromXOP3of3	Disassembler/X86DisassemblerDecoder.h	81;"	d
writeNopData	MCTargetDesc/X86AsmBackend.cpp	/^bool X86AsmBackend::writeNopData(uint64_t Count, MCObjectWriter *OW) const {$/;"	f	class:X86AsmBackend
writemask	Disassembler/X86DisassemblerDecoder.h	/^  Reg                           writemask;$/;"	m	struct:InternalInstruction
x86DisassemblerDebug	Disassembler/X86Disassembler.cpp	/^void x86DisassemblerDebug(const char *file,$/;"	f
x86DisassemblerGetInstrName	Disassembler/X86Disassembler.cpp	/^const char *x86DisassemblerGetInstrName(unsigned Opcode, const void *mii) {$/;"	f
xAcquireRelease	Disassembler/X86DisassemblerDecoder.h	/^  BOOL xAcquireRelease;$/;"	m	struct:InternalInstruction
xFromEVEX2of4	Disassembler/X86DisassemblerDecoder.h	49;"	d
xFromREX	Disassembler/X86DisassemblerDecoder.h	45;"	d
xFromVEX2of3	Disassembler/X86DisassemblerDecoder.h	64;"	d
xFromXOP2of3	Disassembler/X86DisassemblerDecoder.h	78;"	d
zFromEVEX4of4	Disassembler/X86DisassemblerDecoder.h	56;"	d
~X86COFFMachineModuleInfo	X86COFFMachineModuleInfo.cpp	/^X86COFFMachineModuleInfo::~X86COFFMachineModuleInfo() {$/;"	f	class:X86COFFMachineModuleInfo
~X86ELFObjectWriter	MCTargetDesc/X86ELFObjectWriter.cpp	/^X86ELFObjectWriter::~X86ELFObjectWriter()$/;"	f	class:X86ELFObjectWriter
~X86GenericDisassembler	Disassembler/X86Disassembler.cpp	/^X86GenericDisassembler::~X86GenericDisassembler() {$/;"	f	class:X86GenericDisassembler
~X86MCCodeEmitter	MCTargetDesc/X86MCCodeEmitter.cpp	/^  ~X86MCCodeEmitter() {}$/;"	f	class:__anon29::X86MCCodeEmitter
~X86SelectionDAGInfo	X86SelectionDAGInfo.cpp	/^X86SelectionDAGInfo::~X86SelectionDAGInfo() {$/;"	f	class:X86SelectionDAGInfo
~X86WinCOFFObjectWriter	MCTargetDesc/X86WinCOFFObjectWriter.cpp	/^X86WinCOFFObjectWriter::~X86WinCOFFObjectWriter() {}$/;"	f	class:X86WinCOFFObjectWriter
