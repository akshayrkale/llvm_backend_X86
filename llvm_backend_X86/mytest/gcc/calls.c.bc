; ModuleID = 'calls.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.simple_bitmap_def = type { i32, i32, i32, [1 x i64] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.args_size = type { i64, %union.tree_node* }
%struct.arg_data = type { %union.tree_node*, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.args_size, %struct.args_size, %struct.args_size, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def**, i32, %struct.args_size }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.arg = type { %struct.rtx_def*, i32, %struct.rtx_def*, i32, %struct.args_size, %struct.args_size, %struct.rtx_def* }

@static_chain_rtx = external global %struct.rtx_def*
@expand_call.currently_expanding_call = internal unnamed_addr global i32 0, align 4
@target_flags = external global i32
@highest_outgoing_arg_in_use = internal unnamed_addr global i32 0, align 4
@stack_usage_map = internal unnamed_addr global i8* null, align 8
@cfun = external global %struct.function*
@flag_no_inline = external global i32
@current_function_decl = external global %union.tree_node*
@warn_inline = external global i32
@optimize = external global i32
@.str = private unnamed_addr constant [26 x i8] c"can't inline call to `%s'\00", align 1
@.str1 = private unnamed_addr constant [17 x i8] c"called from here\00", align 1
@warn_aggregate_return = external global i32
@.str2 = private unnamed_addr constant [34 x i8] c"function call has aggregate value\00", align 1
@ix86_preferred_stack_boundary = external global i32
@.str3 = private unnamed_addr constant [8 x i8] c"calls.c\00", align 1
@__FUNCTION__.expand_call = private unnamed_addr constant [12 x i8] c"expand_call\00", align 1
@struct_value_rtx = external global %struct.rtx_def*
@stack_arg_under_construction = common global i32 0, align 4
@global_rtl = external global [11 x %struct.rtx_def*]
@global_trees = external global [51 x %union.tree_node*]
@flag_optimize_sibling_calls = external global i32
@rtx_equal_function_value_matters = external global i32
@flag_pic = external global i32
@mode_class = external constant [59 x i32]
@profile_arc_flag = external global i32
@.str4 = private unnamed_addr constant [15 x i8] c"__bb_fork_func\00", align 1
@stored_args_map = internal unnamed_addr global %struct.simple_bitmap_def* null, align 8
@sizetype_tab = external global [6 x %union.tree_node*]
@const_int_rtx = external global [129 x %struct.rtx_def*]
@__FUNCTION__.store_one_arg = private unnamed_addr constant [14 x i8] c"store_one_arg\00", align 1
@mode_size = external constant [59 x i8]
@.str5 = private unnamed_addr constant [56 x i8] c"variable offset is passed partially in stack and in reg\00", align 1
@.str6 = private unnamed_addr constant [54 x i8] c"variable size is passed partially in stack and in reg\00", align 1
@__FUNCTION__.emit_library_call_value_1 = private unnamed_addr constant [26 x i8] c"emit_library_call_value_1\00", align 1
@virtuals_instantiated = external global i32
@__FUNCTION__.emit_call_1 = private unnamed_addr constant [12 x i8] c"emit_call_1\00", align 1
@flag_defer_pop = external global i32
@word_mode = external global i32
@rtx_class = external constant [153 x i8]
@rtx_format = external constant [153 x i8*]
@rtx_length = external constant [153 x i8]
@__FUNCTION__.compute_argument_block_size = private unnamed_addr constant [28 x i8] c"compute_argument_block_size\00", align 1
@__FUNCTION__.precompute_arguments = private unnamed_addr constant [21 x i8] c"precompute_arguments\00", align 1
@calls_function_save_exprs = internal unnamed_addr global %union.tree_node* null, align 8
@tree_code_type = external global [256 x i8]
@integer_types = external global [11 x %union.tree_node*]
@flag_stack_check = external global i32
@.str7 = private unnamed_addr constant [32 x i8] c"inlining failed in call to `%s'\00", align 1
@.str8 = private unnamed_addr constant [7 x i8] c"alloca\00", align 1
@.str9 = private unnamed_addr constant [17 x i8] c"__builtin_alloca\00", align 1
@.str10 = private unnamed_addr constant [7 x i8] c"setjmp\00", align 1
@.str11 = private unnamed_addr constant [15 x i8] c"setjmp_syscall\00", align 1
@.str12 = private unnamed_addr constant [10 x i8] c"sigsetjmp\00", align 1
@.str13 = private unnamed_addr constant [8 x i8] c"savectx\00", align 1
@.str14 = private unnamed_addr constant [11 x i8] c"siglongjmp\00", align 1
@.str15 = private unnamed_addr constant [8 x i8] c"qsetjmp\00", align 1
@.str16 = private unnamed_addr constant [6 x i8] c"vfork\00", align 1
@.str17 = private unnamed_addr constant [8 x i8] c"longjmp\00", align 1
@.str18 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@.str19 = private unnamed_addr constant [6 x i8] c"clone\00", align 1
@.str20 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@.str21 = private unnamed_addr constant [7 x i8] c"calloc\00", align 1
@.str22 = private unnamed_addr constant [7 x i8] c"strdup\00", align 1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @prepare_call_address(%struct.rtx_def* %funexp, %union.tree_node* %fndecl, %struct.rtx_def** %call_fusage, i32 %reg_parm_seen, i32 %sibcallp) #0 {
entry:
  %call = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %funexp, i32 0) #4
  %cmp = icmp eq %union.tree_node* %fndecl, null
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = tail call %struct.rtx_def* @lookup_static_chain(%union.tree_node* %fndecl) #4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %static_chain_value.0 = phi %struct.rtx_def* [ %call1, %if.then ], [ null, %entry ]
  %0 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 68
  br i1 %cmp2, label %if.end10, label %if.then3

if.then3:                                         ; preds = %if.end
  %tobool = icmp eq i32 %reg_parm_seen, 0
  %call4 = tail call %struct.rtx_def* @memory_address(i32 2, %struct.rtx_def* %call) #4
  br i1 %tobool, label %if.end10, label %cond.true

cond.true:                                        ; preds = %if.then3
  %call5 = tail call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %call4) #4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %cond.true, %if.then3
  %funexp.addr.0 = phi %struct.rtx_def* [ %call5, %cond.true ], [ %call4, %if.then3 ], [ %call, %if.end ]
  %cmp11 = icmp eq %struct.rtx_def* %static_chain_value.0, null
  br i1 %cmp11, label %if.end19, label %if.then12

if.then12:                                        ; preds = %if.end10
  %1 = load %struct.rtx_def** @static_chain_rtx, align 8, !tbaa !1
  %call13 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %1, %struct.rtx_def* %static_chain_value.0) #4
  %2 = load %struct.rtx_def** @static_chain_rtx, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load14 = load i32* %3, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 61
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.then12
  tail call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %2) #4
  br label %if.end19

if.end19:                                         ; preds = %if.end10, %if.then12, %if.then17
  ret %struct.rtx_def* %funexp.addr.0
}

declare %struct.rtx_def* @protect_from_queue(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @lookup_static_chain(%union.tree_node*) #1

declare %struct.rtx_def* @force_not_mem(%struct.rtx_def*) #1

declare %struct.rtx_def* @memory_address(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @use_reg(%struct.rtx_def**, %struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define i32 @setjmp_call_p(%union.tree_node* readonly %fndecl) #2 {
entry:
  %call = tail call fastcc i32 @special_function_p(%union.tree_node* %fndecl, i32 0)
  %and = and i32 %call, 32
  ret i32 %and
}

; Function Attrs: nounwind readonly uwtable
define internal fastcc i32 @special_function_p(%union.tree_node* readonly %fndecl, i32 %flags) #2 {
entry:
  %and = and i32 %flags, 4
  %tobool = icmp eq i32 %and, 0
  %tobool1 = icmp ne %union.tree_node* %fndecl, null
  %or.cond = and i1 %tobool, %tobool1
  br i1 %or.cond, label %land.lhs.true2, label %if.end263

land.lhs.true2:                                   ; preds = %entry
  %name = getelementptr inbounds %union.tree_node* %fndecl, i64 0, i32 0, i32 8
  %0 = load %union.tree_node** %name, align 8, !tbaa !5
  %tobool3 = icmp eq %union.tree_node* %0, null
  br i1 %tobool3, label %if.end263, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %id = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %len = bitcast i8** %id to i32*
  %1 = load i32* %len, align 4, !tbaa !10
  %cmp = icmp ult i32 %1, 18
  br i1 %cmp, label %land.lhs.true7, label %if.end263

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %context = getelementptr inbounds %union.tree_node* %fndecl, i64 0, i32 0, i32 9
  %2 = load %union.tree_node** %context, align 8, !tbaa !13
  %cmp9 = icmp eq %union.tree_node* %2, null
  br i1 %cmp9, label %land.lhs.true10, label %if.end263

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %public_flag = getelementptr inbounds %union.tree_node* %fndecl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %public_flag, align 8
  %bf.clear = and i32 %bf.load, 524288
  %tobool11 = icmp eq i32 %bf.clear, 0
  br i1 %tobool11, label %if.end263, label %if.then

if.then:                                          ; preds = %land.lhs.true10
  %3 = getelementptr inbounds i8** %id, i64 1
  %4 = load i8** %3, align 8, !tbaa !14
  switch i32 %1, label %lor.lhs.false.if.end_crit_edge [
    i32 6, label %land.lhs.true23
    i32 16, label %land.lhs.true35
  ]

land.lhs.true23:                                  ; preds = %if.then
  %5 = load i8* %4, align 1, !tbaa !15
  %cmp24 = icmp eq i8 %5, 97
  br i1 %cmp24, label %land.lhs.true26, label %lor.lhs.false.if.end_crit_edge

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %call = tail call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([7 x i8]* @.str8, i64 0, i64 0)) #4
  %tobool27 = icmp eq i32 %call, 0
  br i1 %tobool27, label %if.then43, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true26
  %cmp33 = icmp eq i32 %1, 16
  br i1 %cmp33, label %land.lhs.true35, label %lor.lhs.false.if.end_crit_edge

lor.lhs.false.if.end_crit_edge:                   ; preds = %if.then, %land.lhs.true23, %lor.lhs.false
  %.pr.pre = load i8* %4, align 1, !tbaa !15
  br label %if.end

land.lhs.true35:                                  ; preds = %if.then, %lor.lhs.false
  %6 = load i8* %4, align 1, !tbaa !15
  %cmp38 = icmp eq i8 %6, 95
  br i1 %cmp38, label %land.lhs.true40, label %if.end69

land.lhs.true40:                                  ; preds = %land.lhs.true35
  %call41 = tail call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([17 x i8]* @.str9, i64 0, i64 0)) #4
  %tobool42 = icmp eq i32 %call41, 0
  br i1 %tobool42, label %if.then43, label %if.then48

if.then43:                                        ; preds = %land.lhs.true26, %land.lhs.true40
  %.pr336 = phi i8 [ 97, %land.lhs.true26 ], [ 95, %land.lhs.true40 ]
  %or = or i32 %flags, 8
  br label %if.end

if.end:                                           ; preds = %lor.lhs.false.if.end_crit_edge, %if.then43
  %.pr = phi i8 [ %.pr336, %if.then43 ], [ %.pr.pre, %lor.lhs.false.if.end_crit_edge ]
  %flags.addr.0.ph = phi i32 [ %or, %if.then43 ], [ %flags, %lor.lhs.false.if.end_crit_edge ]
  %cmp46 = icmp eq i8 %.pr, 95
  br i1 %cmp46, label %if.then48, label %if.end69

if.then48:                                        ; preds = %land.lhs.true40, %if.end
  %flags.addr.0.ph341 = phi i32 [ %flags.addr.0.ph, %if.end ], [ %flags, %land.lhs.true40 ]
  %arrayidx49 = getelementptr inbounds i8* %4, i64 1
  %7 = load i8* %arrayidx49, align 1, !tbaa !15
  %cmp51 = icmp eq i8 %7, 95
  %arrayidx54 = getelementptr inbounds i8* %4, i64 2
  br i1 %cmp51, label %land.lhs.true53, label %if.else

land.lhs.true53:                                  ; preds = %if.then48
  %8 = load i8* %arrayidx54, align 1, !tbaa !15
  %cmp56 = icmp eq i8 %8, 120
  br i1 %cmp56, label %if.then58, label %if.else

if.then58:                                        ; preds = %land.lhs.true53
  %add.ptr = getelementptr inbounds i8* %4, i64 3
  br label %if.end69

if.else:                                          ; preds = %if.then48, %land.lhs.true53
  %add.ptr64.arrayidx49 = select i1 %cmp51, i8* %arrayidx54, i8* %arrayidx49
  br label %if.end69

if.end69:                                         ; preds = %land.lhs.true35, %if.else, %if.then58, %if.end
  %9 = phi i8 [ 95, %if.then58 ], [ %.pr, %if.end ], [ 95, %if.else ], [ %6, %land.lhs.true35 ]
  %flags.addr.0327 = phi i32 [ %flags.addr.0.ph341, %if.then58 ], [ %flags.addr.0.ph, %if.end ], [ %flags.addr.0.ph341, %if.else ], [ %flags, %land.lhs.true35 ]
  %tname.0 = phi i8* [ %add.ptr, %if.then58 ], [ %4, %if.end ], [ %add.ptr64.arrayidx49, %if.else ], [ %4, %land.lhs.true35 ]
  %10 = load i8* %tname.0, align 1, !tbaa !15
  switch i8 %10, label %lor.lhs.false170 [
    i8 115, label %if.then74
    i8 113, label %land.lhs.true119
    i8 118, label %land.lhs.true132
    i8 108, label %land.lhs.true147
    i8 102, label %land.lhs.true162
  ]

if.then74:                                        ; preds = %if.end69
  %arrayidx75 = getelementptr inbounds i8* %tname.0, i64 1
  %11 = load i8* %arrayidx75, align 1, !tbaa !15
  switch i8 %11, label %if.end263 [
    i8 101, label %land.lhs.true79
    i8 105, label %land.lhs.true90
    i8 97, label %land.lhs.true98
  ]

land.lhs.true79:                                  ; preds = %if.then74
  %call80 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([7 x i8]* @.str10, i64 0, i64 0)) #4
  %tobool81 = icmp eq i32 %call80, 0
  br i1 %tobool81, label %if.end103.thread348, label %lor.lhs.false82

lor.lhs.false82:                                  ; preds = %land.lhs.true79
  %call83 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([15 x i8]* @.str11, i64 0, i64 0)) #4
  %tobool84 = icmp eq i32 %call83, 0
  br i1 %tobool84, label %if.end103.thread348, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %lor.lhs.false82
  switch i8 %11, label %if.end263 [
    i8 105, label %land.lhs.true90
    i8 97, label %land.lhs.true98
  ]

land.lhs.true90:                                  ; preds = %if.then74, %lor.lhs.false85
  %call91 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([10 x i8]* @.str12, i64 0, i64 0)) #4
  %tobool92 = icmp eq i32 %call91, 0
  %or102352 = or i32 %flags.addr.0327, 32
  %or102352.flags.addr.0327 = select i1 %tobool92, i32 %or102352, i32 %flags.addr.0327
  %call109 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([11 x i8]* @.str14, i64 0, i64 0)) #4
  %tobool110 = icmp eq i32 %call109, 0
  %or112 = or i32 %or102352.flags.addr.0327, 64
  %or112.flags.addr.1 = select i1 %tobool110, i32 %or112, i32 %or102352.flags.addr.0327
  ret i32 %or112.flags.addr.1

land.lhs.true98:                                  ; preds = %if.then74, %lor.lhs.false85
  %call99 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([8 x i8]* @.str13, i64 0, i64 0)) #4
  %tobool100 = icmp eq i32 %call99, 0
  br i1 %tobool100, label %if.end103.thread348, label %if.end263

if.end103.thread348:                              ; preds = %lor.lhs.false82, %land.lhs.true79, %land.lhs.true98
  %or102349 = or i32 %flags.addr.0327, 32
  br label %if.end263

land.lhs.true119:                                 ; preds = %if.end69
  %arrayidx120 = getelementptr inbounds i8* %tname.0, i64 1
  %12 = load i8* %arrayidx120, align 1, !tbaa !15
  %cmp122 = icmp eq i8 %12, 115
  br i1 %cmp122, label %land.lhs.true124, label %lor.lhs.false170

land.lhs.true124:                                 ; preds = %land.lhs.true119
  %call125 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([8 x i8]* @.str15, i64 0, i64 0)) #4
  %tobool126 = icmp eq i32 %call125, 0
  br i1 %tobool126, label %if.then140, label %lor.lhs.false170

land.lhs.true132:                                 ; preds = %if.end69
  %arrayidx133 = getelementptr inbounds i8* %tname.0, i64 1
  %13 = load i8* %arrayidx133, align 1, !tbaa !15
  %cmp135 = icmp eq i8 %13, 102
  br i1 %cmp135, label %land.lhs.true137, label %lor.lhs.false170

land.lhs.true137:                                 ; preds = %land.lhs.true132
  %call138 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([6 x i8]* @.str16, i64 0, i64 0)) #4
  %tobool139 = icmp eq i32 %call138, 0
  br i1 %tobool139, label %if.then140, label %if.else142

if.then140:                                       ; preds = %land.lhs.true124, %land.lhs.true137
  %or141 = or i32 %flags.addr.0327, 32
  br label %if.end263

if.else142:                                       ; preds = %land.lhs.true137
  switch i8 %10, label %lor.lhs.false170 [
    i8 108, label %land.lhs.true147
    i8 102, label %land.lhs.true162
  ]

land.lhs.true147:                                 ; preds = %if.end69, %if.else142
  %arrayidx148 = getelementptr inbounds i8* %tname.0, i64 1
  %14 = load i8* %arrayidx148, align 1, !tbaa !15
  %cmp150 = icmp eq i8 %14, 111
  br i1 %cmp150, label %land.lhs.true152, label %lor.lhs.false170

land.lhs.true152:                                 ; preds = %land.lhs.true147
  %call153 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([8 x i8]* @.str17, i64 0, i64 0)) #4
  %tobool154 = icmp eq i32 %call153, 0
  br i1 %tobool154, label %if.then155, label %lor.lhs.false170

if.then155:                                       ; preds = %land.lhs.true152
  %or156 = or i32 %flags.addr.0327, 64
  br label %if.end263

land.lhs.true162:                                 ; preds = %if.end69, %if.else142
  %arrayidx163 = getelementptr inbounds i8* %tname.0, i64 1
  %15 = load i8* %arrayidx163, align 1, !tbaa !15
  %cmp165 = icmp eq i8 %15, 111
  br i1 %cmp165, label %land.lhs.true167, label %lor.lhs.false170

land.lhs.true167:                                 ; preds = %land.lhs.true162
  %call168 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([5 x i8]* @.str18, i64 0, i64 0)) #4
  %tobool169 = icmp eq i32 %call168, 0
  br i1 %tobool169, label %if.then233, label %lor.lhs.false170

lor.lhs.false170:                                 ; preds = %if.end69, %if.else142, %land.lhs.true124, %land.lhs.true119, %land.lhs.true132, %land.lhs.true152, %land.lhs.true147, %land.lhs.true167, %land.lhs.true162
  %16 = phi i8 [ %10, %land.lhs.true167 ], [ 102, %land.lhs.true162 ], [ 108, %land.lhs.true147 ], [ 108, %land.lhs.true152 ], [ 118, %land.lhs.true132 ], [ 113, %land.lhs.true119 ], [ 113, %land.lhs.true124 ], [ %10, %if.else142 ], [ %10, %if.end69 ]
  %cmp173 = icmp eq i8 %9, 95
  br i1 %cmp173, label %land.lhs.true175, label %lor.lhs.false183

land.lhs.true175:                                 ; preds = %lor.lhs.false170
  %arrayidx176 = getelementptr inbounds i8* %4, i64 1
  %17 = load i8* %arrayidx176, align 1, !tbaa !15
  %cmp178 = icmp eq i8 %17, 95
  br i1 %cmp178, label %land.lhs.true180, label %lor.lhs.false183

land.lhs.true180:                                 ; preds = %land.lhs.true175
  %call181 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([6 x i8]* @.str19, i64 0, i64 0)) #4
  %tobool182 = icmp eq i32 %call181, 0
  br i1 %tobool182, label %if.then233, label %lor.lhs.false183

lor.lhs.false183:                                 ; preds = %land.lhs.true180, %land.lhs.true175, %lor.lhs.false170
  %cmp186 = icmp eq i8 %16, 101
  br i1 %cmp186, label %land.lhs.true188, label %if.else235

land.lhs.true188:                                 ; preds = %lor.lhs.false183
  %arrayidx189 = getelementptr inbounds i8* %tname.0, i64 1
  %18 = load i8* %arrayidx189, align 1, !tbaa !15
  %cmp191 = icmp eq i8 %18, 120
  br i1 %cmp191, label %land.lhs.true193, label %if.else235

land.lhs.true193:                                 ; preds = %land.lhs.true188
  %arrayidx194 = getelementptr inbounds i8* %tname.0, i64 2
  %19 = load i8* %arrayidx194, align 1, !tbaa !15
  %cmp196 = icmp eq i8 %19, 101
  br i1 %cmp196, label %land.lhs.true198, label %if.else235

land.lhs.true198:                                 ; preds = %land.lhs.true193
  %arrayidx199 = getelementptr inbounds i8* %tname.0, i64 3
  %20 = load i8* %arrayidx199, align 1, !tbaa !15
  %cmp201 = icmp eq i8 %20, 99
  br i1 %cmp201, label %land.lhs.true203, label %if.else235

land.lhs.true203:                                 ; preds = %land.lhs.true198
  %arrayidx204 = getelementptr inbounds i8* %tname.0, i64 4
  %21 = load i8* %arrayidx204, align 1, !tbaa !15
  switch i8 %21, label %if.else235 [
    i8 108, label %land.lhs.true213
    i8 118, label %land.lhs.true213
  ]

land.lhs.true213:                                 ; preds = %land.lhs.true203, %land.lhs.true203
  %arrayidx214 = getelementptr inbounds i8* %tname.0, i64 5
  %22 = load i8* %arrayidx214, align 1, !tbaa !15
  switch i8 %22, label %if.else235 [
    i8 0, label %if.then233
    i8 112, label %land.lhs.true228
    i8 101, label %land.lhs.true228
  ]

land.lhs.true228:                                 ; preds = %land.lhs.true213, %land.lhs.true213
  %arrayidx229 = getelementptr inbounds i8* %tname.0, i64 6
  %23 = load i8* %arrayidx229, align 1, !tbaa !15
  %cmp231 = icmp eq i8 %23, 0
  br i1 %cmp231, label %if.then233, label %if.else235

if.then233:                                       ; preds = %land.lhs.true213, %land.lhs.true167, %land.lhs.true180, %land.lhs.true228
  %or234 = or i32 %flags.addr.0327, 128
  br label %if.end263

if.else235:                                       ; preds = %land.lhs.true213, %land.lhs.true203, %land.lhs.true228, %land.lhs.true198, %land.lhs.true193, %land.lhs.true188, %lor.lhs.false183
  %type = getelementptr inbounds %union.tree_node* %fndecl, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %type, align 8, !tbaa !16
  %type238 = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type238, align 8, !tbaa !16
  %type239 = bitcast %union.tree_node* %25 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type239, i64 0, i32 6
  %bf.load240 = load i32* %mode, align 4
  %bf.lshr241 = lshr i32 %bf.load240, 9
  %bf.clear242 = and i32 %bf.lshr241, 127
  %26 = load i32* @target_flags, align 4, !tbaa !17
  %and243 = lshr i32 %26, 25
  %27 = and i32 %and243, 1
  %28 = or i32 %27, 4
  %cmp245 = icmp eq i32 %bf.clear242, %28
  br i1 %cmp245, label %land.lhs.true247, label %if.end263

land.lhs.true247:                                 ; preds = %if.else235
  %call248 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([7 x i8]* @.str20, i64 0, i64 0)) #4
  %tobool249 = icmp eq i32 %call248, 0
  br i1 %tobool249, label %if.then256, label %lor.lhs.false250

lor.lhs.false250:                                 ; preds = %land.lhs.true247
  %call251 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([7 x i8]* @.str21, i64 0, i64 0)) #4
  %tobool252 = icmp eq i32 %call251, 0
  br i1 %tobool252, label %if.then256, label %lor.lhs.false253

lor.lhs.false253:                                 ; preds = %lor.lhs.false250
  %call254 = tail call i32 @strcmp(i8* %tname.0, i8* getelementptr inbounds ([7 x i8]* @.str22, i64 0, i64 0)) #4
  %tobool255 = icmp eq i32 %call254, 0
  br i1 %tobool255, label %if.then256, label %if.end263

if.then256:                                       ; preds = %lor.lhs.false253, %lor.lhs.false250, %land.lhs.true247
  %or257 = or i32 %flags.addr.0327, 4
  br label %if.end263

if.end263:                                        ; preds = %if.then74, %lor.lhs.false85, %land.lhs.true98, %if.end103.thread348, %lor.lhs.false253, %land.lhs.true10, %land.lhs.true2, %if.then155, %if.else235, %if.then256, %if.then233, %if.then140, %entry, %land.lhs.true7, %land.lhs.true4
  %flags.addr.2 = phi i32 [ %or234, %if.then233 ], [ %flags.addr.0327, %lor.lhs.false253 ], [ %or257, %if.then256 ], [ %flags.addr.0327, %if.else235 ], [ %or156, %if.then155 ], [ %or141, %if.then140 ], [ %flags, %land.lhs.true10 ], [ %flags, %land.lhs.true7 ], [ %flags, %land.lhs.true4 ], [ %flags, %land.lhs.true2 ], [ %flags, %entry ], [ %or102349, %if.end103.thread348 ], [ %flags.addr.0327, %land.lhs.true98 ], [ %flags.addr.0327, %lor.lhs.false85 ], [ %flags.addr.0327, %if.then74 ]
  ret i32 %flags.addr.2
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @expand_call(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %ignore) #0 {
entry:
  %alignment_pad.i = alloca %struct.args_size, align 8
  %old_stack_level.i = alloca %struct.rtx_def*, align 8
  %args_size = alloca %struct.args_size, align 8
  %args_so_far = alloca %struct.ix86_args, align 4
  %old_stack_level = alloca %struct.rtx_def*, align 8
  %call_fusage = alloca %struct.rtx_def*, align 8
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %0 = bitcast i32* %arrayidx to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !1
  %2 = load i32* @target_flags, align 4, !tbaa !17
  %and = and i32 %2, 2048
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %and2 = and i32 %2, 4096
  %phitmp = icmp ne i32 %and2, 0
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %3 = phi i1 [ true, %entry ], [ %phitmp, %land.rhs ]
  %lnot.ext = zext i1 %3 to i32
  %4 = load i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  %5 = load i8** @stack_usage_map, align 8, !tbaa !1
  store %struct.rtx_def* null, %struct.rtx_def** %old_stack_level, align 8, !tbaa !1
  %6 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr = getelementptr inbounds %struct.function* %6, i64 0, i32 2
  %7 = load %struct.expr_status** %expr, align 8, !tbaa !18
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %7, i64 0, i32 1
  %8 = load i32* %x_inhibit_defer_pop, align 4, !tbaa !21
  %arrayidx7 = bitcast i32* %operands to %union.tree_node**
  %9 = load %union.tree_node** %arrayidx7, align 8, !tbaa !1
  %nothrow_flag = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %nothrow_flag, align 8
  %bf.clear = lshr i32 %bf.load, 13
  %10 = and i32 %bf.clear, 16
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %exp) #4
  %tobool9 = icmp ne %union.tree_node* %call, null
  br i1 %tobool9, label %if.then10, label %if.else52

if.then10:                                        ; preds = %land.end
  %11 = load i32* @flag_no_inline, align 4, !tbaa !17
  %tobool11 = icmp ne i32 %11, 0
  %12 = load %union.tree_node** @current_function_decl, align 8
  %cmp = icmp eq %union.tree_node* %call, %12
  %or.cond = or i1 %tobool11, %cmp
  br i1 %or.cond, label %if.else, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %if.then10
  %inline_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 5
  %13 = bitcast i48* %inline_flag to i64*
  %bf.load13 = load i64* %13, align 8
  %bf.cast = and i64 %bf.load13, 2048
  %tobool16 = icmp eq i64 %bf.cast, 0
  br i1 %tobool16, label %if.else, label %land.lhs.true17

land.lhs.true17:                                  ; preds = %land.lhs.true12
  %f = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 19, i32 0
  %14 = load %struct.function** %f, align 8, !tbaa !1
  %tobool19 = icmp eq %struct.function* %14, null
  br i1 %tobool19, label %if.else, label %land.lhs.true20

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %inlinable = getelementptr inbounds %struct.function* %14, i64 0, i32 44
  %15 = load i32* %inlinable, align 4, !tbaa !23
  %tobool24 = icmp eq i32 %15, 0
  br i1 %tobool24, label %if.else, label %land.lhs.true20.if.end49_crit_edge

land.lhs.true20.if.end49_crit_edge:               ; preds = %land.lhs.true20
  %code.i.pre = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  br label %if.end49

if.else:                                          ; preds = %if.then10, %land.lhs.true20, %land.lhs.true17, %land.lhs.true12
  %addressable_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load27 = load i32* %addressable_flag, align 8
  %bf.clear29 = and i32 %bf.load27, 1024
  %tobool30 = icmp eq i32 %bf.clear29, 0
  br i1 %tobool30, label %if.then31, label %if.end49

if.then31:                                        ; preds = %if.else
  %inline_flag33 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 5
  %16 = bitcast i48* %inline_flag33 to i64*
  %bf.load34 = load i64* %16, align 8
  %bf.cast37 = and i64 %bf.load34, 2048
  %17 = load i32* @warn_inline, align 4
  %notlhs = icmp eq i64 %bf.cast37, 0
  %notrhs = icmp eq i32 %17, 0
  %or.cond.not = or i1 %notrhs, %notlhs
  %or.cond1451 = or i1 %or.cond.not, %tobool11
  %or.cond1451.not = xor i1 %or.cond1451, true
  %18 = load i32* @optimize, align 4
  %cmp44 = icmp sgt i32 %18, 0
  %or.cond1452 = and i1 %cmp44, %or.cond1451.not
  br i1 %or.cond1452, label %if.then45, label %if.end46

if.then45:                                        ; preds = %if.then31
  call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %call, i8* getelementptr inbounds ([26 x i8]* @.str, i64 0, i64 0)) #4
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([17 x i8]* @.str1, i64 0, i64 0)) #4
  br label %if.end46

if.end46:                                         ; preds = %if.then31, %if.then45
  %call47 = call i32 @mark_addressable(%union.tree_node* %call) #4
  br label %if.end49

if.end49:                                         ; preds = %land.lhs.true20.if.end49_crit_edge, %if.else, %if.end46
  %code.i.pre-phi = phi i32* [ %code.i.pre, %land.lhs.true20.if.end49_crit_edge ], [ %addressable_flag, %if.else ], [ %addressable_flag, %if.end46 ]
  %is_integrable.0 = phi i32 [ 1, %land.lhs.true20.if.end49_crit_edge ], [ 0, %if.else ], [ 0, %if.end46 ]
  %bf.load.i = load i32* %code.i.pre-phi, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %idxprom100.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom100.i
  %19 = load i8* %arrayidx.i, align 1, !tbaa !15
  %cmp.i = icmp eq i8 %19, 100
  br i1 %cmp.i, label %if.end34.i, label %if.end43.i

if.end34.i:                                       ; preds = %if.end49
  %type3.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type3.i, align 8, !tbaa !16
  %malloc_flag.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 5
  %21 = bitcast i48* %malloc_flag.i to i64*
  %bf.load13.i = load i64* %21, align 8
  %bf.load13.tr.i = trunc i64 %bf.load13.i to i32
  %22 = lshr i32 %bf.load13.tr.i, 25
  %23 = and i32 %22, 4
  %bf.cast30.i = and i64 %bf.load13.i, 2147483648
  %tobool31.i = icmp eq i64 %bf.cast30.i, 0
  %or33.i = or i32 %23, 4608
  %flags.0.or33.i = select i1 %tobool31.i, i32 %23, i32 %or33.i
  %bf.clear38.i = lshr i32 %bf.load.i, 13
  %24 = and i32 %bf.clear38.i, 16
  %25 = or i32 %flags.0.or33.i, %24
  %code68.phi.trans.insert.i = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 2
  %bf.load69.pre.i = load i32* %code68.phi.trans.insert.i, align 8
  br label %if.end43.i

if.end43.i:                                       ; preds = %if.end34.i, %if.end49
  %bf.load69.i = phi i32 [ %bf.load.i, %if.end49 ], [ %bf.load69.pre.i, %if.end34.i ]
  %flags.2.i = phi i32 [ 0, %if.end49 ], [ %25, %if.end34.i ]
  %type.0.i = phi %union.tree_node* [ %call, %if.end49 ], [ %20, %if.end34.i ]
  %26 = and i32 %bf.load.i, 6144
  %27 = icmp eq i32 %26, 4096
  %or56.i = or i32 %flags.2.i, 4097
  %flags.3.i = select i1 %27, i32 %or56.i, i32 %flags.2.i
  %bf.clear53.i = lshr i32 %bf.load.i, 10
  %28 = and i32 %bf.clear53.i, 2
  %29 = or i32 %flags.3.i, %28
  %bf.clear70.i = and i32 %bf.load69.i, 255
  %cmp71.i = icmp eq i32 %bf.clear70.i, 23
  br i1 %cmp71.i, label %land.lhs.true73.i, label %if.end58

land.lhs.true73.i:                                ; preds = %if.end43.i
  %type74.i = bitcast %union.tree_node* %type.0.i to %struct.tree_type*
  %no_force_blk_flag.i = getelementptr inbounds %struct.tree_type* %type74.i, i64 0, i32 6
  %bf.load75.i = load i32* %no_force_blk_flag.i, align 4
  %bf.clear77.i = and i32 %bf.load75.i, 131072
  %tobool78.i = icmp eq i32 %bf.clear77.i, 0
  br i1 %tobool78.i, label %if.end58, label %if.then79.i

if.then79.i:                                      ; preds = %land.lhs.true73.i
  %or80.i = and i32 %29, -5634
  %and.i = or i32 %or80.i, 1024
  br label %if.end58

if.else52:                                        ; preds = %land.end
  %type = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 1
  %30 = load %union.tree_node** %type, align 8, !tbaa !16
  %type55 = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 0, i32 1
  %31 = load %union.tree_node** %type55, align 8, !tbaa !16
  %code.i1840 = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 0, i32 2
  %bf.load.i1841 = load i32* %code.i1840, align 8
  %bf.clear.i1842 = and i32 %bf.load.i1841, 255
  %idxprom100.i1843 = zext i32 %bf.clear.i1842 to i64
  %arrayidx.i1844 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom100.i1843
  %32 = load i8* %arrayidx.i1844, align 1, !tbaa !15
  %cmp.i1845 = icmp eq i8 %32, 100
  br i1 %cmp.i1845, label %if.end34.i1857, label %if.end43.i1866

if.end34.i1857:                                   ; preds = %if.else52
  %type3.i1846 = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 0, i32 1
  %33 = load %union.tree_node** %type3.i1846, align 8, !tbaa !16
  %malloc_flag.i1847 = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 5
  %34 = bitcast i48* %malloc_flag.i1847 to i64*
  %bf.load13.i1848 = load i64* %34, align 8
  %bf.load13.tr.i1849 = trunc i64 %bf.load13.i1848 to i32
  %35 = lshr i32 %bf.load13.tr.i1849, 25
  %36 = and i32 %35, 4
  %bf.cast30.i1850 = and i64 %bf.load13.i1848, 2147483648
  %tobool31.i1851 = icmp eq i64 %bf.cast30.i1850, 0
  %or33.i1852 = or i32 %36, 4608
  %flags.0.or33.i1853 = select i1 %tobool31.i1851, i32 %36, i32 %or33.i1852
  %bf.clear38.i1854 = lshr i32 %bf.load.i1841, 13
  %37 = and i32 %bf.clear38.i1854, 16
  %38 = or i32 %flags.0.or33.i1853, %37
  %code68.phi.trans.insert.i1855 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 2
  %bf.load69.pre.i1856 = load i32* %code68.phi.trans.insert.i1855, align 8
  br label %if.end43.i1866

if.end43.i1866:                                   ; preds = %if.end34.i1857, %if.else52
  %bf.load69.i1858 = phi i32 [ %bf.load.i1841, %if.else52 ], [ %bf.load69.pre.i1856, %if.end34.i1857 ]
  %flags.2.i1859 = phi i32 [ 0, %if.else52 ], [ %38, %if.end34.i1857 ]
  %type.0.i1860 = phi %union.tree_node* [ %31, %if.else52 ], [ %33, %if.end34.i1857 ]
  %39 = and i32 %bf.load.i1841, 6144
  %40 = icmp eq i32 %39, 4096
  %or56.i1861 = or i32 %flags.2.i1859, 4097
  %flags.3.i1862 = select i1 %40, i32 %or56.i1861, i32 %flags.2.i1859
  %bf.clear53.i1863 = lshr i32 %bf.load.i1841, 10
  %41 = and i32 %bf.clear53.i1863, 2
  %42 = or i32 %flags.3.i1862, %41
  %bf.clear70.i1864 = and i32 %bf.load69.i1858, 255
  %cmp71.i1865 = icmp eq i32 %bf.clear70.i1864, 23
  br i1 %cmp71.i1865, label %land.lhs.true73.i1872, label %if.end58

land.lhs.true73.i1872:                            ; preds = %if.end43.i1866
  %type74.i1867 = bitcast %union.tree_node* %type.0.i1860 to %struct.tree_type*
  %no_force_blk_flag.i1868 = getelementptr inbounds %struct.tree_type* %type74.i1867, i64 0, i32 6
  %bf.load75.i1869 = load i32* %no_force_blk_flag.i1868, align 4
  %bf.clear77.i1870 = and i32 %bf.load75.i1869, 131072
  %tobool78.i1871 = icmp eq i32 %bf.clear77.i1870, 0
  br i1 %tobool78.i1871, label %if.end58, label %if.then79.i1875

if.then79.i1875:                                  ; preds = %land.lhs.true73.i1872
  %or80.i1873 = and i32 %42, -5634
  %and.i1874 = or i32 %or80.i1873, 1024
  br label %if.end58

if.end58:                                         ; preds = %if.then79.i, %land.lhs.true73.i, %if.end43.i, %if.then79.i1875, %land.lhs.true73.i1872, %if.end43.i1866
  %flags.5.i.sink = phi i32 [ %and.i1874, %if.then79.i1875 ], [ %42, %land.lhs.true73.i1872 ], [ %42, %if.end43.i1866 ], [ %and.i, %if.then79.i ], [ %29, %land.lhs.true73.i ], [ %29, %if.end43.i ]
  %is_integrable.1 = phi i32 [ 0, %if.then79.i1875 ], [ 0, %land.lhs.true73.i1872 ], [ 0, %if.end43.i1866 ], [ %is_integrable.0, %if.then79.i ], [ %is_integrable.0, %land.lhs.true73.i ], [ %is_integrable.0, %if.end43.i ]
  %or51 = or i32 %flags.5.i.sink, %10
  %43 = load i32* @warn_aggregate_return, align 4, !tbaa !17
  %tobool68 = icmp eq i32 %43, 0
  br i1 %tobool68, label %if.end108, label %land.lhs.true69

land.lhs.true69:                                  ; preds = %if.end58
  %type71 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %44 = load %union.tree_node** %type71, align 8, !tbaa !16
  %code = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 0, i32 2
  %bf.load73 = load i32* %code, align 8
  %bf.clear74 = and i32 %bf.load73, 255
  %bf.clear74.off = add i32 %bf.clear74, -18
  %switch = icmp ult i32 %bf.clear74.off, 5
  br i1 %switch, label %if.then107, label %if.end108

if.then107:                                       ; preds = %land.lhs.true69
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([34 x i8]* @.str2, i64 0, i64 0)) #4
  br label %if.end108

if.end108:                                        ; preds = %land.lhs.true69, %if.end58, %if.then107
  %call109 = call i32 @aggregate_value_p(%union.tree_node* %exp) #4
  %tobool110 = icmp eq i32 %call109, 0
  br i1 %tobool110, label %if.end131, label %if.then111

if.then111:                                       ; preds = %if.end108
  %and112 = and i32 %or51, -4610
  %type114 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %45 = load %union.tree_node** %type114, align 8, !tbaa !16
  %call115 = call i64 @int_size_in_bytes(%union.tree_node* %45) #4
  %tobool116 = icmp eq %struct.rtx_def* %target, null
  br i1 %tobool116, label %if.else123, label %land.lhs.true117

land.lhs.true117:                                 ; preds = %if.then111
  %46 = getelementptr inbounds %struct.rtx_def* %target, i64 0, i32 0
  %bf.load118 = load i32* %46, align 8
  %bf.clear119 = and i32 %bf.load118, 65535
  %cmp120 = icmp eq i32 %bf.clear119, 66
  br i1 %cmp120, label %if.then121, label %if.else123

if.then121:                                       ; preds = %land.lhs.true117
  %arrayidx122 = getelementptr inbounds %struct.rtx_def* %target, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**
  %47 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  br label %if.end131

if.else123:                                       ; preds = %if.then111, %land.lhs.true117
  %48 = load %union.tree_node** %type114, align 8, !tbaa !16
  %call126 = call %struct.rtx_def* @assign_temp(%union.tree_node* %48, i32 1, i32 1, i32 1) #4
  call void @mark_temp_addr_taken(%struct.rtx_def* %call126) #4
  %arrayidx128 = getelementptr inbounds %struct.rtx_def* %call126, i64 0, i32 1, i64 0
  %rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**
  %49 = load %struct.rtx_def** %rtx129, align 8, !tbaa !1
  br label %if.end131

if.end131:                                        ; preds = %if.end108, %if.then121, %if.else123
  %flags.0.load2252 = phi i32 [ %and112, %if.then121 ], [ %and112, %if.else123 ], [ %or51, %if.end108 ]
  %struct_value_size.0 = phi i64 [ %call115, %if.then121 ], [ %call115, %if.else123 ], [ 0, %if.end108 ]
  %structure_value_addr.0 = phi %struct.rtx_def* [ %47, %if.then121 ], [ %49, %if.else123 ], [ null, %if.end108 ]
  %target.addr.0 = phi %struct.rtx_def* [ %target, %if.then121 ], [ null, %if.else123 ], [ %target, %if.end108 ]
  %tobool132 = icmp eq i32 %is_integrable.1, 0
  br i1 %tobool132, label %if.end140, label %if.then133

if.then133:                                       ; preds = %if.end131
  %type135 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %50 = load %union.tree_node** %type135, align 8, !tbaa !16
  %51 = bitcast %struct.rtx_def** %old_stack_level.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %51) #4
  store %struct.rtx_def* null, %struct.rtx_def** %old_stack_level.i, align 8, !tbaa !1
  %call.i1878 = call %struct.rtx_def* @get_last_insn() #4
  call void @timevar_push(i32 12) #4
  %call1.i1879 = call %struct.rtx_def* @expand_inline_function(%union.tree_node* %call, %union.tree_node* %1, %struct.rtx_def* %target.addr.0, i32 %ignore, %union.tree_node* %50, %struct.rtx_def* %structure_value_addr.0) #4
  call void @timevar_pop(i32 12) #4
  %cmp.i1880 = icmp eq %struct.rtx_def* %call1.i1879, inttoptr (i64 -1 to %struct.rtx_def*)
  br i1 %cmp.i1880, label %if.end52.i, label %if.then.i1882

if.then.i1882:                                    ; preds = %if.then133
  %52 = load i32* @target_flags, align 4, !tbaa !17
  %and.i1881 = and i32 %52, 4096
  %tobool.i = icmp eq i32 %and.i1881, 0
  %53 = load i32* @stack_arg_under_construction, align 4
  %tobool8.i = icmp eq i32 %53, 0
  %or.cond.i = or i1 %tobool.i, %tobool8.i
  br i1 %or.cond.i, label %if.end44.i, label %if.then11.i

if.then11.i:                                      ; preds = %if.then.i1882
  %tobool12.i = icmp eq %struct.rtx_def* %call.i1878, null
  br i1 %tobool12.i, label %cond.false.i, label %cond.true.i

cond.true.i:                                      ; preds = %if.then11.i
  %arrayidx13.i = getelementptr inbounds %struct.rtx_def* %call.i1878, i64 0, i32 1, i64 2
  %rtx.i = bitcast %union.rtunion_def* %arrayidx13.i to %struct.rtx_def**
  %54 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.then11.i
  %call14.i = call %struct.rtx_def* @get_insns() #4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi %struct.rtx_def* [ %54, %cond.true.i ], [ %call14.i, %cond.false.i ]
  %f.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 19, i32 0
  %55 = load %struct.function** %f.i, align 8, !tbaa !1
  %outgoing_args_size.i = getelementptr inbounds %struct.function* %55, i64 0, i32 11
  %56 = load i32* %outgoing_args_size.i, align 4, !tbaa !24
  %cmp15.i = icmp ne i32 %56, 0
  %tobool19100.i = icmp eq %struct.rtx_def* %cond.i, null
  %or.cond102.i = or i1 %cmp15.i, %tobool19100.i
  br i1 %or.cond102.i, label %if.end44.i, label %for.body20.i

for.body20.i:                                     ; preds = %cond.end.i, %for.inc25.i
  %insn.0101.i = phi %struct.rtx_def* [ %58, %for.inc25.i ], [ %cond.i, %cond.end.i ]
  %57 = getelementptr inbounds %struct.rtx_def* %insn.0101.i, i64 0, i32 0
  %bf.load.i1883 = load i32* %57, align 8
  %bf.clear.i1884 = and i32 %bf.load.i1883, 65535
  %cmp21.i = icmp eq i32 %bf.clear.i1884, 34
  br i1 %cmp21.i, label %if.then32.i, label %for.inc25.i

for.inc25.i:                                      ; preds = %for.body20.i
  %arrayidx27.i = getelementptr inbounds %struct.rtx_def* %insn.0101.i, i64 0, i32 1, i64 2
  %rtx28.i = bitcast %union.rtunion_def* %arrayidx27.i to %struct.rtx_def**
  %58 = load %struct.rtx_def** %rtx28.i, align 8, !tbaa !1
  %tobool19.i = icmp eq %struct.rtx_def* %58, null
  br i1 %tobool19.i, label %if.end44.i, label %for.body20.i

if.then32.i:                                      ; preds = %for.body20.i
  call void @start_sequence() #4
  call void @emit_stack_save(i32 0, %struct.rtx_def** %old_stack_level.i, %struct.rtx_def* null) #4
  %call38.i = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 0) #4
  %call39.i = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %call38.i, %struct.rtx_def* null, i32 8) #4
  %call40.i = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %call41.i = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %call40.i, %struct.rtx_def* %cond.i) #4
  %59 = load %struct.rtx_def** %old_stack_level.i, align 8, !tbaa !1
  call void @emit_stack_restore(i32 0, %struct.rtx_def* %59, %struct.rtx_def* null) #4
  br label %if.end44.i

if.end44.i:                                       ; preds = %for.inc25.i, %if.then32.i, %cond.end.i, %if.then.i1882
  %cmp45.i = icmp eq %struct.rtx_def* %call1.i1879, %target.addr.0
  br i1 %cmp45.i, label %if.end51.i, label %land.lhs.true47.i

land.lhs.true47.i:                                ; preds = %if.end44.i
  %call48.i = call i32 @rtx_equal_p(%struct.rtx_def* %call1.i1879, %struct.rtx_def* %target.addr.0) #4
  %tobool49.i = icmp eq i32 %call48.i, 0
  br i1 %tobool49.i, label %if.end51.i, label %try_to_integrate.exit

if.end51.i:                                       ; preds = %land.lhs.true47.i, %if.end44.i
  br label %try_to_integrate.exit

if.end52.i:                                       ; preds = %if.then133
  %inline_flag.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 5
  %60 = bitcast i48* %inline_flag.i to i64*
  %bf.load54.i = load i64* %60, align 8
  %bf.cast.i = and i64 %bf.load54.i, 2048
  %61 = load i32* @warn_inline, align 4
  %notlhs.i = icmp eq i64 %bf.cast.i, 0
  %notrhs.i = icmp eq i32 %61, 0
  %or.cond72.not.i = or i1 %notrhs.i, %notlhs.i
  %62 = load i32* @flag_no_inline, align 4
  %tobool60.i = icmp ne i32 %62, 0
  %or.cond73.i = or i1 %or.cond72.not.i, %tobool60.i
  %or.cond73.not.i = xor i1 %or.cond73.i, true
  %63 = load i32* @optimize, align 4
  %cmp62.i = icmp sgt i32 %63, 0
  %or.cond74.i = and i1 %cmp62.i, %or.cond73.not.i
  br i1 %or.cond74.i, label %land.lhs.true64.i, label %try_to_integrate.exit.thread

land.lhs.true64.i:                                ; preds = %if.end52.i
  %addressable_flag.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load65.i = load i32* %addressable_flag.i, align 8
  %bf.clear67.i = and i32 %bf.load65.i, 1024
  %tobool68.i = icmp eq i32 %bf.clear67.i, 0
  br i1 %tobool68.i, label %if.then69.i, label %try_to_integrate.exit.thread

if.then69.i:                                      ; preds = %land.lhs.true64.i
  call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %call, i8* getelementptr inbounds ([32 x i8]* @.str7, i64 0, i64 0)) #4
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([17 x i8]* @.str1, i64 0, i64 0)) #4
  br label %try_to_integrate.exit.thread

try_to_integrate.exit.thread:                     ; preds = %if.end52.i, %land.lhs.true64.i, %if.then69.i
  %call71.i = call i32 @mark_addressable(%union.tree_node* %call) #4
  call void @llvm.lifetime.end(i64 8, i8* %51) #4
  br label %if.end140

try_to_integrate.exit:                            ; preds = %land.lhs.true47.i, %if.end51.i
  %retval.0.i = phi %struct.rtx_def* [ %call1.i1879, %if.end51.i ], [ %target.addr.0, %land.lhs.true47.i ]
  call void @llvm.lifetime.end(i64 8, i8* %51) #4
  %cmp137 = icmp eq %struct.rtx_def* %retval.0.i, inttoptr (i64 -1 to %struct.rtx_def*)
  br i1 %cmp137, label %if.end140, label %return

if.end140:                                        ; preds = %try_to_integrate.exit.thread, %try_to_integrate.exit, %if.end131
  %64 = load i32* @ix86_preferred_stack_boundary, align 4, !tbaa !17
  %conv = sext i32 %64 to i64
  %65 = load %union.tree_node** %arrayidx7, align 8, !tbaa !1
  %type145 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 0, i32 1
  %66 = load %union.tree_node** %type145, align 8, !tbaa !16
  %code147 = getelementptr inbounds %union.tree_node* %66, i64 0, i32 0, i32 0, i32 2
  %bf.load148 = load i32* %code147, align 8
  %bf.clear149 = and i32 %bf.load148, 255
  switch i32 %bf.clear149, label %if.then159 [
    i32 13, label %if.end160
    i32 15, label %if.end160
  ]

if.then159:                                       ; preds = %if.end140
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 2299, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.expand_call, i64 0, i64 0)) #7
  unreachable

if.end160:                                        ; preds = %if.end140, %if.end140
  %type162 = getelementptr inbounds %union.tree_node* %66, i64 0, i32 0, i32 0, i32 1
  %67 = load %union.tree_node** %type162, align 8, !tbaa !16
  %call163 = call fastcc i32 @special_function_p(%union.tree_node* %call, i32 %flags.0.load2252)
  %or164 = or i32 %call163, %flags.0.load2252
  %and165 = and i32 %or164, 8
  %tobool166 = icmp eq i32 %and165, 0
  br i1 %tobool166, label %if.end170, label %if.then167

if.then167:                                       ; preds = %if.end160
  %68 = load %struct.function** @cfun, align 8, !tbaa !1
  %calls_alloca = getelementptr inbounds %struct.function* %68, i64 0, i32 56
  %69 = bitcast i24* %calls_alloca to i32*
  %bf.load168 = load i32* %69, align 8
  %bf.set = or i32 %bf.load168, 64
  store i32 %bf.set, i32* %69, align 8
  br label %if.end170

if.end170:                                        ; preds = %if.end160, %if.then167
  %tobool171 = icmp ne %struct.rtx_def* %structure_value_addr.0, null
  %70 = load %struct.rtx_def** @struct_value_rtx, align 8
  %cmp173 = icmp eq %struct.rtx_def* %70, null
  %or.cond1453 = and i1 %tobool171, %cmp173
  br i1 %or.cond1453, label %if.then175, label %if.end195

if.then175:                                       ; preds = %if.end170
  %71 = getelementptr inbounds %struct.rtx_def* %structure_value_addr.0, i64 0, i32 0
  %bf.load177 = load i32* %71, align 8
  %bf.clear178 = and i32 %bf.load177, 65535
  %cmp179 = icmp eq i32 %bf.clear178, 61
  br i1 %cmp179, label %lor.lhs.false181, label %cond.true

lor.lhs.false181:                                 ; preds = %if.then175
  %72 = load i32* @target_flags, align 4, !tbaa !17
  %and182 = and i32 %72, 4096
  %tobool183 = icmp ne i32 %and182, 0
  %73 = load i32* @stack_arg_under_construction, align 4
  %tobool185 = icmp ne i32 %73, 0
  %or.cond1454 = and i1 %tobool183, %tobool185
  %74 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8
  %cmp187 = icmp eq %struct.rtx_def* %structure_value_addr.0, %74
  %or.cond1828 = and i1 %or.cond1454, %cmp187
  br i1 %or.cond1828, label %cond.true, label %cond.end

cond.true:                                        ; preds = %lor.lhs.false181, %if.then175
  %call189 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %structure_value_addr.0) #4
  br label %cond.end

cond.end:                                         ; preds = %lor.lhs.false181, %cond.true
  %cond = phi %struct.rtx_def* [ %call189, %cond.true ], [ %structure_value_addr.0, %lor.lhs.false181 ]
  %75 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !1
  %type191 = getelementptr inbounds %union.tree_node* %67, i64 0, i32 0, i32 0, i32 1
  %76 = load %union.tree_node** %type191, align 8, !tbaa !16
  %call192 = call %union.tree_node* @build_pointer_type(%union.tree_node* %76) #4
  %call193 = call %union.tree_node* @make_tree(%union.tree_node* %call192, %struct.rtx_def* %cond) #4
  %call194 = call %union.tree_node* @tree_cons(%union.tree_node* %75, %union.tree_node* %call193, %union.tree_node* %1) #4
  br label %if.end195

if.end195:                                        ; preds = %cond.end, %if.end170
  %structure_value_addr_parm.0 = phi i32 [ 1, %cond.end ], [ 0, %if.end170 ]
  %actparms.0 = phi %union.tree_node* [ %call194, %cond.end ], [ %1, %if.end170 ]
  %tobool1962370 = icmp eq %union.tree_node* %actparms.0, null
  br i1 %tobool1962370, label %for.end, label %for.body

for.body:                                         ; preds = %if.end195, %for.body
  %num_actuals.02372 = phi i32 [ %inc, %for.body ], [ 0, %if.end195 ]
  %p.02371 = phi %union.tree_node* [ %77, %for.body ], [ %actparms.0, %if.end195 ]
  %inc = add nsw i32 %num_actuals.02372, 1
  %chain = getelementptr inbounds %union.tree_node* %p.02371, i64 0, i32 0, i32 0, i32 0
  %77 = load %union.tree_node** %chain, align 8, !tbaa !25
  %tobool196 = icmp eq %union.tree_node* %77, null
  br i1 %tobool196, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.end195
  %num_actuals.0.lcssa = phi i32 [ 0, %if.end195 ], [ %inc, %for.body ]
  call void @init_cumulative_args(%struct.ix86_args* %args_so_far, %union.tree_node* %67, %struct.rtx_def* null) #4
  %conv198 = sext i32 %num_actuals.0.lcssa to i64
  %mul = mul i64 %conv198, 168
  %78 = alloca i8, i64 %mul, align 1
  %79 = bitcast i8* %78 to %struct.arg_data*
  call void @llvm.memset.p0i8.i64(i8* %78, i8 0, i64 %mul, i32 1, i1 false)
  %80 = bitcast %struct.args_size* %alignment_pad.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %80) #4
  %constant.i = getelementptr inbounds %struct.args_size* %args_size, i64 0, i32 0
  %var.i = getelementptr inbounds %struct.args_size* %args_size, i64 0, i32 1
  %81 = bitcast %struct.args_size* %args_size to i8*
  call void @llvm.memset.p0i8.i64(i8* %81, i8 0, i64 16, i32 8, i1 false) #4
  %82 = load i32* @target_flags, align 4, !tbaa !17
  %83 = and i32 %82, 6144
  %84 = icmp eq i32 %83, 0
  br i1 %tobool1962370, label %if.end204, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %for.end
  %sub.i1885 = add nsw i32 %num_actuals.0.lcssa, -1
  %85 = sext i32 %sub.i1885 to i64
  %86 = select i1 %84, i64 %85, i64 0
  %87 = select i1 %84, i64 -1, i64 1
  br label %for.body.i

for.body.i:                                       ; preds = %if.end439.i, %for.body.lr.ph.i
  %lnot.ext2254 = phi i32 [ %lnot.ext, %for.body.lr.ph.i ], [ %lnot.ext2254., %if.end439.i ]
  %flags.0.load2248 = phi i32 [ %or164, %for.body.lr.ph.i ], [ %flags.0.load2250, %if.end439.i ]
  %88 = phi i32 [ 0, %for.body.lr.ph.i ], [ %133, %if.end439.i ]
  %indvars.iv.i = phi i64 [ %86, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %if.end439.i ]
  %argpos.08.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc449.i, %if.end439.i ]
  %p.06.i = phi %union.tree_node* [ %actparms.0, %for.body.lr.ph.i ], [ %161, %if.end439.i ]
  %value.i = getelementptr inbounds %union.tree_node* %p.06.i, i64 0, i32 0, i32 2
  %89 = bitcast i32* %value.i to %union.tree_node**
  %90 = load %union.tree_node** %89, align 8, !tbaa !26
  %type4.i = getelementptr inbounds %union.tree_node* %90, i64 0, i32 0, i32 0, i32 1
  %91 = load %union.tree_node** %type4.i, align 8, !tbaa !16
  %tree_value.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 0
  store %union.tree_node* %90, %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %92 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !1
  %cmp.i1886 = icmp eq %union.tree_node* %91, %92
  br i1 %cmp.i1886, label %if.then9.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %for.body.i
  %size.i = getelementptr inbounds %union.tree_node* %91, i64 0, i32 0, i32 2
  %93 = bitcast i32* %size.i to %union.tree_node**
  %94 = load %union.tree_node** %93, align 8, !tbaa !31
  %cmp8.i = icmp eq %union.tree_node* %94, null
  br i1 %cmp8.i, label %if.then9.i, label %if.end13.i

if.then9.i:                                       ; preds = %lor.lhs.false.i, %for.body.i
  %95 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !1
  store %union.tree_node* %95, %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %96 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !1
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.then9.i, %lor.lhs.false.i
  %type.0.i1887 = phi %union.tree_node* [ %96, %if.then9.i ], [ %91, %lor.lhs.false.i ]
  %code.i1888 = getelementptr inbounds %union.tree_node* %type.0.i1887, i64 0, i32 0, i32 0, i32 2
  %bf.load.i1889 = load i32* %code.i1888, align 8
  %bf.clear.i1890 = and i32 %bf.load.i1889, 255
  %cmp15.i1891 = icmp eq i32 %bf.clear.i1890, 21
  br i1 %cmp15.i1891, label %land.lhs.true16.i, label %if.end25.i

land.lhs.true16.i:                                ; preds = %if.end13.i
  %type17.i = bitcast %union.tree_node* %type.0.i1887 to %struct.tree_type*
  %transparent_union_flag.i = getelementptr inbounds %struct.tree_type* %type17.i, i64 0, i32 6
  %bf.load18.i = load i32* %transparent_union_flag.i, align 4
  %bf.clear19.i = and i32 %bf.load18.i, 524288
  %tobool20.i = icmp eq i32 %bf.clear19.i, 0
  br i1 %tobool20.i, label %if.end25.i, label %if.then21.i

if.then21.i:                                      ; preds = %land.lhs.true16.i
  %values.i = getelementptr inbounds %union.tree_node* %type.0.i1887, i64 0, i32 0, i32 1
  %97 = load i8** %values.i, align 8
  %type24.i = getelementptr inbounds i8* %97, i64 8
  %98 = bitcast i8* %type24.i to %union.tree_node**
  %99 = load %union.tree_node** %98, align 8, !tbaa !16
  br label %if.end25.i

if.end25.i:                                       ; preds = %if.then21.i, %land.lhs.true16.i, %if.end13.i
  %type.1.i = phi %union.tree_node* [ %99, %if.then21.i ], [ %type.0.i1887, %land.lhs.true16.i ], [ %type.0.i1887, %if.end13.i ]
  %size27.i = getelementptr inbounds %union.tree_node* %type.1.i, i64 0, i32 0, i32 2
  %100 = bitcast i32* %size27.i to %union.tree_node**
  %101 = load %union.tree_node** %100, align 8, !tbaa !31
  %code29.i = getelementptr inbounds %union.tree_node* %101, i64 0, i32 0, i32 0, i32 2
  %bf.load30.i = load i32* %code29.i, align 8
  %bf.clear31.i = and i32 %bf.load30.i, 255
  %cmp32.i = icmp eq i32 %bf.clear31.i, 25
  br i1 %cmp32.i, label %lor.lhs.false37.i, label %land.lhs.true33.i

land.lhs.true33.i:                                ; preds = %if.end25.i
  %call.i1892 = call i32 @contains_placeholder_p(%union.tree_node* %101) #4
  %tobool36.i = icmp eq i32 %call.i1892, 0
  br i1 %tobool36.i, label %lor.lhs.false37.i, label %if.then43.i

lor.lhs.false37.i:                                ; preds = %land.lhs.true33.i, %if.end25.i
  %addressable_flag.i1893 = getelementptr inbounds %union.tree_node* %type.1.i, i64 0, i32 0, i32 0, i32 2
  %bf.load39.i = load i32* %addressable_flag.i1893, align 8
  %bf.clear41.i = and i32 %bf.load39.i, 1024
  %tobool42.i = icmp eq i32 %bf.clear41.i, 0
  br i1 %tobool42.i, label %if.end200.i, label %if.then43.i

if.then43.i:                                      ; preds = %lor.lhs.false37.i, %land.lhs.true33.i
  %102 = load %struct.function** @cfun, align 8, !tbaa !1
  %is_thunk.i = getelementptr inbounds %struct.function* %102, i64 0, i32 56
  %103 = bitcast i24* %is_thunk.i to i32*
  %bf.load44.i = load i32* %103, align 8
  %bf.clear46.i = and i32 %bf.load44.i, 4096
  %tobool47.i = icmp eq i32 %bf.clear46.i, 0
  %104 = load %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %code53.i = getelementptr inbounds %union.tree_node* %104, i64 0, i32 0, i32 0, i32 2
  %bf.load54.i1894 = load i32* %code53.i, align 8
  %bf.clear55.i = and i32 %bf.load54.i1894, 255
  %cmp56.i = icmp eq i32 %bf.clear55.i, 50
  br i1 %tobool47.i, label %if.else124.i, label %if.then48.i

if.then48.i:                                      ; preds = %if.then43.i
  br i1 %cmp56.i, label %land.lhs.true57.i, label %if.end114.i

land.lhs.true57.i:                                ; preds = %if.then48.i
  %operands.i = getelementptr inbounds %union.tree_node* %104, i64 0, i32 0, i32 2
  %arrayidx61.i = getelementptr inbounds i32* %operands.i, i64 2
  %105 = bitcast i32* %arrayidx61.i to %union.tree_node**
  %106 = load %union.tree_node** %105, align 8, !tbaa !1
  %code63.i = getelementptr inbounds %union.tree_node* %106, i64 0, i32 0, i32 0, i32 2
  %bf.load64.i = load i32* %code63.i, align 8
  %bf.clear65.i = and i32 %bf.load64.i, 255
  %idxprom662.i = zext i32 %bf.clear65.i to i64
  %arrayidx67.i = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom662.i
  %107 = load i8* %arrayidx67.i, align 1, !tbaa !15
  %cmp68.i = icmp eq i8 %107, 100
  br i1 %cmp68.i, label %land.lhs.true70.i, label %if.end114.i

land.lhs.true70.i:                                ; preds = %land.lhs.true57.i
  %rtl.i = getelementptr inbounds %union.tree_node* %106, i64 0, i32 0, i32 17
  %108 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !33
  %tobool77.i = icmp eq %struct.rtx_def* %108, null
  br i1 %tobool77.i, label %cond.false.i1895, label %cond.end.i1897

cond.false.i1895:                                 ; preds = %land.lhs.true70.i
  call void @make_decl_rtl(%union.tree_node* %106, i8* null) #4
  %109 = load %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %operands96.i = getelementptr inbounds %union.tree_node* %109, i64 0, i32 0, i32 2
  %arrayidx97.i = getelementptr inbounds i32* %operands96.i, i64 2
  %110 = bitcast i32* %arrayidx97.i to %union.tree_node**
  %111 = load %union.tree_node** %110, align 8, !tbaa !1
  %rtl99.i = getelementptr inbounds %union.tree_node* %111, i64 0, i32 0, i32 17
  %112 = load %struct.rtx_def** %rtl99.i, align 8, !tbaa !33
  br label %cond.end.i1897

cond.end.i1897:                                   ; preds = %cond.false.i1895, %land.lhs.true70.i
  %113 = phi %union.tree_node* [ %111, %cond.false.i1895 ], [ %106, %land.lhs.true70.i ]
  %cond.i1896 = phi %struct.rtx_def* [ %112, %cond.false.i1895 ], [ %108, %land.lhs.true70.i ]
  %114 = getelementptr inbounds %struct.rtx_def* %cond.i1896, i64 0, i32 0
  %bf.load100.i = load i32* %114, align 8
  %bf.clear101.i = and i32 %bf.load100.i, 65535
  %cmp102.i = icmp eq i32 %bf.clear101.i, 61
  br i1 %cmp102.i, label %if.end114.i, label %if.then104.i

if.then104.i:                                     ; preds = %cond.end.i1897
  store %union.tree_node* %113, %union.tree_node** %tree_value.i, align 8, !tbaa !28
  br label %if.end114.i

if.end114.i:                                      ; preds = %if.then104.i, %cond.end.i1897, %land.lhs.true57.i, %if.then48.i
  %call115.i = call %union.tree_node* @build_pointer_type(%union.tree_node* %type.1.i) #4
  %115 = load %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %call119.i = call %union.tree_node* @build1(i32 121, %union.tree_node* %call115.i, %union.tree_node* %115) #4
  store %union.tree_node* %call119.i, %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %call123.i = call %union.tree_node* @build_pointer_type(%union.tree_node* %type.1.i) #4
  br label %if.end200.i

if.else124.i:                                     ; preds = %if.then43.i
  br i1 %cmp56.i, label %if.then134.i, label %if.else144.i

if.then134.i:                                     ; preds = %if.else124.i
  %call135.i = call %union.tree_node* @build_pointer_type(%union.tree_node* %type.1.i) #4
  %116 = load %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %call139.i = call %union.tree_node* @build1(i32 121, %union.tree_node* %call135.i, %union.tree_node* %116) #4
  store %union.tree_node* %call139.i, %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %call143.i = call %union.tree_node* @build_pointer_type(%union.tree_node* %type.1.i) #4
  br label %if.end200.i

if.else144.i:                                     ; preds = %if.else124.i
  %117 = load %union.tree_node** %100, align 8, !tbaa !31
  %cmp147.i = icmp eq %union.tree_node* %117, null
  br i1 %cmp147.i, label %if.then170.i, label %lor.lhs.false149.i

lor.lhs.false149.i:                               ; preds = %if.else144.i
  %code153.i = getelementptr inbounds %union.tree_node* %117, i64 0, i32 0, i32 0, i32 2
  %bf.load154.i = load i32* %code153.i, align 8
  %bf.clear155.i = and i32 %bf.load154.i, 255
  %cmp156.i = icmp eq i32 %bf.clear155.i, 25
  br i1 %cmp156.i, label %lor.lhs.false158.i, label %if.then170.i

lor.lhs.false158.i:                               ; preds = %lor.lhs.false149.i
  %118 = load i32* @flag_stack_check, align 4, !tbaa !17
  %tobool159.i = icmp eq i32 %118, 0
  br i1 %tobool159.i, label %if.else183.i, label %land.lhs.true160.i

land.lhs.true160.i:                               ; preds = %lor.lhs.false158.i
  %119 = getelementptr inbounds %union.tree_node* %type.1.i, i64 0, i32 0, i32 4
  %120 = load %union.tree_node** %119, align 8, !tbaa !34
  %121 = load i32* @target_flags, align 4, !tbaa !17
  %and162.i = lshr i32 %121, 23
  %122 = and i32 %and162.i, 4
  %sub165.i = sub i32 4092, %122
  %div.i = udiv i32 %sub165.i, 100
  %conv1661.i = zext i32 %div.i to i64
  %call167.i = call i32 @compare_tree_int(%union.tree_node* %120, i64 %conv1661.i) #4
  %cmp168.i = icmp sgt i32 %call167.i, 0
  br i1 %cmp168.i, label %if.then170.i, label %if.else183.i

if.then170.i:                                     ; preds = %land.lhs.true160.i, %lor.lhs.false149.i, %if.else144.i
  %123 = load %union.tree_node** %89, align 8, !tbaa !26
  %call173.i = call %struct.rtx_def* @expr_size(%union.tree_node* %123) #4
  %124 = load %struct.rtx_def** %old_stack_level, align 8, !tbaa !1
  %cmp174.i = icmp eq %struct.rtx_def* %124, null
  br i1 %cmp174.i, label %if.then176.i, label %if.end179.i

if.then176.i:                                     ; preds = %if.then170.i
  call void @emit_stack_save(i32 0, %struct.rtx_def** %old_stack_level, %struct.rtx_def* null) #4
  %125 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr.i = getelementptr inbounds %struct.function* %125, i64 0, i32 2
  %126 = load %struct.expr_status** %expr.i, align 8, !tbaa !18
  %x_pending_stack_adjust.i = getelementptr inbounds %struct.expr_status* %126, i64 0, i32 0
  %127 = load i32* %x_pending_stack_adjust.i, align 4, !tbaa !35
  store i32 0, i32* %x_pending_stack_adjust.i, align 4, !tbaa !35
  br label %if.end179.i

if.end179.i:                                      ; preds = %if.then176.i, %if.then170.i
  %128 = phi i32 [ %127, %if.then176.i ], [ %88, %if.then170.i ]
  %align.i = getelementptr inbounds %union.tree_node* %type.1.i, i64 0, i32 0, i32 7
  %129 = bitcast %union.tree_node** %align.i to i32*
  %130 = load i32* %129, align 4, !tbaa !36
  %call181.i = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %call173.i, %struct.rtx_def* null, i32 %130) #4
  %call182.i = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call181.i) #4
  call void @set_mem_attributes(%struct.rtx_def* %call182.i, %union.tree_node* %type.1.i, i32 1) #4
  br label %if.end185.i

if.else183.i:                                     ; preds = %land.lhs.true160.i, %lor.lhs.false158.i
  %call184.i = call %struct.rtx_def* @assign_temp(%union.tree_node* %type.1.i, i32 0, i32 1, i32 0) #4
  br label %if.end185.i

if.end185.i:                                      ; preds = %if.else183.i, %if.end179.i
  %131 = phi i32 [ %128, %if.end179.i ], [ %88, %if.else183.i ]
  %copy.0.i = phi %struct.rtx_def* [ %call182.i, %if.end179.i ], [ %call184.i, %if.else183.i ]
  %132 = load %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %call189.i = call %struct.rtx_def* @store_expr(%union.tree_node* %132, %struct.rtx_def* %copy.0.i, i32 0) #4
  %and190.i = and i32 %flags.0.load2248, -4610
  %call191.i = call %union.tree_node* @build_pointer_type(%union.tree_node* %type.1.i) #4
  %call192.i = call %union.tree_node* @make_tree(%union.tree_node* %type.1.i, %struct.rtx_def* %copy.0.i) #4
  %call193.i = call %union.tree_node* @build1(i32 121, %union.tree_node* %call191.i, %union.tree_node* %call192.i) #4
  store %union.tree_node* %call193.i, %union.tree_node** %tree_value.i, align 8, !tbaa !28
  %call197.i = call %union.tree_node* @build_pointer_type(%union.tree_node* %type.1.i) #4
  br label %if.end200.i

if.end200.i:                                      ; preds = %if.end185.i, %if.then134.i, %if.end114.i, %lor.lhs.false37.i
  %flags.0.load2247 = phi i32 [ %flags.0.load2248, %if.end114.i ], [ %flags.0.load2248, %if.then134.i ], [ %and190.i, %if.end185.i ], [ %flags.0.load2248, %lor.lhs.false37.i ]
  %133 = phi i32 [ %88, %if.end114.i ], [ %88, %if.then134.i ], [ %131, %if.end185.i ], [ %88, %lor.lhs.false37.i ]
  %type.2.i = phi %union.tree_node* [ %call123.i, %if.end114.i ], [ %call143.i, %if.then134.i ], [ %call197.i, %if.end185.i ], [ %type.1.i, %lor.lhs.false37.i ]
  %type201.i = bitcast %union.tree_node* %type.2.i to %struct.tree_type*
  %mode202.i = getelementptr inbounds %struct.tree_type* %type201.i, i64 0, i32 6
  %bf.load203.i = load i32* %mode202.i, align 4
  %bf.lshr204.i = lshr i32 %bf.load203.i, 9
  %bf.clear205.i = and i32 %bf.lshr204.i, 127
  %unsigned_flag.i = getelementptr inbounds %union.tree_node* %type.2.i, i64 0, i32 0, i32 0, i32 2
  %bf.load207.i = load i32* %unsigned_flag.i, align 8
  %bf.lshr208.i = lshr i32 %bf.load207.i, 13
  %bf.clear209.i = and i32 %bf.lshr208.i, 1
  %unsignedp212.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 6
  store i32 %bf.clear209.i, i32* %unsignedp212.i, align 4, !tbaa !37
  %mode215.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 1
  store i32 %bf.clear205.i, i32* %mode215.i, align 4, !tbaa !38
  %cmp216.i = icmp slt i32 %argpos.08.i, %num_actuals.0.lcssa
  %conv217.i = zext i1 %cmp216.i to i32
  %call218.i = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %bf.clear205.i, %union.tree_node* %type.2.i, i32 %conv217.i) #4
  %reg.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 4
  store %struct.rtx_def* %call218.i, %struct.rtx_def** %reg.i, align 8, !tbaa !39
  %tail_call_reg.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 5
  store %struct.rtx_def* %call218.i, %struct.rtx_def** %tail_call_reg.i, align 8, !tbaa !40
  %tobool229.i = icmp eq %struct.rtx_def* %call218.i, null
  br i1 %tobool229.i, label %if.end233.i, label %if.then230.i

if.then230.i:                                     ; preds = %if.end200.i
  %partial.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 7
  store i32 0, i32* %partial.i, align 4, !tbaa !41
  br label %if.end233.i

if.end233.i:                                      ; preds = %if.then230.i, %if.end200.i
  %cmp234.i = icmp eq %union.tree_node* %type.2.i, null
  br i1 %cmp234.i, label %land.end278.i, label %land.rhs.i

land.rhs.i:                                       ; preds = %if.end233.i
  %size237.i = getelementptr inbounds %union.tree_node* %type.2.i, i64 0, i32 0, i32 2
  %134 = bitcast i32* %size237.i to %union.tree_node**
  %135 = load %union.tree_node** %134, align 8, !tbaa !31
  %code239.i = getelementptr inbounds %union.tree_node* %135, i64 0, i32 0, i32 0, i32 2
  %bf.load240.i = load i32* %code239.i, align 8
  %bf.clear241.i = and i32 %bf.load240.i, 255
  %cmp242.i = icmp eq i32 %bf.clear241.i, 25
  br i1 %cmp242.i, label %lor.lhs.false244.i, label %land.end278.i

lor.lhs.false244.i:                               ; preds = %land.rhs.i
  %bf.load247.i = load i32* %unsigned_flag.i, align 8
  %bf.clear249.i = and i32 %bf.load247.i, 1024
  %tobool250.i = icmp ne i32 %bf.clear249.i, 0
  %cmp252.i = icmp eq i32 %bf.clear205.i, 6
  %or.cond.i1898 = or i1 %tobool250.i, %cmp252.i
  br i1 %or.cond.i1898, label %land.end278.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %lor.lhs.false244.i
  %cmp254.i = icmp eq i32 %bf.clear205.i, 51
  br i1 %cmp254.i, label %land.lhs.true268.i, label %land.end278.i

land.lhs.true268.i:                               ; preds = %lor.rhs.i
  %call269.i = call i64 @int_size_in_bytes(%union.tree_node* %type.2.i) #4
  %.pre.i = load %struct.rtx_def** %reg.i, align 8, !tbaa !39
  br label %land.end278.i

land.end278.i:                                    ; preds = %land.lhs.true268.i, %lor.rhs.i, %lor.lhs.false244.i, %land.rhs.i, %if.end233.i
  %136 = phi %struct.rtx_def* [ %call218.i, %if.end233.i ], [ %call218.i, %lor.lhs.false244.i ], [ %call218.i, %land.rhs.i ], [ %call218.i, %lor.rhs.i ], [ %.pre.i, %land.lhs.true268.i ]
  %137 = phi i32 [ 0, %if.end233.i ], [ 1, %lor.lhs.false244.i ], [ 1, %land.rhs.i ], [ 0, %lor.rhs.i ], [ 0, %land.lhs.true268.i ]
  %pass_on_stack.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 8
  store i32 %137, i32* %pass_on_stack.i, align 4, !tbaa !42
  %tobool284.i = icmp eq %struct.rtx_def* %136, null
  br i1 %tobool284.i, label %if.end307.i, label %land.lhs.true285.i

land.lhs.true285.i:                               ; preds = %land.end278.i
  %138 = getelementptr inbounds %struct.rtx_def* %136, i64 0, i32 0
  %bf.load289.i = load i32* %138, align 8
  %bf.clear290.i = and i32 %bf.load289.i, 65535
  %cmp291.i = icmp eq i32 %bf.clear290.i, 39
  br i1 %cmp291.i, label %land.lhs.true293.i, label %if.end307.i

land.lhs.true293.i:                               ; preds = %land.lhs.true285.i
  %arrayidx297.i = getelementptr inbounds %struct.rtx_def* %136, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx297.i to %struct.rtvec_def**
  %139 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !1
  %arrayidx298.i = getelementptr inbounds %struct.rtvec_def* %139, i64 0, i32 1, i64 0
  %140 = load %struct.rtx_def** %arrayidx298.i, align 8, !tbaa !1
  %arrayidx300.i = getelementptr inbounds %struct.rtx_def* %140, i64 0, i32 1, i64 0
  %rtx.i1899 = bitcast %union.rtunion_def* %arrayidx300.i to %struct.rtx_def**
  %141 = load %struct.rtx_def** %rtx.i1899, align 8, !tbaa !1
  %cmp301.i = icmp eq %struct.rtx_def* %141, null
  br i1 %cmp301.i, label %if.then303.i, label %if.end307.i

if.then303.i:                                     ; preds = %land.lhs.true293.i
  store i32 1, i32* %pass_on_stack.i, align 4, !tbaa !42
  br label %if.end307.i

if.end307.i:                                      ; preds = %if.then303.i, %land.lhs.true293.i, %land.lhs.true285.i, %land.end278.i
  %142 = phi i32 [ %137, %land.end278.i ], [ 1, %if.then303.i ], [ %137, %land.lhs.true293.i ], [ %137, %land.lhs.true285.i ]
  %bf.load310.i = load i32* %unsigned_flag.i, align 8
  %bf.clear312.i = and i32 %bf.load310.i, 1024
  %tobool313.i = icmp eq i32 %bf.clear312.i, 0
  %tobool318.i = icmp eq i32 %142, 0
  %brmerge.i = or i1 %tobool318.i, %tobool284.i
  %or.cond14.i = and i1 %tobool313.i, %brmerge.i
  %lnot.ext2254. = select i1 %or.cond14.i, i32 %lnot.ext2254, i32 1
  %and334.i = and i32 %flags.0.load2247, -4097
  %flags.0.load2250 = select i1 %tobool313.i, i32 %flags.0.load2247, i32 %and334.i
  br i1 %tobool284.i, label %if.end366.i, label %lor.lhs.false341.i

lor.lhs.false341.i:                               ; preds = %if.end307.i
  %partial344.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 7
  %143 = load i32* %partial344.i, align 4, !tbaa !41
  %cmp345.i.not = icmp ne i32 %143, 0
  %tobool318.i.not = xor i1 %tobool318.i, true
  %brmerge2417 = or i1 %cmp345.i.not, %tobool318.i.not
  br i1 %brmerge2417, label %if.end366.i, label %if.end366.thread.i

if.end366.thread.i:                               ; preds = %lor.lhs.false341.i
  %slot_offset12.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 10
  %144 = bitcast %struct.args_size* %slot_offset12.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %144, i8* %81, i64 16, i32 8, i1 false) #4, !tbaa.struct !43
  %alignment_pad37113.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 17
  %145 = bitcast %struct.args_size* %alignment_pad37113.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %145, i8* %80, i64 16, i32 8, i1 false) #4, !tbaa.struct !43
  br label %if.then379.i

if.end366.i:                                      ; preds = %lor.lhs.false341.i, %if.end307.i
  %cmp359.i = icmp ne %struct.rtx_def* %136, null
  %conv360.i = zext i1 %cmp359.i to i32
  %offset.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 9
  %size365.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 11
  call void @locate_and_pad_parm(i32 %bf.clear205.i, %union.tree_node* %type.2.i, i32 %conv360.i, %union.tree_node* %call, %struct.args_size* %args_size, %struct.args_size* %offset.i, %struct.args_size* %size365.i, %struct.args_size* %alignment_pad.i) #4
  %.pre10.i = load i32* %pass_on_stack.i, align 4, !tbaa !42
  %phitmp.i = icmp eq i32 %.pre10.i, 0
  %slot_offset.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 10
  %146 = bitcast %struct.args_size* %slot_offset.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %146, i8* %81, i64 16, i32 8, i1 false) #4, !tbaa.struct !43
  %alignment_pad371.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 17
  %147 = bitcast %struct.args_size* %alignment_pad371.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %147, i8* %80, i64 16, i32 8, i1 false) #4, !tbaa.struct !43
  br i1 %phitmp.i, label %if.end366.i.if.then379.i_crit_edge, label %if.end366.if.end402_crit_edge.i

if.end366.i.if.then379.i_crit_edge:               ; preds = %if.end366.i
  %partial382.i.phi.trans.insert = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 7
  %.pre2408 = load i32* %partial382.i.phi.trans.insert, align 4, !tbaa !41
  br label %if.then379.i

if.end366.if.end402_crit_edge.i:                  ; preds = %if.end366.i
  %constant406.phi.trans.insert.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 11, i32 0
  %.pre11.i = load i64* %constant406.phi.trans.insert.i, align 8, !tbaa !45
  br label %if.end402.i

if.then379.i:                                     ; preds = %if.end366.i.if.then379.i_crit_edge, %if.end366.thread.i
  %148 = phi i32 [ %.pre2408, %if.end366.i.if.then379.i_crit_edge ], [ 0, %if.end366.thread.i ]
  %149 = load i32* @target_flags, align 4, !tbaa !17
  %and383.i = and i32 %149, 33554432
  %150 = lshr exact i32 %and383.i, 23
  %151 = add i32 %150, 4
  %mul.i = mul nsw i32 %151, %148
  %152 = lshr exact i32 %and383.i, 20
  %153 = add i32 %152, 32
  %div389.i = sdiv i32 %153, 8
  %div390.i = srem i32 %mul.i, %div389.i
  %mul395.i = sub i32 %mul.i, %div390.i
  %conv396.i = sext i32 %mul395.i to i64
  %constant400.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 11, i32 0
  %154 = load i64* %constant400.i, align 8, !tbaa !45
  %sub401.i = sub nsw i64 %154, %conv396.i
  store i64 %sub401.i, i64* %constant400.i, align 8, !tbaa !45
  br label %if.end402.i

if.end402.i:                                      ; preds = %if.then379.i, %if.end366.if.end402_crit_edge.i
  %155 = phi i64 [ %.pre11.i, %if.end366.if.end402_crit_edge.i ], [ %sub401.i, %if.then379.i ]
  %156 = load i64* %constant.i, align 8, !tbaa !46
  %add.i1900 = add nsw i64 %156, %155
  store i64 %add.i1900, i64* %constant.i, align 8, !tbaa !46
  %var411.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i, i32 11, i32 1
  %157 = load %union.tree_node** %var411.i, align 8, !tbaa !47
  %tobool412.i = icmp eq %union.tree_node* %157, null
  br i1 %tobool412.i, label %if.end439.i, label %do.body.i

do.body.i:                                        ; preds = %if.end402.i
  %call419.i = call i32 @host_integerp(%union.tree_node* %157, i32 0) #4
  %tobool420.i = icmp eq i32 %call419.i, 0
  br i1 %tobool420.i, label %if.else425.i, label %if.then421.i

if.then421.i:                                     ; preds = %do.body.i
  %call422.i = call i64 @tree_low_cst(%union.tree_node* %157, i32 0) #4
  %158 = load i64* %constant.i, align 8, !tbaa !46
  %add424.i = add nsw i64 %158, %call422.i
  store i64 %add424.i, i64* %constant.i, align 8, !tbaa !46
  br label %if.end439.i

if.else425.i:                                     ; preds = %do.body.i
  %159 = load %union.tree_node** %var.i, align 8, !tbaa !48
  %cmp427.i = icmp eq %union.tree_node* %159, null
  %160 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call430.i = call %union.tree_node* @convert(%union.tree_node* %160, %union.tree_node* %157) #4
  br i1 %cmp427.i, label %if.then429.i, label %if.else432.i

if.then429.i:                                     ; preds = %if.else425.i
  store %union.tree_node* %call430.i, %union.tree_node** %var.i, align 8, !tbaa !48
  br label %if.end439.i

if.else432.i:                                     ; preds = %if.else425.i
  %call435.i = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %159, %union.tree_node* %call430.i) #4
  store %union.tree_node* %call435.i, %union.tree_node** %var.i, align 8, !tbaa !48
  br label %if.end439.i

if.end439.i:                                      ; preds = %if.else432.i, %if.then429.i, %if.then421.i, %if.end402.i
  %bf.load442.i = load i32* %mode202.i, align 4
  %bf.lshr443.i = lshr i32 %bf.load442.i, 9
  %bf.clear444.i = and i32 %bf.lshr443.i, 127
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %bf.clear444.i, %union.tree_node* %type.2.i, i32 %conv217.i) #4
  %chain.i = getelementptr inbounds %union.tree_node* %p.06.i, i64 0, i32 0, i32 0, i32 0
  %161 = load %union.tree_node** %chain.i, align 8, !tbaa !25
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, %87
  %inc449.i = add nsw i32 %argpos.08.i, 1
  %tobool3.i = icmp eq %union.tree_node* %161, null
  br i1 %tobool3.i, label %initialize_argument_information.exit, label %for.body.i

initialize_argument_information.exit:             ; preds = %if.end439.i
  %.pre = load %union.tree_node** %var.i, align 8, !tbaa !48
  %phitmp2409 = icmp eq %union.tree_node* %.pre, null
  call void @llvm.lifetime.end(i64 16, i8* %80) #4
  br i1 %phitmp2409, label %if.end204, label %finalize_must_preallocate.exit

if.end204:                                        ; preds = %for.end, %initialize_argument_information.exit
  %162 = phi i32 [ %133, %initialize_argument_information.exit ], [ 0, %for.end ]
  %flags.0.load22492411 = phi i32 [ %flags.0.load2250, %initialize_argument_information.exit ], [ %or164, %for.end ]
  %lnot.ext22552410 = phi i32 [ %lnot.ext2254., %initialize_argument_information.exit ], [ %lnot.ext, %for.end ]
  %tobool.i1901 = icmp eq i32 %lnot.ext22552410, 0
  br i1 %tobool.i1901, label %for.cond.preheader.i, label %finalize_must_preallocate.exit

for.cond.preheader.i:                             ; preds = %if.end204
  %cmp97.i = icmp sgt i32 %num_actuals.0.lcssa, 0
  br i1 %cmp97.i, label %for.body.i1904, label %for.end.i

for.body.i1904:                                   ; preds = %for.cond.preheader.i, %for.inc.i
  %indvars.iv.i1902 = phi i64 [ %indvars.iv.next.i1916, %for.inc.i ], [ 0, %for.cond.preheader.i ]
  %copy_to_evaluate_size.0100.i = phi i32 [ %copy_to_evaluate_size.1.i, %for.inc.i ], [ 0, %for.cond.preheader.i ]
  %partial_seen.099.i = phi i32 [ %partial_seen.1.i, %for.inc.i ], [ 0, %for.cond.preheader.i ]
  %partial.i1903 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1902, i32 7
  %163 = load i32* %partial.i1903, align 4, !tbaa !41
  %cmp2.i = icmp sgt i32 %163, 0
  br i1 %cmp2.i, label %land.lhs.true.i, label %if.else.i1906

land.lhs.true.i:                                  ; preds = %for.body.i1904
  %pass_on_stack.i1905 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1902, i32 8
  %164 = load i32* %pass_on_stack.i1905, align 4, !tbaa !42
  %tobool5.i = icmp eq i32 %164, 0
  br i1 %tobool5.i, label %if.end13.i1911, label %if.else.i1906

if.else.i1906:                                    ; preds = %land.lhs.true.i, %for.body.i1904
  %tobool7.i = icmp eq i32 %partial_seen.099.i, 0
  br i1 %tobool7.i, label %if.end13.i1911, label %land.lhs.true8.i

land.lhs.true8.i:                                 ; preds = %if.else.i1906
  %reg.i1907 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1902, i32 4
  %165 = load %struct.rtx_def** %reg.i1907, align 8, !tbaa !39
  %cmp11.i = icmp eq %struct.rtx_def* %165, null
  %.must_preallocate.addr.0.i = zext i1 %cmp11.i to i32
  br label %if.end13.i1911

if.end13.i1911:                                   ; preds = %land.lhs.true8.i, %if.else.i1906, %land.lhs.true.i
  %must_preallocate.addr.1.i = phi i32 [ 0, %if.else.i1906 ], [ 0, %land.lhs.true.i ], [ %.must_preallocate.addr.0.i, %land.lhs.true8.i ]
  %partial_seen.1.i = phi i32 [ 0, %if.else.i1906 ], [ 1, %land.lhs.true.i ], [ %partial_seen.099.i, %land.lhs.true8.i ]
  %tree_value.i1908 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1902, i32 0
  %166 = load %union.tree_node** %tree_value.i1908, align 8, !tbaa !28
  %type.i = getelementptr inbounds %union.tree_node* %166, i64 0, i32 0, i32 0, i32 1
  %167 = load %union.tree_node** %type.i, align 8, !tbaa !16
  %type16.i = bitcast %union.tree_node* %167 to %struct.tree_type*
  %mode.i = getelementptr inbounds %struct.tree_type* %type16.i, i64 0, i32 6
  %bf.load.i1909 = load i32* %mode.i, align 4
  %bf.clear.i1910 = and i32 %bf.load.i1909, 65024
  %cmp17.i = icmp eq i32 %bf.clear.i1910, 26112
  br i1 %cmp17.i, label %land.lhs.true18.i, label %for.inc.i

land.lhs.true18.i:                                ; preds = %if.end13.i1911
  %code.i1912 = getelementptr inbounds %union.tree_node* %166, i64 0, i32 0, i32 0, i32 2
  %bf.load23.i = load i32* %code.i1912, align 8
  %bf.clear24.i = and i32 %bf.load23.i, 255
  switch i32 %bf.clear24.i, label %lor.lhs.false43.i [
    i32 53, label %if.then54.i
    i32 50, label %if.then54.i
    i32 51, label %if.then54.i
  ]

lor.lhs.false43.i:                                ; preds = %land.lhs.true18.i
  %addressable_flag.i1913 = getelementptr inbounds %union.tree_node* %167, i64 0, i32 0, i32 0, i32 2
  %bf.load50.i = load i32* %addressable_flag.i1913, align 8
  %bf.clear52.i = and i32 %bf.load50.i, 1024
  %tobool53.i = icmp eq i32 %bf.clear52.i, 0
  br i1 %tobool53.i, label %for.inc.i, label %if.then54.i

if.then54.i:                                      ; preds = %lor.lhs.false43.i, %land.lhs.true18.i, %land.lhs.true18.i, %land.lhs.true18.i
  %call.i1914 = call i64 @int_size_in_bytes(%union.tree_node* %167) #4
  %conv94.i = zext i32 %copy_to_evaluate_size.0100.i to i64
  %add.i1915 = add nsw i64 %call.i1914, %conv94.i
  %conv60.i = trunc i64 %add.i1915 to i32
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then54.i, %lor.lhs.false43.i, %if.end13.i1911
  %copy_to_evaluate_size.1.i = phi i32 [ %conv60.i, %if.then54.i ], [ %copy_to_evaluate_size.0100.i, %lor.lhs.false43.i ], [ %copy_to_evaluate_size.0100.i, %if.end13.i1911 ]
  %indvars.iv.next.i1916 = add nuw nsw i64 %indvars.iv.i1902, 1
  %168 = trunc i64 %indvars.iv.next.i1916 to i32
  %cmp.i1917 = icmp slt i32 %168, %num_actuals.0.lcssa
  %lnot.i = icmp eq i32 %must_preallocate.addr.1.i, 0
  %or.cond.i1918 = and i1 %cmp.i1917, %lnot.i
  br i1 %or.cond.i1918, label %for.body.i1904, label %for.end.i

for.end.i:                                        ; preds = %for.inc.i, %for.cond.preheader.i
  %copy_to_evaluate_size.0.lcssa.i = phi i32 [ 0, %for.cond.preheader.i ], [ %copy_to_evaluate_size.1.i, %for.inc.i ]
  %must_preallocate.addr.0.lcssa.i = phi i32 [ 0, %for.cond.preheader.i ], [ %must_preallocate.addr.1.i, %for.inc.i ]
  %mul.i1919 = shl nsw i32 %copy_to_evaluate_size.0.lcssa.i, 1
  %conv62.i = sext i32 %mul.i1919 to i64
  %169 = load i64* %constant.i, align 8, !tbaa !46
  %cmp63.i = icmp sge i64 %conv62.i, %169
  %cmp67.i = icmp sgt i64 %169, 0
  %or.cond95.i = and i1 %cmp63.i, %cmp67.i
  %.must_preallocate.addr.096.i = select i1 %or.cond95.i, i32 1, i32 %must_preallocate.addr.0.lcssa.i
  br label %finalize_must_preallocate.exit

finalize_must_preallocate.exit:                   ; preds = %initialize_argument_information.exit, %if.end204, %for.end.i
  %170 = phi i32 [ %162, %for.end.i ], [ %162, %if.end204 ], [ %133, %initialize_argument_information.exit ]
  %flags.0.load22462269 = phi i32 [ %flags.0.load22492411, %for.end.i ], [ %flags.0.load22492411, %if.end204 ], [ %and334.i, %initialize_argument_information.exit ]
  %call2051921 = phi i32 [ %.must_preallocate.addr.096.i, %for.end.i ], [ %lnot.ext22552410, %if.end204 ], [ 1, %initialize_argument_information.exit ]
  br i1 %tobool171, label %land.lhs.true207, label %if.end223

land.lhs.true207:                                 ; preds = %finalize_must_preallocate.exit
  %171 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 8, !tbaa !1
  %call208 = call i32 @reg_mentioned_p(%struct.rtx_def* %171, %struct.rtx_def* %structure_value_addr.0) #4
  %tobool209 = icmp eq i32 %call208, 0
  br i1 %tobool209, label %lor.lhs.false210, label %land.lhs.true213

lor.lhs.false210:                                 ; preds = %land.lhs.true207
  %172 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !1
  %call211 = call i32 @reg_mentioned_p(%struct.rtx_def* %172, %struct.rtx_def* %structure_value_addr.0) #4
  %tobool212 = icmp eq i32 %call211, 0
  br i1 %tobool212, label %if.end223, label %land.lhs.true213

land.lhs.true213:                                 ; preds = %lor.lhs.false210, %land.lhs.true207
  %173 = load %union.tree_node** %var.i, align 8, !tbaa !48
  %tobool215 = icmp eq %union.tree_node* %173, null
  br i1 %tobool215, label %lor.lhs.false216, label %if.then221

lor.lhs.false216:                                 ; preds = %land.lhs.true213
  %174 = load i32* @target_flags, align 4, !tbaa !17
  %and217 = and i32 %174, 4096
  %tobool218 = icmp ne i32 %and217, 0
  %175 = load i64* %constant.i, align 8
  %tobool220 = icmp eq i64 %175, 0
  %or.cond2295 = or i1 %tobool218, %tobool220
  br i1 %or.cond2295, label %if.end223, label %if.then221

if.then221:                                       ; preds = %lor.lhs.false216, %land.lhs.true213
  %call222 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %structure_value_addr.0) #4
  br label %if.end223

if.end223:                                        ; preds = %lor.lhs.false216, %lor.lhs.false210, %if.then221, %finalize_must_preallocate.exit
  %structure_value_addr.1 = phi %struct.rtx_def* [ %call222, %if.then221 ], [ %structure_value_addr.0, %lor.lhs.false216 ], [ %structure_value_addr.0, %lor.lhs.false210 ], [ null, %finalize_must_preallocate.exit ]
  %176 = load i32* @expand_call.currently_expanding_call, align 4, !tbaa !17
  %inc224 = add nsw i32 %176, 1
  store i32 %inc224, i32* @expand_call.currently_expanding_call, align 4, !tbaa !17
  %cmp225 = icmp eq i32 %176, 0
  %177 = load i32* @flag_optimize_sibling_calls, align 4
  %tobool228 = icmp ne i32 %177, 0
  %or.cond1455 = and i1 %cmp225, %tobool228
  %178 = load i32* @rtx_equal_function_value_matters, align 4
  %tobool230 = icmp ne i32 %178, 0
  %or.cond1456 = and i1 %or.cond1455, %tobool230
  br i1 %or.cond1456, label %lor.lhs.false231, label %if.then259

lor.lhs.false231:                                 ; preds = %if.end223
  %call232 = call i32 @any_pending_cleanups(i32 1) #4
  %tobool233 = icmp eq i32 %call232, 0
  %179 = load %union.tree_node** %var.i, align 8
  %tobool236 = icmp eq %union.tree_node* %179, null
  %or.cond1829 = and i1 %tobool233, %tobool236
  br i1 %or.cond1829, label %lor.lhs.false240, label %if.then259

lor.lhs.false240:                                 ; preds = %lor.lhs.false231
  %180 = load %union.tree_node** %arrayidx7, align 8, !tbaa !1
  %code245 = getelementptr inbounds %union.tree_node* %180, i64 0, i32 0, i32 0, i32 2
  %bf.load246 = load i32* %code245, align 8
  %bf.clear247 = and i32 %bf.load246, 255
  %cmp248 = icmp eq i32 %bf.clear247, 121
  br i1 %cmp248, label %lor.lhs.false250, label %if.then259

lor.lhs.false250:                                 ; preds = %lor.lhs.false240
  %operands255 = getelementptr inbounds %union.tree_node* %180, i64 0, i32 0, i32 2
  %arrayidx256 = bitcast i32* %operands255 to %union.tree_node**
  %181 = load %union.tree_node** %arrayidx256, align 8, !tbaa !1
  %182 = load %union.tree_node** @current_function_decl, align 8, !tbaa !1
  %cmp257 = icmp eq %union.tree_node* %181, %182
  br i1 %cmp257, label %if.end260, label %if.then259

if.then259:                                       ; preds = %lor.lhs.false231, %if.end223, %lor.lhs.false250, %lor.lhs.false240
  %tobool2392275 = phi i1 [ false, %lor.lhs.false250 ], [ false, %lor.lhs.false240 ], [ true, %if.end223 ], [ true, %lor.lhs.false231 ]
  %try_tail_recursion.02273 = phi i32 [ 1, %lor.lhs.false250 ], [ 1, %lor.lhs.false240 ], [ 0, %if.end223 ], [ 0, %lor.lhs.false231 ]
  br label %if.end260

if.end260:                                        ; preds = %lor.lhs.false250, %if.then259
  %tobool2392274 = phi i1 [ %tobool2392275, %if.then259 ], [ false, %lor.lhs.false250 ]
  %try_tail_recursion.02272 = phi i32 [ %try_tail_recursion.02273, %if.then259 ], [ 1, %lor.lhs.false250 ]
  %try_tail_recursion.1 = phi i32 [ 0, %if.then259 ], [ 1, %lor.lhs.false250 ]
  %cmp263 = icmp ne %struct.rtx_def* %structure_value_addr.1, null
  %or.cond1457 = or i1 %tobool2392274, %cmp263
  %cmp266 = icmp eq %union.tree_node* %call, null
  %or.cond1458 = or i1 %or.cond1457, %cmp266
  %or.cond1458.not = xor i1 %or.cond1458, true
  %and269 = and i32 %flags.0.load22462269, 96
  %tobool270 = icmp eq i32 %and269, 0
  %or.cond2296 = and i1 %tobool270, %or.cond1458.not
  br i1 %or.cond2296, label %lor.lhs.false271, label %if.then391

lor.lhs.false271:                                 ; preds = %if.end260
  %volatile_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load273 = load i32* %volatile_flag, align 8
  %bf.clear275 = and i32 %bf.load273, 2048
  %tobool276 = icmp eq i32 %bf.clear275, 0
  %or.cond1459 = and i1 %tobool276, %tobool9
  br i1 %or.cond1459, label %land.lhs.true279, label %if.then391

land.lhs.true279:                                 ; preds = %lor.lhs.false271
  %183 = load i32* @flag_pic, align 4, !tbaa !17
  %tobool280 = icmp eq i32 %183, 0
  %bf.clear285 = and i32 %bf.load273, 524288
  %tobool286 = icmp eq i32 %bf.clear285, 0
  %or.cond1830 = or i1 %tobool280, %tobool286
  br i1 %or.cond1830, label %land.lhs.true287, label %if.then391

land.lhs.true287:                                 ; preds = %land.lhs.true279
  %184 = load i32* @target_flags, align 4, !tbaa !17
  %and288 = and i32 %184, 32
  %tobool289 = icmp eq i32 %and288, 0
  br i1 %tobool289, label %lor.lhs.false375, label %lor.lhs.false290

lor.lhs.false290:                                 ; preds = %land.lhs.true287
  %type292 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %185 = load %union.tree_node** %type292, align 8, !tbaa !16
  %type294 = getelementptr inbounds %union.tree_node* %185, i64 0, i32 0, i32 0, i32 1
  %186 = load %union.tree_node** %type294, align 8, !tbaa !16
  %type295 = bitcast %union.tree_node* %186 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type295, i64 0, i32 6
  %bf.load296 = load i32* %mode, align 4
  %bf.lshr297 = lshr i32 %bf.load296, 9
  %bf.clear298 = and i32 %bf.lshr297, 127
  %idxprom1826 = zext i32 %bf.clear298 to i64
  %arrayidx299 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom1826
  %187 = load i32* %arrayidx299, align 4, !tbaa !15
  switch i32 %187, label %lor.lhs.false375 [
    i32 2, label %lor.lhs.false330
    i32 6, label %lor.lhs.false330
    i32 8, label %lor.lhs.false330
  ]

lor.lhs.false330:                                 ; preds = %lor.lhs.false290, %lor.lhs.false290, %lor.lhs.false290
  %188 = load %struct.function** @cfun, align 8, !tbaa !1
  %decl331 = getelementptr inbounds %struct.function* %188, i64 0, i32 6
  %189 = load %union.tree_node** %decl331, align 8, !tbaa !49
  %type333 = getelementptr inbounds %union.tree_node* %189, i64 0, i32 0, i32 0, i32 1
  %190 = load %union.tree_node** %type333, align 8, !tbaa !16
  %type335 = getelementptr inbounds %union.tree_node* %190, i64 0, i32 0, i32 0, i32 1
  %191 = load %union.tree_node** %type335, align 8, !tbaa !16
  %type336 = bitcast %union.tree_node* %191 to %struct.tree_type*
  %mode337 = getelementptr inbounds %struct.tree_type* %type336, i64 0, i32 6
  %bf.load338 = load i32* %mode337, align 4
  %bf.lshr339 = lshr i32 %bf.load338, 9
  %bf.clear340 = and i32 %bf.lshr339, 127
  %idxprom3411827 = zext i32 %bf.clear340 to i64
  %arrayidx342 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom3411827
  %192 = load i32* %arrayidx342, align 4, !tbaa !15
  switch i32 %192, label %if.then391 [
    i32 2, label %lor.lhs.false375
    i32 6, label %lor.lhs.false375
    i32 8, label %lor.lhs.false375
  ]

lor.lhs.false375:                                 ; preds = %lor.lhs.false330, %lor.lhs.false330, %lor.lhs.false330, %lor.lhs.false290, %land.lhs.true287
  %193 = load i64* %constant.i, align 8, !tbaa !46
  %194 = load %struct.function** @cfun, align 8, !tbaa !1
  %args_size377 = getelementptr inbounds %struct.function* %194, i64 0, i32 9
  %195 = load i32* %args_size377, align 4, !tbaa !50
  %conv378 = sext i32 %195 to i64
  %cmp379 = icmp sgt i64 %193, %conv378
  br i1 %cmp379, label %if.then391, label %lor.lhs.false381

lor.lhs.false381:                                 ; preds = %lor.lhs.false375
  %conv383 = trunc i64 %193 to i32
  %call384 = call i32 @ix86_return_pops_args(%union.tree_node* %call, %union.tree_node* %67, i32 %conv383) #4
  %196 = load %union.tree_node** @current_function_decl, align 8, !tbaa !1
  %type386 = getelementptr inbounds %union.tree_node* %196, i64 0, i32 0, i32 0, i32 1
  %197 = load %union.tree_node** %type386, align 8, !tbaa !16
  %198 = load %struct.function** @cfun, align 8, !tbaa !1
  %args_size387 = getelementptr inbounds %struct.function* %198, i64 0, i32 9
  %199 = load i32* %args_size387, align 4, !tbaa !50
  %call388 = call i32 @ix86_return_pops_args(%union.tree_node* %196, %union.tree_node* %197, i32 %199) #4
  %cmp389 = icmp eq i32 %call384, %call388
  br i1 %cmp389, label %if.end392, label %if.then391

if.then391:                                       ; preds = %if.end260, %lor.lhs.false330, %land.lhs.true279, %lor.lhs.false381, %lor.lhs.false271, %lor.lhs.false375
  br label %if.end392

if.end392:                                        ; preds = %lor.lhs.false381, %if.then391
  %try_tail_call.1 = phi i32 [ 0, %if.then391 ], [ %try_tail_recursion.02272, %lor.lhs.false381 ]
  %tobool395 = icmp eq i32 %try_tail_recursion.1, 0
  %200 = or i32 %try_tail_call.1, %try_tail_recursion.1
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %if.end449, label %if.then396

if.then396:                                       ; preds = %if.end392
  %202 = load i32* @target_flags, align 4, !tbaa !17
  %203 = and i32 %202, 6144
  %204 = icmp eq i32 %203, 0
  %sub = add nsw i32 %num_actuals.0.lcssa, -1
  %.sub = select i1 %204, i32 0, i32 %sub
  %num_actuals.0. = select i1 %204, i32 %num_actuals.0.lcssa, i32 -1
  %cmp4072366 = icmp eq i32 %.sub, %num_actuals.0.
  br i1 %cmp4072366, label %for.end444, label %for.body409.lr.ph

for.body409.lr.ph:                                ; preds = %if.then396
  %205 = sext i32 %.sub to i64
  %206 = select i1 %204, i64 1, i64 -1
  br i1 %tobool395, label %for.body409.us, label %for.body409

for.body409.us:                                   ; preds = %for.body409.lr.ph, %for.inc443.us
  %indvars.iv2405 = phi i64 [ %indvars.iv.next2406, %for.inc443.us ], [ %205, %for.body409.lr.ph ]
  %tree_value.us = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2405, i32 0
  %207 = load %union.tree_node** %tree_value.us, align 8, !tbaa !28
  %call412.us = call i32 @unsafe_for_reeval(%union.tree_node* %207) #4
  switch i32 %call412.us, label %sw.default [
    i32 0, label %for.inc443.us
    i32 1, label %sw.bb.us
    i32 2, label %sw.bb420.us
  ]

sw.bb420.us:                                      ; preds = %for.body409.us
  %208 = load %union.tree_node** %tree_value.us, align 8, !tbaa !28
  %type426.us = getelementptr inbounds %union.tree_node* %208, i64 0, i32 0, i32 0, i32 1
  %209 = load %union.tree_node** %type426.us, align 8, !tbaa !16
  %call427.us = call %union.tree_node* @build_decl(i32 34, %union.tree_node* null, %union.tree_node* %209) #4
  %210 = load %union.tree_node** %tree_value.us, align 8, !tbaa !28
  %call431.us = call %struct.rtx_def* @expand_expr(%union.tree_node* %210, %struct.rtx_def* null, i32 0, i32 0) #4
  %rtl.us = getelementptr inbounds %union.tree_node* %call427.us, i64 0, i32 0, i32 17
  store %struct.rtx_def* %call431.us, %struct.rtx_def** %rtl.us, align 8, !tbaa !33
  store %union.tree_node* %call427.us, %union.tree_node** %tree_value.us, align 8, !tbaa !28
  br label %for.inc443.us

sw.bb.us:                                         ; preds = %for.body409.us
  %211 = load %union.tree_node** %tree_value.us, align 8, !tbaa !28
  %call416.us = call %union.tree_node* @unsave_expr(%union.tree_node* %211) #4
  store %union.tree_node* %call416.us, %union.tree_node** %tree_value.us, align 8, !tbaa !28
  br label %for.inc443.us

for.inc443.us:                                    ; preds = %for.body409.us, %sw.bb420.us, %sw.bb.us
  %indvars.iv.next2406 = add nsw i64 %indvars.iv2405, %206
  %212 = trunc i64 %indvars.iv.next2406 to i32
  %cmp407.us = icmp eq i32 %212, %num_actuals.0.
  br i1 %cmp407.us, label %for.end444, label %for.body409.us

for.body409:                                      ; preds = %for.body409.lr.ph, %for.inc443
  %indvars.iv2403 = phi i64 [ %indvars.iv.next2404, %for.inc443 ], [ %205, %for.body409.lr.ph ]
  %actparms.12368 = phi %union.tree_node* [ %call441, %for.inc443 ], [ null, %for.body409.lr.ph ]
  %tree_value = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2403, i32 0
  %213 = load %union.tree_node** %tree_value, align 8, !tbaa !28
  %call412 = call i32 @unsafe_for_reeval(%union.tree_node* %213) #4
  switch i32 %call412, label %sw.default [
    i32 0, label %for.inc443
    i32 1, label %sw.bb
    i32 2, label %sw.bb420
  ]

sw.bb:                                            ; preds = %for.body409
  %214 = load %union.tree_node** %tree_value, align 8, !tbaa !28
  %call416 = call %union.tree_node* @unsave_expr(%union.tree_node* %214) #4
  store %union.tree_node* %call416, %union.tree_node** %tree_value, align 8, !tbaa !28
  br label %for.inc443

sw.bb420:                                         ; preds = %for.body409
  %215 = load %union.tree_node** %tree_value, align 8, !tbaa !28
  %type426 = getelementptr inbounds %union.tree_node* %215, i64 0, i32 0, i32 0, i32 1
  %216 = load %union.tree_node** %type426, align 8, !tbaa !16
  %call427 = call %union.tree_node* @build_decl(i32 34, %union.tree_node* null, %union.tree_node* %216) #4
  %217 = load %union.tree_node** %tree_value, align 8, !tbaa !28
  %call431 = call %struct.rtx_def* @expand_expr(%union.tree_node* %217, %struct.rtx_def* null, i32 0, i32 0) #4
  %rtl = getelementptr inbounds %union.tree_node* %call427, i64 0, i32 0, i32 17
  store %struct.rtx_def* %call431, %struct.rtx_def** %rtl, align 8, !tbaa !33
  store %union.tree_node* %call427, %union.tree_node** %tree_value, align 8, !tbaa !28
  br label %for.inc443

sw.default:                                       ; preds = %for.body409, %for.body409.us
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 2528, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.expand_call, i64 0, i64 0)) #7
  unreachable

for.inc443:                                       ; preds = %sw.bb420, %sw.bb, %for.body409
  %218 = load %union.tree_node** %tree_value, align 8, !tbaa !28
  %call441 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %218, %union.tree_node* %actparms.12368) #4
  %indvars.iv.next2404 = add nsw i64 %indvars.iv2403, %206
  %219 = trunc i64 %indvars.iv.next2404 to i32
  %cmp407 = icmp eq i32 %219, %num_actuals.0.
  br i1 %cmp407, label %for.end444, label %for.body409

for.end444:                                       ; preds = %for.inc443, %for.inc443.us, %if.then396
  %actparms.1.lcssa = phi %union.tree_node* [ null, %if.then396 ], [ null, %for.inc443.us ], [ %call441, %for.inc443 ]
  %call445 = call i32 @any_pending_cleanups(i32 1) #4
  %tobool446 = icmp eq i32 %call445, 0
  %try_tail_call.1. = select i1 %tobool446, i32 %try_tail_call.1, i32 0
  br i1 %tobool446, label %if.end449, label %if.end469

if.end449:                                        ; preds = %for.end444, %if.end392
  %try_tail_call.2 = phi i32 [ %try_tail_call.1, %if.end392 ], [ %try_tail_call.1., %for.end444 ]
  %actparms.3 = phi %union.tree_node* [ %actparms.0, %if.end392 ], [ %actparms.1.lcssa, %for.end444 ]
  br i1 %tobool395, label %if.end469, label %if.then451

if.then451:                                       ; preds = %if.end449
  %220 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr452 = getelementptr inbounds %struct.function* %220, i64 0, i32 2
  %221 = load %struct.expr_status** %expr452, align 8, !tbaa !18
  %x_pending_stack_adjust = getelementptr inbounds %struct.expr_status* %221, i64 0, i32 0
  %222 = load i32* %x_pending_stack_adjust, align 4, !tbaa !35
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status* %221, i64 0, i32 2
  %223 = load i32* %x_stack_pointer_delta, align 4, !tbaa !51
  call void @emit_queue() #4
  call void @start_sequence() #4
  call void @expand_start_target_temps() #4
  %call454 = call %struct.rtx_def* @get_last_insn() #4
  %call455 = call i32 @optimize_tail_recursion(%union.tree_node* %actparms.3, %struct.rtx_def* %call454) #4
  %tobool456 = icmp eq i32 %call455, 0
  br i1 %tobool456, label %if.end464, label %if.then457

if.then457:                                       ; preds = %if.then451
  %call458 = call i32 @any_pending_cleanups(i32 1) #4
  %tobool459 = icmp eq i32 %call458, 0
  br i1 %tobool459, label %if.else461, label %if.end464

if.else461:                                       ; preds = %if.then457
  %call462 = call %struct.rtx_def* @get_insns() #4
  br label %if.end464

if.end464:                                        ; preds = %if.then457, %if.then451, %if.else461
  %try_tail_call.3 = phi i32 [ %try_tail_call.2, %if.else461 ], [ %try_tail_call.2, %if.then451 ], [ 0, %if.then457 ]
  %tail_recursion_insns.0 = phi %struct.rtx_def* [ %call462, %if.else461 ], [ null, %if.then451 ], [ null, %if.then457 ]
  call void @expand_end_target_temps() #4
  call void @end_sequence() #4
  %224 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr465 = getelementptr inbounds %struct.function* %224, i64 0, i32 2
  %225 = load %struct.expr_status** %expr465, align 8, !tbaa !18
  %x_pending_stack_adjust466 = getelementptr inbounds %struct.expr_status* %225, i64 0, i32 0
  store i32 %222, i32* %x_pending_stack_adjust466, align 4, !tbaa !35
  %x_stack_pointer_delta468 = getelementptr inbounds %struct.expr_status* %225, i64 0, i32 2
  store i32 %223, i32* %x_stack_pointer_delta468, align 4, !tbaa !51
  br label %if.end469

if.end469:                                        ; preds = %for.end444, %if.end449, %if.end464
  %try_tail_call.4 = phi i32 [ %try_tail_call.3, %if.end464 ], [ %try_tail_call.2, %if.end449 ], [ %try_tail_call.1., %for.end444 ]
  %tail_recursion_insns.1 = phi %struct.rtx_def* [ %tail_recursion_insns.0, %if.end464 ], [ null, %if.end449 ], [ null, %for.end444 ]
  %226 = load i32* @profile_arc_flag, align 4, !tbaa !17
  %tobool470 = icmp eq i32 %226, 0
  %and472 = and i32 %flags.0.load22462269, 128
  %tobool473 = icmp eq i32 %and472, 0
  %or.cond2297 = or i1 %tobool470, %tobool473
  br i1 %or.cond2297, label %if.end479, label %if.then474

if.then474:                                       ; preds = %if.end469
  %227 = load i32* @target_flags, align 4, !tbaa !17
  %and475 = lshr i32 %227, 25
  %228 = and i32 %and475, 1
  %229 = or i32 %228, 4
  %call478 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %229, i8* getelementptr inbounds ([15 x i8]* @.str4, i64 0, i64 0)) #4
  call void (%struct.rtx_def*, i32, i32, i32, ...)* @emit_library_call(%struct.rtx_def* %call478, i32 7, i32 0, i32 0)
  br label %if.end479

if.end479:                                        ; preds = %if.end469, %if.then474
  %230 = load %struct.function** @cfun, align 8, !tbaa !1
  %preferred_stack_boundary480 = getelementptr inbounds %struct.function* %230, i64 0, i32 53
  %231 = load i32* %preferred_stack_boundary480, align 4, !tbaa !52
  %cmp482 = icmp sge i32 %231, %64
  %232 = load %union.tree_node** @current_function_decl, align 8
  %cmp485 = icmp eq %union.tree_node* %call, %232
  %or.cond1832 = or i1 %cmp482, %cmp485
  br i1 %or.cond1832, label %if.end490, label %if.then487

if.then487:                                       ; preds = %if.end479
  store i32 %64, i32* %preferred_stack_boundary480, align 4, !tbaa !52
  br label %if.end490

if.end490:                                        ; preds = %if.end479, %if.then487
  %div = sdiv i64 %conv, 8
  %x_function_call_count = getelementptr inbounds %struct.function* %230, i64 0, i32 18
  %233 = load i32* %x_function_call_count, align 4, !tbaa !53
  %inc491 = add nsw i32 %233, 1
  store i32 %inc491, i32* %x_function_call_count, align 4, !tbaa !53
  %tobool501 = icmp eq i32 %try_tail_call.4, 0
  %cmp81.i = icmp sgt i32 %num_actuals.0.lcssa, 0
  %conv733 = trunc i64 %div to i32
  %cmp.i2011 = icmp sgt i32 %conv733, 1
  %sext2303 = shl i64 %div, 32
  %conv11.i2014 = ashr exact i64 %sext2303, 32
  %type753 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %tobool882 = icmp ne i32 %structure_value_addr_parm.0, 0
  %tobool1090 = icmp ne i32 %ignore, 0
  %used_flag.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %rtl.i2031 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 17
  %tobool619 = icmp eq i32 %call2051921, 0
  %tobool632 = icmp eq i32 %4, 0
  %idxprom639 = sext i32 %4 to i64
  br label %for.body495.outer

for.body495.outer:                                ; preds = %for.inc1359, %if.end490
  %target.addr.12365.ph = phi %struct.rtx_def* [ %target.addr.0, %if.end490 ], [ %target.addr.5, %for.inc1359 ]
  %normal_call_insns.02364.ph = phi %struct.rtx_def* [ null, %if.end490 ], [ %normal_call_insns.1, %for.inc1359 ]
  %tail_call_insns.02363.ph = phi %struct.rtx_def* [ null, %if.end490 ], [ %tail_call_insns.1., %for.inc1359 ]
  %pass.02362.ph = phi i32 [ 0, %if.end490 ], [ %inc1360, %for.inc1359 ]
  %old_stack_arg_under_construction.02360.ph = phi i32 [ 0, %if.end490 ], [ %old_stack_arg_under_construction.42288, %for.inc1359 ]
  %.ph = phi i32 [ %170, %if.end490 ], [ %338, %for.inc1359 ]
  %flags.0.load22442359.ph = phi i32 [ %flags.0.load22462269, %if.end490 ], [ %storemerge1825, %for.inc1359 ]
  br label %for.body495

for.cond1362.preheader:                           ; preds = %for.inc1359
  %tobool13632338 = icmp eq %struct.rtx_def* %normal_call_insns.1, null
  br i1 %tobool13632338, label %for.cond1384.preheader, label %for.body1364

for.body495:                                      ; preds = %for.body495.outer, %for.inc1359.thread
  %pass.02362 = phi i32 [ %inc13602415, %for.inc1359.thread ], [ %pass.02362.ph, %for.body495.outer ]
  %cmp498 = icmp eq i32 %pass.02362, 0
  br i1 %cmp498, label %if.then500, label %if.end508

if.then500:                                       ; preds = %for.body495
  br i1 %tobool501, label %for.inc1359.thread, label %if.end503

for.inc1359.thread:                               ; preds = %if.then500
  %inc13602415 = add nsw i32 %pass.02362, 1
  br label %for.body495

if.end503:                                        ; preds = %if.then500
  call void @emit_queue() #4
  %234 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr504 = getelementptr inbounds %struct.function* %234, i64 0, i32 2
  %235 = load %struct.expr_status** %expr504, align 8, !tbaa !18
  %x_pending_stack_adjust505 = getelementptr inbounds %struct.expr_status* %235, i64 0, i32 0
  %236 = load i32* %x_pending_stack_adjust505, align 4, !tbaa !35
  %x_stack_pointer_delta507 = getelementptr inbounds %struct.expr_status* %235, i64 0, i32 2
  %237 = load i32* %x_stack_pointer_delta507, align 4, !tbaa !51
  br label %if.end508

if.end508:                                        ; preds = %for.body495, %if.end503
  %save_pending_stack_adjust496.0 = phi i32 [ %236, %if.end503 ], [ 0, %for.body495 ]
  %save_stack_pointer_delta497.0 = phi i32 [ %237, %if.end503 ], [ 0, %for.body495 ]
  %tobool509 = icmp ne i32 %pass.02362, 0
  %or513 = or i32 %flags.0.load22442359.ph, 256
  %and511 = and i32 %flags.0.load22442359.ph, -257
  %storemerge1825 = select i1 %tobool509, i32 %and511, i32 %or513
  store %struct.rtx_def* null, %struct.rtx_def** %call_fusage, align 8, !tbaa !1
  call void @start_sequence() #4
  br i1 %cmp498, label %if.then517, label %if.end518

if.then517:                                       ; preds = %if.end508
  call void @expand_start_target_temps() #4
  br label %if.end518

if.end518:                                        ; preds = %if.then517, %if.end508
  %238 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr519 = getelementptr inbounds %struct.function* %238, i64 0, i32 2
  %239 = load %struct.expr_status** %expr519, align 8, !tbaa !18
  %x_pending_stack_adjust520 = getelementptr inbounds %struct.expr_status* %239, i64 0, i32 0
  %240 = load i32* %x_pending_stack_adjust520, align 4, !tbaa !35
  %cmp521 = icmp sgt i32 %240, 31
  br i1 %cmp521, label %if.then534, label %lor.lhs.false523

lor.lhs.false523:                                 ; preds = %if.end518
  %cmp526 = icmp sgt i32 %240, 0
  br i1 %cmp526, label %land.lhs.true528, label %lor.lhs.false531

land.lhs.true528:                                 ; preds = %lor.lhs.false523
  %and529 = and i32 %storemerge1825, 1032
  %tobool530 = icmp ne i32 %and529, 0
  %or.cond1461 = or i1 %tobool530, %cmp498
  br i1 %or.cond1461, label %if.then534, label %if.end535

lor.lhs.false531:                                 ; preds = %lor.lhs.false523
  br i1 %cmp498, label %if.then534, label %if.end535

if.then534:                                       ; preds = %lor.lhs.false531, %land.lhs.true528, %if.end518
  call void @do_pending_stack_adjust() #4
  br label %if.end535

if.end535:                                        ; preds = %land.lhs.true528, %if.then534, %lor.lhs.false531
  br i1 %tobool509, label %land.lhs.true537, label %if.end553

land.lhs.true537:                                 ; preds = %if.end535
  %and538 = and i32 %storemerge1825, 4096
  %tobool539 = icmp eq i32 %and538, 0
  br i1 %tobool539, label %if.then546, label %if.then540

if.then540:                                       ; preds = %land.lhs.true537
  %241 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr541 = getelementptr inbounds %struct.function* %241, i64 0, i32 2
  %242 = load %struct.expr_status** %expr541, align 8, !tbaa !18
  %x_inhibit_defer_pop542 = getelementptr inbounds %struct.expr_status* %242, i64 0, i32 1
  %243 = load i32* %x_inhibit_defer_pop542, align 4, !tbaa !21
  %add543 = add nsw i32 %243, 1
  store i32 %add543, i32* %x_inhibit_defer_pop542, align 4, !tbaa !21
  br label %if.then546

if.then546:                                       ; preds = %land.lhs.true537, %if.then540
  br i1 %cmp81.i, label %for.body.lr.ph.i1924, label %precompute_arguments.exit

for.body.lr.ph.i1924:                             ; preds = %if.then546
  br i1 %tobool539, label %lor.lhs.false.us.i, label %if.then.i1931

lor.lhs.false.us.i:                               ; preds = %for.body.lr.ph.i1924, %for.inc.us.i
  %indvars.iv83.i = phi i64 [ %indvars.iv.next84.i, %for.inc.us.i ], [ 0, %for.body.lr.ph.i1924 ]
  %tree_value.us.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv83.i, i32 0
  %244 = load %union.tree_node** %tree_value.us.i, align 8, !tbaa !28
  %245 = load i32* @target_flags, align 4, !tbaa !17
  %and1.us.i = lshr i32 %245, 12
  %and1.lobit.us.i = and i32 %and1.us.i, 1
  %246 = xor i32 %and1.lobit.us.i, 1
  store %union.tree_node* null, %union.tree_node** @calls_function_save_exprs, align 8, !tbaa !1
  %call.i.us.i = call fastcc i32 @calls_function_1(%union.tree_node* %244, i32 %246) #4
  store %union.tree_node* null, %union.tree_node** @calls_function_save_exprs, align 8, !tbaa !1
  %tobool3.us.i = icmp eq i32 %call.i.us.i, 0
  br i1 %tobool3.us.i, label %for.inc.us.i, label %if.then.us.i

if.then.us.i:                                     ; preds = %lor.lhs.false.us.i
  %247 = load %union.tree_node** %tree_value.us.i, align 8, !tbaa !28
  %type.us.i = getelementptr inbounds %union.tree_node* %247, i64 0, i32 0, i32 0, i32 1
  %248 = load %union.tree_node** %type.us.i, align 8, !tbaa !16
  %addressable_flag.us.i = getelementptr inbounds %union.tree_node* %248, i64 0, i32 0, i32 0, i32 2
  %bf.load.us.i = load i32* %addressable_flag.us.i, align 8
  %bf.clear.us.i = and i32 %bf.load.us.i, 1024
  %tobool8.us.i = icmp eq i32 %bf.clear.us.i, 0
  br i1 %tobool8.us.i, label %if.end.us.i, label %if.then9.i1932

if.end.us.i:                                      ; preds = %if.then.us.i
  %call13.us.i = call %struct.rtx_def* @expand_expr(%union.tree_node* %247, %struct.rtx_def* null, i32 0, i32 0) #4
  %value.us.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv83.i, i32 2
  store %struct.rtx_def* %call13.us.i, %struct.rtx_def** %value.us.i, align 8, !tbaa !54
  call void @emit_queue() #4
  %249 = load %struct.rtx_def** %value.us.i, align 8, !tbaa !54
  %call19.us.i = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %249, i32 0) #4
  store %struct.rtx_def* %call19.us.i, %struct.rtx_def** %value.us.i, align 8, !tbaa !54
  %initial_value.us.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv83.i, i32 3
  store %struct.rtx_def* %call19.us.i, %struct.rtx_def** %initial_value.us.i, align 8, !tbaa !55
  %250 = load %union.tree_node** %tree_value.us.i, align 8, !tbaa !28
  %type29.us.i = getelementptr inbounds %union.tree_node* %250, i64 0, i32 0, i32 0, i32 1
  %251 = load %union.tree_node** %type29.us.i, align 8, !tbaa !16
  %type30.us.i = bitcast %union.tree_node* %251 to %struct.tree_type*
  %mode31.us.i = getelementptr inbounds %struct.tree_type* %type30.us.i, i64 0, i32 6
  %bf.load32.us.i = load i32* %mode31.us.i, align 4
  %bf.lshr33.us.i = lshr i32 %bf.load32.us.i, 9
  %bf.clear34.us.i = and i32 %bf.lshr33.us.i, 127
  %mode37.us.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv83.i, i32 1
  %252 = load i32* %mode37.us.i, align 4, !tbaa !38
  %cmp38.us.i = icmp eq i32 %bf.clear34.us.i, %252
  br i1 %cmp38.us.i, label %for.inc.us.i, label %if.then39.us.i

if.then39.us.i:                                   ; preds = %if.end.us.i
  %unsignedp.us.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv83.i, i32 6
  %253 = load i32* %unsignedp.us.i, align 4, !tbaa !37
  %call48.us.i = call %struct.rtx_def* @convert_modes(i32 %252, i32 %bf.clear34.us.i, %struct.rtx_def* %call19.us.i, i32 %253) #4
  store %struct.rtx_def* %call48.us.i, %struct.rtx_def** %value.us.i, align 8, !tbaa !54
  br label %for.inc.us.i

for.inc.us.i:                                     ; preds = %if.then39.us.i, %if.end.us.i, %lor.lhs.false.us.i
  %indvars.iv.next84.i = add nuw nsw i64 %indvars.iv83.i, 1
  %254 = trunc i64 %indvars.iv.next84.i to i32
  %cmp.us.i = icmp slt i32 %254, %num_actuals.0.lcssa
  br i1 %cmp.us.i, label %lor.lhs.false.us.i, label %precompute_arguments.exit

if.then.i1931:                                    ; preds = %for.body.lr.ph.i1924, %for.inc.i1937
  %indvars.iv.i1925 = phi i64 [ %indvars.iv.next.i1935, %for.inc.i1937 ], [ 0, %for.body.lr.ph.i1924 ]
  %tree_value6.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1925, i32 0
  %255 = load %union.tree_node** %tree_value6.i, align 8, !tbaa !28
  %type.i1926 = getelementptr inbounds %union.tree_node* %255, i64 0, i32 0, i32 0, i32 1
  %256 = load %union.tree_node** %type.i1926, align 8, !tbaa !16
  %addressable_flag.i1927 = getelementptr inbounds %union.tree_node* %256, i64 0, i32 0, i32 0, i32 2
  %bf.load.i1928 = load i32* %addressable_flag.i1927, align 8
  %bf.clear.i1929 = and i32 %bf.load.i1928, 1024
  %tobool8.i1930 = icmp eq i32 %bf.clear.i1929, 0
  br i1 %tobool8.i1930, label %if.end.i, label %if.then9.i1932

if.then9.i1932:                                   ; preds = %if.then.i1931, %if.then.us.i
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 1512, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.precompute_arguments, i64 0, i64 0)) #7
  unreachable

if.end.i:                                         ; preds = %if.then.i1931
  %call13.i = call %struct.rtx_def* @expand_expr(%union.tree_node* %255, %struct.rtx_def* null, i32 0, i32 0) #4
  %value.i1933 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1925, i32 2
  store %struct.rtx_def* %call13.i, %struct.rtx_def** %value.i1933, align 8, !tbaa !54
  call void @emit_queue() #4
  %257 = load %struct.rtx_def** %value.i1933, align 8, !tbaa !54
  %call19.i = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %257, i32 0) #4
  store %struct.rtx_def* %call19.i, %struct.rtx_def** %value.i1933, align 8, !tbaa !54
  %initial_value.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1925, i32 3
  store %struct.rtx_def* %call19.i, %struct.rtx_def** %initial_value.i, align 8, !tbaa !55
  %258 = load %union.tree_node** %tree_value6.i, align 8, !tbaa !28
  %type29.i = getelementptr inbounds %union.tree_node* %258, i64 0, i32 0, i32 0, i32 1
  %259 = load %union.tree_node** %type29.i, align 8, !tbaa !16
  %type30.i = bitcast %union.tree_node* %259 to %struct.tree_type*
  %mode31.i = getelementptr inbounds %struct.tree_type* %type30.i, i64 0, i32 6
  %bf.load32.i = load i32* %mode31.i, align 4
  %bf.lshr33.i = lshr i32 %bf.load32.i, 9
  %bf.clear34.i = and i32 %bf.lshr33.i, 127
  %mode37.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1925, i32 1
  %260 = load i32* %mode37.i, align 4, !tbaa !38
  %cmp38.i = icmp eq i32 %bf.clear34.i, %260
  br i1 %cmp38.i, label %for.inc.i1937, label %if.then39.i

if.then39.i:                                      ; preds = %if.end.i
  %unsignedp.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1925, i32 6
  %261 = load i32* %unsignedp.i, align 4, !tbaa !37
  %call48.i1934 = call %struct.rtx_def* @convert_modes(i32 %260, i32 %bf.clear34.i, %struct.rtx_def* %call19.i, i32 %261) #4
  store %struct.rtx_def* %call48.i1934, %struct.rtx_def** %value.i1933, align 8, !tbaa !54
  br label %for.inc.i1937

for.inc.i1937:                                    ; preds = %if.then39.i, %if.end.i
  %indvars.iv.next.i1935 = add nuw nsw i64 %indvars.iv.i1925, 1
  %262 = trunc i64 %indvars.iv.next.i1935 to i32
  %cmp.i1936 = icmp slt i32 %262, %num_actuals.0.lcssa
  br i1 %cmp.i1936, label %if.then.i1931, label %precompute_arguments.exit

precompute_arguments.exit:                        ; preds = %for.inc.i1937, %for.inc.us.i, %if.then546
  %and550 = and i32 %storemerge1825, 4100
  %tobool551 = icmp eq i32 %and550, 0
  br i1 %tobool551, label %if.end553, label %if.then552

if.then552:                                       ; preds = %precompute_arguments.exit
  call void @start_sequence() #4
  br label %if.end553

if.end553:                                        ; preds = %if.end535, %precompute_arguments.exit, %if.then552
  %adjusted_args_size.sroa.0.0.copyload = load i64* %constant.i, align 8
  %adjusted_args_size.sroa.16.0.copyload = load %union.tree_node** %var.i, align 8
  %conv560 = select i1 %cmp498, i32 0, i32 %64
  %conv.i1940 = trunc i64 %adjusted_args_size.sroa.0.0.copyload to i32
  %263 = load i32* @target_flags, align 4, !tbaa !17
  %and.i1941 = and i32 %263, 4096
  %tobool.i1942 = icmp eq i32 %and.i1941, 0
  br i1 %tobool.i1942, label %if.end.i1947, label %land.lhs.true.i1944

land.lhs.true.i1944:                              ; preds = %if.end553
  %and1.i = lshr i32 %263, 20
  %264 = and i32 %and1.i, 32
  %265 = add i32 %264, 32
  %cmp.i1943 = icmp slt i32 %265, %conv560
  %.preferred_stack_boundary.i = select i1 %cmp.i1943, i32 %265, i32 %conv560
  br label %if.end.i1947

if.end.i1947:                                     ; preds = %land.lhs.true.i1944, %if.end553
  %preferred_stack_boundary.addr.0.i = phi i32 [ %conv560, %if.end553 ], [ %.preferred_stack_boundary.i, %land.lhs.true.i1944 ]
  %tobool7.i1946 = icmp eq %union.tree_node* %adjusted_args_size.sroa.16.0.copyload, null
  br i1 %tobool7.i1946, label %if.else.i1957, label %cond.false.i1951

cond.false.i1951:                                 ; preds = %if.end.i1947
  %266 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call14.i1948 = call %union.tree_node* @convert(%union.tree_node* %266, %union.tree_node* %adjusted_args_size.sroa.16.0.copyload) #4
  %call16.i = call %union.tree_node* @size_int_wide(i64 %adjusted_args_size.sroa.0.0.copyload, i32 1) #4
  %call17.i = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call14.i1948, %union.tree_node* %call16.i) #4
  %div.i1949 = sdiv i32 %preferred_stack_boundary.addr.0.i, 8
  %cmp21.i1950 = icmp sgt i32 %preferred_stack_boundary.addr.0.i, 15
  br i1 %cmp21.i1950, label %if.then23.i, label %compute_argument_block_size.exit

if.then23.i:                                      ; preds = %cond.false.i1951
  %267 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr.i1952 = getelementptr inbounds %struct.function* %267, i64 0, i32 2
  %268 = load %struct.expr_status** %expr.i1952, align 8, !tbaa !18
  %x_stack_pointer_delta.i = getelementptr inbounds %struct.expr_status* %268, i64 0, i32 2
  %269 = load i32* %x_stack_pointer_delta.i, align 4, !tbaa !51
  %sub.i1953 = add nsw i32 %div.i1949, -1
  %and24.i = and i32 %269, %sub.i1953
  %tobool25.i = icmp eq i32 %and24.i, 0
  br i1 %tobool25.i, label %if.end27.i, label %if.then26.i

if.then26.i:                                      ; preds = %if.then23.i
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 1425, i8* getelementptr inbounds ([28 x i8]* @__FUNCTION__.compute_argument_block_size, i64 0, i64 0)) #7
  unreachable

if.end27.i:                                       ; preds = %if.then23.i
  %call29.i = call %union.tree_node* @round_up(%union.tree_node* %call17.i, i32 %div.i1949) #4
  br label %compute_argument_block_size.exit

if.else.i1957:                                    ; preds = %if.end.i1947
  %div46.i = sdiv i32 %preferred_stack_boundary.addr.0.i, 8
  %cmp47.i = icmp slt i32 %preferred_stack_boundary.addr.0.i, 8
  %270 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr52.i = getelementptr inbounds %struct.function* %270, i64 0, i32 2
  %271 = load %struct.expr_status** %expr52.i, align 8, !tbaa !18
  %x_stack_pointer_delta53.i = getelementptr inbounds %struct.expr_status* %271, i64 0, i32 2
  %272 = load i32* %x_stack_pointer_delta53.i, align 4, !tbaa !51
  %conv54.i = sext i32 %272 to i64
  %273 = sext i32 %div46.i to i64
  %conv55.i = select i1 %cmp47.i, i64 1, i64 %273
  %add.i1954 = add i64 %adjusted_args_size.sroa.0.0.copyload, -1
  %add56.i = add i64 %add.i1954, %conv55.i
  %sub57.i = add i64 %add56.i, %conv54.i
  %div59.i = srem i64 %sub57.i, %conv55.i
  %mul.i1955 = sub i64 %sub57.i, %div59.i
  %sub64.i = sub i64 %mul.i1955, %conv54.i
  %cmp68.i1956 = icmp sgt i64 %sub64.i, 0
  %sub64..i = select i1 %cmp68.i1956, i64 %sub64.i, i64 0
  br label %compute_argument_block_size.exit

compute_argument_block_size.exit:                 ; preds = %cond.false.i1951, %if.end27.i, %if.else.i1957
  %adjusted_args_size.sroa.16.0.copyload2265 = phi %union.tree_node* [ %call17.i, %cond.false.i1951 ], [ %call29.i, %if.end27.i ], [ null, %if.else.i1957 ]
  %adjusted_args_size.sroa.0.0.2263 = phi i64 [ 0, %cond.false.i1951 ], [ 0, %if.end27.i ], [ %sub64..i, %if.else.i1957 ]
  %274 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr562 = getelementptr inbounds %struct.function* %274, i64 0, i32 2
  %275 = load %struct.expr_status** %expr562, align 8, !tbaa !18
  %x_stack_pointer_delta563 = getelementptr inbounds %struct.expr_status* %275, i64 0, i32 2
  %276 = load i32* %x_stack_pointer_delta563, align 4, !tbaa !51
  %x_pending_stack_adjust565 = getelementptr inbounds %struct.expr_status* %275, i64 0, i32 0
  %277 = load i32* %x_pending_stack_adjust565, align 4, !tbaa !35
  %sub566 = sub nsw i32 %276, %277
  br i1 %cmp498, label %if.then569, label %if.else573

if.then569:                                       ; preds = %compute_argument_block_size.exit
  %278 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 8, !tbaa !1
  %279 = load i64* %constant.i, align 8, !tbaa !46
  %conv571 = trunc i64 %279 to i32
  %call572 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %conv571) #4
  store %struct.simple_bitmap_def* %call572, %struct.simple_bitmap_def** @stored_args_map, align 8, !tbaa !1
  call void @sbitmap_zero(%struct.simple_bitmap_def* %call572) #4
  br label %if.end707

if.else573:                                       ; preds = %compute_argument_block_size.exit
  %cmp575 = icmp eq %union.tree_node* %adjusted_args_size.sroa.16.0.copyload2265, null
  br i1 %cmp575, label %if.else611, label %if.then577

if.then577:                                       ; preds = %if.else573
  %280 = load %struct.rtx_def** %old_stack_level, align 8, !tbaa !1
  %cmp578 = icmp eq %struct.rtx_def* %280, null
  br i1 %cmp578, label %if.end585, label %cond.end608

if.end585:                                        ; preds = %if.then577
  call void @emit_stack_save(i32 0, %struct.rtx_def** %old_stack_level, %struct.rtx_def* null) #4
  %281 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr581 = getelementptr inbounds %struct.function* %281, i64 0, i32 2
  %282 = load %struct.expr_status** %expr581, align 8, !tbaa !18
  %x_pending_stack_adjust582 = getelementptr inbounds %struct.expr_status* %282, i64 0, i32 0
  %283 = load i32* %x_pending_stack_adjust582, align 4, !tbaa !35
  store i32 0, i32* %x_pending_stack_adjust582, align 4, !tbaa !35
  %284 = load i32* @stack_arg_under_construction, align 4, !tbaa !17
  store i32 0, i32* @stack_arg_under_construction, align 4, !tbaa !17
  br label %cond.end608

cond.end608:                                      ; preds = %if.then577, %if.end585
  %old_stack_arg_under_construction.12282 = phi i32 [ %284, %if.end585 ], [ %old_stack_arg_under_construction.02360.ph, %if.then577 ]
  %285 = phi i32 [ %283, %if.end585 ], [ %.ph, %if.then577 ]
  %286 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call601 = call %union.tree_node* @convert(%union.tree_node* %286, %union.tree_node* %adjusted_args_size.sroa.16.0.copyload2265) #4
  %call603 = call %union.tree_node* @size_int_wide(i64 %adjusted_args_size.sroa.0.0.2263, i32 1) #4
  %call604 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call601, %union.tree_node* %call603) #4
  %call607 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call604, %struct.rtx_def* null, i32 0, i32 0) #4
  %call610 = call %struct.rtx_def* @push_block(%struct.rtx_def* %call607, i32 0, i32 0) #4
  br label %if.end707

if.else611:                                       ; preds = %if.else573
  %conv613 = trunc i64 %adjusted_args_size.sroa.0.0.2263 to i32
  %outgoing_args_size = getelementptr inbounds %struct.function* %274, i64 0, i32 11
  %287 = load i32* %outgoing_args_size, align 4, !tbaa !24
  %cmp614 = icmp sgt i32 %conv613, %287
  br i1 %cmp614, label %if.then616, label %if.end618

if.then616:                                       ; preds = %if.else611
  store i32 %conv613, i32* %outgoing_args_size, align 4, !tbaa !24
  br label %if.end618

if.end618:                                        ; preds = %if.then616, %if.else611
  br i1 %tobool619, label %compute_argument_addresses.exit, label %if.then620

if.then620:                                       ; preds = %if.end618
  %288 = load i32* @target_flags, align 4, !tbaa !17
  %and621 = and i32 %288, 4096
  %tobool622 = icmp eq i32 %and621, 0
  br i1 %tobool622, label %if.else644, label %if.then623

if.then623:                                       ; preds = %if.then620
  %cmp625 = icmp sgt i32 %4, %conv613
  %cond630 = select i1 %cmp625, i32 %4, i32 %conv613
  store i32 %cond630, i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  %conv631 = sext i32 %cond630 to i64
  %289 = alloca i8, i64 %conv631, align 1
  store i8* %289, i8** @stack_usage_map, align 8, !tbaa !1
  br i1 %tobool632, label %if.end635, label %if.then633

if.then633:                                       ; preds = %if.then623
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %289, i8* %5, i64 %idxprom639, i32 1, i1 false)
  br label %if.end635

if.end635:                                        ; preds = %if.then623, %if.then633
  %cmp636 = icmp eq i32 %cond630, %4
  br i1 %cmp636, label %if.end643, label %if.then638

if.then638:                                       ; preds = %if.end635
  %arrayidx640 = getelementptr inbounds i8* %289, i64 %idxprom639
  %sub641 = sub nsw i32 %cond630, %4
  %conv642 = sext i32 %sub641 to i64
  call void @llvm.memset.p0i8.i64(i8* %arrayidx640, i8 0, i64 %conv642, i32 1, i1 false)
  br label %if.end643

if.end643:                                        ; preds = %if.end635, %if.then638
  %290 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !1
  br label %if.end707

if.else644:                                       ; preds = %if.then620
  %x_inhibit_defer_pop646 = getelementptr inbounds %struct.expr_status* %275, i64 0, i32 1
  %291 = load i32* %x_inhibit_defer_pop646, align 4, !tbaa !21
  %cmp647 = icmp eq i32 %291, 0
  br i1 %cmp647, label %if.then649, label %if.end663

if.then649:                                       ; preds = %if.else644
  %add.i1960 = add nsw i32 %276, %conv.i1940
  %rem.i = srem i32 %add.i1960, %conv733
  %conv.i1961 = sext i32 %rem.i to i64
  %rem2.i = srem i32 %277, %conv733
  %conv3.i = sext i32 %rem2.i to i64
  %sub.i1963 = sub nsw i64 %conv.i1961, %conv3.i
  %conv6.i1964 = sext i32 %277 to i64
  br i1 %cmp.i2011, label %if.then.i1967, label %combine_pending_stack_adjustment_and_call.exit

if.then.i1967:                                    ; preds = %if.then649
  %cmp8.i1966 = icmp sgt i64 %sub.i1963, 0
  br i1 %cmp8.i1966, label %if.then10.i, label %if.else.i1968

if.then10.i:                                      ; preds = %if.then.i1967
  %sub1233.i = sub i64 %conv6.i1964, %conv11.i2014
  %sub13.i = add i64 %sub1233.i, %sub.i1963
  br label %combine_pending_stack_adjustment_and_call.exit

if.else.i1968:                                    ; preds = %if.then.i1967
  %add14.i = add nsw i64 %sub.i1963, %conv6.i1964
  br label %combine_pending_stack_adjustment_and_call.exit

combine_pending_stack_adjustment_and_call.exit:   ; preds = %if.then649, %if.then10.i, %if.else.i1968
  %adjustment.0.i = phi i64 [ %sub13.i, %if.then10.i ], [ %add14.i, %if.else.i1968 ], [ %conv6.i1964, %if.then649 ]
  %sext2304 = shl i64 %adjusted_args_size.sroa.0.0.copyload, 32
  %conv20.i = ashr exact i64 %sext2304, 32
  %sub19.i = sub i64 %conv20.i, %adjustment.0.i
  %add21.i = add i64 %sub19.i, %conv6.i1964
  %conv22.i = trunc i64 %adjustment.0.i to i32
  %sub652 = sub nsw i32 %conv.i1940, %conv22.i
  %cmp653 = icmp slt i32 %sub652, 0
  br i1 %cmp653, label %if.end663.thread, label %if.else659

if.end663.thread:                                 ; preds = %combine_pending_stack_adjustment_and_call.exit
  %sub656 = sub nsw i32 0, %sub652
  store i32 %sub656, i32* %x_pending_stack_adjust565, align 4, !tbaa !35
  call void @do_pending_stack_adjust() #4
  br label %if.then666

if.else659:                                       ; preds = %combine_pending_stack_adjustment_and_call.exit
  store i32 0, i32* %x_pending_stack_adjust565, align 4, !tbaa !35
  br label %if.end663

if.end663:                                        ; preds = %if.else659, %if.else644
  %adjusted_args_size.sroa.0.0.2262 = phi i64 [ %add21.i, %if.else659 ], [ %adjusted_args_size.sroa.0.0.2263, %if.else644 ]
  %needed.0 = phi i32 [ %sub652, %if.else659 ], [ %conv613, %if.else644 ]
  %cmp664 = icmp eq i32 %needed.0, 0
  br i1 %cmp664, label %if.then666, label %if.else667

if.then666:                                       ; preds = %if.end663.thread, %if.end663
  %adjusted_args_size.sroa.0.0.22622285 = phi i64 [ %add21.i, %if.end663.thread ], [ %adjusted_args_size.sroa.0.0.2262, %if.end663 ]
  %292 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !1
  br label %if.end671

if.else667:                                       ; preds = %if.end663
  %conv668 = sext i32 %needed.0 to i64
  %call669 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv668) #4
  %call670 = call %struct.rtx_def* @push_block(%struct.rtx_def* %call669, i32 0, i32 0) #4
  br label %if.end671

if.end671:                                        ; preds = %if.else667, %if.then666
  %adjusted_args_size.sroa.0.0.22622284 = phi i64 [ %adjusted_args_size.sroa.0.0.22622285, %if.then666 ], [ %adjusted_args_size.sroa.0.0.2262, %if.else667 ]
  %argblock.0 = phi %struct.rtx_def* [ %292, %if.then666 ], [ %call670, %if.else667 ]
  %call672 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %argblock.0) #4
  %293 = load i32* @stack_arg_under_construction, align 4, !tbaa !17
  %tobool673 = icmp eq i32 %293, 0
  br i1 %tobool673, label %if.end690, label %if.then674

if.then674:                                       ; preds = %if.end671
  %call678 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %adjusted_args_size.sroa.0.0.22622284) #4
  %294 = load %struct.rtx_def** %old_stack_level, align 8, !tbaa !1
  %cmp679 = icmp eq %struct.rtx_def* %294, null
  br i1 %cmp679, label %if.then681, label %if.end688

if.then681:                                       ; preds = %if.then674
  call void @emit_stack_save(i32 0, %struct.rtx_def** %old_stack_level, %struct.rtx_def* null) #4
  %295 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr682 = getelementptr inbounds %struct.function* %295, i64 0, i32 2
  %296 = load %struct.expr_status** %expr682, align 8, !tbaa !18
  %x_pending_stack_adjust683 = getelementptr inbounds %struct.expr_status* %296, i64 0, i32 0
  %297 = load i32* %x_pending_stack_adjust683, align 4, !tbaa !35
  store i32 0, i32* %x_pending_stack_adjust683, align 4, !tbaa !35
  %298 = load i32* @stack_arg_under_construction, align 4, !tbaa !17
  store i32 0, i32* @stack_arg_under_construction, align 4, !tbaa !17
  %299 = load i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  %conv686 = sext i32 %299 to i64
  %300 = alloca i8, i64 %conv686, align 1
  store i8* %300, i8** @stack_usage_map, align 8, !tbaa !1
  call void @llvm.memset.p0i8.i64(i8* %300, i8 0, i64 %conv686, i32 1, i1 false)
  store i32 0, i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  br label %if.end688

if.end688:                                        ; preds = %if.then681, %if.then674
  %301 = phi i32 [ %297, %if.then681 ], [ %.ph, %if.then674 ]
  %old_stack_arg_under_construction.2 = phi i32 [ %298, %if.then681 ], [ %old_stack_arg_under_construction.02360.ph, %if.then674 ]
  %call689 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %call678, %struct.rtx_def* null, i32 8) #4
  br label %if.end690

if.end690:                                        ; preds = %if.end671, %if.end688
  %302 = phi i32 [ %301, %if.end688 ], [ %.ph, %if.end671 ]
  %old_stack_arg_under_construction.3 = phi i32 [ %old_stack_arg_under_construction.2, %if.end688 ], [ %old_stack_arg_under_construction.02360.ph, %if.end671 ]
  br i1 %cmp81.i, label %for.body694, label %if.end707

for.cond691:                                      ; preds = %for.body694
  %303 = trunc i64 %indvars.iv.next to i32
  %cmp692 = icmp slt i32 %303, %num_actuals.0.lcssa
  br i1 %cmp692, label %for.body694, label %if.end707

for.body694:                                      ; preds = %if.end690, %for.cond691
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond691 ], [ 0, %if.end690 ]
  %pass_on_stack = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv, i32 8
  %304 = load i32* %pass_on_stack, align 4, !tbaa !42
  %tobool697 = icmp eq i32 %304, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool697, label %for.cond691, label %if.then698

if.then698:                                       ; preds = %for.body694
  %call699 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %call672) #4
  br label %if.end707

if.end707:                                        ; preds = %for.cond691, %if.end690, %cond.end608, %if.end643, %if.then698, %if.then569
  %adjusted_args_size.sroa.0.0.2261 = phi i64 [ %adjusted_args_size.sroa.0.0.2263, %if.then569 ], [ %adjusted_args_size.sroa.0.0.2263, %cond.end608 ], [ %adjusted_args_size.sroa.0.0.2263, %if.end643 ], [ %adjusted_args_size.sroa.0.0.22622284, %if.then698 ], [ %adjusted_args_size.sroa.0.0.22622284, %if.end690 ], [ %adjusted_args_size.sroa.0.0.22622284, %for.cond691 ]
  %305 = phi i32 [ %.ph, %if.then569 ], [ %285, %cond.end608 ], [ %.ph, %if.end643 ], [ %302, %if.then698 ], [ %302, %if.end690 ], [ %302, %for.cond691 ]
  %old_stack_arg_under_construction.4 = phi i32 [ %old_stack_arg_under_construction.02360.ph, %if.then569 ], [ %old_stack_arg_under_construction.12282, %cond.end608 ], [ %old_stack_arg_under_construction.02360.ph, %if.end643 ], [ %old_stack_arg_under_construction.3, %if.then698 ], [ %old_stack_arg_under_construction.3, %if.end690 ], [ %old_stack_arg_under_construction.3, %for.cond691 ]
  %argblock.1 = phi %struct.rtx_def* [ %278, %if.then569 ], [ %call610, %cond.end608 ], [ %290, %if.end643 ], [ %call699, %if.then698 ], [ %call672, %if.end690 ], [ %call672, %for.cond691 ]
  %tobool.i1970 = icmp eq %struct.rtx_def* %argblock.1, null
  br i1 %tobool.i1970, label %compute_argument_addresses.exit, label %if.then.i1974

if.then.i1974:                                    ; preds = %if.end707
  %306 = getelementptr inbounds %struct.rtx_def* %argblock.1, i64 0, i32 0
  %bf.load.i1971 = load i32* %306, align 8
  %bf.clear.i1972 = and i32 %bf.load.i1971, 65535
  %cmp.i1973 = icmp eq i32 %bf.clear.i1972, 75
  br i1 %cmp.i1973, label %if.then1.i, label %if.end.i1977

if.then1.i:                                       ; preds = %if.then.i1974
  %fld.i = getelementptr inbounds %struct.rtx_def* %argblock.1, i64 0, i32 1
  %rtx.i1975 = bitcast [1 x %union.rtunion_def]* %fld.i to %struct.rtx_def**
  %307 = load %struct.rtx_def** %rtx.i1975, align 8, !tbaa !1
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %argblock.1, i64 0, i32 1, i64 1
  %rtx4.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %308 = load %struct.rtx_def** %rtx4.i, align 8, !tbaa !1
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %308, i64 0, i32 1, i64 0, i32 0
  %309 = load i64* %rtwint.i, align 8, !tbaa !44
  %sext.i = shl i64 %309, 32
  %phitmp.i1976 = ashr exact i64 %sext.i, 32
  br label %if.end.i1977

if.end.i1977:                                     ; preds = %if.then1.i, %if.then.i1974
  %arg_offset.0.i = phi i64 [ %phitmp.i1976, %if.then1.i ], [ 0, %if.then.i1974 ]
  %arg_reg.0.i = phi %struct.rtx_def* [ %307, %if.then1.i ], [ %argblock.1, %if.then.i1974 ]
  br i1 %cmp81.i, label %for.body.i1981, label %compute_argument_addresses.exit

for.body.i1981:                                   ; preds = %if.end.i1977, %for.inc.i2000
  %indvars.iv.i1978 = phi i64 [ %indvars.iv.next.i1999, %for.inc.i2000 ], [ 0, %if.end.i1977 ]
  %offset10.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 9
  %var.i1979 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 9, i32 1
  %310 = load %union.tree_node** %var.i1979, align 8, !tbaa !56
  %cmp11.i1980 = icmp eq %union.tree_node* %310, null
  br i1 %cmp11.i1980, label %cond.true.i1984, label %cond.false28.i

cond.true.i1984:                                  ; preds = %for.body.i1981
  %constant.i1982 = getelementptr inbounds %struct.args_size* %offset10.i, i64 0, i32 0
  %311 = load i64* %constant.i1982, align 8, !tbaa !57
  %call.i1983 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %311) #4
  br label %cond.end41.i

cond.false28.i:                                   ; preds = %for.body.i1981
  %312 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call33.i = call %union.tree_node* @convert(%union.tree_node* %312, %union.tree_node* %310) #4
  %constant37.i = getelementptr inbounds %struct.args_size* %offset10.i, i64 0, i32 0
  %313 = load i64* %constant37.i, align 8, !tbaa !57
  %call38.i1985 = call %union.tree_node* @size_int_wide(i64 %313, i32 1) #4
  %call39.i1986 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call33.i, %union.tree_node* %call38.i1985) #4
  %call40.i1987 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call39.i1986, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end41.i

cond.end41.i:                                     ; preds = %cond.false28.i, %cond.true.i1984
  %cond42.i = phi %struct.rtx_def* [ %call.i1983, %cond.true.i1984 ], [ %call40.i1987, %cond.false28.i ]
  %slot_offset45.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 10
  %var46.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 10, i32 1
  %314 = load %union.tree_node** %var46.i, align 8, !tbaa !58
  %cmp47.i1988 = icmp eq %union.tree_node* %314, null
  br i1 %cmp47.i1988, label %cond.true49.i, label %cond.false68.i

cond.true49.i:                                    ; preds = %cond.end41.i
  %constant53.i = getelementptr inbounds %struct.args_size* %slot_offset45.i, i64 0, i32 0
  %315 = load i64* %constant53.i, align 8, !tbaa !59
  %call54.i = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %315) #4
  br label %cond.end83.i

cond.false68.i:                                   ; preds = %cond.end41.i
  %316 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call73.i = call %union.tree_node* @convert(%union.tree_node* %316, %union.tree_node* %314) #4
  %constant77.i = getelementptr inbounds %struct.args_size* %slot_offset45.i, i64 0, i32 0
  %317 = load i64* %constant77.i, align 8, !tbaa !59
  %call78.i = call %union.tree_node* @size_int_wide(i64 %317, i32 1) #4
  %call79.i = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call73.i, %union.tree_node* %call78.i) #4
  %call82.i = call %struct.rtx_def* @expand_expr(%union.tree_node* %call79.i, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end83.i

cond.end83.i:                                     ; preds = %cond.false68.i, %cond.true49.i
  %cond84.i = phi %struct.rtx_def* [ %call54.i, %cond.true49.i ], [ %call82.i, %cond.false68.i ]
  %pass_on_stack.i1989 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 8
  %318 = load i32* %pass_on_stack.i1989, align 4, !tbaa !42
  %tobool87.i = icmp eq i32 %318, 0
  br i1 %tobool87.i, label %land.lhs.true.i1991, label %if.end93.i

land.lhs.true.i1991:                              ; preds = %cond.end83.i
  %reg.i1990 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 4
  %319 = load %struct.rtx_def** %reg.i1990, align 8, !tbaa !39
  %cmp90.i = icmp eq %struct.rtx_def* %319, null
  br i1 %cmp90.i, label %if.end93.i, label %for.inc.i2000

if.end93.i:                                       ; preds = %land.lhs.true.i1991, %cond.end83.i
  %320 = getelementptr inbounds %struct.rtx_def* %cond42.i, i64 0, i32 0
  %bf.load94.i = load i32* %320, align 8
  %bf.clear95.i = and i32 %bf.load94.i, 65535
  %cmp96.i = icmp eq i32 %bf.clear95.i, 54
  br i1 %cmp96.i, label %if.then98.i, label %if.else.i1993

if.then98.i:                                      ; preds = %if.end93.i
  %rtwint101.i = getelementptr inbounds %struct.rtx_def* %cond42.i, i64 0, i32 1, i64 0, i32 0
  %321 = load i64* %rtwint101.i, align 8, !tbaa !44
  %call102.i = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %arg_reg.0.i, i64 %321) #4
  br label %if.end106.i

if.else.i1993:                                    ; preds = %if.end93.i
  %322 = load i32* @target_flags, align 4, !tbaa !17
  %and.i1992 = lshr i32 %322, 25
  %323 = and i32 %and.i1992, 1
  %324 = or i32 %323, 4
  %call105.i = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %324, %struct.rtx_def* %arg_reg.0.i, %struct.rtx_def* %cond42.i) #4
  br label %if.end106.i

if.end106.i:                                      ; preds = %if.else.i1993, %if.then98.i
  %addr.0.i = phi %struct.rtx_def* [ %call102.i, %if.then98.i ], [ %call105.i, %if.else.i1993 ]
  %call108.i = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %addr.0.i, i64 %arg_offset.0.i) #4
  %mode.i1994 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 1
  %325 = load i32* %mode.i1994, align 4, !tbaa !38
  %call111.i = call %struct.rtx_def* @gen_rtx_MEM(i32 %325, %struct.rtx_def* %call108.i) #4
  %stack.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 12
  store %struct.rtx_def* %call111.i, %struct.rtx_def** %stack.i, align 8, !tbaa !60
  %tree_value.i1995 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 0
  %326 = load %union.tree_node** %tree_value.i1995, align 8, !tbaa !28
  %type.i1996 = getelementptr inbounds %union.tree_node* %326, i64 0, i32 0, i32 0, i32 1
  %327 = load %union.tree_node** %type.i1996, align 8, !tbaa !16
  call void @set_mem_attributes(%struct.rtx_def* %call111.i, %union.tree_node* %327, i32 1) #4
  %328 = getelementptr inbounds %struct.rtx_def* %cond84.i, i64 0, i32 0
  %bf.load119.i = load i32* %328, align 8
  %bf.clear120.i = and i32 %bf.load119.i, 65535
  %cmp121.i = icmp eq i32 %bf.clear120.i, 54
  br i1 %cmp121.i, label %if.then123.i, label %if.else128.i

if.then123.i:                                     ; preds = %if.end106.i
  %rtwint126.i = getelementptr inbounds %struct.rtx_def* %cond84.i, i64 0, i32 1, i64 0, i32 0
  %329 = load i64* %rtwint126.i, align 8, !tbaa !44
  %call127.i = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %arg_reg.0.i, i64 %329) #4
  br label %if.end133.i

if.else128.i:                                     ; preds = %if.end106.i
  %330 = load i32* @target_flags, align 4, !tbaa !17
  %and129.i = lshr i32 %330, 25
  %331 = and i32 %and129.i, 1
  %332 = or i32 %331, 4
  %call132.i = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %332, %struct.rtx_def* %arg_reg.0.i, %struct.rtx_def* %cond84.i) #4
  br label %if.end133.i

if.end133.i:                                      ; preds = %if.else128.i, %if.then123.i
  %addr.1.i = phi %struct.rtx_def* [ %call127.i, %if.then123.i ], [ %call132.i, %if.else128.i ]
  %call135.i1997 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %addr.1.i, i64 %arg_offset.0.i) #4
  %333 = load i32* %mode.i1994, align 4, !tbaa !38
  %call139.i1998 = call %struct.rtx_def* @gen_rtx_MEM(i32 %333, %struct.rtx_def* %call135.i1997) #4
  %stack_slot.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i1978, i32 13
  store %struct.rtx_def* %call139.i1998, %struct.rtx_def** %stack_slot.i, align 8, !tbaa !61
  %334 = load %union.tree_node** %tree_value.i1995, align 8, !tbaa !28
  %type149.i = getelementptr inbounds %union.tree_node* %334, i64 0, i32 0, i32 0, i32 1
  %335 = load %union.tree_node** %type149.i, align 8, !tbaa !16
  call void @set_mem_attributes(%struct.rtx_def* %call139.i1998, %union.tree_node* %335, i32 1) #4
  %336 = load %struct.rtx_def** %stack.i, align 8, !tbaa !60
  call void @set_mem_alias_set(%struct.rtx_def* %336, i64 0) #4
  %337 = load %struct.rtx_def** %stack_slot.i, align 8, !tbaa !61
  call void @set_mem_alias_set(%struct.rtx_def* %337, i64 0) #4
  br label %for.inc.i2000

for.inc.i2000:                                    ; preds = %if.end133.i, %land.lhs.true.i1991
  %indvars.iv.next.i1999 = add nuw nsw i64 %indvars.iv.i1978, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i1999 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %num_actuals.0.lcssa
  br i1 %exitcond, label %compute_argument_addresses.exit, label %for.body.i1981

compute_argument_addresses.exit:                  ; preds = %for.inc.i2000, %if.end618, %if.end707, %if.end.i1977
  %tobool.i19702291 = phi i1 [ true, %if.end707 ], [ false, %if.end.i1977 ], [ true, %if.end618 ], [ false, %for.inc.i2000 ]
  %argblock.12289 = phi %struct.rtx_def* [ null, %if.end707 ], [ %argblock.1, %if.end.i1977 ], [ null, %if.end618 ], [ %argblock.1, %for.inc.i2000 ]
  %old_stack_arg_under_construction.42288 = phi i32 [ %old_stack_arg_under_construction.4, %if.end707 ], [ %old_stack_arg_under_construction.4, %if.end.i1977 ], [ %old_stack_arg_under_construction.02360.ph, %if.end618 ], [ %old_stack_arg_under_construction.4, %for.inc.i2000 ]
  %338 = phi i32 [ %305, %if.end707 ], [ %305, %if.end.i1977 ], [ %.ph, %if.end618 ], [ %305, %for.inc.i2000 ]
  %adjusted_args_size.sroa.0.0.22612287 = phi i64 [ %adjusted_args_size.sroa.0.0.2261, %if.end707 ], [ %adjusted_args_size.sroa.0.0.2261, %if.end.i1977 ], [ %adjusted_args_size.sroa.0.0.2263, %if.end618 ], [ %adjusted_args_size.sroa.0.0.2261, %for.inc.i2000 ]
  %339 = load i32* @target_flags, align 4, !tbaa !17
  %and708 = and i32 %339, 2048
  %tobool709 = icmp eq i32 %and708, 0
  br i1 %tobool709, label %land.lhs.true710, label %if.end747

land.lhs.true710:                                 ; preds = %compute_argument_addresses.exit
  %and711 = and i32 %339, 4096
  %tobool712 = icmp eq i32 %and711, 0
  %or.cond1463 = and i1 %tobool712, %tobool.i19702291
  br i1 %or.cond1463, label %land.lhs.true716, label %if.end747

land.lhs.true716:                                 ; preds = %land.lhs.true710
  %sext2302 = shl i64 %adjusted_args_size.sroa.0.0.copyload, 32
  %conv718 = ashr exact i64 %sext2302, 32
  %cmp719 = icmp eq i64 %adjusted_args_size.sroa.0.0.22612287, %conv718
  br i1 %cmp719, label %if.end747, label %if.then721

if.then721:                                       ; preds = %land.lhs.true716
  %340 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr722 = getelementptr inbounds %struct.function* %340, i64 0, i32 2
  %341 = load %struct.expr_status** %expr722, align 8, !tbaa !18
  %x_pending_stack_adjust723 = getelementptr inbounds %struct.expr_status* %341, i64 0, i32 0
  %342 = load i32* %x_pending_stack_adjust723, align 4, !tbaa !35
  %tobool724 = icmp ne i32 %342, 0
  %and726 = and i32 %storemerge1825, 4096
  %tobool727 = icmp eq i32 %and726, 0
  %or.cond2298 = and i1 %tobool724, %tobool727
  br i1 %or.cond2298, label %land.lhs.true728, label %if.then740

land.lhs.true728:                                 ; preds = %if.then721
  %x_inhibit_defer_pop730 = getelementptr inbounds %struct.expr_status* %341, i64 0, i32 1
  %343 = load i32* %x_inhibit_defer_pop730, align 4, !tbaa !21
  %tobool731 = icmp eq i32 %343, 0
  br i1 %tobool731, label %if.then732, label %if.then740

if.then732:                                       ; preds = %land.lhs.true728
  %x_stack_pointer_delta.i2002 = getelementptr inbounds %struct.expr_status* %341, i64 0, i32 2
  %344 = load i32* %x_stack_pointer_delta.i2002, align 4, !tbaa !51
  %add.i2003 = add nsw i32 %344, %conv.i1940
  %rem.i2004 = srem i32 %add.i2003, %conv733
  %conv.i2005 = sext i32 %rem.i2004 to i64
  %rem2.i2007 = srem i32 %342, %conv733
  %conv3.i2008 = sext i32 %rem2.i2007 to i64
  %sub.i2009 = sub nsw i64 %conv.i2005, %conv3.i2008
  %conv6.i2010 = sext i32 %342 to i64
  br i1 %cmp.i2011, label %if.then.i2013, label %combine_pending_stack_adjustment_and_call.exit2026

if.then.i2013:                                    ; preds = %if.then732
  %cmp8.i2012 = icmp sgt i64 %sub.i2009, 0
  br i1 %cmp8.i2012, label %if.then10.i2017, label %if.else.i2019

if.then10.i2017:                                  ; preds = %if.then.i2013
  %sub1233.i2015 = sub i64 %conv6.i2010, %conv11.i2014
  %sub13.i2016 = add i64 %sub1233.i2015, %sub.i2009
  br label %combine_pending_stack_adjustment_and_call.exit2026

if.else.i2019:                                    ; preds = %if.then.i2013
  %add14.i2018 = add nsw i64 %sub.i2009, %conv6.i2010
  br label %combine_pending_stack_adjustment_and_call.exit2026

combine_pending_stack_adjustment_and_call.exit2026: ; preds = %if.then732, %if.then10.i2017, %if.else.i2019
  %adjustment.0.i2020 = phi i64 [ %sub13.i2016, %if.then10.i2017 ], [ %add14.i2018, %if.else.i2019 ], [ %conv6.i2010, %if.then732 ]
  %sub19.i2022 = add i64 %conv6.i2010, %conv718
  %add21.i2023 = sub i64 %sub19.i2022, %adjustment.0.i2020
  %conv22.i2025 = trunc i64 %adjustment.0.i2020 to i32
  store i32 %conv22.i2025, i32* %x_pending_stack_adjust723, align 4, !tbaa !35
  call void @do_pending_stack_adjust() #4
  br label %if.end747

if.then740:                                       ; preds = %land.lhs.true728, %if.then721
  %sub743 = sub nsw i64 %adjusted_args_size.sroa.0.0.22612287, %conv718
  %call744 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub743) #4
  call void @anti_adjust_stack(%struct.rtx_def* %call744) #4
  br label %if.end747

if.end747:                                        ; preds = %land.lhs.true716, %compute_argument_addresses.exit, %combine_pending_stack_adjustment_and_call.exit2026, %if.then740, %land.lhs.true710
  %tobool.i19702292 = phi i1 [ true, %land.lhs.true716 ], [ %tobool.i19702291, %compute_argument_addresses.exit ], [ true, %combine_pending_stack_adjustment_and_call.exit2026 ], [ true, %if.then740 ], [ %tobool.i19702291, %land.lhs.true710 ]
  %adjusted_args_size.sroa.0.0.2260 = phi i64 [ %adjusted_args_size.sroa.0.0.22612287, %land.lhs.true716 ], [ %adjusted_args_size.sroa.0.0.22612287, %compute_argument_addresses.exit ], [ %add21.i2023, %combine_pending_stack_adjustment_and_call.exit2026 ], [ %adjusted_args_size.sroa.0.0.22612287, %if.then740 ], [ %adjusted_args_size.sroa.0.0.22612287, %land.lhs.true710 ]
  %345 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr748 = getelementptr inbounds %struct.function* %345, i64 0, i32 2
  %346 = load %struct.expr_status** %expr748, align 8, !tbaa !18
  %x_inhibit_defer_pop749 = getelementptr inbounds %struct.expr_status* %346, i64 0, i32 1
  %347 = load i32* %x_inhibit_defer_pop749, align 4, !tbaa !21
  %add750 = add nsw i32 %347, 1
  store i32 %add750, i32* %x_inhibit_defer_pop749, align 4, !tbaa !21
  br i1 %cmp266, label %if.else.i2042, label %if.then.i2030

if.then.i2030:                                    ; preds = %if.end747
  %bf.load.i2028 = load i32* %used_flag.i, align 8
  %bf.clear.i2029 = and i32 %bf.load.i2028, 65536
  %tobool1.i = icmp eq i32 %bf.clear.i2029, 0
  br i1 %tobool1.i, label %if.then2.i, label %if.end.i2033

if.then2.i:                                       ; preds = %if.then.i2030
  call void @assemble_external(%union.tree_node* %call) #4
  %bf.load5.i = load i32* %used_flag.i, align 8
  %bf.set.i = or i32 %bf.load5.i, 65536
  store i32 %bf.set.i, i32* %used_flag.i, align 8
  br label %if.end.i2033

if.end.i2033:                                     ; preds = %if.then2.i, %if.then.i2030
  %348 = load %struct.rtx_def** %rtl.i2031, align 8, !tbaa !33
  %tobool7.i2032 = icmp eq %struct.rtx_def* %348, null
  br i1 %tobool7.i2032, label %cond.false.i2034, label %cond.end.i2038

cond.false.i2034:                                 ; preds = %if.end.i2033
  call void @make_decl_rtl(%union.tree_node* %call, i8* null) #4
  %349 = load %struct.rtx_def** %rtl.i2031, align 8, !tbaa !33
  br label %cond.end.i2038

cond.end.i2038:                                   ; preds = %cond.false.i2034, %if.end.i2033
  %cond.i2035 = phi %struct.rtx_def* [ %349, %cond.false.i2034 ], [ %348, %if.end.i2033 ]
  %arrayidx.i2036 = getelementptr inbounds %struct.rtx_def* %cond.i2035, i64 0, i32 1, i64 0
  %rtx.i2037 = bitcast %union.rtunion_def* %arrayidx.i2036 to %struct.rtx_def**
  %350 = load %struct.rtx_def** %rtx.i2037, align 8, !tbaa !1
  br label %rtx_for_function_call.exit

if.else.i2042:                                    ; preds = %if.end747
  call void @push_temp_slots() #4
  %351 = load %union.tree_node** %arrayidx7, align 8, !tbaa !1
  %call.i2041 = call %struct.rtx_def* @expand_expr(%union.tree_node* %351, %struct.rtx_def* null, i32 0, i32 0) #4
  call void @pop_temp_slots() #4
  call void @emit_queue() #4
  br label %rtx_for_function_call.exit

rtx_for_function_call.exit:                       ; preds = %cond.end.i2038, %if.else.i2042
  %funexp.0.i = phi %struct.rtx_def* [ %350, %cond.end.i2038 ], [ %call.i2041, %if.else.i2042 ]
  %352 = load %union.tree_node** %type753, align 8, !tbaa !16
  %type754 = bitcast %union.tree_node* %352 to %struct.tree_type*
  %mode755 = getelementptr inbounds %struct.tree_type* %type754, i64 0, i32 6
  %bf.load756 = load i32* %mode755, align 4
  %bf.clear758 = and i32 %bf.load756, 65024
  %cmp759 = icmp eq i32 %bf.clear758, 0
  %or.cond1465 = or i1 %cmp759, %cmp263
  br i1 %or.cond1465, label %if.end779, label %if.else772

if.else772:                                       ; preds = %rtx_for_function_call.exit
  %conv776 = zext i1 %cmp498 to i32
  %call777 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %352, %union.tree_node* %call, i32 %conv776) #4
  br label %if.end779

if.end779:                                        ; preds = %if.else772, %rtx_for_function_call.exit
  %valreg.0 = phi %struct.rtx_def* [ null, %rtx_for_function_call.exit ], [ %call777, %if.else772 ]
  br i1 %cmp81.i, label %for.body.i2046, label %if.end862

for.body.i2046:                                   ; preds = %if.end779, %for.inc.i2071
  %reg_parm_seen.0.load2259 = phi i32 [ %reg_parm_seen.0.load2258, %for.inc.i2071 ], [ 0, %if.end779 ]
  %indvars.iv.i2043 = phi i64 [ %indvars.iv.next.i2068, %for.inc.i2071 ], [ 0, %if.end779 ]
  %arrayidx.i2044 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i2043
  %reg.i2045 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i2043, i32 4
  %353 = load %struct.rtx_def** %reg.i2045, align 8, !tbaa !39
  %cmp1.i = icmp eq %struct.rtx_def* %353, null
  br i1 %cmp1.i, label %for.inc.i2071, label %land.lhs.true.i2049

land.lhs.true.i2049:                              ; preds = %for.body.i2046
  %pass_on_stack.i2047 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i2043, i32 8
  %354 = load i32* %pass_on_stack.i2047, align 4, !tbaa !42
  %tobool.i2048 = icmp eq i32 %354, 0
  br i1 %tobool.i2048, label %if.then.i2051, label %for.inc.i2071

if.then.i2051:                                    ; preds = %land.lhs.true.i2049
  %value.i2050 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i2043, i32 2
  %355 = load %struct.rtx_def** %value.i2050, align 8, !tbaa !54
  %cmp6.i = icmp eq %struct.rtx_def* %355, null
  br i1 %cmp6.i, label %if.then7.i, label %if.then.if.end_crit_edge.i

if.then.if.end_crit_edge.i:                       ; preds = %if.then.i2051
  %tree_value20.pre.i = getelementptr inbounds %struct.arg_data* %arrayidx.i2044, i64 0, i32 0
  br label %if.end.i2060

if.then7.i:                                       ; preds = %if.then.i2051
  call void @push_temp_slots() #4
  %tree_value.i2052 = getelementptr inbounds %struct.arg_data* %arrayidx.i2044, i64 0, i32 0
  %356 = load %union.tree_node** %tree_value.i2052, align 8, !tbaa !28
  %call.i2053 = call %struct.rtx_def* @expand_expr(%union.tree_node* %356, %struct.rtx_def* null, i32 0, i32 0) #4
  store %struct.rtx_def* %call.i2053, %struct.rtx_def** %value.i2050, align 8, !tbaa !54
  call void @preserve_temp_slots(%struct.rtx_def* %call.i2053) #4
  call void @pop_temp_slots() #4
  call void @emit_queue() #4
  %.pre.i2059.pre = load %struct.rtx_def** %value.i2050, align 8, !tbaa !54
  br label %if.end.i2060

if.end.i2060:                                     ; preds = %if.then7.i, %if.then.if.end_crit_edge.i
  %.pre.i2059 = phi %struct.rtx_def* [ %355, %if.then.if.end_crit_edge.i ], [ %.pre.i2059.pre, %if.then7.i ]
  %tree_value20.pre-phi.i = phi %union.tree_node** [ %tree_value20.pre.i, %if.then.if.end_crit_edge.i ], [ %tree_value.i2052, %if.then7.i ]
  %mode.i2054 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i2043, i32 1
  %357 = load i32* %mode.i2054, align 4, !tbaa !38
  %358 = load %union.tree_node** %tree_value20.pre-phi.i, align 8, !tbaa !28
  %type.i2055 = getelementptr inbounds %union.tree_node* %358, i64 0, i32 0, i32 0, i32 1
  %359 = load %union.tree_node** %type.i2055, align 8, !tbaa !16
  %type21.i = bitcast %union.tree_node* %359 to %struct.tree_type*
  %mode22.i = getelementptr inbounds %struct.tree_type* %type21.i, i64 0, i32 6
  %bf.load.i2056 = load i32* %mode22.i, align 4
  %bf.lshr.i2057 = lshr i32 %bf.load.i2056, 9
  %bf.clear.i2058 = and i32 %bf.lshr.i2057, 127
  %cmp23.i = icmp eq i32 %357, %bf.clear.i2058
  br i1 %cmp23.i, label %if.end47.i, label %if.then24.i

if.then24.i:                                      ; preds = %if.end.i2060
  %unsignedp.i2061 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv.i2043, i32 6
  %360 = load i32* %unsignedp.i2061, align 4, !tbaa !37
  %call43.i = call %struct.rtx_def* @convert_modes(i32 %357, i32 %bf.clear.i2058, %struct.rtx_def* %.pre.i2059, i32 %360) #4
  store %struct.rtx_def* %call43.i, %struct.rtx_def** %value.i2050, align 8, !tbaa !54
  br label %if.end47.i

if.end47.i:                                       ; preds = %if.then24.i, %if.end.i2060
  %361 = phi %struct.rtx_def* [ %call43.i, %if.then24.i ], [ %.pre.i2059, %if.end.i2060 ]
  %362 = getelementptr inbounds %struct.rtx_def* %361, i64 0, i32 0
  %bf.load51.i = load i32* %362, align 8
  %bf.clear52.i2062 = and i32 %bf.load51.i, 65535
  switch i32 %bf.clear52.i2062, label %land.lhs.true68.i [
    i32 61, label %for.inc.i2071
    i32 63, label %land.lhs.true60.i
  ]

land.lhs.true60.i:                                ; preds = %if.end47.i
  %arrayidx64.i = getelementptr inbounds %struct.rtx_def* %361, i64 0, i32 1, i64 0
  %rtx.i2063 = bitcast %union.rtunion_def* %arrayidx64.i to %struct.rtx_def**
  %363 = load %struct.rtx_def** %rtx.i2063, align 8, !tbaa !1
  %364 = getelementptr inbounds %struct.rtx_def* %363, i64 0, i32 0
  %bf.load65.i2064 = load i32* %364, align 8
  %bf.clear66.i = and i32 %bf.load65.i2064, 65535
  %cmp67.i2065 = icmp eq i32 %bf.clear66.i, 61
  br i1 %cmp67.i2065, label %for.inc.i2071, label %land.lhs.true68.i

land.lhs.true68.i:                                ; preds = %land.lhs.true60.i, %if.end47.i
  %365 = load i32* %mode.i2054, align 4, !tbaa !38
  %cmp72.i = icmp eq i32 %365, 51
  br i1 %cmp72.i, label %for.inc.i2071, label %land.lhs.true73.i2066

land.lhs.true73.i2066:                            ; preds = %land.lhs.true68.i
  %call77.i = call i32 @rtx_cost(%struct.rtx_def* %361, i32 47) #4
  %cmp78.i = icmp sgt i32 %call77.i, 4
  br i1 %cmp78.i, label %if.then84.i, label %for.inc.i2071

if.then84.i:                                      ; preds = %land.lhs.true73.i2066
  %366 = load i32* %mode.i2054, align 4, !tbaa !38
  %367 = load %struct.rtx_def** %value.i2050, align 8, !tbaa !54
  %call91.i = call %struct.rtx_def* @copy_to_mode_reg(i32 %366, %struct.rtx_def* %367) #4
  store %struct.rtx_def* %call91.i, %struct.rtx_def** %value.i2050, align 8, !tbaa !54
  br label %for.inc.i2071

for.inc.i2071:                                    ; preds = %if.then84.i, %land.lhs.true73.i2066, %land.lhs.true68.i, %land.lhs.true60.i, %if.end47.i, %land.lhs.true.i2049, %for.body.i2046
  %reg_parm_seen.0.load2258 = phi i32 [ 1, %if.then84.i ], [ 1, %land.lhs.true73.i2066 ], [ 1, %land.lhs.true68.i ], [ 1, %land.lhs.true60.i ], [ 1, %if.end47.i ], [ %reg_parm_seen.0.load2259, %land.lhs.true.i2049 ], [ %reg_parm_seen.0.load2259, %for.body.i2046 ]
  %indvars.iv.next.i2068 = add nuw nsw i64 %indvars.iv.i2043, 1
  %lftr.wideiv2375 = trunc i64 %indvars.iv.next.i2068 to i32
  %exitcond2376 = icmp eq i32 %lftr.wideiv2375, %num_actuals.0.lcssa
  br i1 %exitcond2376, label %precompute_register_parameters.exit, label %for.body.i2046

precompute_register_parameters.exit:              ; preds = %for.inc.i2071
  br i1 %cmp81.i, label %for.body790.lr.ph, label %for.end822

for.body790.lr.ph:                                ; preds = %precompute_register_parameters.exit
  %cmp805 = icmp ne %union.tree_node* %adjusted_args_size.sroa.16.0.copyload2265, null
  %conv806 = zext i1 %cmp805 to i32
  br label %for.body790

for.body790:                                      ; preds = %for.inc820, %for.body790.lr.ph
  %indvars.iv2377 = phi i64 [ 0, %for.body790.lr.ph ], [ %indvars.iv.next2378, %for.inc820 ]
  %sibcall_failure.02344 = phi i32 [ 0, %for.body790.lr.ph ], [ %sibcall_failure.1, %for.inc820 ]
  %arrayidx792 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2377
  %reg = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2377, i32 4
  %368 = load %struct.rtx_def** %reg, align 8, !tbaa !39
  %cmp793 = icmp eq %struct.rtx_def* %368, null
  br i1 %cmp793, label %if.then800, label %lor.lhs.false795

lor.lhs.false795:                                 ; preds = %for.body790
  %pass_on_stack798 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2377, i32 8
  %369 = load i32* %pass_on_stack798, align 4, !tbaa !42
  %tobool799 = icmp eq i32 %369, 0
  br i1 %tobool799, label %for.inc820, label %if.then800

if.then800:                                       ; preds = %lor.lhs.false795, %for.body790
  %call801 = call %struct.rtx_def* @get_last_insn() #4
  %call807 = call fastcc i32 @store_one_arg(%struct.arg_data* %arrayidx792, %struct.rtx_def* %argblock.12289, i32 %storemerge1825, i32 %conv806)
  %tobool808 = icmp eq i32 %call807, 0
  br i1 %tobool808, label %lor.lhs.false809, label %if.then817

lor.lhs.false809:                                 ; preds = %if.then800
  br i1 %cmp498, label %land.lhs.true812, label %for.inc820

land.lhs.true812:                                 ; preds = %lor.lhs.false809
  %cmp.i2084 = icmp eq %struct.rtx_def* %call801, null
  br i1 %cmp.i2084, label %if.then.i2086, label %if.else.i2089

if.then.i2086:                                    ; preds = %land.lhs.true812
  %call.i2085 = call %struct.rtx_def* @get_insns() #4
  br label %for.cond.preheader.i2090

if.else.i2089:                                    ; preds = %land.lhs.true812
  %arrayidx.i2087 = getelementptr inbounds %struct.rtx_def* %call801, i64 0, i32 1, i64 2
  %rtx.i2088 = bitcast %union.rtunion_def* %arrayidx.i2087 to %struct.rtx_def**
  %370 = load %struct.rtx_def** %rtx.i2088, align 8, !tbaa !1
  br label %for.cond.preheader.i2090

for.cond.preheader.i2090:                         ; preds = %if.else.i2089, %if.then.i2086
  %insn.addr.0.ph.i = phi %struct.rtx_def* [ %call.i2085, %if.then.i2086 ], [ %370, %if.else.i2089 ]
  %tobool43.i = icmp eq %struct.rtx_def* %insn.addr.0.ph.i, null
  br i1 %tobool43.i, label %for.end.i2102, label %for.body.i2094

for.body.i2094:                                   ; preds = %for.cond.preheader.i2090, %for.inc.i2099
  %insn.addr.044.i = phi %struct.rtx_def* [ %374, %for.inc.i2099 ], [ %insn.addr.0.ph.i, %for.cond.preheader.i2090 ]
  %371 = getelementptr inbounds %struct.rtx_def* %insn.addr.044.i, i64 0, i32 0
  %bf.load.i2091 = load i32* %371, align 8
  %bf.clear.i2092 = and i32 %bf.load.i2091, 65535
  %idxprom40.i = zext i32 %bf.clear.i2092 to i64
  %arrayidx1.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom40.i
  %372 = load i8* %arrayidx1.i, align 1, !tbaa !15
  %cmp2.i2093 = icmp eq i8 %372, 105
  br i1 %cmp2.i2093, label %land.lhs.true.i2096, label %for.inc.i2099

land.lhs.true.i2096:                              ; preds = %for.body.i2094
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %insn.addr.044.i, i64 0, i32 1, i64 3
  %rtx6.i = bitcast %union.rtunion_def* %arrayidx5.i to %struct.rtx_def**
  %373 = load %struct.rtx_def** %rtx6.i, align 8, !tbaa !1
  %call7.i = call fastcc i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %373) #4
  %tobool8.i2095 = icmp eq i32 %call7.i, 0
  br i1 %tobool8.i2095, label %for.inc.i2099, label %for.end.i2102

for.inc.i2099:                                    ; preds = %land.lhs.true.i2096, %for.body.i2094
  %arrayidx12.i2097 = getelementptr inbounds %struct.rtx_def* %insn.addr.044.i, i64 0, i32 1, i64 2
  %rtx13.i = bitcast %union.rtunion_def* %arrayidx12.i2097 to %struct.rtx_def**
  %374 = load %struct.rtx_def** %rtx13.i, align 8, !tbaa !1
  %tobool.i2098 = icmp eq %struct.rtx_def* %374, null
  br i1 %tobool.i2098, label %for.end.i2102, label %for.body.i2094

for.end.i2102:                                    ; preds = %for.inc.i2099, %land.lhs.true.i2096, %for.cond.preheader.i2090
  %tobool.lcssa.i = phi i32 [ 0, %for.cond.preheader.i2090 ], [ 0, %for.inc.i2099 ], [ 1, %land.lhs.true.i2096 ]
  %constant.i2100 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2377, i32 10, i32 0
  %375 = load i64* %constant.i2100, align 8, !tbaa !59
  %conv14.i = trunc i64 %375 to i32
  %constant16.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2377, i32 11, i32 0
  %376 = load i64* %constant16.i, align 8, !tbaa !45
  %add.i2101 = add nsw i64 %376, %375
  %conv17.i = trunc i64 %add.i2101 to i32
  %cmp1941.i = icmp slt i32 %conv14.i, %conv17.i
  br i1 %cmp1941.i, label %for.body21.lr.ph.i, label %check_sibcall_argument_overlap.exit

for.body21.lr.ph.i:                               ; preds = %for.end.i2102
  %377 = load %struct.simple_bitmap_def** @stored_args_map, align 8, !tbaa !1
  %378 = trunc i64 %376 to i32
  %379 = add i32 %378, %conv14.i
  br label %for.body21.i

for.body21.i:                                     ; preds = %for.body21.i, %for.body21.lr.ph.i
  %low.042.i = phi i32 [ %conv14.i, %for.body21.lr.ph.i ], [ %inc.i, %for.body21.i ]
  %rem.i2103 = and i32 %low.042.i, 63
  %sh_prom.i = zext i32 %rem.i2103 to i64
  %shl.i = shl i64 1, %sh_prom.i
  %div.i2104 = lshr i32 %low.042.i, 6
  %idxprom22.i = zext i32 %div.i2104 to i64
  %arrayidx23.i = getelementptr inbounds %struct.simple_bitmap_def* %377, i64 0, i32 3, i64 %idxprom22.i
  %380 = load i64* %arrayidx23.i, align 8, !tbaa !44
  %or.i = or i64 %shl.i, %380
  store i64 %or.i, i64* %arrayidx23.i, align 8, !tbaa !44
  %inc.i = add nsw i32 %low.042.i, 1
  %exitcond.i2105 = icmp eq i32 %inc.i, %379
  br i1 %exitcond.i2105, label %check_sibcall_argument_overlap.exit, label %for.body21.i

check_sibcall_argument_overlap.exit:              ; preds = %for.body21.i, %for.end.i2102
  %tobool816 = icmp eq i32 %tobool.lcssa.i, 0
  br i1 %tobool816, label %for.inc820, label %if.then817

if.then817:                                       ; preds = %check_sibcall_argument_overlap.exit, %if.then800
  br label %for.inc820

for.inc820:                                       ; preds = %check_sibcall_argument_overlap.exit, %lor.lhs.false795, %if.then817, %lor.lhs.false809
  %sibcall_failure.1 = phi i32 [ 1, %if.then817 ], [ %sibcall_failure.02344, %check_sibcall_argument_overlap.exit ], [ %sibcall_failure.02344, %lor.lhs.false809 ], [ %sibcall_failure.02344, %lor.lhs.false795 ]
  %indvars.iv.next2378 = add nuw nsw i64 %indvars.iv2377, 1
  %lftr.wideiv2379 = trunc i64 %indvars.iv.next2378 to i32
  %exitcond2380 = icmp eq i32 %lftr.wideiv2379, %num_actuals.0.lcssa
  br i1 %exitcond2380, label %for.end822, label %for.body790

for.end822:                                       ; preds = %for.inc820, %precompute_register_parameters.exit
  %sibcall_failure.0.lcssa = phi i32 [ 0, %precompute_register_parameters.exit ], [ %sibcall_failure.1, %for.inc820 ]
  %tobool823 = icmp eq i32 %reg_parm_seen.0.load2258, 0
  %cmp81.i.not = xor i1 %cmp81.i, true
  %brmerge2418 = or i1 %tobool823, %cmp81.i.not
  br i1 %brmerge2418, label %if.end862, label %for.body828.lr.ph

for.body828.lr.ph:                                ; preds = %for.end822
  %cmp844 = icmp ne %union.tree_node* %adjusted_args_size.sroa.16.0.copyload2265, null
  %conv845 = zext i1 %cmp844 to i32
  br label %for.body828

for.body828:                                      ; preds = %for.inc859, %for.body828.lr.ph
  %indvars.iv2381 = phi i64 [ 0, %for.body828.lr.ph ], [ %indvars.iv.next2382, %for.inc859 ]
  %sibcall_failure.22347 = phi i32 [ %sibcall_failure.0.lcssa, %for.body828.lr.ph ], [ %sibcall_failure.3, %for.inc859 ]
  %arrayidx830 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2381
  %partial = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2381, i32 7
  %381 = load i32* %partial, align 4, !tbaa !41
  %cmp831 = icmp eq i32 %381, 0
  br i1 %cmp831, label %for.inc859, label %land.lhs.true833

land.lhs.true833:                                 ; preds = %for.body828
  %pass_on_stack836 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2381, i32 8
  %382 = load i32* %pass_on_stack836, align 4, !tbaa !42
  %tobool837 = icmp eq i32 %382, 0
  br i1 %tobool837, label %if.then838, label %for.inc859

if.then838:                                       ; preds = %land.lhs.true833
  %call840 = call %struct.rtx_def* @get_last_insn() #4
  %call846 = call fastcc i32 @store_one_arg(%struct.arg_data* %arrayidx830, %struct.rtx_def* %argblock.12289, i32 %storemerge1825, i32 %conv845)
  %tobool847 = icmp eq i32 %call846, 0
  br i1 %tobool847, label %lor.lhs.false848, label %if.then856

lor.lhs.false848:                                 ; preds = %if.then838
  br i1 %cmp498, label %land.lhs.true851, label %for.inc859

land.lhs.true851:                                 ; preds = %lor.lhs.false848
  %cmp.i2106 = icmp eq %struct.rtx_def* %call840, null
  br i1 %cmp.i2106, label %if.then.i2108, label %if.else.i2111

if.then.i2108:                                    ; preds = %land.lhs.true851
  %call.i2107 = call %struct.rtx_def* @get_insns() #4
  br label %for.cond.preheader.i2114

if.else.i2111:                                    ; preds = %land.lhs.true851
  %arrayidx.i2109 = getelementptr inbounds %struct.rtx_def* %call840, i64 0, i32 1, i64 2
  %rtx.i2110 = bitcast %union.rtunion_def* %arrayidx.i2109 to %struct.rtx_def**
  %383 = load %struct.rtx_def** %rtx.i2110, align 8, !tbaa !1
  br label %for.cond.preheader.i2114

for.cond.preheader.i2114:                         ; preds = %if.else.i2111, %if.then.i2108
  %insn.addr.0.ph.i2112 = phi %struct.rtx_def* [ %call.i2107, %if.then.i2108 ], [ %383, %if.else.i2111 ]
  %tobool43.i2113 = icmp eq %struct.rtx_def* %insn.addr.0.ph.i2112, null
  br i1 %tobool43.i2113, label %for.end.i2138, label %for.body.i2121

for.body.i2121:                                   ; preds = %for.cond.preheader.i2114, %for.inc.i2130
  %insn.addr.044.i2115 = phi %struct.rtx_def* [ %387, %for.inc.i2130 ], [ %insn.addr.0.ph.i2112, %for.cond.preheader.i2114 ]
  %384 = getelementptr inbounds %struct.rtx_def* %insn.addr.044.i2115, i64 0, i32 0
  %bf.load.i2116 = load i32* %384, align 8
  %bf.clear.i2117 = and i32 %bf.load.i2116, 65535
  %idxprom40.i2118 = zext i32 %bf.clear.i2117 to i64
  %arrayidx1.i2119 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom40.i2118
  %385 = load i8* %arrayidx1.i2119, align 1, !tbaa !15
  %cmp2.i2120 = icmp eq i8 %385, 105
  br i1 %cmp2.i2120, label %land.lhs.true.i2126, label %for.inc.i2130

land.lhs.true.i2126:                              ; preds = %for.body.i2121
  %arrayidx5.i2122 = getelementptr inbounds %struct.rtx_def* %insn.addr.044.i2115, i64 0, i32 1, i64 3
  %rtx6.i2123 = bitcast %union.rtunion_def* %arrayidx5.i2122 to %struct.rtx_def**
  %386 = load %struct.rtx_def** %rtx6.i2123, align 8, !tbaa !1
  %call7.i2124 = call fastcc i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %386) #4
  %tobool8.i2125 = icmp eq i32 %call7.i2124, 0
  br i1 %tobool8.i2125, label %for.inc.i2130, label %for.end.i2138

for.inc.i2130:                                    ; preds = %land.lhs.true.i2126, %for.body.i2121
  %arrayidx12.i2127 = getelementptr inbounds %struct.rtx_def* %insn.addr.044.i2115, i64 0, i32 1, i64 2
  %rtx13.i2128 = bitcast %union.rtunion_def* %arrayidx12.i2127 to %struct.rtx_def**
  %387 = load %struct.rtx_def** %rtx13.i2128, align 8, !tbaa !1
  %tobool.i2129 = icmp eq %struct.rtx_def* %387, null
  br i1 %tobool.i2129, label %for.end.i2138, label %for.body.i2121

for.end.i2138:                                    ; preds = %for.inc.i2130, %land.lhs.true.i2126, %for.cond.preheader.i2114
  %tobool.lcssa.i2131 = phi i32 [ 0, %for.cond.preheader.i2114 ], [ 0, %for.inc.i2130 ], [ 1, %land.lhs.true.i2126 ]
  %constant.i2132 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2381, i32 10, i32 0
  %388 = load i64* %constant.i2132, align 8, !tbaa !59
  %conv14.i2133 = trunc i64 %388 to i32
  %constant16.i2134 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2381, i32 11, i32 0
  %389 = load i64* %constant16.i2134, align 8, !tbaa !45
  %add.i2135 = add nsw i64 %389, %388
  %conv17.i2136 = trunc i64 %add.i2135 to i32
  %cmp1941.i2137 = icmp slt i32 %conv14.i2133, %conv17.i2136
  br i1 %cmp1941.i2137, label %for.body21.lr.ph.i2139, label %check_sibcall_argument_overlap.exit2151

for.body21.lr.ph.i2139:                           ; preds = %for.end.i2138
  %390 = load %struct.simple_bitmap_def** @stored_args_map, align 8, !tbaa !1
  %391 = trunc i64 %389 to i32
  %392 = add i32 %391, %conv14.i2133
  br label %for.body21.i2150

for.body21.i2150:                                 ; preds = %for.body21.i2150, %for.body21.lr.ph.i2139
  %low.042.i2140 = phi i32 [ %conv14.i2133, %for.body21.lr.ph.i2139 ], [ %inc.i2148, %for.body21.i2150 ]
  %rem.i2141 = and i32 %low.042.i2140, 63
  %sh_prom.i2142 = zext i32 %rem.i2141 to i64
  %shl.i2143 = shl i64 1, %sh_prom.i2142
  %div.i2144 = lshr i32 %low.042.i2140, 6
  %idxprom22.i2145 = zext i32 %div.i2144 to i64
  %arrayidx23.i2146 = getelementptr inbounds %struct.simple_bitmap_def* %390, i64 0, i32 3, i64 %idxprom22.i2145
  %393 = load i64* %arrayidx23.i2146, align 8, !tbaa !44
  %or.i2147 = or i64 %shl.i2143, %393
  store i64 %or.i2147, i64* %arrayidx23.i2146, align 8, !tbaa !44
  %inc.i2148 = add nsw i32 %low.042.i2140, 1
  %exitcond.i2149 = icmp eq i32 %inc.i2148, %392
  br i1 %exitcond.i2149, label %check_sibcall_argument_overlap.exit2151, label %for.body21.i2150

check_sibcall_argument_overlap.exit2151:          ; preds = %for.body21.i2150, %for.end.i2138
  %tobool855 = icmp eq i32 %tobool.lcssa.i2131, 0
  br i1 %tobool855, label %for.inc859, label %if.then856

if.then856:                                       ; preds = %check_sibcall_argument_overlap.exit2151, %if.then838
  br label %for.inc859

for.inc859:                                       ; preds = %check_sibcall_argument_overlap.exit2151, %land.lhs.true833, %for.body828, %if.then856, %lor.lhs.false848
  %sibcall_failure.3 = phi i32 [ %sibcall_failure.22347, %land.lhs.true833 ], [ 1, %if.then856 ], [ %sibcall_failure.22347, %check_sibcall_argument_overlap.exit2151 ], [ %sibcall_failure.22347, %lor.lhs.false848 ], [ %sibcall_failure.22347, %for.body828 ]
  %indvars.iv.next2382 = add nuw nsw i64 %indvars.iv2381, 1
  %lftr.wideiv2383 = trunc i64 %indvars.iv.next2382 to i32
  %exitcond2384 = icmp eq i32 %lftr.wideiv2383, %num_actuals.0.lcssa
  br i1 %exitcond2384, label %if.end862, label %for.body828

if.end862:                                        ; preds = %for.inc859, %for.end822, %if.end779
  %reg_parm_seen.0.load225724122414 = phi i32 [ %reg_parm_seen.0.load2258, %for.end822 ], [ 0, %if.end779 ], [ %reg_parm_seen.0.load2258, %for.inc859 ]
  %sibcall_failure.4 = phi i32 [ %sibcall_failure.0.lcssa, %for.end822 ], [ 0, %if.end779 ], [ %sibcall_failure.3, %for.inc859 ]
  %394 = load i32* @target_flags, align 4, !tbaa !17
  %and863 = and i32 %394, 2048
  %tobool864 = icmp eq i32 %and863, 0
  br i1 %tobool864, label %land.lhs.true865, label %land.lhs.true868

land.lhs.true865:                                 ; preds = %if.end862
  %and866 = and i32 %394, 4096
  %tobool867 = icmp ne i32 %and866, 0
  %or.cond1469 = and i1 %tobool867, %tobool.i19702292
  br i1 %or.cond1469, label %if.then871, label %if.end876

land.lhs.true868:                                 ; preds = %if.end862
  br i1 %tobool.i19702292, label %if.then871, label %if.end876

if.then871:                                       ; preds = %land.lhs.true865, %land.lhs.true868
  %sext2301 = shl i64 %adjusted_args_size.sroa.0.0.copyload, 32
  %conv873 = ashr exact i64 %sext2301, 32
  %sub874 = sub nsw i64 %adjusted_args_size.sroa.0.0.2260, %conv873
  %call875 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub874) #4
  call void @anti_adjust_stack(%struct.rtx_def* %call875) #4
  br label %if.end876

if.end876:                                        ; preds = %if.then871, %land.lhs.true868, %land.lhs.true865
  %or.cond1471 = and i1 %tobool509, %cmp263
  %or.cond1471.not = xor i1 %or.cond1471, true
  %or.cond1473 = or i1 %tobool882, %or.cond1471.not
  br i1 %or.cond1473, label %if.end896, label %if.then883

if.then883:                                       ; preds = %if.end876
  %395 = load %struct.rtx_def** @struct_value_rtx, align 8, !tbaa !1
  %396 = load i32* @target_flags, align 4, !tbaa !17
  %and884 = lshr i32 %396, 25
  %397 = and i32 %and884, 1
  %398 = or i32 %397, 4
  %call887 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %structure_value_addr.1, %struct.rtx_def* null) #4
  %call888 = call %struct.rtx_def* @force_reg(i32 %398, %struct.rtx_def* %call887) #4
  %call889 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %395, %struct.rtx_def* %call888) #4
  %399 = load %struct.rtx_def** @struct_value_rtx, align 8, !tbaa !1
  %400 = getelementptr inbounds %struct.rtx_def* %399, i64 0, i32 0
  %bf.load890 = load i32* %400, align 8
  %bf.clear891 = and i32 %bf.load890, 65535
  %cmp892 = icmp eq i32 %bf.clear891, 61
  br i1 %cmp892, label %if.then894, label %if.end896

if.then894:                                       ; preds = %if.then883
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %399) #4
  br label %if.end896

if.end896:                                        ; preds = %if.then883, %if.then894, %if.end876
  %call899 = call %struct.rtx_def* @prepare_call_address(%struct.rtx_def* %funexp.0.i, %union.tree_node* %call, %struct.rtx_def** %call_fusage, i32 %reg_parm_seen.0.load225724122414, i32 undef)
  br i1 %cmp81.i, label %for.body.lr.ph.i2154, label %load_register_parameters.exit

for.body.lr.ph.i2154:                             ; preds = %if.end896
  %and.i2152 = and i32 %storemerge1825, 256
  %tobool.i2153 = icmp eq i32 %and.i2152, 0
  br label %for.body.i2156

for.body.i2156:                                   ; preds = %for.inc120.i, %for.body.lr.ph.i2154
  %indvars.iv174.i = phi i64 [ 0, %for.body.lr.ph.i2154 ], [ %indvars.iv.next175.i, %for.inc120.i ]
  %arrayidx.i2155 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i
  br i1 %tobool.i2153, label %cond.false.i2159, label %cond.true.i2158

cond.true.i2158:                                  ; preds = %for.body.i2156
  %tail_call_reg.i2157 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 5
  br label %cond.end.i2162

cond.false.i2159:                                 ; preds = %for.body.i2156
  %reg3.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 4
  br label %cond.end.i2162

cond.end.i2162:                                   ; preds = %cond.false.i2159, %cond.true.i2158
  %cond.in.i = phi %struct.rtx_def** [ %tail_call_reg.i2157, %cond.true.i2158 ], [ %reg3.i, %cond.false.i2159 ]
  %cond.i2160 = load %struct.rtx_def** %cond.in.i, align 8
  %partial6.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 7
  %401 = load i32* %partial6.i, align 4, !tbaa !41
  %tobool7.i2161 = icmp eq %struct.rtx_def* %cond.i2160, null
  br i1 %tobool7.i2161, label %for.inc120.i, label %if.then.i2164

if.then.i2164:                                    ; preds = %cond.end.i2162
  %tobool8.i2163 = icmp eq i32 %401, 0
  br i1 %tobool8.i2163, label %cond.false10.i, label %cond.true9.i

cond.true9.i:                                     ; preds = %if.then.i2164
  %conv.i2165 = sext i32 %401 to i64
  br label %cond.end33.i

cond.false10.i:                                   ; preds = %if.then.i2164
  %tree_value.i2166 = getelementptr inbounds %struct.arg_data* %arrayidx.i2155, i64 0, i32 0
  %402 = load %union.tree_node** %tree_value.i2166, align 8, !tbaa !28
  %type.i2167 = getelementptr inbounds %union.tree_node* %402, i64 0, i32 0, i32 0, i32 1
  %403 = load %union.tree_node** %type.i2167, align 8, !tbaa !16
  %type13.i = bitcast %union.tree_node* %403 to %struct.tree_type*
  %mode.i2168 = getelementptr inbounds %struct.tree_type* %type13.i, i64 0, i32 6
  %bf.load.i2169 = load i32* %mode.i2168, align 4
  %bf.clear.i2170 = and i32 %bf.load.i2169, 65024
  %cmp14.i2171 = icmp eq i32 %bf.clear.i2170, 26112
  br i1 %cmp14.i2171, label %cond.true16.i, label %cond.end33.i

cond.true16.i:                                    ; preds = %cond.false10.i
  %call.i2172 = call i64 @int_size_in_bytes(%union.tree_node* %403) #4
  %404 = load i32* @target_flags, align 4, !tbaa !17
  %and22.i = lshr i32 %404, 23
  %405 = and i32 %and22.i, 4
  %406 = add i32 %405, 4
  %sub167.i = or i32 %405, 3
  %conv25168.i = zext i32 %sub167.i to i64
  %add.i2173 = add nsw i64 %conv25168.i, %call.i2172
  %conv29169.i = zext i32 %406 to i64
  %div.i2174 = sdiv i64 %add.i2173, %conv29169.i
  br label %cond.end33.i

cond.end33.i:                                     ; preds = %cond.true16.i, %cond.false10.i, %cond.true9.i
  %cond34.i = phi i64 [ %conv.i2165, %cond.true9.i ], [ %div.i2174, %cond.true16.i ], [ -1, %cond.false10.i ]
  %conv35.i = trunc i64 %cond34.i to i32
  %407 = getelementptr inbounds %struct.rtx_def* %cond.i2160, i64 0, i32 0
  %bf.load36.i = load i32* %407, align 8
  %bf.clear37.i = and i32 %bf.load36.i, 65535
  %cmp38.i2175 = icmp eq i32 %bf.clear37.i, 39
  br i1 %cmp38.i2175, label %if.then40.i, label %if.else.i2178

if.then40.i:                                      ; preds = %cond.end33.i
  %value.i2176 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 2
  %408 = load %struct.rtx_def** %value.i2176, align 8, !tbaa !54
  %tree_value45.i = getelementptr inbounds %struct.arg_data* %arrayidx.i2155, i64 0, i32 0
  %409 = load %union.tree_node** %tree_value45.i, align 8, !tbaa !28
  %type47.i = getelementptr inbounds %union.tree_node* %409, i64 0, i32 0, i32 0, i32 1
  %410 = load %union.tree_node** %type47.i, align 8, !tbaa !16
  %call48.i2177 = call i64 @int_size_in_bytes(%union.tree_node* %410) #4
  %conv49.i = trunc i64 %call48.i2177 to i32
  call void @emit_group_load(%struct.rtx_def* %cond.i2160, %struct.rtx_def* %408, i32 %conv49.i) #4
  br label %if.end97.i

if.else.i2178:                                    ; preds = %cond.end33.i
  %cmp50.i = icmp eq i32 %conv35.i, -1
  br i1 %cmp50.i, label %if.then52.i, label %if.else57.i

if.then52.i:                                      ; preds = %if.else.i2178
  %value55.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 2
  %411 = load %struct.rtx_def** %value55.i, align 8, !tbaa !54
  %call56.i = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %cond.i2160, %struct.rtx_def* %411) #4
  br label %if.end97.i

if.else57.i:                                      ; preds = %if.else.i2178
  %n_aligned_regs.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 16
  %412 = load i32* %n_aligned_regs.i, align 4, !tbaa !62
  %cmp60.i = icmp eq i32 %412, 0
  br i1 %cmp60.i, label %if.else78.i, label %for.cond63.preheader.i

for.cond63.preheader.i:                           ; preds = %if.else57.i
  %cmp67170.i = icmp sgt i32 %412, 0
  br i1 %cmp67170.i, label %for.body69.lr.ph.i, label %if.end97.i

for.body69.lr.ph.i:                               ; preds = %for.cond63.preheader.i
  %arrayidx70.i = getelementptr inbounds %struct.rtx_def* %cond.i2160, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx70.i to i32*
  %aligned_regs.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 15
  br label %for.body69.i

for.body69.i:                                     ; preds = %for.body69.i, %for.body69.lr.ph.i
  %indvars.iv.i2179 = phi i64 [ 0, %for.body69.lr.ph.i ], [ %indvars.iv.next.i2181, %for.body69.i ]
  %413 = load i32* @word_mode, align 4, !tbaa !15
  %414 = load i32* %rtuint.i, align 4, !tbaa !17
  %415 = trunc i64 %indvars.iv.i2179 to i32
  %add71.i = add i32 %414, %415
  %call72.i = call %struct.rtx_def* @gen_rtx_REG(i32 %413, i32 %add71.i) #4
  %416 = load %struct.rtx_def*** %aligned_regs.i, align 8, !tbaa !63
  %arrayidx76.i = getelementptr inbounds %struct.rtx_def** %416, i64 %indvars.iv.i2179
  %417 = load %struct.rtx_def** %arrayidx76.i, align 8, !tbaa !1
  %call77.i2180 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call72.i, %struct.rtx_def* %417) #4
  %indvars.iv.next.i2181 = add nuw nsw i64 %indvars.iv.i2179, 1
  %418 = load i32* %n_aligned_regs.i, align 4, !tbaa !62
  %419 = trunc i64 %indvars.iv.next.i2181 to i32
  %cmp67.i2182 = icmp slt i32 %419, %418
  br i1 %cmp67.i2182, label %for.body69.i, label %if.end97.i

if.else78.i:                                      ; preds = %if.else57.i
  br i1 %tobool8.i2163, label %if.then84.i2187, label %lor.lhs.false.i2185

lor.lhs.false.i2185:                              ; preds = %if.else78.i
  %pass_on_stack.i2183 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 8
  %420 = load i32* %pass_on_stack.i2183, align 4, !tbaa !42
  %tobool83.i2184 = icmp eq i32 %420, 0
  br i1 %tobool83.i2184, label %if.end97.i, label %if.then84.i2187

if.then84.i2187:                                  ; preds = %lor.lhs.false.i2185, %if.else78.i
  %arrayidx86.i = getelementptr inbounds %struct.rtx_def* %cond.i2160, i64 0, i32 1, i64 0
  %rtuint87.i = bitcast %union.rtunion_def* %arrayidx86.i to i32*
  %421 = load i32* %rtuint87.i, align 4, !tbaa !17
  %value90.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 2
  %422 = load %struct.rtx_def** %value90.i, align 8, !tbaa !54
  %call91.i2186 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %422) #4
  %mode94.i = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv174.i, i32 1
  %423 = load i32* %mode94.i, align 4, !tbaa !38
  call void @move_block_to_reg(i32 %421, %struct.rtx_def* %call91.i2186, i32 %conv35.i, i32 %423) #4
  br label %if.end97.i

if.end97.i:                                       ; preds = %for.body69.i, %if.then84.i2187, %lor.lhs.false.i2185, %for.cond63.preheader.i, %if.then52.i, %if.then40.i
  %bf.load98.i = load i32* %407, align 8
  %bf.clear99.i = and i32 %bf.load98.i, 65535
  %cmp100.i = icmp eq i32 %bf.clear99.i, 39
  br i1 %cmp100.i, label %if.then102.i, label %if.else103.i

if.then102.i:                                     ; preds = %if.end97.i
  call void @use_group_regs(%struct.rtx_def** %call_fusage, %struct.rtx_def* %cond.i2160) #4
  br label %for.inc120.i

if.else103.i:                                     ; preds = %if.end97.i
  %cmp104.i = icmp eq i32 %conv35.i, -1
  br i1 %cmp104.i, label %if.then106.i, label %if.else107.i

if.then106.i:                                     ; preds = %if.else103.i
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %cond.i2160) #4
  br label %for.inc120.i

if.else107.i:                                     ; preds = %if.else103.i
  %arrayidx109.i = getelementptr inbounds %struct.rtx_def* %cond.i2160, i64 0, i32 1, i64 0
  %rtuint110.i = bitcast %union.rtunion_def* %arrayidx109.i to i32*
  %424 = load i32* %rtuint110.i, align 4, !tbaa !17
  %cmp111.i = icmp eq i32 %conv35.i, 0
  %cond116.i = select i1 %cmp111.i, i32 1, i32 %conv35.i
  call void @use_regs(%struct.rtx_def** %call_fusage, i32 %424, i32 %cond116.i) #4
  br label %for.inc120.i

for.inc120.i:                                     ; preds = %if.else107.i, %if.then106.i, %if.then102.i, %cond.end.i2162
  %indvars.iv.next175.i = add nuw nsw i64 %indvars.iv174.i, 1
  %lftr.wideiv2385 = trunc i64 %indvars.iv.next175.i to i32
  %exitcond2386 = icmp eq i32 %lftr.wideiv2385, %num_actuals.0.lcssa
  br i1 %exitcond2386, label %load_register_parameters.exit, label %for.body.i2156

load_register_parameters.exit:                    ; preds = %for.inc120.i, %if.end896
  call void @emit_queue() #4
  %call900 = call %struct.rtx_def* @get_last_insn() #4
  %425 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !1
  %call901 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 0, %union.tree_node* %425, i32 1) #4
  br i1 %tobool509, label %land.lhs.true903, label %if.end922

land.lhs.true903:                                 ; preds = %load_register_parameters.exit
  %426 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr904 = getelementptr inbounds %struct.function* %426, i64 0, i32 2
  %427 = load %struct.expr_status** %expr904, align 8, !tbaa !18
  %x_stack_pointer_delta905 = getelementptr inbounds %struct.expr_status* %427, i64 0, i32 2
  %428 = load i32* %x_stack_pointer_delta905, align 4, !tbaa !51
  %conv906 = sext i32 %428 to i64
  %rem = srem i64 %conv906, %div
  %tobool907 = icmp eq i64 %rem, 0
  br i1 %tobool907, label %land.lhs.true913, label %if.then908

if.then908:                                       ; preds = %land.lhs.true903
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 3049, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.expand_call, i64 0, i64 0)) #7
  unreachable

land.lhs.true913:                                 ; preds = %land.lhs.true903
  %sext2300 = shl i64 %adjusted_args_size.sroa.0.0.copyload, 32
  %conv9102293 = ashr exact i64 %sext2300, 32
  %429 = load %struct.rtx_def** %call_fusage, align 8, !tbaa !1
  call fastcc void @emit_call_1(%struct.rtx_def* %call899, %union.tree_node* %call, %union.tree_node* %67, i64 %conv9102293, i64 %adjusted_args_size.sroa.0.0.2260, i64 %struct_value_size.0, %struct.rtx_def* %call901, %struct.rtx_def* %valreg.0, i32 %8, %struct.rtx_def* %429, i32 %storemerge1825)
  %430 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr914 = getelementptr inbounds %struct.function* %430, i64 0, i32 2
  %431 = load %struct.expr_status** %expr914, align 8, !tbaa !18
  %x_stack_pointer_delta915 = getelementptr inbounds %struct.expr_status* %431, i64 0, i32 2
  %432 = load i32* %x_stack_pointer_delta915, align 4, !tbaa !51
  %x_pending_stack_adjust917 = getelementptr inbounds %struct.expr_status* %431, i64 0, i32 0
  %433 = load i32* %x_pending_stack_adjust917, align 4, !tbaa !35
  %sub918 = sub nsw i32 %432, %433
  %cmp919 = icmp eq i32 %sub566, %sub918
  br i1 %cmp919, label %land.lhs.true924, label %if.then921

if.then921:                                       ; preds = %land.lhs.true913
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 3060, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.expand_call, i64 0, i64 0)) #7
  unreachable

if.end922:                                        ; preds = %load_register_parameters.exit
  %sext = shl i64 %adjusted_args_size.sroa.0.0.copyload, 32
  %conv910.c = ashr exact i64 %sext, 32
  %434 = load %struct.rtx_def** %call_fusage, align 8, !tbaa !1
  call fastcc void @emit_call_1(%struct.rtx_def* %call899, %union.tree_node* %call, %union.tree_node* %67, i64 %conv910.c, i64 %adjusted_args_size.sroa.0.0.2260, i64 %struct_value_size.0, %struct.rtx_def* %call901, %struct.rtx_def* %valreg.0, i32 %8, %struct.rtx_def* %434, i32 %storemerge1825)
  br label %if.end1015

land.lhs.true924:                                 ; preds = %land.lhs.true913
  %and925 = and i32 %storemerge1825, 4096
  %tobool926 = icmp eq i32 %and925, 0
  br i1 %tobool926, label %land.lhs.true983, label %if.then927

if.then927:                                       ; preds = %land.lhs.true924
  %cmp929 = icmp eq %struct.rtx_def* %valreg.0, null
  br i1 %cmp929, label %if.then936, label %lor.lhs.false931

lor.lhs.false931:                                 ; preds = %if.then927
  %435 = getelementptr inbounds %struct.rtx_def* %valreg.0, i64 0, i32 0
  %bf.load932 = load i32* %435, align 8
  %bf.clear933 = and i32 %bf.load932, 65535
  %cmp934 = icmp eq i32 %bf.clear933, 39
  br i1 %cmp934, label %if.then936, label %if.else939

if.then936:                                       ; preds = %lor.lhs.false931, %if.then927
  %call937 = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %call938 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %call937) #4
  br label %if.end1015

if.else939:                                       ; preds = %lor.lhs.false931
  %bf.lshr942 = lshr i32 %bf.load932, 16
  %bf.clear943 = and i32 %bf.lshr942, 255
  %call944 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear943) #4
  %436 = load %union.tree_node** %type753, align 8, !tbaa !16
  %code948 = getelementptr inbounds %union.tree_node* %436, i64 0, i32 0, i32 0, i32 2
  %bf.load949 = load i32* %code948, align 8
  %bf.clear950 = and i32 %bf.load949, 255
  %cmp951 = icmp eq i32 %bf.clear950, 13
  br i1 %cmp951, label %if.then953, label %for.cond960.preheader

if.then953:                                       ; preds = %if.else939
  %type957 = getelementptr inbounds %union.tree_node* %436, i64 0, i32 0, i32 0, i32 1
  %437 = load %union.tree_node** %type957, align 8, !tbaa !16
  %align = getelementptr inbounds %union.tree_node* %437, i64 0, i32 0, i32 7
  %438 = bitcast %union.tree_node** %align to i32*
  %439 = load i32* %438, align 4, !tbaa !36
  call void @mark_reg_pointer(%struct.rtx_def* %call944, i32 %439) #4
  br label %for.cond960.preheader

for.cond960.preheader:                            ; preds = %if.then953, %if.else939
  br i1 %cmp81.i, label %for.body963, label %for.end969

for.body963:                                      ; preds = %for.cond960.preheader, %for.body963
  %indvars.iv2387 = phi i64 [ %indvars.iv.next2388, %for.body963 ], [ 0, %for.cond960.preheader ]
  %note.02351 = phi %struct.rtx_def* [ %call966, %for.body963 ], [ null, %for.cond960.preheader ]
  %initial_value = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2387, i32 3
  %440 = load %struct.rtx_def** %initial_value, align 8, !tbaa !55
  %call966 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %440, %struct.rtx_def* %note.02351) #4
  %indvars.iv.next2388 = add nuw nsw i64 %indvars.iv2387, 1
  %lftr.wideiv2389 = trunc i64 %indvars.iv.next2388 to i32
  %exitcond2390 = icmp eq i32 %lftr.wideiv2389, %num_actuals.0.lcssa
  br i1 %exitcond2390, label %for.end969, label %for.body963

for.end969:                                       ; preds = %for.body963, %for.cond960.preheader
  %note.0.lcssa = phi %struct.rtx_def* [ null, %for.cond960.preheader ], [ %call966, %for.body963 ]
  %call970 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call899, %struct.rtx_def* %note.0.lcssa) #4
  %call971 = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %and972 = and i32 %storemerge1825, 512
  %tobool973 = icmp eq i32 %and972, 0
  br i1 %tobool973, label %if.end979, label %if.then974

if.then974:                                       ; preds = %for.end969
  %call975 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0) #4
  %call976 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call975) #4
  %call977 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call976) #4
  %call978 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call977, %struct.rtx_def* %call970) #4
  br label %if.end979

if.end979:                                        ; preds = %for.end969, %if.then974
  %note.1 = phi %struct.rtx_def* [ %call978, %if.then974 ], [ %call970, %for.end969 ]
  call void @emit_libcall_block(%struct.rtx_def* %call971, %struct.rtx_def* %call944, %struct.rtx_def* %valreg.0, %struct.rtx_def* %note.1) #4
  br label %if.end1015

land.lhs.true983:                                 ; preds = %land.lhs.true924
  %and984 = and i32 %storemerge1825, 4
  %tobool985 = icmp eq i32 %and984, 0
  br i1 %tobool985, label %if.end1015, label %if.then986

if.then986:                                       ; preds = %land.lhs.true983
  %441 = getelementptr inbounds %struct.rtx_def* %valreg.0, i64 0, i32 0
  %bf.load988 = load i32* %441, align 8
  %bf.lshr989 = lshr i32 %bf.load988, 16
  %bf.clear990 = and i32 %bf.lshr989, 255
  %call991 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear990) #4
  %442 = load %union.tree_node** %type753, align 8, !tbaa !16
  %code996 = getelementptr inbounds %union.tree_node* %442, i64 0, i32 0, i32 0, i32 2
  %bf.load997 = load i32* %code996, align 8
  %bf.clear998 = and i32 %bf.load997, 255
  %cmp999 = icmp eq i32 %bf.clear998, 13
  br i1 %cmp999, label %if.then1001, label %if.end1002

if.then1001:                                      ; preds = %if.then986
  call void @mark_reg_pointer(%struct.rtx_def* %call991, i32 128) #4
  br label %if.end1002

if.end1002:                                       ; preds = %if.then1001, %if.then986
  %call1003 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call991, %struct.rtx_def* %valreg.0) #4
  %call1004 = call %struct.rtx_def* @get_last_insn() #4
  %arrayidx1006 = getelementptr inbounds %struct.rtx_def* %call1004, i64 0, i32 1, i64 6
  %rtx1007 = bitcast %union.rtunion_def* %arrayidx1006 to %struct.rtx_def**
  %443 = load %struct.rtx_def** %rtx1007, align 8, !tbaa !1
  %call1008 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 18, %struct.rtx_def* %call991, %struct.rtx_def* %443) #4
  %444 = getelementptr inbounds %union.rtunion_def* %arrayidx1006, i64 0, i32 0
  %call1008.c = ptrtoint %struct.rtx_def* %call1008 to i64
  store i64 %call1008.c, i64* %444, align 8, !tbaa !1
  %call1012 = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %call1013 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %call1012) #4
  br label %if.end1015

if.end1015:                                       ; preds = %if.end922, %land.lhs.true983, %if.end1002, %if.then936, %if.end979
  %valreg.1 = phi %struct.rtx_def* [ %valreg.0, %if.then936 ], [ %call944, %if.end979 ], [ %call991, %if.end1002 ], [ %valreg.0, %land.lhs.true983 ], [ %valreg.0, %if.end922 ]
  %and1016 = and i32 %storemerge1825, 66
  %tobool1017 = icmp ne i32 %and1016, 0
  %or.cond1475 = or i1 %tobool1017, %cmp498
  br i1 %or.cond1475, label %if.then1021, label %if.end1036

if.then1021:                                      ; preds = %if.end1015
  %call1023 = call %struct.rtx_def* @get_last_insn() #4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then1021
  %last1022.0 = phi %struct.rtx_def* [ %call1023, %if.then1021 ], [ %446, %while.body ]
  %445 = getelementptr inbounds %struct.rtx_def* %last1022.0, i64 0, i32 0
  %bf.load1024 = load i32* %445, align 8
  %bf.clear1025 = and i32 %bf.load1024, 65535
  %cmp1026 = icmp eq i32 %bf.clear1025, 34
  br i1 %cmp1026, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond
  %arrayidx1029 = getelementptr inbounds %struct.rtx_def* %last1022.0, i64 0, i32 1, i64 1
  %rtx1030 = bitcast %union.rtunion_def* %arrayidx1029 to %struct.rtx_def**
  %446 = load %struct.rtx_def** %rtx1030, align 8, !tbaa !1
  %cmp1031 = icmp eq %struct.rtx_def* %446, %call900
  br i1 %cmp1031, label %if.then1033, label %while.cond

if.then1033:                                      ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 3148, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.expand_call, i64 0, i64 0)) #7
  unreachable

while.end:                                        ; preds = %while.cond
  %call1035 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %last1022.0) #4
  br label %if.end1036

if.end1036:                                       ; preds = %if.end1015, %while.end
  %and1037 = and i32 %storemerge1825, 64
  %tobool1038 = icmp eq i32 %and1037, 0
  br i1 %tobool1038, label %if.end1043, label %if.then1039

if.then1039:                                      ; preds = %if.end1036
  %447 = load %struct.function** @cfun, align 8, !tbaa !1
  %calls_longjmp = getelementptr inbounds %struct.function* %447, i64 0, i32 56
  %448 = bitcast i24* %calls_longjmp to i32*
  %bf.load1040 = load i32* %448, align 8
  %bf.set1042 = or i32 %bf.load1040, 32
  store i32 %bf.set1042, i32* %448, align 8
  br label %if.end1043

if.end1043:                                       ; preds = %if.end1036, %if.then1039
  %cmp1044 = icmp ne %struct.rtx_def* %target.addr.12365.ph, null
  br i1 %cmp1044, label %land.lhs.true1046, label %if.end1062

land.lhs.true1046:                                ; preds = %if.end1043
  %449 = getelementptr inbounds %struct.rtx_def* %target.addr.12365.ph, i64 0, i32 0
  %bf.load1047 = load i32* %449, align 8
  %bf.clear1048 = and i32 %bf.load1047, 65535
  %cmp1049 = icmp eq i32 %bf.clear1048, 66
  %or.cond1477 = and i1 %cmp1049, %cmp263
  %or.cond1477.not = xor i1 %or.cond1477, true
  %bf.clear1057 = and i32 %bf.load1047, 67108864
  %tobool1058 = icmp eq i32 %bf.clear1057, 0
  %or.cond1835 = or i1 %tobool1058, %or.cond1477.not
  br i1 %or.cond1835, label %if.end1062, label %if.then1059

if.then1059:                                      ; preds = %land.lhs.true1046
  %call1060 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %target.addr.12365.ph) #4
  %call1061 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call1060) #4
  br label %if.end1062

if.end1062:                                       ; preds = %land.lhs.true1046, %if.then1059, %if.end1043
  %call1063 = call i32 @any_pending_cleanups(i32 1) #4
  %tobool1064 = icmp eq i32 %call1063, 0
  %cmp1044.not = xor i1 %cmp1044, true
  %brmerge = or i1 %tobool1064, %cmp1044.not
  %sibcall_failure.4.mux = select i1 %tobool1064, i32 %sibcall_failure.4, i32 1
  br i1 %brmerge, label %if.end1079, label %land.lhs.true1067

land.lhs.true1067:                                ; preds = %if.end1062
  %450 = getelementptr inbounds %struct.rtx_def* %target.addr.12365.ph, i64 0, i32 0
  %bf.load1068 = load i32* %450, align 8
  %bf.clear1069 = and i32 %bf.load1068, 65535
  %cmp1070 = icmp eq i32 %bf.clear1069, 61
  br i1 %cmp1070, label %land.lhs.true1072, label %if.end1079

land.lhs.true1072:                                ; preds = %land.lhs.true1067
  %arrayidx1074 = getelementptr inbounds %struct.rtx_def* %target.addr.12365.ph, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx1074 to i32*
  %451 = load i32* %rtuint, align 4, !tbaa !17
  %cmp1075 = icmp ult i32 %451, 53
  %.target.addr.1 = select i1 %cmp1075, %struct.rtx_def* null, %struct.rtx_def* %target.addr.12365.ph
  br label %if.end1079

if.end1079:                                       ; preds = %land.lhs.true1072, %if.end1062, %land.lhs.true1067
  %sibcall_failure.5 = phi i32 [ %sibcall_failure.4.mux, %if.end1062 ], [ 1, %land.lhs.true1072 ], [ 1, %land.lhs.true1067 ]
  %target.addr.3 = phi %struct.rtx_def* [ %target.addr.12365.ph, %if.end1062 ], [ %.target.addr.1, %land.lhs.true1072 ], [ %target.addr.12365.ph, %land.lhs.true1067 ]
  %452 = load %union.tree_node** %type753, align 8, !tbaa !16
  %type1082 = bitcast %union.tree_node* %452 to %struct.tree_type*
  %mode1083 = getelementptr inbounds %struct.tree_type* %type1082, i64 0, i32 6
  %bf.load1084 = load i32* %mode1083, align 4
  %bf.lshr1085 = lshr i32 %bf.load1084, 9
  %bf.clear1086 = and i32 %bf.lshr1085, 127
  %cmp1087 = icmp eq i32 %bf.clear1086, 0
  %or.cond1479 = or i1 %cmp1087, %tobool1090
  br i1 %or.cond1479, label %if.then1091, label %if.else1092

if.then1091:                                      ; preds = %if.end1079
  %453 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  br label %if.end1243

if.else1092:                                      ; preds = %if.end1079
  br i1 %cmp263, label %if.then1094, label %if.else1132

if.then1094:                                      ; preds = %if.else1092
  %cmp1095 = icmp eq %struct.rtx_def* %target.addr.3, null
  br i1 %cmp1095, label %if.then1102, label %lor.lhs.false1097

lor.lhs.false1097:                                ; preds = %if.then1094
  %454 = getelementptr inbounds %struct.rtx_def* %target.addr.3, i64 0, i32 0
  %bf.load1098 = load i32* %454, align 8
  %bf.clear1099 = and i32 %bf.load1098, 65535
  %cmp1100 = icmp eq i32 %bf.clear1099, 66
  br i1 %cmp1100, label %if.end1243, label %if.then1102

if.then1102:                                      ; preds = %lor.lhs.false1097, %if.then1094
  %call1117 = call %struct.rtx_def* @memory_address(i32 %bf.clear1086, %struct.rtx_def* %structure_value_addr.1) #4
  %call1118 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear1086, %struct.rtx_def* %call1117) #4
  call void @set_mem_attributes(%struct.rtx_def* %call1118, %union.tree_node* %exp, i32 1) #4
  br label %if.end1243

if.else1132:                                      ; preds = %if.else1092
  %455 = getelementptr inbounds %struct.rtx_def* %valreg.1, i64 0, i32 0
  %bf.load1133 = load i32* %455, align 8
  %bf.clear1134 = and i32 %bf.load1133, 65535
  %cmp1135 = icmp eq i32 %bf.clear1134, 39
  %cmp1138 = icmp eq %struct.rtx_def* %target.addr.3, null
  br i1 %cmp1135, label %if.then1137, label %if.else1196

if.then1137:                                      ; preds = %if.else1132
  br i1 %cmp1138, label %if.then1140, label %if.end1187

if.then1140:                                      ; preds = %if.then1137
  %readonly_flag = getelementptr inbounds %union.tree_node* %452, i64 0, i32 0, i32 0, i32 2
  %bf.load1146 = load i32* %readonly_flag, align 8
  %456 = lshr i32 %bf.load1146, 10
  %mul1157 = and i32 %456, 2
  %457 = lshr i32 %bf.load1084, 19
  %mul1165 = and i32 %457, 4
  %bf.clear1172 = and i32 %bf.load1146, 255
  %cmp1173 = icmp eq i32 %bf.clear1172, 20
  br i1 %cmp1173, label %land.rhs1175, label %land.end1181

land.rhs1175:                                     ; preds = %if.then1140
  %type1179 = getelementptr inbounds %union.tree_node* %452, i64 0, i32 0, i32 0, i32 1
  %458 = load %union.tree_node** %type1179, align 8, !tbaa !16
  %tobool1180 = icmp ne %union.tree_node* %458, null
  br label %land.end1181

land.end1181:                                     ; preds = %land.rhs1175, %if.then1140
  %459 = phi i1 [ false, %if.then1140 ], [ %tobool1180, %land.rhs1175 ]
  %land.ext = zext i1 %459 to i32
  %mul1182 = shl nuw nsw i32 %land.ext, 3
  %or1158 = or i32 %mul1165, %mul1157
  %or1166 = or i32 %or1158, %mul1182
  %or1184 = or i32 %or1166, 1
  %call1185 = call %union.tree_node* @build_qualified_type(%union.tree_node* %452, i32 %or1184) #4
  %call1186 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call1185, i32 0, i32 1, i32 1) #4
  call void @preserve_temp_slots(%struct.rtx_def* %call1186) #4
  br label %if.end1187

if.end1187:                                       ; preds = %land.end1181, %if.then1137
  %target.addr.4 = phi %struct.rtx_def* [ %call1186, %land.end1181 ], [ %target.addr.3, %if.then1137 ]
  %call1188 = call i32 @rtx_equal_p(%struct.rtx_def* %target.addr.4, %struct.rtx_def* %valreg.1) #4
  %tobool1189 = icmp eq i32 %call1188, 0
  br i1 %tobool1189, label %if.then1190, label %if.end1243

if.then1190:                                      ; preds = %if.end1187
  %460 = load %union.tree_node** %type753, align 8, !tbaa !16
  %call1193 = call i64 @int_size_in_bytes(%union.tree_node* %460) #4
  %conv1194 = trunc i64 %call1193 to i32
  call void @emit_group_store(%struct.rtx_def* %target.addr.4, %struct.rtx_def* %valreg.1, i32 %conv1194) #4
  br label %if.end1243

if.else1196:                                      ; preds = %if.else1132
  br i1 %cmp1138, label %if.else1222, label %land.lhs.true1198

land.lhs.true1198:                                ; preds = %if.else1196
  %461 = getelementptr inbounds %struct.rtx_def* %target.addr.3, i64 0, i32 0
  %bf.load1199 = load i32* %461, align 8
  %bf.lshr1200 = lshr i32 %bf.load1199, 16
  %bf.clear1201 = and i32 %bf.lshr1200, 255
  %cmp1209 = icmp eq i32 %bf.clear1201, %bf.clear1086
  br i1 %cmp1209, label %land.lhs.true1211, label %if.else1222

land.lhs.true1211:                                ; preds = %land.lhs.true1198
  %bf.lshr1216 = lshr i32 %bf.load1133, 16
  %bf.clear1217 = and i32 %bf.lshr1216, 255
  %cmp1218 = icmp eq i32 %bf.clear1086, %bf.clear1217
  br i1 %cmp1218, label %if.then1220, label %if.else1222

if.then1220:                                      ; preds = %land.lhs.true1211
  %call1221 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %target.addr.3, %struct.rtx_def* %valreg.1) #4
  br label %if.end1243

if.else1222:                                      ; preds = %if.else1196, %land.lhs.true1211, %land.lhs.true1198
  %bf.clear1229 = and i32 %bf.load1084, 65024
  %cmp1230 = icmp eq i32 %bf.clear1229, 26112
  br i1 %cmp1230, label %if.then1232, label %if.else1236

if.then1232:                                      ; preds = %if.else1222
  %call1235 = call %struct.rtx_def* @copy_blkmode_from_reg(%struct.rtx_def* %target.addr.3, %struct.rtx_def* %valreg.1, %union.tree_node* %452) #4
  br label %if.end1243

if.else1236:                                      ; preds = %if.else1222
  %call1237 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %valreg.1) #4
  br label %if.end1243

if.end1243:                                       ; preds = %if.then1190, %if.end1187, %lor.lhs.false1097, %if.then1102, %if.then1232, %if.else1236, %if.then1220, %if.then1091
  %sibcall_failure.6 = phi i32 [ %sibcall_failure.5, %if.then1091 ], [ %sibcall_failure.5, %if.then1102 ], [ %sibcall_failure.5, %lor.lhs.false1097 ], [ %sibcall_failure.5, %if.then1220 ], [ 1, %if.then1232 ], [ %sibcall_failure.5, %if.else1236 ], [ 1, %if.end1187 ], [ 1, %if.then1190 ]
  %target.addr.5 = phi %struct.rtx_def* [ %453, %if.then1091 ], [ %call1118, %if.then1102 ], [ %target.addr.3, %lor.lhs.false1097 ], [ %target.addr.3, %if.then1220 ], [ %call1235, %if.then1232 ], [ %call1237, %if.else1236 ], [ %target.addr.4, %if.end1187 ], [ %target.addr.4, %if.then1190 ]
  %462 = load %struct.rtx_def** %old_stack_level, align 8, !tbaa !1
  %tobool1244 = icmp ne %struct.rtx_def* %462, null
  %and1246 = and i32 %storemerge1825, 1024
  %tobool1247 = icmp eq i32 %and1246, 0
  %or.cond2299 = and i1 %tobool1244, %tobool1247
  br i1 %or.cond2299, label %if.then1248, label %if.else1251

if.then1248:                                      ; preds = %if.end1243
  call void @emit_stack_restore(i32 0, %struct.rtx_def* %462, %struct.rtx_def* null) #4
  %463 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr1249 = getelementptr inbounds %struct.function* %463, i64 0, i32 2
  %464 = load %struct.expr_status** %expr1249, align 8, !tbaa !18
  %x_pending_stack_adjust1250 = getelementptr inbounds %struct.expr_status* %464, i64 0, i32 0
  store i32 %338, i32* %x_pending_stack_adjust1250, align 4, !tbaa !35
  store i32 %old_stack_arg_under_construction.42288, i32* @stack_arg_under_construction, align 4, !tbaa !17
  store i32 %4, i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  store i8* %5, i8** @stack_usage_map, align 8, !tbaa !1
  br label %if.end1305

if.else1251:                                      ; preds = %if.end1243
  %465 = load i32* @target_flags, align 4, !tbaa !17
  %and1252 = and i32 %465, 4096
  %tobool1253 = icmp ne i32 %and1252, 0
  %or.cond1481 = and i1 %tobool1253, %tobool509
  br i1 %or.cond1481, label %for.cond1260.preheader, label %if.end1305

for.cond1260.preheader:                           ; preds = %if.else1251
  br i1 %cmp81.i, label %for.body1263, label %for.end1303

for.body1263:                                     ; preds = %for.cond1260.preheader, %for.inc1301
  %indvars.iv2391 = phi i64 [ %indvars.iv.next2392, %for.inc1301 ], [ 0, %for.cond1260.preheader ]
  %save_area1266 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2391, i32 14
  %466 = load %struct.rtx_def** %save_area1266, align 8, !tbaa !64
  %tobool1267 = icmp eq %struct.rtx_def* %466, null
  br i1 %tobool1267, label %for.inc1301, label %if.then1268

if.then1268:                                      ; preds = %for.body1263
  %467 = getelementptr inbounds %struct.rtx_def* %466, i64 0, i32 0
  %bf.load1272 = load i32* %467, align 8
  %bf.lshr1273 = lshr i32 %bf.load1272, 16
  %bf.clear1274 = and i32 %bf.lshr1273, 255
  %stack_slot = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2391, i32 13
  %468 = load %struct.rtx_def** %stack_slot, align 8, !tbaa !61
  %arrayidx1278 = getelementptr inbounds %struct.rtx_def* %468, i64 0, i32 1, i64 0
  %rtx1279 = bitcast %union.rtunion_def* %arrayidx1278 to %struct.rtx_def**
  %469 = load %struct.rtx_def** %rtx1279, align 8, !tbaa !1
  %call1280 = call %struct.rtx_def* @memory_address(i32 %bf.clear1274, %struct.rtx_def* %469) #4
  %call1281 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear1274, %struct.rtx_def* %call1280) #4
  %cmp1282 = icmp eq i32 %bf.clear1274, 51
  %470 = load %struct.rtx_def** %save_area1266, align 8, !tbaa !64
  br i1 %cmp1282, label %if.else1289, label %if.then1284

if.then1284:                                      ; preds = %if.then1268
  %call1288 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call1281, %struct.rtx_def* %470) #4
  br label %for.inc1301

if.else1289:                                      ; preds = %if.then1268
  %call1293 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %470) #4
  %constant1296 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2391, i32 11, i32 0
  %471 = load i64* %constant1296, align 8, !tbaa !45
  %call1297 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %471) #4
  %call1298 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %call1281, %struct.rtx_def* %call1293, %struct.rtx_def* %call1297) #4
  br label %for.inc1301

for.inc1301:                                      ; preds = %for.body1263, %if.else1289, %if.then1284
  %indvars.iv.next2392 = add nuw nsw i64 %indvars.iv2391, 1
  %lftr.wideiv2393 = trunc i64 %indvars.iv.next2392 to i32
  %exitcond2394 = icmp eq i32 %lftr.wideiv2393, %num_actuals.0.lcssa
  br i1 %exitcond2394, label %for.end1303, label %for.body1263

for.end1303:                                      ; preds = %for.inc1301, %for.cond1260.preheader
  store i32 %4, i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  store i8* %5, i8** @stack_usage_map, align 8, !tbaa !1
  br label %if.end1305

if.end1305:                                       ; preds = %if.else1251, %for.end1303, %if.then1248
  %sibcall_failure.7 = phi i32 [ %sibcall_failure.6, %for.end1303 ], [ %sibcall_failure.6, %if.else1251 ], [ 1, %if.then1248 ]
  %and1306 = and i32 %storemerge1825, 8
  %tobool1307 = icmp eq i32 %and1306, 0
  br i1 %tobool1307, label %for.cond1313.preheader, label %land.lhs.true1308

land.lhs.true1308:                                ; preds = %if.end1305
  %472 = load %struct.function** @cfun, align 8, !tbaa !1
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function* %472, i64 0, i32 20
  %473 = load %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8, !tbaa !65
  %cmp1309 = icmp eq %struct.rtx_def* %473, null
  br i1 %cmp1309, label %for.cond1313.preheader, label %if.then1311

if.then1311:                                      ; preds = %land.lhs.true1308
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function* %472, i64 0, i32 22
  call void @emit_stack_save(i32 2, %struct.rtx_def** %x_nonlocal_goto_stack_level, %struct.rtx_def* null) #4
  br label %for.cond1313.preheader

for.cond1313.preheader:                           ; preds = %land.lhs.true1308, %if.end1305, %if.then1311
  br i1 %cmp81.i, label %for.body1316, label %for.end1327

for.body1316:                                     ; preds = %for.cond1313.preheader, %for.inc1325
  %indvars.iv2395 = phi i64 [ %indvars.iv.next2396, %for.inc1325 ], [ 0, %for.cond1313.preheader ]
  %aligned_regs = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2395, i32 15
  %474 = load %struct.rtx_def*** %aligned_regs, align 8, !tbaa !63
  %tobool1319 = icmp eq %struct.rtx_def** %474, null
  br i1 %tobool1319, label %for.inc1325, label %if.then1320

if.then1320:                                      ; preds = %for.body1316
  %475 = bitcast %struct.rtx_def** %474 to i8*
  call void @free(i8* %475)
  br label %for.inc1325

for.inc1325:                                      ; preds = %for.body1316, %if.then1320
  %indvars.iv.next2396 = add nuw nsw i64 %indvars.iv2395, 1
  %lftr.wideiv2397 = trunc i64 %indvars.iv.next2396 to i32
  %exitcond2398 = icmp eq i32 %lftr.wideiv2397, %num_actuals.0.lcssa
  br i1 %exitcond2398, label %for.end1327, label %for.body1316

for.end1327:                                      ; preds = %for.inc1325, %for.cond1313.preheader
  br i1 %cmp498, label %if.then1330, label %if.end1331

if.then1330:                                      ; preds = %for.end1327
  call void @expand_end_target_temps() #4
  br label %if.end1331

if.end1331:                                       ; preds = %if.then1330, %for.end1327
  %call1332 = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  br i1 %cmp498, label %if.then1335, label %for.inc1359

if.then1335:                                      ; preds = %if.end1331
  %476 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr1336 = getelementptr inbounds %struct.function* %476, i64 0, i32 2
  %477 = load %struct.expr_status** %expr1336, align 8, !tbaa !18
  %x_pending_stack_adjust1337 = getelementptr inbounds %struct.expr_status* %477, i64 0, i32 0
  store i32 %save_pending_stack_adjust496.0, i32* %x_pending_stack_adjust1337, align 4, !tbaa !35
  %x_stack_pointer_delta1339 = getelementptr inbounds %struct.expr_status* %477, i64 0, i32 2
  store i32 %save_stack_pointer_delta497.0, i32* %x_stack_pointer_delta1339, align 4, !tbaa !51
  br i1 %cmp81.i, label %for.body1343, label %for.end1353

for.body1343:                                     ; preds = %if.then1335, %for.body1343
  %indvars.iv2399 = phi i64 [ %indvars.iv.next2400, %for.body1343 ], [ 0, %if.then1335 ]
  %value = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2399, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %value, align 8, !tbaa !54
  %aligned_regs1348 = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2399, i32 15
  store %struct.rtx_def** null, %struct.rtx_def*** %aligned_regs1348, align 8, !tbaa !63
  %stack = getelementptr inbounds %struct.arg_data* %79, i64 %indvars.iv2399, i32 12
  store %struct.rtx_def* null, %struct.rtx_def** %stack, align 8, !tbaa !60
  %indvars.iv.next2400 = add nuw nsw i64 %indvars.iv2399, 1
  %lftr.wideiv2401 = trunc i64 %indvars.iv.next2400 to i32
  %exitcond2402 = icmp eq i32 %lftr.wideiv2401, %num_actuals.0.lcssa
  br i1 %exitcond2402, label %for.end1353, label %for.body1343

for.end1353:                                      ; preds = %for.body1343, %if.then1335
  %478 = load %struct.simple_bitmap_def** @stored_args_map, align 8, !tbaa !1
  %479 = bitcast %struct.simple_bitmap_def* %478 to i8*
  call void @free(i8* %479)
  br label %for.inc1359

for.inc1359:                                      ; preds = %for.end1353, %if.end1331
  %tail_call_insns.1 = phi %struct.rtx_def* [ %call1332, %for.end1353 ], [ %tail_call_insns.02363.ph, %if.end1331 ]
  %normal_call_insns.1 = phi %struct.rtx_def* [ %normal_call_insns.02364.ph, %for.end1353 ], [ %call1332, %if.end1331 ]
  %tobool1356 = icmp eq i32 %sibcall_failure.7, 0
  %tail_call_insns.1. = select i1 %tobool1356, %struct.rtx_def* %tail_call_insns.1, %struct.rtx_def* null
  %inc1360 = add nsw i32 %pass.02362, 1
  %cmp493 = icmp slt i32 %inc1360, 2
  br i1 %cmp493, label %for.body495.outer, label %for.cond1362.preheader

for.cond1384.preheader:                           ; preds = %for.inc1379, %for.cond1362.preheader
  %tobool13852336 = icmp eq %struct.rtx_def* %tail_call_insns.1., null
  br i1 %tobool13852336, label %for.cond1406.preheader, label %for.body1386

for.body1364:                                     ; preds = %for.cond1362.preheader, %for.inc1379
  %insn.02339 = phi %struct.rtx_def* [ %483, %for.inc1379 ], [ %normal_call_insns.1, %for.cond1362.preheader ]
  %480 = getelementptr inbounds %struct.rtx_def* %insn.02339, i64 0, i32 0
  %bf.load1365 = load i32* %480, align 8
  %bf.clear1366 = and i32 %bf.load1365, 65535
  %cmp1367 = icmp eq i32 %bf.clear1366, 34
  br i1 %cmp1367, label %land.lhs.true1369, label %for.inc1379

land.lhs.true1369:                                ; preds = %for.body1364
  %arrayidx1371 = getelementptr inbounds %struct.rtx_def* %insn.02339, i64 0, i32 1, i64 3
  %rtx1372 = bitcast %union.rtunion_def* %arrayidx1371 to %struct.rtx_def**
  %481 = load %struct.rtx_def** %rtx1372, align 8, !tbaa !1
  %482 = getelementptr inbounds %struct.rtx_def* %481, i64 0, i32 0
  %bf.load1373 = load i32* %482, align 8
  %bf.clear1374 = and i32 %bf.load1373, 65535
  %cmp1375 = icmp eq i32 %bf.clear1374, 141
  br i1 %cmp1375, label %if.then1377, label %for.inc1379

if.then1377:                                      ; preds = %land.lhs.true1369
  call void @replace_call_placeholder(%struct.rtx_def* %insn.02339, i32 1) #4
  br label %for.inc1379

for.inc1379:                                      ; preds = %for.body1364, %land.lhs.true1369, %if.then1377
  %arrayidx1381 = getelementptr inbounds %struct.rtx_def* %insn.02339, i64 0, i32 1, i64 2
  %rtx1382 = bitcast %union.rtunion_def* %arrayidx1381 to %struct.rtx_def**
  %483 = load %struct.rtx_def** %rtx1382, align 8, !tbaa !1
  %tobool1363 = icmp eq %struct.rtx_def* %483, null
  br i1 %tobool1363, label %for.cond1384.preheader, label %for.body1364

for.cond1406.preheader:                           ; preds = %for.inc1401, %for.cond1384.preheader
  %tobool14072334 = icmp eq %struct.rtx_def* %tail_recursion_insns.1, null
  br i1 %tobool14072334, label %for.end1427, label %for.body1408

for.body1386:                                     ; preds = %for.cond1384.preheader, %for.inc1401
  %insn.12337 = phi %struct.rtx_def* [ %487, %for.inc1401 ], [ %tail_call_insns.1, %for.cond1384.preheader ]
  %484 = getelementptr inbounds %struct.rtx_def* %insn.12337, i64 0, i32 0
  %bf.load1387 = load i32* %484, align 8
  %bf.clear1388 = and i32 %bf.load1387, 65535
  %cmp1389 = icmp eq i32 %bf.clear1388, 34
  br i1 %cmp1389, label %land.lhs.true1391, label %for.inc1401

land.lhs.true1391:                                ; preds = %for.body1386
  %arrayidx1393 = getelementptr inbounds %struct.rtx_def* %insn.12337, i64 0, i32 1, i64 3
  %rtx1394 = bitcast %union.rtunion_def* %arrayidx1393 to %struct.rtx_def**
  %485 = load %struct.rtx_def** %rtx1394, align 8, !tbaa !1
  %486 = getelementptr inbounds %struct.rtx_def* %485, i64 0, i32 0
  %bf.load1395 = load i32* %486, align 8
  %bf.clear1396 = and i32 %bf.load1395, 65535
  %cmp1397 = icmp eq i32 %bf.clear1396, 141
  br i1 %cmp1397, label %if.then1399, label %for.inc1401

if.then1399:                                      ; preds = %land.lhs.true1391
  call void @replace_call_placeholder(%struct.rtx_def* %insn.12337, i32 1) #4
  br label %for.inc1401

for.inc1401:                                      ; preds = %for.body1386, %land.lhs.true1391, %if.then1399
  %arrayidx1403 = getelementptr inbounds %struct.rtx_def* %insn.12337, i64 0, i32 1, i64 2
  %rtx1404 = bitcast %union.rtunion_def* %arrayidx1403 to %struct.rtx_def**
  %487 = load %struct.rtx_def** %rtx1404, align 8, !tbaa !1
  %tobool1385 = icmp eq %struct.rtx_def* %487, null
  br i1 %tobool1385, label %for.cond1406.preheader, label %for.body1386

for.body1408:                                     ; preds = %for.cond1406.preheader, %for.inc1423
  %insn.22335 = phi %struct.rtx_def* [ %491, %for.inc1423 ], [ %tail_recursion_insns.1, %for.cond1406.preheader ]
  %488 = getelementptr inbounds %struct.rtx_def* %insn.22335, i64 0, i32 0
  %bf.load1409 = load i32* %488, align 8
  %bf.clear1410 = and i32 %bf.load1409, 65535
  %cmp1411 = icmp eq i32 %bf.clear1410, 34
  br i1 %cmp1411, label %land.lhs.true1413, label %for.inc1423

land.lhs.true1413:                                ; preds = %for.body1408
  %arrayidx1415 = getelementptr inbounds %struct.rtx_def* %insn.22335, i64 0, i32 1, i64 3
  %rtx1416 = bitcast %union.rtunion_def* %arrayidx1415 to %struct.rtx_def**
  %489 = load %struct.rtx_def** %rtx1416, align 8, !tbaa !1
  %490 = getelementptr inbounds %struct.rtx_def* %489, i64 0, i32 0
  %bf.load1417 = load i32* %490, align 8
  %bf.clear1418 = and i32 %bf.load1417, 65535
  %cmp1419 = icmp eq i32 %bf.clear1418, 141
  br i1 %cmp1419, label %if.then1421, label %for.inc1423

if.then1421:                                      ; preds = %land.lhs.true1413
  call void @replace_call_placeholder(%struct.rtx_def* %insn.22335, i32 1) #4
  br label %for.inc1423

for.inc1423:                                      ; preds = %for.body1408, %land.lhs.true1413, %if.then1421
  %arrayidx1425 = getelementptr inbounds %struct.rtx_def* %insn.22335, i64 0, i32 1, i64 2
  %rtx1426 = bitcast %union.rtunion_def* %arrayidx1425 to %struct.rtx_def**
  %491 = load %struct.rtx_def** %rtx1426, align 8, !tbaa !1
  %tobool1407 = icmp eq %struct.rtx_def* %491, null
  br i1 %tobool1407, label %for.end1427, label %for.body1408

for.end1427:                                      ; preds = %for.inc1423, %for.cond1406.preheader
  %tobool1428 = icmp ne %struct.rtx_def* %tail_recursion_insns.1, null
  %tobool1430 = icmp ne %struct.rtx_def* %tail_call_insns.1., null
  %or.cond1483 = or i1 %tobool1428, %tobool1430
  br i1 %or.cond1483, label %if.then1431, label %if.else1441

if.then1431:                                      ; preds = %for.end1427
  br i1 %tobool1428, label %if.then1433, label %if.end1437

if.then1433:                                      ; preds = %if.then1431
  %492 = load %struct.function** @cfun, align 8, !tbaa !1
  %x_tail_recursion_label = getelementptr inbounds %struct.function* %492, i64 0, i32 28
  %493 = load %struct.rtx_def** %x_tail_recursion_label, align 8, !tbaa !66
  %494 = getelementptr inbounds %struct.rtx_def* %493, i64 0, i32 0
  %bf.load1434 = load i32* %494, align 8
  %bf.set1436 = or i32 %bf.load1434, 268435456
  store i32 %bf.set1436, i32* %494, align 8
  br label %if.end1437

if.end1437:                                       ; preds = %if.then1433, %if.then1431
  %495 = load %struct.function** @cfun, align 8, !tbaa !1
  %x_tail_recursion_label1438 = getelementptr inbounds %struct.function* %495, i64 0, i32 28
  %496 = load %struct.rtx_def** %x_tail_recursion_label1438, align 8, !tbaa !66
  %call1439 = call %struct.rtx_def* @gen_rtx_fmt_uuuu(i32 141, i32 0, %struct.rtx_def* %normal_call_insns.1, %struct.rtx_def* %tail_call_insns.1., %struct.rtx_def* %tail_recursion_insns.1, %struct.rtx_def* %496) #4
  %call1440 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call1439) #4
  br label %if.end1443

if.else1441:                                      ; preds = %for.end1427
  %call1442 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %normal_call_insns.1) #4
  br label %if.end1443

if.end1443:                                       ; preds = %if.else1441, %if.end1437
  %497 = load i32* @expand_call.currently_expanding_call, align 4, !tbaa !17
  %dec = add nsw i32 %497, -1
  store i32 %dec, i32* @expand_call.currently_expanding_call, align 4, !tbaa !17
  %and1444 = and i32 %storemerge1825, 1024
  %tobool1445 = icmp eq i32 %and1444, 0
  br i1 %tobool1445, label %return, label %if.then1446

if.then1446:                                      ; preds = %if.end1443
  call void @clear_pending_stack_adjust() #4
  %498 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !1
  %call1447 = call %struct.rtx_def* (i32, i32, ...)* @gen_rtx(i32 49, i32 0, %struct.rtx_def* %498) #4
  %call1448 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call1447) #4
  %499 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 8, !tbaa !1
  %500 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !1
  %call1449 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %499, %struct.rtx_def* %500) #4
  call void @save_stack_pointer() #4
  br label %return

return:                                           ; preds = %if.then1446, %if.end1443, %try_to_integrate.exit
  %retval.0 = phi %struct.rtx_def* [ %retval.0.i, %try_to_integrate.exit ], [ %target.addr.5, %if.end1443 ], [ %target.addr.5, %if.then1446 ]
  ret %struct.rtx_def* %retval.0
}

declare %union.tree_node* @get_callee_fndecl(%union.tree_node*) #1

declare void @warning_with_decl(%union.tree_node*, i8*, ...) #1

declare void @warning(i8*, ...) #1

declare i32 @mark_addressable(%union.tree_node*) #1

declare i32 @aggregate_value_p(%union.tree_node*) #1

declare i64 @int_size_in_bytes(%union.tree_node*) #1

declare %struct.rtx_def* @assign_temp(%union.tree_node*, i32, i32, i32) #1

declare void @mark_temp_addr_taken(%struct.rtx_def*) #1

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #3

declare %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def*) #1

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #1

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #1

declare void @init_cumulative_args(%struct.ix86_args*, %union.tree_node*, %struct.rtx_def*) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #1

declare i32 @any_pending_cleanups(i32) #1

declare i32 @ix86_return_pops_args(%union.tree_node*, %union.tree_node*, i32) #1

declare i32 @unsafe_for_reeval(%union.tree_node*) #1

declare %union.tree_node* @unsave_expr(%union.tree_node*) #1

declare %union.tree_node* @build_decl(i32, %union.tree_node*, %union.tree_node*) #1

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #1

declare void @emit_queue() #1

declare void @start_sequence() #1

declare void @expand_start_target_temps() #1

declare i32 @optimize_tail_recursion(%union.tree_node*, %struct.rtx_def*) #1

declare %struct.rtx_def* @get_last_insn() #1

declare %struct.rtx_def* @get_insns() #1

declare void @expand_end_target_temps() #1

declare void @end_sequence() #1

; Function Attrs: nounwind uwtable
define void @emit_library_call(%struct.rtx_def* %orgfun, i32 %fn_type, i32 %outmode, i32 %nargs, ...) #0 {
entry:
  %p = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %p to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %call = call fastcc %struct.rtx_def* @emit_library_call_value_1(i32 0, %struct.rtx_def* %orgfun, %struct.rtx_def* null, i32 %fn_type, i32 %outmode, i32 %nargs, %struct.__va_list_tag* %arraydecay)
  call void @llvm.va_end(i8* %arraydecay1)
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #1

declare void @do_pending_stack_adjust() #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

declare %struct.simple_bitmap_def* @sbitmap_alloc(i32) #1

declare void @sbitmap_zero(%struct.simple_bitmap_def*) #1

declare void @emit_stack_save(i32, %struct.rtx_def**, %struct.rtx_def*) #1

declare %struct.rtx_def* @push_block(%struct.rtx_def*, i32, i32) #1

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

declare %union.tree_node* @size_int_wide(i64, i32) #1

declare %union.tree_node* @size_binop(i32, %union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #1

declare %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare void @anti_adjust_stack(%struct.rtx_def*) #1

declare %struct.rtx_def* @hard_function_value(%union.tree_node*, %union.tree_node*, i32) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @store_one_arg(%struct.arg_data* %arg, %struct.rtx_def* %argblock, i32 %flags, i32 %variable_size) #0 {
entry:
  %tree_value = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 0
  %0 = load %union.tree_node** %tree_value, align 8, !tbaa !28
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @push_temp_slots() #4
  %1 = load i32* @target_flags, align 4, !tbaa !17
  %and = and i32 %1, 4096
  %tobool = icmp ne i32 %and, 0
  %and1 = and i32 %flags, 256
  %tobool2 = icmp eq i32 %and1, 0
  %or.cond3 = and i1 %tobool, %tobool2
  br i1 %or.cond3, label %if.then3, label %if.end113

if.then3:                                         ; preds = %if.end
  %tobool4 = icmp eq %struct.rtx_def* %argblock, null
  %tobool6 = icmp ne i32 %variable_size, 0
  %or.cond = or i1 %tobool4, %tobool6
  br i1 %or.cond, label %if.end113, label %land.lhs.true7

land.lhs.true7:                                   ; preds = %if.then3
  %stack = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 12
  %2 = load %struct.rtx_def** %stack, align 8, !tbaa !60
  %tobool8 = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool8, label %if.end113, label %if.then9

if.then9:                                         ; preds = %land.lhs.true7
  %stack_slot = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 13
  %3 = load %struct.rtx_def** %stack_slot, align 8, !tbaa !61
  %arrayidx = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load10 = load i32* %5, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 75
  br i1 %cmp12, label %if.then13, label %if.end23

if.then13:                                        ; preds = %if.then9
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx20, align 8, !tbaa !1
  %rtwint = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0, i32 0
  %7 = load i64* %rtwint, align 8, !tbaa !44
  %conv = trunc i64 %7 to i32
  br label %if.end23

if.end23:                                         ; preds = %if.then9, %if.then13
  %lower_bound.0 = phi i32 [ %conv, %if.then13 ], [ 0, %if.then9 ]
  %conv242 = zext i32 %lower_bound.0 to i64
  %constant = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 11, i32 0
  %8 = load i64* %constant, align 8, !tbaa !45
  %add = add nsw i64 %conv242, %8
  %conv25 = trunc i64 %add to i32
  %cmp2621 = icmp slt i32 %lower_bound.0, %conv25
  br i1 %cmp2621, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end23
  %9 = load i8** @stack_usage_map, align 8, !tbaa !1
  %10 = sext i32 %lower_bound.0 to i64
  br label %for.body

for.cond:                                         ; preds = %for.body
  %11 = trunc i64 %indvars.iv.next27 to i32
  %cmp26 = icmp slt i32 %11, %conv25
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv26 = phi i64 [ %10, %for.body.lr.ph ], [ %indvars.iv.next27, %for.cond ]
  %arrayidx28 = getelementptr inbounds i8* %9, i64 %indvars.iv26
  %12 = load i8* %arrayidx28, align 1, !tbaa !15
  %tobool30 = icmp ne i8 %12, 0
  %13 = trunc i64 %indvars.iv26 to i32
  %cmp32 = icmp sgt i32 %13, 0
  %or.cond4 = and i1 %tobool30, %cmp32
  %indvars.iv.next27 = add nsw i64 %indvars.iv26, 1
  br i1 %or.cond4, label %for.end, label %for.cond

for.end:                                          ; preds = %for.cond, %for.body, %if.end23
  %i.0.lcssa = phi i32 [ %lower_bound.0, %if.end23 ], [ %11, %for.cond ], [ %13, %for.body ]
  %cmp36 = icmp eq i32 %i.0.lcssa, %conv25
  br i1 %cmp36, label %land.lhs.true99, label %if.then38

if.then38:                                        ; preds = %for.end
  %mul = shl nsw i64 %8, 3
  %conv41 = trunc i64 %mul to i32
  %call = tail call i32 @mode_for_size(i32 %conv41, i32 1, i32 1) #4
  %14 = load %struct.rtx_def** %stack_slot, align 8, !tbaa !61
  %arrayidx44 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx45, align 8, !tbaa !1
  %call46 = tail call %struct.rtx_def* @memory_address(i32 %call, %struct.rtx_def* %15) #4
  %call47 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 %call, %struct.rtx_def* %call46) #4
  %cmp48 = icmp eq i32 %call, 51
  br i1 %cmp48, label %if.then50, label %if.else88

if.then50:                                        ; preds = %if.then38
  %16 = load %union.tree_node** %tree_value, align 8, !tbaa !28
  %type = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 1
  %17 = load %union.tree_node** %type, align 8, !tbaa !16
  %readonly_flag = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 2
  %bf.load54 = load i32* %readonly_flag, align 8
  %18 = lshr i32 %bf.load54, 10
  %mul61 = and i32 %18, 2
  %type62 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type62, i64 0, i32 6
  %bf.load63 = load i32* %restrict_flag, align 4
  %19 = lshr i32 %bf.load63, 19
  %mul66 = and i32 %19, 4
  %bf.clear71 = and i32 %bf.load54, 255
  %cmp72 = icmp eq i32 %bf.clear71, 20
  br i1 %cmp72, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then50
  %type75 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type75, align 8, !tbaa !16
  %tobool76 = icmp ne %union.tree_node* %20, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then50
  %21 = phi i1 [ false, %if.then50 ], [ %tobool76, %land.rhs ]
  %land.ext = zext i1 %21 to i32
  %mul77 = shl nuw nsw i32 %land.ext, 3
  %or = or i32 %mul61, %mul66
  %or67 = or i32 %or, %mul77
  %or79 = or i32 %or67, 1
  %call80 = tail call %union.tree_node* @build_qualified_type(%union.tree_node* %17, i32 %or79) #4
  %call81 = tail call %struct.rtx_def* @assign_temp(%union.tree_node* %call80, i32 0, i32 1, i32 1) #4
  %save_area = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 14
  store %struct.rtx_def* %call81, %struct.rtx_def** %save_area, align 8, !tbaa !64
  tail call void @preserve_temp_slots(%struct.rtx_def* %call81) #4
  %22 = load %struct.rtx_def** %save_area, align 8, !tbaa !64
  %call84 = tail call %struct.rtx_def* @validize_mem(%struct.rtx_def* %22) #4
  %23 = load %union.tree_node** %tree_value, align 8, !tbaa !28
  %call86 = tail call %struct.rtx_def* @expr_size(%union.tree_node* %23) #4
  %call87 = tail call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %call84, %struct.rtx_def* %call47, %struct.rtx_def* %call86) #4
  br label %land.lhs.true99

if.else88:                                        ; preds = %if.then38
  %call89 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %call) #4
  %save_area90 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 14
  store %struct.rtx_def* %call89, %struct.rtx_def** %save_area90, align 8, !tbaa !64
  %call92 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call89, %struct.rtx_def* %call47) #4
  br label %land.lhs.true99

land.lhs.true99:                                  ; preds = %for.end, %if.else88, %land.end
  %.pre = load %struct.rtx_def** %stack, align 8, !tbaa !60
  %phitmp29 = icmp ne %struct.rtx_def* %.pre, null
  %cmp10419 = icmp slt i32 %lower_bound.0, %conv25
  %or.cond30 = and i1 %phitmp29, %cmp10419
  br i1 %or.cond30, label %for.body106.lr.ph, label %if.end113

for.body106.lr.ph:                                ; preds = %land.lhs.true99
  %24 = sext i32 %lower_bound.0 to i64
  br label %for.body106

for.body106:                                      ; preds = %for.body106.lr.ph, %for.body106
  %indvars.iv = phi i64 [ %24, %for.body106.lr.ph ], [ %indvars.iv.next, %for.body106 ]
  %25 = load i8** @stack_usage_map, align 8, !tbaa !1
  %arrayidx108 = getelementptr inbounds i8* %25, i64 %indvars.iv
  store i8 1, i8* %arrayidx108, align 1, !tbaa !15
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %26 = trunc i64 %indvars.iv.next to i32
  %cmp104 = icmp slt i32 %26, %conv25
  br i1 %cmp104, label %for.body106, label %if.end113

if.end113:                                        ; preds = %for.body106, %land.lhs.true99, %land.lhs.true7, %if.then3, %if.end
  %pass_on_stack = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 8
  %27 = load i32* %pass_on_stack, align 4, !tbaa !42
  %tobool114 = icmp eq i32 %27, 0
  br i1 %tobool114, label %if.end123, label %if.end130

if.end123:                                        ; preds = %if.end113
  %tail_call_reg = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 5
  %reg120 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 4
  %reg.0.in = select i1 %tobool2, %struct.rtx_def** %reg120, %struct.rtx_def** %tail_call_reg
  %reg.0 = load %struct.rtx_def** %reg.0.in, align 8
  %partial122 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 7
  %28 = load i32* %partial122, align 4, !tbaa !41
  %cmp124 = icmp ne %struct.rtx_def* %reg.0, null
  %cmp127 = icmp eq i32 %28, 0
  %or.cond657 = and i1 %cmp124, %cmp127
  br i1 %or.cond657, label %if.then129, label %if.end130

if.then129:                                       ; preds = %if.end123
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 4370, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.store_one_arg, i64 0, i64 0)) #7
  unreachable

if.end130:                                        ; preds = %if.end113, %if.end123
  %cmp12714 = phi i1 [ %cmp127, %if.end123 ], [ true, %if.end113 ]
  %reg.113 = phi %struct.rtx_def* [ %reg.0, %if.end123 ], [ null, %if.end113 ]
  %partial.012 = phi i32 [ %28, %if.end123 ], [ 0, %if.end113 ]
  %n_aligned_regs = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 16
  %29 = load i32* %n_aligned_regs, align 4, !tbaa !62
  %cmp131 = icmp eq i32 %29, 0
  %reg.1. = select i1 %cmp131, %struct.rtx_def* %reg.113, %struct.rtx_def* null
  %value = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 2
  %30 = load %struct.rtx_def** %value, align 8, !tbaa !54
  %cmp135 = icmp eq %struct.rtx_def* %30, null
  br i1 %cmp135, label %if.then137, label %if.end183

if.then137:                                       ; preds = %if.end130
  br i1 %tobool114, label %if.end142, label %if.then140

if.then140:                                       ; preds = %if.then137
  %31 = load i32* @stack_arg_under_construction, align 4, !tbaa !17
  %inc141 = add nsw i32 %31, 1
  store i32 %inc141, i32* @stack_arg_under_construction, align 4, !tbaa !17
  br label %if.end142

if.end142:                                        ; preds = %if.then137, %if.then140
  br i1 %cmp12714, label %lor.lhs.false, label %if.end142.cond.end_crit_edge

if.end142.cond.end_crit_edge:                     ; preds = %if.end142
  %mode156.pre = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 1
  %type158.pre = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  br label %cond.end

lor.lhs.false:                                    ; preds = %if.end142
  %type145 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %32 = load %union.tree_node** %type145, align 8, !tbaa !16
  %type146 = bitcast %union.tree_node* %32 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type146, i64 0, i32 6
  %bf.load147 = load i32* %mode, align 4
  %bf.lshr148 = lshr i32 %bf.load147, 9
  %bf.clear149 = and i32 %bf.lshr148, 127
  %mode150 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 1
  %33 = load i32* %mode150, align 4, !tbaa !38
  %cmp151 = icmp eq i32 %bf.clear149, %33
  br i1 %cmp151, label %cond.false, label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %stack153 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 12
  %34 = load %struct.rtx_def** %stack153, align 8, !tbaa !60
  br label %cond.end

cond.end:                                         ; preds = %if.end142.cond.end_crit_edge, %lor.lhs.false, %cond.false
  %type158.pre-phi = phi %union.tree_node** [ %type158.pre, %if.end142.cond.end_crit_edge ], [ %type145, %lor.lhs.false ], [ %type145, %cond.false ]
  %mode156.pre-phi = phi i32* [ %mode156.pre, %if.end142.cond.end_crit_edge ], [ %mode150, %lor.lhs.false ], [ %mode150, %cond.false ]
  %cond = phi %struct.rtx_def* [ null, %if.end142.cond.end_crit_edge ], [ null, %lor.lhs.false ], [ %34, %cond.false ]
  %call154 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %0, %struct.rtx_def* %cond, i32 0, i32 0) #4
  store %struct.rtx_def* %call154, %struct.rtx_def** %value, align 8, !tbaa !54
  %35 = load i32* %mode156.pre-phi, align 4, !tbaa !38
  %36 = load %union.tree_node** %type158.pre-phi, align 8, !tbaa !16
  %type159 = bitcast %union.tree_node* %36 to %struct.tree_type*
  %mode160 = getelementptr inbounds %struct.tree_type* %type159, i64 0, i32 6
  %bf.load161 = load i32* %mode160, align 4
  %bf.lshr162 = lshr i32 %bf.load161, 9
  %bf.clear163 = and i32 %bf.lshr162, 127
  %cmp164 = icmp eq i32 %35, %bf.clear163
  br i1 %cmp164, label %if.end178, label %if.then166

if.then166:                                       ; preds = %cond.end
  %unsignedp = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 6
  %37 = load i32* %unsignedp, align 4, !tbaa !37
  %call176 = tail call %struct.rtx_def* @convert_modes(i32 %35, i32 %bf.clear163, %struct.rtx_def* %call154, i32 %37) #4
  store %struct.rtx_def* %call176, %struct.rtx_def** %value, align 8, !tbaa !54
  br label %if.end178

if.end178:                                        ; preds = %cond.end, %if.then166
  %38 = phi %struct.rtx_def* [ %call154, %cond.end ], [ %call176, %if.then166 ]
  %39 = load i32* %pass_on_stack, align 4, !tbaa !42
  %tobool180 = icmp eq i32 %39, 0
  br i1 %tobool180, label %if.end183, label %if.then181

if.then181:                                       ; preds = %if.end178
  %40 = load i32* @stack_arg_under_construction, align 4, !tbaa !17
  %dec = add nsw i32 %40, -1
  store i32 %dec, i32* @stack_arg_under_construction, align 4, !tbaa !17
  br label %if.end183

if.end183:                                        ; preds = %if.end178, %if.then181, %if.end130
  %41 = phi %struct.rtx_def* [ %38, %if.end178 ], [ %38, %if.then181 ], [ %30, %if.end130 ]
  %and184 = and i32 %flags, 8
  %tobool185 = icmp eq i32 %and184, 0
  br i1 %tobool185, label %if.end187, label %if.then186

if.then186:                                       ; preds = %if.end183
  tail call void @do_pending_stack_adjust() #4
  %.pre28 = load %struct.rtx_def** %value, align 8, !tbaa !54
  br label %if.end187

if.end187:                                        ; preds = %if.end183, %if.then186
  %42 = phi %struct.rtx_def* [ %41, %if.end183 ], [ %.pre28, %if.then186 ]
  %stack189 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 12
  %43 = load %struct.rtx_def** %stack189, align 8, !tbaa !60
  %cmp190 = icmp eq %struct.rtx_def* %42, %43
  br i1 %cmp190, label %if.end654, label %if.else193

if.else193:                                       ; preds = %if.end187
  %mode194 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 1
  %44 = load i32* %mode194, align 4, !tbaa !38
  %cmp195 = icmp eq i32 %44, 51
  br i1 %cmp195, label %if.else295, label %if.then197

if.then197:                                       ; preds = %if.else193
  %idxprom200 = sext i32 %44 to i64
  %arrayidx201 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom200
  %45 = load i8* %arrayidx201, align 1, !tbaa !15
  %conv202 = zext i8 %45 to i32
  %46 = load i32* @target_flags, align 4, !tbaa !17
  %and203 = and i32 %46, 33554432
  %tobool204 = icmp eq i32 %and203, 0
  br i1 %tobool204, label %cond.false208, label %cond.true205

cond.true205:                                     ; preds = %if.then197
  %add206 = add nsw i32 %conv202, 7
  %and207 = and i32 %add206, 504
  br label %cond.end211

cond.false208:                                    ; preds = %if.then197
  %add209 = add nsw i32 %conv202, 1
  %and210 = and i32 %add209, 510
  br label %cond.end211

cond.end211:                                      ; preds = %cond.false208, %cond.true205
  %cond212 = phi i32 [ %and207, %cond.true205 ], [ %and210, %cond.false208 ]
  %and213 = lshr i32 %46, 20
  %47 = and i32 %and213, 32
  %48 = add i32 %47, 32
  %div = sdiv i32 %48, 8
  %add216 = add i32 %cond212, -1
  %sub = add i32 %add216, %div
  %div221 = srem i32 %sub, %div
  %type230 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %49 = load %union.tree_node** %type230, align 8, !tbaa !16
  %sum = add i32 %div221, %cond212
  %sub231 = sub i32 %sub, %sum
  %offset = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9
  %var = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 1
  %50 = load %union.tree_node** %var, align 8, !tbaa !56
  %cmp232 = icmp eq %union.tree_node* %50, null
  br i1 %cmp232, label %cond.true234, label %cond.false247

cond.true234:                                     ; preds = %cond.end211
  %constant236 = getelementptr inbounds %struct.args_size* %offset, i64 0, i32 0
  %51 = load i64* %constant236, align 8, !tbaa !57
  %call237 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %51) #4
  br label %cond.end258

cond.false247:                                    ; preds = %cond.end211
  %52 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call250 = tail call %union.tree_node* @convert(%union.tree_node* %52, %union.tree_node* %50) #4
  %constant252 = getelementptr inbounds %struct.args_size* %offset, i64 0, i32 0
  %53 = load i64* %constant252, align 8, !tbaa !57
  %call253 = tail call %union.tree_node* @size_int_wide(i64 %53, i32 1) #4
  %call254 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call250, %union.tree_node* %call253) #4
  %call257 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call254, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end258

cond.end258:                                      ; preds = %cond.false247, %cond.true234
  %cond259 = phi %struct.rtx_def* [ %call237, %cond.true234 ], [ %call257, %cond.false247 ]
  %alignment_pad = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17
  %var260 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17, i32 1
  %54 = load %union.tree_node** %var260, align 8, !tbaa !67
  %cmp261 = icmp eq %union.tree_node* %54, null
  br i1 %cmp261, label %cond.true263, label %cond.false276

cond.true263:                                     ; preds = %cond.end258
  %constant265 = getelementptr inbounds %struct.args_size* %alignment_pad, i64 0, i32 0
  %55 = load i64* %constant265, align 8, !tbaa !68
  %call266 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %55) #4
  br label %cond.end287

cond.false276:                                    ; preds = %cond.end258
  %56 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call279 = tail call %union.tree_node* @convert(%union.tree_node* %56, %union.tree_node* %54) #4
  %constant281 = getelementptr inbounds %struct.args_size* %alignment_pad, i64 0, i32 0
  %57 = load i64* %constant281, align 8, !tbaa !68
  %call282 = tail call %union.tree_node* @size_int_wide(i64 %57, i32 1) #4
  %call283 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call279, %union.tree_node* %call282) #4
  %call286 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call283, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end287

cond.end287:                                      ; preds = %cond.false276, %cond.true263
  %cond288 = phi %struct.rtx_def* [ %call266, %cond.true263 ], [ %call286, %cond.false276 ]
  tail call void @emit_push_insn(%struct.rtx_def* %42, i32 %44, %union.tree_node* %49, %struct.rtx_def* null, i32 0, i32 %partial.012, %struct.rtx_def* %reg.1., i32 %sub231, %struct.rtx_def* %argblock, %struct.rtx_def* %cond259, i32 0, %struct.rtx_def* %cond288) #4
  br i1 %cmp12714, label %if.then291, label %if.end654

if.then291:                                       ; preds = %cond.end287
  %58 = load %struct.rtx_def** %stack189, align 8, !tbaa !60
  store %struct.rtx_def* %58, %struct.rtx_def** %value, align 8, !tbaa !54
  br label %if.end654

if.else295:                                       ; preds = %if.else193
  %size296 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 11
  %var297 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 11, i32 1
  %59 = load %union.tree_node** %var297, align 8, !tbaa !47
  %cmp298 = icmp eq %union.tree_node* %59, null
  br i1 %cmp298, label %if.else331, label %cond.false318

cond.false318:                                    ; preds = %if.else295
  %60 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call321 = tail call %union.tree_node* @convert(%union.tree_node* %60, %union.tree_node* %59) #4
  %constant323 = getelementptr inbounds %struct.args_size* %size296, i64 0, i32 0
  %61 = load i64* %constant323, align 8, !tbaa !45
  %call324 = tail call %union.tree_node* @size_int_wide(i64 %61, i32 1) #4
  %call325 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call321, %union.tree_node* %call324) #4
  %call328 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call325, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %if.end346

if.else331:                                       ; preds = %if.else295
  %constant333 = getelementptr inbounds %struct.args_size* %size296, i64 0, i32 0
  %62 = load i64* %constant333, align 8, !tbaa !45
  %type335 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %63 = load %union.tree_node** %type335, align 8, !tbaa !16
  %call336 = tail call i64 @int_size_in_bytes(%union.tree_node* %63) #4
  %sub337 = sub i64 %62, %call336
  %64 = load i32* @target_flags, align 4, !tbaa !17
  %and338 = lshr i32 %64, 23
  %65 = and i32 %and338, 4
  %66 = add i32 %65, 4
  %mul341 = mul nsw i32 %66, %partial.012
  %conv3421 = zext i32 %mul341 to i64
  %add343 = add nsw i64 %sub337, %conv3421
  %conv344 = trunc i64 %add343 to i32
  %call345 = tail call %struct.rtx_def* @expr_size(%union.tree_node* %0) #4
  br label %if.end346

if.end346:                                        ; preds = %cond.false318, %if.else331
  %excess.0 = phi i32 [ %conv344, %if.else331 ], [ 0, %cond.false318 ]
  %size_rtx.0 = phi %struct.rtx_def* [ %call345, %if.else331 ], [ %call328, %cond.false318 ]
  br i1 %tobool2, label %if.end459, label %land.lhs.true349

land.lhs.true349:                                 ; preds = %if.end346
  %67 = load %struct.rtx_def** %value, align 8, !tbaa !54
  %68 = getelementptr inbounds %struct.rtx_def* %67, i64 0, i32 0
  %bf.load351 = load i32* %68, align 8
  %bf.clear352 = and i32 %bf.load351, 65535
  %cmp353 = icmp eq i32 %bf.clear352, 66
  br i1 %cmp353, label %if.then355, label %if.end459

if.then355:                                       ; preds = %land.lhs.true349
  %arrayidx359 = getelementptr inbounds %struct.rtx_def* %67, i64 0, i32 1, i64 0
  %rtx360 = bitcast %union.rtunion_def* %arrayidx359 to %struct.rtx_def**
  %69 = load %struct.rtx_def** %rtx360, align 8, !tbaa !1
  %70 = load %struct.function** @cfun, align 8, !tbaa !1
  %internal_arg_pointer = getelementptr inbounds %struct.function* %70, i64 0, i32 15
  %71 = load %struct.rtx_def** %internal_arg_pointer, align 8, !tbaa !69
  %cmp361 = icmp eq %struct.rtx_def* %69, %71
  br i1 %cmp361, label %if.end410, label %lor.lhs.false363

lor.lhs.false363:                                 ; preds = %if.then355
  %72 = getelementptr inbounds %struct.rtx_def* %69, i64 0, i32 0
  %bf.load367 = load i32* %72, align 8
  %bf.clear368 = and i32 %bf.load367, 65535
  %cmp369 = icmp eq i32 %bf.clear368, 75
  br i1 %cmp369, label %land.lhs.true371, label %if.end459

land.lhs.true371:                                 ; preds = %lor.lhs.false363
  %fld375 = getelementptr inbounds %struct.rtx_def* %69, i64 0, i32 1
  %rtx377 = bitcast [1 x %union.rtunion_def]* %fld375 to %struct.rtx_def**
  %73 = load %struct.rtx_def** %rtx377, align 8, !tbaa !1
  %cmp379 = icmp eq %struct.rtx_def* %73, %71
  br i1 %cmp379, label %land.lhs.true381, label %if.end459

land.lhs.true381:                                 ; preds = %land.lhs.true371
  %arrayidx386 = getelementptr inbounds %struct.rtx_def* %69, i64 0, i32 1, i64 1
  %rtx387 = bitcast %union.rtunion_def* %arrayidx386 to %struct.rtx_def**
  %74 = load %struct.rtx_def** %rtx387, align 8, !tbaa !1
  %75 = getelementptr inbounds %struct.rtx_def* %74, i64 0, i32 0
  %bf.load388 = load i32* %75, align 8
  %bf.clear389 = and i32 %bf.load388, 65535
  %cmp390 = icmp eq i32 %bf.clear389, 54
  br i1 %cmp390, label %if.then392, label %if.end459

if.then392:                                       ; preds = %land.lhs.true381
  br i1 %cmp361, label %if.end410, label %if.then399

if.then399:                                       ; preds = %if.then392
  %arrayidx404 = getelementptr inbounds %struct.rtx_def* %69, i64 0, i32 1, i64 1
  %rtx405 = bitcast %union.rtunion_def* %arrayidx404 to %struct.rtx_def**
  %76 = load %struct.rtx_def** %rtx405, align 8, !tbaa !1
  %rtwint408 = getelementptr inbounds %struct.rtx_def* %76, i64 0, i32 1, i64 0, i32 0
  %77 = load i64* %rtwint408, align 8, !tbaa !44
  %sext = shl i64 %77, 32
  %phitmp = ashr exact i64 %sext, 32
  br label %if.end410

if.end410:                                        ; preds = %if.then355, %if.then392, %if.then399
  %i357.0 = phi i64 [ %phitmp, %if.then399 ], [ 0, %if.then392 ], [ 0, %if.then355 ]
  %var412 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 1
  %78 = load %union.tree_node** %var412, align 8, !tbaa !56
  %tobool413 = icmp eq %union.tree_node* %78, null
  br i1 %tobool413, label %lor.lhs.false414, label %if.then419

lor.lhs.false414:                                 ; preds = %if.end410
  %79 = getelementptr inbounds %struct.rtx_def* %size_rtx.0, i64 0, i32 0
  %bf.load415 = load i32* %79, align 8
  %bf.clear416 = and i32 %bf.load415, 65535
  %cmp417 = icmp eq i32 %bf.clear416, 54
  br i1 %cmp417, label %if.end420, label %if.then419

if.then419:                                       ; preds = %lor.lhs.false414, %if.end410
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 4515, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.store_one_arg, i64 0, i64 0)) #7
  unreachable

if.end420:                                        ; preds = %lor.lhs.false414
  %constant422 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 0
  %80 = load i64* %constant422, align 8, !tbaa !57
  %cmp424 = icmp sgt i64 %80, %i357.0
  br i1 %cmp424, label %if.then426, label %if.else438

if.then426:                                       ; preds = %if.end420
  %rtwint432 = getelementptr inbounds %struct.rtx_def* %size_rtx.0, i64 0, i32 1, i64 0, i32 0
  %81 = load i64* %rtwint432, align 8, !tbaa !44
  %add433 = add nsw i64 %81, %i357.0
  %cmp434 = icmp slt i64 %80, %add433
  %. = zext i1 %cmp434 to i32
  br label %if.end459

if.else438:                                       ; preds = %if.end420
  %cmp442 = icmp slt i64 %80, %i357.0
  br i1 %cmp442, label %if.then444, label %if.end459

if.then444:                                       ; preds = %if.else438
  %rtwint450 = getelementptr inbounds %struct.rtx_def* %size_rtx.0, i64 0, i32 1, i64 0, i32 0
  %82 = load i64* %rtwint450, align 8, !tbaa !44
  %add451 = add nsw i64 %82, %80
  %cmp452 = icmp slt i64 %i357.0, %add451
  %.5 = zext i1 %cmp452 to i32
  br label %if.end459

if.end459:                                        ; preds = %if.then444, %if.then426, %if.end346, %lor.lhs.false363, %land.lhs.true371, %land.lhs.true381, %if.else438, %land.lhs.true349
  %sibcall_failure.0 = phi i32 [ 0, %if.else438 ], [ 0, %land.lhs.true381 ], [ 0, %land.lhs.true371 ], [ 0, %lor.lhs.false363 ], [ 0, %land.lhs.true349 ], [ 0, %if.end346 ], [ %., %if.then426 ], [ %.5, %if.then444 ]
  %reg460 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 4
  %83 = load %struct.rtx_def** %reg460, align 8, !tbaa !39
  %tobool461 = icmp eq %struct.rtx_def* %83, null
  br i1 %tobool461, label %if.end578, label %land.lhs.true462

land.lhs.true462:                                 ; preds = %if.end459
  %84 = load i32* %pass_on_stack, align 4, !tbaa !42
  %tobool464 = icmp eq i32 %84, 0
  br i1 %tobool464, label %if.end578, label %if.then465

if.then465:                                       ; preds = %land.lhs.true462
  %constant467 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 0
  %85 = load i64* %constant467, align 8, !tbaa !57
  %cmp469 = icmp slt i64 %85, 0
  br i1 %cmp469, label %land.lhs.true471, label %if.end578

land.lhs.true471:                                 ; preds = %if.then465
  %var473 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 1
  %86 = load %union.tree_node** %var473, align 8, !tbaa !56
  %tobool474 = icmp eq %union.tree_node* %86, null
  br i1 %tobool474, label %land.lhs.true482, label %if.then475

if.then475:                                       ; preds = %land.lhs.true471
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([56 x i8]* @.str5, i64 0, i64 0)) #4
  br label %if.end578

land.lhs.true482:                                 ; preds = %land.lhs.true471
  %87 = load %union.tree_node** %var297, align 8, !tbaa !47
  %tobool485 = icmp eq %union.tree_node* %87, null
  br i1 %tobool485, label %land.lhs.true493, label %if.then486

if.then486:                                       ; preds = %land.lhs.true482
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([54 x i8]* @.str6, i64 0, i64 0)) #4
  br label %if.end578

land.lhs.true493:                                 ; preds = %land.lhs.true482
  %constant497 = getelementptr inbounds %struct.args_size* %size296, i64 0, i32 0
  %88 = load i64* %constant497, align 8, !tbaa !45
  %add498 = add nsw i64 %88, %85
  %cmp500 = icmp sgt i64 %add498, 0
  br i1 %cmp500, label %if.then502, label %if.end578

if.then502:                                       ; preds = %land.lhs.true493
  %sub506 = sub nsw i64 0, %85
  %call507 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub506) #4
  %89 = load %struct.rtx_def** %value, align 8, !tbaa !54
  %90 = load i32* %mode194, align 4, !tbaa !38
  %type511 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %91 = load %union.tree_node** %type511, align 8, !tbaa !16
  %align = getelementptr inbounds %union.tree_node* %91, i64 0, i32 0, i32 7
  %92 = bitcast %union.tree_node** %align to i32*
  %93 = load i32* %92, align 4, !tbaa !36
  %94 = load %union.tree_node** %var473, align 8, !tbaa !56
  %cmp517 = icmp eq %union.tree_node* %94, null
  br i1 %cmp517, label %cond.true519, label %cond.false532

cond.true519:                                     ; preds = %if.then502
  %95 = load i64* %constant467, align 8, !tbaa !57
  %call522 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %95) #4
  br label %cond.end543

cond.false532:                                    ; preds = %if.then502
  %96 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call535 = tail call %union.tree_node* @convert(%union.tree_node* %96, %union.tree_node* %94) #4
  %97 = load i64* %constant467, align 8, !tbaa !57
  %call538 = tail call %union.tree_node* @size_int_wide(i64 %97, i32 1) #4
  %call539 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call535, %union.tree_node* %call538) #4
  %call542 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call539, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end543

cond.end543:                                      ; preds = %cond.false532, %cond.true519
  %cond544 = phi %struct.rtx_def* [ %call522, %cond.true519 ], [ %call542, %cond.false532 ]
  %alignment_pad545 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17
  %var546 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17, i32 1
  %98 = load %union.tree_node** %var546, align 8, !tbaa !67
  %cmp547 = icmp eq %union.tree_node* %98, null
  br i1 %cmp547, label %cond.true549, label %cond.false562

cond.true549:                                     ; preds = %cond.end543
  %constant551 = getelementptr inbounds %struct.args_size* %alignment_pad545, i64 0, i32 0
  %99 = load i64* %constant551, align 8, !tbaa !68
  %call552 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %99) #4
  br label %cond.end573

cond.false562:                                    ; preds = %cond.end543
  %100 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call565 = tail call %union.tree_node* @convert(%union.tree_node* %100, %union.tree_node* %98) #4
  %constant567 = getelementptr inbounds %struct.args_size* %alignment_pad545, i64 0, i32 0
  %101 = load i64* %constant567, align 8, !tbaa !68
  %call568 = tail call %union.tree_node* @size_int_wide(i64 %101, i32 1) #4
  %call569 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call565, %union.tree_node* %call568) #4
  %call572 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call569, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end573

cond.end573:                                      ; preds = %cond.false562, %cond.true549
  %cond574 = phi %struct.rtx_def* [ %call552, %cond.true549 ], [ %call572, %cond.false562 ]
  tail call void @emit_push_insn(%struct.rtx_def* %89, i32 %90, %union.tree_node* %91, %struct.rtx_def* %call507, i32 %93, i32 %partial.012, %struct.rtx_def* %reg.1., i32 %excess.0, %struct.rtx_def* %argblock, %struct.rtx_def* %cond544, i32 0, %struct.rtx_def* %cond574) #4
  br label %if.end578

if.end578:                                        ; preds = %if.then465, %land.lhs.true462, %if.end459, %if.then475, %land.lhs.true493, %cond.end573, %if.then486
  %102 = load %struct.rtx_def** %value, align 8, !tbaa !54
  %103 = load i32* %mode194, align 4, !tbaa !38
  %type582 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %104 = load %union.tree_node** %type582, align 8, !tbaa !16
  %align586 = getelementptr inbounds %union.tree_node* %104, i64 0, i32 0, i32 7
  %105 = bitcast %union.tree_node** %align586 to i32*
  %106 = load i32* %105, align 4, !tbaa !36
  %offset587 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9
  %var588 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 1
  %107 = load %union.tree_node** %var588, align 8, !tbaa !56
  %cmp589 = icmp eq %union.tree_node* %107, null
  br i1 %cmp589, label %cond.true591, label %cond.false604

cond.true591:                                     ; preds = %if.end578
  %constant593 = getelementptr inbounds %struct.args_size* %offset587, i64 0, i32 0
  %108 = load i64* %constant593, align 8, !tbaa !57
  %call594 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %108) #4
  br label %cond.end615

cond.false604:                                    ; preds = %if.end578
  %109 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call607 = tail call %union.tree_node* @convert(%union.tree_node* %109, %union.tree_node* %107) #4
  %constant609 = getelementptr inbounds %struct.args_size* %offset587, i64 0, i32 0
  %110 = load i64* %constant609, align 8, !tbaa !57
  %call610 = tail call %union.tree_node* @size_int_wide(i64 %110, i32 1) #4
  %call611 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call607, %union.tree_node* %call610) #4
  %call614 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call611, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end615

cond.end615:                                      ; preds = %cond.false604, %cond.true591
  %cond616 = phi %struct.rtx_def* [ %call594, %cond.true591 ], [ %call614, %cond.false604 ]
  %alignment_pad617 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17
  %var618 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17, i32 1
  %111 = load %union.tree_node** %var618, align 8, !tbaa !67
  %cmp619 = icmp eq %union.tree_node* %111, null
  br i1 %cmp619, label %cond.true621, label %cond.false634

cond.true621:                                     ; preds = %cond.end615
  %constant623 = getelementptr inbounds %struct.args_size* %alignment_pad617, i64 0, i32 0
  %112 = load i64* %constant623, align 8, !tbaa !68
  %call624 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %112) #4
  br label %cond.end645

cond.false634:                                    ; preds = %cond.end615
  %113 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call637 = tail call %union.tree_node* @convert(%union.tree_node* %113, %union.tree_node* %111) #4
  %constant639 = getelementptr inbounds %struct.args_size* %alignment_pad617, i64 0, i32 0
  %114 = load i64* %constant639, align 8, !tbaa !68
  %call640 = tail call %union.tree_node* @size_int_wide(i64 %114, i32 1) #4
  %call641 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call637, %union.tree_node* %call640) #4
  %call644 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call641, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end645

cond.end645:                                      ; preds = %cond.false634, %cond.true621
  %cond646 = phi %struct.rtx_def* [ %call624, %cond.true621 ], [ %call644, %cond.false634 ]
  tail call void @emit_push_insn(%struct.rtx_def* %102, i32 %103, %union.tree_node* %104, %struct.rtx_def* %size_rtx.0, i32 %106, i32 %partial.012, %struct.rtx_def* %reg.1., i32 %excess.0, %struct.rtx_def* %argblock, %struct.rtx_def* %cond616, i32 0, %struct.rtx_def* %cond646) #4
  br i1 %cmp12714, label %if.then649, label %if.end654

if.then649:                                       ; preds = %cond.end645
  %stack_slot650 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 13
  %115 = load %struct.rtx_def** %stack_slot650, align 8, !tbaa !61
  store %struct.rtx_def* %115, %struct.rtx_def** %value, align 8, !tbaa !54
  br label %if.end654

if.end654:                                        ; preds = %if.then291, %cond.end287, %if.then649, %cond.end645, %if.end187
  %sibcall_failure.1 = phi i32 [ 0, %if.end187 ], [ 0, %if.then291 ], [ 0, %cond.end287 ], [ %sibcall_failure.0, %if.then649 ], [ %sibcall_failure.0, %cond.end645 ]
  %116 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr = getelementptr inbounds %struct.function* %116, i64 0, i32 2
  %117 = load %struct.expr_status** %expr, align 8, !tbaa !18
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %117, i64 0, i32 1
  %118 = load i32* %x_inhibit_defer_pop, align 4, !tbaa !21
  %add655 = add nsw i32 %118, 1
  store i32 %add655, i32* %x_inhibit_defer_pop, align 4, !tbaa !21
  tail call void @emit_queue() #4
  tail call void @preserve_temp_slots(%struct.rtx_def* null) #4
  tail call void @free_temp_slots() #4
  tail call void @pop_temp_slots() #4
  br label %return

return:                                           ; preds = %entry, %if.end654
  %retval.0 = phi i32 [ %sibcall_failure.1, %if.end654 ], [ 1, %entry ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @function_arg(%struct.ix86_args*, i32, %union.tree_node*, i32) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @emit_call_1(%struct.rtx_def* %funexp, %union.tree_node* %fndecl, %union.tree_node* %funtype, i64 %stack_size, i64 %rounded_stack_size, i64 %struct_value_size, %struct.rtx_def* %next_arg_reg, %struct.rtx_def* %valreg, i32 %old_inhibit_defer_pop, %struct.rtx_def* %call_fusage, i32 %ecf_flags) #0 {
entry:
  %call = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %rounded_stack_size) #4
  %conv = trunc i64 %stack_size to i32
  %call1 = tail call i32 @ix86_return_pops_args(%union.tree_node* %fndecl, %union.tree_node* %funtype, i32 %conv) #4
  %conv2 = sext i32 %call1 to i64
  %call3 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %struct_value_size) #4
  %0 = getelementptr inbounds %struct.rtx_def* %funexp, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 68
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call5 = tail call %struct.rtx_def* @memory_address(i32 2, %struct.rtx_def* %funexp) #4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %funexp.addr.0 = phi %struct.rtx_def* [ %call5, %if.then ], [ %funexp, %entry ]
  %1 = load i32* @target_flags, align 4, !tbaa !17
  %and = and i32 %1, 33554432
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.else24

land.lhs.true:                                    ; preds = %if.end
  %cmp9 = icmp sgt i32 %call1, 0
  %and12 = and i32 %ecf_flags, 1024
  %tobool13 = icmp eq i32 %and12, 0
  %or.cond5 = and i1 %cmp9, %tobool13
  br i1 %or.cond5, label %if.then14, label %if.else24

if.then14:                                        ; preds = %land.lhs.true
  %call15 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv2) #4
  %tobool16 = icmp eq %struct.rtx_def* %valreg, null
  %call20 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %funexp.addr.0) #4
  br i1 %tobool16, label %if.else, label %if.then17

if.then17:                                        ; preds = %if.then14
  %call19 = tail call %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def* %valreg, %struct.rtx_def* %call20, %struct.rtx_def* %call, %struct.rtx_def* %next_arg_reg, %struct.rtx_def* %call15) #4
  br label %if.end22

if.else:                                          ; preds = %if.then14
  %call21 = tail call %struct.rtx_def* @gen_call_pop(%struct.rtx_def* %call20, %struct.rtx_def* %call, %struct.rtx_def* %next_arg_reg, %struct.rtx_def* %call15) #4
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then17
  %pat.0 = phi %struct.rtx_def* [ %call19, %if.then17 ], [ %call21, %if.else ]
  %call23 = tail call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %pat.0) #4
  br label %if.end35

if.else24:                                        ; preds = %if.end, %land.lhs.true
  %tobool25 = icmp eq %struct.rtx_def* %valreg, null
  %call31 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %funexp.addr.0) #4
  br i1 %tobool25, label %if.else30, label %if.then26

if.then26:                                        ; preds = %if.else24
  %call28 = tail call %struct.rtx_def* @gen_call_value(%struct.rtx_def* %valreg, %struct.rtx_def* %call31, %struct.rtx_def* %call, %struct.rtx_def* %next_arg_reg) #4
  %call29 = tail call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call28) #4
  br label %if.end35

if.else30:                                        ; preds = %if.else24
  %call32 = tail call %struct.rtx_def* @gen_call(%struct.rtx_def* %call31, %struct.rtx_def* %call, %struct.rtx_def* %next_arg_reg) #4
  %call33 = tail call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call32) #4
  br label %if.end35

if.end35:                                         ; preds = %if.then26, %if.else30, %if.end22
  %already_popped.0 = phi i32 [ 0, %if.then26 ], [ 0, %if.else30 ], [ 1, %if.end22 ]
  %call36 = tail call %struct.rtx_def* @get_last_insn() #4
  %tobool377 = icmp eq %struct.rtx_def* %call36, null
  br i1 %tobool377, label %if.then43, label %land.rhs

land.rhs:                                         ; preds = %if.end35, %for.inc
  %call_insn.08 = phi %struct.rtx_def* [ %3, %for.inc ], [ %call36, %if.end35 ]
  %2 = getelementptr inbounds %struct.rtx_def* %call_insn.08, i64 0, i32 0
  %bf.load38 = load i32* %2, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 34
  br i1 %cmp40, label %if.end44, label %for.inc

for.inc:                                          ; preds = %land.rhs
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call_insn.08, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %tobool37 = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool37, label %if.then43, label %land.rhs

if.then43:                                        ; preds = %for.inc, %if.end35
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 580, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.emit_call_1, i64 0, i64 0)) #7
  unreachable

if.end44:                                         ; preds = %land.rhs
  %and45 = and i32 %ecf_flags, 512
  %tobool46 = icmp eq i32 %and45, 0
  br i1 %tobool46, label %if.end52, label %if.then47

if.then47:                                        ; preds = %if.end44
  %call48 = tail call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0) #4
  %call49 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call48) #4
  %call50 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call49) #4
  %call51 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call50, %struct.rtx_def* %call_fusage) #4
  br label %if.end52

if.end52:                                         ; preds = %if.end44, %if.then47
  %call_fusage.addr.0 = phi %struct.rtx_def* [ %call51, %if.then47 ], [ %call_fusage, %if.end44 ]
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %call_insn.08, i64 0, i32 1, i64 7
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx55, align 8, !tbaa !1
  %tobool56 = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool56, label %if.else76, label %for.cond61

for.cond61:                                       ; preds = %if.end52, %for.cond61
  %link.0 = phi %struct.rtx_def* [ %5, %for.cond61 ], [ %4, %if.end52 ]
  %arrayidx63 = getelementptr inbounds %struct.rtx_def* %link.0, i64 0, i32 1, i64 1
  %rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx64, align 8, !tbaa !1
  %cmp65 = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp65, label %for.end72, label %for.cond61

for.end72:                                        ; preds = %for.cond61
  %6 = getelementptr inbounds %union.rtunion_def* %arrayidx63, i64 0, i32 0
  %call_fusage.addr.0.c4 = ptrtoint %struct.rtx_def* %call_fusage.addr.0 to i64
  store i64 %call_fusage.addr.0.c4, i64* %6, align 8, !tbaa !1
  br label %if.end80

if.else76:                                        ; preds = %if.end52
  %7 = getelementptr inbounds %union.rtunion_def* %arrayidx54, i64 0, i32 0
  %call_fusage.addr.0.c = ptrtoint %struct.rtx_def* %call_fusage.addr.0 to i64
  store i64 %call_fusage.addr.0.c, i64* %7, align 8, !tbaa !1
  br label %if.end80

if.end80:                                         ; preds = %if.else76, %for.end72
  %and81 = and i32 %ecf_flags, 513
  %tobool82 = icmp eq i32 %and81, 0
  br i1 %tobool82, label %if.end86, label %if.then83

if.then83:                                        ; preds = %if.end80
  %bf.load84 = load i32* %2, align 8
  %bf.set = or i32 %bf.load84, 67108864
  store i32 %bf.set, i32* %2, align 8
  br label %if.end86

if.end86:                                         ; preds = %if.end80, %if.then83
  %and87 = and i32 %ecf_flags, 16
  %tobool88 = icmp eq i32 %and87, 0
  br i1 %tobool88, label %if.end97, label %if.then89

if.then89:                                        ; preds = %if.end86
  %8 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %arrayidx91 = getelementptr inbounds %struct.rtx_def* %call_insn.08, i64 0, i32 1, i64 6
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx92, align 8, !tbaa !1
  %call93 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 23, %struct.rtx_def* %8, %struct.rtx_def* %9) #4
  %10 = getelementptr inbounds %union.rtunion_def* %arrayidx91, i64 0, i32 0
  %call93.c = ptrtoint %struct.rtx_def* %call93 to i64
  store i64 %call93.c, i64* %10, align 8, !tbaa !1
  br label %if.end97

if.end97:                                         ; preds = %if.end86, %if.then89
  %and98 = and i32 %ecf_flags, 2
  %tobool99 = icmp eq i32 %and98, 0
  br i1 %tobool99, label %if.end108, label %if.then100

if.then100:                                       ; preds = %if.end97
  %11 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %arrayidx102 = getelementptr inbounds %struct.rtx_def* %call_insn.08, i64 0, i32 1, i64 6
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx103, align 8, !tbaa !1
  %call104 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 26, %struct.rtx_def* %11, %struct.rtx_def* %12) #4
  %13 = getelementptr inbounds %union.rtunion_def* %arrayidx102, i64 0, i32 0
  %call104.c = ptrtoint %struct.rtx_def* %call104 to i64
  store i64 %call104.c, i64* %13, align 8, !tbaa !1
  br label %if.end108

if.end108:                                        ; preds = %if.end97, %if.then100
  %and109 = and i32 %ecf_flags, 2048
  %tobool110 = icmp eq i32 %and109, 0
  br i1 %tobool110, label %if.end119, label %if.then111

if.then111:                                       ; preds = %if.end108
  %14 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %arrayidx113 = getelementptr inbounds %struct.rtx_def* %call_insn.08, i64 0, i32 1, i64 6
  %rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx114, align 8, !tbaa !1
  %call115 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 29, %struct.rtx_def* %14, %struct.rtx_def* %15) #4
  %16 = getelementptr inbounds %union.rtunion_def* %arrayidx113, i64 0, i32 0
  %call115.c = ptrtoint %struct.rtx_def* %call115 to i64
  store i64 %call115.c, i64* %16, align 8, !tbaa !1
  br label %if.end119

if.end119:                                        ; preds = %if.end108, %if.then111
  %and120 = and i32 %ecf_flags, 32
  %tobool121 = icmp eq i32 %and120, 0
  br i1 %tobool121, label %if.end133, label %if.then122

if.then122:                                       ; preds = %if.end119
  %17 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %arrayidx124 = getelementptr inbounds %struct.rtx_def* %call_insn.08, i64 0, i32 1, i64 6
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx125, align 8, !tbaa !1
  %call126 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 28, %struct.rtx_def* %17, %struct.rtx_def* %18) #4
  %19 = getelementptr inbounds %union.rtunion_def* %arrayidx124, i64 0, i32 0
  %call126.c = ptrtoint %struct.rtx_def* %call126 to i64
  store i64 %call126.c, i64* %19, align 8, !tbaa !1
  %20 = load %struct.function** @cfun, align 8, !tbaa !1
  %calls_setjmp = getelementptr inbounds %struct.function* %20, i64 0, i32 56
  %21 = bitcast i24* %calls_setjmp to i32*
  %bf.load130 = load i32* %21, align 8
  %bf.set132 = or i32 %bf.load130, 16
  store i32 %bf.set132, i32* %21, align 8
  br label %if.end133

if.end133:                                        ; preds = %if.end119, %if.then122
  %bf.load137 = load i32* %2, align 8
  %22 = shl i32 %ecf_flags, 16
  %bf.shl = and i32 %22, 16777216
  %bf.clear138 = and i32 %bf.load137, -16777217
  %bf.set139 = or i32 %bf.clear138, %bf.shl
  store i32 %bf.set139, i32* %2, align 8
  %23 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr = getelementptr inbounds %struct.function* %23, i64 0, i32 2
  %24 = load %struct.expr_status** %expr, align 8, !tbaa !18
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %24, i64 0, i32 1
  store i32 %old_inhibit_defer_pop, i32* %x_inhibit_defer_pop, align 4, !tbaa !21
  %cmp140 = icmp sgt i32 %call1, 0
  br i1 %cmp140, label %if.then142, label %if.end159

if.then142:                                       ; preds = %if.end133
  %tobool143 = icmp eq i32 %already_popped.0, 0
  br i1 %tobool143, label %if.then144, label %if.end153

if.then144:                                       ; preds = %if.then142
  %25 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !1
  %call145 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %25) #4
  %26 = load %struct.rtx_def** %rtx55, align 8, !tbaa !1
  %call149 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call145, %struct.rtx_def* %26) #4
  %27 = getelementptr inbounds %union.rtunion_def* %arrayidx54, i64 0, i32 0
  %call149.c = ptrtoint %struct.rtx_def* %call149 to i64
  store i64 %call149.c, i64* %27, align 8, !tbaa !1
  br label %if.end153

if.end153:                                        ; preds = %if.then142, %if.then144
  %sub = sub nsw i64 %rounded_stack_size, %conv2
  %call154 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub) #4
  %28 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr155 = getelementptr inbounds %struct.function* %28, i64 0, i32 2
  %29 = load %struct.expr_status** %expr155, align 8, !tbaa !18
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status* %29, i64 0, i32 2
  %30 = load i32* %x_stack_pointer_delta, align 4, !tbaa !51
  %sub157 = sub i32 %30, %call1
  store i32 %sub157, i32* %x_stack_pointer_delta, align 4, !tbaa !51
  br label %if.end159

if.end159:                                        ; preds = %if.end153, %if.end133
  %31 = phi %struct.expr_status* [ %29, %if.end153 ], [ %24, %if.end133 ]
  %rounded_stack_size_rtx.0 = phi %struct.rtx_def* [ %call154, %if.end153 ], [ %call, %if.end133 ]
  %rounded_stack_size.addr.0 = phi i64 [ %sub, %if.end153 ], [ %rounded_stack_size, %if.end133 ]
  %32 = load i32* @target_flags, align 4, !tbaa !17
  %and160 = and i32 %32, 4096
  %tobool161 = icmp eq i32 %and160, 0
  br i1 %tobool161, label %if.then162, label %if.else192

if.then162:                                       ; preds = %if.end159
  %cmp163 = icmp eq i64 %rounded_stack_size.addr.0, 0
  br i1 %cmp163, label %if.end197, label %if.then165

if.then165:                                       ; preds = %if.then162
  %and166 = and i32 %ecf_flags, 1024
  %tobool167 = icmp eq i32 %and166, 0
  br i1 %tobool167, label %if.else174, label %if.then168

if.then168:                                       ; preds = %if.then165
  %x_stack_pointer_delta170 = getelementptr inbounds %struct.expr_status* %31, i64 0, i32 2
  %33 = load i32* %x_stack_pointer_delta170, align 4, !tbaa !51
  %conv1712 = zext i32 %33 to i64
  %sub172 = sub nsw i64 %conv1712, %rounded_stack_size.addr.0
  %conv173 = trunc i64 %sub172 to i32
  store i32 %conv173, i32* %x_stack_pointer_delta170, align 4, !tbaa !51
  br label %if.end197

if.else174:                                       ; preds = %if.then165
  %34 = load i32* @flag_defer_pop, align 4, !tbaa !17
  %tobool175 = icmp eq i32 %34, 0
  br i1 %tobool175, label %if.else188, label %land.lhs.true176

land.lhs.true176:                                 ; preds = %if.else174
  %x_inhibit_defer_pop178 = getelementptr inbounds %struct.expr_status* %31, i64 0, i32 1
  %35 = load i32* %x_inhibit_defer_pop178, align 4, !tbaa !21
  %36 = or i32 %35, %and81
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %if.then184, label %if.else188

if.then184:                                       ; preds = %land.lhs.true176
  %x_pending_stack_adjust = getelementptr inbounds %struct.expr_status* %31, i64 0, i32 0
  %38 = load i32* %x_pending_stack_adjust, align 4, !tbaa !35
  %conv1861 = zext i32 %38 to i64
  %add = add nsw i64 %conv1861, %rounded_stack_size.addr.0
  %conv187 = trunc i64 %add to i32
  store i32 %conv187, i32* %x_pending_stack_adjust, align 4, !tbaa !35
  br label %if.end197

if.else188:                                       ; preds = %land.lhs.true176, %if.else174
  tail call void @adjust_stack(%struct.rtx_def* %rounded_stack_size_rtx.0) #4
  br label %if.end197

if.else192:                                       ; preds = %if.end159
  %tobool193 = icmp eq i32 %call1, 0
  br i1 %tobool193, label %if.end197, label %if.then194

if.then194:                                       ; preds = %if.else192
  %call195 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv2) #4
  tail call void @anti_adjust_stack(%struct.rtx_def* %call195) #4
  br label %if.end197

if.end197:                                        ; preds = %if.else192, %if.then162, %if.then194, %if.then184, %if.else188, %if.then168
  ret void
}

declare %struct.rtx_def* @emit_insns(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_reg_rtx(i32) #1

declare void @mark_reg_pointer(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_0(i32, i32) #1

declare void @emit_libcall_block(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #1

declare %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #1

declare void @preserve_temp_slots(%struct.rtx_def*) #1

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @emit_group_store(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @copy_blkmode_from_reg(%struct.rtx_def*, %struct.rtx_def*, %union.tree_node*) #1

declare void @emit_stack_restore(i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_block_move(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @validize_mem(%struct.rtx_def*) #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) #5

declare void @replace_call_placeholder(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @emit_call_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_uuuu(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare void @clear_pending_stack_adjust() #1

declare %struct.rtx_def* @gen_rtx(i32, i32, ...) #1

declare void @save_stack_pointer() #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: nounwind uwtable
define internal fastcc %struct.rtx_def* @emit_library_call_value_1(i32 %retval1, %struct.rtx_def* %orgfun, %struct.rtx_def* %value, i32 %fn_type, i32 %outmode, i32 %nargs, %struct.__va_list_tag* nocapture %p) #0 {
entry:
  %args_size = alloca %struct.args_size, align 8
  %alignment_pad = alloca %struct.args_size, align 8
  %args_so_far = alloca %struct.ix86_args, align 4
  %call_fusage = alloca %struct.rtx_def*, align 8
  %0 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr = getelementptr inbounds %struct.function* %0, i64 0, i32 2
  %1 = load %struct.expr_status** %expr, align 8, !tbaa !18
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %1, i64 0, i32 1
  %2 = load i32* %x_inhibit_defer_pop, align 4, !tbaa !21
  store %struct.rtx_def* null, %struct.rtx_def** %call_fusage, align 8, !tbaa !1
  %3 = load i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  %4 = load i8** @stack_usage_map, align 8, !tbaa !1
  switch i32 %fn_type, label %sw.epilog [
    i32 8, label %sw.bb12
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb4
    i32 4, label %sw.bb6
    i32 5, label %sw.bb8
    i32 6, label %sw.bb10
    i32 7, label %sw.bb11
  ]

sw.bb:                                            ; preds = %entry
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry
  br label %sw.epilog

sw.bb11:                                          ; preds = %entry
  br label %sw.epilog

sw.bb12:                                          ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb8, %sw.bb6, %sw.bb4, %sw.bb2, %sw.bb
  %flags.0 = phi i32 [ 16, %entry ], [ 2048, %sw.bb11 ], [ 2, %sw.bb10 ], [ 18, %sw.bb8 ], [ 4624, %sw.bb6 ], [ 4113, %sw.bb4 ], [ 528, %sw.bb2 ], [ 17, %sw.bb ], [ 32, %sw.bb12 ]
  %preferred_stack_boundary = getelementptr inbounds %struct.function* %0, i64 0, i32 53
  %5 = load i32* %preferred_stack_boundary, align 4, !tbaa !52
  %6 = load i32* @ix86_preferred_stack_boundary, align 4, !tbaa !17
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  store i32 %6, i32* %preferred_stack_boundary, align 4, !tbaa !52
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %cmp14 = icmp ne i32 %outmode, 0
  br i1 %cmp14, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %if.end
  %call = call %union.tree_node* @type_for_mode(i32 %outmode, i32 0) #4
  %call15 = call i32 @aggregate_value_p(%union.tree_node* %call) #4
  %tobool = icmp eq i32 %call15, 0
  br i1 %tobool, label %if.end26, label %if.then16

if.then16:                                        ; preds = %land.lhs.true
  %idxprom = sext i32 %outmode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %7 = load i8* %arrayidx, align 1, !tbaa !15
  %cmp17 = icmp eq %struct.rtx_def* %value, null
  br i1 %cmp17, label %if.else, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %if.then16
  %8 = getelementptr inbounds %struct.rtx_def* %value, i64 0, i32 0
  %bf.load = load i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp20 = icmp eq i32 %bf.clear, 66
  br i1 %cmp20, label %if.end25, label %if.else

if.else:                                          ; preds = %if.then16, %land.lhs.true19
  %call23 = call %union.tree_node* @type_for_mode(i32 %outmode, i32 0) #4
  %call24 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call23, i32 0, i32 1, i32 1) #4
  br label %if.end25

if.end25:                                         ; preds = %land.lhs.true19, %if.else
  %mem_value.0 = phi %struct.rtx_def* [ %call24, %if.else ], [ %value, %land.lhs.true19 ]
  %and = and i32 %flags.0, 2098
  %phitmp = zext i8 %7 to i64
  br label %if.end26

if.end26:                                         ; preds = %land.lhs.true, %if.end25, %if.end
  %flags.1 = phi i32 [ %and, %if.end25 ], [ %flags.0, %land.lhs.true ], [ %flags.0, %if.end ]
  %struct_value_size.0 = phi i64 [ %phitmp, %if.end25 ], [ 0, %land.lhs.true ], [ 0, %if.end ]
  %mem_value.1 = phi %struct.rtx_def* [ %mem_value.0, %if.end25 ], [ null, %land.lhs.true ], [ null, %if.end ]
  %add = add nsw i32 %nargs, 1
  %conv27 = sext i32 %add to i64
  %mul = mul i64 %conv27, 72
  %9 = alloca i8, i64 %mul, align 8
  %10 = bitcast i8* %9 to %struct.arg*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 %mul, i32 8, i1 false)
  call void @init_cumulative_args(%struct.ix86_args* %args_so_far, %union.tree_node* null, %struct.rtx_def* %orgfun) #4
  %constant = getelementptr inbounds %struct.args_size* %args_size, i64 0, i32 0
  %and31 = and i32 %flags.1, 4096
  %tobool32 = icmp ne i32 %and31, 0
  %11 = bitcast %struct.args_size* %args_size to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 16, i32 8, i1 false)
  br i1 %tobool32, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end26
  call void @start_sequence() #4
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %if.end26
  call void @push_temp_slots() #4
  %tobool35 = icmp ne %struct.rtx_def* %mem_value.1, null
  %12 = load %struct.rtx_def** @struct_value_rtx, align 8
  %cmp37 = icmp eq %struct.rtx_def* %12, null
  %or.cond = and i1 %tobool35, %cmp37
  br i1 %or.cond, label %if.then41, label %for.cond.preheader

if.then41:                                        ; preds = %if.end34
  %arrayidx42 = getelementptr inbounds %struct.rtx_def* %mem_value.1, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 0
  %bf.load44 = load i32* %14, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  switch i32 %bf.clear45, label %if.then92 [
    i32 61, label %if.end94
    i32 66, label %if.end94
    i32 67, label %if.end94
    i32 68, label %if.end94
    i32 54, label %if.end94
    i32 55, label %if.end94
    i32 58, label %if.end94
    i32 134, label %if.end94
    i32 56, label %if.end94
    i32 140, label %if.end94
  ]

if.then92:                                        ; preds = %if.then41
  %call93 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %13, %struct.rtx_def* null) #4
  br label %if.end94

if.end94:                                         ; preds = %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then92
  %addr.0 = phi %struct.rtx_def* [ %call93, %if.then92 ], [ %13, %if.then41 ], [ %13, %if.then41 ], [ %13, %if.then41 ], [ %13, %if.then41 ], [ %13, %if.then41 ], [ %13, %if.then41 ], [ %13, %if.then41 ], [ %13, %if.then41 ], [ %13, %if.then41 ], [ %13, %if.then41 ]
  %value97 = bitcast i8* %9 to %struct.rtx_def**
  store %struct.rtx_def* %addr.0, %struct.rtx_def** %value97, align 8, !tbaa !70
  %15 = load i32* @target_flags, align 4, !tbaa !17
  %and98 = lshr i32 %15, 25
  %16 = and i32 %and98, 1
  %17 = or i32 %16, 4
  %mode = getelementptr inbounds i8* %9, i64 8
  %18 = bitcast i8* %mode to i32*
  store i32 %17, i32* %18, align 8, !tbaa !72
  %partial = getelementptr inbounds i8* %9, i64 24
  %19 = bitcast i8* %partial to i32*
  store i32 0, i32* %19, align 8, !tbaa !73
  %call107 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %17, %union.tree_node* null, i32 1) #4
  %reg = getelementptr inbounds i8* %9, i64 16
  %20 = bitcast i8* %reg to %struct.rtx_def**
  store %struct.rtx_def* %call107, %struct.rtx_def** %20, align 8, !tbaa !74
  %21 = load i32* @target_flags, align 4, !tbaa !17
  %and110 = lshr i32 %21, 25
  %22 = and i32 %and110, 1
  %23 = or i32 %22, 4
  %cmp116 = icmp ne %struct.rtx_def* %call107, null
  %conv117 = zext i1 %cmp116 to i32
  %offset = getelementptr inbounds i8* %9, i64 32
  %24 = bitcast i8* %offset to %struct.args_size*
  %size = getelementptr inbounds i8* %9, i64 48
  %25 = bitcast i8* %size to %struct.args_size*
  call void @locate_and_pad_parm(i32 %23, %union.tree_node* null, i32 %conv117, %union.tree_node* null, %struct.args_size* %args_size, %struct.args_size* %24, %struct.args_size* %25, %struct.args_size* %alignment_pad) #4
  %26 = load %struct.rtx_def** %20, align 8, !tbaa !74
  %cmp125 = icmp eq %struct.rtx_def* %26, null
  br i1 %cmp125, label %if.then136, label %lor.lhs.false127

lor.lhs.false127:                                 ; preds = %if.end94
  %27 = load i32* %19, align 8, !tbaa !73
  %cmp131 = icmp eq i32 %27, 0
  br i1 %cmp131, label %if.end143, label %if.then136

if.then136:                                       ; preds = %lor.lhs.false127, %if.end94
  %constant140 = bitcast i8* %size to i64*
  %28 = load i64* %constant140, align 8, !tbaa !75
  %29 = load i64* %constant, align 8, !tbaa !46
  %add142 = add nsw i64 %29, %28
  store i64 %add142, i64* %constant, align 8, !tbaa !46
  br label %if.end143

if.end143:                                        ; preds = %lor.lhs.false127, %if.then136
  %30 = load i32* @target_flags, align 4, !tbaa !17
  %and144 = lshr i32 %30, 25
  %31 = and i32 %and144, 1
  %32 = or i32 %31, 4
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %32, %union.tree_node* null, i32 1) #4
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end143, %if.end34
  %count.0.ph = phi i32 [ 0, %if.end34 ], [ 1, %if.end143 ]
  %nargs.addr.0.ph = phi i32 [ %nargs, %if.end34 ], [ %add, %if.end143 ]
  %cmp1491252 = icmp slt i32 %count.0.ph, %nargs.addr.0.ph
  br i1 %cmp1491252, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag* %p, i64 0, i32 0
  %33 = getelementptr inbounds %struct.__va_list_tag* %p, i64 0, i32 3
  %overflow_arg_area_p158 = getelementptr inbounds %struct.__va_list_tag* %p, i64 0, i32 2
  %34 = zext i32 %count.0.ph to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %if.end303
  %indvars.iv1275 = phi i64 [ %34, %for.body.lr.ph ], [ %indvars.iv.next1276, %if.end303 ]
  %gp_offset = load i32* %gp_offset_p, align 4
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %for.body
  %reg_save_area = load i8** %33, align 8
  %35 = sext i32 %gp_offset to i64
  %36 = getelementptr i8* %reg_save_area, i64 %35
  %37 = add i32 %gp_offset, 8
  store i32 %37, i32* %gp_offset_p, align 4
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area = load i8** %overflow_arg_area_p158, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p158, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %gp_offset153 = phi i32 [ %gp_offset, %vaarg.in_mem ], [ %37, %vaarg.in_reg ]
  %vaarg.addr.in = phi i8* [ %overflow_arg_area, %vaarg.in_mem ], [ %36, %vaarg.in_reg ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to %struct.rtx_def**
  %38 = load %struct.rtx_def** %vaarg.addr, align 8
  %fits_in_gp154 = icmp ult i32 %gp_offset153, 41
  br i1 %fits_in_gp154, label %vaarg.in_reg155, label %vaarg.in_mem157

vaarg.in_reg155:                                  ; preds = %vaarg.end
  %reg_save_area156 = load i8** %33, align 8
  %39 = sext i32 %gp_offset153 to i64
  %40 = getelementptr i8* %reg_save_area156, i64 %39
  %41 = add i32 %gp_offset153, 8
  store i32 %41, i32* %gp_offset_p, align 4
  br label %vaarg.end161

vaarg.in_mem157:                                  ; preds = %vaarg.end
  %overflow_arg_area159 = load i8** %overflow_arg_area_p158, align 8
  %overflow_arg_area.next160 = getelementptr i8* %overflow_arg_area159, i64 8
  store i8* %overflow_arg_area.next160, i8** %overflow_arg_area_p158, align 8
  br label %vaarg.end161

vaarg.end161:                                     ; preds = %vaarg.in_mem157, %vaarg.in_reg155
  %vaarg.addr162.in = phi i8* [ %40, %vaarg.in_reg155 ], [ %overflow_arg_area159, %vaarg.in_mem157 ]
  %vaarg.addr162 = bitcast i8* %vaarg.addr162.in to i32*
  %42 = load i32* %vaarg.addr162, align 4
  %cmp163 = icmp eq i32 %42, 51
  br i1 %cmp163, label %if.then176, label %lor.lhs.false165

lor.lhs.false165:                                 ; preds = %vaarg.end161
  %43 = getelementptr inbounds %struct.rtx_def* %38, i64 0, i32 0
  %bf.load166 = load i32* %43, align 8
  %bf.lshr = lshr i32 %bf.load166, 16
  %bf.clear167 = and i32 %bf.lshr, 255
  %cmp168 = icmp eq i32 %bf.clear167, %42
  %cmp174 = icmp eq i32 %bf.clear167, 0
  %or.cond1219 = or i1 %cmp168, %cmp174
  br i1 %or.cond1219, label %if.end177, label %if.then176

if.then176:                                       ; preds = %lor.lhs.false165, %vaarg.end161
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 3641, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.emit_library_call_value_1, i64 0, i64 0)) #7
  unreachable

if.end177:                                        ; preds = %lor.lhs.false165
  %bf.clear179 = and i32 %bf.load166, 65535
  switch i32 %bf.clear179, label %if.then227 [
    i32 61, label %if.end229
    i32 66, label %if.end229
    i32 67, label %if.end229
    i32 68, label %if.end229
    i32 54, label %if.end229
    i32 55, label %if.end229
    i32 58, label %if.end229
    i32 134, label %if.end229
    i32 56, label %if.end229
    i32 140, label %if.end229
  ]

if.then227:                                       ; preds = %if.end177
  %call228 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %38, %struct.rtx_def* null) #4
  br label %if.end229

if.end229:                                        ; preds = %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.then227
  %val.0 = phi %struct.rtx_def* [ %call228, %if.then227 ], [ %38, %if.end177 ], [ %38, %if.end177 ], [ %38, %if.end177 ], [ %38, %if.end177 ], [ %38, %if.end177 ], [ %38, %if.end177 ], [ %38, %if.end177 ], [ %38, %if.end177 ], [ %38, %if.end177 ], [ %38, %if.end177 ]
  %value232 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1275, i32 0
  store %struct.rtx_def* %val.0, %struct.rtx_def** %value232, align 8, !tbaa !70
  %mode235 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1275, i32 1
  store i32 %42, i32* %mode235, align 8, !tbaa !72
  %call236 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %42, %union.tree_node* null, i32 1) #4
  %reg239 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1275, i32 2
  store %struct.rtx_def* %call236, %struct.rtx_def** %reg239, align 8, !tbaa !74
  %partial242 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1275, i32 3
  store i32 0, i32* %partial242, align 8, !tbaa !73
  %cmp246 = icmp ne %struct.rtx_def* %call236, null
  %conv247 = zext i1 %cmp246 to i32
  %offset250 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1275, i32 4
  %size253 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1275, i32 5
  call void @locate_and_pad_parm(i32 %42, %union.tree_node* null, i32 %conv247, %union.tree_node* null, %struct.args_size* %args_size, %struct.args_size* %offset250, %struct.args_size* %size253, %struct.args_size* %alignment_pad) #4
  %var257 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1275, i32 5, i32 1
  %44 = load %union.tree_node** %var257, align 8, !tbaa !76
  %tobool258 = icmp eq %union.tree_node* %44, null
  br i1 %tobool258, label %land.lhs.true263, label %if.then259

if.then259:                                       ; preds = %if.end229
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 3724, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.emit_library_call_value_1, i64 0, i64 0)) #7
  unreachable

land.lhs.true263:                                 ; preds = %if.end229
  %45 = load i32* %partial242, align 8, !tbaa !73
  %tobool267 = icmp eq i32 %45, 0
  br i1 %tobool267, label %if.end281, label %if.then268

if.then268:                                       ; preds = %land.lhs.true263
  %46 = load i32* @target_flags, align 4, !tbaa !17
  %and272 = lshr i32 %46, 23
  %47 = and i32 %and272, 4
  %48 = add i32 %47, 4
  %mul275 = mul nsw i32 %48, %45
  %conv276 = sext i32 %mul275 to i64
  %constant280 = getelementptr inbounds %struct.args_size* %size253, i64 0, i32 0
  %49 = load i64* %constant280, align 8, !tbaa !75
  %sub = sub nsw i64 %49, %conv276
  store i64 %sub, i64* %constant280, align 8, !tbaa !75
  br label %if.end281

if.end281:                                        ; preds = %land.lhs.true263, %if.then268
  %50 = load %struct.rtx_def** %reg239, align 8, !tbaa !74
  %cmp285 = icmp eq %struct.rtx_def* %50, null
  %tobool267.not = xor i1 %tobool267, true
  %brmerge = or i1 %cmp285, %tobool267.not
  br i1 %brmerge, label %if.then296, label %if.end303

if.then296:                                       ; preds = %if.end281
  %constant300 = getelementptr inbounds %struct.args_size* %size253, i64 0, i32 0
  %51 = load i64* %constant300, align 8, !tbaa !75
  %52 = load i64* %constant, align 8, !tbaa !46
  %add302 = add nsw i64 %52, %51
  store i64 %add302, i64* %constant, align 8, !tbaa !46
  br label %if.end303

if.end303:                                        ; preds = %if.end281, %if.then296
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %42, %union.tree_node* null, i32 1) #4
  %indvars.iv.next1276 = add nsw i64 %indvars.iv1275, 1
  %53 = trunc i64 %indvars.iv.next1276 to i32
  %cmp149 = icmp slt i32 %53, %nargs.addr.0.ph
  br i1 %cmp149, label %for.body, label %for.end

for.end:                                          ; preds = %if.end303, %for.cond.preheader
  call void @assemble_external_libcall(%struct.rtx_def* %orgfun) #4
  %original_args_size.sroa.0.0.copyload = load i64* %constant, align 8
  %54 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr306 = getelementptr inbounds %struct.function* %54, i64 0, i32 2
  %55 = load %struct.expr_status** %expr306, align 8, !tbaa !18
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status* %55, i64 0, i32 2
  %56 = load i32* %x_stack_pointer_delta, align 4, !tbaa !51
  %conv307 = sext i32 %56 to i64
  %57 = load i32* @ix86_preferred_stack_boundary, align 4, !tbaa !17
  %div = sdiv i32 %57, 8
  %conv309 = sext i32 %div to i64
  %add308 = add i64 %original_args_size.sroa.0.0.copyload, -1
  %add310 = add i64 %add308, %conv307
  %sub311 = add i64 %add310, %conv309
  %div314 = srem i64 %sub311, %conv309
  %mul317 = sub i64 %sub311, %div314
  %sub321 = sub i64 %mul317, %conv307
  %cmp325 = icmp sgt i64 %sub321, 0
  %sub321. = select i1 %cmp325, i64 %sub321, i64 0
  store i64 %sub321., i64* %constant, align 8, !tbaa !46
  %outgoing_args_size = getelementptr inbounds %struct.function* %54, i64 0, i32 11
  %58 = load i32* %outgoing_args_size, align 4, !tbaa !24
  %conv335 = sext i32 %58 to i64
  %cmp336 = icmp sgt i64 %sub321., %conv335
  br i1 %cmp336, label %if.then338, label %if.end342

if.then338:                                       ; preds = %for.end
  %conv340 = trunc i64 %sub321. to i32
  store i32 %conv340, i32* %outgoing_args_size, align 4, !tbaa !24
  br label %if.end342

if.end342:                                        ; preds = %if.then338, %for.end
  %59 = load i32* @target_flags, align 4, !tbaa !17
  %and343 = and i32 %59, 4096
  %tobool344 = icmp eq i32 %and343, 0
  br i1 %tobool344, label %if.else373, label %if.then345

if.then345:                                       ; preds = %if.end342
  %conv347 = trunc i64 %sub321. to i32
  %cmp349 = icmp sgt i32 %3, %conv347
  %cond354 = select i1 %cmp349, i32 %3, i32 %conv347
  store i32 %cond354, i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  %conv355 = sext i32 %cond354 to i64
  %60 = alloca i8, i64 %conv355, align 1
  store i8* %60, i8** @stack_usage_map, align 8, !tbaa !1
  %tobool356 = icmp eq i32 %3, 0
  br i1 %tobool356, label %if.end359, label %if.then357

if.then357:                                       ; preds = %if.then345
  %conv358 = sext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %4, i64 %conv358, i32 1, i1 false)
  br label %if.end359

if.end359:                                        ; preds = %if.then345, %if.then357
  %cmp360 = icmp eq i32 %cond354, %3
  br i1 %cmp360, label %if.end367, label %if.then362

if.then362:                                       ; preds = %if.end359
  %idxprom363 = sext i32 %3 to i64
  %arrayidx364 = getelementptr inbounds i8* %60, i64 %idxprom363
  %sub365 = sub nsw i32 %cond354, %3
  %conv366 = sext i32 %sub365 to i64
  call void @llvm.memset.p0i8.i64(i8* %arrayidx364, i8 0, i64 %conv366, i32 1, i1 false)
  br label %if.end367

if.end367:                                        ; preds = %if.end359, %if.then362
  %61 = load i32* @virtuals_instantiated, align 4, !tbaa !17
  %tobool368 = icmp eq i32 %61, 0
  br i1 %tobool368, label %if.else371, label %if.then369

if.then369:                                       ; preds = %if.end367
  %62 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !1
  %call370 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %62, i64 0) #4
  br label %if.end384

if.else371:                                       ; preds = %if.end367
  %63 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !1
  br label %if.end384

if.else373:                                       ; preds = %if.end342
  %64 = and i32 %59, 6144
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %land.lhs.true387, label %if.then379

if.then379:                                       ; preds = %if.else373
  %call381 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub321.) #4
  %call382 = call %struct.rtx_def* @push_block(%struct.rtx_def* %call381, i32 0, i32 0) #4
  br label %if.end384

if.end384:                                        ; preds = %if.then379, %if.then369, %if.else371
  %argblock.0 = phi %struct.rtx_def* [ %call370, %if.then369 ], [ %63, %if.else371 ], [ %call382, %if.then379 ]
  %cmp385 = icmp eq %struct.rtx_def* %argblock.0, null
  br i1 %cmp385, label %if.end384.land.lhs.true387_crit_edge, label %if.end398

if.end384.land.lhs.true387_crit_edge:             ; preds = %if.end384
  %.pre = load i32* @target_flags, align 4, !tbaa !17
  br label %land.lhs.true387

land.lhs.true387:                                 ; preds = %if.end384.land.lhs.true387_crit_edge, %if.else373
  %66 = phi i32 [ %.pre, %if.end384.land.lhs.true387_crit_edge ], [ %59, %if.else373 ]
  %67 = and i32 %66, 6144
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %if.then393, label %if.end398

if.then393:                                       ; preds = %land.lhs.true387
  %69 = load i64* %constant, align 8, !tbaa !46
  %sub396 = sub nsw i64 %69, %original_args_size.sroa.0.0.copyload
  %call397 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub396) #4
  call void @anti_adjust_stack(%struct.rtx_def* %call397) #4
  br label %if.end398

if.end398:                                        ; preds = %land.lhs.true387, %if.then393, %if.end384
  %cmp3851228 = phi i1 [ true, %land.lhs.true387 ], [ true, %if.then393 ], [ false, %if.end384 ]
  %argblock.01226 = phi %struct.rtx_def* [ null, %land.lhs.true387 ], [ null, %if.then393 ], [ %argblock.0, %if.end384 ]
  %70 = load i32* @target_flags, align 4, !tbaa !17
  %71 = and i32 %70, 6144
  %72 = icmp eq i32 %71, 0
  %sub405 = add nsw i32 %nargs.addr.0.ph, -1
  %inc.0 = select i1 %72, i32 -1, i32 1
  %cmp4871249 = icmp sgt i32 %nargs.addr.0.ph, 0
  br i1 %cmp4871249, label %for.body489.lr.ph, label %for.end621

for.body489.lr.ph:                                ; preds = %if.end398
  %var577 = getelementptr inbounds %struct.args_size* %alignment_pad, i64 0, i32 1
  %constant581 = getelementptr inbounds %struct.args_size* %alignment_pad, i64 0, i32 0
  %73 = sext i32 %sub405 to i64
  %74 = select i1 %72, i64 %73, i64 0
  %75 = sext i32 %inc.0 to i64
  br label %for.body489

for.body489:                                      ; preds = %for.inc618, %for.body489.lr.ph
  %indvars.iv1272 = phi i64 [ %74, %for.body489.lr.ph ], [ %indvars.iv.next1273, %for.inc618 ]
  %count.21250 = phi i32 [ 0, %for.body489.lr.ph ], [ %inc619, %for.inc618 ]
  %mode493 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1272, i32 1
  %76 = load i32* %mode493, align 8, !tbaa !72
  %value497 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1272, i32 0
  %77 = load %struct.rtx_def** %value497, align 8, !tbaa !70
  %reg501 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1272, i32 2
  %78 = load %struct.rtx_def** %reg501, align 8, !tbaa !74
  %partial505 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1272, i32 3
  %79 = load i32* %partial505, align 8, !tbaa !73
  %cmp506 = icmp ne %struct.rtx_def* %78, null
  %cmp509 = icmp eq i32 %79, 0
  %or.cond935 = and i1 %cmp506, %cmp509
  br i1 %or.cond935, label %for.inc618, label %if.then511

if.then511:                                       ; preds = %for.body489
  %80 = load i32* @target_flags, align 4, !tbaa !17
  %and512 = and i32 %80, 4096
  %tobool513 = icmp eq i32 %and512, 0
  %constant575.pre = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1272, i32 4, i32 0
  br i1 %tobool513, label %if.end571, label %if.then514

if.then514:                                       ; preds = %if.then511
  %81 = load i64* %constant575.pre, align 8, !tbaa !77
  %conv519 = trunc i64 %81 to i32
  %constant524 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1272, i32 5, i32 0
  %82 = load i64* %constant524, align 8, !tbaa !75
  %add525 = add nsw i64 %82, %81
  %conv526 = trunc i64 %add525 to i32
  %cmp5281243 = icmp slt i32 %conv519, %conv526
  br i1 %cmp5281243, label %for.body530.lr.ph, label %for.end542

for.body530.lr.ph:                                ; preds = %if.then514
  %83 = load i8** @stack_usage_map, align 8, !tbaa !1
  %sext = shl i64 %81, 32
  %84 = ashr exact i64 %sext, 32
  br label %for.body530

for.cond527:                                      ; preds = %for.body530
  %85 = trunc i64 %indvars.iv.next1269 to i32
  %cmp528 = icmp slt i32 %85, %conv526
  br i1 %cmp528, label %for.body530, label %for.end542

for.body530:                                      ; preds = %for.body530.lr.ph, %for.cond527
  %indvars.iv1268 = phi i64 [ %84, %for.body530.lr.ph ], [ %indvars.iv.next1269, %for.cond527 ]
  %arrayidx532 = getelementptr inbounds i8* %83, i64 %indvars.iv1268
  %86 = load i8* %arrayidx532, align 1, !tbaa !15
  %tobool534 = icmp ne i8 %86, 0
  %87 = trunc i64 %indvars.iv1268 to i32
  %cmp536 = icmp sgt i32 %87, 0
  %or.cond1222 = and i1 %tobool534, %cmp536
  %indvars.iv.next1269 = add nsw i64 %indvars.iv1268, 1
  br i1 %or.cond1222, label %for.end542, label %for.cond527

for.end542:                                       ; preds = %for.cond527, %for.body530, %if.then514
  %i.0.lcssa = phi i32 [ %conv519, %if.then514 ], [ %85, %for.cond527 ], [ %87, %for.body530 ]
  %cmp543 = icmp eq i32 %i.0.lcssa, %conv526
  br i1 %cmp543, label %if.end571, label %if.then545

if.then545:                                       ; preds = %for.end542
  %mul551 = shl nsw i64 %82, 3
  %conv552 = trunc i64 %mul551 to i32
  %call553 = call i32 @mode_for_size(i32 %conv552, i32 1, i32 1) #4
  %88 = load i64* %constant575.pre, align 8, !tbaa !77
  %call559 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %argblock.01226, i64 %88) #4
  %call560 = call %struct.rtx_def* @memory_address(i32 %call553, %struct.rtx_def* %call559) #4
  %call561 = call %struct.rtx_def* @gen_rtx_MEM(i32 %call553, %struct.rtx_def* %call560) #4
  %call562 = call %struct.rtx_def* @gen_reg_rtx(i32 %call553) #4
  %save_area565 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1272, i32 6
  store %struct.rtx_def* %call562, %struct.rtx_def** %save_area565, align 8, !tbaa !78
  %call569 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call562, %struct.rtx_def* %call561) #4
  br label %if.end571

if.end571:                                        ; preds = %if.then511, %for.end542, %if.then545
  %lower_bound.0 = phi i32 [ %conv519, %for.end542 ], [ %conv519, %if.then545 ], [ 0, %if.then511 ]
  %upper_bound.0 = phi i32 [ %conv526, %for.end542 ], [ %conv526, %if.then545 ], [ 0, %if.then511 ]
  %89 = load i64* %constant575.pre, align 8, !tbaa !77
  %call576 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %89) #4
  %90 = load %union.tree_node** %var577, align 8, !tbaa !48
  %cmp578 = icmp eq %union.tree_node* %90, null
  br i1 %cmp578, label %cond.true580, label %cond.false590

cond.true580:                                     ; preds = %if.end571
  %91 = load i64* %constant581, align 8, !tbaa !46
  %call582 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %91) #4
  br label %cond.end599

cond.false590:                                    ; preds = %if.end571
  %92 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call592 = call %union.tree_node* @convert(%union.tree_node* %92, %union.tree_node* %90) #4
  %93 = load i64* %constant581, align 8, !tbaa !46
  %call594 = call %union.tree_node* @size_int_wide(i64 %93, i32 1) #4
  %call595 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call592, %union.tree_node* %call594) #4
  %call598 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call595, %struct.rtx_def* null, i32 0, i32 0) #4
  br label %cond.end599

cond.end599:                                      ; preds = %cond.false590, %cond.true580
  %cond600 = phi %struct.rtx_def* [ %call582, %cond.true580 ], [ %call598, %cond.false590 ]
  call void @emit_push_insn(%struct.rtx_def* %77, i32 %76, %union.tree_node* null, %struct.rtx_def* null, i32 0, i32 %79, %struct.rtx_def* %78, i32 0, %struct.rtx_def* %argblock.01226, %struct.rtx_def* %call576, i32 0, %struct.rtx_def* %cond600) #4
  %94 = load i32* @target_flags, align 4, !tbaa !17
  %and601 = and i32 %94, 4096
  %tobool602 = icmp ne i32 %and601, 0
  %cmp6051247 = icmp slt i32 %lower_bound.0, %upper_bound.0
  %or.cond1279 = and i1 %tobool602, %cmp6051247
  br i1 %or.cond1279, label %for.body607.lr.ph, label %if.end613

for.body607.lr.ph:                                ; preds = %cond.end599
  %95 = sext i32 %lower_bound.0 to i64
  br label %for.body607

for.body607:                                      ; preds = %for.body607.lr.ph, %for.body607
  %indvars.iv1270 = phi i64 [ %95, %for.body607.lr.ph ], [ %indvars.iv.next1271, %for.body607 ]
  %96 = load i8** @stack_usage_map, align 8, !tbaa !1
  %arrayidx609 = getelementptr inbounds i8* %96, i64 %indvars.iv1270
  store i8 1, i8* %arrayidx609, align 1, !tbaa !15
  %indvars.iv.next1271 = add nsw i64 %indvars.iv1270, 1
  %97 = trunc i64 %indvars.iv.next1271 to i32
  %cmp605 = icmp slt i32 %97, %upper_bound.0
  br i1 %cmp605, label %for.body607, label %if.end613

if.end613:                                        ; preds = %for.body607, %cond.end599
  %98 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr614 = getelementptr inbounds %struct.function* %98, i64 0, i32 2
  %99 = load %struct.expr_status** %expr614, align 8, !tbaa !18
  %x_inhibit_defer_pop615 = getelementptr inbounds %struct.expr_status* %99, i64 0, i32 1
  %100 = load i32* %x_inhibit_defer_pop615, align 4, !tbaa !21
  %add616 = add nsw i32 %100, 1
  store i32 %add616, i32* %x_inhibit_defer_pop615, align 4, !tbaa !21
  br label %for.inc618

for.inc618:                                       ; preds = %if.end613, %for.body489
  %inc619 = add nsw i32 %count.21250, 1
  %indvars.iv.next1273 = add nsw i64 %indvars.iv1272, %75
  %exitcond1274 = icmp eq i32 %inc619, %nargs.addr.0.ph
  br i1 %exitcond1274, label %for.end621, label %for.body489

for.end621:                                       ; preds = %for.inc618, %if.end398
  br i1 %cmp3851228, label %land.lhs.true624, label %if.end635

land.lhs.true624:                                 ; preds = %for.end621
  %101 = load i32* @target_flags, align 4, !tbaa !17
  %102 = and i32 %101, 6144
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %if.end635, label %if.then630

if.then630:                                       ; preds = %land.lhs.true624
  %104 = load i64* %constant, align 8, !tbaa !46
  %sub633 = sub nsw i64 %104, %original_args_size.sroa.0.0.copyload
  %call634 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub633) #4
  call void @anti_adjust_stack(%struct.rtx_def* %call634) #4
  br label %if.end635

if.end635:                                        ; preds = %land.lhs.true624, %if.then630, %for.end621
  %105 = load i32* @target_flags, align 4, !tbaa !17
  %106 = and i32 %105, 6144
  %107 = icmp eq i32 %106, 0
  %call.i = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %orgfun, i32 0) #4
  %108 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 0
  %bf.load.i = load i32* %108, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp2.i = icmp eq i32 %bf.clear.i, 68
  br i1 %cmp2.i, label %prepare_call_address.exit, label %if.then3.i

if.then3.i:                                       ; preds = %if.end635
  %call4.i = call %struct.rtx_def* @memory_address(i32 2, %struct.rtx_def* %call.i) #4
  br label %prepare_call_address.exit

prepare_call_address.exit:                        ; preds = %if.end635, %if.then3.i
  %funexp.addr.0.i = phi %struct.rtx_def* [ %call4.i, %if.then3.i ], [ %call.i, %if.end635 ]
  br i1 %cmp4871249, label %for.body649.lr.ph, label %for.end717

for.body649.lr.ph:                                ; preds = %prepare_call_address.exit
  %109 = sext i32 %sub405 to i64
  %110 = select i1 %107, i64 %109, i64 0
  %111 = sext i32 %inc.0 to i64
  br label %for.body649

for.cond693.preheader:                            ; preds = %if.end685
  br i1 %cmp4871249, label %for.body696, label %for.end717

for.body649:                                      ; preds = %if.end685, %for.body649.lr.ph
  %indvars.iv1265 = phi i64 [ %110, %for.body649.lr.ph ], [ %indvars.iv.next1266, %if.end685 ]
  %count.31241 = phi i32 [ 0, %for.body649.lr.ph ], [ %inc690, %if.end685 ]
  %value653 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1265, i32 0
  %112 = load %struct.rtx_def** %value653, align 8, !tbaa !70
  %reg657 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1265, i32 2
  %113 = load %struct.rtx_def** %reg657, align 8, !tbaa !74
  %partial661 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1265, i32 3
  %114 = load i32* %partial661, align 8, !tbaa !73
  %cmp662 = icmp eq %struct.rtx_def* %113, null
  br i1 %cmp662, label %if.end685, label %land.lhs.true664

land.lhs.true664:                                 ; preds = %for.body649
  %115 = getelementptr inbounds %struct.rtx_def* %113, i64 0, i32 0
  %bf.load665 = load i32* %115, align 8
  %bf.clear666 = and i32 %bf.load665, 65535
  %cmp667 = icmp eq i32 %bf.clear666, 39
  br i1 %cmp667, label %if.then669, label %if.else676

if.then669:                                       ; preds = %land.lhs.true664
  %116 = getelementptr inbounds %struct.rtx_def* %112, i64 0, i32 0
  %bf.load670 = load i32* %116, align 8
  %bf.lshr671 = lshr i32 %bf.load670, 16
  %bf.clear672 = and i32 %bf.lshr671, 255
  %idxprom6731217 = zext i32 %bf.clear672 to i64
  %arrayidx674 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom6731217
  %117 = load i8* %arrayidx674, align 1, !tbaa !15
  %conv675 = zext i8 %117 to i32
  call void @emit_group_load(%struct.rtx_def* %113, %struct.rtx_def* %112, i32 %conv675) #4
  br label %if.end685

if.else676:                                       ; preds = %land.lhs.true664
  %cmp680 = icmp eq i32 %114, 0
  br i1 %cmp680, label %if.then682, label %if.end685

if.then682:                                       ; preds = %if.else676
  %call683 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %113, %struct.rtx_def* %112) #4
  br label %if.end685

if.end685:                                        ; preds = %for.body649, %if.else676, %if.then682, %if.then669
  %118 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr686 = getelementptr inbounds %struct.function* %118, i64 0, i32 2
  %119 = load %struct.expr_status** %expr686, align 8, !tbaa !18
  %x_inhibit_defer_pop687 = getelementptr inbounds %struct.expr_status* %119, i64 0, i32 1
  %120 = load i32* %x_inhibit_defer_pop687, align 4, !tbaa !21
  %add688 = add nsw i32 %120, 1
  store i32 %add688, i32* %x_inhibit_defer_pop687, align 4, !tbaa !21
  %inc690 = add nsw i32 %count.31241, 1
  %indvars.iv.next1266 = add nsw i64 %indvars.iv1265, %111
  %exitcond1267 = icmp eq i32 %inc690, %nargs.addr.0.ph
  br i1 %exitcond1267, label %for.cond693.preheader, label %for.body649

for.body696:                                      ; preds = %for.cond693.preheader, %for.inc715
  %indvars.iv1261 = phi i64 [ %indvars.iv.next1262, %for.inc715 ], [ 0, %for.cond693.preheader ]
  %reg700 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1261, i32 2
  %121 = load %struct.rtx_def** %reg700, align 8, !tbaa !74
  %cmp701 = icmp eq %struct.rtx_def* %121, null
  br i1 %cmp701, label %for.inc715, label %land.lhs.true703

land.lhs.true703:                                 ; preds = %for.body696
  %122 = getelementptr inbounds %struct.rtx_def* %121, i64 0, i32 0
  %bf.load704 = load i32* %122, align 8
  %bf.clear705 = and i32 %bf.load704, 65535
  %cmp706 = icmp eq i32 %bf.clear705, 39
  br i1 %cmp706, label %if.then708, label %if.then712

if.then708:                                       ; preds = %land.lhs.true703
  call void @use_group_regs(%struct.rtx_def** %call_fusage, %struct.rtx_def* %121) #4
  br label %for.inc715

if.then712:                                       ; preds = %land.lhs.true703
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %121) #4
  br label %for.inc715

for.inc715:                                       ; preds = %for.body696, %if.then708, %if.then712
  %indvars.iv.next1262 = add nuw nsw i64 %indvars.iv1261, 1
  %lftr.wideiv1263 = trunc i64 %indvars.iv.next1262 to i32
  %exitcond1264 = icmp eq i32 %lftr.wideiv1263, %nargs.addr.0.ph
  br i1 %exitcond1264, label %for.end717, label %for.body696

for.end717:                                       ; preds = %for.inc715, %prepare_call_address.exit, %for.cond693.preheader
  %123 = load %struct.rtx_def** @struct_value_rtx, align 8
  %cmp721 = icmp ne %struct.rtx_def* %123, null
  %or.cond937 = and i1 %tobool35, %cmp721
  br i1 %or.cond937, label %if.then725, label %if.end741

if.then725:                                       ; preds = %for.end717
  %124 = load i32* @target_flags, align 4, !tbaa !17
  %and726 = lshr i32 %124, 25
  %125 = and i32 %and726, 1
  %126 = or i32 %125, 4
  %arrayidx730 = getelementptr inbounds %struct.rtx_def* %mem_value.1, i64 0, i32 1, i64 0
  %rtx731 = bitcast %union.rtunion_def* %arrayidx730 to %struct.rtx_def**
  %127 = load %struct.rtx_def** %rtx731, align 8, !tbaa !1
  %call732 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %127, %struct.rtx_def* null) #4
  %call733 = call %struct.rtx_def* @force_reg(i32 %126, %struct.rtx_def* %call732) #4
  %call734 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %123, %struct.rtx_def* %call733) #4
  %128 = load %struct.rtx_def** @struct_value_rtx, align 8, !tbaa !1
  %129 = getelementptr inbounds %struct.rtx_def* %128, i64 0, i32 0
  %bf.load735 = load i32* %129, align 8
  %bf.clear736 = and i32 %bf.load735, 65535
  %cmp737 = icmp eq i32 %bf.clear736, 61
  br i1 %cmp737, label %if.then739, label %if.end741

if.then739:                                       ; preds = %if.then725
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %128) #4
  br label %if.end741

if.end741:                                        ; preds = %for.end717, %if.then725, %if.then739
  %130 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr742 = getelementptr inbounds %struct.function* %130, i64 0, i32 2
  %131 = load %struct.expr_status** %expr742, align 8, !tbaa !18
  %x_inhibit_defer_pop743 = getelementptr inbounds %struct.expr_status* %131, i64 0, i32 1
  %132 = load i32* %x_inhibit_defer_pop743, align 4, !tbaa !21
  %add744 = add nsw i32 %132, 1
  store i32 %add744, i32* %x_inhibit_defer_pop743, align 4, !tbaa !21
  %cmp745 = icmp eq %struct.rtx_def* %mem_value.1, null
  %or.cond939 = and i1 %cmp745, %cmp14
  br i1 %or.cond939, label %cond.true750, label %cond.end753

cond.true750:                                     ; preds = %if.end741
  %call751 = call %struct.rtx_def* @hard_libcall_value(i32 %outmode) #4
  %.pre1277 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr755.phi.trans.insert = getelementptr inbounds %struct.function* %.pre1277, i64 0, i32 2
  %.pre1278 = load %struct.expr_status** %expr755.phi.trans.insert, align 8, !tbaa !18
  br label %cond.end753

cond.end753:                                      ; preds = %if.end741, %cond.true750
  %133 = phi %struct.expr_status* [ %.pre1278, %cond.true750 ], [ %131, %if.end741 ]
  %cond754 = phi %struct.rtx_def* [ %call751, %cond.true750 ], [ null, %if.end741 ]
  %x_stack_pointer_delta756 = getelementptr inbounds %struct.expr_status* %133, i64 0, i32 2
  %134 = load i32* %x_stack_pointer_delta756, align 4, !tbaa !51
  %135 = load i32* @ix86_preferred_stack_boundary, align 4, !tbaa !17
  %div757 = sdiv i32 %135, 8
  %sub758 = add nsw i32 %div757, -1
  %and759 = and i32 %sub758, %134
  %tobool760 = icmp eq i32 %and759, 0
  br i1 %tobool760, label %if.end762, label %if.then761

if.then761:                                       ; preds = %cond.end753
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 4032, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.emit_library_call_value_1, i64 0, i64 0)) #7
  unreachable

if.end762:                                        ; preds = %cond.end753
  %call763 = call %struct.rtx_def* @get_last_insn() #4
  %arrayidx765 = getelementptr inbounds %struct.rtx_def* %orgfun, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx765 to i8**
  %136 = load i8** %rtstr, align 8, !tbaa !1
  %call766 = call %union.tree_node* @get_identifier(i8* %136) #4
  %cmp767 = icmp eq i32 %outmode, 0
  br i1 %cmp767, label %cond.true769, label %cond.false770

cond.true769:                                     ; preds = %if.end762
  %137 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !1
  br label %cond.end772

cond.false770:                                    ; preds = %if.end762
  %call771 = call %union.tree_node* @type_for_mode(i32 %outmode, i32 0) #4
  br label %cond.end772

cond.end772:                                      ; preds = %cond.false770, %cond.true769
  %cond773 = phi %union.tree_node* [ %137, %cond.true769 ], [ %call771, %cond.false770 ]
  %call774 = call %union.tree_node* @build_function_type(%union.tree_node* %cond773, %union.tree_node* null) #4
  %138 = load i64* %constant, align 8, !tbaa !46
  %139 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !1
  %call778 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 0, %union.tree_node* %139, i32 1) #4
  %add779 = add nsw i32 %2, 1
  %140 = load %struct.rtx_def** %call_fusage, align 8, !tbaa !1
  call fastcc void @emit_call_1(%struct.rtx_def* %funexp.addr.0.i, %union.tree_node* %call766, %union.tree_node* %call774, i64 %original_args_size.sroa.0.0.copyload, i64 %138, i64 %struct_value_size.0, %struct.rtx_def* %call778, %struct.rtx_def* %cond754, i32 %add779, %struct.rtx_def* %140, i32 %flags.1)
  %and780 = and i32 %flags.1, 66
  %tobool781 = icmp eq i32 %and780, 0
  br i1 %tobool781, label %if.end796, label %if.then782

if.then782:                                       ; preds = %cond.end772
  %call783 = call %struct.rtx_def* @get_last_insn() #4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then782
  %last.0 = phi %struct.rtx_def* [ %call783, %if.then782 ], [ %142, %while.body ]
  %141 = getelementptr inbounds %struct.rtx_def* %last.0, i64 0, i32 0
  %bf.load784 = load i32* %141, align 8
  %bf.clear785 = and i32 %bf.load784, 65535
  %cmp786 = icmp eq i32 %bf.clear785, 34
  br i1 %cmp786, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond
  %arrayidx789 = getelementptr inbounds %struct.rtx_def* %last.0, i64 0, i32 1, i64 1
  %rtx790 = bitcast %union.rtunion_def* %arrayidx789 to %struct.rtx_def**
  %142 = load %struct.rtx_def** %rtx790, align 8, !tbaa !1
  %cmp791 = icmp eq %struct.rtx_def* %142, %call763
  br i1 %cmp791, label %if.then793, label %while.cond

if.then793:                                       ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i32 4069, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.emit_library_call_value_1, i64 0, i64 0)) #7
  unreachable

while.end:                                        ; preds = %while.cond
  %call795 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %last.0) #4
  br label %if.end796

if.end796:                                        ; preds = %cond.end772, %while.end
  %143 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr797 = getelementptr inbounds %struct.function* %143, i64 0, i32 2
  %144 = load %struct.expr_status** %expr797, align 8, !tbaa !18
  %x_inhibit_defer_pop798 = getelementptr inbounds %struct.expr_status* %144, i64 0, i32 1
  %145 = load i32* %x_inhibit_defer_pop798, align 4, !tbaa !21
  %sub799 = add nsw i32 %145, -1
  store i32 %sub799, i32* %x_inhibit_defer_pop798, align 4, !tbaa !21
  br i1 %tobool32, label %if.then802, label %if.end841

if.then802:                                       ; preds = %if.end796
  %cmp803 = icmp eq %struct.rtx_def* %cond754, null
  br i1 %cmp803, label %if.then810, label %lor.lhs.false805

lor.lhs.false805:                                 ; preds = %if.then802
  %146 = getelementptr inbounds %struct.rtx_def* %cond754, i64 0, i32 0
  %bf.load806 = load i32* %146, align 8
  %bf.clear807 = and i32 %bf.load806, 65535
  %cmp808 = icmp eq i32 %bf.clear807, 39
  br i1 %cmp808, label %if.then810, label %if.else813

if.then810:                                       ; preds = %lor.lhs.false805, %if.then802
  %call811 = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %call812 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %call811) #4
  br label %if.end841

if.else813:                                       ; preds = %lor.lhs.false805
  %bf.lshr815 = lshr i32 %bf.load806, 16
  %bf.clear816 = and i32 %bf.lshr815, 255
  %call817 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear816) #4
  br i1 %cmp4871249, label %for.body822, label %for.end829

for.body822:                                      ; preds = %if.else813, %for.body822
  %indvars.iv1257 = phi i64 [ %indvars.iv.next1258, %for.body822 ], [ 0, %if.else813 ]
  %note.01236 = phi %struct.rtx_def* [ %call826, %for.body822 ], [ null, %if.else813 ]
  %value825 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv1257, i32 0
  %147 = load %struct.rtx_def** %value825, align 8, !tbaa !70
  %call826 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %147, %struct.rtx_def* %note.01236) #4
  %indvars.iv.next1258 = add nuw nsw i64 %indvars.iv1257, 1
  %lftr.wideiv1259 = trunc i64 %indvars.iv.next1258 to i32
  %exitcond1260 = icmp eq i32 %lftr.wideiv1259, %nargs.addr.0.ph
  br i1 %exitcond1260, label %for.end829, label %for.body822

for.end829:                                       ; preds = %for.body822, %if.else813
  %note.0.lcssa = phi %struct.rtx_def* [ null, %if.else813 ], [ %call826, %for.body822 ]
  %call830 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %funexp.addr.0.i, %struct.rtx_def* %note.0.lcssa) #4
  %call831 = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %and832 = and i32 %flags.1, 512
  %tobool833 = icmp eq i32 %and832, 0
  br i1 %tobool833, label %if.end839, label %if.then834

if.then834:                                       ; preds = %for.end829
  %call835 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0) #4
  %call836 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call835) #4
  %call837 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call836) #4
  %call838 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call837, %struct.rtx_def* %call830) #4
  br label %if.end839

if.end839:                                        ; preds = %for.end829, %if.then834
  %note.1 = phi %struct.rtx_def* [ %call838, %if.then834 ], [ %call830, %for.end829 ]
  call void @emit_libcall_block(%struct.rtx_def* %call831, %struct.rtx_def* %call817, %struct.rtx_def* %cond754, %struct.rtx_def* %note.1) #4
  br label %if.end841

if.end841:                                        ; preds = %if.then810, %if.end839, %if.end796
  call void @pop_temp_slots() #4
  %tobool845 = icmp ne i32 %retval1, 0
  %or.cond940 = and i1 %cmp14, %tobool845
  br i1 %or.cond940, label %if.then846, label %if.end868

if.then846:                                       ; preds = %if.end841
  %cmp849 = icmp eq %struct.rtx_def* %value, null
  br i1 %tobool35, label %if.then848, label %if.else858

if.then848:                                       ; preds = %if.then846
  %mem_value.1.value = select i1 %cmp849, %struct.rtx_def* %mem_value.1, %struct.rtx_def* %value
  %cmp853 = icmp eq %struct.rtx_def* %mem_value.1.value, %mem_value.1
  br i1 %cmp853, label %if.end868, label %if.then855

if.then855:                                       ; preds = %if.then848
  %call856 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %mem_value.1.value, %struct.rtx_def* %mem_value.1) #4
  br label %if.end868

if.else858:                                       ; preds = %if.then846
  %call865 = call %struct.rtx_def* @hard_libcall_value(i32 %outmode) #4
  br i1 %cmp849, label %if.end868, label %if.then861

if.then861:                                       ; preds = %if.else858
  %call863 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %value, %struct.rtx_def* %call865) #4
  br label %if.end868

if.end868:                                        ; preds = %if.else858, %if.then848, %if.then855, %if.then861, %if.end841
  %value.addr.1 = phi %struct.rtx_def* [ %mem_value.1.value, %if.then855 ], [ %mem_value.1, %if.then848 ], [ %value, %if.then861 ], [ %value, %if.end841 ], [ %call865, %if.else858 ]
  %148 = load i32* @target_flags, align 4, !tbaa !17
  %and869 = and i32 %148, 4096
  %tobool870 = icmp eq i32 %and869, 0
  br i1 %tobool870, label %if.end931, label %for.cond899.preheader

for.cond899.preheader:                            ; preds = %if.end868
  br i1 %cmp4871249, label %for.body902, label %for.end930

for.body902:                                      ; preds = %for.cond899.preheader, %for.inc928
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc928 ], [ 0, %for.cond899.preheader ]
  %save_area905 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv, i32 6
  %149 = load %struct.rtx_def** %save_area905, align 8, !tbaa !78
  %tobool906 = icmp eq %struct.rtx_def* %149, null
  br i1 %tobool906, label %for.inc928, label %if.then907

if.then907:                                       ; preds = %for.body902
  %150 = getelementptr inbounds %struct.rtx_def* %149, i64 0, i32 0
  %bf.load912 = load i32* %150, align 8
  %bf.lshr913 = lshr i32 %bf.load912, 16
  %bf.clear914 = and i32 %bf.lshr913, 255
  %constant919 = getelementptr inbounds %struct.arg* %10, i64 %indvars.iv, i32 4, i32 0
  %151 = load i64* %constant919, align 8, !tbaa !77
  %call920 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %argblock.01226, i64 %151) #4
  %call921 = call %struct.rtx_def* @memory_address(i32 %bf.clear914, %struct.rtx_def* %call920) #4
  %call922 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear914, %struct.rtx_def* %call921) #4
  %152 = load %struct.rtx_def** %save_area905, align 8, !tbaa !78
  %call926 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call922, %struct.rtx_def* %152) #4
  br label %for.inc928

for.inc928:                                       ; preds = %for.body902, %if.then907
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nargs.addr.0.ph
  br i1 %exitcond, label %for.end930, label %for.body902

for.end930:                                       ; preds = %for.inc928, %for.cond899.preheader
  store i32 %3, i32* @highest_outgoing_arg_in_use, align 4, !tbaa !17
  store i8* %4, i8** @stack_usage_map, align 8, !tbaa !1
  br label %if.end931

if.end931:                                        ; preds = %if.end868, %for.end930
  ret %struct.rtx_def* %value.addr.1
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_library_call_value(%struct.rtx_def* %orgfun, %struct.rtx_def* %value, i32 %fn_type, i32 %outmode, i32 %nargs, ...) #0 {
entry:
  %p = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %p to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %call = call fastcc %struct.rtx_def* @emit_library_call_value_1(i32 1, %struct.rtx_def* %orgfun, %struct.rtx_def* %value, i32 %fn_type, i32 %outmode, i32 %nargs, %struct.__va_list_tag* %arraydecay)
  call void @llvm.va_end(i8* %arraydecay1)
  ret %struct.rtx_def* %call
}

declare void @push_temp_slots() #1

declare i32 @mode_for_size(i32, i32, i32) #1

declare %struct.rtx_def* @expr_size(%union.tree_node*) #1

declare %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #1

declare void @emit_push_insn(%struct.rtx_def*, i32, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*) #1

declare void @error(i8*, ...) #1

declare void @free_temp_slots() #1

declare void @pop_temp_slots() #1

declare %union.tree_node* @type_for_mode(i32, i32) #1

declare void @locate_and_pad_parm(i32, %union.tree_node*, i32, %union.tree_node*, %struct.args_size*, %struct.args_size*, %struct.args_size*, %struct.args_size*) #1

declare void @function_arg_advance(%struct.ix86_args*, i32, %union.tree_node*, i32) #1

declare void @assemble_external_libcall(%struct.rtx_def*) #1

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #1

declare void @emit_group_load(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare void @use_group_regs(%struct.rtx_def**, %struct.rtx_def*) #1

declare %struct.rtx_def* @hard_libcall_value(i32) #1

declare %union.tree_node* @get_identifier(i8*) #1

declare %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #1

declare %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_call_pop(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_call_value(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_call(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare void @adjust_stack(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

declare void @move_block_to_reg(i32, %struct.rtx_def*, i32, i32) #1

declare void @use_regs(%struct.rtx_def**, i32, i32) #1

; Function Attrs: nounwind readonly uwtable
define internal fastcc i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* readonly %x) #2 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 66
  br i1 %cmp1, label %if.then2, label %if.end56

if.then2:                                         ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %2 = load %struct.function** @cfun, align 8, !tbaa !1
  %internal_arg_pointer = getelementptr inbounds %struct.function* %2, i64 0, i32 15
  %3 = load %struct.rtx_def** %internal_arg_pointer, align 8, !tbaa !69
  %cmp3 = icmp eq %struct.rtx_def* %1, %3
  br i1 %cmp3, label %if.end40, label %if.else

if.else:                                          ; preds = %if.then2
  %4 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load8 = load i32* %4, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 75
  br i1 %cmp10, label %land.lhs.true, label %return

land.lhs.true:                                    ; preds = %if.else
  %fld14 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1
  %rtx16 = bitcast [1 x %union.rtunion_def]* %fld14 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx16, align 8, !tbaa !1
  %cmp18 = icmp eq %struct.rtx_def* %5, %3
  br i1 %cmp18, label %land.lhs.true19, label %return

land.lhs.true19:                                  ; preds = %land.lhs.true
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx25, align 8, !tbaa !1
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load26 = load i32* %7, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 54
  br i1 %cmp28, label %if.then29, label %return

if.then29:                                        ; preds = %land.lhs.true19
  %rtwint = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0, i32 0
  %8 = load i64* %rtwint, align 8, !tbaa !44
  %conv = trunc i64 %8 to i32
  br label %if.end40

if.end40:                                         ; preds = %if.then2, %if.then29
  %i.0 = phi i32 [ %conv, %if.then29 ], [ 0, %if.then2 ]
  %bf.lshr141 = lshr i32 %bf.load, 16
  %bf.clear42142 = and i32 %bf.lshr141, 255
  %idxprom135143 = zext i32 %bf.clear42142 to i64
  %arrayidx43144 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom135143
  %9 = load i8* %arrayidx43144, align 1, !tbaa !15
  %cmp45146 = icmp eq i8 %9, 0
  br i1 %cmp45146, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end40
  %10 = load %struct.simple_bitmap_def** @stored_args_map, align 8, !tbaa !1
  %n_bits = getelementptr inbounds %struct.simple_bitmap_def* %10, i64 0, i32 0
  %11 = load i32* %n_bits, align 4, !tbaa !79
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %k.0147 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %add = add i32 %k.0147, %i.0
  %cmp47 = icmp ult i32 %add, %11
  br i1 %cmp47, label %land.lhs.true49, label %for.inc

land.lhs.true49:                                  ; preds = %for.body
  %div = lshr i32 %add, 6
  %idxprom51 = zext i32 %div to i64
  %arrayidx52 = getelementptr inbounds %struct.simple_bitmap_def* %10, i64 0, i32 3, i64 %idxprom51
  %12 = load i64* %arrayidx52, align 8, !tbaa !44
  %rem = and i32 %add, 63
  %sh_prom = zext i32 %rem to i64
  %13 = shl i64 1, %sh_prom
  %and136 = and i64 %12, %13
  %tobool = icmp eq i64 %and136, 0
  br i1 %tobool, label %for.inc, label %return

for.inc:                                          ; preds = %land.lhs.true49, %for.body
  %inc = add i32 %k.0147, 1
  %conv44 = zext i8 %9 to i32
  %cmp45 = icmp ult i32 %inc, %conv44
  br i1 %cmp45, label %for.body, label %return

if.end56:                                         ; preds = %if.end
  %idxprom57134 = zext i32 %bf.clear to i64
  %arrayidx61 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom57134
  %14 = load i8* %arrayidx61, align 1, !tbaa !15
  %cmp63153 = icmp eq i8 %14, 0
  br i1 %cmp63153, label %return, label %for.body65.lr.ph

for.body65.lr.ph:                                 ; preds = %if.end56
  %arrayidx58 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom57134
  %15 = load i8** %arrayidx58, align 8, !tbaa !1
  br label %for.body65

for.body65:                                       ; preds = %for.body65.lr.ph, %for.inc104
  %indvars.iv158 = phi i64 [ 0, %for.body65.lr.ph ], [ %indvars.iv.next159, %for.inc104 ]
  %fmt.0155 = phi i8* [ %15, %for.body65.lr.ph ], [ %incdec.ptr, %for.inc104 ]
  %16 = load i8* %fmt.0155, align 1, !tbaa !15
  switch i8 %16, label %for.inc104 [
    i8 101, label %if.then69
    i8 69, label %for.cond82.preheader
  ]

for.cond82.preheader:                             ; preds = %for.body65
  %arrayidx85 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv158
  %rtvec = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtvec_def**
  %17 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem149 = getelementptr inbounds %struct.rtvec_def* %17, i64 0, i32 0
  %18 = load i32* %num_elem149, align 4, !tbaa !81
  %cmp86150 = icmp sgt i32 %18, 0
  br i1 %cmp86150, label %for.body88, label %for.inc104

if.then69:                                        ; preds = %for.body65
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv158
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx73, align 8, !tbaa !1
  %call = tail call fastcc i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %19)
  %tobool74 = icmp eq i32 %call, 0
  br i1 %tobool74, label %for.inc104, label %return

for.cond82:                                       ; preds = %for.body88
  %20 = trunc i64 %indvars.iv.next to i32
  %cmp86 = icmp slt i32 %20, %18
  br i1 %cmp86, label %for.body88, label %for.inc104

for.body88:                                       ; preds = %for.cond82.preheader, %for.cond82
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond82 ], [ 0, %for.cond82.preheader ]
  %arrayidx94 = getelementptr inbounds %struct.rtvec_def* %17, i64 0, i32 1, i64 %indvars.iv
  %21 = load %struct.rtx_def** %arrayidx94, align 8, !tbaa !1
  %call95 = tail call fastcc i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %21)
  %tobool96 = icmp eq i32 %call95, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool96, label %for.cond82, label %return

for.inc104:                                       ; preds = %for.cond82, %for.cond82.preheader, %for.body65, %if.then69
  %indvars.iv.next159 = add nuw nsw i64 %indvars.iv158, 1
  %incdec.ptr = getelementptr inbounds i8* %fmt.0155, i64 1
  %conv62 = zext i8 %14 to i32
  %22 = trunc i64 %indvars.iv.next159 to i32
  %cmp63 = icmp slt i32 %22, %conv62
  br i1 %cmp63, label %for.body65, label %return

return:                                           ; preds = %if.then69, %for.inc104, %for.body88, %land.lhs.true49, %for.inc, %if.end56, %if.end40, %if.else, %land.lhs.true, %land.lhs.true19, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %land.lhs.true19 ], [ 0, %land.lhs.true ], [ 0, %if.else ], [ 0, %if.end40 ], [ 0, %if.end56 ], [ 1, %land.lhs.true49 ], [ 0, %for.inc ], [ 1, %for.body88 ], [ 1, %if.then69 ], [ 0, %for.inc104 ]
  ret i32 %retval.0
}

declare i32 @rtx_cost(%struct.rtx_def*, i32) #1

declare %struct.rtx_def* @copy_to_mode_reg(i32, %struct.rtx_def*) #1

declare void @assemble_external(%union.tree_node*) #1

declare void @make_decl_rtl(%union.tree_node*, i8*) #1

declare void @set_mem_alias_set(%struct.rtx_def*, i64) #1

declare %union.tree_node* @round_up(%union.tree_node*, i32) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @calls_function_1(%union.tree_node* %exp, i32 %which) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom227 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom227
  %0 = load i8* %arrayidx, align 1, !tbaa !15
  %call = tail call i32 @first_rtl_op(i32 %bf.clear) #4
  %cmp = icmp ugt i32 %bf.clear, 146
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  switch i32 %bf.clear, label %sw.epilog [
    i32 53, label %sw.bb
    i32 46, label %sw.bb64
    i32 118, label %sw.bb75
    i32 4, label %sw.bb98
    i32 2, label %for.cond128.preheader
  ]

for.cond128.preheader:                            ; preds = %if.end
  %cmp129251 = icmp eq %union.tree_node* %exp, null
  br i1 %cmp129251, label %return, label %for.body131

sw.bb:                                            ; preds = %if.end
  %cmp3 = icmp eq i32 %which, 0
  br i1 %cmp3, label %return, label %if.else

if.else:                                          ; preds = %sw.bb
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx7 = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx7, align 8, !tbaa !1
  %type = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !16
  %type10 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type10, align 8, !tbaa !16
  %code12 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load13 = load i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 23
  br i1 %cmp15, label %land.lhs.true, label %if.else28

land.lhs.true:                                    ; preds = %if.else
  %type24 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type* %type24, i64 0, i32 6
  %bf.load25 = load i32* %no_force_blk_flag, align 4
  %bf.clear26 = and i32 %bf.load25, 131072
  %tobool = icmp eq i32 %bf.clear26, 0
  br i1 %tobool, label %if.else28, label %return

if.else28:                                        ; preds = %land.lhs.true, %if.else
  %code33 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load34 = load i32* %code33, align 8
  %bf.clear35 = and i32 %bf.load34, 255
  %cmp36 = icmp eq i32 %bf.clear35, 121
  br i1 %cmp36, label %land.lhs.true38, label %sw.epilog

land.lhs.true38:                                  ; preds = %if.else28
  %operands43 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 2
  %arrayidx44 = bitcast i32* %operands43 to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx44, align 8, !tbaa !1
  %code46 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load47 = load i32* %code46, align 8
  %bf.clear48 = and i32 %bf.load47, 255
  %cmp49 = icmp eq i32 %bf.clear48, 30
  br i1 %cmp49, label %land.lhs.true51, label %sw.epilog

land.lhs.true51:                                  ; preds = %land.lhs.true38
  %call58 = tail call fastcc i32 @special_function_p(%union.tree_node* %4, i32 0)
  %and = and i32 %call58, 8
  %tobool59 = icmp eq i32 %and, 0
  br i1 %tobool59, label %sw.epilog, label %return

sw.bb64:                                          ; preds = %if.end
  %operands66 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx67 = getelementptr inbounds i32* %operands66, i64 2
  %5 = bitcast i32* %arrayidx67 to %union.tree_node**
  %tem.0238 = load %union.tree_node** %5, align 8
  %cmp68239 = icmp eq %union.tree_node* %tem.0238, null
  br i1 %cmp68239, label %return, label %for.body

for.cond:                                         ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %tem.0240, i64 0, i32 0, i32 0, i32 0
  %tem.0 = load %union.tree_node** %chain, align 8
  %cmp68 = icmp eq %union.tree_node* %tem.0, null
  br i1 %cmp68, label %return, label %for.body

for.body:                                         ; preds = %sw.bb64, %for.cond
  %tem.0240 = phi %union.tree_node* [ %tem.0, %for.cond ], [ %tem.0238, %sw.bb64 ]
  %value = getelementptr inbounds %union.tree_node* %tem.0240, i64 0, i32 0, i32 2
  %6 = bitcast i32* %value to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !26
  %call70 = tail call fastcc i32 @calls_function_1(%union.tree_node* %7, i32 %which)
  %tobool71 = icmp eq i32 %call70, 0
  br i1 %tobool71, label %for.cond, label %return

sw.bb75:                                          ; preds = %if.end
  %operands77 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx78 = getelementptr inbounds i32* %operands77, i64 4
  %8 = bitcast i32* %arrayidx78 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %8, align 8, !tbaa !1
  %cmp79 = icmp eq %struct.rtx_def* %9, null
  br i1 %cmp79, label %if.end82, label %return

if.end82:                                         ; preds = %sw.bb75
  %10 = load %union.tree_node** @calls_function_save_exprs, align 8, !tbaa !1
  %call83 = tail call %union.tree_node* @value_member(%union.tree_node* %exp, %union.tree_node* %10) #4
  %tobool84 = icmp eq %union.tree_node* %call83, null
  br i1 %tobool84, label %if.end86, label %return

if.end86:                                         ; preds = %if.end82
  %11 = load %union.tree_node** @calls_function_save_exprs, align 8, !tbaa !1
  %call87 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %exp, %union.tree_node* %11) #4
  store %union.tree_node* %call87, %union.tree_node** @calls_function_save_exprs, align 8, !tbaa !1
  %arrayidx90 = bitcast i32* %operands77 to %union.tree_node**
  %12 = load %union.tree_node** %arrayidx90, align 8, !tbaa !1
  %cmp91 = icmp eq %union.tree_node* %12, null
  br i1 %cmp91, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end86
  %call96 = tail call fastcc i32 @calls_function_1(%union.tree_node* %12, i32 %which)
  %tobool97 = icmp ne i32 %call96, 0
  br label %land.end

land.end:                                         ; preds = %if.end86, %land.rhs
  %13 = phi i1 [ false, %if.end86 ], [ %tobool97, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  br label %return

sw.bb98:                                          ; preds = %if.end
  %vars = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %14 = bitcast i32* %vars to %union.tree_node**
  %local.0248 = load %union.tree_node** %14, align 8
  %tobool100249 = icmp eq %union.tree_node* %local.0248, null
  br i1 %tobool100249, label %for.end114, label %for.body101

for.body101:                                      ; preds = %sw.bb98, %for.inc111
  %local.0250 = phi %union.tree_node* [ %local.0, %for.inc111 ], [ %local.0248, %sw.bb98 ]
  %initial = getelementptr inbounds %union.tree_node* %local.0250, i64 0, i32 0, i32 12
  %15 = load %union.tree_node** %initial, align 8, !tbaa !83
  %cmp102 = icmp eq %union.tree_node* %15, null
  br i1 %cmp102, label %for.inc111, label %land.lhs.true104

land.lhs.true104:                                 ; preds = %for.body101
  %call107 = tail call fastcc i32 @calls_function_1(%union.tree_node* %15, i32 %which)
  %tobool108 = icmp eq i32 %call107, 0
  br i1 %tobool108, label %for.inc111, label %return

for.inc111:                                       ; preds = %land.lhs.true104, %for.body101
  %chain113 = getelementptr inbounds %union.tree_node* %local.0250, i64 0, i32 0, i32 0, i32 0
  %local.0 = load %union.tree_node** %chain113, align 8
  %tobool100 = icmp eq %union.tree_node* %local.0, null
  br i1 %tobool100, label %for.end114, label %for.body101

for.end114:                                       ; preds = %for.inc111, %sw.bb98
  %16 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 4
  %subblock.0243 = load %union.tree_node** %16, align 8
  %tobool117244 = icmp eq %union.tree_node* %subblock.0243, null
  br i1 %tobool117244, label %return, label %for.body118

for.cond116:                                      ; preds = %for.body118
  %chain125 = getelementptr inbounds %union.tree_node* %subblock.0245, i64 0, i32 0, i32 0, i32 0
  %subblock.0 = load %union.tree_node** %chain125, align 8
  %tobool117 = icmp eq %union.tree_node* %subblock.0, null
  br i1 %tobool117, label %return, label %for.body118

for.body118:                                      ; preds = %for.end114, %for.cond116
  %subblock.0245 = phi %union.tree_node* [ %subblock.0, %for.cond116 ], [ %subblock.0243, %for.end114 ]
  %call119 = tail call fastcc i32 @calls_function_1(%union.tree_node* %subblock.0245, i32 %which)
  %tobool120 = icmp eq i32 %call119, 0
  br i1 %tobool120, label %for.cond116, label %return

for.body131:                                      ; preds = %for.cond128.preheader, %for.inc138
  %exp.addr.0252 = phi %union.tree_node* [ %19, %for.inc138 ], [ %exp, %for.cond128.preheader ]
  %value133 = getelementptr inbounds %union.tree_node* %exp.addr.0252, i64 0, i32 0, i32 2
  %17 = bitcast i32* %value133 to %union.tree_node**
  %18 = load %union.tree_node** %17, align 8, !tbaa !26
  %call134 = tail call fastcc i32 @calls_function_1(%union.tree_node* %18, i32 %which)
  %tobool135 = icmp eq i32 %call134, 0
  br i1 %tobool135, label %for.inc138, label %return

for.inc138:                                       ; preds = %for.body131
  %chain140 = getelementptr inbounds %union.tree_node* %exp.addr.0252, i64 0, i32 0, i32 0, i32 0
  %19 = load %union.tree_node** %chain140, align 8, !tbaa !25
  %cmp129 = icmp eq %union.tree_node* %19, null
  br i1 %cmp129, label %return, label %for.body131

sw.epilog:                                        ; preds = %land.lhs.true51, %if.end, %if.else28, %land.lhs.true38
  switch i8 %0, label %return [
    i8 101, label %for.cond160.preheader
    i8 60, label %for.cond160.preheader
    i8 50, label %for.cond160.preheader
    i8 49, label %for.cond160.preheader
    i8 114, label %for.cond160.preheader
    i8 98, label %for.cond160.preheader
  ]

for.cond160.preheader:                            ; preds = %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog
  %cmp161235 = icmp sgt i32 %call, 0
  br i1 %cmp161235, label %for.body163.lr.ph, label %return

for.body163.lr.ph:                                ; preds = %for.cond160.preheader
  %operands166 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %20 = bitcast i32* %operands166 to [1 x %union.tree_node*]*
  br label %for.body163

for.body163:                                      ; preds = %for.body163.lr.ph, %for.inc179
  %indvars.iv = phi i64 [ 0, %for.body163.lr.ph ], [ %indvars.iv.next, %for.inc179 ]
  %arrayidx167 = getelementptr inbounds [1 x %union.tree_node*]* %20, i64 0, i64 %indvars.iv
  %21 = load %union.tree_node** %arrayidx167, align 8, !tbaa !1
  %cmp168 = icmp eq %union.tree_node* %21, null
  br i1 %cmp168, label %for.inc179, label %land.lhs.true170

land.lhs.true170:                                 ; preds = %for.body163
  %call175 = tail call fastcc i32 @calls_function_1(%union.tree_node* %21, i32 %which)
  %tobool176 = icmp eq i32 %call175, 0
  br i1 %tobool176, label %for.inc179, label %return

for.inc179:                                       ; preds = %land.lhs.true170, %for.body163
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %22 = trunc i64 %indvars.iv.next to i32
  %cmp161 = icmp slt i32 %22, %call
  br i1 %cmp161, label %for.body163, label %return

return:                                           ; preds = %for.body131, %for.inc138, %land.lhs.true104, %for.body118, %for.cond116, %for.body, %for.cond, %land.lhs.true170, %for.inc179, %for.cond128.preheader, %for.end114, %sw.bb64, %for.cond160.preheader, %sw.epilog, %if.end82, %sw.bb75, %land.lhs.true51, %land.lhs.true, %sw.bb, %entry, %land.end
  %retval.0 = phi i32 [ %land.ext, %land.end ], [ 1, %entry ], [ 1, %sw.bb ], [ 1, %land.lhs.true ], [ 1, %land.lhs.true51 ], [ 0, %sw.bb75 ], [ 0, %if.end82 ], [ 0, %sw.epilog ], [ 0, %for.cond160.preheader ], [ 0, %sw.bb64 ], [ 0, %for.end114 ], [ 0, %for.cond128.preheader ], [ 1, %land.lhs.true170 ], [ 0, %for.inc179 ], [ 1, %for.body ], [ 0, %for.cond ], [ 1, %for.body118 ], [ 0, %for.cond116 ], [ 1, %land.lhs.true104 ], [ 1, %for.body131 ], [ 0, %for.inc138 ]
  ret i32 %retval.0
}

declare i32 @first_rtl_op(i32) #1

declare %union.tree_node* @value_member(%union.tree_node*, %union.tree_node*) #1

declare i32 @contains_placeholder_p(%union.tree_node*) #1

declare %union.tree_node* @build1(i32, %union.tree_node*, %union.tree_node*) #1

declare i32 @compare_tree_int(%union.tree_node*, i64) #1

declare %struct.rtx_def* @store_expr(%union.tree_node*, %struct.rtx_def*, i32) #1

declare i32 @host_integerp(%union.tree_node*, i32) #1

declare i64 @tree_low_cst(%union.tree_node*, i32) #1

declare void @timevar_push(i32) #1

declare %struct.rtx_def* @expand_inline_function(%union.tree_node*, %union.tree_node*, %struct.rtx_def*, i32, %union.tree_node*, %struct.rtx_def*) #1

declare void @timevar_pop(i32) #1

declare %struct.rtx_def* @emit_insns_before(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #6

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !2, i64 72}
!6 = metadata !{metadata !"tree_decl", metadata !7, i64 0, metadata !2, i64 24, metadata !8, i64 32, metadata !8, i64 36, metadata !2, i64 40, metadata !3, i64 48, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !3, i64 51, metadata !8, i64 51, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !3, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !2, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !2, i64 152, metadata !3, i64 160, metadata !2, i64 168, metadata !2, i64 176, metadata !2, i64 184, metadata !9, i64 192, metadata !2, i64 200}
!7 = metadata !{metadata !"tree_common", metadata !2, i64 0, metadata !2, i64 8, metadata !3, i64 16, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19}
!8 = metadata !{metadata !"int", metadata !3, i64 0}
!9 = metadata !{metadata !"long long", metadata !3, i64 0}
!10 = metadata !{metadata !11, metadata !8, i64 24}
!11 = metadata !{metadata !"tree_identifier", metadata !7, i64 0, metadata !12, i64 24}
!12 = metadata !{metadata !"ht_identifier", metadata !8, i64 0, metadata !2, i64 8}
!13 = metadata !{metadata !6, metadata !2, i64 80}
!14 = metadata !{metadata !11, metadata !2, i64 32}
!15 = metadata !{metadata !3, metadata !3, i64 0}
!16 = metadata !{metadata !7, metadata !2, i64 8}
!17 = metadata !{metadata !8, metadata !8, i64 0}
!18 = metadata !{metadata !19, metadata !2, i64 16}
!19 = metadata !{metadata !"function", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !8, i64 64, metadata !8, i64 68, metadata !8, i64 72, metadata !8, i64 76, metadata !2, i64 80, metadata !20, i64 88, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !8, i64 152, metadata !2, i64 160, metadata !2, i64 168, metadata !2, i64 176, metadata !2, i64 184, metadata !2, i64 192, metadata !2, i64 200, metadata !2, i64 208, metadata !2, i64 216, metadata !2, i64 224, metadata !2, i64 232, metadata !2, i64 240, metadata !2, i64 248, metadata !2, i64 256, metadata !9, i64 264, metadata !2, i64 272, metadata !2, i64 280, metadata !2, i64 288, metadata !2, i64 296, metadata !8, i64 304, metadata !2, i64 312, metadata !2, i64 320, metadata !8, i64 328, metadata !8, i64 332, metadata !8, i64 336, metadata !2, i64 344, metadata !8, i64 352, metadata !8, i64 356, metadata !2, i64 360, metadata !2, i64 368, metadata !2, i64 376, metadata !8, i64 384, metadata !8, i64 388, metadata !2, i64 392, metadata !8, i64 400, metadata !8, i64 404, metadata !2, i64 408, metadata !2, i64 416, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426}
!20 = metadata !{metadata !"ix86_args", metadata !8, i64 0, metadata !8, i64 4, metadata !8, i64 8, metadata !8, i64 12, metadata !8, i64 16, metadata !8, i64 20, metadata !8, i64 24}
!21 = metadata !{metadata !22, metadata !8, i64 4}
!22 = metadata !{metadata !"expr_status", metadata !8, i64 0, metadata !8, i64 4, metadata !8, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40}
!23 = metadata !{metadata !19, metadata !8, i64 352}
!24 = metadata !{metadata !19, metadata !8, i64 76}
!25 = metadata !{metadata !7, metadata !2, i64 0}
!26 = metadata !{metadata !27, metadata !2, i64 32}
!27 = metadata !{metadata !"tree_list", metadata !7, i64 0, metadata !2, i64 24, metadata !2, i64 32}
!28 = metadata !{metadata !29, metadata !2, i64 0}
!29 = metadata !{metadata !"arg_data", metadata !2, i64 0, metadata !3, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !8, i64 48, metadata !8, i64 52, metadata !8, i64 56, metadata !30, i64 64, metadata !30, i64 80, metadata !30, i64 96, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !8, i64 144, metadata !30, i64 152}
!30 = metadata !{metadata !"args_size", metadata !9, i64 0, metadata !2, i64 8}
!31 = metadata !{metadata !32, metadata !2, i64 32}
!32 = metadata !{metadata !"tree_type", metadata !7, i64 0, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !8, i64 56, metadata !8, i64 60, metadata !3, i64 61, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !3, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !9, i64 152, metadata !2, i64 160}
!33 = metadata !{metadata !6, metadata !2, i64 144}
!34 = metadata !{metadata !32, metadata !2, i64 40}
!35 = metadata !{metadata !22, metadata !8, i64 0}
!36 = metadata !{metadata !32, metadata !8, i64 64}
!37 = metadata !{metadata !29, metadata !8, i64 48}
!38 = metadata !{metadata !29, metadata !3, i64 8}
!39 = metadata !{metadata !29, metadata !2, i64 32}
!40 = metadata !{metadata !29, metadata !2, i64 40}
!41 = metadata !{metadata !29, metadata !8, i64 52}
!42 = metadata !{metadata !29, metadata !8, i64 56}
!43 = metadata !{i64 0, i64 8, metadata !44, i64 8, i64 8, metadata !1}
!44 = metadata !{metadata !9, metadata !9, i64 0}
!45 = metadata !{metadata !29, metadata !9, i64 96}
!46 = metadata !{metadata !30, metadata !9, i64 0}
!47 = metadata !{metadata !29, metadata !2, i64 104}
!48 = metadata !{metadata !30, metadata !2, i64 8}
!49 = metadata !{metadata !19, metadata !2, i64 48}
!50 = metadata !{metadata !19, metadata !8, i64 68}
!51 = metadata !{metadata !22, metadata !8, i64 8}
!52 = metadata !{metadata !19, metadata !8, i64 404}
!53 = metadata !{metadata !19, metadata !8, i64 152}
!54 = metadata !{metadata !29, metadata !2, i64 16}
!55 = metadata !{metadata !29, metadata !2, i64 24}
!56 = metadata !{metadata !29, metadata !2, i64 72}
!57 = metadata !{metadata !29, metadata !9, i64 64}
!58 = metadata !{metadata !29, metadata !2, i64 88}
!59 = metadata !{metadata !29, metadata !9, i64 80}
!60 = metadata !{metadata !29, metadata !2, i64 112}
!61 = metadata !{metadata !29, metadata !2, i64 120}
!62 = metadata !{metadata !29, metadata !8, i64 144}
!63 = metadata !{metadata !29, metadata !2, i64 136}
!64 = metadata !{metadata !29, metadata !2, i64 128}
!65 = metadata !{metadata !19, metadata !2, i64 168}
!66 = metadata !{metadata !19, metadata !2, i64 232}
!67 = metadata !{metadata !29, metadata !2, i64 160}
!68 = metadata !{metadata !29, metadata !9, i64 152}
!69 = metadata !{metadata !19, metadata !2, i64 128}
!70 = metadata !{metadata !71, metadata !2, i64 0}
!71 = metadata !{metadata !"arg", metadata !2, i64 0, metadata !3, i64 8, metadata !2, i64 16, metadata !8, i64 24, metadata !30, i64 32, metadata !30, i64 48, metadata !2, i64 64}
!72 = metadata !{metadata !71, metadata !3, i64 8}
!73 = metadata !{metadata !71, metadata !8, i64 24}
!74 = metadata !{metadata !71, metadata !2, i64 16}
!75 = metadata !{metadata !71, metadata !9, i64 48}
!76 = metadata !{metadata !71, metadata !2, i64 56}
!77 = metadata !{metadata !71, metadata !9, i64 32}
!78 = metadata !{metadata !71, metadata !2, i64 64}
!79 = metadata !{metadata !80, metadata !8, i64 0}
!80 = metadata !{metadata !"simple_bitmap_def", metadata !8, i64 0, metadata !8, i64 4, metadata !8, i64 8, metadata !3, i64 16}
!81 = metadata !{metadata !82, metadata !8, i64 0}
!82 = metadata !{metadata !"rtvec_def", metadata !8, i64 0, metadata !3, i64 8}
!83 = metadata !{metadata !6, metadata !2, i64 104}
