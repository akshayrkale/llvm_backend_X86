; ModuleID = 'obstack.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct._IO_FILE = type opaque

@obstack_alloc_failed_handler = global void ()* @print_and_abort, align 8
@obstack_exit_failure = global i32 1, align 4
@_obstack = common global %struct.obstack* null, align 8
@.str = private unnamed_addr constant [18 x i8] c"memory exhausted\0A\00", align 1
@stderr = external constant %struct._IO_FILE*

; Function Attrs: noreturn nounwind uwtable
define internal void @print_and_abort() #0 {
entry:
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !1
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8]* @.str, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %0) #5
  %2 = load i32* @obstack_exit_failure, align 4, !tbaa !5
  tail call void @exit(i32 %2) #6
  unreachable
}

; Function Attrs: nounwind uwtable
define i32 @_obstack_begin(%struct.obstack* nocapture %h, i32 %size, i32 %alignment, i8* (i64)* %chunkfun, void (i8*)* %freefun) #1 {
entry:
  %cmp = icmp eq i32 %alignment, 0
  %cmp1 = icmp eq i32 %size, 0
  %0 = bitcast i8* (i64)* %chunkfun to %struct._obstack_chunk* (i8*, i64)*
  %chunkfun4 = getelementptr inbounds %struct.obstack* %h, i64 0, i32 7
  store %struct._obstack_chunk* (i8*, i64)* %0, %struct._obstack_chunk* (i8*, i64)** %chunkfun4, align 8, !tbaa !7
  %1 = bitcast void (i8*)* %freefun to void (i8*, %struct._obstack_chunk*)*
  %freefun5 = getelementptr inbounds %struct.obstack* %h, i64 0, i32 8
  store void (i8*, %struct._obstack_chunk*)* %1, void (i8*, %struct._obstack_chunk*)** %freefun5, align 8, !tbaa !10
  %2 = sext i32 %size to i64
  %conv = select i1 %cmp1, i64 4072, i64 %2
  %chunk_size = getelementptr inbounds %struct.obstack* %h, i64 0, i32 0
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !11
  %alignment.op = add i32 %alignment, -1
  %sub6 = select i1 %cmp, i32 7, i32 %alignment.op
  %alignment_mask = getelementptr inbounds %struct.obstack* %h, i64 0, i32 6
  store i32 %sub6, i32* %alignment_mask, align 4, !tbaa !12
  %use_extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 10
  %bf.load = load i8* %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %use_extra_arg, align 8
  %3 = bitcast i8* (i64)* %chunkfun to %struct._obstack_chunk* (i64)*
  %call14 = tail call %struct._obstack_chunk* %3(i64 %conv) #4
  %chunk15 = getelementptr inbounds %struct.obstack* %h, i64 0, i32 1
  store %struct._obstack_chunk* %call14, %struct._obstack_chunk** %chunk15, align 8, !tbaa !13
  %tobool16 = icmp eq %struct._obstack_chunk* %call14, null
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %entry
  %4 = load void ()** @obstack_alloc_failed_handler, align 8, !tbaa !1
  tail call void %4() #4
  br label %if.end18

if.end18:                                         ; preds = %entry, %if.then17
  %arraydecay = getelementptr inbounds %struct._obstack_chunk* %call14, i64 0, i32 2, i64 0
  %object_base = getelementptr inbounds %struct.obstack* %h, i64 0, i32 2
  store i8* %arraydecay, i8** %object_base, align 8, !tbaa !14
  %next_free = getelementptr inbounds %struct.obstack* %h, i64 0, i32 3
  store i8* %arraydecay, i8** %next_free, align 8, !tbaa !15
  %5 = bitcast %struct._obstack_chunk* %call14 to i8*
  %6 = load i64* %chunk_size, align 8, !tbaa !11
  %add.ptr = getelementptr inbounds i8* %5, i64 %6
  %limit = getelementptr inbounds %struct._obstack_chunk* %call14, i64 0, i32 0
  store i8* %add.ptr, i8** %limit, align 8, !tbaa !16
  %chunk_limit = getelementptr inbounds %struct.obstack* %h, i64 0, i32 4
  store i8* %add.ptr, i8** %chunk_limit, align 8, !tbaa !18
  %prev = getelementptr inbounds %struct._obstack_chunk* %call14, i64 0, i32 1
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %prev, align 8, !tbaa !19
  %bf.load20 = load i8* %use_extra_arg, align 8
  %bf.clear23 = and i8 %bf.load20, -7
  store i8 %bf.clear23, i8* %use_extra_arg, align 8
  ret i32 1
}

; Function Attrs: nounwind uwtable
define i32 @_obstack_begin_1(%struct.obstack* nocapture %h, i32 %size, i32 %alignment, i8* (i8*, i64)* %chunkfun, void (i8*, i8*)* %freefun, i8* %arg) #1 {
entry:
  %cmp = icmp eq i32 %alignment, 0
  %cmp1 = icmp eq i32 %size, 0
  %0 = bitcast i8* (i8*, i64)* %chunkfun to %struct._obstack_chunk* (i8*, i64)*
  %chunkfun4 = getelementptr inbounds %struct.obstack* %h, i64 0, i32 7
  store %struct._obstack_chunk* (i8*, i64)* %0, %struct._obstack_chunk* (i8*, i64)** %chunkfun4, align 8, !tbaa !7
  %1 = bitcast void (i8*, i8*)* %freefun to void (i8*, %struct._obstack_chunk*)*
  %freefun5 = getelementptr inbounds %struct.obstack* %h, i64 0, i32 8
  store void (i8*, %struct._obstack_chunk*)* %1, void (i8*, %struct._obstack_chunk*)** %freefun5, align 8, !tbaa !10
  %2 = sext i32 %size to i64
  %conv = select i1 %cmp1, i64 4072, i64 %2
  %chunk_size = getelementptr inbounds %struct.obstack* %h, i64 0, i32 0
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !11
  %alignment.op = add i32 %alignment, -1
  %sub6 = select i1 %cmp, i32 7, i32 %alignment.op
  %alignment_mask = getelementptr inbounds %struct.obstack* %h, i64 0, i32 6
  store i32 %sub6, i32* %alignment_mask, align 4, !tbaa !12
  %extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 9
  store i8* %arg, i8** %extra_arg, align 8, !tbaa !20
  %use_extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 10
  %bf.load = load i8* %use_extra_arg, align 8
  %bf.set = or i8 %bf.load, 1
  store i8 %bf.set, i8* %use_extra_arg, align 8
  %call = tail call %struct._obstack_chunk* %0(i8* %arg, i64 %conv) #4
  %chunk16 = getelementptr inbounds %struct.obstack* %h, i64 0, i32 1
  store %struct._obstack_chunk* %call, %struct._obstack_chunk** %chunk16, align 8, !tbaa !13
  %tobool17 = icmp eq %struct._obstack_chunk* %call, null
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %entry
  %3 = load void ()** @obstack_alloc_failed_handler, align 8, !tbaa !1
  tail call void %3() #4
  br label %if.end19

if.end19:                                         ; preds = %entry, %if.then18
  %arraydecay = getelementptr inbounds %struct._obstack_chunk* %call, i64 0, i32 2, i64 0
  %object_base = getelementptr inbounds %struct.obstack* %h, i64 0, i32 2
  store i8* %arraydecay, i8** %object_base, align 8, !tbaa !14
  %next_free = getelementptr inbounds %struct.obstack* %h, i64 0, i32 3
  store i8* %arraydecay, i8** %next_free, align 8, !tbaa !15
  %4 = bitcast %struct._obstack_chunk* %call to i8*
  %5 = load i64* %chunk_size, align 8, !tbaa !11
  %add.ptr = getelementptr inbounds i8* %4, i64 %5
  %limit = getelementptr inbounds %struct._obstack_chunk* %call, i64 0, i32 0
  store i8* %add.ptr, i8** %limit, align 8, !tbaa !16
  %chunk_limit = getelementptr inbounds %struct.obstack* %h, i64 0, i32 4
  store i8* %add.ptr, i8** %chunk_limit, align 8, !tbaa !18
  %prev = getelementptr inbounds %struct._obstack_chunk* %call, i64 0, i32 1
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %prev, align 8, !tbaa !19
  %bf.load21 = load i8* %use_extra_arg, align 8
  %bf.clear24 = and i8 %bf.load21, -7
  store i8 %bf.clear24, i8* %use_extra_arg, align 8
  ret i32 1
}

; Function Attrs: nounwind uwtable
define void @_obstack_newchunk(%struct.obstack* nocapture %h, i32 %length) #1 {
entry:
  %chunk = getelementptr inbounds %struct.obstack* %h, i64 0, i32 1
  %0 = load %struct._obstack_chunk** %chunk, align 8, !tbaa !13
  %next_free = getelementptr inbounds %struct.obstack* %h, i64 0, i32 3
  %1 = load i8** %next_free, align 8, !tbaa !15
  %object_base = getelementptr inbounds %struct.obstack* %h, i64 0, i32 2
  %2 = load i8** %object_base, align 8, !tbaa !14
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = sext i32 %length to i64
  %shr = ashr i64 %sub.ptr.sub, 3
  %add = add i64 %conv, 100
  %add1 = add i64 %add, %sub.ptr.sub
  %add2 = add i64 %add1, %shr
  %chunk_size = getelementptr inbounds %struct.obstack* %h, i64 0, i32 0
  %3 = load i64* %chunk_size, align 8, !tbaa !11
  %cmp = icmp slt i64 %add2, %3
  %.add2 = select i1 %cmp, i64 %3, i64 %add2
  %use_extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 10
  %bf.load = load i8* %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %tobool = icmp eq i8 %bf.clear, 0
  %chunkfun = getelementptr inbounds %struct.obstack* %h, i64 0, i32 7
  %4 = load %struct._obstack_chunk* (i8*, i64)** %chunkfun, align 8, !tbaa !7
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 9
  %5 = load i8** %extra_arg, align 8, !tbaa !20
  %call = tail call %struct._obstack_chunk* %4(i8* %5, i64 %.add2) #4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = bitcast %struct._obstack_chunk* (i8*, i64)* %4 to %struct._obstack_chunk* (i64)*
  %call6 = tail call %struct._obstack_chunk* %6(i64 %.add2) #4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._obstack_chunk* [ %call, %cond.true ], [ %call6, %cond.false ]
  %tobool7 = icmp eq %struct._obstack_chunk* %cond, null
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %cond.end
  %7 = load void ()** @obstack_alloc_failed_handler, align 8, !tbaa !1
  tail call void %7() #4
  br label %if.end9

if.end9:                                          ; preds = %cond.end, %if.then8
  store %struct._obstack_chunk* %cond, %struct._obstack_chunk** %chunk, align 8, !tbaa !13
  %prev = getelementptr inbounds %struct._obstack_chunk* %cond, i64 0, i32 1
  store %struct._obstack_chunk* %0, %struct._obstack_chunk** %prev, align 8, !tbaa !19
  %8 = bitcast %struct._obstack_chunk* %cond to i8*
  %add.ptr = getelementptr inbounds i8* %8, i64 %.add2
  %chunk_limit = getelementptr inbounds %struct.obstack* %h, i64 0, i32 4
  store i8* %add.ptr, i8** %chunk_limit, align 8, !tbaa !18
  %limit = getelementptr inbounds %struct._obstack_chunk* %cond, i64 0, i32 0
  store i8* %add.ptr, i8** %limit, align 8, !tbaa !16
  %alignment_mask = getelementptr inbounds %struct.obstack* %h, i64 0, i32 6
  %9 = load i32* %alignment_mask, align 4, !tbaa !12
  %cmp13 = icmp sgt i32 %9, 6
  br i1 %cmp13, label %if.then15, label %for.cond22.preheader

if.then15:                                        ; preds = %if.end9
  %div = lshr i64 %sub.ptr.sub, 2
  %i.0114 = add i64 %div, -1
  %cmp16115 = icmp sgt i64 %i.0114, -1
  br i1 %cmp16115, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.then15
  %10 = load i8** %object_base, align 8, !tbaa !14
  %11 = bitcast i8* %10 to i32*
  %arraydecay = getelementptr inbounds %struct._obstack_chunk* %cond, i64 0, i32 2, i64 0
  %12 = bitcast i8* %arraydecay to i32*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %i.0116 = phi i64 [ %i.0114, %for.body.lr.ph ], [ %i.0, %for.body ]
  %arrayidx = getelementptr inbounds i32* %11, i64 %i.0116
  %13 = load i32* %arrayidx, align 4, !tbaa !5
  %arrayidx19 = getelementptr inbounds i32* %12, i64 %i.0116
  store i32 %13, i32* %arrayidx19, align 4, !tbaa !5
  %i.0 = add i64 %i.0116, -1
  %cmp16 = icmp sgt i64 %i.0, -1
  br i1 %cmp16, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %if.then15
  %mul = shl nuw i64 %div, 2
  br label %for.cond22.preheader

for.cond22.preheader:                             ; preds = %if.end9, %for.end
  %i.1.ph = phi i64 [ %mul, %for.end ], [ 0, %if.end9 ]
  %cmp23112 = icmp slt i64 %i.1.ph, %sub.ptr.sub
  %14 = load i8** %object_base, align 8, !tbaa !14
  br i1 %cmp23112, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22.preheader, %for.body25
  %15 = phi i8* [ %17, %for.body25 ], [ %14, %for.cond22.preheader ]
  %i.1113 = phi i64 [ %inc, %for.body25 ], [ %i.1.ph, %for.cond22.preheader ]
  %arrayidx27 = getelementptr inbounds i8* %15, i64 %i.1113
  %16 = load i8* %arrayidx27, align 1, !tbaa !21
  %arrayidx29 = getelementptr inbounds %struct._obstack_chunk* %cond, i64 0, i32 2, i64 %i.1113
  store i8 %16, i8* %arrayidx29, align 1, !tbaa !21
  %inc = add nsw i64 %i.1113, 1
  %17 = load i8** %object_base, align 8, !tbaa !14
  %exitcond = icmp eq i64 %inc, %sub.ptr.sub
  br i1 %exitcond, label %for.end31, label %for.body25

for.end31:                                        ; preds = %for.body25, %for.cond22.preheader
  %.lcssa = phi i8* [ %14, %for.cond22.preheader ], [ %17, %for.body25 ]
  %arraydecay34 = getelementptr inbounds %struct._obstack_chunk* %0, i64 0, i32 2, i64 0
  %cmp35 = icmp eq i8* %.lcssa, %arraydecay34
  br i1 %cmp35, label %land.lhs.true, label %if.end54

land.lhs.true:                                    ; preds = %for.end31
  %bf.load37 = load i8* %use_extra_arg, align 8
  %bf.clear38 = and i8 %bf.load37, 2
  %tobool40 = icmp eq i8 %bf.clear38, 0
  br i1 %tobool40, label %if.then41, label %if.end54

if.then41:                                        ; preds = %land.lhs.true
  %prev42 = getelementptr inbounds %struct._obstack_chunk* %0, i64 0, i32 1
  %18 = load %struct._obstack_chunk** %prev42, align 8, !tbaa !19
  store %struct._obstack_chunk* %18, %struct._obstack_chunk** %prev, align 8, !tbaa !19
  %bf.load45 = load i8* %use_extra_arg, align 8
  %bf.clear46 = and i8 %bf.load45, 1
  %tobool48 = icmp eq i8 %bf.clear46, 0
  %freefun = getelementptr inbounds %struct.obstack* %h, i64 0, i32 8
  %19 = load void (i8*, %struct._obstack_chunk*)** %freefun, align 8, !tbaa !10
  br i1 %tobool48, label %if.else51, label %if.then49

if.then49:                                        ; preds = %if.then41
  %extra_arg50 = getelementptr inbounds %struct.obstack* %h, i64 0, i32 9
  %20 = load i8** %extra_arg50, align 8, !tbaa !20
  tail call void %19(i8* %20, %struct._obstack_chunk* %0) #4
  br label %if.end54

if.else51:                                        ; preds = %if.then41
  %21 = bitcast void (i8*, %struct._obstack_chunk*)* %19 to void (i8*)*
  %22 = bitcast %struct._obstack_chunk* %0 to i8*
  tail call void %21(i8* %22) #4
  br label %if.end54

if.end54:                                         ; preds = %land.lhs.true, %if.else51, %if.then49, %for.end31
  %arraydecay56 = getelementptr inbounds %struct._obstack_chunk* %cond, i64 0, i32 2, i64 0
  store i8* %arraydecay56, i8** %object_base, align 8, !tbaa !14
  %add.ptr59 = getelementptr inbounds %struct._obstack_chunk* %cond, i64 0, i32 2, i64 %sub.ptr.sub
  store i8* %add.ptr59, i8** %next_free, align 8, !tbaa !15
  %bf.load62 = load i8* %use_extra_arg, align 8
  %bf.clear63 = and i8 %bf.load62, -3
  store i8 %bf.clear63, i8* %use_extra_arg, align 8
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @_obstack_allocated_p(%struct.obstack* nocapture readonly %h, i8* readnone %obj) #2 {
entry:
  %chunk = getelementptr inbounds %struct.obstack* %h, i64 0, i32 1
  %lp.08 = load %struct._obstack_chunk** %chunk, align 8
  %cmp9 = icmp eq %struct._obstack_chunk* %lp.08, null
  br i1 %cmp9, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %entry, %while.body
  %lp.010 = phi %struct._obstack_chunk* [ %lp.0, %while.body ], [ %lp.08, %entry ]
  %0 = bitcast %struct._obstack_chunk* %lp.010 to i8*
  %cmp1 = icmp ult i8* %0, %obj
  br i1 %cmp1, label %lor.rhs, label %while.body

lor.rhs:                                          ; preds = %land.rhs
  %limit = getelementptr inbounds %struct._obstack_chunk* %lp.010, i64 0, i32 0
  %1 = load i8** %limit, align 8, !tbaa !16
  %cmp2 = icmp ult i8* %1, %obj
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs, %lor.rhs
  %prev = getelementptr inbounds %struct._obstack_chunk* %lp.010, i64 0, i32 1
  %lp.0 = load %struct._obstack_chunk** %prev, align 8
  %cmp = icmp eq %struct._obstack_chunk* %lp.0, null
  br i1 %cmp, label %while.end, label %land.rhs

while.end:                                        ; preds = %lor.rhs, %while.body, %entry
  %cmp.lcssa = phi i32 [ 0, %entry ], [ 1, %lor.rhs ], [ 0, %while.body ]
  ret i32 %cmp.lcssa
}

; Function Attrs: nounwind uwtable
define void @_obstack_free(%struct.obstack* nocapture %h, i8* %obj) #1 {
entry:
  %chunk = getelementptr inbounds %struct.obstack* %h, i64 0, i32 1
  %0 = load %struct._obstack_chunk** %chunk, align 8, !tbaa !13
  %cmp34 = icmp eq %struct._obstack_chunk* %0, null
  br i1 %cmp34, label %if.else10, label %land.rhs.lr.ph

land.rhs.lr.ph:                                   ; preds = %entry
  %use_extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 10
  %freefun = getelementptr inbounds %struct.obstack* %h, i64 0, i32 8
  %extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 9
  br label %land.rhs

land.rhs:                                         ; preds = %do.end, %land.rhs.lr.ph
  %lp.035 = phi %struct._obstack_chunk* [ %0, %land.rhs.lr.ph ], [ %3, %do.end ]
  %1 = bitcast %struct._obstack_chunk* %lp.035 to i8*
  %cmp1 = icmp ult i8* %1, %obj
  br i1 %cmp1, label %lor.rhs, label %while.body

lor.rhs:                                          ; preds = %land.rhs
  %limit = getelementptr inbounds %struct._obstack_chunk* %lp.035, i64 0, i32 0
  %2 = load i8** %limit, align 8, !tbaa !16
  %cmp2 = icmp ult i8* %2, %obj
  br i1 %cmp2, label %while.body, label %if.then7

while.body:                                       ; preds = %land.rhs, %lor.rhs
  %prev = getelementptr inbounds %struct._obstack_chunk* %lp.035, i64 0, i32 1
  %3 = load %struct._obstack_chunk** %prev, align 8, !tbaa !19
  %bf.load = load i8* %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %tobool = icmp eq i8 %bf.clear, 0
  %4 = load void (i8*, %struct._obstack_chunk*)** %freefun, align 8, !tbaa !10
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %while.body
  %5 = load i8** %extra_arg, align 8, !tbaa !20
  tail call void %4(i8* %5, %struct._obstack_chunk* %lp.035) #4
  br label %do.end

if.else:                                          ; preds = %while.body
  %6 = bitcast void (i8*, %struct._obstack_chunk*)* %4 to void (i8*)*
  tail call void %6(i8* %1) #4
  br label %do.end

do.end:                                           ; preds = %if.then, %if.else
  %bf.load4 = load i8* %use_extra_arg, align 8
  %bf.set = or i8 %bf.load4, 2
  store i8 %bf.set, i8* %use_extra_arg, align 8
  %cmp = icmp eq %struct._obstack_chunk* %3, null
  br i1 %cmp, label %if.else10, label %land.rhs

if.then7:                                         ; preds = %lor.rhs
  %next_free = getelementptr inbounds %struct.obstack* %h, i64 0, i32 3
  store i8* %obj, i8** %next_free, align 8, !tbaa !15
  %object_base = getelementptr inbounds %struct.obstack* %h, i64 0, i32 2
  store i8* %obj, i8** %object_base, align 8, !tbaa !14
  %chunk_limit = getelementptr inbounds %struct.obstack* %h, i64 0, i32 4
  store i8* %2, i8** %chunk_limit, align 8, !tbaa !18
  store %struct._obstack_chunk* %lp.035, %struct._obstack_chunk** %chunk, align 8, !tbaa !13
  br label %if.end14

if.else10:                                        ; preds = %do.end, %entry
  %cmp11 = icmp eq i8* %obj, null
  br i1 %cmp11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.else10
  tail call void @abort() #6
  unreachable

if.end14:                                         ; preds = %if.else10, %if.then7
  ret void
}

; Function Attrs: noreturn
declare void @abort() #3

; Function Attrs: nounwind uwtable
define void @obstack_free(%struct.obstack* nocapture %h, i8* %obj) #1 {
entry:
  %chunk = getelementptr inbounds %struct.obstack* %h, i64 0, i32 1
  %0 = load %struct._obstack_chunk** %chunk, align 8, !tbaa !13
  %cmp34 = icmp eq %struct._obstack_chunk* %0, null
  br i1 %cmp34, label %if.else10, label %land.rhs.lr.ph

land.rhs.lr.ph:                                   ; preds = %entry
  %use_extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 10
  %freefun = getelementptr inbounds %struct.obstack* %h, i64 0, i32 8
  %extra_arg = getelementptr inbounds %struct.obstack* %h, i64 0, i32 9
  br label %land.rhs

land.rhs:                                         ; preds = %do.end, %land.rhs.lr.ph
  %lp.035 = phi %struct._obstack_chunk* [ %0, %land.rhs.lr.ph ], [ %3, %do.end ]
  %1 = bitcast %struct._obstack_chunk* %lp.035 to i8*
  %cmp1 = icmp ult i8* %1, %obj
  br i1 %cmp1, label %lor.rhs, label %while.body

lor.rhs:                                          ; preds = %land.rhs
  %limit = getelementptr inbounds %struct._obstack_chunk* %lp.035, i64 0, i32 0
  %2 = load i8** %limit, align 8, !tbaa !16
  %cmp2 = icmp ult i8* %2, %obj
  br i1 %cmp2, label %while.body, label %if.then7

while.body:                                       ; preds = %land.rhs, %lor.rhs
  %prev = getelementptr inbounds %struct._obstack_chunk* %lp.035, i64 0, i32 1
  %3 = load %struct._obstack_chunk** %prev, align 8, !tbaa !19
  %bf.load = load i8* %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %tobool = icmp eq i8 %bf.clear, 0
  %4 = load void (i8*, %struct._obstack_chunk*)** %freefun, align 8, !tbaa !10
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %while.body
  %5 = load i8** %extra_arg, align 8, !tbaa !20
  tail call void %4(i8* %5, %struct._obstack_chunk* %lp.035) #4
  br label %do.end

if.else:                                          ; preds = %while.body
  %6 = bitcast void (i8*, %struct._obstack_chunk*)* %4 to void (i8*)*
  tail call void %6(i8* %1) #4
  br label %do.end

do.end:                                           ; preds = %if.then, %if.else
  %bf.load4 = load i8* %use_extra_arg, align 8
  %bf.set = or i8 %bf.load4, 2
  store i8 %bf.set, i8* %use_extra_arg, align 8
  %cmp = icmp eq %struct._obstack_chunk* %3, null
  br i1 %cmp, label %if.else10, label %land.rhs

if.then7:                                         ; preds = %lor.rhs
  %next_free = getelementptr inbounds %struct.obstack* %h, i64 0, i32 3
  store i8* %obj, i8** %next_free, align 8, !tbaa !15
  %object_base = getelementptr inbounds %struct.obstack* %h, i64 0, i32 2
  store i8* %obj, i8** %object_base, align 8, !tbaa !14
  %chunk_limit = getelementptr inbounds %struct.obstack* %h, i64 0, i32 4
  store i8* %2, i8** %chunk_limit, align 8, !tbaa !18
  store %struct._obstack_chunk* %lp.035, %struct._obstack_chunk** %chunk, align 8, !tbaa !13
  br label %if.end14

if.else10:                                        ; preds = %do.end, %entry
  %cmp11 = icmp eq i8* %obj, null
  br i1 %cmp11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.else10
  tail call void @abort() #6
  unreachable

if.end14:                                         ; preds = %if.else10, %if.then7
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @_obstack_memory_used(%struct.obstack* nocapture readonly %h) #2 {
entry:
  %chunk = getelementptr inbounds %struct.obstack* %h, i64 0, i32 1
  %lp.07 = load %struct._obstack_chunk** %chunk, align 8
  %cmp8 = icmp eq %struct._obstack_chunk* %lp.07, null
  br i1 %cmp8, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %lp.010 = phi %struct._obstack_chunk* [ %lp.0, %for.body ], [ %lp.07, %entry ]
  %nbytes.09 = phi i64 [ %add, %for.body ], [ 0, %entry ]
  %limit = getelementptr inbounds %struct._obstack_chunk* %lp.010, i64 0, i32 0
  %0 = load i8** %limit, align 8, !tbaa !16
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct._obstack_chunk* %lp.010 to i64
  %conv6 = and i64 %nbytes.09, 4294967295
  %sub.ptr.sub = sub i64 %conv6, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %prev = getelementptr inbounds %struct._obstack_chunk* %lp.010, i64 0, i32 1
  %lp.0 = load %struct._obstack_chunk** %prev, align 8
  %cmp = icmp eq %struct._obstack_chunk* %lp.0, null
  br i1 %cmp, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %conv1 = trunc i64 %add to i32
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %nbytes.0.lcssa = phi i32 [ %conv1, %for.cond.for.end_crit_edge ], [ 0, %entry ]
  ret i32 %nbytes.0.lcssa
}

; Function Attrs: noreturn
declare void @exit(i32) #3

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

attributes #0 = { noreturn nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { cold }
attributes #6 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !6, i64 0}
!6 = metadata !{metadata !"int", metadata !3, i64 0}
!7 = metadata !{metadata !8, metadata !2, i64 56}
!8 = metadata !{metadata !"obstack", metadata !9, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !9, i64 40, metadata !6, i64 48, metadata !2, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !6, i64 80, metadata !6, i64 80, metadata !6, i64 80}
!9 = metadata !{metadata !"long", metadata !3, i64 0}
!10 = metadata !{metadata !8, metadata !2, i64 64}
!11 = metadata !{metadata !8, metadata !9, i64 0}
!12 = metadata !{metadata !8, metadata !6, i64 48}
!13 = metadata !{metadata !8, metadata !2, i64 8}
!14 = metadata !{metadata !8, metadata !2, i64 16}
!15 = metadata !{metadata !8, metadata !2, i64 24}
!16 = metadata !{metadata !17, metadata !2, i64 0}
!17 = metadata !{metadata !"_obstack_chunk", metadata !2, i64 0, metadata !2, i64 8, metadata !3, i64 16}
!18 = metadata !{metadata !8, metadata !2, i64 32}
!19 = metadata !{metadata !17, metadata !2, i64 8}
!20 = metadata !{metadata !8, metadata !2, i64 72}
!21 = metadata !{metadata !3, metadata !3, i64 0}
