; ModuleID = 'attribs.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.function = type opaque
%struct.lang_decl = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque

@empty_attribute_table = internal constant [1 x %struct.attribute_spec] zeroinitializer, align 16
@format_attribute_table = global %struct.attribute_spec* getelementptr inbounds ([1 x %struct.attribute_spec]* @empty_attribute_table, i64 0, i64 0), align 8
@lang_attribute_table = global %struct.attribute_spec* getelementptr inbounds ([1 x %struct.attribute_spec]* @empty_attribute_table, i64 0, i64 0), align 8
@lang_attribute_common = global i32 1, align 4
@attributes_initialized = internal unnamed_addr global i1 false
@targetm = external global %struct.gcc_target
@tree_code_type = external global [256 x i8]
@attribute_tables = internal unnamed_addr global [4 x %struct.attribute_spec*] zeroinitializer, align 16
@.str = private unnamed_addr constant [33 x i8] c"`%s' attribute directive ignored\00", align 1
@.str1 = private unnamed_addr constant [55 x i8] c"wrong number of arguments specified for `%s' attribute\00", align 1
@.str2 = private unnamed_addr constant [39 x i8] c"`%s' attribute does not apply to types\00", align 1
@.str3 = private unnamed_addr constant [46 x i8] c"`%s' attribute only applies to function types\00", align 1
@.str4 = private unnamed_addr constant [23 x i8] c"`%s' attribute ignored\00", align 1
@c_common_attribute_table = internal constant [25 x %struct.attribute_spec] [%struct.attribute_spec { i8* getelementptr inbounds ([7 x i8]* @.str5, i32 0, i32 0), i32 0, i32 0, i8 0, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_packed_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([9 x i8]* @.str6, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_nocommon_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([7 x i8]* @.str7, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_common_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([9 x i8]* @.str8, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_noreturn_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([9 x i8]* @.str9, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_noreturn_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([9 x i8]* @.str10, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_noinline_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([14 x i8]* @.str11, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_always_inline_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([5 x i8]* @.str12, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_used_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([7 x i8]* @.str13, i32 0, i32 0), i32 0, i32 0, i8 0, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_unused_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([6 x i8]* @.str14, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_const_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([18 x i8]* @.str15, i32 0, i32 0), i32 0, i32 0, i8 0, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_transparent_union_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([12 x i8]* @.str16, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_constructor_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([11 x i8]* @.str17, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_destructor_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([5 x i8]* @.str18, i32 0, i32 0), i32 1, i32 1, i8 0, i8 1, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_mode_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([8 x i8]* @.str19, i32 0, i32 0), i32 1, i32 1, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_section_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([8 x i8]* @.str20, i32 0, i32 0), i32 0, i32 1, i8 0, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_aligned_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([5 x i8]* @.str21, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_weak_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([6 x i8]* @.str22, i32 0, i32 0), i32 1, i32 1, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_alias_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([23 x i8]* @.str23, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_no_instrument_function_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([7 x i8]* @.str24, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_malloc_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([15 x i8]* @.str25, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_no_limit_stack_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i32 0, i32 0, i8 1, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_pure_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([11 x i8]* @.str27, i32 0, i32 0), i32 0, i32 0, i8 0, i8 0, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_deprecated_attribute }, %struct.attribute_spec { i8* getelementptr inbounds ([12 x i8]* @.str28, i32 0, i32 0), i32 1, i32 1, i8 0, i8 1, i8 0, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* @handle_vector_size_attribute }, %struct.attribute_spec zeroinitializer], align 16
@.str5 = private unnamed_addr constant [7 x i8] c"packed\00", align 1
@.str6 = private unnamed_addr constant [9 x i8] c"nocommon\00", align 1
@.str7 = private unnamed_addr constant [7 x i8] c"common\00", align 1
@.str8 = private unnamed_addr constant [9 x i8] c"noreturn\00", align 1
@.str9 = private unnamed_addr constant [9 x i8] c"volatile\00", align 1
@.str10 = private unnamed_addr constant [9 x i8] c"noinline\00", align 1
@.str11 = private unnamed_addr constant [14 x i8] c"always_inline\00", align 1
@.str12 = private unnamed_addr constant [5 x i8] c"used\00", align 1
@.str13 = private unnamed_addr constant [7 x i8] c"unused\00", align 1
@.str14 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@.str15 = private unnamed_addr constant [18 x i8] c"transparent_union\00", align 1
@.str16 = private unnamed_addr constant [12 x i8] c"constructor\00", align 1
@.str17 = private unnamed_addr constant [11 x i8] c"destructor\00", align 1
@.str18 = private unnamed_addr constant [5 x i8] c"mode\00", align 1
@.str19 = private unnamed_addr constant [8 x i8] c"section\00", align 1
@.str20 = private unnamed_addr constant [8 x i8] c"aligned\00", align 1
@.str21 = private unnamed_addr constant [5 x i8] c"weak\00", align 1
@.str22 = private unnamed_addr constant [6 x i8] c"alias\00", align 1
@.str23 = private unnamed_addr constant [23 x i8] c"no_instrument_function\00", align 1
@.str24 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@.str25 = private unnamed_addr constant [15 x i8] c"no_stack_limit\00", align 1
@.str26 = private unnamed_addr constant [5 x i8] c"pure\00", align 1
@.str27 = private unnamed_addr constant [11 x i8] c"deprecated\00", align 1
@.str28 = private unnamed_addr constant [12 x i8] c"vector_size\00", align 1
@mode_class = external constant [59 x i32]
@.str29 = private unnamed_addr constant [39 x i8] c"invalid vector type for attribute `%s'\00", align 1
@class_narrowest_mode = external constant [9 x i32]
@mode_size = external constant [59 x i8]
@mode_unit_size = external constant [59 x i8]
@mode_wider_mode = external constant [59 x i8]
@.str30 = private unnamed_addr constant [63 x i8] c"no vector mode with the size and type specified could be found\00", align 1
@.str31 = private unnamed_addr constant [32 x i8] c"`%s' attribute ignored for `%s'\00", align 1
@.str32 = private unnamed_addr constant [41 x i8] c"`%s' attribute applies only to functions\00", align 1
@.str33 = private unnamed_addr constant [42 x i8] c"can't set `%s' attribute after definition\00", align 1
@.str34 = private unnamed_addr constant [43 x i8] c"`%s' defined both normally and as an alias\00", align 1
@.str35 = private unnamed_addr constant [23 x i8] c"alias arg not a string\00", align 1
@global_trees = external global [51 x %union.tree_node*]
@.str36 = private unnamed_addr constant [38 x i8] c"requested alignment is not a constant\00", align 1
@.str37 = private unnamed_addr constant [40 x i8] c"requested alignment is not a power of 2\00", align 1
@.str38 = private unnamed_addr constant [33 x i8] c"requested alignment is too large\00", align 1
@.str39 = private unnamed_addr constant [40 x i8] c"alignment may not be specified for `%s'\00", align 1
@current_function_decl = external global %union.tree_node*
@.str40 = private unnamed_addr constant [58 x i8] c"section attribute cannot be specified for local variables\00", align 1
@.str41 = private unnamed_addr constant [52 x i8] c"section of `%s' conflicts with previous declaration\00", align 1
@.str42 = private unnamed_addr constant [39 x i8] c"section attribute not allowed for `%s'\00", align 1
@.str43 = private unnamed_addr constant [53 x i8] c"section attributes are not supported for this target\00", align 1
@.str44 = private unnamed_addr constant [5 x i8] c"byte\00", align 1
@byte_mode = external global i32
@.str45 = private unnamed_addr constant [5 x i8] c"word\00", align 1
@word_mode = external global i32
@.str46 = private unnamed_addr constant [8 x i8] c"pointer\00", align 1
@ptr_mode = external global i32
@mode_name = external constant [59 x i8*]
@.str47 = private unnamed_addr constant [26 x i8] c"unknown machine mode `%s'\00", align 1
@.str48 = private unnamed_addr constant [27 x i8] c"no data type for mode `%s'\00", align 1
@lang_set_decl_assembler_name = external global void (%union.tree_node*)*

; Function Attrs: nounwind uwtable
define %union.tree_node* @decl_attributes(%union.tree_node** %node, %union.tree_node* %attributes, i32 %flags) #0 {
entry:
  %attributes.addr = alloca %union.tree_node*, align 8
  %no_add_attrs = alloca i8, align 1
  store %union.tree_node* %attributes, %union.tree_node** %attributes.addr, align 8, !tbaa !1
  %.b = load i1* @attributes_initialized, align 1
  br i1 %.b, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %0 = load i32* @lang_attribute_common, align 4, !tbaa !5
  %tobool.i = icmp ne i32 %0, 0
  %cond.i = select i1 %tobool.i, %struct.attribute_spec* getelementptr inbounds ([25 x %struct.attribute_spec]* @c_common_attribute_table, i64 0, i64 0), %struct.attribute_spec* getelementptr inbounds ([1 x %struct.attribute_spec]* @empty_attribute_table, i64 0, i64 0)
  store %struct.attribute_spec* %cond.i, %struct.attribute_spec** getelementptr inbounds ([4 x %struct.attribute_spec*]* @attribute_tables, i64 0, i64 0), align 16, !tbaa !1
  %1 = load %struct.attribute_spec** @lang_attribute_table, align 8, !tbaa !1
  store %struct.attribute_spec* %1, %struct.attribute_spec** getelementptr inbounds ([4 x %struct.attribute_spec*]* @attribute_tables, i64 0, i64 1), align 8, !tbaa !1
  %2 = load %struct.attribute_spec** @format_attribute_table, align 8, !tbaa !1
  store %struct.attribute_spec* %2, %struct.attribute_spec** getelementptr inbounds ([4 x %struct.attribute_spec*]* @attribute_tables, i64 0, i64 2), align 16, !tbaa !1
  %3 = load %struct.attribute_spec** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 4), align 8, !tbaa !7
  store %struct.attribute_spec* %3, %struct.attribute_spec** getelementptr inbounds ([4 x %struct.attribute_spec*]* @attribute_tables, i64 0, i64 3), align 8, !tbaa !1
  store i1 true, i1* @attributes_initialized, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load void (%union.tree_node*, %union.tree_node**)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 7), align 8, !tbaa !13
  %5 = load %union.tree_node** %node, align 8, !tbaa !1
  call void %4(%union.tree_node* %5, %union.tree_node** %attributes.addr) #4
  %6 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom379 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom379
  %7 = load i8* %arrayidx, align 1, !tbaa !14
  %cmp = icmp eq i8 %7, 100
  %cmp6 = icmp eq i32 %bf.clear, 30
  %or.cond = and i1 %cmp, %cmp6
  %and = and i32 %flags, 16
  %tobool9 = icmp eq i32 %and, 0
  %or.cond385 = and i1 %or.cond, %tobool9
  br i1 %or.cond385, label %if.then10, label %for.cond.preheader

if.then10:                                        ; preds = %if.end
  call void @insert_default_attributes(%union.tree_node* %6) #4
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then10, %if.end
  %a.0399 = load %union.tree_node** %attributes.addr, align 8
  %tobool12400 = icmp eq %union.tree_node* %a.0399, null
  br i1 %tobool12400, label %for.end294, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.inc291
  %a.0405 = phi %union.tree_node* [ %a.0, %for.inc291 ], [ %a.0399, %for.cond.preheader ]
  %flags.addr.0404 = phi i32 [ %flags.addr.2, %for.inc291 ], [ %flags, %for.cond.preheader ]
  %returned_attrs.0401 = phi %union.tree_node* [ %returned_attrs.2, %for.inc291 ], [ null, %for.cond.preheader ]
  %purpose = getelementptr inbounds %union.tree_node* %a.0405, i64 0, i32 0, i32 1
  %8 = load i8** %purpose, align 8
  %9 = bitcast i8* %8 to %union.tree_node*
  %value = getelementptr inbounds %union.tree_node* %a.0405, i64 0, i32 0, i32 2
  %10 = bitcast i32* %value to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !15
  store i8 0, i8* %no_add_attrs, align 1, !tbaa !18
  br label %for.cond18.preheader

for.cond14:                                       ; preds = %for.cond18.preheader, %for.cond18, %for.end
  %indvars.iv.next410416 = add nuw nsw i64 %indvars.iv409, 1
  %12 = trunc i64 %indvars.iv.next410416 to i32
  %cmp15 = icmp slt i32 %12, 4
  br i1 %cmp15, label %for.cond18.preheader, label %if.then48

for.cond18.preheader:                             ; preds = %for.body, %for.cond14
  %indvars.iv409 = phi i64 [ 0, %for.body ], [ %indvars.iv.next410416, %for.cond14 ]
  %arrayidx21 = getelementptr inbounds [4 x %struct.attribute_spec*]* @attribute_tables, i64 0, i64 %indvars.iv409
  %13 = load %struct.attribute_spec** %arrayidx21, align 8, !tbaa !1
  %name23392 = getelementptr inbounds %struct.attribute_spec* %13, i64 0, i32 0
  %14 = load i8** %name23392, align 8, !tbaa !19
  %cmp24393 = icmp eq i8* %14, null
  br i1 %cmp24393, label %for.cond14, label %for.body26

for.cond18:                                       ; preds = %for.body26
  %name23 = getelementptr inbounds %struct.attribute_spec* %17, i64 %indvars.iv.next, i32 0
  %15 = load i8** %name23, align 8, !tbaa !19
  %cmp24 = icmp eq i8* %15, null
  br i1 %cmp24, label %for.cond14, label %for.body26

for.body26:                                       ; preds = %for.cond18.preheader, %for.cond18
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond18 ], [ 0, %for.cond18.preheader ]
  %16 = phi i8* [ %15, %for.cond18 ], [ %14, %for.cond18.preheader ]
  %call = call i32 @is_attribute_p(i8* %16, %union.tree_node* %9) #4
  %tobool32 = icmp eq i32 %call, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %17 = load %struct.attribute_spec** %arrayidx21, align 8, !tbaa !1
  br i1 %tobool32, label %for.cond18, label %for.end

for.end:                                          ; preds = %for.body26
  %arrayidx37 = getelementptr inbounds %struct.attribute_spec* %17, i64 %indvars.iv
  %cmp39 = icmp eq %struct.attribute_spec* %arrayidx37, null
  br i1 %cmp39, label %for.cond14, label %if.else

if.then48:                                        ; preds = %for.cond14
  %str = getelementptr inbounds i8* %8, i64 32
  %18 = bitcast i8* %str to i8**
  %19 = load i8** %18, align 8, !tbaa !21
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([33 x i8]* @.str, i64 0, i64 0), i8* %19) #4
  br label %for.inc291

if.else:                                          ; preds = %for.end
  %call49 = call i32 @list_length(%union.tree_node* %11) #4
  %min_length = getelementptr inbounds %struct.attribute_spec* %17, i64 %indvars.iv, i32 1
  %20 = load i32* %min_length, align 4, !tbaa !24
  %cmp50 = icmp slt i32 %call49, %20
  br i1 %cmp50, label %if.then59, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %max_length = getelementptr inbounds %struct.attribute_spec* %17, i64 %indvars.iv, i32 2
  %21 = load i32* %max_length, align 4, !tbaa !25
  %cmp52 = icmp sgt i32 %21, -1
  br i1 %cmp52, label %land.lhs.true54, label %if.end64

land.lhs.true54:                                  ; preds = %lor.lhs.false
  %call55 = call i32 @list_length(%union.tree_node* %11) #4
  %22 = load i32* %max_length, align 4, !tbaa !25
  %cmp57 = icmp sgt i32 %call55, %22
  br i1 %cmp57, label %if.then59, label %if.end64

if.then59:                                        ; preds = %land.lhs.true54, %if.else
  %str62 = getelementptr inbounds i8* %8, i64 32
  %23 = bitcast i8* %str62 to i8**
  %24 = load i8** %23, align 8, !tbaa !21
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([55 x i8]* @.str1, i64 0, i64 0), i8* %24) #4
  br label %for.inc291

if.end64:                                         ; preds = %lor.lhs.false, %land.lhs.true54
  %decl_required = getelementptr inbounds %struct.attribute_spec* %17, i64 %indvars.iv, i32 3
  %25 = load i8* %decl_required, align 1, !tbaa !26, !range !27
  %tobool65 = icmp eq i8 %25, 0
  br i1 %tobool65, label %if.end86, label %land.lhs.true67

land.lhs.true67:                                  ; preds = %if.end64
  %26 = load %union.tree_node** %node, align 8, !tbaa !1
  %code69 = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 0, i32 2
  %bf.load70 = load i32* %code69, align 8
  %bf.clear71 = and i32 %bf.load70, 255
  %idxprom72384 = zext i32 %bf.clear71 to i64
  %arrayidx73 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom72384
  %27 = load i8* %arrayidx73, align 1, !tbaa !14
  %cmp75 = icmp eq i8 %27, 100
  br i1 %cmp75, label %if.end86, label %if.then77

if.then77:                                        ; preds = %land.lhs.true67
  %and78 = and i32 %flags.addr.0404, 7
  %tobool79 = icmp eq i32 %and78, 0
  br i1 %tobool79, label %if.else82, label %if.then80

if.then80:                                        ; preds = %if.then77
  %call81 = call %union.tree_node* @tree_cons(%union.tree_node* %9, %union.tree_node* %11, %union.tree_node* %returned_attrs.0401) #4
  br label %for.inc291

if.else82:                                        ; preds = %if.then77
  %str85 = getelementptr inbounds i8* %8, i64 32
  %28 = bitcast i8* %str85 to i8**
  %29 = load i8** %28, align 8, !tbaa !21
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([39 x i8]* @.str2, i64 0, i64 0), i8* %29) #4
  br label %for.inc291

if.end86:                                         ; preds = %if.end64, %land.lhs.true67
  %type_required = getelementptr inbounds %struct.attribute_spec* %17, i64 %indvars.iv, i32 4
  %30 = load i8* %type_required, align 1, !tbaa !28, !range !27
  %tobool87 = icmp eq i8 %30, 0
  br i1 %tobool87, label %if.end102, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %if.end86
  %31 = load %union.tree_node** %node, align 8, !tbaa !1
  %code91 = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 0, i32 2
  %bf.load92 = load i32* %code91, align 8
  %bf.clear93 = and i32 %bf.load92, 255
  %idxprom94383 = zext i32 %bf.clear93 to i64
  %arrayidx95 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom94383
  %32 = load i8* %arrayidx95, align 1, !tbaa !14
  %cmp97 = icmp eq i8 %32, 100
  br i1 %cmp97, label %if.then99, label %if.end102

if.then99:                                        ; preds = %land.lhs.true89
  %type = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 0, i32 1
  %and101 = and i32 %flags.addr.0404, -9
  br label %if.end102

if.end102:                                        ; preds = %if.end86, %if.then99, %land.lhs.true89
  %flags.addr.1 = phi i32 [ %and101, %if.then99 ], [ %flags.addr.0404, %land.lhs.true89 ], [ %flags.addr.0404, %if.end86 ]
  %anode.0 = phi %union.tree_node** [ %type, %if.then99 ], [ %node, %land.lhs.true89 ], [ %node, %if.end86 ]
  %function_type_required = getelementptr inbounds %struct.attribute_spec* %17, i64 %indvars.iv, i32 5
  %33 = load i8* %function_type_required, align 1, !tbaa !29, !range !27
  %tobool103 = icmp eq i8 %33, 0
  br i1 %tobool103, label %if.end177, label %land.lhs.true105

land.lhs.true105:                                 ; preds = %if.end102
  %34 = load %union.tree_node** %anode.0, align 8, !tbaa !1
  %code107 = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 0, i32 2
  %bf.load108 = load i32* %code107, align 8
  %bf.clear109 = and i32 %bf.load108, 255
  switch i32 %bf.clear109, label %if.else152 [
    i32 23, label %if.end177
    i32 16, label %if.end177
    i32 13, label %land.lhs.true126
  ]

land.lhs.true126:                                 ; preds = %land.lhs.true105
  %type128 = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 0, i32 1
  %35 = load %union.tree_node** %type128, align 8, !tbaa !30
  %code130 = getelementptr inbounds %union.tree_node* %35, i64 0, i32 0, i32 0, i32 2
  %bf.load131 = load i32* %code130, align 8
  %bf.clear132 = and i32 %bf.load131, 255
  switch i32 %bf.clear132, label %if.else152 [
    i32 23, label %if.then144
    i32 16, label %if.then144
  ]

if.then144:                                       ; preds = %land.lhs.true126, %land.lhs.true126
  %and145 = and i32 %flags.addr.1, 8
  %tobool146 = icmp eq i32 %and145, 0
  br i1 %tobool146, label %if.then147, label %if.end149

if.then147:                                       ; preds = %if.then144
  %call148 = call %union.tree_node* @build_type_copy(%union.tree_node* %34) #4
  store %union.tree_node* %call148, %union.tree_node** %anode.0, align 8, !tbaa !1
  %type151.phi.trans.insert = getelementptr inbounds %union.tree_node* %call148, i64 0, i32 0, i32 0, i32 1
  %.pre.pre = load %union.tree_node** %type151.phi.trans.insert, align 8, !tbaa !1
  %code160.phi.trans.insert.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre.pre, i64 0, i32 0, i32 0, i32 2
  %bf.load161.pre.pre = load i32* %code160.phi.trans.insert.phi.trans.insert, align 8
  br label %if.end149

if.end149:                                        ; preds = %if.then144, %if.then147
  %bf.load161.pre = phi i32 [ %bf.load131, %if.then144 ], [ %bf.load161.pre.pre, %if.then147 ]
  %36 = phi %union.tree_node* [ %34, %if.then144 ], [ %call148, %if.then147 ]
  %type151 = getelementptr inbounds %union.tree_node* %36, i64 0, i32 0, i32 0, i32 1
  br label %if.end158

if.else152:                                       ; preds = %land.lhs.true126, %land.lhs.true105
  %and153 = and i32 %flags.addr.1, 2
  %tobool154 = icmp eq i32 %and153, 0
  br i1 %tobool154, label %if.end158, label %if.then155

if.then155:                                       ; preds = %if.else152
  %call156 = call %union.tree_node* @tree_cons(%union.tree_node* %9, %union.tree_node* %11, %union.tree_node* %returned_attrs.0401) #4
  br label %for.inc291

if.end158:                                        ; preds = %if.else152, %if.end149
  %bf.load161 = phi i32 [ %bf.load161.pre, %if.end149 ], [ %bf.load108, %if.else152 ]
  %anode.1 = phi %union.tree_node** [ %type151, %if.end149 ], [ %anode.0, %if.else152 ]
  %bf.clear162 = and i32 %bf.load161, 255
  switch i32 %bf.clear162, label %if.then172 [
    i32 23, label %if.end177
    i32 16, label %if.end177
  ]

if.then172:                                       ; preds = %if.end158
  %str175 = getelementptr inbounds i8* %8, i64 32
  %37 = bitcast i8* %str175 to i8**
  %38 = load i8** %37, align 8, !tbaa !21
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([46 x i8]* @.str3, i64 0, i64 0), i8* %38) #4
  br label %for.inc291

if.end177:                                        ; preds = %if.end158, %if.end158, %land.lhs.true105, %land.lhs.true105, %if.end102
  %anode.2 = phi %union.tree_node** [ %anode.1, %if.end158 ], [ %anode.0, %land.lhs.true105 ], [ %anode.0, %if.end102 ], [ %anode.0, %land.lhs.true105 ], [ %anode.1, %if.end158 ]
  %handler = getelementptr inbounds %struct.attribute_spec* %17, i64 %indvars.iv, i32 6
  %39 = load %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)** %handler, align 8, !tbaa !31
  %cmp178 = icmp eq %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* %39, null
  br i1 %cmp178, label %if.end184, label %if.then180

if.then180:                                       ; preds = %if.end177
  %call182 = call %union.tree_node* %39(%union.tree_node** %anode.2, %union.tree_node* %9, %union.tree_node* %11, i32 %flags.addr.1, i8* %no_add_attrs) #4
  %call183 = call %union.tree_node* @chainon(%union.tree_node* %call182, %union.tree_node* %returned_attrs.0401) #4
  br label %if.end184

if.end184:                                        ; preds = %if.end177, %if.then180
  %returned_attrs.1 = phi %union.tree_node* [ %call183, %if.then180 ], [ %returned_attrs.0401, %if.end177 ]
  %40 = load i8* %type_required, align 1, !tbaa !28, !range !27
  %tobool186 = icmp eq i8 %40, 0
  br i1 %tobool186, label %if.end223, label %land.lhs.true188

land.lhs.true188:                                 ; preds = %if.end184
  %41 = load %union.tree_node** %node, align 8, !tbaa !1
  %code190 = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 0, i32 2
  %bf.load191 = load i32* %code190, align 8
  %bf.clear192 = and i32 %bf.load191, 255
  %idxprom193382 = zext i32 %bf.clear192 to i64
  %arrayidx194 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom193382
  %42 = load i8* %arrayidx194, align 1, !tbaa !14
  %cmp196 = icmp eq i8 %42, 100
  %bf.clear192.off = add i32 %bf.clear192, -34
  %switch = icmp ult i32 %bf.clear192.off, 3
  %or.cond386 = and i1 %cmp196, %switch
  br i1 %or.cond386, label %if.then219, label %if.end223

if.then219:                                       ; preds = %land.lhs.true188
  %mode = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 5
  %43 = bitcast i48* %mode to i64*
  %bf.load220 = load i64* %43, align 8
  %bf.clear221 = and i64 %bf.load220, -256
  store i64 %bf.clear221, i64* %43, align 8
  %44 = load %union.tree_node** %node, align 8, !tbaa !1
  %size = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 4
  store %union.tree_node* null, %union.tree_node** %size, align 8, !tbaa !32
  %45 = load %union.tree_node** %node, align 8, !tbaa !1
  call void @layout_decl(%union.tree_node* %45, i32 0) #4
  br label %if.end223

if.end223:                                        ; preds = %if.end184, %if.then219, %land.lhs.true188
  %46 = load i8* %no_add_attrs, align 1, !tbaa !18, !range !27
  %tobool224 = icmp eq i8 %46, 0
  br i1 %tobool224, label %if.then225, label %for.inc291

if.then225:                                       ; preds = %if.end223
  %47 = load %union.tree_node** %anode.2, align 8, !tbaa !1
  %code228 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 0, i32 2
  %bf.load229 = load i32* %code228, align 8
  %bf.clear230 = and i32 %bf.load229, 255
  %idxprom231380 = zext i32 %bf.clear230 to i64
  %arrayidx232 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom231380
  %48 = load i8* %arrayidx232, align 1, !tbaa !14
  %cmp234 = icmp eq i8 %48, 100
  br i1 %cmp234, label %if.then236, label %if.else239

if.then236:                                       ; preds = %if.then225
  %attributes238 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 16
  br label %if.end242

if.else239:                                       ; preds = %if.then225
  %attributes241 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 5
  %49 = bitcast i48* %attributes241 to %union.tree_node**
  br label %if.end242

if.end242:                                        ; preds = %if.else239, %if.then236
  %old_attrs.0.in = phi %union.tree_node** [ %attributes238, %if.then236 ], [ %49, %if.else239 ]
  %old_attrs.0 = load %union.tree_node** %old_attrs.0.in, align 8
  %name243 = getelementptr inbounds %struct.attribute_spec* %arrayidx37, i64 0, i32 0
  %50 = load i8** %name243, align 8, !tbaa !19
  %call244 = call %union.tree_node* @lookup_attribute(i8* %50, %union.tree_node* %old_attrs.0) #4
  %cond397 = icmp eq %union.tree_node* %call244, null
  br i1 %cond397, label %if.then263, label %for.body248

for.body248:                                      ; preds = %if.end242, %for.inc256
  %a226.0398 = phi %union.tree_node* [ %call259, %for.inc256 ], [ %call244, %if.end242 ]
  %value250 = getelementptr inbounds %union.tree_node* %a226.0398, i64 0, i32 0, i32 2
  %51 = bitcast i32* %value250 to %union.tree_node**
  %52 = load %union.tree_node** %51, align 8, !tbaa !15
  %call251 = call i32 @simple_cst_equal(%union.tree_node* %52, %union.tree_node* %11) #4
  %cmp252 = icmp eq i32 %call251, 1
  br i1 %cmp252, label %for.inc291, label %for.inc256

for.inc256:                                       ; preds = %for.body248
  %53 = load i8** %name243, align 8, !tbaa !19
  %chain = getelementptr inbounds %union.tree_node* %a226.0398, i64 0, i32 0, i32 0, i32 0
  %54 = load %union.tree_node** %chain, align 8, !tbaa !35
  %call259 = call %union.tree_node* @lookup_attribute(i8* %53, %union.tree_node* %54) #4
  %cond = icmp eq %union.tree_node* %call259, null
  br i1 %cond, label %if.then263, label %for.body248

if.then263:                                       ; preds = %for.inc256, %if.end242
  %55 = load %union.tree_node** %anode.2, align 8, !tbaa !1
  %code265 = getelementptr inbounds %union.tree_node* %55, i64 0, i32 0, i32 0, i32 2
  %bf.load266 = load i32* %code265, align 8
  %bf.clear267 = and i32 %bf.load266, 255
  %idxprom268381 = zext i32 %bf.clear267 to i64
  %arrayidx269 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom268381
  %56 = load i8* %arrayidx269, align 1, !tbaa !14
  %cmp271 = icmp eq i8 %56, 100
  br i1 %cmp271, label %if.then273, label %if.else277

if.then273:                                       ; preds = %if.then263
  %call274 = call %union.tree_node* @tree_cons(%union.tree_node* %9, %union.tree_node* %11, %union.tree_node* %old_attrs.0) #4
  %57 = load %union.tree_node** %anode.2, align 8, !tbaa !1
  %attributes276 = getelementptr inbounds %union.tree_node* %57, i64 0, i32 0, i32 16
  store %union.tree_node* %call274, %union.tree_node** %attributes276, align 8, !tbaa !36
  br label %for.inc291

if.else277:                                       ; preds = %if.then263
  %and278 = and i32 %flags.addr.1, 8
  %tobool279 = icmp eq i32 %and278, 0
  %call285 = call %union.tree_node* @tree_cons(%union.tree_node* %9, %union.tree_node* %11, %union.tree_node* %old_attrs.0) #4
  br i1 %tobool279, label %if.else284, label %if.then280

if.then280:                                       ; preds = %if.else277
  %58 = load %union.tree_node** %anode.2, align 8, !tbaa !1
  %attributes283 = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 5
  %59 = bitcast i48* %attributes283 to %union.tree_node**
  store %union.tree_node* %call285, %union.tree_node** %59, align 8, !tbaa !37
  br label %for.inc291

if.else284:                                       ; preds = %if.else277
  %call286 = call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %55, %union.tree_node* %call285) #4
  store %union.tree_node* %call286, %union.tree_node** %anode.2, align 8, !tbaa !1
  br label %for.inc291

for.inc291:                                       ; preds = %for.body248, %if.end223, %if.then273, %if.else284, %if.then280, %if.then172, %if.then155, %if.else82, %if.then80, %if.then59, %if.then48
  %returned_attrs.2 = phi %union.tree_node* [ %returned_attrs.0401, %if.then48 ], [ %returned_attrs.0401, %if.then59 ], [ %returned_attrs.0401, %if.then172 ], [ %returned_attrs.1, %if.end223 ], [ %returned_attrs.1, %if.then273 ], [ %returned_attrs.1, %if.then280 ], [ %returned_attrs.1, %if.else284 ], [ %call156, %if.then155 ], [ %call81, %if.then80 ], [ %returned_attrs.0401, %if.else82 ], [ %returned_attrs.1, %for.body248 ]
  %flags.addr.2 = phi i32 [ %flags.addr.0404, %if.then48 ], [ %flags.addr.0404, %if.then59 ], [ %flags.addr.1, %if.then172 ], [ %flags.addr.1, %if.end223 ], [ %flags.addr.1, %if.then273 ], [ %flags.addr.1, %if.then280 ], [ %flags.addr.1, %if.else284 ], [ %flags.addr.1, %if.then155 ], [ %flags.addr.0404, %if.then80 ], [ %flags.addr.0404, %if.else82 ], [ %flags.addr.1, %for.body248 ]
  %chain293 = getelementptr inbounds %union.tree_node* %a.0405, i64 0, i32 0, i32 0, i32 0
  %a.0 = load %union.tree_node** %chain293, align 8
  %tobool12 = icmp eq %union.tree_node* %a.0, null
  br i1 %tobool12, label %for.end294, label %for.body

for.end294:                                       ; preds = %for.inc291, %for.cond.preheader
  %returned_attrs.0.lcssa = phi %union.tree_node* [ null, %for.cond.preheader ], [ %returned_attrs.2, %for.inc291 ]
  ret %union.tree_node* %returned_attrs.0.lcssa
}

declare void @insert_default_attributes(%union.tree_node*) #1

declare i32 @is_attribute_p(i8*, %union.tree_node*) #1

declare void @warning(i8*, ...) #1

declare i32 @list_length(%union.tree_node*) #1

declare void @error(i8*, ...) #1

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @build_type_copy(%union.tree_node*) #1

declare %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) #1

declare void @layout_decl(%union.tree_node*, i32) #1

declare %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #1

declare i32 @simple_cst_equal(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @build_type_attribute_variant(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @split_specs_attrs(%union.tree_node* %specs_attrs, %union.tree_node** nocapture %declspecs, %union.tree_node** nocapture %prefix_attributes) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %specs_attrs, null
  br i1 %cmp, label %for.cond.outer.outer, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %specs_attrs, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.then9 [
    i32 25, label %if.then
    i32 2, label %for.cond.outer.outer
  ]

if.then:                                          ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %declspecs, align 8, !tbaa !1
  store %union.tree_node* null, %union.tree_node** %prefix_attributes, align 8, !tbaa !1
  br label %return

if.then9:                                         ; preds = %land.lhs.true
  store %union.tree_node* %specs_attrs, %union.tree_node** %declspecs, align 8, !tbaa !1
  store %union.tree_node* null, %union.tree_node** %prefix_attributes, align 8, !tbaa !1
  br label %return

for.cond.outer77:                                 ; preds = %while.cond, %for.cond.outer
  %a.0.ph78 = phi %union.tree_node* [ %a.0.ph, %for.cond.outer ], [ %a.1, %while.cond ]
  %t.0.ph79 = phi %union.tree_node* [ %t.0.ph76, %for.cond.outer ], [ %0, %while.cond ]
  %attrs.0.ph81 = phi %union.tree_node* [ %attrs.0.ph, %for.cond.outer ], [ %attrs.1.ph, %while.cond ]
  br label %for.cond

for.cond:                                         ; preds = %for.cond.outer77, %if.else19
  %t.0 = phi %union.tree_node* [ %0, %if.else19 ], [ %t.0.ph79, %for.cond.outer77 ]
  %tobool = icmp eq %union.tree_node* %t.0, null
  br i1 %tobool, label %for.end, label %for.body

for.body:                                         ; preds = %for.cond
  %chain = getelementptr inbounds %union.tree_node* %t.0, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain, align 8, !tbaa !35
  %value = getelementptr inbounds %union.tree_node* %t.0, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !15
  %cmp12 = icmp eq %union.tree_node* %2, null
  br i1 %cmp12, label %if.else19, label %if.else

for.cond.outer.outer:                             ; preds = %for.body.us, %entry, %land.lhs.true
  %s.0.ph.ph = phi %union.tree_node* [ null, %land.lhs.true ], [ null, %entry ], [ %t.0.us, %for.body.us ]
  %a.0.ph.ph = phi %union.tree_node* [ null, %land.lhs.true ], [ null, %entry ], [ %a.0.ph78.us, %for.body.us ]
  %t.0.ph76.ph = phi %union.tree_node* [ null, %entry ], [ %specs_attrs, %land.lhs.true ], [ %3, %for.body.us ]
  %attrs.0.ph.ph = phi %union.tree_node* [ null, %land.lhs.true ], [ null, %entry ], [ %attrs.0.ph81.us, %for.body.us ]
  %cmp14 = icmp eq %union.tree_node* %s.0.ph.ph, null
  br i1 %cmp14, label %for.cond.outer77.us, label %for.cond.outer

for.body.us:                                      ; preds = %for.cond.us
  %chain.us = getelementptr inbounds %union.tree_node* %t.0.us, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain.us, align 8, !tbaa !35
  %value.us = getelementptr inbounds %union.tree_node* %t.0.us, i64 0, i32 0, i32 2
  %4 = bitcast i32* %value.us to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !15
  %cmp12.us = icmp eq %union.tree_node* %5, null
  br i1 %cmp12.us, label %if.else19.us, label %for.cond.outer.outer

if.else19.us:                                     ; preds = %for.body.us
  %purpose.us = getelementptr inbounds %union.tree_node* %t.0.us, i64 0, i32 0, i32 1
  %6 = load i8** %purpose.us, align 8
  %cmp21.us = icmp eq i8* %6, null
  br i1 %cmp21.us, label %for.cond.us, label %if.then22.us

if.then22.us:                                     ; preds = %if.else19.us
  %7 = bitcast i8* %6 to %union.tree_node*
  %cmp23.us = icmp eq %union.tree_node* %attrs.0.ph81.us, null
  br i1 %cmp23.us, label %while.cond.preheader.us, label %if.else27.us

if.else27.us:                                     ; preds = %if.then22.us
  %chain31.us = getelementptr inbounds %union.tree_node* %a.0.ph78.us, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %7, %union.tree_node** %chain31.us, align 8, !tbaa !35
  %8 = load i8** %purpose.us, align 8
  %9 = bitcast i8* %8 to %union.tree_node*
  br label %while.cond.preheader.us

while.cond.us:                                    ; preds = %while.cond.preheader.us, %while.cond.us
  %a.1.us = phi %union.tree_node* [ %10, %while.cond.us ], [ %a.1.ph.us, %while.cond.preheader.us ]
  %chain36.us = getelementptr inbounds %union.tree_node* %a.1.us, i64 0, i32 0, i32 0, i32 0
  %10 = load %union.tree_node** %chain36.us, align 8, !tbaa !35
  %cmp37.us = icmp eq %union.tree_node* %10, null
  br i1 %cmp37.us, label %for.cond.outer77.us, label %while.cond.us

while.cond.preheader.us:                          ; preds = %if.else27.us, %if.then22.us
  %a.1.ph.us = phi %union.tree_node* [ %7, %if.then22.us ], [ %9, %if.else27.us ]
  %attrs.1.ph.us = phi %union.tree_node* [ %7, %if.then22.us ], [ %attrs.0.ph81.us, %if.else27.us ]
  br label %while.cond.us

for.cond.us:                                      ; preds = %for.cond.outer77.us, %if.else19.us
  %t.0.us = phi %union.tree_node* [ %3, %if.else19.us ], [ %t.0.ph79.us, %for.cond.outer77.us ]
  %tobool.us = icmp eq %union.tree_node* %t.0.us, null
  br i1 %tobool.us, label %for.end, label %for.body.us

for.cond.outer77.us:                              ; preds = %while.cond.us, %for.cond.outer.outer
  %a.0.ph78.us = phi %union.tree_node* [ %a.0.ph.ph, %for.cond.outer.outer ], [ %a.1.us, %while.cond.us ]
  %t.0.ph79.us = phi %union.tree_node* [ %t.0.ph76.ph, %for.cond.outer.outer ], [ %3, %while.cond.us ]
  %attrs.0.ph81.us = phi %union.tree_node* [ %attrs.0.ph.ph, %for.cond.outer.outer ], [ %attrs.1.ph.us, %while.cond.us ]
  br label %for.cond.us

if.else:                                          ; preds = %for.body
  %chain17 = getelementptr inbounds %union.tree_node* %s.0.ph, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %t.0, %union.tree_node** %chain17, align 8, !tbaa !35
  br label %for.cond.outer

for.cond.outer:                                   ; preds = %for.cond.outer.outer, %if.else
  %s.0.ph = phi %union.tree_node* [ %t.0, %if.else ], [ %s.0.ph.ph, %for.cond.outer.outer ]
  %a.0.ph = phi %union.tree_node* [ %a.0.ph78, %if.else ], [ %a.0.ph.ph, %for.cond.outer.outer ]
  %t.0.ph76 = phi %union.tree_node* [ %0, %if.else ], [ %t.0.ph76.ph, %for.cond.outer.outer ]
  %attrs.0.ph = phi %union.tree_node* [ %attrs.0.ph81, %if.else ], [ %attrs.0.ph.ph, %for.cond.outer.outer ]
  br label %for.cond.outer77

if.else19:                                        ; preds = %for.body
  %purpose = getelementptr inbounds %union.tree_node* %t.0, i64 0, i32 0, i32 1
  %11 = load i8** %purpose, align 8
  %cmp21 = icmp eq i8* %11, null
  br i1 %cmp21, label %for.cond, label %if.then22

if.then22:                                        ; preds = %if.else19
  %12 = bitcast i8* %11 to %union.tree_node*
  %cmp23 = icmp eq %union.tree_node* %attrs.0.ph81, null
  br i1 %cmp23, label %while.cond.preheader, label %if.else27

if.else27:                                        ; preds = %if.then22
  %chain31 = getelementptr inbounds %union.tree_node* %a.0.ph78, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %12, %union.tree_node** %chain31, align 8, !tbaa !35
  %13 = load i8** %purpose, align 8
  %14 = bitcast i8* %13 to %union.tree_node*
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.else27, %if.then22
  %a.1.ph = phi %union.tree_node* [ %12, %if.then22 ], [ %14, %if.else27 ]
  %attrs.1.ph = phi %union.tree_node* [ %12, %if.then22 ], [ %attrs.0.ph81, %if.else27 ]
  br label %while.cond

while.cond:                                       ; preds = %while.cond.preheader, %while.cond
  %a.1 = phi %union.tree_node* [ %15, %while.cond ], [ %a.1.ph, %while.cond.preheader ]
  %chain36 = getelementptr inbounds %union.tree_node* %a.1, i64 0, i32 0, i32 0, i32 0
  %15 = load %union.tree_node** %chain36, align 8, !tbaa !35
  %cmp37 = icmp eq %union.tree_node* %15, null
  br i1 %cmp37, label %for.cond.outer77, label %while.cond

for.end:                                          ; preds = %for.cond.us, %for.cond
  %specs.0.ph.ph106 = phi %union.tree_node* [ %s.0.ph.ph, %for.cond ], [ null, %for.cond.us ]
  %s.0.ph.lcssa88 = phi %union.tree_node* [ %s.0.ph, %for.cond ], [ %s.0.ph.ph, %for.cond.us ]
  %attrs.0.ph81.lcssa87 = phi %union.tree_node* [ %attrs.0.ph81, %for.cond ], [ %attrs.0.ph81.us, %for.cond.us ]
  %a.0.ph78.lcssa86 = phi %union.tree_node* [ %a.0.ph78, %for.cond ], [ %a.0.ph78.us, %for.cond.us ]
  %cmp42 = icmp eq %union.tree_node* %s.0.ph.lcssa88, null
  br i1 %cmp42, label %if.end46, label %if.then43

if.then43:                                        ; preds = %for.end
  %chain45 = getelementptr inbounds %union.tree_node* %s.0.ph.lcssa88, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* null, %union.tree_node** %chain45, align 8, !tbaa !35
  br label %if.end46

if.end46:                                         ; preds = %for.end, %if.then43
  %cmp47 = icmp eq %union.tree_node* %a.0.ph78.lcssa86, null
  br i1 %cmp47, label %if.end51, label %if.then48

if.then48:                                        ; preds = %if.end46
  %chain50 = getelementptr inbounds %union.tree_node* %a.0.ph78.lcssa86, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* null, %union.tree_node** %chain50, align 8, !tbaa !35
  br label %if.end51

if.end51:                                         ; preds = %if.end46, %if.then48
  store %union.tree_node* %specs.0.ph.ph106, %union.tree_node** %declspecs, align 8, !tbaa !1
  store %union.tree_node* %attrs.0.ph81.lcssa87, %union.tree_node** %prefix_attributes, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %if.end51, %if.then9, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @strip_attrs(%union.tree_node* %specs_attrs) #0 {
entry:
  %cmp.i = icmp eq %union.tree_node* %specs_attrs, null
  br i1 %cmp.i, label %for.cond.outer77.us.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %entry
  %code.i = getelementptr inbounds %union.tree_node* %specs_attrs, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  switch i32 %bf.clear.i, label %if.then9.i [
    i32 25, label %while.end
    i32 2, label %for.cond.outer77.us.i
  ]

if.then9.i:                                       ; preds = %land.lhs.true.i
  br label %while.end

for.cond.outer77.i:                               ; preds = %while.cond.i, %for.cond.outer.i
  %a.0.ph78.i = phi %union.tree_node* [ %a.0.ph.i, %for.cond.outer.i ], [ %a.1.i, %while.cond.i ]
  %t.0.ph79.i = phi %union.tree_node* [ %t.0.ph76.i, %for.cond.outer.i ], [ %0, %while.cond.i ]
  %attrs.0.ph81.i = phi %union.tree_node* [ %attrs.0.ph.i, %for.cond.outer.i ], [ %attrs.1.ph.i, %while.cond.i ]
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.else19.i, %for.cond.outer77.i
  %t.0.i = phi %union.tree_node* [ %0, %if.else19.i ], [ %t.0.ph79.i, %for.cond.outer77.i ]
  %tobool.i = icmp eq %union.tree_node* %t.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %for.cond.i
  %chain.i = getelementptr inbounds %union.tree_node* %t.0.i, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain.i, align 8, !tbaa !35
  %value.i = getelementptr inbounds %union.tree_node* %t.0.i, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value.i to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !15
  %cmp12.i = icmp eq %union.tree_node* %2, null
  br i1 %cmp12.i, label %if.else19.i, label %if.else.i

for.body.us.i:                                    ; preds = %for.cond.us.i
  %chain.us.i = getelementptr inbounds %union.tree_node* %t.0.us.i, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain.us.i, align 8, !tbaa !35
  %value.us.i = getelementptr inbounds %union.tree_node* %t.0.us.i, i64 0, i32 0, i32 2
  %4 = bitcast i32* %value.us.i to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !15
  %cmp12.us.i = icmp eq %union.tree_node* %5, null
  br i1 %cmp12.us.i, label %if.else19.us.i, label %for.cond.outer.i

if.else19.us.i:                                   ; preds = %for.body.us.i
  %purpose.us.i = getelementptr inbounds %union.tree_node* %t.0.us.i, i64 0, i32 0, i32 1
  %6 = load i8** %purpose.us.i, align 8
  %cmp21.us.i = icmp eq i8* %6, null
  br i1 %cmp21.us.i, label %for.cond.us.i, label %if.then22.us.i

if.then22.us.i:                                   ; preds = %if.else19.us.i
  %7 = bitcast i8* %6 to %union.tree_node*
  %cmp23.us.i = icmp eq %union.tree_node* %attrs.0.ph81.us.i, null
  br i1 %cmp23.us.i, label %while.cond.preheader.us.i, label %if.else27.us.i

if.else27.us.i:                                   ; preds = %if.then22.us.i
  %chain31.us.i = getelementptr inbounds %union.tree_node* %a.0.ph78.us.i, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %7, %union.tree_node** %chain31.us.i, align 8, !tbaa !35
  %8 = load i8** %purpose.us.i, align 8
  %9 = bitcast i8* %8 to %union.tree_node*
  br label %while.cond.preheader.us.i

while.cond.us.i:                                  ; preds = %while.cond.preheader.us.i, %while.cond.us.i
  %a.1.us.i = phi %union.tree_node* [ %10, %while.cond.us.i ], [ %a.1.ph.us.i, %while.cond.preheader.us.i ]
  %chain36.us.i = getelementptr inbounds %union.tree_node* %a.1.us.i, i64 0, i32 0, i32 0, i32 0
  %10 = load %union.tree_node** %chain36.us.i, align 8, !tbaa !35
  %cmp37.us.i = icmp eq %union.tree_node* %10, null
  br i1 %cmp37.us.i, label %for.cond.outer77.us.i, label %while.cond.us.i

while.cond.preheader.us.i:                        ; preds = %if.else27.us.i, %if.then22.us.i
  %a.1.ph.us.i = phi %union.tree_node* [ %7, %if.then22.us.i ], [ %9, %if.else27.us.i ]
  %attrs.1.ph.us.i = phi %union.tree_node* [ %7, %if.then22.us.i ], [ %attrs.0.ph81.us.i, %if.else27.us.i ]
  br label %while.cond.us.i

for.cond.us.i:                                    ; preds = %for.cond.outer77.us.i, %if.else19.us.i
  %t.0.us.i = phi %union.tree_node* [ %3, %if.else19.us.i ], [ %t.0.ph79.us.i, %for.cond.outer77.us.i ]
  %tobool.us.i = icmp eq %union.tree_node* %t.0.us.i, null
  br i1 %tobool.us.i, label %if.end46.i, label %for.body.us.i

for.cond.outer77.us.i:                            ; preds = %while.cond.us.i, %entry, %land.lhs.true.i
  %a.0.ph78.us.i = phi %union.tree_node* [ null, %land.lhs.true.i ], [ null, %entry ], [ %a.1.us.i, %while.cond.us.i ]
  %t.0.ph79.us.i = phi %union.tree_node* [ null, %entry ], [ %specs_attrs, %land.lhs.true.i ], [ %3, %while.cond.us.i ]
  %attrs.0.ph81.us.i = phi %union.tree_node* [ null, %land.lhs.true.i ], [ null, %entry ], [ %attrs.1.ph.us.i, %while.cond.us.i ]
  br label %for.cond.us.i

if.else.i:                                        ; preds = %for.body.i
  %chain17.i = getelementptr inbounds %union.tree_node* %s.0.ph.i, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %t.0.i, %union.tree_node** %chain17.i, align 8, !tbaa !35
  br label %for.cond.outer.i

for.cond.outer.i:                                 ; preds = %for.body.us.i, %if.else.i
  %s.0.ph.i = phi %union.tree_node* [ %t.0.i, %if.else.i ], [ %t.0.us.i, %for.body.us.i ]
  %a.0.ph.i = phi %union.tree_node* [ %a.0.ph78.i, %if.else.i ], [ %a.0.ph78.us.i, %for.body.us.i ]
  %t.0.ph76.i = phi %union.tree_node* [ %0, %if.else.i ], [ %3, %for.body.us.i ]
  %attrs.0.ph.i = phi %union.tree_node* [ %attrs.0.ph81.i, %if.else.i ], [ %attrs.0.ph81.us.i, %for.body.us.i ]
  br label %for.cond.outer77.i

if.else19.i:                                      ; preds = %for.body.i
  %purpose.i = getelementptr inbounds %union.tree_node* %t.0.i, i64 0, i32 0, i32 1
  %11 = load i8** %purpose.i, align 8
  %cmp21.i = icmp eq i8* %11, null
  br i1 %cmp21.i, label %for.cond.i, label %if.then22.i

if.then22.i:                                      ; preds = %if.else19.i
  %12 = bitcast i8* %11 to %union.tree_node*
  %cmp23.i = icmp eq %union.tree_node* %attrs.0.ph81.i, null
  br i1 %cmp23.i, label %while.cond.preheader.i, label %if.else27.i

if.else27.i:                                      ; preds = %if.then22.i
  %chain31.i = getelementptr inbounds %union.tree_node* %a.0.ph78.i, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %12, %union.tree_node** %chain31.i, align 8, !tbaa !35
  %13 = load i8** %purpose.i, align 8
  %14 = bitcast i8* %13 to %union.tree_node*
  br label %while.cond.preheader.i

while.cond.preheader.i:                           ; preds = %if.else27.i, %if.then22.i
  %a.1.ph.i = phi %union.tree_node* [ %12, %if.then22.i ], [ %14, %if.else27.i ]
  %attrs.1.ph.i = phi %union.tree_node* [ %12, %if.then22.i ], [ %attrs.0.ph81.i, %if.else27.i ]
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %while.cond.preheader.i
  %a.1.i = phi %union.tree_node* [ %15, %while.cond.i ], [ %a.1.ph.i, %while.cond.preheader.i ]
  %chain36.i = getelementptr inbounds %union.tree_node* %a.1.i, i64 0, i32 0, i32 0, i32 0
  %15 = load %union.tree_node** %chain36.i, align 8, !tbaa !35
  %cmp37.i = icmp eq %union.tree_node* %15, null
  br i1 %cmp37.i, label %for.cond.outer77.i, label %while.cond.i

for.end.i:                                        ; preds = %for.cond.i
  %cmp42.i = icmp eq %union.tree_node* %s.0.ph.i, null
  br i1 %cmp42.i, label %if.end46.i, label %if.then43.i

if.then43.i:                                      ; preds = %for.end.i
  %chain45.i = getelementptr inbounds %union.tree_node* %s.0.ph.i, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* null, %union.tree_node** %chain45.i, align 8, !tbaa !35
  br label %if.end46.i

if.end46.i:                                       ; preds = %for.cond.us.i, %if.then43.i, %for.end.i
  %a.0.ph78.lcssa86.i46 = phi %union.tree_node* [ %a.0.ph78.i, %if.then43.i ], [ %a.0.ph78.i, %for.end.i ], [ %a.0.ph78.us.i, %for.cond.us.i ]
  %attrs.0.ph81.lcssa87.i45 = phi %union.tree_node* [ %attrs.0.ph81.i, %if.then43.i ], [ %attrs.0.ph81.i, %for.end.i ], [ %attrs.0.ph81.us.i, %for.cond.us.i ]
  %specs.0.ph.ph106.i44 = phi %union.tree_node* [ %t.0.us.i, %if.then43.i ], [ %t.0.us.i, %for.end.i ], [ null, %for.cond.us.i ]
  %cmp47.i = icmp eq %union.tree_node* %a.0.ph78.lcssa86.i46, null
  br i1 %cmp47.i, label %split_specs_attrs.exit, label %if.then48.i

if.then48.i:                                      ; preds = %if.end46.i
  %chain50.i = getelementptr inbounds %union.tree_node* %a.0.ph78.lcssa86.i46, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* null, %union.tree_node** %chain50.i, align 8, !tbaa !35
  br label %split_specs_attrs.exit

split_specs_attrs.exit:                           ; preds = %if.end46.i, %if.then48.i
  %tobool23 = icmp eq %union.tree_node* %attrs.0.ph81.lcssa87.i45, null
  br i1 %tobool23, label %while.end, label %while.body

while.body:                                       ; preds = %split_specs_attrs.exit, %while.body
  %attrs.0.224 = phi %union.tree_node* [ %19, %while.body ], [ %attrs.0.ph81.lcssa87.i45, %split_specs_attrs.exit ]
  %purpose = getelementptr inbounds %union.tree_node* %attrs.0.224, i64 0, i32 0, i32 1
  %16 = load i8** %purpose, align 8
  %str = getelementptr inbounds i8* %16, i64 32
  %17 = bitcast i8* %str to i8**
  %18 = load i8** %17, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %18) #4
  %chain = getelementptr inbounds %union.tree_node* %attrs.0.224, i64 0, i32 0, i32 0, i32 0
  %19 = load %union.tree_node** %chain, align 8, !tbaa !35
  %tobool = icmp eq %union.tree_node* %19, null
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %land.lhs.true.i, %if.then9.i, %split_specs_attrs.exit
  %specs.0.448 = phi %union.tree_node* [ %specs.0.ph.ph106.i44, %split_specs_attrs.exit ], [ %specs_attrs, %if.then9.i ], [ null, %land.lhs.true.i ], [ %specs.0.ph.ph106.i44, %while.body ]
  ret %union.tree_node* %specs.0.448
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_packed_attribute(%union.tree_node** %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom40 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom40
  %1 = load i8* %arrayidx, align 1, !tbaa !14
  %cmp = icmp eq i8 %1, 100
  br i1 %cmp, label %if.then, label %if.then12

if.then:                                          ; preds = %entry
  %type10 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  switch i32 %bf.clear, label %if.else30 [
    i32 33, label %if.then12
    i32 37, label %if.then26
  ]

if.then12:                                        ; preds = %if.then, %entry
  %type.0.ph = phi %union.tree_node** [ %node, %entry ], [ %type10, %if.then ]
  %and = and i32 %flags, 8
  %tobool13 = icmp eq i32 %and, 0
  %2 = load %union.tree_node** %type.0.ph, align 8, !tbaa !1
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  %call = tail call %union.tree_node* @build_type_copy(%union.tree_node* %2) #4
  store %union.tree_node* %call, %union.tree_node** %type.0.ph, align 8, !tbaa !1
  br label %if.end15

if.end15:                                         ; preds = %if.then12, %if.then14
  %3 = phi %union.tree_node* [ %call, %if.then14 ], [ %2, %if.then12 ]
  %type16 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %packed_flag = getelementptr inbounds %struct.tree_type* %type16, i64 0, i32 6
  %bf.load17 = load i32* %packed_flag, align 4
  %bf.set = or i32 %bf.load17, 1048576
  store i32 %bf.set, i32* %packed_flag, align 4
  br label %if.end32

if.then26:                                        ; preds = %if.then
  %regdecl_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %4 = bitcast i48* %regdecl_flag to i64*
  %bf.load27 = load i64* %4, align 8
  %bf.set29 = or i64 %bf.load27, 1024
  store i64 %bf.set29, i64* %4, align 8
  br label %if.end32

if.else30:                                        ; preds = %if.then
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds i8** %id, i64 1
  %6 = load i8** %5, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %6) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end32

if.end32:                                         ; preds = %if.then26, %if.else30, %if.end15
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_nocommon_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %common_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %1 = bitcast i48* %common_flag to i64*
  %bf.load1 = load i64* %1, align 8
  %bf.clear2 = and i64 %bf.load1, -131073
  store i64 %bf.clear2, i64* %1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %2 = getelementptr inbounds i8** %id, i64 1
  %3 = load i8** %2, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %3) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_common_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %common_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %1 = bitcast i48* %common_flag to i64*
  %bf.load1 = load i64* %1, align 8
  %bf.set = or i64 %bf.load1, 131072
  store i64 %bf.set, i64* %1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %2 = getelementptr inbounds i8** %id, i64 1
  %3 = load i8** %2, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %3) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_noreturn_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %bf.set = or i32 %bf.load, 2048
  store i32 %bf.set, i32* %code, align 8
  br label %if.end30

if.else:                                          ; preds = %entry
  %type1 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type1, align 8, !tbaa !30
  %code7 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 13
  br i1 %cmp10, label %land.lhs.true, label %if.else29

land.lhs.true:                                    ; preds = %if.else
  %type12 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type12, align 8, !tbaa !30
  %code14 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load15 = load i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp eq i32 %bf.clear16, 23
  br i1 %cmp17, label %if.then18, label %if.else29

if.then18:                                        ; preds = %land.lhs.true
  %bf.clear25 = lshr i32 %bf.load15, 12
  %bf.clear25.lobit = and i32 %bf.clear25, 1
  %or = or i32 %bf.clear25.lobit, 2
  %call = tail call %union.tree_node* @build_qualified_type(%union.tree_node* %2, i32 %or) #4
  %call26 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %call) #4
  %3 = load %union.tree_node** %node, align 8, !tbaa !1
  %type28 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call26, %union.tree_node** %type28, align 8, !tbaa !30
  br label %if.end30

if.else29:                                        ; preds = %land.lhs.true, %if.else
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds i8** %id, i64 1
  %5 = load i8** %4, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %5) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end30

if.end30:                                         ; preds = %if.then18, %if.else29, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_noinline_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %uninlinable = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %1 = bitcast i48* %uninlinable to i64*
  %bf.load1 = load i64* %1, align 8
  %bf.set = or i64 %bf.load1, 68719476736
  store i64 %bf.set, i64* %1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %2 = getelementptr inbounds i8** %id, i64 1
  %3 = load i8** %2, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %3) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_always_inline_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.end, label %if.else

if.else:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %1 = getelementptr inbounds i8** %id, i64 1
  %2 = load i8** %1, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %2) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %entry, %if.else
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_used_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %bf.set = or i32 %bf.load, 65536
  store i32 %bf.set, i32* %code, align 8
  %1 = load %union.tree_node** %node, align 8, !tbaa !1
  %assembler_name = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 14
  %2 = load %union.tree_node** %assembler_name, align 8, !tbaa !39
  %cmp4 = icmp eq %union.tree_node* %2, null
  br i1 %cmp4, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.then
  %3 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !1
  tail call void %3(%union.tree_node* %1) #4
  %.pre = load %union.tree_node** %node, align 8, !tbaa !1
  %assembler_name6.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre, i64 0, i32 0, i32 14
  %.pre15 = load %union.tree_node** %assembler_name6.phi.trans.insert, align 8, !tbaa !39
  br label %cond.end

cond.end:                                         ; preds = %if.then, %cond.false
  %4 = phi %union.tree_node* [ %2, %if.then ], [ %.pre15, %cond.false ]
  %static_flag = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %static_flag, align 8
  %bf.set10 = or i32 %bf.load8, 262144
  store i32 %bf.set10, i32* %static_flag, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds i8** %id, i64 1
  %6 = load i8** %5, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %6) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_unused_attribute(%union.tree_node** nocapture %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom57 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom57
  %1 = load i8* %arrayidx, align 1, !tbaa !14
  %cmp = icmp eq i8 %1, 100
  br i1 %cmp, label %if.then, label %if.else39

if.then:                                          ; preds = %entry
  switch i32 %bf.clear, label %if.else [
    i32 35, label %if.then35
    i32 34, label %if.then35
    i32 30, label %if.then35
    i32 31, label %if.then35
    i32 33, label %if.then35
  ]

if.then35:                                        ; preds = %if.then, %if.then, %if.then, %if.then, %if.then
  %bf.set = or i32 %bf.load, 65536
  store i32 %bf.set, i32* %code, align 8
  br label %if.end47

if.else:                                          ; preds = %if.then
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %2 = getelementptr inbounds i8** %id, i64 1
  %3 = load i8** %2, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %3) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end47

if.else39:                                        ; preds = %entry
  %and = and i32 %flags, 8
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.else39
  %call = tail call %union.tree_node* @build_type_copy(%union.tree_node* %0) #4
  store %union.tree_node* %call, %union.tree_node** %node, align 8, !tbaa !1
  %used_flag43.phi.trans.insert = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load44.pre = load i32* %used_flag43.phi.trans.insert, align 8
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then40
  %bf.load44 = phi i32 [ %bf.load, %if.else39 ], [ %bf.load44.pre, %if.then40 ]
  %4 = phi %union.tree_node* [ %0, %if.else39 ], [ %call, %if.then40 ]
  %used_flag43 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.set46 = or i32 %bf.load44, 65536
  store i32 %bf.set46, i32* %used_flag43, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then35, %if.else, %if.end41
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_const_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %bf.set = or i32 %bf.load, 4096
  store i32 %bf.set, i32* %code, align 8
  br label %if.end30

if.else:                                          ; preds = %entry
  %type1 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type1, align 8, !tbaa !30
  %code7 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 13
  br i1 %cmp10, label %land.lhs.true, label %if.else29

land.lhs.true:                                    ; preds = %if.else
  %type12 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type12, align 8, !tbaa !30
  %code14 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load15 = load i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp eq i32 %bf.clear16, 23
  br i1 %cmp17, label %if.then18, label %if.else29

if.then18:                                        ; preds = %land.lhs.true
  %bf.clear25 = lshr i32 %bf.load15, 10
  %3 = and i32 %bf.clear25, 2
  %or = or i32 %3, 1
  %call = tail call %union.tree_node* @build_qualified_type(%union.tree_node* %2, i32 %or) #4
  %call26 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %call) #4
  %4 = load %union.tree_node** %node, align 8, !tbaa !1
  %type28 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call26, %union.tree_node** %type28, align 8, !tbaa !30
  br label %if.end30

if.else29:                                        ; preds = %land.lhs.true, %if.else
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds i8** %id, i64 1
  %6 = load i8** %5, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %6) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end30

if.end30:                                         ; preds = %if.then18, %if.else29, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_transparent_union_attribute(%union.tree_node** nocapture %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom108 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom108
  %1 = load i8* %arrayidx, align 1, !tbaa !14
  switch i8 %1, label %if.else89 [
    i8 100, label %if.end20
    i8 116, label %land.lhs.true
  ]

if.end20:                                         ; preds = %entry
  %type3 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %cmp8 = icmp eq i32 %bf.clear, 33
  br i1 %cmp8, label %if.end20.land.lhs.true_crit_edge, label %if.else52

if.end20.land.lhs.true_crit_edge:                 ; preds = %if.end20
  %.pre = load %union.tree_node** %type3, align 8, !tbaa !1
  %code22.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre, i64 0, i32 0, i32 0, i32 2
  %bf.load23.pre = load i32* %code22.phi.trans.insert, align 8
  br label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end20.land.lhs.true_crit_edge, %entry
  %bf.load23 = phi i32 [ %bf.load23.pre, %if.end20.land.lhs.true_crit_edge ], [ %bf.load, %entry ]
  %2 = phi %union.tree_node* [ %.pre, %if.end20.land.lhs.true_crit_edge ], [ %0, %entry ]
  %type.0111 = phi %union.tree_node** [ %type3, %if.end20.land.lhs.true_crit_edge ], [ %node, %entry ]
  %decl.0109 = phi %union.tree_node* [ %0, %if.end20.land.lhs.true_crit_edge ], [ null, %entry ]
  %bf.clear24 = and i32 %bf.load23, 255
  %cmp25 = icmp eq i32 %bf.clear24, 21
  br i1 %cmp25, label %land.lhs.true27, label %if.else52

land.lhs.true27:                                  ; preds = %land.lhs.true
  %cmp28 = icmp eq %union.tree_node* %decl.0109, null
  br i1 %cmp28, label %if.then45, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true27
  %values = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 1
  %3 = load i8** %values, align 8
  %cmp31 = icmp eq i8* %3, null
  br i1 %cmp31, label %land.lhs.true55, label %land.lhs.true33

land.lhs.true33:                                  ; preds = %lor.lhs.false
  %type30 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type30, i64 0, i32 6
  %bf.load35 = load i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load35, 9
  %bf.clear36 = and i32 %bf.lshr, 127
  %mode40 = getelementptr inbounds i8* %3, i64 48
  %4 = bitcast i8* %mode40 to i64*
  %bf.load41 = load i64* %4, align 8
  %bf.load41.tr = trunc i64 %bf.load41 to i32
  %bf.cast = and i32 %bf.load41.tr, 255
  %cmp43 = icmp eq i32 %bf.clear36, %bf.cast
  br i1 %cmp43, label %if.then45, label %land.lhs.true55

if.then45:                                        ; preds = %land.lhs.true33, %land.lhs.true27
  %and = and i32 %flags, 8
  %tobool46 = icmp eq i32 %and, 0
  br i1 %tobool46, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.then45
  %call = tail call %union.tree_node* @build_type_copy(%union.tree_node* %2) #4
  store %union.tree_node* %call, %union.tree_node** %type.0111, align 8, !tbaa !1
  br label %if.end48

if.end48:                                         ; preds = %if.then45, %if.then47
  %5 = phi %union.tree_node* [ %2, %if.then45 ], [ %call, %if.then47 ]
  %type49 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %transparent_union_flag = getelementptr inbounds %struct.tree_type* %type49, i64 0, i32 6
  %bf.load50 = load i32* %transparent_union_flag, align 4
  %bf.set = or i32 %bf.load50, 524288
  store i32 %bf.set, i32* %transparent_union_flag, align 4
  br label %if.end91

if.else52:                                        ; preds = %land.lhs.true, %if.end20
  %type.0112 = phi %union.tree_node** [ %type.0111, %land.lhs.true ], [ %type3, %if.end20 ]
  %decl.0110 = phi %union.tree_node* [ %decl.0109, %land.lhs.true ], [ %0, %if.end20 ]
  %cmp53 = icmp eq %union.tree_node* %decl.0110, null
  br i1 %cmp53, label %if.else89, label %land.lhs.true55

land.lhs.true55:                                  ; preds = %land.lhs.true33, %lor.lhs.false, %if.else52
  %decl.0110116 = phi %union.tree_node* [ %decl.0110, %if.else52 ], [ %decl.0109, %lor.lhs.false ], [ %decl.0109, %land.lhs.true33 ]
  %type.0112115 = phi %union.tree_node** [ %type.0112, %if.else52 ], [ %type.0111, %lor.lhs.false ], [ %type.0111, %land.lhs.true33 ]
  %code57 = getelementptr inbounds %union.tree_node* %decl.0110116, i64 0, i32 0, i32 0, i32 2
  %bf.load58 = load i32* %code57, align 8
  %bf.clear59 = and i32 %bf.load58, 255
  %cmp60 = icmp eq i32 %bf.clear59, 35
  br i1 %cmp60, label %land.lhs.true62, label %if.else89

land.lhs.true62:                                  ; preds = %land.lhs.true55
  %6 = load %union.tree_node** %type.0112115, align 8, !tbaa !1
  %code64 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load65 = load i32* %code64, align 8
  %bf.clear66 = and i32 %bf.load65, 255
  %cmp67 = icmp eq i32 %bf.clear66, 21
  br i1 %cmp67, label %land.lhs.true69, label %if.else89

land.lhs.true69:                                  ; preds = %land.lhs.true62
  %type70 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %mode71 = getelementptr inbounds %struct.tree_type* %type70, i64 0, i32 6
  %bf.load72 = load i32* %mode71, align 4
  %bf.lshr73 = lshr i32 %bf.load72, 9
  %bf.clear74 = and i32 %bf.lshr73, 127
  %values76 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 1
  %7 = load i8** %values76, align 8
  %mode78 = getelementptr inbounds i8* %7, i64 48
  %8 = bitcast i8* %mode78 to i64*
  %bf.load79 = load i64* %8, align 8
  %bf.load79.tr = trunc i64 %bf.load79 to i32
  %bf.cast81 = and i32 %bf.load79.tr, 255
  %cmp82 = icmp eq i32 %bf.clear74, %bf.cast81
  br i1 %cmp82, label %if.then84, label %if.else89

if.then84:                                        ; preds = %land.lhs.true69
  %transparent_union = getelementptr inbounds %union.tree_node* %decl.0110116, i64 0, i32 0, i32 5
  %9 = bitcast i48* %transparent_union to i64*
  %bf.load86 = load i64* %9, align 8
  %bf.set88 = or i64 %bf.load86, 524288
  store i64 %bf.set88, i64* %9, align 8
  br label %if.end91

if.else89:                                        ; preds = %entry, %if.else52, %land.lhs.true69, %land.lhs.true62, %land.lhs.true55
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds i8** %id, i64 1
  %11 = load i8** %10, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %11) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end91

if.end91:                                         ; preds = %if.then84, %if.else89, %if.end48
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_constructor_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %type1 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type1, align 8, !tbaa !30
  %code4 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load5 = load i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 23
  br i1 %cmp7, label %land.lhs.true8, label %if.else

land.lhs.true8:                                   ; preds = %land.lhs.true
  %call = tail call %union.tree_node* @decl_function_context(%union.tree_node* %0) #4
  %cmp9 = icmp eq %union.tree_node* %call, null
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true8
  %static_ctor_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %2 = bitcast i48* %static_ctor_flag to i64*
  %bf.load11 = load i64* %2, align 8
  %bf.set = or i64 %bf.load11, 1048576
  store i64 %bf.set, i64* %2, align 8
  %bf.load14 = load i32* %code, align 8
  %bf.set16 = or i32 %bf.load14, 65536
  store i32 %bf.set16, i32* %code, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true8, %land.lhs.true, %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id, i64 1
  %4 = load i8** %3, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %4) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_destructor_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %type1 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type1, align 8, !tbaa !30
  %code4 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load5 = load i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 23
  br i1 %cmp7, label %land.lhs.true8, label %if.else

land.lhs.true8:                                   ; preds = %land.lhs.true
  %call = tail call %union.tree_node* @decl_function_context(%union.tree_node* %0) #4
  %cmp9 = icmp eq %union.tree_node* %call, null
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true8
  %static_dtor_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %2 = bitcast i48* %static_dtor_flag to i64*
  %bf.load11 = load i64* %2, align 8
  %bf.set = or i64 %bf.load11, 2097152
  store i64 %bf.set, i64* %2, align 8
  %bf.load14 = load i32* %code, align 8
  %bf.set16 = or i32 %bf.load14, 65536
  store i32 %bf.set16, i32* %code, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true8, %land.lhs.true, %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id, i64 1
  %4 = load i8** %3, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %4) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_mode_attribute(%union.tree_node** nocapture %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readonly %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  %value = getelementptr inbounds %union.tree_node* %args, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !15
  %code = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 1
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id, i64 1
  %4 = load i8** %3, align 8, !tbaa !21
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %4) #4
  br label %if.end72

if.else:                                          ; preds = %entry
  %id4 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds i8** %id4, i64 1
  %6 = load i8** %5, align 8, !tbaa !21
  %call = call i64 @strlen(i8* %6) #4
  %conv = trunc i64 %call to i32
  %cmp6 = icmp sgt i32 %conv, 4
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %7 = load i8* %6, align 1, !tbaa !14
  %cmp9 = icmp eq i8 %7, 95
  br i1 %cmp9, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %land.lhs.true
  %arrayidx12 = getelementptr inbounds i8* %6, i64 1
  %8 = load i8* %arrayidx12, align 1, !tbaa !14
  %cmp14 = icmp eq i8 %8, 95
  br i1 %cmp14, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.lhs.true11
  %sub = shl i64 %call, 32
  %sext = add i64 %sub, -4294967296
  %idxprom = ashr exact i64 %sext, 32
  %arrayidx17 = getelementptr inbounds i8* %6, i64 %idxprom
  %9 = load i8* %arrayidx17, align 1, !tbaa !14
  %cmp19 = icmp eq i8 %9, 95
  br i1 %cmp19, label %land.lhs.true21, label %if.end

land.lhs.true21:                                  ; preds = %land.lhs.true16
  %sext96 = add i64 %sub, -8589934592
  %idxprom23 = ashr exact i64 %sext96, 32
  %arrayidx24 = getelementptr inbounds i8* %6, i64 %idxprom23
  %10 = load i8* %arrayidx24, align 1, !tbaa !14
  %cmp26 = icmp eq i8 %10, 95
  br i1 %cmp26, label %if.then28, label %if.end

if.then28:                                        ; preds = %land.lhs.true21
  %11 = alloca i8, i64 %idxprom, align 1
  %arrayidx31 = getelementptr inbounds i8* %6, i64 2
  %call32 = call i8* @strcpy(i8* %11, i8* %arrayidx31) #4
  %sext97 = add i64 %sub, -17179869184
  %idxprom34 = ashr exact i64 %sext97, 32
  %arrayidx35 = getelementptr inbounds i8* %11, i64 %idxprom34
  store i8 0, i8* %arrayidx35, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then28, %land.lhs.true21, %land.lhs.true16, %land.lhs.true11, %land.lhs.true, %if.else
  %p.0 = phi i8* [ %11, %if.then28 ], [ %6, %land.lhs.true21 ], [ %6, %land.lhs.true16 ], [ %6, %land.lhs.true11 ], [ %6, %land.lhs.true ], [ %6, %if.else ]
  %call36 = call i32 @strcmp(i8* %p.0, i8* getelementptr inbounds ([5 x i8]* @.str44, i64 0, i64 0)) #4
  %tobool = icmp eq i32 %call36, 0
  br i1 %tobool, label %if.then37, label %if.else38

if.then37:                                        ; preds = %if.end
  %12 = load i32* @byte_mode, align 4, !tbaa !14
  br label %if.end57

if.else38:                                        ; preds = %if.end
  %call39 = call i32 @strcmp(i8* %p.0, i8* getelementptr inbounds ([5 x i8]* @.str45, i64 0, i64 0)) #4
  %tobool40 = icmp eq i32 %call39, 0
  br i1 %tobool40, label %if.then41, label %if.else42

if.then41:                                        ; preds = %if.else38
  %13 = load i32* @word_mode, align 4, !tbaa !14
  br label %if.end57

if.else42:                                        ; preds = %if.else38
  %call43 = call i32 @strcmp(i8* %p.0, i8* getelementptr inbounds ([8 x i8]* @.str46, i64 0, i64 0)) #4
  %tobool44 = icmp eq i32 %call43, 0
  br i1 %tobool44, label %if.then45, label %for.body

if.then45:                                        ; preds = %if.else42
  %14 = load i32* @ptr_mode, align 4, !tbaa !14
  br label %if.end57

for.body:                                         ; preds = %if.else42, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.else42 ]
  %mode.098 = phi i32 [ %j.0.mode.0, %for.body ], [ 0, %if.else42 ]
  %arrayidx50 = getelementptr inbounds [59 x i8*]* @mode_name, i64 0, i64 %indvars.iv
  %15 = load i8** %arrayidx50, align 8, !tbaa !1
  %call51 = call i32 @strcmp(i8* %p.0, i8* %15) #4
  %tobool52 = icmp eq i32 %call51, 0
  %16 = trunc i64 %indvars.iv to i32
  %j.0.mode.0 = select i1 %tobool52, i32 %16, i32 %mode.098
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 59
  br i1 %exitcond, label %if.end57, label %for.body

if.end57:                                         ; preds = %for.body, %if.then41, %if.then45, %if.then37
  %mode.2 = phi i32 [ %14, %if.then45 ], [ %13, %if.then41 ], [ %12, %if.then37 ], [ %j.0.mode.0, %for.body ]
  %cmp58 = icmp eq i32 %mode.2, 0
  br i1 %cmp58, label %if.then60, label %if.else61

if.then60:                                        ; preds = %if.end57
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([26 x i8]* @.str47, i64 0, i64 0), i8* %p.0) #4
  br label %if.end72

if.else61:                                        ; preds = %if.end57
  %unsigned_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load63 = load i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load63, 13
  %bf.clear64 = and i32 %bf.lshr, 1
  %call65 = call %union.tree_node* @type_for_mode(i32 %mode.2, i32 %bf.clear64) #4
  %cmp66 = icmp eq %union.tree_node* %call65, null
  br i1 %cmp66, label %if.then68, label %if.else69

if.then68:                                        ; preds = %if.else61
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([27 x i8]* @.str48, i64 0, i64 0), i8* %p.0) #4
  br label %if.end72

if.else69:                                        ; preds = %if.else61
  store %union.tree_node* %call65, %union.tree_node** %node, align 8, !tbaa !1
  br label %if.end72

if.end72:                                         ; preds = %if.then60, %if.else69, %if.then68, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_section_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readnone %name, %union.tree_node* nocapture readonly %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %1 = load i8* getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 13), align 8, !tbaa !40, !range !27
  %tobool = icmp eq i8 %1, 0
  br i1 %tobool, label %if.else44, label %if.then

if.then:                                          ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else42 [
    i32 30, label %land.lhs.true
    i32 34, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %if.then, %if.then
  %value = getelementptr inbounds %union.tree_node* %args, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !15
  %code7 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 29
  br i1 %cmp10, label %if.then11, label %if.else42

if.then11:                                        ; preds = %land.lhs.true
  %cmp16 = icmp eq i32 %bf.clear, 34
  %4 = load %union.tree_node** @current_function_decl, align 8
  %cmp18 = icmp ne %union.tree_node* %4, null
  %or.cond = and i1 %cmp16, %cmp18
  %bf.clear22 = and i32 %bf.load, 262144
  %tobool23 = icmp eq i32 %bf.clear22, 0
  %or.cond61 = and i1 %or.cond, %tobool23
  br i1 %or.cond61, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.then11
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([58 x i8]* @.str40, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end45

if.else:                                          ; preds = %if.then11
  %section_name = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 15
  %5 = load %union.tree_node** %section_name, align 8, !tbaa !41
  %cmp26 = icmp eq %union.tree_node* %5, null
  br i1 %cmp26, label %if.else36, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %if.else
  %pointer = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 4
  %6 = load %union.tree_node** %pointer, align 8
  %7 = bitcast %union.tree_node* %6 to i8*
  %pointer33 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 4
  %8 = load %union.tree_node** %pointer33, align 8
  %9 = bitcast %union.tree_node* %8 to i8*
  %call = tail call i32 @strcmp(i8* %7, i8* %9) #4
  %cmp34 = icmp eq i32 %call, 0
  br i1 %cmp34, label %if.else36, label %if.then35

if.then35:                                        ; preds = %land.lhs.true27
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([52 x i8]* @.str41, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end45

if.else36:                                        ; preds = %land.lhs.true27, %if.else
  store %union.tree_node* %3, %union.tree_node** %section_name, align 8, !tbaa !41
  br label %if.end45

if.else42:                                        ; preds = %if.then, %land.lhs.true
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([39 x i8]* @.str42, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end45

if.else44:                                        ; preds = %entry
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([53 x i8]* @.str43, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end45

if.end45:                                         ; preds = %if.else42, %if.then35, %if.else36, %if.then24, %if.else44
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_aligned_attribute(%union.tree_node** nocapture %node, %union.tree_node* nocapture readnone %name, %union.tree_node* readonly %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %tobool = icmp eq %union.tree_node* %args, null
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %value = getelementptr inbounds %union.tree_node* %args, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !15
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = tail call %union.tree_node* @size_int_wide(i64 16, i32 0) #4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %1, %cond.true ], [ %call, %cond.false ]
  %2 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom162 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom162
  %3 = load i8* %arrayidx, align 1, !tbaa !14
  switch i8 %3, label %while.cond.preheader [
    i8 100, label %if.then
    i8 116, label %if.then19
  ]

if.then:                                          ; preds = %cond.end
  %type3 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %cmp8 = icmp eq i32 %bf.clear, 33
  %conv9 = zext i1 %cmp8 to i32
  br label %while.cond.preheader

if.then19:                                        ; preds = %cond.end
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then19, %if.then, %cond.end
  %is_type.0.ph = phi i32 [ 0, %cond.end ], [ %conv9, %if.then ], [ 1, %if.then19 ]
  %type.0.ph = phi %union.tree_node** [ null, %cond.end ], [ %type3, %if.then ], [ %node, %if.then19 ]
  %decl.0.ph = phi %union.tree_node* [ null, %cond.end ], [ %2, %if.then ], [ null, %if.then19 ]
  %code22163 = getelementptr inbounds %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 2
  %bf.load23164 = load i32* %code22163, align 8
  %bf.clear24165 = and i32 %bf.load23164, 255
  %bf.clear24.off166 = add i32 %bf.clear24165, -114
  %switch167 = icmp ult i32 %bf.clear24.off166, 3
  br i1 %switch167, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %while.body, %while.cond.preheader
  %bf.clear24.lcssa = phi i32 [ %bf.clear24165, %while.cond.preheader ], [ %bf.clear24, %while.body ]
  %align_expr.0.lcssa = phi %union.tree_node* [ %cond, %while.cond.preheader ], [ %4, %while.body ]
  %cmp44 = icmp eq i32 %bf.clear24.lcssa, 25
  br i1 %cmp44, label %if.else47, label %if.then46

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %align_expr.0168 = phi %union.tree_node* [ %4, %while.body ], [ %cond, %while.cond.preheader ]
  %operands = getelementptr inbounds %union.tree_node* %align_expr.0168, i64 0, i32 0, i32 2
  %arrayidx39 = bitcast i32* %operands to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx39, align 8, !tbaa !1
  %code22 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load23 = load i32* %code22, align 8
  %bf.clear24 = and i32 %bf.load23, 255
  %bf.clear24.off = add i32 %bf.clear24, -114
  %switch = icmp ult i32 %bf.clear24.off, 3
  br i1 %switch, label %while.body, label %lor.rhs

if.then46:                                        ; preds = %lor.rhs
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str36, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end128

if.else47:                                        ; preds = %lor.rhs
  %call48 = tail call i32 @tree_log2(%union.tree_node* %align_expr.0.lcssa) #4
  %cmp49 = icmp eq i32 %call48, -1
  br i1 %cmp49, label %if.then51, label %if.else52

if.then51:                                        ; preds = %if.else47
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([40 x i8]* @.str37, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end128

if.else52:                                        ; preds = %if.else47
  %cmp53 = icmp sgt i32 %call48, 30
  br i1 %cmp53, label %if.then55, label %if.else56

if.then55:                                        ; preds = %if.else52
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([33 x i8]* @.str38, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end128

if.else56:                                        ; preds = %if.else52
  %tobool57 = icmp eq i32 %is_type.0.ph, 0
  br i1 %tobool57, label %if.else96, label %if.then58

if.then58:                                        ; preds = %if.else56
  %tobool59 = icmp eq %union.tree_node* %decl.0.ph, null
  br i1 %tobool59, label %if.else85, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then58
  %type61 = getelementptr inbounds %union.tree_node* %decl.0.ph, i64 0, i32 0, i32 0, i32 1
  %5 = load %union.tree_node** %type61, align 8, !tbaa !30
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !1
  %cmp62 = icmp eq %union.tree_node* %5, %6
  br i1 %cmp62, label %if.else85, label %land.lhs.true64

land.lhs.true64:                                  ; preds = %land.lhs.true
  %result = getelementptr inbounds %union.tree_node* %decl.0.ph, i64 0, i32 0, i32 11
  %7 = load %union.tree_node** %result, align 8, !tbaa !42
  %cmp66 = icmp eq %union.tree_node* %7, null
  br i1 %cmp66, label %if.then68, label %if.else85

if.then68:                                        ; preds = %land.lhs.true64
  %8 = load %union.tree_node** %type.0.ph, align 8, !tbaa !1
  %call71 = tail call %union.tree_node* @build_type_copy(%union.tree_node* %8) #4
  store %union.tree_node* %call71, %union.tree_node** %type.0.ph, align 8, !tbaa !1
  store %union.tree_node* %5, %union.tree_node** %result, align 8, !tbaa !42
  %9 = load %union.tree_node** %type.0.ph, align 8, !tbaa !1
  %10 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 11
  store %union.tree_node* %decl.0.ph, %union.tree_node** %10, align 8, !tbaa !43
  %used_flag = getelementptr inbounds %union.tree_node* %decl.0.ph, i64 0, i32 0, i32 0, i32 2
  %bf.load77 = load i32* %used_flag, align 8
  %bf.clear78 = and i32 %bf.load77, 65536
  %11 = load %union.tree_node** %type.0.ph, align 8, !tbaa !1
  %used_flag80 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %bf.load81 = load i32* %used_flag80, align 8
  %bf.clear82 = and i32 %bf.load81, -65537
  %bf.set = or i32 %bf.clear82, %bf.clear78
  store i32 %bf.set, i32* %used_flag80, align 8
  %12 = load %union.tree_node** %type.0.ph, align 8, !tbaa !1
  store %union.tree_node* %12, %union.tree_node** %type61, align 8, !tbaa !30
  br label %if.end90

if.else85:                                        ; preds = %land.lhs.true, %if.then58, %land.lhs.true64
  %and = and i32 %flags, 8
  %tobool86 = icmp eq i32 %and, 0
  br i1 %tobool86, label %if.then87, label %if.end90

if.then87:                                        ; preds = %if.else85
  %13 = load %union.tree_node** %type.0.ph, align 8, !tbaa !1
  %call88 = tail call %union.tree_node* @build_type_copy(%union.tree_node* %13) #4
  store %union.tree_node* %call88, %union.tree_node** %type.0.ph, align 8, !tbaa !1
  br label %if.end90

if.end90:                                         ; preds = %if.else85, %if.then87, %if.then68
  %mul = shl i32 8, %call48
  %14 = load %union.tree_node** %type.0.ph, align 8, !tbaa !1
  %align = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 7
  %15 = bitcast %union.tree_node** %align to i32*
  store i32 %mul, i32* %15, align 4, !tbaa !44
  %type92 = bitcast %union.tree_node* %14 to %struct.tree_type*
  %user_align = getelementptr inbounds %struct.tree_type* %type92, i64 0, i32 6
  %bf.load93 = load i32* %user_align, align 4
  %bf.set95 = or i32 %bf.load93, -2147483648
  store i32 %bf.set95, i32* %user_align, align 4
  br label %if.end128

if.else96:                                        ; preds = %if.else56
  %code98 = getelementptr inbounds %union.tree_node* %decl.0.ph, i64 0, i32 0, i32 0, i32 2
  %bf.load99 = load i32* %code98, align 8
  %bf.clear100 = and i32 %bf.load99, 255
  switch i32 %bf.clear100, label %if.then110 [
    i32 34, label %if.else111
    i32 37, label %if.else111
  ]

if.then110:                                       ; preds = %if.else96
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl.0.ph, i8* getelementptr inbounds ([40 x i8]* @.str39, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end128

if.else111:                                       ; preds = %if.else96, %if.else96
  %mul113 = shl i32 8, %call48
  %u1 = getelementptr inbounds %union.tree_node* %decl.0.ph, i64 0, i32 0, i32 6
  %16 = bitcast %union.anon* %u1 to i32*
  %bf.load115 = load i32* %16, align 4
  %bf.value116 = and i32 %mul113, 16777215
  %bf.clear117 = and i32 %bf.load115, -16777216
  %bf.set118 = or i32 %bf.clear117, %bf.value116
  store i32 %bf.set118, i32* %16, align 4
  %user_align120 = getelementptr inbounds %union.tree_node* %decl.0.ph, i64 0, i32 0, i32 5
  %17 = bitcast i48* %user_align120 to i64*
  %bf.load121 = load i64* %17, align 8
  %bf.set123 = or i64 %bf.load121, 34359738368
  store i64 %bf.set123, i64* %17, align 8
  br label %if.end128

if.end128:                                        ; preds = %if.then51, %if.end90, %if.else111, %if.then110, %if.then55, %if.then46
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_weak_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readnone %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture readnone %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  tail call void @declare_weak(%union.tree_node* %0) #4
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_alias_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readonly %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %land.lhs.true, label %land.lhs.true7

land.lhs.true:                                    ; preds = %entry
  %initial = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 12
  %1 = load %union.tree_node** %initial, align 8, !tbaa !45
  %tobool = icmp eq %union.tree_node* %1, null
  br i1 %tobool, label %if.else, label %if.then

land.lhs.true7:                                   ; preds = %entry
  %external_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %2 = bitcast i48* %external_flag to i64*
  %bf.load9 = load i64* %2, align 8
  %bf.cast = and i64 %bf.load9, 256
  %tobool11 = icmp eq i64 %bf.cast, 0
  br i1 %tobool11, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true, %land.lhs.true7
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([43 x i8]* @.str34, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %return

if.else:                                          ; preds = %land.lhs.true, %land.lhs.true7
  %call = tail call %union.tree_node* @decl_function_context(%union.tree_node* %0) #4
  %cmp12 = icmp eq %union.tree_node* %call, null
  br i1 %cmp12, label %if.then13, label %if.else38

if.then13:                                        ; preds = %if.else
  %value = getelementptr inbounds %union.tree_node* %args, i64 0, i32 0, i32 2
  %3 = bitcast i32* %value to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !15
  %code15 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load16 = load i32* %code15, align 8
  %bf.clear17 = and i32 %bf.load16, 255
  %cmp18 = icmp eq i32 %bf.clear17, 29
  br i1 %cmp18, label %if.end, label %if.then19

if.then19:                                        ; preds = %if.then13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([23 x i8]* @.str35, i64 0, i64 0)) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %return

if.end:                                           ; preds = %if.then13
  %pointer = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 4
  %5 = load %union.tree_node** %pointer, align 8
  %6 = bitcast %union.tree_node* %5 to i8*
  %call20 = tail call %union.tree_node* @get_identifier(i8* %6) #4
  %used_flag = getelementptr inbounds %union.tree_node* %call20, i64 0, i32 0, i32 0, i32 2
  %bf.load22 = load i32* %used_flag, align 8
  %bf.set = or i32 %bf.load22, 65536
  store i32 %bf.set, i32* %used_flag, align 8
  %bf.load26 = load i32* %code, align 8
  %bf.clear27 = and i32 %bf.load26, 255
  %cmp28 = icmp eq i32 %bf.clear27, 30
  br i1 %cmp28, label %if.then29, label %if.else32

if.then29:                                        ; preds = %if.end
  %7 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !1
  %initial31 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 12
  store %union.tree_node* %7, %union.tree_node** %initial31, align 8, !tbaa !45
  br label %return

if.else32:                                        ; preds = %if.end
  %external_flag34 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %8 = bitcast i48* %external_flag34 to i64*
  %bf.load35 = load i64* %8, align 8
  %bf.clear36 = and i64 %bf.load35, -257
  store i64 %bf.clear36, i64* %8, align 8
  br label %return

if.else38:                                        ; preds = %if.else
  %id39 = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds i8** %id39, i64 1
  %10 = load i8** %9, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %10) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %return

return:                                           ; preds = %if.then, %if.then29, %if.else32, %if.else38, %if.then19
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_no_instrument_function_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %1 = getelementptr inbounds i8** %id, i64 1
  %2 = load i8** %1, align 8, !tbaa !21
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([41 x i8]* @.str32, i64 0, i64 0), i8* %2) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end10

if.else:                                          ; preds = %entry
  %initial = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 12
  %3 = load %union.tree_node** %initial, align 8, !tbaa !45
  %tobool = icmp eq %union.tree_node* %3, null
  br i1 %tobool, label %if.else6, label %if.then2

if.then2:                                         ; preds = %if.else
  %id4 = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds i8** %id4, i64 1
  %5 = load i8** %4, align 8, !tbaa !21
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([42 x i8]* @.str33, i64 0, i64 0), i8* %5) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end10

if.else6:                                         ; preds = %if.else
  %no_instrument_function_entry_exit = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %6 = bitcast i48* %no_instrument_function_entry_exit to i64*
  %bf.load8 = load i64* %6, align 8
  %bf.set = or i64 %bf.load8, 33554432
  store i64 %bf.set, i64* %6, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then2, %if.else6, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_malloc_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %malloc_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %1 = bitcast i48* %malloc_flag to i64*
  %bf.load1 = load i64* %1, align 8
  %bf.set = or i64 %bf.load1, 134217728
  store i64 %bf.set, i64* %1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %2 = getelementptr inbounds i8** %id, i64 1
  %3 = load i8** %2, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %3) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_no_limit_stack_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %1 = getelementptr inbounds i8** %id, i64 1
  %2 = load i8** %1, align 8, !tbaa !21
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([41 x i8]* @.str32, i64 0, i64 0), i8* %2) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end10

if.else:                                          ; preds = %entry
  %initial = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 12
  %3 = load %union.tree_node** %initial, align 8, !tbaa !45
  %tobool = icmp eq %union.tree_node* %3, null
  br i1 %tobool, label %if.else6, label %if.then2

if.then2:                                         ; preds = %if.else
  %id4 = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds i8** %id4, i64 1
  %5 = load i8** %4, align 8, !tbaa !21
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([42 x i8]* @.str33, i64 0, i64 0), i8* %5) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end10

if.else6:                                         ; preds = %if.else
  %no_limit_stack = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %6 = bitcast i48* %no_limit_stack to i64*
  %bf.load8 = load i64* %6, align 8
  %bf.set = or i64 %bf.load8, 268435456
  store i64 %bf.set, i64* %6, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then2, %if.else6, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_pure_attribute(%union.tree_node** nocapture readonly %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %pure_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %1 = bitcast i48* %pure_flag to i64*
  %bf.load1 = load i64* %1, align 8
  %bf.set = or i64 %bf.load1, 2147483648
  store i64 %bf.set, i64* %1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %2 = getelementptr inbounds i8** %id, i64 1
  %3 = load i8** %2, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %3) #4
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_deprecated_attribute(%union.tree_node** nocapture %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readnone %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom135 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom135
  %1 = load i8* %arrayidx, align 1, !tbaa !14
  switch i8 %1, label %if.then63.thread [
    i8 100, label %if.then
    i8 116, label %if.then51
  ]

if.then63.thread:                                 ; preds = %entry
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  br label %if.end105.thread

if.then:                                          ; preds = %entry
  %type3 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type3, align 8, !tbaa !30
  switch i32 %bf.clear, label %if.then63 [
    i32 33, label %if.then37
    i32 35, label %if.then37
    i32 34, label %if.then37
    i32 30, label %if.then37
    i32 37, label %if.then37
  ]

if.then37:                                        ; preds = %if.then, %if.then, %if.then, %if.then, %if.then
  %bf.set = or i32 %bf.load, 8388608
  store i32 %bf.set, i32* %code, align 8
  br label %if.end116

if.then51:                                        ; preds = %entry
  %and = and i32 %flags, 8
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.then51
  %call = tail call %union.tree_node* @build_type_copy(%union.tree_node* %0) #4
  store %union.tree_node* %call, %union.tree_node** %node, align 8, !tbaa !1
  %deprecated_flag55.phi.trans.insert = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load56.pre = load i32* %deprecated_flag55.phi.trans.insert, align 8
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then52
  %bf.load56 = phi i32 [ %bf.load, %if.then51 ], [ %bf.load56.pre, %if.then52 ]
  %3 = phi %union.tree_node* [ %0, %if.then51 ], [ %call, %if.then52 ]
  %deprecated_flag55 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.set58 = or i32 %bf.load56, 8388608
  store i32 %bf.set58, i32* %deprecated_flag55, align 8
  br label %if.end116

if.then63:                                        ; preds = %if.then
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  %tobool64 = icmp eq %union.tree_node* %2, null
  br i1 %tobool64, label %if.end105.thread, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then63
  %4 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 11
  %5 = load %union.tree_node** %4, align 8, !tbaa !43
  %tobool67 = icmp eq %union.tree_node* %5, null
  br i1 %tobool67, label %if.end105.thread, label %if.then68

if.then68:                                        ; preds = %land.lhs.true
  %code72 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.load73 = load i32* %code72, align 8
  %bf.clear74 = and i32 %bf.load73, 255
  switch i32 %bf.clear74, label %if.end105.thread [
    i32 1, label %if.then77
    i32 33, label %land.lhs.true89
  ]

if.then77:                                        ; preds = %if.then68
  %6 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 11
  %7 = load %union.tree_node** %6, align 8, !tbaa !43
  br label %if.end105

land.lhs.true89:                                  ; preds = %if.then68
  %name93 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 8
  %8 = load %union.tree_node** %name93, align 8, !tbaa !46
  %tobool94 = icmp eq %union.tree_node* %8, null
  br i1 %tobool94, label %if.end105.thread, label %if.end105

if.end105.thread:                                 ; preds = %land.lhs.true89, %land.lhs.true, %if.then63, %if.then68, %if.then63.thread
  %id109139 = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds i8** %id109139, i64 1
  %10 = load i8** %9, align 8, !tbaa !21
  br label %if.else111

if.end105:                                        ; preds = %land.lhs.true89, %if.then77
  %.pn = phi %union.tree_node* [ %7, %if.then77 ], [ %8, %land.lhs.true89 ]
  %id.pn = getelementptr inbounds %union.tree_node* %.pn, i64 0, i32 0, i32 1
  %what.0.in = getelementptr inbounds i8** %id.pn, i64 1
  %what.0 = load i8** %what.0.in, align 8
  %tobool106 = icmp eq i8* %what.0, null
  %id109 = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds i8** %id109, i64 1
  %12 = load i8** %11, align 8, !tbaa !21
  br i1 %tobool106, label %if.else111, label %if.then107

if.then107:                                       ; preds = %if.end105
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([32 x i8]* @.str31, i64 0, i64 0), i8* %12, i8* %what.0) #4
  br label %if.end116

if.else111:                                       ; preds = %if.end105.thread, %if.end105
  %13 = phi i8* [ %10, %if.end105.thread ], [ %12, %if.end105 ]
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %13) #4
  br label %if.end116

if.end116:                                        ; preds = %if.then37, %if.end53, %if.then107, %if.else111
  ret %union.tree_node* null
}

; Function Attrs: nounwind uwtable
define internal noalias %union.tree_node* @handle_vector_size_attribute(%union.tree_node** nocapture %node, %union.tree_node* nocapture readonly %name, %union.tree_node* nocapture readonly %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  %0 = load %union.tree_node** %node, align 8, !tbaa !1
  store i8 1, i8* %no_add_attrs, align 1, !tbaa !18
  %value = getelementptr inbounds %union.tree_node* %args, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !15
  %call = tail call i32 @host_integerp(%union.tree_node* %2, i32 1) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id, i64 1
  %4 = load i8** %3, align 8, !tbaa !21
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %4) #4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %union.tree_node** %1, align 8, !tbaa !15
  %call3 = tail call i64 @tree_low_cst(%union.tree_node* %5, i32 1) #4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %type.0 = phi %union.tree_node* [ %0, %if.end ], [ %6, %while.body ]
  %code = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %lor.lhs.false31 [
    i32 13, label %while.body
    i32 15, label %while.body
    i32 23, label %while.body
    i32 18, label %while.body
    i32 20, label %if.then40
  ]

while.body:                                       ; preds = %while.cond, %while.cond, %while.cond, %while.cond
  %type21 = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type21, align 8, !tbaa !30
  br label %while.cond

lor.lhs.false31:                                  ; preds = %while.cond
  %type22 = bitcast %union.tree_node* %type.0 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr = lshr i32 %bf.load24, 9
  %bf.clear25 = and i32 %bf.lshr, 127
  %idxprom117 = zext i32 %bf.clear25 to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom117
  %7 = load i32* %arrayidx, align 4, !tbaa !14
  %.off = add i32 %7, -1
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %lor.lhs.false36, label %if.then40

lor.lhs.false36:                                  ; preds = %lor.lhs.false31
  %8 = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 4
  %9 = load %union.tree_node** %8, align 8, !tbaa !47
  %call38 = tail call i32 @host_integerp(%union.tree_node* %9, i32 1) #4
  %tobool39 = icmp eq i32 %call38, 0
  br i1 %tobool39, label %if.then40, label %if.end44

if.then40:                                        ; preds = %while.cond, %lor.lhs.false31, %lor.lhs.false36
  %id42 = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds i8** %id42, i64 1
  %11 = load i8** %10, align 8, !tbaa !21
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([39 x i8]* @.str29, i64 0, i64 0), i8* %11) #4
  br label %return

if.end44:                                         ; preds = %lor.lhs.false36
  %12 = load %union.tree_node** %8, align 8, !tbaa !47
  %call47 = tail call i64 @tree_low_cst(%union.tree_node* %12, i32 1) #4
  %div = udiv i64 %call3, %call47
  %cmp50 = icmp eq i32 %7, 1
  %idxprom51 = select i1 %cmp50, i64 7, i64 8
  %arrayidx52 = getelementptr inbounds [9 x i32]* @class_narrowest_mode, i64 0, i64 %idxprom51
  %13 = load i32* %arrayidx52, align 4, !tbaa !14
  %cmp53123 = icmp eq i32 %13, 0
  br i1 %cmp53123, label %if.then82, label %for.body

for.body:                                         ; preds = %if.end44, %for.inc
  %mode.0124 = phi i32 [ %conv79, %for.inc ], [ %13, %if.end44 ]
  %idxprom54 = sext i32 %mode.0124 to i64
  %arrayidx55 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom54
  %14 = load i8* %arrayidx55, align 1, !tbaa !14
  %conv = zext i8 %14 to i64
  %cmp56 = icmp eq i64 %call3, %conv
  br i1 %cmp56, label %land.lhs.true58, label %for.inc

land.lhs.true58:                                  ; preds = %for.body
  %arrayidx60 = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom54
  %15 = load i8* %arrayidx60, align 1, !tbaa !14
  %cmp62 = icmp eq i8 %15, 0
  br i1 %cmp62, label %cond.end, label %cond.false

cond.false:                                       ; preds = %land.lhs.true58
  %div118 = udiv i8 %14, %15
  %phitmp = zext i8 %div118 to i64
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true58, %cond.false
  %cond71 = phi i64 [ %phitmp, %cond.false ], [ 0, %land.lhs.true58 ]
  %cmp73 = icmp eq i64 %div, %cond71
  br i1 %cmp73, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body, %cond.end
  %arrayidx78 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom54
  %16 = load i8* %arrayidx78, align 1, !tbaa !14
  %conv79 = zext i8 %16 to i32
  %cmp53 = icmp eq i8 %16, 0
  br i1 %cmp53, label %if.then82, label %for.body

for.end:                                          ; preds = %cond.end
  %cmp80 = icmp eq i32 %mode.0124, 0
  br i1 %cmp80, label %if.then82, label %if.else

if.then82:                                        ; preds = %for.inc, %if.end44, %for.end
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([63 x i8]* @.str30, i64 0, i64 0)) #4
  br label %return

if.else:                                          ; preds = %for.end
  %bf.load84 = load i32* %code, align 8
  %bf.lshr85 = lshr i32 %bf.load84, 13
  %bf.clear86 = and i32 %bf.lshr85, 1
  %call87 = tail call %union.tree_node* @type_for_mode(i32 %mode.0124, i32 %bf.clear86) #4
  %tobool88 = icmp eq %union.tree_node* %call87, null
  br i1 %tobool88, label %if.then89, label %if.else90

if.then89:                                        ; preds = %if.else
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([63 x i8]* @.str30, i64 0, i64 0)) #4
  br label %return

if.else90:                                        ; preds = %if.else
  %17 = load %union.tree_node** %node, align 8, !tbaa !1
  %call91 = tail call fastcc %union.tree_node* @vector_size_helper(%union.tree_node* %17, %union.tree_node* %call87)
  store %union.tree_node* %call91, %union.tree_node** %node, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %if.then82, %if.else90, %if.then89, %if.then40, %if.then
  ret %union.tree_node* null
}

declare i32 @host_integerp(%union.tree_node*, i32) #1

declare i64 @tree_low_cst(%union.tree_node*, i32) #1

declare %union.tree_node* @type_for_mode(i32, i32) #1

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @vector_size_helper(%union.tree_node* nocapture readonly %type, %union.tree_node* readnone %bottom) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return [
    i32 13, label %if.then
    i32 15, label %if.then
    i32 18, label %if.then14
    i32 23, label %if.then26
  ]

if.then:                                          ; preds = %entry, %entry
  %type7 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type7, align 8, !tbaa !30
  %call = tail call fastcc %union.tree_node* @vector_size_helper(%union.tree_node* %0, %union.tree_node* %bottom)
  %call8 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %call) #4
  br label %if.end35

if.then14:                                        ; preds = %entry
  %type16 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type16, align 8, !tbaa !30
  %call17 = tail call fastcc %union.tree_node* @vector_size_helper(%union.tree_node* %1, %union.tree_node* %bottom)
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %2 = load i8** %values, align 8
  %3 = bitcast i8* %2 to %union.tree_node*
  %call19 = tail call %union.tree_node* @build_array_type(%union.tree_node* %call17, %union.tree_node* %3) #4
  br label %if.end35

if.then26:                                        ; preds = %entry
  %type28 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type28, align 8, !tbaa !30
  %call29 = tail call fastcc %union.tree_node* @vector_size_helper(%union.tree_node* %4, %union.tree_node* %bottom)
  %values31 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %5 = load i8** %values31, align 8
  %6 = bitcast i8* %5 to %union.tree_node*
  %call32 = tail call %union.tree_node* @build_function_type(%union.tree_node* %call29, %union.tree_node* %6) #4
  br label %if.end35

if.end35:                                         ; preds = %if.then14, %if.then26, %if.then
  %outer.0 = phi %union.tree_node* [ %call8, %if.then ], [ %call19, %if.then14 ], [ %call32, %if.then26 ]
  %bf.load37 = load i32* %code, align 8
  %bf.clear38 = and i32 %bf.load37, 4096
  %readonly_flag40 = getelementptr inbounds %union.tree_node* %outer.0, i64 0, i32 0, i32 0, i32 2
  %bf.load41 = load i32* %readonly_flag40, align 8
  %bf.clear42 = and i32 %bf.load41, -4097
  %bf.set = or i32 %bf.clear42, %bf.clear38
  store i32 %bf.set, i32* %readonly_flag40, align 8
  %bf.load44 = load i32* %code, align 8
  %bf.clear46 = and i32 %bf.load44, 2048
  %bf.clear52 = and i32 %bf.set, -2049
  %bf.set53 = or i32 %bf.clear52, %bf.clear46
  store i32 %bf.set53, i32* %readonly_flag40, align 8
  br label %return

return:                                           ; preds = %entry, %if.end35
  %retval.0 = phi %union.tree_node* [ %outer.0, %if.end35 ], [ %bottom, %entry ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #1

declare %union.tree_node* @build_array_type(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #1

declare void @error_with_decl(%union.tree_node*, i8*, ...) #1

declare %union.tree_node* @decl_function_context(%union.tree_node*) #1

declare %union.tree_node* @get_identifier(i8*) #1

declare void @declare_weak(%union.tree_node*) #1

declare %union.tree_node* @size_int_wide(i64, i32) #1

declare i32 @tree_log2(%union.tree_node*) #1

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #2

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #2

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8* nocapture readonly) #3

declare %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !6, i64 0}
!6 = metadata !{metadata !"int", metadata !3, i64 0}
!7 = metadata !{metadata !8, metadata !2, i64 256}
!8 = metadata !{metadata !"gcc_target", metadata !9, i64 0, metadata !11, i64 168, metadata !2, i64 240, metadata !2, i64 248, metadata !2, i64 256, metadata !2, i64 264, metadata !2, i64 272, metadata !2, i64 280, metadata !2, i64 288, metadata !2, i64 296, metadata !2, i64 304, metadata !2, i64 312, metadata !2, i64 320, metadata !12, i64 328, metadata !12, i64 329, metadata !2, i64 336}
!9 = metadata !{metadata !"asm_out", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !10, i64 24, metadata !10, i64 56, metadata !2, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !2, i64 152, metadata !2, i64 160}
!10 = metadata !{metadata !"asm_int_op", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24}
!11 = metadata !{metadata !"sched", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !2, i64 64}
!12 = metadata !{metadata !"_Bool", metadata !3, i64 0}
!13 = metadata !{metadata !8, metadata !2, i64 280}
!14 = metadata !{metadata !3, metadata !3, i64 0}
!15 = metadata !{metadata !16, metadata !2, i64 32}
!16 = metadata !{metadata !"tree_list", metadata !17, i64 0, metadata !2, i64 24, metadata !2, i64 32}
!17 = metadata !{metadata !"tree_common", metadata !2, i64 0, metadata !2, i64 8, metadata !3, i64 16, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19}
!18 = metadata !{metadata !12, metadata !12, i64 0}
!19 = metadata !{metadata !20, metadata !2, i64 0}
!20 = metadata !{metadata !"attribute_spec", metadata !2, i64 0, metadata !6, i64 8, metadata !6, i64 12, metadata !12, i64 16, metadata !12, i64 17, metadata !12, i64 18, metadata !2, i64 24}
!21 = metadata !{metadata !22, metadata !2, i64 32}
!22 = metadata !{metadata !"tree_identifier", metadata !17, i64 0, metadata !23, i64 24}
!23 = metadata !{metadata !"ht_identifier", metadata !6, i64 0, metadata !2, i64 8}
!24 = metadata !{metadata !20, metadata !6, i64 8}
!25 = metadata !{metadata !20, metadata !6, i64 12}
!26 = metadata !{metadata !20, metadata !12, i64 16}
!27 = metadata !{i8 0, i8 2}
!28 = metadata !{metadata !20, metadata !12, i64 17}
!29 = metadata !{metadata !20, metadata !12, i64 18}
!30 = metadata !{metadata !17, metadata !2, i64 8}
!31 = metadata !{metadata !20, metadata !2, i64 24}
!32 = metadata !{metadata !33, metadata !2, i64 40}
!33 = metadata !{metadata !"tree_decl", metadata !17, i64 0, metadata !2, i64 24, metadata !6, i64 32, metadata !6, i64 36, metadata !2, i64 40, metadata !3, i64 48, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !3, i64 51, metadata !6, i64 51, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !3, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !2, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !2, i64 152, metadata !3, i64 160, metadata !2, i64 168, metadata !2, i64 176, metadata !2, i64 184, metadata !34, i64 192, metadata !2, i64 200}
!34 = metadata !{metadata !"long long", metadata !3, i64 0}
!35 = metadata !{metadata !17, metadata !2, i64 0}
!36 = metadata !{metadata !33, metadata !2, i64 136}
!37 = metadata !{metadata !38, metadata !2, i64 48}
!38 = metadata !{metadata !"tree_type", metadata !17, i64 0, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !6, i64 56, metadata !6, i64 60, metadata !3, i64 61, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !3, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !34, i64 152, metadata !2, i64 160}
!39 = metadata !{metadata !33, metadata !2, i64 120}
!40 = metadata !{metadata !8, metadata !12, i64 328}
!41 = metadata !{metadata !33, metadata !2, i64 128}
!42 = metadata !{metadata !33, metadata !2, i64 96}
!43 = metadata !{metadata !38, metadata !2, i64 96}
!44 = metadata !{metadata !38, metadata !6, i64 64}
!45 = metadata !{metadata !33, metadata !2, i64 104}
!46 = metadata !{metadata !33, metadata !2, i64 72}
!47 = metadata !{metadata !38, metadata !2, i64 40}
