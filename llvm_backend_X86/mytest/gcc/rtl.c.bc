; ModuleID = 'rtl.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }

@rtx_length = constant [153 x i8] c"\01\01\01\02\02\03\02\01\03\03\02\02\02\05\04\04\08\04\03\04\02\07\01\03\01\01\03\01\02\02\02\01\07\08\08\03\08\06\02\01\01\07\02\02\01\05\03\02\01\01\02\00\02\01\01\04\01\01\01\00\01\02\01\02\01\02\02\03\01\00\03\05\03\02\02\02\02\01\02\02\02\02\02\02\02\02\01\02\02\02\02\02\02\02\02\02\01\01\01\01\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01\01\01\01\01\03\03\01\02\0D\0A\03\02\01\04\03\02\02\01\02\02\02\02\01\01\01", align 16
@.str = private unnamed_addr constant [8 x i8] c"UnKnown\00", align 1
@.str1 = private unnamed_addr constant [4 x i8] c"nil\00", align 1
@.str2 = private unnamed_addr constant [8 x i8] c"include\00", align 1
@.str3 = private unnamed_addr constant [10 x i8] c"expr_list\00", align 1
@.str4 = private unnamed_addr constant [10 x i8] c"insn_list\00", align 1
@.str5 = private unnamed_addr constant [14 x i8] c"match_operand\00", align 1
@.str6 = private unnamed_addr constant [14 x i8] c"match_scratch\00", align 1
@.str7 = private unnamed_addr constant [10 x i8] c"match_dup\00", align 1
@.str8 = private unnamed_addr constant [15 x i8] c"match_operator\00", align 1
@.str9 = private unnamed_addr constant [15 x i8] c"match_parallel\00", align 1
@.str10 = private unnamed_addr constant [13 x i8] c"match_op_dup\00", align 1
@.str11 = private unnamed_addr constant [14 x i8] c"match_par_dup\00", align 1
@.str12 = private unnamed_addr constant [11 x i8] c"match_insn\00", align 1
@.str13 = private unnamed_addr constant [12 x i8] c"define_insn\00", align 1
@.str14 = private unnamed_addr constant [16 x i8] c"define_peephole\00", align 1
@.str15 = private unnamed_addr constant [13 x i8] c"define_split\00", align 1
@.str16 = private unnamed_addr constant [22 x i8] c"define_insn_and_split\00", align 1
@.str17 = private unnamed_addr constant [17 x i8] c"define_peephole2\00", align 1
@.str18 = private unnamed_addr constant [15 x i8] c"define_combine\00", align 1
@.str19 = private unnamed_addr constant [14 x i8] c"define_expand\00", align 1
@.str20 = private unnamed_addr constant [13 x i8] c"define_delay\00", align 1
@.str21 = private unnamed_addr constant [21 x i8] c"define_function_unit\00", align 1
@.str22 = private unnamed_addr constant [22 x i8] c"define_asm_attributes\00", align 1
@.str23 = private unnamed_addr constant [17 x i8] c"define_cond_exec\00", align 1
@.str24 = private unnamed_addr constant [9 x i8] c"sequence\00", align 1
@.str25 = private unnamed_addr constant [8 x i8] c"address\00", align 1
@.str26 = private unnamed_addr constant [12 x i8] c"define_attr\00", align 1
@.str27 = private unnamed_addr constant [5 x i8] c"attr\00", align 1
@.str28 = private unnamed_addr constant [9 x i8] c"set_attr\00", align 1
@.str29 = private unnamed_addr constant [21 x i8] c"set_attr_alternative\00", align 1
@.str30 = private unnamed_addr constant [8 x i8] c"eq_attr\00", align 1
@.str31 = private unnamed_addr constant [10 x i8] c"attr_flag\00", align 1
@.str32 = private unnamed_addr constant [5 x i8] c"insn\00", align 1
@.str33 = private unnamed_addr constant [10 x i8] c"jump_insn\00", align 1
@.str34 = private unnamed_addr constant [10 x i8] c"call_insn\00", align 1
@.str35 = private unnamed_addr constant [8 x i8] c"barrier\00", align 1
@.str36 = private unnamed_addr constant [11 x i8] c"code_label\00", align 1
@.str37 = private unnamed_addr constant [5 x i8] c"note\00", align 1
@.str38 = private unnamed_addr constant [10 x i8] c"cond_exec\00", align 1
@.str39 = private unnamed_addr constant [9 x i8] c"parallel\00", align 1
@.str40 = private unnamed_addr constant [10 x i8] c"asm_input\00", align 1
@.str41 = private unnamed_addr constant [13 x i8] c"asm_operands\00", align 1
@.str42 = private unnamed_addr constant [7 x i8] c"unspec\00", align 1
@.str43 = private unnamed_addr constant [16 x i8] c"unspec_volatile\00", align 1
@.str44 = private unnamed_addr constant [9 x i8] c"addr_vec\00", align 1
@.str45 = private unnamed_addr constant [14 x i8] c"addr_diff_vec\00", align 1
@.str46 = private unnamed_addr constant [9 x i8] c"prefetch\00", align 1
@.str47 = private unnamed_addr constant [4 x i8] c"set\00", align 1
@.str48 = private unnamed_addr constant [4 x i8] c"use\00", align 1
@.str49 = private unnamed_addr constant [8 x i8] c"clobber\00", align 1
@.str50 = private unnamed_addr constant [5 x i8] c"call\00", align 1
@.str51 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@.str52 = private unnamed_addr constant [8 x i8] c"trap_if\00", align 1
@.str53 = private unnamed_addr constant [5 x i8] c"resx\00", align 1
@.str54 = private unnamed_addr constant [10 x i8] c"const_int\00", align 1
@.str55 = private unnamed_addr constant [13 x i8] c"const_double\00", align 1
@.str56 = private unnamed_addr constant [13 x i8] c"const_vector\00", align 1
@.str57 = private unnamed_addr constant [13 x i8] c"const_string\00", align 1
@.str58 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@.str59 = private unnamed_addr constant [3 x i8] c"pc\00", align 1
@.str60 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@.str61 = private unnamed_addr constant [4 x i8] c"reg\00", align 1
@.str62 = private unnamed_addr constant [8 x i8] c"scratch\00", align 1
@.str63 = private unnamed_addr constant [7 x i8] c"subreg\00", align 1
@.str64 = private unnamed_addr constant [16 x i8] c"strict_low_part\00", align 1
@.str65 = private unnamed_addr constant [7 x i8] c"concat\00", align 1
@.str66 = private unnamed_addr constant [4 x i8] c"mem\00", align 1
@.str67 = private unnamed_addr constant [10 x i8] c"label_ref\00", align 1
@.str68 = private unnamed_addr constant [11 x i8] c"symbol_ref\00", align 1
@.str69 = private unnamed_addr constant [4 x i8] c"cc0\00", align 1
@.str70 = private unnamed_addr constant [10 x i8] c"addressof\00", align 1
@.str71 = private unnamed_addr constant [7 x i8] c"queued\00", align 1
@.str72 = private unnamed_addr constant [13 x i8] c"if_then_else\00", align 1
@.str73 = private unnamed_addr constant [5 x i8] c"cond\00", align 1
@.str74 = private unnamed_addr constant [8 x i8] c"compare\00", align 1
@.str75 = private unnamed_addr constant [5 x i8] c"plus\00", align 1
@.str76 = private unnamed_addr constant [6 x i8] c"minus\00", align 1
@.str77 = private unnamed_addr constant [4 x i8] c"neg\00", align 1
@.str78 = private unnamed_addr constant [5 x i8] c"mult\00", align 1
@.str79 = private unnamed_addr constant [4 x i8] c"div\00", align 1
@.str80 = private unnamed_addr constant [4 x i8] c"mod\00", align 1
@.str81 = private unnamed_addr constant [5 x i8] c"udiv\00", align 1
@.str82 = private unnamed_addr constant [5 x i8] c"umod\00", align 1
@.str83 = private unnamed_addr constant [4 x i8] c"and\00", align 1
@.str84 = private unnamed_addr constant [4 x i8] c"ior\00", align 1
@.str85 = private unnamed_addr constant [4 x i8] c"xor\00", align 1
@.str86 = private unnamed_addr constant [4 x i8] c"not\00", align 1
@.str87 = private unnamed_addr constant [7 x i8] c"ashift\00", align 1
@.str88 = private unnamed_addr constant [7 x i8] c"rotate\00", align 1
@.str89 = private unnamed_addr constant [9 x i8] c"ashiftrt\00", align 1
@.str90 = private unnamed_addr constant [9 x i8] c"lshiftrt\00", align 1
@.str91 = private unnamed_addr constant [9 x i8] c"rotatert\00", align 1
@.str92 = private unnamed_addr constant [5 x i8] c"smin\00", align 1
@.str93 = private unnamed_addr constant [5 x i8] c"smax\00", align 1
@.str94 = private unnamed_addr constant [5 x i8] c"umin\00", align 1
@.str95 = private unnamed_addr constant [5 x i8] c"umax\00", align 1
@.str96 = private unnamed_addr constant [8 x i8] c"pre_dec\00", align 1
@.str97 = private unnamed_addr constant [8 x i8] c"pre_inc\00", align 1
@.str98 = private unnamed_addr constant [9 x i8] c"post_dec\00", align 1
@.str99 = private unnamed_addr constant [9 x i8] c"post_inc\00", align 1
@.str100 = private unnamed_addr constant [11 x i8] c"pre_modify\00", align 1
@.str101 = private unnamed_addr constant [12 x i8] c"post_modify\00", align 1
@.str102 = private unnamed_addr constant [3 x i8] c"ne\00", align 1
@.str103 = private unnamed_addr constant [3 x i8] c"eq\00", align 1
@.str104 = private unnamed_addr constant [3 x i8] c"ge\00", align 1
@.str105 = private unnamed_addr constant [3 x i8] c"gt\00", align 1
@.str106 = private unnamed_addr constant [3 x i8] c"le\00", align 1
@.str107 = private unnamed_addr constant [3 x i8] c"lt\00", align 1
@.str108 = private unnamed_addr constant [4 x i8] c"geu\00", align 1
@.str109 = private unnamed_addr constant [4 x i8] c"gtu\00", align 1
@.str110 = private unnamed_addr constant [4 x i8] c"leu\00", align 1
@.str111 = private unnamed_addr constant [4 x i8] c"ltu\00", align 1
@.str112 = private unnamed_addr constant [10 x i8] c"unordered\00", align 1
@.str113 = private unnamed_addr constant [8 x i8] c"ordered\00", align 1
@.str114 = private unnamed_addr constant [5 x i8] c"uneq\00", align 1
@.str115 = private unnamed_addr constant [5 x i8] c"unge\00", align 1
@.str116 = private unnamed_addr constant [5 x i8] c"ungt\00", align 1
@.str117 = private unnamed_addr constant [5 x i8] c"unle\00", align 1
@.str118 = private unnamed_addr constant [5 x i8] c"unlt\00", align 1
@.str119 = private unnamed_addr constant [5 x i8] c"ltgt\00", align 1
@.str120 = private unnamed_addr constant [12 x i8] c"sign_extend\00", align 1
@.str121 = private unnamed_addr constant [12 x i8] c"zero_extend\00", align 1
@.str122 = private unnamed_addr constant [9 x i8] c"truncate\00", align 1
@.str123 = private unnamed_addr constant [13 x i8] c"float_extend\00", align 1
@.str124 = private unnamed_addr constant [15 x i8] c"float_truncate\00", align 1
@.str125 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str126 = private unnamed_addr constant [4 x i8] c"fix\00", align 1
@.str127 = private unnamed_addr constant [15 x i8] c"unsigned_float\00", align 1
@.str128 = private unnamed_addr constant [13 x i8] c"unsigned_fix\00", align 1
@.str129 = private unnamed_addr constant [4 x i8] c"abs\00", align 1
@.str130 = private unnamed_addr constant [5 x i8] c"sqrt\00", align 1
@.str131 = private unnamed_addr constant [4 x i8] c"ffs\00", align 1
@.str132 = private unnamed_addr constant [13 x i8] c"sign_extract\00", align 1
@.str133 = private unnamed_addr constant [13 x i8] c"zero_extract\00", align 1
@.str134 = private unnamed_addr constant [5 x i8] c"high\00", align 1
@.str135 = private unnamed_addr constant [7 x i8] c"lo_sum\00", align 1
@.str136 = private unnamed_addr constant [11 x i8] c"range_info\00", align 1
@.str137 = private unnamed_addr constant [10 x i8] c"range_reg\00", align 1
@.str138 = private unnamed_addr constant [10 x i8] c"range_var\00", align 1
@.str139 = private unnamed_addr constant [11 x i8] c"range_live\00", align 1
@.str140 = private unnamed_addr constant [15 x i8] c"constant_p_rtx\00", align 1
@.str141 = private unnamed_addr constant [17 x i8] c"call_placeholder\00", align 1
@.str142 = private unnamed_addr constant [10 x i8] c"vec_merge\00", align 1
@.str143 = private unnamed_addr constant [11 x i8] c"vec_select\00", align 1
@.str144 = private unnamed_addr constant [11 x i8] c"vec_concat\00", align 1
@.str145 = private unnamed_addr constant [14 x i8] c"vec_duplicate\00", align 1
@.str146 = private unnamed_addr constant [8 x i8] c"ss_plus\00", align 1
@.str147 = private unnamed_addr constant [8 x i8] c"us_plus\00", align 1
@.str148 = private unnamed_addr constant [9 x i8] c"ss_minus\00", align 1
@.str149 = private unnamed_addr constant [9 x i8] c"us_minus\00", align 1
@.str150 = private unnamed_addr constant [12 x i8] c"ss_truncate\00", align 1
@.str151 = private unnamed_addr constant [12 x i8] c"us_truncate\00", align 1
@.str152 = private unnamed_addr constant [4 x i8] c"phi\00", align 1
@rtx_name = constant [153 x i8*] [i8* getelementptr inbounds ([8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str4, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str10, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str13, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str14, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str15, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str18, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str19, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str20, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8]* @.str21, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str22, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str23, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str25, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str28, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8]* @.str29, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str30, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str31, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str32, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str34, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str36, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str37, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str39, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str40, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str42, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str44, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str45, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str46, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str47, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str48, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str49, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str50, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str51, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str52, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str53, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str55, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str56, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str58, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str59, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str61, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str62, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str63, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str64, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str65, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str66, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str67, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str68, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str69, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str70, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str71, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str72, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str73, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str74, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str75, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str76, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str77, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str78, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str79, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str80, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str81, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str82, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str83, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str84, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str85, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str86, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str87, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str88, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str89, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str90, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str91, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str92, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str93, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str94, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str97, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str98, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str99, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str100, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str102, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str103, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str105, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str106, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str107, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str108, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str109, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str110, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str111, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str112, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str113, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str114, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str115, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str116, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str117, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str118, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str119, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str120, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str121, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str122, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str123, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str124, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str125, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str126, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str128, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str129, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str130, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str131, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str132, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str133, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str134, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str135, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str136, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str137, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str138, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str139, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str140, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str141, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str142, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str143, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str144, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str145, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str146, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str147, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str148, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str149, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str150, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str151, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str152, i32 0, i32 0)], align 16
@.str153 = private unnamed_addr constant [5 x i8] c"VOID\00", align 1
@.str154 = private unnamed_addr constant [3 x i8] c"BI\00", align 1
@.str155 = private unnamed_addr constant [3 x i8] c"QI\00", align 1
@.str156 = private unnamed_addr constant [3 x i8] c"HI\00", align 1
@.str157 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str158 = private unnamed_addr constant [3 x i8] c"DI\00", align 1
@.str159 = private unnamed_addr constant [3 x i8] c"TI\00", align 1
@.str160 = private unnamed_addr constant [3 x i8] c"OI\00", align 1
@.str161 = private unnamed_addr constant [4 x i8] c"PQI\00", align 1
@.str162 = private unnamed_addr constant [4 x i8] c"PHI\00", align 1
@.str163 = private unnamed_addr constant [4 x i8] c"PSI\00", align 1
@.str164 = private unnamed_addr constant [4 x i8] c"PDI\00", align 1
@.str165 = private unnamed_addr constant [3 x i8] c"QF\00", align 1
@.str166 = private unnamed_addr constant [3 x i8] c"HF\00", align 1
@.str167 = private unnamed_addr constant [4 x i8] c"TQF\00", align 1
@.str168 = private unnamed_addr constant [3 x i8] c"SF\00", align 1
@.str169 = private unnamed_addr constant [3 x i8] c"DF\00", align 1
@.str170 = private unnamed_addr constant [3 x i8] c"XF\00", align 1
@.str171 = private unnamed_addr constant [3 x i8] c"TF\00", align 1
@.str172 = private unnamed_addr constant [3 x i8] c"QC\00", align 1
@.str173 = private unnamed_addr constant [3 x i8] c"HC\00", align 1
@.str174 = private unnamed_addr constant [3 x i8] c"SC\00", align 1
@.str175 = private unnamed_addr constant [3 x i8] c"DC\00", align 1
@.str176 = private unnamed_addr constant [3 x i8] c"XC\00", align 1
@.str177 = private unnamed_addr constant [3 x i8] c"TC\00", align 1
@.str178 = private unnamed_addr constant [4 x i8] c"CQI\00", align 1
@.str179 = private unnamed_addr constant [4 x i8] c"CHI\00", align 1
@.str180 = private unnamed_addr constant [4 x i8] c"CSI\00", align 1
@.str181 = private unnamed_addr constant [4 x i8] c"CDI\00", align 1
@.str182 = private unnamed_addr constant [4 x i8] c"CTI\00", align 1
@.str183 = private unnamed_addr constant [4 x i8] c"COI\00", align 1
@.str184 = private unnamed_addr constant [5 x i8] c"V2QI\00", align 1
@.str185 = private unnamed_addr constant [5 x i8] c"V2HI\00", align 1
@.str186 = private unnamed_addr constant [5 x i8] c"V2SI\00", align 1
@.str187 = private unnamed_addr constant [5 x i8] c"V2DI\00", align 1
@.str188 = private unnamed_addr constant [5 x i8] c"V4QI\00", align 1
@.str189 = private unnamed_addr constant [5 x i8] c"V4HI\00", align 1
@.str190 = private unnamed_addr constant [5 x i8] c"V4SI\00", align 1
@.str191 = private unnamed_addr constant [5 x i8] c"V4DI\00", align 1
@.str192 = private unnamed_addr constant [5 x i8] c"V8QI\00", align 1
@.str193 = private unnamed_addr constant [5 x i8] c"V8HI\00", align 1
@.str194 = private unnamed_addr constant [5 x i8] c"V8SI\00", align 1
@.str195 = private unnamed_addr constant [5 x i8] c"V8DI\00", align 1
@.str196 = private unnamed_addr constant [6 x i8] c"V16QI\00", align 1
@.str197 = private unnamed_addr constant [5 x i8] c"V2SF\00", align 1
@.str198 = private unnamed_addr constant [5 x i8] c"V2DF\00", align 1
@.str199 = private unnamed_addr constant [5 x i8] c"V4SF\00", align 1
@.str200 = private unnamed_addr constant [5 x i8] c"V4DF\00", align 1
@.str201 = private unnamed_addr constant [5 x i8] c"V8SF\00", align 1
@.str202 = private unnamed_addr constant [5 x i8] c"V8DF\00", align 1
@.str203 = private unnamed_addr constant [6 x i8] c"V16SF\00", align 1
@.str204 = private unnamed_addr constant [4 x i8] c"BLK\00", align 1
@.str205 = private unnamed_addr constant [3 x i8] c"CC\00", align 1
@.str206 = private unnamed_addr constant [5 x i8] c"CCGC\00", align 1
@.str207 = private unnamed_addr constant [6 x i8] c"CCGOC\00", align 1
@.str208 = private unnamed_addr constant [5 x i8] c"CCNO\00", align 1
@.str209 = private unnamed_addr constant [4 x i8] c"CCZ\00", align 1
@.str210 = private unnamed_addr constant [5 x i8] c"CCFP\00", align 1
@.str211 = private unnamed_addr constant [6 x i8] c"CCFPU\00", align 1
@mode_name = constant [59 x i8*] [i8* getelementptr inbounds ([5 x i8]* @.str153, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str154, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str155, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str156, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str157, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str158, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str159, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str160, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str161, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str162, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str163, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str164, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str165, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str166, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str167, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str168, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str169, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str170, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str171, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str172, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str173, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str174, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str175, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str176, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str177, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str178, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str179, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str180, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str181, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str182, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str183, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str184, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str185, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str186, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str187, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str188, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str189, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str190, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str191, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str192, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str193, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str194, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str195, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str196, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str197, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str198, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str199, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str200, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str201, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str202, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str203, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str204, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str205, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str206, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str207, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str208, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str209, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str210, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str211, i32 0, i32 0)], align 16
@mode_class = constant [59 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 3, i32 3, i32 3, i32 3, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 0, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], align 16
@mode_bitsize = constant [59 x i16] [i16 0, i16 1, i16 8, i16 16, i16 32, i16 64, i16 128, i16 256, i16 8, i16 16, i16 32, i16 64, i16 8, i16 16, i16 24, i16 32, i16 64, i16 96, i16 128, i16 16, i16 32, i16 64, i16 128, i16 192, i16 256, i16 16, i16 32, i16 64, i16 128, i16 256, i16 512, i16 16, i16 32, i16 64, i16 128, i16 32, i16 64, i16 128, i16 256, i16 64, i16 128, i16 256, i16 512, i16 128, i16 64, i16 128, i16 128, i16 256, i16 256, i16 512, i16 512, i16 0, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32], align 16
@mode_size = constant [59 x i8] c"\00\01\01\02\04\08\10 \01\02\04\08\01\02\03\04\08\0C\10\02\04\08\10\18 \02\04\08\10 @\02\04\08\10\04\08\10 \08\10 @\10\08\10\10  @@\00\04\04\04\04\04\04\04", align 16
@mode_unit_size = constant [59 x i8] c"\00\01\01\02\04\08\10 \01\02\04\08\01\02\03\04\08\0C\10\01\02\04\08\0C\10\01\02\04\08\10 \01\02\04\08\01\02\04\08\01\02\04\08\01\04\08\04\08\04\08\04\00\04\04\04\04\04\04\04", align 16
@mode_wider_mode = constant [59 x i8] c"\00\02\03\04\05\06\07\00\09\0A\0B\00\0D\0E\0F\10\11\12\00\14\15\16\17\18\00\1A\1B\1C\1D\1E\00#'+) !\22*$%&\00(.0-1/\00\00\00\00\00\00\00\00\00\00", align 16
@mode_mask_array = constant [59 x i64] [i64 0, i64 1, i64 255, i64 65535, i64 4294967295, i64 -1, i64 -1, i64 -1, i64 255, i64 65535, i64 4294967295, i64 -1, i64 255, i64 65535, i64 16777215, i64 4294967295, i64 -1, i64 -1, i64 -1, i64 65535, i64 4294967295, i64 -1, i64 -1, i64 -1, i64 -1, i64 65535, i64 4294967295, i64 -1, i64 -1, i64 -1, i64 -1, i64 65535, i64 4294967295, i64 -1, i64 -1, i64 4294967295, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 0, i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295], align 16
@inner_mode_array = constant [59 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 12, i32 13, i32 15, i32 16, i32 17, i32 18, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 15, i32 16, i32 15, i32 16, i32 15, i32 16, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 16
@class_narrowest_mode = constant [9 x i32] [i32 0, i32 2, i32 12, i32 8, i32 52, i32 25, i32 19, i32 31, i32 44], align 16
@.str212 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str213 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str214 = private unnamed_addr constant [3 x i8] c"ee\00", align 1
@.str215 = private unnamed_addr constant [3 x i8] c"ue\00", align 1
@.str216 = private unnamed_addr constant [4 x i8] c"iss\00", align 1
@.str217 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str218 = private unnamed_addr constant [2 x i8] c"i\00", align 1
@.str219 = private unnamed_addr constant [4 x i8] c"isE\00", align 1
@.str220 = private unnamed_addr constant [3 x i8] c"iE\00", align 1
@.str221 = private unnamed_addr constant [6 x i8] c"sEsTV\00", align 1
@.str222 = private unnamed_addr constant [5 x i8] c"EsTV\00", align 1
@.str223 = private unnamed_addr constant [5 x i8] c"EsES\00", align 1
@.str224 = private unnamed_addr constant [9 x i8] c"sEsTsESV\00", align 1
@.str225 = private unnamed_addr constant [4 x i8] c"Ess\00", align 1
@.str226 = private unnamed_addr constant [5 x i8] c"sEss\00", align 1
@.str227 = private unnamed_addr constant [3 x i8] c"eE\00", align 1
@.str228 = private unnamed_addr constant [8 x i8] c"siieiiV\00", align 1
@.str229 = private unnamed_addr constant [2 x i8] c"V\00", align 1
@.str230 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str231 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str232 = private unnamed_addr constant [4 x i8] c"sse\00", align 1
@.str233 = private unnamed_addr constant [3 x i8] c"ss\00", align 1
@.str234 = private unnamed_addr constant [3 x i8] c"sE\00", align 1
@.str235 = private unnamed_addr constant [8 x i8] c"iuueiee\00", align 1
@.str236 = private unnamed_addr constant [9 x i8] c"iuueiee0\00", align 1
@.str237 = private unnamed_addr constant [9 x i8] c"iuueieee\00", align 1
@.str238 = private unnamed_addr constant [4 x i8] c"iuu\00", align 1
@.str239 = private unnamed_addr constant [9 x i8] c"iuu00iss\00", align 1
@.str240 = private unnamed_addr constant [7 x i8] c"iuu0ni\00", align 1
@.str241 = private unnamed_addr constant [8 x i8] c"ssiEEsi\00", align 1
@.str242 = private unnamed_addr constant [3 x i8] c"Ei\00", align 1
@.str243 = private unnamed_addr constant [6 x i8] c"eEee0\00", align 1
@.str244 = private unnamed_addr constant [4 x i8] c"eee\00", align 1
@.str245 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str246 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str247 = private unnamed_addr constant [5 x i8] c"0www\00", align 1
@.str248 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str249 = private unnamed_addr constant [3 x i8] c"i0\00", align 1
@.str250 = private unnamed_addr constant [3 x i8] c"ei\00", align 1
@.str251 = private unnamed_addr constant [3 x i8] c"e0\00", align 1
@.str252 = private unnamed_addr constant [4 x i8] c"u00\00", align 1
@.str253 = private unnamed_addr constant [4 x i8] c"eit\00", align 1
@.str254 = private unnamed_addr constant [6 x i8] c"eeeee\00", align 1
@.str255 = private unnamed_addr constant [3 x i8] c"Ee\00", align 1
@.str256 = private unnamed_addr constant [14 x i8] c"uuEiiiiiibbii\00", align 1
@.str257 = private unnamed_addr constant [11 x i8] c"iiiiiiiitt\00", align 1
@.str258 = private unnamed_addr constant [4 x i8] c"eti\00", align 1
@.str259 = private unnamed_addr constant [3 x i8] c"bi\00", align 1
@.str260 = private unnamed_addr constant [5 x i8] c"uuuu\00", align 1
@rtx_format = constant [153 x i8*] [i8* getelementptr inbounds ([2 x i8]* @.str212, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str212, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str213, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str215, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str216, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str217, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str218, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str219, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str219, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str220, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str220, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str217, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str221, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str222, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str223, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str224, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str223, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str225, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str226, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str227, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str228, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str229, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str225, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str230, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str232, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str213, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str233, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str234, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str233, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str213, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str235, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str236, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str237, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str238, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str239, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str240, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str230, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str213, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str241, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str242, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str242, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str230, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str243, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str244, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str245, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str218, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str246, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str247, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str230, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str213, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str245, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str248, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str249, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str248, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str250, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str251, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str252, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str213, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str245, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str253, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str254, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str244, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str255, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str244, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str244, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str256, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str257, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str258, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str259, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str260, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str244, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str214, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str231, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str230, i32 0, i32 0)], align 16
@rtx_class = constant [153 x i8] c"xxxxxmmmmmmmmxxxxxxxxxxxxmxxxxxxiiixxxxxxxxxxxxxxxxxxxooxooooooxxoooooox3x2c21c2222ccc122222ccccaaaaaa<<<<<<<<<<<<<<<<<<111111111111bbooxxxxxxxxxxcc2211x", align 16
@.str261 = private unnamed_addr constant [18 x i8] c"NOTE_INSN_DELETED\00", align 1
@.str262 = private unnamed_addr constant [20 x i8] c"NOTE_INSN_BLOCK_BEG\00", align 1
@.str263 = private unnamed_addr constant [20 x i8] c"NOTE_INSN_BLOCK_END\00", align 1
@.str264 = private unnamed_addr constant [19 x i8] c"NOTE_INSN_LOOP_BEG\00", align 1
@.str265 = private unnamed_addr constant [19 x i8] c"NOTE_INSN_LOOP_END\00", align 1
@.str266 = private unnamed_addr constant [20 x i8] c"NOTE_INSN_LOOP_CONT\00", align 1
@.str267 = private unnamed_addr constant [20 x i8] c"NOTE_INSN_LOOP_VTOP\00", align 1
@.str268 = private unnamed_addr constant [28 x i8] c"NOTE_INSN_LOOP_END_TOP_COND\00", align 1
@.str269 = private unnamed_addr constant [23 x i8] c"NOTE_INSN_FUNCTION_END\00", align 1
@.str270 = private unnamed_addr constant [23 x i8] c"NOTE_INSN_PROLOGUE_END\00", align 1
@.str271 = private unnamed_addr constant [23 x i8] c"NOTE_INSN_EPILOGUE_BEG\00", align 1
@.str272 = private unnamed_addr constant [24 x i8] c"NOTE_INSN_DELETED_LABEL\00", align 1
@.str273 = private unnamed_addr constant [23 x i8] c"NOTE_INSN_FUNCTION_BEG\00", align 1
@.str274 = private unnamed_addr constant [24 x i8] c"NOTE_INSN_EH_REGION_BEG\00", align 1
@.str275 = private unnamed_addr constant [24 x i8] c"NOTE_INSN_EH_REGION_END\00", align 1
@.str276 = private unnamed_addr constant [31 x i8] c"NOTE_INSN_REPEATED_LINE_NUMBER\00", align 1
@.str277 = private unnamed_addr constant [20 x i8] c"NOTE_INSN_RANGE_BEG\00", align 1
@.str278 = private unnamed_addr constant [20 x i8] c"NOTE_INSN_RANGE_END\00", align 1
@.str279 = private unnamed_addr constant [15 x i8] c"NOTE_INSN_LIVE\00", align 1
@.str280 = private unnamed_addr constant [22 x i8] c"NOTE_INSN_BASIC_BLOCK\00", align 1
@.str281 = private unnamed_addr constant [25 x i8] c"NOTE_INSN_EXPECTED_VALUE\00", align 1
@note_insn_name = constant [22 x i8*] [i8* getelementptr inbounds ([1 x i8]* @.str245, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8]* @.str261, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8]* @.str262, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8]* @.str263, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str264, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str265, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8]* @.str266, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8]* @.str267, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8]* @.str268, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8]* @.str269, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8]* @.str270, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8]* @.str271, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str272, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8]* @.str273, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str274, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str275, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8]* @.str276, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8]* @.str277, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8]* @.str278, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str279, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str280, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8]* @.str281, i32 0, i32 0)], align 16
@.str282 = private unnamed_addr constant [9 x i8] c"REG_DEAD\00", align 1
@.str283 = private unnamed_addr constant [8 x i8] c"REG_INC\00", align 1
@.str284 = private unnamed_addr constant [10 x i8] c"REG_EQUIV\00", align 1
@.str285 = private unnamed_addr constant [10 x i8] c"REG_EQUAL\00", align 1
@.str286 = private unnamed_addr constant [10 x i8] c"REG_WAS_0\00", align 1
@.str287 = private unnamed_addr constant [11 x i8] c"REG_RETVAL\00", align 1
@.str288 = private unnamed_addr constant [12 x i8] c"REG_LIBCALL\00", align 1
@.str289 = private unnamed_addr constant [11 x i8] c"REG_NONNEG\00", align 1
@.str290 = private unnamed_addr constant [16 x i8] c"REG_NO_CONFLICT\00", align 1
@.str291 = private unnamed_addr constant [11 x i8] c"REG_UNUSED\00", align 1
@.str292 = private unnamed_addr constant [14 x i8] c"REG_CC_SETTER\00", align 1
@.str293 = private unnamed_addr constant [12 x i8] c"REG_CC_USER\00", align 1
@.str294 = private unnamed_addr constant [10 x i8] c"REG_LABEL\00", align 1
@.str295 = private unnamed_addr constant [13 x i8] c"REG_DEP_ANTI\00", align 1
@.str296 = private unnamed_addr constant [15 x i8] c"REG_DEP_OUTPUT\00", align 1
@.str297 = private unnamed_addr constant [12 x i8] c"REG_BR_PROB\00", align 1
@.str298 = private unnamed_addr constant [15 x i8] c"REG_EXEC_COUNT\00", align 1
@.str299 = private unnamed_addr constant [12 x i8] c"REG_NOALIAS\00", align 1
@.str300 = private unnamed_addr constant [14 x i8] c"REG_SAVE_AREA\00", align 1
@.str301 = private unnamed_addr constant [12 x i8] c"REG_BR_PRED\00", align 1
@.str302 = private unnamed_addr constant [23 x i8] c"REG_FRAME_RELATED_EXPR\00", align 1
@.str303 = private unnamed_addr constant [15 x i8] c"REG_EH_CONTEXT\00", align 1
@.str304 = private unnamed_addr constant [14 x i8] c"REG_EH_REGION\00", align 1
@.str305 = private unnamed_addr constant [14 x i8] c"REG_SAVE_NOTE\00", align 1
@.str306 = private unnamed_addr constant [15 x i8] c"REG_MAYBE_DEAD\00", align 1
@.str307 = private unnamed_addr constant [13 x i8] c"REG_NORETURN\00", align 1
@.str308 = private unnamed_addr constant [19 x i8] c"REG_NON_LOCAL_GOTO\00", align 1
@.str309 = private unnamed_addr constant [11 x i8] c"REG_SETJMP\00", align 1
@.str310 = private unnamed_addr constant [18 x i8] c"REG_ALWAYS_RETURN\00", align 1
@.str311 = private unnamed_addr constant [15 x i8] c"REG_VTABLE_REF\00", align 1
@reg_note_name = constant [31 x i8*] [i8* getelementptr inbounds ([1 x i8]* @.str245, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str282, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str283, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str284, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str285, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str286, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str287, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str288, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str289, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str290, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str291, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str292, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str293, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str294, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str295, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str296, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str297, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str298, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str299, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str300, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str301, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8]* @.str302, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str303, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str304, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str305, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str306, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str307, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str308, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str309, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8]* @.str310, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str311, i32 0, i32 0)], align 16
@.str312 = private unnamed_addr constant [6 x i8] c"rtl.c\00", align 1
@__FUNCTION__.copy_rtx = private unnamed_addr constant [9 x i8] c"copy_rtx\00", align 1
@rtx_equal_function_value_matters = common global i32 0, align 4
@__FUNCTION__.rtx_equal_p = private unnamed_addr constant [12 x i8] c"rtx_equal_p\00", align 1
@generating_concat_p = common global i32 0, align 4

; Function Attrs: nounwind uwtable
define %struct.rtvec_def* @rtvec_alloc(i32 %n) #0 {
entry:
  %sub = add nsw i32 %n, -1
  %conv = sext i32 %sub to i64
  %mul = shl nsw i64 %conv, 3
  %add = add i64 %mul, 16
  %call = tail call i8* @ggc_alloc(i64 %add) #2
  %0 = bitcast i8* %call to %struct.rtvec_def*
  %elem = getelementptr inbounds i8* %call, i64 8
  %conv1 = sext i32 %n to i64
  %mul2 = shl nsw i64 %conv1, 3
  tail call void @llvm.memset.p0i8.i64(i8* %elem, i8 0, i64 %mul2, i32 8, i1 false)
  %num_elem = bitcast i8* %call to i32*
  store i32 %n, i32* %num_elem, align 4, !tbaa !1
  ret %struct.rtvec_def* %0
}

declare i8* @ggc_alloc(i64) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @rtx_alloc(i32 %code) #0 {
entry:
  %idxprom = sext i32 %code to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom
  %0 = load i8* %arrayidx, align 1, !tbaa !6
  %conv = zext i8 %0 to i64
  %sub = shl nuw nsw i64 %conv, 3
  %add = add i64 %sub, 8
  %call = tail call i8* @ggc_alloc(i64 %add) #2
  %1 = bitcast i8* %call to %struct.rtx_def*
  %2 = bitcast i8* %call to i64*
  store i64 0, i64* %2, align 8
  %3 = bitcast i8* %call to i32*
  %bf.value = and i32 %code, 65535
  store i32 %bf.value, i32* %3, align 8
  ret %struct.rtx_def* %1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @copy_rtx(%struct.rtx_def* readonly %orig) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 61, label %return
    i32 71, label %return
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 68, label %return
    i32 36, label %return
    i32 59, label %return
    i32 69, label %return
    i32 62, label %return
    i32 70, label %return
    i32 58, label %sw.bb1
  ]

sw.bb1:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load2 = load i32* %2, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp = icmp eq i32 %bf.clear3, 75
  br i1 %cmp, label %land.lhs.true, label %sw.epilog

land.lhs.true:                                    ; preds = %sw.bb1
  %fld7 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1
  %rtx9 = bitcast [1 x %union.rtunion_def]* %fld7 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx9, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load10 = load i32* %4, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 68
  br i1 %cmp12, label %land.lhs.true13, label %sw.epilog

land.lhs.true13:                                  ; preds = %land.lhs.true
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx19, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load20 = load i32* %6, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 54
  br i1 %cmp22, label %return, label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb1, %land.lhs.true, %land.lhs.true13
  %idxprom.i176 = zext i32 %bf.clear to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom.i176
  %7 = load i8* %arrayidx.i, align 1, !tbaa !6
  %conv.i = zext i8 %7 to i64
  %sub.i = shl nuw nsw i64 %conv.i, 3
  %add.i = add i64 %sub.i, 8
  %call.i = tail call i8* @ggc_alloc(i64 %add.i) #2
  %8 = bitcast i8* %call.i to %struct.rtx_def*
  %9 = bitcast i8* %call.i to i64*
  store i64 0, i64* %9, align 8
  %10 = bitcast i8* %call.i to i32*
  store i32 %bf.clear, i32* %10, align 8
  %11 = bitcast %struct.rtx_def* %orig to i64*
  %12 = load i64* %11, align 8
  store i64 %12, i64* %9, align 8
  %trunc = trunc i64 %12 to i32
  %13 = add i64 %idxprom.i176, -32
  %cmp26 = icmp ult i64 %13, 3
  %bf.clear30.bf.clear24.v = select i1 %cmp26, i32 1610612735, i32 -536870913
  %bf.clear30.bf.clear24 = and i32 %trunc, %bf.clear30.bf.clear24.v
  store i32 %bf.clear30.bf.clear24, i32* %10, align 8
  %bf.load32 = load i32* %0, align 8
  %bf.clear33 = and i32 %bf.load32, 16777216
  %bf.clear35 = and i32 %bf.clear30.bf.clear24, -553648129
  %bf.set = or i32 %bf.clear35, %bf.clear33
  store i32 %bf.set, i32* %10, align 8
  %bf.load36 = load i32* %0, align 8
  %bf.clear38 = and i32 %bf.load36, 33554432
  %bf.clear42 = and i32 %bf.set, -570425345
  %bf.set43 = or i32 %bf.clear42, %bf.clear38
  store i32 %bf.set43, i32* %10, align 8
  %bf.clear49181 = and i64 %12, 65535
  %arrayidx51183 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %bf.clear49181
  %14 = load i8* %arrayidx51183, align 1, !tbaa !6
  %cmp53185 = icmp eq i8 %14, 0
  br i1 %cmp53185, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %arrayidx47 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %bf.clear49181
  %15 = load i8** %arrayidx47, align 8, !tbaa !7
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc123
  %indvars.iv188 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next189, %for.inc123 ]
  %format_ptr.0187 = phi i8* [ %15, %for.body.lr.ph ], [ %incdec.ptr, %for.inc123 ]
  %arrayidx57 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 %indvars.iv188
  %arrayidx60 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv188
  %16 = getelementptr inbounds %union.rtunion_def* %arrayidx60, i64 0, i32 0
  %17 = load i64* %16, align 8
  %18 = getelementptr inbounds %union.rtunion_def* %arrayidx57, i64 0, i32 0
  store i64 %17, i64* %18, align 8
  %incdec.ptr = getelementptr inbounds i8* %format_ptr.0187, i64 1
  %19 = load i8* %format_ptr.0187, align 1, !tbaa !6
  %conv61 = sext i8 %19 to i32
  switch i32 %conv61, label %sw.default121 [
    i32 101, label %sw.bb62
    i32 69, label %sw.bb80
    i32 86, label %sw.bb80
    i32 116, label %for.inc123
    i32 119, label %for.inc123
    i32 105, label %for.inc123
    i32 115, label %for.inc123
    i32 83, label %for.inc123
    i32 84, label %for.inc123
    i32 117, label %for.inc123
    i32 48, label %for.inc123
  ]

sw.bb62:                                          ; preds = %for.body
  %rtx66 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %20 = load %struct.rtx_def** %rtx66, align 8, !tbaa !7
  %cmp67 = icmp eq %struct.rtx_def* %20, null
  br i1 %cmp67, label %for.inc123, label %if.then69

if.then69:                                        ; preds = %sw.bb62
  %call74 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %20)
  %call74.c = ptrtoint %struct.rtx_def* %call74 to i64
  store i64 %call74.c, i64* %18, align 8, !tbaa !7
  br label %for.inc123

sw.bb80:                                          ; preds = %for.body, %for.body
  %rtvec = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtvec_def**
  %21 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %cmp84 = icmp eq %struct.rtvec_def* %21, null
  br i1 %cmp84, label %for.inc123, label %if.then86

if.then86:                                        ; preds = %sw.bb80
  %num_elem = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 0
  %22 = load i32* %num_elem, align 4, !tbaa !1
  %sub.i172 = add nsw i32 %22, -1
  %conv.i173 = sext i32 %sub.i172 to i64
  %mul.i = shl nsw i64 %conv.i173, 3
  %add.i174 = add i64 %mul.i, 16
  %call.i175 = tail call i8* @ggc_alloc(i64 %add.i174) #2
  %elem.i = getelementptr inbounds i8* %call.i175, i64 8
  %conv1.i = sext i32 %22 to i64
  %mul2.i = shl nsw i64 %conv1.i, 3
  tail call void @llvm.memset.p0i8.i64(i8* %elem.i, i8 0, i64 %mul2.i, i32 8, i1 false) #2
  %num_elem.i = bitcast i8* %call.i175 to i32*
  store i32 %22, i32* %num_elem.i, align 4, !tbaa !1
  %rtvec95 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtvec_def**
  %call91.c = ptrtoint i8* %call.i175 to i64
  store i64 %call91.c, i64* %18, align 8, !tbaa !7
  %num_elem101177 = bitcast i8* %call.i175 to i32*
  %23 = load i32* %num_elem101177, align 4, !tbaa !1
  %cmp102178 = icmp sgt i32 %23, 0
  br i1 %cmp102178, label %for.body104, label %for.inc123

for.body104:                                      ; preds = %if.then86, %for.body104
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body104 ], [ 0, %if.then86 ]
  %24 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx110 = getelementptr inbounds %struct.rtvec_def* %24, i64 0, i32 1, i64 %indvars.iv
  %25 = load %struct.rtx_def** %arrayidx110, align 8, !tbaa !7
  %call111 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %25)
  %26 = load %struct.rtvec_def** %rtvec95, align 8, !tbaa !7
  %arrayidx118 = getelementptr inbounds %struct.rtvec_def* %26, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %call111, %struct.rtx_def** %arrayidx118, align 8, !tbaa !7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %27 = load %struct.rtvec_def** %rtvec95, align 8, !tbaa !7
  %num_elem101 = getelementptr inbounds %struct.rtvec_def* %27, i64 0, i32 0
  %28 = load i32* %num_elem101, align 4, !tbaa !1
  %29 = trunc i64 %indvars.iv.next to i32
  %cmp102 = icmp slt i32 %29, %28
  br i1 %cmp102, label %for.body104, label %for.inc123

sw.default121:                                    ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str312, i64 0, i64 0), i32 440, i8* getelementptr inbounds ([9 x i8]* @__FUNCTION__.copy_rtx, i64 0, i64 0)) #6
  unreachable

for.inc123:                                       ; preds = %for.body104, %if.then86, %sw.bb62, %sw.bb80, %if.then69, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %indvars.iv.next189 = add nuw nsw i64 %indvars.iv188, 1
  %bf.load48 = load i32* %10, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %idxprom50171 = zext i32 %bf.clear49 to i64
  %arrayidx51 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom50171
  %30 = load i8* %arrayidx51, align 1, !tbaa !6
  %conv52 = zext i8 %30 to i32
  %31 = trunc i64 %indvars.iv.next189 to i32
  %cmp53 = icmp slt i32 %31, %conv52
  br i1 %cmp53, label %for.body, label %return

return:                                           ; preds = %for.inc123, %sw.epilog, %land.lhs.true13, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %retval.0 = phi %struct.rtx_def* [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %land.lhs.true13 ], [ %8, %sw.epilog ], [ %8, %for.inc123 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #3

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @shallow_copy_rtx(%struct.rtx_def* nocapture readonly %orig) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom.i69 = zext i32 %bf.clear to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom.i69
  %1 = load i8* %arrayidx.i, align 1, !tbaa !6
  %conv.i = zext i8 %1 to i64
  %sub.i = shl nuw nsw i64 %conv.i, 3
  %add.i = add i64 %sub.i, 8
  %call.i = tail call i8* @ggc_alloc(i64 %add.i) #2
  %2 = bitcast i8* %call.i to %struct.rtx_def*
  %3 = bitcast i8* %call.i to i64*
  store i64 0, i64* %3, align 8
  %4 = bitcast i8* %call.i to i32*
  store i32 %bf.clear, i32* %4, align 8
  %bf.load1 = load i32* %0, align 8
  %bf.clear2 = and i32 %bf.load1, 16711680
  %bf.set = or i32 %bf.clear2, %bf.clear
  store i32 %bf.set, i32* %4, align 8
  %bf.load5 = load i32* %0, align 8
  %bf.clear7 = and i32 %bf.load5, 268435456
  %bf.set12 = or i32 %bf.set, %bf.clear7
  store i32 %bf.set12, i32* %4, align 8
  %bf.load13 = load i32* %0, align 8
  %bf.clear15 = and i32 %bf.load13, 134217728
  %bf.set20 = or i32 %bf.set12, %bf.clear15
  store i32 %bf.set20, i32* %4, align 8
  %bf.load21 = load i32* %0, align 8
  %bf.clear23 = and i32 %bf.load21, 67108864
  %bf.set28 = or i32 %bf.set20, %bf.clear23
  store i32 %bf.set28, i32* %4, align 8
  %bf.load29 = load i32* %0, align 8
  %bf.clear31 = and i32 %bf.load29, 1073741824
  %bf.set36 = or i32 %bf.set28, %bf.clear31
  store i32 %bf.set36, i32* %4, align 8
  %bf.load37 = load i32* %0, align 8
  %bf.lshr38 = and i32 %bf.load37, -2147483648
  %bf.clear42 = and i32 %bf.set36, 2147483647
  %bf.set43 = or i32 %bf.clear42, %bf.lshr38
  store i32 %bf.set43, i32* %4, align 8
  %cmp71 = icmp eq i8 %1, 0
  br i1 %cmp71, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %conv = zext i8 %1 to i32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %5 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv, i32 0
  %6 = load i64* %5, align 8
  %7 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 %indvars.iv, i32 0
  store i64 %6, i64* %7, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %8 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %8, %conv
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind readnone uwtable
define i32 @get_mode_alignment(i32 %mode) #4 {
entry:
  %idxprom = sext i32 %mode to i64
  %0 = add i64 %idxprom, -19
  %cmp = icmp ult i64 %0, 6
  %1 = add i64 %idxprom, -25
  %cmp3 = icmp ult i64 %1, 6
  %or.cond = or i1 %cmp, %cmp3
  %mode_unit_size.pn = select i1 %or.cond, [59 x i8]* @mode_unit_size, [59 x i8]* @mode_size
  %alignment.0.in.in = getelementptr inbounds [59 x i8]* %mode_unit_size.pn, i64 0, i64 %idxprom
  %alignment.0.in = load i8* %alignment.0.in.in, align 1
  %alignment.0 = zext i8 %alignment.0.in to i32
  %sub = sub i32 0, %alignment.0
  %and = and i32 %alignment.0, %sub
  %mul = shl nuw nsw i32 %and, 3
  %cmp9 = icmp eq i32 %and, 0
  %cond = select i1 %cmp9, i32 1, i32 %mul
  %cmp11 = icmp ugt i32 %cond, 128
  %.cond = select i1 %cmp11, i32 128, i32 %cond
  ret i32 %.cond
}

; Function Attrs: nounwind uwtable
define i32 @rtx_equal_p(%struct.rtx_def* readonly %x, %struct.rtx_def* readonly %y) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, %y
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq %struct.rtx_def* %x, null
  %cmp2 = icmp eq %struct.rtx_def* %y, null
  %or.cond = or i1 %cmp1, %cmp2
  br i1 %or.cond, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %1 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 0
  %bf.load5 = load i32* %1, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear, %bf.clear6
  br i1 %cmp7, label %if.end9, label %return

if.end9:                                          ; preds = %if.end4
  %bf.lshr229 = xor i32 %bf.load5, %bf.load
  %2 = and i32 %bf.lshr229, 16711680
  %cmp15 = icmp eq i32 %2, 0
  br i1 %cmp15, label %if.end17, label %return

if.end17:                                         ; preds = %if.end9
  switch i32 %bf.clear, label %sw.epilog [
    i32 61, label %sw.bb
    i32 67, label %sw.bb29
    i32 68, label %sw.bb36
    i32 62, label %return
    i32 55, label %return
    i32 54, label %return
    i32 56, label %return
  ]

sw.bb:                                            ; preds = %if.end17
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32* %rtuint, align 4, !tbaa !9
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 0
  %rtuint20 = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %4 = load i32* %rtuint20, align 4, !tbaa !9
  %cmp21 = icmp eq i32 %3, %4
  br i1 %cmp21, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb
  %5 = load i32* @rtx_equal_function_value_matters, align 4, !tbaa !9
  %tobool = icmp eq i32 %5, 0
  br i1 %tobool, label %land.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %6 = and i32 %bf.lshr229, 1073741824
  %cmp28 = icmp eq i32 %6, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs, %sw.bb
  %7 = phi i1 [ false, %sw.bb ], [ true, %land.rhs ], [ %cmp28, %lor.rhs ]
  %land.ext = zext i1 %7 to i32
  br label %return

sw.bb29:                                          ; preds = %if.end17
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %arrayidx33 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 0
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx34, align 8, !tbaa !7
  %cmp35 = icmp eq %struct.rtx_def* %8, %9
  %conv = zext i1 %cmp35 to i32
  br label %return

sw.bb36:                                          ; preds = %if.end17
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx38 to i8**
  %10 = load i8** %rtstr, align 8, !tbaa !7
  %arrayidx40 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 0
  %rtstr41 = bitcast %union.rtunion_def* %arrayidx40 to i8**
  %11 = load i8** %rtstr41, align 8, !tbaa !7
  %cmp42 = icmp eq i8* %10, %11
  %conv43 = zext i1 %cmp42 to i32
  br label %return

sw.epilog:                                        ; preds = %if.end17
  %idxprom228 = zext i32 %bf.clear to i64
  %arrayidx45 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom228
  %12 = load i8** %arrayidx45, align 8, !tbaa !7
  %arrayidx47 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom228
  %13 = load i8* %arrayidx47, align 1, !tbaa !6
  %cmp49237 = icmp eq i8 %13, 0
  br i1 %cmp49237, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %14 = zext i8 %13 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv246 = phi i64 [ %14, %for.body.lr.ph ], [ %indvars.iv.next247, %for.cond.backedge ]
  %indvars.iv.next247 = add nsw i64 %indvars.iv246, -1
  %arrayidx52 = getelementptr inbounds i8* %12, i64 %indvars.iv.next247
  %15 = load i8* %arrayidx52, align 1, !tbaa !6
  %conv53 = sext i8 %15 to i32
  switch i32 %conv53, label %sw.default168 [
    i32 119, label %sw.bb54
    i32 110, label %sw.bb66
    i32 105, label %sw.bb66
    i32 86, label %sw.bb78
    i32 69, label %sw.bb78
    i32 101, label %sw.bb117
    i32 83, label %sw.bb131
    i32 115, label %sw.bb131
    i32 117, label %for.cond.backedge
    i32 48, label %for.cond.backedge
    i32 116, label %for.cond.backedge
  ]

sw.bb54:                                          ; preds = %for.body
  %rtwint = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next247, i32 0
  %16 = load i64* %rtwint, align 8, !tbaa !10
  %rtwint61 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 %indvars.iv.next247, i32 0
  %17 = load i64* %rtwint61, align 8, !tbaa !10
  %cmp62 = icmp eq i64 %16, %17
  br i1 %cmp62, label %for.cond.backedge, label %return

for.cond.backedge:                                ; preds = %for.cond91, %for.cond91.preheader, %sw.bb54, %sw.bb66, %lor.lhs.false154, %lor.lhs.false137, %sw.bb117, %for.body, %for.body, %for.body
  %18 = trunc i64 %indvars.iv.next247 to i32
  %cmp49 = icmp sgt i32 %18, 0
  br i1 %cmp49, label %for.body, label %return

sw.bb66:                                          ; preds = %for.body, %for.body
  %arrayidx69 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next247
  %rtint = bitcast %union.rtunion_def* %arrayidx69 to i32*
  %19 = load i32* %rtint, align 4, !tbaa !9
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 %indvars.iv.next247
  %rtint73 = bitcast %union.rtunion_def* %arrayidx72 to i32*
  %20 = load i32* %rtint73, align 4, !tbaa !9
  %cmp74 = icmp eq i32 %19, %20
  br i1 %cmp74, label %for.cond.backedge, label %return

sw.bb78:                                          ; preds = %for.body, %for.body
  %arrayidx81 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next247
  %rtvec = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtvec_def**
  %21 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 0
  %22 = load i32* %num_elem, align 4, !tbaa !1
  %arrayidx84 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 %indvars.iv.next247
  %rtvec85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtvec_def**
  %23 = load %struct.rtvec_def** %rtvec85, align 8, !tbaa !7
  %num_elem86 = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 0
  %24 = load i32* %num_elem86, align 4, !tbaa !1
  %cmp87 = icmp eq i32 %22, %24
  br i1 %cmp87, label %for.cond91.preheader, label %return

for.cond91.preheader:                             ; preds = %sw.bb78
  %cmp97234 = icmp sgt i32 %22, 0
  br i1 %cmp97234, label %for.body99, label %for.cond.backedge

for.cond91:                                       ; preds = %for.body99
  %25 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem96 = getelementptr inbounds %struct.rtvec_def* %25, i64 0, i32 0
  %26 = load i32* %num_elem96, align 4, !tbaa !1
  %27 = trunc i64 %indvars.iv.next to i32
  %cmp97 = icmp slt i32 %27, %26
  br i1 %cmp97, label %for.cond91.for.body99_crit_edge, label %for.cond.backedge

for.cond91.for.body99_crit_edge:                  ; preds = %for.cond91
  %.pre = load %struct.rtvec_def** %rtvec85, align 8, !tbaa !7
  br label %for.body99

for.body99:                                       ; preds = %for.cond91.preheader, %for.cond91.for.body99_crit_edge
  %28 = phi %struct.rtvec_def* [ %.pre, %for.cond91.for.body99_crit_edge ], [ %23, %for.cond91.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond91.for.body99_crit_edge ], [ 0, %for.cond91.preheader ]
  %29 = phi %struct.rtvec_def* [ %25, %for.cond91.for.body99_crit_edge ], [ %21, %for.cond91.preheader ]
  %arrayidx105 = getelementptr inbounds %struct.rtvec_def* %29, i64 0, i32 1, i64 %indvars.iv
  %30 = load %struct.rtx_def** %arrayidx105, align 8, !tbaa !7
  %arrayidx112 = getelementptr inbounds %struct.rtvec_def* %28, i64 0, i32 1, i64 %indvars.iv
  %31 = load %struct.rtx_def** %arrayidx112, align 8, !tbaa !7
  %call = tail call i32 @rtx_equal_p(%struct.rtx_def* %30, %struct.rtx_def* %31)
  %cmp113 = icmp eq i32 %call, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp113, label %return, label %for.cond91

sw.bb117:                                         ; preds = %for.body
  %arrayidx120 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next247
  %rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**
  %32 = load %struct.rtx_def** %rtx121, align 8, !tbaa !7
  %arrayidx124 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 %indvars.iv.next247
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %33 = load %struct.rtx_def** %rtx125, align 8, !tbaa !7
  %call126 = tail call i32 @rtx_equal_p(%struct.rtx_def* %32, %struct.rtx_def* %33)
  %cmp127 = icmp eq i32 %call126, 0
  br i1 %cmp127, label %return, label %for.cond.backedge

sw.bb131:                                         ; preds = %for.body, %for.body
  %arrayidx134 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next247
  %rtstr135 = bitcast %union.rtunion_def* %arrayidx134 to i8**
  %34 = load i8** %rtstr135, align 8, !tbaa !7
  %tobool136 = icmp eq i8* %34, null
  %arrayidx140 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 %indvars.iv.next247
  %rtstr141 = bitcast %union.rtunion_def* %arrayidx140 to i8**
  %35 = load i8** %rtstr141, align 8, !tbaa !7
  %tobool142 = icmp eq i8* %35, null
  br i1 %tobool136, label %lor.lhs.false137, label %lor.lhs.false148

lor.lhs.false137:                                 ; preds = %sw.bb131
  br i1 %tobool142, label %for.cond.backedge, label %return

lor.lhs.false148:                                 ; preds = %sw.bb131
  br i1 %tobool142, label %return, label %lor.lhs.false154

lor.lhs.false154:                                 ; preds = %lor.lhs.false148
  %call163 = tail call i32 @strcmp(i8* %34, i8* %35) #2
  %tobool164 = icmp eq i32 %call163, 0
  br i1 %tobool164, label %for.cond.backedge, label %return

sw.default168:                                    ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str312, i64 0, i64 0), i32 611, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.rtx_equal_p, i64 0, i64 0)) #6
  unreachable

return:                                           ; preds = %sw.bb54, %sw.bb66, %sw.bb78, %sw.bb117, %lor.lhs.false154, %lor.lhs.false148, %lor.lhs.false137, %for.cond.backedge, %for.body99, %sw.epilog, %if.end17, %if.end17, %if.end17, %if.end17, %if.end9, %if.end4, %if.end, %entry, %sw.bb36, %sw.bb29, %land.end
  %retval.0 = phi i32 [ %conv43, %sw.bb36 ], [ %conv, %sw.bb29 ], [ %land.ext, %land.end ], [ 1, %entry ], [ 0, %if.end ], [ 0, %if.end4 ], [ 0, %if.end9 ], [ 0, %if.end17 ], [ 0, %if.end17 ], [ 0, %if.end17 ], [ 0, %if.end17 ], [ 1, %sw.epilog ], [ 0, %for.body99 ], [ 0, %sw.bb54 ], [ 0, %sw.bb66 ], [ 0, %sw.bb78 ], [ 0, %sw.bb117 ], [ 0, %lor.lhs.false154 ], [ 0, %lor.lhs.false148 ], [ 0, %lor.lhs.false137 ], [ 1, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #5

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !3, i64 0}
!2 = metadata !{metadata !"rtvec_def", metadata !3, i64 0, metadata !4, i64 8}
!3 = metadata !{metadata !"int", metadata !4, i64 0}
!4 = metadata !{metadata !"omnipotent char", metadata !5, i64 0}
!5 = metadata !{metadata !"Simple C/C++ TBAA"}
!6 = metadata !{metadata !4, metadata !4, i64 0}
!7 = metadata !{metadata !8, metadata !8, i64 0}
!8 = metadata !{metadata !"any pointer", metadata !4, i64 0}
!9 = metadata !{metadata !3, metadata !3, i64 0}
!10 = metadata !{metadata !11, metadata !11, i64 0}
!11 = metadata !{metadata !"long long", metadata !4, i64 0}
