; ModuleID = 'lists.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }

@unused_insn_list = internal global %struct.rtx_def* null, align 8
@unused_expr_list = internal global %struct.rtx_def* null, align 8

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %val, %struct.rtx_def* %next) #0 {
entry:
  %0 = load %struct.rtx_def** @unused_insn_list, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  store %struct.rtx_def* %1, %struct.rtx_def** @unused_insn_list, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0, i32 0
  %val.c = ptrtoint %struct.rtx_def* %val to i64
  store i64 %val.c, i64* %2, align 8, !tbaa !1
  %3 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %next.c = ptrtoint %struct.rtx_def* %next to i64
  store i64 %next.c, i64* %3, align 8, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, -16711681
  store i32 %bf.clear, i32* %4, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_ue(i32 4, i32 0, %struct.rtx_def* %val, %struct.rtx_def* %next) #2
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %r.0 = phi %struct.rtx_def* [ %0, %if.then ], [ %call, %if.else ]
  ret %struct.rtx_def* %r.0
}

declare %struct.rtx_def* @gen_rtx_fmt_ue(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @alloc_EXPR_LIST(i32 %kind, %struct.rtx_def* %val, %struct.rtx_def* %next) #0 {
entry:
  %0 = load %struct.rtx_def** @unused_expr_list, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  store %struct.rtx_def* %1, %struct.rtx_def** @unused_expr_list, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0, i32 0
  %val.c = ptrtoint %struct.rtx_def* %val to i64
  store i64 %val.c, i64* %2, align 8, !tbaa !1
  %3 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %next.c = ptrtoint %struct.rtx_def* %next to i64
  store i64 %next.c, i64* %3, align 8, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.value = shl i32 %kind, 16
  %bf.shl = and i32 %bf.value, 16711680
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %4, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 %kind, %struct.rtx_def* %val, %struct.rtx_def* %next) #2
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %r.0 = phi %struct.rtx_def* [ %0, %if.then ], [ %call, %if.else ]
  ret %struct.rtx_def* %r.0
}

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @init_EXPR_INSN_LIST_cache() #0 {
entry:
  tail call void @ggc_add_root(i8* bitcast (%struct.rtx_def** @unused_expr_list to i8*), i32 1, i32 1, void (i8*)* @zap_lists) #2
  ret void
}

declare void @ggc_add_root(i8*, i32, i32, void (i8*)*) #1

; Function Attrs: nounwind uwtable
define internal void @zap_lists(i8* nocapture readnone %dummy) #0 {
entry:
  store %struct.rtx_def* null, %struct.rtx_def** @unused_expr_list, align 8, !tbaa !1
  store %struct.rtx_def* null, %struct.rtx_def** @unused_insn_list, align 8, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_EXPR_LIST_list(%struct.rtx_def** nocapture %listp) #0 {
entry:
  %0 = load %struct.rtx_def** %listp, align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %return, label %while.cond.i

while.cond.i:                                     ; preds = %entry, %while.cond.i
  %.pn.i = phi %struct.rtx_def* [ %link.0.i, %while.cond.i ], [ %0, %entry ]
  %link.0.in.in.i = getelementptr inbounds %struct.rtx_def* %.pn.i, i64 0, i32 1, i64 1
  %link.0.in.i = bitcast %union.rtunion_def* %link.0.in.in.i to %struct.rtx_def**
  %link.0.i = load %struct.rtx_def** %link.0.in.i, align 8
  %tobool.i = icmp eq %struct.rtx_def* %link.0.i, null
  br i1 %tobool.i, label %free_list.exit, label %while.cond.i

free_list.exit:                                   ; preds = %while.cond.i
  %1 = load %struct.rtx_def** @unused_expr_list, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %.pn.i, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %1 to i64
  store i64 %.c.i, i64* %2, align 8, !tbaa !1
  %3 = load %struct.rtx_def** %listp, align 8, !tbaa !1
  store %struct.rtx_def* %3, %struct.rtx_def** @unused_expr_list, align 8, !tbaa !1
  store %struct.rtx_def* null, %struct.rtx_def** %listp, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %entry, %free_list.exit
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_INSN_LIST_list(%struct.rtx_def** nocapture %listp) #0 {
entry:
  %0 = load %struct.rtx_def** %listp, align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %return, label %while.cond.i

while.cond.i:                                     ; preds = %entry, %while.cond.i
  %.pn.i = phi %struct.rtx_def* [ %link.0.i, %while.cond.i ], [ %0, %entry ]
  %link.0.in.in.i = getelementptr inbounds %struct.rtx_def* %.pn.i, i64 0, i32 1, i64 1
  %link.0.in.i = bitcast %union.rtunion_def* %link.0.in.in.i to %struct.rtx_def**
  %link.0.i = load %struct.rtx_def** %link.0.in.i, align 8
  %tobool.i = icmp eq %struct.rtx_def* %link.0.i, null
  br i1 %tobool.i, label %free_list.exit, label %while.cond.i

free_list.exit:                                   ; preds = %while.cond.i
  %1 = load %struct.rtx_def** @unused_insn_list, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %.pn.i, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %1 to i64
  store i64 %.c.i, i64* %2, align 8, !tbaa !1
  %3 = load %struct.rtx_def** %listp, align 8, !tbaa !1
  store %struct.rtx_def* %3, %struct.rtx_def** @unused_insn_list, align 8, !tbaa !1
  store %struct.rtx_def* null, %struct.rtx_def** %listp, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %entry, %free_list.exit
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_EXPR_LIST_node(%struct.rtx_def* %ptr) #0 {
entry:
  %0 = load %struct.rtx_def** @unused_expr_list, align 8, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %ptr, i64 0, i32 1, i64 1, i32 0
  %.c = ptrtoint %struct.rtx_def* %0 to i64
  store i64 %.c, i64* %1, align 8, !tbaa !1
  store %struct.rtx_def* %ptr, %struct.rtx_def** @unused_expr_list, align 8, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_INSN_LIST_node(%struct.rtx_def* %ptr) #0 {
entry:
  %0 = load %struct.rtx_def** @unused_insn_list, align 8, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %ptr, i64 0, i32 1, i64 1, i32 0
  %.c = ptrtoint %struct.rtx_def* %0 to i64
  store i64 %.c, i64* %1, align 8, !tbaa !1
  store %struct.rtx_def* %ptr, %struct.rtx_def** @unused_insn_list, align 8, !tbaa !1
  ret void
}

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
