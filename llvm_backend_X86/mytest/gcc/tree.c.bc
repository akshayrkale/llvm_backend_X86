; ModuleID = 'tree.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i32 }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%struct.rtx_def = type opaque
%union.anon.1 = type { %struct.function* }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.lang_decl = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.realvaluetype = type { [3 x i64] }
%struct.lang_hooks = type { i8*, i64, void ()*, i32 (i32, i8**)*, void ()*, i8* (i8*)*, void ()*, void ()*, i64 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (%struct.rtx_def*, %union.tree_node*)*, i32 (%union.tree_node*)*, i8, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (i32)*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_tree_dump }
%struct.lang_hooks_for_tree_inlining = type { %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, i8*)*, i32 (%union.tree_node**)*, i32 (%union.tree_node*)*, %union.tree_node* (i8*, %union.tree_node*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8*, i32*, i8*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_tree_dump = type { i32 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.brfic_args = type { %union.tree_node*, %union.tree_node*, %struct.realvaluetype }
%struct.type_hash = type { i64, %union.tree_node* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }

@tree_code_type = global [256 x i8] c"xxxxbttttttttttttttttttttcccccdddddddddrrrrrrreeeeeeeeeeexe22222222222221111112211222222221eeeeee<<<<<<<<<<<<<2<121111eeeeeee2111eeeeeeeessssseeeee\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@tree_code_length = global [256 x i32] [i32 0, i32 -1, i32 2, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 3, i32 1, i32 1, i32 2, i32 2, i32 3, i32 2, i32 2, i32 2, i32 2, i32 4, i32 3, i32 3, i32 2, i32 4, i32 3, i32 1, i32 0, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 2, i32 1, i32 1, i32 1, i32 1, i32 3, i32 1, i32 2, i32 1, i32 1, i32 1, i32 2, i32 2, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 1, i32 2, i32 2, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 3, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], align 16
@.str = private unnamed_addr constant [11 x i8] c"error_mark\00", align 1
@.str1 = private unnamed_addr constant [16 x i8] c"identifier_node\00", align 1
@.str2 = private unnamed_addr constant [10 x i8] c"tree_list\00", align 1
@.str3 = private unnamed_addr constant [9 x i8] c"tree_vec\00", align 1
@.str4 = private unnamed_addr constant [6 x i8] c"block\00", align 1
@.str5 = private unnamed_addr constant [10 x i8] c"void_type\00", align 1
@.str6 = private unnamed_addr constant [13 x i8] c"integer_type\00", align 1
@.str7 = private unnamed_addr constant [10 x i8] c"real_type\00", align 1
@.str8 = private unnamed_addr constant [13 x i8] c"complex_type\00", align 1
@.str9 = private unnamed_addr constant [12 x i8] c"vector_type\00", align 1
@.str10 = private unnamed_addr constant [14 x i8] c"enumeral_type\00", align 1
@.str11 = private unnamed_addr constant [13 x i8] c"boolean_type\00", align 1
@.str12 = private unnamed_addr constant [10 x i8] c"char_type\00", align 1
@.str13 = private unnamed_addr constant [13 x i8] c"pointer_type\00", align 1
@.str14 = private unnamed_addr constant [12 x i8] c"offset_type\00", align 1
@.str15 = private unnamed_addr constant [15 x i8] c"reference_type\00", align 1
@.str16 = private unnamed_addr constant [12 x i8] c"method_type\00", align 1
@.str17 = private unnamed_addr constant [10 x i8] c"file_type\00", align 1
@.str18 = private unnamed_addr constant [11 x i8] c"array_type\00", align 1
@.str19 = private unnamed_addr constant [9 x i8] c"set_type\00", align 1
@.str20 = private unnamed_addr constant [12 x i8] c"record_type\00", align 1
@.str21 = private unnamed_addr constant [11 x i8] c"union_type\00", align 1
@.str22 = private unnamed_addr constant [16 x i8] c"qual_union_type\00", align 1
@.str23 = private unnamed_addr constant [14 x i8] c"function_type\00", align 1
@.str24 = private unnamed_addr constant [10 x i8] c"lang_type\00", align 1
@.str25 = private unnamed_addr constant [12 x i8] c"integer_cst\00", align 1
@.str26 = private unnamed_addr constant [9 x i8] c"real_cst\00", align 1
@.str27 = private unnamed_addr constant [12 x i8] c"complex_cst\00", align 1
@.str28 = private unnamed_addr constant [11 x i8] c"vector_cst\00", align 1
@.str29 = private unnamed_addr constant [11 x i8] c"string_cst\00", align 1
@.str30 = private unnamed_addr constant [14 x i8] c"function_decl\00", align 1
@.str31 = private unnamed_addr constant [11 x i8] c"label_decl\00", align 1
@.str32 = private unnamed_addr constant [11 x i8] c"const_decl\00", align 1
@.str33 = private unnamed_addr constant [10 x i8] c"type_decl\00", align 1
@.str34 = private unnamed_addr constant [9 x i8] c"var_decl\00", align 1
@.str35 = private unnamed_addr constant [10 x i8] c"parm_decl\00", align 1
@.str36 = private unnamed_addr constant [12 x i8] c"result_decl\00", align 1
@.str37 = private unnamed_addr constant [11 x i8] c"field_decl\00", align 1
@.str38 = private unnamed_addr constant [15 x i8] c"namespace_decl\00", align 1
@.str39 = private unnamed_addr constant [14 x i8] c"component_ref\00", align 1
@.str40 = private unnamed_addr constant [14 x i8] c"bit_field_ref\00", align 1
@.str41 = private unnamed_addr constant [13 x i8] c"indirect_ref\00", align 1
@.str42 = private unnamed_addr constant [11 x i8] c"buffer_ref\00", align 1
@.str43 = private unnamed_addr constant [10 x i8] c"array_ref\00", align 1
@.str44 = private unnamed_addr constant [16 x i8] c"array_range_ref\00", align 1
@.str45 = private unnamed_addr constant [11 x i8] c"vtable_ref\00", align 1
@.str46 = private unnamed_addr constant [12 x i8] c"constructor\00", align 1
@.str47 = private unnamed_addr constant [14 x i8] c"compound_expr\00", align 1
@.str48 = private unnamed_addr constant [12 x i8] c"modify_expr\00", align 1
@.str49 = private unnamed_addr constant [10 x i8] c"init_expr\00", align 1
@.str50 = private unnamed_addr constant [12 x i8] c"target_expr\00", align 1
@.str51 = private unnamed_addr constant [10 x i8] c"cond_expr\00", align 1
@.str52 = private unnamed_addr constant [10 x i8] c"bind_expr\00", align 1
@.str53 = private unnamed_addr constant [10 x i8] c"call_expr\00", align 1
@.str54 = private unnamed_addr constant [17 x i8] c"method_call_expr\00", align 1
@.str55 = private unnamed_addr constant [18 x i8] c"with_cleanup_expr\00", align 1
@.str56 = private unnamed_addr constant [19 x i8] c"cleanup_point_expr\00", align 1
@.str57 = private unnamed_addr constant [17 x i8] c"placeholder_expr\00", align 1
@.str58 = private unnamed_addr constant [17 x i8] c"with_record_expr\00", align 1
@.str59 = private unnamed_addr constant [10 x i8] c"plus_expr\00", align 1
@.str60 = private unnamed_addr constant [11 x i8] c"minus_expr\00", align 1
@.str61 = private unnamed_addr constant [10 x i8] c"mult_expr\00", align 1
@.str62 = private unnamed_addr constant [15 x i8] c"trunc_div_expr\00", align 1
@.str63 = private unnamed_addr constant [14 x i8] c"ceil_div_expr\00", align 1
@.str64 = private unnamed_addr constant [15 x i8] c"floor_div_expr\00", align 1
@.str65 = private unnamed_addr constant [15 x i8] c"round_div_expr\00", align 1
@.str66 = private unnamed_addr constant [15 x i8] c"trunc_mod_expr\00", align 1
@.str67 = private unnamed_addr constant [14 x i8] c"ceil_mod_expr\00", align 1
@.str68 = private unnamed_addr constant [15 x i8] c"floor_mod_expr\00", align 1
@.str69 = private unnamed_addr constant [15 x i8] c"round_mod_expr\00", align 1
@.str70 = private unnamed_addr constant [10 x i8] c"rdiv_expr\00", align 1
@.str71 = private unnamed_addr constant [15 x i8] c"exact_div_expr\00", align 1
@.str72 = private unnamed_addr constant [15 x i8] c"fix_trunc_expr\00", align 1
@.str73 = private unnamed_addr constant [14 x i8] c"fix_ceil_expr\00", align 1
@.str74 = private unnamed_addr constant [15 x i8] c"fix_floor_expr\00", align 1
@.str75 = private unnamed_addr constant [15 x i8] c"fix_round_expr\00", align 1
@.str76 = private unnamed_addr constant [11 x i8] c"float_expr\00", align 1
@.str77 = private unnamed_addr constant [12 x i8] c"negate_expr\00", align 1
@.str78 = private unnamed_addr constant [9 x i8] c"min_expr\00", align 1
@.str79 = private unnamed_addr constant [9 x i8] c"max_expr\00", align 1
@.str80 = private unnamed_addr constant [9 x i8] c"abs_expr\00", align 1
@.str81 = private unnamed_addr constant [9 x i8] c"ffs_expr\00", align 1
@.str82 = private unnamed_addr constant [12 x i8] c"lshift_expr\00", align 1
@.str83 = private unnamed_addr constant [12 x i8] c"rshift_expr\00", align 1
@.str84 = private unnamed_addr constant [13 x i8] c"lrotate_expr\00", align 1
@.str85 = private unnamed_addr constant [13 x i8] c"rrotate_expr\00", align 1
@.str86 = private unnamed_addr constant [13 x i8] c"bit_ior_expr\00", align 1
@.str87 = private unnamed_addr constant [13 x i8] c"bit_xor_expr\00", align 1
@.str88 = private unnamed_addr constant [13 x i8] c"bit_and_expr\00", align 1
@.str89 = private unnamed_addr constant [15 x i8] c"bit_andtc_expr\00", align 1
@.str90 = private unnamed_addr constant [13 x i8] c"bit_not_expr\00", align 1
@.str91 = private unnamed_addr constant [17 x i8] c"truth_andif_expr\00", align 1
@.str92 = private unnamed_addr constant [16 x i8] c"truth_orif_expr\00", align 1
@.str93 = private unnamed_addr constant [15 x i8] c"truth_and_expr\00", align 1
@.str94 = private unnamed_addr constant [14 x i8] c"truth_or_expr\00", align 1
@.str95 = private unnamed_addr constant [15 x i8] c"truth_xor_expr\00", align 1
@.str96 = private unnamed_addr constant [15 x i8] c"truth_not_expr\00", align 1
@.str97 = private unnamed_addr constant [8 x i8] c"lt_expr\00", align 1
@.str98 = private unnamed_addr constant [8 x i8] c"le_expr\00", align 1
@.str99 = private unnamed_addr constant [8 x i8] c"gt_expr\00", align 1
@.str100 = private unnamed_addr constant [8 x i8] c"ge_expr\00", align 1
@.str101 = private unnamed_addr constant [8 x i8] c"eq_expr\00", align 1
@.str102 = private unnamed_addr constant [8 x i8] c"ne_expr\00", align 1
@.str103 = private unnamed_addr constant [15 x i8] c"unordered_expr\00", align 1
@.str104 = private unnamed_addr constant [13 x i8] c"ordered_expr\00", align 1
@.str105 = private unnamed_addr constant [10 x i8] c"unlt_expr\00", align 1
@.str106 = private unnamed_addr constant [10 x i8] c"unle_expr\00", align 1
@.str107 = private unnamed_addr constant [10 x i8] c"ungt_expr\00", align 1
@.str108 = private unnamed_addr constant [10 x i8] c"unge_expr\00", align 1
@.str109 = private unnamed_addr constant [10 x i8] c"uneq_expr\00", align 1
@.str110 = private unnamed_addr constant [8 x i8] c"in_expr\00", align 1
@.str111 = private unnamed_addr constant [12 x i8] c"set_le_expr\00", align 1
@.str112 = private unnamed_addr constant [10 x i8] c"card_expr\00", align 1
@.str113 = private unnamed_addr constant [11 x i8] c"range_expr\00", align 1
@.str114 = private unnamed_addr constant [13 x i8] c"convert_expr\00", align 1
@.str115 = private unnamed_addr constant [9 x i8] c"nop_expr\00", align 1
@.str116 = private unnamed_addr constant [16 x i8] c"non_lvalue_expr\00", align 1
@.str117 = private unnamed_addr constant [18 x i8] c"view_convert_expr\00", align 1
@.str118 = private unnamed_addr constant [10 x i8] c"save_expr\00", align 1
@.str119 = private unnamed_addr constant [12 x i8] c"unsave_expr\00", align 1
@.str120 = private unnamed_addr constant [9 x i8] c"rtl_expr\00", align 1
@.str121 = private unnamed_addr constant [10 x i8] c"addr_expr\00", align 1
@.str122 = private unnamed_addr constant [15 x i8] c"reference_expr\00", align 1
@.str123 = private unnamed_addr constant [17 x i8] c"entry_value_expr\00", align 1
@.str124 = private unnamed_addr constant [11 x i8] c"fdesc_expr\00", align 1
@.str125 = private unnamed_addr constant [13 x i8] c"complex_expr\00", align 1
@.str126 = private unnamed_addr constant [10 x i8] c"conj_expr\00", align 1
@.str127 = private unnamed_addr constant [14 x i8] c"realpart_expr\00", align 1
@.str128 = private unnamed_addr constant [14 x i8] c"imagpart_expr\00", align 1
@.str129 = private unnamed_addr constant [18 x i8] c"predecrement_expr\00", align 1
@.str130 = private unnamed_addr constant [18 x i8] c"preincrement_expr\00", align 1
@.str131 = private unnamed_addr constant [19 x i8] c"postdecrement_expr\00", align 1
@.str132 = private unnamed_addr constant [19 x i8] c"postincrement_expr\00", align 1
@.str133 = private unnamed_addr constant [12 x i8] c"va_arg_expr\00", align 1
@.str134 = private unnamed_addr constant [15 x i8] c"try_catch_expr\00", align 1
@.str135 = private unnamed_addr constant [12 x i8] c"try_finally\00", align 1
@.str136 = private unnamed_addr constant [16 x i8] c"goto_subroutine\00", align 1
@.str137 = private unnamed_addr constant [11 x i8] c"label_expr\00", align 1
@.str138 = private unnamed_addr constant [10 x i8] c"goto_expr\00", align 1
@.str139 = private unnamed_addr constant [12 x i8] c"return_expr\00", align 1
@.str140 = private unnamed_addr constant [10 x i8] c"exit_expr\00", align 1
@.str141 = private unnamed_addr constant [10 x i8] c"loop_expr\00", align 1
@.str142 = private unnamed_addr constant [19 x i8] c"labeled_block_expr\00", align 1
@.str143 = private unnamed_addr constant [16 x i8] c"exit_block_expr\00", align 1
@.str144 = private unnamed_addr constant [24 x i8] c"expr_with_file_location\00", align 1
@.str145 = private unnamed_addr constant [12 x i8] c"switch_expr\00", align 1
@.str146 = private unnamed_addr constant [13 x i8] c"exc_ptr_expr\00", align 1
@tree_code_name = global [256 x i8*] [i8* getelementptr inbounds ([11 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str1, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str4, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str10, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str11, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str12, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str13, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str15, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str18, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str19, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str20, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str21, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str22, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str23, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str25, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str27, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str28, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str29, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str30, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str31, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str32, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str33, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str34, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str36, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str37, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str39, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str40, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str42, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str43, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str44, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str45, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str46, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str47, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str48, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str49, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str50, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str51, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str52, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str53, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8]* @.str55, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str56, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str58, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str59, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str60, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str61, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str62, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str63, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str64, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str65, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str66, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str67, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str68, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str69, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str70, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str71, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str72, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str73, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str74, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str75, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str76, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str77, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str78, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str79, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str80, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str81, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str82, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str83, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str84, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str85, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str86, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str87, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str88, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str89, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str90, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str91, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str92, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str93, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str94, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str95, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str96, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str97, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str98, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str99, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str100, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str102, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str103, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str104, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str105, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str106, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str107, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str108, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str109, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str110, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str111, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str112, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str113, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str114, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str115, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str116, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8]* @.str117, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str118, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str119, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str120, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str121, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str122, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str123, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str124, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str125, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str126, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8]* @.str128, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8]* @.str129, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8]* @.str130, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str131, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str132, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str133, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str134, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str135, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str136, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8]* @.str137, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str138, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str139, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str140, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str141, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8]* @.str142, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8]* @.str143, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str144, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str145, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8]* @.str146, i32 0, i32 0), i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i8* null], align 16
@.str147 = private unnamed_addr constant [7 x i8] c"tree.c\00", align 1
@__FUNCTION__.set_decl_assembler_name = private unnamed_addr constant [24 x i8] c"set_decl_assembler_name\00", align 1
@permanent_obstack = common global %struct.obstack zeroinitializer, align 8
@type_hash_table = common global %struct.htab* null, align 8
@global_trees = common global [51 x %union.tree_node*] zeroinitializer, align 16
@integer_types = common global [11 x %union.tree_node*] zeroinitializer, align 16
@lang_set_decl_assembler_name = common global void (%union.tree_node*)* null, align 8
@__FUNCTION__.tree_size = private unnamed_addr constant [10 x i8] c"tree_size\00", align 1
@__FUNCTION__.make_node = private unnamed_addr constant [10 x i8] c"make_node\00", align 1
@in_system_header = external global i32
@lineno = external global i32
@input_filename = external global i8*
@.str148 = private unnamed_addr constant [11 x i8] c"<built-in>\00", align 1
@next_decl_uid = internal unnamed_addr global i32 0, align 4
@next_type_uid = internal unnamed_addr global i32 1, align 4
@targetm = external global %struct.gcc_target
@make_lang_type_fn = global %union.tree_node* (i32)* @make_node, align 8
@dconst0 = external global %struct.realvaluetype
@mode_bitsize = external constant [59 x i16]
@__FUNCTION__.integer_all_onesp = private unnamed_addr constant [18 x i8] c"integer_all_onesp\00", align 1
@target_flags = external global i32
@dconst1 = external global %struct.realvaluetype
@dconst2 = external global %struct.realvaluetype
@lang_hooks = external constant %struct.lang_hooks
@current_function_decl = external global %union.tree_node*
@__FUNCTION__.unsave_expr_1 = private unnamed_addr constant [14 x i8] c"unsave_expr_1\00", align 1
@lang_unsave_expr_now = common global void (%union.tree_node*)* null, align 8
@lang_unsave = common global void (%union.tree_node**)* null, align 8
@lang_unsafe_for_reeval = common global i32 (%union.tree_node*)* null, align 8
@__FUNCTION__.substitute_in_expr = private unnamed_addr constant [19 x i8] c"substitute_in_expr\00", align 1
@__FUNCTION__.stabilize_reference_1 = private unnamed_addr constant [22 x i8] c"stabilize_reference_1\00", align 1
@__FUNCTION__.build = private unnamed_addr constant [6 x i8] c"build\00", align 1
@build_expr_wfl.last_file = internal unnamed_addr global i8* null, align 8
@build_expr_wfl.last_filenode = internal unnamed_addr global %union.tree_node* null, align 8
@default_target_attribute_table = constant [1 x %struct.attribute_spec] zeroinitializer, align 16
@__FUNCTION__.is_attribute_p = private unnamed_addr constant [15 x i8] c"is_attribute_p\00", align 1
@__FUNCTION__.lookup_attribute = private unnamed_addr constant [17 x i8] c"lookup_attribute\00", align 1
@debug_no_type_hash = global i32 0, align 4
@__FUNCTION__.tree_low_cst = private unnamed_addr constant [13 x i8] c"tree_low_cst\00", align 1
@__FUNCTION__.simple_cst_equal = private unnamed_addr constant [17 x i8] c"simple_cst_equal\00", align 1
@sizetype_tab = external global [6 x %union.tree_node*]
@.str149 = private unnamed_addr constant [39 x i8] c"arrays of functions are not meaningful\00", align 1
@.str150 = private unnamed_addr constant [40 x i8] c"function return type cannot be function\00", align 1
@__FUNCTION__.build_method_type = private unnamed_addr constant [18 x i8] c"build_method_type\00", align 1
@write_symbols = external global i32
@.str151 = private unnamed_addr constant [13 x i8] c"complex char\00", align 1
@.str152 = private unnamed_addr constant [20 x i8] c"complex signed char\00", align 1
@.str153 = private unnamed_addr constant [22 x i8] c"complex unsigned char\00", align 1
@.str154 = private unnamed_addr constant [18 x i8] c"complex short int\00", align 1
@.str155 = private unnamed_addr constant [27 x i8] c"complex short unsigned int\00", align 1
@.str156 = private unnamed_addr constant [12 x i8] c"complex int\00", align 1
@.str157 = private unnamed_addr constant [21 x i8] c"complex unsigned int\00", align 1
@.str158 = private unnamed_addr constant [17 x i8] c"complex long int\00", align 1
@.str159 = private unnamed_addr constant [26 x i8] c"complex long unsigned int\00", align 1
@.str160 = private unnamed_addr constant [22 x i8] c"complex long long int\00", align 1
@.str161 = private unnamed_addr constant [31 x i8] c"complex long long unsigned int\00", align 1
@__FUNCTION__.decl_type_context = private unnamed_addr constant [18 x i8] c"decl_type_context\00", align 1
@__FUNCTION__.get_callee_fndecl = private unnamed_addr constant [18 x i8] c"get_callee_fndecl\00", align 1
@stderr = external constant %struct._IO_FILE*
@.str162 = private unnamed_addr constant [33 x i8] c"obstack %s: %u bytes, %d chunks\0A\00", align 1
@.str163 = private unnamed_addr constant [26 x i8] c"\0A??? tree nodes created\0A\0A\00", align 1
@.str164 = private unnamed_addr constant [26 x i8] c"(No per-node statistics)\0A\00", align 1
@.str165 = private unnamed_addr constant [18 x i8] c"permanent_obstack\00", align 1
@_sch_istable = external constant [256 x i16]
@first_global_object_name = external global i8*
@weak_global_object_name = external global i8*
@main_input_filename = external global i8*
@.str166 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str167 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str168 = private unnamed_addr constant [15 x i8] c"_GLOBAL__%s_%s\00", align 1
@__FUNCTION__.get_set_constructor_bits = private unnamed_addr constant [25 x i8] c"get_set_constructor_bits\00", align 1
@.str169 = private unnamed_addr constant [35 x i8] c"invalid initializer for bit string\00", align 1
@tree_node_counts = common global [14 x i32] zeroinitializer, align 16
@tree_node_sizes = common global [14 x i32] zeroinitializer, align 16
@mode_unit_size = external constant [59 x i8]
@mode_size = external constant [59 x i8]
@.str170 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@append_random_chars.letters = internal unnamed_addr constant [63 x i8] c"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\00", align 16
@append_random_chars.value = internal unnamed_addr global i64 0, align 8
@.str171 = private unnamed_addr constant [50 x i8] c"Type hash: size %ld, %ld elements, %f collisions\0A\00", align 1
@ggc_pending_trees = external global %struct.varray_head_tag*
@__FUNCTION__.unsave_expr_now_r = private unnamed_addr constant [18 x i8] c"unsave_expr_now_r\00", align 1

; Function Attrs: nounwind uwtable
define void @set_decl_assembler_name(%union.tree_node* nocapture %decl) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else [
    i32 30, label %if.then
    i32 34, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %entry
  %bf.clear8 = and i32 %bf.load, 262144
  %tobool = icmp eq i32 %bf.clear8, 0
  br i1 %tobool, label %lor.lhs.false9, label %if.then

lor.lhs.false9:                                   ; preds = %land.lhs.true
  %external_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %0 = bitcast i48* %external_flag to i64*
  %bf.load11 = load i64* %0, align 8
  %bf.cast = and i64 %bf.load11, 256
  %tobool14 = icmp eq i64 %bf.cast, 0
  %bf.clear19 = and i32 %bf.load, 524288
  %tobool20 = icmp eq i32 %bf.clear19, 0
  %or.cond = and i1 %tobool14, %tobool20
  br i1 %or.cond, label %if.else, label %if.then

if.then:                                          ; preds = %entry, %lor.lhs.false9, %land.lhs.true
  %name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 8
  %1 = load %union.tree_node** %name, align 8, !tbaa !1
  %assembler_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 14
  store %union.tree_node* %1, %union.tree_node** %assembler_name, align 8, !tbaa !9
  ret void

if.else:                                          ; preds = %lor.lhs.false9, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 216, i8* getelementptr inbounds ([24 x i8]* @__FUNCTION__.set_decl_assembler_name, i64 0, i64 0)) #8
  unreachable
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #1

; Function Attrs: nounwind uwtable
define void @init_obstacks() #0 {
entry:
  tail call void @gcc_obstack_init(%struct.obstack* @permanent_obstack) #4
  %call = tail call %struct.htab* @htab_create(i64 1000, i32 (i8*)* @type_hash_hash, i32 (i8*, i8*)* @type_hash_eq, void (i8*)* null) #4
  store %struct.htab* %call, %struct.htab** @type_hash_table, align 8, !tbaa !10
  %0 = bitcast %struct.htab* %call to i8*
  tail call void @ggc_add_deletable_htab(i8* %0, i32 (i8*)* @type_hash_marked_p, void (i8*)* @type_hash_mark) #4
  tail call void @ggc_add_tree_root(%union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), i32 51) #4
  tail call void @ggc_add_tree_root(%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), i32 11) #4
  store void (%union.tree_node*)* @set_decl_assembler_name, void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !10
  ret void
}

declare void @gcc_obstack_init(%struct.obstack*) #2

declare %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: nounwind readonly uwtable
define internal i32 @type_hash_hash(i8* nocapture readonly %item) #3 {
entry:
  %hash = bitcast i8* %item to i64*
  %0 = load i64* %hash, align 8, !tbaa !11
  %conv = trunc i64 %0 to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal i32 @type_hash_eq(i8* nocapture readonly %va, i8* nocapture readonly %vb) #0 {
entry:
  %hash = bitcast i8* %va to i64*
  %0 = load i64* %hash, align 8, !tbaa !11
  %hash1 = bitcast i8* %vb to i64*
  %1 = load i64* %hash1, align 8, !tbaa !11
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %type = getelementptr inbounds i8* %va, i64 8
  %2 = bitcast i8* %type to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !14
  %code = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %type2 = getelementptr inbounds i8* %vb, i64 8
  %4 = bitcast i8* %type2 to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !14
  %code4 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.load5 = load i32* %code4, align 8
  %6 = xor i32 %bf.load5, %bf.load
  %7 = and i32 %6, 255
  %cmp7 = icmp eq i32 %7, 0
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true
  %type11 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type11, align 8, !tbaa !15
  %type14 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 1
  %9 = load %union.tree_node** %type14, align 8, !tbaa !15
  %cmp15 = icmp eq %union.tree_node* %8, %9
  br i1 %cmp15, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %land.lhs.true8
  %attributes = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 5
  %10 = bitcast i48* %attributes to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !16
  %attributes21 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 5
  %12 = bitcast i48* %attributes21 to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !16
  %call.i = tail call i32 @attribute_list_contained(%union.tree_node* %11, %union.tree_node* %13) #4
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %if.end, label %land.rhs.i

land.rhs.i:                                       ; preds = %land.lhs.true16
  %call1.i = tail call i32 @attribute_list_contained(%union.tree_node* %13, %union.tree_node* %11) #4
  %tobool2.i = icmp eq i32 %call1.i, 0
  br i1 %tobool2.i, label %if.end, label %land.lhs.true22

land.lhs.true22:                                  ; preds = %land.rhs.i
  %14 = load %union.tree_node** %2, align 8, !tbaa !14
  %align = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 7
  %15 = bitcast %union.tree_node** %align to i32*
  %16 = load i32* %15, align 4, !tbaa !18
  %17 = load %union.tree_node** %4, align 8, !tbaa !14
  %align27 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 7
  %18 = bitcast %union.tree_node** %align27 to i32*
  %19 = load i32* %18, align 4, !tbaa !18
  %cmp28 = icmp eq i32 %16, %19
  br i1 %cmp28, label %land.lhs.true29, label %if.end

land.lhs.true29:                                  ; preds = %land.lhs.true22
  %20 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 13
  %21 = load %union.tree_node** %20, align 8, !tbaa !19
  %22 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 13
  %23 = load %union.tree_node** %22, align 8, !tbaa !19
  %cmp35 = icmp eq %union.tree_node* %21, %23
  br i1 %cmp35, label %land.lhs.true44, label %if.end.i

if.end.i:                                         ; preds = %land.lhs.true29
  %cmp1.i = icmp eq %union.tree_node* %21, null
  %cmp2.i = icmp eq %union.tree_node* %23, null
  %or.cond.i = or i1 %cmp1.i, %cmp2.i
  br i1 %or.cond.i, label %if.end, label %if.end4.i

if.end4.i:                                        ; preds = %if.end.i
  %code.i = getelementptr inbounds %union.tree_node* %21, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp5.i = icmp eq i32 %bf.clear.i, 25
  br i1 %cmp5.i, label %land.lhs.true.i, label %if.end

land.lhs.true.i:                                  ; preds = %if.end4.i
  %code7.i = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load8.i = load i32* %code7.i, align 8
  %bf.clear9.i = and i32 %bf.load8.i, 255
  %cmp10.i = icmp eq i32 %bf.clear9.i, 25
  br i1 %cmp10.i, label %land.lhs.true11.i, label %if.end

land.lhs.true11.i:                                ; preds = %land.lhs.true.i
  %int_cst12.i = getelementptr inbounds %union.tree_node* %21, i64 0, i32 0, i32 2
  %low.i = bitcast i32* %int_cst12.i to i64*
  %24 = load i64* %low.i, align 8, !tbaa !20
  %int_cst14.i = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 2
  %low15.i = bitcast i32* %int_cst14.i to i64*
  %25 = load i64* %low15.i, align 8, !tbaa !20
  %cmp16.i = icmp eq i64 %24, %25
  br i1 %cmp16.i, label %land.lhs.true17.i, label %if.end

land.lhs.true17.i:                                ; preds = %land.lhs.true11.i
  %high.i = getelementptr inbounds i32* %int_cst12.i, i64 2
  %26 = bitcast i32* %high.i to i64*
  %27 = load i64* %26, align 8, !tbaa !23
  %high22.i = getelementptr inbounds i32* %int_cst14.i, i64 2
  %28 = bitcast i32* %high22.i to i64*
  %29 = load i64* %28, align 8, !tbaa !23
  %cmp23.i = icmp eq i64 %27, %29
  br i1 %cmp23.i, label %land.lhs.true44, label %if.end

land.lhs.true44:                                  ; preds = %land.lhs.true17.i, %land.lhs.true29
  %30 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 12
  %31 = load %union.tree_node** %30, align 8, !tbaa !24
  %32 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 12
  %33 = load %union.tree_node** %32, align 8, !tbaa !24
  %cmp50 = icmp eq %union.tree_node* %31, %33
  br i1 %cmp50, label %land.lhs.true60, label %if.end.i132

if.end.i132:                                      ; preds = %land.lhs.true44
  %cmp1.i129 = icmp eq %union.tree_node* %31, null
  %cmp2.i130 = icmp eq %union.tree_node* %33, null
  %or.cond.i131 = or i1 %cmp1.i129, %cmp2.i130
  br i1 %or.cond.i131, label %if.end, label %if.end4.i137

if.end4.i137:                                     ; preds = %if.end.i132
  %code.i133 = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 0, i32 2
  %bf.load.i134 = load i32* %code.i133, align 8
  %bf.clear.i135 = and i32 %bf.load.i134, 255
  %cmp5.i136 = icmp eq i32 %bf.clear.i135, 25
  br i1 %cmp5.i136, label %land.lhs.true.i142, label %if.end

land.lhs.true.i142:                               ; preds = %if.end4.i137
  %code7.i138 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 2
  %bf.load8.i139 = load i32* %code7.i138, align 8
  %bf.clear9.i140 = and i32 %bf.load8.i139, 255
  %cmp10.i141 = icmp eq i32 %bf.clear9.i140, 25
  br i1 %cmp10.i141, label %land.lhs.true11.i148, label %if.end

land.lhs.true11.i148:                             ; preds = %land.lhs.true.i142
  %int_cst12.i143 = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 2
  %low.i144 = bitcast i32* %int_cst12.i143 to i64*
  %34 = load i64* %low.i144, align 8, !tbaa !20
  %int_cst14.i145 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 2
  %low15.i146 = bitcast i32* %int_cst14.i145 to i64*
  %35 = load i64* %low15.i146, align 8, !tbaa !20
  %cmp16.i147 = icmp eq i64 %34, %35
  br i1 %cmp16.i147, label %land.lhs.true17.i152, label %if.end

land.lhs.true17.i152:                             ; preds = %land.lhs.true11.i148
  %high.i149 = getelementptr inbounds i32* %int_cst12.i143, i64 2
  %36 = bitcast i32* %high.i149 to i64*
  %37 = load i64* %36, align 8, !tbaa !23
  %high22.i150 = getelementptr inbounds i32* %int_cst14.i145, i64 2
  %38 = bitcast i32* %high22.i150 to i64*
  %39 = load i64* %38, align 8, !tbaa !23
  %cmp23.i151 = icmp eq i64 %37, %39
  br i1 %cmp23.i151, label %land.lhs.true60, label %if.end

land.lhs.true60:                                  ; preds = %land.lhs.true17.i152, %land.lhs.true44
  %values = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 1
  %40 = load i8** %values, align 8
  %41 = bitcast i8* %40 to %union.tree_node*
  %values65 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 1
  %42 = load i8** %values65, align 8
  %43 = bitcast i8* %42 to %union.tree_node*
  %cmp66 = icmp eq i8* %40, %42
  br i1 %cmp66, label %return, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %land.lhs.true60
  %tobool71 = icmp eq i8* %40, null
  br i1 %tobool71, label %if.end, label %land.lhs.true72

land.lhs.true72:                                  ; preds = %lor.lhs.false67
  %code77 = getelementptr inbounds i8* %40, i64 16
  %44 = bitcast i8* %code77 to i32*
  %bf.load78 = load i32* %44, align 8
  %bf.clear79 = and i32 %bf.load78, 255
  %cmp80 = icmp ne i32 %bf.clear79, 2
  %tobool85 = icmp eq i8* %42, null
  %or.cond = or i1 %cmp80, %tobool85
  br i1 %or.cond, label %if.end, label %land.lhs.true86

land.lhs.true86:                                  ; preds = %land.lhs.true72
  %code91 = getelementptr inbounds i8* %42, i64 16
  %45 = bitcast i8* %code91 to i32*
  %bf.load92 = load i32* %45, align 8
  %bf.clear93 = and i32 %bf.load92, 255
  %cmp94 = icmp eq i32 %bf.clear93, 2
  br i1 %cmp94, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %land.lhs.true86, %for.inc.i
  %t2.042.i = phi %union.tree_node* [ %61, %for.inc.i ], [ %43, %land.lhs.true86 ]
  %t1.041.i = phi %union.tree_node* [ %60, %for.inc.i ], [ %41, %land.lhs.true86 ]
  %value.i = getelementptr inbounds %union.tree_node* %t1.041.i, i64 0, i32 0, i32 2
  %46 = bitcast i32* %value.i to %union.tree_node**
  %47 = load %union.tree_node** %46, align 8, !tbaa !25
  %value3.i = getelementptr inbounds %union.tree_node* %t2.042.i, i64 0, i32 0, i32 2
  %48 = bitcast i32* %value3.i to %union.tree_node**
  %49 = load %union.tree_node** %48, align 8, !tbaa !25
  %cmp.i156 = icmp eq %union.tree_node* %47, %49
  br i1 %cmp.i156, label %lor.lhs.false.i, label %if.end

lor.lhs.false.i:                                  ; preds = %for.body.i
  %purpose.i = getelementptr inbounds %union.tree_node* %t1.041.i, i64 0, i32 0, i32 1
  %50 = load i8** %purpose.i, align 8
  %purpose6.i = getelementptr inbounds %union.tree_node* %t2.042.i, i64 0, i32 0, i32 1
  %51 = load i8** %purpose6.i, align 8
  %cmp7.i = icmp eq i8* %50, %51
  br i1 %cmp7.i, label %for.inc.i, label %land.lhs.true.i158

land.lhs.true.i158:                               ; preds = %lor.lhs.false.i
  %52 = bitcast i8* %50 to %union.tree_node*
  %53 = bitcast i8* %51 to %union.tree_node*
  %call.i157 = tail call i32 @simple_cst_equal(%union.tree_node* %52, %union.tree_node* %53) #4
  %cmp12.i = icmp eq i32 %call.i157, 1
  br i1 %cmp12.i, label %land.lhs.true13.i, label %if.end

land.lhs.true13.i:                                ; preds = %land.lhs.true.i158
  %54 = load i8** %purpose.i, align 8
  %type.i = getelementptr inbounds i8* %54, i64 8
  %55 = bitcast i8* %type.i to %union.tree_node**
  %56 = load %union.tree_node** %55, align 8, !tbaa !15
  %57 = load i8** %purpose6.i, align 8
  %type19.i = getelementptr inbounds i8* %57, i64 8
  %58 = bitcast i8* %type19.i to %union.tree_node**
  %59 = load %union.tree_node** %58, align 8, !tbaa !15
  %cmp20.i = icmp eq %union.tree_node* %56, %59
  br i1 %cmp20.i, label %for.inc.i, label %if.end

for.inc.i:                                        ; preds = %land.lhs.true13.i, %lor.lhs.false.i
  %chain.i = getelementptr inbounds %union.tree_node* %t1.041.i, i64 0, i32 0, i32 0, i32 0
  %60 = load %union.tree_node** %chain.i, align 8, !tbaa !27
  %chain23.i = getelementptr inbounds %union.tree_node* %t2.042.i, i64 0, i32 0, i32 0, i32 0
  %61 = load %union.tree_node** %chain23.i, align 8, !tbaa !27
  %tobool1.i = icmp ne %union.tree_node* %61, null
  %not.tobool.i = icmp ne %union.tree_node* %60, null
  %.tobool1.i = and i1 %tobool1.i, %not.tobool.i
  br i1 %.tobool1.i, label %for.body.i, label %type_list_equal.exit

type_list_equal.exit:                             ; preds = %for.inc.i
  %cmp24.i = icmp eq %union.tree_node* %60, %61
  br i1 %cmp24.i, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true.i158, %land.lhs.true13.i, %for.body.i, %land.rhs.i, %land.lhs.true16, %type_list_equal.exit, %if.end4.i137, %land.lhs.true.i142, %land.lhs.true11.i148, %land.lhs.true17.i152, %if.end.i132, %if.end4.i, %land.lhs.true.i, %land.lhs.true11.i, %land.lhs.true17.i, %if.end.i, %land.lhs.true72, %lor.lhs.false67, %land.lhs.true86, %land.lhs.true22, %land.lhs.true8, %land.lhs.true, %entry
  br label %return

return:                                           ; preds = %type_list_equal.exit, %land.lhs.true60, %if.end
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %type_list_equal.exit ], [ 1, %land.lhs.true60 ]
  ret i32 %retval.0
}

declare void @ggc_add_deletable_htab(i8*, i32 (i8*)*, void (i8*)*) #2

; Function Attrs: nounwind uwtable
define internal i32 @type_hash_marked_p(i8* nocapture readonly %p) #0 {
entry:
  %type1 = getelementptr inbounds i8* %p, i64 8
  %0 = bitcast i8* %type1 to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !14
  %2 = bitcast %union.tree_node* %1 to i8*
  %call = tail call i32 @ggc_marked_p(i8* %2) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %symtab = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 10
  %pointer5 = load %union.tree_node** %symtab, align 8
  %tobool3 = icmp ne %union.tree_node* %pointer5, null
  br label %lor.end

lor.end:                                          ; preds = %entry, %lor.rhs
  %3 = phi i1 [ true, %entry ], [ %tobool3, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define internal void @type_hash_mark(i8* %p) #0 {
entry:
  %cmp = icmp eq i8* %p, null
  br i1 %cmp, label %do.body1, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @ggc_set_mark(i8* %p) #4
  br label %do.body1

do.body1:                                         ; preds = %entry, %if.then
  %type = getelementptr inbounds i8* %p, i64 8
  %0 = bitcast i8* %type to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !14
  %cmp2 = icmp eq %union.tree_node* %1, null
  br i1 %cmp2, label %do.end14, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body1
  %2 = bitcast %union.tree_node* %1 to i8*
  %call3 = tail call i32 @ggc_set_mark(i8* %2) #4
  %tobool = icmp eq i32 %call3, 0
  br i1 %tobool, label %do.body5, label %do.end14

do.body5:                                         ; preds = %land.lhs.true
  %3 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !10
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 1
  %4 = load i64* %elements_used, align 8, !tbaa !28
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 0
  %5 = load i64* %num_elements, align 8, !tbaa !30
  %cmp6 = icmp ult i64 %4, %5
  br i1 %cmp6, label %if.end10, label %if.then7

if.then7:                                         ; preds = %do.body5
  %mul = shl i64 %5, 1
  %call9 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %3, i64 %mul) #4
  store %struct.varray_head_tag* %call9, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !10
  %elements_used11.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call9, i64 0, i32 1
  %.pre = load i64* %elements_used11.phi.trans.insert, align 8, !tbaa !28
  br label %if.end10

if.end10:                                         ; preds = %do.body5, %if.then7
  %6 = phi i64 [ %4, %do.body5 ], [ %.pre, %if.then7 ]
  %7 = phi %struct.varray_head_tag* [ %3, %do.body5 ], [ %call9, %if.then7 ]
  %elements_used11 = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 1
  %inc = add i64 %6, 1
  store i64 %inc, i64* %elements_used11, align 8, !tbaa !28
  %data = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %6
  store %union.tree_node* %1, %union.tree_node** %arrayidx, align 8, !tbaa !10
  br label %do.end14

do.end14:                                         ; preds = %land.lhs.true, %do.body1, %if.end10
  ret void
}

declare void @ggc_add_tree_root(%union.tree_node**, i32) #2

; Function Attrs: nounwind uwtable
define i8* @permalloc(i32 %size) #0 {
entry:
  %0 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !31
  %1 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = sext i32 %size to i64
  %cmp = icmp slt i64 %sub.ptr.sub, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 %size) #4
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %1, %entry ]
  %add.ptr = getelementptr inbounds i8* %2, i64 %conv
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  %3 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 2), align 8, !tbaa !34
  %cmp6 = icmp eq i8* %add.ptr, %3
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 10), align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %sub.ptr.lhs.cast11 = ptrtoint i8* %add.ptr to i64
  %4 = load i32* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 6), align 8, !tbaa !35
  %conv13 = sext i32 %4 to i64
  %add = add nsw i64 %conv13, %sub.ptr.lhs.cast11
  %neg = xor i32 %4, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr16, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  %5 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 1), align 8, !tbaa !36
  %sub.ptr.lhs.cast19 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct._obstack_chunk* %5 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %6 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !31
  %sub.ptr.lhs.cast24 = ptrtoint i8* %6 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast20
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end9
  store i8* %6, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.end9
  %7 = phi i8* [ %6, %if.then29 ], [ %add.ptr16, %if.end9 ]
  store i8* %7, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 2), align 8, !tbaa !34
  ret i8* %3
}

declare void @_obstack_newchunk(%struct.obstack*, i32) #2

; Function Attrs: nounwind uwtable
define i8* @perm_calloc(i32 %nelem, i64 %size) #0 {
entry:
  %conv = sext i32 %nelem to i64
  %mul = mul nsw i64 %conv, %size
  %0 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !31
  %1 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sext = shl i64 %mul, 32
  %conv2 = ashr exact i64 %sext, 32
  %cmp = icmp slt i64 %sub.ptr.sub, %conv2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv1 = trunc i64 %mul to i32
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 %conv1) #4
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %1, %entry ]
  %add.ptr = getelementptr inbounds i8* %2, i64 %conv2
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  %3 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 2), align 8, !tbaa !34
  %cmp8 = icmp eq i8* %add.ptr, %3
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 10), align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end
  %sub.ptr.lhs.cast13 = ptrtoint i8* %add.ptr to i64
  %4 = load i32* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 6), align 8, !tbaa !35
  %conv15 = sext i32 %4 to i64
  %add = add nsw i64 %conv15, %sub.ptr.lhs.cast13
  %neg = xor i32 %4, -1
  %conv17 = sext i32 %neg to i64
  %and = and i64 %add, %conv17
  %add.ptr18 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr18, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  %5 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 1), align 8, !tbaa !36
  %sub.ptr.lhs.cast21 = ptrtoint i8* %add.ptr18 to i64
  %sub.ptr.rhs.cast22 = ptrtoint %struct._obstack_chunk* %5 to i64
  %sub.ptr.sub23 = sub i64 %sub.ptr.lhs.cast21, %sub.ptr.rhs.cast22
  %6 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !31
  %sub.ptr.lhs.cast26 = ptrtoint i8* %6 to i64
  %sub.ptr.sub28 = sub i64 %sub.ptr.lhs.cast26, %sub.ptr.rhs.cast22
  %cmp29 = icmp sgt i64 %sub.ptr.sub23, %sub.ptr.sub28
  br i1 %cmp29, label %if.then31, label %if.end34

if.then31:                                        ; preds = %if.end11
  store i8* %6, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.end11
  %7 = phi i8* [ %6, %if.then31 ], [ %add.ptr18, %if.end11 ]
  store i8* %7, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 2), align 8, !tbaa !34
  tail call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 %mul, i32 1, i1 false)
  ret i8* %3
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define i64 @tree_size(%union.tree_node* nocapture readonly %node) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom41 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom41
  %0 = load i8* %arrayidx, align 1, !tbaa !37
  %conv = sext i8 %0 to i32
  switch i32 %conv, label %sw.default [
    i32 100, label %return
    i32 116, label %sw.bb2
    i32 98, label %sw.bb3
    i32 114, label %sw.bb4
    i32 101, label %sw.bb4
    i32 115, label %sw.bb4
    i32 60, label %sw.bb4
    i32 49, label %sw.bb4
    i32 50, label %sw.bb4
    i32 99, label %sw.bb8
    i32 120, label %sw.bb19
  ]

sw.bb2:                                           ; preds = %entry
  br label %return

sw.bb3:                                           ; preds = %entry
  br label %return

sw.bb4:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %arrayidx6 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41
  %1 = load i32* %arrayidx6, align 4, !tbaa !38
  %sub = add nsw i32 %1, -1
  %conv7 = sext i32 %sub to i64
  %mul = shl nsw i64 %conv7, 3
  %add = add i64 %mul, 40
  br label %return

sw.bb8:                                           ; preds = %entry
  switch i32 %bf.clear, label %if.else13 [
    i32 25, label %return
    i32 26, label %if.then12
  ]

if.then12:                                        ; preds = %sw.bb8
  br label %return

if.else13:                                        ; preds = %sw.bb8
  %arrayidx15 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41
  %2 = load i32* %arrayidx15, align 4, !tbaa !38
  %conv16 = sext i32 %2 to i64
  %mul17 = shl nsw i64 %conv16, 3
  %add18 = add i64 %mul17, 24
  br label %return

sw.bb19:                                          ; preds = %entry
  %arrayidx21 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41
  %3 = load i32* %arrayidx21, align 4, !tbaa !38
  %conv22 = sext i32 %3 to i64
  %mul23 = shl nsw i64 %conv22, 3
  %add24 = add i64 %mul23, 24
  %cmp25 = icmp eq i32 %bf.clear, 3
  br i1 %cmp25, label %if.then27, label %return

if.then27:                                        ; preds = %sw.bb19
  %length28 = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 1
  %4 = bitcast i8** %length28 to i32*
  %5 = load i32* %4, align 4, !tbaa !39
  %sub29 = add nsw i32 %5, -1
  %conv30 = sext i32 %sub29 to i64
  %mul31 = shl nsw i64 %conv30, 3
  %add32 = add i64 %mul31, %add24
  br label %return

sw.default:                                       ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 316, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.tree_size, i64 0, i64 0)) #8
  unreachable

return:                                           ; preds = %sw.bb19, %if.then27, %sw.bb8, %entry, %if.else13, %if.then12, %sw.bb4, %sw.bb3, %sw.bb2
  %retval.0 = phi i64 [ 56, %if.then12 ], [ %add18, %if.else13 ], [ %add, %sw.bb4 ], [ 80, %sw.bb3 ], [ 168, %sw.bb2 ], [ 208, %entry ], [ 48, %sw.bb8 ], [ %add32, %if.then27 ], [ %add24, %sw.bb19 ]
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @make_node(i32 %code) #0 {
entry:
  %cmp = icmp eq i32 %code, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 346, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.make_node, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %idxprom = sext i32 %code to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom
  %0 = load i8* %arrayidx, align 1, !tbaa !37
  %conv = sext i8 %0 to i32
  %bf.value = and i32 %code, 255
  %idxprom41.i = zext i32 %bf.value to i64
  %arrayidx.i = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom41.i
  %1 = load i8* %arrayidx.i, align 1, !tbaa !37
  %conv.i = sext i8 %1 to i32
  switch i32 %conv.i, label %sw.default.i [
    i32 100, label %tree_size.exit
    i32 116, label %sw.bb2.i
    i32 98, label %sw.bb3.i
    i32 114, label %sw.bb4.i
    i32 101, label %sw.bb4.i
    i32 115, label %sw.bb4.i
    i32 60, label %sw.bb4.i
    i32 49, label %sw.bb4.i
    i32 50, label %sw.bb4.i
    i32 99, label %sw.bb8.i
    i32 120, label %sw.bb19.i
  ]

sw.bb2.i:                                         ; preds = %if.end
  br label %tree_size.exit

sw.bb3.i:                                         ; preds = %if.end
  br label %tree_size.exit

sw.bb4.i:                                         ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %arrayidx6.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41.i
  %2 = load i32* %arrayidx6.i, align 4, !tbaa !38
  %sub.i = add nsw i32 %2, -1
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = shl nsw i64 %conv7.i, 3
  %add.i = add i64 %mul.i, 40
  br label %tree_size.exit

sw.bb8.i:                                         ; preds = %if.end
  switch i32 %bf.value, label %if.else13.i [
    i32 25, label %tree_size.exit
    i32 26, label %if.then12.i
  ]

if.then12.i:                                      ; preds = %sw.bb8.i
  br label %tree_size.exit

if.else13.i:                                      ; preds = %sw.bb8.i
  %arrayidx15.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41.i
  %3 = load i32* %arrayidx15.i, align 4, !tbaa !38
  %conv16.i = sext i32 %3 to i64
  %mul17.i = shl nsw i64 %conv16.i, 3
  %add18.i = add i64 %mul17.i, 24
  br label %tree_size.exit

sw.bb19.i:                                        ; preds = %if.end
  %arrayidx21.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41.i
  %4 = load i32* %arrayidx21.i, align 4, !tbaa !38
  %conv22.i = sext i32 %4 to i64
  %mul23.i = shl nsw i64 %conv22.i, 3
  %add24.i = add i64 %mul23.i, 24
  br label %tree_size.exit

sw.default.i:                                     ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 316, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.tree_size, i64 0, i64 0)) #8
  unreachable

tree_size.exit:                                   ; preds = %sw.bb19.i, %if.end, %sw.bb2.i, %sw.bb3.i, %sw.bb4.i, %sw.bb8.i, %if.then12.i, %if.else13.i
  %retval.0.i = phi i64 [ 56, %if.then12.i ], [ %add18.i, %if.else13.i ], [ %add.i, %sw.bb4.i ], [ 80, %sw.bb3.i ], [ 168, %sw.bb2.i ], [ 208, %if.end ], [ 48, %sw.bb8.i ], [ %add24.i, %sw.bb19.i ]
  %call3 = tail call i8* @ggc_alloc(i64 %retval.0.i) #4
  %5 = bitcast i8* %call3 to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call3, i8 0, i64 %retval.0.i, i32 1, i1 false)
  %code5 = getelementptr inbounds i8* %call3, i64 16
  %6 = bitcast i8* %code5 to i32*
  %bf.load6 = load i32* %6, align 8
  %bf.clear8 = and i32 %bf.load6, -256
  %bf.set9 = or i32 %bf.clear8, %bf.value
  store i32 %bf.set9, i32* %6, align 8
  switch i32 %conv, label %sw.epilog67 [
    i32 115, label %sw.bb
    i32 100, label %sw.bb16
    i32 116, label %sw.bb36
    i32 99, label %sw.bb55
    i32 101, label %sw.bb60
  ]

sw.bb:                                            ; preds = %tree_size.exit
  %bf.set13 = or i32 %bf.set9, 256
  store i32 %bf.set13, i32* %6, align 8
  %7 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !10
  %type15 = getelementptr inbounds i8* %call3, i64 8
  %8 = bitcast i8* %type15 to %union.tree_node**
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !tbaa !15
  br label %sw.epilog67

sw.bb16:                                          ; preds = %tree_size.exit
  %cmp17 = icmp eq i32 %code, 30
  br i1 %cmp17, label %if.end23, label %if.then19

if.then19:                                        ; preds = %sw.bb16
  %u1 = getelementptr inbounds i8* %call3, i64 56
  %9 = bitcast i8* %u1 to i32*
  %bf.load20 = load i32* %9, align 4
  %bf.clear21 = and i32 %bf.load20, -16777216
  %bf.set22 = or i32 %bf.clear21, 1
  store i32 %bf.set22, i32* %9, align 4
  br label %if.end23

if.end23:                                         ; preds = %sw.bb16, %if.then19
  %user_align = getelementptr inbounds i8* %call3, i64 48
  %10 = bitcast i8* %user_align to i64*
  %bf.load25 = load i64* %10, align 8
  %bf.clear26 = and i64 %bf.load25, -34359738369
  store i64 %bf.clear26, i64* %10, align 8
  %11 = load i32* @in_system_header, align 4, !tbaa !38
  %12 = zext i32 %11 to i64
  %bf.value29 = shl nuw nsw i64 %12, 16
  %bf.shl = and i64 %bf.value29, 65536
  %bf.clear30 = and i64 %bf.load25, -34359803905
  %bf.set31 = or i64 %bf.shl, %bf.clear30
  store i64 %bf.set31, i64* %10, align 8
  %13 = load i32* @lineno, align 4, !tbaa !38
  %linenum = getelementptr inbounds i8* %call3, i64 32
  %14 = bitcast i8* %linenum to i32*
  store i32 %13, i32* %14, align 4, !tbaa !41
  %15 = load i8** @input_filename, align 8, !tbaa !10
  %tobool = icmp ne i8* %15, null
  %cond = select i1 %tobool, i8* %15, i8* getelementptr inbounds ([11 x i8]* @.str148, i64 0, i64 0)
  %filename = getelementptr inbounds i8* %call3, i64 24
  %16 = bitcast i8* %filename to i8**
  store i8* %cond, i8** %16, align 8, !tbaa !42
  %17 = load i32* @next_decl_uid, align 4, !tbaa !38
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* @next_decl_uid, align 4, !tbaa !38
  %uid = getelementptr inbounds i8* %call3, i64 36
  %18 = bitcast i8* %uid to i32*
  store i32 %17, i32* %18, align 4, !tbaa !43
  %pointer_alias_set = getelementptr inbounds i8* %call3, i64 192
  %19 = bitcast i8* %pointer_alias_set to i64*
  store i64 -1, i64* %19, align 8, !tbaa !44
  br label %sw.epilog67

sw.bb36:                                          ; preds = %tree_size.exit
  %20 = load i32* @next_type_uid, align 4, !tbaa !38
  %inc37 = add nsw i32 %20, 1
  store i32 %inc37, i32* @next_type_uid, align 4, !tbaa !38
  %uid39 = getelementptr inbounds i8* %call3, i64 56
  %21 = bitcast i8* %uid39 to i32*
  store i32 %20, i32* %21, align 4, !tbaa !45
  %22 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !tbaa !10
  %tobool40 = icmp eq %union.tree_node* %22, null
  br i1 %tobool40, label %cond.end44, label %cond.true41

cond.true41:                                      ; preds = %sw.bb36
  %align = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 7
  %23 = bitcast %union.tree_node** %align to i32*
  %24 = load i32* %23, align 4, !tbaa !18
  br label %cond.end44

cond.end44:                                       ; preds = %sw.bb36, %cond.true41
  %cond45 = phi i32 [ %24, %cond.true41 ], [ 0, %sw.bb36 ]
  %align47 = getelementptr inbounds i8* %call3, i64 64
  %25 = bitcast i8* %align47 to i32*
  store i32 %cond45, i32* %25, align 4, !tbaa !18
  %user_align49 = getelementptr inbounds i8* %call3, i64 60
  %26 = bitcast i8* %user_align49 to i32*
  %bf.load50 = load i32* %26, align 4
  %bf.clear51 = and i32 %bf.load50, 2147483647
  store i32 %bf.clear51, i32* %26, align 4
  %main_variant = getelementptr inbounds i8* %call3, i64 128
  %27 = bitcast i8* %main_variant to %union.tree_node**
  store %union.tree_node* %5, %union.tree_node** %27, align 8, !tbaa !46
  %attributes = getelementptr inbounds i8* %call3, i64 48
  %28 = bitcast i8* %attributes to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %28, align 8, !tbaa !16
  %29 = load void (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 6), align 8, !tbaa !47
  tail call void %29(%union.tree_node* %5) #4
  %alias_set = getelementptr inbounds i8* %call3, i64 152
  %30 = bitcast i8* %alias_set to i64*
  store i64 -1, i64* %30, align 8, !tbaa !53
  br label %sw.epilog67

sw.bb55:                                          ; preds = %tree_size.exit
  %bf.set59 = or i32 %bf.set9, 512
  store i32 %bf.set59, i32* %6, align 8
  br label %sw.epilog67

sw.bb60:                                          ; preds = %tree_size.exit
  switch i32 %code, label %sw.epilog67 [
    i32 49, label %sw.bb61
    i32 48, label %sw.bb61
    i32 133, label %sw.bb61
    i32 120, label %sw.bb61
    i32 129, label %sw.bb61
    i32 130, label %sw.bb61
    i32 131, label %sw.bb61
    i32 132, label %sw.bb61
  ]

sw.bb61:                                          ; preds = %sw.bb60, %sw.bb60, %sw.bb60, %sw.bb60, %sw.bb60, %sw.bb60, %sw.bb60, %sw.bb60
  %bf.set66 = or i32 %bf.set9, 256
  store i32 %bf.set66, i32* %6, align 8
  br label %sw.epilog67

sw.epilog67:                                      ; preds = %sw.bb61, %sw.bb60, %tree_size.exit, %sw.bb55, %cond.end44, %if.end23, %sw.bb
  ret %union.tree_node* %5
}

declare i8* @ggc_alloc(i64) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @make_lang_type(i32 %code) #0 {
entry:
  %0 = load %union.tree_node* (i32)** @make_lang_type_fn, align 8, !tbaa !10
  %call = tail call %union.tree_node* %0(i32 %code) #4
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @copy_node(%union.tree_node* nocapture readonly %node) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom41.i = zext i32 %bf.clear to i64
  %arrayidx.i = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom41.i
  %0 = load i8* %arrayidx.i, align 1, !tbaa !37
  %conv.i = sext i8 %0 to i32
  switch i32 %conv.i, label %sw.default.i [
    i32 100, label %tree_size.exit
    i32 116, label %sw.bb2.i
    i32 98, label %sw.bb3.i
    i32 114, label %sw.bb4.i
    i32 101, label %sw.bb4.i
    i32 115, label %sw.bb4.i
    i32 60, label %sw.bb4.i
    i32 49, label %sw.bb4.i
    i32 50, label %sw.bb4.i
    i32 99, label %sw.bb8.i
    i32 120, label %sw.bb19.i
  ]

sw.bb2.i:                                         ; preds = %entry
  br label %tree_size.exit

sw.bb3.i:                                         ; preds = %entry
  br label %tree_size.exit

sw.bb4.i:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %arrayidx6.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41.i
  %1 = load i32* %arrayidx6.i, align 4, !tbaa !38
  %sub.i = add nsw i32 %1, -1
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = shl nsw i64 %conv7.i, 3
  %add.i = add i64 %mul.i, 40
  br label %tree_size.exit

sw.bb8.i:                                         ; preds = %entry
  switch i32 %bf.clear, label %if.else13.i [
    i32 25, label %tree_size.exit
    i32 26, label %if.then12.i
  ]

if.then12.i:                                      ; preds = %sw.bb8.i
  br label %tree_size.exit

if.else13.i:                                      ; preds = %sw.bb8.i
  %arrayidx15.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41.i
  %2 = load i32* %arrayidx15.i, align 4, !tbaa !38
  %conv16.i = sext i32 %2 to i64
  %mul17.i = shl nsw i64 %conv16.i, 3
  %add18.i = add i64 %mul17.i, 24
  br label %tree_size.exit

sw.bb19.i:                                        ; preds = %entry
  %arrayidx21.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41.i
  %3 = load i32* %arrayidx21.i, align 4, !tbaa !38
  %conv22.i = sext i32 %3 to i64
  %mul23.i = shl nsw i64 %conv22.i, 3
  %add24.i = add i64 %mul23.i, 24
  %cmp25.i = icmp eq i32 %bf.clear, 3
  br i1 %cmp25.i, label %if.then27.i, label %tree_size.exit

if.then27.i:                                      ; preds = %sw.bb19.i
  %length28.i = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 1
  %4 = bitcast i8** %length28.i to i32*
  %5 = load i32* %4, align 4, !tbaa !39
  %sub29.i = add nsw i32 %5, -1
  %conv30.i = sext i32 %sub29.i to i64
  %mul31.i = shl nsw i64 %conv30.i, 3
  %add32.i = add i64 %mul31.i, %add24.i
  br label %tree_size.exit

sw.default.i:                                     ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 316, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.tree_size, i64 0, i64 0)) #8
  unreachable

tree_size.exit:                                   ; preds = %entry, %sw.bb2.i, %sw.bb3.i, %sw.bb4.i, %sw.bb8.i, %if.then12.i, %if.else13.i, %sw.bb19.i, %if.then27.i
  %retval.0.i = phi i64 [ 56, %if.then12.i ], [ %add18.i, %if.else13.i ], [ %add.i, %sw.bb4.i ], [ 80, %sw.bb3.i ], [ 168, %sw.bb2.i ], [ 208, %entry ], [ 48, %sw.bb8.i ], [ %add32.i, %if.then27.i ], [ %add24.i, %sw.bb19.i ]
  %call2 = tail call i8* @ggc_alloc(i64 %retval.0.i) #4
  %6 = bitcast i8* %call2 to %union.tree_node*
  %7 = bitcast %union.tree_node* %node to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call2, i8* %7, i64 %retval.0.i, i32 8, i1 false)
  %chain = bitcast i8* %call2 to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %chain, align 8, !tbaa !27
  %asm_written_flag = getelementptr inbounds i8* %call2, i64 16
  %8 = bitcast i8* %asm_written_flag to i32*
  %bf.load5 = load i32* %8, align 8
  %bf.clear6 = and i32 %bf.load5, -16385
  store i32 %bf.clear6, i32* %8, align 8
  %9 = load i8* %arrayidx.i, align 1, !tbaa !37
  switch i8 %9, label %if.end19 [
    i8 100, label %if.then
    i8 116, label %if.then13
  ]

if.then:                                          ; preds = %tree_size.exit
  %10 = load i32* @next_decl_uid, align 4, !tbaa !38
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* @next_decl_uid, align 4, !tbaa !38
  %uid = getelementptr inbounds i8* %call2, i64 36
  %11 = bitcast i8* %uid to i32*
  store i32 %10, i32* %11, align 4, !tbaa !43
  br label %if.end19

if.then13:                                        ; preds = %tree_size.exit
  %12 = load i32* @next_type_uid, align 4, !tbaa !38
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* @next_type_uid, align 4, !tbaa !38
  %uid15 = getelementptr inbounds i8* %call2, i64 56
  %13 = bitcast i8* %uid15 to i32*
  store i32 %12, i32* %13, align 4, !tbaa !45
  %symtab = getelementptr inbounds i8* %call2, i64 88
  %pointer = bitcast i8* %symtab to i8**
  store i8* null, i8** %pointer, align 8, !tbaa !10
  %address = bitcast i8* %symtab to i32*
  store i32 0, i32* %address, align 4, !tbaa !38
  br label %if.end19

if.end19:                                         ; preds = %tree_size.exit, %if.then13, %if.then
  ret %union.tree_node* %6
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define %union.tree_node* @copy_list(%union.tree_node* readonly %list) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %list, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = tail call %union.tree_node* @copy_node(%union.tree_node* %list)
  %next.0.in13 = getelementptr inbounds %union.tree_node* %list, i64 0, i32 0, i32 0, i32 0
  %next.014 = load %union.tree_node** %next.0.in13, align 8
  %tobool15 = icmp eq %union.tree_node* %next.014, null
  br i1 %tobool15, label %return, label %while.body

while.body:                                       ; preds = %if.end, %while.body
  %next.017 = phi %union.tree_node* [ %next.0, %while.body ], [ %next.014, %if.end ]
  %prev.016 = phi %union.tree_node* [ %call1, %while.body ], [ %call, %if.end ]
  %call1 = tail call %union.tree_node* @copy_node(%union.tree_node* %next.017)
  %chain3 = getelementptr inbounds %union.tree_node* %prev.016, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %call1, %union.tree_node** %chain3, align 8, !tbaa !27
  %next.0.in = getelementptr inbounds %union.tree_node* %next.017, i64 0, i32 0, i32 0, i32 0
  %next.0 = load %union.tree_node** %next.0.in, align 8
  %tobool = icmp eq %union.tree_node* %next.0, null
  br i1 %tobool, label %return, label %while.body

return:                                           ; preds = %while.body, %if.end, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %call, %if.end ], [ %call, %while.body ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_int_2_wide(i64 %low, i64 %hi) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 25)
  %int_cst1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %low2 = bitcast i32* %int_cst1 to i64*
  store i64 %low, i64* %low2, align 8, !tbaa !20
  %high = getelementptr inbounds i32* %int_cst1, i64 2
  %0 = bitcast i32* %high to i64*
  store i64 %hi, i64* %0, align 8, !tbaa !23
  %1 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %type = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !tbaa !15
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_vector(%union.tree_node* %type, %union.tree_node* %vals) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 28)
  %elements = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %0 = bitcast i32* %elements to %union.tree_node**
  store %union.tree_node* %vals, %union.tree_node** %0, align 8, !tbaa !54
  %type1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type1, align 8, !tbaa !15
  %tobool31 = icmp eq %union.tree_node* %vals, null
  br i1 %tobool31, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %link.033 = phi %union.tree_node* [ %9, %for.body ], [ %vals, %entry ]
  %1 = phi <2 x i32> [ %8, %for.body ], [ zeroinitializer, %entry ]
  %value2 = getelementptr inbounds %union.tree_node* %link.033, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value2 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !25
  %public_flag = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %public_flag, align 8
  %4 = insertelement <2 x i32> undef, i32 %bf.load, i32 0
  %5 = insertelement <2 x i32> %4, i32 %bf.load, i32 1
  %6 = lshr <2 x i32> %5, <i32 19, i32 18>
  %7 = and <2 x i32> %6, <i32 1, i32 1>
  %8 = or <2 x i32> %7, %1
  %chain = getelementptr inbounds %union.tree_node* %link.033, i64 0, i32 0, i32 0, i32 0
  %9 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %9, null
  br i1 %tobool, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %10 = shl <2 x i32> %8, <i32 19, i32 18>
  %11 = and <2 x i32> %10, <i32 524288, i32 262144>
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %12 = phi <2 x i32> [ %11, %for.cond.for.end_crit_edge ], [ zeroinitializer, %entry ]
  %13 = extractelement <2 x i32> %12, i32 1
  %14 = extractelement <2 x i32> %12, i32 0
  %public_flag11 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load12 = load i32* %public_flag11, align 8
  %bf.clear13 = and i32 %bf.load12, -786433
  %bf.set = or i32 %14, %13
  %bf.set20 = or i32 %bf.set, %bf.clear13
  store i32 %bf.set20, i32* %public_flag11, align 8
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_real(%union.tree_node* %type, %struct.realvaluetype* byval nocapture readonly align 8 %d) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 26)
  %type1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type1, align 8, !tbaa !15
  %real_cst2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %0 = bitcast i32* %real_cst2 to i8*
  %1 = bitcast %struct.realvaluetype* %d to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !tbaa.struct !56
  %static_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %static_flag, align 8
  %bf.clear8 = and i32 %bf.load, -786433
  store i32 %bf.clear8, i32* %static_flag, align 8
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define void @real_value_from_int_cst(%struct.realvaluetype* noalias nocapture sret %agg.result, %union.tree_node* nocapture readonly %type, %union.tree_node* nocapture readonly %i) #0 {
entry:
  %d = alloca %struct.realvaluetype, align 8
  %0 = bitcast %struct.realvaluetype* %d to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 24, i32 8, i1 false)
  %type1 = getelementptr inbounds %union.tree_node* %i, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type1, align 8, !tbaa !15
  %unsigned_flag = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %unsigned_flag, align 8
  %bf.clear = and i32 %bf.load, 8192
  %tobool = icmp eq i32 %bf.clear, 0
  %int_cst11 = getelementptr inbounds %union.tree_node* %i, i64 0, i32 0, i32 2
  %low12 = bitcast i32* %int_cst11 to i64*
  %2 = load i64* %low12, align 8, !tbaa !20
  %high15 = getelementptr inbounds i32* %int_cst11, i64 2
  %3 = bitcast i32* %high15 to i64*
  %4 = load i64* %3, align 8, !tbaa !23
  %type16 = bitcast %union.tree_node* %type to %struct.tree_type*
  %mode17 = getelementptr inbounds %struct.tree_type* %type16, i64 0, i32 6
  %bf.load18 = load i32* %mode17, align 4
  %bf.lshr19 = lshr i32 %bf.load18, 9
  %bf.clear20 = and i32 %bf.lshr19, 127
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @ereal_from_int(%struct.realvaluetype* %d, i64 %2, i64 %4, i32 %bf.clear20) #4
  br label %if.end

if.else:                                          ; preds = %entry
  call void @ereal_from_uint(%struct.realvaluetype* %d, i64 %2, i64 %4, i32 %bf.clear20) #4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %0, i64 24, i32 8, i1 false), !tbaa.struct !56
  ret void
}

declare void @ereal_from_int(%struct.realvaluetype*, i64, i64, i32) #2

declare void @ereal_from_uint(%struct.realvaluetype*, i64, i64, i32) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_real_from_int_cst(%union.tree_node* %type, %union.tree_node* %i) #0 {
entry:
  %d.sroa.0 = alloca [3 x i64], align 8
  %args = alloca %struct.brfic_args, align 8
  %public_flag = getelementptr inbounds %union.tree_node* %i, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %public_flag, align 8
  %0 = bitcast %struct.brfic_args* %args to i8*
  call void @llvm.lifetime.start(i64 40, i8* %0) #4
  %call = call %union.tree_node* @make_node(i32 26)
  %type2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type2, align 8, !tbaa !15
  %type3 = getelementptr inbounds %struct.brfic_args* %args, i64 0, i32 0
  store %union.tree_node* %type, %union.tree_node** %type3, align 8, !tbaa !57
  %i4 = getelementptr inbounds %struct.brfic_args* %args, i64 0, i32 1
  store %union.tree_node* %i, %union.tree_node** %i4, align 8, !tbaa !60
  %call5 = call i32 @do_float_handler(void (i8*)* @build_real_from_int_cst_1, i8* %0) #4
  %tobool = icmp eq i32 %call5, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %d.sroa.0.0..sroa_idx = getelementptr inbounds %struct.brfic_args* %args, i64 0, i32 2
  %d.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %d.sroa.0.0..sroa_idx to i8*
  %d.sroa.0.0..sroa_cast18 = bitcast [3 x i64]* %d.sroa.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %d.sroa.0.0..sroa_cast18, i8* %d.sroa.0.0..sroa_cast, i64 24, i32 8, i1 false)
  br label %if.end

if.else:                                          ; preds = %entry
  %d.sroa.0.0..sroa_cast19 = bitcast [3 x i64]* %d.sroa.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %d.sroa.0.0..sroa_cast19, i8* bitcast (%struct.realvaluetype* @dconst0 to i8*), i64 24, i32 8, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %overflow.0 = phi i32 [ %bf.clear, %if.then ], [ 1, %if.else ]
  %d.sroa.0.0..sroa_idx20 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %d.sroa.0.0..sroa_cast22 = bitcast i32* %d.sroa.0.0..sroa_idx20 to i8*
  %d.sroa.0.0..sroa_cast23 = bitcast [3 x i64]* %d.sroa.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %d.sroa.0.0..sroa_cast22, i8* %d.sroa.0.0..sroa_cast23, i64 24, i32 8, i1 false)
  %static_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load9 = load i32* %static_flag, align 8
  %bf.shl = shl nuw nsw i32 %overflow.0, 18
  %bf.clear10 = and i32 %bf.load9, -786433
  %bf.shl15 = shl nuw nsw i32 %overflow.0, 19
  %bf.clear16 = or i32 %bf.shl15, %bf.shl
  %bf.set17 = or i32 %bf.clear16, %bf.clear10
  store i32 %bf.set17, i32* %static_flag, align 8
  call void @llvm.lifetime.end(i64 40, i8* %0) #4
  ret %union.tree_node* %call
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

declare i32 @do_float_handler(void (i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal void @build_real_from_int_cst_1(i8* nocapture %data) #0 {
entry:
  %d.i = alloca %struct.realvaluetype, align 8
  %tmp.sroa.0 = alloca [3 x i64], align 8
  %type = bitcast i8* %data to %union.tree_node**
  %0 = load %union.tree_node** %type, align 8, !tbaa !57
  %i = getelementptr inbounds i8* %data, i64 8
  %1 = bitcast i8* %i to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !60
  %3 = bitcast %struct.realvaluetype* %d.i to i8*
  call void @llvm.lifetime.start(i64 24, i8* %3) #4
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 24, i32 8, i1 false) #4
  %type1.i = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type1.i, align 8, !tbaa !15
  %unsigned_flag.i = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %unsigned_flag.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 8192
  %tobool.i = icmp eq i32 %bf.clear.i, 0
  %int_cst11.i = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 2
  %low12.i = bitcast i32* %int_cst11.i to i64*
  %5 = load i64* %low12.i, align 8, !tbaa !20
  %high15.i = getelementptr inbounds i32* %int_cst11.i, i64 2
  %6 = bitcast i32* %high15.i to i64*
  %7 = load i64* %6, align 8, !tbaa !23
  %type16.i = bitcast %union.tree_node* %0 to %struct.tree_type*
  %mode17.i = getelementptr inbounds %struct.tree_type* %type16.i, i64 0, i32 6
  %bf.load18.i = load i32* %mode17.i, align 4
  %bf.lshr19.i = lshr i32 %bf.load18.i, 9
  %bf.clear20.i = and i32 %bf.lshr19.i, 127
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  call void @ereal_from_int(%struct.realvaluetype* %d.i, i64 %5, i64 %7, i32 %bf.clear20.i) #4
  br label %real_value_from_int_cst.exit

if.else.i:                                        ; preds = %entry
  call void @ereal_from_uint(%struct.realvaluetype* %d.i, i64 %5, i64 %7, i32 %bf.clear20.i) #4
  br label %real_value_from_int_cst.exit

real_value_from_int_cst.exit:                     ; preds = %if.then.i, %if.else.i
  %tmp.sroa.0.0..sroa_cast4 = bitcast [3 x i64]* %tmp.sroa.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %tmp.sroa.0.0..sroa_cast4, i8* %3, i64 24, i32 8, i1 false)
  call void @llvm.lifetime.end(i64 24, i8* %3) #4
  %tmp.sroa.0.0.d.sroa_raw_idx = getelementptr inbounds i8* %data, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %tmp.sroa.0.0.d.sroa_raw_idx, i8* %tmp.sroa.0.0..sroa_cast4, i64 24, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_string(i32 %len, i8* %str) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 29)
  %0 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  store i32 %len, i32* %0, align 4, !tbaa !61
  %call1 = tail call i8* @ggc_alloc_string(i8* %str, i32 %len) #4
  %pointer = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 4
  %call1.c = bitcast i8* %call1 to %union.tree_node*
  store %union.tree_node* %call1.c, %union.tree_node** %pointer, align 8, !tbaa !63
  ret %union.tree_node* %call
}

declare i8* @ggc_alloc_string(i8*, i32) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_complex(%union.tree_node* %type, %union.tree_node* %real, %union.tree_node* %imag) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 27)
  %real1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %0 = bitcast i32* %real1 to %union.tree_node**
  store %union.tree_node* %real, %union.tree_node** %0, align 8, !tbaa !64
  %1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 4
  store %union.tree_node* %imag, %union.tree_node** %1, align 8, !tbaa !66
  %tobool = icmp eq %union.tree_node* %type, null
  br i1 %tobool, label %cond.false, label %cond.end

cond.false:                                       ; preds = %entry
  %type4 = getelementptr inbounds %union.tree_node* %real, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type4, align 8, !tbaa !15
  %call5 = tail call %union.tree_node* @build_complex_type(%union.tree_node* %2)
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %cond = phi %union.tree_node* [ %call5, %cond.false ], [ %type, %entry ]
  %type7 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %cond, %union.tree_node** %type7, align 8, !tbaa !15
  %public_flag = getelementptr inbounds %union.tree_node* %real, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %public_flag, align 8
  %public_flag10 = getelementptr inbounds %union.tree_node* %imag, i64 0, i32 0, i32 0, i32 2
  %bf.load11 = load i32* %public_flag10, align 8
  %bf.lshr47 = or i32 %bf.load11, %bf.load
  %or = and i32 %bf.lshr47, 524288
  %public_flag15 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load16 = load i32* %public_flag15, align 8
  %bf.clear17 = and i32 %bf.load16, -524289
  %bf.set = or i32 %bf.clear17, %or
  store i32 %bf.set, i32* %public_flag15, align 8
  %bf.load19 = load i32* %public_flag, align 8
  %bf.load24 = load i32* %public_flag10, align 8
  %bf.lshr2049 = or i32 %bf.load24, %bf.load19
  %or27 = and i32 %bf.lshr2049, 262144
  %bf.clear33 = and i32 %bf.set, -262145
  %bf.set34 = or i32 %or27, %bf.clear33
  store i32 %bf.set34, i32* %public_flag15, align 8
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_complex_type(%union.tree_node* %component_type) #0 {
entry:
  %in.i.i = alloca %struct.type_hash, align 8
  %call = call %union.tree_node* @make_node(i32 8)
  %type = bitcast %union.tree_node* %component_type to %struct.tree_type*
  %0 = getelementptr inbounds %union.tree_node* %component_type, i64 0, i32 0, i32 15
  %1 = load %union.tree_node** %0, align 8, !tbaa !46
  %type1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %1, %union.tree_node** %type1, align 8, !tbaa !15
  %readonly_flag = getelementptr inbounds %union.tree_node* %component_type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %readonly_flag, align 8
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type, i64 0, i32 6
  %bf.load9 = load i32* %restrict_flag, align 4
  %mul12 = and i32 %bf.load9, 2097152
  %readonly_flag.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %readonly_flag.i, align 8
  %bf.clear.i = and i32 %bf.load.i, -6145
  %bf.set.i = and i32 %bf.load, 6144
  %bf.set9.i = or i32 %bf.clear.i, %bf.set.i
  store i32 %bf.set9.i, i32* %readonly_flag.i, align 8
  %type13.i = bitcast %union.tree_node* %call to %struct.tree_type*
  %restrict_flag.i = getelementptr inbounds %struct.tree_type* %type13.i, i64 0, i32 6
  %bf.load14.i = load i32* %restrict_flag.i, align 4
  %bf.clear17.i = and i32 %bf.load14.i, -2097153
  %bf.set18.i = or i32 %bf.clear17.i, %mul12
  store i32 %bf.set18.i, i32* %restrict_flag.i, align 4
  %2 = ptrtoint %union.tree_node* %component_type to i64
  %.tr = trunc i64 %2 to i32
  %conv = and i32 %.tr, 262143
  %3 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool.i = icmp eq i32 %3, 0
  br i1 %tobool.i, label %if.end.i, label %type_hash_canon.exit

if.end.i:                                         ; preds = %entry
  %4 = bitcast %struct.type_hash* %in.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #4
  call void @layout_type(%union.tree_node* %call) #4
  %conv.i.i = zext i32 %conv to i64
  %hash.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 0
  store i64 %conv.i.i, i64* %hash.i.i, align 8, !tbaa !11
  %type1.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type1.i.i, align 8, !tbaa !14
  %5 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i.i = call i8* @htab_find_with_hash(%struct.htab* %5, i8* %4, i32 %conv) #4
  %tobool.i.i = icmp eq i8* %call.i.i, null
  br i1 %tobool.i.i, label %if.else.i, label %type_hash_lookup.exit.i

type_hash_lookup.exit.i:                          ; preds = %if.end.i
  %type2.i.i = getelementptr inbounds i8* %call.i.i, i64 8
  %6 = bitcast i8* %type2.i.i to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %4) #4
  %cmp.i = icmp eq %union.tree_node* %7, null
  br i1 %cmp.i, label %if.else.i, label %type_hash_canon.exit

if.else.i:                                        ; preds = %type_hash_lookup.exit.i, %if.end.i
  %call.i7.i = call i8* @ggc_alloc(i64 16) #4
  %hash.i9.i = bitcast i8* %call.i7.i to i64*
  store i64 %conv.i.i, i64* %hash.i9.i, align 8, !tbaa !11
  %type1.i10.i = getelementptr inbounds i8* %call.i7.i, i64 8
  %8 = bitcast i8* %type1.i10.i to %union.tree_node**
  store %union.tree_node* %call, %union.tree_node** %8, align 8, !tbaa !14
  %9 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %9, i8* %call.i7.i, i32 %conv, i32 1) #4
  store i8* %call.i7.i, i8** %call2.i.i, align 8, !tbaa !10
  br label %type_hash_canon.exit

type_hash_canon.exit:                             ; preds = %entry, %type_hash_lookup.exit.i, %if.else.i
  %retval.0.i = phi %union.tree_node* [ %call, %if.else.i ], [ %call, %entry ], [ %7, %type_hash_lookup.exit.i ]
  %size = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 2
  %10 = bitcast i32* %size to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !67
  %cmp23 = icmp eq %union.tree_node* %11, null
  br i1 %cmp23, label %if.then, label %if.end

if.then:                                          ; preds = %type_hash_canon.exit
  call void @layout_type(%union.tree_node* %retval.0.i) #4
  br label %if.end

if.end:                                           ; preds = %type_hash_canon.exit, %if.then
  %12 = load i32* @write_symbols, align 4, !tbaa !37
  switch i32 %12, label %if.end94 [
    i32 7, label %land.lhs.true
    i32 4, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %if.end, %if.end
  %13 = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 11
  %14 = load %union.tree_node** %13, align 8, !tbaa !68
  %tobool30 = icmp eq %union.tree_node* %14, null
  br i1 %tobool30, label %if.then31, label %if.end94

if.then31:                                        ; preds = %land.lhs.true
  %15 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !tbaa !10
  %cmp33 = icmp eq %union.tree_node* %15, %component_type
  br i1 %cmp33, label %if.then89, label %if.else

if.else:                                          ; preds = %if.then31
  %16 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !tbaa !10
  %cmp36 = icmp eq %union.tree_node* %16, %component_type
  br i1 %cmp36, label %if.then89, label %if.else39

if.else39:                                        ; preds = %if.else
  %17 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !tbaa !10
  %cmp40 = icmp eq %union.tree_node* %17, %component_type
  br i1 %cmp40, label %if.then89, label %if.else43

if.else43:                                        ; preds = %if.else39
  %18 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !tbaa !10
  %cmp44 = icmp eq %union.tree_node* %18, %component_type
  br i1 %cmp44, label %if.then89, label %if.else47

if.else47:                                        ; preds = %if.else43
  %19 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 4), align 16, !tbaa !10
  %cmp48 = icmp eq %union.tree_node* %19, %component_type
  br i1 %cmp48, label %if.then89, label %if.else51

if.else51:                                        ; preds = %if.else47
  %20 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %cmp52 = icmp eq %union.tree_node* %20, %component_type
  br i1 %cmp52, label %if.then89, label %if.else55

if.else55:                                        ; preds = %if.else51
  %21 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !tbaa !10
  %cmp56 = icmp eq %union.tree_node* %21, %component_type
  br i1 %cmp56, label %if.then89, label %if.else59

if.else59:                                        ; preds = %if.else55
  %22 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !tbaa !10
  %cmp60 = icmp eq %union.tree_node* %22, %component_type
  br i1 %cmp60, label %if.then89, label %if.else63

if.else63:                                        ; preds = %if.else59
  %23 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 16, !tbaa !10
  %cmp64 = icmp eq %union.tree_node* %23, %component_type
  br i1 %cmp64, label %if.then89, label %if.else67

if.else67:                                        ; preds = %if.else63
  %24 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !tbaa !10
  %cmp68 = icmp eq %union.tree_node* %24, %component_type
  br i1 %cmp68, label %if.then89, label %if.else71

if.else71:                                        ; preds = %if.else67
  %25 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 10), align 16, !tbaa !10
  %cmp72 = icmp eq %union.tree_node* %25, %component_type
  br i1 %cmp72, label %if.then89, label %if.end94

if.then89:                                        ; preds = %if.else71, %if.then31, %if.else, %if.else39, %if.else43, %if.else47, %if.else51, %if.else55, %if.else59, %if.else63, %if.else67
  %name32.0.ph = phi i8* [ getelementptr inbounds ([13 x i8]* @.str151, i64 0, i64 0), %if.then31 ], [ getelementptr inbounds ([20 x i8]* @.str152, i64 0, i64 0), %if.else ], [ getelementptr inbounds ([22 x i8]* @.str153, i64 0, i64 0), %if.else39 ], [ getelementptr inbounds ([18 x i8]* @.str154, i64 0, i64 0), %if.else43 ], [ getelementptr inbounds ([27 x i8]* @.str155, i64 0, i64 0), %if.else47 ], [ getelementptr inbounds ([12 x i8]* @.str156, i64 0, i64 0), %if.else51 ], [ getelementptr inbounds ([21 x i8]* @.str157, i64 0, i64 0), %if.else55 ], [ getelementptr inbounds ([17 x i8]* @.str158, i64 0, i64 0), %if.else59 ], [ getelementptr inbounds ([26 x i8]* @.str159, i64 0, i64 0), %if.else63 ], [ getelementptr inbounds ([22 x i8]* @.str160, i64 0, i64 0), %if.else67 ], [ getelementptr inbounds ([31 x i8]* @.str161, i64 0, i64 0), %if.else71 ]
  %call90 = call %union.tree_node* @get_identifier(i8* %name32.0.ph) #4
  store %union.tree_node* %call90, %union.tree_node** %13, align 8, !tbaa !68
  br label %if.end94

if.end94:                                         ; preds = %if.else71, %if.end, %land.lhs.true, %if.then89
  ret %union.tree_node* %retval.0.i
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @make_tree_vec(i32 %len) #0 {
entry:
  %sub = shl i32 %len, 3
  %add = add i32 %sub, 32
  %conv2 = sext i32 %add to i64
  %call = tail call i8* @ggc_alloc(i64 %conv2) #4
  %0 = bitcast i8* %call to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call, i8 0, i64 %conv2, i32 1, i1 false)
  %code = getelementptr inbounds i8* %call, i64 16
  %1 = bitcast i8* %code to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, -256
  %bf.set = or i32 %bf.clear, 3
  store i32 %bf.set, i32* %1, align 8
  %length4 = getelementptr inbounds i8* %call, i64 24
  %2 = bitcast i8* %length4 to i32*
  store i32 %len, i32* %2, align 4, !tbaa !39
  ret %union.tree_node* %0
}

; Function Attrs: nounwind readonly uwtable
define i32 @integer_zerop(%union.tree_node* nocapture readonly %expr) #3 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr72 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr72, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true, %land.rhs
  %5 = and i32 %bf.load, 262399
  %6 = icmp eq i32 %5, 25
  br i1 %6, label %land.lhs.true41, label %lor.rhs

land.lhs.true41:                                  ; preds = %while.end
  %int_cst42 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst42 to i64*
  %7 = load i64* %low, align 8, !tbaa !20
  %cmp43 = icmp eq i64 %7, 0
  br i1 %cmp43, label %land.lhs.true44, label %lor.rhs

land.lhs.true44:                                  ; preds = %land.lhs.true41
  %high = getelementptr inbounds i32* %int_cst42, i64 2
  %8 = bitcast i32* %high to i64*
  %9 = load i64* %8, align 8, !tbaa !23
  %cmp47 = icmp eq i64 %9, 0
  br i1 %cmp47, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true44, %land.lhs.true41, %while.end
  %cmp52 = icmp eq i32 %bf.clear, 27
  br i1 %cmp52, label %land.lhs.true53, label %lor.end

land.lhs.true53:                                  ; preds = %lor.rhs
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %10 = bitcast i32* %real to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !64
  %call = tail call i32 @integer_zerop(%union.tree_node* %11)
  %tobool54 = icmp eq i32 %call, 0
  br i1 %tobool54, label %lor.end, label %land.rhs55

land.rhs55:                                       ; preds = %land.lhs.true53
  %12 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 4
  %13 = load %union.tree_node** %12, align 8, !tbaa !66
  %call57 = tail call i32 @integer_zerop(%union.tree_node* %13)
  %tobool58 = icmp ne i32 %call57, 0
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true53, %lor.rhs, %land.rhs55, %land.lhs.true44
  %14 = phi i1 [ true, %land.lhs.true44 ], [ false, %land.lhs.true53 ], [ false, %lor.rhs ], [ %tobool58, %land.rhs55 ]
  %lor.ext = zext i1 %14 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind readonly uwtable
define i32 @integer_onep(%union.tree_node* nocapture readonly %expr) #3 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr72 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr72, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true, %land.rhs
  %5 = and i32 %bf.load, 262399
  %6 = icmp eq i32 %5, 25
  br i1 %6, label %land.lhs.true41, label %lor.rhs

land.lhs.true41:                                  ; preds = %while.end
  %int_cst42 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst42 to i64*
  %7 = load i64* %low, align 8, !tbaa !20
  %cmp43 = icmp eq i64 %7, 1
  br i1 %cmp43, label %land.lhs.true44, label %lor.rhs

land.lhs.true44:                                  ; preds = %land.lhs.true41
  %high = getelementptr inbounds i32* %int_cst42, i64 2
  %8 = bitcast i32* %high to i64*
  %9 = load i64* %8, align 8, !tbaa !23
  %cmp47 = icmp eq i64 %9, 0
  br i1 %cmp47, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true44, %land.lhs.true41, %while.end
  %cmp52 = icmp eq i32 %bf.clear, 27
  br i1 %cmp52, label %land.lhs.true53, label %lor.end

land.lhs.true53:                                  ; preds = %lor.rhs
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %10 = bitcast i32* %real to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !64
  %call = tail call i32 @integer_onep(%union.tree_node* %11)
  %tobool54 = icmp eq i32 %call, 0
  br i1 %tobool54, label %lor.end, label %land.rhs55

land.rhs55:                                       ; preds = %land.lhs.true53
  %12 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 4
  %13 = load %union.tree_node** %12, align 8, !tbaa !66
  %call57 = tail call i32 @integer_zerop(%union.tree_node* %13)
  %tobool58 = icmp ne i32 %call57, 0
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true53, %lor.rhs, %land.rhs55, %land.lhs.true44
  %14 = phi i1 [ true, %land.lhs.true44 ], [ false, %land.lhs.true53 ], [ false, %lor.rhs ], [ %tobool58, %land.rhs55 ]
  %lor.ext = zext i1 %14 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define i32 @integer_all_onesp(%union.tree_node* nocapture readonly %expr) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %if.else, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr135 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr135, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %if.else

while.end:                                        ; preds = %while.cond
  %cmp35 = icmp eq i32 %bf.clear, 27
  br i1 %cmp35, label %land.lhs.true36, label %if.else

land.lhs.true36:                                  ; preds = %while.end
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %5 = bitcast i32* %real to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !64
  %call = tail call i32 @integer_all_onesp(%union.tree_node* %6)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.else, label %land.lhs.true37

land.lhs.true37:                                  ; preds = %land.lhs.true36
  %7 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 4
  %8 = load %union.tree_node** %7, align 8, !tbaa !66
  %call39 = tail call i32 @integer_zerop(%union.tree_node* %8)
  %tobool40 = icmp eq i32 %call39, 0
  br i1 %tobool40, label %if.else, label %return

if.else:                                          ; preds = %land.rhs, %land.lhs.true, %land.lhs.true37, %land.lhs.true36, %while.end
  %bf.load43 = load i32* %code, align 8
  %9 = and i32 %bf.load43, 262399
  %10 = icmp eq i32 %9, 25
  br i1 %10, label %if.end53, label %return

if.end53:                                         ; preds = %if.else
  %type55 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type55, align 8, !tbaa !15
  %unsigned_flag = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %bf.load57 = load i32* %unsigned_flag, align 8
  %bf.clear59 = and i32 %bf.load57, 8192
  %tobool60 = icmp eq i32 %bf.clear59, 0
  br i1 %tobool60, label %if.then61, label %if.end69

if.then61:                                        ; preds = %if.end53
  %int_cst62 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst62 to i64*
  %12 = load i64* %low, align 8, !tbaa !20
  %cmp63 = icmp eq i64 %12, -1
  br i1 %cmp63, label %land.rhs64, label %land.end68

land.rhs64:                                       ; preds = %if.then61
  %high = getelementptr inbounds i32* %int_cst62, i64 2
  %13 = bitcast i32* %high to i64*
  %14 = load i64* %13, align 8, !tbaa !23
  %cmp67 = icmp eq i64 %14, -1
  br label %land.end68

land.end68:                                       ; preds = %land.rhs64, %if.then61
  %15 = phi i1 [ false, %if.then61 ], [ %cmp67, %land.rhs64 ]
  %land.ext = zext i1 %15 to i32
  br label %return

if.end69:                                         ; preds = %if.end53
  %type72 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %mode73 = getelementptr inbounds %struct.tree_type* %type72, i64 0, i32 6
  %bf.load74 = load i32* %mode73, align 4
  %bf.lshr75 = lshr i32 %bf.load74, 9
  %bf.clear76 = and i32 %bf.lshr75, 127
  %idxprom134 = zext i32 %bf.clear76 to i64
  %arrayidx77 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom134
  %16 = load i16* %arrayidx77, align 2, !tbaa !69
  %cmp78 = icmp ugt i16 %16, 63
  br i1 %cmp78, label %if.then80, label %if.else105

if.then80:                                        ; preds = %if.end69
  %conv = zext i16 %16 to i32
  %sub = add nsw i32 %conv, -64
  %cmp81 = icmp sgt i32 %sub, 64
  br i1 %cmp81, label %if.then83, label %if.else84

if.then83:                                        ; preds = %if.then80
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 877, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.integer_all_onesp, i64 0, i64 0)) #8
  unreachable

if.else84:                                        ; preds = %if.then80
  %cmp85 = icmp eq i32 %sub, 64
  br i1 %cmp85, label %if.end91, label %if.else88

if.else88:                                        ; preds = %if.else84
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 1, %sh_prom
  %sub89 = add nsw i64 %shl, -1
  br label %if.end91

if.end91:                                         ; preds = %if.else84, %if.else88
  %high_value.0 = phi i64 [ %sub89, %if.else88 ], [ -1, %if.else84 ]
  %int_cst93 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %low94 = bitcast i32* %int_cst93 to i64*
  %17 = load i64* %low94, align 8, !tbaa !20
  %cmp95 = icmp eq i64 %17, -1
  br i1 %cmp95, label %land.rhs97, label %land.end103

land.rhs97:                                       ; preds = %if.end91
  %high100 = getelementptr inbounds i32* %int_cst93, i64 2
  %18 = bitcast i32* %high100 to i64*
  %19 = load i64* %18, align 8, !tbaa !23
  %cmp101 = icmp eq i64 %19, %high_value.0
  br label %land.end103

land.end103:                                      ; preds = %land.rhs97, %if.end91
  %20 = phi i1 [ false, %if.end91 ], [ %cmp101, %land.rhs97 ]
  %land.ext104 = zext i1 %20 to i32
  br label %return

if.else105:                                       ; preds = %if.end69
  %int_cst107 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %low108 = bitcast i32* %int_cst107 to i64*
  %21 = load i64* %low108, align 8, !tbaa !20
  %sh_prom109 = zext i16 %16 to i64
  %shl110 = shl i64 1, %sh_prom109
  %sub111 = add i64 %shl110, -1
  %cmp112 = icmp eq i64 %21, %sub111
  %conv113 = zext i1 %cmp112 to i32
  br label %return

return:                                           ; preds = %if.else, %land.lhs.true37, %if.else105, %land.end103, %land.end68
  %retval.0 = phi i32 [ %land.ext104, %land.end103 ], [ %conv113, %if.else105 ], [ %land.ext, %land.end68 ], [ 1, %land.lhs.true37 ], [ 0, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @integer_pow2p(%union.tree_node* nocapture readonly %expr) #3 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %if.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr139 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr139, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %if.end

while.end:                                        ; preds = %while.cond
  %cmp35 = icmp eq i32 %bf.clear, 27
  br i1 %cmp35, label %land.lhs.true36, label %if.end

land.lhs.true36:                                  ; preds = %while.end
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %5 = bitcast i32* %real to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !64
  %call = tail call i32 @integer_pow2p(%union.tree_node* %6)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %land.lhs.true37

land.lhs.true37:                                  ; preds = %land.lhs.true36
  %7 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 4
  %8 = load %union.tree_node** %7, align 8, !tbaa !66
  %call39 = tail call i32 @integer_zerop(%union.tree_node* %8)
  %tobool40 = icmp eq i32 %call39, 0
  br i1 %tobool40, label %if.end, label %return

if.end:                                           ; preds = %land.rhs, %land.lhs.true, %land.lhs.true37, %land.lhs.true36, %while.end
  %9 = and i32 %bf.load, 262399
  %10 = icmp eq i32 %9, 25
  br i1 %10, label %if.end53, label %return

if.end53:                                         ; preds = %if.end
  %type55 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type55, align 8, !tbaa !15
  %code57 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %bf.load58 = load i32* %code57, align 8
  %bf.clear59 = and i32 %bf.load58, 255
  switch i32 %bf.clear59, label %cond.false [
    i32 13, label %cond.true
    i32 15, label %cond.true
  ]

cond.true:                                        ; preds = %if.end53, %if.end53
  %12 = load i32* @target_flags, align 4, !tbaa !38
  %and = lshr i32 %12, 20
  %13 = and i32 %and, 32
  %14 = add i32 %13, 32
  br label %cond.end

cond.false:                                       ; preds = %if.end53
  %type72 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type72, i64 0, i32 6
  %bf.load73 = load i32* %precision, align 4
  %bf.clear74 = and i32 %bf.load73, 511
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond75 = phi i32 [ %14, %cond.true ], [ %bf.clear74, %cond.false ]
  %int_cst76 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %high77 = getelementptr inbounds i32* %int_cst76, i64 2
  %15 = bitcast i32* %high77 to i64*
  %16 = load i64* %15, align 8, !tbaa !23
  %low80 = bitcast i32* %int_cst76 to i64*
  %17 = load i64* %low80, align 8, !tbaa !20
  %cmp81 = icmp eq i32 %cond75, 128
  br i1 %cmp81, label %if.end95, label %if.else

if.else:                                          ; preds = %cond.end
  %cmp83 = icmp ugt i32 %cond75, 64
  br i1 %cmp83, label %if.then84, label %if.else86

if.then84:                                        ; preds = %if.else
  %sub = add nsw i32 %cond75, -64
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 -1, %sh_prom
  %neg = xor i64 %shl, -1
  %and85 = and i64 %16, %neg
  br label %if.end95

if.else86:                                        ; preds = %if.else
  %cmp87 = icmp ult i32 %cond75, 64
  br i1 %cmp87, label %if.then88, label %if.end95

if.then88:                                        ; preds = %if.else86
  %sh_prom89 = zext i32 %cond75 to i64
  %shl90 = shl i64 -1, %sh_prom89
  %neg91 = xor i64 %shl90, -1
  %and92 = and i64 %17, %neg91
  br label %if.end95

if.end95:                                         ; preds = %if.then84, %if.then88, %if.else86, %cond.end
  %high.0 = phi i64 [ %16, %cond.end ], [ %and85, %if.then84 ], [ 0, %if.then88 ], [ 0, %if.else86 ]
  %low.0 = phi i64 [ %17, %cond.end ], [ %17, %if.then84 ], [ %and92, %if.then88 ], [ %17, %if.else86 ]
  %cmp98 = icmp eq i64 %low.0, 0
  %18 = or i64 %low.0, %high.0
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %return, label %if.end100

if.end100:                                        ; preds = %if.end95
  %cmp96 = icmp eq i64 %high.0, 0
  br i1 %cmp96, label %land.lhs.true102, label %lor.rhs

land.lhs.true102:                                 ; preds = %if.end100
  %sub103 = add nsw i64 %low.0, -1
  %and104 = and i64 %sub103, %low.0
  %cmp105 = icmp eq i64 %and104, 0
  %cmp98.not = xor i1 %cmp98, true
  %brmerge = or i1 %cmp105, %cmp98.not
  br i1 %brmerge, label %lor.end, label %land.rhs107

lor.rhs:                                          ; preds = %if.end100
  br i1 %cmp98, label %land.rhs107, label %lor.end

land.rhs107:                                      ; preds = %land.lhs.true102, %lor.rhs
  %sub108 = add nsw i64 %high.0, -1
  %and109 = and i64 %sub108, %high.0
  %cmp110 = icmp eq i64 %and109, 0
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true102, %lor.rhs, %land.rhs107
  %20 = phi i1 [ %cmp105, %land.lhs.true102 ], [ false, %lor.rhs ], [ %cmp110, %land.rhs107 ]
  %lor.ext = zext i1 %20 to i32
  br label %return

return:                                           ; preds = %if.end95, %if.end, %land.lhs.true37, %lor.end
  %retval.0 = phi i32 [ %lor.ext, %lor.end ], [ 1, %land.lhs.true37 ], [ 0, %if.end ], [ 0, %if.end95 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @tree_log2(%union.tree_node* nocapture readonly %expr) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %if.then, %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ], [ %6, %if.then ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %if.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr102 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr102, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %if.end

while.end:                                        ; preds = %while.cond
  %cmp35 = icmp eq i32 %bf.clear, 27
  br i1 %cmp35, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %5 = bitcast i32* %real to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !64
  br label %while.cond

if.end:                                           ; preds = %land.rhs, %land.lhs.true, %while.end
  %type37 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type37, align 8, !tbaa !15
  %code39 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load40 = load i32* %code39, align 8
  %bf.clear41 = and i32 %bf.load40, 255
  switch i32 %bf.clear41, label %cond.false [
    i32 13, label %cond.true
    i32 15, label %cond.true
  ]

cond.true:                                        ; preds = %if.end, %if.end
  %8 = load i32* @target_flags, align 4, !tbaa !38
  %and = lshr i32 %8, 20
  %9 = and i32 %and, 32
  %10 = add i32 %9, 32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %type53 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type53, i64 0, i32 6
  %bf.load54 = load i32* %precision, align 4
  %bf.clear55 = and i32 %bf.load54, 511
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond56 = phi i32 [ %10, %cond.true ], [ %bf.clear55, %cond.false ]
  %int_cst57 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %high58 = getelementptr inbounds i32* %int_cst57, i64 2
  %11 = bitcast i32* %high58 to i64*
  %12 = load i64* %11, align 8, !tbaa !23
  %low61 = bitcast i32* %int_cst57 to i64*
  %13 = load i64* %low61, align 8, !tbaa !20
  %cmp62 = icmp eq i32 %cond56, 128
  br i1 %cmp62, label %if.end76, label %if.else

if.else:                                          ; preds = %cond.end
  %cmp64 = icmp ugt i32 %cond56, 64
  br i1 %cmp64, label %if.then65, label %if.else67

if.then65:                                        ; preds = %if.else
  %sub = add nsw i32 %cond56, -64
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 -1, %sh_prom
  %neg = xor i64 %shl, -1
  %and66 = and i64 %12, %neg
  br label %if.end76

if.else67:                                        ; preds = %if.else
  %cmp68 = icmp ult i32 %cond56, 64
  br i1 %cmp68, label %if.then69, label %cond.false80

if.then69:                                        ; preds = %if.else67
  %sh_prom70 = zext i32 %cond56 to i64
  %shl71 = shl i64 -1, %sh_prom70
  %neg72 = xor i64 %shl71, -1
  %and73 = and i64 %13, %neg72
  br label %cond.false80

if.end76:                                         ; preds = %if.then65, %cond.end
  %high.0 = phi i64 [ %12, %cond.end ], [ %and66, %if.then65 ]
  %cmp77 = icmp eq i64 %high.0, 0
  br i1 %cmp77, label %cond.false80, label %cond.true78

cond.true78:                                      ; preds = %if.end76
  %call79 = tail call i32 @exact_log2_wide(i64 %high.0) #4
  %add = add nsw i32 %call79, 64
  br label %return

cond.false80:                                     ; preds = %if.else67, %if.then69, %if.end76
  %low.0105 = phi i64 [ %13, %if.end76 ], [ %and73, %if.then69 ], [ %13, %if.else67 ]
  %call81 = tail call i32 @exact_log2_wide(i64 %low.0105) #4
  br label %return

return:                                           ; preds = %cond.true78, %cond.false80
  %retval.0 = phi i32 [ %add, %cond.true78 ], [ %call81, %cond.false80 ]
  ret i32 %retval.0
}

declare i32 @exact_log2_wide(i64) #2

; Function Attrs: nounwind uwtable
define i32 @tree_floor_log2(%union.tree_node* nocapture readonly %expr) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %if.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr105 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr105, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %if.end

while.end:                                        ; preds = %while.cond
  %cmp35 = icmp eq i32 %bf.clear, 27
  br i1 %cmp35, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %5 = bitcast i32* %real to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !64
  %call = tail call i32 @tree_log2(%union.tree_node* %6)
  br label %return

if.end:                                           ; preds = %land.rhs, %land.lhs.true, %while.end
  %type37 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type37, align 8, !tbaa !15
  %code39 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load40 = load i32* %code39, align 8
  %bf.clear41 = and i32 %bf.load40, 255
  switch i32 %bf.clear41, label %cond.false [
    i32 13, label %cond.true
    i32 15, label %cond.true
  ]

cond.true:                                        ; preds = %if.end, %if.end
  %8 = load i32* @target_flags, align 4, !tbaa !38
  %and = lshr i32 %8, 20
  %9 = and i32 %and, 32
  %10 = add i32 %9, 32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %type53 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type53, i64 0, i32 6
  %bf.load54 = load i32* %precision, align 4
  %bf.clear55 = and i32 %bf.load54, 511
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond56 = phi i32 [ %10, %cond.true ], [ %bf.clear55, %cond.false ]
  %int_cst57 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %high58 = getelementptr inbounds i32* %int_cst57, i64 2
  %11 = bitcast i32* %high58 to i64*
  %12 = load i64* %11, align 8, !tbaa !23
  %low61 = bitcast i32* %int_cst57 to i64*
  %13 = load i64* %low61, align 8, !tbaa !20
  %14 = and i32 %cond56, 383
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %if.end78, label %if.else

if.else:                                          ; preds = %cond.end
  %cmp66 = icmp ugt i32 %cond56, 64
  br i1 %cmp66, label %if.then67, label %if.else69

if.then67:                                        ; preds = %if.else
  %sub = add nsw i32 %cond56, -64
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 -1, %sh_prom
  %neg = xor i64 %shl, -1
  %and68 = and i64 %12, %neg
  br label %if.end78

if.else69:                                        ; preds = %if.else
  %cmp70 = icmp ult i32 %cond56, 64
  br i1 %cmp70, label %if.then71, label %cond.false82

if.then71:                                        ; preds = %if.else69
  %sh_prom72 = zext i32 %cond56 to i64
  %shl73 = shl i64 -1, %sh_prom72
  %neg74 = xor i64 %shl73, -1
  %and75 = and i64 %13, %neg74
  br label %cond.false82

if.end78:                                         ; preds = %if.then67, %cond.end
  %high.0 = phi i64 [ %12, %cond.end ], [ %and68, %if.then67 ]
  %cmp79 = icmp eq i64 %high.0, 0
  br i1 %cmp79, label %cond.false82, label %cond.true80

cond.true80:                                      ; preds = %if.end78
  %call81 = tail call i32 @floor_log2_wide(i64 %high.0) #4
  %add = add nsw i32 %call81, 64
  br label %return

cond.false82:                                     ; preds = %if.else69, %if.then71, %if.end78
  %low.0108 = phi i64 [ %13, %if.end78 ], [ %and75, %if.then71 ], [ %13, %if.else69 ]
  %call83 = tail call i32 @floor_log2_wide(i64 %low.0108) #4
  br label %return

return:                                           ; preds = %cond.true80, %cond.false82, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %add, %cond.true80 ], [ %call83, %cond.false82 ]
  ret i32 %retval.0
}

declare i32 @floor_log2_wide(i64) #2

; Function Attrs: nounwind uwtable
define i32 @real_zerop(%union.tree_node* %expr) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr68 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr68, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true, %land.rhs
  %5 = and i32 %bf.load, 262399
  %6 = icmp eq i32 %5, 26
  br i1 %6, label %land.lhs.true41, label %lor.rhs

land.lhs.true41:                                  ; preds = %while.end
  %real_cst42 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %7 = bitcast i32* %real_cst42 to %struct.realvaluetype*
  %call = tail call i32 @ereal_cmp(%struct.realvaluetype* byval align 8 %7, %struct.realvaluetype* byval align 8 @dconst0) #4
  %cmp43 = icmp eq i32 %call, 0
  br i1 %cmp43, label %lor.end, label %land.lhs.true41.lor.rhs_crit_edge

land.lhs.true41.lor.rhs_crit_edge:                ; preds = %land.lhs.true41
  %bf.load46.pre = load i32* %code, align 8
  br label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true41.lor.rhs_crit_edge, %while.end
  %bf.load46 = phi i32 [ %bf.load46.pre, %land.lhs.true41.lor.rhs_crit_edge ], [ %bf.load, %while.end ]
  %bf.clear47 = and i32 %bf.load46, 255
  %cmp48 = icmp eq i32 %bf.clear47, 27
  br i1 %cmp48, label %land.lhs.true49, label %lor.end

land.lhs.true49:                                  ; preds = %lor.rhs
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %8 = bitcast i32* %real to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !64
  %call50 = tail call i32 @real_zerop(%union.tree_node* %9)
  %tobool51 = icmp eq i32 %call50, 0
  br i1 %tobool51, label %lor.end, label %land.rhs52

land.rhs52:                                       ; preds = %land.lhs.true49
  %10 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 4
  %11 = load %union.tree_node** %10, align 8, !tbaa !66
  %call54 = tail call i32 @real_zerop(%union.tree_node* %11)
  %tobool55 = icmp ne i32 %call54, 0
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true49, %lor.rhs, %land.rhs52, %land.lhs.true41
  %12 = phi i1 [ true, %land.lhs.true41 ], [ false, %land.lhs.true49 ], [ false, %lor.rhs ], [ %tobool55, %land.rhs52 ]
  %lor.ext = zext i1 %12 to i32
  ret i32 %lor.ext
}

declare i32 @ereal_cmp(%struct.realvaluetype* byval align 8, %struct.realvaluetype* byval align 8) #2

; Function Attrs: nounwind uwtable
define i32 @real_onep(%union.tree_node* %expr) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr68 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr68, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true, %land.rhs
  %5 = and i32 %bf.load, 262399
  %6 = icmp eq i32 %5, 26
  br i1 %6, label %land.lhs.true41, label %lor.rhs

land.lhs.true41:                                  ; preds = %while.end
  %real_cst42 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %7 = bitcast i32* %real_cst42 to %struct.realvaluetype*
  %call = tail call i32 @ereal_cmp(%struct.realvaluetype* byval align 8 %7, %struct.realvaluetype* byval align 8 @dconst1) #4
  %cmp43 = icmp eq i32 %call, 0
  br i1 %cmp43, label %lor.end, label %land.lhs.true41.lor.rhs_crit_edge

land.lhs.true41.lor.rhs_crit_edge:                ; preds = %land.lhs.true41
  %bf.load46.pre = load i32* %code, align 8
  br label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true41.lor.rhs_crit_edge, %while.end
  %bf.load46 = phi i32 [ %bf.load46.pre, %land.lhs.true41.lor.rhs_crit_edge ], [ %bf.load, %while.end ]
  %bf.clear47 = and i32 %bf.load46, 255
  %cmp48 = icmp eq i32 %bf.clear47, 27
  br i1 %cmp48, label %land.lhs.true49, label %lor.end

land.lhs.true49:                                  ; preds = %lor.rhs
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %8 = bitcast i32* %real to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !64
  %call50 = tail call i32 @real_onep(%union.tree_node* %9)
  %tobool51 = icmp eq i32 %call50, 0
  br i1 %tobool51, label %lor.end, label %land.rhs52

land.rhs52:                                       ; preds = %land.lhs.true49
  %10 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 4
  %11 = load %union.tree_node** %10, align 8, !tbaa !66
  %call54 = tail call i32 @real_zerop(%union.tree_node* %11)
  %tobool55 = icmp ne i32 %call54, 0
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true49, %lor.rhs, %land.rhs52, %land.lhs.true41
  %12 = phi i1 [ true, %land.lhs.true41 ], [ false, %land.lhs.true49 ], [ false, %lor.rhs ], [ %tobool55, %land.rhs52 ]
  %lor.ext = zext i1 %12 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define i32 @real_twop(%union.tree_node* %expr) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr68 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr68, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true, %land.rhs
  %5 = and i32 %bf.load, 262399
  %6 = icmp eq i32 %5, 26
  br i1 %6, label %land.lhs.true41, label %lor.rhs

land.lhs.true41:                                  ; preds = %while.end
  %real_cst42 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %7 = bitcast i32* %real_cst42 to %struct.realvaluetype*
  %call = tail call i32 @ereal_cmp(%struct.realvaluetype* byval align 8 %7, %struct.realvaluetype* byval align 8 @dconst2) #4
  %cmp43 = icmp eq i32 %call, 0
  br i1 %cmp43, label %lor.end, label %land.lhs.true41.lor.rhs_crit_edge

land.lhs.true41.lor.rhs_crit_edge:                ; preds = %land.lhs.true41
  %bf.load46.pre = load i32* %code, align 8
  br label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true41.lor.rhs_crit_edge, %while.end
  %bf.load46 = phi i32 [ %bf.load46.pre, %land.lhs.true41.lor.rhs_crit_edge ], [ %bf.load, %while.end ]
  %bf.clear47 = and i32 %bf.load46, 255
  %cmp48 = icmp eq i32 %bf.clear47, 27
  br i1 %cmp48, label %land.lhs.true49, label %lor.end

land.lhs.true49:                                  ; preds = %lor.rhs
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %8 = bitcast i32* %real to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !64
  %call50 = tail call i32 @real_twop(%union.tree_node* %9)
  %tobool51 = icmp eq i32 %call50, 0
  br i1 %tobool51, label %lor.end, label %land.rhs52

land.rhs52:                                       ; preds = %land.lhs.true49
  %10 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 4
  %11 = load %union.tree_node** %10, align 8, !tbaa !66
  %call54 = tail call i32 @real_zerop(%union.tree_node* %11)
  %tobool55 = icmp ne i32 %call54, 0
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true49, %lor.rhs, %land.rhs52, %land.lhs.true41
  %12 = phi i1 [ true, %land.lhs.true41 ], [ false, %land.lhs.true49 ], [ false, %lor.rhs ], [ %tobool55, %land.rhs52 ]
  %lor.ext = zext i1 %12 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind readonly uwtable
define i32 @really_constant_p(%union.tree_node* nocapture readonly %exp) #3 {
entry:
  %code18 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load19 = load i32* %code18, align 8
  %bf.clear20 = and i32 %bf.load19, 255
  %bf.clear.off21 = add i32 %bf.clear20, -114
  %switch22 = icmp ult i32 %bf.clear.off21, 3
  br i1 %switch22, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %while.body, %entry
  %bf.load.lcssa = phi i32 [ %bf.load19, %entry ], [ %bf.load, %while.body ]
  %bf.lshr = lshr i32 %bf.load.lcssa, 9
  %bf.clear14 = and i32 %bf.lshr, 1
  ret i32 %bf.clear14

while.body:                                       ; preds = %entry, %while.body
  %exp.addr.023 = phi %union.tree_node* [ %0, %while.body ], [ %exp, %entry ]
  %operands = getelementptr inbounds %union.tree_node* %exp.addr.023, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %while.body, label %lor.rhs
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @value_member(%union.tree_node* readnone %elem, %union.tree_node* readonly %list) #3 {
entry:
  %tobool4 = icmp eq %union.tree_node* %list, null
  br i1 %tobool4, label %return, label %while.body

while.body:                                       ; preds = %entry, %if.end
  %list.addr.05 = phi %union.tree_node* [ %2, %if.end ], [ %list, %entry ]
  %value = getelementptr inbounds %union.tree_node* %list.addr.05, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !25
  %cmp = icmp eq %union.tree_node* %1, %elem
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %while.body
  %chain = getelementptr inbounds %union.tree_node* %list.addr.05, i64 0, i32 0, i32 0, i32 0
  %2 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %2, null
  br i1 %tobool, label %return, label %while.body

return:                                           ; preds = %while.body, %if.end, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %list.addr.05, %while.body ], [ null, %if.end ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @purpose_member(%union.tree_node* readnone %elem, %union.tree_node* readonly %list) #3 {
entry:
  %tobool4 = icmp eq %union.tree_node* %list, null
  br i1 %tobool4, label %return, label %while.body

while.body:                                       ; preds = %entry, %if.end
  %list.addr.05 = phi %union.tree_node* [ %2, %if.end ], [ %list, %entry ]
  %purpose = getelementptr inbounds %union.tree_node* %list.addr.05, i64 0, i32 0, i32 1
  %0 = load i8** %purpose, align 8
  %1 = bitcast i8* %0 to %union.tree_node*
  %cmp = icmp eq %union.tree_node* %1, %elem
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %while.body
  %chain = getelementptr inbounds %union.tree_node* %list.addr.05, i64 0, i32 0, i32 0, i32 0
  %2 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %2, null
  br i1 %tobool, label %return, label %while.body

return:                                           ; preds = %while.body, %if.end, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %list.addr.05, %while.body ], [ null, %if.end ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @binfo_member(%union.tree_node* readnone %elem, %union.tree_node* readonly %list) #3 {
entry:
  %tobool4 = icmp eq %union.tree_node* %list, null
  br i1 %tobool4, label %return, label %while.body

while.body:                                       ; preds = %entry, %if.end
  %list.addr.05 = phi %union.tree_node* [ %1, %if.end ], [ %list, %entry ]
  %type = getelementptr inbounds %union.tree_node* %list.addr.05, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !15
  %cmp = icmp eq %union.tree_node* %0, %elem
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %while.body
  %chain = getelementptr inbounds %union.tree_node* %list.addr.05, i64 0, i32 0, i32 0, i32 0
  %1 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %1, null
  br i1 %tobool, label %return, label %while.body

return:                                           ; preds = %while.body, %if.end, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %list.addr.05, %while.body ], [ null, %if.end ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @chain_member(%union.tree_node* readnone %elem, %union.tree_node* readonly %chain) #3 {
entry:
  %tobool4 = icmp eq %union.tree_node* %chain, null
  br i1 %tobool4, label %return, label %while.body

while.body:                                       ; preds = %entry, %if.end
  %chain.addr.05 = phi %union.tree_node* [ %0, %if.end ], [ %chain, %entry ]
  %cmp = icmp eq %union.tree_node* %chain.addr.05, %elem
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %while.body
  %chain1 = getelementptr inbounds %union.tree_node* %chain.addr.05, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain1, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %0, null
  br i1 %tobool, label %return, label %while.body

return:                                           ; preds = %while.body, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %while.body ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @chain_member_value(%union.tree_node* readnone %elem, %union.tree_node* readonly %chain) #3 {
entry:
  %tobool4 = icmp eq %union.tree_node* %chain, null
  br i1 %tobool4, label %return, label %while.body

while.body:                                       ; preds = %entry, %if.end
  %chain.addr.05 = phi %union.tree_node* [ %2, %if.end ], [ %chain, %entry ]
  %value = getelementptr inbounds %union.tree_node* %chain.addr.05, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !25
  %cmp = icmp eq %union.tree_node* %1, %elem
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %while.body
  %chain1 = getelementptr inbounds %union.tree_node* %chain.addr.05, i64 0, i32 0, i32 0, i32 0
  %2 = load %union.tree_node** %chain1, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %2, null
  br i1 %tobool, label %return, label %while.body

return:                                           ; preds = %while.body, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %while.body ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @chain_member_purpose(%union.tree_node* readnone %elem, %union.tree_node* readonly %chain) #3 {
entry:
  %tobool4 = icmp eq %union.tree_node* %chain, null
  br i1 %tobool4, label %return, label %while.body

while.body:                                       ; preds = %entry, %if.end
  %chain.addr.05 = phi %union.tree_node* [ %2, %if.end ], [ %chain, %entry ]
  %purpose = getelementptr inbounds %union.tree_node* %chain.addr.05, i64 0, i32 0, i32 1
  %0 = load i8** %purpose, align 8
  %1 = bitcast i8* %0 to %union.tree_node*
  %cmp = icmp eq %union.tree_node* %1, %elem
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %while.body
  %chain1 = getelementptr inbounds %union.tree_node* %chain.addr.05, i64 0, i32 0, i32 0, i32 0
  %2 = load %union.tree_node** %chain1, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %2, null
  br i1 %tobool, label %return, label %while.body

return:                                           ; preds = %while.body, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %while.body ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @list_length(%union.tree_node* readonly %t) #3 {
entry:
  %tobool2 = icmp eq %union.tree_node* %t, null
  br i1 %tobool2, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %len.04 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %tail.03 = phi %union.tree_node* [ %0, %for.body ], [ %t, %entry ]
  %inc = add nsw i32 %len.04, 1
  %chain = getelementptr inbounds %union.tree_node* %tail.03, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %len.0.lcssa = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  ret i32 %len.0.lcssa
}

; Function Attrs: nounwind readonly uwtable
define i32 @fields_length(%union.tree_node* nocapture readonly %type) #3 {
entry:
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %0 = load i8** %values, align 8
  %tobool6 = icmp eq i8* %0, null
  br i1 %tobool6, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %1 = bitcast i8* %0 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %count.08 = phi i32 [ 0, %for.body.lr.ph ], [ %inc.count.0, %for.body ]
  %t.07 = phi %union.tree_node* [ %1, %for.body.lr.ph ], [ %2, %for.body ]
  %code = getelementptr inbounds %union.tree_node* %t.07, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 37
  %inc = zext i1 %cmp to i32
  %inc.count.0 = add nsw i32 %inc, %count.08
  %chain = getelementptr inbounds %union.tree_node* %t.07, i64 0, i32 0, i32 0, i32 0
  %2 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %2, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %count.0.lcssa = phi i32 [ 0, %entry ], [ %inc.count.0, %for.body ]
  ret i32 %count.0.lcssa
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @chainon(%union.tree_node* %op1, %union.tree_node* %op2) #0 {
entry:
  %tobool = icmp eq %union.tree_node* %op1, null
  br i1 %tobool, label %return, label %for.cond

for.cond:                                         ; preds = %entry, %for.cond
  %t1.0 = phi %union.tree_node* [ %0, %for.cond ], [ %op1, %entry ]
  %chain = getelementptr inbounds %union.tree_node* %t1.0, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool1 = icmp eq %union.tree_node* %0, null
  br i1 %tobool1, label %for.end, label %for.cond

for.end:                                          ; preds = %for.cond
  store %union.tree_node* %op2, %union.tree_node** %chain, align 8, !tbaa !27
  br label %return

return:                                           ; preds = %entry, %for.end
  %retval.0 = phi %union.tree_node* [ %op1, %for.end ], [ %op2, %entry ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @tree_last(%union.tree_node* readonly %chain) #3 {
entry:
  %tobool = icmp eq %union.tree_node* %chain, null
  br i1 %tobool, label %if.end, label %while.cond

while.cond:                                       ; preds = %entry, %while.cond
  %chain.addr.0 = phi %union.tree_node* [ %0, %while.cond ], [ %chain, %entry ]
  %chain1 = getelementptr inbounds %union.tree_node* %chain.addr.0, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain1, align 8, !tbaa !27
  %tobool2 = icmp eq %union.tree_node* %0, null
  br i1 %tobool2, label %if.end, label %while.cond

if.end:                                           ; preds = %while.cond, %entry
  %chain.addr.1 = phi %union.tree_node* [ null, %entry ], [ %chain.addr.0, %while.cond ]
  ret %union.tree_node* %chain.addr.1
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @nreverse(%union.tree_node* %t) #0 {
entry:
  %tobool7 = icmp eq %union.tree_node* %t, null
  br i1 %tobool7, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %prev.09 = phi %union.tree_node* [ %decl.08, %for.body ], [ null, %entry ]
  %decl.08 = phi %union.tree_node* [ %0, %for.body ], [ %t, %entry ]
  %chain = getelementptr inbounds %union.tree_node* %decl.08, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain, align 8, !tbaa !27
  store %union.tree_node* %prev.09, %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %prev.0.lcssa = phi %union.tree_node* [ null, %entry ], [ %decl.08, %for.body ]
  ret %union.tree_node* %prev.0.lcssa
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @listify(%union.tree_node* %chain) #0 {
entry:
  %tobool9 = icmp eq %union.tree_node* %chain, null
  br i1 %tobool9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %if.end
  %result.012 = phi %union.tree_node* [ %result.1, %if.end ], [ null, %entry ]
  %out_tail.011 = phi %union.tree_node* [ %0, %if.end ], [ null, %entry ]
  %in_tail.010 = phi %union.tree_node* [ %4, %if.end ], [ %chain, %entry ]
  %call.i = tail call i8* @ggc_alloc(i64 40) #4
  %0 = bitcast i8* %call.i to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call.i, i8 0, i64 24, i32 8, i1 false) #4
  %code.i = getelementptr inbounds i8* %call.i, i64 16
  %1 = bitcast i8* %code.i to i32*
  store i32 2, i32* %1, align 8
  %chain2.i = bitcast i8* %call.i to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %chain2.i, align 8, !tbaa !27
  %purpose3.i = getelementptr inbounds i8* %call.i, i64 24
  %2 = bitcast i8* %purpose3.i to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %2, align 8, !tbaa !71
  %value5.i = getelementptr inbounds i8* %call.i, i64 32
  %3 = bitcast i8* %value5.i to %union.tree_node**
  store %union.tree_node* %in_tail.010, %union.tree_node** %3, align 8, !tbaa !25
  %tobool1 = icmp eq %union.tree_node* %out_tail.011, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %while.body
  %chain2 = getelementptr inbounds %union.tree_node* %out_tail.011, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %0, %union.tree_node** %chain2, align 8, !tbaa !27
  br label %if.end

if.end:                                           ; preds = %while.body, %if.then
  %result.1 = phi %union.tree_node* [ %result.012, %if.then ], [ %0, %while.body ]
  %chain4 = getelementptr inbounds %union.tree_node* %in_tail.010, i64 0, i32 0, i32 0, i32 0
  %4 = load %union.tree_node** %chain4, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %4, null
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %if.end, %entry
  %result.0.lcssa = phi %union.tree_node* [ null, %entry ], [ %result.1, %if.end ]
  ret %union.tree_node* %result.0.lcssa
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @tree_cons(%union.tree_node* %purpose, %union.tree_node* %value, %union.tree_node* %chain) #0 {
entry:
  %call = tail call i8* @ggc_alloc(i64 40) #4
  %0 = bitcast i8* %call to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call, i8 0, i64 24, i32 8, i1 false)
  %code = getelementptr inbounds i8* %call, i64 16
  %1 = bitcast i8* %code to i32*
  store i32 2, i32* %1, align 8
  %chain2 = bitcast i8* %call to %union.tree_node**
  store %union.tree_node* %chain, %union.tree_node** %chain2, align 8, !tbaa !27
  %purpose3 = getelementptr inbounds i8* %call, i64 24
  %2 = bitcast i8* %purpose3 to %union.tree_node**
  store %union.tree_node* %purpose, %union.tree_node** %2, align 8, !tbaa !71
  %value5 = getelementptr inbounds i8* %call, i64 32
  %3 = bitcast i8* %value5 to %union.tree_node**
  store %union.tree_node* %value, %union.tree_node** %3, align 8, !tbaa !25
  ret %union.tree_node* %0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_tree_list(%union.tree_node* %parm, %union.tree_node* %value) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 2)
  %purpose = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 1
  %parm.c = bitcast %union.tree_node* %parm to i8*
  store i8* %parm.c, i8** %purpose, align 8, !tbaa !71
  %value2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value2 to %union.tree_node**
  store %union.tree_node* %value, %union.tree_node** %0, align 8, !tbaa !25
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @size_in_bytes(%union.tree_node* readonly %type) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  %cmp = icmp eq %union.tree_node* %0, %type
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !10
  br label %return

if.end:                                           ; preds = %entry
  %2 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %3 = load %union.tree_node** %2, align 8, !tbaa !46
  %4 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 4
  %5 = load %union.tree_node** %4, align 8, !tbaa !72
  %cmp3 = icmp eq %union.tree_node* %5, null
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  tail call void @incomplete_type_error(%union.tree_node* null, %union.tree_node* %3) #4
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !10
  br label %return

if.end5:                                          ; preds = %if.end
  %code = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp6 = icmp eq i32 %bf.clear, 25
  br i1 %cmp6, label %if.then7, label %return

if.then7:                                         ; preds = %if.end5
  %call = tail call i32 @force_fit_type(%union.tree_node* %5, i32 0) #4
  br label %return

return:                                           ; preds = %if.end5, %if.then7, %if.then4, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ %6, %if.then4 ], [ %5, %if.then7 ], [ %5, %if.end5 ]
  ret %union.tree_node* %retval.0
}

declare void @incomplete_type_error(%union.tree_node*, %union.tree_node*) #2

declare i32 @force_fit_type(%union.tree_node*, i32) #2

; Function Attrs: nounwind readonly uwtable
define i64 @int_size_in_bytes(%union.tree_node* readonly %type) #3 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  %cmp = icmp eq %union.tree_node* %0, %type
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %2 = load %union.tree_node** %1, align 8, !tbaa !46
  %3 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 4
  %4 = load %union.tree_node** %3, align 8, !tbaa !72
  %cmp3 = icmp eq %union.tree_node* %4, null
  br i1 %cmp3, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %code = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %5 = and i32 %bf.load, 524543
  %6 = icmp eq i32 %5, 25
  br i1 %6, label %lor.lhs.false9, label %return

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %int_cst10 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 2
  %high = getelementptr inbounds i32* %int_cst10, i64 2
  %7 = bitcast i32* %high to i64*
  %8 = load i64* %7, align 8, !tbaa !23
  %cmp11 = icmp eq i64 %8, 0
  br i1 %cmp11, label %lor.lhs.false12, label %return

lor.lhs.false12:                                  ; preds = %lor.lhs.false9
  %low = bitcast i32* %int_cst10 to i64*
  %9 = load i64* %low, align 8, !tbaa !20
  %cmp15 = icmp sgt i64 %9, -1
  %. = select i1 %cmp15, i64 %9, i64 -1
  ret i64 %.

return:                                           ; preds = %if.end, %lor.lhs.false, %lor.lhs.false9, %entry
  %retval.0 = phi i64 [ 0, %entry ], [ -1, %lor.lhs.false9 ], [ -1, %lor.lhs.false ], [ -1, %if.end ]
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @bit_position(%union.tree_node* nocapture readonly %field) #0 {
entry:
  %arguments = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 10
  %0 = load %union.tree_node** %arguments, align 8, !tbaa !73
  %u2 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 19
  %t = bitcast %union.anon.1* %u2 to %union.tree_node**
  %1 = load %union.tree_node** %t, align 8, !tbaa !10
  %call = tail call %union.tree_node* @bit_from_pos(%union.tree_node* %0, %union.tree_node* %1) #4
  ret %union.tree_node* %call
}

declare %union.tree_node* @bit_from_pos(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define i64 @int_bit_position(%union.tree_node* nocapture readonly %field) #0 {
entry:
  %arguments.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 10
  %0 = load %union.tree_node** %arguments.i, align 8, !tbaa !73
  %u2.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 19
  %t.i = bitcast %union.anon.1* %u2.i to %union.tree_node**
  %1 = load %union.tree_node** %t.i, align 8, !tbaa !10
  %call.i = tail call %union.tree_node* @bit_from_pos(%union.tree_node* %0, %union.tree_node* %1) #4
  %code.i.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %code.i.i, align 8
  %2 = and i32 %bf.load.i.i, 524543
  %3 = icmp eq i32 %2, 25
  br i1 %3, label %land.rhs.i.i, label %if.else.i

land.rhs.i.i:                                     ; preds = %entry
  %int_cst4.i.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 2
  %high.i.i = getelementptr inbounds i32* %int_cst4.i.i, i64 2
  %4 = bitcast i32* %high.i.i to i64*
  %5 = load i64* %4, align 8, !tbaa !23
  switch i64 %5, label %if.else.i [
    i64 0, label %land.lhs.true6.i.i
    i64 -1, label %land.lhs.true16.i.i
  ]

land.lhs.true6.i.i:                               ; preds = %land.rhs.i.i
  %low.i.i = bitcast i32* %int_cst4.i.i to i64*
  %6 = load i64* %low.i.i, align 8, !tbaa !20
  %cmp9.i.i = icmp sgt i64 %6, -1
  br i1 %cmp9.i.i, label %tree_low_cst.exit, label %if.else.i

land.lhs.true16.i.i:                              ; preds = %land.rhs.i.i
  %low19.i.i = bitcast i32* %int_cst4.i.i to i64*
  %7 = load i64* %low19.i.i, align 8, !tbaa !20
  %cmp20.i.i = icmp slt i64 %7, 0
  br i1 %cmp20.i.i, label %land.lhs.true21.i.i, label %if.else.i

land.lhs.true21.i.i:                              ; preds = %land.lhs.true16.i.i
  %type.i.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type.i.i, align 8, !tbaa !15
  %unsigned_flag.i.i = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i.i = load i32* %unsigned_flag.i.i, align 8
  %bf.clear26.i.i = and i32 %bf.load24.i.i, 8192
  %tobool27.i.i = icmp eq i32 %bf.clear26.i.i, 0
  br i1 %tobool27.i.i, label %tree_low_cst.exit, label %if.else.i

if.else.i:                                        ; preds = %land.rhs.i.i, %land.lhs.true6.i.i, %land.lhs.true21.i.i, %land.lhs.true16.i.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

tree_low_cst.exit:                                ; preds = %land.lhs.true21.i.i, %land.lhs.true6.i.i
  %9 = phi i64 [ %6, %land.lhs.true6.i.i ], [ %7, %land.lhs.true21.i.i ]
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define i64 @tree_low_cst(%union.tree_node* nocapture readonly %t, i32 %pos) #0 {
entry:
  %code.i = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %0 = and i32 %bf.load.i, 524543
  %1 = icmp eq i32 %0, 25
  br i1 %1, label %land.rhs.i, label %if.else

land.rhs.i:                                       ; preds = %entry
  %int_cst4.i = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 2
  %high.i = getelementptr inbounds i32* %int_cst4.i, i64 2
  %2 = bitcast i32* %high.i to i64*
  %3 = load i64* %2, align 8, !tbaa !23
  %cmp5.i = icmp eq i64 %3, 0
  br i1 %cmp5.i, label %land.lhs.true6.i, label %lor.lhs.false.i

land.lhs.true6.i:                                 ; preds = %land.rhs.i
  %low.i = bitcast i32* %int_cst4.i to i64*
  %4 = load i64* %low.i, align 8, !tbaa !20
  %cmp9.i = icmp sgt i64 %4, -1
  br i1 %cmp9.i, label %if.then, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true6.i, %land.rhs.i
  %tobool10.i = icmp eq i32 %pos, 0
  br i1 %tobool10.i, label %land.lhs.true11.i, label %host_integerp.exit

land.lhs.true11.i:                                ; preds = %lor.lhs.false.i
  %cmp15.i = icmp eq i64 %3, -1
  br i1 %cmp15.i, label %land.lhs.true16.i, label %if.else

land.lhs.true16.i:                                ; preds = %land.lhs.true11.i
  %low19.i = bitcast i32* %int_cst4.i to i64*
  %5 = load i64* %low19.i, align 8, !tbaa !20
  %cmp20.i = icmp slt i64 %5, 0
  br i1 %cmp20.i, label %land.lhs.true21.i, label %if.else

land.lhs.true21.i:                                ; preds = %land.lhs.true16.i
  %type.i = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type.i, align 8, !tbaa !15
  %unsigned_flag.i = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i = load i32* %unsigned_flag.i, align 8
  %bf.clear26.i = and i32 %bf.load24.i, 8192
  %tobool27.i = icmp eq i32 %bf.clear26.i, 0
  br i1 %tobool27.i, label %host_integerp.exit.if.then_crit_edge, label %if.else

host_integerp.exit:                               ; preds = %lor.lhs.false.i
  br i1 %cmp5.i, label %host_integerp.exit.if.then_crit_edge, label %if.else

host_integerp.exit.if.then_crit_edge:             ; preds = %land.lhs.true21.i, %host_integerp.exit
  %low.phi.trans.insert = bitcast i32* %int_cst4.i to i64*
  %.pre = load i64* %low.phi.trans.insert, align 8, !tbaa !20
  br label %if.then

if.then:                                          ; preds = %host_integerp.exit.if.then_crit_edge, %land.lhs.true6.i
  %7 = phi i64 [ %.pre, %host_integerp.exit.if.then_crit_edge ], [ %4, %land.lhs.true6.i ]
  ret i64 %7

if.else:                                          ; preds = %land.lhs.true21.i, %land.lhs.true16.i, %land.lhs.true11.i, %entry, %host_integerp.exit
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @byte_position(%union.tree_node* nocapture readonly %field) #0 {
entry:
  %arguments = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 10
  %0 = load %union.tree_node** %arguments, align 8, !tbaa !73
  %u2 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 19
  %t = bitcast %union.anon.1* %u2 to %union.tree_node**
  %1 = load %union.tree_node** %t, align 8, !tbaa !10
  %call = tail call %union.tree_node* @byte_from_pos(%union.tree_node* %0, %union.tree_node* %1) #4
  ret %union.tree_node* %call
}

declare %union.tree_node* @byte_from_pos(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define i64 @int_byte_position(%union.tree_node* nocapture readonly %field) #0 {
entry:
  %arguments.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 10
  %0 = load %union.tree_node** %arguments.i, align 8, !tbaa !73
  %u2.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 19
  %t.i = bitcast %union.anon.1* %u2.i to %union.tree_node**
  %1 = load %union.tree_node** %t.i, align 8, !tbaa !10
  %call.i = tail call %union.tree_node* @byte_from_pos(%union.tree_node* %0, %union.tree_node* %1) #4
  %code.i.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %code.i.i, align 8
  %2 = and i32 %bf.load.i.i, 524543
  %3 = icmp eq i32 %2, 25
  br i1 %3, label %land.rhs.i.i, label %if.else.i

land.rhs.i.i:                                     ; preds = %entry
  %int_cst4.i.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 2
  %high.i.i = getelementptr inbounds i32* %int_cst4.i.i, i64 2
  %4 = bitcast i32* %high.i.i to i64*
  %5 = load i64* %4, align 8, !tbaa !23
  switch i64 %5, label %if.else.i [
    i64 0, label %land.lhs.true6.i.i
    i64 -1, label %land.lhs.true16.i.i
  ]

land.lhs.true6.i.i:                               ; preds = %land.rhs.i.i
  %low.i.i = bitcast i32* %int_cst4.i.i to i64*
  %6 = load i64* %low.i.i, align 8, !tbaa !20
  %cmp9.i.i = icmp sgt i64 %6, -1
  br i1 %cmp9.i.i, label %tree_low_cst.exit, label %if.else.i

land.lhs.true16.i.i:                              ; preds = %land.rhs.i.i
  %low19.i.i = bitcast i32* %int_cst4.i.i to i64*
  %7 = load i64* %low19.i.i, align 8, !tbaa !20
  %cmp20.i.i = icmp slt i64 %7, 0
  br i1 %cmp20.i.i, label %land.lhs.true21.i.i, label %if.else.i

land.lhs.true21.i.i:                              ; preds = %land.lhs.true16.i.i
  %type.i.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type.i.i, align 8, !tbaa !15
  %unsigned_flag.i.i = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i.i = load i32* %unsigned_flag.i.i, align 8
  %bf.clear26.i.i = and i32 %bf.load24.i.i, 8192
  %tobool27.i.i = icmp eq i32 %bf.clear26.i.i, 0
  br i1 %tobool27.i.i, label %tree_low_cst.exit, label %if.else.i

if.else.i:                                        ; preds = %land.rhs.i.i, %land.lhs.true6.i.i, %land.lhs.true21.i.i, %land.lhs.true16.i.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

tree_low_cst.exit:                                ; preds = %land.lhs.true21.i.i, %land.lhs.true6.i.i
  %9 = phi i64 [ %6, %land.lhs.true6.i.i ], [ %7, %land.lhs.true21.i.i ]
  ret i64 %9
}

; Function Attrs: nounwind readonly uwtable
define i32 @expr_align(%union.tree_node* nocapture readonly %t) #3 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %sw.bb3, %entry
  %t.tr = phi %union.tree_node* [ %t, %entry ], [ %4, %sw.bb3 ]
  %code = getelementptr inbounds %union.tree_node* %t.tr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.epilog [
    i32 115, label %sw.bb
    i32 114, label %sw.bb
    i32 116, label %sw.bb
    i32 118, label %sw.bb3
    i32 47, label %sw.bb3
    i32 48, label %sw.bb3
    i32 49, label %sw.bb3
    i32 50, label %sw.bb3
    i32 55, label %sw.bb3
    i32 58, label %sw.bb3
    i32 56, label %sw.bb3
    i32 119, label %sw.bb3
    i32 51, label %sw.bb8
    i32 31, label %sw.bb22
    i32 32, label %sw.bb22
    i32 34, label %sw.bb22
    i32 35, label %sw.bb22
    i32 36, label %sw.bb22
    i32 30, label %return
  ]

sw.bb:                                            ; preds = %tailrecurse, %tailrecurse, %tailrecurse
  %operands = getelementptr inbounds %union.tree_node* %t.tr, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %call = tail call i32 @expr_align(%union.tree_node* %0)
  %type = getelementptr inbounds %union.tree_node* %t.tr, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !15
  %align = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 7
  %2 = bitcast %union.tree_node** %align to i32*
  %3 = load i32* %2, align 4, !tbaa !18
  %cmp = icmp ugt i32 %call, %3
  %cond = select i1 %cmp, i32 %call, i32 %3
  ret i32 %cond

sw.bb3:                                           ; preds = %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse
  %operands5 = getelementptr inbounds %union.tree_node* %t.tr, i64 0, i32 0, i32 2
  %arrayidx6 = bitcast i32* %operands5 to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx6, align 8, !tbaa !10
  br label %tailrecurse

sw.bb8:                                           ; preds = %tailrecurse
  %operands10 = getelementptr inbounds %union.tree_node* %t.tr, i64 0, i32 0, i32 2
  %arrayidx11 = getelementptr inbounds i32* %operands10, i64 2
  %5 = bitcast i32* %arrayidx11 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !10
  %call12 = tail call i32 @expr_align(%union.tree_node* %6)
  %arrayidx15 = getelementptr inbounds i32* %operands10, i64 4
  %7 = bitcast i32* %arrayidx15 to %union.tree_node**
  %8 = load %union.tree_node** %7, align 8, !tbaa !10
  %call16 = tail call i32 @expr_align(%union.tree_node* %8)
  %cmp17 = icmp ult i32 %call12, %call16
  %cond21 = select i1 %cmp17, i32 %call12, i32 %call16
  ret i32 %cond21

sw.bb22:                                          ; preds = %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse
  %u1 = getelementptr inbounds %union.tree_node* %t.tr, i64 0, i32 0, i32 6
  %9 = bitcast %union.anon* %u1 to i32*
  %bf.load23 = load i32* %9, align 4
  %bf.clear24 = and i32 %bf.load23, 16777215
  %cmp25 = icmp eq i32 %bf.clear24, 0
  br i1 %cmp25, label %sw.epilog, label %return

sw.epilog:                                        ; preds = %tailrecurse, %sw.bb22
  %type33 = getelementptr inbounds %union.tree_node* %t.tr, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type33, align 8, !tbaa !15
  %align35 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 7
  %11 = bitcast %union.tree_node** %align35 to i32*
  %12 = load i32* %11, align 4, !tbaa !18
  br label %return

return:                                           ; preds = %tailrecurse, %sw.bb22, %sw.epilog
  %retval.0 = phi i32 [ %12, %sw.epilog ], [ %bf.clear24, %sw.bb22 ], [ 16, %tailrecurse ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @array_type_nelts(%union.tree_node* nocapture readonly %type) #0 {
entry:
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %0 = load i8** %values, align 8
  %tobool = icmp eq i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %return

if.end:                                           ; preds = %entry
  %minval = getelementptr inbounds i8* %0, i64 104
  %2 = bitcast i8* %minval to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !24
  %maxval = getelementptr inbounds i8* %0, i64 112
  %4 = bitcast i8* %maxval to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !19
  %call = tail call i32 @integer_zerop(%union.tree_node* %3)
  %tobool6 = icmp eq i32 %call, 0
  br i1 %tobool6, label %cond.false, label %return

cond.false:                                       ; preds = %if.end
  %type7 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type7, align 8, !tbaa !15
  %call8 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %6, %union.tree_node* %5, %union.tree_node* %3)
  %call9 = tail call %union.tree_node* @fold(%union.tree_node* %call8) #4
  br label %return

return:                                           ; preds = %cond.false, %if.end, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ %call9, %cond.false ], [ %5, %if.end ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @fold(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @build(i32 %code, %union.tree_node* %tt, ...) #0 {
entry:
  %p = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %p to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %call = call %union.tree_node* @make_node(i32 %code)
  %idxprom = sext i32 %code to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !38
  %type = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %tt, %union.tree_node** %type, align 8, !tbaa !15
  switch i32 %code, label %sw.default.i [
    i32 118, label %first_rtl_op.exit
    i32 136, label %sw.bb1.i
    i32 120, label %sw.bb1.i
    i32 55, label %first_rtl_op.exit
    i32 54, label %sw.bb3.i
  ]

sw.bb1.i:                                         ; preds = %entry, %entry
  br label %first_rtl_op.exit

sw.bb3.i:                                         ; preds = %entry
  br label %first_rtl_op.exit

sw.default.i:                                     ; preds = %entry
  br label %first_rtl_op.exit

first_rtl_op.exit:                                ; preds = %entry, %entry, %sw.bb1.i, %sw.bb3.i, %sw.default.i
  %retval.0.i = phi i32 [ %0, %sw.default.i ], [ 3, %sw.bb3.i ], [ 0, %sw.bb1.i ], [ 2, %entry ], [ 2, %entry ]
  %arrayidx4 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom
  %1 = load i8* %arrayidx4, align 1, !tbaa !37
  %switch.tableidx = add i8 %1, -49
  %2 = icmp ult i8 %switch.tableidx, 51
  br i1 %2, label %switch.lookup, label %lor.end

switch.lookup:                                    ; preds = %first_rtl_op.exit
  %switch.cast = zext i8 %switch.tableidx to i51
  %switch.downshift = lshr i51 -1125899906840573, %switch.cast
  %switch.masked = trunc i51 %switch.downshift to i32
  %phitmp = and i32 %switch.masked, 1
  br label %lor.end

lor.end:                                          ; preds = %first_rtl_op.exit, %switch.lookup
  %3 = phi i32 [ %phitmp, %switch.lookup ], [ 0, %first_rtl_op.exit ]
  switch i32 %0, label %for.cond.preheader [
    i32 2, label %if.then
    i32 1, label %if.then116
  ]

for.cond.preheader:                               ; preds = %lor.end
  %cmp141234 = icmp sgt i32 %0, 0
  br i1 %cmp141234, label %for.body.lr.ph, label %if.end187

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %gp_offset_p144 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %operands157 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %5 = bitcast i32* %operands157 to [1 x %union.tree_node*]*
  %side_effects_flag172 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %overflow_arg_area_p150 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  br label %for.body

if.then:                                          ; preds = %lor.end
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %gp_offset = load i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.end, label %vaarg.end.thread

vaarg.end.thread:                                 ; preds = %if.then
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  %vaarg.addr246 = bitcast i8* %overflow_arg_area to %union.tree_node**
  %6 = load %union.tree_node** %vaarg.addr246, align 8
  br label %vaarg.in_mem31

vaarg.end:                                        ; preds = %if.then
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %reg_save_area = load i8** %7, align 16
  %8 = sext i32 %gp_offset to i64
  %9 = getelementptr i8* %reg_save_area, i64 %8
  %10 = add i32 %gp_offset, 8
  store i32 %10, i32* %gp_offset_p, align 16
  %vaarg.addr = bitcast i8* %9 to %union.tree_node**
  %11 = load %union.tree_node** %vaarg.addr, align 8
  %fits_in_gp28 = icmp ult i32 %10, 41
  br i1 %fits_in_gp28, label %vaarg.in_reg29, label %vaarg.in_mem31

vaarg.in_reg29:                                   ; preds = %vaarg.end
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %reg_save_area30 = load i8** %12, align 16
  %13 = sext i32 %10 to i64
  %14 = getelementptr i8* %reg_save_area30, i64 %13
  %15 = add i32 %gp_offset, 16
  store i32 %15, i32* %gp_offset_p, align 16
  br label %vaarg.end35

vaarg.in_mem31:                                   ; preds = %vaarg.end.thread, %vaarg.end
  %16 = phi %union.tree_node* [ %6, %vaarg.end.thread ], [ %11, %vaarg.end ]
  %overflow_arg_area_p32 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %overflow_arg_area33 = load i8** %overflow_arg_area_p32, align 8
  %overflow_arg_area.next34 = getelementptr i8* %overflow_arg_area33, i64 8
  store i8* %overflow_arg_area.next34, i8** %overflow_arg_area_p32, align 8
  br label %vaarg.end35

vaarg.end35:                                      ; preds = %vaarg.in_mem31, %vaarg.in_reg29
  %17 = phi %union.tree_node* [ %11, %vaarg.in_reg29 ], [ %16, %vaarg.in_mem31 ]
  %vaarg.addr36.in = phi i8* [ %14, %vaarg.in_reg29 ], [ %overflow_arg_area33, %vaarg.in_mem31 ]
  %vaarg.addr36 = bitcast i8* %vaarg.addr36.in to %union.tree_node**
  %18 = load %union.tree_node** %vaarg.addr36, align 8
  %operands = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx37 = bitcast i32* %operands to %union.tree_node**
  store %union.tree_node* %17, %union.tree_node** %arrayidx37, align 8, !tbaa !10
  %arrayidx40 = getelementptr inbounds i32* %operands, i64 2
  %19 = bitcast i32* %arrayidx40 to %union.tree_node**
  store %union.tree_node* %18, %union.tree_node** %19, align 8, !tbaa !10
  %readonly_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %readonly_flag, align 8
  %bf.set = or i32 %bf.load, 4096
  store i32 %bf.set, i32* %readonly_flag, align 8
  %tobool = icmp ne %union.tree_node* %17, null
  %cmp42 = icmp sgt i32 %retval.0.i, 0
  %or.cond = and i1 %tobool, %cmp42
  br i1 %or.cond, label %if.then44, label %if.end74

if.then44:                                        ; preds = %vaarg.end35
  %side_effects_flag = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 2
  %bf.load46 = load i32* %side_effects_flag, align 8
  %bf.clear47 = and i32 %bf.load46, 256
  %tobool48 = icmp eq i32 %bf.clear47, 0
  br i1 %tobool48, label %if.end, label %if.then49

if.then49:                                        ; preds = %if.then44
  %bf.set54 = or i32 %bf.load, 4352
  store i32 %bf.set54, i32* %readonly_flag, align 8
  %bf.load57.pre = load i32* %side_effects_flag, align 8
  br label %if.end

if.end:                                           ; preds = %if.then44, %if.then49
  %bf.load64 = phi i32 [ %bf.set, %if.then44 ], [ %bf.set54, %if.then49 ]
  %bf.load57 = phi i32 [ %bf.load46, %if.then44 ], [ %bf.load57.pre, %if.then49 ]
  %bf.clear59 = and i32 %bf.load57, 4096
  %tobool60 = icmp eq i32 %bf.clear59, 0
  br i1 %tobool60, label %if.then61, label %if.end66

if.then61:                                        ; preds = %if.end
  %bf.clear65 = and i32 %bf.load64, -4097
  store i32 %bf.clear65, i32* %readonly_flag, align 8
  %bf.load68.pre = load i32* %side_effects_flag, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.end, %if.then61
  %bf.load102243 = phi i32 [ %bf.load64, %if.end ], [ %bf.clear65, %if.then61 ]
  %bf.load68 = phi i32 [ %bf.load57, %if.end ], [ %bf.load68.pre, %if.then61 ]
  %bf.clear70 = and i32 %bf.load68, 512
  %tobool71 = icmp eq i32 %bf.clear70, 0
  %.lor.ext = select i1 %tobool71, i32 0, i32 %3
  br label %if.end74

if.end74:                                         ; preds = %if.end66, %vaarg.end35
  %bf.load89 = phi i32 [ %bf.set, %vaarg.end35 ], [ %bf.load102243, %if.end66 ]
  %constant.0 = phi i32 [ %3, %vaarg.end35 ], [ %.lor.ext, %if.end66 ]
  %tobool75 = icmp ne %union.tree_node* %18, null
  %cmp77 = icmp sgt i32 %retval.0.i, 1
  %or.cond195 = and i1 %tobool75, %cmp77
  br i1 %or.cond195, label %if.then79, label %if.end187

if.then79:                                        ; preds = %if.end74
  %side_effects_flag81 = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 2
  %bf.load82 = load i32* %side_effects_flag81, align 8
  %bf.clear84 = and i32 %bf.load82, 256
  %tobool85 = icmp eq i32 %bf.clear84, 0
  br i1 %tobool85, label %if.end92, label %if.then86

if.then86:                                        ; preds = %if.then79
  %bf.set91 = or i32 %bf.load89, 256
  store i32 %bf.set91, i32* %readonly_flag, align 8
  %bf.load95.pre = load i32* %side_effects_flag81, align 8
  br label %if.end92

if.end92:                                         ; preds = %if.then79, %if.then86
  %bf.load102 = phi i32 [ %bf.load89, %if.then79 ], [ %bf.set91, %if.then86 ]
  %bf.load95 = phi i32 [ %bf.load82, %if.then79 ], [ %bf.load95.pre, %if.then86 ]
  %bf.clear97 = and i32 %bf.load95, 4096
  %tobool98 = icmp eq i32 %bf.clear97, 0
  br i1 %tobool98, label %if.then99, label %if.end104

if.then99:                                        ; preds = %if.end92
  %bf.clear103 = and i32 %bf.load102, -4097
  store i32 %bf.clear103, i32* %readonly_flag, align 8
  %bf.load107.pre = load i32* %side_effects_flag81, align 8
  br label %if.end104

if.end104:                                        ; preds = %if.end92, %if.then99
  %bf.load107 = phi i32 [ %bf.load95, %if.end92 ], [ %bf.load107.pre, %if.then99 ]
  %bf.clear109 = and i32 %bf.load107, 512
  %tobool110 = icmp eq i32 %bf.clear109, 0
  %.constant.0 = select i1 %tobool110, i32 0, i32 %constant.0
  br label %if.end187

if.then116:                                       ; preds = %lor.end
  %gp_offset_p119 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %gp_offset120 = load i32* %gp_offset_p119, align 16
  %fits_in_gp121 = icmp ult i32 %gp_offset120, 41
  br i1 %fits_in_gp121, label %vaarg.in_reg122, label %vaarg.in_mem124

vaarg.in_reg122:                                  ; preds = %if.then116
  %20 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %reg_save_area123 = load i8** %20, align 16
  %21 = sext i32 %gp_offset120 to i64
  %22 = getelementptr i8* %reg_save_area123, i64 %21
  %23 = add i32 %gp_offset120, 8
  store i32 %23, i32* %gp_offset_p119, align 16
  br label %vaarg.end128

vaarg.in_mem124:                                  ; preds = %if.then116
  %overflow_arg_area_p125 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %overflow_arg_area126 = load i8** %overflow_arg_area_p125, align 8
  %overflow_arg_area.next127 = getelementptr i8* %overflow_arg_area126, i64 8
  store i8* %overflow_arg_area.next127, i8** %overflow_arg_area_p125, align 8
  br label %vaarg.end128

vaarg.end128:                                     ; preds = %vaarg.in_mem124, %vaarg.in_reg122
  %vaarg.addr129.in = phi i8* [ %22, %vaarg.in_reg122 ], [ %overflow_arg_area126, %vaarg.in_mem124 ]
  %cmp133 = icmp eq i8 %1, 115
  br i1 %cmp133, label %if.end136, label %if.then135

if.then135:                                       ; preds = %vaarg.end128
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2451, i8* getelementptr inbounds ([6 x i8]* @__FUNCTION__.build, i64 0, i64 0)) #8
  unreachable

if.end136:                                        ; preds = %vaarg.end128
  %vaarg.addr129 = bitcast i8* %vaarg.addr129.in to %union.tree_node**
  %24 = load %union.tree_node** %vaarg.addr129, align 8
  %operands138 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx139 = bitcast i32* %operands138 to %union.tree_node**
  store %union.tree_node* %24, %union.tree_node** %arrayidx139, align 8, !tbaa !10
  br label %if.end187

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %constant.1235 = phi i32 [ %3, %for.body.lr.ph ], [ %constant.2, %for.inc ]
  %gp_offset145 = load i32* %gp_offset_p144, align 16
  %fits_in_gp146 = icmp ult i32 %gp_offset145, 41
  br i1 %fits_in_gp146, label %vaarg.in_reg147, label %vaarg.in_mem149

vaarg.in_reg147:                                  ; preds = %for.body
  %reg_save_area148 = load i8** %4, align 16
  %25 = sext i32 %gp_offset145 to i64
  %26 = getelementptr i8* %reg_save_area148, i64 %25
  %27 = add i32 %gp_offset145, 8
  store i32 %27, i32* %gp_offset_p144, align 16
  br label %vaarg.end153

vaarg.in_mem149:                                  ; preds = %for.body
  %overflow_arg_area151 = load i8** %overflow_arg_area_p150, align 8
  %overflow_arg_area.next152 = getelementptr i8* %overflow_arg_area151, i64 8
  store i8* %overflow_arg_area.next152, i8** %overflow_arg_area_p150, align 8
  br label %vaarg.end153

vaarg.end153:                                     ; preds = %vaarg.in_mem149, %vaarg.in_reg147
  %vaarg.addr154.in = phi i8* [ %26, %vaarg.in_reg147 ], [ %overflow_arg_area151, %vaarg.in_mem149 ]
  %vaarg.addr154 = bitcast i8* %vaarg.addr154.in to %union.tree_node**
  %28 = load %union.tree_node** %vaarg.addr154, align 8
  %arrayidx158 = getelementptr inbounds [1 x %union.tree_node*]* %5, i64 0, i64 %indvars.iv
  store %union.tree_node* %28, %union.tree_node** %arrayidx158, align 8, !tbaa !10
  %tobool159 = icmp ne %union.tree_node* %28, null
  %29 = trunc i64 %indvars.iv to i32
  %cmp161 = icmp sgt i32 %retval.0.i, %29
  %or.cond233 = and i1 %tobool159, %cmp161
  br i1 %or.cond233, label %if.then163, label %for.inc

if.then163:                                       ; preds = %vaarg.end153
  %side_effects_flag165 = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 0, i32 2
  %bf.load166 = load i32* %side_effects_flag165, align 8
  %bf.clear168 = and i32 %bf.load166, 256
  %tobool169 = icmp eq i32 %bf.clear168, 0
  br i1 %tobool169, label %if.end176, label %if.then170

if.then170:                                       ; preds = %if.then163
  %bf.load173 = load i32* %side_effects_flag172, align 8
  %bf.set175 = or i32 %bf.load173, 256
  store i32 %bf.set175, i32* %side_effects_flag172, align 8
  %bf.load179.pre = load i32* %side_effects_flag165, align 8
  br label %if.end176

if.end176:                                        ; preds = %if.then163, %if.then170
  %bf.load179 = phi i32 [ %bf.load166, %if.then163 ], [ %bf.load179.pre, %if.then170 ]
  %bf.clear181 = and i32 %bf.load179, 512
  %tobool182 = icmp eq i32 %bf.clear181, 0
  %.constant.1 = select i1 %tobool182, i32 0, i32 %constant.1235
  br label %for.inc

for.inc:                                          ; preds = %if.end176, %vaarg.end153
  %constant.2 = phi i32 [ %constant.1235, %vaarg.end153 ], [ %.constant.1, %if.end176 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %0
  br i1 %exitcond, label %if.end187, label %for.body

if.end187:                                        ; preds = %for.inc, %for.cond.preheader, %if.end104, %if.end136, %if.end74
  %constant.3 = phi i32 [ %constant.0, %if.end74 ], [ %3, %if.end136 ], [ %.constant.0, %if.end104 ], [ %3, %for.cond.preheader ], [ %constant.2, %for.inc ]
  call void @llvm.va_end(i8* %arraydecay1)
  %constant_flag191 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load192 = load i32* %constant_flag191, align 8
  %bf.value = shl i32 %constant.3, 9
  %bf.shl = and i32 %bf.value, 512
  %bf.clear193 = and i32 %bf.load192, -513
  %bf.set194 = or i32 %bf.clear193, %bf.shl
  store i32 %bf.set194, i32* %constant_flag191, align 8
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define i32 @staticp(%union.tree_node* %arg) #0 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %if.then, %entry
  %arg.tr = phi %union.tree_node* [ %arg, %entry ], [ %25, %if.then ]
  %code = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 30, label %land.lhs.true.i
    i32 34, label %sw.bb9
    i32 46, label %sw.bb33
    i32 31, label %return
    i32 29, label %return
    i32 39, label %sw.bb40
    i32 40, label %return.loopexit138
    i32 43, label %sw.bb56
    i32 44, label %sw.bb56
  ]

land.lhs.true.i:                                  ; preds = %tailrecurse
  %vindex.i = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 22
  %0 = load %union.tree_node** %vindex.i, align 8, !tbaa !74
  %tobool.i = icmp eq %union.tree_node* %0, null
  br i1 %tobool.i, label %if.else19.i, label %if.then13.i

if.then13.i:                                      ; preds = %land.lhs.true.i
  %type.i = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type.i, align 8, !tbaa !15
  %values.i = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 1
  %2 = load i8** %values.i, align 8
  %value.i = getelementptr inbounds i8* %2, i64 32
  %3 = bitcast i8* %value.i to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !25
  %type17.i = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 1
  %5 = load %union.tree_node** %type17.i, align 8, !tbaa !15
  %6 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 15
  br label %while.cond.preheader.i

if.else19.i:                                      ; preds = %land.lhs.true.i
  %context21.i = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 9
  br label %while.cond.preheader.i

while.cond.preheader.i:                           ; preds = %if.else19.i, %if.then13.i
  %context.0.in.ph.i = phi %union.tree_node** [ %context21.i, %if.else19.i ], [ %6, %if.then13.i ]
  %context.046.i = load %union.tree_node** %context.0.in.ph.i, align 8
  %tobool2447.i = icmp eq %union.tree_node* %context.046.i, null
  br i1 %tobool2447.i, label %land.rhs, label %land.rhs.i

land.rhs.i:                                       ; preds = %while.cond.preheader.i, %while.cond.backedge.i
  %context.048.i = phi %union.tree_node* [ %context.0.i, %while.cond.backedge.i ], [ %context.046.i, %while.cond.preheader.i ]
  %code26.i = getelementptr inbounds %union.tree_node* %context.048.i, i64 0, i32 0, i32 0, i32 2
  %bf.load27.i = load i32* %code26.i, align 8
  %bf.clear28.i = and i32 %bf.load27.i, 255
  switch i32 %bf.clear28.i, label %if.else36.i [
    i32 30, label %lor.lhs.false
    i32 4, label %if.then35.i
  ]

if.then35.i:                                      ; preds = %land.rhs.i
  %supercontext.i = getelementptr inbounds %union.tree_node* %context.048.i, i64 0, i32 0, i32 5
  %7 = bitcast i48* %supercontext.i to %union.tree_node**
  br label %while.cond.backedge.i

while.cond.backedge.i:                            ; preds = %cond.false.i.i, %cond.true.i.i, %if.then35.i
  %context.0.in.be.i = phi %union.tree_node** [ %7, %if.then35.i ], [ %9, %cond.true.i.i ], [ %context2.i.i, %cond.false.i.i ]
  %context.0.i = load %union.tree_node** %context.0.in.be.i, align 8
  %tobool24.i = icmp eq %union.tree_node* %context.0.i, null
  br i1 %tobool24.i, label %land.rhs, label %land.rhs.i

if.else36.i:                                      ; preds = %land.rhs.i
  %idxprom4.i.i = zext i32 %bf.clear28.i to i64
  %arrayidx.i.i = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom4.i.i
  %8 = load i8* %arrayidx.i.i, align 1, !tbaa !37
  %cmp.i.i = icmp eq i8 %8, 116
  br i1 %cmp.i.i, label %cond.true.i.i, label %cond.false.i.i

cond.true.i.i:                                    ; preds = %if.else36.i
  %context.i.i = getelementptr inbounds %union.tree_node* %context.048.i, i64 0, i32 0, i32 17
  %9 = bitcast %struct.rtx_def** %context.i.i to %union.tree_node**
  br label %while.cond.backedge.i

cond.false.i.i:                                   ; preds = %if.else36.i
  %context2.i.i = getelementptr inbounds %union.tree_node* %context.048.i, i64 0, i32 0, i32 9
  br label %while.cond.backedge.i

lor.lhs.false:                                    ; preds = %land.rhs.i
  %regdecl_flag = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 5
  %10 = bitcast i48* %regdecl_flag to i64*
  %bf.load1 = load i64* %10, align 8
  %bf.cast = and i64 %bf.load1, 1024
  %tobool = icmp eq i64 %bf.cast, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond.backedge.i, %while.cond.preheader.i, %lor.lhs.false
  %non_addr_const_p = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 5
  %11 = bitcast i48* %non_addr_const_p to i64*
  %bf.load4 = load i64* %11, align 8
  %bf.cast7 = and i64 %bf.load4, 16777216
  %lnot = icmp eq i64 %bf.cast7, 0
  br label %land.end

land.end:                                         ; preds = %lor.lhs.false, %land.rhs
  %12 = phi i1 [ false, %lor.lhs.false ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %12 to i32
  br label %return

sw.bb9:                                           ; preds = %tailrecurse
  %bf.clear13 = and i32 %bf.load, 262144
  %tobool14 = icmp eq i32 %bf.clear13, 0
  %external_flag = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 5
  %13 = bitcast i48* %external_flag to i64*
  %bf.load17 = load i64* %13, align 8
  %bf.cast20 = and i64 %bf.load17, 256
  %tobool21 = icmp eq i64 %bf.cast20, 0
  %or.cond = and i1 %tobool14, %tobool21
  br i1 %or.cond, label %land.end31, label %land.rhs22

land.rhs22:                                       ; preds = %sw.bb9
  %bf.cast28 = and i64 %bf.load17, 16777216
  %lnot30 = icmp eq i64 %bf.cast28, 0
  br label %land.end31

land.end31:                                       ; preds = %sw.bb9, %land.rhs22
  %14 = phi i1 [ %lnot30, %land.rhs22 ], [ false, %sw.bb9 ]
  %land.ext32 = zext i1 %14 to i32
  br label %return

sw.bb33:                                          ; preds = %tailrecurse
  %bf.lshr37 = lshr i32 %bf.load, 18
  %bf.clear38 = and i32 %bf.lshr37, 1
  br label %return

sw.bb40:                                          ; preds = %tailrecurse
  %operands = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %15 = bitcast i32* %arrayidx to %union.tree_node**
  %16 = load %union.tree_node** %15, align 8, !tbaa !10
  %bit_field_flag = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 5
  %17 = bitcast i48* %bit_field_flag to i64*
  %bf.load42 = load i64* %17, align 8
  %bf.cast45 = and i64 %bf.load42, 4096
  %tobool46 = icmp eq i64 %bf.cast45, 0
  br i1 %tobool46, label %land.rhs47, label %land.end53

land.rhs47:                                       ; preds = %sw.bb40
  %arrayidx50 = bitcast i32* %operands to %union.tree_node**
  %18 = load %union.tree_node** %arrayidx50, align 8, !tbaa !10
  %call51 = tail call i32 @staticp(%union.tree_node* %18)
  %tobool52 = icmp ne i32 %call51, 0
  br label %land.end53

land.end53:                                       ; preds = %sw.bb40, %land.rhs47
  %19 = phi i1 [ false, %sw.bb40 ], [ %tobool52, %land.rhs47 ]
  %land.ext54 = zext i1 %19 to i32
  br label %return

sw.bb56:                                          ; preds = %tailrecurse, %tailrecurse
  %type = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type, align 8, !tbaa !15
  %size = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 2
  %21 = bitcast i32* %size to %union.tree_node**
  %22 = load %union.tree_node** %21, align 8, !tbaa !67
  %code60 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load61 = load i32* %code60, align 8
  %bf.clear62 = and i32 %bf.load61, 255
  %cmp63 = icmp eq i32 %bf.clear62, 25
  br i1 %cmp63, label %land.lhs.true, label %sw.default

land.lhs.true:                                    ; preds = %sw.bb56
  %operands65 = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 2
  %arrayidx66 = getelementptr inbounds i32* %operands65, i64 2
  %23 = bitcast i32* %arrayidx66 to %union.tree_node**
  %24 = load %union.tree_node** %23, align 8, !tbaa !10
  %code68 = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load69 = load i32* %code68, align 8
  %bf.clear70 = and i32 %bf.load69, 255
  %cmp71 = icmp eq i32 %bf.clear70, 25
  br i1 %cmp71, label %if.then, label %sw.default

if.then:                                          ; preds = %land.lhs.true
  %arrayidx74 = bitcast i32* %operands65 to %union.tree_node**
  %25 = load %union.tree_node** %arrayidx74, align 8, !tbaa !10
  br label %tailrecurse

sw.default:                                       ; preds = %sw.bb56, %land.lhs.true, %tailrecurse
  %cmp80 = icmp ugt i32 %bf.clear, 146
  br i1 %cmp80, label %if.then81, label %return

if.then81:                                        ; preds = %sw.default
  %26 = load i32 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 11), align 8, !tbaa !75
  %call82 = tail call i32 %26(%union.tree_node* %arg.tr) #4
  br label %return

return.loopexit138:                               ; preds = %tailrecurse
  br label %return

return:                                           ; preds = %tailrecurse, %tailrecurse, %return.loopexit138, %sw.default, %if.then81, %land.end53, %sw.bb33, %land.end31, %land.end
  %retval.0 = phi i32 [ %call82, %if.then81 ], [ %land.ext54, %land.end53 ], [ %bf.clear38, %sw.bb33 ], [ %land.ext32, %land.end31 ], [ %land.ext, %land.end ], [ 0, %sw.default ], [ 0, %return.loopexit138 ], [ 1, %tailrecurse ], [ 1, %tailrecurse ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @decl_function_context(%union.tree_node* nocapture readonly %decl) #3 {
entry:
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else19 [
    i32 0, label %return
    i32 118, label %if.then6
    i32 30, label %land.lhs.true
  ]

if.then6:                                         ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %0 = bitcast i32* %arrayidx to %union.tree_node**
  br label %while.cond.preheader

land.lhs.true:                                    ; preds = %entry
  %vindex = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 22
  %1 = load %union.tree_node** %vindex, align 8, !tbaa !74
  %tobool = icmp eq %union.tree_node* %1, null
  br i1 %tobool, label %if.else19, label %if.then13

if.then13:                                        ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %values = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 1
  %3 = load i8** %values, align 8
  %value = getelementptr inbounds i8* %3, i64 32
  %4 = bitcast i8* %value to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !25
  %type17 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type17, align 8, !tbaa !15
  %7 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 15
  br label %while.cond.preheader

if.else19:                                        ; preds = %entry, %land.lhs.true
  %context21 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 9
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then13, %if.else19, %if.then6
  %context.0.in.ph = phi %union.tree_node** [ %0, %if.then6 ], [ %context21, %if.else19 ], [ %7, %if.then13 ]
  %context.046 = load %union.tree_node** %context.0.in.ph, align 8
  %tobool2447 = icmp eq %union.tree_node* %context.046, null
  br i1 %tobool2447, label %return, label %land.rhs

land.rhs:                                         ; preds = %while.cond.preheader, %while.cond.backedge
  %context.048 = phi %union.tree_node* [ %context.0, %while.cond.backedge ], [ %context.046, %while.cond.preheader ]
  %code26 = getelementptr inbounds %union.tree_node* %context.048, i64 0, i32 0, i32 0, i32 2
  %bf.load27 = load i32* %code26, align 8
  %bf.clear28 = and i32 %bf.load27, 255
  switch i32 %bf.clear28, label %if.else36 [
    i32 30, label %return
    i32 4, label %if.then35
  ]

if.then35:                                        ; preds = %land.rhs
  %supercontext = getelementptr inbounds %union.tree_node* %context.048, i64 0, i32 0, i32 5
  %8 = bitcast i48* %supercontext to %union.tree_node**
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then35, %cond.true.i, %cond.false.i
  %context.0.in.be = phi %union.tree_node** [ %8, %if.then35 ], [ %10, %cond.true.i ], [ %context2.i, %cond.false.i ]
  %context.0 = load %union.tree_node** %context.0.in.be, align 8
  %tobool24 = icmp eq %union.tree_node* %context.0, null
  br i1 %tobool24, label %return, label %land.rhs

if.else36:                                        ; preds = %land.rhs
  %idxprom4.i = zext i32 %bf.clear28 to i64
  %arrayidx.i = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom4.i
  %9 = load i8* %arrayidx.i, align 1, !tbaa !37
  %cmp.i = icmp eq i8 %9, 116
  br i1 %cmp.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.else36
  %context.i = getelementptr inbounds %union.tree_node* %context.048, i64 0, i32 0, i32 17
  %10 = bitcast %struct.rtx_def** %context.i to %union.tree_node**
  br label %while.cond.backedge

cond.false.i:                                     ; preds = %if.else36
  %context2.i = getelementptr inbounds %union.tree_node* %context.048, i64 0, i32 0, i32 9
  br label %while.cond.backedge

return:                                           ; preds = %while.cond.backedge, %land.rhs, %while.cond.preheader, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ null, %while.cond.preheader ], [ null, %while.cond.backedge ], [ %context.048, %land.rhs ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @save_expr(%union.tree_node* %expr) #0 {
entry:
  %call = tail call %union.tree_node* @fold(%union.tree_node* %expr) #4
  %code90 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load91 = load i32* %code90, align 8
  %bf.clear92 = and i32 %bf.load91, 255
  %cmp93 = icmp eq i32 %bf.clear92, 116
  br i1 %cmp93, label %while.body, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.body, %entry
  %t.0.lcssa = phi %union.tree_node* [ %call, %entry ], [ %0, %while.body ]
  br label %for.cond

while.body:                                       ; preds = %entry, %while.body
  %t.094 = phi %union.tree_node* [ %0, %while.body ], [ %call, %entry ]
  %operands = getelementptr inbounds %union.tree_node* %t.094, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 116
  br i1 %cmp, label %while.body, label %for.cond.preheader

for.cond:                                         ; preds = %for.cond.preheader, %for.inc
  %inner.0 = phi %union.tree_node* [ %4, %for.inc ], [ %t.0.lcssa, %for.cond.preheader ]
  %code2 = getelementptr inbounds %union.tree_node* %inner.0, i64 0, i32 0, i32 0, i32 2
  %bf.load3 = load i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %idxprom88 = zext i32 %bf.clear4 to i64
  %arrayidx5 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom88
  %1 = load i8* %arrayidx5, align 1, !tbaa !37
  switch i8 %1, label %for.end [
    i8 49, label %for.cond.for.inc_crit_edge
    i8 50, label %land.rhs
  ]

for.cond.for.inc_crit_edge:                       ; preds = %for.cond
  %operands24.pre = getelementptr inbounds %union.tree_node* %inner.0, i64 0, i32 0, i32 2
  br label %for.inc

land.rhs:                                         ; preds = %for.cond
  %operands18 = getelementptr inbounds %union.tree_node* %inner.0, i64 0, i32 0, i32 2
  %arrayidx19 = getelementptr inbounds i32* %operands18, i64 2
  %2 = bitcast i32* %arrayidx19 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !10
  %constant_flag = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load21 = load i32* %constant_flag, align 8
  %bf.clear22 = and i32 %bf.load21, 512
  %tobool = icmp eq i32 %bf.clear22, 0
  br i1 %tobool, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.cond.for.inc_crit_edge, %land.rhs
  %operands24.pre-phi = phi i32* [ %operands24.pre, %for.cond.for.inc_crit_edge ], [ %operands18, %land.rhs ]
  %arrayidx25 = bitcast i32* %operands24.pre-phi to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx25, align 8, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond, %land.rhs
  %bf.clear30 = and i32 %bf.load3, 512
  %tobool31 = icmp ne i32 %bf.clear30, 0
  %5 = and i32 %bf.load3, 4352
  %6 = icmp eq i32 %5, 4096
  %or.cond = or i1 %tobool31, %6
  br i1 %or.cond, label %return, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %for.end
  switch i32 %bf.clear4, label %if.end [
    i32 118, label %return
    i32 0, label %return
  ]

if.end:                                           ; preds = %lor.lhs.false42
  %call56 = tail call i32 @contains_placeholder_p(%union.tree_node* %t.0.lcssa)
  %tobool57 = icmp eq i32 %call56, 0
  br i1 %tobool57, label %if.end59, label %return

if.end59:                                         ; preds = %if.end
  %type = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type, align 8, !tbaa !15
  %8 = load %union.tree_node** @current_function_decl, align 8, !tbaa !10
  %call61 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 118, %union.tree_node* %7, %union.tree_node* %t.0.lcssa, %union.tree_node* %8, %union.tree_node* null)
  %side_effects_flag63 = getelementptr inbounds %union.tree_node* %call61, i64 0, i32 0, i32 0, i32 2
  %bf.load64 = load i32* %side_effects_flag63, align 8
  %bf.set70 = or i32 %bf.load64, 4352
  store i32 %bf.set70, i32* %side_effects_flag63, align 8
  br label %return

return:                                           ; preds = %for.end, %if.end, %lor.lhs.false42, %lor.lhs.false42, %if.end59
  %retval.0 = phi %union.tree_node* [ %call61, %if.end59 ], [ %t.0.lcssa, %lor.lhs.false42 ], [ %t.0.lcssa, %lor.lhs.false42 ], [ %t.0.lcssa, %for.end ], [ %t.0.lcssa, %if.end ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @contains_placeholder_p(%union.tree_node* %exp) #0 {
entry:
  %tobool156 = icmp eq %union.tree_node* %exp, null
  br i1 %tobool156, label %return, label %if.end

if.end:                                           ; preds = %entry, %tailrecurse.backedge
  %exp.tr157 = phi %union.tree_node* [ %exp.tr.be, %tailrecurse.backedge ], [ %exp, %entry ]
  %code1 = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end6 [
    i32 58, label %return
    i32 57, label %return.loopexit192
  ]

if.end6:                                          ; preds = %if.end
  %idxprom139 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom139
  %0 = load i8* %arrayidx, align 1, !tbaa !37
  %conv = sext i8 %0 to i32
  switch i32 %conv, label %return [
    i32 114, label %sw.bb
    i32 120, label %sw.bb9
    i32 49, label %sw.bb23
    i32 50, label %sw.bb23
    i32 60, label %sw.bb23
    i32 101, label %sw.bb23
  ]

sw.bb:                                            ; preds = %if.end6
  %operands = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 2
  br label %tailrecurse.backedge

tailrecurse.backedge:                             ; preds = %sw.bb, %sw.bb24, %sw.bb92
  %exp.tr.be.in.in = phi i32* [ %operands, %sw.bb ], [ %arrayidx27, %sw.bb24 ], [ %operands94, %sw.bb92 ]
  %exp.tr.be.in = bitcast i32* %exp.tr.be.in.in to %union.tree_node**
  %exp.tr.be = load %union.tree_node** %exp.tr.be.in, align 8
  %tobool = icmp eq %union.tree_node* %exp.tr.be, null
  br i1 %tobool, label %return, label %if.end

sw.bb9:                                           ; preds = %if.end6
  %cmp10 = icmp eq i32 %bf.clear, 2
  br i1 %cmp10, label %if.then12, label %return

if.then12:                                        ; preds = %sw.bb9
  %value = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !25
  %call13 = tail call i32 @contains_placeholder_p(%union.tree_node* %2)
  %tobool14 = icmp eq i32 %call13, 0
  br i1 %tobool14, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.then12
  %chain = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain, align 8, !tbaa !27
  %cmp16 = icmp eq %union.tree_node* %3, null
  br i1 %cmp16, label %lor.end, label %land.rhs

land.rhs:                                         ; preds = %lor.rhs
  %call20 = tail call i32 @contains_placeholder_p(%union.tree_node* %3)
  %tobool21 = icmp ne i32 %call20, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then12, %land.rhs
  %4 = phi i1 [ true, %if.then12 ], [ false, %lor.rhs ], [ %tobool21, %land.rhs ]
  %lor.ext = zext i1 %4 to i32
  br label %return

sw.bb23:                                          ; preds = %if.end6, %if.end6, %if.end6, %if.end6
  switch i32 %bf.clear, label %sw.epilog [
    i32 47, label %sw.bb24
    i32 120, label %return
    i32 46, label %return
    i32 51, label %sw.bb30
    i32 118, label %sw.bb49
    i32 53, label %sw.bb77
  ]

sw.bb24:                                          ; preds = %sw.bb23
  %operands26 = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 2
  %arrayidx27 = getelementptr inbounds i32* %operands26, i64 2
  br label %tailrecurse.backedge

sw.bb30:                                          ; preds = %sw.bb23
  %operands32 = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 2
  %arrayidx33 = bitcast i32* %operands32 to %union.tree_node**
  %5 = load %union.tree_node** %arrayidx33, align 8, !tbaa !10
  %call34 = tail call i32 @contains_placeholder_p(%union.tree_node* %5)
  %tobool35 = icmp eq i32 %call34, 0
  br i1 %tobool35, label %lor.lhs.false, label %lor.end47

lor.lhs.false:                                    ; preds = %sw.bb30
  %arrayidx38 = getelementptr inbounds i32* %operands32, i64 2
  %6 = bitcast i32* %arrayidx38 to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !10
  %call39 = tail call i32 @contains_placeholder_p(%union.tree_node* %7)
  %tobool40 = icmp eq i32 %call39, 0
  br i1 %tobool40, label %lor.rhs41, label %lor.end47

lor.rhs41:                                        ; preds = %lor.lhs.false
  %arrayidx44 = getelementptr inbounds i32* %operands32, i64 4
  %8 = bitcast i32* %arrayidx44 to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !10
  %call45 = tail call i32 @contains_placeholder_p(%union.tree_node* %9)
  %tobool46 = icmp ne i32 %call45, 0
  br label %lor.end47

lor.end47:                                        ; preds = %lor.lhs.false, %sw.bb30, %lor.rhs41
  %10 = phi i1 [ true, %lor.lhs.false ], [ true, %sw.bb30 ], [ %tobool46, %lor.rhs41 ]
  %lor.ext48 = zext i1 %10 to i32
  br label %return

sw.bb49:                                          ; preds = %sw.bb23
  %bf.clear52 = and i32 %bf.load, 8192
  %tobool53 = icmp eq i32 %bf.clear52, 0
  br i1 %tobool53, label %lor.lhs.false54, label %return

lor.lhs.false54:                                  ; preds = %sw.bb49
  %operands56 = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 2
  %arrayidx57 = getelementptr inbounds i32* %operands56, i64 4
  %11 = bitcast i32* %arrayidx57 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %11, align 8, !tbaa !10
  %cmp58 = icmp eq %struct.rtx_def* %12, null
  br i1 %cmp58, label %if.end61, label %return

if.end61:                                         ; preds = %lor.lhs.false54
  %bf.set = or i32 %bf.load, 8192
  store i32 %bf.set, i32* %code1, align 8
  %arrayidx68 = bitcast i32* %operands56 to %union.tree_node**
  %13 = load %union.tree_node** %arrayidx68, align 8, !tbaa !10
  %call69 = tail call i32 @contains_placeholder_p(%union.tree_node* %13)
  %tobool70 = icmp eq i32 %call69, 0
  br i1 %tobool70, label %return, label %if.then71

if.then71:                                        ; preds = %if.end61
  %bf.load74 = load i32* %code1, align 8
  %bf.clear75 = and i32 %bf.load74, -8193
  store i32 %bf.clear75, i32* %code1, align 8
  br label %return

sw.bb77:                                          ; preds = %sw.bb23
  %operands79 = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 2
  %arrayidx80 = getelementptr inbounds i32* %operands79, i64 2
  %14 = bitcast i32* %arrayidx80 to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !10
  %cmp81 = icmp eq %union.tree_node* %15, null
  br i1 %cmp81, label %land.end89, label %land.rhs83

land.rhs83:                                       ; preds = %sw.bb77
  %call87 = tail call i32 @contains_placeholder_p(%union.tree_node* %15)
  %tobool88 = icmp ne i32 %call87, 0
  br label %land.end89

land.end89:                                       ; preds = %sw.bb77, %land.rhs83
  %16 = phi i1 [ false, %sw.bb77 ], [ %tobool88, %land.rhs83 ]
  %land.ext = zext i1 %16 to i32
  br label %return

sw.epilog:                                        ; preds = %sw.bb23
  %arrayidx91 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom139
  %17 = load i32* %arrayidx91, align 4, !tbaa !38
  switch i32 %17, label %return [
    i32 1, label %sw.bb92
    i32 2, label %sw.bb97
  ]

sw.bb92:                                          ; preds = %sw.epilog
  %operands94 = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 2
  br label %tailrecurse.backedge

sw.bb97:                                          ; preds = %sw.epilog
  %operands99 = getelementptr inbounds %union.tree_node* %exp.tr157, i64 0, i32 0, i32 2
  %arrayidx100 = bitcast i32* %operands99 to %union.tree_node**
  %18 = load %union.tree_node** %arrayidx100, align 8, !tbaa !10
  %call101 = tail call i32 @contains_placeholder_p(%union.tree_node* %18)
  %tobool102 = icmp eq i32 %call101, 0
  br i1 %tobool102, label %lor.rhs103, label %lor.end109

lor.rhs103:                                       ; preds = %sw.bb97
  %arrayidx106 = getelementptr inbounds i32* %operands99, i64 2
  %19 = bitcast i32* %arrayidx106 to %union.tree_node**
  %20 = load %union.tree_node** %19, align 8, !tbaa !10
  %call107 = tail call i32 @contains_placeholder_p(%union.tree_node* %20)
  %tobool108 = icmp ne i32 %call107, 0
  br label %lor.end109

lor.end109:                                       ; preds = %sw.bb97, %lor.rhs103
  %21 = phi i1 [ true, %sw.bb97 ], [ %tobool108, %lor.rhs103 ]
  %lor.ext110 = zext i1 %21 to i32
  br label %return

return.loopexit192:                               ; preds = %if.end
  br label %return

return:                                           ; preds = %entry, %tailrecurse.backedge, %if.end, %sw.bb23, %sw.bb23, %sw.epilog, %if.end6, %return.loopexit192, %sw.bb9, %if.then71, %if.end61, %sw.bb49, %lor.lhs.false54, %lor.end109, %land.end89, %lor.end47, %lor.end
  %retval.0 = phi i32 [ %lor.ext110, %lor.end109 ], [ %land.ext, %land.end89 ], [ %lor.ext48, %lor.end47 ], [ %lor.ext, %lor.end ], [ 0, %lor.lhs.false54 ], [ 0, %sw.bb49 ], [ 0, %if.end61 ], [ %call69, %if.then71 ], [ 0, %sw.bb9 ], [ 1, %return.loopexit192 ], [ 0, %if.end6 ], [ 0, %sw.epilog ], [ 0, %sw.bb23 ], [ 0, %sw.bb23 ], [ 0, %if.end ], [ 0, %tailrecurse.backedge ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @unsave_expr(%union.tree_node* %expr) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 119
  br i1 %cmp, label %return, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %entry
  %type = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !15
  %call.i = tail call i8* @ggc_alloc(i64 40) #4
  %1 = bitcast i8* %call.i to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call.i, i8 0, i64 24, i32 1, i1 false) #4
  %code1.i = getelementptr inbounds i8* %call.i, i64 16
  %2 = bitcast i8* %code1.i to i32*
  store i32 119, i32* %2, align 8
  %type3.i = getelementptr inbounds i8* %call.i, i64 8
  %3 = bitcast i8* %type3.i to %union.tree_node**
  store %union.tree_node* %0, %union.tree_node** %3, align 8, !tbaa !15
  %complexity.i = getelementptr inbounds i8* %call.i, i64 24
  %4 = bitcast i8* %complexity.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !79
  %operands.i = getelementptr inbounds i8* %call.i, i64 32
  %arrayidx.i = bitcast i8* %operands.i to %union.tree_node**
  store %union.tree_node* %expr, %union.tree_node** %arrayidx.i, align 8, !tbaa !10
  %5 = load i32* getelementptr inbounds ([256 x i32]* @tree_code_length, i64 0, i64 119), align 4, !tbaa !38
  %cmp.i = icmp eq i32 %5, 0
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %land.lhs.true.i
  %bf.load8.i = load i32* %code, align 8
  %bf.clear9.i = and i32 %bf.load8.i, 256
  %bf.set15.i = or i32 %bf.clear9.i, 119
  store i32 %bf.set15.i, i32* %2, align 8
  %bf.load17.i = load i32* %code, align 8
  %bf.clear19.i = and i32 %bf.load17.i, 4096
  %bf.set26.i = or i32 %bf.set15.i, %bf.clear19.i
  store i32 %bf.set26.i, i32* %2, align 8
  %phitmp = or i32 %bf.set26.i, 512
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %land.lhs.true.i
  %bf.load714 = phi i32 [ 119, %land.lhs.true.i ], [ %bf.set26.i, %if.then.i ]
  %bf.load39.i = phi i32 [ 631, %land.lhs.true.i ], [ %phitmp, %if.then.i ]
  %6 = load i8* getelementptr inbounds ([256 x i8]* @tree_code_type, i64 0, i64 119), align 1, !tbaa !37
  %cmp43.i = icmp eq i8 %6, 49
  br i1 %cmp43.i, label %land.lhs.true47.i, label %build1.exit

land.lhs.true47.i:                                ; preds = %if.end.i
  %bf.load49.i = load i32* %code, align 8
  %bf.clear51.i = and i32 %bf.load49.i, 512
  %tobool52.i = icmp eq i32 %bf.clear51.i, 0
  br i1 %tobool52.i, label %build1.exit, label %if.then53.i

if.then53.i:                                      ; preds = %land.lhs.true47.i
  store i32 %bf.load39.i, i32* %2, align 8
  br label %build1.exit

build1.exit:                                      ; preds = %if.end.i, %land.lhs.true47.i, %if.then53.i
  %bf.load7 = phi i32 [ %bf.load714, %if.end.i ], [ %bf.load714, %land.lhs.true47.i ], [ %bf.load39.i, %if.then53.i ]
  %bf.load3 = load i32* %code, align 8
  %bf.clear4 = and i32 %bf.load3, 256
  %bf.clear8 = and i32 %bf.load7, -257
  %bf.set = or i32 %bf.clear8, %bf.clear4
  store i32 %bf.set, i32* %2, align 8
  br label %return

return:                                           ; preds = %entry, %build1.exit
  %retval.0 = phi %union.tree_node* [ %1, %build1.exit ], [ %expr, %entry ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build1(i32 %code, %union.tree_node* %type, %union.tree_node* %node) #0 {
entry:
  %call = tail call i8* @ggc_alloc(i64 40) #4
  %0 = bitcast i8* %call to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call, i8 0, i64 24, i32 1, i1 false)
  %code1 = getelementptr inbounds i8* %call, i64 16
  %1 = bitcast i8* %code1 to i32*
  %bf.value = and i32 %code, 255
  store i32 %bf.value, i32* %1, align 8
  %type3 = getelementptr inbounds i8* %call, i64 8
  %2 = bitcast i8* %type3 to %union.tree_node**
  store %union.tree_node* %type, %union.tree_node** %2, align 8, !tbaa !15
  %complexity = getelementptr inbounds i8* %call, i64 24
  %3 = bitcast i8* %complexity to i32*
  store i32 0, i32* %3, align 4, !tbaa !79
  %operands = getelementptr inbounds i8* %call, i64 32
  %arrayidx = bitcast i8* %operands to %union.tree_node**
  store %union.tree_node* %node, %union.tree_node** %arrayidx, align 8, !tbaa !10
  %tobool = icmp ne %union.tree_node* %node, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  switch i32 %code, label %first_rtl_op.exit [
    i32 118, label %if.then
    i32 54, label %if.then
    i32 55, label %if.then
    i32 120, label %sw.bb
    i32 136, label %sw.default
  ]

first_rtl_op.exit:                                ; preds = %land.lhs.true
  %idxprom.i = sext i32 %code to i64
  %arrayidx.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom.i
  %4 = load i32* %arrayidx.i, align 4, !tbaa !38
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %land.lhs.true, %land.lhs.true, %first_rtl_op.exit
  %side_effects_flag = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %side_effects_flag, align 8
  %bf.clear9 = and i32 %bf.load8, 256
  %bf.set15 = or i32 %bf.value, %bf.clear9
  store i32 %bf.set15, i32* %1, align 8
  %bf.load17 = load i32* %side_effects_flag, align 8
  %bf.clear19 = and i32 %bf.load17, 4096
  %bf.set26 = or i32 %bf.set15, %bf.clear19
  store i32 %bf.set26, i32* %1, align 8
  br label %if.end

if.end:                                           ; preds = %first_rtl_op.exit, %if.then, %entry
  %bf.load39 = phi i32 [ %bf.value, %first_rtl_op.exit ], [ %bf.set26, %if.then ], [ %bf.value, %entry ]
  switch i32 %code, label %sw.default [
    i32 49, label %sw.bb
    i32 48, label %sw.bb
    i32 133, label %sw.bb
    i32 120, label %sw.bb
    i32 129, label %sw.bb
    i32 130, label %sw.bb
    i32 131, label %sw.bb
    i32 132, label %sw.bb
    i32 41, label %sw.bb36
  ]

sw.bb:                                            ; preds = %land.lhs.true, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %bf.load29 = phi i32 [ %bf.value, %land.lhs.true ], [ %bf.load39, %if.end ], [ %bf.load39, %if.end ], [ %bf.load39, %if.end ], [ %bf.load39, %if.end ], [ %bf.load39, %if.end ], [ %bf.load39, %if.end ], [ %bf.load39, %if.end ], [ %bf.load39, %if.end ]
  %bf.set31 = and i32 %bf.load29, -4353
  %bf.clear35 = or i32 %bf.set31, 256
  store i32 %bf.clear35, i32* %1, align 8
  br label %sw.epilog

sw.bb36:                                          ; preds = %if.end
  %bf.clear40 = and i32 %bf.load39, -4097
  store i32 %bf.clear40, i32* %1, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %land.lhs.true, %if.end
  %bf.load56 = phi i32 [ %bf.value, %land.lhs.true ], [ %bf.load39, %if.end ]
  %idxprom = sext i32 %code to i64
  %arrayidx41 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom
  %5 = load i8* %arrayidx41, align 1, !tbaa !37
  %cmp43 = icmp eq i8 %5, 49
  %or.cond = and i1 %cmp43, %tobool
  br i1 %or.cond, label %land.lhs.true47, label %sw.epilog

land.lhs.true47:                                  ; preds = %sw.default
  %constant_flag = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 0, i32 2
  %bf.load49 = load i32* %constant_flag, align 8
  %bf.clear51 = and i32 %bf.load49, 512
  %tobool52 = icmp eq i32 %bf.clear51, 0
  br i1 %tobool52, label %sw.epilog, label %if.then53

if.then53:                                        ; preds = %land.lhs.true47
  %bf.set58 = or i32 %bf.load56, 512
  store i32 %bf.set58, i32* %1, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %land.lhs.true47, %sw.default, %if.then53, %sw.bb36, %sw.bb
  ret %union.tree_node* %0
}

; Function Attrs: nounwind readonly uwtable
define i32 @first_rtl_op(i32 %code) #3 {
entry:
  switch i32 %code, label %sw.default [
    i32 118, label %return
    i32 136, label %sw.bb1
    i32 120, label %sw.bb1
    i32 55, label %return
    i32 54, label %sw.bb3
  ]

sw.bb1:                                           ; preds = %entry, %entry
  br label %return

sw.bb3:                                           ; preds = %entry
  br label %return

sw.default:                                       ; preds = %entry
  %idxprom = sext i32 %code to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !38
  br label %return

return:                                           ; preds = %entry, %entry, %sw.default, %sw.bb3, %sw.bb1
  %retval.0 = phi i32 [ %0, %sw.default ], [ 3, %sw.bb3 ], [ 0, %sw.bb1 ], [ 2, %entry ], [ 2, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @unsave_expr_1(%union.tree_node* %expr) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 118, label %sw.bb
    i32 50, label %sw.bb4
    i32 120, label %sw.bb20
  ]

sw.bb:                                            ; preds = %entry
  %bf.clear3 = and i32 %bf.load, 16384
  %tobool = icmp eq i32 %bf.clear3, 0
  br i1 %tobool, label %if.then, label %sw.epilog

if.then:                                          ; preds = %sw.bb
  %operands = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 4
  %0 = bitcast i32* %arrayidx to %struct.rtx_def**
  store %struct.rtx_def* null, %struct.rtx_def** %0, align 8, !tbaa !10
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %operands6 = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 2
  %arrayidx7 = getelementptr inbounds i32* %operands6, i64 2
  %1 = bitcast i32* %arrayidx7 to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !10
  %tobool8 = icmp eq %union.tree_node* %2, null
  br i1 %tobool8, label %if.end10, label %sw.epilog

if.end10:                                         ; preds = %sw.bb4
  %arrayidx13 = getelementptr inbounds i32* %operands6, i64 6
  %3 = bitcast i32* %arrayidx13 to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !10
  store %union.tree_node* %4, %union.tree_node** %1, align 8, !tbaa !10
  store %union.tree_node* null, %union.tree_node** %3, align 8, !tbaa !10
  br label %sw.epilog

sw.bb20:                                          ; preds = %entry
  %operands22 = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 2
  %5 = bitcast i32* %operands22 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %5, align 8, !tbaa !10
  %cmp = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp, label %sw.epilog, label %if.then24

if.then24:                                        ; preds = %sw.bb20
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 1712, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.unsave_expr_1, i64 0, i64 0)) #8
  unreachable

sw.default:                                       ; preds = %entry
  %7 = load void (%union.tree_node*)** @lang_unsave_expr_now, align 8, !tbaa !10
  %cmp26 = icmp eq void (%union.tree_node*)* %7, null
  br i1 %cmp26, label %sw.epilog, label %if.then27

if.then27:                                        ; preds = %sw.default
  tail call void %7(%union.tree_node* %expr) #4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb, %sw.bb4, %sw.bb20, %if.then27, %if.then, %if.end10
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @unsave_expr_now(%union.tree_node* %expr) #0 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8, !tbaa !10
  %0 = load void (%union.tree_node**)** @lang_unsave, align 8, !tbaa !10
  %cmp = icmp eq void (%union.tree_node**)* %0, null
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %0(%union.tree_node** %expr.addr) #4
  br label %if.end

if.else:                                          ; preds = %entry
  call fastcc void @unsave_expr_now_r(%union.tree_node* %expr)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load %union.tree_node** %expr.addr, align 8, !tbaa !10
  ret %union.tree_node* %1
}

; Function Attrs: nounwind uwtable
define internal fastcc void @unsave_expr_now_r(%union.tree_node* %expr) #0 {
entry:
  %cmp34 = icmp eq %union.tree_node* %expr, null
  br i1 %cmp34, label %sw.epilog, label %if.end

if.end:                                           ; preds = %entry, %if.then5
  %expr.tr35 = phi %union.tree_node* [ %11, %if.then5 ], [ %expr, %entry ]
  %code.i = getelementptr inbounds %union.tree_node* %expr.tr35, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  switch i32 %bf.clear.i, label %sw.default.i [
    i32 118, label %sw.bb.i
    i32 50, label %sw.bb4.i
    i32 120, label %sw.bb20.i
  ]

sw.bb.i:                                          ; preds = %if.end
  %bf.clear3.i = and i32 %bf.load.i, 16384
  %tobool.i = icmp eq i32 %bf.clear3.i, 0
  br i1 %tobool.i, label %if.then.i, label %unsave_expr_1.exit

if.then.i:                                        ; preds = %sw.bb.i
  %operands.i = getelementptr inbounds %union.tree_node* %expr.tr35, i64 0, i32 0, i32 2
  %arrayidx.i = getelementptr inbounds i32* %operands.i, i64 4
  %0 = bitcast i32* %arrayidx.i to %struct.rtx_def**
  store %struct.rtx_def* null, %struct.rtx_def** %0, align 8, !tbaa !10
  br label %unsave_expr_1.exit

sw.bb4.i:                                         ; preds = %if.end
  %operands6.i = getelementptr inbounds %union.tree_node* %expr.tr35, i64 0, i32 0, i32 2
  %arrayidx7.i = getelementptr inbounds i32* %operands6.i, i64 2
  %1 = bitcast i32* %arrayidx7.i to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !10
  %tobool8.i = icmp eq %union.tree_node* %2, null
  br i1 %tobool8.i, label %if.end10.i, label %unsave_expr_1.exit

if.end10.i:                                       ; preds = %sw.bb4.i
  %arrayidx13.i = getelementptr inbounds i32* %operands6.i, i64 6
  %3 = bitcast i32* %arrayidx13.i to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !10
  store %union.tree_node* %4, %union.tree_node** %1, align 8, !tbaa !10
  store %union.tree_node* null, %union.tree_node** %3, align 8, !tbaa !10
  br label %unsave_expr_1.exit

sw.bb20.i:                                        ; preds = %if.end
  %operands22.i = getelementptr inbounds %union.tree_node* %expr.tr35, i64 0, i32 0, i32 2
  %5 = bitcast i32* %operands22.i to %struct.rtx_def**
  %6 = load %struct.rtx_def** %5, align 8, !tbaa !10
  %cmp.i = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp.i, label %unsave_expr_1.exit, label %if.then24.i

if.then24.i:                                      ; preds = %sw.bb20.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 1712, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.unsave_expr_1, i64 0, i64 0)) #8
  unreachable

sw.default.i:                                     ; preds = %if.end
  %7 = load void (%union.tree_node*)** @lang_unsave_expr_now, align 8, !tbaa !10
  %cmp26.i = icmp eq void (%union.tree_node*)* %7, null
  br i1 %cmp26.i, label %unsave_expr_1.exit, label %if.then27.i

if.then27.i:                                      ; preds = %sw.default.i
  tail call void %7(%union.tree_node* %expr.tr35) #4
  %bf.load.pre = load i32* %code.i, align 8
  br label %unsave_expr_1.exit

unsave_expr_1.exit:                               ; preds = %sw.bb.i, %if.then.i, %sw.bb4.i, %if.end10.i, %sw.bb20.i, %sw.default.i, %if.then27.i
  %bf.load = phi i32 [ %bf.load.i, %sw.bb.i ], [ %bf.load.i, %if.then.i ], [ %bf.load.i, %sw.bb4.i ], [ %bf.load.i, %if.end10.i ], [ %bf.load.i, %sw.bb20.i ], [ %bf.load.i, %sw.default.i ], [ %bf.load.pre, %if.then27.i ]
  %bf.clear = and i32 %bf.load, 255
  %idxprom22 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom22
  %8 = load i8* %arrayidx, align 1, !tbaa !37
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default [
    i32 99, label %sw.epilog
    i32 116, label %sw.epilog
    i32 100, label %sw.epilog
    i32 98, label %sw.epilog
    i32 120, label %sw.bb2
    i32 101, label %sw.bb8
    i32 114, label %sw.bb8
    i32 115, label %sw.bb8
    i32 60, label %sw.bb8
    i32 50, label %sw.bb8
    i32 49, label %sw.bb8
  ]

sw.bb2:                                           ; preds = %unsave_expr_1.exit
  %cmp3 = icmp eq i32 %bf.clear, 2
  br i1 %cmp3, label %if.then5, label %sw.epilog

if.then5:                                         ; preds = %sw.bb2
  %value = getelementptr inbounds %union.tree_node* %expr.tr35, i64 0, i32 0, i32 2
  %9 = bitcast i32* %value to %union.tree_node**
  %10 = load %union.tree_node** %9, align 8, !tbaa !25
  tail call fastcc void @unsave_expr_now_r(%union.tree_node* %10)
  %chain = getelementptr inbounds %union.tree_node* %expr.tr35, i64 0, i32 0, i32 0, i32 0
  %11 = load %union.tree_node** %chain, align 8, !tbaa !27
  %cmp = icmp eq %union.tree_node* %11, null
  br i1 %cmp, label %sw.epilog, label %if.end

sw.bb8:                                           ; preds = %unsave_expr_1.exit, %unsave_expr_1.exit, %unsave_expr_1.exit, %unsave_expr_1.exit, %unsave_expr_1.exit, %unsave_expr_1.exit
  switch i32 %bf.clear, label %for.cond.preheader [
    i32 118, label %for.body.lr.ph
    i32 136, label %sw.epilog
    i32 120, label %sw.epilog
    i32 55, label %for.body.lr.ph
    i32 54, label %sw.bb3.i
  ]

sw.bb3.i:                                         ; preds = %sw.bb8
  br label %for.body.lr.ph

for.cond.preheader:                               ; preds = %sw.bb8
  %arrayidx.i23 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom22
  %12 = load i32* %arrayidx.i23, align 4, !tbaa !38
  %cmp932 = icmp sgt i32 %12, 0
  br i1 %cmp932, label %for.body.lr.ph, label %sw.epilog

for.body.lr.ph:                                   ; preds = %sw.bb8, %sw.bb8, %sw.bb3.i, %for.cond.preheader
  %i.0.in.ph56 = phi i32 [ %12, %for.cond.preheader ], [ 3, %sw.bb3.i ], [ 2, %sw.bb8 ], [ 2, %sw.bb8 ]
  %operands = getelementptr inbounds %union.tree_node* %expr.tr35, i64 0, i32 0, i32 2
  %13 = bitcast i32* %operands to [1 x %union.tree_node*]*
  %14 = sext i32 %i.0.in.ph56 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ %14, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*]* %13, i64 0, i64 %indvars.iv.next
  %15 = load %union.tree_node** %arrayidx12, align 8, !tbaa !10
  tail call fastcc void @unsave_expr_now_r(%union.tree_node* %15)
  %16 = trunc i64 %indvars.iv.next to i32
  %cmp9 = icmp sgt i32 %16, 0
  br i1 %cmp9, label %for.body, label %sw.epilog

sw.default:                                       ; preds = %unsave_expr_1.exit
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 1768, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.unsave_expr_now_r, i64 0, i64 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.then5, %unsave_expr_1.exit, %unsave_expr_1.exit, %unsave_expr_1.exit, %unsave_expr_1.exit, %sw.bb2, %for.body, %sw.bb8, %sw.bb8, %entry, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @unsafe_for_reeval(%union.tree_node* %expr) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %expr, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %code3 = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code3, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default.i [
    i32 118, label %first_rtl_op.exit
    i32 136, label %sw.bb1.i
    i32 120, label %sw.bb1.i
    i32 55, label %first_rtl_op.exit
    i32 54, label %sw.default
  ]

sw.bb1.i:                                         ; preds = %if.end, %if.end
  br label %first_rtl_op.exit

sw.default.i:                                     ; preds = %if.end
  %idxprom.i72 = zext i32 %bf.clear to i64
  %arrayidx.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom.i72
  %0 = load i32* %arrayidx.i, align 4, !tbaa !38
  br label %first_rtl_op.exit

first_rtl_op.exit:                                ; preds = %if.end, %if.end, %sw.bb1.i, %sw.default.i
  %retval.0.i = phi i32 [ %0, %sw.default.i ], [ 0, %sw.bb1.i ], [ 2, %if.end ], [ 2, %if.end ]
  switch i32 %bf.clear, label %sw.default [
    i32 118, label %return
    i32 120, label %return
    i32 2, label %for.body
    i32 53, label %sw.bb9
    i32 50, label %sw.epilog
  ]

for.body:                                         ; preds = %first_rtl_op.exit, %for.body
  %exp.080 = phi %union.tree_node* [ %3, %for.body ], [ %expr, %first_rtl_op.exit ]
  %unsafeness.079 = phi i32 [ %cond, %for.body ], [ 0, %first_rtl_op.exit ]
  %value = getelementptr inbounds %union.tree_node* %exp.080, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !25
  %call6 = tail call i32 @unsafe_for_reeval(%union.tree_node* %2)
  %cmp7 = icmp sgt i32 %call6, %unsafeness.079
  %cond = select i1 %cmp7, i32 %call6, i32 %unsafeness.079
  %chain = getelementptr inbounds %union.tree_node* %exp.080, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain, align 8, !tbaa !27
  %cmp5 = icmp eq %union.tree_node* %3, null
  br i1 %cmp5, label %return, label %for.body

sw.bb9:                                           ; preds = %first_rtl_op.exit
  %operands = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %4 = bitcast i32* %arrayidx to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !10
  %call11 = tail call i32 @unsafe_for_reeval(%union.tree_node* %5)
  %cmp12 = icmp sgt i32 %call11, 1
  %cond16 = select i1 %cmp12, i32 %call11, i32 1
  ret i32 %cond16

sw.default:                                       ; preds = %if.end, %first_rtl_op.exit
  %retval.0.i71 = phi i32 [ %retval.0.i, %first_rtl_op.exit ], [ 3, %if.end ]
  %6 = load i32 (%union.tree_node*)** @lang_unsafe_for_reeval, align 8, !tbaa !10
  %cmp18 = icmp eq i32 (%union.tree_node*)* %6, null
  br i1 %cmp18, label %sw.epilog, label %if.then19

if.then19:                                        ; preds = %sw.default
  %call20 = tail call i32 %6(%union.tree_node* %expr) #4
  %cmp21 = icmp sgt i32 %call20, -1
  br i1 %cmp21, label %return, label %sw.epilog

sw.epilog:                                        ; preds = %first_rtl_op.exit, %sw.default, %if.then19
  %retval.0.i70 = phi i32 [ %retval.0.i71, %if.then19 ], [ %retval.0.i71, %sw.default ], [ %retval.0.i, %first_rtl_op.exit ]
  %unsafeness.1 = phi i32 [ 0, %if.then19 ], [ 0, %sw.default ], [ 1, %first_rtl_op.exit ]
  %idxprom69 = zext i32 %bf.clear to i64
  %arrayidx25 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom69
  %7 = load i8* %arrayidx25, align 1, !tbaa !37
  %conv = sext i8 %7 to i32
  switch i32 %conv, label %sw.default45 [
    i32 99, label %return
    i32 116, label %return
    i32 120, label %return
    i32 100, label %return
    i32 98, label %return
    i32 101, label %for.cond28.preheader
    i32 114, label %for.cond28.preheader
    i32 115, label %for.cond28.preheader
    i32 60, label %for.cond28.preheader
    i32 50, label %for.cond28.preheader
    i32 49, label %for.cond28.preheader
  ]

for.cond28.preheader:                             ; preds = %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog
  %cmp2975 = icmp sgt i32 %retval.0.i70, 0
  br i1 %cmp2975, label %for.body31.lr.ph, label %return

for.body31.lr.ph:                                 ; preds = %for.cond28.preheader
  %operands34 = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 2
  %8 = bitcast i32* %operands34 to [1 x %union.tree_node*]*
  %9 = sext i32 %retval.0.i70 to i64
  br label %for.body31

for.body31:                                       ; preds = %for.body31.lr.ph, %for.body31
  %indvars.iv = phi i64 [ %9, %for.body31.lr.ph ], [ %indvars.iv.next, %for.body31 ]
  %unsafeness.276 = phi i32 [ %unsafeness.1, %for.body31.lr.ph ], [ %cond42, %for.body31 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx35 = getelementptr inbounds [1 x %union.tree_node*]* %8, i64 0, i64 %indvars.iv.next
  %10 = load %union.tree_node** %arrayidx35, align 8, !tbaa !10
  %call36 = tail call i32 @unsafe_for_reeval(%union.tree_node* %10)
  %cmp37 = icmp sgt i32 %call36, %unsafeness.276
  %cond42 = select i1 %cmp37, i32 %call36, i32 %unsafeness.276
  %11 = trunc i64 %indvars.iv.next to i32
  %cmp29 = icmp sgt i32 %11, 0
  br i1 %cmp29, label %for.body31, label %return

sw.default45:                                     ; preds = %sw.epilog
  br label %return

return:                                           ; preds = %for.body, %for.body31, %for.cond28.preheader, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %sw.epilog, %if.then19, %first_rtl_op.exit, %first_rtl_op.exit, %entry, %sw.default45
  %retval.0 = phi i32 [ 2, %sw.default45 ], [ 1, %entry ], [ 2, %first_rtl_op.exit ], [ 2, %first_rtl_op.exit ], [ %call20, %if.then19 ], [ 0, %sw.epilog ], [ 0, %sw.epilog ], [ 0, %sw.epilog ], [ 0, %sw.epilog ], [ 0, %sw.epilog ], [ %unsafeness.1, %for.cond28.preheader ], [ %cond42, %for.body31 ], [ %cond, %for.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @has_cleanups(%union.tree_node* nocapture readonly %exp) #3 {
entry:
  %side_effects_flag = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %side_effects_flag, align 8
  %bf.clear = and i32 %bf.load, 256
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %bf.clear3 = and i32 %bf.load, 255
  switch i32 %bf.clear3, label %sw.epilog [
    i32 50, label %return
    i32 136, label %return
    i32 55, label %return
    i32 56, label %sw.bb4
    i32 53, label %sw.bb5
  ]

sw.bb4:                                           ; preds = %if.end
  br label %return

sw.bb5:                                           ; preds = %if.end
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %0 = bitcast i32* %arrayidx to %union.tree_node**
  %exp.addr.0104 = load %union.tree_node** %0, align 8
  %tobool7105 = icmp eq %union.tree_node* %exp.addr.0104, null
  br i1 %tobool7105, label %return, label %for.body

for.cond:                                         ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %exp.addr.0106, i64 0, i32 0, i32 0, i32 0
  %exp.addr.0 = load %union.tree_node** %chain, align 8
  %tobool7 = icmp eq %union.tree_node* %exp.addr.0, null
  br i1 %tobool7, label %return, label %for.body

for.body:                                         ; preds = %sw.bb5, %for.cond
  %exp.addr.0106 = phi %union.tree_node* [ %exp.addr.0, %for.cond ], [ %exp.addr.0104, %sw.bb5 ]
  %value = getelementptr inbounds %union.tree_node* %exp.addr.0106, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !25
  %call = tail call i32 @has_cleanups(%union.tree_node* %2)
  %tobool8 = icmp eq i32 %call, 0
  br i1 %tobool8, label %for.cond, label %return

sw.epilog:                                        ; preds = %if.end
  %cmp16 = icmp ugt i32 %bf.clear3, 146
  br i1 %cmp16, label %return, label %if.end18

if.end18:                                         ; preds = %sw.epilog
  switch i32 %bf.clear3, label %first_rtl_op.exit [
    i32 118, label %for.body26.lr.ph
    i32 136, label %return
    i32 120, label %return
    i32 55, label %for.body26.lr.ph
    i32 54, label %sw.bb3.i
  ]

sw.bb3.i:                                         ; preds = %if.end18
  br label %for.body26.lr.ph

first_rtl_op.exit:                                ; preds = %if.end18
  %idxprom.i98 = zext i32 %bf.clear3 to i64
  %arrayidx.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom.i98
  %3 = load i32* %arrayidx.i, align 4, !tbaa !38
  %cmp25101 = icmp sgt i32 %3, 0
  br i1 %cmp25101, label %for.body26.lr.ph, label %return

for.body26.lr.ph:                                 ; preds = %if.end18, %if.end18, %sw.bb3.i, %first_rtl_op.exit
  %retval.0.i111 = phi i32 [ %3, %first_rtl_op.exit ], [ 3, %sw.bb3.i ], [ 2, %if.end18 ], [ 2, %if.end18 ]
  %operands28 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %4 = bitcast i32* %operands28 to [1 x %union.tree_node*]*
  br label %for.body26

for.body26:                                       ; preds = %for.body26.lr.ph, %for.inc69
  %indvars.iv = phi i64 [ 0, %for.body26.lr.ph ], [ %indvars.iv.next, %for.inc69 ]
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*]* %4, i64 0, i64 %indvars.iv
  %5 = load %union.tree_node** %arrayidx29, align 8, !tbaa !10
  %cmp30 = icmp eq %union.tree_node* %5, null
  br i1 %cmp30, label %for.inc69, label %if.then31

if.then31:                                        ; preds = %for.body26
  %code37 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.load38 = load i32* %code37, align 8
  %bf.clear39 = and i32 %bf.load38, 255
  %idxprom4097 = zext i32 %bf.clear39 to i64
  %arrayidx41 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom4097
  %6 = load i8* %arrayidx41, align 1, !tbaa !37
  switch i8 %6, label %for.inc69 [
    i8 115, label %if.then58
    i8 114, label %if.then58
    i8 101, label %if.then58
    i8 60, label %if.then58
    i8 50, label %if.then58
    i8 49, label %if.then58
  ]

if.then58:                                        ; preds = %if.then31, %if.then31, %if.then31, %if.then31, %if.then31, %if.then31
  %call63 = tail call i32 @has_cleanups(%union.tree_node* %5)
  %tobool64 = icmp eq i32 %call63, 0
  br i1 %tobool64, label %for.inc69, label %return

for.inc69:                                        ; preds = %if.then31, %if.then58, %for.body26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %7 = trunc i64 %indvars.iv.next to i32
  %cmp25 = icmp slt i32 %7, %retval.0.i111
  br i1 %cmp25, label %for.body26, label %return

return:                                           ; preds = %for.body, %for.cond, %if.then58, %for.inc69, %if.end18, %if.end18, %sw.bb5, %first_rtl_op.exit, %sw.epilog, %if.end, %if.end, %if.end, %entry, %sw.bb4
  %retval.0 = phi i32 [ 0, %sw.bb4 ], [ 0, %entry ], [ 1, %if.end ], [ 1, %if.end ], [ 1, %if.end ], [ -1, %sw.epilog ], [ 0, %first_rtl_op.exit ], [ 0, %sw.bb5 ], [ 0, %if.end18 ], [ 0, %if.end18 ], [ %call63, %if.then58 ], [ 0, %for.inc69 ], [ %call, %for.body ], [ 0, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @substitute_in_expr(%union.tree_node* %exp, %union.tree_node* readnone %f, %union.tree_node* readnone %r) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom404 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom404
  %0 = load i8* %arrayidx, align 1, !tbaa !37
  %conv = sext i8 %0 to i32
  switch i32 %conv, label %sw.default265 [
    i32 99, label %return
    i32 100, label %return
    i32 120, label %sw.bb2
    i32 49, label %sw.bb26
    i32 50, label %sw.bb26
    i32 60, label %sw.bb26
    i32 101, label %sw.bb26
    i32 114, label %sw.bb149
  ]

sw.bb2:                                           ; preds = %entry
  switch i32 %bf.clear, label %if.end25 [
    i32 57, label %return
    i32 2, label %if.then6
  ]

if.then6:                                         ; preds = %sw.bb2
  %chain = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 0
  %1 = load %union.tree_node** %chain, align 8, !tbaa !27
  %cmp8 = icmp eq %union.tree_node* %1, null
  br i1 %cmp8, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.then6
  %call = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %1, %union.tree_node* %f, %union.tree_node* %r)
  br label %cond.end

cond.end:                                         ; preds = %if.then6, %cond.false
  %cond = phi %union.tree_node* [ %call, %cond.false ], [ null, %if.then6 ]
  %value = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !25
  %call12 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %3, %union.tree_node* %f, %union.tree_node* %r)
  %4 = load %union.tree_node** %chain, align 8, !tbaa !27
  %cmp15 = icmp eq %union.tree_node* %cond, %4
  br i1 %cmp15, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %5 = load %union.tree_node** %2, align 8, !tbaa !25
  %cmp19 = icmp eq %union.tree_node* %call12, %5
  br i1 %cmp19, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %purpose = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 1
  %6 = load i8** %purpose, align 8
  %7 = bitcast i8* %6 to %union.tree_node*
  %call.i406 = tail call i8* @ggc_alloc(i64 40) #4
  %8 = bitcast i8* %call.i406 to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call.i406, i8 0, i64 24, i32 8, i1 false) #4
  %code.i = getelementptr inbounds i8* %call.i406, i64 16
  %9 = bitcast i8* %code.i to i32*
  store i32 2, i32* %9, align 8
  %chain2.i = bitcast i8* %call.i406 to %union.tree_node**
  store %union.tree_node* %cond, %union.tree_node** %chain2.i, align 8, !tbaa !27
  %purpose3.i = getelementptr inbounds i8* %call.i406, i64 24
  %10 = bitcast i8* %purpose3.i to %union.tree_node**
  store %union.tree_node* %7, %union.tree_node** %10, align 8, !tbaa !71
  %value5.i = getelementptr inbounds i8* %call.i406, i64 32
  %11 = bitcast i8* %value5.i to %union.tree_node**
  store %union.tree_node* %call12, %union.tree_node** %11, align 8, !tbaa !25
  br label %return

if.end25:                                         ; preds = %sw.bb2
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2069, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.substitute_in_expr, i64 0, i64 0)) #8
  unreachable

sw.bb26:                                          ; preds = %entry, %entry, %entry, %entry
  %arrayidx28 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom404
  %12 = load i32* %arrayidx28, align 4, !tbaa !38
  switch i32 %12, label %sw.default [
    i32 1, label %sw.bb29
    i32 2, label %sw.bb47
    i32 3, label %sw.bb82
  ]

sw.bb29:                                          ; preds = %sw.bb26
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx31 = bitcast i32* %operands to %union.tree_node**
  %13 = load %union.tree_node** %arrayidx31, align 8, !tbaa !10
  %call32 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %13, %union.tree_node* %f, %union.tree_node* %r)
  %14 = load %union.tree_node** %arrayidx31, align 8, !tbaa !10
  %cmp36 = icmp eq %union.tree_node* %call32, %14
  br i1 %cmp36, label %return, label %if.end39

if.end39:                                         ; preds = %sw.bb29
  %cmp40 = icmp eq i32 %bf.clear, 116
  br i1 %cmp40, label %return, label %if.end43

if.end43:                                         ; preds = %if.end39
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %15 = load %union.tree_node** %type, align 8, !tbaa !15
  %call.i407 = tail call i8* @ggc_alloc(i64 40) #4
  %16 = bitcast i8* %call.i407 to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call.i407, i8 0, i64 24, i32 1, i1 false) #4
  %code1.i408 = getelementptr inbounds i8* %call.i407, i64 16
  %17 = bitcast i8* %code1.i408 to i32*
  store i32 %bf.clear, i32* %17, align 8
  %type3.i409 = getelementptr inbounds i8* %call.i407, i64 8
  %18 = bitcast i8* %type3.i409 to %union.tree_node**
  store %union.tree_node* %15, %union.tree_node** %18, align 8, !tbaa !15
  %complexity.i410 = getelementptr inbounds i8* %call.i407, i64 24
  %19 = bitcast i8* %complexity.i410 to i32*
  store i32 0, i32* %19, align 4, !tbaa !79
  %operands.i411 = getelementptr inbounds i8* %call.i407, i64 32
  %arrayidx.i412 = bitcast i8* %operands.i411 to %union.tree_node**
  store %union.tree_node* %call32, %union.tree_node** %arrayidx.i412, align 8, !tbaa !10
  %tobool.i413 = icmp ne %union.tree_node* %call32, null
  br i1 %tobool.i413, label %land.lhs.true.i414, label %if.end.i428

land.lhs.true.i414:                               ; preds = %if.end43
  switch i32 %bf.clear, label %first_rtl_op.exit.i418 [
    i32 118, label %if.then.i426
    i32 54, label %if.then.i426
    i32 55, label %if.then.i426
    i32 120, label %sw.bb.i432
    i32 136, label %sw.default.i440
  ]

first_rtl_op.exit.i418:                           ; preds = %land.lhs.true.i414
  %20 = load i32* %arrayidx28, align 4, !tbaa !38
  %cmp.i417 = icmp eq i32 %20, 0
  br i1 %cmp.i417, label %if.end.i428, label %if.then.i426

if.then.i426:                                     ; preds = %first_rtl_op.exit.i418, %land.lhs.true.i414, %land.lhs.true.i414, %land.lhs.true.i414
  %side_effects_flag.i419 = getelementptr inbounds %union.tree_node* %call32, i64 0, i32 0, i32 0, i32 2
  %bf.load8.i420 = load i32* %side_effects_flag.i419, align 8
  %bf.clear9.i421 = and i32 %bf.load8.i420, 256
  %bf.set15.i422 = or i32 %bf.clear9.i421, %bf.clear
  store i32 %bf.set15.i422, i32* %17, align 8
  %bf.load17.i423 = load i32* %side_effects_flag.i419, align 8
  %bf.clear19.i424 = and i32 %bf.load17.i423, 4096
  %bf.set26.i425 = or i32 %bf.set15.i422, %bf.clear19.i424
  store i32 %bf.set26.i425, i32* %17, align 8
  br label %if.end.i428

if.end.i428:                                      ; preds = %if.then.i426, %first_rtl_op.exit.i418, %if.end43
  %bf.load39.i427 = phi i32 [ %bf.clear, %first_rtl_op.exit.i418 ], [ %bf.set26.i425, %if.then.i426 ], [ %bf.clear, %if.end43 ]
  switch i32 %bf.clear, label %sw.default.i440 [
    i32 49, label %sw.bb.i432
    i32 48, label %sw.bb.i432
    i32 133, label %sw.bb.i432
    i32 120, label %sw.bb.i432
    i32 129, label %sw.bb.i432
    i32 130, label %sw.bb.i432
    i32 131, label %sw.bb.i432
    i32 132, label %sw.bb.i432
    i32 41, label %sw.bb36.i434
  ]

sw.bb.i432:                                       ; preds = %if.end.i428, %if.end.i428, %if.end.i428, %if.end.i428, %if.end.i428, %if.end.i428, %if.end.i428, %if.end.i428, %land.lhs.true.i414
  %bf.load29.i429 = phi i32 [ 120, %land.lhs.true.i414 ], [ %bf.load39.i427, %if.end.i428 ], [ %bf.load39.i427, %if.end.i428 ], [ %bf.load39.i427, %if.end.i428 ], [ %bf.load39.i427, %if.end.i428 ], [ %bf.load39.i427, %if.end.i428 ], [ %bf.load39.i427, %if.end.i428 ], [ %bf.load39.i427, %if.end.i428 ], [ %bf.load39.i427, %if.end.i428 ]
  %bf.set31.i430 = and i32 %bf.load29.i429, -4353
  %bf.clear35.i431 = or i32 %bf.set31.i430, 256
  store i32 %bf.clear35.i431, i32* %17, align 8
  br label %build1.exit448

sw.bb36.i434:                                     ; preds = %if.end.i428
  %bf.clear40.i433 = and i32 %bf.load39.i427, -4097
  store i32 %bf.clear40.i433, i32* %17, align 8
  br label %build1.exit448

sw.default.i440:                                  ; preds = %if.end.i428, %land.lhs.true.i414
  %bf.load56.i435 = phi i32 [ 136, %land.lhs.true.i414 ], [ %bf.load39.i427, %if.end.i428 ]
  %21 = load i8* %arrayidx, align 1, !tbaa !37
  %cmp43.i438 = icmp eq i8 %21, 49
  %or.cond.i439 = and i1 %cmp43.i438, %tobool.i413
  br i1 %or.cond.i439, label %land.lhs.true47.i445, label %build1.exit448

land.lhs.true47.i445:                             ; preds = %sw.default.i440
  %constant_flag.i441 = getelementptr inbounds %union.tree_node* %call32, i64 0, i32 0, i32 0, i32 2
  %bf.load49.i442 = load i32* %constant_flag.i441, align 8
  %bf.clear51.i443 = and i32 %bf.load49.i442, 512
  %tobool52.i444 = icmp eq i32 %bf.clear51.i443, 0
  br i1 %tobool52.i444, label %build1.exit448, label %if.then53.i447

if.then53.i447:                                   ; preds = %land.lhs.true47.i445
  %bf.set58.i446 = or i32 %bf.load56.i435, 512
  store i32 %bf.set58.i446, i32* %17, align 8
  br label %build1.exit448

build1.exit448:                                   ; preds = %sw.bb.i432, %sw.bb36.i434, %sw.default.i440, %land.lhs.true47.i445, %if.then53.i447
  %call46 = tail call %union.tree_node* @fold(%union.tree_node* %16) #4
  br label %sw.epilog266

sw.bb47:                                          ; preds = %sw.bb26
  switch i32 %bf.clear, label %if.end56 [
    i32 120, label %return
    i32 46, label %if.then54
  ]

if.then54:                                        ; preds = %sw.bb47
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2094, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.substitute_in_expr, i64 0, i64 0)) #8
  unreachable

if.end56:                                         ; preds = %sw.bb47
  %operands58 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx59 = bitcast i32* %operands58 to %union.tree_node**
  %22 = load %union.tree_node** %arrayidx59, align 8, !tbaa !10
  %call60 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %22, %union.tree_node* %f, %union.tree_node* %r)
  %arrayidx63 = getelementptr inbounds i32* %operands58, i64 2
  %23 = bitcast i32* %arrayidx63 to %union.tree_node**
  %24 = load %union.tree_node** %23, align 8, !tbaa !10
  %call64 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %24, %union.tree_node* %f, %union.tree_node* %r)
  %25 = load %union.tree_node** %arrayidx59, align 8, !tbaa !10
  %cmp68 = icmp eq %union.tree_node* %call60, %25
  br i1 %cmp68, label %land.lhs.true70, label %if.end77

land.lhs.true70:                                  ; preds = %if.end56
  %26 = load %union.tree_node** %23, align 8, !tbaa !10
  %cmp74 = icmp eq %union.tree_node* %call64, %26
  br i1 %cmp74, label %return, label %if.end77

if.end77:                                         ; preds = %land.lhs.true70, %if.end56
  %type79 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %27 = load %union.tree_node** %type79, align 8, !tbaa !15
  %call80 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %bf.clear, %union.tree_node* %27, %union.tree_node* %call60, %union.tree_node* %call64)
  %call81 = tail call %union.tree_node* @fold(%union.tree_node* %call80) #4
  br label %sw.epilog266

sw.bb82:                                          ; preds = %sw.bb26
  switch i32 %bf.clear, label %if.then110 [
    i32 118, label %return
    i32 53, label %if.then89
    i32 51, label %if.end113
  ]

if.then89:                                        ; preds = %sw.bb82
  %operands91 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx92 = getelementptr inbounds i32* %operands91, i64 2
  %28 = bitcast i32* %arrayidx92 to %union.tree_node**
  %29 = load %union.tree_node** %28, align 8, !tbaa !10
  %call93 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %29, %union.tree_node* %f, %union.tree_node* %r)
  %30 = load %union.tree_node** %28, align 8, !tbaa !10
  %cmp97 = icmp eq %union.tree_node* %call93, %30
  br i1 %cmp97, label %return, label %if.end100

if.end100:                                        ; preds = %if.then89
  %type102 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %31 = load %union.tree_node** %type102, align 8, !tbaa !15
  %arrayidx105 = bitcast i32* %operands91 to %union.tree_node**
  %32 = load %union.tree_node** %arrayidx105, align 8, !tbaa !10
  %call106 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 53, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %call93, %union.tree_node* null)
  br label %return

if.then110:                                       ; preds = %sw.bb82
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2121, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.substitute_in_expr, i64 0, i64 0)) #8
  unreachable

if.end113:                                        ; preds = %sw.bb82
  %operands115 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx116 = bitcast i32* %operands115 to %union.tree_node**
  %33 = load %union.tree_node** %arrayidx116, align 8, !tbaa !10
  %call117 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %33, %union.tree_node* %f, %union.tree_node* %r)
  %arrayidx120 = getelementptr inbounds i32* %operands115, i64 2
  %34 = bitcast i32* %arrayidx120 to %union.tree_node**
  %35 = load %union.tree_node** %34, align 8, !tbaa !10
  %call121 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %35, %union.tree_node* %f, %union.tree_node* %r)
  %arrayidx124 = getelementptr inbounds i32* %operands115, i64 4
  %36 = bitcast i32* %arrayidx124 to %union.tree_node**
  %37 = load %union.tree_node** %36, align 8, !tbaa !10
  %call125 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %37, %union.tree_node* %f, %union.tree_node* %r)
  %38 = load %union.tree_node** %arrayidx116, align 8, !tbaa !10
  %cmp129 = icmp eq %union.tree_node* %call117, %38
  br i1 %cmp129, label %land.lhs.true131, label %if.end144

land.lhs.true131:                                 ; preds = %if.end113
  %39 = load %union.tree_node** %34, align 8, !tbaa !10
  %cmp135 = icmp eq %union.tree_node* %call121, %39
  br i1 %cmp135, label %land.lhs.true137, label %if.end144

land.lhs.true137:                                 ; preds = %land.lhs.true131
  %40 = load %union.tree_node** %36, align 8, !tbaa !10
  %cmp141 = icmp eq %union.tree_node* %call125, %40
  br i1 %cmp141, label %return, label %if.end144

if.end144:                                        ; preds = %land.lhs.true137, %land.lhs.true131, %if.end113
  %type146 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %41 = load %union.tree_node** %type146, align 8, !tbaa !15
  %call147 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 51, %union.tree_node* %41, %union.tree_node* %call117, %union.tree_node* %call121, %union.tree_node* %call125)
  %call148 = tail call %union.tree_node* @fold(%union.tree_node* %call147) #4
  br label %sw.epilog266

sw.default:                                       ; preds = %sw.bb26
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2134, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.substitute_in_expr, i64 0, i64 0)) #8
  unreachable

sw.bb149:                                         ; preds = %entry
  switch i32 %bf.clear, label %sw.default263 [
    i32 39, label %sw.bb150
    i32 40, label %sw.bb211
    i32 41, label %sw.bb247
    i32 42, label %sw.bb247
  ]

sw.bb150:                                         ; preds = %sw.bb149
  %operands152 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx153 = bitcast i32* %operands152 to %union.tree_node**
  %inner.0453 = load %union.tree_node** %arrayidx153, align 8
  %code155454 = getelementptr inbounds %union.tree_node* %inner.0453, i64 0, i32 0, i32 0, i32 2
  %bf.load156455 = load i32* %code155454, align 8
  %bf.clear157456 = and i32 %bf.load156455, 255
  %idxprom158405457 = zext i32 %bf.clear157456 to i64
  %arrayidx159458 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom158405457
  %42 = load i8* %arrayidx159458, align 1, !tbaa !37
  %cmp161459 = icmp eq i8 %42, 114
  br i1 %cmp161459, label %for.inc, label %for.end

for.inc:                                          ; preds = %sw.bb150, %for.inc
  %inner.0460 = phi %union.tree_node* [ %inner.0, %for.inc ], [ %inner.0453, %sw.bb150 ]
  %operands164 = getelementptr inbounds %union.tree_node* %inner.0460, i64 0, i32 0, i32 2
  %arrayidx165 = bitcast i32* %operands164 to %union.tree_node**
  %inner.0 = load %union.tree_node** %arrayidx165, align 8
  %code155 = getelementptr inbounds %union.tree_node* %inner.0, i64 0, i32 0, i32 0, i32 2
  %bf.load156 = load i32* %code155, align 8
  %bf.clear157 = and i32 %bf.load156, 255
  %idxprom158405 = zext i32 %bf.clear157 to i64
  %arrayidx159 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom158405
  %43 = load i8* %arrayidx159, align 1, !tbaa !37
  %cmp161 = icmp eq i8 %43, 114
  br i1 %cmp161, label %for.inc, label %for.end

for.end:                                          ; preds = %for.inc, %sw.bb150
  %bf.load182 = phi i32 [ %bf.load156455, %sw.bb150 ], [ %bf.load156, %for.inc ]
  %bf.clear157.lcssa = phi i32 [ %bf.clear157456, %sw.bb150 ], [ %bf.clear157, %for.inc ]
  %inner.0.lcssa = phi %union.tree_node* [ %inner.0453, %sw.bb150 ], [ %inner.0, %for.inc ]
  %cmp170 = icmp eq i32 %bf.clear157.lcssa, 57
  br i1 %cmp170, label %land.lhs.true172, label %if.end179

land.lhs.true172:                                 ; preds = %for.end
  %arrayidx175 = getelementptr inbounds i32* %operands152, i64 2
  %44 = bitcast i32* %arrayidx175 to %union.tree_node**
  %45 = load %union.tree_node** %44, align 8, !tbaa !10
  %cmp176 = icmp eq %union.tree_node* %45, %f
  br i1 %cmp176, label %return, label %if.end179

if.end179:                                        ; preds = %land.lhs.true172, %for.end
  %bf.clear183 = and i32 %bf.load182, 255
  %cmp184 = icmp eq i32 %bf.clear183, 57
  br i1 %cmp184, label %land.lhs.true186, label %if.end192

land.lhs.true186:                                 ; preds = %if.end179
  %type188 = getelementptr inbounds %union.tree_node* %inner.0.lcssa, i64 0, i32 0, i32 0, i32 1
  %46 = load %union.tree_node** %type188, align 8, !tbaa !15
  %cmp189 = icmp eq %union.tree_node* %46, null
  br i1 %cmp189, label %return, label %if.end192

if.end192:                                        ; preds = %land.lhs.true186, %if.end179
  %call196 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %inner.0453, %union.tree_node* %f, %union.tree_node* %r)
  %47 = load %union.tree_node** %arrayidx153, align 8, !tbaa !10
  %cmp200 = icmp eq %union.tree_node* %call196, %47
  br i1 %cmp200, label %return, label %if.end203

if.end203:                                        ; preds = %if.end192
  %type205 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %48 = load %union.tree_node** %type205, align 8, !tbaa !15
  %arrayidx208 = getelementptr inbounds i32* %operands152, i64 2
  %49 = bitcast i32* %arrayidx208 to %union.tree_node**
  %50 = load %union.tree_node** %49, align 8, !tbaa !10
  %call209 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 39, %union.tree_node* %48, %union.tree_node* %call196, %union.tree_node* %50)
  %call210 = tail call %union.tree_node* @fold(%union.tree_node* %call209) #4
  br label %sw.epilog266

sw.bb211:                                         ; preds = %sw.bb149
  %operands213 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx214 = bitcast i32* %operands213 to %union.tree_node**
  %51 = load %union.tree_node** %arrayidx214, align 8, !tbaa !10
  %call215 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %51, %union.tree_node* %f, %union.tree_node* %r)
  %arrayidx218 = getelementptr inbounds i32* %operands213, i64 2
  %52 = bitcast i32* %arrayidx218 to %union.tree_node**
  %53 = load %union.tree_node** %52, align 8, !tbaa !10
  %call219 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %53, %union.tree_node* %f, %union.tree_node* %r)
  %arrayidx222 = getelementptr inbounds i32* %operands213, i64 4
  %54 = bitcast i32* %arrayidx222 to %union.tree_node**
  %55 = load %union.tree_node** %54, align 8, !tbaa !10
  %call223 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %55, %union.tree_node* %f, %union.tree_node* %r)
  %56 = load %union.tree_node** %arrayidx214, align 8, !tbaa !10
  %cmp227 = icmp eq %union.tree_node* %call215, %56
  br i1 %cmp227, label %land.lhs.true229, label %if.end242

land.lhs.true229:                                 ; preds = %sw.bb211
  %57 = load %union.tree_node** %52, align 8, !tbaa !10
  %cmp233 = icmp eq %union.tree_node* %call219, %57
  br i1 %cmp233, label %land.lhs.true235, label %if.end242

land.lhs.true235:                                 ; preds = %land.lhs.true229
  %58 = load %union.tree_node** %54, align 8, !tbaa !10
  %cmp239 = icmp eq %union.tree_node* %call223, %58
  br i1 %cmp239, label %return, label %if.end242

if.end242:                                        ; preds = %land.lhs.true235, %land.lhs.true229, %sw.bb211
  %type244 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %59 = load %union.tree_node** %type244, align 8, !tbaa !15
  %call245 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 40, %union.tree_node* %59, %union.tree_node* %call215, %union.tree_node* %call219, %union.tree_node* %call223)
  %call246 = tail call %union.tree_node* @fold(%union.tree_node* %call245) #4
  br label %sw.epilog266

sw.bb247:                                         ; preds = %sw.bb149, %sw.bb149
  %operands249 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx250 = bitcast i32* %operands249 to %union.tree_node**
  %60 = load %union.tree_node** %arrayidx250, align 8, !tbaa !10
  %call251 = tail call %union.tree_node* @substitute_in_expr(%union.tree_node* %60, %union.tree_node* %f, %union.tree_node* %r)
  %61 = load %union.tree_node** %arrayidx250, align 8, !tbaa !10
  %cmp255 = icmp eq %union.tree_node* %call251, %61
  br i1 %cmp255, label %return, label %if.end258

if.end258:                                        ; preds = %sw.bb247
  %type260 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %62 = load %union.tree_node** %type260, align 8, !tbaa !15
  %call.i = tail call i8* @ggc_alloc(i64 40) #4
  %63 = bitcast i8* %call.i to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call.i, i8 0, i64 24, i32 1, i1 false) #4
  %code1.i = getelementptr inbounds i8* %call.i, i64 16
  %64 = bitcast i8* %code1.i to i32*
  store i32 %bf.clear, i32* %64, align 8
  %type3.i = getelementptr inbounds i8* %call.i, i64 8
  %65 = bitcast i8* %type3.i to %union.tree_node**
  store %union.tree_node* %62, %union.tree_node** %65, align 8, !tbaa !15
  %complexity.i = getelementptr inbounds i8* %call.i, i64 24
  %66 = bitcast i8* %complexity.i to i32*
  store i32 0, i32* %66, align 4, !tbaa !79
  %operands.i = getelementptr inbounds i8* %call.i, i64 32
  %arrayidx.i = bitcast i8* %operands.i to %union.tree_node**
  store %union.tree_node* %call251, %union.tree_node** %arrayidx.i, align 8, !tbaa !10
  %tobool.i = icmp ne %union.tree_node* %call251, null
  br i1 %tobool.i, label %land.lhs.true.i, label %if.end.i

land.lhs.true.i:                                  ; preds = %if.end258
  switch i32 %bf.clear, label %first_rtl_op.exit.i [
    i32 118, label %if.then.i
    i32 54, label %if.then.i
    i32 55, label %if.then.i
    i32 120, label %sw.bb.i
    i32 136, label %sw.default.i
  ]

first_rtl_op.exit.i:                              ; preds = %land.lhs.true.i
  %arrayidx.i.i = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom404
  %67 = load i32* %arrayidx.i.i, align 4, !tbaa !38
  %cmp.i = icmp eq i32 %67, 0
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %first_rtl_op.exit.i, %land.lhs.true.i, %land.lhs.true.i, %land.lhs.true.i
  %side_effects_flag.i = getelementptr inbounds %union.tree_node* %call251, i64 0, i32 0, i32 0, i32 2
  %bf.load8.i = load i32* %side_effects_flag.i, align 8
  %bf.clear9.i = and i32 %bf.load8.i, 256
  %bf.set15.i = or i32 %bf.clear9.i, %bf.clear
  store i32 %bf.set15.i, i32* %64, align 8
  %bf.load17.i = load i32* %side_effects_flag.i, align 8
  %bf.clear19.i = and i32 %bf.load17.i, 4096
  %bf.set26.i = or i32 %bf.set15.i, %bf.clear19.i
  store i32 %bf.set26.i, i32* %64, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %first_rtl_op.exit.i, %if.end258
  %bf.load39.i = phi i32 [ %bf.clear, %first_rtl_op.exit.i ], [ %bf.set26.i, %if.then.i ], [ %bf.clear, %if.end258 ]
  switch i32 %bf.clear, label %sw.default.i [
    i32 49, label %sw.bb.i
    i32 48, label %sw.bb.i
    i32 133, label %sw.bb.i
    i32 120, label %sw.bb.i
    i32 129, label %sw.bb.i
    i32 130, label %sw.bb.i
    i32 131, label %sw.bb.i
    i32 132, label %sw.bb.i
    i32 41, label %sw.bb36.i
  ]

sw.bb.i:                                          ; preds = %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %if.end.i, %land.lhs.true.i
  %bf.load29.i = phi i32 [ 120, %land.lhs.true.i ], [ %bf.load39.i, %if.end.i ], [ %bf.load39.i, %if.end.i ], [ %bf.load39.i, %if.end.i ], [ %bf.load39.i, %if.end.i ], [ %bf.load39.i, %if.end.i ], [ %bf.load39.i, %if.end.i ], [ %bf.load39.i, %if.end.i ], [ %bf.load39.i, %if.end.i ]
  %bf.set31.i = and i32 %bf.load29.i, -4353
  %bf.clear35.i = or i32 %bf.set31.i, 256
  store i32 %bf.clear35.i, i32* %64, align 8
  br label %build1.exit

sw.bb36.i:                                        ; preds = %if.end.i
  %bf.clear40.i = and i32 %bf.load39.i, -4097
  store i32 %bf.clear40.i, i32* %64, align 8
  br label %build1.exit

sw.default.i:                                     ; preds = %if.end.i, %land.lhs.true.i
  %bf.load56.i = phi i32 [ 136, %land.lhs.true.i ], [ %bf.load39.i, %if.end.i ]
  %68 = load i8* %arrayidx, align 1, !tbaa !37
  %cmp43.i = icmp eq i8 %68, 49
  %or.cond.i = and i1 %cmp43.i, %tobool.i
  br i1 %or.cond.i, label %land.lhs.true47.i, label %build1.exit

land.lhs.true47.i:                                ; preds = %sw.default.i
  %constant_flag.i = getelementptr inbounds %union.tree_node* %call251, i64 0, i32 0, i32 0, i32 2
  %bf.load49.i = load i32* %constant_flag.i, align 8
  %bf.clear51.i = and i32 %bf.load49.i, 512
  %tobool52.i = icmp eq i32 %bf.clear51.i, 0
  br i1 %tobool52.i, label %build1.exit, label %if.then53.i

if.then53.i:                                      ; preds = %land.lhs.true47.i
  %bf.set58.i = or i32 %bf.load56.i, 512
  store i32 %bf.set58.i, i32* %64, align 8
  br label %build1.exit

build1.exit:                                      ; preds = %sw.bb.i, %sw.bb36.i, %sw.default.i, %land.lhs.true47.i, %if.then53.i
  %call262 = tail call %union.tree_node* @fold(%union.tree_node* %63) #4
  br label %sw.epilog266

sw.default263:                                    ; preds = %sw.bb149
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2188, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.substitute_in_expr, i64 0, i64 0)) #8
  unreachable

sw.default265:                                    ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2193, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.substitute_in_expr, i64 0, i64 0)) #8
  unreachable

sw.epilog266:                                     ; preds = %if.end203, %if.end242, %build1.exit, %build1.exit448, %if.end77, %if.end144
  %new.0 = phi %union.tree_node* [ %call262, %build1.exit ], [ %call246, %if.end242 ], [ %call210, %if.end203 ], [ %call148, %if.end144 ], [ %call81, %if.end77 ], [ %call46, %build1.exit448 ]
  %bf.load268 = load i32* %code1, align 8
  %bf.clear269 = and i32 %bf.load268, 4096
  %readonly_flag271 = getelementptr inbounds %union.tree_node* %new.0, i64 0, i32 0, i32 0, i32 2
  %bf.load272 = load i32* %readonly_flag271, align 8
  %bf.clear273 = and i32 %bf.load272, -4097
  %bf.set = or i32 %bf.clear273, %bf.clear269
  store i32 %bf.set, i32* %readonly_flag271, align 8
  br label %return

return:                                           ; preds = %sw.bb247, %land.lhs.true235, %if.end192, %land.lhs.true186, %land.lhs.true172, %land.lhs.true137, %sw.bb82, %if.then89, %land.lhs.true70, %sw.bb47, %if.end39, %sw.bb29, %land.lhs.true, %sw.bb2, %entry, %entry, %sw.epilog266, %if.end100, %if.end
  %retval.0 = phi %union.tree_node* [ %new.0, %sw.epilog266 ], [ %call106, %if.end100 ], [ %8, %if.end ], [ %exp, %entry ], [ %exp, %entry ], [ %exp, %sw.bb2 ], [ %exp, %land.lhs.true ], [ %exp, %sw.bb29 ], [ %call32, %if.end39 ], [ %exp, %sw.bb47 ], [ %exp, %land.lhs.true70 ], [ %exp, %sw.bb82 ], [ %exp, %if.then89 ], [ %exp, %land.lhs.true137 ], [ %r, %land.lhs.true172 ], [ %exp, %land.lhs.true186 ], [ %exp, %if.end192 ], [ %exp, %land.lhs.true235 ], [ %exp, %sw.bb247 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @stabilize_reference(%union.tree_node* %ref) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return [
    i32 0, label %sw.bb63
    i32 120, label %sw.bb55
    i32 47, label %sw.bb53
    i32 115, label %sw.bb2
    i32 114, label %sw.bb2
    i32 76, label %sw.bb2
    i32 72, label %sw.bb2
    i32 74, label %sw.bb2
    i32 75, label %sw.bb2
    i32 73, label %sw.bb2
    i32 41, label %sw.bb4
    i32 39, label %sw.bb10
    i32 40, label %sw.bb19
    i32 43, label %sw.bb33
    i32 44, label %sw.bb43
  ]

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %operands = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %call = tail call %union.tree_node* @stabilize_reference(%union.tree_node* %0)
  %call3 = tail call %union.tree_node* (i32, ...)* @build_nt(i32 %bf.clear, %union.tree_node* %call)
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %operands6 = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 2
  %arrayidx7 = bitcast i32* %operands6 to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx7, align 8, !tbaa !10
  %call8 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %1)
  %call9 = tail call %union.tree_node* (i32, ...)* @build_nt(i32 41, %union.tree_node* %call8)
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry
  %operands12 = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 2
  %arrayidx13 = bitcast i32* %operands12 to %union.tree_node**
  %2 = load %union.tree_node** %arrayidx13, align 8, !tbaa !10
  %call14 = tail call %union.tree_node* @stabilize_reference(%union.tree_node* %2)
  %arrayidx17 = getelementptr inbounds i32* %operands12, i64 2
  %3 = bitcast i32* %arrayidx17 to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !10
  %call18 = tail call %union.tree_node* (i32, ...)* @build_nt(i32 39, %union.tree_node* %call14, %union.tree_node* %4)
  br label %sw.epilog

sw.bb19:                                          ; preds = %entry
  %operands21 = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 2
  %arrayidx22 = bitcast i32* %operands21 to %union.tree_node**
  %5 = load %union.tree_node** %arrayidx22, align 8, !tbaa !10
  %call23 = tail call %union.tree_node* @stabilize_reference(%union.tree_node* %5)
  %arrayidx26 = getelementptr inbounds i32* %operands21, i64 2
  %6 = bitcast i32* %arrayidx26 to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !10
  %call27 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %7)
  %arrayidx30 = getelementptr inbounds i32* %operands21, i64 4
  %8 = bitcast i32* %arrayidx30 to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !10
  %call31 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %9)
  %call32 = tail call %union.tree_node* (i32, ...)* @build_nt(i32 40, %union.tree_node* %call23, %union.tree_node* %call27, %union.tree_node* %call31)
  br label %sw.epilog

sw.bb33:                                          ; preds = %entry
  %operands35 = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 2
  %arrayidx36 = bitcast i32* %operands35 to %union.tree_node**
  %10 = load %union.tree_node** %arrayidx36, align 8, !tbaa !10
  %call37 = tail call %union.tree_node* @stabilize_reference(%union.tree_node* %10)
  %arrayidx40 = getelementptr inbounds i32* %operands35, i64 2
  %11 = bitcast i32* %arrayidx40 to %union.tree_node**
  %12 = load %union.tree_node** %11, align 8, !tbaa !10
  %call41 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %12)
  %call42 = tail call %union.tree_node* (i32, ...)* @build_nt(i32 43, %union.tree_node* %call37, %union.tree_node* %call41)
  br label %sw.epilog

sw.bb43:                                          ; preds = %entry
  %operands45 = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 2
  %arrayidx46 = bitcast i32* %operands45 to %union.tree_node**
  %13 = load %union.tree_node** %arrayidx46, align 8, !tbaa !10
  %call47 = tail call %union.tree_node* @stabilize_reference(%union.tree_node* %13)
  %arrayidx50 = getelementptr inbounds i32* %operands45, i64 2
  %14 = bitcast i32* %arrayidx50 to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !10
  %call51 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %15)
  %call52 = tail call %union.tree_node* (i32, ...)* @build_nt(i32 44, %union.tree_node* %call47, %union.tree_node* %call51)
  br label %sw.epilog

sw.bb53:                                          ; preds = %entry
  %call54 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %ref)
  br label %return

sw.bb55:                                          ; preds = %entry
  %type = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 0, i32 1
  %16 = load %union.tree_node** %type, align 8, !tbaa !15
  %17 = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 8
  %18 = load %union.tree_node** %17, align 8, !tbaa !81
  %cmp.i142 = icmp eq %union.tree_node* %18, null
  br i1 %cmp.i142, label %if.end.i144, label %build_pointer_type.exit

if.end.i144:                                      ; preds = %sw.bb55
  %call.i143 = tail call %union.tree_node* @make_node(i32 13) #4
  %type1.i = getelementptr inbounds %union.tree_node* %call.i143, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %16, %union.tree_node** %type1.i, align 8, !tbaa !15
  store %union.tree_node* %call.i143, %union.tree_node** %17, align 8, !tbaa !81
  tail call void @layout_type(%union.tree_node* %call.i143) #4
  br label %build_pointer_type.exit

build_pointer_type.exit:                          ; preds = %sw.bb55, %if.end.i144
  %retval.0.i = phi %union.tree_node* [ %call.i143, %if.end.i144 ], [ %18, %sw.bb55 ]
  %call.i123 = tail call i8* @ggc_alloc(i64 40) #4
  %19 = bitcast i8* %call.i123 to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call.i123, i8 0, i64 24, i32 1, i1 false) #4
  %code1.i124 = getelementptr inbounds i8* %call.i123, i64 16
  %20 = bitcast i8* %code1.i124 to i32*
  store i32 121, i32* %20, align 8
  %type3.i125 = getelementptr inbounds i8* %call.i123, i64 8
  %21 = bitcast i8* %type3.i125 to %union.tree_node**
  store %union.tree_node* %retval.0.i, %union.tree_node** %21, align 8, !tbaa !15
  %complexity.i126 = getelementptr inbounds i8* %call.i123, i64 24
  %22 = bitcast i8* %complexity.i126 to i32*
  store i32 0, i32* %22, align 4, !tbaa !79
  %operands.i127 = getelementptr inbounds i8* %call.i123, i64 32
  %arrayidx.i128 = bitcast i8* %operands.i127 to %union.tree_node**
  store %union.tree_node* %ref, %union.tree_node** %arrayidx.i128, align 8, !tbaa !10
  %tobool.i129 = icmp eq %union.tree_node* %ref, null
  br i1 %tobool.i129, label %build1.exit141, label %land.lhs.true.i130

land.lhs.true.i130:                               ; preds = %build_pointer_type.exit
  %23 = load i32* getelementptr inbounds ([256 x i32]* @tree_code_length, i64 0, i64 121), align 4, !tbaa !38
  %cmp.i131 = icmp eq i32 %23, 0
  br i1 %cmp.i131, label %if.end.i, label %if.then.i139

if.then.i139:                                     ; preds = %land.lhs.true.i130
  %bf.load8.i133 = load i32* %code1, align 8
  %bf.clear9.i134 = and i32 %bf.load8.i133, 256
  %bf.set15.i135 = or i32 %bf.clear9.i134, 121
  store i32 %bf.set15.i135, i32* %20, align 8
  %bf.load17.i136 = load i32* %code1, align 8
  %bf.clear19.i137 = and i32 %bf.load17.i136, 4096
  %bf.set26.i138 = or i32 %bf.set15.i135, %bf.clear19.i137
  store i32 %bf.set26.i138, i32* %20, align 8
  %phitmp = or i32 %bf.set26.i138, 512
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i139, %land.lhs.true.i130
  %bf.load39.i140 = phi i32 [ 633, %land.lhs.true.i130 ], [ %phitmp, %if.then.i139 ]
  %24 = load i8* getelementptr inbounds ([256 x i8]* @tree_code_type, i64 0, i64 121), align 1, !tbaa !37
  %cmp43.i = icmp eq i8 %24, 49
  br i1 %cmp43.i, label %land.lhs.true47.i, label %build1.exit141

land.lhs.true47.i:                                ; preds = %if.end.i
  %bf.load49.i = load i32* %code1, align 8
  %bf.clear51.i = and i32 %bf.load49.i, 512
  %tobool52.i = icmp eq i32 %bf.clear51.i, 0
  br i1 %tobool52.i, label %build1.exit141, label %if.then53.i

if.then53.i:                                      ; preds = %land.lhs.true47.i
  store i32 %bf.load39.i140, i32* %20, align 8
  br label %build1.exit141

build1.exit141:                                   ; preds = %build_pointer_type.exit, %if.end.i, %land.lhs.true47.i, %if.then53.i
  %call61 = tail call %union.tree_node* @save_expr(%union.tree_node* %19)
  %call.i = tail call i8* @ggc_alloc(i64 40) #4
  %25 = bitcast i8* %call.i to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call.i, i8 0, i64 24, i32 1, i1 false) #4
  %code1.i = getelementptr inbounds i8* %call.i, i64 16
  %26 = bitcast i8* %code1.i to i32*
  store i32 41, i32* %26, align 8
  %type3.i = getelementptr inbounds i8* %call.i, i64 8
  %27 = bitcast i8* %type3.i to %union.tree_node**
  store %union.tree_node* %16, %union.tree_node** %27, align 8, !tbaa !15
  %complexity.i = getelementptr inbounds i8* %call.i, i64 24
  %28 = bitcast i8* %complexity.i to i32*
  store i32 0, i32* %28, align 4, !tbaa !79
  %operands.i = getelementptr inbounds i8* %call.i, i64 32
  %arrayidx.i = bitcast i8* %operands.i to %union.tree_node**
  store %union.tree_node* %call61, %union.tree_node** %arrayidx.i, align 8, !tbaa !10
  %tobool.i = icmp eq %union.tree_node* %call61, null
  %29 = load i32* getelementptr inbounds ([256 x i32]* @tree_code_length, i64 0, i64 41), align 4
  %cmp.i = icmp eq i32 %29, 0
  %or.cond = or i1 %tobool.i, %cmp.i
  br i1 %or.cond, label %build1.exit, label %if.then.i

if.then.i:                                        ; preds = %build1.exit141
  %side_effects_flag.i = getelementptr inbounds %union.tree_node* %call61, i64 0, i32 0, i32 0, i32 2
  %bf.load8.i = load i32* %side_effects_flag.i, align 8
  %bf.clear9.i = and i32 %bf.load8.i, 256
  %bf.set15.i = or i32 %bf.clear9.i, 41
  store i32 %bf.set15.i, i32* %26, align 8
  %bf.load17.i = load i32* %side_effects_flag.i, align 8
  %bf.clear19.i = and i32 %bf.load17.i, 4096
  %bf.set26.i = or i32 %bf.set15.i, %bf.clear19.i
  store i32 %bf.set26.i, i32* %26, align 8
  br label %build1.exit

build1.exit:                                      ; preds = %build1.exit141, %if.then.i
  %bf.load39.i = phi i32 [ %bf.set15.i, %if.then.i ], [ 41, %build1.exit141 ]
  store i32 %bf.load39.i, i32* %26, align 8
  br label %sw.epilog

sw.bb63:                                          ; preds = %entry
  %30 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  br label %return

sw.epilog:                                        ; preds = %build1.exit, %sw.bb43, %sw.bb33, %sw.bb19, %sw.bb10, %sw.bb4, %sw.bb2
  %result.0 = phi %union.tree_node* [ %25, %build1.exit ], [ %call52, %sw.bb43 ], [ %call42, %sw.bb33 ], [ %call32, %sw.bb19 ], [ %call18, %sw.bb10 ], [ %call9, %sw.bb4 ], [ %call3, %sw.bb2 ]
  %type65 = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 0, i32 1
  %31 = load %union.tree_node** %type65, align 8, !tbaa !15
  %type67 = getelementptr inbounds %union.tree_node* %result.0, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %31, %union.tree_node** %type67, align 8, !tbaa !15
  %bf.load69 = load i32* %code1, align 8
  %bf.clear70 = and i32 %bf.load69, 4096
  %readonly_flag72 = getelementptr inbounds %union.tree_node* %result.0, i64 0, i32 0, i32 0, i32 2
  %bf.load73 = load i32* %readonly_flag72, align 8
  %bf.clear74 = and i32 %bf.load73, -4097
  %bf.set = or i32 %bf.clear74, %bf.clear70
  store i32 %bf.set, i32* %readonly_flag72, align 8
  %bf.load76 = load i32* %code1, align 8
  %bf.clear78 = and i32 %bf.load76, 256
  %bf.clear84 = and i32 %bf.set, -257
  %bf.set85 = or i32 %bf.clear84, %bf.clear78
  store i32 %bf.set85, i32* %readonly_flag72, align 8
  %bf.load87 = load i32* %code1, align 8
  %bf.clear89 = and i32 %bf.load87, 2048
  %bf.clear95 = and i32 %bf.set85, -2049
  %bf.set96 = or i32 %bf.clear95, %bf.clear89
  store i32 %bf.set96, i32* %readonly_flag72, align 8
  br label %return

return:                                           ; preds = %entry, %sw.epilog, %sw.bb63, %sw.bb53
  %retval.0 = phi %union.tree_node* [ %30, %sw.bb63 ], [ %result.0, %sw.epilog ], [ %call54, %sw.bb53 ], [ %ref, %entry ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_nt(i32 %code, ...) #0 {
entry:
  %p = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %p to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %call = call %union.tree_node* @make_node(i32 %code)
  %idxprom = sext i32 %code to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !38
  %cmp11 = icmp sgt i32 %0, 0
  br i1 %cmp11, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %operands = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %2 = bitcast i32* %operands to [1 x %union.tree_node*]*
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  br label %for.body

for.body:                                         ; preds = %vaarg.end, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %vaarg.end ]
  %gp_offset = load i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %for.body
  %reg_save_area = load i8** %1, align 16
  %3 = sext i32 %gp_offset to i64
  %4 = getelementptr i8* %reg_save_area, i64 %3
  %5 = add i32 %gp_offset, 8
  store i32 %5, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %4, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to %union.tree_node**
  %6 = load %union.tree_node** %vaarg.addr, align 8
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*]* %2, i64 0, i64 %indvars.iv
  store %union.tree_node* %6, %union.tree_node** %arrayidx4, align 8, !tbaa !10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %0
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %vaarg.end, %entry
  call void @llvm.va_end(i8* %arraydecay1)
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @stabilize_reference_1(%union.tree_node* %e) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %e, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear4 = and i32 %bf.load, 512
  %tobool = icmp ne i32 %bf.clear4, 0
  %cmp = icmp eq i32 %bf.clear, 118
  %or.cond = or i1 %tobool, %cmp
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %idxprom122 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom122
  %0 = load i8* %arrayidx, align 1, !tbaa !37
  %conv = sext i8 %0 to i32
  switch i32 %conv, label %sw.default [
    i32 120, label %sw.bb
    i32 116, label %sw.bb
    i32 100, label %sw.bb
    i32 98, label %sw.bb
    i32 60, label %sw.bb
    i32 115, label %sw.bb
    i32 101, label %sw.bb
    i32 114, label %sw.bb
    i32 99, label %return
    i32 50, label %sw.bb13
    i32 49, label %sw.bb47
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %bf.clear8 = and i32 %bf.load, 256
  %tobool9 = icmp eq i32 %bf.clear8, 0
  br i1 %tobool9, label %return, label %if.then10

if.then10:                                        ; preds = %sw.bb
  %call = tail call %union.tree_node* @save_expr(%union.tree_node* %e)
  br label %return

sw.bb13:                                          ; preds = %if.end
  %bf.clear.off = add i32 %bf.clear, -62
  %switch = icmp ult i32 %bf.clear.off, 8
  br i1 %switch, label %if.then37, label %if.end39

if.then37:                                        ; preds = %sw.bb13
  %call38 = tail call %union.tree_node* @save_expr(%union.tree_node* %e)
  br label %return

if.end39:                                         ; preds = %sw.bb13
  %operands = getelementptr inbounds %union.tree_node* %e, i64 0, i32 0, i32 2
  %arrayidx40 = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx40, align 8, !tbaa !10
  %call41 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %1)
  %arrayidx44 = getelementptr inbounds i32* %operands, i64 2
  %2 = bitcast i32* %arrayidx44 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !10
  %call45 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %3)
  %call46 = tail call %union.tree_node* (i32, ...)* @build_nt(i32 %bf.clear, %union.tree_node* %call41, %union.tree_node* %call45)
  br label %sw.epilog

sw.bb47:                                          ; preds = %if.end
  %operands49 = getelementptr inbounds %union.tree_node* %e, i64 0, i32 0, i32 2
  %arrayidx50 = bitcast i32* %operands49 to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx50, align 8, !tbaa !10
  %call51 = tail call %union.tree_node* @stabilize_reference_1(%union.tree_node* %4)
  %call52 = tail call %union.tree_node* (i32, ...)* @build_nt(i32 %bf.clear, %union.tree_node* %call51)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2364, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.stabilize_reference_1, i64 0, i64 0)) #8
  unreachable

sw.epilog:                                        ; preds = %sw.bb47, %if.end39
  %result.0 = phi %union.tree_node* [ %call52, %sw.bb47 ], [ %call46, %if.end39 ]
  %type = getelementptr inbounds %union.tree_node* %e, i64 0, i32 0, i32 0, i32 1
  %5 = load %union.tree_node** %type, align 8, !tbaa !15
  %type55 = getelementptr inbounds %union.tree_node* %result.0, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %5, %union.tree_node** %type55, align 8, !tbaa !15
  %bf.load57 = load i32* %code1, align 8
  %bf.clear59 = and i32 %bf.load57, 4096
  %readonly_flag61 = getelementptr inbounds %union.tree_node* %result.0, i64 0, i32 0, i32 0, i32 2
  %bf.load62 = load i32* %readonly_flag61, align 8
  %bf.clear63 = and i32 %bf.load62, -4097
  %bf.set = or i32 %bf.clear63, %bf.clear59
  store i32 %bf.set, i32* %readonly_flag61, align 8
  %bf.load66 = load i32* %code1, align 8
  %bf.clear68 = and i32 %bf.load66, 256
  %bf.clear74 = and i32 %bf.set, -257
  %bf.set75 = or i32 %bf.clear74, %bf.clear68
  store i32 %bf.set75, i32* %readonly_flag61, align 8
  %bf.load77 = load i32* %code1, align 8
  %bf.clear79 = and i32 %bf.load77, 2048
  %bf.clear85 = and i32 %bf.set75, -2049
  %bf.set86 = or i32 %bf.clear85, %bf.clear79
  store i32 %bf.set86, i32* %readonly_flag61, align 8
  br label %return

return:                                           ; preds = %if.end, %sw.bb, %entry, %sw.epilog, %if.then37, %if.then10
  %retval.0 = phi %union.tree_node* [ %result.0, %sw.epilog ], [ %call38, %if.then37 ], [ %call, %if.then10 ], [ %e, %entry ], [ %e, %sw.bb ], [ %e, %if.end ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_pointer_type(%union.tree_node* %to_type) #0 {
entry:
  %0 = getelementptr inbounds %union.tree_node* %to_type, i64 0, i32 0, i32 8
  %1 = load %union.tree_node** %0, align 8, !tbaa !81
  %cmp = icmp eq %union.tree_node* %1, null
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call = tail call %union.tree_node* @make_node(i32 13)
  %type1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %to_type, %union.tree_node** %type1, align 8, !tbaa !15
  store %union.tree_node* %call, %union.tree_node** %0, align 8, !tbaa !81
  tail call void @layout_type(%union.tree_node* %call) #4
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %call, %if.end ], [ %1, %entry ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_decl(i32 %code, %union.tree_node* %name, %union.tree_node* %type) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 %code)
  %name1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 8
  store %union.tree_node* %name, %union.tree_node** %name1, align 8, !tbaa !1
  %type2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type2, align 8, !tbaa !15
  switch i32 %code, label %if.end9 [
    i32 36, label %if.then
    i32 35, label %if.then
    i32 34, label %if.then
    i32 30, label %if.then7
  ]

if.then:                                          ; preds = %entry, %entry, %entry
  tail call void @layout_decl(%union.tree_node* %call, i32 0) #4
  br label %if.end9

if.then7:                                         ; preds = %entry
  %mode = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 5
  %0 = bitcast i48* %mode to i64*
  %bf.load = load i64* %0, align 8
  %bf.clear = and i64 %bf.load, -256
  %bf.set = or i64 %bf.clear, 2
  store i64 %bf.set, i64* %0, align 8
  br label %if.end9

if.end9:                                          ; preds = %entry, %if.then7, %if.then
  ret %union.tree_node* %call
}

declare void @layout_decl(%union.tree_node*, i32) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_block(%union.tree_node* %vars, %union.tree_node* nocapture readnone %tags, %union.tree_node* %subblocks, %union.tree_node* %supercontext, %union.tree_node* %chain) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 4)
  %vars2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %0 = bitcast i32* %vars2 to %union.tree_node**
  store %union.tree_node* %vars, %union.tree_node** %0, align 8, !tbaa !82
  %1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 4
  store %union.tree_node* %subblocks, %union.tree_node** %1, align 8, !tbaa !84
  %supercontext6 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 5
  %2 = bitcast i48* %supercontext6 to %union.tree_node**
  store %union.tree_node* %supercontext, %union.tree_node** %2, align 8, !tbaa !85
  %chain7 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %chain, %union.tree_node** %chain7, align 8, !tbaa !27
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_expr_wfl(%union.tree_node* %node, i8* %file, i32 %line, i32 %col) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 144)
  %operands = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  store %union.tree_node* %node, %union.tree_node** %arrayidx, align 8, !tbaa !10
  %shl = shl i32 %line, 12
  %and = and i32 %col, 4095
  %or = or i32 %and, %shl
  %complexity = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 1
  %0 = bitcast i8** %complexity to i32*
  store i32 %or, i32* %0, align 4, !tbaa !79
  %1 = load i8** @build_expr_wfl.last_file, align 8, !tbaa !10
  %cmp = icmp eq i8* %1, %file
  br i1 %cmp, label %entry.if.end_crit_edge, label %if.then

entry.if.end_crit_edge:                           ; preds = %entry
  %.pre = load %union.tree_node** @build_expr_wfl.last_filenode, align 8, !tbaa !10
  br label %if.end

if.then:                                          ; preds = %entry
  store i8* %file, i8** @build_expr_wfl.last_file, align 8, !tbaa !10
  %tobool = icmp eq i8* %file, null
  br i1 %tobool, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call2 = tail call %union.tree_node* @get_identifier(i8* %file) #4
  br label %cond.end

cond.end:                                         ; preds = %if.then, %cond.true
  %cond = phi %union.tree_node* [ %call2, %cond.true ], [ null, %if.then ]
  store %union.tree_node* %cond, %union.tree_node** @build_expr_wfl.last_filenode, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %cond.end
  %2 = phi %union.tree_node* [ %.pre, %entry.if.end_crit_edge ], [ %cond, %cond.end ]
  %arrayidx5 = getelementptr inbounds i32* %operands, i64 2
  %3 = bitcast i32* %arrayidx5 to %union.tree_node**
  store %union.tree_node* %2, %union.tree_node** %3, align 8, !tbaa !10
  %tobool6 = icmp eq %union.tree_node* %node, null
  br i1 %tobool6, label %if.end15, label %if.then7

if.then7:                                         ; preds = %if.end
  %side_effects_flag = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %side_effects_flag, align 8
  %bf.clear = and i32 %bf.load, 256
  %side_effects_flag9 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load10 = load i32* %side_effects_flag9, align 8
  %bf.clear11 = and i32 %bf.load10, -257
  %bf.set = or i32 %bf.clear11, %bf.clear
  store i32 %bf.set, i32* %side_effects_flag9, align 8
  %type = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type, align 8, !tbaa !15
  %type14 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %4, %union.tree_node** %type14, align 8, !tbaa !15
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then7
  ret %union.tree_node* %call
}

declare %union.tree_node* @get_identifier(i8*) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_decl_attribute_variant(%union.tree_node* %ddecl, %union.tree_node* %attribute) #0 {
entry:
  %attributes = getelementptr inbounds %union.tree_node* %ddecl, i64 0, i32 0, i32 16
  store %union.tree_node* %attribute, %union.tree_node** %attributes, align 8, !tbaa !86
  ret %union.tree_node* %ddecl
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_type_attribute_variant(%union.tree_node* readonly %ttype, %union.tree_node* %attribute) #0 {
entry:
  %in.i.i = alloca %struct.type_hash, align 8
  %type = bitcast %union.tree_node* %ttype to %struct.tree_type*
  %attributes = getelementptr inbounds %union.tree_node* %ttype, i64 0, i32 0, i32 5
  %0 = bitcast i48* %attributes to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !16
  %call.i = call i32 @attribute_list_contained(%union.tree_node* %1, %union.tree_node* %attribute) #4
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %if.then, label %land.rhs.i

land.rhs.i:                                       ; preds = %entry
  %call1.i = call i32 @attribute_list_contained(%union.tree_node* %attribute, %union.tree_node* %1) #4
  %tobool2.i = icmp eq i32 %call1.i, 0
  br i1 %tobool2.i, label %if.then, label %if.end

if.then:                                          ; preds = %land.rhs.i, %entry
  %call1 = call %union.tree_node* @copy_node(%union.tree_node* %ttype)
  %2 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 8
  %attributes5 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 5
  %3 = bitcast i48* %attributes5 to %union.tree_node**
  %4 = bitcast %union.tree_node** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 16, i32 8, i1 false)
  store %union.tree_node* %attribute, %union.tree_node** %3, align 8, !tbaa !16
  %5 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 15
  store %union.tree_node* %call1, %union.tree_node** %5, align 8, !tbaa !46
  %6 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 14
  store %union.tree_node* null, %union.tree_node** %6, align 8, !tbaa !87
  %readonly_flag.i = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %readonly_flag.i, align 8
  %bf.clear.i = and i32 %bf.load.i, -6145
  store i32 %bf.clear.i, i32* %readonly_flag.i, align 8
  %type13.i = bitcast %union.tree_node* %call1 to %struct.tree_type*
  %restrict_flag.i = getelementptr inbounds %struct.tree_type* %type13.i, i64 0, i32 6
  %bf.load14.i = load i32* %restrict_flag.i, align 4
  %bf.clear17.i = and i32 %bf.load14.i, -2097153
  store i32 %bf.clear17.i, i32* %restrict_flag.i, align 4
  %conv = zext i32 %bf.load.i to i64
  %and = and i64 %conv, 255
  %type9 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type9, align 8, !tbaa !15
  %8 = ptrtoint %union.tree_node* %7 to i64
  %and10 = and i64 %8, 262143
  %add = add i64 %and10, %and
  %tobool6.i = icmp eq %union.tree_node* %attribute, null
  br i1 %tobool6.i, label %attribute_hash_list.exit, label %for.body.i

for.body.i:                                       ; preds = %if.then, %for.body.i
  %tail.08.i = phi %union.tree_node* [ %11, %for.body.i ], [ %attribute, %if.then ]
  %hashcode.07.i = phi i64 [ %add.i, %for.body.i ], [ 0, %if.then ]
  %purpose.i = getelementptr inbounds %union.tree_node* %tail.08.i, i64 0, i32 0, i32 1
  %9 = load i8** %purpose.i, align 8
  %10 = ptrtoint i8* %9 to i64
  %and.i = and i64 %10, 262143
  %conv.i = and i64 %hashcode.07.i, 4294967295
  %add.i = add i64 %and.i, %conv.i
  %chain.i = getelementptr inbounds %union.tree_node* %tail.08.i, i64 0, i32 0, i32 0, i32 0
  %11 = load %union.tree_node** %chain.i, align 8, !tbaa !27
  %tobool.i100 = icmp eq %union.tree_node* %11, null
  br i1 %tobool.i100, label %for.cond.for.end_crit_edge.i, label %for.body.i

for.cond.for.end_crit_edge.i:                     ; preds = %for.body.i
  %fold = add i64 %and.i, %hashcode.07.i
  %phitmp = and i64 %fold, 4294967295
  br label %attribute_hash_list.exit

attribute_hash_list.exit:                         ; preds = %if.then, %for.cond.for.end_crit_edge.i
  %hashcode.0.lcssa.i = phi i64 [ %phitmp, %for.cond.for.end_crit_edge.i ], [ 0, %if.then ]
  %add13 = add i64 %add, %hashcode.0.lcssa.i
  %bf.clear18 = and i32 %bf.load.i, 255
  switch i32 %bf.clear18, label %sw.epilog [
    i32 23, label %sw.bb
    i32 18, label %sw.bb24
    i32 6, label %sw.bb31
    i32 7, label %sw.bb37
  ]

sw.bb:                                            ; preds = %attribute_hash_list.exit
  %values = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 1
  %12 = load i8** %values, align 8
  %13 = ptrtoint i8* %12 to i64
  %and20 = and i64 %13, 262143
  %add22 = add i64 %and20, %add13
  br label %sw.epilog

sw.bb24:                                          ; preds = %attribute_hash_list.exit
  %values26 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 1
  %14 = load i8** %values26, align 8
  %15 = ptrtoint i8* %14 to i64
  %and27 = and i64 %15, 262143
  %add29 = add i64 %and27, %add13
  br label %sw.epilog

sw.bb31:                                          ; preds = %attribute_hash_list.exit
  %16 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 13
  %17 = load %union.tree_node** %16, align 8, !tbaa !19
  %18 = ptrtoint %union.tree_node* %17 to i64
  %and33 = and i64 %18, 262143
  %add35 = add i64 %and33, %add13
  br label %sw.epilog

sw.bb37:                                          ; preds = %attribute_hash_list.exit
  %conv41 = zext i32 %bf.load14.i to i64
  %and42 = and i64 %conv41, 511
  %add44 = add i64 %and42, %add13
  br label %sw.epilog

sw.epilog:                                        ; preds = %attribute_hash_list.exit, %sw.bb37, %sw.bb31, %sw.bb24, %sw.bb
  %hashcode.0.in = phi i64 [ %add13, %attribute_hash_list.exit ], [ %add44, %sw.bb37 ], [ %add35, %sw.bb31 ], [ %add29, %sw.bb24 ], [ %add22, %sw.bb ]
  %hashcode.0 = trunc i64 %hashcode.0.in to i32
  %19 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool.i101 = icmp eq i32 %19, 0
  br i1 %tobool.i101, label %if.end.i, label %type_hash_canon.exit

if.end.i:                                         ; preds = %sw.epilog
  %20 = bitcast %struct.type_hash* %in.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %20) #4
  call void @layout_type(%union.tree_node* %call1) #4
  %conv.i.i = and i64 %hashcode.0.in, 4294967295
  %hash.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 0
  store i64 %conv.i.i, i64* %hash.i.i, align 8, !tbaa !11
  %type1.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 1
  store %union.tree_node* %call1, %union.tree_node** %type1.i.i, align 8, !tbaa !14
  %21 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i.i = call i8* @htab_find_with_hash(%struct.htab* %21, i8* %20, i32 %hashcode.0) #4
  %tobool.i.i = icmp eq i8* %call.i.i, null
  br i1 %tobool.i.i, label %if.else.i, label %type_hash_lookup.exit.i

type_hash_lookup.exit.i:                          ; preds = %if.end.i
  %type2.i.i = getelementptr inbounds i8* %call.i.i, i64 8
  %22 = bitcast i8* %type2.i.i to %union.tree_node**
  %23 = load %union.tree_node** %22, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %20) #4
  %cmp.i = icmp eq %union.tree_node* %23, null
  br i1 %cmp.i, label %if.else.i, label %type_hash_canon.exit

if.else.i:                                        ; preds = %type_hash_lookup.exit.i, %if.end.i
  %call.i7.i = call i8* @ggc_alloc(i64 16) #4
  %hash.i9.i = bitcast i8* %call.i7.i to i64*
  store i64 %conv.i.i, i64* %hash.i9.i, align 8, !tbaa !11
  %type1.i10.i = getelementptr inbounds i8* %call.i7.i, i64 8
  %24 = bitcast i8* %type1.i10.i to %union.tree_node**
  store %union.tree_node* %call1, %union.tree_node** %24, align 8, !tbaa !14
  %25 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %25, i8* %call.i7.i, i32 %hashcode.0, i32 1) #4
  store i8* %call.i7.i, i8** %call2.i.i, align 8, !tbaa !10
  br label %type_hash_canon.exit

type_hash_canon.exit:                             ; preds = %sw.epilog, %type_hash_lookup.exit.i, %if.else.i
  %retval.0.i = phi %union.tree_node* [ %call1, %if.else.i ], [ %call1, %sw.epilog ], [ %23, %type_hash_lookup.exit.i ]
  %readonly_flag = getelementptr inbounds %union.tree_node* %ttype, i64 0, i32 0, i32 0, i32 2
  %bf.load48 = load i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load48, 12
  %bf.clear49 = and i32 %bf.lshr, 1
  %26 = lshr i32 %bf.load48, 10
  %mul54 = and i32 %26, 2
  %or = or i32 %bf.clear49, %mul54
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type, i64 0, i32 6
  %bf.load56 = load i32* %restrict_flag, align 4
  %27 = lshr i32 %bf.load56, 19
  %mul59 = and i32 %27, 4
  %or60 = or i32 %or, %mul59
  %bf.clear64 = and i32 %bf.load48, 255
  %cmp = icmp eq i32 %bf.clear64, 20
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %type_hash_canon.exit
  %type67 = getelementptr inbounds %union.tree_node* %ttype, i64 0, i32 0, i32 0, i32 1
  %28 = load %union.tree_node** %type67, align 8, !tbaa !15
  %tobool68 = icmp ne %union.tree_node* %28, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %type_hash_canon.exit
  %29 = phi i1 [ false, %type_hash_canon.exit ], [ %tobool68, %land.rhs ]
  %land.ext = zext i1 %29 to i32
  %mul69 = shl nuw nsw i32 %land.ext, 3
  %or70 = or i32 %or60, %mul69
  %call71 = call %union.tree_node* @build_qualified_type(%union.tree_node* %retval.0.i, i32 %or70)
  br label %if.end

if.end:                                           ; preds = %land.rhs.i, %land.end
  %ttype.addr.0 = phi %union.tree_node* [ %ttype, %land.rhs.i ], [ %call71, %land.end ]
  ret %union.tree_node* %ttype.addr.0
}

; Function Attrs: nounwind uwtable
define i32 @attribute_list_equal(%union.tree_node* %l1, %union.tree_node* %l2) #0 {
entry:
  %call = tail call i32 @attribute_list_contained(%union.tree_node* %l1, %union.tree_node* %l2)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %call1 = tail call i32 @attribute_list_contained(%union.tree_node* %l2, %union.tree_node* %l1)
  %tobool2 = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %0 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind readonly uwtable
define i32 @attribute_hash_list(%union.tree_node* readonly %list) #3 {
entry:
  %tobool6 = icmp eq %union.tree_node* %list, null
  br i1 %tobool6, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %tail.08 = phi %union.tree_node* [ %2, %for.body ], [ %list, %entry ]
  %hashcode.07 = phi i64 [ %add, %for.body ], [ 0, %entry ]
  %purpose = getelementptr inbounds %union.tree_node* %tail.08, i64 0, i32 0, i32 1
  %0 = load i8** %purpose, align 8
  %1 = ptrtoint i8* %0 to i64
  %and = and i64 %1, 262143
  %conv = and i64 %hashcode.07, 4294967295
  %add = add i64 %and, %conv
  %chain = getelementptr inbounds %union.tree_node* %tail.08, i64 0, i32 0, i32 0, i32 0
  %2 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %2, null
  br i1 %tobool, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %conv2 = trunc i64 %add to i32
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %hashcode.0.lcssa = phi i32 [ %conv2, %for.cond.for.end_crit_edge ], [ 0, %entry ]
  ret i32 %hashcode.0.lcssa
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @type_hash_canon(i32 %hashcode, %union.tree_node* %type) #0 {
entry:
  %in.i = alloca %struct.type_hash, align 8
  %0 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %1 = bitcast %struct.type_hash* %in.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %1) #4
  call void @layout_type(%union.tree_node* %type) #4
  %conv.i = zext i32 %hashcode to i64
  %hash.i = getelementptr inbounds %struct.type_hash* %in.i, i64 0, i32 0
  store i64 %conv.i, i64* %hash.i, align 8, !tbaa !11
  %type1.i = getelementptr inbounds %struct.type_hash* %in.i, i64 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type1.i, align 8, !tbaa !14
  %2 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i = call i8* @htab_find_with_hash(%struct.htab* %2, i8* %1, i32 %hashcode) #4
  %tobool.i = icmp eq i8* %call.i, null
  br i1 %tobool.i, label %if.else, label %type_hash_lookup.exit

type_hash_lookup.exit:                            ; preds = %if.end
  %type2.i = getelementptr inbounds i8* %call.i, i64 8
  %3 = bitcast i8* %type2.i to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %1) #4
  %cmp = icmp eq %union.tree_node* %4, null
  br i1 %cmp, label %if.else, label %return

if.else:                                          ; preds = %if.end, %type_hash_lookup.exit
  %call.i7 = call i8* @ggc_alloc(i64 16) #4
  %hash.i9 = bitcast i8* %call.i7 to i64*
  store i64 %conv.i, i64* %hash.i9, align 8, !tbaa !11
  %type1.i10 = getelementptr inbounds i8* %call.i7, i64 8
  %5 = bitcast i8* %type1.i10 to %union.tree_node**
  store %union.tree_node* %type, %union.tree_node** %5, align 8, !tbaa !14
  %6 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i = call i8** @htab_find_slot_with_hash(%struct.htab* %6, i8* %call.i7, i32 %hashcode, i32 1) #4
  store i8* %call.i7, i8** %call2.i, align 8, !tbaa !10
  br label %return

return:                                           ; preds = %type_hash_lookup.exit, %entry, %if.else
  %retval.0 = phi %union.tree_node* [ %type, %if.else ], [ %type, %entry ], [ %4, %type_hash_lookup.exit ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_qualified_type(%union.tree_node* nocapture readonly %type, i32 %type_quals) #0 {
entry:
  %0 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %t.036.i = load %union.tree_node** %0, align 8
  %tobool37.i = icmp eq %union.tree_node* %t.036.i, null
  br i1 %tobool37.i, label %if.then, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 11
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %t.038.i = phi %union.tree_node* [ %t.036.i, %for.body.lr.ph.i ], [ %t.0.i, %for.inc.i ]
  %readonly_flag.i = getelementptr inbounds %union.tree_node* %t.038.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %readonly_flag.i, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 12
  %bf.clear.i = and i32 %bf.lshr.i, 1
  %2 = lshr i32 %bf.load.i, 10
  %mul6.i = and i32 %2, 2
  %or.i = or i32 %bf.clear.i, %mul6.i
  %type7.i = bitcast %union.tree_node* %t.038.i to %struct.tree_type*
  %restrict_flag.i = getelementptr inbounds %struct.tree_type* %type7.i, i64 0, i32 6
  %bf.load8.i = load i32* %restrict_flag.i, align 4
  %3 = lshr i32 %bf.load8.i, 19
  %mul11.i = and i32 %3, 4
  %or12.i = or i32 %or.i, %mul11.i
  %bf.clear15.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear15.i, 20
  br i1 %cmp.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %for.body.i
  %type17.i = getelementptr inbounds %union.tree_node* %t.038.i, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type17.i, align 8, !tbaa !15
  %tobool18.i = icmp ne %union.tree_node* %4, null
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %for.body.i
  %5 = phi i1 [ false, %for.body.i ], [ %tobool18.i, %land.rhs.i ]
  %land.ext.i = zext i1 %5 to i32
  %mul19.i = shl nuw nsw i32 %land.ext.i, 3
  %or20.i = or i32 %or12.i, %mul19.i
  %cmp21.i = icmp eq i32 %or20.i, %type_quals
  br i1 %cmp21.i, label %land.lhs.true.i, label %for.inc.i

land.lhs.true.i:                                  ; preds = %land.end.i
  %6 = getelementptr inbounds %union.tree_node* %t.038.i, i64 0, i32 0, i32 11
  %7 = load %union.tree_node** %6, align 8, !tbaa !68
  %8 = load %union.tree_node** %1, align 8, !tbaa !68
  %cmp25.i = icmp eq %union.tree_node* %7, %8
  br i1 %cmp25.i, label %get_qualified_type.exit, label %for.inc.i

for.inc.i:                                        ; preds = %land.lhs.true.i, %land.end.i
  %9 = getelementptr inbounds %union.tree_node* %t.038.i, i64 0, i32 0, i32 14
  %t.0.i = load %union.tree_node** %9, align 8
  %tobool.i = icmp eq %union.tree_node* %t.0.i, null
  br i1 %tobool.i, label %if.then, label %for.body.i

get_qualified_type.exit:                          ; preds = %land.lhs.true.i
  %tobool = icmp eq %union.tree_node* %t.038.i, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.inc.i, %entry, %get_qualified_type.exit
  %call.i = tail call %union.tree_node* @copy_node(%union.tree_node* %type) #4
  %10 = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 8
  %11 = getelementptr inbounds %union.tree_node* %t.036.i, i64 0, i32 0, i32 14
  %12 = bitcast %union.tree_node** %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 16, i32 8, i1 false) #4
  %13 = load %union.tree_node** %11, align 8, !tbaa !87
  %14 = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 14
  store %union.tree_node* %13, %union.tree_node** %14, align 8, !tbaa !87
  store %union.tree_node* %call.i, %union.tree_node** %11, align 8, !tbaa !87
  %readonly_flag.i6 = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i7 = load i32* %readonly_flag.i6, align 8
  %bf.value.i = shl i32 %type_quals, 12
  %bf.shl.i = and i32 %bf.value.i, 4096
  %bf.clear.i8 = and i32 %bf.load.i7, -6145
  %15 = shl i32 %type_quals, 10
  %bf.shl7.i = and i32 %15, 2048
  %bf.set.i = or i32 %bf.shl7.i, %bf.shl.i
  %bf.set9.i = or i32 %bf.set.i, %bf.clear.i8
  store i32 %bf.set9.i, i32* %readonly_flag.i6, align 8
  %type13.i = bitcast %union.tree_node* %call.i to %struct.tree_type*
  %restrict_flag.i9 = getelementptr inbounds %struct.tree_type* %type13.i, i64 0, i32 6
  %bf.load14.i = load i32* %restrict_flag.i9, align 4
  %16 = shl i32 %type_quals, 19
  %bf.shl16.i = and i32 %16, 2097152
  %bf.clear17.i = and i32 %bf.load14.i, -2097153
  %bf.set18.i = or i32 %bf.clear17.i, %bf.shl16.i
  store i32 %bf.set18.i, i32* %restrict_flag.i9, align 4
  br label %if.end

if.end:                                           ; preds = %get_qualified_type.exit, %if.then
  %t.0 = phi %union.tree_node* [ %t.038.i, %get_qualified_type.exit ], [ %call.i, %if.then ]
  ret %union.tree_node* %t.0
}

; Function Attrs: nounwind readnone uwtable
define i32 @default_comp_type_attributes(%union.tree_node* nocapture readnone %type1, %union.tree_node* nocapture readnone %type2) #5 {
entry:
  ret i32 1
}

; Function Attrs: nounwind readnone uwtable
define void @default_set_default_type_attributes(%union.tree_node* nocapture %type) #5 {
entry:
  ret void
}

; Function Attrs: nounwind readnone uwtable
define void @default_insert_attributes(%union.tree_node* nocapture %decl, %union.tree_node** nocapture %attr_ptr) #5 {
entry:
  ret void
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @default_function_attribute_inlinable_p(%union.tree_node* nocapture readnone %fndecl) #5 {
entry:
  ret i1 false
}

; Function Attrs: nounwind readnone uwtable
define zeroext i1 @default_ms_bitfield_layout_p(%union.tree_node* nocapture readnone %record) #5 {
entry:
  ret i1 false
}

; Function Attrs: nounwind uwtable
define i32 @is_attribute_p(i8* nocapture readonly %attr, %union.tree_node* nocapture readonly %ident) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %ident, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 1
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %id = getelementptr inbounds %union.tree_node* %ident, i64 0, i32 0, i32 1
  %0 = getelementptr inbounds i8** %id, i64 1
  %1 = load i8** %0, align 8, !tbaa !88
  %call = tail call i32 @strcmp(i8* %attr, i8* %1) #4
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %call7 = tail call i64 @strlen(i8* %1) #4
  %conv = trunc i64 %call7 to i32
  %call8 = tail call i64 @strlen(i8* %attr) #4
  %conv9 = trunc i64 %call8 to i32
  %2 = load i8* %attr, align 1, !tbaa !37
  %cmp11 = icmp eq i8 %2, 95
  br i1 %cmp11, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.end3
  %arrayidx14 = getelementptr inbounds i8* %attr, i64 1
  %3 = load i8* %arrayidx14, align 1, !tbaa !37
  %cmp16 = icmp eq i8 %3, 95
  br i1 %cmp16, label %lor.lhs.false, label %if.then29

lor.lhs.false:                                    ; preds = %if.then13
  %sub = shl i64 %call8, 32
  %sext101 = add i64 %sub, -8589934592
  %idxprom = ashr exact i64 %sext101, 32
  %arrayidx18 = getelementptr inbounds i8* %attr, i64 %idxprom
  %4 = load i8* %arrayidx18, align 1, !tbaa !37
  %cmp20 = icmp eq i8 %4, 95
  br i1 %cmp20, label %lor.lhs.false22, label %if.then29

lor.lhs.false22:                                  ; preds = %lor.lhs.false
  %sext102 = add i64 %sub, -4294967296
  %idxprom24 = ashr exact i64 %sext102, 32
  %arrayidx25 = getelementptr inbounds i8* %attr, i64 %idxprom24
  %5 = load i8* %arrayidx25, align 1, !tbaa !37
  %cmp27 = icmp eq i8 %5, 95
  br i1 %cmp27, label %if.end30, label %if.then29

if.then29:                                        ; preds = %lor.lhs.false22, %lor.lhs.false, %if.then13
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2815, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.is_attribute_p, i64 0, i64 0)) #8
  unreachable

if.end30:                                         ; preds = %lor.lhs.false22
  %sub31 = add nsw i32 %conv9, -4
  %cmp32 = icmp eq i32 %conv, %sub31
  br i1 %cmp32, label %land.lhs.true, label %if.end75

land.lhs.true:                                    ; preds = %if.end30
  %add.ptr = getelementptr inbounds i8* %attr, i64 2
  %sext103 = shl i64 %call7, 32
  %conv35 = ashr exact i64 %sext103, 32
  %call36 = tail call i32 @strncmp(i8* %add.ptr, i8* %1, i64 %conv35) #4
  %cmp37 = icmp eq i32 %call36, 0
  br i1 %cmp37, label %return, label %if.end75

if.else:                                          ; preds = %if.end3
  %add = add nsw i32 %conv9, 4
  %cmp41 = icmp eq i32 %conv, %add
  br i1 %cmp41, label %land.lhs.true43, label %if.end75

land.lhs.true43:                                  ; preds = %if.else
  %6 = load i8* %1, align 1, !tbaa !37
  %cmp46 = icmp eq i8 %6, 95
  br i1 %cmp46, label %land.lhs.true48, label %if.end75

land.lhs.true48:                                  ; preds = %land.lhs.true43
  %arrayidx49 = getelementptr inbounds i8* %1, i64 1
  %7 = load i8* %arrayidx49, align 1, !tbaa !37
  %cmp51 = icmp eq i8 %7, 95
  br i1 %cmp51, label %land.lhs.true53, label %if.end75

land.lhs.true53:                                  ; preds = %land.lhs.true48
  %sub54 = shl i64 %call7, 32
  %sext = add i64 %sub54, -8589934592
  %idxprom55 = ashr exact i64 %sext, 32
  %arrayidx56 = getelementptr inbounds i8* %1, i64 %idxprom55
  %8 = load i8* %arrayidx56, align 1, !tbaa !37
  %cmp58 = icmp eq i8 %8, 95
  br i1 %cmp58, label %land.lhs.true60, label %if.end75

land.lhs.true60:                                  ; preds = %land.lhs.true53
  %sext99 = add i64 %sub54, -4294967296
  %idxprom62 = ashr exact i64 %sext99, 32
  %arrayidx63 = getelementptr inbounds i8* %1, i64 %idxprom62
  %9 = load i8* %arrayidx63, align 1, !tbaa !37
  %cmp65 = icmp eq i8 %9, 95
  br i1 %cmp65, label %land.lhs.true67, label %if.end75

land.lhs.true67:                                  ; preds = %land.lhs.true60
  %add.ptr68 = getelementptr inbounds i8* %1, i64 2
  %sext100 = shl i64 %call8, 32
  %conv69 = ashr exact i64 %sext100, 32
  %call70 = tail call i32 @strncmp(i8* %attr, i8* %add.ptr68, i64 %conv69) #4
  %cmp71 = icmp eq i32 %call70, 0
  br i1 %cmp71, label %return, label %if.end75

if.end75:                                         ; preds = %if.else, %land.lhs.true43, %land.lhs.true48, %land.lhs.true53, %land.lhs.true60, %land.lhs.true67, %if.end30, %land.lhs.true
  br label %return

return:                                           ; preds = %land.lhs.true67, %land.lhs.true, %if.end, %entry, %if.end75
  %retval.0 = phi i32 [ 0, %if.end75 ], [ 0, %entry ], [ 1, %if.end ], [ 1, %land.lhs.true ], [ 1, %land.lhs.true67 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #6

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #6

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) #6

; Function Attrs: nounwind uwtable
define %union.tree_node* @lookup_attribute(i8* nocapture readonly %attr_name, %union.tree_node* readonly %list) #0 {
entry:
  %tobool11 = icmp eq %union.tree_node* %list, null
  br i1 %tobool11, label %return, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %l.012 = phi %union.tree_node* [ %3, %for.inc ], [ %list, %entry ]
  %purpose = getelementptr inbounds %union.tree_node* %l.012, i64 0, i32 0, i32 1
  %0 = load i8** %purpose, align 8
  %code = getelementptr inbounds i8* %0, i64 16
  %1 = bitcast i8* %code to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2848, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.lookup_attribute, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %for.body
  %2 = bitcast i8* %0 to %union.tree_node*
  %call = tail call i32 @is_attribute_p(i8* %attr_name, %union.tree_node* %2)
  %tobool4 = icmp eq i32 %call, 0
  br i1 %tobool4, label %for.inc, label %return

for.inc:                                          ; preds = %if.end
  %chain = getelementptr inbounds %union.tree_node* %l.012, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %3, null
  br i1 %tobool, label %return, label %for.body

return:                                           ; preds = %if.end, %for.inc, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %l.012, %if.end ], [ null, %for.inc ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @merge_attributes(%union.tree_node* %a1, %union.tree_node* %a2) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %a1, null
  br i1 %cmp, label %if.end41, label %if.else

if.else:                                          ; preds = %entry
  %cmp1 = icmp eq %union.tree_node* %a2, null
  br i1 %cmp1, label %if.end41, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %call = tail call i32 @attribute_list_contained(%union.tree_node* %a1, %union.tree_node* %a2)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end41

if.then2:                                         ; preds = %land.lhs.true
  %call3 = tail call i32 @attribute_list_contained(%union.tree_node* %a2, %union.tree_node* %a1)
  %tobool4 = icmp eq i32 %call3, 0
  br i1 %tobool4, label %for.body.i, label %if.end41

for.body.i:                                       ; preds = %if.then2, %for.body.i
  %len.04.i = phi i32 [ %inc.i, %for.body.i ], [ 0, %if.then2 ]
  %tail.03.i = phi %union.tree_node* [ %0, %for.body.i ], [ %a1, %if.then2 ]
  %inc.i = add nsw i32 %len.04.i, 1
  %chain.i = getelementptr inbounds %union.tree_node* %tail.03.i, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain.i, align 8, !tbaa !27
  %tobool.i = icmp eq %union.tree_node* %0, null
  br i1 %tobool.i, label %for.body.i70, label %for.body.i

for.body.i70:                                     ; preds = %for.body.i, %for.body.i70
  %len.04.i65 = phi i32 [ %inc.i67, %for.body.i70 ], [ 0, %for.body.i ]
  %tail.03.i66 = phi %union.tree_node* [ %1, %for.body.i70 ], [ %a2, %for.body.i ]
  %inc.i67 = add nsw i32 %len.04.i65, 1
  %chain.i68 = getelementptr inbounds %union.tree_node* %tail.03.i66, i64 0, i32 0, i32 0, i32 0
  %1 = load %union.tree_node** %chain.i68, align 8, !tbaa !27
  %tobool.i69 = icmp eq %union.tree_node* %1, null
  br i1 %tobool.i69, label %list_length.exit72, label %for.body.i70

list_length.exit72:                               ; preds = %for.body.i70
  %cmp9 = icmp slt i32 %inc.i, %inc.i67
  %a1.a2 = select i1 %cmp9, %union.tree_node* %a1, %union.tree_node* %a2
  %a2.a1 = select i1 %cmp9, %union.tree_node* %a2, %union.tree_node* %a1
  %cmp11100 = icmp eq %union.tree_node* %a1.a2, null
  br i1 %cmp11100, label %if.end41, label %for.body

for.body:                                         ; preds = %list_length.exit72, %for.inc35
  %attributes.0102 = phi %union.tree_node* [ %attributes.1, %for.inc35 ], [ %a2.a1, %list_length.exit72 ]
  %a2.addr.0101 = phi %union.tree_node* [ %21, %for.inc35 ], [ %a1.a2, %list_length.exit72 ]
  %purpose = getelementptr inbounds %union.tree_node* %a2.addr.0101, i64 0, i32 0, i32 1
  %2 = load i8** %purpose, align 8
  %str = getelementptr inbounds i8* %2, i64 32
  %3 = bitcast i8* %str to i8**
  %4 = load i8** %3, align 8, !tbaa !88
  %tobool11.i76 = icmp eq %union.tree_node* %attributes.0102, null
  br i1 %tobool11.i76, label %if.then30, label %for.body.i83

for.body.i83:                                     ; preds = %for.body, %for.inc.i90
  %l.012.i77 = phi %union.tree_node* [ %8, %for.inc.i90 ], [ %attributes.0102, %for.body ]
  %purpose.i78 = getelementptr inbounds %union.tree_node* %l.012.i77, i64 0, i32 0, i32 1
  %5 = load i8** %purpose.i78, align 8
  %code.i79 = getelementptr inbounds i8* %5, i64 16
  %6 = bitcast i8* %code.i79 to i32*
  %bf.load.i80 = load i32* %6, align 8
  %bf.clear.i81 = and i32 %bf.load.i80, 255
  %cmp.i82 = icmp eq i32 %bf.clear.i81, 1
  br i1 %cmp.i82, label %if.end.i87, label %if.then.i84

if.then.i84:                                      ; preds = %for.body.i83
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2848, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.lookup_attribute, i64 0, i64 0)) #8
  unreachable

if.end.i87:                                       ; preds = %for.body.i83
  %7 = bitcast i8* %5 to %union.tree_node*
  %call.i85 = tail call i32 @is_attribute_p(i8* %4, %union.tree_node* %7) #4
  %tobool4.i86 = icmp eq i32 %call.i85, 0
  br i1 %tobool4.i86, label %for.inc.i90, label %for.cond13.preheader

for.inc.i90:                                      ; preds = %if.end.i87
  %chain.i88 = getelementptr inbounds %union.tree_node* %l.012.i77, i64 0, i32 0, i32 0, i32 0
  %8 = load %union.tree_node** %chain.i88, align 8, !tbaa !27
  %tobool.i89 = icmp eq %union.tree_node* %8, null
  br i1 %tobool.i89, label %if.then30, label %for.body.i83

for.cond13.preheader:                             ; preds = %if.end.i87
  %cond98 = icmp eq %union.tree_node* %l.012.i77, null
  br i1 %cond98, label %if.then30, label %for.body15.lr.ph

for.body15.lr.ph:                                 ; preds = %for.cond13.preheader
  %value18 = getelementptr inbounds %union.tree_node* %a2.addr.0101, i64 0, i32 0, i32 2
  %9 = bitcast i32* %value18 to %union.tree_node**
  br label %for.body15

for.body15:                                       ; preds = %for.body15.lr.ph, %for.cond13.backedge
  %a.099 = phi %union.tree_node* [ %l.012.i77, %for.body15.lr.ph ], [ %l.012.i, %for.cond13.backedge ]
  %value = getelementptr inbounds %union.tree_node* %a.099, i64 0, i32 0, i32 2
  %10 = bitcast i32* %value to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !25
  %12 = load %union.tree_node** %9, align 8, !tbaa !25
  %call19 = tail call i32 @simple_cst_equal(%union.tree_node* %11, %union.tree_node* %12)
  %cmp20 = icmp eq i32 %call19, 1
  br i1 %cmp20, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body15
  %13 = load i8** %purpose, align 8
  %str27 = getelementptr inbounds i8* %13, i64 32
  %14 = bitcast i8* %str27 to i8**
  %15 = load i8** %14, align 8, !tbaa !88
  %chain = getelementptr inbounds %union.tree_node* %a.099, i64 0, i32 0, i32 0, i32 0
  %16 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool11.i = icmp eq %union.tree_node* %16, null
  br i1 %tobool11.i, label %if.then30, label %for.body.i73

for.cond13.backedge:                              ; preds = %if.end.i
  %cond = icmp eq %union.tree_node* %l.012.i, null
  br i1 %cond, label %if.then30, label %for.body15

for.body.i73:                                     ; preds = %for.inc, %for.inc.i
  %l.012.i = phi %union.tree_node* [ %20, %for.inc.i ], [ %16, %for.inc ]
  %purpose.i = getelementptr inbounds %union.tree_node* %l.012.i, i64 0, i32 0, i32 1
  %17 = load i8** %purpose.i, align 8
  %code.i = getelementptr inbounds i8* %17, i64 16
  %18 = bitcast i8* %code.i to i32*
  %bf.load.i = load i32* %18, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 1
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %for.body.i73
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2848, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.lookup_attribute, i64 0, i64 0)) #8
  unreachable

if.end.i:                                         ; preds = %for.body.i73
  %19 = bitcast i8* %17 to %union.tree_node*
  %call.i = tail call i32 @is_attribute_p(i8* %15, %union.tree_node* %19) #4
  %tobool4.i = icmp eq i32 %call.i, 0
  br i1 %tobool4.i, label %for.inc.i, label %for.cond13.backedge

for.inc.i:                                        ; preds = %if.end.i
  %chain.i74 = getelementptr inbounds %union.tree_node* %l.012.i, i64 0, i32 0, i32 0, i32 0
  %20 = load %union.tree_node** %chain.i74, align 8, !tbaa !27
  %tobool.i75 = icmp eq %union.tree_node* %20, null
  br i1 %tobool.i75, label %if.then30, label %for.body.i73

for.end:                                          ; preds = %for.body15
  %cmp29 = icmp eq %union.tree_node* %a.099, null
  br i1 %cmp29, label %if.then30, label %for.inc35

if.then30:                                        ; preds = %for.inc.i90, %for.inc, %for.cond13.backedge, %for.inc.i, %for.body, %for.cond13.preheader, %for.end
  %call31 = tail call %union.tree_node* @copy_node(%union.tree_node* %a2.addr.0101)
  %chain33 = getelementptr inbounds %union.tree_node* %call31, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %attributes.0102, %union.tree_node** %chain33, align 8, !tbaa !27
  br label %for.inc35

for.inc35:                                        ; preds = %for.end, %if.then30
  %attributes.1 = phi %union.tree_node* [ %call31, %if.then30 ], [ %attributes.0102, %for.end ]
  %chain37 = getelementptr inbounds %union.tree_node* %a2.addr.0101, i64 0, i32 0, i32 0, i32 0
  %21 = load %union.tree_node** %chain37, align 8, !tbaa !27
  %cmp11 = icmp eq %union.tree_node* %21, null
  br i1 %cmp11, label %if.end41, label %for.body

if.end41:                                         ; preds = %for.inc35, %list_length.exit72, %if.then2, %entry, %land.lhs.true, %if.else
  %attributes.2 = phi %union.tree_node* [ %a1, %land.lhs.true ], [ %a1, %if.else ], [ %a2, %entry ], [ %a2, %if.then2 ], [ %a2.a1, %list_length.exit72 ], [ %attributes.1, %for.inc35 ]
  ret %union.tree_node* %attributes.2
}

; Function Attrs: nounwind uwtable
define i32 @attribute_list_contained(%union.tree_node* %l1, %union.tree_node* readonly %l2) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %l1, %l2
  br i1 %cmp, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %cmp1118 = icmp ne %union.tree_node* %l1, null
  %cmp2119 = icmp ne %union.tree_node* %l2, null
  %or.cond120 = and i1 %cmp1118, %cmp2119
  br i1 %or.cond120, label %land.lhs.true3, label %for.end

land.lhs.true3:                                   ; preds = %for.cond.preheader, %for.inc
  %t2.0122 = phi %union.tree_node* [ %7, %for.inc ], [ %l2, %for.cond.preheader ]
  %t1.0121 = phi %union.tree_node* [ %6, %for.inc ], [ %l1, %for.cond.preheader ]
  %purpose = getelementptr inbounds %union.tree_node* %t1.0121, i64 0, i32 0, i32 1
  %0 = load i8** %purpose, align 8
  %purpose5 = getelementptr inbounds %union.tree_node* %t2.0122, i64 0, i32 0, i32 1
  %1 = load i8** %purpose5, align 8
  %cmp6 = icmp eq i8* %0, %1
  br i1 %cmp6, label %land.rhs, label %for.cond18.preheader

land.rhs:                                         ; preds = %land.lhs.true3
  %value = getelementptr inbounds %union.tree_node* %t1.0121, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !25
  %value9 = getelementptr inbounds %union.tree_node* %t2.0122, i64 0, i32 0, i32 2
  %4 = bitcast i32* %value9 to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !25
  %cmp10 = icmp eq %union.tree_node* %3, %5
  br i1 %cmp10, label %for.inc, label %for.cond18.preheader

for.inc:                                          ; preds = %land.rhs
  %chain = getelementptr inbounds %union.tree_node* %t1.0121, i64 0, i32 0, i32 0, i32 0
  %6 = load %union.tree_node** %chain, align 8, !tbaa !27
  %chain12 = getelementptr inbounds %union.tree_node* %t2.0122, i64 0, i32 0, i32 0, i32 0
  %7 = load %union.tree_node** %chain12, align 8, !tbaa !27
  %cmp1 = icmp ne %union.tree_node* %6, null
  %cmp2 = icmp ne %union.tree_node* %7, null
  %or.cond = and i1 %cmp1, %cmp2
  br i1 %or.cond, label %land.lhs.true3, label %for.end

for.end:                                          ; preds = %for.inc, %for.cond.preheader
  %t2.0.lcssa = phi %union.tree_node* [ %l2, %for.cond.preheader ], [ %7, %for.inc ]
  %t1.0.lcssa = phi %union.tree_node* [ %l1, %for.cond.preheader ], [ %6, %for.inc ]
  %cmp13 = icmp eq %union.tree_node* %t1.0.lcssa, null
  %cmp15 = icmp eq %union.tree_node* %t2.0.lcssa, null
  %or.cond60 = and i1 %cmp13, %cmp15
  br i1 %or.cond60, label %return, label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %land.lhs.true3, %land.rhs, %for.end
  %t2.0111 = phi %union.tree_node* [ %t2.0.lcssa, %for.end ], [ %t2.0122, %land.rhs ], [ %t2.0122, %land.lhs.true3 ]
  %cmp19114 = icmp eq %union.tree_node* %t2.0111, null
  br i1 %cmp19114, label %return, label %for.body20.lr.ph

for.body20.lr.ph:                                 ; preds = %for.cond18.preheader
  %tobool11.i = icmp eq %union.tree_node* %l1, null
  br i1 %tobool11.i, label %return, label %for.body.i.preheader

for.body.i.preheader:                             ; preds = %for.body20.lr.ph, %for.inc55
  %t2.1115 = phi %union.tree_node* [ %29, %for.inc55 ], [ %t2.0111, %for.body20.lr.ph ]
  %purpose22 = getelementptr inbounds %union.tree_node* %t2.1115, i64 0, i32 0, i32 1
  %8 = load i8** %purpose22, align 8
  %str = getelementptr inbounds i8* %8, i64 32
  %9 = bitcast i8* %str to i8**
  %10 = load i8** %9, align 8, !tbaa !88
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %for.inc.i
  %l.012.i = phi %union.tree_node* [ %14, %for.inc.i ], [ %l1, %for.body.i.preheader ]
  %purpose.i = getelementptr inbounds %union.tree_node* %l.012.i, i64 0, i32 0, i32 1
  %11 = load i8** %purpose.i, align 8
  %code.i = getelementptr inbounds i8* %11, i64 16
  %12 = bitcast i8* %code.i to i32*
  %bf.load.i = load i32* %12, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 1
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %for.body.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2848, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.lookup_attribute, i64 0, i64 0)) #8
  unreachable

if.end.i:                                         ; preds = %for.body.i
  %13 = bitcast i8* %11 to %union.tree_node*
  %call.i = tail call i32 @is_attribute_p(i8* %10, %union.tree_node* %13) #4
  %tobool4.i = icmp eq i32 %call.i, 0
  br i1 %tobool4.i, label %for.inc.i, label %for.cond23.preheader

for.inc.i:                                        ; preds = %if.end.i
  %chain.i = getelementptr inbounds %union.tree_node* %l.012.i, i64 0, i32 0, i32 0, i32 0
  %14 = load %union.tree_node** %chain.i, align 8, !tbaa !27
  %tobool.i = icmp eq %union.tree_node* %14, null
  br i1 %tobool.i, label %return, label %for.body.i

for.cond23.preheader:                             ; preds = %if.end.i
  %cond112 = icmp eq %union.tree_node* %l.012.i, null
  br i1 %cond112, label %return, label %for.body25.lr.ph

for.body25.lr.ph:                                 ; preds = %for.cond23.preheader
  %value27 = getelementptr inbounds %union.tree_node* %t2.1115, i64 0, i32 0, i32 2
  %15 = bitcast i32* %value27 to %union.tree_node**
  br label %for.body25

for.body25:                                       ; preds = %for.body25.lr.ph, %for.cond23.backedge
  %attr.0113 = phi %union.tree_node* [ %l.012.i, %for.body25.lr.ph ], [ %l.012.i83, %for.cond23.backedge ]
  %16 = load %union.tree_node** %15, align 8, !tbaa !25
  %value29 = getelementptr inbounds %union.tree_node* %attr.0113, i64 0, i32 0, i32 2
  %17 = bitcast i32* %value29 to %union.tree_node**
  %18 = load %union.tree_node** %17, align 8, !tbaa !25
  %call30 = tail call i32 @simple_cst_equal(%union.tree_node* %16, %union.tree_node* %18)
  %cmp31 = icmp eq i32 %call30, 1
  br i1 %cmp31, label %for.end43, label %for.inc34

for.inc34:                                        ; preds = %for.body25
  %19 = load i8** %purpose22, align 8
  %str39 = getelementptr inbounds i8* %19, i64 32
  %20 = bitcast i8* %str39 to i8**
  %21 = load i8** %20, align 8, !tbaa !88
  %chain41 = getelementptr inbounds %union.tree_node* %attr.0113, i64 0, i32 0, i32 0, i32 0
  %22 = load %union.tree_node** %chain41, align 8, !tbaa !27
  %tobool11.i82 = icmp eq %union.tree_node* %22, null
  br i1 %tobool11.i82, label %return, label %for.body.i89

for.cond23.backedge:                              ; preds = %if.end.i93
  %cond = icmp eq %union.tree_node* %l.012.i83, null
  br i1 %cond, label %return, label %for.body25

for.body.i89:                                     ; preds = %for.inc34, %for.inc.i96
  %l.012.i83 = phi %union.tree_node* [ %26, %for.inc.i96 ], [ %22, %for.inc34 ]
  %purpose.i84 = getelementptr inbounds %union.tree_node* %l.012.i83, i64 0, i32 0, i32 1
  %23 = load i8** %purpose.i84, align 8
  %code.i85 = getelementptr inbounds i8* %23, i64 16
  %24 = bitcast i8* %code.i85 to i32*
  %bf.load.i86 = load i32* %24, align 8
  %bf.clear.i87 = and i32 %bf.load.i86, 255
  %cmp.i88 = icmp eq i32 %bf.clear.i87, 1
  br i1 %cmp.i88, label %if.end.i93, label %if.then.i90

if.then.i90:                                      ; preds = %for.body.i89
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 2848, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.lookup_attribute, i64 0, i64 0)) #8
  unreachable

if.end.i93:                                       ; preds = %for.body.i89
  %25 = bitcast i8* %23 to %union.tree_node*
  %call.i91 = tail call i32 @is_attribute_p(i8* %21, %union.tree_node* %25) #4
  %tobool4.i92 = icmp eq i32 %call.i91, 0
  br i1 %tobool4.i92, label %for.inc.i96, label %for.cond23.backedge

for.inc.i96:                                      ; preds = %if.end.i93
  %chain.i94 = getelementptr inbounds %union.tree_node* %l.012.i83, i64 0, i32 0, i32 0, i32 0
  %26 = load %union.tree_node** %chain.i94, align 8, !tbaa !27
  %tobool.i95 = icmp eq %union.tree_node* %26, null
  br i1 %tobool.i95, label %return, label %for.body.i89

for.end43:                                        ; preds = %for.body25
  %cmp44 = icmp eq %union.tree_node* %attr.0113, null
  br i1 %cmp44, label %return, label %if.end46

if.end46:                                         ; preds = %for.end43
  %27 = load %union.tree_node** %15, align 8, !tbaa !25
  %28 = load %union.tree_node** %17, align 8, !tbaa !25
  %call51 = tail call i32 @simple_cst_equal(%union.tree_node* %27, %union.tree_node* %28)
  %cmp52 = icmp eq i32 %call51, 1
  br i1 %cmp52, label %for.inc55, label %return

for.inc55:                                        ; preds = %if.end46
  %chain57 = getelementptr inbounds %union.tree_node* %t2.1115, i64 0, i32 0, i32 0, i32 0
  %29 = load %union.tree_node** %chain57, align 8, !tbaa !27
  %cmp19 = icmp eq %union.tree_node* %29, null
  br i1 %cmp19, label %return, label %for.body.i.preheader

return:                                           ; preds = %for.end43, %if.end46, %for.inc55, %for.cond23.preheader, %for.inc.i, %for.inc34, %for.cond23.backedge, %for.inc.i96, %for.cond18.preheader, %for.body20.lr.ph, %for.end, %entry
  %retval.0 = phi i32 [ 1, %entry ], [ 1, %for.end ], [ 0, %for.body20.lr.ph ], [ 1, %for.cond18.preheader ], [ 0, %for.inc.i96 ], [ 0, %for.cond23.backedge ], [ 0, %for.inc34 ], [ 0, %for.inc.i ], [ 0, %for.end43 ], [ 0, %if.end46 ], [ 1, %for.inc55 ], [ 0, %for.cond23.preheader ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @simple_cst_equal(%union.tree_node* readonly %t1, %union.tree_node* readonly %t2) #0 {
entry:
  %cmp1371376 = icmp eq %union.tree_node* %t1, %t2
  br i1 %cmp1371376, label %return, label %if.end.lr.ph

if.end.lr.ph:                                     ; preds = %entry, %tailrecurse.outer.backedge
  %t2.tr.ph380 = phi %union.tree_node* [ %t2.tr.ph.be, %tailrecurse.outer.backedge ], [ %t2, %entry ]
  %t1.tr.ph377 = phi %union.tree_node* [ %t1.tr.ph.be, %tailrecurse.outer.backedge ], [ %t1, %entry ]
  %cmp2 = icmp eq %union.tree_node* %t1.tr.ph377, null
  %code = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 0, i32 2
  br i1 %cmp2, label %return, label %if.end

if.end:                                           ; preds = %if.end.lr.ph, %if.then35
  %t2.tr372 = phi %union.tree_node* [ %6, %if.then35 ], [ %t2.tr.ph380, %if.end.lr.ph ]
  %cmp3 = icmp eq %union.tree_node* %t2.tr372, null
  br i1 %cmp3, label %return, label %if.end5

if.end5:                                          ; preds = %if.end
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %code7 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %0 = and i32 %bf.load, 254
  %1 = icmp eq i32 %0, 114
  %cmp14 = icmp eq i32 %bf.clear, 116
  %or.cond248 = or i1 %1, %cmp14
  %2 = and i32 %bf.load8, 254
  %3 = icmp eq i32 %2, 114
  %cmp20 = icmp eq i32 %bf.clear9, 116
  %or.cond250 = or i1 %3, %cmp20
  br i1 %or.cond248, label %if.then15, label %if.else29

if.then15:                                        ; preds = %if.end5
  %operands = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  br i1 %or.cond250, label %if.then21, label %tailrecurse.outer.backedge

if.then21:                                        ; preds = %if.then15
  %operands23 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %arrayidx24 = bitcast i32* %operands23 to %union.tree_node**
  %5 = load %union.tree_node** %arrayidx24, align 8, !tbaa !10
  br label %tailrecurse.outer.backedge

tailrecurse.outer.backedge:                       ; preds = %if.then21, %sw.bb88, %if.end176, %if.then212, %if.then15
  %t1.tr.ph.be = phi %union.tree_node* [ %4, %if.then21 ], [ %29, %sw.bb88 ], [ %46, %if.end176 ], [ %55, %if.then212 ], [ %4, %if.then15 ]
  %t2.tr.ph.be = phi %union.tree_node* [ %5, %if.then21 ], [ %30, %sw.bb88 ], [ %48, %if.end176 ], [ %56, %if.then212 ], [ %t2.tr372, %if.then15 ]
  %cmp1371 = icmp eq %union.tree_node* %t1.tr.ph.be, %t2.tr.ph.be
  br i1 %cmp1371, label %return, label %if.end.lr.ph

if.else29:                                        ; preds = %if.end5
  br i1 %or.cond250, label %if.then35, label %if.end41

if.then35:                                        ; preds = %if.else29
  %operands37 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %arrayidx38 = bitcast i32* %operands37 to %union.tree_node**
  %6 = load %union.tree_node** %arrayidx38, align 8, !tbaa !10
  %cmp1 = icmp eq %union.tree_node* %t1.tr.ph377, %6
  br i1 %cmp1, label %return, label %if.end

if.end41:                                         ; preds = %if.else29
  %cmp42 = icmp eq i32 %bf.clear, %bf.clear9
  br i1 %cmp42, label %if.end44, label %return

if.end44:                                         ; preds = %if.end41
  switch i32 %bf.clear9, label %sw.epilog [
    i32 25, label %sw.bb
    i32 26, label %sw.bb56
    i32 29, label %sw.bb61
    i32 46, label %sw.bb77
    i32 118, label %sw.bb88
    i32 53, label %sw.bb96
    i32 50, label %sw.bb115
    i32 55, label %sw.bb184
    i32 39, label %sw.bb203
    i32 34, label %return
    i32 35, label %return
    i32 32, label %return
    i32 30, label %return
  ]

sw.bb:                                            ; preds = %if.end44
  %int_cst45 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst45 to i64*
  %7 = load i64* %low, align 8, !tbaa !20
  %int_cst47 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %low48 = bitcast i32* %int_cst47 to i64*
  %8 = load i64* %low48, align 8, !tbaa !20
  %cmp49 = icmp eq i64 %7, %8
  br i1 %cmp49, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb
  %high = getelementptr inbounds i32* %int_cst45, i64 2
  %9 = bitcast i32* %high to i64*
  %10 = load i64* %9, align 8, !tbaa !23
  %high54 = getelementptr inbounds i32* %int_cst47, i64 2
  %11 = bitcast i32* %high54 to i64*
  %12 = load i64* %11, align 8, !tbaa !23
  %cmp55 = icmp eq i64 %10, %12
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb
  %13 = phi i1 [ false, %sw.bb ], [ %cmp55, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  br label %return

sw.bb56:                                          ; preds = %if.end44
  %real_cst57 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %14 = bitcast i32* %real_cst57 to i8*
  %real_cst59 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %15 = bitcast i32* %real_cst59 to i8*
  %call60 = tail call i32 @memcmp(i8* %14, i8* %15, i64 24) #4
  %lnot = icmp eq i32 %call60, 0
  %lnot.ext = zext i1 %lnot to i32
  br label %return

sw.bb61:                                          ; preds = %if.end44
  %16 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %17 = load i32* %16, align 4, !tbaa !61
  %18 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %19 = load i32* %18, align 4, !tbaa !61
  %cmp64 = icmp eq i32 %17, %19
  br i1 %cmp64, label %land.rhs65, label %land.end75

land.rhs65:                                       ; preds = %sw.bb61
  %pointer = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 4
  %20 = load %union.tree_node** %pointer, align 8
  %21 = bitcast %union.tree_node* %20 to i8*
  %pointer68 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 4
  %22 = load %union.tree_node** %pointer68, align 8
  %23 = bitcast %union.tree_node* %22 to i8*
  %conv = sext i32 %17 to i64
  %call71 = tail call i32 @memcmp(i8* %21, i8* %23, i64 %conv) #4
  %lnot73 = icmp eq i32 %call71, 0
  br label %land.end75

land.end75:                                       ; preds = %land.rhs65, %sw.bb61
  %24 = phi i1 [ false, %sw.bb61 ], [ %lnot73, %land.rhs65 ]
  %land.ext76 = zext i1 %24 to i32
  br label %return

sw.bb77:                                          ; preds = %if.end44
  %operands79 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %arrayidx80 = getelementptr inbounds i32* %operands79, i64 2
  %25 = bitcast i32* %arrayidx80 to %union.tree_node**
  %26 = load %union.tree_node** %25, align 8, !tbaa !10
  %operands82 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %arrayidx83 = getelementptr inbounds i32* %operands82, i64 2
  %27 = bitcast i32* %arrayidx83 to %union.tree_node**
  %28 = load %union.tree_node** %27, align 8, !tbaa !10
  %cmp84 = icmp eq %union.tree_node* %26, %28
  br i1 %cmp84, label %return, label %if.else87

if.else87:                                        ; preds = %sw.bb77
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3603, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.simple_cst_equal, i64 0, i64 0)) #8
  unreachable

sw.bb88:                                          ; preds = %if.end44
  %operands90 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %arrayidx91 = bitcast i32* %operands90 to %union.tree_node**
  %29 = load %union.tree_node** %arrayidx91, align 8, !tbaa !10
  %operands93 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %arrayidx94 = bitcast i32* %operands93 to %union.tree_node**
  %30 = load %union.tree_node** %arrayidx94, align 8, !tbaa !10
  br label %tailrecurse.outer.backedge

sw.bb96:                                          ; preds = %if.end44
  %operands98 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %arrayidx99 = bitcast i32* %operands98 to %union.tree_node**
  %31 = load %union.tree_node** %arrayidx99, align 8, !tbaa !10
  %operands101 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %arrayidx102 = bitcast i32* %operands101 to %union.tree_node**
  %32 = load %union.tree_node** %arrayidx102, align 8, !tbaa !10
  %call103 = tail call i32 @simple_cst_equal(%union.tree_node* %31, %union.tree_node* %32)
  %cmp104 = icmp slt i32 %call103, 1
  br i1 %cmp104, label %return, label %if.end107

if.end107:                                        ; preds = %sw.bb96
  %arrayidx110 = getelementptr inbounds i32* %operands98, i64 2
  %33 = bitcast i32* %arrayidx110 to %union.tree_node**
  %arrayidx113 = getelementptr inbounds i32* %operands101, i64 2
  %34 = bitcast i32* %arrayidx113 to %union.tree_node**
  %l2.addr.0.i362 = load %union.tree_node** %34, align 8
  %l1.addr.0.i363 = load %union.tree_node** %33, align 8
  %cmp1.i364 = icmp ne %union.tree_node* %l2.addr.0.i362, null
  %not.cmp.i365 = icmp ne %union.tree_node* %l1.addr.0.i363, null
  %.cmp1.i366 = and i1 %cmp1.i364, %not.cmp.i365
  br i1 %.cmp1.i366, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %if.end107, %if.end.i
  %l1.addr.0.i368 = phi %union.tree_node* [ %l1.addr.0.i, %if.end.i ], [ %l1.addr.0.i363, %if.end107 ]
  %l2.addr.0.i367 = phi %union.tree_node* [ %l2.addr.0.i, %if.end.i ], [ %l2.addr.0.i362, %if.end107 ]
  %value.i = getelementptr inbounds %union.tree_node* %l1.addr.0.i368, i64 0, i32 0, i32 2
  %35 = bitcast i32* %value.i to %union.tree_node**
  %36 = load %union.tree_node** %35, align 8, !tbaa !25
  %value3.i = getelementptr inbounds %union.tree_node* %l2.addr.0.i367, i64 0, i32 0, i32 2
  %37 = bitcast i32* %value3.i to %union.tree_node**
  %38 = load %union.tree_node** %37, align 8, !tbaa !25
  %call.i = tail call i32 @simple_cst_equal(%union.tree_node* %36, %union.tree_node* %38) #4
  %cmp4.i = icmp eq i32 %call.i, 1
  br i1 %cmp4.i, label %if.end.i, label %return

if.end.i:                                         ; preds = %while.body.i
  %chain.i = getelementptr inbounds %union.tree_node* %l1.addr.0.i368, i64 0, i32 0, i32 0, i32 0
  %chain6.i = getelementptr inbounds %union.tree_node* %l2.addr.0.i367, i64 0, i32 0, i32 0, i32 0
  %l2.addr.0.i = load %union.tree_node** %chain6.i, align 8
  %l1.addr.0.i = load %union.tree_node** %chain.i, align 8
  %cmp1.i = icmp ne %union.tree_node* %l2.addr.0.i, null
  %not.cmp.i = icmp ne %union.tree_node* %l1.addr.0.i, null
  %.cmp1.i = and i1 %cmp1.i, %not.cmp.i
  br i1 %.cmp1.i, label %while.body.i, label %while.end.i

while.end.i:                                      ; preds = %if.end.i, %if.end107
  %l1.addr.0.i.lcssa = phi %union.tree_node* [ %l1.addr.0.i363, %if.end107 ], [ %l1.addr.0.i, %if.end.i ]
  %l2.addr.0.i.lcssa = phi %union.tree_node* [ %l2.addr.0.i362, %if.end107 ], [ %l2.addr.0.i, %if.end.i ]
  %cmp7.i = icmp eq %union.tree_node* %l1.addr.0.i.lcssa, %l2.addr.0.i.lcssa
  %conv.i = zext i1 %cmp7.i to i32
  br label %return

sw.bb115:                                         ; preds = %if.end44
  %operands117 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %arrayidx118 = bitcast i32* %operands117 to %union.tree_node**
  %39 = load %union.tree_node** %arrayidx118, align 8, !tbaa !10
  %code120 = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 0, i32 2
  %bf.load121 = load i32* %code120, align 8
  %bf.clear122 = and i32 %bf.load121, 255
  %cmp123 = icmp eq i32 %bf.clear122, 34
  br i1 %cmp123, label %land.lhs.true, label %lor.lhs.false137

land.lhs.true:                                    ; preds = %sw.bb115
  %name = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 8
  %40 = load %union.tree_node** %name, align 8, !tbaa !1
  %cmp128 = icmp eq %union.tree_node* %40, null
  br i1 %cmp128, label %land.lhs.true130, label %lor.lhs.false137

land.lhs.true130:                                 ; preds = %land.lhs.true
  %rtl = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 17
  %41 = load %struct.rtx_def** %rtl, align 8, !tbaa !91
  %cmp135 = icmp eq %struct.rtx_def* %41, null
  br i1 %cmp135, label %land.lhs.true130.if.end176_crit_edge, label %lor.lhs.false137

land.lhs.true130.if.end176_crit_edge:             ; preds = %land.lhs.true130
  %operands181.pre = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  br label %if.end176

lor.lhs.false137:                                 ; preds = %land.lhs.true130, %land.lhs.true, %sw.bb115
  %operands139 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %arrayidx140 = bitcast i32* %operands139 to %union.tree_node**
  %42 = load %union.tree_node** %arrayidx140, align 8, !tbaa !10
  %code142 = getelementptr inbounds %union.tree_node* %42, i64 0, i32 0, i32 0, i32 2
  %bf.load143 = load i32* %code142, align 8
  %bf.clear144 = and i32 %bf.load143, 255
  %cmp145 = icmp eq i32 %bf.clear144, 34
  br i1 %cmp145, label %land.lhs.true147, label %if.end172

land.lhs.true147:                                 ; preds = %lor.lhs.false137
  %name152 = getelementptr inbounds %union.tree_node* %42, i64 0, i32 0, i32 8
  %43 = load %union.tree_node** %name152, align 8, !tbaa !1
  %cmp153 = icmp eq %union.tree_node* %43, null
  br i1 %cmp153, label %land.lhs.true155, label %if.end172

land.lhs.true155:                                 ; preds = %land.lhs.true147
  %rtl160 = getelementptr inbounds %union.tree_node* %42, i64 0, i32 0, i32 17
  %44 = load %struct.rtx_def** %rtl160, align 8, !tbaa !91
  %cmp161 = icmp eq %struct.rtx_def* %44, null
  br i1 %cmp161, label %if.end176, label %if.end172

if.end172:                                        ; preds = %lor.lhs.false137, %land.lhs.true147, %land.lhs.true155
  %call171 = tail call i32 @simple_cst_equal(%union.tree_node* %39, %union.tree_node* %42)
  %cmp173 = icmp slt i32 %call171, 1
  br i1 %cmp173, label %return, label %if.end176

if.end176:                                        ; preds = %land.lhs.true130.if.end176_crit_edge, %land.lhs.true155, %if.end172
  %operands181.pre-phi = phi i32* [ %operands181.pre, %land.lhs.true130.if.end176_crit_edge ], [ %operands139, %land.lhs.true155 ], [ %operands139, %if.end172 ]
  %arrayidx179 = getelementptr inbounds i32* %operands117, i64 2
  %45 = bitcast i32* %arrayidx179 to %union.tree_node**
  %46 = load %union.tree_node** %45, align 8, !tbaa !10
  %arrayidx182 = getelementptr inbounds i32* %operands181.pre-phi, i64 2
  %47 = bitcast i32* %arrayidx182 to %union.tree_node**
  %48 = load %union.tree_node** %47, align 8, !tbaa !10
  br label %tailrecurse.outer.backedge

sw.bb184:                                         ; preds = %if.end44
  %operands186 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %arrayidx187 = bitcast i32* %operands186 to %union.tree_node**
  %49 = load %union.tree_node** %arrayidx187, align 8, !tbaa !10
  %operands189 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %arrayidx190 = bitcast i32* %operands189 to %union.tree_node**
  %50 = load %union.tree_node** %arrayidx190, align 8, !tbaa !10
  %call191 = tail call i32 @simple_cst_equal(%union.tree_node* %49, %union.tree_node* %50)
  %cmp192 = icmp slt i32 %call191, 1
  %call191. = select i1 %cmp192, i32 %call191, i32 1
  ret i32 %call191.

sw.bb203:                                         ; preds = %if.end44
  %operands205 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %arrayidx206 = getelementptr inbounds i32* %operands205, i64 2
  %51 = bitcast i32* %arrayidx206 to %union.tree_node**
  %52 = load %union.tree_node** %51, align 8, !tbaa !10
  %operands208 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %arrayidx209 = getelementptr inbounds i32* %operands208, i64 2
  %53 = bitcast i32* %arrayidx209 to %union.tree_node**
  %54 = load %union.tree_node** %53, align 8, !tbaa !10
  %cmp210 = icmp eq %union.tree_node* %52, %54
  br i1 %cmp210, label %if.then212, label %return

if.then212:                                       ; preds = %sw.bb203
  %arrayidx215 = bitcast i32* %operands205 to %union.tree_node**
  %55 = load %union.tree_node** %arrayidx215, align 8, !tbaa !10
  %arrayidx218 = bitcast i32* %operands208 to %union.tree_node**
  %56 = load %union.tree_node** %arrayidx218, align 8, !tbaa !10
  br label %tailrecurse.outer.backedge

sw.epilog:                                        ; preds = %if.end44
  %cmp222 = icmp ugt i32 %bf.clear9, 146
  br i1 %cmp222, label %return, label %if.end225

if.end225:                                        ; preds = %sw.epilog
  %idxprom321 = zext i32 %bf.clear9 to i64
  %arrayidx226 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom321
  %57 = load i8* %arrayidx226, align 1, !tbaa !37
  %conv227 = sext i8 %57 to i32
  switch i32 %conv227, label %return [
    i32 49, label %for.cond.preheader
    i32 50, label %for.cond.preheader
    i32 60, label %for.cond.preheader
    i32 101, label %for.cond.preheader
    i32 114, label %for.cond.preheader
    i32 115, label %for.cond.preheader
  ]

for.cond.preheader:                               ; preds = %if.end225, %if.end225, %if.end225, %if.end225, %if.end225, %if.end225
  %arrayidx230 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom321
  %58 = load i32* %arrayidx230, align 4, !tbaa !38
  %cmp231359 = icmp sgt i32 %58, 0
  br i1 %cmp231359, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %operands235 = getelementptr inbounds %union.tree_node* %t1.tr.ph377, i64 0, i32 0, i32 2
  %59 = bitcast i32* %operands235 to [1 x %union.tree_node*]*
  %operands239 = getelementptr inbounds %union.tree_node* %t2.tr372, i64 0, i32 0, i32 2
  %60 = bitcast i32* %operands239 to [1 x %union.tree_node*]*
  br label %for.body

for.cond:                                         ; preds = %for.body
  %61 = load i32* %arrayidx230, align 4, !tbaa !38
  %62 = trunc i64 %indvars.iv.next to i32
  %cmp231 = icmp slt i32 %62, %61
  br i1 %cmp231, label %for.body, label %return

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %arrayidx236 = getelementptr inbounds [1 x %union.tree_node*]* %59, i64 0, i64 %indvars.iv
  %63 = load %union.tree_node** %arrayidx236, align 8, !tbaa !10
  %arrayidx240 = getelementptr inbounds [1 x %union.tree_node*]* %60, i64 0, i64 %indvars.iv
  %64 = load %union.tree_node** %arrayidx240, align 8, !tbaa !10
  %call241 = tail call i32 @simple_cst_equal(%union.tree_node* %63, %union.tree_node* %64)
  %cmp242 = icmp slt i32 %call241, 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp242, label %return, label %for.cond

return:                                           ; preds = %if.end.lr.ph, %tailrecurse.outer.backedge, %if.end44, %if.end44, %if.end44, %if.end44, %sw.bb203, %if.end172, %if.end41, %if.then35, %if.end, %while.body.i, %for.body, %for.cond, %entry, %for.cond.preheader, %while.end.i, %if.end225, %sw.epilog, %sw.bb96, %sw.bb77, %land.end75, %sw.bb56, %land.end
  %retval.0 = phi i32 [ %land.ext76, %land.end75 ], [ %lnot.ext, %sw.bb56 ], [ %land.ext, %land.end ], [ 1, %sw.bb77 ], [ %call103, %sw.bb96 ], [ -1, %sw.epilog ], [ -1, %if.end225 ], [ %conv.i, %while.end.i ], [ 1, %for.cond.preheader ], [ 1, %entry ], [ %call241, %for.cond ], [ %call241, %for.body ], [ 0, %while.body.i ], [ 1, %if.then35 ], [ 0, %if.end ], [ 0, %if.end.lr.ph ], [ 1, %tailrecurse.outer.backedge ], [ 0, %if.end44 ], [ 0, %if.end44 ], [ 0, %if.end44 ], [ 0, %if.end44 ], [ 0, %sw.bb203 ], [ %call171, %if.end172 ], [ 0, %if.end41 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @merge_type_attributes(%union.tree_node* nocapture readonly %t1, %union.tree_node* nocapture readonly %t2) #0 {
entry:
  %attributes = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 5
  %0 = bitcast i48* %attributes to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !16
  %attributes2 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 5
  %2 = bitcast i48* %attributes2 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !16
  %call = tail call %union.tree_node* @merge_attributes(%union.tree_node* %1, %union.tree_node* %3)
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @merge_decl_attributes(%union.tree_node* nocapture readonly %olddecl, %union.tree_node* nocapture readonly %newdecl) #0 {
entry:
  %attributes = getelementptr inbounds %union.tree_node* %olddecl, i64 0, i32 0, i32 16
  %0 = load %union.tree_node** %attributes, align 8, !tbaa !86
  %attributes2 = getelementptr inbounds %union.tree_node* %newdecl, i64 0, i32 0, i32 16
  %1 = load %union.tree_node** %attributes2, align 8, !tbaa !86
  %call = tail call %union.tree_node* @merge_attributes(%union.tree_node* %0, %union.tree_node* %1)
  ret %union.tree_node* %call
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @get_qualified_type(%union.tree_node* nocapture readonly %type, i32 %type_quals) #3 {
entry:
  %0 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %t.036 = load %union.tree_node** %0, align 8
  %tobool37 = icmp eq %union.tree_node* %t.036, null
  br i1 %tobool37, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 11
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %t.038 = phi %union.tree_node* [ %t.036, %for.body.lr.ph ], [ %t.0, %for.inc ]
  %readonly_flag = getelementptr inbounds %union.tree_node* %t.038, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %readonly_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 12
  %bf.clear = and i32 %bf.lshr, 1
  %2 = lshr i32 %bf.load, 10
  %mul6 = and i32 %2, 2
  %or = or i32 %bf.clear, %mul6
  %type7 = bitcast %union.tree_node* %t.038 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type7, i64 0, i32 6
  %bf.load8 = load i32* %restrict_flag, align 4
  %3 = lshr i32 %bf.load8, 19
  %mul11 = and i32 %3, 4
  %or12 = or i32 %or, %mul11
  %bf.clear15 = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear15, 20
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body
  %type17 = getelementptr inbounds %union.tree_node* %t.038, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type17, align 8, !tbaa !15
  %tobool18 = icmp ne %union.tree_node* %4, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %5 = phi i1 [ false, %for.body ], [ %tobool18, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  %mul19 = shl nuw nsw i32 %land.ext, 3
  %or20 = or i32 %or12, %mul19
  %cmp21 = icmp eq i32 %or20, %type_quals
  br i1 %cmp21, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %land.end
  %6 = getelementptr inbounds %union.tree_node* %t.038, i64 0, i32 0, i32 11
  %7 = load %union.tree_node** %6, align 8, !tbaa !68
  %8 = load %union.tree_node** %1, align 8, !tbaa !68
  %cmp25 = icmp eq %union.tree_node* %7, %8
  br i1 %cmp25, label %return, label %for.inc

for.inc:                                          ; preds = %land.end, %land.lhs.true
  %9 = getelementptr inbounds %union.tree_node* %t.038, i64 0, i32 0, i32 14
  %t.0 = load %union.tree_node** %9, align 8
  %tobool = icmp eq %union.tree_node* %t.0, null
  br i1 %tobool, label %return, label %for.body

return:                                           ; preds = %land.lhs.true, %for.inc, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %t.038, %land.lhs.true ], [ null, %for.inc ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_type_copy(%union.tree_node* nocapture readonly %type) #0 {
entry:
  %0 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %1 = load %union.tree_node** %0, align 8, !tbaa !46
  %call = tail call %union.tree_node* @copy_node(%union.tree_node* %type)
  %2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 8
  %3 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 14
  %4 = bitcast %union.tree_node** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 16, i32 8, i1 false)
  %5 = load %union.tree_node** %3, align 8, !tbaa !87
  %6 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 14
  store %union.tree_node* %5, %union.tree_node** %6, align 8, !tbaa !87
  store %union.tree_node* %call, %union.tree_node** %3, align 8, !tbaa !87
  ret %union.tree_node* %call
}

; Function Attrs: nounwind readonly uwtable
define i32 @type_hash_list(%union.tree_node* readonly %list) #3 {
entry:
  %tobool6 = icmp eq %union.tree_node* %list, null
  br i1 %tobool6, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %tail.08 = phi %union.tree_node* [ %3, %for.body ], [ %list, %entry ]
  %hashcode.07 = phi i64 [ %add, %for.body ], [ 0, %entry ]
  %value = getelementptr inbounds %union.tree_node* %tail.08, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !25
  %2 = ptrtoint %union.tree_node* %1 to i64
  %and = and i64 %2, 262143
  %conv = and i64 %hashcode.07, 4294967295
  %add = add i64 %and, %conv
  %chain = getelementptr inbounds %union.tree_node* %tail.08, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %3, null
  br i1 %tobool, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %conv2 = trunc i64 %add to i32
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %hashcode.0.lcssa = phi i32 [ %conv2, %for.cond.for.end_crit_edge ], [ 0, %entry ]
  ret i32 %hashcode.0.lcssa
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @type_hash_lookup(i32 %hashcode, %union.tree_node* %type) #0 {
entry:
  %in = alloca %struct.type_hash, align 8
  call void @layout_type(%union.tree_node* %type) #4
  %conv = zext i32 %hashcode to i64
  %hash = getelementptr inbounds %struct.type_hash* %in, i64 0, i32 0
  store i64 %conv, i64* %hash, align 8, !tbaa !11
  %type1 = getelementptr inbounds %struct.type_hash* %in, i64 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type1, align 8, !tbaa !14
  %0 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %1 = bitcast %struct.type_hash* %in to i8*
  %call = call i8* @htab_find_with_hash(%struct.htab* %0, i8* %1, i32 %hashcode) #4
  %tobool = icmp eq i8* %call, null
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %entry
  %type2 = getelementptr inbounds i8* %call, i64 8
  %2 = bitcast i8* %type2 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !14
  br label %return

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %3, %if.then ], [ null, %entry ]
  ret %union.tree_node* %retval.0
}

declare void @layout_type(%union.tree_node*) #2

declare i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: nounwind uwtable
define void @type_hash_add(i32 %hashcode, %union.tree_node* %type) #0 {
entry:
  %call = tail call i8* @ggc_alloc(i64 16) #4
  %conv = zext i32 %hashcode to i64
  %hash = bitcast i8* %call to i64*
  store i64 %conv, i64* %hash, align 8, !tbaa !11
  %type1 = getelementptr inbounds i8* %call, i64 8
  %0 = bitcast i8* %type1 to %union.tree_node**
  store %union.tree_node* %type, %union.tree_node** %0, align 8, !tbaa !14
  %1 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2 = tail call i8** @htab_find_slot_with_hash(%struct.htab* %1, i8* %call, i32 %hashcode, i32 1) #4
  store i8* %call, i8** %call2, align 8, !tbaa !10
  ret void
}

declare i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: nounwind uwtable
define void @mark_tree_hashtable(i8* nocapture readonly %arg) #0 {
entry:
  %0 = bitcast i8* %arg to %struct.htab**
  %1 = load %struct.htab** %0, align 8, !tbaa !10
  tail call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @mark_tree_hashtable_entry, i8* null) #4
  ret void
}

declare void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @mark_tree_hashtable_entry(i8** nocapture readonly %entry1, i8* nocapture readnone %data) #0 {
entry:
  %0 = load i8** %entry1, align 8, !tbaa !10
  %1 = bitcast i8* %0 to %union.tree_node*
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %do.end10, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %call = tail call i32 @ggc_set_mark(i8* %0) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %do.body2, label %do.end10

do.body2:                                         ; preds = %land.lhs.true
  %2 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !10
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 1
  %3 = load i64* %elements_used, align 8, !tbaa !28
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 0
  %4 = load i64* %num_elements, align 8, !tbaa !30
  %cmp3 = icmp ult i64 %3, %4
  br i1 %cmp3, label %if.end, label %if.then4

if.then4:                                         ; preds = %do.body2
  %mul = shl i64 %4, 1
  %call6 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %2, i64 %mul) #4
  store %struct.varray_head_tag* %call6, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !10
  %elements_used7.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call6, i64 0, i32 1
  %.pre = load i64* %elements_used7.phi.trans.insert, align 8, !tbaa !28
  br label %if.end

if.end:                                           ; preds = %do.body2, %if.then4
  %5 = phi i64 [ %3, %do.body2 ], [ %.pre, %if.then4 ]
  %6 = phi %struct.varray_head_tag* [ %2, %do.body2 ], [ %call6, %if.then4 ]
  %elements_used7 = getelementptr inbounds %struct.varray_head_tag* %6, i64 0, i32 1
  %inc = add i64 %5, 1
  store i64 %inc, i64* %elements_used7, align 8, !tbaa !28
  %data8 = getelementptr inbounds %struct.varray_head_tag* %6, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data8 to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %5
  store %union.tree_node* %1, %union.tree_node** %arrayidx, align 8, !tbaa !10
  br label %do.end10

do.end10:                                         ; preds = %land.lhs.true, %entry, %if.end
  ret i32 1
}

; Function Attrs: nounwind uwtable
define i32 @type_list_equal(%union.tree_node* readonly %l1, %union.tree_node* readonly %l2) #0 {
entry:
  %tobool138 = icmp ne %union.tree_node* %l2, null
  %not.tobool39 = icmp ne %union.tree_node* %l1, null
  %.tobool140 = and i1 %tobool138, %not.tobool39
  br i1 %.tobool140, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.inc
  %t2.042 = phi %union.tree_node* [ %15, %for.inc ], [ %l2, %entry ]
  %t1.041 = phi %union.tree_node* [ %14, %for.inc ], [ %l1, %entry ]
  %value = getelementptr inbounds %union.tree_node* %t1.041, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !25
  %value3 = getelementptr inbounds %union.tree_node* %t2.042, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value3 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !25
  %cmp = icmp eq %union.tree_node* %1, %3
  br i1 %cmp, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %for.body
  %purpose = getelementptr inbounds %union.tree_node* %t1.041, i64 0, i32 0, i32 1
  %4 = load i8** %purpose, align 8
  %purpose6 = getelementptr inbounds %union.tree_node* %t2.042, i64 0, i32 0, i32 1
  %5 = load i8** %purpose6, align 8
  %cmp7 = icmp eq i8* %4, %5
  br i1 %cmp7, label %for.inc, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = bitcast i8* %4 to %union.tree_node*
  %7 = bitcast i8* %5 to %union.tree_node*
  %call = tail call i32 @simple_cst_equal(%union.tree_node* %6, %union.tree_node* %7)
  %cmp12 = icmp eq i32 %call, 1
  br i1 %cmp12, label %land.lhs.true13, label %return

land.lhs.true13:                                  ; preds = %land.lhs.true
  %8 = load i8** %purpose, align 8
  %type = getelementptr inbounds i8* %8, i64 8
  %9 = bitcast i8* %type to %union.tree_node**
  %10 = load %union.tree_node** %9, align 8, !tbaa !15
  %11 = load i8** %purpose6, align 8
  %type19 = getelementptr inbounds i8* %11, i64 8
  %12 = bitcast i8* %type19 to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !15
  %cmp20 = icmp eq %union.tree_node* %10, %13
  br i1 %cmp20, label %for.inc, label %return

for.inc:                                          ; preds = %lor.lhs.false, %land.lhs.true13
  %chain = getelementptr inbounds %union.tree_node* %t1.041, i64 0, i32 0, i32 0, i32 0
  %14 = load %union.tree_node** %chain, align 8, !tbaa !27
  %chain23 = getelementptr inbounds %union.tree_node* %t2.042, i64 0, i32 0, i32 0, i32 0
  %15 = load %union.tree_node** %chain23, align 8, !tbaa !27
  %tobool1 = icmp ne %union.tree_node* %15, null
  %not.tobool = icmp ne %union.tree_node* %14, null
  %.tobool1 = and i1 %tobool1, %not.tobool
  br i1 %.tobool1, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %entry
  %t2.0.lcssa = phi %union.tree_node* [ %l2, %entry ], [ %15, %for.inc ]
  %t1.0.lcssa = phi %union.tree_node* [ %l1, %entry ], [ %14, %for.inc ]
  %cmp24 = icmp eq %union.tree_node* %t1.0.lcssa, %t2.0.lcssa
  %conv = zext i1 %cmp24 to i32
  br label %return

return:                                           ; preds = %land.lhs.true, %land.lhs.true13, %for.body, %for.end
  %retval.0 = phi i32 [ %conv, %for.end ], [ 0, %for.body ], [ 0, %land.lhs.true13 ], [ 0, %land.lhs.true ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @type_num_arguments(%union.tree_node* nocapture readonly %type) #3 {
entry:
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %0 = load i8** %values, align 8
  %tobool6 = icmp eq i8* %0, null
  br i1 %tobool6, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %1 = bitcast i8* %0 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %if.else
  %t.08 = phi %union.tree_node* [ %1, %for.body.lr.ph ], [ %4, %if.else ]
  %i.07 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %if.else ]
  %value = getelementptr inbounds %union.tree_node* %t.08, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !25
  %code = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 5
  br i1 %cmp, label %for.end, label %if.else

if.else:                                          ; preds = %for.body
  %inc = add nsw i32 %i.07, 1
  %chain = getelementptr inbounds %union.tree_node* %t.08, i64 0, i32 0, i32 0, i32 0
  %4 = load %union.tree_node** %chain, align 8, !tbaa !27
  %tobool = icmp eq %union.tree_node* %4, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.else, %entry
  %i.0.lcssa = phi i32 [ 0, %entry ], [ %i.07, %for.body ], [ %inc, %if.else ]
  ret i32 %i.0.lcssa
}

; Function Attrs: nounwind readonly uwtable
define i32 @tree_int_cst_equal(%union.tree_node* readonly %t1, %union.tree_node* readonly %t2) #3 {
entry:
  %cmp = icmp eq %union.tree_node* %t1, %t2
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq %union.tree_node* %t1, null
  %cmp2 = icmp eq %union.tree_node* %t2, null
  %or.cond = or i1 %cmp1, %cmp2
  br i1 %or.cond, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %code = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp5 = icmp eq i32 %bf.clear, 25
  br i1 %cmp5, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %if.end4
  %code7 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 25
  br i1 %cmp10, label %land.lhs.true11, label %if.end25

land.lhs.true11:                                  ; preds = %land.lhs.true
  %int_cst12 = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst12 to i64*
  %0 = load i64* %low, align 8, !tbaa !20
  %int_cst14 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 2
  %low15 = bitcast i32* %int_cst14 to i64*
  %1 = load i64* %low15, align 8, !tbaa !20
  %cmp16 = icmp eq i64 %0, %1
  br i1 %cmp16, label %land.lhs.true17, label %if.end25

land.lhs.true17:                                  ; preds = %land.lhs.true11
  %high = getelementptr inbounds i32* %int_cst12, i64 2
  %2 = bitcast i32* %high to i64*
  %3 = load i64* %2, align 8, !tbaa !23
  %high22 = getelementptr inbounds i32* %int_cst14, i64 2
  %4 = bitcast i32* %high22 to i64*
  %5 = load i64* %4, align 8, !tbaa !23
  %cmp23 = icmp eq i64 %3, %5
  br i1 %cmp23, label %return, label %if.end25

if.end25:                                         ; preds = %land.lhs.true17, %land.lhs.true11, %land.lhs.true, %if.end4
  br label %return

return:                                           ; preds = %land.lhs.true17, %if.end, %entry, %if.end25
  %retval.0 = phi i32 [ 0, %if.end25 ], [ 1, %entry ], [ 0, %if.end ], [ 1, %land.lhs.true17 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @tree_int_cst_lt(%union.tree_node* readonly %t1, %union.tree_node* readonly %t2) #3 {
entry:
  %cmp = icmp eq %union.tree_node* %t1, %t2
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !15
  %unsigned_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  %type3 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type3, align 8, !tbaa !15
  %unsigned_flag5 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load6 = load i32* %unsigned_flag5, align 8
  %bf.lshr7 = lshr i32 %bf.load6, 13
  %bf.clear8 = and i32 %bf.lshr7, 1
  %cmp9 = icmp eq i32 %bf.clear, %bf.clear8
  br i1 %cmp9, label %if.else18, label %if.then10

if.then10:                                        ; preds = %if.end
  %int_cst1.i = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 2
  %low.i = bitcast i32* %int_cst1.i to i64*
  %2 = load i64* %low.i, align 8, !tbaa !20
  %cmp.i = icmp eq i64 %2, 0
  br i1 %cmp.i, label %land.lhs.true.i, label %if.else.i

land.lhs.true.i:                                  ; preds = %if.then10
  %high.i = getelementptr inbounds i32* %int_cst1.i, i64 2
  %3 = bitcast i32* %high.i to i64*
  %4 = load i64* %3, align 8, !tbaa !23
  %cmp4.i = icmp eq i64 %4, 0
  br i1 %cmp4.i, label %tree_int_cst_sgn.exit, label %if.else.i

if.else.i:                                        ; preds = %land.lhs.true.i, %if.then10
  %bf.clear.i = and i32 %bf.load, 8192
  %tobool.i = icmp eq i32 %bf.clear.i, 0
  br i1 %tobool.i, label %if.else7.i, label %tree_int_cst_sgn.exit

if.else7.i:                                       ; preds = %if.else.i
  %high10.i = getelementptr inbounds i32* %int_cst1.i, i64 2
  %5 = bitcast i32* %high10.i to i64*
  %6 = load i64* %5, align 8, !tbaa !23
  %cmp11.i = icmp slt i64 %6, 0
  %..i = select i1 %cmp11.i, i32 -1, i32 1
  br label %tree_int_cst_sgn.exit

tree_int_cst_sgn.exit:                            ; preds = %land.lhs.true.i, %if.else.i, %if.else7.i
  %retval.0.i = phi i32 [ 0, %land.lhs.true.i ], [ 1, %if.else.i ], [ %..i, %if.else7.i ]
  %int_cst1.i91 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 2
  %low.i92 = bitcast i32* %int_cst1.i91 to i64*
  %7 = load i64* %low.i92, align 8, !tbaa !20
  %cmp.i93 = icmp eq i64 %7, 0
  br i1 %cmp.i93, label %land.lhs.true.i96, label %if.else.i102

land.lhs.true.i96:                                ; preds = %tree_int_cst_sgn.exit
  %high.i94 = getelementptr inbounds i32* %int_cst1.i91, i64 2
  %8 = bitcast i32* %high.i94 to i64*
  %9 = load i64* %8, align 8, !tbaa !23
  %cmp4.i95 = icmp eq i64 %9, 0
  br i1 %cmp4.i95, label %tree_int_cst_sgn.exit108, label %if.else.i102

if.else.i102:                                     ; preds = %land.lhs.true.i96, %tree_int_cst_sgn.exit
  %bf.clear.i100 = and i32 %bf.load6, 8192
  %tobool.i101 = icmp eq i32 %bf.clear.i100, 0
  br i1 %tobool.i101, label %if.else7.i106, label %tree_int_cst_sgn.exit108

if.else7.i106:                                    ; preds = %if.else.i102
  %high10.i103 = getelementptr inbounds i32* %int_cst1.i91, i64 2
  %10 = bitcast i32* %high10.i103 to i64*
  %11 = load i64* %10, align 8, !tbaa !23
  %cmp11.i104 = icmp slt i64 %11, 0
  %..i105 = select i1 %cmp11.i104, i32 -1, i32 1
  br label %tree_int_cst_sgn.exit108

tree_int_cst_sgn.exit108:                         ; preds = %land.lhs.true.i96, %if.else.i102, %if.else7.i106
  %retval.0.i107 = phi i32 [ 0, %land.lhs.true.i96 ], [ 1, %if.else.i102 ], [ %..i105, %if.else7.i106 ]
  %cmp12 = icmp slt i32 %retval.0.i, %retval.0.i107
  br i1 %cmp12, label %return, label %if.else

if.else:                                          ; preds = %tree_int_cst_sgn.exit108
  %cmp14 = icmp sgt i32 %retval.0.i, %retval.0.i107
  br i1 %cmp14, label %return, label %if.end46

if.else18:                                        ; preds = %if.end
  %tobool = icmp eq i32 %bf.clear, 0
  %int_cst27 = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 2
  br i1 %tobool, label %if.then26, label %if.else18.if.end46_crit_edge

if.else18.if.end46_crit_edge:                     ; preds = %if.else18
  %int_cst51.pre = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 2
  br label %if.end46

if.then26:                                        ; preds = %if.else18
  %high = getelementptr inbounds i32* %int_cst27, i64 2
  %12 = bitcast i32* %high to i64*
  %13 = load i64* %12, align 8, !tbaa !23
  %int_cst29 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 2
  %high30 = getelementptr inbounds i32* %int_cst29, i64 2
  %14 = bitcast i32* %high30 to i64*
  %15 = load i64* %14, align 8, !tbaa !23
  %cmp31 = icmp slt i64 %13, %15
  br i1 %cmp31, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then26
  %cmp38 = icmp eq i64 %13, %15
  br i1 %cmp38, label %land.rhs, label %lor.end

land.rhs:                                         ; preds = %lor.rhs
  %low = bitcast i32* %int_cst27 to i64*
  %16 = load i64* %low, align 8, !tbaa !20
  %low43 = bitcast i32* %int_cst29 to i64*
  %17 = load i64* %low43, align 8, !tbaa !20
  %cmp44 = icmp ult i64 %16, %17
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %if.then26
  %18 = phi i1 [ true, %if.then26 ], [ false, %lor.rhs ], [ %cmp44, %land.rhs ]
  %lor.ext = zext i1 %18 to i32
  br label %return

if.end46:                                         ; preds = %if.else18.if.end46_crit_edge, %if.else
  %int_cst51.pre-phi = phi i32* [ %int_cst51.pre, %if.else18.if.end46_crit_edge ], [ %int_cst1.i91, %if.else ]
  %int_cst48.pre-phi = phi i32* [ %int_cst27, %if.else18.if.end46_crit_edge ], [ %int_cst1.i, %if.else ]
  %high49 = getelementptr inbounds i32* %int_cst48.pre-phi, i64 2
  %19 = bitcast i32* %high49 to i64*
  %20 = load i64* %19, align 8, !tbaa !23
  %high52 = getelementptr inbounds i32* %int_cst51.pre-phi, i64 2
  %21 = bitcast i32* %high52 to i64*
  %22 = load i64* %21, align 8, !tbaa !23
  %cmp53 = icmp ult i64 %20, %22
  br i1 %cmp53, label %lor.end71, label %lor.rhs54

lor.rhs54:                                        ; preds = %if.end46
  %cmp61 = icmp eq i64 %20, %22
  br i1 %cmp61, label %land.rhs62, label %lor.end71

land.rhs62:                                       ; preds = %lor.rhs54
  %low65 = bitcast i32* %int_cst48.pre-phi to i64*
  %23 = load i64* %low65, align 8, !tbaa !20
  %low68 = bitcast i32* %int_cst51.pre-phi to i64*
  %24 = load i64* %low68, align 8, !tbaa !20
  %cmp69 = icmp ult i64 %23, %24
  br label %lor.end71

lor.end71:                                        ; preds = %lor.rhs54, %land.rhs62, %if.end46
  %25 = phi i1 [ true, %if.end46 ], [ false, %lor.rhs54 ], [ %cmp69, %land.rhs62 ]
  %lor.ext72 = zext i1 %25 to i32
  br label %return

return:                                           ; preds = %if.else, %tree_int_cst_sgn.exit108, %entry, %lor.end71, %lor.end
  %retval.0 = phi i32 [ %lor.ext72, %lor.end71 ], [ %lor.ext, %lor.end ], [ 0, %entry ], [ 1, %tree_int_cst_sgn.exit108 ], [ 0, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @tree_int_cst_sgn(%union.tree_node* nocapture readonly %t) #3 {
entry:
  %int_cst1 = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst1 to i64*
  %0 = load i64* %low, align 8, !tbaa !20
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %high = getelementptr inbounds i32* %int_cst1, i64 2
  %1 = bitcast i32* %high to i64*
  %2 = load i64* %1, align 8, !tbaa !23
  %cmp4 = icmp eq i64 %2, 0
  br i1 %cmp4, label %return, label %if.else

if.else:                                          ; preds = %land.lhs.true, %entry
  %type = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type, align 8, !tbaa !15
  %unsigned_flag = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %unsigned_flag, align 8
  %bf.clear = and i32 %bf.load, 8192
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %if.else7, label %return

if.else7:                                         ; preds = %if.else
  %high10 = getelementptr inbounds i32* %int_cst1, i64 2
  %4 = bitcast i32* %high10 to i64*
  %5 = load i64* %4, align 8, !tbaa !23
  %cmp11 = icmp slt i64 %5, 0
  %. = select i1 %cmp11, i32 -1, i32 1
  br label %return

return:                                           ; preds = %if.else7, %if.else, %land.lhs.true
  %retval.0 = phi i32 [ 0, %land.lhs.true ], [ 1, %if.else ], [ %., %if.else7 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @tree_int_cst_compare(%union.tree_node* readonly %t1, %union.tree_node* readonly %t2) #3 {
entry:
  %call = tail call i32 @tree_int_cst_lt(%union.tree_node* %t1, %union.tree_node* %t2)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.else, label %return

if.else:                                          ; preds = %entry
  %call1 = tail call i32 @tree_int_cst_lt(%union.tree_node* %t2, %union.tree_node* %t1)
  %not.tobool2 = icmp ne i32 %call1, 0
  %. = zext i1 %not.tobool2 to i32
  br label %return

return:                                           ; preds = %if.else, %entry
  %retval.0 = phi i32 [ -1, %entry ], [ %., %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @host_integerp(%union.tree_node* nocapture readonly %t, i32 %pos) #3 {
entry:
  %code = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %0 = and i32 %bf.load, 524543
  %1 = icmp eq i32 %0, 25
  br i1 %1, label %land.rhs, label %land.end34

land.rhs:                                         ; preds = %entry
  %int_cst4 = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 2
  %high = getelementptr inbounds i32* %int_cst4, i64 2
  %2 = bitcast i32* %high to i64*
  %3 = load i64* %2, align 8, !tbaa !23
  %cmp5 = icmp eq i64 %3, 0
  br i1 %cmp5, label %land.lhs.true6, label %lor.lhs.false

land.lhs.true6:                                   ; preds = %land.rhs
  %low = bitcast i32* %int_cst4 to i64*
  %4 = load i64* %low, align 8, !tbaa !20
  %cmp9 = icmp sgt i64 %4, -1
  br i1 %cmp9, label %land.end34, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true6, %land.rhs
  %tobool10 = icmp eq i32 %pos, 0
  br i1 %tobool10, label %land.lhs.true11, label %land.end34

land.lhs.true11:                                  ; preds = %lor.lhs.false
  %cmp15 = icmp eq i64 %3, -1
  br i1 %cmp15, label %land.lhs.true16, label %land.end34

land.lhs.true16:                                  ; preds = %land.lhs.true11
  %low19 = bitcast i32* %int_cst4 to i64*
  %5 = load i64* %low19, align 8, !tbaa !20
  %cmp20 = icmp slt i64 %5, 0
  br i1 %cmp20, label %land.lhs.true21, label %land.end34

land.lhs.true21:                                  ; preds = %land.lhs.true16
  %type = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type, align 8, !tbaa !15
  %unsigned_flag = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load24 = load i32* %unsigned_flag, align 8
  %bf.clear26 = and i32 %bf.load24, 8192
  %tobool27 = icmp eq i32 %bf.clear26, 0
  br label %land.end34

land.end34:                                       ; preds = %lor.lhs.false, %land.lhs.true16, %land.lhs.true21, %land.lhs.true11, %land.lhs.true6, %entry
  %7 = phi i1 [ false, %entry ], [ %tobool27, %land.lhs.true21 ], [ true, %land.lhs.true6 ], [ false, %land.lhs.true11 ], [ false, %land.lhs.true16 ], [ %cmp5, %lor.lhs.false ]
  %land.ext = zext i1 %7 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @tree_int_cst_msb(%union.tree_node* nocapture readonly %t) #0 {
entry:
  %h = alloca i64, align 8
  %l = alloca i64, align 8
  %type = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !15
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  %idxprom9 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom9
  %1 = load i16* %arrayidx, align 2, !tbaa !69
  %conv = zext i16 %1 to i64
  %sub = add i64 %conv, -1
  %int_cst2 = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst2 to i64*
  %2 = load i64* %low, align 8, !tbaa !20
  %high = getelementptr inbounds i32* %int_cst2, i64 2
  %3 = bitcast i32* %high to i64*
  %4 = load i64* %3, align 8, !tbaa !23
  call void @rshift_double(i64 %2, i64 %4, i64 %sub, i32 128, i64* %l, i64* %h, i32 0) #4
  %5 = load i64* %l, align 8, !tbaa !92
  %.tr = trunc i64 %5 to i32
  %conv6 = and i32 %.tr, 1
  ret i32 %conv6
}

declare void @rshift_double(i64, i64, i64, i32, i64*, i64*, i32) #2

; Function Attrs: nounwind uwtable
define i32 @simple_cst_list_equal(%union.tree_node* readonly %l1, %union.tree_node* readonly %l2) #0 {
entry:
  %cmp115 = icmp ne %union.tree_node* %l2, null
  %not.cmp16 = icmp ne %union.tree_node* %l1, null
  %.cmp117 = and i1 %cmp115, %not.cmp16
  br i1 %.cmp117, label %while.body, label %while.end

while.body:                                       ; preds = %entry, %if.end
  %l2.addr.019 = phi %union.tree_node* [ %5, %if.end ], [ %l2, %entry ]
  %l1.addr.018 = phi %union.tree_node* [ %4, %if.end ], [ %l1, %entry ]
  %value = getelementptr inbounds %union.tree_node* %l1.addr.018, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !25
  %value3 = getelementptr inbounds %union.tree_node* %l2.addr.019, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value3 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !25
  %call = tail call i32 @simple_cst_equal(%union.tree_node* %1, %union.tree_node* %3)
  %cmp4 = icmp eq i32 %call, 1
  br i1 %cmp4, label %if.end, label %return

if.end:                                           ; preds = %while.body
  %chain = getelementptr inbounds %union.tree_node* %l1.addr.018, i64 0, i32 0, i32 0, i32 0
  %4 = load %union.tree_node** %chain, align 8, !tbaa !27
  %chain6 = getelementptr inbounds %union.tree_node* %l2.addr.019, i64 0, i32 0, i32 0, i32 0
  %5 = load %union.tree_node** %chain6, align 8, !tbaa !27
  %cmp1 = icmp ne %union.tree_node* %5, null
  %not.cmp = icmp ne %union.tree_node* %4, null
  %.cmp1 = and i1 %cmp1, %not.cmp
  br i1 %.cmp1, label %while.body, label %while.end

while.end:                                        ; preds = %if.end, %entry
  %l2.addr.0.lcssa = phi %union.tree_node* [ %l2, %entry ], [ %5, %if.end ]
  %l1.addr.0.lcssa = phi %union.tree_node* [ %l1, %entry ], [ %4, %if.end ]
  %cmp7 = icmp eq %union.tree_node* %l1.addr.0.lcssa, %l2.addr.0.lcssa
  %conv = zext i1 %cmp7 to i32
  br label %return

return:                                           ; preds = %while.body, %while.end
  %retval.0 = phi i32 [ %conv, %while.end ], [ 0, %while.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) #6

; Function Attrs: nounwind readonly uwtable
define i32 @compare_tree_int(%union.tree_node* nocapture readonly %t, i64 %u) #3 {
entry:
  %int_cst1.i = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 2
  %low.i = bitcast i32* %int_cst1.i to i64*
  %0 = load i64* %low.i, align 8, !tbaa !20
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %land.lhs.true.i, label %if.else.i

land.lhs.true.i:                                  ; preds = %entry
  %high.i = getelementptr inbounds i32* %int_cst1.i, i64 2
  %1 = bitcast i32* %high.i to i64*
  %2 = load i64* %1, align 8, !tbaa !23
  %cmp4.i = icmp eq i64 %2, 0
  br i1 %cmp4.i, label %if.else4, label %if.else.i

if.else.i:                                        ; preds = %land.lhs.true.i, %entry
  %type.i = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type.i, align 8, !tbaa !15
  %unsigned_flag.i = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %unsigned_flag.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 8192
  %tobool.i = icmp eq i32 %bf.clear.i, 0
  %high10.i = getelementptr inbounds i32* %int_cst1.i, i64 2
  %4 = bitcast i32* %high10.i to i64*
  %5 = load i64* %4, align 8, !tbaa !23
  %cmp11.i = icmp slt i64 %5, 0
  %or.cond = and i1 %tobool.i, %cmp11.i
  br i1 %or.cond, label %return, label %if.else

if.else:                                          ; preds = %if.else.i
  %cmp2 = icmp eq i64 %5, 0
  br i1 %cmp2, label %if.else4, label %return

if.else4:                                         ; preds = %land.lhs.true.i, %if.else
  %cmp7 = icmp eq i64 %0, %u
  br i1 %cmp7, label %return, label %if.else9

if.else9:                                         ; preds = %if.else4
  %cmp13 = icmp ult i64 %0, %u
  %. = select i1 %cmp13, i32 -1, i32 1
  br label %return

return:                                           ; preds = %if.else.i, %if.else9, %if.else4, %if.else
  %retval.0 = phi i32 [ 1, %if.else ], [ 0, %if.else4 ], [ %., %if.else9 ], [ -1, %if.else.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_reference_type(%union.tree_node* %to_type) #0 {
entry:
  %0 = getelementptr inbounds %union.tree_node* %to_type, i64 0, i32 0, i32 9
  %1 = load %union.tree_node** %0, align 8, !tbaa !93
  %tobool = icmp eq %union.tree_node* %1, null
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call = tail call %union.tree_node* @make_node(i32 15)
  %type1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %to_type, %union.tree_node** %type1, align 8, !tbaa !15
  store %union.tree_node* %call, %union.tree_node** %0, align 8, !tbaa !93
  tail call void @layout_type(%union.tree_node* %call) #4
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %call, %if.end ], [ %1, %entry ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_type_no_quals(%union.tree_node* nocapture readonly %t) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 13, label %sw.bb
    i32 15, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  %type = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !15
  %call = tail call %union.tree_node* @build_type_no_quals(%union.tree_node* %0)
  %1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 8
  %2 = load %union.tree_node** %1, align 8, !tbaa !81
  %cmp.i = icmp eq %union.tree_node* %2, null
  br i1 %cmp.i, label %if.end.i14, label %return

if.end.i14:                                       ; preds = %sw.bb
  %call.i12 = tail call %union.tree_node* @make_node(i32 13) #4
  %type1.i13 = getelementptr inbounds %union.tree_node* %call.i12, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type1.i13, align 8, !tbaa !15
  store %union.tree_node* %call.i12, %union.tree_node** %1, align 8, !tbaa !81
  tail call void @layout_type(%union.tree_node* %call.i12) #4
  br label %return

sw.bb3:                                           ; preds = %entry
  %type5 = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type5, align 8, !tbaa !15
  %call6 = tail call %union.tree_node* @build_type_no_quals(%union.tree_node* %3)
  %4 = getelementptr inbounds %union.tree_node* %call6, i64 0, i32 0, i32 9
  %5 = load %union.tree_node** %4, align 8, !tbaa !93
  %tobool.i = icmp eq %union.tree_node* %5, null
  br i1 %tobool.i, label %if.end.i, label %return

if.end.i:                                         ; preds = %sw.bb3
  %call.i = tail call %union.tree_node* @make_node(i32 15) #4
  %type1.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call6, %union.tree_node** %type1.i, align 8, !tbaa !15
  store %union.tree_node* %call.i, %union.tree_node** %4, align 8, !tbaa !93
  tail call void @layout_type(%union.tree_node* %call.i) #4
  br label %return

sw.default:                                       ; preds = %entry
  %6 = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 15
  %7 = load %union.tree_node** %6, align 8, !tbaa !46
  br label %return

return:                                           ; preds = %if.end.i, %sw.bb3, %if.end.i14, %sw.bb, %sw.default
  %retval.0 = phi %union.tree_node* [ %7, %sw.default ], [ %call.i12, %if.end.i14 ], [ %2, %sw.bb ], [ %call.i, %if.end.i ], [ %5, %sw.bb3 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_index_type(%union.tree_node* %maxval) #0 {
entry:
  %in.i.i = alloca %struct.type_hash, align 8
  %call = call %union.tree_node* @make_node(i32 6)
  %0 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %type = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %0, %union.tree_node** %type, align 8, !tbaa !15
  %1 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %precision, align 4
  %bf.clear = and i32 %bf.load, 511
  %type2 = bitcast %union.tree_node* %call to %struct.tree_type*
  %precision3 = getelementptr inbounds %struct.tree_type* %type2, i64 0, i32 6
  %bf.load4 = load i32* %precision3, align 4
  %bf.clear5 = and i32 %bf.load4, -512
  %bf.set = or i32 %bf.clear5, %bf.clear
  store i32 %bf.set, i32* %precision3, align 4
  %2 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !10
  %3 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 12
  store %union.tree_node* %2, %union.tree_node** %3, align 8, !tbaa !24
  %4 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %call7 = call %union.tree_node* @convert(%union.tree_node* %4, %union.tree_node* %maxval) #4
  %5 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 13
  store %union.tree_node* %call7, %union.tree_node** %5, align 8, !tbaa !19
  %6 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %type10 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type10, i64 0, i32 6
  %bf.load11 = load i32* %mode, align 4
  %bf.clear12 = and i32 %bf.load11, 65024
  %bf.load15 = load i32* %precision3, align 4
  %bf.clear17 = and i32 %bf.load15, -65025
  %bf.set18 = or i32 %bf.clear17, %bf.clear12
  store i32 %bf.set18, i32* %precision3, align 4
  %7 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %size = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 2
  %8 = bitcast i32* %size to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !67
  %size21 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %10 = bitcast i32* %size21 to %union.tree_node**
  store %union.tree_node* %9, %union.tree_node** %10, align 8, !tbaa !67
  %11 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %12 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 4
  %13 = load %union.tree_node** %12, align 8, !tbaa !72
  %14 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 4
  store %union.tree_node* %13, %union.tree_node** %14, align 8, !tbaa !72
  %15 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %align = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 7
  %16 = bitcast %union.tree_node** %align to i32*
  %17 = load i32* %16, align 4, !tbaa !18
  %align27 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 7
  %18 = bitcast %union.tree_node** %align27 to i32*
  store i32 %17, i32* %18, align 4, !tbaa !18
  %type28 = bitcast %union.tree_node* %15 to %struct.tree_type*
  %user_align = getelementptr inbounds %struct.tree_type* %type28, i64 0, i32 6
  %bf.load29 = load i32* %user_align, align 4
  %bf.lshr30 = and i32 %bf.load29, -2147483648
  %bf.clear36 = and i32 %bf.set18, 2147483647
  %bf.set37 = or i32 %bf.clear36, %bf.lshr30
  store i32 %bf.set37, i32* %precision3, align 4
  %code.i = getelementptr inbounds %union.tree_node* %maxval, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %19 = and i32 %bf.load.i, 524543
  %20 = icmp eq i32 %19, 25
  br i1 %20, label %land.rhs.i, label %return

land.rhs.i:                                       ; preds = %entry
  %int_cst4.i = getelementptr inbounds %union.tree_node* %maxval, i64 0, i32 0, i32 2
  %high.i = getelementptr inbounds i32* %int_cst4.i, i64 2
  %21 = bitcast i32* %high.i to i64*
  %22 = load i64* %21, align 8, !tbaa !23
  %cmp5.i = icmp eq i64 %22, 0
  br i1 %cmp5.i, label %land.lhs.true6.i.i, label %return

land.lhs.true6.i.i:                               ; preds = %land.rhs.i
  %low.i = bitcast i32* %int_cst4.i to i64*
  %23 = load i64* %low.i, align 8, !tbaa !20
  %conv = trunc i64 %23 to i32
  %24 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool.i = icmp eq i32 %24, 0
  br i1 %tobool.i, label %if.end.i, label %return

if.end.i:                                         ; preds = %land.lhs.true6.i.i
  %25 = bitcast %struct.type_hash* %in.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %25) #4
  call void @layout_type(%union.tree_node* %call) #4
  %conv.i.i = and i64 %23, 4294967295
  %hash.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 0
  store i64 %conv.i.i, i64* %hash.i.i, align 8, !tbaa !11
  %type1.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type1.i.i, align 8, !tbaa !14
  %26 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i.i = call i8* @htab_find_with_hash(%struct.htab* %26, i8* %25, i32 %conv) #4
  %tobool.i.i = icmp eq i8* %call.i.i, null
  br i1 %tobool.i.i, label %if.else.i, label %type_hash_lookup.exit.i

type_hash_lookup.exit.i:                          ; preds = %if.end.i
  %type2.i.i = getelementptr inbounds i8* %call.i.i, i64 8
  %27 = bitcast i8* %type2.i.i to %union.tree_node**
  %28 = load %union.tree_node** %27, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %25) #4
  %cmp.i = icmp eq %union.tree_node* %28, null
  br i1 %cmp.i, label %if.else.i, label %return

if.else.i:                                        ; preds = %type_hash_lookup.exit.i, %if.end.i
  %call.i7.i = call i8* @ggc_alloc(i64 16) #4
  %hash.i9.i = bitcast i8* %call.i7.i to i64*
  store i64 %conv.i.i, i64* %hash.i9.i, align 8, !tbaa !11
  %type1.i10.i = getelementptr inbounds i8* %call.i7.i, i64 8
  %29 = bitcast i8* %type1.i10.i to %union.tree_node**
  store %union.tree_node* %call, %union.tree_node** %29, align 8, !tbaa !14
  %30 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %30, i8* %call.i7.i, i32 %conv, i32 1) #4
  store i8* %call.i7.i, i8** %call2.i.i, align 8, !tbaa !10
  br label %return

return:                                           ; preds = %land.rhs.i, %entry, %if.else.i, %type_hash_lookup.exit.i, %land.lhs.true6.i.i
  %retval.0 = phi %union.tree_node* [ %call, %if.else.i ], [ %call, %land.lhs.true6.i.i ], [ %28, %type_hash_lookup.exit.i ], [ %call, %entry ], [ %call, %land.rhs.i ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_range_type(%union.tree_node* %type, %union.tree_node* %lowval, %union.tree_node* %highval) #0 {
entry:
  %in.i.i = alloca %struct.type_hash, align 8
  %call = call %union.tree_node* @make_node(i32 6)
  %type1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type1, align 8, !tbaa !15
  %cmp = icmp eq %union.tree_node* %type, null
  %0 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %.type = select i1 %cmp, %union.tree_node* %0, %union.tree_node* %type
  %call2 = call %union.tree_node* @convert(%union.tree_node* %.type, %union.tree_node* %lowval) #4
  %type3 = bitcast %union.tree_node* %call to %struct.tree_type*
  %1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 12
  store %union.tree_node* %call2, %union.tree_node** %1, align 8, !tbaa !24
  %tobool = icmp ne %union.tree_node* %highval, null
  br i1 %tobool, label %cond.true, label %cond.end

cond.true:                                        ; preds = %entry
  %call4 = call %union.tree_node* @convert(%union.tree_node* %.type, %union.tree_node* %highval) #4
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %union.tree_node* [ %call4, %cond.true ], [ null, %entry ]
  %2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 13
  store %union.tree_node* %cond, %union.tree_node** %2, align 8, !tbaa !19
  %type6 = bitcast %union.tree_node* %.type to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type6, i64 0, i32 6
  %bf.load = load i32* %precision, align 4
  %bf.clear = and i32 %bf.load, 511
  %precision8 = getelementptr inbounds %struct.tree_type* %type3, i64 0, i32 6
  %bf.load9 = load i32* %precision8, align 4
  %bf.clear10 = and i32 %bf.load9, -512
  %bf.set = or i32 %bf.clear10, %bf.clear
  store i32 %bf.set, i32* %precision8, align 4
  %bf.load12 = load i32* %precision, align 4
  %bf.clear13 = and i32 %bf.load12, 65024
  %bf.clear18 = and i32 %bf.set, -65025
  %bf.set19 = or i32 %bf.clear18, %bf.clear13
  store i32 %bf.set19, i32* %precision8, align 4
  %size = getelementptr inbounds %union.tree_node* %.type, i64 0, i32 0, i32 2
  %size22 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %3 = bitcast i32* %size to <2 x %union.tree_node*>*
  %4 = load <2 x %union.tree_node*>* %3, align 8, !tbaa !10
  %5 = bitcast i32* %size22 to <2 x %union.tree_node*>*
  store <2 x %union.tree_node*> %4, <2 x %union.tree_node*>* %5, align 8, !tbaa !10
  %align = getelementptr inbounds %union.tree_node* %.type, i64 0, i32 0, i32 7
  %6 = bitcast %union.tree_node** %align to i32*
  %7 = load i32* %6, align 4, !tbaa !18
  %align28 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 7
  %8 = bitcast %union.tree_node** %align28 to i32*
  store i32 %7, i32* %8, align 4, !tbaa !18
  %bf.load30 = load i32* %precision, align 4
  %bf.lshr31 = and i32 %bf.load30, -2147483648
  %bf.clear37 = and i32 %bf.set19, 2147483647
  %bf.set38 = or i32 %bf.clear37, %bf.lshr31
  store i32 %bf.set38, i32* %precision8, align 4
  %code.i = getelementptr inbounds %union.tree_node* %lowval, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %9 = and i32 %bf.load.i, 524543
  %10 = icmp eq i32 %9, 25
  br i1 %10, label %land.rhs.i, label %return

land.rhs.i:                                       ; preds = %cond.end
  %int_cst4.i = getelementptr inbounds %union.tree_node* %lowval, i64 0, i32 0, i32 2
  %high.i = getelementptr inbounds i32* %int_cst4.i, i64 2
  %11 = bitcast i32* %high.i to i64*
  %12 = load i64* %11, align 8, !tbaa !23
  switch i64 %12, label %return [
    i64 0, label %land.lhs.true6.i
    i64 -1, label %land.lhs.true16.i
  ]

land.lhs.true6.i:                                 ; preds = %land.rhs.i
  %low.i = bitcast i32* %int_cst4.i to i64*
  %13 = load i64* %low.i, align 8, !tbaa !20
  %cmp9.i = icmp sgt i64 %13, -1
  br i1 %cmp9.i, label %host_integerp.exit, label %return

land.lhs.true16.i:                                ; preds = %land.rhs.i
  %low19.i = bitcast i32* %int_cst4.i to i64*
  %14 = load i64* %low19.i, align 8, !tbaa !20
  %cmp20.i = icmp slt i64 %14, 0
  br i1 %cmp20.i, label %land.lhs.true21.i, label %return

land.lhs.true21.i:                                ; preds = %land.lhs.true16.i
  %type.i = getelementptr inbounds %union.tree_node* %lowval, i64 0, i32 0, i32 0, i32 1
  %15 = load %union.tree_node** %type.i, align 8, !tbaa !15
  %unsigned_flag.i = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i = load i32* %unsigned_flag.i, align 8
  %bf.clear26.i = and i32 %bf.load24.i, 8192
  %tobool27.i = icmp eq i32 %bf.clear26.i, 0
  br label %host_integerp.exit

host_integerp.exit:                               ; preds = %land.lhs.true6.i, %land.lhs.true21.i
  %16 = phi i64 [ %14, %land.lhs.true21.i ], [ %13, %land.lhs.true6.i ]
  %17 = phi i1 [ %tobool27.i, %land.lhs.true21.i ], [ true, %land.lhs.true6.i ]
  %or.cond = and i1 %17, %tobool
  br i1 %or.cond, label %land.lhs.true42, label %return

land.lhs.true42:                                  ; preds = %host_integerp.exit
  %code.i74 = getelementptr inbounds %union.tree_node* %highval, i64 0, i32 0, i32 0, i32 2
  %bf.load.i75 = load i32* %code.i74, align 8
  %18 = and i32 %bf.load.i75, 524543
  %19 = icmp eq i32 %18, 25
  br i1 %19, label %land.rhs.i79, label %return

land.rhs.i79:                                     ; preds = %land.lhs.true42
  %int_cst4.i76 = getelementptr inbounds %union.tree_node* %highval, i64 0, i32 0, i32 2
  %high.i77 = getelementptr inbounds i32* %int_cst4.i76, i64 2
  %20 = bitcast i32* %high.i77 to i64*
  %21 = load i64* %20, align 8, !tbaa !23
  switch i64 %21, label %return [
    i64 0, label %host_integerp.exit95
    i64 -1, label %land.lhs.true16.i87
  ]

land.lhs.true16.i87:                              ; preds = %land.rhs.i79
  %low19.i85 = bitcast i32* %int_cst4.i76 to i64*
  %22 = load i64* %low19.i85, align 8, !tbaa !20
  %cmp20.i86 = icmp slt i64 %22, 0
  br i1 %cmp20.i86, label %land.lhs.true21.i93, label %return

land.lhs.true21.i93:                              ; preds = %land.lhs.true16.i87
  %type.i88 = getelementptr inbounds %union.tree_node* %highval, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %type.i88, align 8, !tbaa !15
  %unsigned_flag.i89 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i90 = load i32* %unsigned_flag.i89, align 8
  %bf.clear26.i91 = and i32 %bf.load24.i90, 8192
  %tobool27.i92 = icmp eq i32 %bf.clear26.i91, 0
  br i1 %tobool27.i92, label %land.rhs.i.i, label %return

host_integerp.exit95:                             ; preds = %land.rhs.i79
  %low.i80 = bitcast i32* %int_cst4.i76 to i64*
  %24 = load i64* %low.i80, align 8, !tbaa !20
  %cmp9.i81 = icmp sgt i64 %24, -1
  br i1 %cmp9.i81, label %land.rhs.i.i102, label %return

land.rhs.i.i:                                     ; preds = %land.lhs.true21.i93
  %cond131 = icmp eq i64 %21, -1
  br i1 %cond131, label %land.lhs.true21.i.i, label %if.else.i96

land.lhs.true21.i.i:                              ; preds = %land.rhs.i.i
  %type.i.i = getelementptr inbounds %union.tree_node* %highval, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type.i.i, align 8, !tbaa !15
  %unsigned_flag.i.i = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i.i = load i32* %unsigned_flag.i.i, align 8
  %bf.clear26.i.i = and i32 %bf.load24.i.i, 8192
  %tobool27.i.i = icmp eq i32 %bf.clear26.i.i, 0
  br i1 %tobool27.i.i, label %land.rhs.i.i102, label %if.else.i96

if.else.i96:                                      ; preds = %land.rhs.i.i, %land.lhs.true21.i.i
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

land.rhs.i.i102:                                  ; preds = %host_integerp.exit95, %land.lhs.true21.i.i
  %26 = phi i64 [ %22, %land.lhs.true21.i.i ], [ %24, %host_integerp.exit95 ]
  switch i64 %12, label %if.else.i120 [
    i64 0, label %land.lhs.true6.i.i105
    i64 -1, label %land.lhs.true16.i.i110
  ]

land.lhs.true6.i.i105:                            ; preds = %land.rhs.i.i102
  %cmp9.i.i104 = icmp sgt i64 %16, -1
  br i1 %cmp9.i.i104, label %tree_low_cst.exit121, label %if.else.i120

land.lhs.true16.i.i110:                           ; preds = %land.rhs.i.i102
  %cmp20.i.i109 = icmp slt i64 %16, 0
  br i1 %cmp20.i.i109, label %land.lhs.true21.i.i116, label %if.else.i120

land.lhs.true21.i.i116:                           ; preds = %land.lhs.true16.i.i110
  %type.i.i111 = getelementptr inbounds %union.tree_node* %lowval, i64 0, i32 0, i32 0, i32 1
  %27 = load %union.tree_node** %type.i.i111, align 8, !tbaa !15
  %unsigned_flag.i.i112 = getelementptr inbounds %union.tree_node* %27, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i.i113 = load i32* %unsigned_flag.i.i112, align 8
  %bf.clear26.i.i114 = and i32 %bf.load24.i.i113, 8192
  %tobool27.i.i115 = icmp eq i32 %bf.clear26.i.i114, 0
  br i1 %tobool27.i.i115, label %tree_low_cst.exit121, label %if.else.i120

if.else.i120:                                     ; preds = %land.rhs.i.i102, %land.lhs.true6.i.i105, %land.lhs.true21.i.i116, %land.lhs.true16.i.i110
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

tree_low_cst.exit121:                             ; preds = %land.lhs.true21.i.i116, %land.lhs.true6.i.i105
  %sub = sub nsw i64 %26, %16
  %conv = trunc i64 %sub to i32
  %28 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool.i = icmp eq i32 %28, 0
  br i1 %tobool.i, label %if.end.i, label %return

if.end.i:                                         ; preds = %tree_low_cst.exit121
  %29 = bitcast %struct.type_hash* %in.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %29) #4
  call void @layout_type(%union.tree_node* %call) #4
  %conv.i.i = and i64 %sub, 4294967295
  %hash.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 0
  store i64 %conv.i.i, i64* %hash.i.i, align 8, !tbaa !11
  %type1.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type1.i.i, align 8, !tbaa !14
  %30 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i.i = call i8* @htab_find_with_hash(%struct.htab* %30, i8* %29, i32 %conv) #4
  %tobool.i.i = icmp eq i8* %call.i.i, null
  br i1 %tobool.i.i, label %if.else.i, label %type_hash_lookup.exit.i

type_hash_lookup.exit.i:                          ; preds = %if.end.i
  %type2.i.i = getelementptr inbounds i8* %call.i.i, i64 8
  %31 = bitcast i8* %type2.i.i to %union.tree_node**
  %32 = load %union.tree_node** %31, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %29) #4
  %cmp.i = icmp eq %union.tree_node* %32, null
  br i1 %cmp.i, label %if.else.i, label %return

if.else.i:                                        ; preds = %type_hash_lookup.exit.i, %if.end.i
  %call.i7.i = call i8* @ggc_alloc(i64 16) #4
  %hash.i9.i = bitcast i8* %call.i7.i to i64*
  store i64 %conv.i.i, i64* %hash.i9.i, align 8, !tbaa !11
  %type1.i10.i = getelementptr inbounds i8* %call.i7.i, i64 8
  %33 = bitcast i8* %type1.i10.i to %union.tree_node**
  store %union.tree_node* %call, %union.tree_node** %33, align 8, !tbaa !14
  %34 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %34, i8* %call.i7.i, i32 %conv, i32 1) #4
  store i8* %call.i7.i, i8** %call2.i.i, align 8, !tbaa !10
  br label %return

return:                                           ; preds = %land.lhs.true21.i93, %land.rhs.i79, %land.lhs.true16.i87, %land.lhs.true42, %host_integerp.exit95, %land.rhs.i, %land.lhs.true6.i, %land.lhs.true16.i, %cond.end, %if.else.i, %type_hash_lookup.exit.i, %tree_low_cst.exit121, %host_integerp.exit
  %retval.0 = phi %union.tree_node* [ %call, %host_integerp.exit95 ], [ %call, %host_integerp.exit ], [ %call, %if.else.i ], [ %call, %tree_low_cst.exit121 ], [ %32, %type_hash_lookup.exit.i ], [ %call, %cond.end ], [ %call, %land.lhs.true16.i ], [ %call, %land.lhs.true6.i ], [ %call, %land.rhs.i ], [ %call, %land.lhs.true42 ], [ %call, %land.lhs.true16.i87 ], [ %call, %land.rhs.i79 ], [ %call, %land.lhs.true21.i93 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_index_2_type(%union.tree_node* %lowval, %union.tree_node* %highval) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !10
  %call = tail call %union.tree_node* @build_range_type(%union.tree_node* %0, %union.tree_node* %lowval, %union.tree_node* %highval)
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define i32 @index_type_equal(%union.tree_node* nocapture readonly %itype1, %union.tree_node* nocapture readonly %itype2) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %itype1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %code2 = getelementptr inbounds %union.tree_node* %itype2, i64 0, i32 0, i32 0, i32 2
  %bf.load3 = load i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp = icmp eq i32 %bf.clear, %bf.clear4
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %cmp9 = icmp eq i32 %bf.clear, 6
  br i1 %cmp9, label %if.then10, label %if.end51

if.then10:                                        ; preds = %if.end
  %type = bitcast %union.tree_node* %itype1 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type, i64 0, i32 6
  %bf.load11 = load i32* %precision, align 4
  %type13 = bitcast %union.tree_node* %itype2 to %struct.tree_type*
  %precision14 = getelementptr inbounds %struct.tree_type* %type13, i64 0, i32 6
  %bf.load15 = load i32* %precision14, align 4
  %0 = xor i32 %bf.load15, %bf.load11
  %1 = and i32 %0, 65535
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %lor.lhs.false27, label %return

lor.lhs.false27:                                  ; preds = %if.then10
  %size = getelementptr inbounds %union.tree_node* %itype1, i64 0, i32 0, i32 2
  %3 = bitcast i32* %size to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !67
  %size30 = getelementptr inbounds %union.tree_node* %itype2, i64 0, i32 0, i32 2
  %5 = bitcast i32* %size30 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !67
  %call = tail call i32 @simple_cst_equal(%union.tree_node* %4, %union.tree_node* %6)
  %cmp31 = icmp eq i32 %call, 1
  br i1 %cmp31, label %lor.lhs.false32, label %return

lor.lhs.false32:                                  ; preds = %lor.lhs.false27
  %align = getelementptr inbounds %union.tree_node* %itype1, i64 0, i32 0, i32 7
  %7 = bitcast %union.tree_node** %align to i32*
  %8 = load i32* %7, align 4, !tbaa !18
  %align35 = getelementptr inbounds %union.tree_node* %itype2, i64 0, i32 0, i32 7
  %9 = bitcast %union.tree_node** %align35 to i32*
  %10 = load i32* %9, align 4, !tbaa !18
  %cmp36 = icmp eq i32 %8, %10
  br i1 %cmp36, label %if.end38, label %return

if.end38:                                         ; preds = %lor.lhs.false32
  %11 = getelementptr inbounds %union.tree_node* %itype1, i64 0, i32 0, i32 12
  %12 = load %union.tree_node** %11, align 8, !tbaa !24
  %13 = getelementptr inbounds %union.tree_node* %itype2, i64 0, i32 0, i32 12
  %14 = load %union.tree_node** %13, align 8, !tbaa !24
  %call42 = tail call i32 @simple_cst_equal(%union.tree_node* %12, %union.tree_node* %14)
  %cmp43 = icmp eq i32 %call42, 1
  br i1 %cmp43, label %land.lhs.true, label %if.end51

land.lhs.true:                                    ; preds = %if.end38
  %15 = getelementptr inbounds %union.tree_node* %itype1, i64 0, i32 0, i32 13
  %16 = load %union.tree_node** %15, align 8, !tbaa !19
  %17 = getelementptr inbounds %union.tree_node* %itype2, i64 0, i32 0, i32 13
  %18 = load %union.tree_node** %17, align 8, !tbaa !19
  %call47 = tail call i32 @simple_cst_equal(%union.tree_node* %16, %union.tree_node* %18)
  %cmp48 = icmp eq i32 %call47, 1
  br i1 %cmp48, label %return, label %if.end51

if.end51:                                         ; preds = %if.end38, %land.lhs.true, %if.end
  br label %return

return:                                           ; preds = %land.lhs.true, %if.then10, %lor.lhs.false27, %lor.lhs.false32, %entry, %if.end51
  %retval.0 = phi i32 [ 0, %if.end51 ], [ 0, %entry ], [ 0, %lor.lhs.false32 ], [ 0, %lor.lhs.false27 ], [ 0, %if.then10 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_array_type(%union.tree_node* %elt_type, %union.tree_node* %index_type) #0 {
entry:
  %in.i.i = alloca %struct.type_hash, align 8
  %code = getelementptr inbounds %union.tree_node* %elt_type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 23
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([39 x i8]* @.str149, i64 0, i64 0)) #4
  %0 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %elt_type.addr.0 = phi %union.tree_node* [ %0, %if.then ], [ %elt_type, %entry ]
  %1 = getelementptr inbounds %union.tree_node* %elt_type.addr.0, i64 0, i32 0, i32 8
  %2 = load %union.tree_node** %1, align 8, !tbaa !81
  %cmp.i = icmp eq %union.tree_node* %2, null
  br i1 %cmp.i, label %if.end.i, label %build_pointer_type.exit

if.end.i:                                         ; preds = %if.end
  %call.i = call %union.tree_node* @make_node(i32 13) #4
  %type1.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %elt_type.addr.0, %union.tree_node** %type1.i, align 8, !tbaa !15
  store %union.tree_node* %call.i, %union.tree_node** %1, align 8, !tbaa !81
  call void @layout_type(%union.tree_node* %call.i) #4
  br label %build_pointer_type.exit

build_pointer_type.exit:                          ; preds = %if.end, %if.end.i
  %call1 = call %union.tree_node* @make_node(i32 18)
  %type = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %elt_type.addr.0, %union.tree_node** %type, align 8, !tbaa !15
  %values = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 1
  %index_type.c = bitcast %union.tree_node* %index_type to i8*
  store i8* %index_type.c, i8** %values, align 8, !tbaa !94
  %cmp4 = icmp eq %union.tree_node* %index_type, null
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %build_pointer_type.exit
  %3 = ptrtoint %union.tree_node* %elt_type.addr.0 to i64
  %and = and i64 %3, 262143
  %4 = ptrtoint %union.tree_node* %index_type to i64
  %and7 = and i64 %4, 262143
  %add = add i64 %and, %and7
  %conv = trunc i64 %add to i32
  %5 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool.i = icmp eq i32 %5, 0
  br i1 %tobool.i, label %if.end.i25, label %type_hash_canon.exit

if.end.i25:                                       ; preds = %if.end6
  %6 = bitcast %struct.type_hash* %in.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #4
  call void @layout_type(%union.tree_node* %call1) #4
  %conv.i.i = and i64 %add, 4294967295
  %hash.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 0
  store i64 %conv.i.i, i64* %hash.i.i, align 8, !tbaa !11
  %type1.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 1
  store %union.tree_node* %call1, %union.tree_node** %type1.i.i, align 8, !tbaa !14
  %7 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i.i = call i8* @htab_find_with_hash(%struct.htab* %7, i8* %6, i32 %conv) #4
  %tobool.i.i = icmp eq i8* %call.i.i, null
  br i1 %tobool.i.i, label %if.else.i, label %type_hash_lookup.exit.i

type_hash_lookup.exit.i:                          ; preds = %if.end.i25
  %type2.i.i = getelementptr inbounds i8* %call.i.i, i64 8
  %8 = bitcast i8* %type2.i.i to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %6) #4
  %cmp.i26 = icmp eq %union.tree_node* %9, null
  br i1 %cmp.i26, label %if.else.i, label %type_hash_canon.exit

if.else.i:                                        ; preds = %type_hash_lookup.exit.i, %if.end.i25
  %call.i7.i = call i8* @ggc_alloc(i64 16) #4
  %hash.i9.i = bitcast i8* %call.i7.i to i64*
  store i64 %conv.i.i, i64* %hash.i9.i, align 8, !tbaa !11
  %type1.i10.i = getelementptr inbounds i8* %call.i7.i, i64 8
  %10 = bitcast i8* %type1.i10.i to %union.tree_node**
  store %union.tree_node* %call1, %union.tree_node** %10, align 8, !tbaa !14
  %11 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %11, i8* %call.i7.i, i32 %conv, i32 1) #4
  store i8* %call.i7.i, i8** %call2.i.i, align 8, !tbaa !10
  br label %type_hash_canon.exit

type_hash_canon.exit:                             ; preds = %if.end6, %type_hash_lookup.exit.i, %if.else.i
  %retval.0.i27 = phi %union.tree_node* [ %call1, %if.else.i ], [ %call1, %if.end6 ], [ %9, %type_hash_lookup.exit.i ]
  %size = getelementptr inbounds %union.tree_node* %retval.0.i27, i64 0, i32 0, i32 2
  %12 = bitcast i32* %size to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !67
  %cmp10 = icmp eq %union.tree_node* %13, null
  br i1 %cmp10, label %if.then12, label %return

if.then12:                                        ; preds = %type_hash_canon.exit
  call void @layout_type(%union.tree_node* %retval.0.i27) #4
  br label %return

return:                                           ; preds = %if.then12, %type_hash_canon.exit, %build_pointer_type.exit
  %retval.0 = phi %union.tree_node* [ %call1, %build_pointer_type.exit ], [ %retval.0.i27, %type_hash_canon.exit ], [ %retval.0.i27, %if.then12 ]
  ret %union.tree_node* %retval.0
}

declare void @error(i8*, ...) #2

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @get_inner_array_type(%union.tree_node* nocapture readonly %array) #3 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %array.pn = phi %union.tree_node* [ %array, %entry ], [ %type.0, %while.cond ]
  %type.0.in = getelementptr inbounds %union.tree_node* %array.pn, i64 0, i32 0, i32 0, i32 1
  %type.0 = load %union.tree_node** %type.0.in, align 8
  %code = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 18
  br i1 %cmp, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond
  ret %union.tree_node* %type.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_function_type(%union.tree_node* %value_type, %union.tree_node* %arg_types) #0 {
entry:
  %in.i.i = alloca %struct.type_hash, align 8
  %code = getelementptr inbounds %union.tree_node* %value_type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 23
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([40 x i8]* @.str150, i64 0, i64 0)) #4
  %0 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %value_type.addr.0 = phi %union.tree_node* [ %0, %if.then ], [ %value_type, %entry ]
  %call = call %union.tree_node* @make_node(i32 23)
  %type = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %value_type.addr.0, %union.tree_node** %type, align 8, !tbaa !15
  %values = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 1
  %arg_types.c = bitcast %union.tree_node* %arg_types to i8*
  store i8* %arg_types.c, i8** %values, align 8, !tbaa !94
  %1 = ptrtoint %union.tree_node* %value_type.addr.0 to i64
  %and = and i64 %1, 262143
  %tobool6.i = icmp eq %union.tree_node* %arg_types, null
  br i1 %tobool6.i, label %type_hash_list.exit, label %for.body.i

for.body.i:                                       ; preds = %if.end, %for.body.i
  %tail.08.i = phi %union.tree_node* [ %5, %for.body.i ], [ %arg_types, %if.end ]
  %hashcode.07.i = phi i64 [ %add.i, %for.body.i ], [ 0, %if.end ]
  %value.i = getelementptr inbounds %union.tree_node* %tail.08.i, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value.i to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !25
  %4 = ptrtoint %union.tree_node* %3 to i64
  %and.i = and i64 %4, 262143
  %conv.i = and i64 %hashcode.07.i, 4294967295
  %add.i = add i64 %and.i, %conv.i
  %chain.i = getelementptr inbounds %union.tree_node* %tail.08.i, i64 0, i32 0, i32 0, i32 0
  %5 = load %union.tree_node** %chain.i, align 8, !tbaa !27
  %tobool.i = icmp eq %union.tree_node* %5, null
  br i1 %tobool.i, label %for.cond.for.end_crit_edge.i, label %for.body.i

for.cond.for.end_crit_edge.i:                     ; preds = %for.body.i
  %fold = add i64 %and.i, %hashcode.07.i
  %phitmp = and i64 %fold, 4294967295
  br label %type_hash_list.exit

type_hash_list.exit:                              ; preds = %if.end, %for.cond.for.end_crit_edge.i
  %hashcode.0.lcssa.i = phi i64 [ %phitmp, %for.cond.for.end_crit_edge.i ], [ 0, %if.end ]
  %add = add i64 %hashcode.0.lcssa.i, %and
  %conv4 = trunc i64 %add to i32
  %6 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool.i19 = icmp eq i32 %6, 0
  br i1 %tobool.i19, label %if.end.i, label %type_hash_canon.exit

if.end.i:                                         ; preds = %type_hash_list.exit
  %7 = bitcast %struct.type_hash* %in.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %7) #4
  call void @layout_type(%union.tree_node* %call) #4
  %conv.i.i = and i64 %add, 4294967295
  %hash.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 0
  store i64 %conv.i.i, i64* %hash.i.i, align 8, !tbaa !11
  %type1.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type1.i.i, align 8, !tbaa !14
  %8 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i.i = call i8* @htab_find_with_hash(%struct.htab* %8, i8* %7, i32 %conv4) #4
  %tobool.i.i = icmp eq i8* %call.i.i, null
  br i1 %tobool.i.i, label %if.else.i, label %type_hash_lookup.exit.i

type_hash_lookup.exit.i:                          ; preds = %if.end.i
  %type2.i.i = getelementptr inbounds i8* %call.i.i, i64 8
  %9 = bitcast i8* %type2.i.i to %union.tree_node**
  %10 = load %union.tree_node** %9, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %7) #4
  %cmp.i = icmp eq %union.tree_node* %10, null
  br i1 %cmp.i, label %if.else.i, label %type_hash_canon.exit

if.else.i:                                        ; preds = %type_hash_lookup.exit.i, %if.end.i
  %call.i7.i = call i8* @ggc_alloc(i64 16) #4
  %hash.i9.i = bitcast i8* %call.i7.i to i64*
  store i64 %conv.i.i, i64* %hash.i9.i, align 8, !tbaa !11
  %type1.i10.i = getelementptr inbounds i8* %call.i7.i, i64 8
  %11 = bitcast i8* %type1.i10.i to %union.tree_node**
  store %union.tree_node* %call, %union.tree_node** %11, align 8, !tbaa !14
  %12 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %12, i8* %call.i7.i, i32 %conv4, i32 1) #4
  store i8* %call.i7.i, i8** %call2.i.i, align 8, !tbaa !10
  br label %type_hash_canon.exit

type_hash_canon.exit:                             ; preds = %type_hash_list.exit, %type_hash_lookup.exit.i, %if.else.i
  %retval.0.i = phi %union.tree_node* [ %call, %if.else.i ], [ %call, %type_hash_list.exit ], [ %10, %type_hash_lookup.exit.i ]
  %size = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 2
  %13 = bitcast i32* %size to %union.tree_node**
  %14 = load %union.tree_node** %13, align 8, !tbaa !67
  %cmp7 = icmp eq %union.tree_node* %14, null
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %type_hash_canon.exit
  call void @layout_type(%union.tree_node* %retval.0.i) #4
  br label %if.end10

if.end10:                                         ; preds = %type_hash_canon.exit, %if.then9
  ret %union.tree_node* %retval.0.i
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_method_type(%union.tree_node* %basetype, %union.tree_node* %type) #0 {
entry:
  %in.i.i = alloca %struct.type_hash, align 8
  %call = call %union.tree_node* @make_node(i32 16)
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 23
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 4009, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.build_method_type, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node* %basetype, i64 0, i32 0, i32 15
  %1 = load %union.tree_node** %0, align 8, !tbaa !46
  %2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 13
  store %union.tree_node* %1, %union.tree_node** %2, align 8, !tbaa !19
  %type4 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type4, align 8, !tbaa !15
  %type6 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %3, %union.tree_node** %type6, align 8, !tbaa !15
  %4 = getelementptr inbounds %union.tree_node* %basetype, i64 0, i32 0, i32 8
  %5 = load %union.tree_node** %4, align 8, !tbaa !81
  %cmp.i = icmp eq %union.tree_node* %5, null
  br i1 %cmp.i, label %if.end.i, label %build_pointer_type.exit

if.end.i:                                         ; preds = %if.end
  %call.i = call %union.tree_node* @make_node(i32 13) #4
  %type1.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %basetype, %union.tree_node** %type1.i, align 8, !tbaa !15
  store %union.tree_node* %call.i, %union.tree_node** %4, align 8, !tbaa !81
  call void @layout_type(%union.tree_node* %call.i) #4
  br label %build_pointer_type.exit

build_pointer_type.exit:                          ; preds = %if.end, %if.end.i
  %retval.0.i = phi %union.tree_node* [ %call.i, %if.end.i ], [ %5, %if.end ]
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %6 = load i8** %values, align 8
  %7 = bitcast i8* %6 to %union.tree_node*
  %call.i30 = call i8* @ggc_alloc(i64 40) #4
  call void @llvm.memset.p0i8.i64(i8* %call.i30, i8 0, i64 24, i32 8, i1 false) #4
  %code.i = getelementptr inbounds i8* %call.i30, i64 16
  %8 = bitcast i8* %code.i to i32*
  store i32 2, i32* %8, align 8
  %chain2.i = bitcast i8* %call.i30 to %union.tree_node**
  store %union.tree_node* %7, %union.tree_node** %chain2.i, align 8, !tbaa !27
  %purpose3.i = getelementptr inbounds i8* %call.i30, i64 24
  %9 = bitcast i8* %purpose3.i to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %9, align 8, !tbaa !71
  %value5.i = getelementptr inbounds i8* %call.i30, i64 32
  %10 = bitcast i8* %value5.i to %union.tree_node**
  store %union.tree_node* %retval.0.i, %union.tree_node** %10, align 8, !tbaa !25
  %values11 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 1
  store i8* %call.i30, i8** %values11, align 8, !tbaa !94
  %11 = ptrtoint %union.tree_node* %basetype to i64
  %and = and i64 %11, 262143
  %12 = ptrtoint %union.tree_node* %type to i64
  %and12 = and i64 %12, 262143
  %add = add i64 %and12, %and
  %conv = trunc i64 %add to i32
  %13 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool.i = icmp eq i32 %13, 0
  br i1 %tobool.i, label %if.end.i31, label %type_hash_canon.exit

if.end.i31:                                       ; preds = %build_pointer_type.exit
  %14 = bitcast %struct.type_hash* %in.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %14) #4
  call void @layout_type(%union.tree_node* %call) #4
  %conv.i.i = and i64 %add, 4294967295
  %hash.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 0
  store i64 %conv.i.i, i64* %hash.i.i, align 8, !tbaa !11
  %type1.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type1.i.i, align 8, !tbaa !14
  %15 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i.i = call i8* @htab_find_with_hash(%struct.htab* %15, i8* %14, i32 %conv) #4
  %tobool.i.i = icmp eq i8* %call.i.i, null
  br i1 %tobool.i.i, label %if.else.i, label %type_hash_lookup.exit.i

type_hash_lookup.exit.i:                          ; preds = %if.end.i31
  %type2.i.i = getelementptr inbounds i8* %call.i.i, i64 8
  %16 = bitcast i8* %type2.i.i to %union.tree_node**
  %17 = load %union.tree_node** %16, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %14) #4
  %cmp.i32 = icmp eq %union.tree_node* %17, null
  br i1 %cmp.i32, label %if.else.i, label %type_hash_canon.exit

if.else.i:                                        ; preds = %type_hash_lookup.exit.i, %if.end.i31
  %call.i7.i = call i8* @ggc_alloc(i64 16) #4
  %hash.i9.i = bitcast i8* %call.i7.i to i64*
  store i64 %conv.i.i, i64* %hash.i9.i, align 8, !tbaa !11
  %type1.i10.i = getelementptr inbounds i8* %call.i7.i, i64 8
  %18 = bitcast i8* %type1.i10.i to %union.tree_node**
  store %union.tree_node* %call, %union.tree_node** %18, align 8, !tbaa !14
  %19 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %19, i8* %call.i7.i, i32 %conv, i32 1) #4
  store i8* %call.i7.i, i8** %call2.i.i, align 8, !tbaa !10
  br label %type_hash_canon.exit

type_hash_canon.exit:                             ; preds = %build_pointer_type.exit, %type_hash_lookup.exit.i, %if.else.i
  %retval.0.i33 = phi %union.tree_node* [ %call, %if.else.i ], [ %call, %build_pointer_type.exit ], [ %17, %type_hash_lookup.exit.i ]
  %size = getelementptr inbounds %union.tree_node* %retval.0.i33, i64 0, i32 0, i32 2
  %20 = bitcast i32* %size to %union.tree_node**
  %21 = load %union.tree_node** %20, align 8, !tbaa !67
  %cmp15 = icmp eq %union.tree_node* %21, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %type_hash_canon.exit
  call void @layout_type(%union.tree_node* %retval.0.i33) #4
  br label %if.end18

if.end18:                                         ; preds = %type_hash_canon.exit, %if.then17
  ret %union.tree_node* %retval.0.i33
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_offset_type(%union.tree_node* %basetype, %union.tree_node* %type) #0 {
entry:
  %in.i.i = alloca %struct.type_hash, align 8
  %call = call %union.tree_node* @make_node(i32 14)
  %0 = getelementptr inbounds %union.tree_node* %basetype, i64 0, i32 0, i32 15
  %1 = load %union.tree_node** %0, align 8, !tbaa !46
  %2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 13
  store %union.tree_node* %1, %union.tree_node** %2, align 8, !tbaa !19
  %type3 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type3, align 8, !tbaa !15
  %3 = ptrtoint %union.tree_node* %basetype to i64
  %and = and i64 %3, 262143
  %4 = ptrtoint %union.tree_node* %type to i64
  %and4 = and i64 %4, 262143
  %add = add i64 %and4, %and
  %conv = trunc i64 %add to i32
  %5 = load i32* @debug_no_type_hash, align 4, !tbaa !38
  %tobool.i = icmp eq i32 %5, 0
  br i1 %tobool.i, label %if.end.i, label %type_hash_canon.exit

if.end.i:                                         ; preds = %entry
  %6 = bitcast %struct.type_hash* %in.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #4
  call void @layout_type(%union.tree_node* %call) #4
  %conv.i.i = and i64 %add, 4294967295
  %hash.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 0
  store i64 %conv.i.i, i64* %hash.i.i, align 8, !tbaa !11
  %type1.i.i = getelementptr inbounds %struct.type_hash* %in.i.i, i64 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type1.i.i, align 8, !tbaa !14
  %7 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i.i = call i8* @htab_find_with_hash(%struct.htab* %7, i8* %6, i32 %conv) #4
  %tobool.i.i = icmp eq i8* %call.i.i, null
  br i1 %tobool.i.i, label %if.else.i, label %type_hash_lookup.exit.i

type_hash_lookup.exit.i:                          ; preds = %if.end.i
  %type2.i.i = getelementptr inbounds i8* %call.i.i, i64 8
  %8 = bitcast i8* %type2.i.i to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !14
  call void @llvm.lifetime.end(i64 16, i8* %6) #4
  %cmp.i = icmp eq %union.tree_node* %9, null
  br i1 %cmp.i, label %if.else.i, label %type_hash_canon.exit

if.else.i:                                        ; preds = %type_hash_lookup.exit.i, %if.end.i
  %call.i7.i = call i8* @ggc_alloc(i64 16) #4
  %hash.i9.i = bitcast i8* %call.i7.i to i64*
  store i64 %conv.i.i, i64* %hash.i9.i, align 8, !tbaa !11
  %type1.i10.i = getelementptr inbounds i8* %call.i7.i, i64 8
  %10 = bitcast i8* %type1.i10.i to %union.tree_node**
  store %union.tree_node* %call, %union.tree_node** %10, align 8, !tbaa !14
  %11 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %11, i8* %call.i7.i, i32 %conv, i32 1) #4
  store i8* %call.i7.i, i8** %call2.i.i, align 8, !tbaa !10
  br label %type_hash_canon.exit

type_hash_canon.exit:                             ; preds = %entry, %type_hash_lookup.exit.i, %if.else.i
  %retval.0.i = phi %union.tree_node* [ %call, %if.else.i ], [ %call, %entry ], [ %9, %type_hash_lookup.exit.i ]
  %size = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 2
  %12 = bitcast i32* %size to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !67
  %cmp = icmp eq %union.tree_node* %13, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %type_hash_canon.exit
  call void @layout_type(%union.tree_node* %retval.0.i) #4
  br label %if.end

if.end:                                           ; preds = %type_hash_canon.exit, %if.then
  ret %union.tree_node* %retval.0.i
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_unwidened(%union.tree_node* readonly %op, %union.tree_node* readonly %for_type) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %op, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !15
  %cmp = icmp ne %union.tree_node* %for_type, null
  %cond = select i1 %cmp, %union.tree_node* %for_type, %union.tree_node* %0
  %type2 = bitcast %union.tree_node* %cond to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type2, i64 0, i32 6
  %bf.load = load i32* %precision, align 4
  %bf.clear = and i32 %bf.load, 511
  %cmp.not = xor i1 %cmp, true
  %cmp4 = icmp eq %union.tree_node* %0, %for_type
  %or.cond221 = or i1 %cmp4, %cmp.not
  br i1 %or.cond221, label %land.end, label %land.lhs.true5

land.lhs.true5:                                   ; preds = %entry
  %type6 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %precision7 = getelementptr inbounds %struct.tree_type* %type6, i64 0, i32 6
  %bf.load8 = load i32* %precision7, align 4
  %bf.clear9 = and i32 %bf.load8, 511
  %cmp10 = icmp ugt i32 %bf.clear, %bf.clear9
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true5
  %unsigned_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load12 = load i32* %unsigned_flag, align 8
  %bf.clear13 = and i32 %bf.load12, 8192
  %tobool = icmp ne i32 %bf.clear13, 0
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs, %land.lhs.true5
  %1 = phi i1 [ false, %land.lhs.true5 ], [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %1 to i32
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %land.lhs.true61, %lor.lhs.false55, %land.end
  %uns.0.ph = phi i32 [ %land.ext, %land.end ], [ 0, %lor.lhs.false55 ], [ %uns.0., %land.lhs.true61 ]
  %win.0.ph = phi %union.tree_node* [ %op, %land.end ], [ %3, %lor.lhs.false55 ], [ %win.1., %land.lhs.true61 ]
  %op.addr.0.ph = phi %union.tree_node* [ %op, %land.end ], [ %3, %lor.lhs.false55 ], [ %3, %land.lhs.true61 ]
  br label %while.cond

while.cond:                                       ; preds = %while.cond.outer, %if.end
  %op.addr.0 = phi %union.tree_node* [ %3, %if.end ], [ %op.addr.0.ph, %while.cond.outer ]
  %code = getelementptr inbounds %union.tree_node* %op.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load15 = load i32* %code, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  switch i32 %bf.clear16, label %if.end177 [
    i32 115, label %while.body
    i32 39, label %land.lhs.true78
  ]

while.body:                                       ; preds = %while.cond
  %type19 = getelementptr inbounds %union.tree_node* %op.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type19, align 8, !tbaa !15
  %type20 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %precision21 = getelementptr inbounds %struct.tree_type* %type20, i64 0, i32 6
  %bf.load22 = load i32* %precision21, align 4
  %bf.clear23 = and i32 %bf.load22, 511
  %operands = getelementptr inbounds %union.tree_node* %op.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %3 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %type25 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type25, align 8, !tbaa !15
  %type26 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %precision27 = getelementptr inbounds %struct.tree_type* %type26, i64 0, i32 6
  %bf.load28 = load i32* %precision27, align 4
  %bf.clear29 = and i32 %bf.load28, 511
  %sub = sub nsw i32 %bf.clear23, %bf.clear29
  %cmp30 = icmp slt i32 %sub, 0
  %cmp38 = icmp ugt i32 %bf.clear, %bf.clear23
  %or.cond222 = and i1 %cmp30, %cmp38
  br i1 %or.cond222, label %if.end177, label %if.end

if.end:                                           ; preds = %while.body
  %cmp42 = icmp sgt i32 %sub, 0
  br i1 %cmp42, label %if.then43, label %while.cond

if.then43:                                        ; preds = %if.end
  %tobool44 = icmp eq i32 %uns.0.ph, 0
  br i1 %tobool44, label %lor.lhs.false55, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then43
  %cmp51 = icmp ugt i32 %bf.clear, %bf.clear29
  %win.0. = select i1 %cmp51, %union.tree_node* %win.0.ph, %union.tree_node* %3
  br label %land.lhs.true61

lor.lhs.false55:                                  ; preds = %if.then43
  %code57 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load58 = load i32* %code57, align 8
  %bf.clear59 = and i32 %bf.load58, 255
  %cmp60 = icmp eq i32 %bf.clear59, 115
  br i1 %cmp60, label %land.lhs.true61, label %while.cond.outer

land.lhs.true61:                                  ; preds = %lor.lhs.false, %lor.lhs.false55
  %win.1224 = phi %union.tree_node* [ %3, %lor.lhs.false55 ], [ %win.0., %lor.lhs.false ]
  %unsigned_flag65 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load66 = load i32* %unsigned_flag65, align 8
  %bf.clear68 = and i32 %bf.load66, 8192
  %tobool69 = icmp eq i32 %bf.clear68, 0
  %uns.0. = select i1 %tobool69, i32 %uns.0.ph, i32 1
  %win.1. = select i1 %tobool69, %union.tree_node* %win.1224, %union.tree_node* %3
  br label %while.cond.outer

land.lhs.true78:                                  ; preds = %while.cond
  %code80 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load81 = load i32* %code80, align 8
  %bf.clear82 = and i32 %bf.load81, 255
  %cmp83 = icmp eq i32 %bf.clear82, 7
  br i1 %cmp83, label %if.end177, label %land.lhs.true84

land.lhs.true84:                                  ; preds = %land.lhs.true78
  %operands86 = getelementptr inbounds %union.tree_node* %op.addr.0, i64 0, i32 0, i32 2
  %arrayidx87 = getelementptr inbounds i32* %operands86, i64 2
  %5 = bitcast i32* %arrayidx87 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !10
  %size = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 4
  %7 = load %union.tree_node** %size, align 8, !tbaa !95
  %cmp88 = icmp eq %union.tree_node* %7, null
  br i1 %cmp88, label %if.end177, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %land.lhs.true84
  %code.i = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %8 = and i32 %bf.load.i, 524543
  %9 = icmp eq i32 %8, 25
  br i1 %9, label %land.rhs.i, label %if.end177

land.rhs.i:                                       ; preds = %land.lhs.true89
  %int_cst4.i = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 2
  %high.i = getelementptr inbounds i32* %int_cst4.i, i64 2
  %10 = bitcast i32* %high.i to i64*
  %11 = load i64* %10, align 8, !tbaa !23
  %cmp5.i = icmp eq i64 %11, 0
  br i1 %cmp5.i, label %land.lhs.true6.i.i, label %if.end177

land.lhs.true6.i.i:                               ; preds = %land.rhs.i
  %low.i = bitcast i32* %int_cst4.i to i64*
  %12 = load i64* %low.i, align 8, !tbaa !20
  %conv = trunc i64 %12 to i32
  %unsigned_flag107 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load108 = load i32* %unsigned_flag107, align 8
  %bf.lshr109 = lshr i32 %bf.load108, 13
  %bf.clear110 = and i32 %bf.lshr109, 1
  %call111 = tail call %union.tree_node* @type_for_size(i32 %conv, i32 %bf.clear110) #4
  %type113 = getelementptr inbounds %union.tree_node* %op.addr.0, i64 0, i32 0, i32 0, i32 1
  %13 = load %union.tree_node** %type113, align 8, !tbaa !15
  %type114 = bitcast %union.tree_node* %13 to %struct.tree_type*
  %precision115 = getelementptr inbounds %struct.tree_type* %type114, i64 0, i32 6
  %bf.load116 = load i32* %precision115, align 4
  %bf.clear117 = and i32 %bf.load116, 511
  %cmp118 = icmp ult i32 %conv, %bf.clear117
  br i1 %cmp118, label %land.lhs.true120, label %if.end177

land.lhs.true120:                                 ; preds = %land.lhs.true6.i.i
  br i1 %cmp, label %land.lhs.true131, label %lor.lhs.false122

lor.lhs.false122:                                 ; preds = %land.lhs.true120
  %14 = load %union.tree_node** %5, align 8, !tbaa !10
  %bit_field_flag = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 5
  %15 = bitcast i48* %bit_field_flag to i64*
  %bf.load127 = load i64* %15, align 8
  %bf.cast = and i64 %bf.load127, 4096
  %tobool130 = icmp eq i64 %bf.cast, 0
  br i1 %tobool130, label %land.lhs.true131, label %if.end177

land.lhs.true131:                                 ; preds = %lor.lhs.false122, %land.lhs.true120
  %tobool132 = icmp ne i32 %uns.0.ph, 0
  %cmp134 = icmp ugt i32 %bf.clear, %conv
  %or.cond223 = and i1 %tobool132, %cmp134
  br i1 %or.cond223, label %lor.lhs.false136, label %land.lhs.true146

lor.lhs.false136:                                 ; preds = %land.lhs.true131
  %16 = load %union.tree_node** %5, align 8, !tbaa !10
  %unsigned_flag141 = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 2
  %bf.load142 = load i32* %unsigned_flag141, align 8
  %bf.clear144 = and i32 %bf.load142, 8192
  %tobool145 = icmp ne i32 %bf.clear144, 0
  %cmp147 = icmp ne %union.tree_node* %call111, null
  %or.cond = and i1 %tobool145, %cmp147
  br i1 %or.cond, label %if.then149, label %if.end177

land.lhs.true146:                                 ; preds = %land.lhs.true131
  %cmp147.old = icmp eq %union.tree_node* %call111, null
  br i1 %cmp147.old, label %if.end177, label %land.lhs.true146.if.then149_crit_edge

land.lhs.true146.if.then149_crit_edge:            ; preds = %land.lhs.true146
  %.pre = load %union.tree_node** %5, align 8, !tbaa !10
  br label %if.then149

if.then149:                                       ; preds = %land.lhs.true146.if.then149_crit_edge, %lor.lhs.false136
  %17 = phi %union.tree_node* [ %.pre, %land.lhs.true146.if.then149_crit_edge ], [ %16, %lor.lhs.false136 ]
  %arrayidx152 = bitcast i32* %operands86 to %union.tree_node**
  %18 = load %union.tree_node** %arrayidx152, align 8, !tbaa !10
  %call156 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 39, %union.tree_node* %call111, %union.tree_node* %18, %union.tree_node* %17)
  %bf.load158 = load i32* %code, align 8
  %bf.clear160 = and i32 %bf.load158, 256
  %side_effects_flag162 = getelementptr inbounds %union.tree_node* %call156, i64 0, i32 0, i32 0, i32 2
  %bf.load163 = load i32* %side_effects_flag162, align 8
  %bf.clear164 = and i32 %bf.load163, -257
  %bf.set = or i32 %bf.clear164, %bf.clear160
  store i32 %bf.set, i32* %side_effects_flag162, align 8
  %bf.load166 = load i32* %code, align 8
  %bf.clear168 = and i32 %bf.load166, 2048
  %bf.clear174 = and i32 %bf.set, -2049
  %bf.set175 = or i32 %bf.clear174, %bf.clear168
  store i32 %bf.set175, i32* %side_effects_flag162, align 8
  br label %if.end177

if.end177:                                        ; preds = %while.cond, %while.body, %land.rhs.i, %land.lhs.true89, %land.lhs.true146, %lor.lhs.false122, %land.lhs.true84, %land.lhs.true78, %land.lhs.true6.i.i, %lor.lhs.false136, %if.then149
  %win.2 = phi %union.tree_node* [ %call156, %if.then149 ], [ %win.0.ph, %land.lhs.true146 ], [ %win.0.ph, %lor.lhs.false136 ], [ %win.0.ph, %lor.lhs.false122 ], [ %win.0.ph, %land.lhs.true6.i.i ], [ %win.0.ph, %land.lhs.true84 ], [ %win.0.ph, %land.lhs.true78 ], [ %win.0.ph, %land.lhs.true89 ], [ %win.0.ph, %land.rhs.i ], [ %win.0.ph, %while.body ], [ %win.0.ph, %while.cond ]
  ret %union.tree_node* %win.2
}

declare %union.tree_node* @type_for_size(i32, i32) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_narrower(%union.tree_node* readonly %op, i32* nocapture %unsignedp_ptr) #0 {
entry:
  %code186207 = getelementptr inbounds %union.tree_node* %op, i64 0, i32 0, i32 0, i32 2
  %bf.load187208 = load i32* %code186207, align 8
  %bf.clear188209 = and i32 %bf.load187208, 255
  %cmp189210 = icmp eq i32 %bf.clear188209, 115
  br i1 %cmp189210, label %while.body.lr.ph.lr.ph, label %while.end

while.body.lr.ph.lr.ph:                           ; preds = %entry
  %type.phi.trans.insert.phi.trans.insert = getelementptr inbounds %union.tree_node* %op, i64 0, i32 0, i32 0, i32 1
  %.pre.pre = load %union.tree_node** %type.phi.trans.insert.phi.trans.insert, align 8, !tbaa !15
  %type2.phi.trans.insert.phi.trans.insert = bitcast %union.tree_node* %.pre.pre to %struct.tree_type*
  %precision.phi.trans.insert.phi.trans.insert = getelementptr inbounds %struct.tree_type* %type2.phi.trans.insert.phi.trans.insert, i64 0, i32 6
  %bf.load3.pre.pre = load i32* %precision.phi.trans.insert.phi.trans.insert, align 4
  br label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.body.lr.ph.lr.ph, %while.cond.outer.backedge
  %bf.load3.pre = phi i32 [ %bf.load3.pre.pre, %while.body.lr.ph.lr.ph ], [ %bf.load9, %while.cond.outer.backedge ]
  %uns.0.ph213 = phi i32 [ 0, %while.body.lr.ph.lr.ph ], [ %uns.0.ph.be, %while.cond.outer.backedge ]
  %first.0.ph212 = phi i32 [ 1, %while.body.lr.ph.lr.ph ], [ 0, %while.cond.outer.backedge ]
  %win.0.ph211 = phi %union.tree_node* [ %op, %while.body.lr.ph.lr.ph ], [ %0, %while.cond.outer.backedge ]
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %bf.load3 = phi i32 [ %bf.load3.pre, %while.body.lr.ph ], [ %bf.load9, %while.cond.backedge ]
  %first.0191 = phi i32 [ %first.0.ph212, %while.body.lr.ph ], [ 0, %while.cond.backedge ]
  %win.0190 = phi %union.tree_node* [ %win.0.ph211, %while.body.lr.ph ], [ %0, %while.cond.backedge ]
  %bf.clear4 = and i32 %bf.load3, 511
  %operands = getelementptr inbounds %union.tree_node* %win.0190, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !10
  %type6 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type6, align 8, !tbaa !15
  %type7 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %precision8 = getelementptr inbounds %struct.tree_type* %type7, i64 0, i32 6
  %bf.load9 = load i32* %precision8, align 4
  %bf.clear10 = and i32 %bf.load9, 511
  %sub = sub nsw i32 %bf.clear4, %bf.clear10
  %cmp11 = icmp slt i32 %sub, 0
  br i1 %cmp11, label %while.end, label %if.end

if.end:                                           ; preds = %while.body
  %cmp15 = icmp sgt i32 %sub, 0
  %tobool = icmp ne i32 %first.0191, 0
  br i1 %cmp15, label %if.then16, label %if.else34

if.then16:                                        ; preds = %if.end
  %unsigned_flag = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load21 = load i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load21, 13
  %bf.clear22 = and i32 %bf.lshr, 1
  br i1 %tobool, label %while.cond.outer.backedge, label %if.else

if.else:                                          ; preds = %if.then16
  %cmp30 = icmp eq i32 %uns.0.ph213, %bf.clear22
  br i1 %cmp30, label %while.cond.backedge, label %while.end

if.else34:                                        ; preds = %if.end
  br i1 %tobool, label %if.then36, label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.else34, %if.else
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 115
  br i1 %cmp, label %while.body, label %while.end

if.then36:                                        ; preds = %if.else34
  %unsigned_flag40 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load41 = load i32* %unsigned_flag40, align 8
  %bf.lshr42 = lshr i32 %bf.load41, 13
  %bf.clear43 = and i32 %bf.lshr42, 1
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.then16, %if.then36
  %uns.0.ph.be = phi i32 [ %bf.clear43, %if.then36 ], [ %bf.clear22, %if.then16 ]
  %code186 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load187 = load i32* %code186, align 8
  %bf.clear188 = and i32 %bf.load187, 255
  %cmp189 = icmp eq i32 %bf.clear188, 115
  br i1 %cmp189, label %while.body.lr.ph, label %while.end

while.end:                                        ; preds = %while.cond.outer.backedge, %while.cond.backedge, %while.body, %if.else, %entry
  %uns.0.ph.lcssa = phi i32 [ 0, %entry ], [ %uns.0.ph213, %if.else ], [ %uns.0.ph213, %while.body ], [ %uns.0.ph213, %while.cond.backedge ], [ %uns.0.ph.be, %while.cond.outer.backedge ]
  %first.0.lcssa = phi i32 [ 1, %entry ], [ 0, %while.cond.backedge ], [ %first.0191, %while.body ], [ 0, %if.else ], [ 0, %while.cond.outer.backedge ]
  %win.0.lcssa = phi %union.tree_node* [ %op, %entry ], [ %0, %while.cond.backedge ], [ %win.0190, %while.body ], [ %win.0190, %if.else ], [ %0, %while.cond.outer.backedge ]
  %op.addr.1 = phi %union.tree_node* [ %op, %entry ], [ %0, %while.cond.backedge ], [ %win.0190, %while.body ], [ %0, %if.else ], [ %0, %while.cond.outer.backedge ]
  %code47 = getelementptr inbounds %union.tree_node* %op.addr.1, i64 0, i32 0, i32 0, i32 2
  %bf.load48 = load i32* %code47, align 8
  %bf.clear49 = and i32 %bf.load48, 255
  %cmp50 = icmp eq i32 %bf.clear49, 39
  br i1 %cmp50, label %land.lhs.true, label %if.end148

land.lhs.true:                                    ; preds = %while.end
  %type52 = getelementptr inbounds %union.tree_node* %op.addr.1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type52, align 8, !tbaa !15
  %code54 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load55 = load i32* %code54, align 8
  %bf.clear56 = and i32 %bf.load55, 255
  %cmp57 = icmp eq i32 %bf.clear56, 7
  br i1 %cmp57, label %if.end148, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %land.lhs.true
  %operands60 = getelementptr inbounds %union.tree_node* %op.addr.1, i64 0, i32 0, i32 2
  %arrayidx61 = getelementptr inbounds i32* %operands60, i64 2
  %3 = bitcast i32* %arrayidx61 to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !10
  %size = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 4
  %5 = load %union.tree_node** %size, align 8, !tbaa !95
  %cmp62 = icmp eq %union.tree_node* %5, null
  br i1 %cmp62, label %if.end148, label %if.then63

if.then63:                                        ; preds = %land.lhs.true58
  %code.i.i = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %code.i.i, align 8
  %6 = and i32 %bf.load.i.i, 524543
  %7 = icmp eq i32 %6, 25
  br i1 %7, label %land.rhs.i.i, label %if.else.i

land.rhs.i.i:                                     ; preds = %if.then63
  %int_cst4.i.i = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 2
  %high.i.i = getelementptr inbounds i32* %int_cst4.i.i, i64 2
  %8 = bitcast i32* %high.i.i to i64*
  %9 = load i64* %8, align 8, !tbaa !23
  %cmp5.i.i = icmp eq i64 %9, 0
  br i1 %cmp5.i.i, label %land.lhs.true6.i.i, label %if.else.i

land.lhs.true6.i.i:                               ; preds = %land.rhs.i.i
  %low.i.i = bitcast i32* %int_cst4.i.i to i64*
  %10 = load i64* %low.i.i, align 8, !tbaa !20
  %conv = trunc i64 %10 to i32
  %bf.lshr73 = lshr i32 %bf.load48, 13
  %bf.clear74 = and i32 %bf.lshr73, 1
  %call75 = tail call %union.tree_node* @type_for_size(i32 %conv, i32 %bf.clear74) #4
  %11 = load %union.tree_node** %type52, align 8, !tbaa !15
  %type78 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %precision79 = getelementptr inbounds %struct.tree_type* %type78, i64 0, i32 6
  %bf.load80 = load i32* %precision79, align 4
  %bf.clear81 = and i32 %bf.load80, 511
  %conv82 = zext i32 %bf.clear81 to i64
  %cmp83 = icmp ult i64 %10, %conv82
  br i1 %cmp83, label %land.lhs.true85, label %if.end148

if.else.i:                                        ; preds = %land.rhs.i.i, %if.then63
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

land.lhs.true85:                                  ; preds = %land.lhs.true6.i.i
  %12 = load %union.tree_node** %3, align 8, !tbaa !10
  %bit_field_flag = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 5
  %13 = bitcast i48* %bit_field_flag to i64*
  %bf.load90 = load i64* %13, align 8
  %bf.cast = and i64 %bf.load90, 4096
  %tobool93 = icmp eq i64 %bf.cast, 0
  br i1 %tobool93, label %land.lhs.true94, label %if.end148

land.lhs.true94:                                  ; preds = %land.lhs.true85
  %tobool95 = icmp eq i32 %first.0.lcssa, 0
  br i1 %tobool95, label %lor.lhs.false, label %land.lhs.true106

lor.lhs.false:                                    ; preds = %land.lhs.true94
  %unsigned_flag100 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load101 = load i32* %unsigned_flag100, align 8
  %bf.lshr102 = lshr i32 %bf.load101, 13
  %bf.clear103 = and i32 %bf.lshr102, 1
  %cmp104 = icmp eq i32 %uns.0.ph.lcssa, %bf.clear103
  %cmp107 = icmp ne %union.tree_node* %call75, null
  %or.cond = and i1 %cmp104, %cmp107
  br i1 %or.cond, label %if.end120, label %if.end148

land.lhs.true106:                                 ; preds = %land.lhs.true94
  %cmp107.old = icmp eq %union.tree_node* %call75, null
  br i1 %cmp107.old, label %if.end148, label %if.then111

if.then111:                                       ; preds = %land.lhs.true106
  %unsigned_flag116 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load117 = load i32* %unsigned_flag116, align 8
  %bf.lshr118 = lshr i32 %bf.load117, 13
  %bf.clear119 = and i32 %bf.lshr118, 1
  br label %if.end120

if.end120:                                        ; preds = %lor.lhs.false, %if.then111
  %uns.4 = phi i32 [ %bf.clear119, %if.then111 ], [ %uns.0.ph.lcssa, %lor.lhs.false ]
  %arrayidx123 = bitcast i32* %operands60 to %union.tree_node**
  %14 = load %union.tree_node** %arrayidx123, align 8, !tbaa !10
  %call127 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 39, %union.tree_node* %call75, %union.tree_node* %14, %union.tree_node* %12)
  %bf.load129 = load i32* %code47, align 8
  %bf.clear131 = and i32 %bf.load129, 256
  %side_effects_flag133 = getelementptr inbounds %union.tree_node* %call127, i64 0, i32 0, i32 0, i32 2
  %bf.load134 = load i32* %side_effects_flag133, align 8
  %bf.clear135 = and i32 %bf.load134, -257
  %bf.set = or i32 %bf.clear135, %bf.clear131
  store i32 %bf.set, i32* %side_effects_flag133, align 8
  %bf.load137 = load i32* %code47, align 8
  %bf.clear139 = and i32 %bf.load137, 2048
  %bf.clear145 = and i32 %bf.set, -2049
  %bf.set146 = or i32 %bf.clear145, %bf.clear139
  store i32 %bf.set146, i32* %side_effects_flag133, align 8
  br label %if.end148

if.end148:                                        ; preds = %land.lhs.true106, %land.lhs.true85, %land.lhs.true58, %land.lhs.true, %land.lhs.true6.i.i, %lor.lhs.false, %if.end120, %while.end
  %win.1 = phi %union.tree_node* [ %win.0.lcssa, %land.lhs.true85 ], [ %call127, %if.end120 ], [ %win.0.lcssa, %land.lhs.true106 ], [ %win.0.lcssa, %lor.lhs.false ], [ %win.0.lcssa, %land.lhs.true6.i.i ], [ %win.0.lcssa, %land.lhs.true58 ], [ %win.0.lcssa, %land.lhs.true ], [ %win.0.lcssa, %while.end ]
  %uns.5 = phi i32 [ %uns.0.ph.lcssa, %land.lhs.true85 ], [ %uns.4, %if.end120 ], [ %uns.0.ph.lcssa, %land.lhs.true106 ], [ %uns.0.ph.lcssa, %lor.lhs.false ], [ %uns.0.ph.lcssa, %land.lhs.true6.i.i ], [ %uns.0.ph.lcssa, %land.lhs.true58 ], [ %uns.0.ph.lcssa, %land.lhs.true ], [ %uns.0.ph.lcssa, %while.end ]
  store i32 %uns.5, i32* %unsignedp_ptr, align 4, !tbaa !38
  ret %union.tree_node* %win.1
}

; Function Attrs: nounwind uwtable
define i32 @int_fits_type_p(%union.tree_node* nocapture readonly %c, %union.tree_node* %type) #0 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %land.lhs.true174, %entry
  %type.tr = phi %union.tree_node* [ %type, %entry ], [ %24, %land.lhs.true174 ]
  %0 = getelementptr inbounds %union.tree_node* %type.tr, i64 0, i32 0, i32 13
  %1 = load %union.tree_node** %0, align 8, !tbaa !19
  %cmp = icmp eq %union.tree_node* %1, null
  br i1 %cmp, label %if.else168, label %land.lhs.true

land.lhs.true:                                    ; preds = %tailrecurse
  %2 = getelementptr inbounds %union.tree_node* %type.tr, i64 0, i32 0, i32 12
  %3 = load %union.tree_node** %2, align 8, !tbaa !24
  %cmp3 = icmp eq %union.tree_node* %3, null
  br i1 %cmp3, label %if.else168, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true
  %code = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp7 = icmp eq i32 %bf.clear, 25
  br i1 %cmp7, label %land.lhs.true8, label %if.else168

land.lhs.true8:                                   ; preds = %land.lhs.true4
  %code12 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load13 = load i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 25
  br i1 %cmp15, label %if.then, label %if.else168

if.then:                                          ; preds = %land.lhs.true8
  %unsigned_flag = getelementptr inbounds %union.tree_node* %type.tr, i64 0, i32 0, i32 0, i32 2
  %bf.load17 = load i32* %unsigned_flag, align 8
  %bf.clear18 = and i32 %bf.load17, 8192
  %tobool = icmp eq i32 %bf.clear18, 0
  %int_cst22 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 2
  %high = getelementptr inbounds i32* %int_cst22, i64 2
  %4 = bitcast i32* %high to i64*
  %5 = load i64* %4, align 8, !tbaa !23
  %int_cst24 = getelementptr inbounds %union.tree_node* %c, i64 0, i32 0, i32 2
  %high25 = getelementptr inbounds i32* %int_cst24, i64 2
  %6 = bitcast i32* %high25 to i64*
  %7 = load i64* %6, align 8, !tbaa !23
  br i1 %tobool, label %if.else, label %if.then19

if.then19:                                        ; preds = %if.then
  %cmp26 = icmp ult i64 %5, %7
  br i1 %cmp26, label %land.end89, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then19
  %cmp35 = icmp eq i64 %5, %7
  br i1 %cmp35, label %land.lhs.true36, label %land.lhs.true45

land.lhs.true36:                                  ; preds = %lor.lhs.false
  %low = bitcast i32* %int_cst22 to i64*
  %8 = load i64* %low, align 8, !tbaa !20
  %low43 = bitcast i32* %int_cst24 to i64*
  %9 = load i64* %low43, align 8, !tbaa !20
  %cmp44 = icmp ult i64 %8, %9
  br i1 %cmp44, label %land.end89, label %land.lhs.true45

land.lhs.true45:                                  ; preds = %land.lhs.true36, %lor.lhs.false
  %int_cst52 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 2
  %high53 = getelementptr inbounds i32* %int_cst52, i64 2
  %10 = bitcast i32* %high53 to i64*
  %11 = load i64* %10, align 8, !tbaa !23
  %cmp54 = icmp ult i64 %7, %11
  br i1 %cmp54, label %land.end89, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %land.lhs.true45
  %cmp64 = icmp eq i64 %7, %11
  br i1 %cmp64, label %land.lhs.true65, label %land.rhs

land.lhs.true65:                                  ; preds = %lor.lhs.false55
  %low68 = bitcast i32* %int_cst24 to i64*
  %12 = load i64* %low68, align 8, !tbaa !20
  %low73 = bitcast i32* %int_cst52 to i64*
  %13 = load i64* %low73, align 8, !tbaa !20
  %cmp74 = icmp ult i64 %12, %13
  br i1 %cmp74, label %land.end89, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true65, %lor.lhs.false55
  %cmp78 = icmp slt i64 %7, 0
  br i1 %cmp78, label %land.rhs79, label %land.end89

land.rhs79:                                       ; preds = %land.rhs
  %type81 = getelementptr inbounds %union.tree_node* %c, i64 0, i32 0, i32 0, i32 1
  %14 = load %union.tree_node** %type81, align 8, !tbaa !15
  %unsigned_flag83 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 2
  %bf.load84 = load i32* %unsigned_flag83, align 8
  %bf.clear86 = and i32 %bf.load84, 8192
  %tobool87 = icmp ne i32 %bf.clear86, 0
  br label %land.end89

land.end89:                                       ; preds = %land.rhs, %land.rhs79, %land.lhs.true65, %land.lhs.true45, %land.lhs.true36, %if.then19
  %15 = phi i1 [ false, %land.lhs.true65 ], [ false, %land.lhs.true45 ], [ false, %land.lhs.true36 ], [ false, %if.then19 ], [ true, %land.rhs ], [ %tobool87, %land.rhs79 ]
  %land.ext = zext i1 %15 to i32
  br label %return

if.else:                                          ; preds = %if.then
  %cmp98 = icmp slt i64 %5, %7
  br i1 %cmp98, label %land.end166, label %lor.lhs.false99

lor.lhs.false99:                                  ; preds = %if.else
  %cmp108 = icmp eq i64 %5, %7
  br i1 %cmp108, label %land.lhs.true109, label %land.lhs.true119

land.lhs.true109:                                 ; preds = %lor.lhs.false99
  %low114 = bitcast i32* %int_cst22 to i64*
  %16 = load i64* %low114, align 8, !tbaa !20
  %low117 = bitcast i32* %int_cst24 to i64*
  %17 = load i64* %low117, align 8, !tbaa !20
  %cmp118 = icmp ult i64 %16, %17
  br i1 %cmp118, label %land.end166, label %land.lhs.true119

land.lhs.true119:                                 ; preds = %land.lhs.true109, %lor.lhs.false99
  %int_cst126 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 2
  %high127 = getelementptr inbounds i32* %int_cst126, i64 2
  %18 = bitcast i32* %high127 to i64*
  %19 = load i64* %18, align 8, !tbaa !23
  %cmp128 = icmp slt i64 %7, %19
  br i1 %cmp128, label %land.end166, label %lor.lhs.false129

lor.lhs.false129:                                 ; preds = %land.lhs.true119
  %cmp138 = icmp eq i64 %7, %19
  br i1 %cmp138, label %land.lhs.true139, label %land.rhs149

land.lhs.true139:                                 ; preds = %lor.lhs.false129
  %low142 = bitcast i32* %int_cst24 to i64*
  %20 = load i64* %low142, align 8, !tbaa !20
  %low147 = bitcast i32* %int_cst126 to i64*
  %21 = load i64* %low147, align 8, !tbaa !20
  %cmp148 = icmp ult i64 %20, %21
  br i1 %cmp148, label %land.end166, label %land.rhs149

land.rhs149:                                      ; preds = %land.lhs.true139, %lor.lhs.false129
  %cmp153 = icmp slt i64 %7, 0
  br i1 %cmp153, label %land.rhs154, label %land.end166

land.rhs154:                                      ; preds = %land.rhs149
  %type156 = getelementptr inbounds %union.tree_node* %c, i64 0, i32 0, i32 0, i32 1
  %22 = load %union.tree_node** %type156, align 8, !tbaa !15
  %unsigned_flag158 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load159 = load i32* %unsigned_flag158, align 8
  %bf.clear161 = and i32 %bf.load159, 8192
  %phitmp = icmp eq i32 %bf.clear161, 0
  br label %land.end166

land.end166:                                      ; preds = %land.rhs149, %land.rhs154, %land.lhs.true139, %land.lhs.true119, %land.lhs.true109, %if.else
  %23 = phi i1 [ false, %land.lhs.true139 ], [ false, %land.lhs.true119 ], [ false, %land.lhs.true109 ], [ false, %if.else ], [ true, %land.rhs149 ], [ %phitmp, %land.rhs154 ]
  %land.ext167 = zext i1 %23 to i32
  br label %return

if.else168:                                       ; preds = %land.lhs.true, %tailrecurse, %land.lhs.true8, %land.lhs.true4
  %code170 = getelementptr inbounds %union.tree_node* %type.tr, i64 0, i32 0, i32 0, i32 2
  %bf.load171 = load i32* %code170, align 8
  %bf.clear172 = and i32 %bf.load171, 255
  %cmp173 = icmp eq i32 %bf.clear172, 6
  br i1 %cmp173, label %land.lhs.true174, label %if.else181

land.lhs.true174:                                 ; preds = %if.else168
  %type176 = getelementptr inbounds %union.tree_node* %type.tr, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %type176, align 8, !tbaa !15
  %cmp177 = icmp eq %union.tree_node* %24, null
  br i1 %cmp177, label %if.else181, label %tailrecurse

if.else181:                                       ; preds = %land.lhs.true174, %if.else168
  %call182 = tail call %union.tree_node* @copy_node(%union.tree_node* %c)
  %type184 = getelementptr inbounds %union.tree_node* %call182, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type.tr, %union.tree_node** %type184, align 8, !tbaa !15
  %call185 = tail call i32 @force_fit_type(%union.tree_node* %call182, i32 0) #4
  %lnot187 = icmp eq i32 %call185, 0
  %lnot.ext = zext i1 %lnot187 to i32
  br label %return

return:                                           ; preds = %if.else181, %land.end166, %land.end89
  %retval.0 = phi i32 [ %land.ext, %land.end89 ], [ %land.ext167, %land.end166 ], [ %lnot.ext, %if.else181 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @get_containing_scope(%union.tree_node* nocapture readonly %t) #3 {
entry:
  %code = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom4 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom4
  %0 = load i8* %arrayidx, align 1, !tbaa !37
  %cmp = icmp eq i8 %0, 116
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %context = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 17
  %1 = bitcast %struct.rtx_def** %context to %union.tree_node**
  br label %cond.end

cond.false:                                       ; preds = %entry
  %context2 = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi %union.tree_node** [ %1, %cond.true ], [ %context2, %cond.false ]
  %cond = load %union.tree_node** %cond.in, align 8
  ret %union.tree_node* %cond
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @decl_type_context(%union.tree_node* nocapture readonly %decl) #0 {
entry:
  %context2 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 9
  %context.046 = load %union.tree_node** %context2, align 8
  %tobool47 = icmp eq %union.tree_node* %context.046, null
  br i1 %tobool47, label %return, label %while.body

while.body:                                       ; preds = %entry, %while.cond.backedge
  %context.048 = phi %union.tree_node* [ %context.0, %while.cond.backedge ], [ %context.046, %entry ]
  %code = getelementptr inbounds %union.tree_node* %context.048, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else34 [
    i32 20, label %return
    i32 21, label %return
    i32 22, label %return
    i32 33, label %if.then25
    i32 30, label %if.then25
    i32 4, label %if.then33
  ]

if.then25:                                        ; preds = %while.body, %while.body
  %context27 = getelementptr inbounds %union.tree_node* %context.048, i64 0, i32 0, i32 9
  br label %while.cond.backedge

if.then33:                                        ; preds = %while.body
  %supercontext = getelementptr inbounds %union.tree_node* %context.048, i64 0, i32 0, i32 5
  %0 = bitcast i48* %supercontext to %union.tree_node**
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then33, %if.then25
  %context.0.in.be = phi %union.tree_node** [ %context27, %if.then25 ], [ %0, %if.then33 ]
  %context.0 = load %union.tree_node** %context.0.in.be, align 8
  %tobool = icmp eq %union.tree_node* %context.0, null
  br i1 %tobool, label %return, label %while.body

if.else34:                                        ; preds = %while.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 4430, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.decl_type_context, i64 0, i64 0)) #8
  unreachable

return:                                           ; preds = %while.body, %while.body, %while.body, %while.cond.backedge, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %context.048, %while.body ], [ %context.048, %while.body ], [ %context.048, %while.body ], [ null, %while.cond.backedge ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_callee_fndecl(%union.tree_node* nocapture readonly %call) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 53
  br i1 %cmp, label %while.cond.preheader, label %if.then

while.cond.preheader:                             ; preds = %entry
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  %addr.0.in.in.phi.trans.insert = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %addr.0.in.phi.trans.insert = bitcast i32* %addr.0.in.in.phi.trans.insert to %union.tree_node**
  %addr.0.pre = load %union.tree_node** %addr.0.in.phi.trans.insert, align 8
  br label %while.cond

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 4448, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.get_callee_fndecl, i64 0, i64 0)) #8
  unreachable

while.cond:                                       ; preds = %while.cond.preheader, %land.rhs
  %addr.0 = phi %union.tree_node* [ %1, %land.rhs ], [ %addr.0.pre, %while.cond.preheader ]
  %code2 = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load3 = load i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %bf.clear4.off = add i32 %bf.clear4, -114
  %switch = icmp ult i32 %bf.clear4.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands18 = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 2
  %arrayidx19 = bitcast i32* %operands18 to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx19, align 8, !tbaa !10
  %cmp20 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp20, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !15
  %type22 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load23 = load i32* %mode, align 4
  %type29 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type29, align 8, !tbaa !15
  %type30 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode31 = getelementptr inbounds %struct.tree_type* %type30, i64 0, i32 6
  %bf.load32 = load i32* %mode31, align 4
  %bf.lshr107 = xor i32 %bf.load32, %bf.load23
  %4 = and i32 %bf.lshr107, 65024
  %cmp35 = icmp eq i32 %4, 0
  br i1 %cmp35, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true, %land.rhs
  %idxprom106 = zext i32 %bf.clear4 to i64
  %arrayidx43 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom106
  %5 = load i8* %arrayidx43, align 1, !tbaa !37
  %cmp44 = icmp ne i8 %5, 100
  %cmp51 = icmp eq i32 %bf.clear4, 30
  %or.cond = or i1 %cmp44, %cmp51
  %bf.clear57 = and i32 %bf.load3, 4096
  %tobool = icmp eq i32 %bf.clear57, 0
  %or.cond109 = or i1 %or.cond, %tobool
  %or.cond109.not = xor i1 %or.cond109, true
  %bf.clear62 = and i32 %bf.load3, 2048
  %tobool63 = icmp eq i32 %bf.clear62, 0
  %or.cond110 = and i1 %tobool63, %or.cond109.not
  br i1 %or.cond110, label %land.lhs.true64, label %if.end69

land.lhs.true64:                                  ; preds = %while.end
  %initial = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 12
  %6 = load %union.tree_node** %initial, align 8, !tbaa !96
  %tobool65 = icmp eq %union.tree_node* %6, null
  %addr.0. = select i1 %tobool65, %union.tree_node* %addr.0, %union.tree_node* %6
  %code71.phi.trans.insert = getelementptr inbounds %union.tree_node* %addr.0., i64 0, i32 0, i32 0, i32 2
  %bf.load72.pre = load i32* %code71.phi.trans.insert, align 8
  br label %if.end69

if.end69:                                         ; preds = %land.lhs.true64, %while.end
  %bf.load72 = phi i32 [ %bf.load3, %while.end ], [ %bf.load72.pre, %land.lhs.true64 ]
  %addr.1 = phi %union.tree_node* [ %addr.0, %while.end ], [ %addr.0., %land.lhs.true64 ]
  %bf.clear73 = and i32 %bf.load72, 255
  %cmp74 = icmp eq i32 %bf.clear73, 121
  br i1 %cmp74, label %land.lhs.true76, label %if.end90

land.lhs.true76:                                  ; preds = %if.end69
  %operands78 = getelementptr inbounds %union.tree_node* %addr.1, i64 0, i32 0, i32 2
  %arrayidx79 = bitcast i32* %operands78 to %union.tree_node**
  %7 = load %union.tree_node** %arrayidx79, align 8, !tbaa !10
  %code81 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load82 = load i32* %code81, align 8
  %bf.clear83 = and i32 %bf.load82, 255
  %cmp84 = icmp eq i32 %bf.clear83, 30
  br i1 %cmp84, label %return, label %if.end90

if.end90:                                         ; preds = %land.lhs.true76, %if.end69
  br label %return

return:                                           ; preds = %land.lhs.true76, %if.end90
  %retval.0 = phi %union.tree_node* [ null, %if.end90 ], [ %7, %land.lhs.true76 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define void @print_obstack_statistics(i8* %str, %struct.obstack* nocapture readonly %o) #0 {
entry:
  %chunk1 = getelementptr inbounds %struct.obstack* %o, i64 0, i32 1
  %0 = load %struct._obstack_chunk** %chunk1, align 8, !tbaa !36
  %next_free = getelementptr inbounds %struct.obstack* %o, i64 0, i32 3
  %1 = load i8** %next_free, align 8, !tbaa !33
  %arraydecay = getelementptr inbounds %struct._obstack_chunk* %0, i64 0, i32 2, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %chunk.0.in21 = getelementptr inbounds %struct._obstack_chunk* %0, i64 0, i32 1
  %chunk.022 = load %struct._obstack_chunk** %chunk.0.in21, align 8
  %tobool23 = icmp eq %struct._obstack_chunk* %chunk.022, null
  br i1 %tobool23, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %chunk.026 = phi %struct._obstack_chunk* [ %chunk.0, %while.body ], [ %chunk.022, %entry ]
  %n_alloc.0.in25 = phi i64 [ %add9, %while.body ], [ %sub.ptr.sub, %entry ]
  %n_chunks.024 = phi i32 [ %add3, %while.body ], [ 1, %entry ]
  %add3 = add nsw i32 %n_chunks.024, 1
  %limit = getelementptr inbounds %struct._obstack_chunk* %chunk.026, i64 0, i32 0
  %2 = load i8** %limit, align 8, !tbaa !97
  %arrayidx = getelementptr inbounds %struct._obstack_chunk* %chunk.026, i64 0, i32 2, i64 0
  %sub.ptr.lhs.cast5 = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast6 = ptrtoint i8* %arrayidx to i64
  %sext = shl i64 %n_alloc.0.in25, 32
  %conv8 = ashr exact i64 %sext, 32
  %sub.ptr.sub7 = sub i64 %conv8, %sub.ptr.rhs.cast6
  %add9 = add i64 %sub.ptr.sub7, %sub.ptr.lhs.cast5
  %chunk.0.in = getelementptr inbounds %struct._obstack_chunk* %chunk.026, i64 0, i32 1
  %chunk.0 = load %struct._obstack_chunk** %chunk.0.in, align 8
  %tobool = icmp eq %struct._obstack_chunk* %chunk.0, null
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %entry
  %n_alloc.0.in.lcssa = phi i64 [ %sub.ptr.sub, %entry ], [ %add9, %while.body ]
  %n_chunks.0.lcssa = phi i32 [ 1, %entry ], [ %add3, %while.body ]
  %n_alloc.0 = trunc i64 %n_alloc.0.in.lcssa to i32
  %3 = load %struct._IO_FILE** @stderr, align 8, !tbaa !10
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([33 x i8]* @.str162, i64 0, i64 0), i8* %str, i32 %n_alloc.0, i32 %n_chunks.0.lcssa) #9
  ret void
}

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #7

; Function Attrs: nounwind uwtable
define void @dump_tree_statistics() #0 {
entry:
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !10
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([26 x i8]* @.str163, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %0) #10
  %2 = tail call i64 @fwrite(i8* getelementptr inbounds ([26 x i8]* @.str164, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %0) #10
  %3 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 1), align 8, !tbaa !36
  %4 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !33
  %arraydecay.i = getelementptr inbounds %struct._obstack_chunk* %3, i64 0, i32 2, i64 0
  %sub.ptr.lhs.cast.i = ptrtoint i8* %4 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i8* %arraydecay.i to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %chunk.0.in21.i = getelementptr inbounds %struct._obstack_chunk* %3, i64 0, i32 1
  %chunk.022.i = load %struct._obstack_chunk** %chunk.0.in21.i, align 8
  %tobool23.i = icmp eq %struct._obstack_chunk* %chunk.022.i, null
  br i1 %tobool23.i, label %print_obstack_statistics.exit, label %while.body.i

while.body.i:                                     ; preds = %entry, %while.body.i
  %chunk.026.i = phi %struct._obstack_chunk* [ %chunk.0.i, %while.body.i ], [ %chunk.022.i, %entry ]
  %n_alloc.0.in25.i = phi i64 [ %add9.i, %while.body.i ], [ %sub.ptr.sub.i, %entry ]
  %n_chunks.024.i = phi i32 [ %add3.i, %while.body.i ], [ 1, %entry ]
  %add3.i = add nsw i32 %n_chunks.024.i, 1
  %limit.i = getelementptr inbounds %struct._obstack_chunk* %chunk.026.i, i64 0, i32 0
  %5 = load i8** %limit.i, align 8, !tbaa !97
  %arrayidx.i = getelementptr inbounds %struct._obstack_chunk* %chunk.026.i, i64 0, i32 2, i64 0
  %sub.ptr.lhs.cast5.i = ptrtoint i8* %5 to i64
  %sub.ptr.rhs.cast6.i = ptrtoint i8* %arrayidx.i to i64
  %sext.i = shl i64 %n_alloc.0.in25.i, 32
  %conv8.i = ashr exact i64 %sext.i, 32
  %sub.ptr.sub7.i = sub i64 %conv8.i, %sub.ptr.rhs.cast6.i
  %add9.i = add i64 %sub.ptr.sub7.i, %sub.ptr.lhs.cast5.i
  %chunk.0.in.i = getelementptr inbounds %struct._obstack_chunk* %chunk.026.i, i64 0, i32 1
  %chunk.0.i = load %struct._obstack_chunk** %chunk.0.in.i, align 8
  %tobool.i = icmp eq %struct._obstack_chunk* %chunk.0.i, null
  br i1 %tobool.i, label %print_obstack_statistics.exit, label %while.body.i

print_obstack_statistics.exit:                    ; preds = %while.body.i, %entry
  %n_alloc.0.in.lcssa.i = phi i64 [ %sub.ptr.sub.i, %entry ], [ %add9.i, %while.body.i ]
  %n_chunks.0.lcssa.i = phi i32 [ 1, %entry ], [ %add3.i, %while.body.i ]
  %n_alloc.0.i = trunc i64 %n_alloc.0.in.lcssa.i to i32
  %call.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([33 x i8]* @.str162, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str165, i64 0, i64 0), i32 %n_alloc.0.i, i32 %n_chunks.0.lcssa.i) #9
  %6 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call.i2 = tail call i64 @htab_size(%struct.htab* %6) #4
  %7 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call1.i = tail call i64 @htab_elements(%struct.htab* %7) #4
  %8 = load %struct.htab** @type_hash_table, align 8, !tbaa !10
  %call2.i = tail call double @htab_collisions(%struct.htab* %8) #4
  %call3.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([50 x i8]* @.str171, i64 0, i64 0), i64 %call.i2, i64 %call1.i, double %call2.i) #9
  %9 = load void ()** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 13), align 8, !tbaa !99
  tail call void %9() #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @clean_symbol_name(i8* nocapture %p) #0 {
entry:
  %0 = load i8* %p, align 1, !tbaa !37
  %tobool12 = icmp eq i8 %0, 0
  br i1 %tobool12, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %1 = phi i8 [ %3, %for.inc ], [ %0, %entry ]
  %p.addr.013 = phi i8* [ %incdec.ptr, %for.inc ], [ %p, %entry ]
  %idxprom10 = zext i8 %1 to i64
  %arrayidx = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom10
  %2 = load i16* %arrayidx, align 2, !tbaa !69
  %and2 = and i16 %2, 140
  %tobool3 = icmp ne i16 %and2, 0
  %cmp = icmp eq i8 %1, 46
  %or.cond = or i1 %tobool3, %cmp
  br i1 %or.cond, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  store i8 95, i8* %p.addr.013, align 1, !tbaa !37
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %incdec.ptr = getelementptr inbounds i8* %p.addr.013, i64 1
  %3 = load i8* %incdec.ptr, align 1, !tbaa !37
  %tobool = icmp eq i8 %3, 0
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_file_function_name_long(i8* %type) #0 {
entry:
  %st.i = alloca %struct.stat, align 8
  %0 = load i8** @first_global_object_name, align 8, !tbaa !10
  %tobool = icmp eq i8* %0, null
  br i1 %tobool, label %if.else, label %if.end9

if.else:                                          ; preds = %entry
  %1 = load i8** @weak_global_object_name, align 8, !tbaa !10
  %2 = load i8** @main_input_filename, align 8, !tbaa !10
  %tobool1 = icmp eq i8* %1, null
  %. = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8]* @.str166, i64 0, i64 0), i8* %1
  %tobool3 = icmp eq i8* %2, null
  %3 = load i8** @input_filename, align 8, !tbaa !10
  %file.0 = select i1 %tobool3, i8* %3, i8* %2
  %call = call i64 @strlen(i8* %.) #4
  %add = add i64 %call, 7
  %call6 = call i64 @strlen(i8* %file.0) #4
  %add7 = add i64 %add, %call6
  %4 = alloca i8, i64 %add7, align 1
  %call8 = call i32 (i8*, i8*, ...)* @sprintf(i8* %4, i8* getelementptr inbounds ([5 x i8]* @.str167, i64 0, i64 0), i8* %., i8* %file.0) #4
  %5 = load i64* @append_random_chars.value, align 8, !tbaa !92
  %tobool.i = icmp eq i64 %5, 0
  br i1 %tobool.i, label %if.then.i, label %append_random_chars.exit

if.then.i:                                        ; preds = %if.else
  %6 = bitcast %struct.stat* %st.i to i8*
  call void @llvm.lifetime.start(i64 144, i8* %6) #4
  %7 = load i8** @main_input_filename, align 8, !tbaa !10
  %call.i = call i32 @stat(i8* %7, %struct.stat* %st.i) #4
  %cmp.i = icmp slt i32 %call.i, 0
  br i1 %cmp.i, label %if.end.i, label %if.else.i

if.else.i:                                        ; preds = %if.then.i
  %st_dev.i = getelementptr inbounds %struct.stat* %st.i, i64 0, i32 0
  %8 = load i64* %st_dev.i, align 8, !tbaa !100
  %st_ino.i = getelementptr inbounds %struct.stat* %st.i, i64 0, i32 1
  %9 = load i64* %st_ino.i, align 8, !tbaa !103
  %xor.i = xor i64 %9, %8
  %tv_sec.i = getelementptr inbounds %struct.stat* %st.i, i64 0, i32 12, i32 0
  %10 = load i64* %tv_sec.i, align 8, !tbaa !104
  %xor2.i = xor i64 %xor.i, %10
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %if.then.i
  %storemerge.i = phi i64 [ %xor2.i, %if.else.i ], [ 1, %if.then.i ]
  store i64 %storemerge.i, i64* @append_random_chars.value, align 8, !tbaa !92
  call void @llvm.lifetime.end(i64 144, i8* %6) #4
  br label %append_random_chars.exit

append_random_chars.exit:                         ; preds = %if.else, %if.end.i
  %11 = phi i64 [ %5, %if.else ], [ %storemerge.i, %if.end.i ]
  %call4.i = call i64 @strlen(i8* %4) #4
  %add.ptr.i = getelementptr inbounds i8* %4, i64 %call4.i
  %rem.i = urem i64 %11, 62
  %arrayidx.i = getelementptr inbounds [63 x i8]* @append_random_chars.letters, i64 0, i64 %rem.i
  %12 = load i8* %arrayidx.i, align 1, !tbaa !37
  store i8 %12, i8* %add.ptr.i, align 1, !tbaa !37
  %div.i = udiv i64 %11, 62
  %rem6.i = urem i64 %div.i, 62
  %arrayidx7.i = getelementptr inbounds [63 x i8]* @append_random_chars.letters, i64 0, i64 %rem6.i
  %13 = load i8* %arrayidx7.i, align 1, !tbaa !37
  %add.ptr.sum.i = add i64 %call4.i, 1
  %arrayidx8.i = getelementptr inbounds i8* %4, i64 %add.ptr.sum.i
  store i8 %13, i8* %arrayidx8.i, align 1, !tbaa !37
  %div9.i = udiv i64 %11, 3844
  %rem10.i = urem i64 %div9.i, 62
  %arrayidx11.i = getelementptr inbounds [63 x i8]* @append_random_chars.letters, i64 0, i64 %rem10.i
  %14 = load i8* %arrayidx11.i, align 1, !tbaa !37
  %add.ptr.sum44.i = add i64 %call4.i, 2
  %arrayidx12.i = getelementptr inbounds i8* %4, i64 %add.ptr.sum44.i
  store i8 %14, i8* %arrayidx12.i, align 1, !tbaa !37
  %div13.i = udiv i64 %11, 238328
  %rem14.i = urem i64 %div13.i, 62
  %arrayidx15.i = getelementptr inbounds [63 x i8]* @append_random_chars.letters, i64 0, i64 %rem14.i
  %15 = load i8* %arrayidx15.i, align 1, !tbaa !37
  %add.ptr.sum45.i = add i64 %call4.i, 3
  %arrayidx16.i = getelementptr inbounds i8* %4, i64 %add.ptr.sum45.i
  store i8 %15, i8* %arrayidx16.i, align 1, !tbaa !37
  %div17.i = udiv i64 %11, 14776336
  %rem18.i = urem i64 %div17.i, 62
  %arrayidx19.i = getelementptr inbounds [63 x i8]* @append_random_chars.letters, i64 0, i64 %rem18.i
  %16 = load i8* %arrayidx19.i, align 1, !tbaa !37
  %add.ptr.sum46.i = add i64 %call4.i, 4
  %arrayidx20.i = getelementptr inbounds i8* %4, i64 %add.ptr.sum46.i
  store i8 %16, i8* %arrayidx20.i, align 1, !tbaa !37
  %div21.i = udiv i64 %11, 916132832
  %rem22.i = urem i64 %div21.i, 62
  %arrayidx23.i = getelementptr inbounds [63 x i8]* @append_random_chars.letters, i64 0, i64 %rem22.i
  %17 = load i8* %arrayidx23.i, align 1, !tbaa !37
  %add.ptr.sum47.i = add i64 %call4.i, 5
  %arrayidx24.i = getelementptr inbounds i8* %4, i64 %add.ptr.sum47.i
  store i8 %17, i8* %arrayidx24.i, align 1, !tbaa !37
  %add.ptr.sum48.i = add i64 %call4.i, 6
  %arrayidx25.i = getelementptr inbounds i8* %4, i64 %add.ptr.sum48.i
  store i8 0, i8* %arrayidx25.i, align 1, !tbaa !37
  br label %if.end9

if.end9:                                          ; preds = %entry, %append_random_chars.exit
  %p.0 = phi i8* [ %4, %append_random_chars.exit ], [ %0, %entry ]
  %call10 = call i64 @strlen(i8* %p.0) #4
  %add11 = add i64 %call10, 15
  %call12 = call i64 @strlen(i8* %type) #4
  %add13 = add i64 %add11, %call12
  %18 = alloca i8, i64 %add13, align 1
  %call14 = call i32 (i8*, i8*, ...)* @sprintf(i8* %18, i8* getelementptr inbounds ([15 x i8]* @.str168, i64 0, i64 0), i8* %type, i8* %p.0) #4
  %19 = load i8** @first_global_object_name, align 8, !tbaa !10
  %cmp = icmp eq i8* %p.0, %19
  br i1 %cmp, label %if.end16, label %if.then15

if.then15:                                        ; preds = %if.end9
  %add.ptr = getelementptr inbounds i8* %18, i64 11
  %20 = load i8* %add.ptr, align 1, !tbaa !37
  %tobool12.i = icmp eq i8 %20, 0
  br i1 %tobool12.i, label %if.end16, label %for.body.i

for.body.i:                                       ; preds = %if.then15, %for.inc.i
  %21 = phi i8 [ %23, %for.inc.i ], [ %20, %if.then15 ]
  %p.addr.013.i = phi i8* [ %incdec.ptr.i, %for.inc.i ], [ %add.ptr, %if.then15 ]
  %idxprom10.i = zext i8 %21 to i64
  %arrayidx.i29 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom10.i
  %22 = load i16* %arrayidx.i29, align 2, !tbaa !69
  %and2.i = and i16 %22, 140
  %tobool3.i = icmp ne i16 %and2.i, 0
  %cmp.i30 = icmp eq i8 %21, 46
  %or.cond.i = or i1 %tobool3.i, %cmp.i30
  br i1 %or.cond.i, label %for.inc.i, label %if.then.i31

if.then.i31:                                      ; preds = %for.body.i
  store i8 95, i8* %p.addr.013.i, align 1, !tbaa !37
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i31, %for.body.i
  %incdec.ptr.i = getelementptr inbounds i8* %p.addr.013.i, i64 1
  %23 = load i8* %incdec.ptr.i, align 1, !tbaa !37
  %tobool.i32 = icmp eq i8 %23, 0
  br i1 %tobool.i32, label %if.end16, label %for.body.i

if.end16:                                         ; preds = %for.inc.i, %if.then15, %if.end9
  %call17 = call %union.tree_node* @get_identifier(i8* %18) #4
  ret %union.tree_node* %call17
}

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #7

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_file_function_name(i32 %kind) #0 {
entry:
  %p = alloca [2 x i8], align 1
  %conv = trunc i32 %kind to i8
  %arrayidx = getelementptr inbounds [2 x i8]* %p, i64 0, i64 0
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !37
  %arrayidx1 = getelementptr inbounds [2 x i8]* %p, i64 0, i64 1
  store i8 0, i8* %arrayidx1, align 1, !tbaa !37
  %call = call %union.tree_node* @get_file_function_name_long(i8* %arrayidx)
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_set_constructor_bits(%union.tree_node* nocapture readonly %init, i8* nocapture %buffer, i32 %bit_size) #0 {
entry:
  %type = getelementptr inbounds %union.tree_node* %init, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !15
  %values = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %1 = load i8** %values, align 8
  %minval = getelementptr inbounds i8* %1, i64 104
  %2 = bitcast i8* %minval to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !24
  %code.i.i = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %code.i.i, align 8
  %4 = and i32 %bf.load.i.i, 524543
  %5 = icmp eq i32 %4, 25
  br i1 %5, label %land.rhs.i.i, label %if.else.i

land.rhs.i.i:                                     ; preds = %entry
  %int_cst4.i.i = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 2
  %high.i.i = getelementptr inbounds i32* %int_cst4.i.i, i64 2
  %6 = bitcast i32* %high.i.i to i64*
  %7 = load i64* %6, align 8, !tbaa !23
  switch i64 %7, label %if.else.i [
    i64 0, label %land.lhs.true6.i.i
    i64 -1, label %land.lhs.true16.i.i
  ]

land.lhs.true6.i.i:                               ; preds = %land.rhs.i.i
  %low.i.i = bitcast i32* %int_cst4.i.i to i64*
  %8 = load i64* %low.i.i, align 8, !tbaa !20
  %cmp9.i.i = icmp sgt i64 %8, -1
  br i1 %cmp9.i.i, label %tree_low_cst.exit, label %if.else.i

land.lhs.true16.i.i:                              ; preds = %land.rhs.i.i
  %low19.i.i = bitcast i32* %int_cst4.i.i to i64*
  %9 = load i64* %low19.i.i, align 8, !tbaa !20
  %cmp20.i.i = icmp slt i64 %9, 0
  br i1 %cmp20.i.i, label %land.lhs.true21.i.i, label %if.else.i

land.lhs.true21.i.i:                              ; preds = %land.lhs.true16.i.i
  %type.i.i = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type.i.i, align 8, !tbaa !15
  %unsigned_flag.i.i = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i.i = load i32* %unsigned_flag.i.i, align 8
  %bf.clear26.i.i = and i32 %bf.load24.i.i, 8192
  %tobool27.i.i = icmp eq i32 %bf.clear26.i.i, 0
  br i1 %tobool27.i.i, label %tree_low_cst.exit, label %if.else.i

if.else.i:                                        ; preds = %land.rhs.i.i, %land.lhs.true6.i.i, %land.lhs.true21.i.i, %land.lhs.true16.i.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

tree_low_cst.exit:                                ; preds = %land.lhs.true21.i.i, %land.lhs.true6.i.i
  %11 = phi i64 [ %8, %land.lhs.true6.i.i ], [ %9, %land.lhs.true21.i.i ]
  %cmp225 = icmp sgt i32 %bit_size, 0
  br i1 %cmp225, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %tree_low_cst.exit
  %12 = add i32 %bit_size, -1
  %13 = zext i32 %12 to i64
  %14 = add i64 %13, 1
  call void @llvm.memset.p0i8.i64(i8* %buffer, i8 0, i64 %14, i32 1, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.lr.ph, %tree_low_cst.exit
  %operands = getelementptr inbounds %union.tree_node* %init, i64 0, i32 0, i32 2
  %arrayidx3 = getelementptr inbounds i32* %operands, i64 2
  %15 = bitcast i32* %arrayidx3 to %union.tree_node**
  %vals.0217 = load %union.tree_node** %15, align 8
  %cmp5218 = icmp eq %union.tree_node* %vals.0217, null
  br i1 %cmp5218, label %return, label %for.body6.lr.ph

for.body6.lr.ph:                                  ; preds = %for.end
  %conv58 = sext i32 %bit_size to i64
  %16 = add i64 %11, 1
  br label %for.body6

for.body6:                                        ; preds = %for.body6.lr.ph, %for.inc66
  %vals.0222 = phi %union.tree_node* [ %vals.0217, %for.body6.lr.ph ], [ %vals.0, %for.inc66 ]
  %non_const_bits.0219 = phi %union.tree_node* [ null, %for.body6.lr.ph ], [ %non_const_bits.1, %for.inc66 ]
  %value = getelementptr inbounds %union.tree_node* %vals.0222, i64 0, i32 0, i32 2
  %17 = bitcast i32* %value to %union.tree_node**
  %18 = load %union.tree_node** %17, align 8, !tbaa !25
  %code.i = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %19 = and i32 %bf.load.i, 524543
  %20 = icmp eq i32 %19, 25
  br i1 %20, label %land.rhs.i, label %if.then

land.rhs.i:                                       ; preds = %for.body6
  %int_cst4.i = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 2
  %high.i = getelementptr inbounds i32* %int_cst4.i, i64 2
  %21 = bitcast i32* %high.i to i64*
  %22 = load i64* %21, align 8, !tbaa !23
  switch i64 %22, label %if.then [
    i64 0, label %host_integerp.exit
    i64 -1, label %land.lhs.true16.i
  ]

land.lhs.true16.i:                                ; preds = %land.rhs.i
  %low19.i = bitcast i32* %int_cst4.i to i64*
  %23 = load i64* %low19.i, align 8, !tbaa !20
  %cmp20.i = icmp slt i64 %23, 0
  br i1 %cmp20.i, label %land.lhs.true21.i, label %if.then

land.lhs.true21.i:                                ; preds = %land.lhs.true16.i
  %type.i = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %type.i, align 8, !tbaa !15
  %unsigned_flag.i = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i = load i32* %unsigned_flag.i, align 8
  %bf.clear26.i = and i32 %bf.load24.i, 8192
  %tobool27.i = icmp eq i32 %bf.clear26.i, 0
  br i1 %tobool27.i, label %lor.lhs.false, label %if.then

host_integerp.exit:                               ; preds = %land.rhs.i
  %low.i = bitcast i32* %int_cst4.i to i64*
  %25 = load i64* %low.i, align 8, !tbaa !20
  %cmp9.i = icmp sgt i64 %25, -1
  br i1 %cmp9.i, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true21.i, %host_integerp.exit
  %26 = phi i64 [ %23, %land.lhs.true21.i ], [ %25, %host_integerp.exit ]
  %purpose = getelementptr inbounds %union.tree_node* %vals.0222, i64 0, i32 0, i32 1
  %27 = load i8** %purpose, align 8
  %cmp9 = icmp eq i8* %27, null
  br i1 %cmp9, label %land.rhs.i.i104, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %code.i124 = getelementptr inbounds i8* %27, i64 16
  %28 = bitcast i8* %code.i124 to i32*
  %bf.load.i125 = load i32* %28, align 8
  %29 = and i32 %bf.load.i125, 524543
  %30 = icmp eq i32 %29, 25
  br i1 %30, label %land.rhs.i129, label %if.then

land.rhs.i129:                                    ; preds = %land.lhs.true
  %int_cst4.i126 = getelementptr inbounds i8* %27, i64 32
  %high.i127 = getelementptr inbounds i8* %27, i64 40
  %31 = bitcast i8* %high.i127 to i64*
  %32 = load i64* %31, align 8, !tbaa !23
  switch i64 %32, label %if.then [
    i64 0, label %host_integerp.exit145
    i64 -1, label %land.lhs.true16.i137
  ]

land.lhs.true16.i137:                             ; preds = %land.rhs.i129
  %low19.i135 = bitcast i8* %int_cst4.i126 to i64*
  %33 = load i64* %low19.i135, align 8, !tbaa !20
  %cmp20.i136 = icmp slt i64 %33, 0
  br i1 %cmp20.i136, label %land.lhs.true21.i143, label %if.then

land.lhs.true21.i143:                             ; preds = %land.lhs.true16.i137
  %type.i138 = getelementptr inbounds i8* %27, i64 8
  %34 = bitcast i8* %type.i138 to %union.tree_node**
  %35 = load %union.tree_node** %34, align 8, !tbaa !15
  %unsigned_flag.i139 = getelementptr inbounds %union.tree_node* %35, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i140 = load i32* %unsigned_flag.i139, align 8
  %bf.clear26.i141 = and i32 %bf.load24.i140, 8192
  %tobool27.i142 = icmp eq i32 %bf.clear26.i141, 0
  br i1 %tobool27.i142, label %land.rhs.i.i177, label %if.then

host_integerp.exit145:                            ; preds = %land.rhs.i129
  %low.i130 = bitcast i8* %int_cst4.i126 to i64*
  %36 = load i64* %low.i130, align 8, !tbaa !20
  %cmp9.i131 = icmp sgt i64 %36, -1
  br i1 %cmp9.i131, label %land.rhs.i.i151, label %if.then

if.then:                                          ; preds = %land.lhs.true21.i143, %land.lhs.true21.i, %land.rhs.i129, %land.lhs.true16.i137, %land.lhs.true, %land.rhs.i, %land.lhs.true16.i, %for.body6, %host_integerp.exit145, %host_integerp.exit
  %purpose15 = getelementptr inbounds %union.tree_node* %vals.0222, i64 0, i32 0, i32 1
  %37 = load i8** %purpose15, align 8
  %38 = bitcast i8* %37 to %union.tree_node*
  %call.i = tail call i8* @ggc_alloc(i64 40) #4
  %39 = bitcast i8* %call.i to %union.tree_node*
  tail call void @llvm.memset.p0i8.i64(i8* %call.i, i8 0, i64 24, i32 8, i1 false) #4
  %code.i171 = getelementptr inbounds i8* %call.i, i64 16
  %40 = bitcast i8* %code.i171 to i32*
  store i32 2, i32* %40, align 8
  %chain2.i = bitcast i8* %call.i to %union.tree_node**
  store %union.tree_node* %non_const_bits.0219, %union.tree_node** %chain2.i, align 8, !tbaa !27
  %purpose3.i = getelementptr inbounds i8* %call.i, i64 24
  %41 = bitcast i8* %purpose3.i to %union.tree_node**
  store %union.tree_node* %38, %union.tree_node** %41, align 8, !tbaa !71
  %value5.i = getelementptr inbounds i8* %call.i, i64 32
  %42 = bitcast i8* %value5.i to %union.tree_node**
  store %union.tree_node* %18, %union.tree_node** %42, align 8, !tbaa !25
  br label %for.inc66

land.rhs.i.i177:                                  ; preds = %land.lhs.true21.i143
  %cond = icmp eq i64 %32, -1
  br i1 %cond, label %land.lhs.true21.i.i191, label %if.else.i195

land.lhs.true21.i.i191:                           ; preds = %land.rhs.i.i177
  %type.i.i186 = getelementptr inbounds i8* %27, i64 8
  %43 = bitcast i8* %type.i.i186 to %union.tree_node**
  %44 = load %union.tree_node** %43, align 8, !tbaa !15
  %unsigned_flag.i.i187 = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i.i188 = load i32* %unsigned_flag.i.i187, align 8
  %bf.clear26.i.i189 = and i32 %bf.load24.i.i188, 8192
  %tobool27.i.i190 = icmp eq i32 %bf.clear26.i.i189, 0
  br i1 %tobool27.i.i190, label %land.rhs.i.i151, label %if.else.i195

if.else.i195:                                     ; preds = %land.rhs.i.i177, %land.lhs.true21.i.i191
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

land.rhs.i.i151:                                  ; preds = %host_integerp.exit145, %land.lhs.true21.i.i191
  %45 = phi i64 [ %33, %land.lhs.true21.i.i191 ], [ %36, %host_integerp.exit145 ]
  %sub = sub nsw i64 %45, %11
  switch i64 %22, label %if.else.i169 [
    i64 0, label %land.lhs.true6.i.i154
    i64 -1, label %land.lhs.true16.i.i159
  ]

land.lhs.true6.i.i154:                            ; preds = %land.rhs.i.i151
  %cmp9.i.i153 = icmp sgt i64 %26, -1
  br i1 %cmp9.i.i153, label %tree_low_cst.exit170, label %if.else.i169

land.lhs.true16.i.i159:                           ; preds = %land.rhs.i.i151
  %cmp20.i.i158 = icmp slt i64 %26, 0
  br i1 %cmp20.i.i158, label %land.lhs.true21.i.i165, label %if.else.i169

land.lhs.true21.i.i165:                           ; preds = %land.lhs.true16.i.i159
  %type.i.i160 = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 1
  %46 = load %union.tree_node** %type.i.i160, align 8, !tbaa !15
  %unsigned_flag.i.i161 = getelementptr inbounds %union.tree_node* %46, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i.i162 = load i32* %unsigned_flag.i.i161, align 8
  %bf.clear26.i.i163 = and i32 %bf.load24.i.i162, 8192
  %tobool27.i.i164 = icmp eq i32 %bf.clear26.i.i163, 0
  br i1 %tobool27.i.i164, label %tree_low_cst.exit170, label %if.else.i169

if.else.i169:                                     ; preds = %land.rhs.i.i151, %land.lhs.true6.i.i154, %land.lhs.true21.i.i165, %land.lhs.true16.i.i159
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

tree_low_cst.exit170:                             ; preds = %land.lhs.true21.i.i165, %land.lhs.true6.i.i154
  %sub29 = sub nsw i64 %26, %11
  %cmp30 = icmp slt i64 %sub, 0
  br i1 %cmp30, label %if.then41, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %tree_low_cst.exit170
  %notlhs = icmp slt i64 %sub, %conv58
  %notrhs = icmp sgt i64 %sub29, -1
  %or.cond.not = and i1 %notrhs, %notlhs
  %cmp39 = icmp slt i64 %sub29, %conv58
  %or.cond97 = and i1 %or.cond.not, %cmp39
  br i1 %or.cond97, label %for.cond42.preheader, label %if.then41

for.cond42.preheader:                             ; preds = %lor.lhs.false31
  %cmp43215 = icmp sgt i64 %sub, %sub29
  br i1 %cmp43215, label %for.inc66, label %for.body45.lr.ph

for.body45.lr.ph:                                 ; preds = %for.cond42.preheader
  %scevgep.sum = sub i64 %45, %11
  %scevgep227 = getelementptr i8* %buffer, i64 %scevgep.sum
  %47 = sub i64 %45, %11
  %48 = sub i64 %26, %11
  %49 = icmp sgt i64 %47, %48
  %smax = select i1 %49, i64 %47, i64 %48
  %50 = add i64 %16, %smax
  %51 = sub i64 %50, %45
  call void @llvm.memset.p0i8.i64(i8* %scevgep227, i8 1, i64 %51, i32 1, i1 false)
  br label %for.inc66

if.then41:                                        ; preds = %lor.lhs.false31, %tree_low_cst.exit170
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 4718, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.get_set_constructor_bits, i64 0, i64 0)) #8
  unreachable

land.rhs.i.i104:                                  ; preds = %lor.lhs.false
  switch i64 %22, label %if.else.i122 [
    i64 0, label %land.lhs.true6.i.i107
    i64 -1, label %land.lhs.true16.i.i112
  ]

land.lhs.true6.i.i107:                            ; preds = %land.rhs.i.i104
  %cmp9.i.i106 = icmp sgt i64 %26, -1
  br i1 %cmp9.i.i106, label %tree_low_cst.exit123, label %if.else.i122

land.lhs.true16.i.i112:                           ; preds = %land.rhs.i.i104
  %cmp20.i.i111 = icmp slt i64 %26, 0
  br i1 %cmp20.i.i111, label %land.lhs.true21.i.i118, label %if.else.i122

land.lhs.true21.i.i118:                           ; preds = %land.lhs.true16.i.i112
  %type.i.i113 = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 1
  %52 = load %union.tree_node** %type.i.i113, align 8, !tbaa !15
  %unsigned_flag.i.i114 = getelementptr inbounds %union.tree_node* %52, i64 0, i32 0, i32 0, i32 2
  %bf.load24.i.i115 = load i32* %unsigned_flag.i.i114, align 8
  %bf.clear26.i.i116 = and i32 %bf.load24.i.i115, 8192
  %tobool27.i.i117 = icmp eq i32 %bf.clear26.i.i116, 0
  br i1 %tobool27.i.i117, label %tree_low_cst.exit123, label %if.else.i122

if.else.i122:                                     ; preds = %land.rhs.i.i104, %land.lhs.true6.i.i107, %land.lhs.true21.i.i118, %land.lhs.true16.i.i112
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str147, i64 0, i64 0), i32 3489, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.tree_low_cst, i64 0, i64 0)) #8
  unreachable

tree_low_cst.exit123:                             ; preds = %land.lhs.true21.i.i118, %land.lhs.true6.i.i107
  %sub54 = sub nsw i64 %26, %11
  %cmp55 = icmp sgt i64 %sub54, -1
  %cmp59 = icmp slt i64 %sub54, %conv58
  %or.cond98 = and i1 %cmp55, %cmp59
  br i1 %or.cond98, label %if.end62, label %if.then61

if.then61:                                        ; preds = %tree_low_cst.exit123
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([35 x i8]* @.str169, i64 0, i64 0)) #4
  br label %return

if.end62:                                         ; preds = %tree_low_cst.exit123
  %arrayidx63 = getelementptr inbounds i8* %buffer, i64 %sub54
  store i8 1, i8* %arrayidx63, align 1, !tbaa !37
  br label %for.inc66

for.inc66:                                        ; preds = %for.cond42.preheader, %for.body45.lr.ph, %if.then, %if.end62
  %non_const_bits.1 = phi %union.tree_node* [ %non_const_bits.0219, %if.end62 ], [ %39, %if.then ], [ %non_const_bits.0219, %for.body45.lr.ph ], [ %non_const_bits.0219, %for.cond42.preheader ]
  %chain = getelementptr inbounds %union.tree_node* %vals.0222, i64 0, i32 0, i32 0, i32 0
  %vals.0 = load %union.tree_node** %chain, align 8
  %cmp5 = icmp eq %union.tree_node* %vals.0, null
  br i1 %cmp5, label %return, label %for.body6

return:                                           ; preds = %for.inc66, %for.end, %if.then61
  %retval.0 = phi %union.tree_node* [ null, %if.then61 ], [ null, %for.end ], [ %non_const_bits.1, %for.inc66 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_set_constructor_bytes(%union.tree_node* nocapture readonly %init, i8* nocapture %buffer, i32 %wd_size) #0 {
entry:
  %mul = shl nsw i32 %wd_size, 3
  %conv = sext i32 %mul to i64
  %0 = alloca i8, i64 %conv, align 1
  %call = call %union.tree_node* @get_set_constructor_bits(%union.tree_node* %init, i8* %0, i32 %mul)
  %cmp36 = icmp sgt i32 %wd_size, 0
  br i1 %cmp36, label %for.body5.lr.ph, label %for.end17

for.body5.lr.ph:                                  ; preds = %entry
  %1 = add i32 %wd_size, -1
  %2 = zext i32 %1 to i64
  %3 = add i64 %2, 1
  call void @llvm.memset.p0i8.i64(i8* %buffer, i8 0, i64 %3, i32 1, i1 false)
  br label %for.body5

for.body5:                                        ; preds = %for.body5.lr.ph, %if.end
  %indvars.iv = phi i64 [ 0, %for.body5.lr.ph ], [ %indvars.iv.next, %if.end ]
  %bit_pos.034 = phi i32 [ 0, %for.body5.lr.ph ], [ %.inc10, %if.end ]
  %bytep.033 = phi i8* [ %buffer, %for.body5.lr.ph ], [ %incdec.ptr.bytep.0, %if.end ]
  %arrayidx7 = getelementptr inbounds i8* %0, i64 %indvars.iv
  %4 = load i8* %arrayidx7, align 1, !tbaa !37
  %tobool = icmp eq i8 %4, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body5
  %shl = shl i32 1, %bit_pos.034
  %5 = load i8* %bytep.033, align 1, !tbaa !37
  %conv8 = zext i8 %5 to i32
  %or = or i32 %conv8, %shl
  %conv9 = trunc i32 %or to i8
  store i8 %conv9, i8* %bytep.033, align 1, !tbaa !37
  br label %if.end

if.end:                                           ; preds = %for.body5, %if.then
  %inc10 = add nsw i32 %bit_pos.034, 1
  %cmp11 = icmp sgt i32 %bit_pos.034, 6
  %incdec.ptr = getelementptr inbounds i8* %bytep.033, i64 1
  %incdec.ptr.bytep.0 = select i1 %cmp11, i8* %incdec.ptr, i8* %bytep.033
  %.inc10 = select i1 %cmp11, i32 0, i32 %inc10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = trunc i64 %indvars.iv.next to i32
  %cmp3 = icmp slt i32 %6, %mul
  br i1 %cmp3, label %for.body5, label %for.end17

for.end17:                                        ; preds = %if.end, %entry
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define void @build_common_tree_nodes(i32 %signed_char) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 0)
  store %union.tree_node* %call, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !10
  %type = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !tbaa !15
  tail call void @initialize_sizetypes() #4
  %call1 = tail call %union.tree_node* @make_signed_type(i32 8) #4
  store %union.tree_node* %call1, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !tbaa !10
  %call2 = tail call %union.tree_node* @make_unsigned_type(i32 8) #4
  store %union.tree_node* %call2, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !tbaa !10
  %tobool = icmp eq i32 %signed_char, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %call3 = tail call %union.tree_node* @make_signed_type(i32 8) #4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call4 = tail call %union.tree_node* @make_unsigned_type(i32 8) #4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %union.tree_node* %cond, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !tbaa !10
  %call5 = tail call %union.tree_node* @make_signed_type(i32 16) #4
  store %union.tree_node* %call5, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !tbaa !10
  %call6 = tail call %union.tree_node* @make_unsigned_type(i32 16) #4
  store %union.tree_node* %call6, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 4), align 16, !tbaa !10
  %call7 = tail call %union.tree_node* @make_signed_type(i32 32) #4
  store %union.tree_node* %call7, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %call8 = tail call %union.tree_node* @make_unsigned_type(i32 32) #4
  store %union.tree_node* %call8, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !tbaa !10
  %0 = load i32* @target_flags, align 4, !tbaa !38
  %and = lshr i32 %0, 20
  %1 = and i32 %and, 32
  %2 = add i32 %1, 32
  %call11 = tail call %union.tree_node* @make_signed_type(i32 %2) #4
  store %union.tree_node* %call11, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !tbaa !10
  %3 = load i32* @target_flags, align 4, !tbaa !38
  %and12 = lshr i32 %3, 20
  %4 = and i32 %and12, 32
  %5 = add i32 %4, 32
  %call15 = tail call %union.tree_node* @make_unsigned_type(i32 %5) #4
  store %union.tree_node* %call15, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 16, !tbaa !10
  %call16 = tail call %union.tree_node* @make_signed_type(i32 64) #4
  store %union.tree_node* %call16, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !tbaa !10
  %call17 = tail call %union.tree_node* @make_unsigned_type(i32 64) #4
  store %union.tree_node* %call17, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 10), align 16, !tbaa !10
  %6 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 2), align 2, !tbaa !69
  %conv = zext i16 %6 to i32
  %call18 = tail call %union.tree_node* @make_signed_type(i32 %conv) #4
  store %union.tree_node* %call18, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !tbaa !10
  %7 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 3), align 2, !tbaa !69
  %conv19 = zext i16 %7 to i32
  %call20 = tail call %union.tree_node* @make_signed_type(i32 %conv19) #4
  store %union.tree_node* %call20, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !tbaa !10
  %8 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 4), align 2, !tbaa !69
  %conv21 = zext i16 %8 to i32
  %call22 = tail call %union.tree_node* @make_signed_type(i32 %conv21) #4
  store %union.tree_node* %call22, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !tbaa !10
  %9 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 5), align 2, !tbaa !69
  %conv23 = zext i16 %9 to i32
  %call24 = tail call %union.tree_node* @make_signed_type(i32 %conv23) #4
  store %union.tree_node* %call24, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !tbaa !10
  %10 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 6), align 2, !tbaa !69
  %conv25 = zext i16 %10 to i32
  %call26 = tail call %union.tree_node* @make_signed_type(i32 %conv25) #4
  store %union.tree_node* %call26, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !tbaa !10
  %call28 = tail call %union.tree_node* @make_unsigned_type(i32 %conv) #4
  store %union.tree_node* %call28, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 6), align 16, !tbaa !10
  %call30 = tail call %union.tree_node* @make_unsigned_type(i32 %conv19) #4
  store %union.tree_node* %call30, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 7), align 8, !tbaa !10
  %call32 = tail call %union.tree_node* @make_unsigned_type(i32 %conv21) #4
  store %union.tree_node* %call32, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 8), align 16, !tbaa !10
  %call34 = tail call %union.tree_node* @make_unsigned_type(i32 %conv23) #4
  store %union.tree_node* %call34, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 9), align 8, !tbaa !10
  %call36 = tail call %union.tree_node* @make_unsigned_type(i32 %conv25) #4
  store %union.tree_node* %call36, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 10), align 16, !tbaa !10
  ret void
}

declare void @initialize_sizetypes() #2

declare %union.tree_node* @make_signed_type(i32) #2

declare %union.tree_node* @make_unsigned_type(i32) #2

; Function Attrs: nounwind uwtable
define void @build_common_tree_nodes_2(i32 %short_double) #0 {
entry:
  %call.i = tail call %union.tree_node* @make_node(i32 25) #4
  %int_cst1.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 2
  %0 = bitcast i32* %int_cst1.i to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %0, align 8, !tbaa !92
  %1 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %type.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %1, %union.tree_node** %type.i, align 8, !tbaa !15
  store %union.tree_node* %call.i, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !10
  %call.i76 = tail call %union.tree_node* @make_node(i32 25) #4
  %int_cst1.i77 = getelementptr inbounds %union.tree_node* %call.i76, i64 0, i32 0, i32 2
  %low2.i78 = bitcast i32* %int_cst1.i77 to i64*
  store i64 1, i64* %low2.i78, align 8, !tbaa !20
  %high.i79 = getelementptr inbounds i32* %int_cst1.i77, i64 2
  %2 = bitcast i32* %high.i79 to i64*
  store i64 0, i64* %2, align 8, !tbaa !23
  %3 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %type.i80 = getelementptr inbounds %union.tree_node* %call.i76, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %3, %union.tree_node** %type.i80, align 8, !tbaa !15
  store %union.tree_node* %call.i76, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 16, !tbaa !10
  %call.i81 = tail call %union.tree_node* @make_node(i32 25) #4
  %int_cst1.i82 = getelementptr inbounds %union.tree_node* %call.i81, i64 0, i32 0, i32 2
  %4 = bitcast i32* %int_cst1.i82 to <2 x i64>*
  store <2 x i64> <i64 -1, i64 -1>, <2 x i64>* %4, align 8, !tbaa !92
  %5 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %type.i85 = getelementptr inbounds %union.tree_node* %call.i81, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %5, %union.tree_node** %type.i85, align 8, !tbaa !15
  store %union.tree_node* %call.i81, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !tbaa !10
  %call3 = tail call %union.tree_node* @size_int_wide(i64 0, i32 0) #4
  store %union.tree_node* %call3, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !10
  %call4 = tail call %union.tree_node* @size_int_wide(i64 1, i32 0) #4
  store %union.tree_node* %call4, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !tbaa !10
  %call5 = tail call %union.tree_node* @size_int_wide(i64 0, i32 3) #4
  store %union.tree_node* %call5, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !10
  %call6 = tail call %union.tree_node* @size_int_wide(i64 1, i32 3) #4
  store %union.tree_node* %call6, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 16, !tbaa !10
  %call7 = tail call %union.tree_node* @size_int_wide(i64 8, i32 3) #4
  store %union.tree_node* %call7, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !10
  %call8 = tail call %union.tree_node* @make_node(i32 5)
  store %union.tree_node* %call8, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !10
  tail call void @layout_type(%union.tree_node* %call8) #4
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !10
  %align = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 7
  %7 = bitcast %union.tree_node** %align to i32*
  store i32 8, i32* %7, align 4, !tbaa !18
  %type9 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %user_align = getelementptr inbounds %struct.tree_type* %type9, i64 0, i32 6
  %bf.load = load i32* %user_align, align 4
  %bf.clear = and i32 %bf.load, 2147483647
  store i32 %bf.clear, i32* %user_align, align 4
  %call.i86 = tail call %union.tree_node* @make_node(i32 25) #4
  %int_cst1.i87 = getelementptr inbounds %union.tree_node* %call.i86, i64 0, i32 0, i32 2
  %8 = bitcast i32* %int_cst1.i87 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %8, align 8, !tbaa !92
  %9 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %type.i90 = getelementptr inbounds %union.tree_node* %call.i86, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %9, %union.tree_node** %type.i90, align 8, !tbaa !15
  store %union.tree_node* %call.i86, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !tbaa !10
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !10
  %11 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 8
  %12 = load %union.tree_node** %11, align 8, !tbaa !81
  %cmp.i = icmp eq %union.tree_node* %12, null
  br i1 %cmp.i, label %if.end.i, label %build_pointer_type.exit

if.end.i:                                         ; preds = %entry
  %call.i91 = tail call %union.tree_node* @make_node(i32 13) #4
  %type1.i = getelementptr inbounds %union.tree_node* %call.i91, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %10, %union.tree_node** %type1.i, align 8, !tbaa !15
  store %union.tree_node* %call.i91, %union.tree_node** %11, align 8, !tbaa !81
  tail call void @layout_type(%union.tree_node* %call.i91) #4
  %.pre = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !tbaa !10
  br label %build_pointer_type.exit

build_pointer_type.exit:                          ; preds = %entry, %if.end.i
  %13 = phi %union.tree_node* [ %.pre, %if.end.i ], [ %call.i86, %entry ]
  %retval.0.i = phi %union.tree_node* [ %call.i91, %if.end.i ], [ %12, %entry ]
  %type12 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %retval.0.i, %union.tree_node** %type12, align 8, !tbaa !15
  %14 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !tbaa !10
  %type14 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 1
  %15 = load %union.tree_node** %type14, align 8, !tbaa !15
  tail call void @layout_type(%union.tree_node* %15) #4
  %16 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !10
  %17 = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 8
  %18 = load %union.tree_node** %17, align 8, !tbaa !81
  %cmp.i92 = icmp eq %union.tree_node* %18, null
  br i1 %cmp.i92, label %if.end.i95, label %build_pointer_type.exit97

if.end.i95:                                       ; preds = %build_pointer_type.exit
  %call.i93 = tail call %union.tree_node* @make_node(i32 13) #4
  %type1.i94 = getelementptr inbounds %union.tree_node* %call.i93, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %16, %union.tree_node** %type1.i94, align 8, !tbaa !15
  store %union.tree_node* %call.i93, %union.tree_node** %17, align 8, !tbaa !81
  tail call void @layout_type(%union.tree_node* %call.i93) #4
  %.pre108 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !10
  br label %build_pointer_type.exit97

build_pointer_type.exit97:                        ; preds = %build_pointer_type.exit, %if.end.i95
  %19 = phi %union.tree_node* [ %.pre108, %if.end.i95 ], [ %16, %build_pointer_type.exit ]
  %retval.0.i96 = phi %union.tree_node* [ %call.i93, %if.end.i95 ], [ %18, %build_pointer_type.exit ]
  store %union.tree_node* %retval.0.i96, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 28), align 16, !tbaa !10
  %20 = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 15
  %t.036.i.i = load %union.tree_node** %20, align 8
  %tobool37.i.i = icmp eq %union.tree_node* %t.036.i.i, null
  br i1 %tobool37.i.i, label %build_qualified_type.exit.thread, label %for.body.lr.ph.i.i

for.body.lr.ph.i.i:                               ; preds = %build_pointer_type.exit97
  %21 = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 11
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i, %for.body.lr.ph.i.i
  %t.038.i.i = phi %union.tree_node* [ %t.036.i.i, %for.body.lr.ph.i.i ], [ %t.0.i.i, %for.inc.i.i ]
  %readonly_flag.i.i = getelementptr inbounds %union.tree_node* %t.038.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %readonly_flag.i.i, align 8
  %bf.lshr.i.i = lshr i32 %bf.load.i.i, 12
  %bf.clear.i.i = and i32 %bf.lshr.i.i, 1
  %22 = lshr i32 %bf.load.i.i, 10
  %mul6.i.i = and i32 %22, 2
  %or.i.i = or i32 %bf.clear.i.i, %mul6.i.i
  %type7.i.i = bitcast %union.tree_node* %t.038.i.i to %struct.tree_type*
  %restrict_flag.i.i = getelementptr inbounds %struct.tree_type* %type7.i.i, i64 0, i32 6
  %bf.load8.i.i = load i32* %restrict_flag.i.i, align 4
  %23 = lshr i32 %bf.load8.i.i, 19
  %mul11.i.i = and i32 %23, 4
  %or12.i.i = or i32 %or.i.i, %mul11.i.i
  %bf.clear15.i.i = and i32 %bf.load.i.i, 255
  %cmp.i.i = icmp eq i32 %bf.clear15.i.i, 20
  br i1 %cmp.i.i, label %land.rhs.i.i, label %land.end.i.i

land.rhs.i.i:                                     ; preds = %for.body.i.i
  %type17.i.i = getelementptr inbounds %union.tree_node* %t.038.i.i, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %type17.i.i, align 8, !tbaa !15
  %tobool18.i.i = icmp ne %union.tree_node* %24, null
  br label %land.end.i.i

land.end.i.i:                                     ; preds = %land.rhs.i.i, %for.body.i.i
  %25 = phi i1 [ false, %for.body.i.i ], [ %tobool18.i.i, %land.rhs.i.i ]
  %land.ext.i.i = zext i1 %25 to i32
  %mul19.i.i = shl nuw nsw i32 %land.ext.i.i, 3
  %or20.i.i = or i32 %or12.i.i, %mul19.i.i
  %cmp21.i.i = icmp eq i32 %or20.i.i, 1
  br i1 %cmp21.i.i, label %land.lhs.true.i.i, label %for.inc.i.i

land.lhs.true.i.i:                                ; preds = %land.end.i.i
  %26 = getelementptr inbounds %union.tree_node* %t.038.i.i, i64 0, i32 0, i32 11
  %27 = load %union.tree_node** %26, align 8, !tbaa !68
  %28 = load %union.tree_node** %21, align 8, !tbaa !68
  %cmp25.i.i = icmp eq %union.tree_node* %27, %28
  br i1 %cmp25.i.i, label %get_qualified_type.exit.i, label %for.inc.i.i

for.inc.i.i:                                      ; preds = %land.lhs.true.i.i, %land.end.i.i
  %29 = getelementptr inbounds %union.tree_node* %t.038.i.i, i64 0, i32 0, i32 14
  %t.0.i.i = load %union.tree_node** %29, align 8
  %tobool.i.i = icmp eq %union.tree_node* %t.0.i.i, null
  br i1 %tobool.i.i, label %build_qualified_type.exit.thread, label %for.body.i.i

get_qualified_type.exit.i:                        ; preds = %land.lhs.true.i.i
  %tobool.i = icmp eq %union.tree_node* %t.038.i.i, null
  br i1 %tobool.i, label %build_qualified_type.exit.thread, label %build_qualified_type.exit

build_qualified_type.exit.thread:                 ; preds = %for.inc.i.i, %build_pointer_type.exit97, %get_qualified_type.exit.i
  %call.i.i = tail call %union.tree_node* @copy_node(%union.tree_node* %19) #4
  %30 = getelementptr inbounds %union.tree_node* %call.i.i, i64 0, i32 0, i32 8
  %31 = getelementptr inbounds %union.tree_node* %t.036.i.i, i64 0, i32 0, i32 14
  %32 = bitcast %union.tree_node** %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 16, i32 8, i1 false) #4
  %33 = load %union.tree_node** %31, align 8, !tbaa !87
  %34 = getelementptr inbounds %union.tree_node* %call.i.i, i64 0, i32 0, i32 14
  store %union.tree_node* %33, %union.tree_node** %34, align 8, !tbaa !87
  store %union.tree_node* %call.i.i, %union.tree_node** %31, align 8, !tbaa !87
  %readonly_flag.i6.i = getelementptr inbounds %union.tree_node* %call.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i7.i = load i32* %readonly_flag.i6.i, align 8
  %bf.clear.i8.i = and i32 %bf.load.i7.i, -6145
  %bf.set9.i.i = or i32 %bf.clear.i8.i, 4096
  store i32 %bf.set9.i.i, i32* %readonly_flag.i6.i, align 8
  %type13.i.i = bitcast %union.tree_node* %call.i.i to %struct.tree_type*
  %restrict_flag.i9.i = getelementptr inbounds %struct.tree_type* %type13.i.i, i64 0, i32 6
  %bf.load14.i.i = load i32* %restrict_flag.i9.i, align 4
  %bf.clear17.i.i = and i32 %bf.load14.i.i, -2097153
  store i32 %bf.clear17.i.i, i32* %restrict_flag.i9.i, align 4
  br label %if.end.i102

build_qualified_type.exit:                        ; preds = %get_qualified_type.exit.i
  %.phi.trans.insert = getelementptr inbounds %union.tree_node* %t.038.i.i, i64 0, i32 0, i32 8
  %.pre109 = load %union.tree_node** %.phi.trans.insert, align 8, !tbaa !81
  %cmp.i99 = icmp eq %union.tree_node* %.pre109, null
  br i1 %cmp.i99, label %if.end.i102, label %build_pointer_type.exit104

if.end.i102:                                      ; preds = %build_qualified_type.exit.thread, %build_qualified_type.exit
  %t.0.i111 = phi %union.tree_node* [ %call.i.i, %build_qualified_type.exit.thread ], [ %t.038.i.i, %build_qualified_type.exit ]
  %35 = getelementptr inbounds %union.tree_node* %t.0.i111, i64 0, i32 0, i32 8
  %call.i100 = tail call %union.tree_node* @make_node(i32 13) #4
  %type1.i101 = getelementptr inbounds %union.tree_node* %call.i100, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %t.0.i111, %union.tree_node** %type1.i101, align 8, !tbaa !15
  store %union.tree_node* %call.i100, %union.tree_node** %35, align 8, !tbaa !81
  tail call void @layout_type(%union.tree_node* %call.i100) #4
  br label %build_pointer_type.exit104

build_pointer_type.exit104:                       ; preds = %build_qualified_type.exit, %if.end.i102
  %retval.0.i103 = phi %union.tree_node* [ %call.i100, %if.end.i102 ], [ %.pre109, %build_qualified_type.exit ]
  store %union.tree_node* %retval.0.i103, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 29), align 8, !tbaa !10
  %call18 = tail call %union.tree_node* @make_node(i32 7)
  store %union.tree_node* %call18, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 24), align 16, !tbaa !10
  %type19 = bitcast %union.tree_node* %call18 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type19, i64 0, i32 6
  %bf.load20 = load i32* %precision, align 4
  %bf.clear21 = and i32 %bf.load20, -512
  %bf.set = or i32 %bf.clear21, 32
  store i32 %bf.set, i32* %precision, align 4
  %36 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 24), align 16, !tbaa !10
  tail call void @layout_type(%union.tree_node* %36) #4
  %call22 = tail call %union.tree_node* @make_node(i32 7)
  store %union.tree_node* %call22, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !tbaa !10
  %tobool = icmp eq i32 %short_double, 0
  %type23 = bitcast %union.tree_node* %call22 to %struct.tree_type*
  %precision24 = getelementptr inbounds %struct.tree_type* %type23, i64 0, i32 6
  %bf.load25 = load i32* %precision24, align 4
  %bf.clear26 = and i32 %bf.load25, -512
  %storemerge.v = select i1 %tobool, i32 64, i32 32
  %storemerge = or i32 %bf.clear26, %storemerge.v
  store i32 %storemerge, i32* %precision24, align 4
  %37 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !tbaa !10
  tail call void @layout_type(%union.tree_node* %37) #4
  %call33 = tail call %union.tree_node* @make_node(i32 7)
  store %union.tree_node* %call33, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !tbaa !10
  %38 = load i32* @target_flags, align 4, !tbaa !38
  %and = lshr i32 %38, 19
  %39 = and i32 %and, 32
  %40 = add i32 %39, 96
  %type35 = bitcast %union.tree_node* %call33 to %struct.tree_type*
  %precision36 = getelementptr inbounds %struct.tree_type* %type35, i64 0, i32 6
  %bf.load37 = load i32* %precision36, align 4
  %bf.clear38 = and i32 %bf.load37, -512
  %bf.set39 = or i32 %40, %bf.clear38
  store i32 %bf.set39, i32* %precision36, align 4
  %41 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !tbaa !10
  tail call void @layout_type(%union.tree_node* %41) #4
  %call40 = tail call %union.tree_node* @make_node(i32 8)
  store %union.tree_node* %call40, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 20), align 16, !tbaa !10
  %42 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %type42 = getelementptr inbounds %union.tree_node* %call40, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %42, %union.tree_node** %type42, align 8, !tbaa !15
  %43 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 20), align 16, !tbaa !10
  tail call void @layout_type(%union.tree_node* %43) #4
  %call43 = tail call %union.tree_node* @make_node(i32 8)
  store %union.tree_node* %call43, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 21), align 8, !tbaa !10
  %44 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 24), align 16, !tbaa !10
  %type45 = getelementptr inbounds %union.tree_node* %call43, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %44, %union.tree_node** %type45, align 8, !tbaa !15
  %45 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 21), align 8, !tbaa !10
  tail call void @layout_type(%union.tree_node* %45) #4
  %call46 = tail call %union.tree_node* @make_node(i32 8)
  store %union.tree_node* %call46, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 22), align 16, !tbaa !10
  %46 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !tbaa !10
  %type48 = getelementptr inbounds %union.tree_node* %call46, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %46, %union.tree_node** %type48, align 8, !tbaa !15
  %47 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 22), align 16, !tbaa !10
  tail call void @layout_type(%union.tree_node* %47) #4
  %call49 = tail call %union.tree_node* @make_node(i32 8)
  store %union.tree_node* %call49, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 23), align 8, !tbaa !10
  %48 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !tbaa !10
  %type51 = getelementptr inbounds %union.tree_node* %call49, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %48, %union.tree_node** %type51, align 8, !tbaa !15
  %49 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 23), align 8, !tbaa !10
  tail call void @layout_type(%union.tree_node* %49) #4
  %call52 = tail call %union.tree_node* @ix86_build_va_list() #4
  %code = getelementptr inbounds %union.tree_node* %call52, i64 0, i32 0, i32 0, i32 2
  %bf.load54 = load i32* %code, align 8
  %bf.clear55 = and i32 %bf.load54, 255
  %cmp = icmp eq i32 %bf.clear55, 20
  br i1 %cmp, label %if.end58, label %if.then56

if.then56:                                        ; preds = %build_pointer_type.exit104
  %50 = getelementptr inbounds %union.tree_node* %call52, i64 0, i32 0, i32 15
  %51 = load %union.tree_node** %50, align 8, !tbaa !46
  %call.i105 = tail call %union.tree_node* @copy_node(%union.tree_node* %call52) #4
  %52 = getelementptr inbounds %union.tree_node* %call.i105, i64 0, i32 0, i32 8
  %53 = getelementptr inbounds %union.tree_node* %51, i64 0, i32 0, i32 14
  %54 = bitcast %union.tree_node** %52 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %54, i8 0, i64 16, i32 8, i1 false) #4
  %55 = load %union.tree_node** %53, align 8, !tbaa !87
  %56 = getelementptr inbounds %union.tree_node* %call.i105, i64 0, i32 0, i32 14
  store %union.tree_node* %55, %union.tree_node** %56, align 8, !tbaa !87
  store %union.tree_node* %call.i105, %union.tree_node** %53, align 8, !tbaa !87
  br label %if.end58

if.end58:                                         ; preds = %build_pointer_type.exit104, %if.then56
  %t.0 = phi %union.tree_node* [ %call.i105, %if.then56 ], [ %call52, %build_pointer_type.exit104 ]
  store %union.tree_node* %t.0, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 31), align 8, !tbaa !10
  %57 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 8), align 16, !tbaa !10
  %call59 = tail call fastcc %union.tree_node* @make_vector(i32 37, %union.tree_node* %57, i32 1)
  store %union.tree_node* %call59, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 34), align 16, !tbaa !10
  %58 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 8), align 16, !tbaa !10
  %call60 = tail call fastcc %union.tree_node* @make_vector(i32 33, %union.tree_node* %58, i32 1)
  store %union.tree_node* %call60, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !tbaa !10
  %59 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 7), align 8, !tbaa !10
  %call61 = tail call fastcc %union.tree_node* @make_vector(i32 36, %union.tree_node* %59, i32 1)
  store %union.tree_node* %call61, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 37), align 8, !tbaa !10
  %60 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 6), align 16, !tbaa !10
  %call62 = tail call fastcc %union.tree_node* @make_vector(i32 39, %union.tree_node* %60, i32 1)
  store %union.tree_node* %call62, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 36), align 16, !tbaa !10
  %61 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 7), align 8, !tbaa !10
  %call63 = tail call fastcc %union.tree_node* @make_vector(i32 40, %union.tree_node* %61, i32 1)
  store %union.tree_node* %call63, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 35), align 8, !tbaa !10
  %62 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 6), align 16, !tbaa !10
  %call64 = tail call fastcc %union.tree_node* @make_vector(i32 43, %union.tree_node* %62, i32 1)
  store %union.tree_node* %call64, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 40), align 16, !tbaa !10
  %63 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 24), align 16, !tbaa !10
  %call65 = tail call fastcc %union.tree_node* @make_vector(i32 50, %union.tree_node* %63, i32 0)
  store %union.tree_node* %call65, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 42), align 16, !tbaa !10
  %64 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 24), align 16, !tbaa !10
  %call66 = tail call fastcc %union.tree_node* @make_vector(i32 46, %union.tree_node* %64, i32 0)
  store %union.tree_node* %call66, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !tbaa !10
  %65 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !tbaa !10
  %call67 = tail call fastcc %union.tree_node* @make_vector(i32 37, %union.tree_node* %65, i32 0)
  store %union.tree_node* %call67, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 43), align 8, !tbaa !10
  %66 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !tbaa !10
  %call68 = tail call fastcc %union.tree_node* @make_vector(i32 33, %union.tree_node* %66, i32 0)
  store %union.tree_node* %call68, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !tbaa !10
  %67 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !tbaa !10
  %call69 = tail call fastcc %union.tree_node* @make_vector(i32 36, %union.tree_node* %67, i32 0)
  store %union.tree_node* %call69, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 46), align 16, !tbaa !10
  %68 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !tbaa !10
  %call70 = tail call fastcc %union.tree_node* @make_vector(i32 39, %union.tree_node* %68, i32 0)
  store %union.tree_node* %call70, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 45), align 8, !tbaa !10
  %69 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !tbaa !10
  %call71 = tail call fastcc %union.tree_node* @make_vector(i32 40, %union.tree_node* %69, i32 0)
  store %union.tree_node* %call71, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 44), align 16, !tbaa !10
  %70 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 24), align 16, !tbaa !10
  %call72 = tail call fastcc %union.tree_node* @make_vector(i32 44, %union.tree_node* %70, i32 0)
  store %union.tree_node* %call72, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 48), align 16, !tbaa !10
  %71 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !tbaa !10
  %call73 = tail call fastcc %union.tree_node* @make_vector(i32 43, %union.tree_node* %71, i32 0)
  store %union.tree_node* %call73, %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 49), align 8, !tbaa !10
  ret void
}

declare %union.tree_node* @size_int_wide(i64, i32) #2

declare %union.tree_node* @ix86_build_va_list() #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @make_vector(i32 %mode, %union.tree_node* %innertype, i32 %unsignedp) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 9)
  %type = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %innertype, %union.tree_node** %type, align 8, !tbaa !15
  %type1 = bitcast %union.tree_node* %call to %struct.tree_type*
  %mode2 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %mode2, align 4
  %bf.value = shl i32 %mode, 9
  %bf.shl = and i32 %bf.value, 65024
  %bf.clear = and i32 %bf.load, -65025
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %mode2, align 4
  %unsigned_flag = getelementptr inbounds %union.tree_node* %innertype, i64 0, i32 0, i32 0, i32 2
  %bf.load6 = load i32* %unsigned_flag, align 8
  %bf.value7 = shl i32 %unsignedp, 13
  %bf.shl8 = and i32 %bf.value7, 8192
  %bf.clear9 = and i32 %bf.load6, -8193
  %bf.set10 = or i32 %bf.clear9, %bf.shl8
  store i32 %bf.set10, i32* %unsigned_flag, align 8
  tail call void @layout_type(%union.tree_node* %call) #4
  %bf.load.i = load i32* %mode2, align 4
  %bf.lshr.i = lshr i32 %bf.load.i, 9
  %bf.clear.i = and i32 %bf.lshr.i, 127
  %idxprom44.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom44.i
  %0 = load i8* %arrayidx.i, align 1, !tbaa !37
  %cmp.i = icmp eq i8 %0, 0
  br i1 %cmp.i, label %finish_vector_type.exit, label %cond.false.i

cond.false.i:                                     ; preds = %entry
  %arrayidx8.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom44.i
  %1 = load i8* %arrayidx8.i, align 1, !tbaa !37
  %div45.i = udiv i8 %1, %0
  %div.i = zext i8 %div45.i to i64
  %phitmp.i = add i64 %div.i, -1
  br label %finish_vector_type.exit

finish_vector_type.exit:                          ; preds = %entry, %cond.false.i
  %cond.i = phi i64 [ %phitmp.i, %cond.false.i ], [ -1, %entry ]
  %call.i.i = tail call %union.tree_node* @make_node(i32 25) #4
  %int_cst1.i.i = getelementptr inbounds %union.tree_node* %call.i.i, i64 0, i32 0, i32 2
  %low2.i.i = bitcast i32* %int_cst1.i.i to i64*
  store i64 %cond.i, i64* %low2.i.i, align 8, !tbaa !20
  %high.i.i = getelementptr inbounds i32* %int_cst1.i.i, i64 2
  %2 = bitcast i32* %high.i.i to i64*
  store i64 0, i64* %2, align 8, !tbaa !23
  %3 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !10
  %type.i.i = getelementptr inbounds %union.tree_node* %call.i.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %3, %union.tree_node** %type.i.i, align 8, !tbaa !15
  %4 = load %union.tree_node** %type, align 8, !tbaa !15
  %call20.i = tail call %union.tree_node* @build_index_type(%union.tree_node* %call.i.i) #4
  %call21.i = tail call %union.tree_node* @build_array_type(%union.tree_node* %4, %union.tree_node* %call20.i) #4
  %call22.i = tail call %union.tree_node* @make_node(i32 20) #4
  %call23.i = tail call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([2 x i8]* @.str170, i64 0, i64 0)) #4
  %call.i47.i = tail call %union.tree_node* @make_node(i32 37) #4
  %name1.i.i = getelementptr inbounds %union.tree_node* %call.i47.i, i64 0, i32 0, i32 8
  store %union.tree_node* %call23.i, %union.tree_node** %name1.i.i, align 8, !tbaa !1
  %type2.i.i = getelementptr inbounds %union.tree_node* %call.i47.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call21.i, %union.tree_node** %type2.i.i, align 8, !tbaa !15
  %values.i = getelementptr inbounds %union.tree_node* %call22.i, i64 0, i32 0, i32 1
  %call24.c.i = bitcast %union.tree_node* %call.i47.i to i8*
  store i8* %call24.c.i, i8** %values.i, align 8, !tbaa !94
  %context.i = getelementptr inbounds %union.tree_node* %call.i47.i, i64 0, i32 0, i32 9
  store %union.tree_node* %call22.i, %union.tree_node** %context.i, align 8, !tbaa !105
  tail call void @layout_type(%union.tree_node* %call22.i) #4
  %values29.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 1
  %call22.c.i = bitcast %union.tree_node* %call22.i to i8*
  store i8* %call22.c.i, i8** %values29.i, align 8, !tbaa !94
  %uid.i = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 6
  %5 = bitcast %union.anon* %uid.i to i32*
  %6 = load i32* %5, align 4, !tbaa !45
  %uid32.i = getelementptr inbounds %union.tree_node* %call22.i, i64 0, i32 0, i32 6
  %7 = bitcast %union.anon* %uid32.i to i32*
  store i32 %6, i32* %7, align 4, !tbaa !45
  ret %union.tree_node* %call
}

; Function Attrs: nounwind
declare i32 @stat(i8* nocapture readonly, %struct.stat* nocapture) #7

declare i64 @htab_size(%struct.htab*) #2

declare i64 @htab_elements(%struct.htab*) #2

declare double @htab_collisions(%struct.htab*) #2

declare i32 @ggc_set_mark(i8*) #2

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #2

declare i32 @ggc_marked_p(i8*) #2

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { cold nounwind }
attributes #10 = { cold }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !4, i64 72}
!2 = metadata !{metadata !"tree_decl", metadata !3, i64 0, metadata !4, i64 24, metadata !7, i64 32, metadata !7, i64 36, metadata !4, i64 40, metadata !5, i64 48, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 51, metadata !7, i64 51, metadata !7, i64 51, metadata !7, i64 51, metadata !7, i64 51, metadata !5, i64 51, metadata !7, i64 51, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 53, metadata !7, i64 53, metadata !7, i64 53, metadata !7, i64 53, metadata !7, i64 53, metadata !5, i64 56, metadata !4, i64 64, metadata !4, i64 72, metadata !4, i64 80, metadata !4, i64 88, metadata !4, i64 96, metadata !4, i64 104, metadata !4, i64 112, metadata !4, i64 120, metadata !4, i64 128, metadata !4, i64 136, metadata !4, i64 144, metadata !4, i64 152, metadata !5, i64 160, metadata !4, i64 168, metadata !4, i64 176, metadata !4, i64 184, metadata !8, i64 192, metadata !4, i64 200}
!3 = metadata !{metadata !"tree_common", metadata !4, i64 0, metadata !4, i64 8, metadata !5, i64 16, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19}
!4 = metadata !{metadata !"any pointer", metadata !5, i64 0}
!5 = metadata !{metadata !"omnipotent char", metadata !6, i64 0}
!6 = metadata !{metadata !"Simple C/C++ TBAA"}
!7 = metadata !{metadata !"int", metadata !5, i64 0}
!8 = metadata !{metadata !"long long", metadata !5, i64 0}
!9 = metadata !{metadata !2, metadata !4, i64 120}
!10 = metadata !{metadata !4, metadata !4, i64 0}
!11 = metadata !{metadata !12, metadata !13, i64 0}
!12 = metadata !{metadata !"type_hash", metadata !13, i64 0, metadata !4, i64 8}
!13 = metadata !{metadata !"long", metadata !5, i64 0}
!14 = metadata !{metadata !12, metadata !4, i64 8}
!15 = metadata !{metadata !3, metadata !4, i64 8}
!16 = metadata !{metadata !17, metadata !4, i64 48}
!17 = metadata !{metadata !"tree_type", metadata !3, i64 0, metadata !4, i64 24, metadata !4, i64 32, metadata !4, i64 40, metadata !4, i64 48, metadata !7, i64 56, metadata !7, i64 60, metadata !5, i64 61, metadata !7, i64 62, metadata !7, i64 62, metadata !7, i64 62, metadata !7, i64 62, metadata !7, i64 62, metadata !7, i64 62, metadata !7, i64 62, metadata !7, i64 63, metadata !7, i64 63, metadata !7, i64 63, metadata !7, i64 63, metadata !7, i64 63, metadata !7, i64 63, metadata !7, i64 63, metadata !7, i64 63, metadata !7, i64 64, metadata !4, i64 72, metadata !4, i64 80, metadata !5, i64 88, metadata !4, i64 96, metadata !4, i64 104, metadata !4, i64 112, metadata !4, i64 120, metadata !4, i64 128, metadata !4, i64 136, metadata !4, i64 144, metadata !8, i64 152, metadata !4, i64 160}
!18 = metadata !{metadata !17, metadata !7, i64 64}
!19 = metadata !{metadata !17, metadata !4, i64 112}
!20 = metadata !{metadata !21, metadata !8, i64 32}
!21 = metadata !{metadata !"tree_int_cst", metadata !3, i64 0, metadata !4, i64 24, metadata !22, i64 32}
!22 = metadata !{metadata !"", metadata !8, i64 0, metadata !8, i64 8}
!23 = metadata !{metadata !21, metadata !8, i64 40}
!24 = metadata !{metadata !17, metadata !4, i64 104}
!25 = metadata !{metadata !26, metadata !4, i64 32}
!26 = metadata !{metadata !"tree_list", metadata !3, i64 0, metadata !4, i64 24, metadata !4, i64 32}
!27 = metadata !{metadata !3, metadata !4, i64 0}
!28 = metadata !{metadata !29, metadata !13, i64 8}
!29 = metadata !{metadata !"varray_head_tag", metadata !13, i64 0, metadata !13, i64 8, metadata !13, i64 16, metadata !4, i64 24, metadata !5, i64 32}
!30 = metadata !{metadata !29, metadata !13, i64 0}
!31 = metadata !{metadata !32, metadata !4, i64 32}
!32 = metadata !{metadata !"obstack", metadata !13, i64 0, metadata !4, i64 8, metadata !4, i64 16, metadata !4, i64 24, metadata !4, i64 32, metadata !13, i64 40, metadata !7, i64 48, metadata !4, i64 56, metadata !4, i64 64, metadata !4, i64 72, metadata !7, i64 80, metadata !7, i64 80, metadata !7, i64 80}
!33 = metadata !{metadata !32, metadata !4, i64 24}
!34 = metadata !{metadata !32, metadata !4, i64 16}
!35 = metadata !{metadata !32, metadata !7, i64 48}
!36 = metadata !{metadata !32, metadata !4, i64 8}
!37 = metadata !{metadata !5, metadata !5, i64 0}
!38 = metadata !{metadata !7, metadata !7, i64 0}
!39 = metadata !{metadata !40, metadata !7, i64 24}
!40 = metadata !{metadata !"tree_vec", metadata !3, i64 0, metadata !7, i64 24, metadata !5, i64 32}
!41 = metadata !{metadata !2, metadata !7, i64 32}
!42 = metadata !{metadata !2, metadata !4, i64 24}
!43 = metadata !{metadata !2, metadata !7, i64 36}
!44 = metadata !{metadata !2, metadata !8, i64 192}
!45 = metadata !{metadata !17, metadata !7, i64 56}
!46 = metadata !{metadata !17, metadata !4, i64 128}
!47 = metadata !{metadata !48, metadata !4, i64 272}
!48 = metadata !{metadata !"gcc_target", metadata !49, i64 0, metadata !51, i64 168, metadata !4, i64 240, metadata !4, i64 248, metadata !4, i64 256, metadata !4, i64 264, metadata !4, i64 272, metadata !4, i64 280, metadata !4, i64 288, metadata !4, i64 296, metadata !4, i64 304, metadata !4, i64 312, metadata !4, i64 320, metadata !52, i64 328, metadata !52, i64 329, metadata !4, i64 336}
!49 = metadata !{metadata !"asm_out", metadata !4, i64 0, metadata !4, i64 8, metadata !4, i64 16, metadata !50, i64 24, metadata !50, i64 56, metadata !4, i64 88, metadata !4, i64 96, metadata !4, i64 104, metadata !4, i64 112, metadata !4, i64 120, metadata !4, i64 128, metadata !4, i64 136, metadata !4, i64 144, metadata !4, i64 152, metadata !4, i64 160}
!50 = metadata !{metadata !"asm_int_op", metadata !4, i64 0, metadata !4, i64 8, metadata !4, i64 16, metadata !4, i64 24}
!51 = metadata !{metadata !"sched", metadata !4, i64 0, metadata !4, i64 8, metadata !4, i64 16, metadata !4, i64 24, metadata !4, i64 32, metadata !4, i64 40, metadata !4, i64 48, metadata !4, i64 56, metadata !4, i64 64}
!52 = metadata !{metadata !"_Bool", metadata !5, i64 0}
!53 = metadata !{metadata !17, metadata !8, i64 152}
!54 = metadata !{metadata !55, metadata !4, i64 32}
!55 = metadata !{metadata !"tree_vector", metadata !3, i64 0, metadata !4, i64 24, metadata !4, i64 32}
!56 = metadata !{i64 0, i64 24, metadata !37}
!57 = metadata !{metadata !58, metadata !4, i64 0}
!58 = metadata !{metadata !"brfic_args", metadata !4, i64 0, metadata !4, i64 8, metadata !59, i64 16}
!59 = metadata !{metadata !"", metadata !5, i64 0}
!60 = metadata !{metadata !58, metadata !4, i64 8}
!61 = metadata !{metadata !62, metadata !7, i64 32}
!62 = metadata !{metadata !"tree_string", metadata !3, i64 0, metadata !4, i64 24, metadata !7, i64 32, metadata !4, i64 40}
!63 = metadata !{metadata !62, metadata !4, i64 40}
!64 = metadata !{metadata !65, metadata !4, i64 32}
!65 = metadata !{metadata !"tree_complex", metadata !3, i64 0, metadata !4, i64 24, metadata !4, i64 32, metadata !4, i64 40}
!66 = metadata !{metadata !65, metadata !4, i64 40}
!67 = metadata !{metadata !17, metadata !4, i64 32}
!68 = metadata !{metadata !17, metadata !4, i64 96}
!69 = metadata !{metadata !70, metadata !70, i64 0}
!70 = metadata !{metadata !"short", metadata !5, i64 0}
!71 = metadata !{metadata !26, metadata !4, i64 24}
!72 = metadata !{metadata !17, metadata !4, i64 40}
!73 = metadata !{metadata !2, metadata !4, i64 88}
!74 = metadata !{metadata !2, metadata !4, i64 184}
!75 = metadata !{metadata !76, metadata !4, i64 88}
!76 = metadata !{metadata !"lang_hooks", metadata !4, i64 0, metadata !13, i64 8, metadata !4, i64 16, metadata !4, i64 24, metadata !4, i64 32, metadata !4, i64 40, metadata !4, i64 48, metadata !4, i64 56, metadata !4, i64 64, metadata !4, i64 72, metadata !4, i64 80, metadata !4, i64 88, metadata !52, i64 96, metadata !4, i64 104, metadata !4, i64 112, metadata !4, i64 120, metadata !4, i64 128, metadata !4, i64 136, metadata !4, i64 144, metadata !77, i64 152, metadata !78, i64 240}
!77 = metadata !{metadata !"lang_hooks_for_tree_inlining", metadata !4, i64 0, metadata !4, i64 8, metadata !4, i64 16, metadata !4, i64 24, metadata !4, i64 32, metadata !4, i64 40, metadata !4, i64 48, metadata !4, i64 56, metadata !4, i64 64, metadata !4, i64 72, metadata !4, i64 80}
!78 = metadata !{metadata !"lang_hooks_for_tree_dump", metadata !4, i64 0, metadata !4, i64 8}
!79 = metadata !{metadata !80, metadata !7, i64 24}
!80 = metadata !{metadata !"tree_exp", metadata !3, i64 0, metadata !7, i64 24, metadata !5, i64 32}
!81 = metadata !{metadata !17, metadata !4, i64 72}
!82 = metadata !{metadata !83, metadata !4, i64 32}
!83 = metadata !{metadata !"tree_block", metadata !3, i64 0, metadata !7, i64 24, metadata !7, i64 24, metadata !7, i64 24, metadata !4, i64 32, metadata !4, i64 40, metadata !4, i64 48, metadata !4, i64 56, metadata !4, i64 64, metadata !4, i64 72}
!84 = metadata !{metadata !83, metadata !4, i64 40}
!85 = metadata !{metadata !83, metadata !4, i64 48}
!86 = metadata !{metadata !2, metadata !4, i64 136}
!87 = metadata !{metadata !17, metadata !4, i64 120}
!88 = metadata !{metadata !89, metadata !4, i64 32}
!89 = metadata !{metadata !"tree_identifier", metadata !3, i64 0, metadata !90, i64 24}
!90 = metadata !{metadata !"ht_identifier", metadata !7, i64 0, metadata !4, i64 8}
!91 = metadata !{metadata !2, metadata !4, i64 144}
!92 = metadata !{metadata !8, metadata !8, i64 0}
!93 = metadata !{metadata !17, metadata !4, i64 80}
!94 = metadata !{metadata !17, metadata !4, i64 24}
!95 = metadata !{metadata !2, metadata !4, i64 40}
!96 = metadata !{metadata !2, metadata !4, i64 104}
!97 = metadata !{metadata !98, metadata !4, i64 0}
!98 = metadata !{metadata !"_obstack_chunk", metadata !4, i64 0, metadata !4, i64 8, metadata !5, i64 16}
!99 = metadata !{metadata !76, metadata !4, i64 104}
!100 = metadata !{metadata !101, metadata !13, i64 0}
!101 = metadata !{metadata !"stat", metadata !13, i64 0, metadata !13, i64 8, metadata !13, i64 16, metadata !7, i64 24, metadata !7, i64 28, metadata !7, i64 32, metadata !7, i64 36, metadata !13, i64 40, metadata !13, i64 48, metadata !13, i64 56, metadata !13, i64 64, metadata !102, i64 72, metadata !102, i64 88, metadata !102, i64 104, metadata !5, i64 120}
!102 = metadata !{metadata !"timespec", metadata !13, i64 0, metadata !13, i64 8}
!103 = metadata !{metadata !101, metadata !13, i64 8}
!104 = metadata !{metadata !101, metadata !13, i64 88}
!105 = metadata !{metadata !2, metadata !4, i64 80}
