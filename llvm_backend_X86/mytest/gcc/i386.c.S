	.file	"i386.c.bc"
	.text
	.align	16, 0x90
	.type	ix86_adjust_cost,@function
ix86_adjust_cost:                       # @ix86_adjust_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp6:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp7:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp8:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp9:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp10:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp11:
	.cfi_def_cfa_offset 80
.Ltmp12:
	.cfi_offset %rbx, -48
.Ltmp13:
	.cfi_offset %r12, -40
.Ltmp14:
	.cfi_offset %r13, -32
.Ltmp15:
	.cfi_offset %r14, -24
.Ltmp16:
	.cfi_offset %r15, -16
	movzbl	2(%rsi), %eax
	movq	%rcx, %rbx
	movq	%rdx, %r13
	movq	%rdi, %r12
	xorq	%r15, %r15
	testq	%rax, %rax
	jne	.LBB0_59
# BB#1:                                 # %if.end
	movslq	40(%r13), %rax
	testq	%rax, %rax
	jns	.LBB0_4
# BB#2:                                 # %cond.end
	movq	%r13, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB0_3
.LBB0_4:                                # %lor.lhs.false
	movslq	40(%r12), %rax
	testq	%rax, %rax
	jns	.LBB0_7
# BB#5:                                 # %cond.end16
	movq	%r12, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB0_6
.LBB0_7:                                # %if.end20
	movq	%r12, %rdi
	callq	get_attr_type
	movq	%rax, %r14
	movq	%r13, %rdi
	movq	%r13, 24(%rsp)          # 8-byte Spill
	callq	get_attr_type
	movl	ix86_cpu(%rip), %ecx
	addq	$-2, %rcx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	$3, %rcx
	jbe	.LBB0_9
# BB#8:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_9:                                # %if.end20
	movq	%rax, 16(%rsp)          # 8-byte Spill
	jmpq	*.LJTI0_0(,%rcx,8)
.LBB0_10:                               # %sw.bb
	andq	%r13, %r14
	cmpq	$9, %r14
	jne	.LBB0_15
# BB#11:                                # %if.then.i
	movq	32(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB0_14
# BB#12:                                # %if.then.i
	cmpq	$39, %rcx
	jne	.LBB0_159
# BB#13:                                # %land.lhs.true7.i
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB0_159
.LBB0_14:                               # %if.end21.i
	addq	$16, %rax
	jmp	.LBB0_19
.LBB0_3:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_6:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_60:                               # %sw.bb39
	movq	%r12, %rdi
	callq	get_attr_memory
	movq	%rax, %r15
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	get_attr_memory
	movq	16(%rsp), %rdx          # 8-byte Reload
	andq	%r13, %rdx
	cmpq	$7, %rdx
	jne	.LBB0_62
# BB#61:
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	jmp	.LBB0_68
.LBB0_106:                              # %sw.bb160
	movq	%r12, %rdi
	callq	get_attr_memory
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	get_attr_memory
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	movq	%r14, %rdx
	andq	%rcx, %rdx
	cmpq	$16, %rdx
	movq	$1, %r15
	movq	16(%rsp), %rdx          # 8-byte Reload
	jne	.LBB0_108
# BB#107:                               # %sw.bb160
	andq	%rdx, %rcx
	cmpq	$16, %rcx
	je	.LBB0_59
.LBB0_108:                              # %if.end175
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	jne	.LBB0_113
# BB#109:                               # %if.then181
	movq	%rdx, %rax
	andq	%r13, %rax
	cmpq	$7, %rax
	je	.LBB0_110
# BB#111:                               # %if.then181
	movabsq	$1, %rax
	jmp	.LBB0_112
.LBB0_134:                              # %sw.bb215
	movq	%r12, %rdi
	callq	get_attr_memory
	movq	%rax, %r13
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	get_attr_memory
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	jne	.LBB0_139
# BB#135:                               # %if.then223
	movq	16(%rsp), %rax          # 8-byte Reload
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rax
	cmpq	$7, %rax
	je	.LBB0_137
# BB#136:                               # %if.then223
	cmpq	$21, %rax
	jne	.LBB0_138
.LBB0_137:                              # %if.then229
	addq	$2, %rbx
	jmp	.LBB0_139
.LBB0_15:                               # %if.else25.i
	movq	%r12, %rdi
	callq	extract_insn_cached
	movq	%r14, %rsi
	movsbq	recog_data+996(%rip), %rdx
	movq	$1, %r15
	.align	16, 0x90
.LBB0_16:                               # %for.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB0_23
# BB#17:                                # %for.body.i
                                        #   in Loop: Header=BB0_16 Depth=1
	movq	recog_data-8(,%rdx,8), %rax
	movzbl	(%rax), %ecx
	decq	%rdx
	cmpq	$66, %rcx
	jne	.LBB0_16
# BB#18:                                # %if.then33.i
	movq	%rsi, %r14
	addq	$8, %rax
.LBB0_19:                               # %if.end40.i
	movq	(%rax), %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	modified_in_p
	testq	%r13, %rax
	jne	.LBB0_20
# BB#21:                                # %if.end40.i
	movabsq	$1, %r15
	jmp	.LBB0_22
.LBB0_62:                               # %sw.bb39
	cmpq	$21, %rdx
	jne	.LBB0_64
# BB#63:
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	jmp	.LBB0_68
.LBB0_20:
	movabsq	$0, %r15
.LBB0_22:                               # %if.end40.i
	movq	%r14, %rsi
.LBB0_23:                               # %ix86_agi_dependant.exit
	xorq	$1, %r15
	addq	%rbx, %r15
	cmpq	$28, %rsi
	ja	.LBB0_43
# BB#24:                                # %ix86_agi_dependant.exit
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl, %rax
	testq	$269533184, %rax        # imm = 0x1010C000
	je	.LBB0_43
# BB#25:                                # %if.end.i
	movq	24(%rsp), %rdi          # 8-byte Reload
	movzbl	(%rdi), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB0_31
# BB#26:                                # %cond.true.i
	movq	32(%rdi), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB0_28
# BB#27:
	movq	%rdi, %rbx
	jmp	.LBB0_29
.LBB0_64:                               # %land.lhs.true45
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	jne	.LBB0_65
# BB#66:                                # %land.lhs.true45
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	movabsq	$1, %rax
	jmp	.LBB0_67
.LBB0_110:
	movabsq	$0, %rax
.LBB0_112:                              # %if.then181
	leaq	1(%rax,%rbx), %rbx
.LBB0_113:                              # %if.end186
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	get_attr_fp_int_src
	testq	%r13, %rax
	je	.LBB0_115
# BB#114:                               # %if.end186
	addq	$5, %rbx
.LBB0_115:                              # %if.end186
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	movq	8(%rsp), %rax           # 8-byte Reload
	andq	%rcx, %rax
	cmpq	$1, %rax
	jne	.LBB0_116
# BB#117:                               # %land.lhs.true197
	andq	%r13, %r14
	cmpq	$9, %r14
	jne	.LBB0_123
# BB#118:                               # %land.lhs.true197
	movl	ix86_cpu(%rip), %eax
	andq	%r13, %rax
	cmpq	$2, %rax
	jne	.LBB0_123
# BB#119:                               # %if.then.i444
	movq	32(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB0_122
# BB#120:                               # %if.then.i444
	cmpq	$39, %rcx
	jne	.LBB0_159
# BB#121:                               # %land.lhs.true7.i451
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB0_159
.LBB0_122:                              # %if.end21.i455
	addq	$16, %rax
	jmp	.LBB0_127
.LBB0_116:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_138:                              # %if.else231
	addq	$3, %rbx
.LBB0_139:                              # %if.end234
	andq	%rcx, %r13
	cmpq	$1, %r13
	jne	.LBB0_140
# BB#141:                               # %land.lhs.true240
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %r14
	cmpq	$9, %r14
	jne	.LBB0_147
# BB#142:                               # %land.lhs.true240
	movl	ix86_cpu(%rip), %eax
	andq	%r13, %rax
	cmpq	$2, %rax
	jne	.LBB0_147
# BB#143:                               # %if.then.i482
	movq	32(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB0_146
# BB#144:                               # %if.then.i482
	cmpq	$39, %rcx
	jne	.LBB0_159
# BB#145:                               # %land.lhs.true7.i489
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB0_159
.LBB0_146:                              # %if.end21.i493
	addq	$16, %rax
	jmp	.LBB0_151
.LBB0_140:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_147:                              # %if.else25.i494
	movq	%r12, %rdi
	callq	extract_insn_cached
	movsbq	recog_data+996(%rip), %rdx
.LBB0_148:                              # %for.cond.i498
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB0_153
# BB#149:                               # %for.body.i503
                                        #   in Loop: Header=BB0_148 Depth=1
	movq	recog_data-8(,%rdx,8), %rax
	movzbl	(%rax), %ecx
	decq	%rdx
	cmpq	$66, %rcx
	jne	.LBB0_148
# BB#150:                               # %if.then33.i505
	addq	$8, %rax
.LBB0_151:                              # %ix86_agi_dependant.exit512
	movq	(%rax), %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	modified_in_p
	testq	%r13, %rax
	je	.LBB0_153
# BB#152:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_153:                              # %if.then243
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r13, %rax
	cmpq	$7, %rax
	je	.LBB0_59
# BB#154:                               # %if.then243
	cmpq	$21, %rax
	je	.LBB0_59
# BB#155:                               # %if.else250
	movq	$32, %rcx
	movq	%rbx, %rax
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$2, %rdx
	jg	.LBB0_156
# BB#157:                               # %if.else250
	xorq	%rax, %rax
	jmp	.LBB0_158
.LBB0_65:
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	movabsq	$0, %rax
.LBB0_67:                               # %land.lhs.true45
	addq	%rax, %rbx
.LBB0_68:                               # %if.end51
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	get_attr_fp_int_src
	testq	%r13, %rax
	je	.LBB0_70
# BB#69:                                # %if.end51
	addq	$5, %rbx
.LBB0_70:                               # %if.end51
	andq	%r13, %r14
	cmpq	$21, %r14
	jne	.LBB0_86
# BB#71:                                # %land.lhs.true58
	movq	24(%rsp), %rdi          # 8-byte Reload
	movzbl	(%rdi), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB0_86
# BB#72:                                # %cond.true64
	movq	32(%rdi), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB0_74
# BB#73:                                # %cond.false75
	movq	%rax, %rsi
	callq	single_set_2
.LBB0_74:                               # %cond.end83
	testq	%rax, %rax
	je	.LBB0_86
# BB#75:                                # %land.lhs.true87
	movzbl	(%r12), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$105, %rcx
	jne	.LBB0_86
# BB#76:                                # %cond.true95
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	32(%r12), %r13
	movzbl	(%r13), %eax
	cmpq	$47, %rax
	je	.LBB0_78
# BB#77:                                # %cond.false107
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	single_set_2
	movq	%rax, %r13
.LBB0_78:                               # %cond.end115
	movq	8(%rsp), %rax           # 8-byte Reload
	testq	%r13, %r13
	je	.LBB0_79
# BB#80:                                # %land.lhs.true119
	movq	8(%rax), %rdi
	movq	16(%r13), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB0_81
# BB#82:                                # %land.lhs.true128
	movq	8(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB0_83
# BB#84:                                # %land.lhs.true128
	movabsq	$1, %rax
	jmp	.LBB0_85
.LBB0_123:                              # %if.else25.i456
	movq	%r12, %rdi
	callq	extract_insn_cached
	movsbq	recog_data+996(%rip), %rdx
.LBB0_124:                              # %for.cond.i460
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB0_129
# BB#125:                               # %for.body.i465
                                        #   in Loop: Header=BB0_124 Depth=1
	movq	recog_data-8(,%rdx,8), %rax
	movzbl	(%rax), %ecx
	decq	%rdx
	cmpq	$66, %rcx
	jne	.LBB0_124
# BB#126:                               # %if.then33.i467
	addq	$8, %rax
.LBB0_127:                              # %ix86_agi_dependant.exit474
	movq	(%rax), %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	modified_in_p
	testq	%r13, %rax
	je	.LBB0_129
# BB#128:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_129:                              # %if.then200
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r13, %rax
	cmpq	$7, %rax
	je	.LBB0_59
# BB#130:                               # %if.then200
	cmpq	$21, %rax
	je	.LBB0_59
# BB#131:                               # %if.else207
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$2, %rax
	jg	.LBB0_132
# BB#133:                               # %if.else207
	movq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_28:                               # %cond.false.i
	movq	%rdi, %rbx
	movq	%rsi, %r14
	movq	%rax, %rsi
	callq	single_set_2
	movq	%r14, %rsi
.LBB0_29:                               # %cond.end21.i
	testq	%rax, %rax
	movq	%rbx, %rdi
	je	.LBB0_31
# BB#30:                                # %if.then25.i
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movq	8(%rax), %rdi
	xorq	%r14, %r14
.LBB0_36:                               # %if.end94.i
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB0_43
# BB#37:                                # %lor.lhs.false.i
	movl	8(%rdi), %eax
	cmpq	$17, %rax
	jne	.LBB0_43
# BB#38:                                # %if.end104.i
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	32(%r12), %rsi
	callq	reg_overlap_mentioned_p
	testq	%r13, %rax
	je	.LBB0_39
# BB#40:                                # %if.end110.i
	testq	%r14, %r14
	movq	16(%rsp), %rsi          # 8-byte Reload
	je	.LBB0_42
# BB#41:                                # %land.lhs.true112.i
	movq	32(%r12), %rsi
	movq	%r14, %rdi
	callq	reg_overlap_mentioned_p
	movq	16(%rsp), %rsi          # 8-byte Reload
	testq	%r13, %rax
	jne	.LBB0_43
.LBB0_42:                               # %if.end119.i
	xorq	%r15, %r15
	jmp	.LBB0_43
.LBB0_31:                               # %if.else.i
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movq	32(%rdi), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB0_43
# BB#32:                                # %land.lhs.true36.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB0_43
# BB#33:                                # %land.lhs.true44.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB0_43
# BB#34:                                # %land.lhs.true56.i
	movq	16(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$47, %rax
	jne	.LBB0_43
# BB#35:                                # %if.then69.i
	movq	8(%rcx), %rdi
	movq	%rdi, %r14
	jmp	.LBB0_36
.LBB0_156:
	addq	$-3, %rax
	jmp	.LBB0_158
.LBB0_79:
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	jmp	.LBB0_86
.LBB0_81:
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	jmp	.LBB0_86
.LBB0_132:
	addq	$-2, %rbx
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_83:
	movabsq	$0, %rax
.LBB0_85:                               # %land.lhs.true128
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	addq	%rax, %rbx
.LBB0_86:                               # %if.end138
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rax, %r15
	cmpq	$1, %r15
	jne	.LBB0_87
# BB#88:                                # %land.lhs.true144
	cmpq	$9, %r14
	jne	.LBB0_94
# BB#89:                                # %land.lhs.true144
	movl	ix86_cpu(%rip), %eax
	andq	%r13, %rax
	cmpq	$2, %rax
	jne	.LBB0_94
# BB#90:                                # %if.then.i406
	movq	32(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB0_93
# BB#91:                                # %if.then.i406
	cmpq	$39, %rcx
	jne	.LBB0_159
# BB#92:                                # %land.lhs.true7.i413
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB0_159
.LBB0_93:                               # %if.end21.i417
	addq	$16, %rax
	jmp	.LBB0_98
.LBB0_87:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_94:                               # %if.else25.i418
	movq	%r12, %rdi
	callq	extract_insn_cached
	movsbq	recog_data+996(%rip), %rdx
.LBB0_95:                               # %for.cond.i422
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB0_100
# BB#96:                                # %for.body.i427
                                        #   in Loop: Header=BB0_95 Depth=1
	movq	recog_data-8(,%rdx,8), %rax
	movzbl	(%rax), %ecx
	decq	%rdx
	cmpq	$66, %rcx
	jne	.LBB0_95
# BB#97:                                # %if.then33.i429
	addq	$8, %rax
.LBB0_98:                               # %ix86_agi_dependant.exit436
	movq	(%rax), %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	modified_in_p
	testq	%r13, %rax
	je	.LBB0_100
# BB#99:
	movq	%rbx, %r15
	movq	%r15, %rax
	jmp	.LBB0_158
.LBB0_100:                              # %if.then147
	movq	$1, %r15
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	$7, %rax
	je	.LBB0_59
# BB#101:                               # %if.then147
	cmpq	$21, %rax
	je	.LBB0_59
# BB#102:                               # %if.else
	movq	$32, %rcx
	movq	%rbx, %rax
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$1, %rdx
	jle	.LBB0_103
# BB#104:                               # %if.else
	movabsq	$1, %rcx
	subq	%rcx, %rax
	jmp	.LBB0_158
.LBB0_103:
	movabsq	$0, %rcx
	subq	%rcx, %rax
	jmp	.LBB0_158
.LBB0_39:
	movq	16(%rsp), %rsi          # 8-byte Reload
.LBB0_43:                               # %ix86_flags_dependant.exit
	cmpq	$21, %rsi
	jne	.LBB0_59
# BB#44:                                # %land.lhs.true
	movq	%rsi, %r14
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r13, %rax
	cmpq	$2, %rax
	jne	.LBB0_59
# BB#45:                                # %land.lhs.true33
	cmpq	$9, %r14
	jne	.LBB0_51
# BB#46:                                # %land.lhs.true33
	movl	ix86_cpu(%rip), %eax
	andq	%r13, %rax
	cmpq	$2, %rax
	jne	.LBB0_51
# BB#47:                                # %if.then.i368
	movq	32(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB0_50
# BB#48:                                # %if.then.i368
	cmpq	$39, %rcx
	jne	.LBB0_159
# BB#49:                                # %land.lhs.true7.i375
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB0_159
.LBB0_50:                               # %if.end21.i379
	addq	$16, %rax
	jmp	.LBB0_55
.LBB0_51:                               # %if.else25.i380
	movq	%r12, %rdi
	callq	extract_insn_cached
	movsbq	recog_data+996(%rip), %rdx
.LBB0_52:                               # %for.cond.i384
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rax
	jle	.LBB0_58
# BB#53:                                # %for.body.i389
                                        #   in Loop: Header=BB0_52 Depth=1
	movq	recog_data-8(,%rdx,8), %rax
	movzbl	(%rax), %ecx
	decq	%rdx
	cmpq	$66, %rcx
	jne	.LBB0_52
# BB#54:                                # %if.then33.i391
	addq	$8, %rax
.LBB0_55:                               # %if.end40.i396
	movq	(%rax), %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	modified_in_p
	testq	%r13, %rax
	jne	.LBB0_56
# BB#57:                                # %if.end40.i396
	movabsq	$1, %rax
	jmp	.LBB0_58
.LBB0_56:
	movabsq	$0, %rax
.LBB0_58:                               # %ix86_agi_dependant.exit398
	addq	%rax, %r15
.LBB0_59:                               # %return
	movq	%r15, %rax
.LBB0_158:                              # %if.else250
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB0_159:                              # %if.else20.i
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_agi_dependant, %rcx
	movq	$10066, %rsi            # imm = 0x2752
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp17:
	.size	ix86_adjust_cost, .Ltmp17-ix86_adjust_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI0_0:
	.quad	.LBB0_10
	.quad	.LBB0_60
	.quad	.LBB0_106
	.quad	.LBB0_134

	.text
	.align	16, 0x90
	.type	ix86_issue_rate,@function
ix86_issue_rate:                        # @ix86_issue_rate
	.cfi_startproc
# BB#0:                                 # %entry
	movl	ix86_cpu(%rip), %ecx
	cmpq	$6, %rcx
	ja	.LBB1_3
# BB#1:                                 # %entry
	movq	$1, %rdx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$104, %rax
	je	.LBB1_2
# BB#5:                                 # %sw.bb1
	movq	$3, %rax
	retq
.LBB1_2:                                # %entry
	movq	$2, %rax
	shlq	%cl, %rdx
	testq	$20, %rdx
	jne	.LBB1_4
.LBB1_3:                                # %sw.default
	movq	$1, %rax
.LBB1_4:                                # %return
	retq
.Ltmp18:
	.size	ix86_issue_rate, .Ltmp18-ix86_issue_rate
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_variable_issue,@function
ix86_variable_issue:                    # @ix86_variable_issue
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp23:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp24:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp25:
	.cfi_def_cfa_offset 32
.Ltmp26:
	.cfi_offset %rbx, -32
.Ltmp27:
	.cfi_offset %r14, -24
.Ltmp28:
	.cfi_offset %r15, -16
	movl	ix86_cpu(%rip), %eax
	movq	%rdx, %r15
	movq	%rsi, %rbx
	movq	%rdi, %r14
	cmpq	$3, %rax
	jne	.LBB2_1
# BB#2:                                 # %sw.bb
	movslq	40(%r15), %rax
	testq	%rax, %rax
	jns	.LBB2_4
# BB#3:                                 # %cond.end.i
	movq	%r15, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB2_7
.LBB2_4:                                # %ix86_safe_ppro_uops.exit
	movq	%r15, %rdi
	callq	get_attr_ppro_uops
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rax
	cmpq	$1, %rax
	jne	.LBB2_5
# BB#21:                                # %if.then6
	testq	%rdx, %rbx
	je	.LBB2_28
# BB#22:                                # %if.then8
	movq	ix86_sched_data(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_28
# BB#23:                                # %if.then.i71
	movl	8(%rax), %edx
	movabsq	$.L.str386, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	movq	ix86_sched_data+8(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_25
# BB#24:                                # %if.then2.i75
	movl	8(%rax), %edx
	movabsq	$.L.str387, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB2_25:                               # %if.end.i77
	movq	ix86_sched_data+16(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_27
# BB#26:                                # %if.then8.i81
	movl	8(%rax), %edx
	movabsq	$.L.str387, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB2_27:                               # %if.end13.i83
	movq	$10, %rdi
	movq	%r14, %rsi
	callq	fputc
.LBB2_28:                               # %if.end9
	movq	%r15, ix86_sched_data(%rip)
	movq	$0, ix86_sched_data+16(%rip)
	movq	$0, ix86_sched_data+8(%rip)
	jmp	.LBB2_44
.LBB2_1:                                # %sw.default
	decq	%rcx
	jmp	.LBB2_45
.LBB2_5:                                # %ix86_safe_ppro_uops.exit
	cmpq	$2, %rax
	jne	.LBB2_6
.LBB2_7:                                # %if.then
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rbx
	je	.LBB2_20
# BB#8:                                 # %if.then1
	movq	ix86_sched_data(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_14
# BB#9:                                 # %if.then.i46
	movl	8(%rax), %edx
	movabsq	$.L.str386, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	movq	ix86_sched_data+8(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_11
# BB#10:                                # %if.then2.i
	movl	8(%rax), %edx
	movabsq	$.L.str387, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB2_11:                               # %if.end.i
	movq	ix86_sched_data+16(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_13
# BB#12:                                # %if.then8.i
	movl	8(%rax), %edx
	movabsq	$.L.str387, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB2_13:                               # %if.end13.i
	movq	$10, %rdi
	movq	%r14, %rsi
	callq	fputc
.LBB2_14:                               # %ix86_dump_ppro_packet.exit
	movq	%r15, ix86_sched_data(%rip)
	testq	%r15, %r15
	movq	$0, ix86_sched_data+16(%rip)
	movq	$0, ix86_sched_data+8(%rip)
	je	.LBB2_43
# BB#15:                                # %if.then.i52
	movl	8(%r15), %edx
	movabsq	$.L.str386, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	movq	ix86_sched_data+8(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_17
# BB#16:                                # %if.then2.i56
	movl	8(%rax), %edx
	movabsq	$.L.str387, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB2_17:                               # %if.end.i58
	movq	ix86_sched_data+16(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_19
# BB#18:                                # %if.then8.i62
	movl	8(%rax), %edx
	movabsq	$.L.str387, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB2_19:                               # %if.end13.i64
	movq	$10, %rdi
	movq	%r14, %rsi
	callq	fputc
	jmp	.LBB2_43
.LBB2_6:
	xorq	%rax, %rax
	.align	16, 0x90
.LBB2_30:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, ix86_sched_data(,%rax,8)
	je	.LBB2_31
# BB#29:                                # %for.cond
                                        #   in Loop: Header=BB2_30 Depth=1
	incq	%rax
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$2, %rsi
	jle	.LBB2_30
	jmp	.LBB2_32
.LBB2_20:                               # %if.end4.critedge
	movq	%r15, ix86_sched_data(%rip)
	jmp	.LBB2_42
.LBB2_31:                               # %if.then13
	movq	%r15, ix86_sched_data(,%rax,8)
.LBB2_32:                               # %for.end
	andq	%rdx, %rax
	cmpq	$2, %rax
	jne	.LBB2_33
# BB#35:                                # %if.then21
	testq	%rdx, %rbx
	je	.LBB2_42
# BB#36:                                # %if.then23
	movq	ix86_sched_data(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_42
# BB#37:                                # %if.then.i90
	movl	8(%rax), %edx
	movabsq	$.L.str386, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	movq	ix86_sched_data+8(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_39
# BB#38:                                # %if.then2.i94
	movl	8(%rax), %edx
	movabsq	$.L.str387, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB2_39:                               # %if.end.i96
	movq	ix86_sched_data+16(%rip), %rax
	testq	%rax, %rax
	je	.LBB2_41
# BB#40:                                # %if.then8.i100
	movl	8(%rax), %edx
	movabsq	$.L.str387, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB2_41:                               # %if.end13.i102
	movq	$10, %rdi
	movq	%r14, %rsi
	callq	fputc
.LBB2_42:                               # %if.end24
	movq	$0, ix86_sched_data+16(%rip)
	movq	$0, ix86_sched_data+8(%rip)
.LBB2_43:                               # %if.end27
	movq	$0, ix86_sched_data(%rip)
.LBB2_44:                               # %if.end27
	movl	ix86_sched_data+24(%rip), %ecx
	decq	%rcx
	movl	%ecx, ix86_sched_data+24(%rip)
.LBB2_45:                               # %return
	movq	%rcx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB2_33:                               # %for.end
	cmpq	$3, %rax
	jne	.LBB2_44
# BB#34:                                # %if.then18
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_variable_issue, %rcx
	movq	$10629, %rsi            # imm = 0x2985
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp29:
	.size	ix86_variable_issue, .Ltmp29-ix86_variable_issue
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_sched_init,@function
ix86_sched_init:                        # @ix86_sched_init
	.cfi_startproc
# BB#0:                                 # %entry
	movq	$0, ix86_sched_data+24(%rip)
	movq	$0, ix86_sched_data+16(%rip)
	movq	$0, ix86_sched_data+8(%rip)
	movq	$0, ix86_sched_data(%rip)
	retq
.Ltmp30:
	.size	ix86_sched_init, .Ltmp30-ix86_sched_init
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_sched_reorder,@function
ix86_sched_reorder:                     # @ix86_sched_reorder
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp37:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp38:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp39:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp40:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp41:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp42:
	.cfi_def_cfa_offset 112
.Ltmp43:
	.cfi_offset %rbx, -48
.Ltmp44:
	.cfi_offset %r12, -40
.Ltmp45:
	.cfi_offset %r13, -32
.Ltmp46:
	.cfi_offset %r14, -24
.Ltmp47:
	.cfi_offset %r15, -16
	movslq	(%rcx), %rcx
	cmpq	$2, %rcx
	jl	.LBB4_85
# BB#1:                                 # %if.end
	movl	ix86_cpu(%rip), %eax
	leaq	-8(%rdx,%rcx,8), %r12
	cmpq	$3, %rax
	movq	%rdx, %r13
	jne	.LBB4_2
# BB#34:                                # %sw.bb2
	movq	ix86_sched_data+16(%rip), %rax
	movq	%rcx, %rsi
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	ix86_sched_data+8(%rip), %rcx
	movq	ix86_sched_data(%rip), %rdx
	movq	%rax, 48(%rsp)
	movq	%rcx, 40(%rsp)
	movq	%rdx, 32(%rsp)
	movq	(%r12), %r14
	movslq	40(%r14), %rax
	leaq	-1(%rsi), %rbx
	testq	%rax, %rax
	jns	.LBB4_36
# BB#35:                                # %cond.end.i.i12
	movq	%r14, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$2, %rax
	js	.LBB4_37
.LBB4_36:                               # %if.then.i.i
	movq	%r14, %rdi
	callq	get_attr_ppro_uops
.LBB4_37:                               # %ix86_safe_ppro_uops.exit.i
	cmpq	$0, 32(%rsp)
	je	.LBB4_39
# BB#38:
	movq	$1, %r14
	movq	$0, 8(%rsp)             # 8-byte Folded Spill
	jmp	.LBB4_56
.LBB4_2:                                # %if.end
	cmpq	$2, %rax
	jne	.LBB4_86
# BB#3:                                 # %sw.bb
	movq	(%r12), %rbx
	movq	%r12, 16(%rsp)          # 8-byte Spill
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB4_5
# BB#4:                                 # %cond.end.i.i
	movq	%rbx, %rdi
	movq	%rcx, %r14
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%r14, %rcx
	testq	%rax, %rax
	js	.LBB4_85
.LBB4_5:                                # %ix86_safe_pent_pair.exit.i
	movq	%rbx, %rdi
	movq	%rcx, %rbx
	callq	get_attr_pent_pair
	movq	%rbx, %rcx
	movq	%rax, %r12
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
                                        # kill: RAX<def> R12<kill>
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB4_85
# BB#6:                                 # %if.end.i
	movq	%r13, %rdx
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	testq	%rax, %r12
	je	.LBB4_8
# BB#7:
	movq	%rcx, %r13
	movq	$3, %rsi
	xorq	%rax, %rax
	jmp	.LBB4_12
.LBB4_39:                               # %if.then.i
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$2, %rax
	jne	.LBB4_40
# BB#91:                                # %if.then2.i
	movq	(%r12), %rax
	movq	%rax, 32(%rsp)
	movq	$0, 8(%rsp)             # 8-byte Folded Spill
	jmp	.LBB4_82
.LBB4_40:                               # %while.cond.preheader.i
	cmpq	$1, %rax
	je	.LBB4_49
# BB#41:                                # %while.cond.preheader.i
	testq	%rbx, %rbx
	je	.LBB4_49
# BB#42:                                # %if.end7.i15.preheader
	movq	%r12, 16(%rsp)          # 8-byte Spill
	movq	$3, %rcx
	movq	8(%rsp), %rax           # 8-byte Reload
	leaq	(%r13,%rax,8), %rdx
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movq	%rax, %r15
	shlq	%cl, %r15
	movq	$-8, %rbx
	.align	16, 0x90
.LBB4_43:                               # %if.end7.i15
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	-8(%rax,%rbx), %r14
	movslq	40(%r14), %rax
	leaq	(%r15,%rbx), %r12
	testq	%rax, %rax
	jns	.LBB4_50
# BB#44:                                # %cond.end.i74.i
                                        #   in Loop: Header=BB4_43 Depth=1
	movq	%r14, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rcx, %rcx
	testq	%rax, %rax
	js	.LBB4_45
.LBB4_50:                               # %if.then.i76.i
                                        #   in Loop: Header=BB4_43 Depth=1
	movq	%r14, %rdi
	callq	get_attr_ppro_uops
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$1, %rax
	movabsq	$0, %rcx
	jne	.LBB4_45
# BB#51:                                # %if.then.i76.i
                                        #   in Loop: Header=BB4_43 Depth=1
	movabsq	$1, %rcx
.LBB4_45:                               # %while.cond.backedge.i
                                        #   in Loop: Header=BB4_43 Depth=1
	addq	$-8, %rbx
	testq	%rcx, %rcx
	jne	.LBB4_47
# BB#46:                                # %while.cond.backedge.i
                                        #   in Loop: Header=BB4_43 Depth=1
	cmpq	$8, %r12
	jne	.LBB4_43
.LBB4_47:                               # %while.end.i
	cmpq	$-8, %rbx
	movq	16(%rsp), %r12          # 8-byte Reload
	je	.LBB4_49
# BB#48:                                # %while.end.i
	xorq	$1, %rcx
	jne	.LBB4_49
# BB#52:                                # %if.then.i80.i
	movq	8(%rsp), %rax           # 8-byte Reload
	leaq	(%r13,%rax,8), %rcx
	leaq	(%rcx,%rbx), %rsi
	movq	(%rsi), %r8
	leaq	8(%rbx), %rdi
	leaq	-16(%r13,%rax,8), %rax
	.align	16, 0x90
.LBB4_53:                               # %do.body.i.i21
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rcx,%rdi), %rdx
	movq	%rdx, -8(%rcx,%rdi)
	addq	$8, %rdi
	jne	.LBB4_53
# BB#54:                                # %do.end.i.i23
	movq	%rax, %rdx
	subq	%rsi, %rdx
	andq	$-8, %rdx
	addq	%rdx, %rcx
	movq	%r8, 8(%rbx,%rcx)
	jmp	.LBB4_55
.LBB4_49:                               # %while.end.if.end11_crit_edge.i
	movq	8(%rsp), %rax           # 8-byte Reload
	leaq	-16(%r13,%rax,8), %rax
.LBB4_55:                               # %if.end11.i
	movq	(%r12), %rcx
	movq	%rcx, 32(%rsp)
	movq	$1, %r14
	movq	$1, 8(%rsp)             # 8-byte Folded Spill
	movq	%rax, %r12
	.align	16, 0x90
.LBB4_56:                               # %for.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_67 Depth 2
                                        #     Child Loop BB4_78 Depth 2
	cmpq	$0, 32(%rsp,%r14,8)
	jne	.LBB4_81
# BB#57:                                # %if.then18.i
                                        #   in Loop: Header=BB4_56 Depth=1
	cmpq	%r13, %r12
	jbe	.LBB4_82
# BB#58:                                # %if.end21.i
                                        #   in Loop: Header=BB4_56 Depth=1
	movq	(%r12), %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB4_60
# BB#59:                                # %cond.end.i87.i
                                        #   in Loop: Header=BB4_56 Depth=1
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rcx, %rcx
	testq	%rax, %rax
	js	.LBB4_63
.LBB4_60:                               # %if.then.i89.i
                                        #   in Loop: Header=BB4_56 Depth=1
	movq	%rbx, %rdi
	callq	get_attr_ppro_uops
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_61
# BB#62:                                # %if.then.i89.i
                                        #   in Loop: Header=BB4_56 Depth=1
	movabsq	$1, %rcx
	jmp	.LBB4_63
.LBB4_61:                               #   in Loop: Header=BB4_56 Depth=1
	movabsq	$0, %rcx
.LBB4_63:                               # %while.cond23.preheader.i
                                        #   in Loop: Header=BB4_56 Depth=1
	movq	%r14, 24(%rsp)          # 8-byte Spill
	testq	%rcx, %rcx
	jne	.LBB4_64
# BB#65:                                # %while.cond23.preheader.i
                                        #   in Loop: Header=BB4_56 Depth=1
	cmpq	%r13, %r12
	movq	%r12, %rax
	je	.LBB4_72
# BB#66:                                # %if.end28.i.preheader
                                        #   in Loop: Header=BB4_56 Depth=1
	movq	%r13, %r15
	leaq	-8(%r12), %r13
	movq	%r12, 16(%rsp)          # 8-byte Spill
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	movabsq	$0, %r12
	.align	16, 0x90
.LBB4_67:                               # %if.end28.i
                                        #   Parent Loop BB4_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r13), %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB4_75
# BB#68:                                # %cond.end.i97.i
                                        #   in Loop: Header=BB4_67 Depth=2
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rcx, %rcx
	testq	%rax, %rax
	js	.LBB4_69
.LBB4_75:                               # %if.then.i99.i
                                        #   in Loop: Header=BB4_67 Depth=2
	movq	%rbx, %rdi
	callq	get_attr_ppro_uops
	testq	%r14, %rax
	movq	%r12, %rcx
	jne	.LBB4_69
# BB#76:                                # %if.then.i99.i
                                        #   in Loop: Header=BB4_67 Depth=2
	movabsq	$1, %rcx
.LBB4_69:                               # %while.cond23.backedge.i
                                        #   in Loop: Header=BB4_67 Depth=2
	leaq	-8(%r13), %rax
	testq	%rcx, %rcx
	jne	.LBB4_71
# BB#70:                                # %while.cond23.backedge.i
                                        #   in Loop: Header=BB4_67 Depth=2
	cmpq	%r13, %r15
	movq	%rax, %r13
	jne	.LBB4_67
.LBB4_71:                               # %while.end31.i.loopexit
                                        #   in Loop: Header=BB4_56 Depth=1
	addq	$8, %rax
	movq	%r15, %r13
	movq	16(%rsp), %r12          # 8-byte Reload
	jmp	.LBB4_72
.LBB4_64:                               #   in Loop: Header=BB4_56 Depth=1
	movq	%r12, %rax
.LBB4_72:                               # %while.end31.i
                                        #   in Loop: Header=BB4_56 Depth=1
	testq	%rcx, %rcx
	movq	24(%rsp), %r14          # 8-byte Reload
	je	.LBB4_81
# BB#73:                                # %if.then33.i
                                        #   in Loop: Header=BB4_56 Depth=1
	cmpq	%r12, %rax
	jne	.LBB4_77
# BB#74:                                # %if.then33.ix86_reorder_insn.exit112_crit_edge.i
                                        #   in Loop: Header=BB4_56 Depth=1
	leaq	-8(%r12), %rcx
	jmp	.LBB4_80
.LBB4_77:                               # %if.then.i105.i
                                        #   in Loop: Header=BB4_56 Depth=1
	movq	(%rax), %rdx
	leaq	-8(%r12), %rcx
	movq	%rcx, %rsi
	subq	%rax, %rsi
	movq	%rax, %rdi
	.align	16, 0x90
.LBB4_78:                               # %do.body.i109.i
                                        #   Parent Loop BB4_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdi), %rbx
	movq	%rbx, (%rdi)
	leaq	8(%rdi), %rdi
	cmpq	%rdi, %r12
	jne	.LBB4_78
# BB#79:                                # %do.end.i111.i
                                        #   in Loop: Header=BB4_56 Depth=1
	andq	$-8, %rsi
	movq	%rdx, 8(%rsi,%rax)
.LBB4_80:                               # %ix86_reorder_insn.exit112.i
                                        #   in Loop: Header=BB4_56 Depth=1
	movq	(%r12), %rax
	movq	%rax, 32(%rsp,%r14,8)
	incq	8(%rsp)                 # 8-byte Folded Spill
	movq	%rcx, %r12
.LBB4_81:                               # %for.inc.i
                                        #   in Loop: Header=BB4_56 Depth=1
	incq	%r14
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$3, %rax
	jl	.LBB4_56
.LBB4_82:                               # %ix86_sched_reorder_ppro.exit
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	8(%rsp), %rcx           # 8-byte Reload
	testq	%rax, %rcx
	movq	$1, %rax
	je	.LBB4_84
# BB#83:                                # %ix86_sched_reorder_ppro.exit
	movq	%rcx, %rax
.LBB4_84:                               # %ix86_sched_reorder_ppro.exit
	movl	%eax, ix86_sched_data+24(%rip)
.LBB4_85:                               # %outthread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB4_86:                               # %out
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$6, %rcx
	ja	.LBB4_89
# BB#87:                                # %out
	movq	$1, %rdx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$104, %rax
	je	.LBB4_88
# BB#92:                                # %sw.bb1.i
	movq	$3, %rax
	jmp	.LBB4_90
.LBB4_88:                               # %out
	movq	$2, %rax
	shlq	%cl, %rdx
	testq	$20, %rdx
	jne	.LBB4_90
.LBB4_89:                               # %sw.default.i
	movq	$1, %rax
.LBB4_90:                               # %ix86_issue_rate.exit
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB4_8:                                # %if.then3.i
	movq	%rdx, %rbx
	movq	%rcx, %rax
	movq	-8(%rbx,%rax,8), %rcx
	leaq	-16(%rbx,%rax,8), %rdi
	movq	%rax, %r13
	movq	$1, %rdx
	movq	%rbx, %rsi
	callq	ix86_pent_find_pair
	movq	%rbx, %rdx
	testq	%rax, %rax
	jne	.LBB4_9
# BB#10:                                # %if.then3.i
	movabsq	$1, %rcx
	jmp	.LBB4_11
.LBB4_9:
	movabsq	$0, %rcx
.LBB4_11:                               # %if.then3.i
	leaq	1(%rcx,%rcx), %rsi
.LBB4_12:                               # %if.end7.i
	movq	%rsi, %rbx
	andq	%r15, %rbx
	cmpq	$3, %rbx
	jne	.LBB4_13
# BB#14:                                # %if.end7.i
	movq	%r12, %rcx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	movq	%rdx, %r14
	movq	%r13, %rcx
	ja	.LBB4_16
# BB#15:                                # %if.then12.i
	movq	%rcx, %r15
	movq	-8(%r14,%r15,8), %rcx
	leaq	-16(%r14,%r15,8), %rdi
	movq	$2, %rdx
	movq	$2, %r13
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movq	%r14, %rsi
	callq	ix86_pent_find_pair
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%r15, %rcx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movq	%rax, %r8
	xorq	%rax, %rax
	testq	%r8, %r8
	jne	.LBB4_18
	jmp	.LBB4_16
.LBB4_13:
	movq	%rdx, %r14
	movq	%r13, %rcx
.LBB4_16:                               # %if.end18.i
	cmpq	$3, %rbx
	movq	%rsi, %r13
	movq	%rax, %r8
	jne	.LBB4_18
# BB#17:                                # %if.then20.i
	movq	%rcx, %rbx
	movq	-8(%r14,%rbx,8), %rcx
	leaq	-16(%r14,%rbx,8), %rdi
	xorq	%rdx, %rdx
	xorq	%r13, %r13
	movq	%r14, %rsi
	callq	ix86_pent_find_pair
	movq	%rbx, %rcx
	movq	%rax, %r8
	testq	%r8, %r8
	je	.LBB4_85
.LBB4_18:                               # %if.end29.i
	movq	%r12, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB4_27
# BB#19:                                # %if.end29.i
	movq	%r13, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB4_27
# BB#20:                                # %lor.lhs.false33.i
	orq	%r12, %r13
	testq	%r15, %r13
	jne	.LBB4_31
# BB#21:                                # %land.lhs.true37.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB4_23
# BB#22:                                # %cond.end.i80.i
	movq	%rbx, %rdi
	movq	%r15, %r12
	movq	%rcx, %r15
	movq	%r8, %r13
	callq	recog_memoized_1
	movq	%r13, %r8
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%r15, %rcx
	movq	%r12, %r15
	testq	%rax, %rax
	js	.LBB4_31
.LBB4_23:                               # %ix86_safe_memory.exit.i
	movq	%rbx, %rdi
	movq	%rcx, %r12
	movq	%r8, %rbx
	callq	get_attr_memory
	movq	%rbx, %r8
	movq	%r12, %rcx
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB4_31
# BB#24:                                # %land.lhs.true40.i
	movq	(%r8), %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB4_26
# BB#25:                                # %cond.end.i89.i
	movq	%rbx, %rdi
	movq	%r15, %r12
	movq	%rcx, %r15
	movq	%r8, %r13
	callq	recog_memoized_1
	movq	%r13, %r8
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%r15, %rcx
	movq	%r12, %r15
	testq	%rax, %rax
	js	.LBB4_31
.LBB4_26:                               # %ix86_safe_memory.exit93.i
	movq	%rbx, %rdi
	movq	%rcx, %r12
	movq	%r8, %rbx
	callq	get_attr_memory
	movq	%rbx, %r8
	movq	%r12, %rcx
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB4_31
.LBB4_27:                               # %if.then43.i
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %r8
	je	.LBB4_85
# BB#28:                                # %if.then.i95.i
	movq	(%r8), %rax
	movq	%rcx, %rsi
	leaq	-16(%r14,%rsi,8), %rcx
	subq	%r8, %rcx
	leaq	8(%r8), %rdx
	leaq	(%r14,%rsi,8), %rsi
	.align	16, 0x90
.LBB4_29:                               # %do.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdx), %rdi
	movq	%rdi, -8(%rdx)
	addq	$8, %rdx
	cmpq	%rdx, %rsi
	jne	.LBB4_29
	jmp	.LBB4_30
.LBB4_31:                               # %if.else.i
	leaq	-16(%r14,%rcx,8), %rax
	cmpq	%rax, %r8
	je	.LBB4_85
# BB#32:                                # %if.then.i100.i
	movq	(%r8), %rax
	movq	%rcx, %rsi
	leaq	-24(%r14,%rsi,8), %rcx
	subq	%r8, %rcx
	leaq	16(%r8), %rdx
	leaq	(%r14,%rsi,8), %rsi
	.align	16, 0x90
.LBB4_33:                               # %do.body.i104.i
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rdx), %rdi
	movq	%rdi, -16(%rdx)
	addq	$8, %rdx
	cmpq	%rdx, %rsi
	jne	.LBB4_33
.LBB4_30:                               # %do.end.i.i
	andq	$-8, %rcx
	movq	%rax, 8(%rcx,%r8)
	jmp	.LBB4_85
.Ltmp48:
	.size	ix86_sched_reorder, .Ltmp48-ix86_sched_reorder
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_comp_type_attributes,@function
ix86_comp_type_attributes:              # @ix86_comp_type_attributes
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp55:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp56:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp57:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp58:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp59:
	.cfi_def_cfa_offset 48
.Ltmp60:
	.cfi_offset %rbx, -48
.Ltmp61:
	.cfi_offset %r12, -40
.Ltmp62:
	.cfi_offset %r13, -32
.Ltmp63:
	.cfi_offset %r14, -24
.Ltmp64:
	.cfi_offset %r15, -16
	movzbl	target_flags(%rip), %eax
	movq	%rsi, %r14
	andq	$2, %rax
	movq	$1, %rbx
	movq	$1, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	jne	.LBB5_1
# BB#2:                                 # %entry
	movabsq	$.L.str57, %r15
	jmp	.LBB5_3
.LBB5_1:
	movabsq	$.L.str58, %r15
.LBB5_3:                                # %entry
	movzbl	16(%rdi), %eax
	cmpq	$23, %rax
	jne	.LBB5_9
# BB#4:                                 # %if.end
	movq	48(%rdi), %rsi
	movq	%r15, %rdi
	callq	lookup_attribute
	testq	%rax, %rax
	movabsq	$0, %r12
	movabsq	$1, %r13
	movq	%r12, %rbx
	jne	.LBB5_6
# BB#5:                                 # %if.end
	movq	%r13, %rbx
.LBB5_6:                                # %if.end
	movq	48(%r14), %rsi
	movq	%r15, %rdi
	callq	lookup_attribute
	testq	%rax, %rax
	jne	.LBB5_8
# BB#7:                                 # %if.end
	movq	%r13, %r12
.LBB5_8:                                # %if.end
	xorq	%r12, %rbx
	notq	%rbx
	andq	$1, %rbx
.LBB5_9:                                # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp65:
	.size	ix86_comp_type_attributes, .Ltmp65-ix86_comp_type_attributes
	.cfi_endproc

	.globl	ix86_init_builtins
	.align	16, 0x90
	.type	ix86_init_builtins,@function
ix86_init_builtins:                     # @ix86_init_builtins
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp72:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp73:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp74:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp75:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp76:
	.cfi_def_cfa_offset 48
	subq	$304, %rsp              # imm = 0x130
.Ltmp77:
	.cfi_def_cfa_offset 352
.Ltmp78:
	.cfi_offset %rbx, -48
.Ltmp79:
	.cfi_offset %r12, -40
.Ltmp80:
	.cfi_offset %r13, -32
.Ltmp81:
	.cfi_offset %r14, -24
.Ltmp82:
	.cfi_offset %r15, -16
	movzbl	target_flags+1(%rip), %eax
	testq	$64, %rax
	je	.LBB6_179
# BB#1:                                 # %if.then
	movq	global_trees+256(%rip), %r12
	movq	integer_types(%rip), %rdi
	callq	build_pointer_type
	movq	global_trees+192(%rip), %rdi
	movq	%rax, 264(%rsp)         # 8-byte Spill
	callq	build_pointer_type
	movq	global_trees+376(%rip), %rdi
	movq	%rax, 272(%rsp)         # 8-byte Spill
	callq	build_pointer_type
	movq	integer_types+80(%rip), %rdi
	movq	%rax, 280(%rsp)         # 8-byte Spill
	callq	build_pointer_type
	movq	integer_types+40(%rip), %r15
	movq	global_trees+328(%rip), %rbx
	movq	%rax, 288(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	xorq	%r13, %r13
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+344(%rip), %r14
	movq	global_trees+328(%rip), %rbx
	movq	%rax, 160(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	integer_types+40(%rip), %rbx
	movq	global_trees+328(%rip), %rsi
	movq	%rax, 296(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	integer_types+40(%rip), %rbx
	movq	global_trees+360(%rip), %rsi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+328(%rip), %rbx
	movq	integer_types+40(%rip), %rsi
	movq	%rax, 80(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+328(%rip), %rbx
	movq	global_trees+376(%rip), %rsi
	movq	%rax, 40(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	integer_types+40(%rip), %rbx
	movq	global_trees+368(%rip), %r14
	movq	%rax, 32(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+368(%rip), %r14
	movq	integer_types+40(%rip), %rbx
	movq	%rax, 64(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+360(%rip), %r14
	movq	global_trees+368(%rip), %rbx
	movq	%rax, 56(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+368(%rip), %r14
	movq	global_trees+376(%rip), %rbx
	movq	%rax, 144(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+328(%rip), %rbx
	movq	integer_types+40(%rip), %rsi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+368(%rip), %r14
	movq	global_trees+360(%rip), %rbx
	movq	%rax, 88(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+376(%rip), %r14
	movq	global_trees+368(%rip), %rbx
	movq	%rax, 72(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+368(%rip), %rbx
	movq	integer_types+40(%rip), %rsi
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+368(%rip), %rbx
	movq	integer_types+72(%rip), %rsi
	movq	%rax, (%rsp)            # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+376(%rip), %rbx
	movq	integer_types+72(%rip), %rsi
	movq	%rax, 248(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+216(%rip), %rdi
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movq	%r12, %rsi
	callq	build_function_type
	movq	global_trees+216(%rip), %rbx
	movq	integer_types+48(%rip), %rsi
	movq	%rax, 256(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	integer_types+48(%rip), %rdi
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	%r12, %rsi
	callq	build_function_type
	movq	integer_types+80(%rip), %rdi
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	%r12, %rsi
	callq	build_function_type
	movq	global_trees+328(%rip), %rdi
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movq	%r12, %rsi
	callq	build_function_type
	movq	global_trees+376(%rip), %rbx
	movq	global_trees+328(%rip), %rsi
	movq	%rax, 104(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+360(%rip), %rbx
	movq	%rax, 136(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	global_trees+216(%rip), %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+328(%rip), %rbx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	272(%rsp), %r14         # 8-byte Reload
	movq	%r14, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+328(%rip), %rbx
	movq	%rax, 152(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	280(%rsp), %r15         # 8-byte Reload
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+216(%rip), %rbx
	movq	global_trees+328(%rip), %rsi
	movq	%rax, 168(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+216(%rip), %rbx
	movq	global_trees+328(%rip), %rsi
	movq	%rax, 176(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+216(%rip), %rbx
	movq	integer_types+80(%rip), %rsi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+328(%rip), %rbx
	movq	%rax, 48(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+328(%rip), %rbx
	movq	%rax, 192(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+360(%rip), %rbx
	movq	%rax, 288(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+368(%rip), %rbx
	movq	%rax, 264(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+376(%rip), %rbx
	movq	%rax, 272(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	integer_types+80(%rip), %rbx
	movq	%rax, 280(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+376(%rip), %rbx
	movq	global_trees+384(%rip), %rsi
	movq	%rax, %r14
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+384(%rip), %rbx
	movq	global_trees+376(%rip), %rsi
	movq	%rax, 216(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+376(%rip), %rbx
	movq	%rax, 232(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+384(%rip), %rbx
	movq	%rax, 96(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+384(%rip), %rbx
	movq	%rax, 224(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	global_trees+376(%rip), %rbx
	movq	global_trees+384(%rip), %r15
	movq	%rax, 208(%rsp)         # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	tree_cons
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	tree_cons
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	build_function_type
	movq	%rax, %r12
	movabsq	$bdesc_2arg+16, %rbx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB6_2:                                # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB6_15
# BB#3:                                 # %if.end.i
                                        #   in Loop: Header=BB6_2 Depth=1
	movl	-12(%rbx), %eax
	leaq	(%rax,%rax,4), %rcx
	movq	insn_data+24(,%rcx,8), %rcx
	movzbl	40(%rcx), %edx
	cmpq	$32, %rdx
	jg	.LBB6_5
# BB#4:                                 # %if.end.i
                                        #   in Loop: Header=BB6_2 Depth=1
	cmpq	$5, %rdx
	movq	%r14, %rcx
	je	.LBB6_11
	jmp	.LBB6_9
	.align	16, 0x90
.LBB6_5:                                # %if.end.i
                                        #   in Loop: Header=BB6_2 Depth=1
	cmpq	$45, %rdx
	jg	.LBB6_10
# BB#6:                                 # %if.end.i
                                        #   in Loop: Header=BB6_2 Depth=1
	cmpq	$33, %rdx
	movq	280(%rsp), %rcx         # 8-byte Reload
	je	.LBB6_11
# BB#7:                                 # %if.end.i
                                        #   in Loop: Header=BB6_2 Depth=1
	cmpq	$36, %rdx
	movq	272(%rsp), %rcx         # 8-byte Reload
	je	.LBB6_11
# BB#8:                                 # %if.end.i
                                        #   in Loop: Header=BB6_2 Depth=1
	cmpq	$39, %rdx
	movq	264(%rsp), %rcx         # 8-byte Reload
	je	.LBB6_11
	jmp	.LBB6_9
.LBB6_10:                               # %if.end.i
                                        #   in Loop: Header=BB6_2 Depth=1
	cmpq	$46, %rdx
	movq	288(%rsp), %rcx         # 8-byte Reload
	jne	.LBB6_9
.LBB6_11:                               # %sw.epilog.i
                                        #   in Loop: Header=BB6_2 Depth=1
	movl	-16(%rbx), %edx
	movl	target_flags(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB6_15
# BB#12:                                # %if.then128.i
                                        #   in Loop: Header=BB6_2 Depth=1
	addq	$-727, %rax             # imm = 0xFFFFFFFFFFFFFD29
	andq	%r15, %rax
	cmpq	$4, %rax
	movq	296(%rsp), %rsi         # 8-byte Reload
	jb	.LBB6_14
# BB#13:                                # %if.then128.i
                                        #   in Loop: Header=BB6_2 Depth=1
	movq	%rcx, %rsi
.LBB6_14:                               # %if.then128.i
                                        #   in Loop: Header=BB6_2 Depth=1
	movl	(%rbx), %edx
	movq	$2, %rcx
	xorq	%r8, %r8
	callq	builtin_function
.LBB6_15:                               # %for.inc.i
                                        #   in Loop: Header=BB6_2 Depth=1
	incq	%r13
	addq	$32, %rbx
	cmpq	$103, %r13
	jb	.LBB6_2
# BB#16:                                # %do.body132.i
	movl	target_flags(%rip), %eax
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_18
# BB#17:                                # %if.then135.i
	movabsq	$.L.str306, %rdi
	movq	$181, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	128(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_18:                               # %do.body139.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_20
# BB#19:                                # %if.then142.i
	movabsq	$.L.str307, %rdi
	movq	$150, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	256(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_20:                               # %do.body146.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_22
# BB#21:                                # %if.then149.i
	movabsq	$.L.str308, %rdi
	movq	$151, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_22:                               # %do.body153.i
	testq	$16384, %rax            # imm = 0x4000
	movq	248(%rsp), %rbx         # 8-byte Reload
	je	.LBB6_24
# BB#23:                                # %if.then156.i
	movabsq	$.L.str309, %rdi
	movq	$152, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	120(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_24:                               # %do.body160.i
	testq	$16384, %rax            # imm = 0x4000
	movq	240(%rsp), %r13         # 8-byte Reload
	je	.LBB6_26
# BB#25:                                # %if.then163.i
	movabsq	$.L.str310, %rdi
	movq	$115, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_26:                               # %do.body167.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_28
# BB#27:                                # %if.then170.i
	movabsq	$.L.str311, %rdi
	movq	$116, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r13, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_28:                               # %do.body174.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_30
# BB#29:                                # %if.then177.i
	movabsq	$.L.str312, %rdi
	movq	$117, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_30:                               # %do.body181.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_32
# BB#31:                                # %if.then184.i
	movabsq	$.L.str313, %rdi
	movq	$120, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_32:                               # %do.body188.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_34
# BB#33:                                # %if.then191.i
	movabsq	$.L.str314, %rdi
	movq	$121, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r13, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_34:                               # %do.body195.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_36
# BB#35:                                # %if.then198.i
	movabsq	$.L.str315, %rdi
	movq	$122, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_36:                               # %do.body202.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_38
# BB#37:                                # %if.then205.i
	movabsq	$.L.str316, %rdi
	movq	$118, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_38:                               # %do.body209.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_40
# BB#39:                                # %if.then212.i
	movabsq	$.L.str317, %rdi
	movq	$119, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r13, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_40:                               # %do.body216.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_42
# BB#41:                                # %if.then219.i
	movabsq	$.L.str318, %rdi
	movq	$114, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	(%rsp), %rsi            # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_42:                               # %do.body223.i
	testq	$16384, %rax            # imm = 0x4000
	movq	$-384, %rbx             # imm = 0xFFFFFFFFFFFFFE80
	je	.LBB6_44
# BB#43:                                # %if.then226.i
	movabsq	$.L.str319, %rdi
	movq	$105, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	builtin_function
.LBB6_44:                               # %do.body233.i
	movq	160(%rsp), %r14         # 8-byte Reload
	.align	16, 0x90
.LBB6_45:                               # %do.body233.i
                                        # =>This Inner Loop Header: Depth=1
	movl	bdesc_comi+384(%rbx), %eax
	movl	target_flags(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	je	.LBB6_47
# BB#46:                                # %if.then237.i
                                        #   in Loop: Header=BB6_45 Depth=1
	movq	bdesc_comi+392(%rbx), %rdi
	movl	bdesc_comi+400(%rbx), %edx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
.LBB6_47:                               # %for.inc243.i
                                        #   in Loop: Header=BB6_45 Depth=1
	addq	$32, %rbx
	jne	.LBB6_45
# BB#48:                                # %do.body247.i
	movl	target_flags(%rip), %eax
	testq	$16384, %rax            # imm = 0x4000
	movq	200(%rsp), %r14         # 8-byte Reload
	movq	144(%rsp), %rbx         # 8-byte Reload
	je	.LBB6_50
# BB#49:                                # %if.then250.i
	movabsq	$.L.str320, %rdi
	movq	$74, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_50:                               # %do.body254.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_52
# BB#51:                                # %if.then257.i
	movabsq	$.L.str321, %rdi
	movq	$75, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_52:                               # %do.body261.i
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB6_54
# BB#53:                                # %if.then264.i
	movabsq	$.L.str322, %rdi
	movq	$76, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_54:                               # %do.body268.i
	testq	$65536, %rax            # imm = 0x10000
	movq	136(%rsp), %rbx         # 8-byte Reload
	je	.LBB6_56
# BB#55:                                # %if.then271.i
	movabsq	$.L.str323, %rdi
	movq	$46, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_56:                               # %do.body275.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_58
# BB#57:                                # %if.then278.i
	movabsq	$.L.str324, %rdi
	movq	$47, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_58:                               # %do.body282.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_60
# BB#59:                                # %if.then285.i
	movabsq	$.L.str325, %rdi
	movq	$48, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_60:                               # %do.body289.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_62
# BB#61:                                # %if.then292.i
	movabsq	$.L.str326, %rdi
	movq	$49, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_62:                               # %do.body296.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_64
# BB#63:                                # %if.then299.i
	movabsq	$.L.str327, %rdi
	movq	$50, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_64:                               # %do.body303.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_66
# BB#65:                                # %if.then306.i
	movabsq	$.L.str328, %rdi
	movq	$51, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_66:                               # %do.body310.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_68
# BB#67:                                # %if.then313.i
	movabsq	$.L.str329, %rdi
	movq	$146, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	288(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_68:                               # %do.body317.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_70
# BB#69:                                # %if.then320.i
	movabsq	$.L.str330, %rdi
	movq	$147, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	288(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_70:                               # %do.body324.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_72
# BB#71:                                # %if.then327.i
	movabsq	$.L.str331, %rdi
	movq	$148, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	288(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_72:                               # %do.body331.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_74
# BB#73:                                # %if.then334.i
	movabsq	$.L.str332, %rdi
	movq	$149, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	288(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_74:                               # %do.body338.i
	testq	$4259840, %rax          # imm = 0x410000
	je	.LBB6_76
# BB#75:                                # %if.then341.i
	movabsq	$.L.str333, %rdi
	movq	$103, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	64(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_76:                               # %do.body345.i
	testq	$4259840, %rax          # imm = 0x410000
	je	.LBB6_78
# BB#77:                                # %if.then348.i
	movabsq	$.L.str334, %rdi
	movq	$104, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	56(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_78:                               # %do.body352.i
	testq	$4259840, %rax          # imm = 0x410000
	movq	152(%rsp), %rbx         # 8-byte Reload
	je	.LBB6_80
# BB#79:                                # %if.then355.i
	movabsq	$.L.str335, %rdi
	movq	$69, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_80:                               # %do.body359.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_82
# BB#81:                                # %if.then362.i
	movabsq	$.L.str336, %rdi
	movq	$56, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_82:                               # %do.body366.i
	testq	$65536, %rax            # imm = 0x10000
	movq	184(%rsp), %r15         # 8-byte Reload
	je	.LBB6_84
# BB#83:                                # %if.then369.i
	movabsq	$.L.str337, %rdi
	movq	$57, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_84:                               # %do.body373.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_86
# BB#85:                                # %if.then376.i
	movabsq	$.L.str338, %rdi
	movq	$60, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_86:                               # %do.body380.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_88
# BB#87:                                # %if.then383.i
	movabsq	$.L.str339, %rdi
	movq	$58, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r15, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_88:                               # %do.body387.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_90
# BB#89:                                # %if.then390.i
	movabsq	$.L.str340, %rdi
	movq	$59, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r15, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_90:                               # %do.body394.i
	testq	$65536, %rax            # imm = 0x10000
	movq	168(%rsp), %r13         # 8-byte Reload
	je	.LBB6_92
# BB#91:                                # %if.then397.i
	movabsq	$.L.str341, %rdi
	movq	$61, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r15, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_92:                               # %do.body401.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_94
# BB#93:                                # %if.then404.i
	movabsq	$.L.str342, %rdi
	movq	$65, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r13, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_94:                               # %do.body408.i
	testq	$65536, %rax            # imm = 0x10000
	movq	176(%rsp), %rbx         # 8-byte Reload
	je	.LBB6_96
# BB#95:                                # %if.then411.i
	movabsq	$.L.str343, %rdi
	movq	$66, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r13, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_96:                               # %do.body415.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_98
# BB#97:                                # %if.then418.i
	movabsq	$.L.str344, %rdi
	movq	$67, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_98:                               # %do.body422.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_100
# BB#99:                                # %if.then425.i
	movabsq	$.L.str345, %rdi
	movq	$68, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_100:                              # %do.body429.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_102
# BB#101:                               # %if.then432.i
	movabsq	$.L.str346, %rdi
	movq	$70, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_102:                              # %do.body436.i
	testq	$4259840, %rax          # imm = 0x410000
	je	.LBB6_104
# BB#103:                               # %if.then439.i
	movabsq	$.L.str347, %rdi
	movq	$71, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	80(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_104:                              # %do.body443.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_106
# BB#105:                               # %if.then446.i
	movabsq	$.L.str348, %rdi
	movq	$72, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r15, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_106:                              # %do.body450.i
	testq	$4259840, %rax          # imm = 0x410000
	je	.LBB6_108
# BB#107:                               # %if.then453.i
	movabsq	$.L.str349, %rdi
	movq	$73, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	48(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_108:                              # %do.body457.i
	testq	$4259840, %rax          # imm = 0x410000
	je	.LBB6_110
# BB#109:                               # %if.then460.i
	movabsq	$.L.str350, %rdi
	movq	$153, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	256(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_110:                              # %do.body464.i
	testq	$4259840, %rax          # imm = 0x410000
	movq	192(%rsp), %rbx         # 8-byte Reload
	je	.LBB6_112
# BB#111:                               # %if.then467.i
	movabsq	$.L.str351, %rdi
	movq	$113, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	72(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_112:                              # %do.body471.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_114
# BB#113:                               # %if.then474.i
	movabsq	$.L.str352, %rdi
	movq	$138, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_114:                              # %do.body478.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_116
# BB#115:                               # %if.then481.i
	movabsq	$.L.str353, %rdi
	movq	$139, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_116:                              # %do.body485.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_118
# BB#117:                               # %if.then488.i
	movabsq	$.L.str354, %rdi
	movq	$140, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_118:                              # %do.body492.i
	testq	$65536, %rax            # imm = 0x10000
	movq	216(%rsp), %r15         # 8-byte Reload
	je	.LBB6_120
# BB#119:                               # %if.then495.i
	movabsq	$.L.str355, %rdi
	movq	$141, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_120:                              # %do.body499.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_122
# BB#121:                               # %if.then502.i
	movabsq	$.L.str356, %rdi
	movq	$142, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_122:                              # %do.body506.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_124
# BB#123:                               # %if.then509.i
	movabsq	$.L.str357, %rdi
	movq	$143, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_124:                              # %do.body513.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_126
# BB#125:                               # %if.then516.i
	movabsq	$.L.str358, %rdi
	movq	$137, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	88(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_126:                              # %do.body520.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_128
# BB#127:                               # %if.then523.i
	movabsq	$.L.str359, %rdi
	movq	$154, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	256(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_128:                              # %do.body527.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_130
# BB#129:                               # %if.then530.i
	movabsq	$.L.str360, %rdi
	movq	$155, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	264(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_130:                              # %do.body534.i
	testq	$1048576, %rax          # imm = 0x100000
	movq	208(%rsp), %rbx         # 8-byte Reload
	je	.LBB6_132
# BB#131:                               # %if.then537.i
	movabsq	$.L.str361, %rdi
	movq	$156, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r15, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_132:                              # %do.body541.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_134
# BB#133:                               # %if.then544.i
	movabsq	$.L.str362, %rdi
	movq	$157, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_134:                              # %do.body548.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_136
# BB#135:                               # %if.then551.i
	movabsq	$.L.str363, %rdi
	movq	$158, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_136:                              # %do.body555.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_138
# BB#137:                               # %if.then558.i
	movabsq	$.L.str364, %rdi
	movq	$159, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r12, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_138:                              # %do.body562.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_140
# BB#139:                               # %if.then565.i
	movabsq	$.L.str365, %rdi
	movq	$160, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r12, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_140:                              # %do.body569.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_142
# BB#141:                               # %if.then572.i
	movabsq	$.L.str366, %rdi
	movq	$161, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r12, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_142:                              # %do.body576.i
	testq	$1048576, %rax          # imm = 0x100000
	movq	224(%rsp), %r14         # 8-byte Reload
	je	.LBB6_144
# BB#143:                               # %if.then579.i
	movabsq	$.L.str367, %rdi
	movq	$162, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_144:                              # %do.body583.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_146
# BB#145:                               # %if.then586.i
	movabsq	$.L.str368, %rdi
	movq	$163, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_146:                              # %do.body590.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_148
# BB#147:                               # %if.then593.i
	movabsq	$.L.str369, %rdi
	movq	$164, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_148:                              # %do.body597.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_150
# BB#149:                               # %if.then600.i
	movabsq	$.L.str370, %rdi
	movq	$165, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_150:                              # %do.body604.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_152
# BB#151:                               # %if.then607.i
	movabsq	$.L.str371, %rdi
	movq	$166, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_152:                              # %do.body611.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_154
# BB#153:                               # %if.then614.i
	movabsq	$.L.str372, %rdi
	movq	$167, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_154:                              # %do.body618.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_156
# BB#155:                               # %if.then621.i
	movabsq	$.L.str373, %rdi
	movq	$169, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_156:                              # %do.body625.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_158
# BB#157:                               # %if.then628.i
	movabsq	$.L.str374, %rdi
	movq	$168, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_158:                              # %do.body632.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_160
# BB#159:                               # %if.then635.i
	movabsq	$.L.str375, %rdi
	movq	$170, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_160:                              # %do.body639.i
	testq	$1048576, %rax          # imm = 0x100000
	movq	232(%rsp), %r12         # 8-byte Reload
	je	.LBB6_162
# BB#161:                               # %if.then642.i
	movabsq	$.L.str376, %rdi
	movq	$171, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_162:                              # %do.body646.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_164
# BB#163:                               # %if.then649.i
	movabsq	$.L.str377, %rdi
	movq	$172, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r12, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_164:                              # %do.body653.i
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB6_166
# BB#165:                               # %if.then656.i
	movabsq	$.L.str378, %rdi
	movq	$173, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	272(%rsp), %rsi         # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_166:                              # %do.body660.i
	testq	$4194304, %rax          # imm = 0x400000
	je	.LBB6_168
# BB#167:                               # %if.then663.i
	movabsq	$.L.str379, %rdi
	movq	$174, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r15, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_168:                              # %do.body667.i
	testq	$4194304, %rax          # imm = 0x400000
	je	.LBB6_170
# BB#169:                               # %if.then670.i
	movabsq	$.L.str380, %rdi
	movq	$175, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_170:                              # %do.body674.i
	testq	$4194304, %rax          # imm = 0x400000
	je	.LBB6_172
# BB#171:                               # %if.then677.i
	movabsq	$.L.str381, %rdi
	movq	$176, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_172:                              # %do.body681.i
	testq	$4194304, %rax          # imm = 0x400000
	je	.LBB6_174
# BB#173:                               # %if.then684.i
	movabsq	$.L.str382, %rdi
	movq	$177, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r12, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_174:                              # %do.body688.i
	testq	$4194304, %rax          # imm = 0x400000
	je	.LBB6_176
# BB#175:                               # %if.then691.i
	movabsq	$.L.str383, %rdi
	movq	$179, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_176:                              # %do.body695.i
	testq	$4194304, %rax          # imm = 0x400000
	je	.LBB6_178
# BB#177:                               # %if.then698.i
	movabsq	$.L.str384, %rdi
	movq	$178, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	96(%rsp), %rsi          # 8-byte Reload
	callq	builtin_function
	movl	target_flags(%rip), %eax
.LBB6_178:                              # %do.body702.i
	testq	$65536, %rax            # imm = 0x10000
	je	.LBB6_179
# BB#180:                               # %if.then705.i
	movabsq	$.L.str385, %rdi
	movq	$180, %rdx
	movq	$2, %rcx
	xorq	%r8, %r8
	movq	104(%rsp), %rsi         # 8-byte Reload
	addq	$304, %rsp              # imm = 0x130
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	builtin_function  # TAILCALL
.LBB6_179:                              # %if.end
	addq	$304, %rsp              # imm = 0x130
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB6_9:                                # %sw.default.i
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_init_mmx_sse_builtins, %rcx
	movq	$11330, %rsi            # imm = 0x2C42
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp83:
	.size	ix86_init_builtins, .Ltmp83-ix86_init_builtins
	.cfi_endproc

	.globl	ix86_expand_builtin
	.align	16, 0x90
	.type	ix86_expand_builtin,@function
ix86_expand_builtin:                    # @ix86_expand_builtin
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp90:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp91:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp92:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp93:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp94:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp95:
	.cfi_def_cfa_offset 96
.Ltmp96:
	.cfi_offset %rbx, -48
.Ltmp97:
	.cfi_offset %r12, -40
.Ltmp98:
	.cfi_offset %r13, -32
.Ltmp99:
	.cfi_offset %r14, -24
.Ltmp100:
	.cfi_offset %r15, -16
	movq	32(%rdi), %rax
	movq	32(%rax), %rax
	movq	%rsi, %r14
	movq	40(%rdi), %rsi
	movl	56(%rax), %ebx
	xorq	%rcx, %rcx
	movabsq	$bdesc_2arg+24, %r15
	leaq	-56(%rbx), %rax
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rax
	cmpq	$125, %rax
	ja	.LBB7_136
# BB#1:                                 # %entry
	jmpq	*.LJTI7_0(,%rax,8)
.LBB7_61:                               # %sw.bb270
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movq	(%rsi), %rax
	movq	32(%rsi), %rdi
	movq	32(%rax), %r14
	andq	%r13, %rbx
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r12
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	callq	expand_expr
	cmpq	$65, %rbx
	je	.LBB7_62
# BB#63:                                # %sw.bb270
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movabsq	$1, %rax
	jmp	.LBB7_64
	.align	16, 0x90
.LBB7_136:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%r15), %edx
	movq	%rbx, %rax
	andq	%r13, %rax
	cmpq	%rax, %rdx
	je	.LBB7_137
# BB#158:                               # %for.inc
                                        #   in Loop: Header=BB7_136 Depth=1
	incq	%rcx
	addq	$32, %r15
	cmpq	$103, %rcx
	jb	.LBB7_136
# BB#159:
	xorq	%rdx, %rdx
	movabsq	$bdesc_1arg+16, %rcx
	movabsq	$bdesc_comi+24, %r12
	.align	16, 0x90
.LBB7_160:                              # %for.body663
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rcx), %edi
	cmpq	%rax, %rdi
	je	.LBB7_161
# BB#162:                               # %for.inc670
                                        #   in Loop: Header=BB7_160 Depth=1
	incq	%rdx
	addq	$32, %rcx
	cmpq	$9, %rdx
	jb	.LBB7_160
# BB#163:
	xorq	%rcx, %rcx
	xorq	%rbx, %rbx
	.align	16, 0x90
.LBB7_164:                              # %for.body676
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%r12), %edx
	cmpq	%rax, %rdx
	je	.LBB7_165
# BB#181:                               # %for.inc682
                                        #   in Loop: Header=BB7_164 Depth=1
	incq	%rcx
	addq	$32, %r12
	cmpq	$12, %rcx
	jb	.LBB7_164
	jmp	.LBB7_182
.LBB7_137:                              # %if.then643
	movl	-20(%r15), %edi
	leaq	-727(%rdi), %rax
	andq	%r13, %rax
	cmpq	$3, %rax
	ja	.LBB7_157
# BB#138:                               # %if.then655
	movq	(%rsi), %rax
	movq	32(%rsi), %rdi
	movq	32(%rax), %rbx
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r12
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	callq	expand_expr
	movl	-20(%r15), %ecx
	leaq	(%rcx,%rcx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rcx
	movzbl	40(%rcx), %esi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movl	mode_class(,%rsi,4), %eax
	movzbl	16(%rcx), %edx
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movzbl	64(%rcx), %ebx
	addq	$-7, %rax
	andq	%r13, %rax
	cmpq	$1, %rax
	ja	.LBB7_139
# BB#140:                               # %if.then.i
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movq	%r12, %rdi
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	callq	safe_vector_operand
	movq	%rax, 32(%rsp)          # 8-byte Spill
	jmp	.LBB7_141
.LBB7_161:                              # %if.then666
	movl	-12(%rcx), %edi
	xorq	%rcx, %rcx
	jmp	.LBB7_54
.LBB7_139:
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movq	%r12, 32(%rsp)          # 8-byte Spill
	movq	%r14, 40(%rsp)          # 8-byte Spill
.LBB7_141:                              # %if.end.i
	movl	mode_class(,%rbx,4), %eax
	addq	$-7, %rax
	andq	%r13, %rax
	cmpq	$1, %rax
	movq	16(%rsp), %r12          # 8-byte Reload
	ja	.LBB7_143
# BB#142:                               # %if.then35.i
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	safe_vector_operand
	movq	%rax, %r12
.LBB7_143:                              # %if.end37.i
	movl	(%r15), %eax
	testq	%rax, %rax
	je	.LBB7_144
# BB#145:                               # %if.then38.i
	movq	%rbx, %rdi
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	callq	gen_reg_rtx
	movq	%rax, %r14
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	emit_move_insn
	movq	32(%rsp), %r12          # 8-byte Reload
	movq	%r14, 32(%rsp)          # 8-byte Spill
	jmp	.LBB7_146
.LBB7_165:                              # %if.then679
	movq	(%rsi), %rax
	movq	32(%rsi), %rdi
	movq	32(%rax), %rbx
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r14
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	callq	expand_expr
	movl	-20(%r12), %ecx
	leaq	(%rcx,%rcx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rcx
	movzbl	16(%rcx), %esi
	movl	mode_class(,%rsi,4), %edx
	movq	%rax, %r15
	movzbl	40(%rcx), %ebx
	addq	$-7, %rdx
	andq	%r13, %rdx
	cmpq	$1, %rdx
	ja	.LBB7_166
# BB#167:                               # %if.then.i1036
	movq	%r14, %rdi
	movq	%rsi, 32(%rsp)          # 8-byte Spill
	callq	safe_vector_operand
	movq	%rax, %r14
	jmp	.LBB7_168
.LBB7_144:
	movq	%rbx, 16(%rsp)          # 8-byte Spill
.LBB7_146:                              # %if.end41.i
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	8(%rsp), %r14           # 8-byte Reload
	testq	%rbx, %rbx
	je	.LBB7_149
# BB#147:                               # %lor.lhs.false43.i
	movzbl	2(%rbx), %eax
	cmpq	%r14, %rax
	jne	.LBB7_149
# BB#148:                               # %lor.lhs.false46.i
	movl	-20(%r15), %eax
	leaq	(%rax,%rax,4), %rax
	movq	insn_data+24(,%rax,8), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	*(%rax)
	testq	%r13, %rax
	jne	.LBB7_150
.LBB7_149:                              # %if.then54.i
	movq	%r14, %rdi
	callq	gen_reg_rtx
	movq	%rax, %rbx
.LBB7_150:                              # %if.end56.i
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movl	-20(%r15), %eax
	leaq	(%rax,%rax,4), %rax
	movq	insn_data+24(,%rax,8), %rax
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdi
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	callq	*24(%rax)
	testq	%r13, %rax
	jne	.LBB7_152
# BB#151:                               # %if.then65.i
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r14
.LBB7_152:                              # %if.end67.i
	movl	-20(%r15), %eax
	leaq	(%rax,%rax,4), %rax
	movq	insn_data+24(,%rax,8), %rax
	movq	%r12, %rdi
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	callq	*48(%rax)
	testq	%r13, %rax
	je	.LBB7_154
# BB#153:
	movq	%r12, %r13
	jmp	.LBB7_155
.LBB7_154:                              # %if.then76.i
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r13
.LBB7_155:                              # %if.end78.i
	movq	%r14, %r12
	movq	24(%rsp), %rsi          # 8-byte Reload
	movl	-4(%r15), %edi
	movq	%r12, %rdx
	movq	%r13, %rcx
	callq	gen_rtx_fmt_ee
	movslq	-20(%r15), %rdx
	movq	%rax, %rcx
	leaq	(%rdx,%rdx,4), %r8
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	callq	*insn_data+16(,%r8,8)
.LBB7_30:                               # %if.end159
	testq	%rax, %rax
	je	.LBB7_182
# BB#31:                                # %if.end166
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rbx
	jmp	.LBB7_182
.LBB7_166:
	movq	%rsi, 32(%rsp)          # 8-byte Spill
.LBB7_168:                              # %if.end.i1038
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movl	mode_class(,%rbx,4), %eax
	addq	$-7, %rax
	andq	%r13, %rax
	cmpq	$1, %rax
	ja	.LBB7_169
# BB#170:                               # %if.then27.i
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	callq	safe_vector_operand
	movq	%rax, %r15
	jmp	.LBB7_171
.LBB7_169:
	movq	%rbx, 24(%rsp)          # 8-byte Spill
.LBB7_171:                              # %if.end29.i
	movl	(%r12), %eax
	testq	%rax, %rax
	movq	%r15, %r14
	je	.LBB7_173
# BB#172:                               # %if.end29.i
	movq	40(%rsp), %r14          # 8-byte Reload
.LBB7_173:                              # %if.end29.i
	je	.LBB7_175
# BB#174:                               # %if.end29.i
	movq	%r15, 40(%rsp)          # 8-byte Spill
.LBB7_175:                              # %if.end29.i
	movq	$4, %rdi
	callq	gen_reg_rtx
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	emit_move_insn
	movq	$2, %rdi
	xorq	%rdx, %rdx
	movq	%rbx, %rsi
	callq	gen_rtx_SUBREG
	movl	-20(%r12), %ecx
	leaq	(%rcx,%rcx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rcx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	32(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rsi
	callq	*(%rcx)
	testq	%r13, %rax
	jne	.LBB7_177
# BB#176:                               # %if.then42.i
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	copy_to_mode_reg
	movq	%rax, 40(%rsp)          # 8-byte Spill
.LBB7_177:                              # %if.end44.i
	movl	-20(%r12), %eax
	leaq	(%rax,%rax,4), %rax
	movq	insn_data+24(,%rax,8), %rax
	movq	%r14, %rdi
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	callq	*24(%rax)
	testq	%r13, %rax
	jne	.LBB7_179
# BB#178:                               # %if.then53.i
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r14
.LBB7_179:                              # %if.end55.i
	movl	-4(%r12), %r13d
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	40(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	gen_rtx_fmt_ee
	movslq	-20(%r12), %rdx
	movq	%rax, %rcx
	leaq	(%rdx,%rdx,4), %r8
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rcx, %rdx
	callq	*insn_data+16(,%r8,8)
	testq	%rax, %rax
	je	.LBB7_182
# BB#180:                               # %if.end63.i
	movq	%rax, %rdi
	callq	emit_insn
	movq	$64, %rdi
	xorq	%rsi, %rsi
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %r14
	movq	$52, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	const_int_rtx+512(%rip), %rcx
	movq	$2, %rsi
	movq	%r13, %rdi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	8(%rbx), %rbx
	jmp	.LBB7_182
.LBB7_72:                               # %sw.bb342
	movq	(%rsi), %rax
	movq	32(%rsi), %rdi
	movq	32(%rax), %r14
	andq	%r13, %rbx
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r15
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	callq	expand_expr
	movq	%rax, 40(%rsp)          # 8-byte Spill
	cmpq	$67, %rbx
	je	.LBB7_73
# BB#74:                                # %sw.bb342
	movabsq	$1, %rax
	jmp	.LBB7_75
.LBB7_52:                               # %sw.bb258
	movq	$674, %rdi              # imm = 0x2A2
	jmp	.LBB7_53
.LBB7_55:                               # %sw.bb260
	movq	$675, %rdi              # imm = 0x2A3
	jmp	.LBB7_53
.LBB7_56:                               # %sw.bb262
	movq	$674, %rdi              # imm = 0x2A2
	jmp	.LBB7_57
.LBB7_58:                               # %sw.bb264
	movq	$675, %rdi              # imm = 0x2A3
	jmp	.LBB7_57
.LBB7_59:                               # %sw.bb266
	movq	$686, %rdi              # imm = 0x2AE
.LBB7_53:                               # %sw.bb258
	movq	$1, %rcx
	jmp	.LBB7_54
.LBB7_60:                               # %sw.bb268
	movq	$688, %rdi              # imm = 0x2B0
	jmp	.LBB7_57
.LBB7_32:                               # %sw.bb168
	movq	(%rsi), %rax
	movl	target_flags(%rip), %ebx
	movq	(%rax), %rdx
	movq	$25, %rcx
	movq	32(%rsi), %r14
	movq	32(%rax), %r15
	movq	32(%rdx), %rdi
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$678, %rbx              # imm = 0x2A6
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r12
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	callq	expand_expr
	movq	%rax, 40(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r15, %rdi
	callq	expand_expr
	leaq	(%rbx,%rbx,4), %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	insn_data+24(,%rcx,8), %r15
	movzbl	16(%r15), %r14d
	movzbl	40(%r15), %ebx
	movzbl	64(%r15), %ecx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	*(%r15)
	testq	%r13, %rax
	je	.LBB7_34
# BB#33:
	movq	%r12, 8(%rsp)           # 8-byte Spill
	jmp	.LBB7_35
.LBB7_79:                               # %sw.bb390
	movq	$680, %rdi              # imm = 0x2A8
	jmp	.LBB7_57
.LBB7_80:                               # %sw.bb392
	movq	$681, %rdi              # imm = 0x2A9
.LBB7_57:                               # %return
	callq	ix86_expand_store_builtin
	xorq	%rbx, %rbx
	jmp	.LBB7_182
.LBB7_5:                                # %sw.bb12
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movq	(%rsi), %rax
	movq	32(%rsi), %rdi
	movq	32(%rax), %rbx
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r14
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	callq	expand_expr
	movq	insn_data+30904(%rip), %r15
	movzbl	16(%r15), %ecx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movzbl	40(%r15), %ebx
	movzbl	64(%r15), %r12d
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	*24(%r15)
	testq	%r13, %rax
	jne	.LBB7_7
# BB#6:                                 # %if.then
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r14
.LBB7_7:                                # %if.end
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	%r12, %rsi
	callq	*48(%r15)
	testq	%r13, %rax
	movq	24(%rsp), %rbx          # 8-byte Reload
	je	.LBB7_8
# BB#10:                                # %if.end49
	movq	40(%rsp), %r12          # 8-byte Reload
	testq	%r12, %r12
	je	.LBB7_13
# BB#11:                                # %lor.lhs.false
	movzbl	2(%r12), %eax
	cmpq	%rbx, %rax
	jne	.LBB7_13
# BB#12:                                # %lor.lhs.false52
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	*(%r15)
	testq	%r13, %rax
	jne	.LBB7_14
.LBB7_13:                               # %if.then60
	movq	%rbx, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r12
.LBB7_14:                               # %if.end62
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	32(%rsp), %rdx          # 8-byte Reload
	callq	*insn_data+30896(%rip)
	jmp	.LBB7_15
.LBB7_17:                               # %sw.bb70
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movq	(%rsi), %rax
	movq	(%rax), %rcx
	movq	32(%rsi), %rdi
	movq	32(%rax), %rbx
	movq	32(%rcx), %r15
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r14
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	callq	expand_expr
	movq	%rax, 32(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r15, %rdi
	callq	expand_expr
	movq	insn_data+30864(%rip), %r12
	movzbl	16(%r12), %ebx
	movzbl	40(%r12), %r15d
	movzbl	64(%r12), %ecx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movzbl	88(%r12), %ecx
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	*24(%r12)
	testq	%r13, %rax
	je	.LBB7_19
# BB#18:
	movq	%rbx, (%rsp)            # 8-byte Spill
	movq	%r14, %r15
	jmp	.LBB7_20
.LBB7_99:                               # %sw.bb506
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movq	(%rsi), %rax
	movq	32(%rsi), %rdi
	movq	32(%rax), %rbx
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r14
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	callq	expand_expr
	movq	insn_data+30944(%rip), %r15
	movzbl	16(%r15), %ecx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movzbl	40(%r15), %ebx
	movzbl	64(%r15), %r12d
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	*24(%r15)
	testq	%r13, %rax
	jne	.LBB7_101
# BB#100:                               # %if.then543
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r14
.LBB7_101:                              # %if.end545
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	%r12, %rsi
	callq	*48(%r15)
	testq	%r13, %rax
	je	.LBB7_102
# BB#103:                               # %if.end554
	movq	40(%rsp), %r12          # 8-byte Reload
	testq	%r12, %r12
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB7_106
# BB#104:                               # %lor.lhs.false556
	movzbl	2(%r12), %eax
	cmpq	%rcx, %rax
	jne	.LBB7_106
# BB#105:                               # %lor.lhs.false561
	movq	%r12, %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rbx
	callq	*(%r15)
	movq	%rbx, %rcx
	testq	%r13, %rax
	jne	.LBB7_107
.LBB7_106:                              # %if.then569
	movq	%rcx, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r12
.LBB7_107:                              # %if.end571
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	32(%rsp), %rdx          # 8-byte Reload
	callq	*insn_data+30936(%rip)
	jmp	.LBB7_15
.LBB7_87:                               # %sw.bb407
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movq	(%rsi), %rax
	movq	(%rax), %rcx
	movq	32(%rsi), %rdi
	movq	32(%rax), %rbx
	movq	32(%rcx), %r15
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	callq	expand_expr
	movq	%rax, %r14
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	callq	expand_expr
	movq	%rax, 32(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r15, %rdi
	callq	expand_expr
	movq	insn_data+27584(%rip), %r12
	movzbl	16(%r12), %ebx
	movzbl	40(%r12), %r15d
	movzbl	64(%r12), %ecx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movzbl	88(%r12), %ecx
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	*24(%r12)
	testq	%r13, %rax
	je	.LBB7_89
# BB#88:
	movq	%rbx, (%rsp)            # 8-byte Spill
	movq	%r14, %r15
	jmp	.LBB7_90
.LBB7_46:                               # %sw.bb248
	movq	$699, %rdi              # imm = 0x2BB
	jmp	.LBB7_44
.LBB7_45:                               # %sw.bb246
	movq	$701, %rdi              # imm = 0x2BD
	jmp	.LBB7_44
.LBB7_43:                               # %sw.bb244
	movq	$703, %rdi              # imm = 0x2BF
.LBB7_44:                               # %sw.bb244
	movq	%r14, %rdx
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	ix86_expand_unop1_builtin  # TAILCALL
.LBB7_47:                               # %sw.bb250
	movq	$708, %rdi              # imm = 0x2C4
	jmp	.LBB7_48
.LBB7_49:                               # %sw.bb252
	movq	$712, %rdi              # imm = 0x2C8
	jmp	.LBB7_48
.LBB7_50:                               # %sw.bb254
	movq	$718, %rdi              # imm = 0x2CE
	jmp	.LBB7_48
.LBB7_51:                               # %sw.bb256
	movq	$724, %rdi              # imm = 0x2D4
.LBB7_48:                               # %sw.bb250
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	ix86_expand_timode_binop_builtin  # TAILCALL
.LBB7_2:                                # %sw.bb
	callq	gen_emms
	jmp	.LBB7_3
.LBB7_81:                               # %sw.bb394
	movq	32(%rsi), %rdi
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	xorq	%rbx, %rbx
	callq	expand_expr
	movq	cfun(%rip), %rcx
	movq	392(%rcx), %rcx
	movq	96(%rcx), %r15
	movq	%rax, %r14
	testq	%r15, %r15
	jne	.LBB7_83
# BB#82:                                # %if.then5.i
	movzbl	mode_size+4(%rip), %esi
	movq	$4, %rdi
	xorq	%rdx, %rdx
	callq	assign_stack_local
	movq	cfun(%rip), %rcx
	movq	392(%rcx), %rcx
	movq	%rax, 96(%rcx)
	movq	cfun(%rip), %rax
	movq	392(%rax), %rax
	movq	96(%rax), %r15
.LBB7_83:                               # %assign_386_stack_local.exit
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	emit_move_insn
	movq	%r15, %rdi
	callq	gen_ldmxcsr
	jmp	.LBB7_42
.LBB7_84:                               # %sw.bb402
	movq	cfun(%rip), %rax
	movq	392(%rax), %rax
	movq	96(%rax), %rbx
	testq	%rbx, %rbx
	jne	.LBB7_86
# BB#85:                                # %if.then5.i1017
	movzbl	mode_size+4(%rip), %esi
	movq	$4, %rdi
	xorq	%rdx, %rdx
	callq	assign_stack_local
	movq	cfun(%rip), %rcx
	movq	392(%rcx), %rcx
	movq	%rax, 96(%rcx)
	movq	cfun(%rip), %rax
	movq	392(%rax), %rax
	movq	96(%rax), %rbx
.LBB7_86:                               # %assign_386_stack_local.exit1018
	movq	%rbx, %rdi
	callq	gen_stmxcsr
	movq	%rax, %rdi
	callq	emit_insn
	movq	$4, %rdi
	movq	%rbx, %rsi
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	copy_to_mode_reg  # TAILCALL
.LBB7_4:                                # %sw.bb9
	callq	gen_sfence
	jmp	.LBB7_3
.LBB7_108:                              # %sw.bb580
	callq	gen_femms
.LBB7_3:                                # %return
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rbx, %rbx
	jmp	.LBB7_182
.LBB7_156:                              # %sw.bb583
	movq	$823, %rdi              # imm = 0x337
	jmp	.LBB7_157
.LBB7_109:                              # %sw.bb585
	movq	$816, %rdi              # imm = 0x330
	xorq	%rcx, %rcx
	jmp	.LBB7_54
.LBB7_111:                              # %sw.bb587
	movq	$818, %rdi              # imm = 0x332
	jmp	.LBB7_157
.LBB7_112:                              # %sw.bb589
	movq	$806, %rdi              # imm = 0x326
	jmp	.LBB7_157
.LBB7_113:                              # %sw.bb591
	movq	$811, %rdi              # imm = 0x32B
	jmp	.LBB7_157
.LBB7_114:                              # %sw.bb593
	movq	$810, %rdi              # imm = 0x32A
	jmp	.LBB7_157
.LBB7_115:                              # %sw.bb595
	movq	$809, %rdi              # imm = 0x329
	jmp	.LBB7_157
.LBB7_116:                              # %sw.bb597
	movq	$812, %rdi              # imm = 0x32C
	jmp	.LBB7_157
.LBB7_117:                              # %sw.bb599
	movq	$813, %rdi              # imm = 0x32D
	jmp	.LBB7_157
.LBB7_118:                              # %sw.bb601
	movq	$814, %rdi              # imm = 0x32E
	jmp	.LBB7_157
.LBB7_119:                              # %sw.bb603
	movq	$824, %rdi              # imm = 0x338
	xorq	%rcx, %rcx
	jmp	.LBB7_54
.LBB7_120:                              # %sw.bb605
	movq	$825, %rdi              # imm = 0x339
	jmp	.LBB7_157
.LBB7_121:                              # %sw.bb607
	movq	$826, %rdi              # imm = 0x33A
	jmp	.LBB7_157
.LBB7_122:                              # %sw.bb609
	movq	$828, %rdi              # imm = 0x33C
	jmp	.LBB7_157
.LBB7_123:                              # %sw.bb611
	movq	$827, %rdi              # imm = 0x33B
	xorq	%rcx, %rcx
	jmp	.LBB7_54
.LBB7_124:                              # %sw.bb613
	movq	$807, %rdi              # imm = 0x327
	jmp	.LBB7_157
.LBB7_125:                              # %sw.bb615
	movq	$808, %rdi              # imm = 0x328
	jmp	.LBB7_157
.LBB7_126:                              # %sw.bb617
	movq	$822, %rdi              # imm = 0x336
	xorq	%rcx, %rcx
	jmp	.LBB7_54
.LBB7_127:                              # %sw.bb619
	movq	$829, %rdi              # imm = 0x33D
	jmp	.LBB7_157
.LBB7_128:                              # %sw.bb621
	movq	$817, %rdi              # imm = 0x331
	xorq	%rcx, %rcx
	jmp	.LBB7_54
.LBB7_129:                              # %sw.bb623
	movq	$819, %rdi              # imm = 0x333
	jmp	.LBB7_157
.LBB7_130:                              # %sw.bb625
	movq	$820, %rdi              # imm = 0x334
.LBB7_157:                              # %if.end657
	movq	%r14, %rdx
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	ix86_expand_binop_builtin  # TAILCALL
.LBB7_131:                              # %sw.bb627
	movq	$821, %rdi              # imm = 0x335
	xorq	%rcx, %rcx
	jmp	.LBB7_54
.LBB7_132:                              # %sw.bb629
	movq	$830, %rdi              # imm = 0x33E
	xorq	%rcx, %rcx
	jmp	.LBB7_54
.LBB7_133:                              # %sw.bb631
	movq	$831, %rdi              # imm = 0x33F
	xorq	%rcx, %rcx
.LBB7_54:                               # %sw.bb258
	movq	%r14, %rdx
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	ix86_expand_unop_builtin  # TAILCALL
.LBB7_134:                              # %sw.bb633
	movq	$46, %rdi
	callq	gen_reg_rtx
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	gen_sse_clrv4sf
	jmp	.LBB7_42
.LBB7_135:                              # %sw.bb637
	movq	$5, %rdi
	callq	gen_reg_rtx
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	gen_mmx_clrdi
	jmp	.LBB7_42
.LBB7_62:
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movabsq	$0, %rax
.LBB7_64:                               # %sw.bb270
	orq	$684, %rax              # imm = 0x2AC
	leaq	(%rax,%rax,4), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	insn_data+24(,%rax,8), %r15
	movzbl	16(%r15), %eax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movzbl	40(%r15), %r14d
	movzbl	64(%r15), %eax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%r12, %rbx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	*24(%r15)
	testq	%r13, %rax
	je	.LBB7_66
# BB#65:
	movq	%rbx, (%rsp)            # 8-byte Spill
	jmp	.LBB7_67
.LBB7_73:
	movabsq	$0, %rax
.LBB7_75:                               # %sw.bb342
	orq	$684, %rax              # imm = 0x2AC
	leaq	(%rax,%rax,4), %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	insn_data+24(,%rax,8), %r14
	movl	target_flags(%rip), %edi
	movzbl	40(%r14), %ebx
	movzbl	64(%r14), %r12d
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%r15, %rsi
	callq	copy_to_mode_reg
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %r15
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	*48(%r14)
	testq	%r13, %rax
	je	.LBB7_77
# BB#76:
	movq	%rbx, %rdx
	jmp	.LBB7_78
.LBB7_66:                               # %if.then309
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	copy_to_mode_reg
	movq	%rax, (%rsp)            # 8-byte Spill
.LBB7_67:                               # %if.end311
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	copy_to_mode_reg
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %r14
	movq	40(%rsp), %r12          # 8-byte Reload
	testq	%r12, %r12
	movq	32(%rsp), %rbx          # 8-byte Reload
	je	.LBB7_70
# BB#68:                                # %lor.lhs.false318
	movzbl	2(%r12), %eax
	cmpq	%rbx, %rax
	jne	.LBB7_70
# BB#69:                                # %lor.lhs.false323
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	*(%r15)
	testq	%r13, %rax
	jne	.LBB7_71
.LBB7_70:                               # %if.then331
	movq	%rbx, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r12
.LBB7_71:                               # %if.end333
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r12, %rdi
	movq	(%rsp), %rsi            # 8-byte Reload
	movq	%r14, %rdx
	movq	8(%rsp), %rcx           # 8-byte Reload
	callq	*insn_data+16(,%rcx,8)
.LBB7_15:                               # %if.end62
	testq	%rax, %rax
	je	.LBB7_182
# BB#16:                                # %if.end68
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r12, %rbx
	jmp	.LBB7_182
.LBB7_77:                               # %if.then379
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %rdx
.LBB7_78:                               # %if.end381
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r15, %rdi
	movq	%r15, %rsi
	movq	32(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB7_41
.LBB7_34:                               # %if.then213
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	copy_to_mode_reg
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB7_35:                               # %if.end215
	movq	40(%rsp), %r12          # 8-byte Reload
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	*24(%r15)
	testq	%r13, %rax
	jne	.LBB7_37
# BB#36:                                # %if.then223
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r12
.LBB7_37:                               # %if.end225
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%rax, %r14
	movq	%r14, %rsi
	callq	*48(%r15)
	testq	%r13, %rax
	je	.LBB7_39
# BB#38:
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rbx, %rdx
	jmp	.LBB7_40
.LBB7_8:                                # %if.then47
	movabsq	$.L.str197, %rdi
	jmp	.LBB7_9
.LBB7_19:                               # %if.then121
	movq	%rbx, (%rsp)            # 8-byte Spill
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r15
.LBB7_20:                               # %if.end123
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	16(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rsi
	callq	*48(%r12)
	testq	%r13, %rax
	jne	.LBB7_22
# BB#21:                                # %if.then131
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	copy_to_mode_reg
	movq	%rax, 32(%rsp)          # 8-byte Spill
.LBB7_22:                               # %if.end133
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	*72(%r12)
	testq	%r13, %rax
	movq	(%rsp), %rbx            # 8-byte Reload
	je	.LBB7_23
# BB#25:                                # %if.end142
	testq	%r14, %r14
	je	.LBB7_28
# BB#26:                                # %lor.lhs.false144
	movzbl	2(%r14), %eax
	cmpq	%rbx, %rax
	jne	.LBB7_28
# BB#27:                                # %lor.lhs.false149
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	*(%r12)
	testq	%r13, %rax
	jne	.LBB7_29
.LBB7_28:                               # %if.then157
	movq	%rbx, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
.LBB7_29:                               # %if.end159
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	*insn_data+30856(%rip)
	jmp	.LBB7_30
.LBB7_102:                              # %if.then553
	movabsq	$.L.str198, %rdi
	jmp	.LBB7_24
.LBB7_89:                               # %if.then458
	movq	%rbx, (%rsp)            # 8-byte Spill
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r15
.LBB7_90:                               # %if.end460
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	16(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rsi
	callq	*48(%r12)
	testq	%r13, %rax
	jne	.LBB7_92
# BB#91:                                # %if.then468
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	copy_to_mode_reg
	movq	%rax, 32(%rsp)          # 8-byte Spill
.LBB7_92:                               # %if.end470
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	(%rsp), %rbx            # 8-byte Reload
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	*72(%r12)
	testq	%r13, %rax
	je	.LBB7_93
# BB#94:                                # %if.end480
	testq	%r14, %r14
	je	.LBB7_97
# BB#95:                                # %lor.lhs.false482
	movzbl	2(%r14), %eax
	cmpq	%rbx, %rax
	jne	.LBB7_97
# BB#96:                                # %lor.lhs.false487
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	*(%r12)
	testq	%r13, %rax
	jne	.LBB7_98
.LBB7_97:                               # %if.then495
	movq	%rbx, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
.LBB7_98:                               # %if.end497
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	*insn_data+27576(%rip)
	jmp	.LBB7_30
.LBB7_39:                               # %if.then233
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %rdx
	movq	8(%rsp), %rdi           # 8-byte Reload
.LBB7_40:                               # %if.end235
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r12, %rsi
	movq	16(%rsp), %rcx          # 8-byte Reload
.LBB7_41:                               # %if.end235
	callq	*insn_data+16(,%rcx,8)
	testq	%rax, %rax
	je	.LBB7_182
.LBB7_42:                               # %if.end242
	movq	%rax, %rdi
	callq	emit_insn
.LBB7_182:                              # %return
	movq	%rbx, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB7_23:                               # %if.then141
	movabsq	$.L.str197, %rdi
.LBB7_24:                               # %return
	xorq	%rax, %rax
	callq	error
	movq	const_int_rtx+512(%rip), %rbx
	jmp	.LBB7_182
.LBB7_93:                               # %if.then478
	movabsq	$.L.str198, %rdi
.LBB7_9:                                # %if.then47
	xorq	%rax, %rax
	callq	error
	movq	%rbx, %rdi
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_reg_rtx  # TAILCALL
.Ltmp101:
	.size	ix86_expand_builtin, .Ltmp101-ix86_expand_builtin
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI7_0:
	.quad	.LBB7_52
	.quad	.LBB7_55
	.quad	.LBB7_56
	.quad	.LBB7_58
	.quad	.LBB7_59
	.quad	.LBB7_60
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_61
	.quad	.LBB7_61
	.quad	.LBB7_72
	.quad	.LBB7_72
	.quad	.LBB7_32
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_79
	.quad	.LBB7_80
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_5
	.quad	.LBB7_17
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_99
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_87
	.quad	.LBB7_136
	.quad	.LBB7_46
	.quad	.LBB7_136
	.quad	.LBB7_45
	.quad	.LBB7_136
	.quad	.LBB7_43
	.quad	.LBB7_136
	.quad	.LBB7_136
	.quad	.LBB7_47
	.quad	.LBB7_49
	.quad	.LBB7_50
	.quad	.LBB7_51
	.quad	.LBB7_2
	.quad	.LBB7_81
	.quad	.LBB7_84
	.quad	.LBB7_4
	.quad	.LBB7_108
	.quad	.LBB7_156
	.quad	.LBB7_109
	.quad	.LBB7_111
	.quad	.LBB7_112
	.quad	.LBB7_113
	.quad	.LBB7_114
	.quad	.LBB7_115
	.quad	.LBB7_116
	.quad	.LBB7_117
	.quad	.LBB7_118
	.quad	.LBB7_119
	.quad	.LBB7_120
	.quad	.LBB7_121
	.quad	.LBB7_122
	.quad	.LBB7_123
	.quad	.LBB7_124
	.quad	.LBB7_125
	.quad	.LBB7_126
	.quad	.LBB7_127
	.quad	.LBB7_128
	.quad	.LBB7_129
	.quad	.LBB7_130
	.quad	.LBB7_131
	.quad	.LBB7_132
	.quad	.LBB7_133
	.quad	.LBB7_134
	.quad	.LBB7_135

	.text
	.globl	override_options
	.align	16, 0x90
	.type	override_options,@function
override_options:                       # @override_options
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp107:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp108:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp109:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp110:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp111:
	.cfi_def_cfa_offset 48
.Ltmp112:
	.cfi_offset %rbx, -40
.Ltmp113:
	.cfi_offset %r12, -32
.Ltmp114:
	.cfi_offset %r14, -24
.Ltmp115:
	.cfi_offset %r15, -16
	movq	ix86_cpu_string(%rip), %rcx
	movq	ix86_arch_string(%rip), %rax
	testq	%rcx, %rcx
	jne	.LBB8_3
# BB#1:                                 # %entry
	testq	%rax, %rax
	je	.LBB8_3
# BB#2:                                 # %if.then
	movq	%rax, ix86_cpu_string(%rip)
	movq	%rax, %rcx
.LBB8_3:                                # %if.end
	testq	%rcx, %rcx
	jne	.LBB8_5
# BB#4:                                 # %if.then3
	movq	$.L.str17, ix86_cpu_string(%rip)
.LBB8_5:                                # %if.end4
	testq	%rax, %rax
	jne	.LBB8_10
# BB#6:                                 # %if.then6
	movl	target_flags(%rip), %eax
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	jne	.LBB8_7
# BB#8:                                 # %if.then6
	movabsq	$.L.str5, %rax
	jmp	.LBB8_9
.LBB8_7:
	movabsq	$.L.str17, %rax
.LBB8_9:                                # %if.then6
	movq	%rax, ix86_arch_string(%rip)
.LBB8_10:                               # %if.end8
	movq	ix86_cmodel_string(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB8_27
# BB#11:                                # %if.then9
	movabsq	$.L.str23, %rsi
	movq	%rbx, %rdi
	callq	strcmp
	movl	flag_pic(%rip), %ecx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB8_12
# BB#16:                                # %if.else
	testq	%r14, %rcx
	je	.LBB8_18
# BB#17:                                # %if.then15
	movabsq	$.L.str24, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	callq	sorry
	jmp	.LBB8_31
.LBB8_27:                               # %if.else45
	movzbl	target_flags+3(%rip), %eax
	xorq	%rcx, %rcx
	movl	%ecx, ix86_cmodel(%rip)
	testq	$2, %rax
	je	.LBB8_31
# BB#28:                                # %if.then48
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	movq	$5, %rax
	jne	.LBB8_30
# BB#29:                                # %select.mid
	movq	$1, %rax
	jmp	.LBB8_30
.LBB8_12:                               # %if.then11
	testq	%r14, %rcx
	je	.LBB8_13
# BB#14:                                # %if.then11
	movabsq	$1, %rax
	leaq	1(,%rax,4), %rax
	jmp	.LBB8_30
.LBB8_18:                               # %if.else16
	movabsq	$.L.str25, %rsi
	movq	%rbx, %rdi
	callq	strcmp
	testq	%r14, %rax
	je	.LBB8_19
# BB#20:                                # %if.else20
	movabsq	$.L.str26, %rsi
	movq	%rbx, %rdi
	callq	strcmp
	testq	%r14, %rax
	je	.LBB8_21
# BB#22:                                # %if.else26
	movabsq	$.L.str27, %rsi
	movq	%rbx, %rdi
	callq	strcmp
	testq	%r14, %rax
	je	.LBB8_23
# BB#24:                                # %if.else32
	movabsq	$.L.str28, %rsi
	movq	%rbx, %rdi
	callq	strcmp
	testq	%r14, %rax
	je	.LBB8_25
# BB#26:                                # %if.else38
	movabsq	$.L.str29, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	callq	error
	jmp	.LBB8_31
.LBB8_13:
	movabsq	$0, %rax
	leaq	1(,%rax,4), %rax
	jmp	.LBB8_30
.LBB8_19:                               # %if.then19
	xorq	%rax, %rax
	jmp	.LBB8_30
.LBB8_21:                               # %if.then25
	movq	$2, %rax
	jmp	.LBB8_30
.LBB8_23:                               # %if.then31
	movq	$3, %rax
	jmp	.LBB8_30
.LBB8_25:                               # %if.then37
	movq	$4, %rax
.LBB8_30:                               # %select.end
	movl	%eax, ix86_cmodel(%rip)
.LBB8_31:                               # %if.end52
	movq	ix86_asm_string(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB8_37
# BB#32:                                # %if.then54
	movabsq	$.L.str30, %rsi
	movq	%rbx, %rdi
	callq	strcmp
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB8_33
# BB#34:                                # %if.else58
	movabsq	$.L.str31, %rsi
	movq	%rbx, %rdi
	callq	strcmp
	testq	%r14, %rax
	je	.LBB8_35
# BB#36:                                # %if.else62
	movabsq	$.L.str32, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	callq	error
	jmp	.LBB8_37
.LBB8_33:                               # %if.then57
	movq	$1, %rax
	movl	%eax, ix86_asm_dialect(%rip)
	jmp	.LBB8_37
.LBB8_35:                               # %if.then61
	xorq	%rax, %rax
	movl	%eax, ix86_asm_dialect(%rip)
.LBB8_37:                               # %if.end65
	movl	target_flags(%rip), %eax
	andq	$33554432, %rax         # imm = 0x2000000
	movl	ix86_cmodel(%rip), %edx
	movq	$25, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	xorq	$1, %rsi
	testq	%rdx, %rdx
	jne	.LBB8_38
# BB#39:                                # %if.end65
	movabsq	$1, %rcx
	jmp	.LBB8_40
.LBB8_38:
	movabsq	$0, %rcx
.LBB8_40:                               # %if.end65
	cmpq	%rcx, %rsi
	je	.LBB8_45
# BB#41:                                # %if.then72
	movq	ix86_cmodel_string(%rip), %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB8_42
# BB#43:                                # %if.then72
	movabsq	$.L.str25, %rdx
	jmp	.LBB8_44
.LBB8_42:
	movabsq	$.L.str34, %rdx
.LBB8_44:                               # %if.then72
	movabsq	$.L.str33, %rdi
	xorq	%rax, %rax
	callq	error
	movl	ix86_cmodel(%rip), %edx
.LBB8_45:                               # %if.end76
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rdx
	cmpq	$4, %rdx
	jne	.LBB8_47
# BB#46:                                # %if.then79
	movabsq	$.L.str35, %rdi
	xorq	%rax, %rax
	callq	sorry
.LBB8_47:                               # %for.cond.preheader
	movq	ix86_arch_string(%rip), %r14
	xorq	%r12, %r12
	movabsq	$override_options.processor_alias_table+8, %rbx
	.align	16, 0x90
.LBB8_49:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbx), %rsi
	movq	%r14, %rdi
	callq	strcmp
	testq	%r15, %rax
	je	.LBB8_50
# BB#48:                                # %for.cond
                                        #   in Loop: Header=BB8_49 Depth=1
	incq	%r12
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	$16, %rbx
	cmpq	$17, %rax
	jle	.LBB8_49
	jmp	.LBB8_67
.LBB8_50:                               # %if.then98
	movl	(%rbx), %eax
	movl	%eax, ix86_arch(%rip)
	movl	%eax, ix86_cpu(%rip)
	movq	$262032, %rax           # imm = 0x3FF90
	movq	%r12, %rcx
	shrq	%cl, %rax
	testq	$1, %rax
	je	.LBB8_53
# BB#51:                                # %land.lhs.true105
	movl	target_flags(%rip), %eax
	testq	$32768, %rax            # imm = 0x8000
	jne	.LBB8_53
# BB#52:                                # %if.then108
	orq	$16384, %rax            # imm = 0x4000
	movl	%eax, target_flags(%rip)
.LBB8_53:                               # %if.end109
	leaq	-11(%r12), %rax
	cmpq	$6, %rax
	ja	.LBB8_56
# BB#54:                                # %land.lhs.true115
	movl	target_flags(%rip), %eax
	testq	$2097152, %rax          # imm = 0x200000
	jne	.LBB8_56
# BB#55:                                # %if.then118
	orq	$1048576, %rax          # imm = 0x100000
	movl	%eax, target_flags(%rip)
.LBB8_56:                               # %if.end120
	leaq	-13(%r12), %rax
	cmpq	$4, %rax
	ja	.LBB8_59
# BB#57:                                # %land.lhs.true126
	movl	target_flags(%rip), %eax
	testq	$8388608, %rax          # imm = 0x800000
	jne	.LBB8_59
# BB#58:                                # %if.then129
	orq	$4194304, %rax          # imm = 0x400000
	movl	%eax, target_flags(%rip)
.LBB8_59:                               # %if.end131
	movq	$230144, %rax           # imm = 0x38300
	movq	%r12, %rcx
	shrq	%cl, %rax
	testq	$1, %rax
	je	.LBB8_62
# BB#60:                                # %land.lhs.true137
	movl	target_flags(%rip), %eax
	testq	$131072, %rax           # imm = 0x20000
	jne	.LBB8_62
# BB#61:                                # %if.then140
	orq	$65536, %rax            # imm = 0x10000
	movl	%eax, target_flags(%rip)
.LBB8_62:                               # %if.end142
	movq	%r12, %rax
	andq	%r15, %rax
	cmpq	$9, %rax
	jne	.LBB8_65
# BB#63:                                # %land.lhs.true148
	movl	target_flags(%rip), %eax
	testq	$524288, %rax           # imm = 0x80000
	jne	.LBB8_65
# BB#64:                                # %if.then151
	orq	$262144, %rax           # imm = 0x40000
	movl	%eax, target_flags(%rip)
.LBB8_65:                               # %if.end153
	movq	$254720, %rax           # imm = 0x3E300
	movq	%r12, %rcx
	shrq	%cl, %rax
	testq	$1, %rax
	je	.LBB8_67
# BB#66:                                # %if.then159
	movq	$1, %rax
	movl	%eax, x86_prefetch_sse(%rip)
.LBB8_67:                               # %for.end
	andq	%r15, %r12
	cmpq	$18, %r12
	jne	.LBB8_69
# BB#68:                                # %if.then164
	movabsq	$.L.str37, %rdi
	xorq	%rax, %rax
	movq	%r14, %rsi
	callq	error
.LBB8_69:                               # %for.cond166.preheader
	movq	ix86_cpu_string(%rip), %r14
	xorq	%r12, %r12
	movabsq	$override_options.processor_alias_table+8, %rbx
	.align	16, 0x90
.LBB8_71:                               # %for.body169
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbx), %rsi
	movq	%r14, %rdi
	callq	strcmp
	testq	%r15, %rax
	je	.LBB8_72
# BB#70:                                # %for.cond166
                                        #   in Loop: Header=BB8_71 Depth=1
	incq	%r12
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	$16, %rbx
	cmpq	$17, %rax
	jle	.LBB8_71
	jmp	.LBB8_73
.LBB8_72:                               # %if.then175
	movl	(%rbx), %eax
	movl	%eax, ix86_cpu(%rip)
.LBB8_73:                               # %for.end182
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$254720, %rdx           # imm = 0x3E300
	movq	%rax, %rcx
	shrq	%cl, %rdx
	testq	$1, %rdx
	je	.LBB8_75
# BB#74:                                # %if.then188
	movq	$1, %rax
	movl	%eax, x86_prefetch_sse(%rip)
.LBB8_75:                               # %if.end189
	andq	%r15, %r12
	cmpq	$18, %r12
	jne	.LBB8_77
# BB#76:                                # %if.then192
	movabsq	$.L.str38, %rdi
	xorq	%rax, %rax
	movq	%r14, %rsi
	callq	error
.LBB8_77:                               # %if.end193
	movl	optimize_size(%rip), %ecx
	movl	ix86_cpu(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB8_79
# BB#78:
	movabsq	$size_cost, %rcx
	jmp	.LBB8_80
.LBB8_79:                               # %if.else196
	leaq	(%rax,%rax,4), %rcx
	movq	override_options.processor_target_table(,%rcx,8), %rcx
.LBB8_80:                               # %if.end199
	movq	%rcx, ix86_cost(%rip)
	leaq	(%rax,%rax,4), %rax
	movl	override_options.processor_target_table+8(,%rax,8), %ecx
	movl	target_flags(%rip), %edx
	orq	%rcx, %rdx
	movl	override_options.processor_target_table+12(,%rax,8), %ebx
	notq	%rbx
	andq	%rdx, %rbx
	movl	%ebx, target_flags(%rip)
	movq	ix86_regparm_string(%rip), %rdi
	movq	$ix86_init_machine_status, init_machine_status(%rip)
	movq	$ix86_mark_machine_status, mark_machine_status(%rip)
	movq	$ix86_free_machine_status, free_machine_status(%rip)
	testq	%rdi, %rdi
	je	.LBB8_91
# BB#81:                                # %if.then207
	callq	atoi
	movq	%rax, %rsi
	movq	$32, %rcx
                                        # kill: RAX<def> RSI<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	andq	$33554432, %rbx         # imm = 0x2000000
	testq	%rax, %rax
	js	.LBB8_86
# BB#82:                                # %lor.lhs.false
	testq	%r15, %rbx
	je	.LBB8_83
# BB#84:                                # %lor.lhs.false
	movabsq	$1, %rax
	jmp	.LBB8_85
.LBB8_91:                               # %if.else222
	testq	$33554432, %rbx         # imm = 0x2000000
	je	.LBB8_93
# BB#92:                                # %if.then225
	movq	$6, %rax
	movl	%eax, ix86_regparm(%rip)
	jmp	.LBB8_93
.LBB8_83:
	movabsq	$0, %rax
.LBB8_85:                               # %lor.lhs.false
	leaq	3(%rax,%rax,2), %rax
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jle	.LBB8_90
.LBB8_86:                               # %if.then216
	testq	%r15, %rbx
	je	.LBB8_87
# BB#88:                                # %if.then216
	movabsq	$1, %rax
	jmp	.LBB8_89
.LBB8_87:
	movabsq	$0, %rax
.LBB8_89:                               # %if.then216
	leaq	3(%rax,%rax,2), %rdx
	movabsq	$.L.str39, %rdi
	xorq	%rax, %rax
	callq	error
	jmp	.LBB8_93
.LBB8_90:                               # %if.else220
	movl	%esi, ix86_regparm(%rip)
.LBB8_93:                               # %if.end230
	cmpq	$0, ix86_align_loops_string(%rip)
	je	.LBB8_98
# BB#94:                                # %if.then232
	movabsq	$.L.str40, %rdi
	xorq	%rax, %rax
	callq	warning
	movl	align_loops(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_98
# BB#95:                                # %if.then235
	movq	ix86_align_loops_string(%rip), %rdi
	callq	atoi
	movq	%rax, %rcx
                                        # kill: RAX<def> RCX<kill>
	andq	%r15, %rax
	cmpq	$17, %rax
	jb	.LBB8_97
# BB#96:                                # %if.then242
	movabsq	$.L.str41, %rdi
	movq	$16, %rdx
	xorq	%rax, %rax
	movq	%rcx, %rsi
	callq	error
	jmp	.LBB8_98
.LBB8_97:                               # %if.else243
	movq	$1, %rax
	shlq	%cl, %rax
	movl	%eax, align_loops(%rip)
.LBB8_98:                               # %if.end246
	cmpq	$0, ix86_align_jumps_string(%rip)
	je	.LBB8_103
# BB#99:                                # %if.then248
	movabsq	$.L.str42, %rdi
	xorq	%rax, %rax
	callq	warning
	movl	align_jumps(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_103
# BB#100:                               # %if.then251
	movq	ix86_align_jumps_string(%rip), %rdi
	callq	atoi
	movq	%rax, %rcx
                                        # kill: RAX<def> RCX<kill>
	andq	%r15, %rax
	cmpq	$17, %rax
	jb	.LBB8_102
# BB#101:                               # %if.then258
	movabsq	$.L.str41, %rdi
	movq	$16, %rdx
	xorq	%rax, %rax
	movq	%rcx, %rsi
	callq	error
	jmp	.LBB8_103
.LBB8_102:                              # %if.else259
	movq	$1, %rax
	shlq	%cl, %rax
	movl	%eax, align_jumps(%rip)
.LBB8_103:                              # %if.end263
	cmpq	$0, ix86_align_funcs_string(%rip)
	je	.LBB8_108
# BB#104:                               # %if.then265
	movabsq	$.L.str43, %rdi
	xorq	%rax, %rax
	callq	warning
	movl	align_functions(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_108
# BB#105:                               # %if.then268
	movq	ix86_align_funcs_string(%rip), %rdi
	callq	atoi
	movq	%rax, %rcx
                                        # kill: RAX<def> RCX<kill>
	andq	%r15, %rax
	cmpq	$17, %rax
	jb	.LBB8_107
# BB#106:                               # %if.then275
	movabsq	$.L.str41, %rdi
	movq	$16, %rdx
	xorq	%rax, %rax
	movq	%rcx, %rsi
	callq	error
	jmp	.LBB8_108
.LBB8_107:                              # %if.else276
	movq	$1, %rax
	shlq	%cl, %rax
	movl	%eax, align_functions(%rip)
.LBB8_108:                              # %if.end280
	movl	align_loops(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_110
# BB#109:                               # %if.then283
	movl	ix86_cpu(%rip), %eax
	leaq	(%rax,%rax,4), %rax
	movl	override_options.processor_target_table+16(,%rax,8), %ecx
	movl	override_options.processor_target_table+20(,%rax,8), %eax
	movl	%ecx, align_loops(%rip)
	movl	%eax, align_loops_max_skip(%rip)
.LBB8_110:                              # %if.end288
	movl	align_jumps(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_112
# BB#111:                               # %if.then291
	movl	ix86_cpu(%rip), %eax
	leaq	(%rax,%rax,4), %rax
	movl	override_options.processor_target_table+24(,%rax,8), %ecx
	movl	override_options.processor_target_table+28(,%rax,8), %eax
	movl	%ecx, align_jumps(%rip)
	movl	%eax, align_jumps_max_skip(%rip)
.LBB8_112:                              # %if.end296
	movl	align_functions(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_114
# BB#113:                               # %if.then299
	movl	ix86_cpu(%rip), %eax
	leaq	(%rax,%rax,4), %rax
	movl	override_options.processor_target_table+32(,%rax,8), %eax
	movl	%eax, align_functions(%rip)
.LBB8_114:                              # %if.end302
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	movq	$128, %rax
	je	.LBB8_117
# BB#115:                               # %cond.true
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	movq	$1, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	movq	$128, %rax
	jne	.LBB8_117
# BB#116:                               # %cond.true
	movq	$32, %rax
.LBB8_117:                              # %cond.end
	movq	ix86_preferred_stack_boundary_string(%rip), %rdi
	movl	%eax, ix86_preferred_stack_boundary(%rip)
	testq	%rdi, %rdi
	je	.LBB8_122
# BB#118:                               # %if.then309
	callq	atoi
	movq	%rax, %rsi
	movq	$32, %rcx
                                        # kill: RAX<def> RSI<kill>
	movzbl	target_flags+3(%rip), %edx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	andq	$2, %rdx
	addq	$2, %rdx
	cmpq	%rdx, %rax
	jl	.LBB8_120
# BB#119:                               # %if.then309
	movq	$32, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$13, %rax
	jge	.LBB8_120
# BB#121:                               # %if.else323
	movq	$8, %rax
	movq	%rsi, %rcx
	shlq	%cl, %rax
	movl	%eax, ix86_preferred_stack_boundary(%rip)
	jmp	.LBB8_122
.LBB8_120:                              # %if.then319
	movabsq	$.L.str44, %rdi
	xorq	%rax, %rax
	callq	error
.LBB8_122:                              # %if.end326
	movl	ix86_cpu(%rip), %eax
	leaq	(%rax,%rax,4), %rax
	movl	override_options.processor_target_table+36(,%rax,8), %eax
	movq	ix86_branch_cost_string(%rip), %rdi
	movl	%eax, ix86_branch_cost(%rip)
	testq	%rdi, %rdi
	je	.LBB8_126
# BB#123:                               # %if.then330
	callq	atoi
	movq	%rax, %rcx
                                        # kill: RAX<def> RCX<kill>
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB8_125
# BB#124:                               # %if.then337
	movabsq	$.L.str45, %rdi
	xorq	%rax, %rax
	movq	%rcx, %rsi
	callq	error
	jmp	.LBB8_126
.LBB8_125:                              # %if.else338
	movl	%ecx, ix86_branch_cost(%rip)
.LBB8_126:                              # %if.end340
	movl	target_flags(%rip), %ebx
	testq	$128, %rbx
	je	.LBB8_128
# BB#127:                               # %if.then343
	movq	$1, %rax
	movl	%eax, flag_omit_frame_pointer(%rip)
.LBB8_128:                              # %if.end344
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%rax, %rax
	je	.LBB8_130
# BB#129:                               # %if.then346
	movabsq	$4294967279, %rax       # imm = 0xFFFFFFEF
	andq	%rax, %rbx
	movl	%ebx, target_flags(%rip)
.LBB8_130:                              # %if.end348
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$108, %rdx
	je	.LBB8_132
# BB#131:                               # %if.then352
	movabsq	$4294967231, %rcx       # imm = 0xFFFFFFBF
	andq	%rcx, %rbx
	movl	%ebx, target_flags(%rip)
.LBB8_132:                              # %if.end354
	testq	$33554432, %rbx         # imm = 0x2000000
	je	.LBB8_138
# BB#133:                               # %if.then357
	testq	$4, %rbx
	je	.LBB8_135
# BB#134:                               # %if.then360
	movabsq	$.L.str46, %rdi
	xorq	%rax, %rax
	callq	error
	movl	target_flags(%rip), %ebx
.LBB8_135:                              # %if.end361
	testq	$2, %rbx
	je	.LBB8_137
# BB#136:                               # %if.then364
	movabsq	$.L.str47, %rdi
	xorq	%rax, %rax
	callq	error
	movl	target_flags(%rip), %ebx
.LBB8_137:                              # %if.end365
	orq	$17121280, %rbx         # imm = 0x1054000
	movl	%ebx, target_flags(%rip)
	movq	$2, %rax
.LBB8_138:                              # %if.end368
	movq	ix86_fpmath_string(%rip), %r14
	movl	%eax, ix86_fpmath(%rip)
	testq	%r14, %r14
	je	.LBB8_152
# BB#139:                               # %if.then371
	movabsq	$.L.str48, %rsi
	movq	%r14, %rdi
	callq	strcmp
	testq	%r15, %rax
	je	.LBB8_140
# BB#141:                               # %if.else375
	movabsq	$.L.str49, %rsi
	movq	%r14, %rdi
	callq	strcmp
	testq	%r15, %rax
	je	.LBB8_142
# BB#144:                               # %if.else385
	movabsq	$.L.str51, %rsi
	movq	%r14, %rdi
	callq	strcmp
	testq	%r15, %rax
	je	.LBB8_146
# BB#145:                               # %lor.lhs.false388
	movabsq	$.L.str52, %rsi
	movq	%r14, %rdi
	callq	strcmp
	testq	%r15, %rax
	je	.LBB8_146
# BB#151:                               # %if.else403
	movabsq	$.L.str54, %rdi
	xorq	%rax, %rax
	movq	%r14, %rsi
	callq	error
	jmp	.LBB8_152
.LBB8_146:                              # %if.then391
	testq	$327680, %rbx           # imm = 0x50000
	je	.LBB8_143
# BB#147:                               # %if.else396
	testq	$1, %rbx
	je	.LBB8_148
# BB#150:                               # %if.else400
	movq	$3, %rax
	movl	%eax, ix86_fpmath(%rip)
	jmp	.LBB8_152
.LBB8_142:                              # %if.then378
	testq	$327680, %rbx           # imm = 0x50000
	jne	.LBB8_149
.LBB8_143:                              # %if.then382
	movabsq	$.L.str50, %rdi
	xorq	%rax, %rax
	callq	warning
.LBB8_140:                              # %if.then374
	movq	$1, %rax
	movl	%eax, ix86_fpmath(%rip)
	jmp	.LBB8_152
.LBB8_148:                              # %if.then399
	movabsq	$.L.str53, %rdi
	xorq	%rax, %rax
	callq	warning
.LBB8_149:                              # %if.else383
	movq	$2, %rax
	movl	%eax, ix86_fpmath(%rip)
.LBB8_152:                              # %if.end407
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB8_154
# BB#153:                               # %if.then411
	orq	$16384, %rax            # imm = 0x4000
	movl	%eax, target_flags(%rip)
	movq	$1, %rcx
	movl	%ecx, x86_prefetch_sse(%rip)
.LBB8_154:                              # %if.end413
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB8_157
# BB#155:                               # %if.then417
	movl	ix86_arch(%rip), %ecx
	movq	%rax, %rdx
	orq	$16384, %rdx            # imm = 0x4000
	movl	%edx, target_flags(%rip)
	cmpq	$5, %rcx
	jne	.LBB8_158
# BB#156:                               # %if.then422
	orq	$4210688, %rax          # imm = 0x404000
	movl	%eax, target_flags(%rip)
.LBB8_157:                              # %if.end425
	movq	%rax, %rdx
.LBB8_158:                              # %if.end425
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$104, %rax
	je	.LBB8_161
# BB#159:                               # %land.lhs.true429
	movl	optimize_size(%rip), %eax
	movq	%rdx, %rcx
	andq	$8192, %rcx             # imm = 0x2000
	orq	%rcx, %rax
	testq	%r15, %rax
	jne	.LBB8_161
# BB#160:                               # %if.then434
	orq	$4096, %rdx             # imm = 0x1000
	movl	%edx, target_flags(%rip)
.LBB8_161:                              # %do.body
	movabsq	$internal_label_prefix, %rbx
	movabsq	$.L.str55, %rsi
	movabsq	$.L.str56, %rdx
	xorq	%rcx, %rcx
	xorq	%rax, %rax
	xorq	%r14, %r14
	movq	%rbx, %rdi
	callq	sprintf
	movq	$88, %rsi
	movq	%rbx, %rdi
	callq	strchr
	movq	%rax, %rcx
	subq	%rbx, %rcx
	movl	%ecx, internal_label_prefix_len(%rip)
	movb	%r14b, (%rax)
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp116:
	.size	override_options, .Ltmp116-override_options
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_init_machine_status,@function
ix86_init_machine_status:               # @ix86_init_machine_status
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp119:
	.cfi_def_cfa_offset 16
.Ltmp120:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	$1, %rdi
	movq	$1424, %rsi             # imm = 0x590
	callq	xcalloc
	movq	%rax, 392(%rbx)
	popq	%rbx
	retq
.Ltmp121:
	.size	ix86_init_machine_status, .Ltmp121-ix86_init_machine_status
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_mark_machine_status,@function
ix86_mark_machine_status:               # @ix86_mark_machine_status
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp127:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp128:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp129:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp130:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp131:
	.cfi_def_cfa_offset 48
.Ltmp132:
	.cfi_offset %rbx, -40
.Ltmp133:
	.cfi_offset %r12, -32
.Ltmp134:
	.cfi_offset %r14, -24
.Ltmp135:
	.cfi_offset %r15, -16
	movq	392(%rdi), %r14
	testq	%r14, %r14
	je	.LBB10_12
# BB#1:
	movq	$16, %rbx
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB10_2:                               # %for.cond2.preheader
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%r14,%rbx), %r15
	testq	%r15, %r15
	je	.LBB10_5
# BB#3:                                 # %land.lhs.true
                                        #   in Loop: Header=BB10_2 Depth=1
	movq	%r15, %rdi
	callq	ggc_set_mark
	testq	%r12, %rax
	jne	.LBB10_5
# BB#4:                                 # %if.then9
                                        #   in Loop: Header=BB10_2 Depth=1
	movq	%r15, %rdi
	callq	ggc_mark_rtx_children
.LBB10_5:                               # %for.inc
                                        #   in Loop: Header=BB10_2 Depth=1
	movq	-8(%r14,%rbx), %r15
	testq	%r15, %r15
	je	.LBB10_8
# BB#6:                                 # %land.lhs.true.1
                                        #   in Loop: Header=BB10_2 Depth=1
	movq	%r15, %rdi
	callq	ggc_set_mark
	testq	%r12, %rax
	jne	.LBB10_8
# BB#7:                                 # %if.then9.1
                                        #   in Loop: Header=BB10_2 Depth=1
	movq	%r15, %rdi
	callq	ggc_mark_rtx_children
.LBB10_8:                               # %for.inc.1
                                        #   in Loop: Header=BB10_2 Depth=1
	movq	(%r14,%rbx), %r15
	testq	%r15, %r15
	je	.LBB10_11
# BB#9:                                 # %land.lhs.true.2
                                        #   in Loop: Header=BB10_2 Depth=1
	movq	%r15, %rdi
	callq	ggc_set_mark
	testq	%r12, %rax
	jne	.LBB10_11
# BB#10:                                # %if.then9.2
                                        #   in Loop: Header=BB10_2 Depth=1
	movq	%r15, %rdi
	callq	ggc_mark_rtx_children
.LBB10_11:                              # %for.inc.2
                                        #   in Loop: Header=BB10_2 Depth=1
	addq	$24, %rbx
	cmpq	$1432, %rbx             # imm = 0x598
	jne	.LBB10_2
.LBB10_12:                              # %for.end12
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp136:
	.size	ix86_mark_machine_status, .Ltmp136-ix86_mark_machine_status
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_free_machine_status,@function
ix86_free_machine_status:               # @ix86_free_machine_status
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp139:
	.cfi_def_cfa_offset 16
.Ltmp140:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	392(%rbx), %rdi
	callq	free
	movq	$0, 392(%rbx)
	popq	%rbx
	retq
.Ltmp141:
	.size	ix86_free_machine_status, .Ltmp141-ix86_free_machine_status
	.cfi_endproc

	.globl	optimization_options
	.align	16, 0x90
	.type	optimization_options,@function
optimization_options:                   # @optimization_options
	.cfi_startproc
# BB#0:                                 # %entry
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$2, %rdi
	jl	.LBB12_2
# BB#1:                                 # %if.then
	xorq	%rax, %rax
	movl	%eax, flag_schedule_insns(%rip)
.LBB12_2:                               # %if.end
	movl	target_flags(%rip), %eax
	andq	$33554432, %rax         # imm = 0x2000000
	je	.LBB12_5
# BB#3:                                 # %if.end
	movl	optimize(%rip), %edx
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jle	.LBB12_5
# BB#4:                                 # %if.then2
	movq	$1, %rcx
	movl	%ecx, flag_omit_frame_pointer(%rip)
.LBB12_5:                               # %if.end3
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB12_7
# BB#6:                                 # %if.then6
	xorq	%rax, %rax
	movl	%eax, flag_pcc_struct_return(%rip)
	movq	$1, %rax
	movl	%eax, flag_asynchronous_unwind_tables(%rip)
.LBB12_7:                               # %if.end7
	retq
.Ltmp142:
	.size	optimization_options, .Ltmp142-optimization_options
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_handle_cdecl_attribute,@function
ix86_handle_cdecl_attribute:            # @ix86_handle_cdecl_attribute
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp146:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp147:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp148:
	.cfi_def_cfa_offset 32
.Ltmp149:
	.cfi_offset %rbx, -24
.Ltmp150:
	.cfi_offset %r14, -16
	movq	(%rdi), %rax
	movzbl	16(%rax), %ecx
	movq	%r8, %r14
	movq	%rsi, %rbx
	cmpq	$37, %rcx
	ja	.LBB13_2
# BB#1:                                 # %entry
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$146037342208, %rcx     # imm = 0x2200810000
	testq	%rcx, %rax
	jne	.LBB13_3
.LBB13_2:                               # %if.then
	movq	32(%rbx), %rsi
	movabsq	$.L.str488, %rdi
	xorq	%rax, %rax
	callq	warning
	movq	$1, %rax
	movb	%al, (%r14)
.LBB13_3:                               # %if.end
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB13_5
# BB#4:                                 # %if.then18
	movq	32(%rbx), %rsi
	movabsq	$.L.str491, %rdi
	xorq	%rax, %rax
	callq	warning
	movq	$1, %rax
	movb	%al, (%r14)
.LBB13_5:                               # %if.end22
	xorq	%rax, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp151:
	.size	ix86_handle_cdecl_attribute, .Ltmp151-ix86_handle_cdecl_attribute
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_handle_regparm_attribute,@function
ix86_handle_regparm_attribute:          # @ix86_handle_regparm_attribute
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp155:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp156:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp157:
	.cfi_def_cfa_offset 32
.Ltmp158:
	.cfi_offset %rbx, -24
.Ltmp159:
	.cfi_offset %r14, -16
	movq	(%rdi), %rax
	movzbl	16(%rax), %ecx
	movq	%r8, %r14
	movq	%rsi, %rbx
	cmpq	$37, %rcx
	ja	.LBB14_2
# BB#1:                                 # %entry
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$146037342208, %rcx     # imm = 0x2200810000
	testq	%rcx, %rax
	je	.LBB14_2
# BB#4:                                 # %if.else
	movq	32(%rdx), %rdi
	movzbl	16(%rdi), %eax
	cmpq	$25, %rax
	jne	.LBB14_5
# BB#6:                                 # %if.else27
	movl	target_flags(%rip), %eax
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rax
	leaq	3(%rax,%rax,2), %rsi
	callq	compare_tree_int
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB14_9
# BB#7:                                 # %if.then30
	movl	target_flags(%rip), %eax
	movq	32(%rbx), %rsi
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rax
	leaq	3(%rax,%rax,2), %rdx
	movabsq	$.L.str490, %rdi
	xorq	%rax, %rax
	callq	warning
	jmp	.LBB14_8
.LBB14_2:                               # %if.then
	movq	32(%rbx), %rsi
	movabsq	$.L.str488, %rdi
	jmp	.LBB14_3
.LBB14_5:                               # %if.then23
	movq	32(%rbx), %rsi
	movabsq	$.L.str489, %rdi
.LBB14_3:                               # %if.end38
	xorq	%rax, %rax
	callq	warning
.LBB14_8:                               # %if.end38
	movq	$1, %rax
	movb	%al, (%r14)
.LBB14_9:                               # %if.end38
	xorq	%rax, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp160:
	.size	ix86_handle_regparm_attribute, .Ltmp160-ix86_handle_regparm_attribute
	.cfi_endproc

	.globl	ix86_return_pops_args
	.align	16, 0x90
	.type	ix86_return_pops_args,@function
ix86_return_pops_args:                  # @ix86_return_pops_args
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp166:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp167:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp168:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp169:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp170:
	.cfi_def_cfa_offset 48
.Ltmp171:
	.cfi_offset %rbx, -40
.Ltmp172:
	.cfi_offset %r12, -32
.Ltmp173:
	.cfi_offset %r14, -24
.Ltmp174:
	.cfi_offset %r15, -16
	movzbl	target_flags(%rip), %eax
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	$1, %rbx
	testq	$2, %rax
	je	.LBB15_5
# BB#1:                                 # %land.rhs
	xorq	%rbx, %rbx
	testq	%rdi, %rdi
	je	.LBB15_5
# BB#2:                                 # %lor.rhs
	movzbl	16(%rdi), %eax
	cmpq	$1, %rax
	jne	.LBB15_3
# BB#4:                                 # %lor.rhs
	movabsq	$1, %rbx
	jmp	.LBB15_5
.LBB15_3:
	movabsq	$0, %rbx
.LBB15_5:                               # %land.end
	movq	48(%r15), %rsi
	movabsq	$.L.str58, %rdi
	callq	lookup_attribute
	testq	%rax, %rax
	jne	.LBB15_12
# BB#6:                                 # %if.then
	movq	48(%r15), %rsi
	movabsq	$.L.str57, %rdi
	callq	lookup_attribute
	testq	%rax, %rax
	jne	.LBB15_7
# BB#8:                                 # %if.then
	movabsq	$1, %rax
	jmp	.LBB15_9
.LBB15_7:
	movabsq	$0, %rax
.LBB15_9:                               # %if.then
	testq	%rbx, %rax
	jne	.LBB15_12
# BB#10:                                # %land.lhs.true
	movq	24(%r15), %rdi
	testq	%rdi, %rdi
	je	.LBB15_19
# BB#11:                                # %lor.lhs.false
	callq	tree_last
	movq	32(%rax), %rax
	movq	global_trees+216(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB15_19
.LBB15_12:                              # %if.end17
	movq	8(%r15), %rdi
	callq	aggregate_value_p
	xorq	%r14, %r14
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB15_19
# BB#13:                                # %land.lhs.true22
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB15_19
# BB#14:                                # %if.then25
	movl	ix86_regparm(%rip), %r12d
	testq	%r15, %r15
	je	.LBB15_17
# BB#15:                                # %if.then27
	movq	48(%r15), %rsi
	movabsq	$.L.str59, %rdi
	callq	lookup_attribute
	testq	%rax, %rax
	je	.LBB15_17
# BB#16:                                # %if.then32
	movq	32(%rax), %rax
	movq	32(%rax), %rax
	movq	32(%rax), %r12
.LBB15_17:                              # %if.end39
	testq	%rbx, %r12
	jne	.LBB15_19
# BB#18:                                # %if.then41
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	movzbl	mode_size+4(%rax), %r14d
.LBB15_19:                              # %return
	movq	%r14, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp175:
	.size	ix86_return_pops_args, .Ltmp175-ix86_return_pops_args
	.cfi_endproc

	.globl	ix86_function_arg_regno_p
	.align	16, 0x90
	.type	ix86_function_arg_regno_p,@function
ix86_function_arg_regno_p:              # @ix86_function_arg_regno_p
	.cfi_startproc
# BB#0:                                 # %entry
	movl	target_flags(%rip), %edx
	testq	$33554432, %rdx         # imm = 0x2000000
	je	.LBB16_1
# BB#8:                                 # %if.end
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdi
	cmpq	$52, %rdi
	jbe	.LBB16_10
# BB#9:
	movq	$1, %rdx
	jmp	.LBB16_14
.LBB16_1:                               # %if.then
	movq	$32, %rcx
	movq	%rdi, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$1, %rax
	cmpq	$3, %rsi
	jl	.LBB16_16
# BB#2:                                 # %lor.rhs
	xorq	%rax, %rax
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB16_16
# BB#3:                                 # %land.lhs.true
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	$52, %rcx
	ja	.LBB16_16
# BB#4:                                 # %land.lhs.true
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB16_16
# BB#5:                                 # %land.rhs
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movzbl	fixed_regs(%rdi), %eax
	testq	%rax, %rax
	jne	.LBB16_6
# BB#7:                                 # %land.rhs
	movabsq	$1, %rax
	retq
.LBB16_10:                              # %if.end
	movq	$1, %rax
	movq	$1, %rsi
	movq	%rdi, %rcx
	shlq	%cl, %rsi
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rsi
	je	.LBB16_11
# BB#12:                                # %land.lhs.true19
	testq	$327680, %rdx           # imm = 0x50000
	movq	$1, %rdx
	jne	.LBB16_16
	jmp	.LBB16_14
.LBB16_6:
	movabsq	$0, %rax
	retq
.LBB16_11:                              # %if.end
	testq	%rdi, %rdi
	movq	$1, %rdx
	je	.LBB16_15
	.align	16, 0x90
.LBB16_14:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	x86_64_int_parameter_registers-4(,%rdx,4), %eax
	cmpq	%rdi, %rax
	je	.LBB16_15
# BB#13:                                # %for.cond
                                        #   in Loop: Header=BB16_14 Depth=1
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%rdx
	xorq	%rax, %rax
	cmpq	$5, %rsi
	jle	.LBB16_14
	jmp	.LBB16_16
.LBB16_15:
	movq	$1, %rax
.LBB16_16:                              # %return
	retq
.Ltmp176:
	.size	ix86_function_arg_regno_p, .Ltmp176-ix86_function_arg_regno_p
	.cfi_endproc

	.globl	init_cumulative_args
	.align	16, 0x90
	.type	init_cumulative_args,@function
init_cumulative_args:                   # @init_cumulative_args
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp182:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp183:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp184:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp185:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp186:
	.cfi_def_cfa_offset 48
.Ltmp187:
	.cfi_offset %rbx, -40
.Ltmp188:
	.cfi_offset %r12, -32
.Ltmp189:
	.cfi_offset %r14, -24
.Ltmp190:
	.cfi_offset %r15, -16
	cmpq	$0, ix86_debug_arg_string(%rip)
	movq	%rdx, %r15
	movq	%rsi, %r14
	movq	%rdi, %rbx
	jne	.LBB17_1
.LBB17_6:                               # %if.end16
	xorq	%r12, %r12
	movl	%r12d, 24(%rbx)
	movq	$0, 16(%rbx)
	movq	$0, 8(%rbx)
	movq	$0, (%rbx)
	movl	ix86_regparm(%rip), %edx
	movl	%edx, 4(%rbx)
	movl	target_flags(%rip), %eax
	movq	$22, %rcx
	shrq	%cl, %rax
	andq	$8, %rax
	movl	%eax, 16(%rbx)
	testq	%r14, %r14
	je	.LBB17_11
# BB#7:                                 # %land.lhs.true
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB17_11
# BB#8:                                 # %if.then21
	movq	48(%r14), %rsi
	movabsq	$.L.str59, %rdi
	callq	lookup_attribute
	testq	%rax, %rax
	je	.LBB17_9
# BB#10:                                # %if.then25
	movq	32(%rax), %rax
	movq	32(%rax), %rax
	movq	32(%rax), %rdx
	movl	%edx, 4(%rbx)
	jmp	.LBB17_11
.LBB17_9:                               # %if.then21.if.end31_crit_edge
	movl	4(%rbx), %edx
.LBB17_11:                              # %if.end31
	testq	%r14, %r14
	movl	%r12d, 24(%rbx)
	jne	.LBB17_12
# BB#13:                                # %if.end31
	movabsq	$1, %rax
	jmp	.LBB17_14
.LBB17_12:
	movabsq	$0, %rax
.LBB17_14:                              # %if.end31
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdx
	je	.LBB17_23
# BB#15:                                # %if.end31
	testq	%rax, %rax
	jne	.LBB17_23
# BB#16:                                # %for.cond.preheader
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.LBB17_26
# BB#17:                                # %for.body.lr.ph
	movq	global_trees+216(%rip), %rcx
	.align	16, 0x90
.LBB17_18:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rsi
	movq	(%rsi), %rax
	testq	%rax, %rax
	jne	.LBB17_18
# BB#19:                                # %land.lhs.true43
	movq	32(%rsi), %rax
	cmpq	%rcx, %rax
	je	.LBB17_23
# BB#20:                                # %if.then48
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB17_22
# BB#21:                                # %if.then51
	xorq	%rdx, %rdx
	movl	%edx, 4(%rbx)
.LBB17_22:                              # %if.end53
	movq	$1, %rax
	movl	%eax, 24(%rbx)
.LBB17_23:                              # %if.end56
	testq	%r14, %r14
	jne	.LBB17_25
# BB#24:                                # %if.end56
	testq	%r15, %r15
	je	.LBB17_27
.LBB17_25:                              # %lor.lhs.false
	testq	%r14, %r14
	je	.LBB17_28
.LBB17_26:                              # %land.lhs.true61
	cmpq	$0, 24(%r14)
	jne	.LBB17_28
.LBB17_27:                              # %if.then65
	movq	$1, %rax
	movl	%eax, 24(%rbx)
.LBB17_28:                              # %if.end67
	cmpq	$0, ix86_debug_arg_string(%rip)
	je	.LBB17_29
# BB#30:                                # %if.then70
	movq	stderr(%rip), %rdi
	movabsq	$.L.str64, %rsi
	xorq	%rax, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	fprintf  # TAILCALL
.LBB17_29:                              # %if.end73
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB17_1:                               # %if.then
	movq	stderr(%rip), %r12
	movabsq	$.L.str60, %rdi
	movq	$23, %rsi
	movq	$1, %rdx
	movq	%r12, %rcx
	callq	fwrite
	testq	%r14, %r14
	jne	.LBB17_2
# BB#3:                                 # %if.else
	movabsq	$.L.str62, %rdi
	movq	$9, %rsi
	movq	$1, %rdx
	movq	%r12, %rcx
	callq	fwrite
	jmp	.LBB17_4
.LBB17_2:                               # %if.then1
	movq	8(%r14), %rax
	movzbl	16(%r14), %ecx
	movzbl	16(%rax), %eax
	movq	tree_code_name(,%rcx,8), %rdx
	movq	tree_code_name(,%rax,8), %rcx
	movabsq	$.L.str61, %rsi
	xorq	%rax, %rax
	movq	%r12, %rdi
	callq	fprintf
.LBB17_4:                               # %if.end
	testq	%r15, %r15
	je	.LBB17_6
# BB#5:                                 # %if.then12
	movq	8(%r15), %rdx
	movabsq	$.L.str63, %rsi
	xorq	%rax, %rax
	movq	%r12, %rdi
	callq	fprintf
	jmp	.LBB17_6
.Ltmp191:
	.size	init_cumulative_args, .Ltmp191-init_cumulative_args
	.cfi_endproc

	.globl	function_arg_advance
	.align	16, 0x90
	.type	function_arg_advance,@function
function_arg_advance:                   # @function_arg_advance
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp198:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp199:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp200:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp201:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp202:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp203:
	.cfi_def_cfa_offset 80
.Ltmp204:
	.cfi_offset %rbx, -48
.Ltmp205:
	.cfi_offset %r12, -40
.Ltmp206:
	.cfi_offset %r13, -32
.Ltmp207:
	.cfi_offset %r14, -24
.Ltmp208:
	.cfi_offset %r15, -16
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%rbx, %rax
	andq	%r13, %rax
	cmpq	$51, %rax
	jne	.LBB18_2
# BB#1:                                 # %cond.true
	movq	%r12, %rdi
	callq	int_size_in_bytes
	jmp	.LBB18_3
.LBB18_2:                               # %cond.false
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %eax
.LBB18_3:                               # %cond.end
	movl	target_flags(%rip), %esi
	movq	$23, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
	movq	%rax, %r14
	cmpq	$0, ix86_debug_arg_string(%rip)
	jne	.LBB18_4
.LBB18_5:                               # %if.end
	testq	$33554432, %rsi         # imm = 0x2000000
	je	.LBB18_19
# BB#6:                                 # %if.then15
	leaq	16(%rsp), %rdx
	xorq	%rcx, %rcx
	movq	$0, 8(%rsp)             # 8-byte Folded Spill
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	classify_argument
	testq	%r13, %rax
	je	.LBB18_18
# BB#7:                                 # %for.cond.preheader.i
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	movabsq	$0, %rdx
	jle	.LBB18_14
# BB#8:                                 # %for.body.lr.ph.i
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	decq	%rax
	movq	$0, 8(%rsp)             # 8-byte Folded Spill
	xorq	%rdx, %rdx
	jmp	.LBB18_9
.LBB18_19:                              # %if.else39
	testq	$327680, %rsi           # imm = 0x50000
	je	.LBB18_23
# BB#20:                                # %if.else39
	andq	%r13, %rbx
	cmpq	$6, %rbx
	jne	.LBB18_23
# BB#21:                                # %if.then46
	movl	12(%r15), %eax
	addq	%r14, %rax
	movl	%eax, 12(%r15)
	movslq	16(%r15), %rax
	leaq	-1(%rax), %rcx
	movl	%ecx, 16(%r15)
	movl	20(%r15), %ecx
	incq	%rcx
	cmpq	$1, %rax
	movl	%ecx, 20(%r15)
	jg	.LBB18_25
# BB#22:                                # %if.then55
	movq	$0, 16(%r15)
	jmp	.LBB18_25
.LBB18_23:                              # %if.else59
	movl	(%r15), %eax
	addq	%r14, %rax
	movl	%eax, (%r15)
	movl	4(%r15), %eax
	subq	%r14, %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movl	%eax, 4(%r15)
	movl	8(%r15), %eax
	movq	$32, %rcx
	sarq	%cl, %rdx
	addq	%r14, %rax
	testq	%rdx, %rdx
	movl	%eax, 8(%r15)
	jg	.LBB18_25
# BB#24:                                # %if.then69
	movq	$0, 4(%r15)
	jmp	.LBB18_25
.LBB18_4:                               # %if.then
	movq	stderr(%rip), %rdi
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	mode_name(,%rax,8), %r9
	movl	4(%r15), %r8d
	movl	(%r15), %ecx
	movabsq	$.L.str65, %rsi
	xorq	%rax, %rax
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rdx, (%rsp)
	movq	%r14, %rdx
	callq	fprintf
	movl	target_flags(%rip), %esi
	jmp	.LBB18_5
.LBB18_10:                              # %for.body.i
                                        #   in Loop: Header=BB18_9 Depth=1
	jmpq	*.LJTI18_0(,%rcx,8)
.LBB18_12:                              # %sw.bb1.i
                                        #   in Loop: Header=BB18_9 Depth=1
	incq	%rdx
	jmp	.LBB18_13
.LBB18_11:                              # %sw.bb.i
                                        #   in Loop: Header=BB18_9 Depth=1
	incq	8(%rsp)                 # 8-byte Folded Spill
	jmp	.LBB18_13
	.align	16, 0x90
.LBB18_9:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rsp,%rax,4), %ecx
	decq	%rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jbe	.LBB18_10
.LBB18_13:                              # %for.cond.backedge.i
                                        #   in Loop: Header=BB18_9 Depth=1
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	decq	%rax
	testq	%rsi, %rsi
	jg	.LBB18_9
.LBB18_14:                              # %if.else
	movslq	16(%r15), %rax
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rsi, %rax
	jl	.LBB18_18
# BB#15:                                # %land.lhs.true
	movslq	4(%r15), %rsi
	movq	$32, %rcx
	movq	8(%rsp), %rdi           # 8-byte Reload
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rsi
	jge	.LBB18_16
.LBB18_18:                              # %if.then18
	movl	(%r15), %eax
	addq	%r14, %rax
	movl	%eax, (%r15)
.LBB18_25:                              # %if.end74
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB18_16:                              # %if.then27
	movq	8(%rsp), %rcx           # 8-byte Reload
	subq	%rcx, %rsi
	movl	%esi, 4(%r15)
	subq	%rdx, %rax
	movl	%eax, 16(%r15)
	movl	8(%r15), %eax
	addq	%rcx, %rax
	movl	%eax, 8(%r15)
	movl	20(%r15), %eax
	addq	%rdx, %rax
	movl	%eax, 20(%r15)
	jmp	.LBB18_25
.LBB18_17:                              # %sw.bb8.i
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.examine_argument, %rcx
	movq	$1953, %rsi             # imm = 0x7A1
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp209:
	.size	function_arg_advance, .Ltmp209-function_arg_advance
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI18_0:
	.quad	.LBB18_11
	.quad	.LBB18_11
	.quad	.LBB18_12
	.quad	.LBB18_12
	.quad	.LBB18_12
	.quad	.LBB18_13
	.quad	.LBB18_18
	.quad	.LBB18_18
	.quad	.LBB18_17

	.text
	.globl	function_arg
	.align	16, 0x90
	.type	function_arg,@function
function_arg:                           # @function_arg
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp216:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp217:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp218:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp219:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp220:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp221:
	.cfi_def_cfa_offset 64
.Ltmp222:
	.cfi_offset %rbx, -48
.Ltmp223:
	.cfi_offset %r12, -40
.Ltmp224:
	.cfi_offset %r13, -32
.Ltmp225:
	.cfi_offset %r14, -24
.Ltmp226:
	.cfi_offset %r15, -16
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	movq	%rbx, %rax
	andq	%r14, %rax
	cmpq	$51, %rax
	jne	.LBB19_2
# BB#1:                                 # %cond.true
	movq	%r12, %rdi
	callq	int_size_in_bytes
	jmp	.LBB19_3
.LBB19_2:                               # %cond.false
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %eax
.LBB19_3:                               # %cond.end
	movl	target_flags(%rip), %esi
	andq	$33554432, %rsi         # imm = 0x2000000
	movq	$23, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	leaq	3(%rax,%rdi), %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
	movq	%rax, %r13
	testq	%r14, %rbx
	je	.LBB19_4
# BB#11:                                # %if.end
	testq	%r14, %rsi
	je	.LBB19_13
# BB#12:                                # %if.then30
	movslq	8(%r15), %rax
	movl	16(%r15), %r8d
	movl	4(%r15), %ecx
	movl	20(%r15), %esi
	leaq	x86_64_int_parameter_registers(,%rax,4), %r9
	xorq	%rdx, %rdx
	movq	%rsi, (%rsp)
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	construct_container
	jmp	.LBB19_21
.LBB19_4:                               # %if.then
	testq	%r14, %rsi
	je	.LBB19_10
# BB#5:                                 # %if.then11
	movl	24(%r15), %eax
	testq	%rax, %rax
	je	.LBB19_9
# BB#6:                                 # %cond.true13
	movslq	16(%r15), %rax
	testq	%rax, %rax
	js	.LBB19_7
# BB#8:                                 # %cond.false20
	movl	20(%r15), %r14d
	jmp	.LBB19_9
.LBB19_13:                              # %if.else36
	xorq	%r12, %r12
	leaq	-2(%rbx), %rax
	andq	%r14, %rax
	cmpq	$4, %rax
	jb	.LBB19_16
# BB#14:                                # %if.else36
	andq	%rbx, %r14
	cmpq	$6, %r14
	jne	.LBB19_15
# BB#18:                                # %sw.bb44
	movl	16(%r15), %eax
	testq	%rax, %rax
	je	.LBB19_22
# BB#19:                                # %if.then47
	movl	20(%r15), %esi
	movq	$6, %rdi
	jmp	.LBB19_20
.LBB19_10:                              # %if.else
	movq	const_int_rtx+504(%rip), %r12
	jmp	.LBB19_27
.LBB19_7:                               # %cond.true16
	movabsq	$4290772992, %rax       # imm = 0xFFC00000
	andq	%rax, %rsi
	movq	$22, %rcx
	shrq	%cl, %rsi
	movq	%rsi, %r14
.LBB19_9:                               # %cond.end24
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_CONST_INT  # TAILCALL
.LBB19_15:                              # %if.else36
	cmpq	$51, %r14
	jne	.LBB19_22
.LBB19_16:                              # %sw.bb
	movslq	4(%r15), %rax
	movq	$32, %rcx
	movq	%r13, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jg	.LBB19_22
# BB#17:                                # %if.then40
	movl	8(%r15), %esi
	movq	%rbx, %rdi
.LBB19_20:                              # %if.end51
	callq	gen_rtx_REG
.LBB19_21:                              # %if.end51
	movq	%rax, %r12
.LBB19_22:                              # %if.end51
	cmpq	$0, ix86_debug_arg_string(%rip)
	jne	.LBB19_23
.LBB19_27:                              # %return
	movq	%r12, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB19_23:                              # %if.then54
	movq	stderr(%rip), %r14
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	mode_name(,%rbx,8), %r9
	movl	4(%r15), %r8d
	movl	(%r15), %ecx
	movabsq	$.L.str66, %rsi
	xorq	%rax, %rax
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rdx, (%rsp)
	movq	%r14, %rdi
	movq	%r13, %rdx
	callq	fprintf
	testq	%r12, %r12
	jne	.LBB19_24
# BB#25:                                # %if.else66
	movabsq	$.L.str68, %rdi
	movq	$7, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	jmp	.LBB19_26
.LBB19_24:                              # %if.then61
	movl	8(%r12), %eax
	movq	reg_names(,%rax,8), %rdx
	movabsq	$.L.str67, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
.LBB19_26:                              # %if.end68
	movabsq	$.L.str69, %rdi
	movq	$3, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	jmp	.LBB19_27
.Ltmp227:
	.size	function_arg, .Ltmp227-function_arg
	.cfi_endproc

	.align	16, 0x90
	.type	construct_container,@function
construct_container:                    # @construct_container
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp234:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp235:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp236:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp237:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp238:
	.cfi_def_cfa_offset 48
	subq	$128, %rsp
.Ltmp239:
	.cfi_def_cfa_offset 176
.Ltmp240:
	.cfi_offset %rbx, -48
.Ltmp241:
	.cfi_offset %r12, -40
.Ltmp242:
	.cfi_offset %r13, -32
.Ltmp243:
	.cfi_offset %r14, -24
.Ltmp244:
	.cfi_offset %r15, -16
	movq	%r9, 24(%rsp)           # 8-byte Spill
	movq	%r8, 16(%rsp)           # 8-byte Spill
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rdx, (%rsp)            # 8-byte Spill
	movq	%rsi, %r14
	movq	%rdi, %r15
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movq	176(%rsp), %rcx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	%r15, %rax
	andq	%rbx, %rax
	cmpq	$51, %rax
	jne	.LBB20_2
# BB#1:                                 # %cond.true
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r14, %rdi
	callq	int_size_in_bytes
	jmp	.LBB20_3
.LBB20_2:                               # %cond.false
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %eax
.LBB20_3:                               # %cond.end
	movq	%rax, 8(%rsp)           # 8-byte Spill
	leaq	96(%rsp), %rdx
	xorq	%rcx, %rcx
	xorq	%r12, %r12
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	classify_argument
	cmpq	$0, ix86_debug_arg_string(%rip)
	jne	.LBB20_4
.LBB20_12:                              # %if.end17
	movq	%rax, 40(%rsp)          # 8-byte Spill
	testq	%rbx, %rax
	je	.LBB20_7
# BB#13:                                # %if.end20
	leaq	112(%rsp), %rdx
	xorq	%rcx, %rcx
	xorq	%r12, %r12
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	classify_argument
	testq	%rbx, %rax
	je	.LBB20_7
# BB#14:                                # %for.cond.preheader.i
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	movabsq	$0, %rdx
	movabsq	$0, %rsi
	jle	.LBB20_22
# BB#15:                                # %for.body.lr.ph.i
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	decq	%rax
	xorq	%rdx, %rdx
	xorq	%rsi, %rsi
	xorq	%r12, %r12
	.align	16, 0x90
.LBB20_16:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	112(%rsp,%rax,4), %ecx
	decq	%rcx
	andq	%rbx, %rcx
	cmpq	$8, %rcx
	jbe	.LBB20_17
.LBB20_21:                              # %for.cond.backedge.i
                                        #   in Loop: Header=BB20_16 Depth=1
	movq	$32, %rcx
	movq	%rax, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	decq	%rax
	testq	%rdi, %rdi
	jg	.LBB20_16
	jmp	.LBB20_22
.LBB20_17:                              # %for.body.i
                                        #   in Loop: Header=BB20_16 Depth=1
	jmpq	*.LJTI20_0(,%rcx,8)
.LBB20_19:                              # %sw.bb1.i
                                        #   in Loop: Header=BB20_16 Depth=1
	incq	%rdx
	jmp	.LBB20_21
.LBB20_18:                              # %sw.bb.i
                                        #   in Loop: Header=BB20_16 Depth=1
	incq	%rsi
	jmp	.LBB20_21
.LBB20_20:                              # %sw.bb4.i
                                        #   in Loop: Header=BB20_16 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	testq	%rbx, %rcx
	jne	.LBB20_21
	jmp	.LBB20_7
.LBB20_22:                              # %if.end24
	movq	$32, %rcx
	movq	32(%rsp), %rax          # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rax, %rsi
	jg	.LBB20_6
# BB#23:                                # %if.end24
	movq	$32, %rcx
	movq	16(%rsp), %rax          # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jg	.LBB20_6
# BB#24:                                # %if.end30
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	%r8, %rdx
	andq	%rbx, %rdx
	cmpq	$1, %rdx
	jne	.LBB20_34
# BB#25:                                # %if.end30
	movq	%r15, %rax
	andq	%rbx, %rax
	cmpq	$21, %rax
	je	.LBB20_34
# BB#26:                                # %if.then35
	movl	96(%rsp), %eax
	cmpq	$7, %rax
	ja	.LBB20_33
# BB#27:                                # %if.then35
	xorq	%r12, %r12
	jmpq	*.LJTI20_2(,%rax,8)
.LBB20_28:                              # %sw.bb
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %esi
	movq	%r15, %rdi
	jmp	.LBB20_42
.LBB20_34:                              # %if.end51
	cmpq	$2, %rdx
	jne	.LBB20_53
# BB#35:                                # %land.lhs.true54
	movq	96(%rsp), %rax
	movq	%rax, %rdi
	andq	%rbx, %rdi
	movq	$32, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	cmpq	$1, %rdi
	je	.LBB20_48
# BB#36:                                # %land.lhs.true54
	cmpq	$7, %rdi
	jne	.LBB20_37
# BB#39:                                # %land.lhs.true80
	cmpq	$8, %rsi
	jne	.LBB20_43
# BB#40:                                # %if.then84
	movq	$18, %rdi
	jmp	.LBB20_41
.LBB20_4:                               # %if.then
	movq	stderr(%rip), %rcx
	testq	%rbx, %rax
	jne	.LBB20_8
# BB#5:                                 # %if.end17.thread
	movabsq	$.L.str477, %rdi
	movq	$13, %rsi
	movq	$1, %rdx
	callq	fwrite
.LBB20_6:                               # %return
	xorq	%r12, %r12
	jmp	.LBB20_7
.LBB20_8:                               # %if.else
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movabsq	$.L.str478, %rdi
	movq	$8, %rsi
	movq	$1, %rdx
	movq	$1, %r13
	movq	%rcx, %r15
                                        # kill: RCX<def> R15<kill>
	movq	%rax, %rbx
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	callq	fwrite
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	%r15, %rbx
	jle	.LBB20_11
# BB#9:
	movq	40(%rsp), %r15          # 8-byte Reload
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r15
	.align	16, 0x90
.LBB20_10:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	92(%rsp,%r13,4), %eax
	movq	x86_64_reg_class_name(,%rax,8), %rdx
	xorq	%rax, %rax
	movq	%rbx, %rdi
	movabsq	$.L.str479, %rsi
	callq	fprintf
	movq	%r13, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	incq	%r13
	cmpq	%r15, %rax
	jne	.LBB20_10
.LBB20_11:                              # %for.end
	movq	$10, %rdi
	movq	%rbx, %rsi
	callq	fputc
	movq	56(%rsp), %r15          # 8-byte Reload
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	40(%rsp), %rax          # 8-byte Reload
	jmp	.LBB20_12
.LBB20_37:                              # %land.lhs.true54
	cmpq	$3, %rdi
	jne	.LBB20_44
# BB#38:                                # %land.lhs.true58
	cmpq	$6, %rsi
	movq	$3, %rax
	jne	.LBB20_44
.LBB20_29:                              # %sw.bb39
	movq	$32, %rcx
	movq	176(%rsp), %rdx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$8, %rax
	movq	$21, %rsi
	jl	.LBB20_31
# BB#30:                                # %sw.bb39
	movq	$37, %rsi
.LBB20_31:                              # %sw.bb39
	addq	%rdx, %rsi
	movq	%r15, %rdi
	jmp	.LBB20_42
.LBB20_32:                              # %sw.bb48
	movq	$8, %rsi
	movq	%r15, %rdi
	jmp	.LBB20_42
.LBB20_43:                              # %land.lhs.true89
	movq	%rax, %rcx
	andq	%rbx, %rcx
	cmpq	$1, %rcx
	jne	.LBB20_44
.LBB20_48:                              # %land.lhs.true93
	cmpq	$1, %rsi
	jne	.LBB20_53
# BB#49:                                # %land.lhs.true97
	movq	%r15, %rax
	andq	%rbx, %rax
	cmpq	$6, %rax
	je	.LBB20_51
# BB#50:                                # %land.lhs.true97
	cmpq	$28, %rax
	jne	.LBB20_53
.LBB20_51:                              # %land.lhs.true103
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %esi
	movl	4(%rax), %eax
	leaq	1(%rsi), %rcx
	andq	%rbx, %rcx
	cmpq	%rax, %rcx
	jne	.LBB20_53
# BB#52:                                # %if.then109
	movq	%r15, %rdi
	jmp	.LBB20_42
.LBB20_53:                              # %if.end112
	movq	96(%rsp), %rsi
	cmpq	$4, %rdx
	jne	.LBB20_54
# BB#55:                                # %if.end112
	movq	%rsi, %rax
	andq	%rbx, %rax
	cmpq	$7, %rax
	jne	.LBB20_56
# BB#57:                                # %land.lhs.true119
	movq	$7, %rax
	movq	$32, %rcx
	shrq	%cl, %rsi
	cmpq	$8, %rsi
	jne	.LBB20_44
# BB#58:                                # %land.lhs.true123
	movq	104(%rsp), %rcx
	movabsq	$34359738368, %rdx      # imm = 0x800000000
	addq	$7, %rdx
	cmpq	%rdx, %rcx
	jne	.LBB20_44
# BB#59:                                # %if.then131
	movq	$24, %rdi
.LBB20_41:                              # %return
	movq	$8, %rsi
.LBB20_42:                              # %return
	callq	gen_rtx_REG
	movq	%rax, %r12
	jmp	.LBB20_7
.LBB20_54:
	movq	%rsi, %rax
	jmp	.LBB20_44
.LBB20_56:
	movq	%rsi, %rax
.LBB20_44:                              # %for.cond134.preheader
	movq	$32, %rcx
	movq	%r8, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	xorq	%r14, %r14
	testq	%rdx, %rdx
	jle	.LBB20_70
# BB#45:                                # %for.body137.lr.ph
	leaq	-1(%r8), %rcx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	xorq	%r14, %r14
	xorq	%r12, %r12
	jmp	.LBB20_46
	.align	16, 0x90
.LBB20_88:                              # %for.inc241.for.body137_crit_edge
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movl	96(%rsp,%rax,4), %eax
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%r13, %rbx
.LBB20_46:                              # %for.body137
                                        # =>This Inner Loop Header: Depth=1
	andq	%rbx, %rax
	cmpq	$5, %rax
	ja	.LBB20_87
# BB#47:                                # %for.body137
                                        #   in Loop: Header=BB20_46 Depth=1
	jmpq	*.LJTI20_1(,%rax,8)
.LBB20_60:                              # %sw.bb140
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	$32, %rcx
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rdi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$3, %rcx
	movq	%r12, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movabsq	$34359738368, %rcx      # imm = 0x800000000
	addq	%rcx, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jle	.LBB20_62
# BB#61:                                # %if.then144
                                        #   in Loop: Header=BB20_46 Depth=1
	subq	%rbx, %rdi
	movq	$3, %rcx
	shlq	%cl, %rdi
	movq	$1, %rsi
	xorq	%rdx, %rdx
	callq	mode_for_size
	jmp	.LBB20_65
.LBB20_81:                              # %sw.bb208
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	$32, %rcx
	movq	32(%rsp), %rax          # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	%r12, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jge	.LBB20_83
# BB#82:                                # %land.lhs.true212
                                        #   in Loop: Header=BB20_46 Depth=1
	leaq	1(%r12), %r15
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movl	96(%rsp,%rax,4), %eax
	cmpq	$6, %rax
	movq	$6, %rdi
	je	.LBB20_84
.LBB20_83:                              # %if.else220
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	$5, %rdi
	movq	%r12, %r15
.LBB20_84:                              # %if.end221
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	%r8, %r13
	movq	$32, %rcx
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$8, %rax
	movq	$21, %rsi
	jl	.LBB20_86
# BB#85:                                # %if.end221
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	$37, %rsi
.LBB20_86:                              # %if.end221
                                        #   in Loop: Header=BB20_46 Depth=1
	addq	%rdx, %rsi
	movq	%rdx, %rbx
	callq	gen_rtx_REG
	movq	%rax, %r12
	movq	$35, %rcx
	movq	%r15, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$3, %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	$32, %rcx
	leaq	1(%r14), %rdx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	%rax, 64(%rsp,%r14,8)
	incq	%rbx
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r15, %r12
	jmp	.LBB20_77
.LBB20_73:                              # %sw.bb170
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	%r8, %r13
	movq	$32, %rcx
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$8, %rax
	movq	$21, %rsi
	jl	.LBB20_75
# BB#74:                                # %sw.bb170
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	$37, %rsi
.LBB20_75:                              # %sw.bb170
                                        #   in Loop: Header=BB20_46 Depth=1
	addq	%rdx, %rsi
	movq	$15, %rdi
	jmp	.LBB20_76
.LBB20_78:                              # %sw.bb189
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	%r8, %r13
	movq	$32, %rcx
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$8, %rax
	movq	$21, %rsi
	jl	.LBB20_80
# BB#79:                                # %sw.bb189
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	$37, %rsi
.LBB20_80:                              # %sw.bb189
                                        #   in Loop: Header=BB20_46 Depth=1
	addq	%rdx, %rsi
	movq	$16, %rdi
.LBB20_76:                              # %for.inc241
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	%rdx, %rbx
	callq	gen_rtx_REG
	movq	%rax, %r15
	movq	$35, %rcx
	movq	%r12, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$3, %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	leaq	1(%r14), %rdx
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	%rax, 64(%rsp,%r14,8)
	incq	%rbx
	movq	%rbx, 48(%rsp)          # 8-byte Spill
.LBB20_77:                              # %for.inc241
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	%rdx, %r14
	movq	%r13, %r8
	jmp	.LBB20_68
.LBB20_62:                              # %if.else149
                                        #   in Loop: Header=BB20_46 Depth=1
	cmpq	$2, %rax
	movabsq	$0, %rax
	je	.LBB20_64
# BB#63:                                # %if.else149
                                        #   in Loop: Header=BB20_46 Depth=1
	movabsq	$1, %rax
.LBB20_64:                              # %if.else149
                                        #   in Loop: Header=BB20_46 Depth=1
	orq	$4, %rax
.LBB20_65:                              # %if.end157
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	%rax, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$51, %rcx
	movq	$5, %rdi
	je	.LBB20_67
# BB#66:                                # %if.end157
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	%rax, %rdi
.LBB20_67:                              # %if.end157
                                        #   in Loop: Header=BB20_46 Depth=1
	movq	24(%rsp), %r15          # 8-byte Reload
	movl	(%r15), %esi
	callq	gen_rtx_REG
	movq	%rax, %r13
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_CONST_INT
	movq	$3, %rdi
	xorq	%rsi, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	leaq	1(%r14), %rdx
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	%rax, 64(%rsp,%r14,8)
	addq	$4, %r15
	movq	%r15, 24(%rsp)          # 8-byte Spill
	movq	%rdx, %r14
	movq	40(%rsp), %r8           # 8-byte Reload
.LBB20_68:                              # %for.inc241
                                        #   in Loop: Header=BB20_46 Depth=1
	incq	%r12
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	%r8, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %rax
	movq	56(%rsp), %r15          # 8-byte Reload
	jl	.LBB20_88
# BB#69:
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%r13, %rbx
.LBB20_70:                              # %for.end243
	movq	$32, %rcx
	movq	%r14, %r13
	shlq	%cl, %r13
	movq	$32, %rcx
	sarq	%cl, %r13
	movq	%r14, %rdi
	callq	rtvec_alloc
	movq	$39, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movq	%rax, %r12
	testq	%r13, %r13
	jle	.LBB20_7
# BB#71:                                # %for.body249.lr.ph
	movq	$1, %rax
	andq	%rbx, %r14
	.align	16, 0x90
.LBB20_72:                              # %for.body249
                                        # =>This Inner Loop Header: Depth=1
	movq	56(%rsp,%rax,8), %rcx
	movq	8(%r12), %rdx
	movq	%rcx, (%rdx,%rax,8)
	movq	%rax, %rcx
	andq	%rbx, %rcx
	incq	%rax
	cmpq	%r14, %rcx
	jne	.LBB20_72
.LBB20_7:                               # %return
	movq	%r12, %rax
	addq	$128, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB20_87:                              # %sw.default240
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.construct_container, %rdx
	movq	$2086, %rsi             # imm = 0x826
	callq	fancy_abort
.LBB20_33:                              # %sw.default
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.construct_container, %rdx
	movq	$2019, %rsi             # imm = 0x7E3
	callq	fancy_abort
.LBB20_89:                              # %sw.bb8.i
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.examine_argument, %rcx
	movq	$1953, %rsi             # imm = 0x7A1
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp245:
	.size	construct_container, .Ltmp245-construct_container
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI20_0:
	.quad	.LBB20_18
	.quad	.LBB20_18
	.quad	.LBB20_19
	.quad	.LBB20_19
	.quad	.LBB20_19
	.quad	.LBB20_21
	.quad	.LBB20_20
	.quad	.LBB20_20
	.quad	.LBB20_89
.LJTI20_1:
	.quad	.LBB20_68
	.quad	.LBB20_60
	.quad	.LBB20_60
	.quad	.LBB20_81
	.quad	.LBB20_73
	.quad	.LBB20_78
.LJTI20_2:
	.quad	.LBB20_7
	.quad	.LBB20_28
	.quad	.LBB20_28
	.quad	.LBB20_29
	.quad	.LBB20_29
	.quad	.LBB20_29
	.quad	.LBB20_33
	.quad	.LBB20_32

	.text
	.globl	ix86_function_arg_boundary
	.align	16, 0x90
	.type	ix86_function_arg_boundary,@function
ix86_function_arg_boundary:             # @ix86_function_arg_boundary
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp247:
	.cfi_def_cfa_offset 16
	movl	target_flags(%rip), %edx
	testq	$33554432, %rdx         # imm = 0x2000000
	movq	$32, %rax
	je	.LBB21_8
# BB#1:                                 # %if.end
	testq	%rsi, %rsi
	je	.LBB21_3
# BB#2:                                 # %if.then4
	movl	64(%rsi), %eax
	jmp	.LBB21_4
.LBB21_3:                               # %if.else
	callq	get_mode_alignment
	movl	target_flags(%rip), %edx
.LBB21_4:                               # %if.end7
	movq	$20, %rcx
	shrq	%cl, %rdx
	andq	$32, %rdx
	addq	$32, %rdx
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jl	.LBB21_6
# BB#5:                                 # %if.end7
	movq	%rax, %rdx
.LBB21_6:                               # %if.end7
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$128, %rax
	movq	$128, %rax
	jg	.LBB21_8
# BB#7:                                 # %if.end7
	movq	%rdx, %rax
.LBB21_8:                               # %return
	popq	%rdx
	retq
.Ltmp248:
	.size	ix86_function_arg_boundary, .Ltmp248-ix86_function_arg_boundary
	.cfi_endproc

	.globl	ix86_function_value_regno_p
	.align	16, 0x90
	.type	ix86_function_value_regno_p,@function
ix86_function_value_regno_p:            # @ix86_function_value_regno_p
	.cfi_startproc
# BB#0:                                 # %entry
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB22_1
# BB#7:                                 # %if.end
	movabsq	$4294967287, %rcx       # imm = 0xFFFFFFF7
	testq	%rcx, %rdi
	movq	$1, %rcx
	je	.LBB22_15
# BB#8:                                 # %lor.lhs.false10
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdi
	cmpq	$21, %rdi
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	jne	.LBB22_10
# BB#9:                                 # %lor.lhs.false10
	movq	%rsi, %rdx
.LBB22_10:                              # %lor.lhs.false10
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB22_12
# BB#11:                                # %lor.lhs.false10
	movq	%rsi, %rcx
.LBB22_12:                              # %lor.lhs.false10
	andq	%rdx, %rcx
	jne	.LBB22_15
# BB#13:                                # %lor.lhs.false10
	cmpq	$8, %rdi
	jne	.LBB22_15
# BB#14:                                # %land.rhs17
	andq	$32, %rax
	movq	$5, %rcx
	shrq	%cl, %rax
	movq	%rax, %rcx
	jmp	.LBB22_15
.LBB22_1:                               # %if.then
	movq	$1, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rdi
	je	.LBB22_15
# BB#2:                                 # %if.then
	andq	%rdx, %rdi
	cmpq	$8, %rdi
	jne	.LBB22_3
# BB#16:                                # %land.lhs.true
	andq	$32, %rax
	movq	$5, %rcx
	shrq	%cl, %rax
	retq
.LBB22_3:                               # %lor.rhs
	xorq	%rcx, %rcx
	cmpq	$21, %rdi
	jne	.LBB22_15
# BB#4:                                 # %land.rhs
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB22_5
# BB#6:                                 # %land.rhs
	movabsq	$1, %rcx
	jmp	.LBB22_15
.LBB22_5:
	movabsq	$0, %rcx
.LBB22_15:                              # %return
	andq	$1, %rcx
	movq	%rcx, %rax
	retq
.Ltmp249:
	.size	ix86_function_value_regno_p, .Ltmp249-ix86_function_value_regno_p
	.cfi_endproc

	.globl	ix86_function_value
	.align	16, 0x90
	.type	ix86_function_value,@function
ix86_function_value:                    # @ix86_function_value
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp252:
	.cfi_def_cfa_offset 16
	subq	$16, %rsp
.Ltmp253:
	.cfi_def_cfa_offset 32
.Ltmp254:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	60(%rbx), %edi
	movl	target_flags(%rip), %eax
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
	movq	%rax, %r8
	andq	$33554432, %r8          # imm = 0x2000000
	je	.LBB23_3
# BB#1:                                 # %if.then
	movabsq	$4290772992, %rax       # imm = 0xFFC00000
	andq	%rax, %r8
	movq	$22, %rcx
	shrq	%cl, %r8
	movabsq	$x86_64_int_return_registers, %r9
	movq	$1, %rdx
	movq	$6, %rcx
	movq	$0, (%rsp)
	movq	%rbx, %rsi
	callq	construct_container
	testq	%rax, %rax
	je	.LBB23_2
# BB#10:                                # %return
	addq	$16, %rsp
	popq	%rbx
	retq
.LBB23_3:                               # %if.else
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	%rdi, %rdx
	andq	%rbx, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$2, %rcx
	jne	.LBB23_5
# BB#4:                                 # %if.else
	andq	$32, %rax
	movq	$8, %rsi
	testq	%rbx, %rax
	jne	.LBB23_9
.LBB23_5:                               # %cond.false
	cmpq	$6, %rdx
	movq	$21, %rsi
	je	.LBB23_9
# BB#6:                                 # %cond.false
	cmpq	$7, %rcx
	je	.LBB23_9
# BB#7:                                 # %lor.rhs40
	cmpq	$8, %rcx
	movq	$21, %rsi
	je	.LBB23_9
	jmp	.LBB23_8
.LBB23_2:                               # %if.then7
	movl	60(%rbx), %edi
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
.LBB23_8:                               # %lor.rhs40
	xorq	%rsi, %rsi
.LBB23_9:                               # %cond.end
	addq	$16, %rsp
	popq	%rbx
	jmp	gen_rtx_REG  # TAILCALL
.Ltmp255:
	.size	ix86_function_value, .Ltmp255-ix86_function_value
	.cfi_endproc

	.globl	ix86_return_in_memory
	.align	16, 0x90
	.type	ix86_return_in_memory,@function
ix86_return_in_memory:                  # @ix86_return_in_memory
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp260:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp261:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp262:
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
.Ltmp263:
	.cfi_def_cfa_offset 48
.Ltmp264:
	.cfi_offset %rbx, -32
.Ltmp265:
	.cfi_offset %r14, -24
.Ltmp266:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movl	60(%rbx), %edi
	movzbl	target_flags+3(%rip), %eax
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
	testq	$2, %rax
	je	.LBB24_7
# BB#1:                                 # %if.then
	leaq	(%rsp), %rdx
	xorq	%rcx, %rcx
	movq	%rbx, %rsi
	callq	classify_argument
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$1, %r14
	je	.LBB24_15
# BB#2:                                 # %for.cond.preheader.i
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jle	.LBB24_14
# BB#3:                                 # %for.body.lr.ph.i
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	decq	%rax
	.align	16, 0x90
.LBB24_4:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rsp,%rax,4), %ecx
	cmpq	$9, %rcx
	je	.LBB24_6
# BB#5:                                 # %for.cond.backedge.i
                                        #   in Loop: Header=BB24_4 Depth=1
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	decq	%rax
	testq	%rdx, %rdx
	jg	.LBB24_4
	jmp	.LBB24_14
.LBB24_7:                               # %if.else
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rdi
	movq	$1, %r14
	cmpq	$51, %rdi
	je	.LBB24_15
# BB#8:                                 # %lor.lhs.false
	movl	mode_class(,%rdi,4), %eax
	addq	$-7, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB24_10
# BB#9:                                 # %land.lhs.true
	movq	%rbx, %rdi
	callq	int_size_in_bytes
	cmpq	$8, %rax
	je	.LBB24_15
.LBB24_10:                              # %lor.lhs.false25
	movq	%rbx, %rdi
	callq	int_size_in_bytes
	cmpq	$13, %rax
	jl	.LBB24_14
# BB#11:                                # %land.lhs.true28
	movl	60(%rbx), %eax
	movq	$9, %rcx
	shrq	%cl, %rax
	andq	$127, %rax
	cmpq	$6, %rax
	je	.LBB24_14
# BB#12:                                # %land.lhs.true28
	andq	%r15, %rax
	cmpq	$18, %rax
	je	.LBB24_14
# BB#13:                                # %land.lhs.true42
	movl	mode_class(,%rax,4), %eax
	addq	$-7, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB24_15
.LBB24_14:                              # %if.end
	xorq	%r14, %r14
.LBB24_15:                              # %return
	movq	%r14, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB24_6:                               # %sw.bb8.i
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.examine_argument, %rcx
	movq	$1953, %rsi             # imm = 0x7A1
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp267:
	.size	ix86_return_in_memory, .Ltmp267-ix86_return_in_memory
	.cfi_endproc

	.globl	ix86_libcall_value
	.align	16, 0x90
	.type	ix86_libcall_value,@function
ix86_libcall_value:                     # @ix86_libcall_value
	.cfi_startproc
# BB#0:                                 # %entry
	movl	target_flags(%rip), %edx
	testq	$33554432, %rdx         # imm = 0x2000000
	je	.LBB25_5
# BB#1:                                 # %if.then
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	$24, %rcx
	ja	.LBB25_4
# BB#2:                                 # %if.then
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$6389760, %rdx          # imm = 0x618000
	je	.LBB25_3
# BB#12:                                # %sw.bb
	movq	$21, %rsi
	jmp	gen_rtx_REG  # TAILCALL
.LBB25_5:                               # %if.else
	movq	$32, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movl	mode_class(,%rax,4), %eax
	cmpq	$2, %rax
	jne	.LBB25_7
# BB#6:                                 # %if.else
	andq	$32, %rdx
	movq	$8, %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdx
	jne	.LBB25_11
.LBB25_7:                               # %cond.false
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	$6, %rcx
	movq	$21, %rsi
	je	.LBB25_11
# BB#8:                                 # %cond.false
	cmpq	$7, %rax
	je	.LBB25_11
# BB#9:                                 # %lor.rhs10
	cmpq	$8, %rax
	movq	$21, %rsi
	je	.LBB25_11
# BB#10:                                # %lor.rhs10
	xorq	%rsi, %rsi
.LBB25_11:                              # %cond.end
	jmp	gen_rtx_REG  # TAILCALL
.LBB25_3:                               # %if.then
	shlq	%cl, %rax
	testq	$17039360, %rax         # imm = 0x1040000
	je	.LBB25_4
# BB#13:                                # %sw.bb1
	movq	$8, %rsi
	jmp	gen_rtx_REG  # TAILCALL
.LBB25_4:                               # %sw.default
	xorq	%rsi, %rsi
	jmp	gen_rtx_REG  # TAILCALL
.Ltmp268:
	.size	ix86_libcall_value, .Ltmp268-ix86_libcall_value
	.cfi_endproc

	.globl	ix86_build_va_list
	.align	16, 0x90
	.type	ix86_build_va_list,@function
ix86_build_va_list:                     # @ix86_build_va_list
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp275:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp276:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp277:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp278:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp279:
	.cfi_def_cfa_offset 48
.Ltmp280:
	.cfi_offset %rbx, -48
.Ltmp281:
	.cfi_offset %r12, -40
.Ltmp282:
	.cfi_offset %r13, -32
.Ltmp283:
	.cfi_offset %r14, -24
.Ltmp284:
	.cfi_offset %r15, -16
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB26_1
# BB#2:                                 # %if.end
	movq	$20, %rdi
	callq	make_lang_type
	movq	%rax, %rbx
	movabsq	$.L.str70, %rdi
	callq	get_identifier
	movq	$33, %rdi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	callq	build_decl
	movq	%rax, %r14
	movabsq	$.L.str71, %rdi
	callq	get_identifier
	movq	integer_types+48(%rip), %rdx
	movq	$37, %rdi
	movq	%rax, %rsi
	callq	build_decl
	movq	%rax, %r15
	movabsq	$.L.str72, %rdi
	callq	get_identifier
	movq	integer_types+48(%rip), %rdx
	movq	$37, %rdi
	movq	%rax, %rsi
	callq	build_decl
	movq	%rax, %r12
	movabsq	$.L.str73, %rdi
	callq	get_identifier
	movq	global_trees+224(%rip), %rdx
	movq	$37, %rdi
	movq	%rax, %rsi
	callq	build_decl
	movq	%rax, %r13
	movabsq	$.L.str74, %rdi
	callq	get_identifier
	movq	global_trees+224(%rip), %rdx
	movq	$37, %rdi
	movq	%rax, %rsi
	callq	build_decl
	movq	%rbx, 80(%r15)
	movq	%rbx, 80(%r12)
	movq	%rbx, 80(%r13)
	movq	%rbx, 80(%rax)
	movq	%r14, (%rbx)
	movq	%r14, 96(%rbx)
	movq	%r15, 24(%rbx)
	movq	%r12, (%r15)
	movq	%r13, (%r12)
	movq	%rax, (%r13)
	movq	%rbx, %rdi
	callq	layout_type
	movq	global_trees+120(%rip), %rdi
	callq	build_index_type
	movq	%rbx, %rdi
	movq	%rax, %rsi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	build_array_type  # TAILCALL
.LBB26_1:                               # %if.then
	movq	integer_types(%rip), %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	build_pointer_type  # TAILCALL
.Ltmp285:
	.size	ix86_build_va_list, .Ltmp285-ix86_build_va_list
	.cfi_endproc

	.globl	ix86_setup_incoming_varargs
	.align	16, 0x90
	.type	ix86_setup_incoming_varargs,@function
ix86_setup_incoming_varargs:            # @ix86_setup_incoming_varargs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp292:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp293:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp294:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp295:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp296:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp297:
	.cfi_def_cfa_offset 96
.Ltmp298:
	.cfi_offset %rbx, -48
.Ltmp299:
	.cfi_offset %r12, -40
.Ltmp300:
	.cfi_offset %r13, -32
.Ltmp301:
	.cfi_offset %r14, -24
.Ltmp302:
	.cfi_offset %r15, -16
	movzbl	target_flags+3(%rip), %eax
	movq	%r8, %r12
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	testq	$2, %rax
	je	.LBB27_18
# BB#1:                                 # %if.end
	movq	cfun(%rip), %rax
	movq	392(%rax), %rax
	movq	$1, %rcx
	movl	%ecx, 1416(%rax)
	movq	current_function_decl(%rip), %rax
	movq	8(%rax), %rax
	movq	24(%rax), %rdi
	testq	%rdi, %rdi
	je	.LBB27_4
# BB#2:                                 # %land.rhs
	callq	tree_last
	movl	24(%rbx), %ecx
	movq	32(%rax), %rax
	movl	%ecx, 40(%rsp)
	movq	16(%rbx), %rcx
	movq	global_trees+216(%rip), %rdx
	movq	%rcx, 32(%rsp)
	movq	(%rbx), %rcx
	movq	8(%rbx), %rsi
	cmpq	%rdx, %rax
	movq	%rsi, 24(%rsp)
	movq	%rcx, 16(%rsp)
	je	.LBB27_5
# BB#3:                                 # %if.then7
	leaq	16(%rsp), %rdi
	movq	$1, %rcx
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	function_arg_advance
	jmp	.LBB27_5
.LBB27_4:                               # %if.end8.critedge
	movl	24(%rbx), %eax
	movl	%eax, 40(%rsp)
	movq	16(%rbx), %rax
	movq	%rax, 32(%rsp)
	movq	(%rbx), %rax
	movq	8(%rbx), %rcx
	movq	%rcx, 24(%rsp)
	movq	%rax, 16(%rsp)
.LBB27_5:                               # %if.end8
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r12
	je	.LBB27_6
# BB#7:                                 # %if.end8
	xorq	%r15, %r15
	jmp	.LBB27_8
.LBB27_6:
	movq	global_rtl+24(%rip), %r15
.LBB27_8:                               # %if.end8
	callq	get_varargs_alias_set
	movslq	24(%rsp), %r13
	movslq	ix86_regparm(%rip), %rcx
	movq	%rax, %r14
	cmpq	%rcx, %r13
	jge	.LBB27_11
# BB#9:                                 # %for.body.lr.ph
	movq	$32, %rcx
	movq	%r14, %r12
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	incq	%r13
	.align	16, 0x90
.LBB27_10:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	target_flags(%rip), %eax
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	movq	%rax, %rbx
	shrq	%cl, %rbx
	orq	$4, %rbx
	movq	$23, %rcx
	shrq	%cl, %rax
	addq	$4, %rax
	leaq	-1(%r13), %rsi
	imulq	%rax, %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	%r15, %rdi
	callq	plus_constant_wide
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	set_mem_alias_set
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movl	x86_64_int_parameter_registers-4(,%r13,4), %esi
	callq	gen_rtx_REG
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movslq	ix86_regparm(%rip), %rax
	movq	$32, %rcx
	movq	%r13, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	incq	%r13
	cmpq	%rax, %rdx
	jl	.LBB27_10
.LBB27_11:                              # %for.end
	movl	32(%rsp), %eax
	testq	%rax, %rax
	je	.LBB27_18
# BB#12:                                # %if.then30
	callq	gen_label_rtx
	movl	target_flags(%rip), %esi
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$67, %rdi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_u00
	movl	target_flags(%rip), %edi
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movl	target_flags(%rip), %edi
	movq	%rax, %r13
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r12
	movq	$2, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_REG
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	gen_zero_extendqidi2
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	xorq	%rdi, %rdi
	movq	$4, %rsi
	callq	gen_rtx_CONST_INT
	movq	$78, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rbx
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movl	36(%rsp), %esi
	movq	$32, %rcx
	movq	%rsi, %r13
	shlq	%cl, %r13
	movq	$32, %rcx
	sarq	%cl, %r13
	testq	%rsi, %rsi
	je	.LBB27_14
# BB#13:                                # %if.then55
	movq	$34, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$75, %rdi
	movq	$5, %rsi
	movq	(%rsp), %rdx            # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	$58, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%r12, %rdi
	movq	%rax, %rsi
	jmp	.LBB27_15
.LBB27_18:                              # %if.end90
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB27_14:                              # %if.else
	movq	%r12, %rdi
	movq	(%rsp), %rsi            # 8-byte Reload
.LBB27_15:                              # %if.end64
	callq	emit_move_insn
	movq	%r12, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	callq	gen_subdi3
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movl	target_flags(%rip), %edx
	movq	%rax, %rbx
	andq	$33554432, %rdx         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rdx
	testq	%rdx, %rdx
	movq	$175, %rsi
	jne	.LBB27_17
# BB#16:                                # %if.end64
	movq	$151, %rsi
.LBB27_17:                              # %if.end64
	movq	%r15, %rdi
	callq	plus_constant_wide
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	$-127, %rsi
	movq	%rbx, %rdi
	callq	plus_constant_wide
	movq	$51, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	set_mem_alias_set
	movl	target_flags(%rip), %esi
	movq	$20, %rcx
	shrq	%cl, %rsi
	andq	$32, %rsi
	addq	$32, %rsi
	movq	%rbx, %rdi
	callq	set_mem_align
	xorq	%rdi, %rdi
	movq	%r13, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	movq	8(%rsp), %rcx           # 8-byte Reload
	callq	gen_sse_prologue_save
	movq	%rax, %rdi
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_insn  # TAILCALL
.Ltmp303:
	.size	ix86_setup_incoming_varargs, .Ltmp303-ix86_setup_incoming_varargs
	.cfi_endproc

	.globl	ix86_va_start
	.align	16, 0x90
	.type	ix86_va_start,@function
ix86_va_start:                          # @ix86_va_start
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp310:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp311:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp312:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp313:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp314:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp315:
	.cfi_def_cfa_offset 80
.Ltmp316:
	.cfi_offset %rbx, -48
.Ltmp317:
	.cfi_offset %r12, -40
.Ltmp318:
	.cfi_offset %r13, -32
.Ltmp319:
	.cfi_offset %r14, -24
.Ltmp320:
	.cfi_offset %r15, -16
	movzbl	target_flags+3(%rip), %ecx
	movq	%rsi, %rax
	testq	$2, %rcx
	je	.LBB28_8
# BB#1:                                 # %if.end
	movq	global_trees+248(%rip), %rcx
	movq	8(%rcx), %rcx
	movq	24(%rcx), %rbx
	movq	(%rbx), %r15
	movq	(%r15), %r13
	movq	8(%rax), %rcx
	movq	(%r13), %r14
	movq	8(%rcx), %rsi
	movq	$41, %rdi
	movq	%rax, %rdx
	callq	build1
	movq	8(%rbx), %rsi
	movq	%rax, %r12
	movq	$39, %rdi
	xorq	%rax, %rax
	movq	%r12, %rdx
	movq	%rbx, %rcx
	callq	build
	movq	8(%r15), %rsi
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$39, %rdi
	xorq	%rax, %rax
	movq	%r12, %rdx
	movq	%r15, %rcx
	callq	build
	movq	8(%r13), %rsi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	$39, %rdi
	xorq	%rax, %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	callq	build
	movq	8(%r14), %rsi
	movq	%rax, %r13
	movq	$39, %rdi
	xorq	%rax, %rax
	movq	%r12, %rdx
	movq	%r14, %rcx
	callq	build
	movq	cfun(%rip), %rcx
	movslq	88(%rcx), %rdx
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movslq	96(%rcx), %rbx
	movslq	108(%rcx), %r12
	cmpq	$0, ix86_debug_arg_string(%rip)
	movq	%rax, (%rsp)            # 8-byte Spill
	jne	.LBB28_2
.LBB28_3:                               # %if.end34
	movq	8(%rsp), %r14           # 8-byte Reload
	movq	8(%r14), %r15
	movq	$3, %rcx
	shlq	%cl, %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	build_int_2_wide
	movq	%rax, %rcx
	movq	$48, %rdi
	xorq	%rax, %rax
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	build
	movl	16(%rax), %ecx
	orq	$256, %rcx              # imm = 0x100
	movl	%ecx, 16(%rax)
	movq	const_int_rtx+512(%rip), %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	8(%rdx), %r15
	movq	$4, %rcx
	movl	target_flags(%rip), %eax
	shlq	%cl, %r12
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	movq	$48, %rdi
	movq	%rdx, %rbx
	jne	.LBB28_5
# BB#4:                                 # %if.end34
	movq	$24, %rdi
.LBB28_5:                               # %if.end34
	addq	%r12, %rdi
	xorq	%rsi, %rsi
	callq	build_int_2_wide
	movq	%rax, %rcx
	movq	$48, %rdi
	xorq	%rax, %rax
	movq	%r15, %rsi
	movq	%rbx, %rdx
	callq	build
	movl	16(%rax), %ecx
	orq	$256, %rcx              # imm = 0x100
	movl	%ecx, 16(%rax)
	movq	const_int_rtx+512(%rip), %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movq	8(%r13), %rdi
	movq	global_rtl+48(%rip), %rsi
	callq	make_tree
	movq	%rax, %rbx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	24(%rsp), %rdx          # 8-byte Reload
	testq	%rax, %rdx
	je	.LBB28_7
# BB#6:                                 # %if.then61
	movl	target_flags(%rip), %eax
	movq	8(%r13), %r15
	movq	$23, %rcx
	shrq	%cl, %rax
	andq	$4, %rax
	addq	$4, %rax
	movabsq	$4294967292, %rdi       # imm = 0xFFFFFFFC
	andq	%rax, %rdi
	imulq	%rdx, %rdi
	xorq	%rsi, %rsi
	callq	build_int_2_wide
	movq	%rax, %rcx
	movq	$59, %rdi
	xorq	%rax, %rax
	movq	%r15, %rsi
	movq	%rbx, %rdx
	callq	build
	movq	%rax, %rbx
.LBB28_7:                               # %return
	movq	8(%r13), %rsi
	movq	$48, %rdi
	xorq	%rax, %rax
	movq	%r13, %rdx
	movq	%rbx, %rcx
	callq	build
	movl	16(%rax), %ecx
	orq	$256, %rcx              # imm = 0x100
	movl	%ecx, 16(%rax)
	movq	const_int_rtx+512(%rip), %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movq	(%rsp), %rbx            # 8-byte Reload
	movq	8(%rbx), %rdi
	movq	global_rtl+24(%rip), %rsi
	callq	make_tree
	movq	8(%rbx), %rsi
	movq	%rax, %rcx
	movq	$48, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rdx
	callq	build
	movl	16(%rax), %ecx
	orq	$256, %rcx              # imm = 0x100
	movl	%ecx, 16(%rax)
	movq	const_int_rtx+512(%rip), %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movq	cfun(%rip), %rax
	movq	$128, %rcx
	movl	%ecx, 404(%rax)
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB28_8:                               # %if.then
	movq	%rax, %rsi
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	std_expand_builtin_va_start  # TAILCALL
.LBB28_2:                               # %if.then29
	movq	stderr(%rip), %rdi
	movabsq	$.L.str75, %rsi
	xorq	%rax, %rax
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	%rbx, %rcx
	movq	%r12, %r8
	callq	fprintf
	jmp	.LBB28_3
.Ltmp321:
	.size	ix86_va_start, .Ltmp321-ix86_va_start
	.cfi_endproc

	.globl	ix86_va_arg
	.align	16, 0x90
	.type	ix86_va_arg,@function
ix86_va_arg:                            # @ix86_va_arg
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp328:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp329:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp330:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp331:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp332:
	.cfi_def_cfa_offset 48
	subq	$144, %rsp
.Ltmp333:
	.cfi_def_cfa_offset 192
.Ltmp334:
	.cfi_offset %rbx, -48
.Ltmp335:
	.cfi_offset %r12, -40
.Ltmp336:
	.cfi_offset %r13, -32
.Ltmp337:
	.cfi_offset %r14, -24
.Ltmp338:
	.cfi_offset %r15, -16
	movzbl	target_flags+3(%rip), %ecx
	movq	%rsi, %r12
	movq	%rdi, %rax
	testq	$2, %rcx
	je	.LBB29_1
# BB#2:                                 # %if.end
	movq	global_trees+248(%rip), %rcx
	movq	8(%rcx), %rcx
	movq	24(%rcx), %rbx
	movq	(%rbx), %r13
	movq	(%r13), %r15
	movq	8(%rax), %rcx
	movq	(%r15), %r14
	movq	8(%rcx), %rsi
	movq	$41, %rdi
	movq	%rax, %rdx
	callq	build1
	movq	8(%rbx), %rsi
	movq	%r12, 88(%rsp)          # 8-byte Spill
	movq	%rax, %r12
	movq	$39, %rdi
	xorq	%rax, %rax
	movq	%r12, %rdx
	movq	%rbx, %rcx
	callq	build
	movq	8(%r13), %rsi
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	$39, %rdi
	xorq	%rax, %rax
	movq	%r12, %rdx
	movq	%r13, %rcx
	callq	build
	movq	8(%r15), %rsi
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	$39, %rdi
	xorq	%rax, %rax
	movq	%r12, %rdx
	movq	%r15, %rcx
	callq	build
	movq	8(%r14), %rsi
	movq	%rax, %r13
	movq	$39, %rdi
	xorq	%rax, %rax
	movq	%r12, %rdx
	movq	88(%rsp), %r12          # 8-byte Reload
	movq	%r14, %rcx
	callq	build
	movq	%rax, %rbx
	movq	%r12, %rdi
	callq	int_size_in_bytes
	movl	target_flags(%rip), %r8d
	andq	$33554432, %r8          # imm = 0x2000000
	movq	$25, %rcx
	movq	%r8, %rsi
	shrq	%cl, %rsi
	movq	$23, %rcx
	movq	%r8, %rdi
	shrq	%cl, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cqto
	idivq	%rdi
	movq	%rax, 56(%rsp)          # 8-byte Spill
	movl	60(%r12), %edi
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
	leaq	3(%rsi,%rsi,2), %rax
	movq	$22, %rcx
	shrq	%cl, %r8
	movabsq	$ix86_va_arg.intreg, %r9
	xorq	%rdx, %rdx
	movq	$0, (%rsp)
	movq	%r12, %rsi
	movq	%rax, %rcx
	callq	construct_container
	movl	target_flags(%rip), %edi
	movq	%rax, %r15
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
	testq	%r15, %r15
	je	.LBB29_3
# BB#4:                                 # %if.then44
	movq	%r15, 120(%rsp)         # 8-byte Spill
	callq	gen_label_rtx
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	gen_label_rtx
	movl	60(%r12), %edi
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
	leaq	128(%rsp), %rdx
	xorq	%rcx, %rcx
	movq	%r12, %rsi
	callq	classify_argument
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	movq	$1, %r15
	jle	.LBB29_5
# BB#6:                                 # %for.body.lr.ph.i
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	decq	%rax
	xorq	%r11, %r11
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	$0, 32(%rsp)            # 8-byte Folded Spill
	jmp	.LBB29_7
.LBB29_1:                               # %if.then
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	std_expand_builtin_va_arg
	jmp	.LBB29_87
.LBB29_3:
	movq	$0, 72(%rsp)            # 8-byte Folded Spill
	jmp	.LBB29_66
.LBB29_5:
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	$0, 32(%rsp)            # 8-byte Folded Spill
	movq	%r14, 80(%rsp)          # 8-byte Spill
	xorq	%r11, %r11
	jmp	.LBB29_15
.LBB29_8:                               # %for.body.i
                                        #   in Loop: Header=BB29_7 Depth=1
	jmpq	*.LJTI29_0(,%rcx,8)
.LBB29_10:                              # %sw.bb1.i
                                        #   in Loop: Header=BB29_7 Depth=1
	incq	32(%rsp)                # 8-byte Folded Spill
	jmp	.LBB29_11
.LBB29_9:                               # %sw.bb.i
                                        #   in Loop: Header=BB29_7 Depth=1
	incq	%r11
	jmp	.LBB29_11
	.align	16, 0x90
.LBB29_7:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	128(%rsp,%rax,4), %ecx
	decq	%rcx
	andq	%rdx, %rcx
	cmpq	$8, %rcx
	jbe	.LBB29_8
.LBB29_11:                              # %for.cond.backedge.i
                                        #   in Loop: Header=BB29_7 Depth=1
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	decq	%rax
	testq	%rsi, %rsi
	jg	.LBB29_7
.LBB29_12:                              # %examine_argument.exit
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	%r14, 80(%rsp)          # 8-byte Spill
	testq	%rdx, %r11
	je	.LBB29_13
# BB#14:                                # %land.lhs.true
	movl	64(%r12), %eax
	xorq	%r15, %r15
	cmpq	$64, %rax
	ja	.LBB29_22
	jmp	.LBB29_15
.LBB29_13:
	xorq	%r11, %r11
.LBB29_15:                              # %lor.end
	movl	64(%r12), %eax
	cmpq	$128, %rax
	jbe	.LBB29_16
# BB#17:                                # %lor.end
	movabsq	$1, %rax
	jmp	.LBB29_18
.LBB29_16:
	movabsq	$0, %rax
.LBB29_18:                              # %lor.end
	ja	.LBB29_21
# BB#19:                                # %land.lhs.true61
	movq	%r12, %r10
	movq	120(%rsp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %ecx
	cmpq	$61, %rcx
	je	.LBB29_20
# BB#23:                                # %if.then66
	movq	8(%rdx), %rdx
	movq	8(%rdx), %rsi
	movq	8(%rsi), %rcx
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB29_32
# BB#24:                                # %if.then66
	movq	$1, %rdi
	shlq	%cl, %rdi
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdi
	je	.LBB29_32
# BB#25:                                # %for.cond.preheader
	movslq	(%rdx), %r9
	testq	%r9, %r9
	jle	.LBB29_20
# BB#26:                                # %for.body.preheader
	xorq	%rbx, %rbx
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	%r10, %r12
	jmp	.LBB29_27
	.align	16, 0x90
.LBB29_31:                              # %for.inc.for.body_crit_edge
                                        #   in Loop: Header=BB29_27 Depth=1
	movq	16(%rdx,%rbx,8), %rsi
	xorq	%rax, %rax
	movq	%rdi, %rbx
.LBB29_27:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rcx
	movl	8(%rcx), %ecx
	leaq	21(%rbx), %rdi
	andq	%r8, %rdi
	cmpq	%rdi, %rcx
	jne	.LBB29_22
# BB#28:                                # %lor.lhs.false136
                                        #   in Loop: Header=BB29_27 Depth=1
	movq	16(%rsi), %rcx
	movq	8(%rcx), %rsi
	movq	$36, %rcx
	movq	%rbx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rsi
	jne	.LBB29_22
# BB#29:                                # %for.inc
                                        #   in Loop: Header=BB29_27 Depth=1
	leaq	1(%rbx), %rdi
	movq	$32, %rcx
	movq	%rdi, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%r9, %rsi
	jge	.LBB29_21
# BB#30:                                # %for.inc
                                        #   in Loop: Header=BB29_27 Depth=1
	testq	%r8, %rax
	je	.LBB29_31
	jmp	.LBB29_21
.LBB29_32:                              # %for.cond148.preheader
	movslq	(%rdx), %r9
	testq	%r9, %r9
	jle	.LBB29_20
# BB#33:                                # %for.body159.preheader
	xorq	%rbx, %rbx
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	%r10, %r12
	jmp	.LBB29_34
	.align	16, 0x90
.LBB29_38:                              # %for.inc188.for.body159_crit_edge
                                        #   in Loop: Header=BB29_34 Depth=1
	movq	16(%rdx,%rbx,8), %rsi
	xorq	%rax, %rax
	movq	%rdi, %rbx
.LBB29_34:                              # %for.body159
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rcx
	movl	8(%rcx), %edi
	movq	%rbx, %rcx
	andq	%r8, %rcx
	cmpq	%rcx, %rdi
	jne	.LBB29_22
# BB#35:                                # %lor.lhs.false175
                                        #   in Loop: Header=BB29_34 Depth=1
	movq	16(%rsi), %rcx
	movq	8(%rcx), %rsi
	movq	$35, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rsi
	jne	.LBB29_22
# BB#36:                                # %for.inc188
                                        #   in Loop: Header=BB29_34 Depth=1
	leaq	1(%rbx), %rdi
	movq	$32, %rcx
	movq	%rdi, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%r9, %rsi
	jge	.LBB29_21
# BB#37:                                # %for.inc188
                                        #   in Loop: Header=BB29_34 Depth=1
	testq	%r8, %rax
	je	.LBB29_38
	jmp	.LBB29_21
.LBB29_20:
	movq	%r10, %r12
.LBB29_21:                              # %if.end192
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB29_39
.LBB29_22:                              # %if.else195
	movq	%r11, 24(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movl	target_flags(%rip), %edi
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	testq	%r15, %r15
	movq	$1, %r14
	je	.LBB29_40
	jmp	.LBB29_41
.LBB29_39:                              # %if.end204
	movq	%r11, 24(%rsp)          # 8-byte Spill
	movq	$0, 88(%rsp)            # 8-byte Folded Spill
	movq	$1, %r14
	testq	%r15, %r15
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	%rax, 96(%rsp)          # 8-byte Spill
	jne	.LBB29_41
.LBB29_40:                              # %if.then206
	xorq	%rsi, %rsi
	movq	$4, %rdx
	xorq	%rcx, %rcx
	xorq	%r14, %r14
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	expand_expr
	movq	%rax, %rbx
	movl	target_flags(%rip), %eax
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rax
	leaq	3(%rax,%rax,2), %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	subq	%rcx, %rax
	movq	$3, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movabsq	$34359738368, %rsi      # imm = 0x800000000
	addq	%rax, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	const_int_rtx+520(%rip), %rcx
	movq	$104, %rdx
	movq	$4, %r8
	movq	$1, %r9
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	%rsi, (%rsp)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_cmp_and_jump_insns
.LBB29_41:                              # %if.end216
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	32(%rsp), %r15          # 8-byte Reload
	testq	%rax, %r15
	je	.LBB29_45
# BB#42:                                # %if.then218
	xorq	%rsi, %rsi
	movq	$4, %rdx
	xorq	%rcx, %rcx
	movq	64(%rsp), %rdi          # 8-byte Reload
	callq	expand_expr
	movq	%rax, %rbx
	movl	target_flags(%rip), %eax
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	movq	$22, %rcx
	shrq	%cl, %rax
	subq	%r15, %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	testq	%rdx, %rdx
	movq	$64, %rsi
	jne	.LBB29_44
# BB#43:                                # %if.then218
	movq	$40, %rsi
.LBB29_44:                              # %if.then218
	addq	%rax, %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	const_int_rtx+520(%rip), %rcx
	movq	$104, %rdx
	movq	$4, %r8
	movq	$1, %r9
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	%rsi, (%rsp)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_cmp_and_jump_insns
.LBB29_45:                              # %if.end233
	testq	%r14, %r14
	movq	112(%rsp), %rbx         # 8-byte Reload
	jne	.LBB29_48
# BB#46:                                # %if.then235
	movq	global_trees+224(%rip), %rsi
	movq	$59, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rdx
	movq	40(%rsp), %rcx          # 8-byte Reload
	callq	build
	movl	target_flags(%rip), %edx
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$4, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	movq	%rbx, %r15
	movq	%r12, %rbx
	movq	%r13, %r12
	movq	%r14, %r13
	movq	104(%rsp), %r14         # 8-byte Reload
	movq	%r14, %rsi
	callq	expand_expr
	cmpq	%r14, %rax
	movq	%r13, %r14
	movq	%r12, %r13
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	32(%rsp), %r15          # 8-byte Reload
	je	.LBB29_48
# BB#47:                                # %if.then243
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	emit_move_insn
.LBB29_48:                              # %if.end246
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r15
	je	.LBB29_51
# BB#49:                                # %if.then248
	movq	global_trees+224(%rip), %rsi
	movq	$59, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rdx
	movq	64(%rsp), %rcx          # 8-byte Reload
	callq	build
	movl	target_flags(%rip), %edx
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$4, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	movq	96(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	callq	expand_expr
	cmpq	%rbx, %rax
	je	.LBB29_51
# BB#50:                                # %if.then256
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	emit_move_insn
.LBB29_51:                              # %if.end259
	cmpq	$0, 88(%rsp)            # 8-byte Folded Reload
	je	.LBB29_61
# BB#52:                                # %if.then261
	xorq	%rsi, %rsi
	movq	$1, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r15
	movq	%r12, %rdi
	callq	assign_temp
	movq	8(%rax), %rsi
	movq	%rsi, 80(%rsp)          # 8-byte Spill
	movq	$51, %rdi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	callq	get_varargs_alias_set
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	set_mem_alias_set
	movq	$8, %rsi
	movq	%rbx, %rdi
	callq	set_mem_align
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	jle	.LBB29_53
# BB#54:
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	%r12, 88(%rsp)          # 8-byte Spill
	movq	%r13, 16(%rsp)          # 8-byte Spill
	.align	16, 0x90
.LBB29_55:                              # %for.body276
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax,%r15,8), %r14
	movq	8(%r14), %rax
	movl	8(%rax), %ebx
	movzbl	2(%rax), %r13d
	cmpq	$52, %rbx
	ja	.LBB29_58
# BB#56:                                # %for.body276
                                        #   in Loop: Header=BB29_55 Depth=1
	movq	$1, %rax
	movq	%rbx, %rcx
	shlq	%cl, %rax
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rax
	je	.LBB29_58
# BB#57:                                # %if.then314
                                        #   in Loop: Header=BB29_55 Depth=1
	movq	$4, %rcx
	shlq	%cl, %rbx
	addq	$-336, %rbx             # imm = 0xFFFFFFFFFFFFFEB0
	movq	96(%rsp), %rsi          # 8-byte Reload
	jmp	.LBB29_59
	.align	16, 0x90
.LBB29_58:                              # %if.else320
                                        #   in Loop: Header=BB29_55 Depth=1
	movq	$3, %rcx
	shlq	%cl, %rbx
	movq	104(%rsp), %rsi         # 8-byte Reload
.LBB29_59:                              # %if.end325
                                        #   in Loop: Header=BB29_55 Depth=1
	movq	%r13, %rdi
	callq	gen_rtx_MEM
	movq	%rax, %r12
	callq	get_varargs_alias_set
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	set_mem_alias_set
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%rbx, %rdx
	callq	adjust_address_1
	movq	16(%r14), %rcx
	movq	8(%rcx), %rdx
	movq	%rax, %rbx
	movq	$1, %rcx
	movq	$1, %r8
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	%r13, %rsi
	callq	adjust_address_1
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	emit_move_insn
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%r15, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%r15
	cmpq	%rdx, %rsi
	jl	.LBB29_55
# BB#60:
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	88(%rsp), %r12          # 8-byte Reload
	movq	32(%rsp), %r15          # 8-byte Reload
	movq	8(%rsp), %r14           # 8-byte Reload
	jmp	.LBB29_61
.LBB29_53:
	movq	32(%rsp), %r15          # 8-byte Reload
.LBB29_61:                              # %if.end341
	testq	%r14, %r14
	jne	.LBB29_63
# BB#62:                                # %if.then343
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	8(%rbx), %r14
	movq	$35, %rcx
	movq	24(%rsp), %rdi          # 8-byte Reload
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	xorq	%rsi, %rsi
	callq	build_int_2_wide
	movq	%rax, %rcx
	movq	$59, %rdi
	xorq	%rax, %rax
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	build
	movq	8(%rbx), %rsi
	movq	%rax, %rcx
	movq	$48, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rdx
	callq	build
	movl	16(%rax), %ecx
	orq	$256, %rcx              # imm = 0x100
	movl	%ecx, 16(%rax)
	movq	const_int_rtx+512(%rip), %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
.LBB29_63:                              # %if.end357
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r15
	movq	%r15, %rdi
	movq	120(%rsp), %r15         # 8-byte Reload
	je	.LBB29_65
# BB#64:                                # %if.then359
	movq	64(%rsp), %rbx          # 8-byte Reload
	movq	8(%rbx), %r14
	movq	$36, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	xorq	%rsi, %rsi
	callq	build_int_2_wide
	movq	%rax, %rcx
	movq	$59, %rdi
	xorq	%rax, %rax
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	build
	movq	8(%rbx), %rsi
	movq	%rax, %rcx
	movq	$48, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rdx
	callq	build
	movl	16(%rax), %ecx
	orq	$256, %rcx              # imm = 0x100
	movl	%ecx, 16(%rax)
	movq	const_int_rtx+512(%rip), %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
.LBB29_65:                              # %if.end375
	movq	72(%rsp), %rdi          # 8-byte Reload
	callq	gen_jump
	movq	%rax, %rdi
	callq	emit_jump_insn
	callq	emit_barrier
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	emit_label
	movq	80(%rsp), %r14          # 8-byte Reload
.LBB29_66:                              # %if.end380
	movl	target_flags(%rip), %edx
	testq	$33554432, %rdx         # imm = 0x2000000
	movq	%r13, %rdi
	je	.LBB29_82
# BB#67:                                # %if.end.i
	testq	%r12, %r12
	je	.LBB29_69
# BB#68:                                # %if.then4.i
	movl	64(%r12), %eax
	jmp	.LBB29_70
.LBB29_69:                              # %if.else.i
	xorq	%rdi, %rdi
	callq	get_mode_alignment
	movl	target_flags(%rip), %edx
.LBB29_70:                              # %if.end7.i
	movq	$20, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$32, %rsi
	addq	$32, %rsi
	movq	$32, %rcx
	movq	%rax, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rsi, %rdi
	jl	.LBB29_72
# BB#71:                                # %if.end7.i
	movq	%rax, %rsi
.LBB29_72:                              # %if.end7.i
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$65, %rsi
	movq	%r13, %rdi
	jl	.LBB29_82
# BB#73:                                # %if.else385
	movq	%r12, %rax
	movq	%r14, 80(%rsp)          # 8-byte Spill
	movq	%r15, %r12
	testq	$33554432, %rdx         # imm = 0x2000000
	movq	$4, %rbx
	je	.LBB29_81
# BB#74:                                # %if.end.i561
	testq	%rax, %rax
	je	.LBB29_76
# BB#75:                                # %if.then4.i563
	movl	64(%rax), %eax
	jmp	.LBB29_77
.LBB29_76:                              # %if.else.i566
	xorq	%rdi, %rdi
	callq	get_mode_alignment
	movl	target_flags(%rip), %edx
.LBB29_77:                              # %if.end7.i573
	movq	$20, %rcx
	shrq	%cl, %rdx
	andq	$32, %rdx
	addq	$32, %rdx
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jl	.LBB29_79
# BB#78:                                # %if.end7.i573
	movq	%rax, %rdx
.LBB29_79:                              # %if.end7.i573
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$60, %rcx
	movq	%rsi, %rax
	shrq	%cl, %rax
	andq	$7, %rax
	addq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$35, %rcx
	sarq	%cl, %rax
	cmpq	$128, %rsi
	movq	$16, %rbx
	jg	.LBB29_81
# BB#80:                                # %if.end7.i573
	movq	%rax, %rbx
.LBB29_81:                              # %ix86_function_arg_boundary.exit575
	movq	8(%r13), %r14
	leaq	-1(%rbx), %rdi
	xorq	%rsi, %rsi
	callq	build_int_2_wide
	movq	%rax, %rcx
	movq	$59, %rdi
	xorq	%rax, %rax
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	build
	movq	%rax, %r14
	movq	8(%r14), %r15
	negq	%rbx
	movq	$-1, %rsi
	movq	%rbx, %rdi
	callq	build_int_2_wide
	movq	%rax, %rcx
	movq	$88, %rdi
	xorq	%rax, %rax
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	build
	movq	%rax, %rdi
	movq	%r12, %r15
	movq	80(%rsp), %r14          # 8-byte Reload
.LBB29_82:                              # %if.end400
	callq	save_expr
	movl	target_flags(%rip), %edx
	movq	%rax, %rbx
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$4, %rdx
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	expand_expr
	cmpq	%r14, %rax
	je	.LBB29_84
# BB#83:                                # %if.then408
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
.LBB29_84:                              # %if.end410
	movq	%r14, %r12
	movq	8(%rbx), %r14
	movl	target_flags(%rip), %edi
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	addq	$4, %rdi
	movq	56(%rsp), %rax          # 8-byte Reload
	imulq	%rax, %rdi
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	xorq	%rsi, %rsi
	callq	build_int_2_wide
	movq	%rax, %rcx
	movq	$59, %rdi
	xorq	%rax, %rax
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	build
	movq	8(%r13), %rsi
	movq	%rax, %rcx
	movq	$48, %rdi
	xorq	%rax, %rax
	movq	%r13, %rdx
	callq	build
	movl	16(%rax), %ecx
	orq	$256, %rcx              # imm = 0x100
	movl	%ecx, 16(%rax)
	movq	const_int_rtx+512(%rip), %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	testq	%r15, %r15
	je	.LBB29_86
# BB#85:                                # %if.then430
	movq	72(%rsp), %rdi          # 8-byte Reload
	callq	emit_label
.LBB29_86:                              # %return
	movq	%r12, %rax
.LBB29_87:                              # %return
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB29_88:                              # %sw.bb8.i
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.examine_argument, %rcx
	movq	$1953, %rsi             # imm = 0x7A1
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp339:
	.size	ix86_va_arg, .Ltmp339-ix86_va_arg
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI29_0:
	.quad	.LBB29_9
	.quad	.LBB29_9
	.quad	.LBB29_10
	.quad	.LBB29_10
	.quad	.LBB29_10
	.quad	.LBB29_11
	.quad	.LBB29_12
	.quad	.LBB29_12
	.quad	.LBB29_88

	.text
	.globl	x86_64_general_operand
	.align	16, 0x90
	.type	x86_64_general_operand,@function
x86_64_general_operand:                 # @x86_64_general_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp342:
	.cfi_def_cfa_offset 16
.Ltmp343:
	.cfi_offset %rbx, -16
	movzbl	target_flags+3(%rip), %eax
	movq	%rdi, %rbx
	testq	$2, %rax
	je	.LBB30_3
# BB#1:                                 # %if.end
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB30_4
# BB#2:                                 # %return
	movq	$1, %rax
	popq	%rbx
	retq
.LBB30_3:                               # %if.then
	movq	%rbx, %rdi
	popq	%rbx
	jmp	general_operand  # TAILCALL
.LBB30_4:                               # %if.end4
	movq	%rbx, %rdi
	popq	%rbx
	jmp	x86_64_sign_extended_value  # TAILCALL
.Ltmp344:
	.size	x86_64_general_operand, .Ltmp344-x86_64_general_operand
	.cfi_endproc

	.globl	x86_64_sign_extended_value
	.align	16, 0x90
	.type	x86_64_sign_extended_value,@function
x86_64_sign_extended_value:             # @x86_64_sign_extended_value
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp347:
	.cfi_def_cfa_offset 16
.Ltmp348:
	.cfi_offset %rbx, -16
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jg	.LBB31_13
# BB#1:                                 # %entry
	cmpq	$54, %rax
	jne	.LBB31_2
# BB#16:                                # %sw.bb
	movq	8(%rdi), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	movq	%rax, %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	trunc_int_for_mode
	cmpq	%rbx, %rax
	jne	.LBB31_17
# BB#18:                                # %sw.bb
	movabsq	$1, %rax
	popq	%rbx
	retq
.LBB31_13:                              # %entry
	cmpq	$67, %rax
	jne	.LBB31_14
# BB#19:                                # %sw.bb7
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$4, %rcx
	je	.LBB31_20
# BB#21:                                # %sw.bb7
	movabsq	$1, %rax
	popq	%rbx
	retq
.LBB31_2:                               # %entry
	cmpq	$58, %rax
	jne	.LBB31_29
# BB#3:                                 # %sw.bb12
	movq	8(%rdi), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	je	.LBB31_8
# BB#4:                                 # %sw.bb12
	cmpq	$42, %rdx
	jne	.LBB31_29
# BB#5:                                 # %land.lhs.true
	movq	8(%rcx), %rax
	movl	(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB31_29
# BB#6:                                 # %land.lhs.true26
	movl	16(%rcx), %eax
	cmpq	$15, %rax
	movq	$1, %rax
	je	.LBB31_30
# BB#7:                                 # %if.else
	cmpq	$75, %rdx
	jne	.LBB31_29
.LBB31_8:                               # %if.then41
	movl	ix86_cmodel(%rip), %eax
	cmpq	$4, %rax
	je	.LBB31_29
# BB#9:                                 # %if.end
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$54, %rdx
	jne	.LBB31_29
# BB#10:                                # %if.end62
	movq	8(%rcx), %rbx
	movq	8(%rax), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	movzbl	(%rbx), %ecx
	movq	%rax, %rbx
	cmpq	$67, %rcx
	jne	.LBB31_11
# BB#22:                                # %sw.bb92
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB31_23
	jmp	.LBB31_26
.LBB31_14:                              # %entry
	cmpq	$68, %rax
	movabsq	$0, %rax
	jne	.LBB31_30
# BB#15:                                # %sw.bb2
	movl	ix86_cmodel(%rip), %eax
	decq	%rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	sbbq	%rax, %rax
	andq	$1, %rax
	popq	%rbx
	retq
.LBB31_17:
	movabsq	$0, %rax
	popq	%rbx
	retq
.LBB31_20:
	movabsq	$0, %rax
	popq	%rbx
	retq
.LBB31_11:                              # %if.end62
	cmpq	$68, %rcx
	jne	.LBB31_29
# BB#12:                                # %sw.bb69
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB31_26
.LBB31_23:                              # %sw.bb92
	cmpq	$1073741823, %rbx       # imm = 0x3FFFFFFF
	jg	.LBB31_26
# BB#24:                                # %land.lhs.true100
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	trunc_int_for_mode
	cmpq	%rbx, %rax
	movq	$1, %rax
	je	.LBB31_30
# BB#25:                                # %land.lhs.true100.if.end105_crit_edge
	movl	ix86_cmodel(%rip), %eax
.LBB31_26:                              # %if.end105
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB31_29
# BB#27:                                # %if.end105
	testq	%rbx, %rbx
	jle	.LBB31_29
# BB#28:                                # %land.lhs.true111
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	trunc_int_for_mode
	cmpq	%rbx, %rax
	movq	$1, %rax
	je	.LBB31_30
.LBB31_29:                              # %if.end118
	xorq	%rax, %rax
.LBB31_30:                              # %return
	popq	%rbx
	retq
.Ltmp349:
	.size	x86_64_sign_extended_value, .Ltmp349-x86_64_sign_extended_value
	.cfi_endproc

	.globl	x86_64_szext_general_operand
	.align	16, 0x90
	.type	x86_64_szext_general_operand,@function
x86_64_szext_general_operand:           # @x86_64_szext_general_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp353:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp354:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp355:
	.cfi_def_cfa_offset 32
.Ltmp356:
	.cfi_offset %rbx, -24
.Ltmp357:
	.cfi_offset %r14, -16
	movzbl	target_flags+3(%rip), %eax
	movq	%rdi, %rbx
	testq	$2, %rax
	je	.LBB32_24
# BB#1:                                 # %if.end
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	movq	$1, %rax
	jne	.LBB32_23
# BB#2:                                 # %if.end4
	movq	%rbx, %rdi
	callq	x86_64_sign_extended_value
	testq	%r14, %rax
	movq	$1, %rax
	jne	.LBB32_23
# BB#3:                                 # %lor.rhs
	movzbl	(%rbx), %ecx
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jg	.LBB32_14
# BB#4:                                 # %lor.rhs
	cmpq	$54, %rcx
	jne	.LBB32_5
# BB#18:                                # %sw.bb1.i
	movl	12(%rbx), %eax
	testq	%rax, %rax
	je	.LBB32_22
# BB#19:
	movabsq	$0, %rax
	jmp	.LBB32_23
.LBB32_24:                              # %if.then
	movq	%rbx, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	general_operand  # TAILCALL
.LBB32_14:                              # %lor.rhs
	cmpq	$67, %rcx
	jne	.LBB32_15
# BB#20:                                # %sw.bb3.i
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB32_22
# BB#21:
	movabsq	$0, %rax
	jmp	.LBB32_23
.LBB32_5:                               # %lor.rhs
	cmpq	$58, %rcx
	jne	.LBB32_23
# BB#6:                                 # %sw.bb8.i
	movq	8(%rbx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB32_13
# BB#7:                                 # %if.then.i
	movl	ix86_cmodel(%rip), %edx
	cmpq	$4, %rdx
	je	.LBB32_23
# BB#8:                                 # %if.end.i
	movq	8(%rcx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$67, %rsi
	jne	.LBB32_23
# BB#9:                                 # %sw.bb33.i
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rax, %rdx
	cmpq	$1, %rdx
	jne	.LBB32_13
# BB#10:                                # %land.lhs.true.i
	movq	16(%rcx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB32_13
# BB#11:                                # %land.lhs.true42.i
	movq	8(%rbx), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	cmpq	$-65535, %rax           # imm = 0xFFFFFFFFFFFF0001
	jl	.LBB32_13
# BB#12:                                # %land.lhs.true48.i
	movq	8(%rbx), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	movq	8(%rbx), %rcx
	cmpq	%rcx, %rax
	movq	$1, %rax
	je	.LBB32_23
.LBB32_13:                              # %if.end60.i
	xorq	%rax, %rax
	jmp	.LBB32_23
.LBB32_15:                              # %lor.rhs
	cmpq	$68, %rcx
	jne	.LBB32_23
# BB#16:                                # %sw.bb2.i
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB32_17
.LBB32_22:                              # %sw.bb3.i
	movabsq	$1, %rax
	jmp	.LBB32_23
.LBB32_17:
	movabsq	$0, %rax
.LBB32_23:                              # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp358:
	.size	x86_64_szext_general_operand, .Ltmp358-x86_64_szext_general_operand
	.cfi_endproc

	.globl	x86_64_zero_extended_value
	.align	16, 0x90
	.type	x86_64_zero_extended_value,@function
x86_64_zero_extended_value:             # @x86_64_zero_extended_value
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp361:
	.cfi_def_cfa_offset 16
.Ltmp362:
	.cfi_offset %rbx, -16
	movzbl	(%rdi), %ecx
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jg	.LBB33_11
# BB#1:                                 # %entry
	cmpq	$54, %rcx
	jne	.LBB33_2
# BB#15:                                # %sw.bb1
	movl	12(%rdi), %eax
	testq	%rax, %rax
	je	.LBB33_19
# BB#16:
	movabsq	$0, %rax
	popq	%rbx
	retq
.LBB33_11:                              # %entry
	cmpq	$67, %rcx
	jne	.LBB33_12
# BB#17:                                # %sw.bb3
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB33_19
# BB#18:
	movabsq	$0, %rax
	popq	%rbx
	retq
.LBB33_2:                               # %entry
	cmpq	$58, %rcx
	jne	.LBB33_20
# BB#3:                                 # %sw.bb8
	movq	8(%rdi), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB33_10
# BB#4:                                 # %if.then
	movl	ix86_cmodel(%rip), %edx
	cmpq	$4, %rdx
	je	.LBB33_20
# BB#5:                                 # %if.end
	movq	8(%rcx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$67, %rsi
	jne	.LBB33_20
# BB#6:                                 # %sw.bb33
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rax, %rdx
	cmpq	$1, %rdx
	jne	.LBB33_10
# BB#7:                                 # %land.lhs.true
	movq	16(%rcx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB33_10
# BB#8:                                 # %land.lhs.true42
	movq	8(%rbx), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	cmpq	$-65535, %rax           # imm = 0xFFFFFFFFFFFF0001
	jl	.LBB33_10
# BB#9:                                 # %land.lhs.true48
	movq	8(%rbx), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	movq	8(%rbx), %rcx
	cmpq	%rcx, %rax
	movq	$1, %rax
	je	.LBB33_20
.LBB33_10:                              # %if.end60
	xorq	%rax, %rax
	popq	%rbx
	retq
.LBB33_12:                              # %entry
	cmpq	$68, %rcx
	jne	.LBB33_20
# BB#13:                                # %sw.bb2
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB33_14
.LBB33_19:                              # %sw.bb3
	movabsq	$1, %rax
.LBB33_20:                              # %return
	popq	%rbx
	retq
.LBB33_14:
	movabsq	$0, %rax
	popq	%rbx
	retq
.Ltmp363:
	.size	x86_64_zero_extended_value, .Ltmp363-x86_64_zero_extended_value
	.cfi_endproc

	.globl	x86_64_nonmemory_operand
	.align	16, 0x90
	.type	x86_64_nonmemory_operand,@function
x86_64_nonmemory_operand:               # @x86_64_nonmemory_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp366:
	.cfi_def_cfa_offset 16
.Ltmp367:
	.cfi_offset %rbx, -16
	movzbl	target_flags+3(%rip), %eax
	movq	%rdi, %rbx
	testq	$2, %rax
	je	.LBB34_3
# BB#1:                                 # %if.end
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB34_4
# BB#2:                                 # %return
	movq	$1, %rax
	popq	%rbx
	retq
.LBB34_3:                               # %if.then
	movq	%rbx, %rdi
	popq	%rbx
	jmp	nonmemory_operand  # TAILCALL
.LBB34_4:                               # %if.end4
	movq	%rbx, %rdi
	popq	%rbx
	jmp	x86_64_sign_extended_value  # TAILCALL
.Ltmp368:
	.size	x86_64_nonmemory_operand, .Ltmp368-x86_64_nonmemory_operand
	.cfi_endproc

	.globl	x86_64_movabs_operand
	.align	16, 0x90
	.type	x86_64_movabs_operand,@function
x86_64_movabs_operand:                  # @x86_64_movabs_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp373:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp374:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp375:
	.cfi_def_cfa_offset 32
.Ltmp376:
	.cfi_offset %rbx, -32
.Ltmp377:
	.cfi_offset %r14, -24
.Ltmp378:
	.cfi_offset %r15, -16
	movl	target_flags(%rip), %eax
	movq	%rdi, %rbx
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB35_12
# BB#1:                                 # %entry
	movl	flag_pic(%rip), %eax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB35_12
# BB#2:                                 # %if.end
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB35_11
# BB#3:                                 # %lor.lhs.false4
	movq	%rbx, %rdi
	callq	x86_64_sign_extended_value
	testq	%r15, %rax
	jne	.LBB35_11
# BB#4:                                 # %if.end8
	movzbl	(%rbx), %ecx
	cmpq	$133, %rcx
	jg	.LBB35_7
# BB#5:                                 # %if.end8
	addq	$-54, %rcx
	andq	%r15, %rcx
	cmpq	$14, %rcx
	ja	.LBB35_10
# BB#6:                                 # %if.end8
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB35_9
	jmp	.LBB35_10
.LBB35_12:                              # %if.then
	movq	%rbx, %rdi
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	nonmemory_operand  # TAILCALL
.LBB35_7:                               # %if.end8
	cmpq	$134, %rcx
	je	.LBB35_9
# BB#8:                                 # %if.end8
	cmpq	$140, %rcx
	jne	.LBB35_10
.LBB35_9:                               # %land.lhs.true
	movq	%rbx, %rdi
	callq	symbolic_reference_mentioned_p
	testq	%r15, %rax
	je	.LBB35_11
.LBB35_10:                              # %if.end40
	xorq	%r14, %r14
.LBB35_11:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp379:
	.size	x86_64_movabs_operand, .Ltmp379-x86_64_movabs_operand
	.cfi_endproc

	.globl	symbolic_reference_mentioned_p
	.align	16, 0x90
	.type	symbolic_reference_mentioned_p,@function
symbolic_reference_mentioned_p:         # @symbolic_reference_mentioned_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp386:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp387:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp388:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp389:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp390:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp391:
	.cfi_def_cfa_offset 64
.Ltmp392:
	.cfi_offset %rbx, -48
.Ltmp393:
	.cfi_offset %r12, -40
.Ltmp394:
	.cfi_offset %r13, -32
.Ltmp395:
	.cfi_offset %r14, -24
.Ltmp396:
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movzbl	(%r15), %edx
	leaq	-67(%rdx), %rcx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	movq	$1, %rax
	jb	.LBB36_13
# BB#1:                                 # %if.end
	movzbl	rtx_length(%rdx), %r12d
	testq	%r12, %r12
	je	.LBB36_2
# BB#3:                                 # %for.body.lr.ph
	movq	rtx_format(,%rdx,8), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB36_4:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_9 Depth 2
	movq	%r12, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movzbl	-1(%rcx,%rax), %ecx
	leaq	-1(%rax), %r12
	cmpq	$69, %rcx
	jne	.LBB36_5
# BB#8:                                 # %if.then17
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%r15,%rax,8), %r13
	movslq	(%r13), %r14
	.align	16, 0x90
.LBB36_9:                               # %for.cond21
                                        #   Parent Loop BB36_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB36_6
# BB#10:                                # %for.body24
                                        #   in Loop: Header=BB36_9 Depth=2
	movq	(%r13,%r14,8), %rdi
	decq	%r14
	callq	symbolic_reference_mentioned_p
	testq	%rbx, %rax
	je	.LBB36_9
	jmp	.LBB36_12
	.align	16, 0x90
.LBB36_5:                               # %for.body
                                        #   in Loop: Header=BB36_4 Depth=1
	cmpq	$101, %rcx
	jne	.LBB36_6
# BB#11:                                # %land.lhs.true
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	(%r15,%rax,8), %rdi
	callq	symbolic_reference_mentioned_p
	testq	%rbx, %rax
	jne	.LBB36_12
.LBB36_6:                               # %for.cond.backedge
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB36_4
# BB#7:
	xorq	%rax, %rax
	jmp	.LBB36_13
.LBB36_12:
	movq	$1, %rax
	jmp	.LBB36_13
.LBB36_2:
	xorq	%rax, %rax
.LBB36_13:                              # %return
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp397:
	.size	symbolic_reference_mentioned_p, .Ltmp397-symbolic_reference_mentioned_p
	.cfi_endproc

	.globl	x86_64_szext_nonmemory_operand
	.align	16, 0x90
	.type	x86_64_szext_nonmemory_operand,@function
x86_64_szext_nonmemory_operand:         # @x86_64_szext_nonmemory_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp401:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp402:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp403:
	.cfi_def_cfa_offset 32
.Ltmp404:
	.cfi_offset %rbx, -24
.Ltmp405:
	.cfi_offset %r14, -16
	movzbl	target_flags+3(%rip), %eax
	movq	%rdi, %rbx
	testq	$2, %rax
	je	.LBB37_24
# BB#1:                                 # %if.end
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	movq	$1, %rax
	jne	.LBB37_23
# BB#2:                                 # %if.end4
	movq	%rbx, %rdi
	callq	x86_64_sign_extended_value
	testq	%r14, %rax
	movq	$1, %rax
	jne	.LBB37_23
# BB#3:                                 # %lor.rhs
	movzbl	(%rbx), %ecx
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jg	.LBB37_14
# BB#4:                                 # %lor.rhs
	cmpq	$54, %rcx
	jne	.LBB37_5
# BB#18:                                # %sw.bb1.i
	movl	12(%rbx), %eax
	testq	%rax, %rax
	je	.LBB37_22
# BB#19:
	movabsq	$0, %rax
	jmp	.LBB37_23
.LBB37_24:                              # %if.then
	movq	%rbx, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	nonmemory_operand  # TAILCALL
.LBB37_14:                              # %lor.rhs
	cmpq	$67, %rcx
	jne	.LBB37_15
# BB#20:                                # %sw.bb3.i
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB37_22
# BB#21:
	movabsq	$0, %rax
	jmp	.LBB37_23
.LBB37_5:                               # %lor.rhs
	cmpq	$58, %rcx
	jne	.LBB37_23
# BB#6:                                 # %sw.bb8.i
	movq	8(%rbx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB37_13
# BB#7:                                 # %if.then.i
	movl	ix86_cmodel(%rip), %edx
	cmpq	$4, %rdx
	je	.LBB37_23
# BB#8:                                 # %if.end.i
	movq	8(%rcx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$67, %rsi
	jne	.LBB37_23
# BB#9:                                 # %sw.bb33.i
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rax, %rdx
	cmpq	$1, %rdx
	jne	.LBB37_13
# BB#10:                                # %land.lhs.true.i
	movq	16(%rcx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB37_13
# BB#11:                                # %land.lhs.true42.i
	movq	8(%rbx), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	cmpq	$-65535, %rax           # imm = 0xFFFFFFFFFFFF0001
	jl	.LBB37_13
# BB#12:                                # %land.lhs.true48.i
	movq	8(%rbx), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	movq	8(%rbx), %rcx
	cmpq	%rcx, %rax
	movq	$1, %rax
	je	.LBB37_23
.LBB37_13:                              # %if.end60.i
	xorq	%rax, %rax
	jmp	.LBB37_23
.LBB37_15:                              # %lor.rhs
	cmpq	$68, %rcx
	jne	.LBB37_23
# BB#16:                                # %sw.bb2.i
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB37_17
.LBB37_22:                              # %sw.bb3.i
	movabsq	$1, %rax
	jmp	.LBB37_23
.LBB37_17:
	movabsq	$0, %rax
.LBB37_23:                              # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp406:
	.size	x86_64_szext_nonmemory_operand, .Ltmp406-x86_64_szext_nonmemory_operand
	.cfi_endproc

	.globl	x86_64_immediate_operand
	.align	16, 0x90
	.type	x86_64_immediate_operand,@function
x86_64_immediate_operand:               # @x86_64_immediate_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB38_1
# BB#2:                                 # %if.end
	jmp	x86_64_sign_extended_value  # TAILCALL
.LBB38_1:                               # %if.then
	jmp	immediate_operand  # TAILCALL
.Ltmp407:
	.size	x86_64_immediate_operand, .Ltmp407-x86_64_immediate_operand
	.cfi_endproc

	.globl	x86_64_zext_immediate_operand
	.align	16, 0x90
	.type	x86_64_zext_immediate_operand,@function
x86_64_zext_immediate_operand:          # @x86_64_zext_immediate_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp410:
	.cfi_def_cfa_offset 16
.Ltmp411:
	.cfi_offset %rbx, -16
	movzbl	(%rdi), %ecx
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jg	.LBB39_11
# BB#1:                                 # %entry
	cmpq	$54, %rcx
	jne	.LBB39_2
# BB#15:                                # %sw.bb1.i
	movl	12(%rdi), %eax
	testq	%rax, %rax
	je	.LBB39_19
# BB#16:
	movabsq	$0, %rax
	popq	%rbx
	retq
.LBB39_11:                              # %entry
	cmpq	$67, %rcx
	jne	.LBB39_12
# BB#17:                                # %sw.bb3.i
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB39_19
# BB#18:
	movabsq	$0, %rax
	popq	%rbx
	retq
.LBB39_2:                               # %entry
	cmpq	$58, %rcx
	jne	.LBB39_20
# BB#3:                                 # %sw.bb8.i
	movq	8(%rdi), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB39_10
# BB#4:                                 # %if.then.i
	movl	ix86_cmodel(%rip), %edx
	cmpq	$4, %rdx
	je	.LBB39_20
# BB#5:                                 # %if.end.i
	movq	8(%rcx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$67, %rsi
	jne	.LBB39_20
# BB#6:                                 # %sw.bb33.i
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rax, %rdx
	cmpq	$1, %rdx
	jne	.LBB39_10
# BB#7:                                 # %land.lhs.true.i
	movq	16(%rcx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB39_10
# BB#8:                                 # %land.lhs.true42.i
	movq	8(%rbx), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	cmpq	$-65535, %rax           # imm = 0xFFFFFFFFFFFF0001
	jl	.LBB39_10
# BB#9:                                 # %land.lhs.true48.i
	movq	8(%rbx), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	movq	8(%rbx), %rcx
	cmpq	%rcx, %rax
	movq	$1, %rax
	je	.LBB39_20
.LBB39_10:                              # %if.end60.i
	xorq	%rax, %rax
	popq	%rbx
	retq
.LBB39_12:                              # %entry
	cmpq	$68, %rcx
	jne	.LBB39_20
# BB#13:                                # %sw.bb2.i
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB39_14
.LBB39_19:                              # %sw.bb3.i
	movabsq	$1, %rax
.LBB39_20:                              # %x86_64_zero_extended_value.exit
	popq	%rbx
	retq
.LBB39_14:
	movabsq	$0, %rax
	popq	%rbx
	retq
.Ltmp412:
	.size	x86_64_zext_immediate_operand, .Ltmp412-x86_64_zext_immediate_operand
	.cfi_endproc

	.globl	const_int_1_operand
	.align	16, 0x90
	.type	const_int_1_operand,@function
const_int_1_operand:                    # @const_int_1_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %ecx
	xorq	%rax, %rax
	cmpq	$54, %rcx
	jne	.LBB40_4
# BB#1:                                 # %land.rhs
	movq	8(%rdi), %rax
	cmpq	$1, %rax
	jne	.LBB40_2
# BB#3:                                 # %land.rhs
	movabsq	$1, %rax
.LBB40_4:                               # %land.end
	retq
.LBB40_2:
	movabsq	$0, %rax
	retq
.Ltmp413:
	.size	const_int_1_operand, .Ltmp413-const_int_1_operand
	.cfi_endproc

	.globl	const_int_1_31_operand
	.align	16, 0x90
	.type	const_int_1_31_operand,@function
const_int_1_31_operand:                 # @const_int_1_31_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %ecx
	xorq	%rax, %rax
	cmpq	$54, %rcx
	jne	.LBB41_2
# BB#1:                                 # %land.lhs.true
	movq	8(%rdi), %rax
	decq	%rax
	cmpq	$31, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
.LBB41_2:                               # %land.end
	retq
.Ltmp414:
	.size	const_int_1_31_operand, .Ltmp414-const_int_1_31_operand
	.cfi_endproc

	.globl	symbolic_operand
	.align	16, 0x90
	.type	symbolic_operand,@function
symbolic_operand:                       # @symbolic_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %edx
	movq	$1, %rax
	leaq	-67(%rdx), %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rsi
	cmpq	$2, %rsi
	jb	.LBB42_12
# BB#1:                                 # %entry
	cmpq	$58, %rdx
	jne	.LBB42_11
# BB#2:                                 # %sw.bb1
	movq	8(%rdi), %rdx
	movzbl	(%rdx), %esi
	leaq	-67(%rsi), %rdi
	andq	%rcx, %rdi
	cmpq	$2, %rdi
	jb	.LBB42_12
# BB#3:                                 # %sw.bb1
	cmpq	$42, %rsi
	jne	.LBB42_6
# BB#4:                                 # %land.lhs.true
	movl	16(%rdx), %ecx
	cmpq	$15, %rcx
	ja	.LBB42_11
# BB#5:                                 # %land.lhs.true
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$32960, %rdx            # imm = 0x80C0
	jne	.LBB42_12
	jmp	.LBB42_11
.LBB42_6:                               # %if.end
	cmpq	$75, %rsi
	jne	.LBB42_11
# BB#7:                                 # %lor.lhs.false27
	movq	16(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$54, %rsi
	jne	.LBB42_11
# BB#8:                                 # %if.end35
	movq	8(%rdx), %rdx
	movzbl	(%rdx), %esi
	leaq	-67(%rsi), %rdi
	andq	%rcx, %rdi
	cmpq	$2, %rdi
	jb	.LBB42_12
# BB#9:                                 # %if.end35
	cmpq	$42, %rsi
	jne	.LBB42_11
# BB#10:                                # %lor.lhs.false51
	movl	16(%rdx), %eax
	cmpq	$7, %rax
	jne	.LBB42_11
# BB#13:                                # %if.end57
	movq	8(%rdx), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	addq	$-67, %rax
	andq	%rcx, %rax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	retq
.LBB42_11:                              # %sw.default
	xorq	%rax, %rax
.LBB42_12:                              # %return
	retq
.Ltmp415:
	.size	symbolic_operand, .Ltmp415-symbolic_operand
	.cfi_endproc

	.globl	pic_symbolic_operand
	.align	16, 0x90
	.type	pic_symbolic_operand,@function
pic_symbolic_operand:                   # @pic_symbolic_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %ecx
	xorq	%rax, %rax
	cmpq	$58, %rcx
	jne	.LBB43_8
# BB#1:                                 # %if.end
	movzbl	target_flags+3(%rip), %eax
	movq	8(%rdi), %rcx
	testq	$2, %rax
	je	.LBB43_3
# BB#2:                                 # %if.then1
	movq	8(%rcx), %rax
	movzbl	(%rax), %eax
	cmpq	$42, %rax
	movq	$1, %rax
	jne	.LBB43_7
	jmp	.LBB43_8
.LBB43_3:                               # %if.else
	movzbl	(%rcx), %edx
	cmpq	$42, %rdx
	movq	$1, %rax
	je	.LBB43_8
# BB#4:                                 # %if.else
	cmpq	$75, %rdx
	jne	.LBB43_7
# BB#5:                                 # %lor.lhs.false
	movq	16(%rcx), %rdx
	movzbl	(%rdx), %edx
	cmpq	$54, %rdx
	jne	.LBB43_7
# BB#6:                                 # %if.end25
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$42, %rcx
	je	.LBB43_8
.LBB43_7:                               # %if.end34
	xorq	%rax, %rax
.LBB43_8:                               # %return
	retq
.Ltmp416:
	.size	pic_symbolic_operand, .Ltmp416-pic_symbolic_operand
	.cfi_endproc

	.globl	call_insn_operand
	.align	16, 0x90
	.type	call_insn_operand,@function
call_insn_operand:                      # @call_insn_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %ecx
	xorq	%rax, %rax
	cmpq	$54, %rcx
	je	.LBB44_9
# BB#1:                                 # %entry
	cmpq	$68, %rcx
	je	.LBB44_8
# BB#2:                                 # %entry
	cmpq	$61, %rcx
	jne	.LBB44_10
# BB#3:                                 # %land.lhs.true
	movq	global_rtl+40(%rip), %rdx
	cmpq	%rdi, %rdx
	je	.LBB44_9
# BB#4:                                 # %land.lhs.true
	movq	global_rtl+24(%rip), %rdx
	cmpq	%rdi, %rdx
	je	.LBB44_9
# BB#5:                                 # %lor.lhs.false3
	movl	8(%rdi), %edx
	addq	$-53, %rdx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	cmpq	$5, %rsi
	jb	.LBB44_9
# BB#6:                                 # %if.end
	cmpq	$54, %rcx
	je	.LBB44_9
# BB#7:                                 # %if.end
	cmpq	$68, %rcx
	jne	.LBB44_10
.LBB44_8:                               # %if.then18
	movq	$1, %rax
.LBB44_9:                               # %return
	retq
.LBB44_10:                              # %if.end19
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	jmp	general_operand  # TAILCALL
.Ltmp417:
	.size	call_insn_operand, .Ltmp417-call_insn_operand
	.cfi_endproc

	.globl	constant_call_address_operand
	.align	16, 0x90
	.type	constant_call_address_operand,@function
constant_call_address_operand:          # @constant_call_address_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$58, %rcx
	jne	.LBB45_4
# BB#1:                                 # %land.lhs.true
	movq	8(%rdi), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB45_4
# BB#2:                                 # %land.lhs.true4
	movq	16(%rcx), %rdx
	movzbl	(%rdx), %edx
	cmpq	$54, %rdx
	jne	.LBB45_4
# BB#3:                                 # %if.then
	movq	8(%rcx), %rax
	movl	(%rax), %eax
.LBB45_4:                               # %if.end
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$68, %rax
	jne	.LBB45_5
# BB#6:                                 # %if.end
	movabsq	$1, %rax
	retq
.LBB45_5:
	movabsq	$0, %rax
	retq
.Ltmp418:
	.size	constant_call_address_operand, .Ltmp418-constant_call_address_operand
	.cfi_endproc

	.globl	const0_operand
	.align	16, 0x90
	.type	const0_operand,@function
const0_operand:                         # @const0_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	const_tiny_rtx(,%rsi,8), %rax
	cmpq	%rdi, %rax
	jne	.LBB46_1
# BB#2:                                 # %entry
	movabsq	$1, %rax
	retq
.LBB46_1:
	movabsq	$0, %rax
	retq
.Ltmp419:
	.size	const0_operand, .Ltmp419-const0_operand
	.cfi_endproc

	.globl	const1_operand
	.align	16, 0x90
	.type	const1_operand,@function
const1_operand:                         # @const1_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movq	const_int_rtx+520(%rip), %rax
	cmpq	%rdi, %rax
	jne	.LBB47_1
# BB#2:                                 # %entry
	movabsq	$1, %rax
	retq
.LBB47_1:
	movabsq	$0, %rax
	retq
.Ltmp420:
	.size	const1_operand, .Ltmp420-const1_operand
	.cfi_endproc

	.globl	const248_operand
	.align	16, 0x90
	.type	const248_operand,@function
const248_operand:                       # @const248_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %ecx
	xorq	%rax, %rax
	cmpq	$54, %rcx
	jne	.LBB48_3
# BB#1:                                 # %land.rhs
	movq	8(%rdi), %rcx
	addq	$-2, %rcx
	cmpq	$6, %rcx
	ja	.LBB48_3
# BB#2:                                 # %switch.lookup
	andq	$127, %rcx
	movq	$69, %rax
	shrq	%cl, %rax
	andq	$1, %rax
.LBB48_3:                               # %land.end
	retq
.Ltmp421:
	.size	const248_operand, .Ltmp421-const248_operand
	.cfi_endproc

	.globl	incdec_operand
	.align	16, 0x90
	.type	incdec_operand,@function
incdec_operand:                         # @incdec_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movl	ix86_cpu(%rip), %eax
	cmpq	$6, %rax
	jne	.LBB49_2
# BB#1:                                 # %entry
	movl	optimize_size(%rip), %ecx
	xorq	%rax, %rax
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rcx
	je	.LBB49_6
.LBB49_2:                               # %if.end
	movq	const_int_rtx+520(%rip), %rax
	cmpq	%rdi, %rax
	movq	$1, %rax
	je	.LBB49_6
# BB#3:                                 # %lor.rhs
	movq	const_int_rtx+504(%rip), %rax
	cmpq	%rdi, %rax
	jne	.LBB49_4
# BB#5:                                 # %lor.rhs
	movabsq	$1, %rax
.LBB49_6:                               # %return
	retq
.LBB49_4:
	movabsq	$0, %rax
	retq
.Ltmp422:
	.size	incdec_operand, .Ltmp422-incdec_operand
	.cfi_endproc

	.globl	shiftdi_operand
	.align	16, 0x90
	.type	shiftdi_operand,@function
shiftdi_operand:                        # @shiftdi_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB50_2
# BB#1:                                 # %if.then
	jmp	nonimmediate_operand  # TAILCALL
.LBB50_2:                               # %if.else
	jmp	register_operand  # TAILCALL
.Ltmp423:
	.size	shiftdi_operand, .Ltmp423-shiftdi_operand
	.cfi_endproc

	.globl	reg_no_sp_operand
	.align	16, 0x90
	.type	reg_no_sp_operand,@function
reg_no_sp_operand:                      # @reg_no_sp_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %eax
	cmpq	$63, %rax
	movq	%rdi, %rax
	jne	.LBB51_2
# BB#1:                                 # %if.then
	movq	8(%rdi), %rax
.LBB51_2:                               # %if.end
	movq	global_rtl+16(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB51_5
# BB#3:                                 # %if.end
	movq	global_rtl+40(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB51_5
# BB#4:                                 # %if.end
	movq	global_rtl+24(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB51_5
# BB#6:                                 # %if.end6
	jmp	register_operand  # TAILCALL
.LBB51_5:                               # %return
	xorq	%rax, %rax
	retq
.Ltmp424:
	.size	reg_no_sp_operand, .Ltmp424-reg_no_sp_operand
	.cfi_endproc

	.globl	mmx_reg_operand
	.align	16, 0x90
	.type	mmx_reg_operand,@function
mmx_reg_operand:                        # @mmx_reg_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %ecx
	xorq	%rax, %rax
	cmpq	$61, %rcx
	jne	.LBB52_2
# BB#1:                                 # %land.rhs
	movl	8(%rdi), %eax
	addq	$-29, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$8, %rcx
	sbbq	%rax, %rax
	andq	$1, %rax
.LBB52_2:                               # %land.end7
	retq
.Ltmp425:
	.size	mmx_reg_operand, .Ltmp425-mmx_reg_operand
	.cfi_endproc

	.globl	general_no_elim_operand
	.align	16, 0x90
	.type	general_no_elim_operand,@function
general_no_elim_operand:                # @general_no_elim_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %eax
	cmpq	$63, %rax
	movq	%rdi, %rax
	jne	.LBB53_2
# BB#1:                                 # %if.then
	movq	8(%rdi), %rax
.LBB53_2:                               # %if.end
	movq	global_rtl+40(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB53_9
# BB#3:                                 # %if.end
	movq	global_rtl+24(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB53_9
# BB#4:                                 # %if.end
	movq	global_rtl+48(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB53_9
# BB#5:                                 # %if.end
	movq	global_rtl+56(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB53_9
# BB#6:                                 # %if.end
	movq	global_rtl+64(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB53_9
# BB#7:                                 # %if.end10
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB53_10
# BB#8:                                 # %land.lhs.true
	movl	8(%rax), %eax
	addq	$-53, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$5, %rcx
	jae	.LBB53_10
.LBB53_9:                               # %return
	xorq	%rax, %rax
	retq
.LBB53_10:                              # %if.end23
	jmp	general_operand  # TAILCALL
.Ltmp426:
	.size	general_no_elim_operand, .Ltmp426-general_no_elim_operand
	.cfi_endproc

	.globl	nonmemory_no_elim_operand
	.align	16, 0x90
	.type	nonmemory_no_elim_operand,@function
nonmemory_no_elim_operand:              # @nonmemory_no_elim_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp428:
	.cfi_def_cfa_offset 16
	movzbl	(%rdi), %r8d
	cmpq	$63, %r8
	movq	%rdi, %rdx
	jne	.LBB54_2
# BB#1:                                 # %if.then
	movq	8(%rdi), %rdx
.LBB54_2:                               # %if.end
	movq	global_rtl+40(%rip), %rcx
	xorq	%rax, %rax
	cmpq	%rcx, %rdx
	je	.LBB54_11
# BB#3:                                 # %if.end
	movq	global_rtl+24(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.LBB54_11
# BB#4:                                 # %if.end
	movq	global_rtl+48(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.LBB54_11
# BB#5:                                 # %if.end
	movq	global_rtl+56(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.LBB54_11
# BB#6:                                 # %if.end
	movq	global_rtl+64(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.LBB54_11
# BB#7:                                 # %if.end10
	movq	$1, %rax
	cmpq	$54, %r8
	je	.LBB54_11
# BB#8:                                 # %lor.rhs
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB54_9
# BB#10:                                # %lor.rhs
	movabsq	$1, %rax
.LBB54_11:                              # %return
	popq	%rdx
	retq
.LBB54_9:
	movabsq	$0, %rax
	popq	%rdx
	retq
.Ltmp429:
	.size	nonmemory_no_elim_operand, .Ltmp429-nonmemory_no_elim_operand
	.cfi_endproc

	.globl	q_regs_operand
	.align	16, 0x90
	.type	q_regs_operand,@function
q_regs_operand:                         # @q_regs_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %r8d
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rsi
	je	.LBB55_2
# BB#1:                                 # %land.lhs.true
	movq	$16, %rcx
	movq	%r8, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	andq	%rax, %rsi
	xorq	%rax, %rax
	cmpq	%rsi, %rdx
	jne	.LBB55_6
.LBB55_2:                               # %if.end
	movq	%r8, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB55_4
# BB#3:                                 # %if.then5
	movq	8(%rdi), %rdi
	movl	(%rdi), %r8d
.LBB55_4:                               # %if.end6
	andq	$65535, %r8             # imm = 0xFFFF
	xorq	%rax, %rax
	cmpq	$61, %r8
	jne	.LBB55_6
# BB#5:                                 # %land.rhs
	movl	8(%rdi), %eax
	cmpq	$4, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
.LBB55_6:                               # %return
	retq
.Ltmp430:
	.size	q_regs_operand, .Ltmp430-q_regs_operand
	.cfi_endproc

	.globl	non_q_regs_operand
	.align	16, 0x90
	.type	non_q_regs_operand,@function
non_q_regs_operand:                     # @non_q_regs_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %r9d
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rsi
	je	.LBB56_2
# BB#1:                                 # %land.lhs.true
	movq	$16, %rcx
	movq	%r9, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	andq	%r8, %rsi
	xorq	%rax, %rax
	cmpq	%rsi, %rdx
	jne	.LBB56_6
.LBB56_2:                               # %if.end
	movq	%r9, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB56_4
# BB#3:                                 # %if.then5
	movq	8(%rdi), %rdi
	movl	(%rdi), %r9d
.LBB56_4:                               # %if.end6
	andq	$65535, %r9             # imm = 0xFFFF
	xorq	%rax, %rax
	cmpq	$61, %r9
	jne	.LBB56_6
# BB#5:                                 # %land.lhs.true10
	movl	8(%rdi), %eax
	addq	$-4, %rax
	andq	%r8, %rax
	cmpq	$49, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
.LBB56_6:                               # %return
	retq
.Ltmp431:
	.size	non_q_regs_operand, .Ltmp431-non_q_regs_operand
	.cfi_endproc

	.globl	sse_comparison_operator
	.align	16, 0x90
	.type	sse_comparison_operator,@function
sse_comparison_operator:                # @sse_comparison_operator
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %eax
	addq	$-102, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	ja	.LBB57_4
# BB#1:                                 # %entry
	movq	$1, %rax
	movq	$1, %rdx
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$27699, %rsi            # imm = 0x6C33
	jne	.LBB57_5
# BB#2:                                 # %entry
	shlq	%cl, %rdx
	testq	$233484, %rdx           # imm = 0x3900C
	je	.LBB57_4
# BB#3:                                 # %sw.bb1
	movl	target_flags(%rip), %eax
	movq	$4, %rcx
	shrq	%cl, %rax
	notq	%rax
	andq	$1, %rax
	retq
.LBB57_4:                               # %sw.default
	xorq	%rax, %rax
.LBB57_5:                               # %return
	retq
.Ltmp432:
	.size	sse_comparison_operator, .Ltmp432-sse_comparison_operator
	.cfi_endproc

	.globl	ix86_comparison_operator
	.align	16, 0x90
	.type	ix86_comparison_operator,@function
ix86_comparison_operator:               # @ix86_comparison_operator
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp434:
	.cfi_def_cfa_offset 16
	movl	(%rdi), %r9d
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rsi
	je	.LBB58_2
# BB#1:                                 # %land.lhs.true
	movq	$16, %rcx
	movq	%r9, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	andq	%r8, %rsi
	xorq	%rax, %rax
	cmpq	%rsi, %rdx
	jne	.LBB58_29
.LBB58_2:                               # %if.end
	andq	$65535, %r9             # imm = 0xFFFF
	movzbl	rtx_class(%r9), %ecx
	xorq	%rax, %rax
	cmpq	$60, %rcx
	jne	.LBB58_29
# BB#3:                                 # %if.end7
	movq	8(%rdi), %rcx
	movl	(%rcx), %esi
	movq	$16, %rcx
	shrq	%cl, %rsi
	movq	%rsi, %rcx
	andq	$255, %rcx
	leaq	-57(%rcx), %rdx
	andq	%r8, %rdx
	addq	$-102, %r9
	cmpq	$1, %rdx
	ja	.LBB58_14
# BB#4:                                 # %if.then16
	andq	%r8, %r9
	cmpq	$17, %r9
	ja	.LBB58_7
# BB#5:                                 # %if.then16
	movq	$1, %rcx
	movq	$1, %rsi
	jmpq	*.LJTI58_1(,%r9,8)
.LBB58_8:                               # %sw.bb1.i
	movq	$112, %rcx
	movq	$1, %rsi
	jmp	.LBB58_9
.LBB58_14:                              # %if.end21
	andq	%r8, %r9
	cmpq	$11, %r9
	ja	.LBB58_29
# BB#15:                                # %if.end21
	movq	$1, %rax
	jmpq	*.LJTI58_0(,%r9,8)
.LBB58_21:                              # %sw.bb36
	cmpq	$52, %rcx
	jne	.LBB58_22
# BB#23:                                # %sw.bb36
	movabsq	$1, %rax
	popq	%rdx
	retq
.LBB58_6:                               # %sw.bb6.i
	movq	$112, %rsi
.LBB58_9:                               # %sw.epilog.i
	movzbl	target_flags(%rip), %eax
	movq	$1, %rdx
	testq	$16, %rax
	je	.LBB58_11
# BB#10:                                # %ix86_fp_comparison_codes.exit
	andq	%r8, %rcx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	movq	%rsi, %rdx
	jne	.LBB58_29
.LBB58_11:                              # %land.rhs
	andq	%r8, %rdx
	cmpq	$1, %rdx
	jne	.LBB58_12
# BB#13:                                # %land.rhs
	movabsq	$1, %rax
	popq	%rdx
	retq
.LBB58_12:
	movabsq	$0, %rax
	popq	%rdx
	retq
.LBB58_22:
	movabsq	$0, %rax
	popq	%rdx
	retq
.LBB58_16:                              # %sw.bb22
	andq	$254, %rsi
	cmpq	$52, %rsi
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	movq	%rdx, %rax
	jne	.LBB58_18
# BB#17:                                # %sw.bb22
	movq	%rsi, %rax
.LBB58_18:                              # %sw.bb22
	cmpq	$54, %rcx
	movq	%rdx, %rdi
	jne	.LBB58_20
# BB#19:                                # %sw.bb22
	movq	%rsi, %rdi
.LBB58_20:                              # %sw.bb22
	orq	%rdi, %rax
	jmp	.LBB58_26
.LBB58_24:                              # %sw.bb41
	andq	$254, %rsi
	cmpq	$52, %rsi
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	movq	%rdx, %rax
	jne	.LBB58_26
# BB#25:                                # %sw.bb41
	movq	%rsi, %rax
.LBB58_26:                              # %sw.bb41
	cmpq	$55, %rcx
	jne	.LBB58_28
# BB#27:                                # %sw.bb41
	movq	%rsi, %rdx
.LBB58_28:                              # %sw.bb41
	orq	%rdx, %rax
.LBB58_29:                              # %return
	popq	%rdx
	retq
.LBB58_7:                               # %sw.default.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.Ltmp435:
	.size	ix86_comparison_operator, .Ltmp435-ix86_comparison_operator
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI58_0:
	.quad	.LBB58_29
	.quad	.LBB58_29
	.quad	.LBB58_16
	.quad	.LBB58_24
	.quad	.LBB58_24
	.quad	.LBB58_16
	.quad	.LBB58_21
	.quad	.LBB58_21
	.quad	.LBB58_21
	.quad	.LBB58_21
	.quad	.LBB58_21
	.quad	.LBB58_21
.LJTI58_1:
	.quad	.LBB58_6
	.quad	.LBB58_8
	.quad	.LBB58_9
	.quad	.LBB58_9
	.quad	.LBB58_8
	.quad	.LBB58_8
	.quad	.LBB58_7
	.quad	.LBB58_7
	.quad	.LBB58_7
	.quad	.LBB58_7
	.quad	.LBB58_9
	.quad	.LBB58_9
	.quad	.LBB58_9
	.quad	.LBB58_6
	.quad	.LBB58_6
	.quad	.LBB58_9
	.quad	.LBB58_9
	.quad	.LBB58_9

	.text
	.globl	fcmov_comparison_operator
	.align	16, 0x90
	.type	fcmov_comparison_operator,@function
fcmov_comparison_operator:              # @fcmov_comparison_operator
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp437:
	.cfi_def_cfa_offset 16
	movl	(%rdi), %r9d
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rsi
	je	.LBB59_2
# BB#1:                                 # %land.lhs.true
	movq	$16, %rcx
	movq	%r9, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	andq	%r8, %rsi
	xorq	%rax, %rax
	cmpq	%rsi, %rdx
	jne	.LBB59_26
.LBB59_2:                               # %if.end
	andq	$65535, %r9             # imm = 0xFFFF
	movzbl	rtx_class(%r9), %ecx
	xorq	%rax, %rax
	cmpq	$60, %rcx
	jne	.LBB59_26
# BB#3:                                 # %if.end7
	movq	8(%rdi), %rax
	movzbl	2(%rax), %esi
	leaq	-57(%rsi), %rax
	andq	%r8, %rax
	cmpq	$1, %rax
	ja	.LBB59_20
# BB#4:                                 # %if.then16
	leaq	-102(%r9), %rdi
	andq	%r8, %rdi
	cmpq	$17, %rdi
	ja	.LBB59_11
# BB#5:                                 # %if.then16
	xorq	%rax, %rax
	xorq	%rcx, %rcx
	jmpq	*.LJTI59_0(,%rdi,8)
.LBB59_8:                               # %sw.bb4.i
	movq	$1, %rcx
	movq	$119, %r9
	jmp	.LBB59_14
.LBB59_7:                               # %sw.bb3.i
	movq	$1, %rax
	movq	$114, %r9
	jmp	.LBB59_13
.LBB59_6:                               # %sw.bb2.i
	movq	$1, %rax
	movq	$117, %r9
	jmp	.LBB59_13
.LBB59_12:                              # %sw.bb1.i
	movq	$1, %rax
	movq	$118, %r9
.LBB59_13:                              # %sw.epilog.i
	xorq	%rcx, %rcx
	jmp	.LBB59_14
.LBB59_9:                               # %sw.bb5.i
	movq	$1, %rcx
	movq	$104, %r9
	jmp	.LBB59_14
.LBB59_10:                              # %sw.bb6.i
	movq	$1, %rcx
	movq	$105, %r9
.LBB59_14:                              # %sw.epilog.i
	orq	%rax, %rcx
	je	.LBB59_16
# BB#15:                                # %sw.epilog.i
	movl	target_flags(%rip), %ecx
	andq	$16, %rcx
	xorq	%rax, %rax
	testq	%r8, %rcx
	jne	.LBB59_26
.LBB59_16:                              # %if.end23
	leaq	-104(%r9), %rcx
	andq	%r8, %rcx
	cmpq	$15, %rcx
	ja	.LBB59_25
# BB#17:                                # %if.end23
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$24579, %rdx            # imm = 0x6003
	jne	.LBB59_23
# BB#18:                                # %if.end23
	shlq	%cl, %rax
	testq	$768, %rax              # imm = 0x300
	je	.LBB59_19
.LBB59_20:                              # %if.end24
	addq	$-102, %r9
	andq	%r8, %r9
	cmpq	$11, %r9
	ja	.LBB59_25
# BB#21:                                # %if.end24
	movq	$1, %rax
	movq	$1, %rdi
	movq	$1, %rdx
	movq	%r9, %rcx
	shlq	%cl, %rdx
	testq	$3075, %rdx             # imm = 0xC03
	jne	.LBB59_26
# BB#22:                                # %if.end24
	movq	%r9, %rcx
	shlq	%cl, %rdi
	testq	$960, %rdi              # imm = 0x3C0
	je	.LBB59_25
.LBB59_23:                              # %sw.bb
	cmpq	$58, %rsi
	ja	.LBB59_25
# BB#24:                                # %sw.bb
	movq	$1, %rax
	movq	$1, %rdx
	movq	%rsi, %rcx
	shlq	%cl, %rdx
	movabsq	$436849163854938112, %rcx # imm = 0x610000000000000
	testq	%rcx, %rdx
	jne	.LBB59_26
	jmp	.LBB59_25
.LBB59_11:                              # %sw.default.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.LBB59_19:                              # %if.end23
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$33792, %rdx            # imm = 0x8400
	jne	.LBB59_26
.LBB59_25:                              # %sw.default
	xorq	%rax, %rax
.LBB59_26:                              # %return
	popq	%rdx
	retq
.Ltmp438:
	.size	fcmov_comparison_operator, .Ltmp438-fcmov_comparison_operator
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI59_0:
	.quad	.LBB59_8
	.quad	.LBB59_7
	.quad	.LBB59_14
	.quad	.LBB59_14
	.quad	.LBB59_6
	.quad	.LBB59_12
	.quad	.LBB59_11
	.quad	.LBB59_11
	.quad	.LBB59_11
	.quad	.LBB59_11
	.quad	.LBB59_14
	.quad	.LBB59_14
	.quad	.LBB59_14
	.quad	.LBB59_9
	.quad	.LBB59_10
	.quad	.LBB59_14
	.quad	.LBB59_14
	.quad	.LBB59_14

	.text
	.globl	promotable_binary_operator
	.align	16, 0x90
	.type	promotable_binary_operator,@function
promotable_binary_operator:             # @promotable_binary_operator
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %eax
	addq	$-75, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$12, %rcx
	ja	.LBB60_6
# BB#1:                                 # %entry
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$5889, %rdx             # imm = 0x1701
	jne	.LBB60_7
# BB#2:                                 # %entry
	cmpq	$3, %rcx
	jne	.LBB60_6
# BB#3:                                 # %sw.bb
	movl	ix86_cpu(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB60_4
# BB#5:                                 # %sw.bb
	movabsq	$1, %rax
	retq
.LBB60_6:                               # %sw.default
	xorq	%rax, %rax
.LBB60_7:                               # %return
	retq
.LBB60_4:
	movabsq	$0, %rax
	retq
.Ltmp439:
	.size	promotable_binary_operator, .Ltmp439-promotable_binary_operator
	.cfi_endproc

	.globl	cmp_fp_expander_operand
	.align	16, 0x90
	.type	cmp_fp_expander_operand,@function
cmp_fp_expander_operand:                # @cmp_fp_expander_operand
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %r8d
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	testq	%r9, %rsi
	je	.LBB61_2
# BB#1:                                 # %land.lhs.true
	movq	$16, %rcx
	movq	%r8, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	andq	%rsi, %r9
	xorq	%rax, %rax
	cmpq	%r9, %rdx
	jne	.LBB61_3
.LBB61_2:                               # %if.end
	andq	$65535, %r8             # imm = 0xFFFF
	cmpq	$55, %r8
	movq	$1, %rax
	jne	.LBB61_4
.LBB61_3:                               # %return
	retq
.LBB61_4:                               # %if.end6
	jmp	general_operand  # TAILCALL
.Ltmp440:
	.size	cmp_fp_expander_operand, .Ltmp440-cmp_fp_expander_operand
	.cfi_endproc

	.globl	ext_register_operand
	.align	16, 0x90
	.type	ext_register_operand,@function
ext_register_operand:                   # @ext_register_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp444:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp445:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp446:
	.cfi_def_cfa_offset 32
.Ltmp447:
	.cfi_offset %rbx, -24
.Ltmp448:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movl	target_flags(%rip), %ecx
	movl	(%rbx), %eax
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB62_2
# BB#1:                                 # %entry
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$327680, %rdx           # imm = 0x50000
	je	.LBB62_3
.LBB62_2:                               # %land.lhs.true
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	addq	$-3, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	xorq	%r14, %r14
	cmpq	$1, %rcx
	ja	.LBB62_9
.LBB62_3:                               # %if.end
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB62_9
# BB#4:                                 # %if.end12
	movzbl	(%rbx), %eax
	addq	$8, %rbx
	cmpq	$61, %rax
	je	.LBB62_6
# BB#5:                                 # %cond.false
	movq	(%rbx), %rbx
	addq	$8, %rbx
.LBB62_6:                               # %cond.end
	movl	(%rbx), %eax
	addq	$-4, %rax
	andq	%rcx, %rax
	cmpq	$53, %rax
	jbe	.LBB62_7
# BB#8:                                 # %cond.end
	movabsq	$1, %r14
	jmp	.LBB62_9
.LBB62_7:
	movabsq	$0, %r14
.LBB62_9:                               # %return
	movq	%r14, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp449:
	.size	ext_register_operand, .Ltmp449-ext_register_operand
	.cfi_endproc

	.globl	binary_fp_operator
	.align	16, 0x90
	.type	binary_fp_operator,@function
binary_fp_operator:                     # @binary_fp_operator
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %edi
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rsi
	je	.LBB63_2
# BB#1:                                 # %land.lhs.true
	movq	$16, %rcx
	movq	%rdi, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	andq	%r8, %rsi
	xorq	%rax, %rax
	cmpq	%rsi, %rdx
	jne	.LBB63_7
.LBB63_2:                               # %if.end
	xorq	%rax, %rax
	movq	%rdi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	addq	$-75, %rcx
	andq	%r8, %rcx
	cmpq	$4, %rcx
	ja	.LBB63_7
# BB#3:                                 # %if.end
	cmpq	$2, %rcx
	je	.LBB63_7
# BB#4:                                 # %sw.bb
	movq	$14, %rcx
	shrq	%cl, %rdi
	andq	$1020, %rdi             # imm = 0x3FC
	movl	mode_class(%rdi), %eax
	cmpq	$2, %rax
	jne	.LBB63_5
# BB#6:                                 # %sw.bb
	movabsq	$1, %rax
.LBB63_7:                               # %return
	retq
.LBB63_5:
	movabsq	$0, %rax
	retq
.Ltmp450:
	.size	binary_fp_operator, .Ltmp450-binary_fp_operator
	.cfi_endproc

	.globl	mult_operator
	.align	16, 0x90
	.type	mult_operator,@function
mult_operator:                          # @mult_operator
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %eax
	cmpq	$78, %rax
	jne	.LBB64_1
# BB#2:                                 # %entry
	movabsq	$1, %rax
	retq
.LBB64_1:
	movabsq	$0, %rax
	retq
.Ltmp451:
	.size	mult_operator, .Ltmp451-mult_operator
	.cfi_endproc

	.globl	div_operator
	.align	16, 0x90
	.type	div_operator,@function
div_operator:                           # @div_operator
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	(%rdi), %eax
	cmpq	$79, %rax
	jne	.LBB65_1
# BB#2:                                 # %entry
	movabsq	$1, %rax
	retq
.LBB65_1:
	movabsq	$0, %rax
	retq
.Ltmp452:
	.size	div_operator, .Ltmp452-div_operator
	.cfi_endproc

	.globl	arith_or_logical_operator
	.align	16, 0x90
	.type	arith_or_logical_operator,@function
arith_or_logical_operator:              # @arith_or_logical_operator
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %edx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rsi
	je	.LBB66_2
# BB#1:                                 # %lor.lhs.false
	movq	$16, %rcx
	movq	%rdx, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	andq	%rax, %rsi
	xorq	%rax, %rax
	cmpq	%rsi, %rdi
	jne	.LBB66_7
.LBB66_2:                               # %land.rhs
	andq	$65535, %rdx            # imm = 0xFFFF
	movzbl	rtx_class(%rdx), %esi
	cmpq	$99, %rsi
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rax
	jne	.LBB66_4
# BB#3:                                 # %land.rhs
	movq	%rdx, %rax
.LBB66_4:                               # %land.rhs
	cmpq	$50, %rsi
	jne	.LBB66_6
# BB#5:                                 # %land.rhs
	movq	%rdx, %rcx
.LBB66_6:                               # %land.rhs
	orq	%rcx, %rax
.LBB66_7:                               # %land.end
	retq
.Ltmp453:
	.size	arith_or_logical_operator, .Ltmp453-arith_or_logical_operator
	.cfi_endproc

	.globl	memory_displacement_operand
	.align	16, 0x90
	.type	memory_displacement_operand,@function
memory_displacement_operand:            # @memory_displacement_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp457:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp458:
	.cfi_def_cfa_offset 24
	subq	$40, %rsp
.Ltmp459:
	.cfi_def_cfa_offset 64
.Ltmp460:
	.cfi_offset %rbx, -24
.Ltmp461:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	callq	memory_operand
	movq	%rax, %rcx
	xorq	%rax, %rax
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rcx
	je	.LBB67_5
# BB#1:                                 # %if.end
	movq	8(%rbx), %rdi
	leaq	8(%rsp), %rsi
	callq	ix86_decompose_address
	testq	%r14, %rax
	je	.LBB67_6
# BB#2:                                 # %if.end4
	cmpq	$0, 24(%rsp)
	je	.LBB67_3
# BB#4:                                 # %if.end4
	movabsq	$1, %rax
	jmp	.LBB67_5
.LBB67_3:
	movabsq	$0, %rax
.LBB67_5:                               # %return
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB67_6:                               # %if.then3
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.memory_displacement_operand, %rcx
	movq	$3460, %rsi             # imm = 0xD84
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp462:
	.size	memory_displacement_operand, .Ltmp462-memory_displacement_operand
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_decompose_address,@function
ix86_decompose_address:                 # @ix86_decompose_address
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp466:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp467:
	.cfi_def_cfa_offset 24
.Ltmp468:
	.cfi_offset %rbx, -24
.Ltmp469:
	.cfi_offset %r14, -16
	movzbl	(%rdi), %eax
	cmpq	$86, %rax
	jg	.LBB68_32
# BB#1:                                 # %entry
	movq	$1, %r8
	cmpq	$74, %rax
	jg	.LBB68_6
# BB#2:                                 # %entry
	xorq	%r11, %r11
	cmpq	$61, %rax
	jne	.LBB68_4
# BB#3:
	movq	$1, %r8
	jmp	.LBB68_5
.LBB68_32:                              # %entry
	cmpq	$87, %rax
	jne	.LBB68_36
# BB#33:                                # %if.then93
	movq	16(%rdi), %rcx
	movzbl	(%rcx), %edx
	xorq	%rax, %rax
	cmpq	$54, %rdx
	jne	.LBB68_87
# BB#34:                                # %if.end104
	movq	8(%rcx), %rcx
	cmpq	$3, %rcx
	ja	.LBB68_87
# BB#35:                                # %if.end109
	movq	8(%rdi), %r10
	movq	$1, %r8
	shlq	%cl, %r8
	movq	$32, %rcx
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	xorq	%r11, %r11
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	xorq	%rdi, %rdi
	jmp	.LBB68_50
.LBB68_6:                               # %entry
	cmpq	$75, %rax
	jne	.LBB68_7
# BB#12:                                # %if.then8
	movq	8(%rdi), %rdx
	movq	16(%rdi), %r10
	movl	(%rdx), %edi
	movl	(%r10), %ecx
	movq	%rdi, %rax
	andq	$65533, %rax            # imm = 0xFFFD
	cmpq	$61, %rax
	jne	.LBB68_20
# BB#13:                                # %if.then19
	andq	$65533, %rcx            # imm = 0xFFFD
	cmpq	$61, %rcx
	movabsq	$0, %r11
	je	.LBB68_15
# BB#14:                                # %if.then19
	movq	%r10, %r11
.LBB68_15:                              # %if.then19
	movq	%rdx, %r9
	je	.LBB68_17
# BB#16:                                # %if.then19
	movabsq	$0, %r9
.LBB68_17:                              # %if.then19
	je	.LBB68_19
# BB#18:                                # %if.then19
	movq	%rdx, %r10
.LBB68_19:                              # %if.then19
	movq	$1, %r8
	movq	%r10, %rdi
	jmp	.LBB68_30
.LBB68_4:                               # %entry
	cmpq	$63, %rax
	jne	.LBB68_36
.LBB68_5:
	movq	$1, %rax
	xorq	%r10, %r10
	jmp	.LBB68_50
.LBB68_7:                               # %entry
	cmpq	$78, %rax
	jne	.LBB68_36
# BB#8:                                 # %if.then82
	leaq	8(%rdi), %rax
	addq	$16, %rdi
	xorq	%r11, %r11
	movq	%rdi, %rdx
	xorq	%rdi, %rdi
	jmp	.LBB68_9
.LBB68_36:                              # %if.else110
	xorq	%r10, %r10
	movq	$1, %r8
	movq	$1, %rax
	movq	%rdi, %r11
	xorq	%rdi, %rdi
.LBB68_50:                              # %if.end144
	movq	global_rtl+32(%rip), %rcx
	cmpq	%rcx, %rdi
	je	.LBB68_53
# BB#51:                                # %if.end144
	movq	global_rtl+24(%rip), %rcx
	cmpq	%rcx, %rdi
	je	.LBB68_53
# BB#52:                                # %lor.lhs.false150
	movq	global_rtl+40(%rip), %rcx
	cmpq	%rcx, %rdi
	jne	.LBB68_55
.LBB68_53:                              # %land.lhs.true153
	testq	%r11, %r11
	jne	.LBB68_55
# BB#54:                                # %if.then155
	movq	const_int_rtx+512(%rip), %r11
.LBB68_55:                              # %if.end156
	movl	ix86_cpu(%rip), %edx
	movl	optimize_size(%rip), %ecx
	cmpq	$4, %rdx
	movabsq	$0, %rdx
	movabsq	$1, %r9
	movq	%rdx, %rbx
	je	.LBB68_57
# BB#56:                                # %if.end156
	movq	%r9, %rbx
.LBB68_57:                              # %if.end156
	testq	%rcx, %rcx
	movq	%rdx, %rcx
	je	.LBB68_59
# BB#58:                                # %if.end156
	movq	%r9, %rcx
.LBB68_59:                              # %if.end156
	testq	%rdi, %rdi
	jne	.LBB68_61
# BB#60:                                # %if.end156
	movq	%r9, %rdx
.LBB68_61:                              # %if.end156
	testq	%r10, %r10
	jne	.LBB68_68
# BB#62:                                # %if.end156
	orq	%rbx, %rcx
	orq	%rdx, %rcx
	jne	.LBB68_68
# BB#63:                                # %if.end156
	testq	%r11, %r11
	jne	.LBB68_68
# BB#64:                                # %land.lhs.true167
	movzbl	(%rdi), %ecx
	xorq	%r11, %r11
	cmpq	$61, %rcx
	jne	.LBB68_68
# BB#65:                                # %land.lhs.true172
	movl	8(%rdi), %ecx
	cmpq	$4, %rcx
	jne	.LBB68_67
# BB#66:
	movq	const_int_rtx+512(%rip), %r11
	jmp	.LBB68_68
.LBB68_67:                              # %select.mid
	xorq	%r11, %r11
.LBB68_68:                              # %if.end179
	testq	%r10, %r10
	movabsq	$0, %rdx
	movabsq	$1, %r14
	movq	%rdx, %r9
	je	.LBB68_70
# BB#69:                                # %if.end179
	movq	%r14, %r9
.LBB68_70:                              # %if.end179
	testq	%rdi, %rdi
	movq	%rdx, %rcx
	jne	.LBB68_72
# BB#71:                                # %if.end179
	movq	%r14, %rcx
.LBB68_72:                              # %if.end179
	andq	%r9, %rcx
	testq	%r8, %r8
	movq	%rdx, %rbx
	je	.LBB68_74
# BB#73:                                # %if.end179
	movq	%r14, %rbx
.LBB68_74:                              # %if.end179
	andq	%rbx, %rcx
	cmpq	$2, %r8
	jne	.LBB68_76
# BB#75:                                # %if.end179
	movq	%r14, %rdx
.LBB68_76:                              # %if.end179
	andq	%rdx, %rcx
	movq	$1, %rdx
	jne	.LBB68_78
# BB#77:                                # %if.end179
	movq	%r8, %rdx
.LBB68_78:                              # %if.end179
	testq	%rcx, %rcx
	movq	%r10, %rcx
	jne	.LBB68_80
# BB#79:                                # %if.end179
	movq	%rdi, %rcx
.LBB68_80:                              # %if.end179
	movq	%r11, %rdi
	orq	%rcx, %rdi
	movabsq	$0, %rbx
	movabsq	$1, %r8
	movq	%rbx, %rdi
	jne	.LBB68_82
# BB#81:                                # %if.end179
	movq	%r8, %rdi
.LBB68_82:                              # %if.end179
	andq	%r9, %rdi
	cmpq	$1, %rdx
	je	.LBB68_84
# BB#83:                                # %if.end179
	movq	%r8, %rbx
.LBB68_84:                              # %if.end179
	testq	%rbx, %rdi
	je	.LBB68_86
# BB#85:
	movq	const_int_rtx+512(%rip), %r11
.LBB68_86:                              # %if.end179
	movq	%rcx, (%rsi)
	movq	%r10, 8(%rsi)
	movq	%r11, 16(%rsi)
	movq	%rdx, 24(%rsi)
.LBB68_87:                              # %return
	popq	%rbx
	popq	%r14
	retq
.LBB68_20:                              # %if.else25
	andq	$65535, %rdi            # imm = 0xFFFF
	cmpq	$75, %rdi
	jne	.LBB68_21
# BB#27:                                # %land.lhs.true
	movq	8(%rdx), %r9
	movzbl	(%r9), %eax
	cmpq	$78, %rax
	jne	.LBB68_29
# BB#28:                                # %if.then48
	movq	16(%rdx), %rdi
	leaq	8(%r9), %rax
	addq	$16, %r9
	movq	%r9, %rdx
	movq	%r10, %r11
	jmp	.LBB68_9
.LBB68_21:                              # %if.else25
	xorq	%rax, %rax
	cmpq	$78, %rdi
	jne	.LBB68_87
# BB#22:                                # %if.then27
	leaq	8(%rdx), %rax
	addq	$16, %rdx
	andq	$65533, %rcx            # imm = 0xFFFD
	cmpq	$61, %rcx
	movabsq	$0, %r11
	je	.LBB68_24
# BB#23:                                # %if.then27
	movq	%r10, %r11
.LBB68_24:                              # %if.then27
	je	.LBB68_26
# BB#25:                                # %if.then27
	xorq	%r10, %r10
.LBB68_26:                              # %if.then27
	movq	%r10, %rdi
.LBB68_9:                               # %if.end114
	movq	(%rdx), %rcx
	movq	(%rax), %r9
	testq	%rcx, %rcx
	movq	$1, %r8
	je	.LBB68_30
# BB#10:                                # %if.then115
	movzbl	(%rcx), %edx
	xorq	%rax, %rax
	cmpq	$54, %rdx
	jne	.LBB68_87
# BB#11:                                # %if.end121
	movq	8(%rcx), %r8
	jmp	.LBB68_30
.LBB68_29:                              # %if.then66
	movq	16(%rdx), %rdi
	movq	$1, %r8
	movq	%r10, %r11
.LBB68_30:                              # %if.end125
	testq	%rdi, %rdi
	je	.LBB68_31
# BB#37:                                # %if.end125
	testq	%r9, %r9
	je	.LBB68_31
# BB#38:                                # %if.end125
	cmpq	$1, %r8
	jne	.LBB68_31
# BB#39:                                # %land.lhs.true132
	movq	global_rtl+40(%rip), %rax
	cmpq	%rax, %r9
	movabsq	$0, %rax
	movabsq	$1, %r8
	movq	%rax, %rcx
	jne	.LBB68_41
# BB#40:                                # %land.lhs.true132
	movq	%r8, %rcx
.LBB68_41:                              # %land.lhs.true132
	movq	global_rtl+24(%rip), %rbx
	cmpq	%rbx, %r9
	movq	%rax, %rbx
	jne	.LBB68_43
# BB#42:                                # %land.lhs.true132
	movq	%r8, %rbx
.LBB68_43:                              # %land.lhs.true132
	movq	global_rtl+16(%rip), %rdx
	orq	%rbx, %rcx
	cmpq	%rdx, %r9
	jne	.LBB68_45
# BB#44:                                # %land.lhs.true132
	movq	%r8, %rax
.LBB68_45:                              # %land.lhs.true132
	orq	%rax, %rcx
	movq	%rdi, %r10
	jne	.LBB68_47
# BB#46:                                # %land.lhs.true132
	movq	%r9, %r10
.LBB68_47:                              # %land.lhs.true132
	jne	.LBB68_49
# BB#48:                                # %land.lhs.true132
	movq	%rdi, %r9
.LBB68_49:                              # %land.lhs.true132
	movq	$1, %r8
	movq	$1, %rax
	movq	%r9, %rdi
	jmp	.LBB68_50
.LBB68_31:
	movq	$1, %rax
	movq	%r9, %r10
	jmp	.LBB68_50
.Ltmp470:
	.size	ix86_decompose_address, .Ltmp470-ix86_decompose_address
	.cfi_endproc

	.globl	cmpsi_operand
	.align	16, 0x90
	.type	cmpsi_operand,@function
cmpsi_operand:                          # @cmpsi_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp473:
	.cfi_def_cfa_offset 16
.Ltmp474:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$1, %rax
	jne	.LBB69_9
# BB#1:                                 # %if.end
	movl	(%rbx), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262227, %rcx           # imm = 0x40053
	jne	.LBB69_8
# BB#2:                                 # %land.lhs.true4
	movq	8(%rbx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$133, %rdx
	jne	.LBB69_8
# BB#3:                                 # %land.lhs.true8
	movq	16(%rcx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$54, %rsi
	jne	.LBB69_8
# BB#4:                                 # %land.lhs.true18
	movq	24(%rcx), %rcx
	movzbl	(%rcx), %esi
	cmpq	$54, %rsi
	jne	.LBB69_8
# BB#5:                                 # %land.lhs.true28
	movq	8(%rdx), %rdx
	cmpq	$8, %rdx
	jne	.LBB69_8
# BB#6:                                 # %land.lhs.true38
	movq	8(%rcx), %rcx
	cmpq	$8, %rcx
	jne	.LBB69_8
# BB#7:                                 # %land.lhs.true49
	movq	16(%rbx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$54, %rcx
	je	.LBB69_9
.LBB69_8:                               # %if.end57
	xorq	%rax, %rax
.LBB69_9:                               # %return
	popq	%rbx
	retq
.Ltmp475:
	.size	cmpsi_operand, .Ltmp475-cmpsi_operand
	.cfi_endproc

	.globl	long_memory_operand
	.align	16, 0x90
	.type	long_memory_operand,@function
long_memory_operand:                    # @long_memory_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp479:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp480:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp481:
	.cfi_def_cfa_offset 32
.Ltmp482:
	.cfi_offset %rbx, -24
.Ltmp483:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	callq	memory_operand
	movq	%rax, %rcx
	xorq	%rax, %rax
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rcx
	je	.LBB70_4
# BB#1:                                 # %if.end
	movq	%rbx, %rdi
	callq	memory_address_length
	testq	%r14, %rax
	je	.LBB70_2
# BB#3:                                 # %if.end
	movabsq	$1, %rax
	jmp	.LBB70_4
.LBB70_2:
	movabsq	$0, %rax
.LBB70_4:                               # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp484:
	.size	long_memory_operand, .Ltmp484-long_memory_operand
	.cfi_endproc

	.align	16, 0x90
	.type	memory_address_length,@function
memory_address_length:                  # @memory_address_length
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp488:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp489:
	.cfi_def_cfa_offset 24
	subq	$40, %rsp
.Ltmp490:
	.cfi_def_cfa_offset 64
.Ltmp491:
	.cfi_offset %rbx, -24
.Ltmp492:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movzbl	(%rbx), %ecx
	addq	$-96, %rcx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rcx
	cmpq	$5, %rcx
	ja	.LBB71_2
# BB#1:                                 # %entry
	xorq	%rax, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$57, %rdx
	jne	.LBB71_26
.LBB71_2:                               # %if.end
	leaq	8(%rsp), %rsi
	movq	%rbx, %rdi
	callq	ix86_decompose_address
	testq	%r14, %rax
	je	.LBB71_27
# BB#3:                                 # %if.end13
	movq	8(%rsp), %rax
	movq	16(%rsp), %rcx
	movq	24(%rsp), %rdx
	testq	%rax, %rax
	je	.LBB71_15
# BB#4:                                 # %if.end13
	testq	%rcx, %rcx
	jne	.LBB71_15
# BB#5:                                 # %if.end13
	testq	%rdx, %rdx
	jne	.LBB71_15
# BB#6:                                 # %if.then21
	movq	global_rtl+16(%rip), %rax
	cmpq	%rbx, %rax
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rax
	jne	.LBB71_8
# BB#7:                                 # %if.then21
	movq	%rdx, %rax
.LBB71_8:                               # %if.then21
	movq	global_rtl+40(%rip), %rsi
	cmpq	%rbx, %rsi
	movq	%rcx, %rsi
	jne	.LBB71_10
# BB#9:                                 # %if.then21
	movq	%rdx, %rsi
.LBB71_10:                              # %if.then21
	movq	global_rtl+24(%rip), %rdi
	orq	%rsi, %rax
	cmpq	%rbx, %rdi
	movq	%rcx, %rsi
	jne	.LBB71_12
# BB#11:                                # %if.then21
	movq	%rdx, %rsi
.LBB71_12:                              # %if.then21
	movq	global_rtl+32(%rip), %rdi
	orq	%rsi, %rax
	cmpq	%rbx, %rdi
	jne	.LBB71_14
# BB#13:                                # %if.then21
	movq	%rdx, %rcx
.LBB71_14:                              # %if.then21
	orq	%rcx, %rax
	jmp	.LBB71_26
.LBB71_15:                              # %if.else
	testq	%rdx, %rdx
	je	.LBB71_18
# BB#16:                                # %if.else
	testq	%rax, %rax
	jne	.LBB71_18
# BB#17:                                # %if.else
	movq	$4, %rax
	testq	%rcx, %rcx
	je	.LBB71_26
.LBB71_18:                              # %if.else37
	xorq	%rax, %rax
	testq	%rdx, %rdx
	je	.LBB71_22
# BB#19:                                # %if.then39
	movzbl	(%rdx), %eax
	cmpq	$54, %rax
	jne	.LBB71_21
# BB#20:                                # %cond.true61
	movq	8(%rdx), %rax
	addq	$128, %rax
	cmpq	$256, %rax              # imm = 0x100
	movq	$1, %rax
	jb	.LBB71_22
.LBB71_21:                              # %if.else106
	movq	$4, %rax
.LBB71_22:                              # %if.end108
	testq	%rcx, %rcx
	je	.LBB71_23
# BB#24:                                # %if.end108
	movabsq	$1, %rcx
	jmp	.LBB71_25
.LBB71_23:
	movabsq	$0, %rcx
.LBB71_25:                              # %if.end108
	addq	%rcx, %rax
.LBB71_26:                              # %return
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB71_27:                              # %if.then12
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.memory_address_length, %rcx
	movq	$9877, %rsi             # imm = 0x2695
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp493:
	.size	memory_address_length, .Ltmp493-memory_address_length
	.cfi_endproc

	.globl	aligned_operand
	.align	16, 0x90
	.type	aligned_operand,@function
aligned_operand:                        # @aligned_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp498:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp499:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp500:
	.cfi_def_cfa_offset 32
	subq	$32, %rsp
.Ltmp501:
	.cfi_def_cfa_offset 64
.Ltmp502:
	.cfi_offset %rbx, -32
.Ltmp503:
	.cfi_offset %r14, -24
.Ltmp504:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	callq	general_operand
	xorq	%r14, %r14
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB72_15
# BB#1:                                 # %if.end
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB72_14
# BB#2:                                 # %if.end2
	testq	$134217728, %rax        # imm = 0x8000000
	jne	.LBB72_15
# BB#3:                                 # %if.end7
	movq	8(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$96, %rax
	je	.LBB72_14
# BB#4:                                 # %if.end7
	cmpq	$99, %rax
	je	.LBB72_14
# BB#5:                                 # %if.end15
	leaq	(%rsp), %rsi
	callq	ix86_decompose_address
	testq	%r15, %rax
	je	.LBB72_16
# BB#6:                                 # %if.end19
	movq	8(%rsp), %rax
	testq	%rax, %rax
	je	.LBB72_9
# BB#7:                                 # %if.then21
	movq	24(%rsp), %rcx
	cmpq	$3, %rcx
	jg	.LBB72_9
# BB#8:                                 # %land.lhs.true
	movq	cfun(%rip), %rcx
	movq	24(%rcx), %rcx
	movl	8(%rax), %eax
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %eax
	cmpq	$32, %rax
	jb	.LBB72_15
.LBB72_9:                               # %if.end31
	movq	(%rsp), %rax
	testq	%rax, %rax
	je	.LBB72_11
# BB#10:                                # %if.then33
	movq	cfun(%rip), %rcx
	movq	24(%rcx), %rcx
	movl	8(%rax), %eax
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %eax
	cmpq	$32, %rax
	jb	.LBB72_15
.LBB72_11:                              # %if.end47
	movq	16(%rsp), %rax
	testq	%rax, %rax
	je	.LBB72_14
# BB#12:                                # %if.then49
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB72_15
# BB#13:                                # %lor.lhs.false55
	movzbl	8(%rax), %eax
	testq	$3, %rax
	jne	.LBB72_15
.LBB72_14:                              # %if.end63
	movq	$1, %r14
.LBB72_15:                              # %return
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB72_16:                              # %if.then18
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.aligned_operand, %rcx
	movq	$3535, %rsi             # imm = 0xDCF
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp505:
	.size	aligned_operand, .Ltmp505-aligned_operand
	.cfi_endproc

	.globl	standard_80387_constant_p
	.align	16, 0x90
	.type	standard_80387_constant_p,@function
standard_80387_constant_p:              # @standard_80387_constant_p
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$55, %rax
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	jne	.LBB73_6
# BB#1:                                 # %lor.lhs.false
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB73_6
# BB#2:                                 # %lor.lhs.false
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB73_6
# BB#3:                                 # %if.end
	movq	const_tiny_rtx(,%rdx,8), %rax
	cmpq	%rdi, %rax
	movq	$1, %rax
	je	.LBB73_6
# BB#4:                                 # %if.end25
	movq	const_tiny_rtx+472(,%rdx,8), %rax
	cmpq	%rdi, %rax
	movq	$2, %rax
	je	.LBB73_6
# BB#5:                                 # %select.mid
	xorq	%rax, %rax
.LBB73_6:                               # %return
	retq
.Ltmp506:
	.size	standard_80387_constant_p, .Ltmp506-standard_80387_constant_p
	.cfi_endproc

	.globl	standard_sse_constant_p
	.align	16, 0x90
	.type	standard_sse_constant_p,@function
standard_sse_constant_p:                # @standard_sse_constant_p
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$55, %rcx
	jne	.LBB74_1
# BB#2:                                 # %if.end
	movq	$13, %rcx
	shrq	%cl, %rax
	andq	$2040, %rax             # imm = 0x7F8
	movq	const_tiny_rtx(%rax), %rax
	cmpq	%rdi, %rax
	jne	.LBB74_3
# BB#4:                                 # %if.end
	movabsq	$1, %rax
	retq
.LBB74_1:
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	retq
.LBB74_3:
	movabsq	$0, %rax
	retq
.Ltmp507:
	.size	standard_sse_constant_p, .Ltmp507-standard_sse_constant_p
	.cfi_endproc

	.globl	ix86_can_use_return_insn_p
	.align	16, 0x90
	.type	ix86_can_use_return_insn_p,@function
ix86_can_use_return_insn_p:             # @ix86_can_use_return_insn_p
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$72, %rsp
.Ltmp509:
	.cfi_def_cfa_offset 80
	movl	reload_completed(%rip), %ecx
	xorq	%rax, %rax
	testq	%rcx, %rcx
	je	.LBB75_8
# BB#1:                                 # %entry
	movl	frame_pointer_needed(%rip), %ecx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rcx
	jne	.LBB75_8
# BB#2:                                 # %if.end
	movq	cfun(%rip), %rcx
	movl	64(%rcx), %edx
	testq	%rdx, %rdx
	je	.LBB75_4
# BB#3:                                 # %land.lhs.true
	movslq	68(%rcx), %rcx
	cmpq	$32767, %rcx            # imm = 0x7FFF
	jg	.LBB75_8
.LBB75_4:                               # %if.end4
	leaq	(%rsp), %rdi
	callq	ix86_compute_frame_layout
	xorq	%rax, %rax
	cmpq	$0, 40(%rsp)
	jne	.LBB75_8
# BB#5:                                 # %land.rhs
	movl	(%rsp), %eax
	testq	%rax, %rax
	jne	.LBB75_6
# BB#7:                                 # %land.rhs
	movabsq	$1, %rax
.LBB75_8:                               # %cleanup
	addq	$72, %rsp
	retq
.LBB75_6:
	movabsq	$0, %rax
	addq	$72, %rsp
	retq
.Ltmp510:
	.size	ix86_can_use_return_insn_p, .Ltmp510-ix86_can_use_return_insn_p
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_compute_frame_layout,@function
ix86_compute_frame_layout:              # @ix86_compute_frame_layout
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp517:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp518:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp519:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp520:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp521:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp522:
	.cfi_def_cfa_offset 80
.Ltmp523:
	.cfi_offset %rbx, -48
.Ltmp524:
	.cfi_offset %r12, -40
.Ltmp525:
	.cfi_offset %r13, -32
.Ltmp526:
	.cfi_offset %r14, -24
.Ltmp527:
	.cfi_offset %r15, -16
	movq	cfun(%rip), %rax
	movl	400(%rax), %r12d
	movl	404(%rax), %eax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%rdi, %r14
	callq	get_frame_size
	movl	target_flags(%rip), %ecx
	movl	flag_pic(%rip), %edx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	andq	$33554432, %rcx         # imm = 0x2000000
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	testq	%rdx, %rdx
	movq	%rsi, %rdx
	je	.LBB76_2
# BB#1:                                 # %select.mid
	movq	$3, %rdx
.LBB76_2:                               # %select.end
	movq	cfun(%rip), %rax
	movl	424(%rax), %r10d
	movl	frame_pointer_needed(%rip), %edi
	andq	%rsi, %rcx
	movq	%r10, %r11
	andq	$3145856, %r11          # imm = 0x300080
	andq	$128, %r10
	testq	%rdi, %rdi
	jne	.LBB76_3
# BB#4:                                 # %select.end
	movabsq	$1, %r9
	jmp	.LBB76_5
.LBB76_3:
	movabsq	$0, %r9
.LBB76_5:                               # %select.end
	movq	%rax, 8(%rsp)           # 8-byte Spill
	cmpq	$1, %rcx
	sbbq	%r13, %r13
	notq	%r13
	orq	%rdx, %r13
	xorq	%rbx, %rbx
	movq	$52, %rdi
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %r13
	jmp	.LBB76_6
	.align	16, 0x90
.LBB76_14:                              # %for.body.i.backedge
                                        #   in Loop: Header=BB76_6 Depth=1
	decq	%rdi
	movq	%rsi, %rbx
.LBB76_6:                               # %for.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_16 Depth 2
	movq	%rdi, %rcx
	andq	%rdx, %rcx
	cmpq	%rcx, %r13
	movq	$1, %rsi
	jne	.LBB76_8
# BB#7:                                 # %for.body.i
                                        #   in Loop: Header=BB76_6 Depth=1
	testq	%rdx, %r11
	jne	.LBB76_17
.LBB76_8:                               # %if.end.i.i
                                        #   in Loop: Header=BB76_6 Depth=1
	xorq	%r8, %r8
	testq	%r10, %r10
	je	.LBB76_9
	.align	16, 0x90
.LBB76_16:                              # %if.end24.i.i
                                        #   Parent Loop BB76_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r8, %rax
	andq	%rdx, %rax
	cmpq	%rcx, %rax
	je	.LBB76_17
# BB#15:                                # %for.cond.i.i
                                        #   in Loop: Header=BB76_16 Depth=2
	incq	%r8
	movq	%r8, %r15
	andq	%rdx, %r15
	cmpq	$1, %r15
	jbe	.LBB76_16
.LBB76_9:                               # %if.end28.i.i
                                        #   in Loop: Header=BB76_6 Depth=1
	movzbl	regs_ever_live(%rdi), %eax
	xorq	%rsi, %rsi
	testq	%rax, %rax
	je	.LBB76_17
# BB#10:                                # %land.lhs.true30.i.i
                                        #   in Loop: Header=BB76_6 Depth=1
	movzbl	call_used_regs(%rdi), %eax
	testq	%rax, %rax
	jne	.LBB76_17
# BB#11:                                # %land.lhs.true34.i.i
                                        #   in Loop: Header=BB76_6 Depth=1
	movzbl	fixed_regs(%rdi), %eax
	testq	%rax, %rax
	jne	.LBB76_17
# BB#12:                                # %land.rhs.i.i
                                        #   in Loop: Header=BB76_6 Depth=1
	cmpq	$6, %rcx
	movq	$1, %rsi
	jne	.LBB76_17
# BB#13:                                # %ix86_save_reg.exit.thread.i
                                        #   in Loop: Header=BB76_6 Depth=1
	addq	%r9, %rbx
	movq	%rbx, %rsi
	jmp	.LBB76_14
	.align	16, 0x90
.LBB76_17:                              # %ix86_save_reg.exit.i
                                        #   in Loop: Header=BB76_6 Depth=1
	movq	$32, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	%rbx, %rsi
	testq	%rax, %rax
	jg	.LBB76_14
# BB#18:                                # %ix86_nsaved_regs.exit
	movq	$32, %rcx
	movq	%r12, %r15
	shlq	%cl, %r15
	movq	$32, %rcx
	sarq	%cl, %r15
	movq	$60, %rcx
	shrq	%cl, %r15
	andq	$7, %r15
	addq	%r12, %r15
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	$35, %rcx
	sarq	%cl, %r15
	movq	$32, %rcx
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%rax, %r10
	shlq	%cl, %r10
	movq	$32, %rcx
	sarq	%cl, %r10
	movq	$60, %rcx
	shrq	%cl, %r10
	andq	$7, %r10
	addq	%rax, %r10
	movq	$32, %rcx
	shlq	%cl, %r10
	movl	%esi, (%r14)
	movl	target_flags(%rip), %r9d
	movq	$35, %rcx
	sarq	%cl, %r10
	movl	frame_pointer_needed(%rip), %eax
	movq	$23, %rcx
	movq	%r9, %r11
	shrq	%cl, %r11
	andq	$4, %r11
	addq	$4, %r11
	testq	%rax, %rax
	je	.LBB76_19
# BB#20:                                # %ix86_nsaved_regs.exit
	movabsq	$1, %rcx
	jmp	.LBB76_21
.LBB76_19:
	movabsq	$0, %rcx
.LBB76_21:                              # %ix86_nsaved_regs.exit
	shlq	%cl, %r11
	movq	$32, %rcx
	movq	%r11, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%rax, 56(%r14)
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB76_25
# BB#22:                                # %ix86_nsaved_regs.exit
	addq	$7, %r12
	andq	%rdx, %r12
	cmpq	$14, %r12
	jbe	.LBB76_23
.LBB76_25:                              # %if.end
	movq	$20, %rcx
	movq	%r9, %rbx
	shrq	%cl, %rbx
	andq	$32, %rbx
	addq	$32, %rbx
	movq	$3, %rcx
	sarq	%cl, %rbx
	cmpq	%rbx, %r10
	jl	.LBB76_26
# BB#27:                                # %if.end17
	movslq	ix86_preferred_stack_boundary(%rip), %rax
	movq	$60, %rcx
	movq	%rax, %rdi
	shrq	%cl, %rdi
	andq	$7, %rdi
	addq	%rax, %rdi
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$35, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %r10
	jg	.LBB76_28
# BB#29:                                # %if.end22
	cmpq	%rdi, %r15
	jg	.LBB76_30
# BB#31:                                # %if.end27
	cmpq	%rbx, %r15
	jl	.LBB76_33
# BB#32:                                # %if.end27
	movq	%r15, %rbx
.LBB76_33:                              # %if.end27
	movq	8(%rsp), %r8            # 8-byte Reload
	movq	392(%r8), %rax
	andq	$33554432, %r9          # imm = 0x2000000
	movq	$23, %rcx
	movq	%r9, %rdi
	shrq	%cl, %rdi
	movl	1416(%rax), %eax
	addq	$4, %rdi
	imulq	%rdi, %rsi
	addq	%r11, %rsi
	testq	%rax, %rax
	je	.LBB76_38
# BB#34:                                # %if.then46
	andq	%rdx, %r9
	je	.LBB76_35
# BB#36:                                # %if.then46
	movabsq	$1, %rcx
	jmp	.LBB76_37
.LBB76_38:                              # %if.else
	xorq	%r9, %r9
	movl	%r9d, 8(%r14)
	jmp	.LBB76_39
.LBB76_35:
	movabsq	$0, %rcx
.LBB76_37:                              # %if.then46
	leaq	3(%rcx,%rcx,2), %rax
	imulq	%rdi, %rax
	movq	$18, %rcx
	shrq	%cl, %r9
	addq	%rax, %r9
	addq	%r9, %rsi
	movl	%r9d, 8(%r14)
	movq	$32, %rcx
	shlq	%cl, %r9
	movq	$32, %rcx
	sarq	%cl, %r9
.LBB76_39:                              # %if.end73
	leaq	-1(%rbx,%rsi), %rax
	negq	%rbx
	andq	%rax, %rbx
	movq	%rbx, %rdi
	subq	%rsi, %rdi
	movl	%edi, 4(%r14)
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%rbx, 48(%r14)
	movzbl	target_flags+1(%rip), %eax
	movq	24(%rsp), %rcx          # 8-byte Reload
	addq	%rcx, %rbx
	testq	$16, %rax
	je	.LBB76_42
# BB#40:                                # %if.end73
	movl	current_function_is_leaf(%rip), %eax
	testq	%rdx, %rax
	jne	.LBB76_42
# BB#41:                                # %if.then88
	movslq	76(%r8), %rsi
	addq	%rsi, %rbx
	jmp	.LBB76_43
.LBB76_42:                              # %if.else91
	xorq	%rsi, %rsi
.LBB76_43:                              # %if.end93
	movl	%esi, 28(%r14)
	movl	current_function_is_leaf(%rip), %eax
	testq	%rax, %rax
	je	.LBB76_45
# BB#44:                                # %lor.lhs.false
	movzbl	424(%r8), %eax
	testq	$64, %rax
	je	.LBB76_46
.LBB76_45:                              # %if.then96
	leaq	-1(%r10,%rbx), %rax
	negq	%r10
	andq	%rax, %r10
	subq	%rbx, %r10
	jmp	.LBB76_47
.LBB76_46:                              # %if.else102
	xorq	%r10, %r10
.LBB76_47:                              # %if.end104
	movl	%r10d, 24(%r14)
	addq	%r10, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%rbx, 64(%r14)
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	24(%rsp), %rax          # 8-byte Reload
	addq	%rax, %rdi
	movq	$32, %rcx
	shlq	%cl, %r10
	movq	$32, %rcx
	sarq	%cl, %r10
	addq	%rdi, %r10
	addq	%rsi, %r10
	addq	%r9, %r10
	movq	%r10, 40(%r14)
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB76_54
# BB#48:                                # %land.lhs.true122
	testq	$67108864, %rax         # imm = 0x4000000
	jne	.LBB76_54
# BB#49:                                # %land.lhs.true122
	movl	current_function_sp_is_unchanging(%rip), %eax
	testq	%rdx, %rax
	je	.LBB76_54
# BB#50:                                # %land.lhs.true122
	movl	current_function_is_leaf(%rip), %eax
	testq	%rdx, %rax
	je	.LBB76_54
# BB#51:                                # %if.then129
	movq	$32, %rcx
	movq	%r10, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$120, %rax
	movq	$120, %rax
	jg	.LBB76_53
# BB#52:                                # %if.then129
	movq	%r10, %rax
.LBB76_53:                              # %if.then129
	movl	%eax, 32(%r14)
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	jmp	.LBB76_55
.LBB76_54:                              # %if.else138
	xorq	%rax, %rax
	movl	%eax, 32(%r14)
.LBB76_55:                              # %if.end140
	subq	%rax, %r10
	movq	%r10, 40(%r14)
	subq	%rax, %rbx
	movq	%rbx, 64(%r14)
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB76_23:                              # %if.then
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_compute_frame_layout, %rcx
	movq	$4048, %rsi             # imm = 0xFD0
	jmp	.LBB76_24
.LBB76_26:                              # %if.then16
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_compute_frame_layout, %rcx
	movq	$4050, %rsi             # imm = 0xFD2
	jmp	.LBB76_24
.LBB76_28:                              # %if.then21
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_compute_frame_layout, %rcx
	movq	$4052, %rsi             # imm = 0xFD4
	jmp	.LBB76_24
.LBB76_30:                              # %if.then26
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_compute_frame_layout, %rcx
	movq	$4054, %rsi             # imm = 0xFD6
.LBB76_24:                              # %if.then
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp528:
	.size	ix86_compute_frame_layout, .Ltmp528-ix86_compute_frame_layout
	.cfi_endproc

	.globl	ix86_frame_pointer_required
	.align	16, 0x90
	.type	ix86_frame_pointer_required,@function
ix86_frame_pointer_required:            # @ix86_frame_pointer_required
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp531:
	.cfi_def_cfa_offset 16
.Ltmp532:
	.cfi_offset %rbx, -16
	movq	cfun(%rip), %rax
	movq	392(%rax), %rax
	movl	1420(%rax), %eax
	testq	%rax, %rax
	movq	$1, %rbx
	jne	.LBB77_4
# BB#1:                                 # %if.end
	movzbl	target_flags(%rip), %eax
	testq	$128, %rax
	je	.LBB77_3
# BB#2:                                 # %land.lhs.true
	callq	leaf_function_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB77_4
.LBB77_3:                               # %if.end4
	xorq	%rbx, %rbx
.LBB77_4:                               # %return
	movq	%rbx, %rax
	popq	%rbx
	retq
.Ltmp533:
	.size	ix86_frame_pointer_required, .Ltmp533-ix86_frame_pointer_required
	.cfi_endproc

	.globl	ix86_setup_frame_addresses
	.align	16, 0x90
	.type	ix86_setup_frame_addresses,@function
ix86_setup_frame_addresses:             # @ix86_setup_frame_addresses
	.cfi_startproc
# BB#0:                                 # %entry
	movq	cfun(%rip), %rax
	movq	392(%rax), %rax
	movq	$1, %rcx
	movl	%ecx, 1420(%rax)
	retq
.Ltmp534:
	.size	ix86_setup_frame_addresses, .Ltmp534-ix86_setup_frame_addresses
	.cfi_endproc

	.globl	ix86_asm_file_end
	.align	16, 0x90
	.type	ix86_asm_file_end,@function
ix86_asm_file_end:                      # @ix86_asm_file_end
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp537:
	.cfi_def_cfa_offset 16
	subq	$16, %rsp
.Ltmp538:
	.cfi_def_cfa_offset 32
.Ltmp539:
	.cfi_offset %rbx, -16
	movl	ix86_cpu(%rip), %ecx
	movq	%rdi, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$120, %rax
	je	.LBB79_3
# BB#1:                                 # %entry
	movzbl	pic_label_name(%rip), %eax
	testq	$255, %rax
	je	.LBB79_3
# BB#2:                                 # %if.end
	callq	text_section
	movabsq	$pic_label_name, %rsi
	movq	%rbx, %rdi
	callq	assemble_name
	movabsq	$.L.str77, %rdi
	movq	$2, %rsi
	movq	$1, %rdx
	movq	%rbx, %rcx
	callq	fwrite
	movq	pic_offset_table_rtx(%rip), %rax
	movq	global_rtl+16(%rip), %rsi
	movq	%rax, (%rsp)
	movq	$4, %rdi
	callq	gen_rtx_MEM
	movq	%rax, 8(%rsp)
	movabsq	$.L.str78, %rdi
	leaq	(%rsp), %rbx
	movq	%rbx, %rsi
	callq	output_asm_insn
	movabsq	$.L.str79, %rdi
	movq	%rbx, %rsi
	callq	output_asm_insn
.LBB79_3:                               # %return
	addq	$16, %rsp
	popq	%rbx
	retq
.Ltmp540:
	.size	ix86_asm_file_end, .Ltmp540-ix86_asm_file_end
	.cfi_endproc

	.globl	load_pic_register
	.align	16, 0x90
	.type	load_pic_register,@function
load_pic_register:                      # @load_pic_register
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp544:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp545:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp546:
	.cfi_def_cfa_offset 32
.Ltmp547:
	.cfi_offset %rbx, -24
.Ltmp548:
	.cfi_offset %r14, -16
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB80_7
# BB#1:                                 # %if.end
	movabsq	$.L.str80, %rdx
	movq	$68, %rdi
	movq	$4, %rsi
	callq	gen_rtx_fmt_s
	movl	ix86_cpu(%rip), %ecx
	movq	%rax, %r14
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$120, %rax
	je	.LBB80_5
# BB#2:                                 # %if.then5
	movzbl	pic_label_name(%rip), %eax
	testq	%rax, %rax
	jne	.LBB80_4
# BB#3:                                 # %do.body
	movabsq	$pic_label_name, %rdi
	movabsq	$.L.str55, %rsi
	movabsq	$.L.str81, %rdx
	xorq	%rcx, %rcx
	xorq	%rax, %rax
	callq	sprintf
.LBB80_4:                               # %if.end9
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movabsq	$pic_label_name, %rdx
	movq	$68, %rdi
	callq	gen_rtx_fmt_s
	movq	$2, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	jmp	.LBB80_6
.LBB80_5:                               # %if.else
	callq	gen_label_rtx
	movq	$67, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_u00
.LBB80_6:                               # %if.end17
	movq	%rax, %rbx
	movq	pic_offset_table_rtx(%rip), %rdi
	movq	%rbx, %rsi
	callq	gen_prologue_get_pc
	movq	%rax, %rdi
	callq	emit_insn
	movq	pic_offset_table_rtx(%rip), %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	gen_prologue_set_got
	movq	%rax, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	emit_insn  # TAILCALL
.LBB80_7:                               # %if.then
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.load_pic_register, %rcx
	movq	$3916, %rsi             # imm = 0xF4C
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp549:
	.size	load_pic_register, .Ltmp549-load_pic_register
	.cfi_endproc

	.globl	ix86_initial_elimination_offset
	.align	16, 0x90
	.type	ix86_initial_elimination_offset,@function
ix86_initial_elimination_offset:        # @ix86_initial_elimination_offset
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp555:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp556:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp557:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp558:
	.cfi_def_cfa_offset 40
	subq	$72, %rsp
.Ltmp559:
	.cfi_def_cfa_offset 112
.Ltmp560:
	.cfi_offset %rbx, -40
.Ltmp561:
	.cfi_offset %r12, -32
.Ltmp562:
	.cfi_offset %r14, -24
.Ltmp563:
	.cfi_offset %r15, -16
	movq	%rsi, %r14
	movq	%rdi, %r12
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movq	%r12, %rbx
	andq	%r15, %rbx
	leaq	(%rsp), %rdi
	callq	ix86_compute_frame_layout
	cmpq	$16, %rbx
	jne	.LBB81_3
# BB#1:                                 # %entry
	movq	%r14, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jne	.LBB81_3
# BB#2:                                 # %if.then
	movq	56(%rsp), %rax
	jmp	.LBB81_15
.LBB81_3:                               # %if.else
	andq	%r15, %r12
	cmpq	$20, %r12
	jne	.LBB81_6
# BB#4:                                 # %if.else
	movq	%r14, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jne	.LBB81_6
# BB#5:                                 # %if.then5
	movq	48(%rsp), %rcx
	movq	56(%rsp), %rax
	jmp	.LBB81_14
.LBB81_6:                               # %if.else7
	andq	%r15, %r14
	cmpq	$7, %r14
	jne	.LBB81_7
# BB#9:                                 # %if.else10
	cmpq	$16, %r12
	jne	.LBB81_11
# BB#10:                                # %if.then12
	movq	64(%rsp), %rax
	jmp	.LBB81_15
.LBB81_11:                              # %if.else13
	cmpq	$20, %r12
	jne	.LBB81_12
# BB#13:                                # %if.else16
	movq	48(%rsp), %rcx
	movq	64(%rsp), %rax
.LBB81_14:                              # %cleanup
	subq	%rcx, %rax
.LBB81_15:                              # %cleanup
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB81_7:                               # %if.then9
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_initial_elimination_offset, %rcx
	movq	$4013, %rsi             # imm = 0xFAD
	jmp	.LBB81_8
.LBB81_12:                              # %if.then15
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_initial_elimination_offset, %rcx
	movq	$4017, %rsi             # imm = 0xFB1
.LBB81_8:                               # %if.then9
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp564:
	.size	ix86_initial_elimination_offset, .Ltmp564-ix86_initial_elimination_offset
	.cfi_endproc

	.globl	ix86_expand_prologue
	.align	16, 0x90
	.type	ix86_expand_prologue,@function
ix86_expand_prologue:                   # @ix86_expand_prologue
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp571:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp572:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp573:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp574:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp575:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp576:
	.cfi_def_cfa_offset 128
.Ltmp577:
	.cfi_offset %rbx, -48
.Ltmp578:
	.cfi_offset %r12, -40
.Ltmp579:
	.cfi_offset %r13, -32
.Ltmp580:
	.cfi_offset %r14, -24
.Ltmp581:
	.cfi_offset %r15, -16
	movl	flag_pic(%rip), %eax
	xorq	%r12, %r12
	testq	%rax, %rax
	movabsq	$0, %r13
	je	.LBB82_5
# BB#1:                                 # %land.lhs.true
	movq	cfun(%rip), %rax
	movzbl	426(%rax), %eax
	testq	$48, %rax
	movabsq	$0, %r13
	je	.LBB82_5
# BB#2:                                 # %land.rhs
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB82_3
# BB#4:                                 # %land.rhs
	movabsq	$1, %r13
	jmp	.LBB82_5
.LBB82_3:
	movabsq	$0, %r13
.LBB82_5:                               # %land.end
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB82_8
# BB#6:                                 # %if.then
	movq	$30, %rdi
	callq	expensive_function_p
	movl	ix86_cpu(%rip), %ecx
	xorq	$1, %rax
	movl	%eax, use_fast_prologue_epilogue(%rip)
	movq	$1, %r12
	shlq	%cl, %r12
	andq	$104, %r12
	je	.LBB82_8
# BB#7:                                 # %if.then
	movq	%rax, %r12
.LBB82_8:                               # %if.end12
	leaq	8(%rsp), %rdi
	callq	ix86_compute_frame_layout
	movl	frame_pointer_needed(%rip), %eax
	testq	%rax, %rax
	je	.LBB82_10
# BB#9:                                 # %if.then14
	movl	target_flags(%rip), %ebx
	movq	global_rtl+32(%rip), %r14
	movq	$25, %rcx
	movq	global_rtl+16(%rip), %rdx
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	$96, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_fmt_e
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%rax), %ecx
	movabsq	$2147483648, %rbx       # imm = 0x80000000
	orq	%rbx, %rcx
	movl	%ecx, (%rax)
	movq	global_rtl+32(%rip), %rdi
	movq	global_rtl+16(%rip), %rsi
	callq	emit_move_insn
	movl	(%rax), %ecx
	orq	%rbx, %rcx
	movl	%ecx, (%rax)
.LBB82_10:                              # %if.end23
	movq	48(%rsp), %r14
	testq	%r14, %r14
	je	.LBB82_11
# BB#16:                                # %if.end27
	movq	$52, %r15
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r12
	je	.LBB82_13
# BB#17:                                # %if.end27.if.else_crit_edge
	movl	8(%rsp), %eax
	jmp	.LBB82_18
.LBB82_11:                              # %land.lhs.true24
	movslq	8(%rsp), %rax
	cmpq	$2, %rax
	movq	$52, %r15
	jl	.LBB82_13
# BB#12:                                # %land.lhs.true24
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %r12
	je	.LBB82_13
.LBB82_18:                              # %if.else
	movl	target_flags(%rip), %r12d
	movq	$23, %rcx
	shrq	%cl, %r12
	andq	$4, %r12
	addq	$4, %r12
	imulq	%rax, %r12
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	addq	%r14, %r12
	movq	$1, %rbx
	jmp	.LBB82_34
	.align	16, 0x90
.LBB82_13:                              # %for.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_25 Depth 2
	movl	target_flags(%rip), %edi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	$33554432, %rdi         # imm = 0x2000000
	movq	%rax, %rcx
	jne	.LBB82_20
# BB#14:                                # %lor.rhs.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movl	flag_pic(%rip), %ecx
	testq	%rcx, %rcx
	jne	.LBB82_19
# BB#15:                                #   in Loop: Header=BB82_13 Depth=1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	jmp	.LBB82_20
	.align	16, 0x90
.LBB82_19:                              # %select.mid
                                        #   in Loop: Header=BB82_13 Depth=1
	movq	$3, %rcx
.LBB82_20:                              # %lor.end.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movq	cfun(%rip), %rdx
	movl	424(%rdx), %edx
	andq	%r15, %rax
	cmpq	%rax, %rcx
	jne	.LBB82_22
# BB#21:                                # %lor.end.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movq	%rdx, %rax
	andq	$3145856, %rax          # imm = 0x300080
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB82_31
.LBB82_22:                              # %if.end.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	testq	$128, %rdx
	je	.LBB82_26
# BB#23:                                #   in Loop: Header=BB82_13 Depth=1
	xorq	%rax, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%r15, %rdx
	andq	%rcx, %rdx
	.align	16, 0x90
.LBB82_25:                              # %if.end24.i.i
                                        #   Parent Loop BB82_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rsi
	andq	%rcx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB82_31
# BB#24:                                # %for.cond.i.i
                                        #   in Loop: Header=BB82_25 Depth=2
	incq	%rax
	movq	%rax, %rsi
	andq	%rcx, %rsi
	cmpq	$1, %rsi
	jbe	.LBB82_25
.LBB82_26:                              # %if.end28.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movzbl	regs_ever_live(%r15), %eax
	testq	%rax, %rax
	je	.LBB82_32
# BB#27:                                # %land.lhs.true30.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movzbl	call_used_regs(%r15), %eax
	testq	%rax, %rax
	jne	.LBB82_32
# BB#28:                                # %land.lhs.true34.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movzbl	fixed_regs(%r15), %eax
	testq	%rax, %rax
	jne	.LBB82_32
# BB#29:                                # %land.rhs.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%r15, %rcx
	andq	%rax, %rcx
	cmpq	$6, %rcx
	jne	.LBB82_31
# BB#30:                                # %land.rhs.i.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movl	frame_pointer_needed(%rip), %ecx
	testq	%rax, %rcx
	jne	.LBB82_32
	.align	16, 0x90
.LBB82_31:                              # %if.then.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%r15, %rsi
	callq	gen_rtx_REG
	movl	target_flags(%rip), %ebx
	movq	%rax, %r12
	movq	$25, %rcx
	movq	global_rtl+16(%rip), %rdx
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	$96, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_fmt_e
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	movq	%r12, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%rax), %ecx
	movabsq	$2147483648, %rdx       # imm = 0x80000000
	orq	%rcx, %rdx
	movl	%edx, (%rax)
.LBB82_32:                              # %for.inc.i
                                        #   in Loop: Header=BB82_13 Depth=1
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	decq	%r15
	xorq	%rbx, %rbx
	testq	%rax, %rax
	jg	.LBB82_13
# BB#33:
	movq	%r14, %r12
.LBB82_34:                              # %if.end33
	testq	%r12, %r12
	je	.LBB82_40
# BB#35:                                # %if.else37
	movl	target_flags(%rip), %eax
	testq	$256, %rax              # imm = 0x100
	je	.LBB82_37
# BB#36:                                # %if.else37
	cmpq	$-2, %r12
	jle	.LBB82_37
# BB#38:                                # %if.else50
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB82_51
# BB#39:                                # %if.end54
	movq	$4, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_REG
	movq	%rax, %r15
	xorq	%rdi, %rdi
	movq	%r12, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movabsq	$.L.str82, %rdx
	movq	$68, %rdi
	callq	gen_rtx_fmt_s
	movq	$2, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	const_int_rtx+512(%rip), %rsi
	movq	const_int_rtx+504(%rip), %rdx
	movq	%rax, %rdi
	callq	gen_call
	movq	%rax, %rdi
	callq	emit_call_insn
	movq	%rax, %r12
	movq	$48, %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	callq	gen_rtx_fmt_e
	movq	64(%r12), %rcx
	movq	$3, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%rax, 64(%r12)
	jmp	.LBB82_40
.LBB82_37:                              # %if.then43
	movq	global_rtl+16(%rip), %r15
	negq	%r12
	xorq	%rdi, %rdi
	movq	%r12, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	gen_pro_epilogue_adjust_stack
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%rax), %ecx
	movabsq	$2147483648, %rdx       # imm = 0x80000000
	orq	%rcx, %rdx
	movl	%edx, (%rax)
.LBB82_40:                              # %if.end71
	testq	%rbx, %rbx
	je	.LBB82_46
# BB#41:                                # %if.then73
	movl	frame_pointer_needed(%rip), %eax
	testq	%rax, %rax
	je	.LBB82_43
# BB#42:                                # %if.then73
	testq	%r14, %r14
	je	.LBB82_43
# BB#44:                                # %if.else80
	movq	global_rtl+32(%rip), %rdi
	movl	8(%rsp), %eax
	negq	%rax
	movl	target_flags(%rip), %esi
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	addq	$4, %rsi
	imulq	%rax, %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	jmp	.LBB82_45
.LBB82_43:                              # %if.then78
	movq	global_rtl+16(%rip), %rdi
	movq	%r14, %rsi
.LBB82_45:                              # %if.end89
	callq	ix86_emit_save_regs_using_mov
.LBB82_46:                              # %if.end89
	testq	%r13, %r13
	je	.LBB82_48
# BB#47:                                # %if.end92.thread
	callq	load_pic_register
	jmp	.LBB82_50
.LBB82_48:                              # %if.end92
	movq	cfun(%rip), %rax
	movzbl	425(%rax), %eax
	testq	$64, %rax
	je	.LBB82_50
# BB#49:                                # %if.then99
	callq	gen_blockage
	movq	%rax, %rdi
	callq	emit_insn
.LBB82_50:                              # %if.end102
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB82_51:                              # %if.then53
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_prologue, %rcx
	movq	$4235, %rsi             # imm = 0x108B
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp582:
	.size	ix86_expand_prologue, .Ltmp582-ix86_expand_prologue
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_emit_save_regs_using_mov,@function
ix86_emit_save_regs_using_mov:          # @ix86_emit_save_regs_using_mov
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp589:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp590:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp591:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp592:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp593:
	.cfi_def_cfa_offset 48
.Ltmp594:
	.cfi_offset %rbx, -48
.Ltmp595:
	.cfi_offset %r12, -40
.Ltmp596:
	.cfi_offset %r13, -32
.Ltmp597:
	.cfi_offset %r14, -24
.Ltmp598:
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	xorq	%rbx, %rbx
	movl	target_flags(%rip), %edi
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB83_1:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_13 Depth 2
	testq	$33554432, %rdi         # imm = 0x2000000
	movq	%r13, %rcx
	jne	.LBB83_4
# BB#2:                                 # %lor.rhs.i
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	movq	%r13, %rcx
	je	.LBB83_4
# BB#3:                                 # %select.mid
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	$3, %rcx
.LBB83_4:                               # %lor.end.i
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	cfun(%rip), %rax
	movl	424(%rax), %edx
	movq	%rbx, %rax
	andq	%r13, %rax
	cmpq	%rax, %rcx
	jne	.LBB83_6
# BB#5:                                 # %lor.end.i
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	%rdx, %rcx
	andq	$3145856, %rcx          # imm = 0x300080
	testq	%r13, %rcx
	jne	.LBB83_14
.LBB83_6:                               # %if.end.i
                                        #   in Loop: Header=BB83_1 Depth=1
	xorq	%rcx, %rcx
	testq	$128, %rdx
	je	.LBB83_7
	.align	16, 0x90
.LBB83_13:                              # %if.end24.i
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, %rdx
	andq	%r13, %rdx
	cmpq	%rax, %rdx
	je	.LBB83_14
# BB#12:                                # %for.cond.i
                                        #   in Loop: Header=BB83_13 Depth=2
	incq	%rcx
	movq	%rcx, %rdx
	andq	%r13, %rdx
	cmpq	$1, %rdx
	jbe	.LBB83_13
.LBB83_7:                               # %if.end28.i
                                        #   in Loop: Header=BB83_1 Depth=1
	movzbl	regs_ever_live(%rbx), %ecx
	testq	%rcx, %rcx
	je	.LBB83_15
# BB#8:                                 # %land.lhs.true30.i
                                        #   in Loop: Header=BB83_1 Depth=1
	movzbl	call_used_regs(%rbx), %ecx
	testq	%rcx, %rcx
	jne	.LBB83_15
# BB#9:                                 # %land.lhs.true34.i
                                        #   in Loop: Header=BB83_1 Depth=1
	movzbl	fixed_regs(%rbx), %ecx
	testq	%rcx, %rcx
	jne	.LBB83_15
# BB#10:                                # %land.rhs.i
                                        #   in Loop: Header=BB83_1 Depth=1
	cmpq	$6, %rax
	jne	.LBB83_14
# BB#11:                                # %land.rhs.i
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	frame_pointer_needed(%rip), %eax
	testq	%r13, %rax
	jne	.LBB83_15
	.align	16, 0x90
.LBB83_14:                              # %if.then
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_MEM
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$1, %rcx
	movq	$1, %r8
	movq	%rax, %rdi
	movq	%r15, %rdx
	callq	adjust_address_1
	movl	target_flags(%rip), %edi
	movq	%rax, %r12
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_REG
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movl	(%rax), %ecx
	movabsq	$2147483648, %rdx       # imm = 0x80000000
	orq	%rdx, %rcx
	movl	%ecx, (%rax)
	movl	target_flags(%rip), %edi
	movq	$23, %rcx
	movq	%rdi, %rax
	shrq	%cl, %rax
	andq	$4, %rax
	addq	$4, %rax
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rcx, %rax
	addq	%rax, %r15
.LBB83_15:                              # %for.inc
                                        #   in Loop: Header=BB83_1 Depth=1
	incq	%rbx
	cmpq	$53, %rbx
	jne	.LBB83_1
# BB#16:                                # %for.end
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp599:
	.size	ix86_emit_save_regs_using_mov, .Ltmp599-ix86_emit_save_regs_using_mov
	.cfi_endproc

	.globl	ix86_expand_epilogue
	.align	16, 0x90
	.type	ix86_expand_epilogue,@function
ix86_expand_epilogue:                   # @ix86_expand_epilogue
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp606:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp607:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp608:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp609:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp610:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp611:
	.cfi_def_cfa_offset 128
.Ltmp612:
	.cfi_offset %rbx, -48
.Ltmp613:
	.cfi_offset %r12, -40
.Ltmp614:
	.cfi_offset %r13, -32
.Ltmp615:
	.cfi_offset %r14, -24
.Ltmp616:
	.cfi_offset %r15, -16
	movl	frame_pointer_needed(%rip), %eax
	movq	%rdi, %r14
	testq	%rax, %rax
	movq	$1, %r12
	je	.LBB84_4
# BB#1:                                 # %lor.rhs
	movl	current_function_sp_is_unchanging(%rip), %eax
	testq	%rax, %rax
	je	.LBB84_2
# BB#3:                                 # %lor.rhs
	movabsq	$1, %r12
	jmp	.LBB84_4
.LBB84_2:
	movabsq	$0, %r12
.LBB84_4:                               # %lor.end
	leaq	8(%rsp), %rdi
	callq	ix86_compute_frame_layout
	movq	cfun(%rip), %rax
	movl	424(%rax), %edx
	movslq	8(%rsp), %rax
	andq	$128, %rdx
	movq	$7, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%r14, %rcx
	andq	%r13, %rcx
	cmpq	$2, %rcx
	je	.LBB84_5
# BB#6:                                 # %lor.end
	movabsq	$1, %rcx
	jmp	.LBB84_7
.LBB84_5:
	movabsq	$0, %rcx
.LBB84_7:                               # %lor.end
	testq	%rcx, %rsi
	jne	.LBB84_8
# BB#9:                                 # %lor.end
	movq	%rax, %rdi
	jmp	.LBB84_10
.LBB84_8:
	leaq	-2(%rax), %rdi
.LBB84_10:                              # %lor.end
	movl	target_flags(%rip), %ebx
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	movq	$-4, %rsi
	subq	%rbx, %rsi
	imulq	%rdi, %rsi
	cmpq	$1, %rax
	jg	.LBB84_13
# BB#11:                                # %lor.end
	movq	%r12, %rcx
	xorq	$1, %rcx
	je	.LBB84_13
# BB#12:
	movq	%rax, %r15
	jmp	.LBB84_27
.LBB84_13:                              # %lor.lhs.false
	movl	ix86_cpu(%rip), %ecx
	movl	use_fast_prologue_epilogue(%rip), %r8d
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$104, %rdi
	je	.LBB84_19
# BB#14:                                # %lor.lhs.false
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %r8
	je	.LBB84_19
# BB#15:                                # %land.lhs.true16
	cmpq	$1, %rax
	jle	.LBB84_17
# BB#16:
	movq	%rax, %r15
	jmp	.LBB84_27
.LBB84_17:                              # %lor.lhs.false20
	cmpq	$0, 48(%rsp)
	je	.LBB84_19
# BB#18:
	movq	%rax, %r15
	jmp	.LBB84_27
.LBB84_19:                              # %lor.lhs.false22
	movl	frame_pointer_needed(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB84_22
# BB#20:                                # %lor.lhs.false22
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	jne	.LBB84_22
# BB#21:                                # %land.lhs.true27
	xorq	%r15, %r15
	cmpq	$0, 48(%rsp)
	jne	.LBB84_27
.LBB84_22:                              # %lor.lhs.false30
	testq	%rcx, %rcx
	je	.LBB84_26
# BB#23:                                # %land.lhs.true32
	testq	$49, %rdi
	je	.LBB84_26
# BB#24:                                # %land.lhs.true32
	testq	%r13, %r8
	je	.LBB84_26
# BB#25:                                # %land.lhs.true32
	movq	$1, %r15
	movq	%rax, %rdi
	andq	%r13, %rdi
	cmpq	$1, %rdi
	je	.LBB84_27
.LBB84_26:                              # %lor.lhs.false42
	testq	%rdx, %rdx
	movq	%rax, %r15
	je	.LBB84_51
.LBB84_27:                              # %if.then48
	movl	frame_pointer_needed(%rip), %eax
	testq	%rax, %rax
	je	.LBB84_28
# BB#29:                                # %lor.lhs.false50
	testq	%r12, %r12
	je	.LBB84_35
# BB#30:                                # %land.lhs.true52
	xorq	%rax, %rax
	cmpq	$0, 48(%rsp)
	je	.LBB84_31
.LBB84_35:                              # %if.else
	movq	global_rtl+32(%rip), %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$2, %rax
	jne	.LBB84_36
# BB#37:                                # %if.else
	movabsq	$1, %rdx
	jmp	.LBB84_38
.LBB84_28:                              # %if.then48.if.then55_crit_edge
	movq	48(%rsp), %rax
.LBB84_31:                              # %if.then55
	movq	global_rtl+16(%rip), %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%r14, %rcx
	cmpq	$2, %rcx
	jne	.LBB84_32
# BB#33:                                # %if.then55
	movabsq	$1, %rdx
	movq	%rax, %rsi
	jmp	.LBB84_38
.LBB84_36:
	movabsq	$0, %rdx
	jmp	.LBB84_38
.LBB84_32:
	movabsq	$0, %rdx
	movq	%rax, %rsi
.LBB84_38:                              # %if.else
	callq	ix86_emit_restore_regs_using_mov
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%r14, %rcx
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB84_42
# BB#39:                                # %if.then66
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	$2, %rsi
	callq	gen_rtx_REG
	movl	target_flags(%rip), %esi
	movq	%rax, %rbx
	movl	frame_pointer_needed(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	testq	%rax, %rax
	je	.LBB84_41
# BB#40:                                # %if.end220.thread
	movq	global_rtl+32(%rip), %rdx
	movq	$75, %rdi
	movq	%rbx, %rcx
	callq	gen_rtx_fmt_ee
	movl	target_flags(%rip), %edx
	movq	$23, %rcx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	movabsq	$4294967292, %rsi       # imm = 0xFFFFFFFC
	andq	%rdx, %rsi
	movq	%rax, %rdi
	callq	plus_constant_wide
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	movq	global_rtl+32(%rip), %rsi
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_rtx_MEM
	movq	global_rtl+32(%rip), %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movq	global_rtl+16(%rip), %rdi
	movq	const_int_rtx+512(%rip), %rdx
	movq	%rbx, %rsi
	callq	gen_pro_epilogue_adjust_stack
	movq	%rax, %rdi
	callq	emit_insn
	jmp	.LBB84_84
.LBB84_42:                              # %if.else107
	movl	frame_pointer_needed(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB84_43
# BB#44:                                # %if.else121
	movl	ix86_cpu(%rip), %ecx
	movl	optimize_size(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	$49, %rsi
	orq	%rsi, %rdx
	testq	%rax, %rdx
	jne	.LBB84_46
# BB#45:                                # %if.else121
	movl	use_fast_prologue_epilogue(%rip), %ecx
	testq	%rax, %rcx
	je	.LBB84_46
# BB#49:                                # %if.else136
	movq	global_rtl+16(%rip), %rdi
	movq	global_rtl+32(%rip), %rsi
	movq	const_int_rtx+512(%rip), %rdx
	callq	gen_pro_epilogue_adjust_stack
	movq	%rax, %rdi
	callq	emit_insn
	movzbl	target_flags+3(%rip), %eax
	movq	global_rtl+32(%rip), %rdi
	testq	$2, %rax
	jne	.LBB84_50
	jmp	.LBB84_81
.LBB84_41:                              # %if.else91
	movq	global_rtl+16(%rip), %rdx
	movq	$75, %rdi
	movq	%rbx, %rcx
	callq	gen_rtx_fmt_ee
	movq	48(%rsp), %rdx
	movl	target_flags(%rip), %esi
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	addq	$4, %rsi
	imulq	%r15, %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	addq	%rdx, %rsi
	movq	%rax, %rdi
	callq	plus_constant_wide
	movq	global_rtl+16(%rip), %rdx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	jmp	.LBB84_82
.LBB84_43:                              # %if.then109
	movq	global_rtl+16(%rip), %rbx
	movq	48(%rsp), %rax
	movl	target_flags(%rip), %esi
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	addq	$4, %rsi
	imulq	%r15, %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	addq	%rax, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_pro_epilogue_adjust_stack
	jmp	.LBB84_82
.LBB84_46:                              # %if.then129
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB84_48
# BB#47:                                # %cond.true
	callq	gen_leave_rex64
	jmp	.LBB84_82
.LBB84_48:                              # %cond.false
	callq	gen_leave
	jmp	.LBB84_82
.LBB84_51:                              # %if.else151
	testq	%r12, %r12
	je	.LBB84_52
# BB#56:                                # %if.else160
	movq	48(%rsp), %rsi
	xorq	%rbx, %rbx
	testq	%rsi, %rsi
	je	.LBB84_59
# BB#57:                                # %if.then163
	movq	global_rtl+16(%rip), %r15
	xorq	%rdi, %rdi
	xorq	%rbx, %rbx
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r15, %rsi
	jmp	.LBB84_58
.LBB84_52:                              # %if.then153
	testq	%rcx, %rcx
	je	.LBB84_53
# BB#55:                                # %if.end156
	movq	global_rtl+16(%rip), %r15
	movq	global_rtl+32(%rip), %r12
	xorq	%rdi, %rdi
	xorq	%rbx, %rbx
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r12, %rsi
.LBB84_58:                              # %for.body
	movq	%rax, %rdx
	callq	gen_pro_epilogue_adjust_stack
	movq	%rax, %rdi
	callq	emit_insn
	.align	16, 0x90
.LBB84_59:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	target_flags(%rip), %r15d
	andq	$33554432, %r15         # imm = 0x2000000
	movq	%r13, %rax
	jne	.LBB84_63
# BB#60:                                # %lor.rhs.i
                                        #   in Loop: Header=BB84_59 Depth=1
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	jne	.LBB84_62
# BB#61:                                #   in Loop: Header=BB84_59 Depth=1
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	jmp	.LBB84_63
	.align	16, 0x90
.LBB84_62:                              # %select.mid
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	$3, %rax
.LBB84_63:                              # %lor.end.i
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	%rbx, %rcx
	andq	%r13, %rcx
	cmpq	%rcx, %rax
	jne	.LBB84_65
# BB#64:                                # %lor.end.i
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	cfun(%rip), %rax
	movl	424(%rax), %eax
	andq	$3145856, %rax          # imm = 0x300080
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB84_70
.LBB84_65:                              # %if.end.i
                                        #   in Loop: Header=BB84_59 Depth=1
	movzbl	regs_ever_live(%rbx), %eax
	testq	%rax, %rax
	je	.LBB84_74
# BB#66:                                # %land.lhs.true30.i
                                        #   in Loop: Header=BB84_59 Depth=1
	movzbl	call_used_regs(%rbx), %eax
	testq	%rax, %rax
	jne	.LBB84_74
# BB#67:                                # %land.lhs.true34.i
                                        #   in Loop: Header=BB84_59 Depth=1
	movzbl	fixed_regs(%rbx), %eax
	testq	%rax, %rax
	jne	.LBB84_74
# BB#68:                                # %land.rhs.i
                                        #   in Loop: Header=BB84_59 Depth=1
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rbx, %rcx
	andq	%rax, %rcx
	cmpq	$6, %rcx
	jne	.LBB84_70
# BB#69:                                # %land.rhs.i
                                        #   in Loop: Header=BB84_59 Depth=1
	movl	frame_pointer_needed(%rip), %ecx
	testq	%rax, %rcx
	jne	.LBB84_74
	.align	16, 0x90
.LBB84_70:                              # %if.then174
                                        #   in Loop: Header=BB84_59 Depth=1
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	movq	%r15, %rdi
	andq	%r12, %rdi
	movq	$25, %rcx
	shrq	%cl, %rdi
	orq	$4, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_REG
	movq	%rax, %rdi
	andq	%r12, %r15
	jne	.LBB84_71
# BB#72:                                # %if.else184
                                        #   in Loop: Header=BB84_59 Depth=1
	callq	gen_popsi1
	jmp	.LBB84_73
	.align	16, 0x90
.LBB84_71:                              # %if.then177
                                        #   in Loop: Header=BB84_59 Depth=1
	callq	gen_popdi1
.LBB84_73:                              # %for.inc
                                        #   in Loop: Header=BB84_59 Depth=1
	movq	%rax, %rdi
	callq	emit_insn
.LBB84_74:                              # %for.inc
                                        #   in Loop: Header=BB84_59 Depth=1
	incq	%rbx
	cmpq	$53, %rbx
	jne	.LBB84_59
# BB#75:                                # %for.end
	movl	frame_pointer_needed(%rip), %eax
	testq	%rax, %rax
	je	.LBB84_83
# BB#76:                                # %if.then194
	movl	ix86_cpu(%rip), %ecx
	movl	target_flags(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	$33554432, %rax         # imm = 0x2000000
	testq	$49, %rdx
	je	.LBB84_80
# BB#77:                                # %if.then198
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB84_79
# BB#78:                                # %cond.true201
	callq	gen_leave_rex64
	jmp	.LBB84_82
.LBB84_80:                              # %if.else208
	movq	global_rtl+32(%rip), %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB84_81
.LBB84_50:                              # %if.then141
	callq	gen_popdi1
	jmp	.LBB84_82
.LBB84_81:                              # %if.else214
	callq	gen_popsi1
.LBB84_82:                              # %if.end220
	movq	%rax, %rdi
	callq	emit_insn
.LBB84_83:                              # %if.end220
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r14
	je	.LBB84_93
.LBB84_84:                              # %if.end224
	movq	cfun(%rip), %rax
	movslq	64(%rax), %rsi
	testq	%rsi, %rsi
	je	.LBB84_91
# BB#85:                                # %land.lhs.true226
	movl	68(%rax), %eax
	testq	%rax, %rax
	je	.LBB84_91
# BB#86:                                # %if.then228
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	cfun(%rip), %rcx
	movslq	64(%rcx), %rcx
	movq	%rax, %rbx
	cmpq	$65536, %rcx            # imm = 0x10000
	jl	.LBB84_90
# BB#87:                                # %if.then236
	movq	$4, %rdi
	movq	$2, %rsi
	callq	gen_rtx_REG
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, %r14
	testq	$2, %rcx
	jne	.LBB84_88
# BB#89:                                # %if.end242
	movq	%r14, %rdi
	callq	gen_popsi1
	movq	%rax, %rdi
	callq	emit_insn
	movq	global_rtl+16(%rip), %rdi
	movq	%rdi, %rsi
	movq	%rbx, %rdx
	callq	gen_addsi3
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rdi
	callq	gen_return_indirect_internal
	jmp	.LBB84_92
.LBB84_91:                              # %if.else253
	callq	gen_return_internal
	jmp	.LBB84_92
.LBB84_90:                              # %if.else249
	movq	%rbx, %rdi
	callq	gen_return_pop_internal
.LBB84_92:                              # %cleanup
	movq	%rax, %rdi
	callq	emit_jump_insn
.LBB84_93:                              # %cleanup
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB84_79:                              # %cond.false203
	callq	gen_leave
	jmp	.LBB84_82
.LBB84_53:                              # %if.then155
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_epilogue, %rcx
	movq	$4396, %rsi             # imm = 0x112C
	jmp	.LBB84_54
.LBB84_88:                              # %if.then241
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_epilogue, %rcx
	movq	$4445, %rsi             # imm = 0x115D
.LBB84_54:                              # %if.then155
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp617:
	.size	ix86_expand_epilogue, .Ltmp617-ix86_expand_epilogue
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_emit_restore_regs_using_mov,@function
ix86_emit_restore_regs_using_mov:       # @ix86_emit_restore_regs_using_mov
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp624:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp625:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp626:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp627:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp628:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp629:
	.cfi_def_cfa_offset 64
.Ltmp630:
	.cfi_offset %rbx, -48
.Ltmp631:
	.cfi_offset %r12, -40
.Ltmp632:
	.cfi_offset %r13, -32
.Ltmp633:
	.cfi_offset %r14, -24
.Ltmp634:
	.cfi_offset %r15, -16
	movl	target_flags(%rip), %eax
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%rsi, %r12
	movq	%rdi, %r15
	xorq	%rbx, %rbx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB85_1:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_14 Depth 2
	testq	$33554432, %rax         # imm = 0x2000000
	movq	%r14, %rdx
	jne	.LBB85_4
# BB#2:                                 # %lor.rhs.i
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	flag_pic(%rip), %ecx
	testq	%rcx, %rcx
	movq	%r14, %rdx
	je	.LBB85_4
# BB#3:                                 # %select.mid
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	$3, %rdx
.LBB85_4:                               # %lor.end.i
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	cfun(%rip), %rcx
	movl	424(%rcx), %esi
	movq	%rbx, %rcx
	andq	%r14, %rcx
	cmpq	%rcx, %rdx
	jne	.LBB85_6
# BB#5:                                 # %lor.end.i
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	%rsi, %rdx
	andq	$3145856, %rdx          # imm = 0x300080
	testq	%r14, %rdx
	jne	.LBB85_15
.LBB85_6:                               # %if.end.i
                                        #   in Loop: Header=BB85_1 Depth=1
	testq	$128, %rsi
	je	.LBB85_8
# BB#7:                                 # %if.end.i
                                        #   in Loop: Header=BB85_1 Depth=1
	xorq	%rdx, %rdx
	movq	8(%rsp), %rsi           # 8-byte Reload
	testq	%r14, %rsi
	je	.LBB85_8
	.align	16, 0x90
.LBB85_14:                              # %if.end24.i
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdx, %rsi
	andq	%r14, %rsi
	cmpq	%rcx, %rsi
	je	.LBB85_15
# BB#13:                                # %for.cond.i
                                        #   in Loop: Header=BB85_14 Depth=2
	incq	%rdx
	movq	%rdx, %rsi
	andq	%r14, %rsi
	cmpq	$1, %rsi
	jbe	.LBB85_14
.LBB85_8:                               # %if.end28.i
                                        #   in Loop: Header=BB85_1 Depth=1
	movzbl	regs_ever_live(%rbx), %edx
	testq	%rdx, %rdx
	je	.LBB85_16
# BB#9:                                 # %land.lhs.true30.i
                                        #   in Loop: Header=BB85_1 Depth=1
	movzbl	call_used_regs(%rbx), %edx
	testq	%rdx, %rdx
	jne	.LBB85_16
# BB#10:                                # %land.lhs.true34.i
                                        #   in Loop: Header=BB85_1 Depth=1
	movzbl	fixed_regs(%rbx), %edx
	testq	%rdx, %rdx
	jne	.LBB85_16
# BB#11:                                # %land.rhs.i
                                        #   in Loop: Header=BB85_1 Depth=1
	cmpq	$6, %rcx
	jne	.LBB85_15
# BB#12:                                # %land.rhs.i
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	frame_pointer_needed(%rip), %ecx
	testq	%r14, %rcx
	jne	.LBB85_16
	.align	16, 0x90
.LBB85_15:                              # %if.then
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	orq	$4, %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_REG
	movl	target_flags(%rip), %edi
	movq	%rax, %r13
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%r15, %rsi
	callq	gen_rtx_MEM
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$32, %rcx
	movq	%r12, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%rax, %rdi
	callq	adjust_address_1
	movq	%r13, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movl	target_flags(%rip), %eax
	movq	$23, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$4, %rdx
	leaq	4(%r12,%rdx), %r12
.LBB85_16:                              # %for.inc
                                        #   in Loop: Header=BB85_1 Depth=1
	incq	%rbx
	cmpq	$53, %rbx
	jne	.LBB85_1
# BB#17:                                # %for.end
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp635:
	.size	ix86_emit_restore_regs_using_mov, .Ltmp635-ix86_emit_restore_regs_using_mov
	.cfi_endproc

	.globl	ix86_address_cost
	.align	16, 0x90
	.type	ix86_address_cost,@function
ix86_address_cost:                      # @ix86_address_cost
	.cfi_startproc
# BB#0:                                 # %entry
	subq	$40, %rsp
.Ltmp637:
	.cfi_def_cfa_offset 48
	leaq	8(%rsp), %rsi
	callq	ix86_decompose_address
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB86_40
# BB#1:                                 # %if.end
	movq	24(%rsp), %r9
	movq	8(%rsp), %rcx
	testq	%r9, %r9
	movabsq	$0, %rsi
	movabsq	$1, %rdi
	movq	%rsi, %rax
	jne	.LBB86_3
# BB#2:                                 # %if.end
	movq	%rdi, %rax
.LBB86_3:                               # %if.end
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %r9
	jne	.LBB86_5
# BB#4:                                 # %if.end
	movq	%rdi, %rsi
.LBB86_5:                               # %if.end
	orq	%rsi, %rax
	testq	%rcx, %rcx
	je	.LBB86_8
# BB#6:                                 # %land.lhs.true6
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB86_11
# BB#7:                                 # %lor.lhs.false
	movl	8(%rcx), %edx
	cmpq	$52, %rdx
	ja	.LBB86_11
.LBB86_8:                               # %lor.lhs.false11
	movq	16(%rsp), %rsi
	testq	%rsi, %rsi
	je	.LBB86_12
# BB#9:                                 # %land.lhs.true13
	movzbl	(%rsi), %edx
	cmpq	$61, %rdx
	jne	.LBB86_11
# BB#10:                                # %lor.lhs.false18
	movl	8(%rsi), %edx
	cmpq	$53, %rdx
	jb	.LBB86_12
.LBB86_11:                              # %if.then24
	incq	%rax
.LBB86_12:                              # %if.end25
	testq	%rcx, %rcx
	je	.LBB86_13
# BB#14:                                # %land.lhs.true28
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB86_16
# BB#15:                                # %lor.lhs.false33
	movl	8(%rcx), %edx
	cmpq	$53, %rdx
	jb	.LBB86_23
.LBB86_16:                              # %land.lhs.true39
	movq	16(%rsp), %rsi
	testq	%rsi, %rsi
	je	.LBB86_23
# BB#17:                                # %land.lhs.true42
	movzbl	(%rsi), %edx
	cmpq	$61, %rdx
	jne	.LBB86_19
# BB#18:                                # %lor.lhs.false47
	movl	8(%rsi), %edx
	cmpq	$53, %rdx
	jb	.LBB86_23
.LBB86_19:                              # %land.lhs.true53
	cmpq	%rsi, %rcx
	je	.LBB86_20
# BB#21:                                # %land.lhs.true53
	movabsq	$1, %rsi
	jmp	.LBB86_22
.LBB86_13:
	xorq	%rcx, %rcx
	jmp	.LBB86_23
.LBB86_20:
	movabsq	$0, %rsi
.LBB86_22:                              # %land.lhs.true53
	addq	%rsi, %rax
.LBB86_23:                              # %if.end59
	movl	ix86_cpu(%rip), %edx
	cmpq	$4, %rdx
	jne	.LBB86_39
# BB#24:                                # %land.lhs.true61
	testq	%r9, %r9
	movabsq	$0, %rdi
	movabsq	$1, %r8
	movq	%rdi, %rsi
	je	.LBB86_26
# BB#25:                                # %land.lhs.true61
	movq	%r8, %rsi
.LBB86_26:                              # %land.lhs.true61
	testq	%rcx, %rcx
	jne	.LBB86_28
# BB#27:                                # %land.lhs.true61
	movq	%r8, %rdi
.LBB86_28:                              # %land.lhs.true61
	orq	%rdi, %rsi
	jne	.LBB86_31
# BB#29:                                # %land.lhs.true67
	cmpq	$0, 16(%rsp)
	je	.LBB86_31
# BB#30:                                # %land.lhs.true70
	movq	32(%rsp), %rdx
	cmpq	$1, %rdx
	jne	.LBB86_38
.LBB86_31:                              # %lor.lhs.false72
	testq	%r9, %r9
	je	.LBB86_35
# BB#32:                                # %lor.lhs.false72
	testq	%rcx, %rcx
	jne	.LBB86_35
# BB#33:                                # %land.lhs.true78
	cmpq	$0, 16(%rsp)
	je	.LBB86_35
# BB#34:                                # %land.lhs.true81
	movq	32(%rsp), %rcx
	cmpq	$1, %rcx
	jne	.LBB86_38
.LBB86_35:                              # %lor.lhs.false84
	testq	$1, %rsi
	jne	.LBB86_39
# BB#36:                                # %land.lhs.true90
	cmpq	$0, 16(%rsp)
	je	.LBB86_39
# BB#37:                                # %land.lhs.true93
	movq	32(%rsp), %rcx
	cmpq	$1, %rcx
	jne	.LBB86_39
.LBB86_38:                              # %if.then96
	addq	$10, %rax
.LBB86_39:                              # %if.end97
	addq	$40, %rsp
	retq
.LBB86_40:                              # %if.then
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_address_cost, %rcx
	movq	$4601, %rsi             # imm = 0x11F9
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp638:
	.size	ix86_address_cost, .Ltmp638-ix86_address_cost
	.cfi_endproc

	.globl	ix86_find_base_term
	.align	16, 0x90
	.type	ix86_find_base_term,@function
ix86_find_base_term:                    # @ix86_find_base_term
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	target_flags+3(%rip), %ecx
	movzbl	(%rdi), %eax
	testq	$2, %rcx
	je	.LBB87_11
# BB#1:                                 # %if.then
	cmpq	$58, %rax
	jne	.LBB87_23
# BB#2:                                 # %if.end
	movq	8(%rdi), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$75, %rdx
	jne	.LBB87_5
# BB#3:                                 # %land.lhs.true
	movq	16(%rax), %rdx
	movl	(%rdx), %edx
	andq	$65534, %rdx            # imm = 0xFFFE
	cmpq	$54, %rdx
	jne	.LBB87_5
# BB#4:                                 # %if.then17
	movq	8(%rax), %rax
	movl	(%rax), %ecx
.LBB87_5:                               # %if.end21
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$42, %rcx
	jne	.LBB87_23
# BB#6:                                 # %lor.lhs.false25
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB87_23
# BB#7:                                 # %lor.lhs.false29
	movl	16(%rax), %eax
	cmpq	$15, %rax
	jne	.LBB87_23
# BB#8:                                 # %if.end34
	movq	8(%rcx), %rax
	movzbl	(%rax), %ecx
	addq	$-67, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$2, %rdx
	jb	.LBB87_10
# BB#9:                                 # %if.end34
	movq	%rdi, %rax
.LBB87_10:                              # %if.end34
	retq
.LBB87_11:                              # %if.end48
	cmpq	$75, %rax
	jne	.LBB87_23
# BB#12:                                # %lor.lhs.false52
	movq	8(%rdi), %rax
	movq	pic_offset_table_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB87_23
# BB#13:                                # %lor.lhs.false57
	movq	16(%rdi), %rax
	movzbl	(%rax), %ecx
	cmpq	$58, %rcx
	jne	.LBB87_23
# BB#14:                                # %if.end65
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$75, %rdx
	jne	.LBB87_17
# BB#15:                                # %land.lhs.true75
	movq	16(%rax), %rdx
	movzbl	(%rdx), %edx
	cmpq	$54, %rdx
	jne	.LBB87_17
# BB#16:                                # %if.then82
	movq	8(%rax), %rax
	movl	(%rax), %ecx
.LBB87_17:                              # %if.end86
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$42, %rcx
	jne	.LBB87_23
# BB#18:                                # %lor.lhs.false90
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB87_23
# BB#19:                                # %lor.lhs.false96
	movl	16(%rax), %eax
	cmpq	$7, %rax
	jne	.LBB87_23
# BB#20:                                # %if.end102
	movq	8(%rcx), %rax
	movzbl	(%rax), %ecx
	addq	$-67, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$2, %rdx
	jb	.LBB87_22
# BB#21:                                # %if.end102
	movq	%rdi, %rax
.LBB87_22:                              # %if.end102
	movq	%rax, %rdi
.LBB87_23:                              # %return
	movq	%rdi, %rax
	retq
.Ltmp639:
	.size	ix86_find_base_term, .Ltmp639-ix86_find_base_term
	.cfi_endproc

	.globl	legitimate_pic_address_disp_p
	.align	16, 0x90
	.type	legitimate_pic_address_disp_p,@function
legitimate_pic_address_disp_p:          # @legitimate_pic_address_disp_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp645:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp646:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp647:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp648:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp649:
	.cfi_def_cfa_offset 48
.Ltmp650:
	.cfi_offset %rbx, -40
.Ltmp651:
	.cfi_offset %r12, -32
.Ltmp652:
	.cfi_offset %r14, -24
.Ltmp653:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movl	target_flags(%rip), %r15d
	movl	(%r12), %ebx
	andq	$33554432, %r15         # imm = 0x2000000
	je	.LBB88_16
# BB#1:                                 # %if.then
	movq	%rbx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$58, %rax
	movq	%rbx, %rcx
	movq	%r12, %rax
	jne	.LBB88_3
# BB#2:                                 # %if.then1
	movq	8(%r12), %rax
	movl	(%rax), %ecx
.LBB88_3:                               # %if.end
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$75, %rdx
	jne	.LBB88_8
# BB#4:                                 # %land.lhs.true
	movq	16(%rax), %rdx
	movzbl	(%rdx), %esi
	cmpq	$54, %rsi
	jne	.LBB88_8
# BB#5:                                 # %land.lhs.true
	movl	ix86_cmodel(%rip), %esi
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rsi, %rdi
	cmpq	$5, %rdi
	jne	.LBB88_8
# BB#6:                                 # %land.lhs.true13
	movq	8(%rdx), %rdx
	addq	$1073741823, %rdx       # imm = 0x3FFFFFFF
	cmpq	$2147483646, %rdx       # imm = 0x7FFFFFFE
	ja	.LBB88_8
# BB#7:                                 # %if.then28
	movq	8(%rax), %rax
	movl	(%rax), %ecx
.LBB88_8:                               # %if.end32
	movq	$1, %r14
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$67, %rdx
	je	.LBB88_42
# BB#9:                                 # %if.end32
	cmpq	$58, %rdx
	jne	.LBB88_13
# BB#10:                                # %land.lhs.true.i
	movq	8(%rax), %rdx
	movzbl	(%rdx), %esi
	cmpq	$75, %rsi
	jne	.LBB88_13
# BB#11:                                # %land.lhs.true7.i
	movq	16(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$54, %rsi
	jne	.LBB88_13
# BB#12:                                # %if.then17.i
	movq	8(%rdx), %rax
	movl	(%rax), %ecx
.LBB88_13:                              # %if.end24.i
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$68, %rdx
	jne	.LBB88_16
# BB#14:                                # %if.end29.i
	testq	$201326592, %rcx        # imm = 0xC000000
	jne	.LBB88_42
# BB#15:                                # %local_symbolic_operand.exit
	movq	8(%rax), %rdi
	movslq	internal_label_prefix_len(%rip), %rdx
	movabsq	$internal_label_prefix, %rsi
	callq	strncmp
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB88_42
.LBB88_16:                              # %if.end38
	andq	$65535, %rbx            # imm = 0xFFFF
	xorq	%r14, %r14
	cmpq	$58, %rbx
	jne	.LBB88_42
# BB#17:                                # %if.end43
	movq	8(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %r15
	je	.LBB88_22
# BB#18:                                # %if.then49
	cmpq	$42, %rdx
	jne	.LBB88_42
# BB#19:                                # %lor.lhs.false
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB88_42
# BB#20:                                # %lor.lhs.false56
	movl	16(%rax), %eax
	cmpq	$15, %rax
	jne	.LBB88_42
# BB#21:                                # %if.end61
	movq	8(%rcx), %rax
	movzbl	(%rax), %eax
	addq	$-67, %rax
	andq	%rbx, %rax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	jmp	.LBB88_43
.LBB88_22:                              # %if.end80
	cmpq	$75, %rdx
	jne	.LBB88_25
# BB#23:                                # %if.then84
	movq	16(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$54, %rcx
	jne	.LBB88_42
# BB#24:                                # %if.end92
	movq	8(%rax), %rax
	movl	(%rax), %ecx
.LBB88_25:                              # %if.end96
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$42, %rcx
	jne	.LBB88_42
# BB#26:                                # %lor.lhs.false100
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB88_42
# BB#27:                                # %if.end107
	movl	16(%rax), %eax
	cmpq	$7, %rax
	jne	.LBB88_28
# BB#31:                                # %sw.bb119
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$67, %rdx
	jne	.LBB88_33
# BB#32:
	movq	$1, %r14
	jmp	.LBB88_42
.LBB88_28:                              # %if.end107
	cmpq	$6, %rax
	jne	.LBB88_42
# BB#29:                                # %sw.bb
	movq	8(%rcx), %rax
	movzbl	(%rax), %eax
	cmpq	$68, %rax
	je	.LBB88_41
# BB#30:
	movabsq	$0, %r14
	jmp	.LBB88_42
.LBB88_33:                              # %sw.bb119
	cmpq	$58, %rdx
	jne	.LBB88_37
# BB#34:                                # %land.lhs.true.i158
	movq	8(%rax), %rdx
	movzbl	(%rdx), %esi
	cmpq	$75, %rsi
	jne	.LBB88_37
# BB#35:                                # %land.lhs.true7.i164
	movq	16(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$54, %rsi
	jne	.LBB88_37
# BB#36:                                # %if.then17.i169
	movq	8(%rdx), %rax
	movl	(%rax), %ecx
.LBB88_37:                              # %if.end24.i174
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$68, %rdx
	jne	.LBB88_42
# BB#38:                                # %if.end29.i175
	testq	$201326592, %rcx        # imm = 0xC000000
	movq	$1, %r14
	jne	.LBB88_42
# BB#39:                                # %if.end37.i182
	movq	8(%rax), %rdi
	movslq	internal_label_prefix_len(%rip), %rdx
	movabsq	$internal_label_prefix, %rsi
	callq	strncmp
	testq	%rbx, %rax
	jne	.LBB88_40
.LBB88_41:                              # %if.end37.i182
	movabsq	$1, %r14
.LBB88_42:                              # %return
	movq	%r14, %rax
.LBB88_43:                              # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB88_40:
	movabsq	$0, %r14
	jmp	.LBB88_42
.Ltmp654:
	.size	legitimate_pic_address_disp_p, .Ltmp654-legitimate_pic_address_disp_p
	.cfi_endproc

	.globl	legitimate_address_p
	.align	16, 0x90
	.type	legitimate_address_p,@function
legitimate_address_p:                   # @legitimate_address_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp661:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp662:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp663:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp664:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp665:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp666:
	.cfi_def_cfa_offset 96
.Ltmp667:
	.cfi_offset %rbx, -48
.Ltmp668:
	.cfi_offset %r12, -40
.Ltmp669:
	.cfi_offset %r13, -32
.Ltmp670:
	.cfi_offset %r14, -24
.Ltmp671:
	.cfi_offset %r15, -16
	cmpq	$0, ix86_debug_addr_string(%rip)
	movq	%rdx, %r13
	movq	%rsi, %rbx
	jne	.LBB89_1
.LBB89_2:                               # %if.end
	leaq	16(%rsp), %rsi
	movq	%rbx, %rdi
	callq	ix86_decompose_address
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%r12, %r12
	testq	%rax, %rax
	jle	.LBB89_3
# BB#6:                                 # %if.end4
	movq	16(%rsp), %r14
	movq	24(%rsp), %r15
	movq	32(%rsp), %rdi
	movq	40(%rsp), %rsi
	testq	%r14, %r14
	je	.LBB89_24
# BB#7:                                 # %if.then9
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB89_8
# BB#9:                                 # %if.end12
	movq	$16, %rcx
	movl	target_flags(%rip), %edx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$4, %rdx
	cmpq	%rdx, %rax
	jne	.LBB89_10
# BB#11:                                # %if.end18
	movl	8(%r14), %ecx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r13
	je	.LBB89_19
# BB#12:                                # %land.lhs.true
	cmpq	$20, %rcx
	ja	.LBB89_14
# BB#13:                                # %land.lhs.true
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$1114367, %rdx          # imm = 0x1100FF
	jne	.LBB89_24
.LBB89_14:                              # %lor.lhs.false31
	leaq	-37(%rcx), %rdx
	andq	%rax, %rdx
	cmpq	$8, %rdx
	jb	.LBB89_24
# BB#15:                                # %lor.lhs.false41
	movq	reg_renumber(%rip), %rax
	movzbl	(%rax,%rcx,2), %ecx
	movabsq	$.L.str87, %rdx
	cmpq	$44, %rcx
	jbe	.LBB89_17
# BB#16:
	movq	%r14, %rbx
	jmp	.LBB89_4
.LBB89_3:
	movabsq	$.L.str84, %rdx
	xorq	%rbx, %rbx
	jmp	.LBB89_4
.LBB89_8:
	movabsq	$.L.str85, %rdx
	movq	%r14, %rbx
	jmp	.LBB89_4
.LBB89_10:
	movabsq	$.L.str86, %rdx
	movq	%r14, %rbx
	jmp	.LBB89_4
.LBB89_1:                               # %if.then
	movq	stderr(%rip), %r8
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	mode_name(,%rdi,8), %rdx
	movabsq	$.L.str83, %rsi
	xorq	%rax, %rax
	movq	%r8, %rdi
	movq	%r13, %rcx
	callq	fprintf
	movq	%rbx, %rdi
	callq	debug_rtx
	jmp	.LBB89_2
.LBB89_19:                              # %land.lhs.true69
	cmpq	$20, %rcx
	ja	.LBB89_21
# BB#20:                                # %land.lhs.true69
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$1114367, %rdx          # imm = 0x1100FF
	jne	.LBB89_24
.LBB89_21:                              # %lor.lhs.false87
	leaq	-37(%rcx), %rdx
	andq	%rax, %rdx
	cmpq	$8, %rdx
	jb	.LBB89_24
# BB#22:                                # %lor.lhs.false87
	cmpq	$53, %rcx
	jae	.LBB89_24
# BB#23:
	movabsq	$.L.str87, %rdx
	movq	%r14, %rbx
	jmp	.LBB89_4
.LBB89_17:                              # %lor.lhs.false41
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$35046933135615, %rcx   # imm = 0x1FE0000000FF
	testq	%rcx, %rax
	je	.LBB89_18
.LBB89_24:                              # %if.end107
	testq	%r15, %r15
	je	.LBB89_40
# BB#25:                                # %if.then109
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB89_26
# BB#27:                                # %if.end115
	movq	$16, %rcx
	movl	target_flags(%rip), %edx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$4, %rdx
	cmpq	%rdx, %rax
	jne	.LBB89_28
# BB#29:                                # %if.end125
	movl	8(%r15), %ecx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r13
	je	.LBB89_36
# BB#30:                                # %land.lhs.true127
	cmpq	$44, %rcx
	ja	.LBB89_32
# BB#31:                                # %land.lhs.true127
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$35046933135487, %rdx   # imm = 0x1FE00000007F
	testq	%rdx, %rax
	jne	.LBB89_40
.LBB89_32:                              # %lor.lhs.false145
	movq	reg_renumber(%rip), %rax
	movzbl	(%rax,%rcx,2), %ecx
	movabsq	$.L.str90, %rdx
	cmpq	$44, %rcx
	jbe	.LBB89_34
# BB#33:
	movq	%r15, %rbx
	jmp	.LBB89_4
.LBB89_26:
	movabsq	$.L.str88, %rdx
	movq	%r15, %rbx
	jmp	.LBB89_4
.LBB89_28:
	movabsq	$.L.str89, %rdx
	movq	%r15, %rbx
	jmp	.LBB89_4
.LBB89_36:                              # %land.lhs.true174
	cmpq	$7, %rcx
	jb	.LBB89_40
# BB#37:                                # %lor.lhs.false180
	leaq	-37(%rcx), %rdx
	andq	%rax, %rdx
	cmpq	$8, %rdx
	jb	.LBB89_40
# BB#38:                                # %lor.lhs.false180
	cmpq	$53, %rcx
	jae	.LBB89_40
# BB#39:
	movabsq	$.L.str90, %rdx
	movq	%r15, %rbx
	jmp	.LBB89_4
.LBB89_34:                              # %lor.lhs.false145
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$35046933135487, %rcx   # imm = 0x1FE00000007F
	testq	%rcx, %rax
	je	.LBB89_35
.LBB89_40:                              # %if.end200
	cmpq	$1, %rsi
	je	.LBB89_45
# BB#41:                                # %if.then203
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	xorq	%rdi, %rdi
	movq	%rsi, %r13
                                        # kill: RSI<def> R13<kill>
	callq	gen_rtx_CONST_INT
	movq	%rax, %rbx
	testq	%r15, %r15
	je	.LBB89_42
# BB#43:                                # %if.end207
	movabsq	$.L.str92, %rdx
	cmpq	$8, %r13
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%r13, %rcx
	ja	.LBB89_4
# BB#44:                                # %if.end207
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$276, %rax              # imm = 0x114
	je	.LBB89_4
.LBB89_45:                              # %if.end218
	testq	%rdi, %rdi
	je	.LBB89_67
# BB#46:                                # %if.then220
	movzbl	(%rdi), %eax
	movabsq	$.L.str93, %rdx
	leaq	-54(%rax), %rcx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	$14, %rcx
	jbe	.LBB89_48
# BB#47:
	movq	%rdi, %rbx
	jmp	.LBB89_4
.LBB89_48:                              # %if.then220
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$24595, %rsi            # imm = 0x6013
	je	.LBB89_49
# BB#50:                                # %if.end246
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB89_53
# BB#51:                                # %if.then249
	movq	%rdi, %rbx
	callq	x86_64_sign_extended_value
	testq	%r13, %rax
	jne	.LBB89_55
# BB#52:
	movabsq	$.L.str94, %rdx
	jmp	.LBB89_4
.LBB89_42:
	movabsq	$.L.str91, %rdx
.LBB89_4:                               # %report_error
	cmpq	$0, ix86_debug_addr_string(%rip)
	jne	.LBB89_5
.LBB89_69:                              # %return
	movq	%r12, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB89_5:                               # %if.then303
	movq	stderr(%rip), %rdi
	movabsq	$.L.str99, %rsi
	xorq	%rax, %rax
	xorq	%r12, %r12
	callq	fprintf
	movq	%rbx, %rdi
	callq	debug_rtx
	jmp	.LBB89_69
.LBB89_53:                              # %if.else
	movq	%rdi, %rbx
	cmpq	$55, %rax
	jne	.LBB89_55
# BB#54:
	movabsq	$.L.str95, %rdx
	jmp	.LBB89_4
.LBB89_55:                              # %if.end260
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	movq	%rbx, %rsi
	je	.LBB89_67
# BB#56:                                # %land.lhs.true262
	movzbl	(%rsi), %eax
	leaq	-67(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$2, %rcx
	jb	.LBB89_59
# BB#57:                                # %land.lhs.true262
	cmpq	$58, %rax
	jne	.LBB89_67
# BB#58:                                # %land.lhs.true277
	movq	%rsi, %rbx
	movq	%rbx, %rdi
	callq	symbolic_reference_mentioned_p
	movq	%rbx, %rsi
	testq	%r13, %rax
	je	.LBB89_67
.LBB89_59:                              # %if.then280
	movl	target_flags(%rip), %eax
	orq	%r14, %r15
	je	.LBB89_60
# BB#61:                                # %if.then280
	movabsq	$1, %rcx
	jmp	.LBB89_62
.LBB89_49:
	movq	%rdi, %rbx
	jmp	.LBB89_4
.LBB89_60:
	movabsq	$0, %rcx
.LBB89_62:                              # %if.then280
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB89_65
# BB#63:                                # %if.then280
	testq	%rcx, %rcx
	je	.LBB89_65
# BB#64:
	movabsq	$.L.str96, %rdx
	movq	%rsi, %rbx
	jmp	.LBB89_4
.LBB89_65:                              # %if.end288
	movq	%rsi, %r14
	movq	%r14, %rdi
	callq	legitimate_pic_address_disp_p
	testq	%r13, %rax
	je	.LBB89_66
.LBB89_67:                              # %if.end295
	cmpq	$0, ix86_debug_addr_string(%rip)
	movq	$1, %r12
	je	.LBB89_69
# BB#68:                                # %if.then298
	movq	stderr(%rip), %rcx
	movabsq	$.L.str98, %rdi
	movq	$9, %rsi
	movq	$1, %rdx
	movq	$1, %r12
	callq	fwrite
	jmp	.LBB89_69
.LBB89_66:
	movabsq	$.L.str97, %rdx
	movq	%r14, %rbx
	jmp	.LBB89_4
.LBB89_18:
	movq	%r14, %rbx
	jmp	.LBB89_4
.LBB89_35:
	movq	%r15, %rbx
	jmp	.LBB89_4
.Ltmp672:
	.size	legitimate_address_p, .Ltmp672-legitimate_address_p
	.cfi_endproc

	.globl	legitimize_pic_address
	.align	16, 0x90
	.type	legitimize_pic_address,@function
legitimize_pic_address:                 # @legitimize_pic_address
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp679:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp680:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp681:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp682:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp683:
	.cfi_def_cfa_offset 48
.Ltmp684:
	.cfi_offset %rbx, -48
.Ltmp685:
	.cfi_offset %r12, -40
.Ltmp686:
	.cfi_offset %r13, -32
.Ltmp687:
	.cfi_offset %r14, -24
.Ltmp688:
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movl	(%r13), %r12d
	movq	%rsi, %r14
	movq	%r12, %rbx
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$67, %rbx
	je	.LBB90_8
# BB#1:                                 # %entry
	cmpq	$58, %rbx
	movq	%r12, %rcx
	movq	%r13, %rax
	jne	.LBB90_5
# BB#2:                                 # %land.lhs.true.i
	movq	8(%r13), %rdx
	movzbl	(%rdx), %eax
	cmpq	$75, %rax
	movq	%r12, %rcx
	movq	%r13, %rax
	jne	.LBB90_5
# BB#3:                                 # %land.lhs.true7.i
	movq	16(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	movq	%r12, %rcx
	movq	%r13, %rax
	jne	.LBB90_5
# BB#4:                                 # %if.then17.i
	movq	8(%rdx), %rax
	movl	(%rax), %ecx
.LBB90_5:                               # %if.end24.i
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$68, %rdx
	jne	.LBB90_13
# BB#6:                                 # %if.end29.i
	testq	$201326592, %rcx        # imm = 0xC000000
	jne	.LBB90_8
# BB#7:                                 # %local_symbolic_operand.exit
	movq	8(%rax), %rdi
	movslq	internal_label_prefix_len(%rip), %rdx
	movabsq	$internal_label_prefix, %rsi
	callq	strncmp
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB90_8
.LBB90_13:                              # %if.else21
	cmpq	$58, %rbx
	jne	.LBB90_14
# BB#28:                                # %if.then98
	movq	8(%r13), %r15
	movl	(%r15), %r12d
	movq	%r12, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$42, %rax
	je	.LBB90_22
# BB#29:                                # %if.then98
	cmpq	$75, %rax
	jne	.LBB90_57
# BB#30:                                # %land.lhs.true
	movq	8(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$42, %rax
	je	.LBB90_22
	jmp	.LBB90_31
.LBB90_8:                               # %if.then
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB90_22
# BB#9:                                 # %if.else
	movq	cfun(%rip), %rax
	movl	424(%rax), %ecx
	orq	$2097152, %rcx          # imm = 0x200000
	movl	%ecx, 424(%rax)
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	$1, %rdi
	xorq	%rax, %rax
	movq	%r13, %rsi
	callq	gen_rtvec
	movq	$42, %rdi
	movq	$7, %rcx
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_Ei
.LBB90_10:                              # %if.else
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$58, %rdi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	movq	pic_offset_table_rtx(%rip), %rdx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$75, %rdi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %r13
	testq	%r14, %r14
	je	.LBB90_22
# BB#11:                                # %if.then18
	movq	%r14, %rdi
	movq	%r13, %rsi
	callq	emit_move_insn
	jmp	.LBB90_21
.LBB90_14:                              # %if.else21
	cmpq	$68, %rbx
	movq	%r13, %r15
	jne	.LBB90_31
# BB#15:                                # %if.then25
	movq	cfun(%rip), %rax
	movl	424(%rax), %ecx
	movl	target_flags(%rip), %ebx
	orq	$2097152, %rcx          # imm = 0x200000
	movl	%ecx, 424(%rax)
	movl	target_flags(%rip), %r15d
	movq	$25, %rcx
	shrq	%cl, %r15
	andq	$1, %r15
	orq	$4, %r15
	movq	$1, %rdi
	xorq	%rax, %rax
	movq	%r13, %rsi
	callq	gen_rtvec
	movq	$42, %rdi
	testq	$33554432, %rbx         # imm = 0x2000000
	je	.LBB90_23
# BB#16:                                # %if.then28
	movq	$15, %rcx
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_Ei
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$58, %rdi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movl	(%rbx), %eax
	orq	$67108864, %rax         # imm = 0x4000000
	movl	%eax, (%rbx)
	movq	ix86_GOT_alias_set.set(%rip), %rsi
	cmpq	$-1, %rsi
	jne	.LBB90_18
# BB#17:                                # %if.then.i
	callq	new_alias_set
	movq	%rax, %rsi
	movq	%rsi, ix86_GOT_alias_set.set(%rip)
.LBB90_18:                              # %ix86_GOT_alias_set.exit
	movq	%rbx, %rdi
	callq	set_mem_alias_set
	testq	%r14, %r14
	jne	.LBB90_20
# BB#19:                                # %if.then51
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
.LBB90_20:                              # %if.end56
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	gen_movsi
	movq	%rax, %rdi
	callq	emit_insn
	jmp	.LBB90_21
.LBB90_31:                              # %if.end118
	andq	$65535, %r12            # imm = 0xFFFF
	cmpq	$75, %r12
	jne	.LBB90_22
# BB#32:                                # %if.then122
	movq	8(%r15), %r12
	movl	(%r12), %eax
	movq	16(%r15), %rbx
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$67, %rcx
	je	.LBB90_42
# BB#33:                                # %if.then122
	cmpq	$58, %rcx
	jne	.LBB90_34
# BB#35:                                # %land.lhs.true.i348
	movq	8(%r12), %rdx
	movzbl	(%rdx), %ecx
	cmpq	$75, %rcx
	jne	.LBB90_36
# BB#37:                                # %land.lhs.true7.i354
	movq	16(%rdx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	jne	.LBB90_39
# BB#38:                                # %if.then17.i359
	movq	8(%rdx), %rcx
	movl	(%rcx), %eax
	jmp	.LBB90_39
.LBB90_23:                              # %if.else59
	movq	$6, %rcx
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_Ei
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$58, %rdi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	movq	pic_offset_table_rtx(%rip), %rdx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$75, %rdi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movl	(%rbx), %eax
	orq	$67108864, %rax         # imm = 0x4000000
	movl	%eax, (%rbx)
	movq	ix86_GOT_alias_set.set(%rip), %rsi
	cmpq	$-1, %rsi
	jne	.LBB90_25
# BB#24:                                # %if.then.i339
	callq	new_alias_set
	movq	%rax, %rsi
	movq	%rsi, ix86_GOT_alias_set.set(%rip)
.LBB90_25:                              # %ix86_GOT_alias_set.exit340
	movq	%rbx, %rdi
	callq	set_mem_alias_set
	testq	%r14, %r14
	jne	.LBB90_27
# BB#26:                                # %if.then86
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
.LBB90_27:                              # %if.end91
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	emit_move_insn
.LBB90_21:                              # %return
	movq	%r14, %r13
.LBB90_22:                              # %return
	movq	%r13, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB90_34:
	movq	%r12, %rcx
	jmp	.LBB90_39
.LBB90_36:
	movq	%r12, %rcx
.LBB90_39:                              # %if.end24.i364
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$68, %rdx
	jne	.LBB90_45
# BB#40:                                # %if.end29.i365
	testq	$201326592, %rax        # imm = 0xC000000
	jne	.LBB90_42
# BB#41:                                # %local_symbolic_operand.exit374
	movq	8(%rcx), %rdi
	movslq	internal_label_prefix_len(%rip), %rdx
	movabsq	$internal_label_prefix, %rsi
	callq	strncmp
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB90_45
.LBB90_42:                              # %land.lhs.true134
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB90_45
# BB#43:                                # %if.then138
	movq	%rbx, %r15
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB90_22
# BB#44:                                # %if.then141
	movq	cfun(%rip), %rax
	movl	424(%rax), %ecx
	orq	$2097152, %rcx          # imm = 0x200000
	movl	%ecx, 424(%rax)
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	$1, %rdi
	xorq	%rax, %rax
	movq	%r12, %rsi
	callq	gen_rtvec
	movq	$42, %rdi
	movq	$7, %rcx
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_Ei
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$75, %rdi
	movq	%rax, %rdx
	movq	%r15, %rcx
	callq	gen_rtx_fmt_ee
	jmp	.LBB90_10
.LBB90_45:                              # %if.else169
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	legitimize_pic_address
	movq	16(%r15), %rdi
	movq	%rax, %r15
	xorq	%rsi, %rsi
	cmpq	%r14, %r15
	je	.LBB90_47
# BB#46:                                # %if.else169
	movq	%r14, %rsi
.LBB90_47:                              # %if.else169
	callq	legitimize_pic_address
	movq	%rax, %rbx
	movzbl	(%rbx), %eax
	cmpq	$75, %rax
	jne	.LBB90_48
# BB#50:                                # %land.lhs.true191
	movq	16(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$133, %rax
	jg	.LBB90_53
# BB#51:                                # %land.lhs.true191
	addq	$-54, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	ja	.LBB90_56
# BB#52:                                # %land.lhs.true191
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB90_55
	jmp	.LBB90_56
.LBB90_48:                              # %if.else169
	cmpq	$54, %rax
	jne	.LBB90_56
# BB#49:                                # %if.then183
	movq	8(%rbx), %rsi
	movq	%r15, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	plus_constant_wide  # TAILCALL
.LBB90_53:                              # %land.lhs.true191
	cmpq	$134, %rax
	je	.LBB90_55
# BB#54:                                # %land.lhs.true191
	cmpq	$140, %rax
	jne	.LBB90_56
.LBB90_55:                              # %if.then247
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	movq	8(%rbx), %rax
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$75, %rdi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	16(%rbx), %rbx
	movq	%rax, %r15
.LBB90_56:                              # %if.end258
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$75, %rdi
	movq	%r15, %rdx
	movq	%rbx, %rcx
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_ee  # TAILCALL
.LBB90_57:                              # %if.then116
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.legitimize_pic_address, %rcx
	movq	$5086, %rsi             # imm = 0x13DE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp689:
	.size	legitimize_pic_address, .Ltmp689-legitimize_pic_address
	.cfi_endproc

	.globl	legitimize_address
	.align	16, 0x90
	.type	legitimize_address,@function
legitimize_address:                     # @legitimize_address
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp696:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp697:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp698:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp699:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp700:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp701:
	.cfi_def_cfa_offset 64
.Ltmp702:
	.cfi_offset %rbx, -48
.Ltmp703:
	.cfi_offset %r12, -40
.Ltmp704:
	.cfi_offset %r13, -32
.Ltmp705:
	.cfi_offset %r14, -24
.Ltmp706:
	.cfi_offset %r15, -16
	cmpq	$0, ix86_debug_addr_string(%rip)
	movq	%rdx, %r14
	movq	%rdi, %r12
	jne	.LBB91_1
.LBB91_2:                               # %if.end
	movl	flag_pic(%rip), %eax
	movl	(%r12), %ebx
	testq	%rax, %rax
	je	.LBB91_6
# BB#3:                                 # %land.lhs.true
	movq	%rbx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	leaq	-67(%rax), %rcx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jb	.LBB91_69
# BB#4:                                 # %land.lhs.true
	cmpq	$58, %rax
	jne	.LBB91_6
# BB#5:                                 # %land.lhs.true9
	movq	%r12, %rdi
	callq	symbolic_reference_mentioned_p
	testq	%r15, %rax
	je	.LBB91_6
.LBB91_69:                              # %if.then12
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	legitimize_pic_address  # TAILCALL
.LBB91_6:                               # %if.end14
	andq	$65535, %rbx            # imm = 0xFFFF
	xorq	%r13, %r13
	cmpq	$87, %rbx
	jne	.LBB91_10
# BB#7:                                 # %land.lhs.true18
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB91_10
# BB#8:                                 # %land.lhs.true23
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	%rax, %r15
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$3, %rax
	ja	.LBB91_10
# BB#9:                                 # %if.then31
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	movq	8(%r12), %rsi
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	%rbx, %rdi
	callq	force_reg
	movq	%rax, %r12
	movq	$1, %r13
	movq	$1, %rsi
	movq	%r15, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$78, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %r12
.LBB91_10:                              # %if.end42
	movzbl	(%r12), %eax
	cmpq	$75, %rax
	jne	.LBB91_68
# BB#11:                                # %if.then47
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$87, %rcx
	jne	.LBB91_15
# BB#12:                                # %land.lhs.true55
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB91_15
# BB#13:                                # %land.lhs.true66
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	%rax, %r15
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$3, %rax
	ja	.LBB91_15
# BB#14:                                # %if.then79
	movq	8(%r12), %rax
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	movq	8(%rax), %rsi
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	%rbx, %rdi
	callq	force_reg
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$1, %r13
	movq	$1, %rsi
	movq	%r15, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$78, %rdi
	movq	%rbx, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, 8(%r12)
.LBB91_15:                              # %if.end100
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$87, %rcx
	jne	.LBB91_20
# BB#16:                                # %land.lhs.true108
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB91_20
# BB#17:                                # %land.lhs.true119
	movq	8(%rcx), %rdi
	callq	exact_log2_wide
	movq	%rax, %r15
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$4, %rax
	jae	.LBB91_18
# BB#19:                                # %if.then132
	movq	16(%r12), %rax
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	movq	8(%rax), %rsi
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	%rbx, %rdi
	callq	force_reg
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$1, %r13
	movq	$1, %rsi
	movq	%r15, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$78, %rdi
	movq	%rbx, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, 16(%r12)
	jmp	.LBB91_20
.LBB91_1:                               # %if.then
	movq	stderr(%rip), %rdi
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	mode_name(,%rax,8), %rdx
	movabsq	$.L.str100, %rsi
	xorq	%rax, %rax
	callq	fprintf
	movq	%r12, %rdi
	callq	debug_rtx
	jmp	.LBB91_2
.LBB91_18:                              # %land.lhs.true119.if.end153_crit_edge
	movq	16(%r12), %rax
.LBB91_20:                              # %if.end153
	movzbl	(%rax), %ecx
	movq	8(%r12), %r15
	cmpq	$78, %rcx
	jne	.LBB91_21
# BB#22:                                # %if.then161
	movq	%rax, 8(%r12)
	movq	%r15, 16(%r12)
	movq	$1, %r13
	movq	%rax, %rdx
	jmp	.LBB91_23
.LBB91_21:
	movq	%r15, %rdx
	movq	%rax, %r15
.LBB91_23:                              # %if.end174
	movzbl	(%rdx), %eax
	cmpq	$78, %rax
	jne	.LBB91_27
# BB#24:                                # %land.lhs.true182
	movzbl	(%r15), %eax
	cmpq	$75, %rax
	jne	.LBB91_27
# BB#25:                                # %if.then190
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	movq	8(%r15), %rax
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	$75, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	16(%r12), %rcx
	movq	16(%rcx), %rcx
	movq	$75, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
.LBB91_26:                              # %land.lhs.true398
	callq	gen_rtx_fmt_ee
	movq	%rax, %r12
	movq	$1, %r13
	jmp	.LBB91_35
.LBB91_27:                              # %if.else
	movzbl	(%r12), %eax
	cmpq	$75, %rax
	jne	.LBB91_34
# BB#28:                                # %land.lhs.true218
	movzbl	(%rdx), %eax
	cmpq	$75, %rax
	jne	.LBB91_34
# BB#29:                                # %land.lhs.true226
	movq	8(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$78, %rax
	jne	.LBB91_34
# BB#30:                                # %land.lhs.true237
	movq	16(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$75, %rax
	jne	.LBB91_34
# BB#31:                                # %land.lhs.true248
	movzbl	(%r15), %eax
	cmpq	$133, %rax
	jg	.LBB91_41
# BB#32:                                # %land.lhs.true248
	addq	$-54, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	ja	.LBB91_34
# BB#33:                                # %land.lhs.true248
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB91_43
	jmp	.LBB91_34
.LBB91_41:                              # %land.lhs.true248
	cmpq	$134, %rax
	je	.LBB91_43
# BB#42:                                # %land.lhs.true248
	cmpq	$140, %rax
	jne	.LBB91_34
.LBB91_43:                              # %if.then312
	movq	16(%rdx), %rax
	movzbl	(%r15), %ecx
	movq	16(%rax), %rsi
	cmpq	$54, %rcx
	je	.LBB91_47
# BB#44:                                # %if.else335
	movzbl	(%rsi), %eax
	cmpq	$54, %rax
	je	.LBB91_46
# BB#45:                                # %if.else335
	movabsq	$0, %r15
.LBB91_46:                              # %if.else335
	movq	%r15, %rax
	movq	%rsi, %r15
	movq	%rax, %rsi
	jne	.LBB91_34
.LBB91_47:                              # %if.end364
	testq	%r15, %r15
	je	.LBB91_34
# BB#48:                                # %if.then366
	movq	16(%rdx), %rax
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	movq	8(%rdx), %rdx
	movq	8(%rax), %rax
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	movq	%rsi, %r13
	movq	$75, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	8(%r15), %rsi
	movq	%rax, %r12
	movq	%r13, %rdi
	callq	plus_constant_wide
	movq	$75, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	jmp	.LBB91_26
.LBB91_34:                              # %if.end396
	xorq	%rax, %rax
	testq	%r13, %r13
	je	.LBB91_37
.LBB91_35:                              # %land.lhs.true398
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	legitimate_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB91_68
# BB#36:                                # %land.lhs.true398.if.end402_crit_edge
	movq	8(%r12), %rdx
	movq	%r13, %rax
.LBB91_37:                              # %if.end402
	movzbl	(%rdx), %ecx
	cmpq	$78, %rcx
	jne	.LBB91_39
# BB#38:                                # %if.then410
	xorq	%rsi, %rsi
	movq	%rdx, %rdi
	callq	force_operand
	movq	%rax, 8(%r12)
	movq	$1, %rax
.LBB91_39:                              # %if.end418
	movq	16(%r12), %rdi
	movl	(%rdi), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$78, %rdx
	jne	.LBB91_49
# BB#40:                                # %if.end434.thread
	xorq	%rsi, %rsi
	callq	force_operand
	movq	%rax, %rdi
	movq	%rdi, 16(%r12)
	movl	(%rdi), %ecx
	movq	$1, %rax
	jmp	.LBB91_50
.LBB91_49:                              # %if.end434
	xorq	%rbx, %rbx
	testq	%rax, %rax
	je	.LBB91_53
.LBB91_50:                              # %land.lhs.true436
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB91_51
# BB#52:                                # %land.lhs.true444
	movq	8(%r12), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$61, %rcx
	movq	%rax, %rbx
	je	.LBB91_68
	jmp	.LBB91_53
.LBB91_51:
	movq	%rax, %rbx
.LBB91_53:                              # %if.end453
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB91_58
# BB#54:                                # %land.lhs.true455
	movzbl	(%rdi), %eax
	leaq	-67(%rax), %rcx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jb	.LBB91_57
# BB#55:                                # %land.lhs.true455
	cmpq	$58, %rax
	jne	.LBB91_58
# BB#56:                                # %land.lhs.true479
	callq	symbolic_reference_mentioned_p
	testq	%r15, %rax
	je	.LBB91_58
.LBB91_57:                              # %if.end487.thread
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	legitimize_pic_address
	movq	%rax, %r12
	jmp	.LBB91_59
.LBB91_58:                              # %if.end487
	testq	%rbx, %rbx
	je	.LBB91_60
.LBB91_59:                              # %land.lhs.true489
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	legitimate_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB91_68
.LBB91_60:                              # %if.end493
	movq	8(%r12), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB91_64
# BB#61:                                # %if.then501
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	16(%r12), %rdi
	movq	%rax, %rbx
	movq	%rbx, %rsi
	callq	force_operand
	cmpq	%rbx, %rax
	je	.LBB91_63
# BB#62:                                # %if.then514
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
.LBB91_63:                              # %if.end516
	movq	%rbx, 16(%r12)
	jmp	.LBB91_68
.LBB91_64:                              # %if.else520
	movq	16(%r12), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB91_68
# BB#65:                                # %if.then528
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	8(%r12), %rdi
	movq	%rax, %rbx
	movq	%rbx, %rsi
	callq	force_operand
	cmpq	%rbx, %rax
	je	.LBB91_67
# BB#66:                                # %if.then543
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
.LBB91_67:                              # %if.end545
	movq	%rbx, 8(%r12)
.LBB91_68:                              # %return
	movq	%r12, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp707:
	.size	legitimize_address, .Ltmp707-legitimize_address
	.cfi_endproc

	.globl	i386_dwarf_output_addr_const
	.align	16, 0x90
	.type	i386_dwarf_output_addr_const,@function
i386_dwarf_output_addr_const:           # @i386_dwarf_output_addr_const
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp711:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp712:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp713:
	.cfi_def_cfa_offset 32
.Ltmp714:
	.cfi_offset %rbx, -24
.Ltmp715:
	.cfi_offset %r14, -16
	movl	target_flags(%rip), %eax
	movq	%rsi, %r14
	movq	%rdi, %rbx
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	jne	.LBB92_1
# BB#2:                                 # %entry
	movabsq	$.L.str3, %rdi
	jmp	.LBB92_3
.LBB92_1:
	movabsq	$.L.str4, %rdi
.LBB92_3:                               # %entry
	movq	$7, %rsi
	movq	$1, %rdx
	movq	%rbx, %rcx
	callq	fwrite
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB92_5
# BB#4:                                 # %if.then
	xorq	%rdx, %rdx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	output_pic_addr_const
	jmp	.LBB92_6
.LBB92_5:                               # %if.else
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	output_addr_const
.LBB92_6:                               # %if.end
	movq	$10, %rdi
	movq	%rbx, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	fputc  # TAILCALL
.Ltmp716:
	.size	i386_dwarf_output_addr_const, .Ltmp716-i386_dwarf_output_addr_const
	.cfi_endproc

	.align	16, 0x90
	.type	output_pic_addr_const,@function
output_pic_addr_const:                  # @output_pic_addr_const
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp721:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp722:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp723:
	.cfi_def_cfa_offset 32
	subq	$256, %rsp              # imm = 0x100
.Ltmp724:
	.cfi_def_cfa_offset 288
.Ltmp725:
	.cfi_offset %rbx, -32
.Ltmp726:
	.cfi_offset %r14, -24
.Ltmp727:
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movl	(%rbx), %ecx
	movq	%rdx, %r15
	movq	%rdi, %r14
	movq	%rcx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jg	.LBB93_16
# BB#1:                                 # %entry
	cmpq	$66, %rax
	jg	.LBB93_9
# BB#2:                                 # %entry
	cmpq	$53, %rax
	jg	.LBB93_7
# BB#3:                                 # %entry
	cmpq	$36, %rax
	je	.LBB93_28
# BB#4:                                 # %entry
	cmpq	$42, %rax
	jne	.LBB93_49
# BB#5:                                 # %sw.bb100
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB93_6
# BB#43:                                # %if.end105
	movq	8(%rax), %rsi
	movq	%r14, %rdi
	movq	%r15, %rdx
	callq	output_pic_addr_const
	movl	16(%rbx), %ecx
	addq	$-6, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$9, %rax
	ja	.LBB93_48
# BB#44:                                # %if.end105
	jmpq	*.LJTI93_1(,%rax,8)
.LBB93_45:                              # %sw.bb113
	movabsq	$.L.str472, %rdi
	jmp	.LBB93_14
.LBB93_16:                              # %entry
	cmpq	$75, %rax
	jne	.LBB93_17
# BB#38:                                # %sw.bb54
	movq	8(%rbx), %rsi
	movzbl	(%rsi), %eax
	cmpq	$54, %rax
	jne	.LBB93_40
# BB#39:                                # %if.then61
	movq	%r14, %rdi
	movq	%r15, %rdx
	callq	output_pic_addr_const
	movq	$43, %rdi
	movq	%r14, %rsi
	callq	putc
	movq	16(%rbx), %rsi
	jmp	.LBB93_31
.LBB93_9:                               # %entry
	cmpq	$67, %rax
	jne	.LBB93_10
# BB#27:                                # %sw.bb8
	movq	8(%rbx), %rbx
.LBB93_28:                              # %do.body
	movl	48(%rbx), %ecx
	movabsq	$.L.str55, %rsi
	movabsq	$.L.str208, %rdx
	leaq	(%rsp), %rbx
	xorq	%rax, %rax
	movq	%rbx, %rdi
	callq	sprintf
	movq	asm_out_file(%rip), %rdi
	movq	%rbx, %rsi
	callq	assemble_name
	jmp	.LBB93_51
.LBB93_17:                              # %entry
	cmpq	$76, %rax
	jne	.LBB93_49
# BB#18:                                # %sw.bb87
	movl	ix86_asm_dialect(%rip), %eax
	cmpq	$1, %rax
	movq	$40, %rdi
	je	.LBB93_20
# BB#19:                                # %select.mid
	movq	$91, %rdi
.LBB93_20:                              # %select.end
	movq	%r14, %rsi
	callq	putc
	movq	8(%rbx), %rsi
	movq	%r14, %rdi
	movq	%r15, %rdx
	callq	output_pic_addr_const
	movq	$45, %rdi
	movq	%r14, %rsi
	callq	putc
	movq	16(%rbx), %rsi
	movq	%r14, %rdi
	movq	%r15, %rdx
	callq	output_pic_addr_const
	movl	ix86_asm_dialect(%rip), %eax
	cmpq	$1, %rax
	movq	$41, %rdi
	je	.LBB93_22
# BB#21:                                # %select.mid5
	movq	$93, %rdi
.LBB93_22:                              # %select.end4
	movq	%r14, %rsi
	callq	putc
	jmp	.LBB93_51
.LBB93_7:                               # %entry
	addq	$-54, %rax
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	$5, %rdx
	ja	.LBB93_49
# BB#8:                                 # %entry
	jmpq	*.LJTI93_0(,%rdx,8)
.LBB93_29:                              # %sw.bb16
	movq	8(%rbx), %rdx
	movabsq	$.L.str130, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	jmp	.LBB93_51
.LBB93_40:                              # %if.else69
	movq	16(%rbx), %rsi
	movzbl	(%rsi), %eax
	cmpq	$54, %rax
	jne	.LBB93_42
# BB#41:                                # %if.then76
	movq	%r14, %rdi
	movq	%r15, %rdx
	callq	output_pic_addr_const
	movq	$43, %rdi
	movq	%r14, %rsi
	callq	putc
.LBB93_30:                              # %sw.bb20
	movq	8(%rbx), %rsi
.LBB93_31:                              # %sw.epilog122
	movq	%r14, %rdi
	movq	%r15, %rdx
	callq	output_pic_addr_const
	jmp	.LBB93_51
.LBB93_10:                              # %entry
	cmpq	$68, %rax
	jne	.LBB93_49
# BB#11:                                # %sw.bb1
	movq	8(%rbx), %rsi
	movq	%r14, %rdi
	callq	assemble_name
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r15
	cmpq	$80, %r15
	jne	.LBB93_51
# BB#12:                                # %land.lhs.true
	movzbl	3(%rbx), %eax
	testq	$8, %rax
	jne	.LBB93_51
.LBB93_13:                              # %if.then5
	movabsq	$.L.str469, %rdi
.LBB93_14:                              # %sw.epilog122
	movq	$4, %rsi
.LBB93_15:                              # %sw.epilog122
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	jmp	.LBB93_51
.LBB93_49:                              # %sw.default121
	movabsq	$.L.str476, %rdi
.LBB93_50:                              # %sw.epilog122
	xorq	%rax, %rax
	callq	output_operand_lossage
.LBB93_51:                              # %sw.epilog122
	addq	$256, %rsp              # imm = 0x100
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB93_48:                              # %sw.default
	movabsq	$.L.str475, %rdi
	jmp	.LBB93_50
.LBB93_32:                              # %sw.bb24
	testq	$16711680, %rcx         # imm = 0xFF0000
	je	.LBB93_33
# BB#37:                                # %if.else52
	movabsq	$.L.str471, %rdi
	jmp	.LBB93_50
.LBB93_23:                              # %sw.bb
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB93_25
# BB#24:                                # %if.then
	movq	$46, %rdi
	jmp	.LBB93_22
.LBB93_33:                              # %if.then29
	movq	24(%rbx), %rdx
	movq	16(%rbx), %rcx
	testq	%rdx, %rdx
	jne	.LBB93_35
# BB#34:                                # %if.then29
	testq	%rcx, %rcx
	js	.LBB93_35
# BB#36:                                # %if.else46
	movabsq	$.L.str130, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	movq	%rcx, %rdx
	callq	fprintf
	jmp	.LBB93_51
.LBB93_46:                              # %sw.bb115
	movabsq	$.L.str473, %rdi
	movq	$7, %rsi
	jmp	.LBB93_15
.LBB93_47:                              # %sw.bb119
	movabsq	$.L.str474, %rdi
	movq	$15, %rsi
	jmp	.LBB93_15
.LBB93_35:                              # %if.then38
	movabsq	$.L.str470, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	jmp	.LBB93_51
.LBB93_6:                               # %if.then104
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.output_pic_addr_const, %rcx
	movq	$5415, %rsi             # imm = 0x1527
	jmp	.LBB93_26
.LBB93_42:                              # %if.else84
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.output_pic_addr_const, %rcx
	movq	$5402, %rsi             # imm = 0x151A
	jmp	.LBB93_26
.LBB93_25:                              # %if.else
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.output_pic_addr_const, %rcx
	movq	$5343, %rsi             # imm = 0x14DF
.LBB93_26:                              # %if.else
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp728:
	.size	output_pic_addr_const, .Ltmp728-output_pic_addr_const
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI93_0:
	.quad	.LBB93_29
	.quad	.LBB93_32
	.quad	.LBB93_49
	.quad	.LBB93_49
	.quad	.LBB93_30
	.quad	.LBB93_23
.LJTI93_1:
	.quad	.LBB93_45
	.quad	.LBB93_46
	.quad	.LBB93_13
	.quad	.LBB93_48
	.quad	.LBB93_48
	.quad	.LBB93_48
	.quad	.LBB93_48
	.quad	.LBB93_48
	.quad	.LBB93_48
	.quad	.LBB93_47

	.text
	.globl	i386_simplify_dwarf_addr
	.align	16, 0x90
	.type	i386_simplify_dwarf_addr,@function
i386_simplify_dwarf_addr:               # @i386_simplify_dwarf_addr
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp732:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp733:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp734:
	.cfi_def_cfa_offset 32
.Ltmp735:
	.cfi_offset %rbx, -24
.Ltmp736:
	.cfi_offset %r14, -16
	movq	%rdi, %rax
	movl	(%rax), %edi
	movq	%rdi, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$66, %rdx
	movq	%rax, %rcx
	jne	.LBB94_2
# BB#1:                                 # %if.then
	movq	8(%rax), %rcx
	movl	(%rcx), %edi
.LBB94_2:                               # %if.end
	movl	target_flags(%rip), %esi
	andq	$65535, %rdi            # imm = 0xFFFF
	testq	$33554432, %rsi         # imm = 0x2000000
	je	.LBB94_12
# BB#3:                                 # %if.then1
	cmpq	$58, %rdi
	jne	.LBB94_11
# BB#4:                                 # %lor.lhs.false
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %esi
	cmpq	$42, %rsi
	jne	.LBB94_11
# BB#5:                                 # %lor.lhs.false11
	movl	16(%rcx), %esi
	cmpq	$66, %rdx
	je	.LBB94_6
# BB#7:                                 # %lor.lhs.false11
	movabsq	$1, %rdx
	jmp	.LBB94_8
.LBB94_12:                              # %if.end30
	cmpq	$75, %rdi
	jne	.LBB94_11
# BB#13:                                # %lor.lhs.false34
	movq	16(%rcx), %rdi
	movzbl	(%rdi), %ebx
	cmpq	$58, %rbx
	jne	.LBB94_11
# BB#14:                                # %if.end42
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %ebx
	cmpq	$75, %rbx
	jne	.LBB94_15
# BB#19:                                # %if.then65
	movq	8(%rcx), %r14
	movl	(%r14), %r8d
	movq	%r8, %rbx
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$61, %rbx
	jne	.LBB94_24
# BB#20:                                # %lor.end87
	movl	flag_pic(%rip), %r10d
	movl	8(%r14), %ebx
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	testq	%r10, %r10
	movq	%r9, %r10
	je	.LBB94_22
# BB#21:                                # %select.mid3
	movq	$3, %r10
.LBB94_22:                              # %select.end2
	andq	%r9, %rbx
	cmpq	%r10, %rbx
	jne	.LBB94_24
# BB#23:                                # %if.then90
	movq	16(%rcx), %r14
	movl	(%r14), %r8d
	jmp	.LBB94_28
.LBB94_6:
	movabsq	$0, %rdx
.LBB94_8:                               # %lor.lhs.false11
	cmpq	$15, %rsi
	jne	.LBB94_11
# BB#9:                                 # %lor.lhs.false11
	testq	%rdx, %rdx
	je	.LBB94_10
	jmp	.LBB94_11
.LBB94_15:                              # %if.end42
	cmpq	$61, %rbx
	jne	.LBB94_11
# BB#16:                                # %lor.end
	movl	flag_pic(%rip), %ebx
	movl	8(%rcx), %ecx
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%rbx, %rbx
	movq	%r8, %rbx
	je	.LBB94_18
# BB#17:                                # %select.mid
	movq	$3, %rbx
.LBB94_18:                              # %select.end
	andq	%r8, %rcx
	xorq	%r14, %r14
	cmpq	%rbx, %rcx
	jne	.LBB94_11
	jmp	.LBB94_30
.LBB94_24:                              # %if.else94
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %ebx
	cmpq	$61, %rbx
	jne	.LBB94_11
# BB#25:                                # %lor.end113
	movl	flag_pic(%rip), %ebx
	movl	8(%rcx), %ecx
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	testq	%rbx, %rbx
	movq	%r9, %rbx
	je	.LBB94_27
# BB#26:                                # %select.mid6
	movq	$3, %rbx
.LBB94_27:                              # %select.end5
	andq	%r9, %rcx
	cmpq	%rbx, %rcx
	jne	.LBB94_11
.LBB94_28:                              # %if.end122
	andq	$65535, %r8             # imm = 0xFFFF
	addq	$-61, %r8
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%r8, %rcx
	cmpq	$26, %rcx
	ja	.LBB94_11
# BB#29:                                # %if.end122
	movq	$1, %rbx
	shlq	%cl, %rbx
	testq	$67239937, %rbx         # imm = 0x4020001
	je	.LBB94_11
.LBB94_30:                              # %if.end138
	movq	8(%rdi), %rcx
	movzbl	(%rcx), %edi
	cmpq	$75, %rdi
	je	.LBB94_36
# BB#31:                                # %if.end138
	cmpq	$42, %rdi
	jne	.LBB94_11
# BB#32:                                # %land.lhs.true148
	movl	16(%rcx), %ebx
	cmpq	$7, %rbx
	jne	.LBB94_33
# BB#41:                                # %land.lhs.true162
	cmpq	$66, %rdx
	je	.LBB94_35
	jmp	.LBB94_42
.LBB94_33:                              # %land.lhs.true148
	cmpq	$6, %rbx
	jne	.LBB94_11
# BB#34:                                # %land.lhs.true153
	cmpq	$66, %rdx
	jne	.LBB94_35
.LBB94_42:                              # %if.then166
	testq	%r14, %r14
	je	.LBB94_10
# BB#43:                                # %if.then168
	movq	8(%rcx), %rax
	movq	$25, %rcx
	shrq	%cl, %rsi
	movq	8(%rax), %rcx
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$75, %rdi
	movq	%r14, %rdx
	jmp	.LBB94_47
.LBB94_10:                              # %if.end23
	movq	8(%rcx), %rax
	movq	8(%rax), %rax
.LBB94_11:                              # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB94_35:                              # %if.end183
	cmpq	$75, %rdi
	jne	.LBB94_11
.LBB94_36:                              # %land.lhs.true187
	movq	8(%rcx), %rsi
	movzbl	(%rsi), %edi
	cmpq	$42, %rdi
	jne	.LBB94_11
# BB#37:                                # %land.lhs.true194
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edi
	cmpq	$54, %rdi
	jne	.LBB94_11
# BB#38:                                # %land.lhs.true201
	movl	16(%rsi), %edi
	cmpq	$7, %rdi
	jne	.LBB94_39
# BB#44:                                # %land.lhs.true221
	cmpq	$66, %rdx
	je	.LBB94_11
	jmp	.LBB94_45
.LBB94_39:                              # %land.lhs.true201
	cmpq	$6, %rdi
	jne	.LBB94_11
# BB#40:                                # %land.lhs.true209
	cmpq	$66, %rdx
	jne	.LBB94_11
.LBB94_45:                              # %if.then225
	movq	8(%rsi), %rax
	movq	8(%rax), %rdx
	movq	$75, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_fmt_ee
	testq	%r14, %r14
	je	.LBB94_11
# BB#46:                                # %if.then239
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$75, %rdi
	movq	%r14, %rdx
	movq	%rax, %rcx
.LBB94_47:                              # %if.then239
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	gen_rtx_fmt_ee  # TAILCALL
.Ltmp737:
	.size	i386_simplify_dwarf_addr, .Ltmp737-i386_simplify_dwarf_addr
	.cfi_endproc

	.globl	print_reg
	.align	16, 0x90
	.type	print_reg,@function
print_reg:                              # @print_reg
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp742:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp743:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp744:
	.cfi_def_cfa_offset 32
.Ltmp745:
	.cfi_offset %rbx, -32
.Ltmp746:
	.cfi_offset %r14, -24
.Ltmp747:
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movl	8(%r15), %eax
	movq	%rdx, %r14
	movq	%rsi, %rbx
	cmpq	$20, %rax
	jbe	.LBB95_1
.LBB95_4:                               # %if.end
	movq	$37, %rdi
	movq	%r14, %rsi
	callq	putc
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rbx, %rdx
	movl	(%r15), %esi
	andq	%rax, %rdx
	cmpq	$119, %rdx
	movq	$2, %rcx
	je	.LBB95_18
# BB#5:                                 # %lor.lhs.false23
	movq	%rsi, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	cmpq	$61, %rdi
	jne	.LBB95_7
# BB#6:                                 # %land.lhs.true
	movl	8(%r15), %edi
	addq	$-29, %rdi
	andq	%rax, %rdi
	cmpq	$8, %rdi
	jb	.LBB95_18
.LBB95_7:                               # %if.else
	movq	$32, %rcx
	movq	%rbx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$120, %rdi
	jg	.LBB95_15
# BB#8:                                 # %if.else
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	$103, %rbx
	jg	.LBB95_11
# BB#9:                                 # %if.else
	movq	$1, %rcx
	cmpq	$98, %rdx
	je	.LBB95_18
	jmp	.LBB95_10
.LBB95_15:                              # %if.else
	cmpq	$121, %rdx
	jne	.LBB95_10
# BB#16:                                # %if.then52
	movq	$3, %rcx
	jmp	.LBB95_18
.LBB95_11:                              # %if.else
	cmpq	$104, %rdx
	je	.LBB95_17
# BB#12:                                # %if.else
	cmpq	$107, %rdx
	jne	.LBB95_13
# BB#50:                                # %if.then44
	movq	$4, %rcx
	jmp	.LBB95_18
.LBB95_17:                              # %if.then56
	xorq	%rcx, %rcx
	jmp	.LBB95_18
.LBB95_13:                              # %if.else
	cmpq	$113, %rdx
	jne	.LBB95_10
# BB#14:                                # %if.then48
	movq	$8, %rcx
	jmp	.LBB95_18
.LBB95_10:                              # %if.else57
	movq	$16, %rcx
	movq	%rsi, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movzbl	mode_size(%rdx), %ecx
.LBB95_18:                              # %if.end67
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$61, %rsi
	jne	.LBB95_32
# BB#19:                                # %land.lhs.true72
	movl	8(%r15), %edx
	leaq	-37(%rdx), %rdi
	andq	%rax, %rdi
	cmpq	$7, %rdi
	ja	.LBB95_32
# BB#20:                                # %if.then84
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB95_21
# BB#22:                                # %if.end86
	cmpq	$8, %rcx
	ja	.LBB95_31
# BB#23:                                # %if.end86
	jmpq	*.LJTI95_1(,%rcx,8)
.LBB95_24:                              # %sw.bb
	movabsq	$.L.str102, %rdi
	jmp	.LBB95_25
.LBB95_32:                              # %if.end113
	cmpq	$16, %rcx
	ja	.LBB95_49
# BB#33:                                # %if.end113
	jmpq	*.LJTI95_0(,%rcx,8)
.LBB95_37:                              # %sw.bb128
	cmpq	$61, %rsi
	jne	.LBB95_41
	jmp	.LBB95_38
.LBB95_31:                              # %sw.default
	movabsq	$.L.str107, %rdi
.LBB95_25:                              # %sw.bb
	xorq	%rax, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	error  # TAILCALL
.LBB95_48:                              # %sw.bb190
	movl	8(%r15), %eax
	movq	qi_high_reg_name(,%rax,8), %rdi
	jmp	.LBB95_46
.LBB95_47:                              # %sw.bb183
	movl	8(%r15), %eax
	movq	qi_reg_name(,%rax,8), %rdi
	jmp	.LBB95_46
.LBB95_34:                              # %sw.bb114
	movq	$101, %rdi
	cmpq	$61, %rsi
	jne	.LBB95_44
# BB#35:                                # %land.lhs.true119
	movl	8(%r15), %edx
	cmpq	$8, %rdx
	jne	.LBB95_38
# BB#36:                                # %if.then125
	movabsq	$.L.str108, %rdi
	movq	$5, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	fwrite  # TAILCALL
.LBB95_38:                              # %land.lhs.true133
	movl	8(%r15), %edx
	movabsq	$4294967288, %rsi       # imm = 0xFFFFFFF8
	andq	%rdx, %rsi
	cmpq	$8, %rsi
	je	.LBB95_45
# BB#39:                                # %land.lhs.true133
	leaq	-21(%rdx), %rsi
	andq	%rax, %rsi
	cmpq	$8, %rsi
	jb	.LBB95_45
# BB#40:                                # %land.lhs.true133
	addq	$-45, %rdx
	andq	%rax, %rdx
	cmpq	$8, %rdx
	jb	.LBB95_45
.LBB95_41:                              # %if.then169
	movq	$101, %rdi
	cmpq	$8, %rcx
	jne	.LBB95_44
# BB#42:                                # %land.rhs
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	movq	$1, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	movq	$114, %rdi
	jne	.LBB95_44
# BB#43:                                # %land.rhs
	movq	$101, %rdi
.LBB95_44:                              # %land.end
	movq	%r14, %rsi
	callq	putc
.LBB95_45:                              # %sw.bb176
	movl	8(%r15), %eax
	movq	hi_reg_name(,%rax,8), %rdi
.LBB95_46:                              # %sw.bb176
	movq	%r14, %rsi
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	fputs  # TAILCALL
.LBB95_49:                              # %sw.default197
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.print_reg, %rdx
	movq	$5715, %rsi             # imm = 0x1653
	callq	fancy_abort
.LBB95_26:                              # %sw.bb87
	addq	$-29, %rdx
	movabsq	$.L.str103, %rsi
	jmp	.LBB95_27
.LBB95_28:                              # %sw.bb92
	addq	$-29, %rdx
	movabsq	$.L.str104, %rsi
	jmp	.LBB95_27
.LBB95_29:                              # %sw.bb99
	addq	$-29, %rdx
	movabsq	$.L.str105, %rsi
	jmp	.LBB95_27
.LBB95_30:                              # %sw.bb106
	addq	$-29, %rdx
	movabsq	$.L.str106, %rsi
.LBB95_27:                              # %sw.bb87
	xorq	%rax, %rax
	movq	%r14, %rdi
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	fprintf  # TAILCALL
.LBB95_1:                               # %entry
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$1507328, %rdx          # imm = 0x170000
	je	.LBB95_4
# BB#2:                                 # %if.then
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.print_reg, %rcx
	movq	$5640, %rsi             # imm = 0x1608
	jmp	.LBB95_3
.LBB95_21:                              # %if.then85
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.print_reg, %rcx
	movq	$5665, %rsi             # imm = 0x1621
.LBB95_3:                               # %if.then
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp748:
	.size	print_reg, .Ltmp748-print_reg
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI95_0:
	.quad	.LBB95_48
	.quad	.LBB95_47
	.quad	.LBB95_45
	.quad	.LBB95_34
	.quad	.LBB95_37
	.quad	.LBB95_49
	.quad	.LBB95_49
	.quad	.LBB95_49
	.quad	.LBB95_37
	.quad	.LBB95_49
	.quad	.LBB95_49
	.quad	.LBB95_49
	.quad	.LBB95_37
	.quad	.LBB95_49
	.quad	.LBB95_49
	.quad	.LBB95_49
	.quad	.LBB95_45
.LJTI95_1:
	.quad	.LBB95_24
	.quad	.LBB95_26
	.quad	.LBB95_28
	.quad	.LBB95_31
	.quad	.LBB95_29
	.quad	.LBB95_31
	.quad	.LBB95_31
	.quad	.LBB95_31
	.quad	.LBB95_30

	.text
	.globl	print_operand
	.align	16, 0x90
	.type	print_operand,@function
print_operand:                          # @print_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp755:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp756:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp757:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp758:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp759:
	.cfi_def_cfa_offset 48
	subq	$96, %rsp
.Ltmp760:
	.cfi_def_cfa_offset 144
.Ltmp761:
	.cfi_offset %rbx, -48
.Ltmp762:
	.cfi_offset %r12, -40
.Ltmp763:
	.cfi_offset %r13, -32
.Ltmp764:
	.cfi_offset %r14, -24
.Ltmp765:
	.cfi_offset %r15, -16
	movq	%rdx, %rbx
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$41, %rax
	jg	.LBB96_7
# BB#1:                                 # %entry
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rbx
	je	.LBB96_3
	jmp	.LBB96_2
.LBB96_7:                               # %entry
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$64, %rax
	jg	.LBB96_22
# BB#8:                                 # %entry
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	movq	%rbx, %rax
	andq	%r12, %rax
	cmpq	$42, %rax
	jne	.LBB96_9
# BB#27:                                # %sw.bb
	movl	ix86_asm_dialect(%rip), %eax
	testq	%rax, %rax
	jne	.LBB96_144
# BB#28:                                # %if.then1
	movq	$42, %rdi
.LBB96_29:                              # %if.end466
	movq	%r14, %rsi
	callq	putc
	jmp	.LBB96_144
.LBB96_22:                              # %entry
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$97, %rax
	jg	.LBB96_25
# BB#23:                                # %entry
	leaq	-65(%rbx), %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$23, %rcx
	ja	.LBB96_2
# BB#24:                                # %entry
	jmpq	*.LJTI96_1(,%rcx,8)
.LBB96_38:                              # %sw.bb16
	movl	ix86_asm_dialect(%rip), %eax
	testq	%rax, %rax
	jne	.LBB96_144
	jmp	.LBB96_39
.LBB96_9:                               # %entry
	cmpq	$43, %rax
	jne	.LBB96_2
# BB#10:                                # %sw.bb167
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB96_144
# BB#11:                                # %sw.bb167
	movl	optimize(%rip), %eax
	testq	%r12, %rax
	je	.LBB96_144
# BB#12:                                # %sw.bb167
	movl	ix86_cpu(%rip), %eax
	andq	%r12, %rax
	cmpq	$6, %rax
	jne	.LBB96_144
# BB#13:                                # %if.end174
	movq	current_output_insn(%rip), %rdi
	movq	$16, %rsi
	xorq	%rdx, %rdx
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB96_144
# BB#14:                                # %if.then177
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
	leaq	-4500(%rbx), %rax
	andq	%r12, %rax
	cmpq	$1001, %rax             # imm = 0x3E9
	jb	.LBB96_144
# BB#15:                                # %if.then189
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$5000, %rax             # imm = 0x1388
	movabsq	$0, %r15
	movabsq	$1, %rax
	movq	%r15, %r13
	jle	.LBB96_17
# BB#16:                                # %if.then189
	movq	%rax, %r13
.LBB96_17:                              # %if.then189
	movq	current_output_insn(%rip), %rdi
	callq	final_forward_branch_p
	testq	%r12, %rax
	jne	.LBB96_19
# BB#18:                                # %if.then189
	movabsq	$1, %r15
.LBB96_19:                              # %if.then189
	cmpq	%r15, %r13
	je	.LBB96_144
# BB#20:                                # %if.then197
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	$5001, %rbx             # imm = 0x1389
	jl	.LBB96_89
# BB#21:                                # %if.then199
	movabsq	$.L.str118, %rdi
	movq	$5, %rsi
	jmp	.LBB96_69
.LBB96_25:                              # %entry
	leaq	-98(%rbx), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$24, %rax
	ja	.LBB96_2
# BB#26:                                # %entry
	jmpq	*.LJTI96_0(,%rax,8)
.LBB96_84:                              # %sw.bb140
	movzbl	(%r15), %edi
	movzbl	rtx_class(%rdi), %eax
	cmpq	$60, %rax
	jne	.LBB96_85
# BB#86:                                # %if.end149
	movq	8(%r15), %rax
	movzbl	2(%rax), %esi
	movq	$1, %rdx
	xorq	%rcx, %rcx
	jmp	.LBB96_83
.LBB96_2:                               # %sw.default207
	movabsq	$.L.str120, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	callq	output_operand_lossage
.LBB96_3:                               # %if.end209
	movl	(%r15), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$55, %rax
	je	.LBB96_122
# BB#4:                                 # %if.end209
	cmpq	$66, %rax
	jne	.LBB96_5
# BB#90:                                # %if.then220
	movl	ix86_asm_dialect(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB96_109
# BB#91:                                # %switch.early.test
	movq	%rbx, %rcx
	orq	$8, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$88, %rcx
	je	.LBB96_109
# BB#92:                                # %if.then229
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movzbl	mode_size(%rdx), %edx
	cmpq	$15, %rdx
	movabsq	$.L.str121, %rdi
	jg	.LBB96_98
# BB#93:                                # %if.then229
	decq	%rdx
	andq	%rax, %rdx
	cmpq	$11, %rdx
	ja	.LBB96_100
# BB#94:                                # %if.then229
	movq	%rdi, %rcx
	jmpq	*.LJTI96_3(,%rdx,8)
.LBB96_101:                             # %sw.bb237
	movabsq	$.L.str122, %rcx
	jmp	.LBB96_102
.LBB96_122:                             # %land.lhs.true333
	movq	%rdx, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB96_126
# BB#123:                               # %do.body
	movq	32(%r15), %rax
	movq	%rax, 16(%rsp)
	movq	16(%r15), %rax
	movq	24(%r15), %rcx
	movq	%rcx, 8(%rsp)
	movq	%rax, (%rsp)
	callq	etarsingle
	movl	ix86_asm_dialect(%rip), %ecx
	movq	%rax, %rbx
	testq	%rcx, %rcx
	jne	.LBB96_125
# BB#124:                               # %if.then346
	movq	$36, %rdi
	movq	%r14, %rsi
	callq	putc
.LBB96_125:                             # %if.end348
	movabsq	$.L.str128, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	movq	%rbx, %rdx
	callq	fprintf
	jmp	.LBB96_144
.LBB96_5:                               # %if.end209
	cmpq	$61, %rax
	jne	.LBB96_126
# BB#6:                                 # %if.then214
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	print_reg
	jmp	.LBB96_144
.LBB96_126:                             # %if.else350
	movq	%rdx, %rcx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$1048631, %rcx          # imm = 0x100037
	jne	.LBB96_129
# BB#127:                               # %do.body363
	movq	32(%r15), %rax
	movq	%rax, 16(%rsp)
	movq	16(%r15), %rax
	movq	24(%r15), %rcx
	movq	%rcx, 8(%rsp)
	leaq	64(%rsp), %rbx
	jmp	.LBB96_128
.LBB96_129:                             # %if.else372
	cmpq	$55, %rax
	jne	.LBB96_132
# BB#130:                               # %land.lhs.true377
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-17, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$1, %rcx
	ja	.LBB96_132
# BB#131:                               # %do.body392
	movq	32(%r15), %rax
	movq	%rax, 16(%rsp)
	movq	16(%r15), %rax
	movq	24(%r15), %rcx
	movq	%rcx, 8(%rsp)
	leaq	32(%rsp), %rbx
.LBB96_128:                             # %if.end466
	movq	%rax, (%rsp)
	movq	%rbx, %rdi
	callq	ereal_to_decimal
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fputs
	jmp	.LBB96_144
.LBB96_132:                             # %if.else402
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rbx, %rdx
	andq	%rcx, %rdx
	cmpq	$80, %rdx
	je	.LBB96_140
# BB#133:                               # %if.then405
	addq	$-54, %rax
	andq	%rcx, %rax
	cmpq	$14, %rax
	ja	.LBB96_140
# BB#134:                               # %if.then405
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$24592, %rsi            # imm = 0x6010
	je	.LBB96_135
# BB#138:                               # %if.then436
	movl	ix86_asm_dialect(%rip), %eax
	testq	%rax, %rax
	je	.LBB96_137
# BB#139:                               # %if.else441
	movabsq	$.L.str129, %rdi
	movq	$12, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	jmp	.LBB96_140
.LBB96_98:                              # %if.then229
	cmpq	$16, %rdx
	jne	.LBB96_100
# BB#99:                                # %sw.bb241
	movabsq	$.L.str126, %rcx
.LBB96_102:                             # %sw.epilog243
	andq	%rbx, %rax
	cmpq	$98, %rax
	je	.LBB96_108
# BB#103:                               # %sw.epilog243
	cmpq	$119, %rax
	jne	.LBB96_105
# BB#104:                               # %if.then250
	movabsq	$.L.str122, %rdi
	jmp	.LBB96_108
.LBB96_105:                             # %if.else251
	cmpq	$107, %rax
	jne	.LBB96_107
# BB#106:
	movabsq	$.L.str123, %rcx
.LBB96_107:                             # %if.else251
	movq	%rcx, %rdi
.LBB96_108:                             # %if.end257
	movq	%r14, %rsi
	callq	fputs
	movabsq	$.L.str127, %rdi
	movq	$5, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
.LBB96_109:                             # %if.end260
	movq	8(%r15), %rsi
	movl	flag_pic(%rip), %ecx
	movl	(%rsi), %eax
	testq	%rcx, %rcx
	je	.LBB96_114
# BB#110:                               # %land.lhs.true265
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	addq	$-54, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$14, %rcx
	ja	.LBB96_114
# BB#111:                               # %land.lhs.true265
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$24595, %rdx            # imm = 0x6013
	je	.LBB96_114
# BB#112:                               # %if.then290
	movq	%r14, %rdi
	jmp	.LBB96_113
.LBB96_114:                             # %if.else291
	andq	$65535, %rax            # imm = 0xFFFF
	leaq	-54(%rax), %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$14, %rcx
	ja	.LBB96_116
# BB#115:                               # %if.else291
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$24593, %rdi            # imm = 0x6011
	je	.LBB96_116
# BB#119:                               # %land.lhs.true316
	andq	%rdx, %rbx
	cmpq	$80, %rbx
	je	.LBB96_120
	jmp	.LBB96_118
.LBB96_116:                             # %lor.lhs.false311
	andq	%rdx, %rbx
	cmpq	$80, %rbx
	jne	.LBB96_118
# BB#117:                               # %lor.lhs.false311
	cmpq	$55, %rax
	jne	.LBB96_118
.LBB96_120:                             # %land.lhs.true316
	cmpq	$54, %rax
	je	.LBB96_118
# BB#121:                               # %if.then324
	movq	%r14, %rdi
.LBB96_143:                             # %if.end466
	callq	output_addr_const
	jmp	.LBB96_144
.LBB96_118:                             # %if.else325
	movq	%rsi, %rdi
	callq	output_address
	jmp	.LBB96_144
.LBB96_135:                             # %if.then405
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$3, %rdx
	je	.LBB96_140
# BB#136:                               # %if.then415
	movl	ix86_asm_dialect(%rip), %eax
	testq	%rax, %rax
	jne	.LBB96_140
.LBB96_137:                             # %if.then418
	movq	$36, %rdi
	movq	%r14, %rsi
	callq	putc
.LBB96_140:                             # %if.end446
	movzbl	(%r15), %eax
	cmpq	$54, %rax
	jne	.LBB96_142
# BB#141:                               # %if.then451
	movq	8(%r15), %rdx
	movabsq	$.L.str130, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	jmp	.LBB96_144
.LBB96_142:                             # %if.else456
	movl	flag_pic(%rip), %eax
	movq	%r14, %rdi
	movq	%r15, %rsi
	testq	%rax, %rax
	je	.LBB96_143
.LBB96_113:                             # %if.end466
	movq	%rbx, %rdx
	callq	output_pic_addr_const
.LBB96_144:                             # %if.end466
	addq	$96, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB96_88:                              # %sw.bb158
	movq	8(%r15), %rax
	movzbl	(%r15), %edi
	movzbl	2(%rax), %esi
	movq	$1, %rdx
	jmp	.LBB96_82
.LBB96_63:                              # %sw.bb94
	movzbl	(%r15), %eax
	cmpq	$54, %rax
	jne	.LBB96_144
# BB#64:                                # %if.then99
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	print_operand
	movq	$44, %rdi
	jmp	.LBB96_29
.LBB96_48:                              # %sw.bb46
	movl	(%r15), %eax
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB96_52
# BB#49:                                # %land.lhs.true
	movl	8(%r15), %edx
	cmpq	$8, %rdx
	jb	.LBB96_52
# BB#50:                                # %land.lhs.true51
	cmpq	$16, %rdx
	jb	.LBB96_144
# BB#51:                                # %land.lhs.true51
	movl	ix86_asm_dialect(%rip), %edx
	andq	%rcx, %rdx
	cmpq	$1, %rdx
	jne	.LBB96_53
	jmp	.LBB96_144
.LBB96_30:                              # %sw.bb2
	movl	ix86_asm_dialect(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB96_31
# BB#34:                                # %if.then7
	movzbl	(%r15), %eax
	cmpq	$61, %rax
	je	.LBB96_33
# BB#35:                                # %if.then9
	movq	$91, %rdi
	movq	%r14, %rsi
	callq	putc
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	print_operand
	movq	$93, %rdi
	jmp	.LBB96_29
.LBB96_42:                              # %sw.bb26
	movl	ix86_asm_dialect(%rip), %eax
	testq	%rax, %rax
	jne	.LBB96_144
# BB#43:                                # %if.then28
	movq	$98, %rdi
	jmp	.LBB96_29
.LBB96_80:                              # %sw.bb123
	movq	8(%r15), %rax
	movzbl	(%r15), %edi
	movzbl	2(%rax), %esi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	jmp	.LBB96_83
.LBB96_65:                              # %sw.bb102
	movzbl	(%r15), %ecx
	addq	$-102, %rcx
	andq	%rax, %rcx
	cmpq	$17, %rcx
	ja	.LBB96_79
# BB#66:                                # %sw.bb102
	jmpq	*.LJTI96_2(,%rcx,8)
.LBB96_74:                              # %sw.bb113
	movabsq	$.L.str113, %rdi
	movq	$3, %rsi
	jmp	.LBB96_69
.LBB96_81:                              # %sw.bb131
	movq	8(%r15), %rax
	movzbl	(%r15), %edi
	movzbl	2(%rax), %esi
	xorq	%rdx, %rdx
.LBB96_82:                              # %if.end466
	movq	$1, %rcx
.LBB96_83:                              # %if.end466
	movq	%r14, %r8
	callq	put_condition_code
	jmp	.LBB96_144
.LBB96_44:                              # %sw.bb36
	movl	ix86_asm_dialect(%rip), %eax
	testq	%rax, %rax
	jne	.LBB96_144
	jmp	.LBB96_45
.LBB96_46:                              # %sw.bb41
	movl	ix86_asm_dialect(%rip), %eax
	testq	%rax, %rax
	jne	.LBB96_144
	jmp	.LBB96_47
.LBB96_40:                              # %sw.bb21
	movl	ix86_asm_dialect(%rip), %eax
	testq	%rax, %rax
	jne	.LBB96_144
# BB#41:                                # %if.then23
	movq	$119, %rdi
	jmp	.LBB96_29
.LBB96_52:                              # %if.end57
	movl	ix86_asm_dialect(%rip), %ecx
	cmpq	$1, %rcx
	je	.LBB96_144
.LBB96_53:                              # %if.end60
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %ecx
	cmpq	$15, %rcx
	jg	.LBB96_61
# BB#54:                                # %if.end60
	cmpq	$11, %rcx
	jg	.LBB96_60
# BB#55:                                # %if.end60
	cmpq	$2, %rcx
	je	.LBB96_45
# BB#56:                                # %if.end60
	cmpq	$4, %rcx
	jne	.LBB96_57
# BB#59:                                # %sw.bb66
	cmpq	$15, %rax
	jne	.LBB96_39
.LBB96_45:                              # %if.then38
	movq	$115, %rdi
	jmp	.LBB96_29
.LBB96_95:                              # %sw.bb238
	movabsq	$.L.str123, %rcx
	jmp	.LBB96_102
.LBB96_96:                              # %sw.bb239
	movabsq	$.L.str124, %rcx
	jmp	.LBB96_102
.LBB96_97:                              # %sw.bb240
	movabsq	$.L.str125, %rcx
	jmp	.LBB96_102
.LBB96_85:                              # %if.then148
	movabsq	$.L.str117, %rdi
	xorq	%rax, %rax
	callq	output_operand_lossage
	jmp	.LBB96_144
.LBB96_89:                              # %if.else201
	movabsq	$.L.str119, %rdi
	movq	$5, %rsi
	jmp	.LBB96_69
.LBB96_31:                              # %sw.bb2
	testq	%rax, %rax
	jne	.LBB96_36
# BB#32:                                # %if.then4
	movq	$42, %rdi
	movq	%r14, %rsi
	callq	putc
.LBB96_33:                              # %if.end15
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	print_operand
	jmp	.LBB96_144
.LBB96_61:                              # %if.end60
	cmpq	$16, %rcx
	je	.LBB96_47
	jmp	.LBB96_62
.LBB96_100:                             # %sw.default242
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.print_operand, %rdx
	movq	$6027, %rsi             # imm = 0x178B
	callq	fancy_abort
.LBB96_60:                              # %if.end60
	cmpq	$12, %rcx
	jne	.LBB96_62
.LBB96_47:                              # %if.then43
	movq	$116, %rdi
	jmp	.LBB96_29
.LBB96_67:                              # %sw.bb105
	movabsq	$.L.str109, %rdi
	jmp	.LBB96_68
.LBB96_76:                              # %sw.bb115
	movabsq	$.L.str114, %rdi
	movq	$3, %rsi
	jmp	.LBB96_69
.LBB96_77:                              # %sw.bb117
	movabsq	$.L.str115, %rdi
	movq	$3, %rsi
	jmp	.LBB96_69
.LBB96_71:                              # %sw.bb109
	movabsq	$.L.str111, %rdi
	jmp	.LBB96_68
.LBB96_70:                              # %sw.bb107
	movabsq	$.L.str110, %rdi
.LBB96_68:                              # %if.end466
	movq	$2, %rsi
.LBB96_69:                              # %if.end466
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	jmp	.LBB96_144
.LBB96_79:                              # %sw.default121
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.print_operand, %rdx
	movq	$5919, %rsi             # imm = 0x171F
	callq	fancy_abort
.LBB96_72:                              # %sw.bb111
	movabsq	$.L.str112, %rdi
	movq	$5, %rsi
	jmp	.LBB96_69
.LBB96_78:                              # %sw.bb119
	movabsq	$.L.str116, %rdi
	movq	$3, %rsi
	jmp	.LBB96_69
.LBB96_57:                              # %if.end60
	cmpq	$8, %rcx
	jne	.LBB96_62
# BB#58:                                # %sw.bb79
	movl	mode_class(,%rax,4), %ebx
	movq	$108, %rdi
	movq	%r14, %rsi
	callq	putc
	cmpq	$1, %rbx
	jne	.LBB96_144
.LBB96_39:                              # %if.then18
	movq	$108, %rdi
	jmp	.LBB96_29
.LBB96_36:                              # %if.else13
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.print_operand, %rcx
	movq	$5776, %rsi             # imm = 0x1690
	jmp	.LBB96_37
.LBB96_62:                              # %sw.default
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.print_operand, %rcx
	movq	$5861, %rsi             # imm = 0x16E5
.LBB96_37:                              # %if.else13
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp766:
	.size	print_operand, .Ltmp766-print_operand
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI96_0:
	.quad	.LBB96_3
	.quad	.LBB96_84
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_88
	.quad	.LBB96_2
	.quad	.LBB96_3
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_3
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_3
	.quad	.LBB96_2
	.quad	.LBB96_63
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_3
	.quad	.LBB96_2
	.quad	.LBB96_3
	.quad	.LBB96_48
.LJTI96_1:
	.quad	.LBB96_30
	.quad	.LBB96_42
	.quad	.LBB96_80
	.quad	.LBB96_65
	.quad	.LBB96_2
	.quad	.LBB96_81
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_38
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_144
	.quad	.LBB96_3
	.quad	.LBB96_38
	.quad	.LBB96_2
	.quad	.LBB96_44
	.quad	.LBB96_46
	.quad	.LBB96_2
	.quad	.LBB96_2
	.quad	.LBB96_40
	.quad	.LBB96_3
.LJTI96_2:
	.quad	.LBB96_74
	.quad	.LBB96_67
	.quad	.LBB96_76
	.quad	.LBB96_77
	.quad	.LBB96_71
	.quad	.LBB96_70
	.quad	.LBB96_79
	.quad	.LBB96_79
	.quad	.LBB96_79
	.quad	.LBB96_79
	.quad	.LBB96_72
	.quad	.LBB96_78
	.quad	.LBB96_67
	.quad	.LBB96_76
	.quad	.LBB96_77
	.quad	.LBB96_71
	.quad	.LBB96_70
	.quad	.LBB96_74
.LJTI96_3:
	.quad	.LBB96_102
	.quad	.LBB96_101
	.quad	.LBB96_100
	.quad	.LBB96_95
	.quad	.LBB96_100
	.quad	.LBB96_100
	.quad	.LBB96_100
	.quad	.LBB96_96
	.quad	.LBB96_100
	.quad	.LBB96_100
	.quad	.LBB96_100
	.quad	.LBB96_97

	.text
	.align	16, 0x90
	.type	put_condition_code,@function
put_condition_code:                     # @put_condition_code
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp772:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp773:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp774:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp775:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp776:
	.cfi_def_cfa_offset 48
.Ltmp777:
	.cfi_offset %rbx, -40
.Ltmp778:
	.cfi_offset %r12, -32
.Ltmp779:
	.cfi_offset %r14, -24
.Ltmp780:
	.cfi_offset %r15, -16
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rsi, %rbx
	movq	%rbx, %rax
	addq	$-57, %rax
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB97_1
# BB#2:                                 # %if.then
	leaq	-102(%rdi), %rsi
	andq	%r12, %rsi
	cmpq	$17, %rsi
	ja	.LBB97_9
# BB#3:                                 # %if.then
	xorq	%rax, %rax
	xorq	%rcx, %rcx
	jmpq	*.LJTI97_0(,%rsi,8)
.LBB97_6:                               # %sw.bb4.i
	movq	$1, %rcx
	movq	$119, %rdi
	jmp	.LBB97_12
.LBB97_1:
	movq	%rdi, %rax
	jmp	.LBB97_25
.LBB97_5:                               # %sw.bb3.i
	movq	$1, %rax
	movq	$114, %rdi
	jmp	.LBB97_11
.LBB97_4:                               # %sw.bb2.i
	movq	$1, %rax
	movq	$117, %rdi
	jmp	.LBB97_11
.LBB97_10:                              # %sw.bb1.i
	movq	$1, %rax
	movq	$118, %rdi
.LBB97_11:                              # %sw.epilog.i
	xorq	%rcx, %rcx
	jmp	.LBB97_12
.LBB97_7:                               # %sw.bb5.i
	movq	$1, %rcx
	movq	$104, %rdi
	jmp	.LBB97_12
.LBB97_8:                               # %sw.bb6.i
	movq	$1, %rcx
	movq	$105, %rdi
.LBB97_12:                              # %sw.epilog.i
	orq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB97_16
# BB#13:                                # %sw.epilog.i
	movl	target_flags(%rip), %eax
	andq	$16, %rax
	testq	%r12, %rax
	jne	.LBB97_14
.LBB97_16:                              # %if.end
	movq	$52, %rbx
	leaq	-104(%rdi), %rcx
	andq	%r12, %rcx
	cmpq	$15, %rcx
	ja	.LBB97_24
# BB#17:                                # %if.end
	movq	$109, %rax
	jmpq	*.LJTI97_1(,%rcx,8)
.LBB97_19:                              # %sw.bb2.i109
	movq	%rdi, %rax
	jmp	.LBB97_25
.LBB97_24:                              # %sw.default.i114
	xorq	%rax, %rax
.LBB97_25:                              # %if.end6
	testq	%r12, %rdx
	je	.LBB97_27
# BB#26:                                # %if.then7
	movq	%rax, %rdi
	callq	reverse_condition
.LBB97_27:                              # %if.end9
	addq	$-102, %rax
	andq	%r12, %rax
	cmpq	$11, %rax
	ja	.LBB97_69
# BB#28:                                # %if.end9
	movabsq	$.L.str388, %rdi
	jmpq	*.LJTI97_2(,%rax,8)
.LBB97_70:                              # %sw.bb10
	movabsq	$.L.str389, %rdi
	jmp	.LBB97_71
.LBB97_46:                              # %sw.bb39
	movabsq	$4294967294, %rax       # imm = 0xFFFFFFFE
	andq	%rax, %rbx
	cmpq	$54, %rbx
	jne	.LBB97_48
# BB#47:
	movabsq	$.L.str396, %rdi
	jmp	.LBB97_71
.LBB97_29:                              # %sw.bb11
	andq	%r12, %rbx
	cmpq	$55, %rbx
	ja	.LBB97_32
# BB#30:                                # %sw.bb11
	movq	$1, %rax
	movq	%rbx, %rcx
	shlq	%cl, %rax
	movabsq	$49539595901075456, %rcx # imm = 0xB0000000000000
	testq	%rcx, %rax
	je	.LBB97_32
# BB#31:
	movabsq	$.L.str390, %rdi
	jmp	.LBB97_71
.LBB97_56:                              # %sw.bb58
	andq	%r12, %rbx
	cmpq	$55, %rbx
	ja	.LBB97_59
# BB#57:                                # %sw.bb58
	movq	$1, %rax
	movq	%rbx, %rcx
	shlq	%cl, %rax
	movabsq	$49539595901075456, %rcx # imm = 0xB0000000000000
	testq	%rcx, %rax
	je	.LBB97_59
# BB#58:
	movabsq	$.L.str111, %rdi
	jmp	.LBB97_71
.LBB97_38:                              # %sw.bb23
	movabsq	$4294967294, %rax       # imm = 0xFFFFFFFE
	andq	%rax, %rbx
	cmpq	$54, %rbx
	jne	.LBB97_40
# BB#39:
	movabsq	$.L.str393, %rdi
	jmp	.LBB97_71
.LBB97_51:                              # %sw.bb52
	andq	%r12, %rbx
	cmpq	$52, %rbx
	jne	.LBB97_52
# BB#53:                                # %if.end55
	testq	%r12, %r15
	jne	.LBB97_54
# BB#55:                                # %if.end55
	movabsq	$.L.str399, %rdi
	jmp	.LBB97_71
.LBB97_33:                              # %sw.bb18
	andq	%r12, %rbx
	cmpq	$52, %rbx
	jne	.LBB97_34
# BB#35:                                # %if.end21
	testq	%r12, %r15
	jne	.LBB97_36
# BB#37:                                # %if.end21
	movabsq	$.L.str392, %rdi
	jmp	.LBB97_71
.LBB97_60:                              # %sw.bb66
	andq	%r12, %rbx
	cmpq	$52, %rbx
	jne	.LBB97_62
# BB#61:
	movabsq	$.L.str400, %rdi
	jmp	.LBB97_71
.LBB97_43:                              # %sw.bb35
	andq	%r12, %rbx
	cmpq	$52, %rbx
	jne	.LBB97_45
# BB#44:
	movabsq	$.L.str395, %rdi
	jmp	.LBB97_71
.LBB97_63:                              # %sw.bb70
	testq	%r12, %r15
	jne	.LBB97_64
# BB#65:                                # %sw.bb70
	movabsq	$.L.str402, %rdi
	jmp	.LBB97_71
.LBB97_66:                              # %sw.bb73
	testq	%r12, %r15
	jne	.LBB97_67
# BB#68:                                # %sw.bb73
	movabsq	$.L.str404, %rdi
	jmp	.LBB97_71
.LBB97_69:                              # %sw.default
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.put_condition_code, %rdx
	movq	$5625, %rsi             # imm = 0x15F9
	callq	fancy_abort
.LBB97_48:                              # %if.else44
	cmpq	$52, %rbx
	jne	.LBB97_50
# BB#49:
	movabsq	$.L.str397, %rdi
	jmp	.LBB97_71
.LBB97_40:                              # %if.else
	cmpq	$52, %rbx
	jne	.LBB97_42
# BB#41:
	movabsq	$.L.str394, %rdi
	jmp	.LBB97_71
.LBB97_54:
	movabsq	$.L.str398, %rdi
	jmp	.LBB97_71
.LBB97_36:
	movabsq	$.L.str391, %rdi
	jmp	.LBB97_71
.LBB97_64:
	movabsq	$.L.str401, %rdi
	jmp	.LBB97_71
.LBB97_67:
	movabsq	$.L.str403, %rdi
.LBB97_71:                              # %sw.epilog
	movq	%r14, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	fputs  # TAILCALL
.LBB97_9:                               # %sw.default.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.LBB97_18:                              # %sw.bb1.i108
	movq	$108, %rax
	jmp	.LBB97_25
.LBB97_20:                              # %sw.bb3.i110
	movq	$103, %rax
	jmp	.LBB97_25
.LBB97_22:                              # %sw.bb5.i112
	movq	$110, %rax
	jmp	.LBB97_25
.LBB97_21:                              # %sw.bb4.i111
	movq	$111, %rax
	jmp	.LBB97_25
.LBB97_23:                              # %sw.bb6.i113
	movq	$102, %rax
	jmp	.LBB97_25
.LBB97_32:                              # %if.then16
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.put_condition_code, %rdx
	movq	$5571, %rsi             # imm = 0x15C3
	callq	fancy_abort
.LBB97_59:                              # %if.then64
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.put_condition_code, %rdx
	movq	$5610, %rsi             # imm = 0x15EA
	callq	fancy_abort
.LBB97_14:                              # %if.then5
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.put_condition_code, %rcx
	movq	$5554, %rsi             # imm = 0x15B2
	jmp	.LBB97_15
.LBB97_52:                              # %if.then54
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.put_condition_code, %rcx
	movq	$5605, %rsi             # imm = 0x15E5
	jmp	.LBB97_15
.LBB97_34:                              # %if.then20
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.put_condition_code, %rcx
	movq	$5578, %rsi             # imm = 0x15CA
	jmp	.LBB97_15
.LBB97_62:                              # %if.then68
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.put_condition_code, %rcx
	movq	$5615, %rsi             # imm = 0x15EF
	jmp	.LBB97_15
.LBB97_45:                              # %if.then37
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.put_condition_code, %rcx
	movq	$5591, %rsi             # imm = 0x15D7
	jmp	.LBB97_15
.LBB97_50:                              # %if.else49
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.put_condition_code, %rcx
	movq	$5600, %rsi             # imm = 0x15E0
	jmp	.LBB97_15
.LBB97_42:                              # %if.else32
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.put_condition_code, %rcx
	movq	$5587, %rsi             # imm = 0x15D3
.LBB97_15:                              # %if.then5
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp781:
	.size	put_condition_code, .Ltmp781-put_condition_code
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI97_0:
	.quad	.LBB97_6
	.quad	.LBB97_5
	.quad	.LBB97_12
	.quad	.LBB97_12
	.quad	.LBB97_4
	.quad	.LBB97_10
	.quad	.LBB97_9
	.quad	.LBB97_9
	.quad	.LBB97_9
	.quad	.LBB97_9
	.quad	.LBB97_12
	.quad	.LBB97_12
	.quad	.LBB97_12
	.quad	.LBB97_7
	.quad	.LBB97_8
	.quad	.LBB97_12
	.quad	.LBB97_12
	.quad	.LBB97_12
.LJTI97_1:
	.quad	.LBB97_18
	.quad	.LBB97_25
	.quad	.LBB97_24
	.quad	.LBB97_24
	.quad	.LBB97_24
	.quad	.LBB97_24
	.quad	.LBB97_24
	.quad	.LBB97_24
	.quad	.LBB97_19
	.quad	.LBB97_19
	.quad	.LBB97_20
	.quad	.LBB97_24
	.quad	.LBB97_24
	.quad	.LBB97_22
	.quad	.LBB97_21
	.quad	.LBB97_23
.LJTI97_2:
	.quad	.LBB97_70
	.quad	.LBB97_71
	.quad	.LBB97_46
	.quad	.LBB97_29
	.quad	.LBB97_56
	.quad	.LBB97_38
	.quad	.LBB97_51
	.quad	.LBB97_33
	.quad	.LBB97_60
	.quad	.LBB97_43
	.quad	.LBB97_63
	.quad	.LBB97_66

	.text
	.globl	print_operand_address
	.align	16, 0x90
	.type	print_operand_address,@function
print_operand_address:                  # @print_operand_address
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp788:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp789:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp790:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp791:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp792:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp793:
	.cfi_def_cfa_offset 96
.Ltmp794:
	.cfi_offset %rbx, -48
.Ltmp795:
	.cfi_offset %r12, -40
.Ltmp796:
	.cfi_offset %r13, -32
.Ltmp797:
	.cfi_offset %r14, -24
.Ltmp798:
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	leaq	16(%rsp), %rsi
	movq	%rbx, %rdi
	callq	ix86_decompose_address
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB98_52
# BB#1:                                 # %if.end
	movq	16(%rsp), %r13
	movq	24(%rsp), %rcx
	movq	32(%rsp), %r14
	movq	%r13, %rax
	orq	%rcx, %rax
	je	.LBB98_2
# BB#12:                                # %if.else36
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movl	ix86_asm_dialect(%rip), %eax
	movq	40(%rsp), %r15
	testq	%rax, %rax
	je	.LBB98_13
# BB#27:                                # %if.else68
	movq	%r15, (%rsp)            # 8-byte Spill
	xorq	%rbx, %rbx
	testq	%r14, %r14
	je	.LBB98_39
# BB#28:                                # %if.then70
	movzbl	(%r14), %eax
	xorq	%rbx, %rbx
	cmpq	$58, %rax
	jne	.LBB98_32
# BB#29:                                # %land.lhs.true75
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$75, %rcx
	jne	.LBB98_32
# BB#30:                                # %land.lhs.true82
	movq	16(%rax), %r15
	movzbl	(%r15), %ecx
	cmpq	$54, %rcx
	jne	.LBB98_32
# BB#31:                                # %if.then93
	movq	8(%rax), %rdx
	movq	$58, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_fmt_e
	movq	%rax, %r14
	movq	%r15, %rbx
.LBB98_32:                              # %if.end107
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB98_34
# BB#33:                                # %if.then109
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	output_pic_addr_const
	jmp	.LBB98_39
.LBB98_2:                               # %if.then7
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	jne	.LBB98_6
# BB#3:                                 # %if.then9
	movl	ix86_asm_dialect(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB98_5
# BB#4:                                 # %if.then16
	movq	$37, %rdi
	movq	%r12, %rsi
	callq	putc
	movabsq	$.L.str131, %rdi
	movq	$3, %rsi
	movq	$1, %rdx
	movq	%r12, %rcx
	callq	fwrite
.LBB98_5:                               # %if.end20
	movq	8(%rbx), %rdx
	movabsq	$.L.str130, %rsi
	xorq	%rax, %rax
	movq	%r12, %rdi
	callq	fprintf
	jmp	.LBB98_9
.LBB98_6:                               # %if.else
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB98_8
# BB#7:                                 # %if.then23
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	output_pic_addr_const
	jmp	.LBB98_9
.LBB98_13:                              # %if.then39
	testq	%r14, %r14
	je	.LBB98_20
# BB#14:                                # %if.then41
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB98_16
# BB#15:                                # %if.then43
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	output_pic_addr_const
	jmp	.LBB98_20
.LBB98_8:                               # %if.else24
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	output_addr_const
.LBB98_9:                               # %if.end26
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	je	.LBB98_51
# BB#10:                                # %land.lhs.true31
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB98_51
# BB#11:                                # %if.then33
	movabsq	$.L.str132, %rdi
	movq	$6, %rsi
	movq	$1, %rdx
	movq	%r12, %rcx
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fwrite  # TAILCALL
.LBB98_51:                              # %if.end167
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB98_34:                              # %if.else110
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	jne	.LBB98_36
# BB#35:
	movq	%r14, %rbx
	jmp	.LBB98_39
.LBB98_16:                              # %if.else44
	movq	%r15, %rbx
	movzbl	(%r14), %eax
	cmpq	$67, %rax
	jne	.LBB98_18
# BB#17:                                # %if.then49
	movq	%r14, %rdi
	callq	output_asm_label
	jmp	.LBB98_19
.LBB98_36:                              # %if.else110
	cmpq	$67, %rax
	jne	.LBB98_38
# BB#37:                                # %if.then115
	movq	%r14, %rdi
	callq	output_asm_label
	jmp	.LBB98_39
.LBB98_18:                              # %if.else50
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	output_addr_const
.LBB98_19:                              # %if.end53
	movq	%rbx, %r15
.LBB98_20:                              # %if.end53
	movq	$40, %rdi
	movq	%r12, %rsi
	callq	putc
	testq	%r13, %r13
	je	.LBB98_22
# BB#21:                                # %if.then56
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	movq	%r12, %rdx
	callq	print_reg
.LBB98_22:                              # %if.end57
	movq	8(%rsp), %rbx           # 8-byte Reload
	testq	%rbx, %rbx
	je	.LBB98_25
# BB#23:                                # %if.then59
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r14
	andq	%r15, %r14
	movq	$44, %rdi
	movq	%r12, %rsi
	callq	putc
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	movq	%r12, %rdx
	callq	print_reg
	cmpq	$1, %r14
	je	.LBB98_25
# BB#24:                                # %if.then63
	movabsq	$.L.str133, %rsi
	xorq	%rax, %rax
	movq	%r12, %rdi
	movq	%r15, %rdx
	callq	fprintf
.LBB98_25:                              # %if.end66
	movq	$41, %rdi
	jmp	.LBB98_26
.LBB98_38:                              # %if.else122
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	output_addr_const
.LBB98_39:                              # %if.end126
	movq	$91, %rdi
	movq	%r12, %rsi
	callq	putc
	testq	%r13, %r13
	movq	8(%rsp), %r15           # 8-byte Reload
	je	.LBB98_45
# BB#40:                                # %if.then129
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	movq	%r12, %rdx
	callq	print_reg
	testq	%rbx, %rbx
	je	.LBB98_47
# BB#41:                                # %if.then131
	movq	8(%rbx), %rdx
	testq	%rdx, %rdx
	js	.LBB98_44
# BB#42:                                # %if.then137
	movq	$43, %rdi
	movq	%r12, %rsi
	callq	putc
	jmp	.LBB98_43
.LBB98_45:                              # %if.else145
	testq	%rbx, %rbx
	je	.LBB98_46
.LBB98_43:                              # %if.end139
	movq	8(%rbx), %rdx
.LBB98_44:                              # %if.end139
	movabsq	$.L.str130, %rsi
	xorq	%rax, %rax
	movq	%r12, %rdi
	callq	fprintf
	jmp	.LBB98_47
.LBB98_46:                              # %if.else152
	movq	$48, %rdi
	movq	%r12, %rsi
	callq	putc
.LBB98_47:                              # %if.end155
	testq	%r15, %r15
	movq	(%rsp), %r14            # 8-byte Reload
	je	.LBB98_50
# BB#48:                                # %if.then157
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %rbx
	andq	%r14, %rbx
	movq	$43, %rdi
	movq	%r12, %rsi
	callq	putc
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	movq	%r12, %rdx
	callq	print_reg
	cmpq	$1, %rbx
	je	.LBB98_50
# BB#49:                                # %if.then161
	movabsq	$.L.str134, %rsi
	xorq	%rax, %rax
	movq	%r12, %rdi
	movq	%r14, %rdx
	callq	fprintf
.LBB98_50:                              # %if.end164
	movq	$93, %rdi
.LBB98_26:                              # %if.end66
	movq	%r12, %rsi
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	putc  # TAILCALL
.LBB98_52:                              # %if.then
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.print_operand_address, %rcx
	movq	$6126, %rsi             # imm = 0x17EE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp799:
	.size	print_operand_address, .Ltmp799-print_operand_address
	.cfi_endproc

	.globl	split_di
	.align	16, 0x90
	.type	split_di,@function
split_di:                               # @split_di
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp806:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp807:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp808:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp809:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp810:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp811:
	.cfi_def_cfa_offset 64
.Ltmp812:
	.cfi_offset %rbx, -48
.Ltmp813:
	.cfi_offset %r12, -40
.Ltmp814:
	.cfi_offset %r13, -32
.Ltmp815:
	.cfi_offset %r14, -24
.Ltmp816:
	.cfi_offset %r15, -16
	movq	%rcx, %r14
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movq	%r12, (%rsp)            # 8-byte Spill
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rbx
	je	.LBB99_10
# BB#1:                                 # %while.body.lr.ph
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	decq	%rbx
	.align	16, 0x90
.LBB99_2:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r12,%rbx,8), %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB99_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	$4, %rsi
	xorq	%rdx, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%r13, %rdi
	callq	adjust_address_1
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%rax, (%rcx,%rbx,8)
	movq	$4, %rsi
	movq	$4, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%r13, %rdi
	callq	adjust_address_1
	movq	%rax, (%r14,%rbx,8)
	jmp	.LBB99_9
	.align	16, 0x90
.LBB99_4:                               # %if.else
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	%r15, %r12
	movq	%r14, %r15
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$5, %r14
	movq	$5, %rdx
	je	.LBB99_6
# BB#5:                                 # %if.else
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	%rax, %rdx
.LBB99_6:                               # %if.else
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	$4, %rdi
	xorq	%rcx, %rcx
	movq	%r13, %rsi
	callq	simplify_gen_subreg
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%rax, (%rcx,%rbx,8)
	movzbl	2(%r13), %eax
	testq	%rax, %rax
	je	.LBB99_8
# BB#7:                                 # %if.else
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	%rax, %r14
.LBB99_8:                               # %if.else
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	$4, %rdi
	movq	$4, %rcx
	movq	%r13, %rsi
	movq	%r14, %rdx
	callq	simplify_gen_subreg
	movq	%r15, %r14
	movq	%rax, (%r14,%rbx,8)
	movq	%r12, %r15
	movq	(%rsp), %r12            # 8-byte Reload
.LBB99_9:                               # %while.cond.backedge
                                        #   in Loop: Header=BB99_2 Depth=1
	testq	%r15, %rbx
	leaq	-1(%rbx), %rbx
	jne	.LBB99_2
.LBB99_10:                              # %while.end
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp817:
	.size	split_di, .Ltmp817-split_di
	.cfi_endproc

	.globl	split_ti
	.align	16, 0x90
	.type	split_ti,@function
split_ti:                               # @split_ti
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp824:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp825:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp826:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp827:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp828:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp829:
	.cfi_def_cfa_offset 64
.Ltmp830:
	.cfi_offset %rbx, -48
.Ltmp831:
	.cfi_offset %r12, -40
.Ltmp832:
	.cfi_offset %r13, -32
.Ltmp833:
	.cfi_offset %r14, -24
.Ltmp834:
	.cfi_offset %r15, -16
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rdx, %r15
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rbx
	je	.LBB100_6
# BB#1:                                 # %while.body.lr.ph
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	decq	%rbx
	.align	16, 0x90
.LBB100_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r12,%rbx,8), %r13
	movzbl	(%r13), %eax
	cmpq	$66, %rax
	jne	.LBB100_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB100_2 Depth=1
	movq	$5, %rsi
	xorq	%rdx, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%r13, %rdi
	callq	adjust_address_1
	movq	%rax, (%r15,%rbx,8)
	movq	$5, %rsi
	movq	$8, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%r13, %rdi
	callq	adjust_address_1
	jmp	.LBB100_5
	.align	16, 0x90
.LBB100_4:                              # %if.else
                                        #   in Loop: Header=BB100_2 Depth=1
	movq	$5, %rdi
	movq	$6, %rdx
	xorq	%rcx, %rcx
	movq	%r13, %rsi
	callq	simplify_gen_subreg
	movq	%rax, (%r15,%rbx,8)
	movq	$5, %rdi
	movq	$6, %rdx
	movq	$8, %rcx
	movq	%r13, %rsi
	callq	simplify_gen_subreg
.LBB100_5:                              # %while.cond.backedge
                                        #   in Loop: Header=BB100_2 Depth=1
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%rax, (%rcx,%rbx,8)
	testq	%r14, %rbx
	leaq	-1(%rbx), %rbx
	jne	.LBB100_2
.LBB100_6:                              # %while.end
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp835:
	.size	split_ti, .Ltmp835-split_ti
	.cfi_endproc

	.globl	output_387_binary_op
	.align	16, 0x90
	.type	output_387_binary_op,@function
output_387_binary_op:                   # @output_387_binary_op
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp841:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp842:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp843:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp844:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp845:
	.cfi_def_cfa_offset 48
.Ltmp846:
	.cfi_offset %rbx, -40
.Ltmp847:
	.cfi_offset %r12, -32
.Ltmp848:
	.cfi_offset %r14, -24
.Ltmp849:
	.cfi_offset %r15, -16
	movq	%rsi, %r12
	movq	(%r12), %rdx
	movzbl	(%rdx), %eax
	movq	%rdi, %r14
	xorq	%rcx, %rcx
	cmpq	$61, %rax
	movabsq	$0, %r9
	jne	.LBB101_3
# BB#1:                                 # %land.rhs
	movl	8(%rdx), %edx
	leaq	-21(%rdx), %rax
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rax
	cmpq	$8, %rax
	movq	$1, %r9
	jb	.LBB101_3
# BB#2:                                 # %lor.rhs
	addq	$-45, %rdx
	andq	%rsi, %rdx
	cmpq	$8, %rdx
	sbbq	%r9, %r9
	andq	$1, %r9
.LBB101_3:                              # %land.end20
	movq	8(%r12), %rsi
	movl	(%rsi), %edx
	movq	%rdx, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	cmpq	$61, %rdi
	jne	.LBB101_6
# BB#4:                                 # %land.rhs25
	movl	8(%rsi), %esi
	leaq	-21(%rsi), %rcx
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	$8, %rcx
	movq	$1, %rcx
	jb	.LBB101_6
# BB#5:                                 # %lor.rhs37
	addq	$-45, %rsi
	andq	%rdi, %rsi
	cmpq	$8, %rsi
	sbbq	%rcx, %rcx
	andq	$1, %rcx
.LBB101_6:                              # %land.end52
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rsi
	andq	$65535, %rsi            # imm = 0xFFFF
	xorq	%rdi, %rdi
	cmpq	$61, %rsi
	jne	.LBB101_9
# BB#7:                                 # %land.rhs58
	movl	8(%rbx), %ebx
	leaq	-21(%rbx), %rsi
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rsi
	cmpq	$8, %rsi
	movq	$1, %rdi
	jb	.LBB101_9
# BB#8:                                 # %lor.rhs70
	addq	$-45, %rbx
	andq	%r8, %rbx
	cmpq	$8, %rbx
	sbbq	%rdi, %rdi
	andq	$1, %rdi
.LBB101_9:                              # %land.end85
	movq	24(%r12), %rsi
	movzbl	(%rsi), %ebx
	addq	$-75, %rbx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rbx
	cmpq	$4, %rbx
	ja	.LBB101_78
# BB#10:                                # %land.end85
	orq	%rcx, %r9
	orq	%rdi, %r9
	jmpq	*.LJTI101_0(,%rbx,8)
.LBB101_11:                             # %sw.bb
	movq	$14, %rcx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$1, %rcx
	movabsq	$.L.str137, %rdx
	jne	.LBB101_13
# BB#12:
	movabsq	$.L.str135, %rsi
	jmp	.LBB101_31
.LBB101_16:                             # %sw.bb103
	movq	$14, %rcx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$1, %rcx
	movabsq	$.L.str140, %rdx
	jne	.LBB101_18
# BB#17:
	movabsq	$.L.str138, %rsi
	jmp	.LBB101_31
.LBB101_21:                             # %sw.bb122
	movq	$14, %rcx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$1, %rcx
	movabsq	$.L.str143, %rdx
	jne	.LBB101_23
# BB#22:
	movabsq	$.L.str141, %rsi
	jmp	.LBB101_31
.LBB101_26:                             # %sw.bb141
	movq	$14, %rcx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$1, %rcx
	movabsq	$.L.str146, %rdx
	jne	.LBB101_28
# BB#27:
	movabsq	$.L.str144, %rsi
	jmp	.LBB101_31
.LBB101_13:                             # %lor.lhs.false
	movq	$14, %rcx
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB101_15
# BB#14:
	movabsq	$.L.str135, %rsi
	jmp	.LBB101_31
.LBB101_18:                             # %lor.lhs.false111
	movq	$14, %rcx
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB101_20
# BB#19:
	movabsq	$.L.str138, %rsi
	jmp	.LBB101_31
.LBB101_23:                             # %lor.lhs.false130
	movq	$14, %rcx
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB101_25
# BB#24:
	movabsq	$.L.str141, %rsi
	jmp	.LBB101_31
.LBB101_28:                             # %lor.lhs.false149
	movq	$14, %rcx
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB101_30
# BB#29:
	movabsq	$.L.str144, %rsi
	jmp	.LBB101_31
.LBB101_78:                             # %sw.default
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.output_387_binary_op, %rdx
	movq	$6383, %rsi             # imm = 0x18EF
	callq	fancy_abort
.LBB101_15:                             # %select.mid
	movabsq	$.L.str136, %rsi
	jmp	.LBB101_31
.LBB101_20:                             # %select.mid2
	movabsq	$.L.str139, %rsi
	jmp	.LBB101_31
.LBB101_25:                             # %select.mid4
	movabsq	$.L.str142, %rsi
	jmp	.LBB101_31
.LBB101_30:                             # %select.mid6
	movabsq	$.L.str145, %rsi
.LBB101_31:                             # %sw.epilog
	testq	%r9, %r9
	je	.LBB101_35
# BB#32:                                # %if.then160
	movl	(%rdx), %eax
	movl	%eax, output_387_binary_op.buf(%rip)
	movq	(%r12), %rax
	movl	(%rax), %ebx
	movabsq	$output_387_binary_op.buf, %rdi
	andq	$16711680, %rbx         # imm = 0xFF0000
	callq	strlen
	cmpq	$983040, %rbx           # imm = 0xF0000
	leaq	output_387_binary_op.buf(%rax), %rax
	jne	.LBB101_34
# BB#33:                                # %if.then166
	xorq	%rcx, %rcx
	movb	%cl, 18(%rax)
	movq	$32050, %rcx            # imm = 0x7D32
	movw	%cx, 16(%rax)
	movabsq	$2675186763957022757, %rcx # imm = 0x25202C30257C3025
	movq	%rcx, 8(%rax)
	movabsq	$2318283044748358515, %rcx # imm = 0x202C32257B097373
	movq	%rcx, (%rax)
	jmp	.LBB101_77
.LBB101_35:                             # %if.end171
	movabsq	$output_387_binary_op.buf, %rdi
	callq	strcpy
	movq	24(%r12), %rax
	movzbl	(%rax), %eax
	addq	$-75, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	ja	.LBB101_74
# BB#36:                                # %if.end171
	jmpq	*.LJTI101_1(,%rax,8)
.LBB101_37:                             # %sw.bb176
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB101_40
# BB#38:                                # %land.lhs.true181
	movq	(%r12), %rdx
	movl	8(%rdx), %edx
	movl	8(%rax), %esi
	cmpq	%rsi, %rdx
	jne	.LBB101_40
# BB#39:                                # %if.then191
	movq	8(%r12), %rdx
	movq	%rdx, 16(%r12)
	movq	%rax, 8(%r12)
	movl	(%rdx), %ecx
	movq	%rdx, %rax
.LBB101_40:                             # %if.end196
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB101_42
# BB#41:
	movabsq	$.L.str149, %rsi
	jmp	.LBB101_76
.LBB101_34:                             # %if.else168
	xorq	%rcx, %rcx
	movb	%cl, 18(%rax)
	movq	$32050, %rcx            # imm = 0x7D32
	movw	%cx, 16(%rax)
	movabsq	$2675186763957022757, %rcx # imm = 0x25202C30257C3025
	movq	%rcx, 8(%rax)
	movabsq	$2318283044748354675, %rcx # imm = 0x202C32257B096473
	movq	%rcx, (%rax)
	jmp	.LBB101_77
.LBB101_50:                             # %sw.bb237
	movq	8(%r12), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB101_52
# BB#51:
	movabsq	$.L.str154, %rsi
	jmp	.LBB101_76
.LBB101_42:                             # %if.end202
	movl	8(%rax), %edx
	movq	$1, %rsi
	movq	%r14, %rdi
	callq	find_regno_note
	movq	(%r12), %rcx
	movzbl	(%rcx), %edx
	testq	%rax, %rax
	je	.LBB101_46
# BB#43:                                # %if.then209
	cmpq	$61, %rdx
	jne	.LBB101_75
# BB#44:                                # %land.lhs.true214
	movl	8(%rcx), %eax
	cmpq	$8, %rax
	jne	.LBB101_75
# BB#45:
	movabsq	$.L.str150, %rsi
	jmp	.LBB101_76
.LBB101_52:                             # %if.end243
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	jne	.LBB101_54
# BB#53:
	movabsq	$.L.str149, %rsi
	jmp	.LBB101_76
.LBB101_54:                             # %if.end249
	movl	8(%rax), %edx
	movq	$1, %rsi
	movq	%r14, %rdi
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB101_59
# BB#55:                                # %if.then256
	movq	(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB101_58
# BB#56:                                # %land.lhs.true261
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jne	.LBB101_58
# BB#57:
	movabsq	$.L.str155, %rsi
	jmp	.LBB101_76
.LBB101_75:                             # %if.else221
	movabsq	$.L.str151, %rsi
	jmp	.LBB101_76
.LBB101_46:                             # %if.end223
	cmpq	$61, %rdx
	jne	.LBB101_49
# BB#47:                                # %land.lhs.true228
	movl	8(%rcx), %eax
	cmpq	$8, %rax
	jne	.LBB101_49
# BB#48:
	movabsq	$.L.str152, %rsi
	jmp	.LBB101_76
.LBB101_49:                             # %if.else235
	movabsq	$.L.str153, %rsi
	jmp	.LBB101_76
.LBB101_74:                             # %sw.default331
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.output_387_binary_op, %rdx
	movq	$6518, %rsi             # imm = 0x1976
	callq	fancy_abort
.LBB101_58:                             # %if.else268
	movabsq	$.L.str156, %rsi
	jmp	.LBB101_76
.LBB101_59:                             # %if.end270
	movq	8(%r12), %rax
	movl	8(%rax), %edx
	movq	$1, %rsi
	movq	%r14, %rdi
	callq	find_regno_note
	movq	(%r12), %rcx
	movzbl	(%rcx), %edx
	testq	%rax, %rax
	je	.LBB101_64
# BB#60:                                # %if.then277
	cmpq	$61, %rdx
	jne	.LBB101_63
# BB#61:                                # %land.lhs.true282
	movl	8(%rcx), %eax
	cmpq	$8, %rax
	jne	.LBB101_63
# BB#62:
	movabsq	$.L.str157, %rsi
	jmp	.LBB101_76
.LBB101_63:                             # %if.else289
	movabsq	$.L.str158, %rsi
	jmp	.LBB101_76
.LBB101_64:                             # %if.end291
	cmpq	$61, %rdx
	jne	.LBB101_70
# BB#65:                                # %land.lhs.true296
	movl	8(%rcx), %eax
	cmpq	$8, %rax
	jne	.LBB101_70
# BB#66:                                # %if.then302
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB101_69
# BB#67:                                # %land.lhs.true307
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jne	.LBB101_69
# BB#68:
	movabsq	$.L.str152, %rsi
	jmp	.LBB101_76
.LBB101_70:                             # %if.else316
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB101_73
# BB#71:                                # %land.lhs.true321
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jne	.LBB101_73
# BB#72:
	movabsq	$.L.str160, %rsi
	jmp	.LBB101_76
.LBB101_73:                             # %if.else328
	movabsq	$.L.str161, %rsi
	jmp	.LBB101_76
.LBB101_69:                             # %if.else314
	movabsq	$.L.str159, %rsi
.LBB101_76:                             # %sw.epilog332
	movabsq	$output_387_binary_op.buf, %rdi
	callq	strcat
.LBB101_77:                             # %return
	movabsq	$output_387_binary_op.buf, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp850:
	.size	output_387_binary_op, .Ltmp850-output_387_binary_op
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI101_0:
	.quad	.LBB101_11
	.quad	.LBB101_16
	.quad	.LBB101_78
	.quad	.LBB101_21
	.quad	.LBB101_26
.LJTI101_1:
	.quad	.LBB101_37
	.quad	.LBB101_50
	.quad	.LBB101_74
	.quad	.LBB101_37
	.quad	.LBB101_50

	.text
	.globl	emit_i387_cw_initialization
	.align	16, 0x90
	.type	emit_i387_cw_initialization,@function
emit_i387_cw_initialization:            # @emit_i387_cw_initialization
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp855:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp856:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp857:
	.cfi_def_cfa_offset 32
.Ltmp858:
	.cfi_offset %rbx, -32
.Ltmp859:
	.cfi_offset %r14, -24
.Ltmp860:
	.cfi_offset %r15, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	$3, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r15
	movq	%rbx, %rdi
	callq	gen_x86_fnstcw_1
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	emit_move_insn
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	je	.LBB102_4
# BB#1:                                 # %entry
	movl	optimize_size(%rip), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB102_4
# BB#2:                                 # %land.lhs.true5
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB102_3
.LBB102_4:                              # %if.else
	xorq	%rdi, %rdi
	movq	$3072, %rsi             # imm = 0xC00
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	gen_iorhi3
	jmp	.LBB102_5
.LBB102_3:                              # %if.then
	xorq	%rdi, %rdi
	movq	$12, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	gen_movsi_insv_1
.LBB102_5:                              # %if.end
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rdi
	movq	%r15, %rsi
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	emit_move_insn  # TAILCALL
.Ltmp861:
	.size	emit_i387_cw_initialization, .Ltmp861-emit_i387_cw_initialization
	.cfi_endproc

	.globl	output_fix_trunc
	.align	16, 0x90
	.type	output_fix_trunc,@function
output_fix_trunc:                       # @output_fix_trunc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp866:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp867:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp868:
	.cfi_def_cfa_offset 32
.Ltmp869:
	.cfi_offset %rbx, -32
.Ltmp870:
	.cfi_offset %r14, -24
.Ltmp871:
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	$1, %rsi
	movq	$8, %rdx
	callq	find_regno_note
	movq	(%r15), %rcx
	movl	(%rcx), %ebx
	movq	%rax, %r14
	andq	$16711680, %rbx         # imm = 0xFF0000
	cmpq	$327680, %rbx           # imm = 0x50000
	je	.LBB103_1
# BB#2:                                 # %entry
	movabsq	$1, %rax
	jmp	.LBB103_3
.LBB103_1:
	movabsq	$0, %rax
.LBB103_3:                              # %entry
	testq	%r14, %r14
	jne	.LBB103_6
# BB#4:                                 # %entry
	testq	%rax, %rax
	jne	.LBB103_6
# BB#5:                                 # %if.then
	movabsq	$.L.str162, %rdi
	movq	%r15, %rsi
	callq	output_asm_insn
.LBB103_6:                              # %if.end
	movq	8(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB103_8
# BB#7:                                 # %land.lhs.true9
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jne	.LBB103_8
# BB#10:                                # %if.end15
	movq	(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB103_11
# BB#12:                                # %if.end22
	movabsq	$.L.str163, %rdi
	movq	%r15, %rsi
	callq	output_asm_insn
	testq	%r14, %r14
	jne	.LBB103_14
# BB#13:                                # %if.end22
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rbx
	cmpq	$327680, %rbx           # imm = 0x50000
	je	.LBB103_14
# BB#15:                                # %if.else
	movabsq	$.L.str165, %rdi
	jmp	.LBB103_16
.LBB103_14:                             # %if.then25
	movabsq	$.L.str164, %rdi
.LBB103_16:                             # %if.end26
	movq	%r15, %rsi
	callq	output_asm_insn
	movabsq	$.L.str166, %rdi
	movq	%r15, %rsi
	callq	output_asm_insn
	movabsq	$.L.str, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB103_8:                              # %if.then14
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.output_fix_trunc, %rcx
	movq	$6563, %rsi             # imm = 0x19A3
	jmp	.LBB103_9
.LBB103_11:                             # %if.then21
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.output_fix_trunc, %rcx
	movq	$6566, %rsi             # imm = 0x19A6
.LBB103_9:                              # %if.then14
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp872:
	.size	output_fix_trunc, .Ltmp872-output_fix_trunc
	.cfi_endproc

	.globl	output_fp_compare
	.align	16, 0x90
	.type	output_fp_compare,@function
output_fp_compare:                      # @output_fp_compare
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp879:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp880:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp881:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp882:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp883:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp884:
	.cfi_def_cfa_offset 64
.Ltmp885:
	.cfi_offset %rbx, -48
.Ltmp886:
	.cfi_offset %r12, -40
.Ltmp887:
	.cfi_offset %r13, -32
.Ltmp888:
	.cfi_offset %r14, -24
.Ltmp889:
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	(%r15), %r8
	movl	(%r8), %esi
	movq	%rcx, %rbx
	movq	%rdx, %r13
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%r15), %rax
	movq	%rsi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	xorq	%rdx, %rdx
	cmpq	$61, %rcx
	movabsq	$0, %rcx
	jne	.LBB104_3
# BB#1:                                 # %land.rhs
	movl	8(%r8), %edi
	leaq	-21(%rdi), %rcx
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	andq	%r9, %rcx
	cmpq	$8, %rcx
	movq	$1, %rcx
	jb	.LBB104_3
# BB#2:                                 # %lor.rhs
	addq	$-45, %rdi
	andq	%r9, %rdi
	cmpq	$8, %rdi
	sbbq	%rcx, %rcx
	andq	$1, %rcx
.LBB104_3:                              # %land.end22
	movzbl	(%rax), %edi
	cmpq	$61, %rdi
	jne	.LBB104_6
# BB#4:                                 # %land.rhs27
	movl	8(%rax), %edi
	leaq	-21(%rdi), %rdx
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	andq	%r9, %rdx
	cmpq	$8, %rdx
	movq	$1, %rdx
	jb	.LBB104_6
# BB#5:                                 # %lor.rhs39
	addq	$-45, %rdi
	andq	%r9, %rdi
	cmpq	$8, %rdi
	sbbq	%rdx, %rdx
	andq	$1, %rdx
.LBB104_6:                              # %land.end54
	orq	%rdx, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%r13, %r14
	andq	%rdx, %r14
	cmpq	$2, %r14
	jne	.LBB104_7
# BB#8:                                 # %if.then
	movq	16(%r15), %r12
	jmp	.LBB104_9
.LBB104_7:
	movq	%rax, %r12
	movq	%r8, %rax
.LBB104_9:                              # %if.end
	testq	%rcx, %rcx
	je	.LBB104_17
# BB#10:                                # %if.then58
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$983040, %rsi           # imm = 0xF0000
	jne	.LBB104_14
# BB#11:                                # %if.then63
	testq	%rdx, %rbx
	jne	.LBB104_12
# BB#13:                                # %if.then63
	movabsq	$.L.str168, %rax
	jmp	.LBB104_50
.LBB104_17:                             # %if.end70
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB104_19
# BB#18:                                # %land.lhs.true74
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jne	.LBB104_19
# BB#21:                                # %if.end80
	movq	$1, %rsi
	movq	$8, %rdx
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB104_22
# BB#23:                                # %if.end80
	movabsq	$1, %rsi
	jmp	.LBB104_24
.LBB104_14:                             # %if.else66
	testq	%rdx, %rbx
	jne	.LBB104_15
# BB#16:                                # %if.else66
	movabsq	$.L.str170, %rax
	jmp	.LBB104_50
.LBB104_22:
	movabsq	$0, %rsi
.LBB104_24:                             # %if.end80
	movzbl	(%r12), %ecx
	cmpq	$61, %rcx
	jne	.LBB104_42
# BB#25:                                # %land.lhs.true86
	movl	8(%r12), %edx
	cmpq	$8, %rdx
	jb	.LBB104_42
# BB#26:                                # %land.lhs.true86
	cmpq	$15, %rdx
	ja	.LBB104_42
# BB#27:                                # %land.lhs.true86
	testq	%rax, %rax
	je	.LBB104_42
# BB#28:                                # %land.lhs.true100
	movq	%rsi, (%rsp)            # 8-byte Spill
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	find_regno_note
	movq	(%rsp), %rsi            # 8-byte Reload
	testq	%rax, %rax
	je	.LBB104_42
# BB#29:                                # %land.lhs.true106
	movl	8(%r12), %eax
	cmpq	$8, %rax
	jne	.LBB104_30
.LBB104_42:                             # %if.else131
	movq	8(%r15), %rax
	movzbl	2(%rax), %eax
	movl	mode_class(,%rax,4), %eax
	movq	$3, %rcx
	shlq	%cl, %r13
	cmpq	$1, %rax
	jne	.LBB104_43
# BB#44:                                # %if.else131
	movabsq	$1, %rax
	jmp	.LBB104_45
.LBB104_43:
	movabsq	$0, %rax
.LBB104_45:                             # %if.else131
	movq	$2, %rcx
	shlq	%cl, %rax
	addq	%rbx, %rbx
	orq	%r13, %rbx
	orq	%rsi, %rbx
	orq	%rax, %rbx
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$24, %rax
	jge	.LBB104_46
# BB#47:                                # %if.end147
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	$12644544, %rax         # imm = 0xC0F0C0
	movq	%rbx, %rcx
	shrq	%cl, %rax
	testq	$1, %rax
	jne	.LBB104_48
# BB#49:                                # %if.end153
	movq	output_fp_compare.alt(,%rbx,8), %rax
	jmp	.LBB104_50
.LBB104_12:
	movabsq	$.L.str167, %rax
	jmp	.LBB104_50
.LBB104_15:
	movabsq	$.L.str169, %rax
.LBB104_50:                             # %return
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB104_30:                             # %if.then112
	cmpq	$1, %r14
	jne	.LBB104_35
# BB#31:                                # %if.then115
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rbx
	je	.LBB104_34
# BB#32:                                # %if.then117
	movabsq	$.L.str171, %rdi
	jmp	.LBB104_33
.LBB104_35:                             # %if.else120
	cmpq	$2, %r14
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	jne	.LBB104_39
# BB#36:                                # %if.then123
	testq	%rax, %rbx
	jne	.LBB104_37
# BB#38:                                # %if.then123
	movabsq	$.L.str175, %rax
	jmp	.LBB104_50
.LBB104_39:                             # %if.else127
	testq	%rax, %rbx
	jne	.LBB104_40
# BB#41:                                # %if.else127
	movabsq	$.L.str177, %rax
	jmp	.LBB104_50
.LBB104_34:                             # %if.else118
	movabsq	$.L.str172, %rdi
.LBB104_33:                             # %return
	movq	%r15, %rsi
	callq	output_asm_insn
	movabsq	$.L.str173, %rax
	jmp	.LBB104_50
.LBB104_37:
	movabsq	$.L.str174, %rax
	jmp	.LBB104_50
.LBB104_40:
	movabsq	$.L.str176, %rax
	jmp	.LBB104_50
.LBB104_19:                             # %if.then79
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.output_fp_compare, %rcx
	movq	$6613, %rsi             # imm = 0x19D5
	jmp	.LBB104_20
.LBB104_46:                             # %if.then146
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.output_fp_compare, %rcx
	movq	$6700, %rsi             # imm = 0x1A2C
	jmp	.LBB104_20
.LBB104_48:                             # %if.then152
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.output_fp_compare, %rcx
	movq	$6703, %rsi             # imm = 0x1A2F
.LBB104_20:                             # %if.then79
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp890:
	.size	output_fp_compare, .Ltmp890-output_fp_compare
	.cfi_endproc

	.globl	ix86_output_addr_vec_elt
	.align	16, 0x90
	.type	ix86_output_addr_vec_elt,@function
ix86_output_addr_vec_elt:               # @ix86_output_addr_vec_elt
	.cfi_startproc
# BB#0:                                 # %entry
	movl	target_flags(%rip), %eax
	movq	%rsi, %r8
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	jne	.LBB105_1
# BB#2:                                 # %entry
	movabsq	$.L.str3, %rdx
	jmp	.LBB105_3
.LBB105_1:
	movabsq	$.L.str4, %rdx
.LBB105_3:                              # %entry
	movabsq	$.L.str192, %rsi
	movabsq	$.L.str193, %rcx
	xorq	%rax, %rax
	jmp	fprintf  # TAILCALL
.Ltmp891:
	.size	ix86_output_addr_vec_elt, .Ltmp891-ix86_output_addr_vec_elt
	.cfi_endproc

	.globl	ix86_output_addr_diff_elt
	.align	16, 0x90
	.type	ix86_output_addr_diff_elt,@function
ix86_output_addr_diff_elt:              # @ix86_output_addr_diff_elt
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp893:
	.cfi_def_cfa_offset 16
	movzbl	target_flags+3(%rip), %eax
	movq	%rsi, %r8
	testq	$2, %rax
	je	.LBB106_2
# BB#1:                                 # %if.then
	movabsq	$.L.str194, %rsi
	movabsq	$.L.str3, %r9
	movabsq	$.L.str193, %rcx
	xorq	%rax, %rax
	movq	%rdx, (%rsp)
	movq	%r9, %rdx
	movq	%rcx, %r9
	callq	fprintf
	popq	%rax
	retq
.LBB106_2:                              # %if.else
	movabsq	$.L.str195, %rsi
	movabsq	$.L.str3, %rdx
	movabsq	$.L.str193, %rcx
	xorq	%rax, %rax
	popq	%r9
	jmp	asm_fprintf  # TAILCALL
.Ltmp894:
	.size	ix86_output_addr_diff_elt, .Ltmp894-ix86_output_addr_diff_elt
	.cfi_endproc

	.globl	ix86_expand_clear
	.align	16, 0x90
	.type	ix86_expand_clear,@function
ix86_expand_clear:                      # @ix86_expand_clear
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp897:
	.cfi_def_cfa_offset 16
.Ltmp898:
	.cfi_offset %rbx, -16
	movl	reload_completed(%rip), %ecx
	movq	%rdi, %rax
	testq	%rcx, %rcx
	je	.LBB107_8
# BB#1:                                 # %if.end
	movzbl	2(%rax), %ecx
	movzbl	mode_size(%rcx), %ecx
	cmpq	$3, %rcx
	ja	.LBB107_3
# BB#2:                                 # %if.then2
	movl	8(%rax), %esi
	movq	$4, %rdi
	callq	gen_rtx_REG
.LBB107_3:                              # %if.end4
	movq	const_int_rtx+512(%rip), %rcx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movl	reload_completed(%rip), %ecx
	movq	%rax, %rbx
	testq	%rcx, %rcx
	je	.LBB107_7
# BB#4:                                 # %land.lhs.true
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB107_6
# BB#5:                                 # %land.lhs.true
	movl	optimize_size(%rip), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB107_7
.LBB107_6:                              # %if.then9
	movq	$52, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %rcx
	movq	$2, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	movq	%rcx, %rdx
	callq	gen_rtvec
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movq	%rax, %rbx
.LBB107_7:                              # %if.end15
	movq	%rbx, %rdi
	popq	%rbx
	jmp	emit_insn  # TAILCALL
.LBB107_8:                              # %if.then
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_clear, %rcx
	movq	$6754, %rsi             # imm = 0x1A62
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp899:
	.size	ix86_expand_clear, .Ltmp899-ix86_expand_clear
	.cfi_endproc

	.globl	ix86_expand_move
	.align	16, 0x90
	.type	ix86_expand_move,@function
ix86_expand_move:                       # @ix86_expand_move
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp906:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp907:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp908:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp909:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp910:
	.cfi_def_cfa_offset 48
.Ltmp911:
	.cfi_offset %rbx, -48
.Ltmp912:
	.cfi_offset %r12, -40
.Ltmp913:
	.cfi_offset %r13, -32
.Ltmp914:
	.cfi_offset %r14, -24
.Ltmp915:
	.cfi_offset %r15, -16
	movl	reload_in_progress(%rip), %eax
	movq	%rsi, %rbx
	movq	%rdi, %r14
	testq	%rax, %rax
	movq	$1, %r15
	jne	.LBB108_4
# BB#1:                                 # %lor.rhs
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	je	.LBB108_2
# BB#3:                                 # %lor.rhs
	movabsq	$1, %r15
	jmp	.LBB108_4
.LBB108_2:
	movabsq	$0, %r15
.LBB108_4:                              # %lor.end
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB108_13
# BB#5:                                 # %land.lhs.true
	movl	target_flags(%rip), %edx
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$4, %rdx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%r14, %rcx
	andq	%rax, %rcx
	cmpq	%rcx, %rdx
	jne	.LBB108_13
# BB#6:                                 # %land.lhs.true4
	movq	8(%rbx), %rdx
	movzbl	(%rdx), %ecx
	leaq	-67(%rcx), %rsi
	andq	%rax, %rsi
	cmpq	$2, %rsi
	jb	.LBB108_21
# BB#7:                                 # %land.lhs.true4
	cmpq	$58, %rcx
	jne	.LBB108_13
# BB#8:                                 # %sw.bb1.i
	movq	8(%rdx), %rcx
	movzbl	(%rcx), %esi
	leaq	-67(%rsi), %rdi
	andq	%rax, %rdi
	cmpq	$2, %rdi
	jb	.LBB108_21
# BB#9:                                 # %sw.bb1.i
	cmpq	$75, %rsi
	jne	.LBB108_10
# BB#16:                                # %lor.lhs.false27.i
	movq	16(%rcx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$54, %rsi
	jne	.LBB108_13
# BB#17:                                # %if.end35.i
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %esi
	leaq	-67(%rsi), %rdi
	andq	%rax, %rdi
	cmpq	$2, %rdi
	jb	.LBB108_21
# BB#18:                                # %if.end35.i
	cmpq	$42, %rsi
	jne	.LBB108_13
# BB#19:                                # %lor.lhs.false51.i
	movl	16(%rcx), %esi
	cmpq	$7, %rsi
	jne	.LBB108_13
# BB#20:                                # %symbolic_operand.exit
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %ecx
	addq	$-67, %rcx
	andq	%rax, %rcx
	cmpq	$1, %rcx
	ja	.LBB108_13
	jmp	.LBB108_21
.LBB108_10:                             # %sw.bb1.i
	cmpq	$42, %rsi
	jne	.LBB108_13
# BB#11:                                # %land.lhs.true.i
	movl	16(%rcx), %ecx
	cmpq	$15, %rcx
	ja	.LBB108_13
# BB#12:                                # %land.lhs.true.i
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$32960, %rax            # imm = 0x80C0
	je	.LBB108_13
.LBB108_21:                             # %if.then
	movq	(%rbx), %rsi
	movzbl	(%rsi), %eax
	cmpq	$61, %rax
	je	.LBB108_25
# BB#22:                                # %if.then
	movq	%r14, %rdi
	cmpq	$66, %rax
	jne	.LBB108_24
# BB#23:                                # %if.then11
	movq	%rdx, %rsi
	callq	force_reg
	jmp	.LBB108_82
.LBB108_13:                             # %if.else35
	movq	(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB108_32
# BB#14:                                # %land.lhs.true40
	movzbl	target_flags+3(%rip), %edx
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %eax
	testq	$2, %rdx
	je	.LBB108_27
# BB#15:                                # %cond.true
	leaq	7(%rax), %rcx
	andq	$504, %rcx              # imm = 0x1F8
	jmp	.LBB108_28
.LBB108_27:                             # %cond.false
	leaq	1(%rax), %rcx
	andq	$510, %rcx              # imm = 0x1FE
.LBB108_28:                             # %cond.end
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	andq	%r12, %rcx
	cmpq	%rax, %rcx
	jne	.LBB108_30
# BB#29:                                # %lor.lhs.false
	movq	%r14, %rsi
	callq	push_operand
	testq	%r12, %rax
	jne	.LBB108_32
.LBB108_30:                             # %land.lhs.true59
	movq	8(%rbx), %rsi
	movzbl	(%rsi), %eax
	cmpq	$66, %rax
	jne	.LBB108_32
# BB#31:                                # %if.then65
	movq	%r14, %rdi
	callq	force_reg
	movq	%rax, 8(%rbx)
.LBB108_32:                             # %if.end69
	movq	(%rbx), %rdi
	movq	%r14, %rsi
	callq	push_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB108_45
# BB#33:                                # %land.lhs.true73
	movq	8(%rbx), %rsi
	movzbl	(%rsi), %eax
	cmpq	$63, %rax
	movq	%rsi, %rax
	jne	.LBB108_35
# BB#34:                                # %if.then.i215
	movq	8(%rsi), %rax
.LBB108_35:                             # %if.end.i216
	movq	global_rtl+40(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB108_44
# BB#36:                                # %if.end.i216
	movq	global_rtl+24(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB108_44
# BB#37:                                # %if.end.i216
	movq	global_rtl+48(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB108_44
# BB#38:                                # %if.end.i216
	movq	global_rtl+56(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB108_44
# BB#39:                                # %if.end.i216
	movq	global_rtl+64(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB108_44
# BB#40:                                # %if.end10.i
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB108_42
# BB#41:                                # %land.lhs.true.i220
	movl	8(%rax), %eax
	addq	$-53, %rax
	andq	%r12, %rax
	cmpq	$5, %rax
	jb	.LBB108_44
.LBB108_42:                             # %general_no_elim_operand.exit
	movq	%rsi, %rdi
	movq	%r14, %rsi
	callq	general_operand
	testq	%r12, %rax
	jne	.LBB108_45
# BB#43:                                # %general_no_elim_operand.exit.if.then77_crit_edge
	movq	8(%rbx), %rsi
.LBB108_44:                             # %if.then77
	movq	%r14, %rdi
	callq	copy_to_mode_reg
	movq	%rax, 8(%rbx)
.LBB108_45:                             # %if.end81
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB108_73
# BB#46:                                # %if.end81
	movq	%r14, %rax
	andq	%r12, %rax
	cmpq	$5, %rax
	jne	.LBB108_73
# BB#47:                                # %land.lhs.true87
	movq	8(%rbx), %rdi
	movq	$5, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB108_73
# BB#48:                                # %land.lhs.true91
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	jg	.LBB108_58
# BB#49:                                # %land.lhs.true91
	cmpq	$54, %rcx
	jne	.LBB108_50
# BB#62:                                # %sw.bb1.i204
	movl	12(%rax), %eax
	testq	%rax, %rax
	je	.LBB108_66
# BB#63:
	movabsq	$0, %rax
	jmp	.LBB108_67
.LBB108_58:                             # %land.lhs.true91
	cmpq	$67, %rcx
	jne	.LBB108_59
# BB#64:                                # %sw.bb3.i
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB108_66
# BB#65:
	movabsq	$0, %rax
	jmp	.LBB108_67
.LBB108_24:                             # %if.then22
	callq	gen_reg_rtx
	movq	8(%rbx), %rdx
	movq	%rax, %rsi
.LBB108_25:                             # %if.end
	movq	%rdx, %rdi
	callq	legitimize_pic_address
	movq	(%rbx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB108_82
# BB#26:                                # %return
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB108_50:                             # %land.lhs.true91
	cmpq	$58, %rcx
	jne	.LBB108_68
# BB#51:                                # %sw.bb8.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$75, %rcx
	jne	.LBB108_68
# BB#52:                                # %if.then.i
	movl	ix86_cmodel(%rip), %ecx
	cmpq	$4, %rcx
	je	.LBB108_68
# BB#53:                                # %if.end.i206
	movq	8(%rax), %rdx
	movzbl	(%rdx), %edx
	cmpq	$67, %rdx
	jne	.LBB108_68
# BB#54:                                # %if.end.i206
	movabsq	$4294967293, %rdx       # imm = 0xFFFFFFFD
	andq	%rdx, %rcx
	cmpq	$1, %rcx
	jne	.LBB108_68
# BB#55:                                # %land.lhs.true.i207
	movq	16(%rax), %r13
	movzbl	(%r13), %eax
	cmpq	$54, %rax
	jne	.LBB108_68
# BB#56:                                # %land.lhs.true42.i
	movq	8(%r13), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	cmpq	$-65535, %rax           # imm = 0xFFFFFFFFFFFF0001
	jl	.LBB108_68
# BB#57:                                # %land.lhs.true48.i
	movq	8(%r13), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	movq	8(%r13), %rcx
	cmpq	%rcx, %rax
	jne	.LBB108_68
	jmp	.LBB108_73
.LBB108_59:                             # %land.lhs.true91
	cmpq	$68, %rcx
	jne	.LBB108_68
# BB#60:                                # %sw.bb2.i
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB108_61
.LBB108_66:                             # %sw.bb3.i
	movabsq	$1, %rax
	jmp	.LBB108_67
.LBB108_61:
	movabsq	$0, %rax
.LBB108_67:                             # %x86_64_zero_extended_value.exit
	testq	%rax, %rax
	jne	.LBB108_73
.LBB108_68:                             # %land.lhs.true95
	movq	(%rbx), %rdi
	movq	$5, %rsi
	callq	register_operand
	movl	optimize(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB108_73
# BB#69:                                # %land.lhs.true95
	testq	%r12, %rax
	jne	.LBB108_73
# BB#70:                                # %land.lhs.true95
	movl	reload_completed(%rip), %eax
	testq	%r12, %rax
	jne	.LBB108_73
# BB#71:                                # %land.lhs.true95
	movl	reload_in_progress(%rip), %eax
	testq	%r12, %rax
	jne	.LBB108_73
# BB#72:                                # %if.then105
	movq	8(%rbx), %rsi
	movq	$5, %rdi
	callq	copy_to_mode_reg
	movq	%rax, 8(%rbx)
.LBB108_73:                             # %if.end109
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movl	mode_class(,%rax,4), %eax
	movq	%rax, %rcx
	orq	$4, %rcx
	andq	%r12, %rcx
	cmpq	$6, %rcx
	jne	.LBB108_74
# BB#78:                                # %if.then124
	testq	%r15, %r15
	jne	.LBB108_83
	jmp	.LBB108_79
.LBB108_74:                             # %lor.lhs.false119
	andq	%r12, %rax
	cmpq	$8, %rax
	je	.LBB108_75
# BB#76:                                # %lor.lhs.false119
	movabsq	$1, %rax
	jmp	.LBB108_77
.LBB108_75:
	movabsq	$0, %rax
.LBB108_77:                             # %lor.lhs.false119
	orq	%r15, %rax
	jne	.LBB108_83
.LBB108_79:                             # %if.else127
	movq	8(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$55, %rax
	jne	.LBB108_83
# BB#80:                                # %land.lhs.true133
	movq	(%rbx), %rdi
	movq	%r14, %rsi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB108_83
# BB#81:                                # %if.then137
	movq	8(%rbx), %rsi
	movq	%r14, %rdi
	callq	force_const_mem
	movq	%rax, %rdi
	callq	validize_mem
.LBB108_82:                             # %if.end145
	movq	%rax, 8(%rbx)
.LBB108_83:                             # %if.end145
	movq	(%rbx), %rdx
	movq	8(%rbx), %rcx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_insn  # TAILCALL
.Ltmp916:
	.size	ix86_expand_move, .Ltmp916-ix86_expand_move
	.cfi_endproc

	.globl	ix86_expand_vector_move
	.align	16, 0x90
	.type	ix86_expand_vector_move,@function
ix86_expand_vector_move:                # @ix86_expand_vector_move
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp922:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp923:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp924:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp925:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp926:
	.cfi_def_cfa_offset 48
.Ltmp927:
	.cfi_offset %rbx, -40
.Ltmp928:
	.cfi_offset %r12, -32
.Ltmp929:
	.cfi_offset %r14, -24
.Ltmp930:
	.cfi_offset %r15, -16
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	movq	%rsi, %rbx
	movq	%rdi, %r14
	orq	%rax, %rcx
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rcx
	jne	.LBB109_8
# BB#1:                                 # %land.lhs.true
	movq	(%rbx), %rdi
	movq	%r14, %rsi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB109_8
# BB#2:                                 # %land.lhs.true1
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$133, %rcx
	jg	.LBB109_5
# BB#3:                                 # %land.lhs.true1
	addq	$-54, %rcx
	andq	%r12, %rcx
	cmpq	$14, %rcx
	ja	.LBB109_8
# BB#4:                                 # %land.lhs.true1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB109_7
	jmp	.LBB109_8
.LBB109_5:                              # %land.lhs.true1
	cmpq	$134, %rcx
	je	.LBB109_7
# BB#6:                                 # %land.lhs.true1
	cmpq	$140, %rcx
	jne	.LBB109_8
.LBB109_7:                              # %if.then
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	8(%rbx), %rsi
	movq	%rax, %r15
	movq	%r14, %rdi
	callq	force_const_mem
	movq	8(%rax), %rsi
	movq	%r15, %rdi
	callq	emit_move_insn
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	gen_rtx_MEM
	movq	%rax, 8(%rbx)
.LBB109_8:                              # %if.end
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB109_13
# BB#9:                                 # %land.lhs.true48
	movq	(%rbx), %rdi
	movq	%r14, %rsi
	callq	register_operand
	testq	%r12, %rax
	jne	.LBB109_13
# BB#10:                                # %land.lhs.true52
	movq	8(%rbx), %rdi
	movq	%r14, %rsi
	callq	register_operand
	testq	%r12, %rax
	jne	.LBB109_13
# BB#11:                                # %land.lhs.true56
	movq	8(%rbx), %rsi
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	const_tiny_rtx(,%r14,8), %rax
	cmpq	%rax, %rsi
	je	.LBB109_13
# BB#12:                                # %if.then60
	movzbl	2(%rsi), %edi
	callq	force_reg
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	emit_move_insn  # TAILCALL
.LBB109_13:                             # %if.end68
	movq	(%rbx), %rdx
	movq	8(%rbx), %rcx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	emit_insn  # TAILCALL
.Ltmp931:
	.size	ix86_expand_vector_move, .Ltmp931-ix86_expand_vector_move
	.cfi_endproc

	.globl	ix86_expand_binary_operator
	.align	16, 0x90
	.type	ix86_expand_binary_operator,@function
ix86_expand_binary_operator:            # @ix86_expand_binary_operator
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp938:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp939:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp940:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp941:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp942:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp943:
	.cfi_def_cfa_offset 80
.Ltmp944:
	.cfi_offset %rbx, -48
.Ltmp945:
	.cfi_offset %r12, -40
.Ltmp946:
	.cfi_offset %r13, -32
.Ltmp947:
	.cfi_offset %r14, -24
.Ltmp948:
	.cfi_offset %r15, -16
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%rdi, %r15
	movq	(%rdx), %r13
	movq	8(%rdx), %r14
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	rtx_class(%rax), %eax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	16(%rdx), %rbx
	movq	%rsi, %r12
	cmpq	$99, %rax
	jne	.LBB110_1
# BB#2:                                 # %land.lhs.true
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB110_4
# BB#3:                                 # %lor.lhs.false
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	immediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB110_1
.LBB110_4:                              # %if.then
	movq	%r14, 24(%rsp)          # 8-byte Spill
	jmp	.LBB110_5
.LBB110_1:
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r14, %rbx
.LBB110_5:                              # %if.end
	movzbl	(%r13), %eax
	xorq	%r14, %r14
	cmpq	$66, %rax
	jne	.LBB110_10
# BB#6:                                 # %if.then9
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$1, %r14
	jne	.LBB110_10
# BB#7:                                 # %if.else
	movq	%rcx, %r14
	cmpq	$99, 16(%rsp)           # 8-byte Folded Reload
	jne	.LBB110_9
# BB#8:                                 # %land.lhs.true18
	movq	%r13, %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	rtx_equal_p
	testq	%r14, %rax
	movq	$2, %r14
	jne	.LBB110_10
.LBB110_9:                              # %if.else22
	movq	%r12, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r13
	xorq	%r14, %r14
.LBB110_10:                             # %if.end26
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB110_15
# BB#11:                                # %land.lhs.true31
	movq	24(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB110_15
# BB#12:                                # %if.then36
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	movq	%r12, %rdi
	cmpq	$2, %rax
	jne	.LBB110_13
# BB#14:                                # %if.else41
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %rbx
	jmp	.LBB110_15
.LBB110_13:                             # %if.then39
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	force_reg
	movq	%rax, 24(%rsp)          # 8-byte Spill
.LBB110_15:                             # %if.end44
	movzbl	(%rbx), %eax
	cmpq	$133, %rax
	jg	.LBB110_20
# BB#16:                                # %if.end44
	leaq	-54(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$14, %rcx
	ja	.LBB110_22
# BB#17:                                # %if.end44
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$24599, %rdx            # imm = 0x6017
	jne	.LBB110_18
	jmp	.LBB110_22
.LBB110_20:                             # %if.end44
	cmpq	$134, %rax
	je	.LBB110_18
# BB#21:                                # %if.end44
	cmpq	$140, %rax
	je	.LBB110_18
.LBB110_22:                             # %lor.lhs.false84
	cmpq	$66, %rax
	jne	.LBB110_24
# BB#23:                                # %lor.lhs.false84
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r14
	jne	.LBB110_24
.LBB110_18:                             # %lor.lhs.false84
	cmpq	$99, 16(%rsp)           # 8-byte Folded Reload
	movq	24(%rsp), %r14          # 8-byte Reload
	je	.LBB110_25
# BB#19:                                # %if.then97
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %rbx
.LBB110_25:                             # %if.end99
	movl	optimize(%rip), %eax
	testq	%rax, %rax
	je	.LBB110_33
# BB#26:                                # %if.end99
	movl	no_new_pseudos(%rip), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB110_33
# BB#27:                                # %if.then103
	movzbl	(%r13), %eax
	cmpq	$66, %rax
	jne	.LBB110_29
# BB#28:                                # %if.then108
	movq	%r12, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r13
.LBB110_29:                             # %if.end110
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB110_31
# BB#30:                                # %if.then115
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %rbx
.LBB110_31:                             # %if.end117
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB110_33
# BB#32:                                # %if.then122
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	force_reg
	movq	%rax, %r14
.LBB110_33:                             # %if.end125
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%r14, %rcx
	callq	gen_rtx_fmt_ee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movl	reload_in_progress(%rip), %ecx
	movq	%rax, %rbx
	testq	%rcx, %rcx
	je	.LBB110_36
# BB#34:                                # %if.then129
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r15
	cmpq	$75, %r15
	jne	.LBB110_39
# BB#35:                                # %if.end133
	movq	%rbx, %rdi
	jmp	.LBB110_37
.LBB110_36:                             # %if.else135
	movq	$52, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %rcx
	movq	$2, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	movq	%rcx, %rdx
	callq	gen_rtvec
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movq	%rax, %rdi
.LBB110_37:                             # %if.end141
	callq	emit_insn
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	(%rax), %rdi
	cmpq	%rdi, %r13
	je	.LBB110_38
# BB#40:                                # %if.then145
	movq	%r13, %rsi
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_move_insn  # TAILCALL
.LBB110_38:                             # %if.end148
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB110_24:
	movq	24(%rsp), %r14          # 8-byte Reload
	jmp	.LBB110_25
.LBB110_39:                             # %if.then132
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_binary_operator, %rcx
	movq	$6945, %rsi             # imm = 0x1B21
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp949:
	.size	ix86_expand_binary_operator, .Ltmp949-ix86_expand_binary_operator
	.cfi_endproc

	.globl	ix86_binary_operator_ok
	.align	16, 0x90
	.type	ix86_binary_operator_ok,@function
ix86_binary_operator_ok:                # @ix86_binary_operator_ok
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp955:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp956:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp957:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp958:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp959:
	.cfi_def_cfa_offset 48
.Ltmp960:
	.cfi_offset %rbx, -40
.Ltmp961:
	.cfi_offset %r12, -32
.Ltmp962:
	.cfi_offset %r14, -24
.Ltmp963:
	.cfi_offset %r15, -16
	movq	%rdx, %r15
	movq	8(%r15), %rsi
	movzbl	(%rsi), %eax
	movq	%rdi, %r14
	cmpq	$133, %rax
	jg	.LBB111_5
# BB#1:                                 # %entry
	addq	$-54, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	ja	.LBB111_8
# BB#2:                                 # %entry
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB111_7
# BB#3:                                 # %entry
	cmpq	$12, %rcx
	jne	.LBB111_8
# BB#4:                                 # %land.lhs.true
	movq	16(%r15), %rax
	movzbl	(%rax), %eax
	xorq	%rbx, %rbx
	cmpq	$66, %rax
	jne	.LBB111_8
	jmp	.LBB111_16
.LBB111_5:                              # %entry
	cmpq	$134, %rax
	je	.LBB111_7
# BB#6:                                 # %entry
	cmpq	$140, %rax
	jne	.LBB111_8
.LBB111_7:                              # %land.lhs.true43
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	rtx_class(%rax), %eax
	xorq	%rbx, %rbx
	cmpq	$99, %rax
	jne	.LBB111_16
.LBB111_8:                              # %if.end48
	movq	(%r15), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB111_12
# BB#9:                                 # %land.lhs.true54
	callq	rtx_equal_p
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	jne	.LBB111_12
# BB#10:                                # %lor.lhs.false57
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	rtx_class(%rax), %eax
	xorq	%rbx, %rbx
	cmpq	$99, %rax
	jne	.LBB111_16
# BB#11:                                # %land.lhs.true63
	movq	(%r15), %rdi
	movq	16(%r15), %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB111_16
.LBB111_12:                             # %if.end69
	movq	8(%r15), %rsi
	movzbl	(%rsi), %eax
	cmpq	$66, %rax
	jne	.LBB111_15
# BB#13:                                # %land.lhs.true75
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movzbl	rtx_class(%r14), %eax
	cmpq	$99, %rax
	je	.LBB111_15
# BB#14:                                # %land.lhs.true81
	movq	(%r15), %rdi
	callq	rtx_equal_p
	xorq	%rbx, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB111_16
.LBB111_15:                             # %if.end87
	movq	$1, %rbx
.LBB111_16:                             # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp964:
	.size	ix86_binary_operator_ok, .Ltmp964-ix86_binary_operator_ok
	.cfi_endproc

	.globl	ix86_expand_unary_operator
	.align	16, 0x90
	.type	ix86_expand_unary_operator,@function
ix86_expand_unary_operator:             # @ix86_expand_unary_operator
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp971:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp972:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp973:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp974:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp975:
	.cfi_def_cfa_offset 48
.Ltmp976:
	.cfi_offset %rbx, -48
.Ltmp977:
	.cfi_offset %r12, -40
.Ltmp978:
	.cfi_offset %r13, -32
.Ltmp979:
	.cfi_offset %r14, -24
.Ltmp980:
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	(%r14), %r13
	movzbl	(%r13), %eax
	movq	8(%r14), %rbx
	movq	%rsi, %r12
	movq	%rdi, %r15
	cmpq	$66, %rax
	jne	.LBB112_3
# BB#1:                                 # %if.then
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB112_5
# BB#2:                                 # %if.else
	movq	%r12, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r13
.LBB112_3:                              # %land.lhs.true
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB112_5
# BB#4:                                 # %if.then9
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %rbx
.LBB112_5:                              # %if.end11
	movl	optimize(%rip), %eax
	testq	%rax, %rax
	je	.LBB112_11
# BB#6:                                 # %if.end11
	movl	no_new_pseudos(%rip), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB112_11
# BB#7:                                 # %if.then15
	movzbl	(%r13), %eax
	cmpq	$66, %rax
	jne	.LBB112_9
# BB#8:                                 # %if.then19
	movq	%r12, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r13
.LBB112_9:                              # %if.end21
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB112_11
# BB#10:                                # %if.then25
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %rbx
.LBB112_11:                             # %if.end28
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	callq	gen_rtx_fmt_e
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movl	reload_in_progress(%rip), %ecx
	movq	%rax, %rbx
	testq	%rcx, %rcx
	jne	.LBB112_13
# BB#12:                                # %if.end28
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$86, %rax
	je	.LBB112_13
# BB#15:                                # %if.else38
	movq	$52, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %rcx
	movq	$2, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	movq	%rcx, %rdx
	callq	gen_rtvec
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movq	%rax, %rdi
	jmp	.LBB112_16
.LBB112_13:                             # %if.then33
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r15
	cmpq	$86, %r15
	jne	.LBB112_18
# BB#14:                                # %if.end36
	movq	%rbx, %rdi
.LBB112_16:                             # %if.end44
	callq	emit_insn
	movq	(%r14), %rdi
	cmpq	%rdi, %r13
	je	.LBB112_17
# BB#19:                                # %if.then47
	movq	%r13, %rsi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_move_insn  # TAILCALL
.LBB112_17:                             # %if.end50
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB112_18:                             # %if.then35
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_unary_operator, %rcx
	movq	$7037, %rsi             # imm = 0x1B7D
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp981:
	.size	ix86_expand_unary_operator, .Ltmp981-ix86_expand_unary_operator
	.cfi_endproc

	.globl	ix86_unary_operator_ok
	.align	16, 0x90
	.type	ix86_unary_operator_ok,@function
ix86_unary_operator_ok:                 # @ix86_unary_operator_ok
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp983:
	.cfi_def_cfa_offset 16
	movq	(%rdx), %rdi
	movzbl	(%rdi), %eax
	movq	8(%rdx), %rsi
	cmpq	$66, %rax
	je	.LBB113_2
# BB#1:                                 # %lor.lhs.false
	movzbl	(%rsi), %eax
	cmpq	$66, %rax
	jne	.LBB113_3
.LBB113_2:                              # %land.lhs.true
	callq	rtx_equal_p
	movq	%rax, %rcx
	xorq	%rax, %rax
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rcx
	je	.LBB113_4
.LBB113_3:                              # %if.end
	movq	$1, %rax
.LBB113_4:                              # %return
	popq	%rdx
	retq
.Ltmp984:
	.size	ix86_unary_operator_ok, .Ltmp984-ix86_unary_operator_ok
	.cfi_endproc

	.globl	ix86_match_ccmode
	.align	16, 0x90
	.type	ix86_match_ccmode,@function
ix86_match_ccmode:                      # @ix86_match_ccmode
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp986:
	.cfi_def_cfa_offset 16
	movq	32(%rdi), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$39, %rdx
	jne	.LBB114_2
# BB#1:                                 # %if.then
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %ecx
.LBB114_2:                              # %if.end
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$47, %rcx
	jne	.LBB114_3
# BB#5:                                 # %if.end8
	movq	16(%rax), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	cmpq	$74, %rdi
	jne	.LBB114_6
# BB#7:                                 # %if.end16
	movq	8(%rax), %rax
	movzbl	2(%rax), %r8d
	leaq	-52(%r8), %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdi
	cmpq	$4, %rdi
	ja	.LBB114_14
# BB#8:                                 # %if.end16
	jmpq	*.LJTI114_0(,%rdi,8)
.LBB114_15:                             # %sw.bb33
	addq	$-53, %rsi
	andq	%rax, %rsi
	xorq	%rax, %rax
	cmpq	$4, %rsi
	jb	.LBB114_19
	jmp	.LBB114_16
.LBB114_12:                             # %sw.bb37
	addq	$-54, %rsi
	andq	%rax, %rsi
	xorq	%rax, %rax
	cmpq	$3, %rsi
	jae	.LBB114_16
	jmp	.LBB114_19
.LBB114_13:                             # %sw.bb43
	andq	%rax, %rsi
	xorq	%rax, %rax
	cmpq	$56, %rsi
	jne	.LBB114_16
	jmp	.LBB114_19
.LBB114_9:                              # %sw.bb
	andq	%rax, %rsi
	cmpq	$55, %rsi
	je	.LBB114_16
# BB#10:                                # %sw.bb
	xorq	%rax, %rax
	cmpq	$52, %rsi
	jne	.LBB114_19
# BB#11:                                # %lor.lhs.false
	movq	16(%rcx), %rcx
	movq	const_int_rtx+512(%rip), %rsi
	cmpq	%rsi, %rcx
	jne	.LBB114_19
.LBB114_16:                             # %sw.epilog
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	%r8, %rdx
	jne	.LBB114_17
# BB#18:                                # %sw.epilog
	movabsq	$1, %rax
.LBB114_19:                             # %return
	popq	%rdx
	retq
.LBB114_17:
	movabsq	$0, %rax
	popq	%rdx
	retq
.LBB114_14:                             # %sw.default
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_match_ccmode, %rdx
	movq	$7113, %rsi             # imm = 0x1BC9
	callq	fancy_abort
.LBB114_3:                              # %if.then7
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_match_ccmode, %rcx
	movq	$7084, %rsi             # imm = 0x1BAC
	jmp	.LBB114_4
.LBB114_6:                              # %if.then15
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_match_ccmode, %rcx
	movq	$7086, %rsi             # imm = 0x1BAE
.LBB114_4:                              # %if.then7
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp987:
	.size	ix86_match_ccmode, .Ltmp987-ix86_match_ccmode
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI114_0:
	.quad	.LBB114_15
	.quad	.LBB114_12
	.quad	.LBB114_13
	.quad	.LBB114_9
	.quad	.LBB114_16

	.text
	.globl	ix86_fp_compare_mode
	.align	16, 0x90
	.type	ix86_fp_compare_mode,@function
ix86_fp_compare_mode:                   # @ix86_fp_compare_mode
	.cfi_startproc
# BB#0:                                 # %entry
	movl	target_flags(%rip), %eax
	movq	$4, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	addq	$57, %rax
	retq
.Ltmp988:
	.size	ix86_fp_compare_mode, .Ltmp988-ix86_fp_compare_mode
	.cfi_endproc

	.globl	ix86_cc_mode
	.align	16, 0x90
	.type	ix86_cc_mode,@function
ix86_cc_mode:                           # @ix86_cc_mode
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp990:
	.cfi_def_cfa_offset 16
	movzbl	2(%rsi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$2, %rax
	jne	.LBB116_2
# BB#1:                                 # %if.then
	movl	target_flags(%rip), %eax
	movq	$4, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	addq	$57, %rax
	popq	%rdx
	retq
.LBB116_2:                              # %if.end
	movq	$32, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$101, %rax
	jg	.LBB116_5
# BB#3:                                 # %if.end
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdi
	cmpq	$48, %rdi
	je	.LBB116_11
	jmp	.LBB116_4
.LBB116_5:                              # %if.end
	addq	$-102, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	$9, %rcx
	ja	.LBB116_4
# BB#6:                                 # %if.end
	movq	$56, %rax
	jmpq	*.LJTI116_0(,%rcx,8)
.LBB116_11:                             # %sw.bb1
	movq	$52, %rax
.LBB116_12:                             # %return
	popq	%rdx
	retq
.LBB116_7:                              # %sw.bb2
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rdx, %rax
	movq	$54, %rax
	je	.LBB116_12
# BB#8:                                 # %select.mid
	movq	$53, %rax
	popq	%rdx
	retq
.LBB116_9:                              # %sw.bb5
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rdx, %rax
	movq	$55, %rax
	je	.LBB116_12
# BB#10:                                # %select.mid2
	movq	$53, %rax
	popq	%rdx
	retq
.LBB116_4:                              # %sw.default
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_cc_mode, %rdx
	movq	$7200, %rsi             # imm = 0x1C20
	callq	fancy_abort
.Ltmp991:
	.size	ix86_cc_mode, .Ltmp991-ix86_cc_mode
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI116_0:
	.quad	.LBB116_12
	.quad	.LBB116_12
	.quad	.LBB116_7
	.quad	.LBB116_9
	.quad	.LBB116_9
	.quad	.LBB116_7
	.quad	.LBB116_11
	.quad	.LBB116_11
	.quad	.LBB116_11
	.quad	.LBB116_11

	.text
	.globl	ix86_use_fcomi_compare
	.align	16, 0x90
	.type	ix86_use_fcomi_compare,@function
ix86_use_fcomi_compare:                 # @ix86_use_fcomi_compare
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp995:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp996:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp997:
	.cfi_def_cfa_offset 32
.Ltmp998:
	.cfi_offset %rbx, -24
.Ltmp999:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	callq	swap_condition
	movq	%rax, %r14
	movq	%rbx, %rdi
	callq	ix86_fp_comparison_cost
	movl	ix86_arch(%rip), %ecx
	movq	$1, %r8
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$104, %rdx
	jne	.LBB117_2
# BB#1:                                 # %lor.lhs.false.i
	movzbl	target_flags+2(%rip), %ecx
	movq	$1024, %rdi             # imm = 0x400
	testq	$5, %rcx
	je	.LBB117_12
.LBB117_2:                              # %if.end.i
	addq	$-102, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rbx
	cmpq	$17, %rbx
	ja	.LBB117_18
# BB#3:                                 # %if.end.i
	movq	$1, %rsi
	jmpq	*.LJTI117_0(,%rbx,8)
.LBB117_4:                              # %sw.bb4.i.i
	movq	$112, %r8
	movq	$1, %rsi
	jmp	.LBB117_6
.LBB117_5:                              # %sw.bb1.i.i
	movq	$112, %rsi
.LBB117_6:                              # %sw.epilog.i.i
	movzbl	target_flags(%rip), %edi
	movq	$1, %rdx
	testq	$16, %rdi
	je	.LBB117_8
# BB#7:                                 # %ix86_fp_comparison_codes.exit.i
	andq	%rcx, %rsi
	movq	$1, %rdi
	cmpq	$1, %rsi
	movq	%r8, %rdx
	jne	.LBB117_11
.LBB117_8:                              # %lor.rhs.i
	andq	%rcx, %rdx
	cmpq	$1, %rdx
	je	.LBB117_9
# BB#10:                                # %lor.rhs.i
	movabsq	$1, %rdi
	jmp	.LBB117_11
.LBB117_9:
	movabsq	$0, %rdi
.LBB117_11:                             # %lor.end.i
	orq	$2, %rdi
.LBB117_12:                             # %ix86_fp_comparison_fcomi_cost.exit
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rdi
	andq	%rbx, %rax
	movq	$1, %rcx
	cmpq	%rdi, %rax
	je	.LBB117_29
# BB#13:                                # %lor.rhs
	movq	%r14, %rdi
	callq	ix86_fp_comparison_cost
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rdx
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$104, %rsi
	jne	.LBB117_15
# BB#14:                                # %lor.lhs.false.i14
	movzbl	target_flags+2(%rip), %ecx
	movq	$1024, %rsi             # imm = 0x400
	testq	$5, %rcx
	je	.LBB117_26
.LBB117_15:                             # %if.end.i15
	addq	$-102, %r14
	andq	%rbx, %r14
	cmpq	$17, %r14
	ja	.LBB117_18
# BB#16:                                # %if.end.i15
	movq	$1, %rcx
	jmpq	*.LJTI117_1(,%r14,8)
.LBB117_17:                             # %sw.bb4.i.i19
	movq	$112, %rdx
	movq	$1, %rcx
	jmp	.LBB117_20
.LBB117_19:                             # %sw.bb1.i.i16
	movq	$112, %rcx
.LBB117_20:                             # %sw.epilog.i.i27
	movzbl	target_flags(%rip), %esi
	movq	$1, %rdi
	testq	$16, %rsi
	je	.LBB117_22
# BB#21:                                # %ix86_fp_comparison_codes.exit.i29
	andq	%rbx, %rcx
	movq	$1, %rsi
	cmpq	$1, %rcx
	movq	%rdx, %rdi
	jne	.LBB117_25
.LBB117_22:                             # %lor.rhs.i32
	andq	%rbx, %rdi
	cmpq	$1, %rdi
	je	.LBB117_23
# BB#24:                                # %lor.rhs.i32
	movabsq	$1, %rsi
	jmp	.LBB117_25
.LBB117_23:
	movabsq	$0, %rsi
.LBB117_25:                             # %lor.end.i35
	orq	$2, %rsi
.LBB117_26:                             # %ix86_fp_comparison_fcomi_cost.exit37
	andq	%rbx, %rsi
	andq	%rbx, %rax
	cmpq	%rsi, %rax
	jne	.LBB117_27
# BB#28:                                # %ix86_fp_comparison_fcomi_cost.exit37
	movabsq	$1, %rcx
	jmp	.LBB117_29
.LBB117_27:
	movabsq	$0, %rcx
.LBB117_29:                             # %lor.end
	movq	%rcx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB117_18:                             # %sw.default.i.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.Ltmp1000:
	.size	ix86_use_fcomi_compare, .Ltmp1000-ix86_use_fcomi_compare
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI117_0:
	.quad	.LBB117_4
	.quad	.LBB117_5
	.quad	.LBB117_6
	.quad	.LBB117_6
	.quad	.LBB117_5
	.quad	.LBB117_5
	.quad	.LBB117_18
	.quad	.LBB117_18
	.quad	.LBB117_18
	.quad	.LBB117_18
	.quad	.LBB117_6
	.quad	.LBB117_6
	.quad	.LBB117_6
	.quad	.LBB117_4
	.quad	.LBB117_4
	.quad	.LBB117_6
	.quad	.LBB117_6
	.quad	.LBB117_6
.LJTI117_1:
	.quad	.LBB117_17
	.quad	.LBB117_19
	.quad	.LBB117_20
	.quad	.LBB117_20
	.quad	.LBB117_19
	.quad	.LBB117_19
	.quad	.LBB117_18
	.quad	.LBB117_18
	.quad	.LBB117_18
	.quad	.LBB117_18
	.quad	.LBB117_20
	.quad	.LBB117_20
	.quad	.LBB117_20
	.quad	.LBB117_17
	.quad	.LBB117_17
	.quad	.LBB117_20
	.quad	.LBB117_20
	.quad	.LBB117_20

	.text
	.align	16, 0x90
	.type	ix86_fp_comparison_cost,@function
ix86_fp_comparison_cost:                # @ix86_fp_comparison_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp1002:
	.cfi_def_cfa_offset 16
	movl	ix86_arch(%rip), %ecx
	movq	$1, %r9
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$104, %rax
	jne	.LBB118_2
# BB#1:                                 # %lor.lhs.false.i
	movl	target_flags(%rip), %r10d
	testq	$327680, %r10           # imm = 0x50000
	movq	$1024, %rax             # imm = 0x400
	je	.LBB118_12
.LBB118_2:                              # %if.end.i
	leaq	-102(%rdi), %rax
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rax
	cmpq	$17, %rax
	ja	.LBB118_19
# BB#3:                                 # %if.end.i
	movq	$1, %rcx
	jmpq	*.LJTI118_0(,%rax,8)
.LBB118_4:                              # %sw.bb4.i.i
	movq	$112, %r9
	movq	$1, %rcx
	jmp	.LBB118_6
.LBB118_5:                              # %sw.bb1.i.i
	movq	$112, %rcx
.LBB118_6:                              # %sw.epilog.i.i
	movl	target_flags(%rip), %r10d
	testq	$16, %r10
	movq	$1, %rsi
	je	.LBB118_8
# BB#7:                                 # %ix86_fp_comparison_codes.exit.i
	andq	%r8, %rcx
	movq	$1, %rax
	cmpq	$1, %rcx
	movq	%r9, %rsi
	jne	.LBB118_11
.LBB118_8:                              # %lor.rhs.i
	andq	%r8, %rsi
	cmpq	$1, %rsi
	je	.LBB118_9
# BB#10:                                # %lor.rhs.i
	movabsq	$1, %rax
	jmp	.LBB118_11
.LBB118_9:
	movabsq	$0, %rax
.LBB118_11:                             # %lor.end.i
	orq	$2, %rax
.LBB118_12:                             # %ix86_fp_comparison_fcomi_cost.exit
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$88, %rdx
	je	.LBB118_15
# BB#13:                                # %land.lhs.true.i
	testq	$33554432, %r10         # imm = 0x2000000
	je	.LBB118_16
# BB#14:                                # %land.lhs.true.i
	movl	optimize_size(%rip), %ecx
	movq	$1024, %rsi             # imm = 0x400
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rcx
	je	.LBB118_27
	jmp	.LBB118_16
.LBB118_15:                             # %land.lhs.true3.i
	movl	optimize_size(%rip), %ecx
	testq	%rcx, %rcx
	movq	$1024, %rsi             # imm = 0x400
	je	.LBB118_27
.LBB118_16:                             # %if.end.i16
	leaq	-102(%rdi), %rdx
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rdx
	cmpq	$17, %rdx
	ja	.LBB118_19
# BB#17:                                # %if.end.i16
	movq	$1, %r9
	movq	$1, %rcx
	jmpq	*.LJTI118_1(,%rdx,8)
.LBB118_18:                             # %sw.bb4.i.i20
	movq	$112, %r9
	movq	$1, %rcx
	jmp	.LBB118_21
.LBB118_20:                             # %sw.bb1.i.i17
	movq	$112, %rcx
.LBB118_21:                             # %sw.epilog.i.i26
	testq	$16, %r10
	movq	$1, %rdx
	je	.LBB118_23
# BB#22:                                # %ix86_fp_comparison_codes.exit.i28
	andq	%r8, %rcx
	movq	$4, %rsi
	cmpq	$1, %rcx
	movq	%r9, %rdx
	jne	.LBB118_27
.LBB118_23:                             # %lor.rhs.i29
	andq	%r8, %rdx
	cmpq	$1, %rdx
	je	.LBB118_24
# BB#25:                                # %lor.rhs.i29
	movabsq	$1, %rsi
	jmp	.LBB118_26
.LBB118_24:
	movabsq	$0, %rsi
.LBB118_26:                             # %lor.rhs.i29
	addq	$3, %rsi
.LBB118_27:                             # %ix86_fp_comparison_sahf_cost.exit
	testq	$16, %r10
	movq	$4, %rdx
	je	.LBB118_35
# BB#28:                                # %if.end.i33
	addq	$-102, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	$17, %rcx
	ja	.LBB118_33
# BB#29:                                # %if.end.i33
	movq	$1, %r8
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$236556, %rdi           # imm = 0x39C0C
	jne	.LBB118_35
# BB#30:                                # %if.end.i33
	shlq	%cl, %r8
	testq	$8227, %r8              # imm = 0x2023
	je	.LBB118_31
# BB#34:                                # %sw.bb1.i
	movq	$5, %rdx
	jmp	.LBB118_35
.LBB118_19:                             # %sw.default.i.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.LBB118_31:                             # %if.end.i33
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$16400, %rdx            # imm = 0x4010
	je	.LBB118_33
# BB#32:                                # %sw.bb2.i
	movq	$6, %rdx
.LBB118_35:                             # %ix86_fp_comparison_arithmetics_cost.exit
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rsi, %rdi
	andq	%rcx, %rdi
	andq	%rdx, %rcx
	cmpq	%rdi, %rcx
	ja	.LBB118_37
# BB#36:                                # %ix86_fp_comparison_arithmetics_cost.exit
	movq	%rdx, %rsi
.LBB118_37:                             # %ix86_fp_comparison_arithmetics_cost.exit
	cmpq	%rax, %rsi
	jg	.LBB118_39
# BB#38:                                # %ix86_fp_comparison_arithmetics_cost.exit
	movq	%rsi, %rax
.LBB118_39:                             # %ix86_fp_comparison_arithmetics_cost.exit
	popq	%rdx
	retq
.LBB118_33:                             # %sw.default.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_arithmetics_cost, %rdx
	movq	$7422, %rsi             # imm = 0x1CFE
	callq	fancy_abort
.Ltmp1003:
	.size	ix86_fp_comparison_cost, .Ltmp1003-ix86_fp_comparison_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI118_0:
	.quad	.LBB118_4
	.quad	.LBB118_5
	.quad	.LBB118_6
	.quad	.LBB118_6
	.quad	.LBB118_5
	.quad	.LBB118_5
	.quad	.LBB118_19
	.quad	.LBB118_19
	.quad	.LBB118_19
	.quad	.LBB118_19
	.quad	.LBB118_6
	.quad	.LBB118_6
	.quad	.LBB118_6
	.quad	.LBB118_4
	.quad	.LBB118_4
	.quad	.LBB118_6
	.quad	.LBB118_6
	.quad	.LBB118_6
.LJTI118_1:
	.quad	.LBB118_18
	.quad	.LBB118_20
	.quad	.LBB118_21
	.quad	.LBB118_21
	.quad	.LBB118_20
	.quad	.LBB118_20
	.quad	.LBB118_19
	.quad	.LBB118_19
	.quad	.LBB118_19
	.quad	.LBB118_19
	.quad	.LBB118_21
	.quad	.LBB118_21
	.quad	.LBB118_21
	.quad	.LBB118_18
	.quad	.LBB118_18
	.quad	.LBB118_21
	.quad	.LBB118_21
	.quad	.LBB118_21

	.text
	.globl	ix86_expand_compare
	.align	16, 0x90
	.type	ix86_expand_compare,@function
ix86_expand_compare:                    # @ix86_expand_compare
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1010:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1011:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1012:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1013:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1014:
	.cfi_def_cfa_offset 48
.Ltmp1015:
	.cfi_offset %rbx, -48
.Ltmp1016:
	.cfi_offset %r12, -40
.Ltmp1017:
	.cfi_offset %r13, -32
.Ltmp1018:
	.cfi_offset %r14, -24
.Ltmp1019:
	.cfi_offset %r15, -16
	movq	ix86_compare_op0(%rip), %r12
	movq	ix86_compare_op1(%rip), %r14
	movq	%rdx, %rax
	movq	%rsi, %rbx
	movq	%rdi, %r15
	testq	%rbx, %rbx
	je	.LBB119_2
# BB#1:                                 # %if.then
	movq	$0, (%rbx)
.LBB119_2:                              # %if.end
	testq	%rax, %rax
	je	.LBB119_4
# BB#3:                                 # %if.then2
	movq	$0, (%rax)
.LBB119_4:                              # %if.end3
	movzbl	2(%r12), %ecx
	movl	mode_class(,%rcx,4), %ecx
	cmpq	$2, %rcx
	jne	.LBB119_5
# BB#16:                                # %if.then4
	xorq	%rcx, %rcx
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movq	%rbx, %r8
	movq	%rax, %r9
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	ix86_expand_fp_compare  # TAILCALL
.LBB119_5:                              # %if.end.i.i
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$101, %rax
	jg	.LBB119_8
# BB#6:                                 # %if.end.i.i
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$48, %rax
	je	.LBB119_14
	jmp	.LBB119_7
.LBB119_8:                              # %if.end.i.i
	leaq	-102(%r15), %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$9, %rax
	ja	.LBB119_7
# BB#9:                                 # %if.end.i.i
	movq	$56, %r13
	jmpq	*.LJTI119_0(,%rax,8)
.LBB119_14:                             # %sw.bb1.i.i
	movq	$52, %r13
.LBB119_15:                             # %ix86_expand_int_compare.exit
	movq	$17, %rsi
	movq	%r13, %rdi
	callq	gen_rtx_REG
	movq	%rax, %rbx
	movq	$74, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r14, %rcx
	callq	gen_rtx_fmt_ee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	const_int_rtx+512(%rip), %rcx
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	movq	%rbx, %rdx
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_ee  # TAILCALL
.LBB119_10:                             # %sw.bb2.i.i
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%r14, %rax
	movq	$54, %r13
	je	.LBB119_15
# BB#11:                                # %select.mid
	movq	$53, %r13
	jmp	.LBB119_15
.LBB119_12:                             # %sw.bb5.i.i
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%r14, %rax
	movq	$55, %r13
	je	.LBB119_15
# BB#13:                                # %select.mid2
	movq	$53, %r13
	jmp	.LBB119_15
.LBB119_7:                              # %sw.default.i.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_cc_mode, %rdx
	movq	$7200, %rsi             # imm = 0x1C20
	callq	fancy_abort
.Ltmp1020:
	.size	ix86_expand_compare, .Ltmp1020-ix86_expand_compare
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI119_0:
	.quad	.LBB119_15
	.quad	.LBB119_15
	.quad	.LBB119_10
	.quad	.LBB119_12
	.quad	.LBB119_12
	.quad	.LBB119_10
	.quad	.LBB119_14
	.quad	.LBB119_14
	.quad	.LBB119_14
	.quad	.LBB119_14

	.text
	.align	16, 0x90
	.type	ix86_expand_fp_compare,@function
ix86_expand_fp_compare:                 # @ix86_expand_fp_compare
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1027:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1028:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1029:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1030:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1031:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp1032:
	.cfi_def_cfa_offset 128
.Ltmp1033:
	.cfi_offset %rbx, -48
.Ltmp1034:
	.cfi_offset %r12, -40
.Ltmp1035:
	.cfi_offset %r13, -32
.Ltmp1036:
	.cfi_offset %r14, -24
.Ltmp1037:
	.cfi_offset %r15, -16
	movq	%r9, %r14
	movq	%r8, %r12
	movq	%rcx, %r15
	movq	%rdi, %rbx
	movq	%rsi, 72(%rsp)
	movq	%rdx, 64(%rsp)
                                        # kill: RDI<def> RBX<kill>
	callq	ix86_fp_comparison_cost
	movl	target_flags(%rip), %r13d
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	$4, %rcx
	shrq	%cl, %r13
	leaq	72(%rsp), %rsi
	leaq	64(%rsp), %rdx
	movq	%rbx, %rdi
	callq	ix86_prepare_fp_compare_args
	movq	%r12, %r11
	testq	%r11, %r11
	je	.LBB120_2
# BB#1:                                 # %if.then
	movq	$0, (%r11)
.LBB120_2:                              # %if.end
	movq	%r15, 56(%rsp)          # 8-byte Spill
	testq	%r14, %r14
	je	.LBB120_4
# BB#3:                                 # %if.then10
	movq	$0, (%r14)
.LBB120_4:                              # %if.end11
	leaq	-102(%rax), %r12
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	andq	%r9, %r12
	cmpq	$17, %r12
	ja	.LBB120_11
# BB#5:                                 # %if.end11
	movq	$1, %rsi
	movq	$1, %rdx
	jmpq	*.LJTI120_0(,%r12,8)
.LBB120_8:                              # %sw.bb4.i
	movq	$112, %rsi
	movq	$119, %rax
	movq	$1, %rdx
	jmp	.LBB120_14
.LBB120_7:                              # %sw.bb3.i
	movq	$114, %rax
	jmp	.LBB120_13
.LBB120_6:                              # %sw.bb2.i244
	movq	$117, %rax
	jmp	.LBB120_13
.LBB120_12:                             # %sw.bb1.i243
	movq	$118, %rax
.LBB120_13:                             # %sw.epilog.i
	movq	$112, %rdx
	jmp	.LBB120_14
.LBB120_9:                              # %sw.bb5.i
	movq	$112, %rsi
	movq	$104, %rax
	movq	$1, %rdx
	jmp	.LBB120_14
.LBB120_10:                             # %sw.bb6.i
	movq	$112, %rsi
	movq	$105, %rax
	movq	$1, %rdx
.LBB120_14:                             # %sw.epilog.i
	movl	target_flags(%rip), %r15d
	andq	$1, %r13
	addq	$57, %r13
	movq	%r15, %rcx
	andq	$16, %rcx
	movq	$4, %r10
	movq	$1, %rdi
	je	.LBB120_15
# BB#16:                                # %ix86_fp_comparison_codes.exit
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	andq	%r9, %rsi
	cmpq	$1, %rsi
	jne	.LBB120_17
# BB#18:                                # %ix86_fp_comparison_codes.exit
	movabsq	$1, %rbx
	jmp	.LBB120_19
.LBB120_15:
	movq	$1, %r8
	movq	$1, %rdx
	movq	$1, %rsi
.LBB120_35:                             # %ix86_fp_comparison_arithmetics_cost.exit
	movq	$32, %rcx
	movq	48(%rsp), %rbx          # 8-byte Reload
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rbx, %r10
	jle	.LBB120_45
# BB#36:                                # %if.then19
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%r8, 16(%rsp)           # 8-byte Spill
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	movq	%rax, %r12
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rbx
	movq	72(%rsp), %rdx
	movq	64(%rsp), %rax
	shlq	%cl, %rbx
	andq	$104, %rbx
	andq	$327680, %r15           # imm = 0x50000
	movq	$74, %rdi
	movq	%r13, %rsi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %r14
	orq	%rbx, %r15
	je	.LBB120_38
# BB#37:                                # %if.then24
	movq	$17, %rsi
	movq	%r13, %rdi
	callq	gen_rtx_REG
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	gen_rtx_fmt_ee
	jmp	.LBB120_41
.LBB120_17:
	movabsq	$0, %rbx
.LBB120_19:                             # %ix86_fp_comparison_codes.exit
	movq	%rdi, %r8
	je	.LBB120_21
# BB#20:                                # %ix86_fp_comparison_codes.exit
	testq	%r14, %r14
	je	.LBB120_45
.LBB120_21:                             # %land.lhs.true
	movq	%r8, %rsi
	andq	%r9, %rsi
	cmpq	$1, %rsi
	jne	.LBB120_22
# BB#23:                                # %land.lhs.true
	movabsq	$1, %rsi
	jmp	.LBB120_24
.LBB120_22:
	movabsq	$0, %rsi
.LBB120_24:                             # %land.lhs.true
	movq	%rbx, %rdi
	je	.LBB120_26
# BB#25:                                # %land.lhs.true
	testq	%r11, %r11
	jne	.LBB120_26
.LBB120_45:                             # %if.else51
	movq	72(%rsp), %rdx
	movq	64(%rsp), %rcx
	movq	$74, %rdi
	movq	%r13, %rsi
	callq	gen_rtx_fmt_ee
	movq	%rax, %rcx
	movq	$1, %rdi
	xorq	%rax, %rax
	movq	%rcx, %rsi
	callq	gen_rtvec
	movq	$42, %rdi
	movq	$3, %rsi
	movq	$9, %rcx
	movq	%rax, %rdx
	callq	gen_rtx_fmt_Ei
	movq	%rax, %rbx
	movq	56(%rsp), %r14          # 8-byte Reload
	testq	%r14, %r14
	jne	.LBB120_47
# BB#46:                                # %if.then56
	movq	$3, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
.LBB120_47:                             # %if.end58
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r14, %rdx
	movq	%rbx, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	cmpq	$17, %r12
	ja	.LBB120_73
# BB#48:                                # %if.end58
	jmpq	*.LJTI120_1(,%r12,8)
.LBB120_68:                             # %land.lhs.true151
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	je	.LBB120_70
# BB#69:                                # %if.then154
	xorq	%rdi, %rdi
	movq	$69, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_andqi_ext_0
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	$64, %rsi
	jmp	.LBB120_61
.LBB120_26:                             # %land.lhs.true16
	testq	%r9, %rcx
	je	.LBB120_35
# BB#27:                                # %if.end.i
	cmpq	$17, %r12
	ja	.LBB120_33
# BB#28:                                # %if.end.i
	movq	%rsi, %r9
	movq	$1, %rbx
	movq	$1, %rsi
	movq	%r12, %rcx
	shlq	%cl, %rsi
	testq	$236556, %rsi           # imm = 0x39C0C
	je	.LBB120_30
# BB#29:
	movq	%r9, %rsi
	jmp	.LBB120_35
.LBB120_38:                             # %if.else
	movq	$1, %rdi
	xorq	%rax, %rax
	movq	%r14, %rsi
	callq	gen_rtvec
	movq	$42, %rdi
	movq	$3, %rsi
	movq	$9, %rcx
	movq	%rax, %rdx
	callq	gen_rtx_fmt_Ei
	movq	%rax, %r14
	movq	56(%rsp), %rbx          # 8-byte Reload
	testq	%rbx, %rbx
	jne	.LBB120_40
# BB#39:                                # %if.then33
	movq	$3, %rdi
	callq	gen_reg_rtx
	movq	%rax, %rbx
.LBB120_40:                             # %if.end35
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%r14, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	%rbx, %rdi
	callq	gen_x86_sahf_1
.LBB120_41:                             # %if.end40
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r12, %rbx
	cmpq	$0, 48(%rsp)            # 8-byte Folded Reload
	jne	.LBB120_43
# BB#42:                                # %if.then42
	movq	$17, %rsi
	movq	%r13, %rdi
	callq	gen_rtx_REG
	movq	const_int_rtx+512(%rip), %rcx
	xorq	%rsi, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
.LBB120_43:                             # %if.end45
	cmpq	$0, 40(%rsp)            # 8-byte Folded Reload
	jne	.LBB120_76
# BB#44:                                # %if.then47
	movq	$17, %rsi
	movq	%r13, %rdi
	callq	gen_rtx_REG
	movq	const_int_rtx+512(%rip), %rcx
	xorq	%rsi, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	jmp	.LBB120_76
.LBB120_70:                             # %if.else161
	xorq	%rdi, %rdi
	movq	$64, %rsi
	jmp	.LBB120_51
.LBB120_11:                             # %sw.default.i245
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.LBB120_65:                             # %land.lhs.true134
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	je	.LBB120_67
# BB#66:                                # %if.then137
	xorq	%rdi, %rdi
	movq	$69, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_andqi_ext_0
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	$64, %rsi
	jmp	.LBB120_54
.LBB120_67:                             # %if.else144
	xorq	%rdi, %rdi
	movq	$64, %rsi
	jmp	.LBB120_56
.LBB120_62:                             # %land.lhs.true115
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	je	.LBB120_64
# BB#63:                                # %if.then118
	xorq	%rdi, %rdi
	movq	$69, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_andqi_ext_0
	movq	%rax, %rdi
	callq	emit_insn
	movq	const_int_rtx+504(%rip), %rdx
	movq	%r14, %rdi
	movq	%r14, %rsi
	callq	gen_addqi_ext_1
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	$64, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_cmpqi_ext_3
	movq	%rax, %rdi
	callq	emit_insn
	movq	$111, %rbx
	jmp	.LBB120_75
.LBB120_64:                             # %if.else127
	xorq	%rdi, %rdi
	movq	$69, %rsi
	jmp	.LBB120_56
.LBB120_52:                             # %land.lhs.true81
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	je	.LBB120_55
# BB#53:                                # %if.then84
	xorq	%rdi, %rdi
	movq	$69, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_andqi_ext_0
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	$1, %rsi
.LBB120_54:                             # %if.end174
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_cmpqi_ext_3
	movq	%rax, %rdi
	callq	emit_insn
	movq	$103, %rbx
	jmp	.LBB120_75
.LBB120_55:                             # %if.else91
	xorq	%rdi, %rdi
	movq	$1, %rsi
	jmp	.LBB120_56
.LBB120_71:                             # %sw.bb166
	xorq	%rdi, %rdi
	movq	$4, %rsi
.LBB120_56:                             # %if.end174
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_testqi_ext_ccno_0
	jmp	.LBB120_57
.LBB120_72:                             # %sw.bb170
	xorq	%rdi, %rdi
	movq	$4, %rsi
	jmp	.LBB120_51
.LBB120_58:                             # %lor.lhs.false98
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	je	.LBB120_59
# BB#60:                                # %if.else105
	xorq	%rdi, %rdi
	movq	$69, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_andqi_ext_0
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	$1, %rsi
.LBB120_61:                             # %if.end174
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_xorqi_cc_ext_1
.LBB120_57:                             # %if.end174
	movq	%rax, %rdi
	callq	emit_insn
	movq	$102, %rbx
	movq	$55, %r13
	jmp	.LBB120_76
.LBB120_59:                             # %if.then101
	xorq	%rdi, %rdi
	movq	$5, %rsi
	jmp	.LBB120_51
.LBB120_49:                             # %lor.lhs.false62
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	je	.LBB120_50
# BB#74:                                # %if.else69
	xorq	%rdi, %rdi
	movq	$69, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_andqi_ext_0
	movq	%rax, %rdi
	callq	emit_insn
	movq	const_int_rtx+504(%rip), %rdx
	movq	%r14, %rdi
	movq	%r14, %rsi
	callq	gen_addqi_ext_1
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	$68, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_cmpqi_ext_3
	movq	%rax, %rdi
	callq	emit_insn
	movq	$108, %rbx
.LBB120_75:                             # %if.end174
	movq	$52, %r13
	jmp	.LBB120_76
.LBB120_50:                             # %if.then65
	xorq	%rdi, %rdi
	movq	$69, %rsi
.LBB120_51:                             # %if.end174
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_testqi_ext_ccno_0
	movq	%rax, %rdi
	callq	emit_insn
	movq	$103, %rbx
	movq	$55, %r13
.LBB120_76:                             # %if.end174
	movq	$17, %rsi
	movq	%r13, %rdi
	callq	gen_rtx_REG
	movq	const_int_rtx+512(%rip), %rcx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_ee  # TAILCALL
.LBB120_73:                             # %sw.default
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_expand_fp_compare, %rdx
	movq	$7655, %rsi             # imm = 0x1DE7
	callq	fancy_abort
.LBB120_30:                             # %if.end.i
	movq	%r12, %rcx
	shlq	%cl, %rbx
	testq	$8227, %rbx             # imm = 0x2023
	movq	%r9, %rsi
	je	.LBB120_31
# BB#34:                                # %sw.bb1.i
	movq	$5, %r10
	jmp	.LBB120_35
.LBB120_31:                             # %if.end.i
	movq	%rsi, %rbx
	movq	$1, %rsi
	movq	%r12, %rcx
	shlq	%cl, %rsi
	testq	$16400, %rsi            # imm = 0x4010
	movq	%rbx, %rsi
	je	.LBB120_33
# BB#32:                                # %sw.bb2.i
	movq	$6, %r10
	jmp	.LBB120_35
.LBB120_33:                             # %sw.default.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_arithmetics_cost, %rdx
	movq	$7422, %rsi             # imm = 0x1CFE
	callq	fancy_abort
.Ltmp1038:
	.size	ix86_expand_fp_compare, .Ltmp1038-ix86_expand_fp_compare
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI120_0:
	.quad	.LBB120_8
	.quad	.LBB120_7
	.quad	.LBB120_14
	.quad	.LBB120_14
	.quad	.LBB120_6
	.quad	.LBB120_12
	.quad	.LBB120_11
	.quad	.LBB120_11
	.quad	.LBB120_11
	.quad	.LBB120_11
	.quad	.LBB120_14
	.quad	.LBB120_14
	.quad	.LBB120_14
	.quad	.LBB120_9
	.quad	.LBB120_10
	.quad	.LBB120_14
	.quad	.LBB120_14
	.quad	.LBB120_14
.LJTI120_1:
	.quad	.LBB120_68
	.quad	.LBB120_65
	.quad	.LBB120_59
	.quad	.LBB120_50
	.quad	.LBB120_62
	.quad	.LBB120_52
	.quad	.LBB120_73
	.quad	.LBB120_73
	.quad	.LBB120_73
	.quad	.LBB120_73
	.quad	.LBB120_71
	.quad	.LBB120_72
	.quad	.LBB120_67
	.quad	.LBB120_58
	.quad	.LBB120_49
	.quad	.LBB120_64
	.quad	.LBB120_55
	.quad	.LBB120_70

	.text
	.globl	ix86_fp_jump_nontrivial_p
	.align	16, 0x90
	.type	ix86_fp_jump_nontrivial_p,@function
ix86_fp_jump_nontrivial_p:              # @ix86_fp_jump_nontrivial_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp1040:
	.cfi_def_cfa_offset 16
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rdx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$104, %rax
	jne	.LBB121_2
# BB#1:                                 # %lor.lhs.false
	movzbl	target_flags+2(%rip), %ecx
	movq	$1, %rax
	testq	$5, %rcx
	je	.LBB121_12
.LBB121_2:                              # %if.end
	addq	$-102, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdi
	cmpq	$17, %rdi
	ja	.LBB121_5
# BB#3:                                 # %if.end
	movq	$1, %rsi
	jmpq	*.LJTI121_0(,%rdi,8)
.LBB121_4:                              # %sw.bb4.i
	movq	$112, %rdx
	movq	$1, %rsi
	jmp	.LBB121_7
.LBB121_6:                              # %sw.bb1.i
	movq	$112, %rsi
.LBB121_7:                              # %sw.epilog.i
	movzbl	target_flags(%rip), %eax
	movq	$1, %rdi
	testq	$16, %rax
	je	.LBB121_9
# BB#8:                                 # %ix86_fp_comparison_codes.exit
	andq	%rcx, %rsi
	movq	$1, %rax
	cmpq	$1, %rsi
	movq	%rdx, %rdi
	jne	.LBB121_12
.LBB121_9:                              # %lor.rhs
	andq	%rcx, %rdi
	cmpq	$1, %rdi
	je	.LBB121_10
# BB#11:                                # %lor.rhs
	movabsq	$1, %rax
.LBB121_12:                             # %return
	popq	%rdx
	retq
.LBB121_10:
	movabsq	$0, %rax
	popq	%rdx
	retq
.LBB121_5:                              # %sw.default.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.Ltmp1041:
	.size	ix86_fp_jump_nontrivial_p, .Ltmp1041-ix86_fp_jump_nontrivial_p
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI121_0:
	.quad	.LBB121_4
	.quad	.LBB121_6
	.quad	.LBB121_7
	.quad	.LBB121_7
	.quad	.LBB121_6
	.quad	.LBB121_6
	.quad	.LBB121_5
	.quad	.LBB121_5
	.quad	.LBB121_5
	.quad	.LBB121_5
	.quad	.LBB121_7
	.quad	.LBB121_7
	.quad	.LBB121_7
	.quad	.LBB121_4
	.quad	.LBB121_4
	.quad	.LBB121_7
	.quad	.LBB121_7
	.quad	.LBB121_7

	.text
	.globl	ix86_expand_branch
	.align	16, 0x90
	.type	ix86_expand_branch,@function
ix86_expand_branch:                     # @ix86_expand_branch
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1048:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1049:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1050:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1051:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1052:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp1053:
	.cfi_def_cfa_offset 112
.Ltmp1054:
	.cfi_offset %rbx, -48
.Ltmp1055:
	.cfi_offset %r12, -40
.Ltmp1056:
	.cfi_offset %r13, -32
.Ltmp1057:
	.cfi_offset %r14, -24
.Ltmp1058:
	.cfi_offset %r15, -16
	movq	ix86_compare_op0(%rip), %rdx
	movl	(%rdx), %eax
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	leaq	-15(%rsi), %rcx
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	andq	%r12, %rcx
	cmpq	$4, %rcx
	jae	.LBB122_1
# BB#4:                                 # %sw.bb5
	movabsq	$ix86_compare_op0, %rsi
	movabsq	$ix86_compare_op1, %rdx
	movq	%rbx, %rdi
	callq	ix86_prepare_fp_compare_args
	movq	%rax, %r13
	leaq	-102(%r13), %rdx
	andq	%r12, %rdx
	cmpq	$17, %rdx
	ja	.LBB122_7
# BB#5:                                 # %sw.bb5
	movq	$1, %rax
	movq	$1, %rcx
	jmpq	*.LJTI122_1(,%rdx,8)
.LBB122_6:                              # %sw.bb4.i
	xorq	%rax, %rax
	movq	$1, %rcx
	jmp	.LBB122_9
.LBB122_1:                              # %entry
	cmpq	$5, %rsi
	je	.LBB122_19
# BB#2:                                 # %entry
	addq	$-2, %rsi
	andq	%r12, %rsi
	cmpq	$2, %rsi
	jbe	.LBB122_3
# BB#59:                                # %sw.default192
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_branch, %rcx
	movq	$7884, %rsi             # imm = 0x1ECC
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB122_19:                             # %sw.bb41
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB122_20
.LBB122_3:                              # %simple
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	movq	%rbx, %rdi
	callq	ix86_expand_compare
	movq	%rax, %rbx
	movq	$67, %rdi
	xorq	%rsi, %rsi
	movq	%r14, %rdx
	callq	gen_rtx_fmt_u00
	movq	global_rtl(%rip), %r8
	movq	$72, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_eee
	movq	global_rtl(%rip), %rdx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	jmp	.LBB122_18
.LBB122_8:                              # %sw.bb1.i
	xorq	%rcx, %rcx
.LBB122_9:                              # %sw.epilog.i
	movl	target_flags(%rip), %edx
	testq	$16, %rdx
	je	.LBB122_11
# BB#10:                                # %sw.epilog.i
	andq	%rax, %rcx
	je	.LBB122_12
.LBB122_11:                             # %land.lhs.true13
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	$104, %rax
	andq	$327680, %rdx           # imm = 0x50000
	orq	%rax, %rdx
	je	.LBB122_12
# BB#61:                                # %if.then
	movq	ix86_compare_op0(%rip), %r15
	movq	ix86_compare_op1(%rip), %r12
	movq	$67, %rdi
	xorq	%rsi, %rsi
	movq	%r14, %rdx
	callq	gen_rtx_fmt_u00
	movq	global_rtl(%rip), %r8
	xorq	%r9, %r9
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	ix86_split_fp_branch  # TAILCALL
.LBB122_12:                             # %if.else
	movq	ix86_compare_op0(%rip), %rdx
	movq	ix86_compare_op1(%rip), %rcx
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	gen_rtx_fmt_ee
	movq	%rax, %rbx
	movq	$67, %rdi
	xorq	%rsi, %rsi
	movq	%r14, %rdx
	callq	gen_rtx_fmt_u00
	movq	global_rtl(%rip), %r8
	movq	$72, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_eee
	movq	global_rtl(%rip), %rdx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %r15
	movq	%r13, %rdi
	callq	ix86_use_fcomi_compare
	movq	%rax, %r14
	andq	%r12, %r14
	je	.LBB122_13
# BB#14:                                # %if.else
	movabsq	$1, %rax
	jmp	.LBB122_15
.LBB122_13:
	movabsq	$0, %rax
.LBB122_15:                             # %if.else
	movq	$4, %rdi
	subq	%rax, %rdi
	callq	rtvec_alloc
	movq	%rax, %rbx
	movq	%r15, 8(%rbx)
	movq	$57, %rdi
	movq	$18, %rsi
	callq	gen_rtx_REG
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, 16(%rbx)
	movq	$57, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	testq	%r14, %r14
	movq	%rax, 24(%rbx)
	jne	.LBB122_17
# BB#16:                                # %if.then33
	movq	$62, %rdi
	movq	$3, %rsi
	callq	gen_rtx_fmt_0
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, 32(%rbx)
.LBB122_17:                             # %if.end
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	callq	gen_rtx_fmt_E
.LBB122_18:                             # %if.end
	movq	%rax, %rdi
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_jump_insn  # TAILCALL
.LBB122_20:                             # %if.end45
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jg	.LBB122_23
# BB#21:                                # %if.end45
	addq	$-54, %rax
	andq	%r12, %rax
	cmpq	$14, %rax
	ja	.LBB122_31
# BB#22:                                # %if.end45
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$24599, %rsi            # imm = 0x6017
	jne	.LBB122_25
	jmp	.LBB122_31
.LBB122_7:                              # %sw.default.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.LBB122_23:                             # %if.end45
	cmpq	$134, %rax
	je	.LBB122_25
# BB#24:                                # %if.end45
	cmpq	$140, %rax
	jne	.LBB122_31
.LBB122_25:                             # %land.lhs.true83
	movq	ix86_compare_op1(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$133, %rcx
	jg	.LBB122_28
# BB#26:                                # %land.lhs.true83
	addq	$-54, %rcx
	andq	%r12, %rcx
	cmpq	$14, %rcx
	ja	.LBB122_30
# BB#27:                                # %land.lhs.true83
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$24599, %rsi            # imm = 0x6017
	jne	.LBB122_31
	jmp	.LBB122_30
.LBB122_28:                             # %land.lhs.true83
	cmpq	$134, %rcx
	je	.LBB122_31
# BB#29:                                # %land.lhs.true83
	cmpq	$140, %rcx
	je	.LBB122_31
.LBB122_30:                             # %if.then115
	movq	%rax, ix86_compare_op0(%rip)
	movq	%rdx, ix86_compare_op1(%rip)
	movq	%rbx, %rdi
	callq	swap_condition
	movq	%rax, %rbx
.LBB122_31:                             # %if.end117
	movabsq	$ix86_compare_op0, %rdi
	leaq	48(%rsp), %rdx
	leaq	32(%rsp), %rcx
	movq	$1, %rsi
	callq	split_di
	leaq	56(%rsp), %rdx
	leaq	40(%rsp), %rcx
	movabsq	$ix86_compare_op1, %rdi
	movq	$1, %rsi
	callq	split_di
	movabsq	$4294967294, %rax       # imm = 0xFFFFFFFE
	andq	%rbx, %rax
	cmpq	$102, %rax
	jne	.LBB122_32
# BB#38:                                # %land.lhs.true127
	movl	optimize_size(%rip), %eax
	movq	40(%rsp), %r15
	movq	const_int_rtx+512(%rip), %rdx
	testq	%rax, %rax
	je	.LBB122_41
# BB#39:                                # %lor.lhs.false129
	cmpq	%rdx, %r15
	je	.LBB122_41
# BB#40:                                # %lor.lhs.false129
	movq	56(%rsp), %rax
	cmpq	%rdx, %rax
	jne	.LBB122_33
.LBB122_41:                             # %if.then135
	movq	32(%rsp), %r12
	cmpq	%rdx, %r15
	je	.LBB122_43
# BB#42:                                # %if.then141
	movq	optab_table+160(%rip), %rsi
	movq	$4, %rdi
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	$2, (%rsp)
	movq	%r12, %rdx
	movq	%r15, %rcx
	callq	expand_binop
	movq	const_int_rtx+512(%rip), %rdx
	movq	%rax, %r12
.LBB122_43:                             # %if.end144
	movq	56(%rsp), %rax
	movq	48(%rsp), %rcx
	cmpq	%rdx, %rax
	je	.LBB122_45
# BB#44:                                # %if.then148
	movq	optab_table+160(%rip), %rsi
	movq	$4, %rdi
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	$2, (%rsp)
	movq	%rcx, %rdx
	movq	%rax, %rcx
	callq	expand_binop
	movq	%rax, %rcx
.LBB122_45:                             # %if.end151
	movq	optab_table+152(%rip), %rsi
	movq	$4, %rdi
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	$2, (%rsp)
	movq	%r12, %rdx
	callq	expand_binop
	movq	const_int_rtx+512(%rip), %rcx
	movq	%rax, ix86_compare_op0(%rip)
	movq	%rcx, ix86_compare_op1(%rip)
.LBB122_46:                             # %sw.bb162
	movq	%rbx, %rdi
	jmp	.LBB122_47
.LBB122_32:                             # %if.end117.if.end153_crit_edge
	movq	40(%rsp), %r15
.LBB122_33:                             # %if.end153
	movzbl	(%r15), %eax
	cmpq	$54, %rax
	jne	.LBB122_48
# BB#34:                                # %land.lhs.true158
	movq	56(%rsp), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB122_48
# BB#35:                                # %if.then161
	leaq	-104(%rbx), %rcx
	andq	%r12, %rcx
	cmpq	$7, %rcx
	ja	.LBB122_48
# BB#36:                                # %if.then161
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$153, %rax
	je	.LBB122_48
# BB#37:                                # %sw.bb162
	movq	32(%rsp), %rax
	movq	%rax, ix86_compare_op0(%rip)
	movq	%r15, ix86_compare_op1(%rip)
	jmp	.LBB122_46
.LBB122_48:                             # %if.end165
	callq	gen_label_rtx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	swap_condition
	movq	%rax, %r13
	movq	%rbx, %rdi
	callq	unsigned_condition
	leaq	-102(%rbx), %rcx
	andq	%r12, %rcx
	cmpq	$9, %rcx
	ja	.LBB122_54
# BB#49:                                # %if.end165
	movq	%rax, 24(%rsp)          # 8-byte Spill
	jmpq	*.LJTI122_0(,%rcx,8)
.LBB122_53:                             # %sw.bb175
	movq	$1, %r13
	movq	$102, %rbx
	jmp	.LBB122_57
.LBB122_55:                             # %if.end182.thread
	movq	32(%rsp), %rax
	movq	%rax, ix86_compare_op0(%rip)
	movq	%r15, ix86_compare_op1(%rip)
	movq	$102, %r13
	jmp	.LBB122_58
.LBB122_50:                             # %sw.bb171
	movq	$107, %r13
	movq	$105, %rbx
	jmp	.LBB122_57
.LBB122_56:                             # %sw.bb170
	movq	$105, %r13
	movq	$107, %rbx
	jmp	.LBB122_57
.LBB122_52:                             # %sw.bb173
	movq	$111, %r13
	movq	$109, %rbx
	jmp	.LBB122_57
.LBB122_51:                             # %sw.bb172
	movq	$109, %r13
	movq	$111, %rbx
.LBB122_57:                             # %if.end182
	movq	32(%rsp), %rax
	movq	%rax, ix86_compare_op0(%rip)
	movq	%r15, ix86_compare_op1(%rip)
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	ix86_expand_branch
	andq	%r13, %r12
	cmpq	$1, %r12
	jne	.LBB122_58
# BB#60:                                # %return.critedge
	movq	48(%rsp), %rax
	movq	56(%rsp), %rcx
	movq	%rax, ix86_compare_op0(%rip)
	movq	%rcx, ix86_compare_op1(%rip)
	movq	24(%rsp), %rdi          # 8-byte Reload
.LBB122_47:                             # %sw.bb162
	movq	%r14, %rsi
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	ix86_expand_branch  # TAILCALL
.LBB122_58:                             # %if.then184
	movq	%r13, %rdi
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	callq	ix86_expand_branch
	movq	48(%rsp), %rax
	movq	56(%rsp), %rcx
	movq	%rax, ix86_compare_op0(%rip)
	movq	%rcx, ix86_compare_op1(%rip)
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	%r14, %rsi
	callq	ix86_expand_branch
	movq	%rbx, %rdi
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_label  # TAILCALL
.LBB122_54:                             # %sw.default176
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_expand_branch, %rdx
	movq	$7855, %rsi             # imm = 0x1EAF
	callq	fancy_abort
.Ltmp1059:
	.size	ix86_expand_branch, .Ltmp1059-ix86_expand_branch
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI122_0:
	.quad	.LBB122_53
	.quad	.LBB122_55
	.quad	.LBB122_50
	.quad	.LBB122_57
	.quad	.LBB122_56
	.quad	.LBB122_57
	.quad	.LBB122_52
	.quad	.LBB122_57
	.quad	.LBB122_51
	.quad	.LBB122_57
.LJTI122_1:
	.quad	.LBB122_6
	.quad	.LBB122_8
	.quad	.LBB122_9
	.quad	.LBB122_9
	.quad	.LBB122_8
	.quad	.LBB122_8
	.quad	.LBB122_7
	.quad	.LBB122_7
	.quad	.LBB122_7
	.quad	.LBB122_7
	.quad	.LBB122_9
	.quad	.LBB122_9
	.quad	.LBB122_9
	.quad	.LBB122_6
	.quad	.LBB122_6
	.quad	.LBB122_9
	.quad	.LBB122_9
	.quad	.LBB122_9

	.text
	.align	16, 0x90
	.type	ix86_prepare_fp_compare_args,@function
ix86_prepare_fp_compare_args:           # @ix86_prepare_fp_compare_args
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1066:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1067:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1068:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1069:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1070:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp1071:
	.cfi_def_cfa_offset 80
.Ltmp1072:
	.cfi_offset %rbx, -48
.Ltmp1073:
	.cfi_offset %r12, -40
.Ltmp1074:
	.cfi_offset %r13, -32
.Ltmp1075:
	.cfi_offset %r14, -24
.Ltmp1076:
	.cfi_offset %r15, -16
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	(%rsi), %r14
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movl	(%r14), %r8d
	movl	target_flags(%rip), %eax
	movq	(%rdx), %r13
	movq	$16, %rcx
	movq	%r8, %r12
	shrq	%cl, %r12
	movq	%r8, %rsi
	andq	$65535, %rsi            # imm = 0xFFFF
	xorq	%rcx, %rcx
	cmpq	$61, %rsi
	movabsq	$0, %rsi
	jne	.LBB123_3
# BB#1:                                 # %land.rhs
	movl	8(%r14), %edi
	leaq	-21(%rdi), %rsi
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rsi
	cmpq	$8, %rsi
	movq	$1, %rsi
	jb	.LBB123_3
# BB#2:                                 # %lor.rhs
	addq	$-45, %rdi
	andq	%rbx, %rdi
	cmpq	$8, %rdi
	sbbq	%rsi, %rsi
	andq	$1, %rsi
.LBB123_3:                              # %land.end17
	movzbl	(%r13), %edi
	andq	$255, %r12
	cmpq	$61, %rdi
	jne	.LBB123_6
# BB#4:                                 # %land.rhs21
	movl	8(%r13), %ecx
	leaq	-21(%rcx), %rbx
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rdi, %rbx
	cmpq	$8, %rbx
	jb	.LBB123_11
# BB#5:                                 # %lor.rhs31
	addq	$-45, %rcx
	andq	%rdi, %rcx
	cmpq	$8, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
.LBB123_6:                              # %land.end44
	orq	%rcx, %rsi
	jne	.LBB123_11
# BB#7:                                 # %land.lhs.true46
	andq	$16, %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	jne	.LBB123_51
# BB#8:                                 # %land.lhs.true46
	leaq	-17(%r12), %rax
	andq	%rbx, %rax
	cmpq	$2, %rax
	jb	.LBB123_51
# BB#9:                                 # %lor.lhs.false51
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	ix86_use_fcomi_compare
	testq	%rbx, %rax
	je	.LBB123_10
.LBB123_51:                             # %if.then
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	force_reg
	movq	%rax, %rbx
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	force_reg
	movq	%rax, %r15
	movq	%rbx, %r13
	movq	24(%rsp), %r14          # 8-byte Reload
	jmp	.LBB123_42
.LBB123_10:                             # %lor.lhs.false51.if.else_crit_edge
	movl	(%r14), %r8d
.LBB123_11:                             # %if.else
	movq	%r8, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	je	.LBB123_19
# BB#12:                                # %if.else
	cmpq	$55, %rax
	jne	.LBB123_13
# BB#14:                                # %lor.lhs.false.i
	movq	$16, %rcx
	movq	%r8, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	movl	mode_class(,%rsi,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB123_13
# BB#15:                                # %lor.lhs.false.i
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$324, %rdi              # imm = 0x144
	je	.LBB123_13
# BB#16:                                # %if.end.i
	movq	const_tiny_rtx(,%rsi,8), %rcx
	cmpq	%r14, %rcx
	je	.LBB123_18
# BB#17:                                # %if.end25.i
	movq	const_tiny_rtx+472(,%rsi,8), %rcx
	cmpq	%r14, %rcx
	jne	.LBB123_26
.LBB123_18:                             # %lor.lhs.false58
	cmpq	$66, %rax
	jne	.LBB123_13
.LBB123_19:                             # %land.lhs.true62
	movl	(%r13), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	je	.LBB123_13
# BB#20:                                # %land.lhs.true62
	cmpq	$55, %rax
	jne	.LBB123_26
# BB#21:                                # %lor.lhs.false.i202
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movl	mode_class(,%rsi,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB123_26
# BB#22:                                # %lor.lhs.false.i202
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$324, %rdi              # imm = 0x144
	je	.LBB123_26
# BB#23:                                # %if.end.i205
	movq	const_tiny_rtx(,%rsi,8), %rcx
	cmpq	%r13, %rcx
	je	.LBB123_25
# BB#24:                                # %if.end25.i209
	movq	const_tiny_rtx+472(,%rsi,8), %rcx
	cmpq	%r13, %rcx
	jne	.LBB123_13
.LBB123_25:                             # %lor.lhs.false65
	cmpq	$66, %rax
	jne	.LBB123_26
.LBB123_13:
	movq	%r13, %r15
	movq	%r14, %r13
	jmp	.LBB123_27
.LBB123_26:                             # %if.then69
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	swap_condition
	movl	(%r13), %r8d
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r14, %r15
.LBB123_27:                             # %if.end
	andq	$65535, %r8             # imm = 0xFFFF
	cmpq	$61, %r8
	je	.LBB123_29
# BB#28:                                # %if.then74
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	force_reg
	movq	%rax, %r13
.LBB123_29:                             # %if.end76
	movl	(%r15), %eax
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$133, %rdx
	jg	.LBB123_38
# BB#30:                                # %if.end76
	addq	$-54, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$14, %rcx
	movq	24(%rsp), %r14          # 8-byte Reload
	ja	.LBB123_42
# BB#31:                                # %if.end76
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$24597, %rdx            # imm = 0x6015
	jne	.LBB123_40
# BB#32:                                # %if.end76
	cmpq	$1, %rcx
	jne	.LBB123_42
# BB#33:                                # %lor.lhs.false.i219
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB123_40
# BB#34:                                # %lor.lhs.false.i219
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB123_40
# BB#35:                                # %if.end.i222
	movq	const_tiny_rtx(,%rax,8), %rcx
	cmpq	%r15, %rcx
	je	.LBB123_40
# BB#36:                                # %if.end25.i226
	movq	const_tiny_rtx+472(,%rax,8), %rax
	cmpq	%r15, %rax
	je	.LBB123_40
# BB#37:                                # %if.else113
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	force_const_mem
	movq	%rax, %rdi
	callq	validize_mem
	jmp	.LBB123_41
.LBB123_38:                             # %if.end76
	cmpq	$134, %rdx
	movq	24(%rsp), %r14          # 8-byte Reload
	je	.LBB123_40
# BB#39:                                # %if.end76
	cmpq	$140, %rdx
	jne	.LBB123_42
.LBB123_40:                             # %if.then111
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	force_reg
.LBB123_41:                             # %if.end118
	movq	%rax, %r15
.LBB123_42:                             # %if.end118
	movq	%r14, %rdi
	callq	ix86_fp_comparison_cost
	movq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%r14, %rdi
	callq	swap_condition
	movq	%rax, %rdi
	callq	ix86_fp_comparison_cost
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rbx
	jle	.LBB123_43
# BB#44:                                # %land.lhs.true123
	movzbl	(%r15), %eax
	cmpq	$61, %rax
	je	.LBB123_47
# BB#45:                                # %land.lhs.true123
	movl	no_new_pseudos(%rip), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB123_47
# BB#46:
	movq	%r15, %rcx
	jmp	.LBB123_50
.LBB123_43:
	movq	%r15, %rcx
	jmp	.LBB123_50
.LBB123_47:                             # %if.then129
	movq	%r14, %rdi
	callq	swap_condition
	movzbl	(%r15), %ecx
	movq	%rax, %r14
	cmpq	$61, %rcx
	jne	.LBB123_49
# BB#48:
	movq	%r13, %rcx
	movq	%r15, %r13
	jmp	.LBB123_50
.LBB123_49:                             # %if.then136
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	force_reg
	movq	%r13, %rcx
	movq	%rax, %r13
.LBB123_50:                             # %if.end139
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%r13, (%rax)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rcx, (%rax)
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1077:
	.size	ix86_prepare_fp_compare_args, .Ltmp1077-ix86_prepare_fp_compare_args
	.cfi_endproc

	.globl	ix86_split_fp_branch
	.align	16, 0x90
	.type	ix86_split_fp_branch,@function
ix86_split_fp_branch:                   # @ix86_split_fp_branch
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1084:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1085:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1086:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1087:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1088:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp1089:
	.cfi_def_cfa_offset 96
.Ltmp1090:
	.cfi_offset %rbx, -48
.Ltmp1091:
	.cfi_offset %r12, -40
.Ltmp1092:
	.cfi_offset %r13, -32
.Ltmp1093:
	.cfi_offset %r14, -24
.Ltmp1094:
	.cfi_offset %r15, -16
	movq	global_rtl(%rip), %rax
	movq	%r9, %r14
	movq	%r8, %r13
	movq	%rcx, %rbx
	movq	%rdx, %r15
	movq	%rsi, %r12
	cmpq	%r13, %rax
	je	.LBB124_1
# BB#2:                                 # %if.then
	callq	reverse_condition_maybe_unordered
	movq	%rax, %rdi
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	jmp	.LBB124_3
.LBB124_1:
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movq	%rbx, %r13
.LBB124_3:                              # %if.end
	leaq	40(%rsp), %r8
	leaq	32(%rsp), %r9
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	ix86_expand_fp_compare
	movslq	split_branch_probability(%rip), %r14
	movq	32(%rsp), %rcx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	testq	%r14, %r14
	js	.LBB124_4
# BB#5:                                 # %if.then13
	cmpq	$1, %rcx
	sbbq	%r15, %r15
	orq	$1, %r15
	cmpq	$0, 40(%rsp)
	je	.LBB124_6
# BB#7:                                 # %select.mid
	movq	$1, %r12
	jmp	.LBB124_8
.LBB124_4:
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movq	%r15, %r12
	movq	%r15, %r14
	jmp	.LBB124_8
.LBB124_6:
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
.LBB124_8:                              # %if.end19
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
	testq	%rcx, %rcx
	je	.LBB124_12
# BB#9:                                 # %if.then21
	movq	%r12, (%rsp)            # 8-byte Spill
	callq	gen_label_rtx
	movq	global_rtl(%rip), %rbx
	movq	32(%rsp), %r12
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	$67, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_u00
	movq	global_rtl(%rip), %r8
	movq	$72, %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_jump_insn
	movq	%rax, %rbx
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB124_11
# BB#10:                                # %if.then28
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	$32, %rcx
	sarq	%cl, %r15
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	callq	gen_rtx_CONST_INT
	movq	56(%rbx), %rcx
	movq	$3, %rdi
	movq	$16, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%rax, 56(%rbx)
.LBB124_11:                             # %if.end35
	movq	(%rsp), %r12            # 8-byte Reload
.LBB124_12:                             # %if.end35
	movq	global_rtl(%rip), %rbx
	movq	$72, %rdi
	xorq	%rsi, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%r13, %rcx
	movq	16(%rsp), %r15          # 8-byte Reload
	movq	%r15, %r8
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_jump_insn
	movq	%rax, %rbx
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB124_14
# BB#13:                                # %if.then41
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	56(%rbx), %rcx
	movq	$3, %rdi
	movq	$16, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%rax, 56(%rbx)
.LBB124_14:                             # %if.end51
	movq	40(%rsp), %rdx
	testq	%rdx, %rdx
	je	.LBB124_17
# BB#15:                                # %if.then54
	movq	global_rtl(%rip), %rbx
	movq	$72, %rdi
	xorq	%rsi, %rsi
	movq	%r13, %rcx
	movq	%r15, %r8
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_jump_insn
	movq	%rax, %rbx
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB124_17
# BB#16:                                # %if.then60
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	xorq	%rdi, %rdi
	movq	%r12, %rsi
	callq	gen_rtx_CONST_INT
	movq	56(%rbx), %rcx
	movq	$3, %rdi
	movq	$16, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%rax, 56(%rbx)
.LBB124_17:                             # %if.end71
	movq	24(%rsp), %rdi          # 8-byte Reload
	testq	%rdi, %rdi
	je	.LBB124_19
# BB#18:                                # %if.then74
	callq	emit_label
.LBB124_19:                             # %if.end76
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1095:
	.size	ix86_split_fp_branch, .Ltmp1095-ix86_split_fp_branch
	.cfi_endproc

	.globl	ix86_expand_setcc
	.align	16, 0x90
	.type	ix86_expand_setcc,@function
ix86_expand_setcc:                      # @ix86_expand_setcc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1102:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1103:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1104:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1105:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1106:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp1107:
	.cfi_def_cfa_offset 64
.Ltmp1108:
	.cfi_offset %rbx, -48
.Ltmp1109:
	.cfi_offset %r12, -40
.Ltmp1110:
	.cfi_offset %r13, -32
.Ltmp1111:
	.cfi_offset %r14, -24
.Ltmp1112:
	.cfi_offset %r15, -16
	movq	ix86_compare_op0(%rip), %rax
	movl	(%rax), %eax
	movq	%rsi, %r12
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB125_2
# BB#1:                                 # %land.lhs.true
	movzbl	target_flags+3(%rip), %eax
	xorq	%r14, %r14
	testq	$2, %rax
	je	.LBB125_12
.LBB125_2:                              # %if.end
	movl	(%r12), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$131072, %rax           # imm = 0x20000
	jne	.LBB125_3
# BB#5:                                 # %if.end9
	leaq	8(%rsp), %rsi
	leaq	(%rsp), %rdx
	callq	ix86_expand_compare
	movq	$2, %rcx
	movb	%cl, 2(%rax)
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	(%rsp), %rax
	movq	8(%rsp), %rbx
	movq	$1, %r14
	orq	%rbx, %rax
	je	.LBB125_12
# BB#6:                                 # %if.then16
	movq	$2, %rdi
	callq	gen_reg_rtx
	movq	(%rsp), %r13
	movq	%rax, %r15
	testq	%r13, %r13
	je	.LBB125_10
# BB#7:                                 # %if.then22
	cmpq	$0, 8(%rsp)
	jne	.LBB125_8
# BB#9:                                 # %if.end25
	movzbl	(%r13), %edi
	callq	reverse_condition_maybe_unordered
	movl	(%r13), %ecx
	andq	$65535, %rax            # imm = 0xFFFF
	movabsq	$4278190080, %rdx       # imm = 0xFF000000
	andq	%rcx, %rdx
	orq	%rax, %rdx
	orq	$131072, %rdx           # imm = 0x20000
	movl	%edx, (%r13)
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	movq	%r13, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r12, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	gen_andqi3
	jmp	.LBB125_11
.LBB125_10:                             # %if.end32
	movq	$2, %rax
	movb	%al, 2(%rbx)
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	movq	%rbx, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r12, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	gen_iorqi3
.LBB125_11:                             # %return
	movq	%rax, %rdi
	callq	emit_insn
.LBB125_12:                             # %return
	movq	%r14, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB125_3:                              # %if.then8
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_setcc, %rcx
	movq	$7980, %rsi             # imm = 0x1F2C
	jmp	.LBB125_4
.LBB125_8:                              # %if.then24
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_setcc, %rcx
	movq	$7997, %rsi             # imm = 0x1F3D
.LBB125_4:                              # %if.then8
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1113:
	.size	ix86_expand_setcc, .Ltmp1113-ix86_expand_setcc
	.cfi_endproc

	.globl	ix86_expand_int_movcc
	.align	16, 0x90
	.type	ix86_expand_int_movcc,@function
ix86_expand_int_movcc:                  # @ix86_expand_int_movcc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1120:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1121:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1122:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1123:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1124:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp1125:
	.cfi_def_cfa_offset 128
.Ltmp1126:
	.cfi_offset %rbx, -48
.Ltmp1127:
	.cfi_offset %r12, -40
.Ltmp1128:
	.cfi_offset %r13, -32
.Ltmp1129:
	.cfi_offset %r14, -24
.Ltmp1130:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movq	8(%r12), %rax
	movq	(%r12), %rcx
	movzbl	(%rax), %r13d
	movzbl	2(%rcx), %r14d
	leaq	-109(%r13), %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$1, %rax
	ja	.LBB126_13
# BB#1:                                 # %land.lhs.true
	movq	ix86_compare_op1(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB126_13
# BB#2:                                 # %land.lhs.true
	cmpq	$3, %r14
	je	.LBB126_13
# BB#3:                                 # %land.lhs.true10
	movq	8(%rax), %rdi
	cmpq	$-1, %rdi
	je	.LBB126_13
# BB#4:                                 # %land.lhs.true13
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB126_7
# BB#5:                                 # %lor.lhs.false14
	movq	ix86_compare_op0(%rip), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB126_7
# BB#6:                                 # %lor.lhs.false14
	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
	je	.LBB126_13
.LBB126_7:                              # %land.lhs.true24
	movq	16(%r12), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB126_13
# BB#8:                                 # %land.lhs.true29
	movq	24(%r12), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB126_13
# BB#9:                                 # %if.then
	cmpq	$110, %r13
	jne	.LBB126_10
# BB#11:                                # %if.then
	movabsq	$1, %rax
	jmp	.LBB126_12
.LBB126_10:
	movabsq	$0, %rax
.LBB126_12:                             # %if.then
	movq	ix86_compare_op0(%rip), %rcx
	movzbl	2(%rcx), %esi
	leaq	108(%rax,%rax,2), %r13
	incq	%rdi
	callq	gen_int_mode
	movq	%rax, ix86_compare_op1(%rip)
.LBB126_13:                             # %if.end42
	callq	start_sequence
	leaq	72(%rsp), %rsi
	leaq	64(%rsp), %rdx
	movq	%r13, %rdi
	callq	ix86_expand_compare
	movq	%rax, %r15
	callq	gen_sequence
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	end_sequence
	cmpq	$3, %r14
	je	.LBB126_86
# BB#14:                                # %land.lhs.true48
	movzbl	(%r15), %esi
	cmpq	$5, %r14
	jne	.LBB126_16
# BB#15:                                # %lor.lhs.false50
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB126_86
.LBB126_16:                             # %land.lhs.true53
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB126_86
# BB#17:                                # %land.lhs.true58
	movq	24(%r12), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB126_86
# BB#18:                                # %if.then63
	movq	(%r12), %rdi
	movq	8(%rax), %rbx
	movq	8(%rcx), %rdx
	cmpq	$111, %rsi
	movabsq	$0, %rax
	movabsq	$1, %r8
	movq	%rax, %rcx
	je	.LBB126_20
# BB#19:                                # %if.then63
	movq	%r8, %rcx
.LBB126_20:                             # %if.then63
	cmpq	$108, %rsi
	je	.LBB126_22
# BB#21:                                # %if.then63
	movq	%r8, %rax
.LBB126_22:                             # %if.then63
	cmpq	$0, 72(%rsp)
	jne	.LBB126_49
# BB#23:                                # %if.then63
	andq	%rax, %rcx
	jne	.LBB126_49
# BB#24:                                # %if.then63
	movq	64(%rsp), %rax
	testq	%rax, %rax
	jne	.LBB126_49
# BB#25:                                # %if.then80
	cmpq	$111, %rsi
	jne	.LBB126_26
# BB#27:                                # %if.then82
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%rdi, %r15
	movq	$111, %rdi
	movq	%rdx, %r12
	callq	reverse_condition
	movq	%r13, %rdi
	callq	reverse_condition
	movq	%r12, %r13
	movq	%r15, %rdi
	movq	%rbx, %r15
	jmp	.LBB126_28
.LBB126_49:                             # %if.end151
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	subq	%rdx, %rdi
	js	.LBB126_51
# BB#50:
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rdx
	jmp	.LBB126_56
.LBB126_26:
	movq	%rdx, %r15
	movq	%rbx, %r13
.LBB126_28:                             # %if.end88
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	ix86_compare_op0(%rip), %rsi
	subq	%r15, %r13
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	jne	.LBB126_30
# BB#29:                                # %lor.lhs.false91
	movq	ix86_compare_op1(%rip), %rsi
	movq	%r15, 32(%rsp)          # 8-byte Spill
	movq	48(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rdi
	callq	reg_overlap_mentioned_p
	testq	%rbx, %rax
	movq	%r15, %r12
	movq	32(%rsp), %r15          # 8-byte Reload
	je	.LBB126_31
.LBB126_30:                             # %if.then94
	movq	%r14, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r12
.LBB126_31:                             # %if.end96
	movq	56(%rsp), %rdi          # 8-byte Reload
	callq	emit_insn
	movq	%r12, %rdi
	cmpq	$5, %r14
	jne	.LBB126_33
# BB#32:                                # %if.then100
	callq	gen_x86_movdicc_0_m1_rex64
	jmp	.LBB126_34
.LBB126_33:                             # %if.else103
	callq	gen_x86_movsicc_0_m1
.LBB126_34:                             # %if.end106
	movq	%rax, %rdi
	callq	emit_insn
	cmpq	$1, %r13
	movq	40(%rsp), %rax          # 8-byte Reload
	jne	.LBB126_37
# BB#35:                                # %if.then109
	testq	%rax, %rax
	je	.LBB126_47
# BB#36:                                # %if.then111
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	jmp	.LBB126_45
.LBB126_37:                             # %if.else115
	cmpq	$-1, %r15
	je	.LBB126_38
# BB#39:                                # %if.else121
	cmpq	$-1, %r13
	jne	.LBB126_43
# BB#40:                                # %if.else121
	testq	%rax, %rax
	je	.LBB126_43
# BB#41:                                # %if.then126
	movq	$86, %rsi
	movq	$1, %r8
	movq	%r14, %rdi
	movq	%r12, %rdx
	movq	%r12, %rcx
	callq	expand_simple_unop
	movq	%rax, %r12
	testq	%r15, %r15
	je	.LBB126_47
# BB#42:                                # %if.then129
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	jmp	.LBB126_45
.LBB126_51:                             # %if.then155
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	ix86_compare_op0(%rip), %rax
	movzbl	2(%rax), %eax
	movl	mode_class(,%rax,4), %ecx
	negq	%rdi
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	cmpq	$8, %rcx
	ja	.LBB126_54
# BB#52:                                # %if.then155
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	je	.LBB126_54
# BB#53:                                # %if.then181
	movq	%rsi, %rdi
	callq	reverse_condition_maybe_unordered
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r13, %rdi
	callq	reverse_condition_maybe_unordered
	jmp	.LBB126_55
.LBB126_54:                             # %if.else184
	movq	%rsi, %rdi
	callq	reverse_condition
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r13, %rdi
	callq	reverse_condition
.LBB126_55:                             # %if.end188
	movq	%rax, %r13
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rdi          # 8-byte Reload
.LBB126_56:                             # %if.end188
	cmpq	$9, %rdi
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	ja	.LBB126_74
# BB#57:                                # %if.end188
	movq	$1, %rax
	movq	%rdi, %rcx
	shlq	%cl, %rax
	testq	$830, %rax              # imm = 0x33E
	je	.LBB126_74
# BB#58:                                # %land.lhs.true209
	cmpq	$5, %r14
	jne	.LBB126_60
# BB#59:                                # %lor.lhs.false212
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	callq	gen_rtx_CONST_INT
	movq	%rax, %rdi
	callq	x86_64_sign_extended_value
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	testq	%rbx, %rax
	je	.LBB126_74
.LBB126_60:                             # %if.then216
	movq	ix86_compare_op0(%rip), %rdx
	movq	ix86_compare_op1(%rip), %rcx
	movq	$1, (%rsp)
	xorq	%r8, %r8
	xorq	%r9, %r9
	xorq	%r15, %r15
	movq	%rdi, %rbx
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %rsi
	callq	emit_store_flag
	movq	%rbx, %rcx
	movq	%rax, %r13
	cmpq	$1, %rcx
	movq	%r13, %rbx
	je	.LBB126_63
# BB#61:                                # %if.else224
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rcx, %r15
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$78, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rbx
	testq	$1, %r15
	movq	$1, %r15
	je	.LBB126_63
# BB#62:                                # %if.then231
	movq	$75, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rbx
	movq	$2, %r15
.LBB126_63:                             # %if.end235
	movq	32(%rsp), %rsi          # 8-byte Reload
	testq	%rsi, %rsi
	je	.LBB126_65
# BB#64:                                # %if.then238
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$75, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rbx
	incq	%r15
.LBB126_65:                             # %if.end242
	cmpq	%r13, %rbx
	je	.LBB126_72
# BB#66:                                # %land.lhs.true245
	movzbl	(%rbx), %eax
	cmpq	$63, %rax
	jne	.LBB126_68
# BB#67:                                # %lor.lhs.false250
	movq	8(%rbx), %rax
	cmpq	%r13, %rax
	je	.LBB126_72
.LBB126_68:                             # %if.then255
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r15
	cmpq	$1, %r15
	jne	.LBB126_70
# BB#69:                                # %if.then258
	movq	$52, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %r14
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r13, %rdx
	movq	%rbx, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rcx
	movq	$2, %rdi
	xorq	%rax, %rax
	movq	%rcx, %rsi
	movq	%r14, %rdx
	callq	gen_rtvec
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	jmp	.LBB126_71
.LBB126_74:                             # %if.end278
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	movq	24(%rsp), %rdi          # 8-byte Reload
	jne	.LBB126_86
# BB#75:                                # %land.lhs.true280
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$104, %rax
	jne	.LBB126_86
# BB#76:                                # %lor.lhs.false283
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB126_77
.LBB126_86:                             # %if.end338
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$104, %rax
	jne	.LBB126_103
# BB#87:                                # %lor.lhs.false342
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB126_88
.LBB126_103:                            # %if.end429
	movq	16(%r12), %rdi
	movq	%r14, %rsi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	jne	.LBB126_105
# BB#104:                               # %if.then433
	movq	16(%r12), %rsi
	movq	%r14, %rdi
	callq	force_reg
	movq	%rax, 16(%r12)
.LBB126_105:                            # %if.end437
	movq	24(%r12), %rdi
	movq	%r14, %rsi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	jne	.LBB126_107
# BB#106:                               # %if.then441
	movq	24(%r12), %rsi
	movq	%r14, %rdi
	callq	force_reg
	movq	%rax, 24(%r12)
.LBB126_107:                            # %if.end445
	cmpq	$0, 64(%rsp)
	je	.LBB126_110
# BB#108:                               # %land.lhs.true447
	movq	(%r12), %rdi
	movq	24(%r12), %rsi
	callq	reg_overlap_mentioned_p
	testq	%rbx, %rax
	je	.LBB126_110
# BB#109:                               # %if.then452
	movq	%r14, %rdi
	callq	gen_reg_rtx
	movq	24(%r12), %rsi
	movq	%rbx, %r13
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	emit_move_insn
	movq	%rbx, 24(%r12)
	movq	%r13, %rbx
.LBB126_110:                            # %if.end459
	cmpq	$0, 72(%rsp)
	je	.LBB126_113
# BB#111:                               # %land.lhs.true461
	movq	(%r12), %rdi
	movq	16(%r12), %rsi
	callq	reg_overlap_mentioned_p
	testq	%rbx, %rax
	je	.LBB126_113
# BB#112:                               # %if.then466
	movq	%r14, %rdi
	callq	gen_reg_rtx
	movq	16(%r12), %rsi
	movq	%rbx, %r13
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	emit_move_insn
	movq	%rbx, 16(%r12)
	movq	%r13, %rbx
.LBB126_113:                            # %if.end473
	movq	16(%r12), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%rbx, %rax
	jne	.LBB126_116
# BB#114:                               # %land.lhs.true477
	movq	24(%r12), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%rbx, %rax
	jne	.LBB126_116
# BB#115:                               # %if.then481
	movq	16(%r12), %rsi
	movq	%r14, %rdi
	callq	force_reg
	movq	%rax, 16(%r12)
.LBB126_116:                            # %if.end485
	movq	56(%rsp), %rdi          # 8-byte Reload
	callq	emit_insn
	movq	(%r12), %rbx
	movq	16(%r12), %rcx
	movq	24(%r12), %r8
	movq	$72, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	64(%rsp), %rdx
	testq	%rdx, %rdx
	je	.LBB126_118
# BB#117:                               # %if.then494
	movq	(%r12), %rbx
	movq	24(%r12), %rcx
	movq	$72, %rdi
	movq	%r14, %rsi
	movq	%rbx, %r8
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
.LBB126_118:                            # %if.end501
	movq	72(%rsp), %rdx
	testq	%rdx, %rdx
	movq	$1, %r15
	je	.LBB126_120
# BB#119:                               # %if.then503
	movq	(%r12), %rbx
	movq	16(%r12), %rcx
	movq	$72, %rdi
	movq	%r14, %rsi
	movq	%rbx, %r8
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
.LBB126_120:                            # %return
	movq	%r15, %rax
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB126_88:                             # %if.then346
	movl	optimize_size(%rip), %eax
	xorq	%r15, %r15
	testq	%rax, %rax
	jne	.LBB126_120
# BB#89:                                # %if.end356
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	movq	24(%r12), %rbx
	cmpq	$54, %rcx
	jne	.LBB126_94
# BB#90:                                # %if.then362
	movq	8(%rax), %rax
	cmpq	$-1, %rax
	jne	.LBB126_91
# BB#93:                                # %if.then379
	movq	const_int_rtx+512(%rip), %rax
	movq	%rax, 24(%r12)
	movabsq	$optab_table+152, %rcx
	jmp	.LBB126_100
.LBB126_94:                             # %if.else384
	movzbl	(%rbx), %ecx
	cmpq	$54, %rcx
	jne	.LBB126_120
# BB#95:                                # %if.then390
	movq	8(%rbx), %rcx
	cmpq	$-1, %rcx
	jne	.LBB126_96
# BB#98:                                # %if.then407
	movq	const_int_rtx+512(%rip), %rcx
	movq	%rcx, 16(%r12)
	movabsq	$optab_table+152, %rcx
	jmp	.LBB126_99
.LBB126_91:                             # %if.then362
	testq	%rax, %rax
	jne	.LBB126_120
# BB#92:                                # %if.then370
	movq	const_int_rtx+504(%rip), %rax
	movq	%rax, 24(%r12)
	movabsq	$optab_table+144, %rcx
	jmp	.LBB126_100
.LBB126_38:                             # %if.then118
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$84, %rsi
	jmp	.LBB126_46
.LBB126_43:                             # %if.else133
	subq	%rax, %r15
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rax, %rbx
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$83, %rsi
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%r14, %rdi
	movq	%r12, %rdx
	movq	%rax, %rcx
	movq	%r12, %r8
	callq	expand_simple_binop
	movq	%rbx, %rsi
	movq	%rax, %r12
	testq	%rsi, %rsi
	je	.LBB126_47
# BB#44:                                # %if.then139
	xorq	%rdi, %rdi
.LBB126_45:                             # %if.end145
	callq	gen_rtx_CONST_INT
	movq	$75, %rsi
.LBB126_46:                             # %if.end145
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%r14, %rdi
	movq	%r12, %rdx
	movq	%rax, %rcx
	movq	%r12, %r8
	callq	expand_simple_binop
	movq	%rax, %r12
.LBB126_47:                             # %if.end145
	movq	$1, %r15
	movq	48(%rsp), %rdi          # 8-byte Reload
	cmpq	%rdi, %r12
	je	.LBB126_120
# BB#48:                                # %if.then148
	movq	%r12, %rsi
	callq	emit_move_insn
	jmp	.LBB126_120
.LBB126_96:                             # %if.then390
	testq	%rcx, %rcx
	jne	.LBB126_120
# BB#97:                                # %if.then398
	movq	const_int_rtx+504(%rip), %rcx
	movq	%rcx, 16(%r12)
	movabsq	$optab_table+144, %rcx
.LBB126_99:                             # %if.end414
	movq	%rax, %rbx
.LBB126_100:                            # %if.end414
	movq	(%rcx), %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	(%r12), %rax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	movq	%r14, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r13
	movq	%r13, (%r12)
	movq	%r12, %rdi
	callq	ix86_expand_int_movcc
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB126_120
# BB#101:                               # %if.end422
	xorq	%r9, %r9
	movq	$2, (%rsp)
	movq	%r14, %rdi
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	56(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %r8
	callq	expand_binop
	cmpq	%rbx, %rax
	movq	$1, %r15
	je	.LBB126_120
# BB#102:                               # %if.then426
	movq	%rbx, %rdi
.LBB126_85:                             # %if.then333
	movq	%rax, %rsi
	callq	emit_move_insn
	jmp	.LBB126_120
.LBB126_70:                             # %if.else266
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r13, %rdx
	movq	%rbx, %rcx
	callq	gen_rtx_fmt_ee
.LBB126_71:                             # %if.end270
	movq	%rax, %rdi
	callq	emit_insn
.LBB126_72:                             # %if.end270
	movq	(%r12), %rdi
	movq	$1, %r15
	cmpq	%rdi, %r13
	je	.LBB126_120
# BB#73:                                # %if.then274
	movq	%r13, %rsi
	callq	emit_move_insn
	jmp	.LBB126_120
.LBB126_77:                             # %if.then287
	testq	%rdx, %rdx
	je	.LBB126_79
# BB#78:
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	jmp	.LBB126_84
.LBB126_79:                             # %if.then290
	movq	ix86_compare_op0(%rip), %rax
	movzbl	2(%rax), %eax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB126_82
# BB#80:                                # %if.then290
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	je	.LBB126_82
# BB#81:                                # %if.then314
	callq	reverse_condition_maybe_unordered
	movq	%r13, %rdi
	callq	reverse_condition_maybe_unordered
	jmp	.LBB126_83
.LBB126_82:                             # %if.else317
	callq	reverse_condition
	movq	%r13, %rdi
	callq	reverse_condition
.LBB126_83:                             # %if.end321
	movq	%rax, %r13
	xorq	%rbx, %rbx
.LBB126_84:                             # %if.end321
	movq	ix86_compare_op0(%rip), %rdx
	movq	ix86_compare_op1(%rip), %rcx
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	$1, (%rsp)
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %rsi
	callq	emit_store_flag
	movq	const_int_rtx+504(%rip), %rcx
	movq	$0, (%rsp)
	movq	$75, %rsi
	movq	$1, %r9
	movq	$1, %r15
	movq	%r14, %rdi
	movq	%rax, %rdx
	movq	%rax, %r8
	callq	expand_simple_binop
	movq	%rax, %r13
	movq	32(%rsp), %rax          # 8-byte Reload
	subq	%rax, %rbx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$83, %rsi
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%r14, %rdi
	movq	%r13, %rdx
	movq	%rax, %rcx
	movq	%r13, %r8
	callq	expand_simple_binop
	movq	%rax, %rbx
	xorq	%rdi, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	gen_rtx_CONST_INT
	movq	$75, %rsi
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%r14, %rdi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	movq	%rbx, %r8
	callq	expand_simple_binop
	movq	(%r12), %rdi
	cmpq	%rdi, %rax
	je	.LBB126_120
	jmp	.LBB126_85
.Ltmp1131:
	.size	ix86_expand_int_movcc, .Ltmp1131-ix86_expand_int_movcc
	.cfi_endproc

	.globl	ix86_expand_fp_movcc
	.align	16, 0x90
	.type	ix86_expand_fp_movcc,@function
ix86_expand_fp_movcc:                   # @ix86_expand_fp_movcc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1138:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1139:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1140:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1141:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1142:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp1143:
	.cfi_def_cfa_offset 80
.Ltmp1144:
	.cfi_offset %rbx, -48
.Ltmp1145:
	.cfi_offset %r12, -40
.Ltmp1146:
	.cfi_offset %r13, -32
.Ltmp1147:
	.cfi_offset %r14, -24
.Ltmp1148:
	.cfi_offset %r15, -16
	movl	ix86_fpmath(%rip), %edx
	movq	%rdi, %r12
	andq	$2, %rdx
	je	.LBB127_2
# BB#1:                                 # %land.lhs.true
	movq	(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$983040, %rsi           # imm = 0xF0000
	je	.LBB127_5
.LBB127_2:                              # %lor.lhs.false
	movzbl	target_flags+2(%rip), %eax
	testq	$4, %rax
	je	.LBB127_49
# BB#3:                                 # %lor.lhs.false
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdx
	je	.LBB127_49
# BB#4:                                 # %land.lhs.true10
	movq	(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB127_49
.LBB127_5:                              # %land.lhs.true16
	movq	ix86_compare_op0(%rip), %r14
	movl	(%r14), %edx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB127_49
# BB#6:                                 # %land.lhs.true25
	movzbl	target_flags(%rip), %edx
	testq	$16, %rdx
	je	.LBB127_9
# BB#7:                                 # %lor.lhs.false27
	movq	8(%r12), %rdx
	movzbl	(%rdx), %edx
	cmpq	$114, %rdx
	je	.LBB127_49
# BB#8:                                 # %lor.lhs.false27
	cmpq	$119, %rdx
	je	.LBB127_49
.LBB127_9:                              # %land.lhs.true37
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB127_13
# BB#10:                                # %land.lhs.true47
	movl	8(%rax), %eax
	leaq	-21(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB127_13
# BB#11:                                # %lor.lhs.false57
	leaq	-45(%rax), %rdx
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB127_13
# BB#12:                                # %lor.lhs.false57
	andq	%rcx, %rax
	cmpq	$53, %rax
	jae	.LBB127_13
.LBB127_49:                             # %if.end234
	movq	8(%r12), %rax
	movzbl	(%rax), %r15d
	leaq	24(%rsp), %rsi
	leaq	16(%rsp), %rdx
	movq	%r15, %rdi
	callq	ix86_expand_compare
	movq	%rax, %r14
	movzbl	(%r14), %edx
	movzbl	rtx_class(%rdx), %eax
	cmpq	$60, %rax
	jne	.LBB127_72
# BB#50:                                # %if.end7.i
	movq	8(%r14), %rax
	movzbl	2(%rax), %eax
	leaq	-57(%rax), %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	$1, %rcx
	ja	.LBB127_67
# BB#51:                                # %if.then16.i
	leaq	-102(%rdx), %rbx
	andq	%rsi, %rbx
	cmpq	$17, %rbx
	ja	.LBB127_58
# BB#52:                                # %if.then16.i
	xorq	%rcx, %rcx
	xorq	%rdi, %rdi
	jmpq	*.LJTI127_0(,%rbx,8)
.LBB127_55:                             # %sw.bb4.i.i
	movq	$1, %rdi
	movq	$119, %rdx
	jmp	.LBB127_61
.LBB127_13:                             # %if.then
	movq	8(%r12), %rax
	movq	ix86_compare_op1(%rip), %r13
	movq	16(%r12), %rdi
	movzbl	(%rax), %ebx
	movq	%r13, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB127_14
# BB#15:                                # %if.then82
	movq	%rbx, %rdi
	callq	reverse_condition_maybe_unordered
	movq	%rax, %rbx
	movq	%r13, %rsi
	jmp	.LBB127_16
.LBB127_14:
	movq	%r14, %rsi
	movq	%r13, %r14
.LBB127_16:                             # %if.end
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	16(%r12), %rdi
	callq	rtx_equal_p
	movq	%r15, %r13
	testq	%r13, %rax
	je	.LBB127_32
# BB#17:                                # %land.lhs.true89
	movq	24(%r12), %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB127_32
# BB#18:                                # %if.then93
	andq	%r13, %rbx
	cmpq	$105, %rbx
	jne	.LBB127_19
# BB#26:                                # %if.then127
	movq	(%r12), %rsi
	movzbl	2(%rsi), %edi
	callq	force_reg
	movq	%rax, (%r12)
	xorq	%rsi, %rsi
	movq	8(%rsp), %rbx           # 8-byte Reload
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB127_27
# BB#28:                                # %if.then137
	movq	(%r12), %rax
	movzbl	2(%rax), %edi
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %rsi
	jmp	.LBB127_29
.LBB127_19:                             # %if.then93
	cmpq	$107, %rbx
	jne	.LBB127_32
# BB#20:                                # %if.then95
	movq	(%r12), %rsi
	movzbl	2(%rsi), %edi
	callq	force_reg
	movq	%rax, (%r12)
	xorq	%rsi, %rsi
	movq	8(%rsp), %rbx           # 8-byte Reload
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB127_21
# BB#22:                                # %if.then105
	movq	(%r12), %rax
	movzbl	2(%rax), %edi
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %rsi
	jmp	.LBB127_23
.LBB127_32:                             # %if.end159
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	addq	$-102, %rcx
	andq	%r13, %rcx
	cmpq	$17, %rcx
	ja	.LBB127_38
# BB#33:                                # %if.end159
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$27699, %rdx            # imm = 0x6C33
	jne	.LBB127_36
# BB#34:                                # %if.end159
	shlq	%cl, %rax
	testq	$233484, %rax           # imm = 0x3900C
	je	.LBB127_38
# BB#35:                                # %sse_comparison_operator.exit
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	jne	.LBB127_38
.LBB127_36:                             # %lor.lhs.false163
	movq	(%r12), %rdi
	movq	ix86_compare_op1(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB127_39
# BB#37:                                # %land.lhs.true167
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	jne	.LBB127_39
.LBB127_38:                             # %if.then170
	movq	ix86_compare_op0(%rip), %rax
	movq	ix86_compare_op1(%rip), %rcx
	movq	%rcx, ix86_compare_op0(%rip)
	movq	%rax, ix86_compare_op1(%rip)
	movq	8(%r12), %rax
	movzbl	(%rax), %edi
	callq	swap_condition
	movq	ix86_compare_op0(%rip), %rdx
	movq	ix86_compare_op1(%rip), %rcx
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	gen_rtx_fmt_ee
	movq	%rax, 8(%r12)
.LBB127_39:                             # %if.end179
	movq	(%r12), %rdi
	movq	24(%r12), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB127_40
# BB#41:                                # %land.lhs.true184
	movzbl	target_flags(%rip), %eax
	movq	8(%r12), %rsi
	testq	$16, %rax
	je	.LBB127_45
# BB#42:                                # %lor.lhs.false187
	movl	(%rsi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$103, %rcx
	jne	.LBB127_45
	jmp	.LBB127_43
.LBB127_40:                             # %if.end179.lor.lhs.false192_crit_edge
	movq	8(%r12), %rsi
	movl	(%rsi), %eax
.LBB127_43:                             # %lor.lhs.false192
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$102, %rax
	jne	.LBB127_46
# BB#44:                                # %land.lhs.true197
	movzbl	target_flags(%rip), %eax
	testq	$16, %rax
	je	.LBB127_46
.LBB127_45:                             # %if.then200
	movq	16(%r12), %rax
	movq	24(%r12), %rcx
	movq	%rcx, 16(%r12)
	movq	%rax, 24(%r12)
	movzbl	(%rsi), %edi
	callq	reverse_condition_maybe_unordered
	movq	ix86_compare_op0(%rip), %rdx
	movq	ix86_compare_op1(%rip), %rcx
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	gen_rtx_fmt_ee
	movq	%rax, %rsi
	movq	%rsi, 8(%r12)
.LBB127_46:                             # %if.end213
	movq	(%r12), %rdi
	movq	16(%r12), %rdx
	movl	(%rdi), %eax
	movq	24(%r12), %rcx
	movq	ix86_compare_op0(%rip), %r8
	movq	ix86_compare_op1(%rip), %r9
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB127_48
# BB#47:                                # %if.then219
	callq	gen_sse_movsfcc
	jmp	.LBB127_85
.LBB127_48:                             # %if.else226
	callq	gen_sse_movdfcc
	jmp	.LBB127_85
.LBB127_54:                             # %sw.bb3.i.i
	movq	$1, %rcx
	movq	$114, %rdx
	jmp	.LBB127_60
.LBB127_53:                             # %sw.bb2.i.i
	movq	$1, %rcx
	movq	$117, %rdx
	jmp	.LBB127_60
.LBB127_59:                             # %sw.bb1.i.i
	movq	$1, %rcx
	movq	$118, %rdx
.LBB127_60:                             # %sw.epilog.i.i
	xorq	%rdi, %rdi
	jmp	.LBB127_61
.LBB127_56:                             # %sw.bb5.i.i
	movq	$1, %rdi
	movq	$104, %rdx
	jmp	.LBB127_61
.LBB127_57:                             # %sw.bb6.i.i
	movq	$1, %rdi
	movq	$105, %rdx
.LBB127_61:                             # %sw.epilog.i.i
	orq	%rcx, %rdi
	cmpq	$1, %rdi
	jne	.LBB127_63
# BB#62:                                # %sw.epilog.i.i
	movl	target_flags(%rip), %ecx
	andq	$16, %rcx
	testq	%rsi, %rcx
	jne	.LBB127_72
.LBB127_63:                             # %if.end23.i
	leaq	-104(%rdx), %rcx
	andq	%rsi, %rcx
	cmpq	$15, %rcx
	ja	.LBB127_72
# BB#64:                                # %if.end23.i
	movq	$1, %rdi
	movq	$1, %rbx
	shlq	%cl, %rbx
	testq	$24579, %rbx            # imm = 0x6003
	jne	.LBB127_70
# BB#65:                                # %if.end23.i
	shlq	%cl, %rdi
	testq	$768, %rdi              # imm = 0x300
	je	.LBB127_66
.LBB127_67:                             # %if.end24.i
	addq	$-102, %rdx
	andq	%rsi, %rdx
	cmpq	$11, %rdx
	ja	.LBB127_72
# BB#68:                                # %if.end24.i
	movq	$1, %rsi
	movq	$1, %rdi
	movq	%rdx, %rcx
	shlq	%cl, %rdi
	testq	$3075, %rdi             # imm = 0xC03
	jne	.LBB127_74
# BB#69:                                # %if.end24.i
	movq	%rdx, %rcx
	shlq	%cl, %rsi
	testq	$960, %rsi              # imm = 0x3C0
	je	.LBB127_72
.LBB127_70:                             # %sw.bb.i
	cmpq	$58, %rax
	ja	.LBB127_72
# BB#71:                                # %sw.bb.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$436849163854938112, %rax # imm = 0x610000000000000
	testq	%rax, %rdx
	jne	.LBB127_74
	jmp	.LBB127_72
.LBB127_58:                             # %sw.default.i.i
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.ix86_fp_comparison_codes, %rdx
	movq	$7379, %rsi             # imm = 0x1CD3
	callq	fancy_abort
.LBB127_66:                             # %if.end23.i
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$33792, %rax            # imm = 0x8400
	jne	.LBB127_74
.LBB127_72:                             # %if.then241
	movq	24(%rsp), %rax
	movq	16(%rsp), %rcx
	orq	%rax, %rcx
	jne	.LBB127_87
# BB#73:                                # %if.end246
	movq	$2, %rdi
	callq	gen_reg_rtx
	movq	%rax, %rbx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	ix86_expand_setcc
	movq	const_int_rtx+512(%rip), %rax
	movq	%rbx, ix86_compare_op0(%rip)
	movq	%rax, ix86_compare_op1(%rip)
	leaq	24(%rsp), %rsi
	leaq	16(%rsp), %rdx
	movq	$102, %rdi
	callq	ix86_expand_compare
	movq	%rax, %r14
.LBB127_74:                             # %if.end250
	cmpq	$0, 16(%rsp)
	je	.LBB127_77
# BB#75:                                # %land.lhs.true252
	movq	(%r12), %rdi
	movq	24(%r12), %rsi
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB127_77
# BB#76:                                # %if.then257
	movq	(%r12), %rax
	movzbl	2(%rax), %edi
	callq	gen_reg_rtx
	movq	24(%r12), %rsi
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	emit_move_insn
	movq	%rbx, 24(%r12)
.LBB127_77:                             # %if.end266
	cmpq	$0, 24(%rsp)
	je	.LBB127_78
# BB#79:                                # %land.lhs.true268
	movq	(%r12), %rdi
	movq	16(%r12), %rsi
	leaq	16(%r12), %r15
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB127_81
# BB#80:                                # %if.then273
	movq	(%r12), %rax
	movzbl	2(%rax), %edi
	callq	gen_reg_rtx
	movq	16(%r12), %rsi
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	emit_move_insn
	movq	%rbx, 16(%r12)
	jmp	.LBB127_81
.LBB127_78:                             # %if.end266.if.end282_crit_edge
	leaq	16(%r12), %r15
.LBB127_81:                             # %if.end282
	movq	(%r12), %rbx
	movq	(%r15), %rcx
	movq	24(%r12), %r8
	movzbl	2(%rbx), %esi
	movq	$72, %rdi
	movq	%r14, %rdx
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	16(%rsp), %rdx
	testq	%rdx, %rdx
	je	.LBB127_83
# BB#82:                                # %if.then294
	movq	(%r12), %rbx
	movq	24(%r12), %rcx
	movzbl	2(%rbx), %esi
	movq	$72, %rdi
	movq	%rbx, %r8
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
.LBB127_83:                             # %if.end305
	movq	24(%rsp), %rdx
	testq	%rdx, %rdx
	je	.LBB127_86
# BB#84:                                # %if.then307
	movq	(%r12), %rbx
	movq	(%r15), %rcx
	movzbl	2(%rbx), %esi
	movq	$72, %rdi
	movq	%rbx, %r8
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
.LBB127_85:                             # %return
	movq	%rax, %rdi
	callq	emit_insn
.LBB127_86:                             # %return
	movq	$1, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB127_27:
	movq	%rbx, %rsi
.LBB127_29:                             # %if.end143
	movq	(%r12), %rdi
	movl	(%rdi), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	movq	%r14, %rdx
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB127_31
# BB#30:                                # %if.then149
	callq	gen_maxsf3
	jmp	.LBB127_85
.LBB127_31:                             # %if.else153
	callq	gen_maxdf3
	jmp	.LBB127_85
.LBB127_21:
	movq	%rbx, %rsi
.LBB127_23:                             # %if.end111
	movq	(%r12), %rdi
	movl	(%rdi), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	movq	%r14, %rdx
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB127_25
# BB#24:                                # %if.then117
	callq	gen_minsf3
	jmp	.LBB127_85
.LBB127_25:                             # %if.else
	callq	gen_mindf3
	jmp	.LBB127_85
.LBB127_87:                             # %if.then245
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_fp_movcc, %rcx
	movq	$8532, %rsi             # imm = 0x2154
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1149:
	.size	ix86_expand_fp_movcc, .Ltmp1149-ix86_expand_fp_movcc
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI127_0:
	.quad	.LBB127_55
	.quad	.LBB127_54
	.quad	.LBB127_61
	.quad	.LBB127_61
	.quad	.LBB127_53
	.quad	.LBB127_59
	.quad	.LBB127_58
	.quad	.LBB127_58
	.quad	.LBB127_58
	.quad	.LBB127_58
	.quad	.LBB127_61
	.quad	.LBB127_61
	.quad	.LBB127_61
	.quad	.LBB127_56
	.quad	.LBB127_57
	.quad	.LBB127_61
	.quad	.LBB127_61
	.quad	.LBB127_61

	.text
	.globl	ix86_split_long_move
	.align	16, 0x90
	.type	ix86_split_long_move,@function
ix86_split_long_move:                   # @ix86_split_long_move
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1156:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1157:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1158:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1159:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1160:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp1161:
	.cfi_def_cfa_offset 112
.Ltmp1162:
	.cfi_offset %rbx, -48
.Ltmp1163:
	.cfi_offset %r12, -40
.Ltmp1164:
	.cfi_offset %r13, -32
.Ltmp1165:
	.cfi_offset %r14, -24
.Ltmp1166:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movq	(%rbx), %rdi
	movzbl	2(%rdi), %ecx
	movzbl	mode_size(%rcx), %eax
	cmpq	$8, %rax
	jne	.LBB128_9
# BB#1:                                 # %land.lhs.true
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB128_9
# BB#2:                                 # %if.then
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	jne	.LBB128_5
# BB#3:                                 # %land.lhs.true12
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$67174399, %rcx         # imm = 0x400FFFF
	cmpq	$67108932, %rcx         # imm = 0x4000044
	jne	.LBB128_5
# BB#4:                                 # %if.then28
	movq	%rax, %rdi
	callq	get_pool_constant
	movq	%rax, 8(%rbx)
	movq	(%rbx), %rdi
.LBB128_5:                              # %if.end
	xorq	%rsi, %rsi
	callq	push_operand
	movq	(%rbx), %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rax
	je	.LBB128_7
# BB#6:                                 # %if.then37
	movq	%rcx, %rdi
	callq	copy_rtx
	movq	%rax, (%rbx)
	movl	target_flags(%rip), %edx
	movl	(%rax), %esi
	movq	$9, %rcx
	shrq	%cl, %rdx
	andq	$65536, %rdx            # imm = 0x10000
	movabsq	$4278255615, %rcx       # imm = 0xFF00FFFF
	andq	%rsi, %rcx
	orq	%rdx, %rcx
	orq	$262144, %rcx           # imm = 0x40000
	movl	%ecx, (%rax)
	jmp	.LBB128_8
.LBB128_9:                              # %if.end56
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	callq	push_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	movq	$1, %r13
	jne	.LBB128_12
# BB#10:                                # %if.else61
	movq	(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB128_11
# BB#22:                                # %land.lhs.true67
	callq	offsettable_memref_p
	testq	%r12, %rax
	movabsq	$0, %r13
	jne	.LBB128_12
# BB#23:                                # %if.then71
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_long_move, %rcx
	movq	$8753, %rsi             # imm = 0x2231
	jmp	.LBB128_24
.LBB128_11:
	xorq	%r13, %r13
.LBB128_12:                             # %if.end73
	movq	(%rbx), %rax
	movq	8(%rbx), %rdi
	movzbl	2(%rax), %edx
	leaq	40(%rsp), %rsi
	callq	ix86_split_to_parts
	movq	(%rbx), %rdi
	movzbl	2(%rdi), %edx
	movq	%rax, %r14
	leaq	16(%rsp), %rsi
	callq	ix86_split_to_parts
	testq	%r13, %r13
	je	.LBB128_18
# BB#13:                                # %land.lhs.true90
	movq	8(%rbx), %rsi
	movzbl	(%rsi), %eax
	cmpq	$66, %rax
	jne	.LBB128_18
# BB#14:                                # %land.lhs.true96
	movq	global_rtl+16(%rip), %rdi
	callq	reg_overlap_mentioned_p
	testq	%r12, %rax
	je	.LBB128_18
# BB#15:                                # %if.then100
	movq	48(%rsp), %rax
	movq	%r14, %rcx
	andq	%r12, %rcx
	cmpq	$3, %rcx
	jne	.LBB128_17
# BB#16:                                # %if.then103
	movq	56(%rsp), %rcx
	movq	8(%rcx), %rdx
	movzbl	2(%rax), %esi
	movq	%rax, %rdi
	callq	change_address
	movq	%rax, 48(%rsp)
.LBB128_17:                             # %if.end119
	movq	40(%rsp), %rdi
	movq	8(%rax), %rdx
	movzbl	2(%rdi), %esi
	callq	change_address
	movq	%rax, 40(%rsp)
.LBB128_18:                             # %if.end135
	movq	16(%rsp), %rdi
	movzbl	(%rdi), %eax
	xorq	%r15, %r15
	cmpq	$61, %rax
	jne	.LBB128_39
# BB#19:                                # %land.lhs.true142
	movq	40(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	jne	.LBB128_39
# BB#20:                                # %if.then149
	movq	8(%rax), %rsi
	callq	reg_overlap_mentioned_p
	testq	%r12, %rax
	je	.LBB128_21
# BB#25:                                # %if.then149
	movabsq	$1, %r15
	jmp	.LBB128_26
.LBB128_7:                              # %if.else
	movq	$5, %rdi
	movq	%rcx, %rsi
	callq	gen_lowpart
	movq	%rax, (%rbx)
.LBB128_8:                              # %if.end49
	movq	8(%rbx), %rsi
	movq	$5, %rdi
	callq	gen_lowpart
	movq	%rax, 8(%rbx)
	movq	(%rbx), %rdi
	movq	%rax, %rsi
	jmp	.LBB128_72
.LBB128_21:
	movabsq	$0, %r15
.LBB128_26:                             # %if.then149
	movq	40(%rsp), %rax
	movq	24(%rsp), %rdi
	movq	8(%rax), %rsi
	callq	reg_overlap_mentioned_p
	testq	%r12, %rax
	je	.LBB128_28
# BB#27:                                # %if.then149
	incq	%r15
.LBB128_28:                             # %if.then149
	movq	%r14, %rax
	andq	%r12, %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	cmpq	$3, %rax
	jne	.LBB128_35
# BB#29:                                # %if.end187
	movq	40(%rsp), %rax
	movq	32(%rsp), %rdi
	movq	8(%rax), %rsi
	callq	reg_overlap_mentioned_p
	testq	%r12, %rax
	je	.LBB128_30
# BB#31:                                # %if.end187
	movabsq	$1, %rax
	jmp	.LBB128_32
.LBB128_30:
	movabsq	$0, %rax
.LBB128_32:                             # %if.end187
	addq	%rax, %r15
	movq	%r15, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB128_35
# BB#33:                                # %land.lhs.true193
	movq	40(%rsp), %rax
	movq	24(%rsp), %rdi
	movq	8(%rax), %rsi
	callq	reg_overlap_mentioned_p
	testq	%r12, %rax
	movq	$1, %r15
	je	.LBB128_39
# BB#34:                                # %if.then203
	movq	24(%rsp), %rax
	movq	32(%rsp), %rcx
	movq	%rcx, 24(%rsp)
	movq	%rax, 32(%rsp)
	movq	48(%rsp), %rax
	movq	56(%rsp), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB128_38
.LBB128_35:                             # %if.else220
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$2, %rax
	jl	.LBB128_39
# BB#36:                                # %if.then223
	leaq	-1(%r14), %r15
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	40(%rsp), %rax
	movq	$32, %rcx
	sarq	%cl, %r15
	movq	16(%rsp,%r15,8), %rdx
	movq	8(%rax), %rcx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %esi
	movq	40(%rsp), %rdi
	movq	$25, %rcx
	movq	16(%rsp,%r15,8), %rdx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	callq	change_address
	movl	target_flags(%rip), %esi
	movq	%rax, 40(%rsp)
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	addq	$4, %rsi
	movabsq	$4294967292, %rdx       # imm = 0xFFFFFFFC
	andq	%rsi, %rdx
	xorq	%rsi, %rsi
	movq	$1, %rcx
	movq	$1, %r8
	movq	$1, %r15
	movq	%rax, %rdi
	callq	adjust_address_1
	cmpq	$3, (%rsp)              # 8-byte Folded Reload
	movq	%rax, 48(%rsp)
	jne	.LBB128_39
# BB#37:                                # %if.then257
	movq	40(%rsp), %rdi
	xorq	%rsi, %rsi
	movq	$8, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	$1, %r15
	callq	adjust_address_1
.LBB128_38:                             # %if.end266
	movq	%rax, 56(%rsp)
.LBB128_39:                             # %if.end266
	testq	%r13, %r13
	je	.LBB128_54
# BB#40:                                # %if.then268
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB128_41
# BB#45:                                # %if.else291
	movq	48(%rsp), %rdi
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB128_53
# BB#46:                                # %if.then299
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB128_47
# BB#50:                                # %if.then319
	movl	8(%rdi), %esi
	movq	$5, %rdi
	callq	gen_rtx_REG
	jmp	.LBB128_51
.LBB128_54:                             # %if.end355
	movq	16(%rsp), %rdi
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB128_60
# BB#55:                                # %land.lhs.true362
	movq	48(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB128_60
# BB#56:                                # %land.lhs.true369
	movl	8(%rdi), %ecx
	movl	8(%rax), %edx
	cmpq	%rdx, %rcx
	je	.LBB128_65
# BB#57:                                # %lor.lhs.false
	movq	%r14, %rdx
	andq	%r12, %rdx
	cmpq	$3, %rdx
	jne	.LBB128_60
# BB#58:                                # %land.lhs.true384
	movq	56(%rsp), %rsi
	movl	8(%rsi), %edx
	cmpq	%rdx, %rcx
	jne	.LBB128_60
# BB#59:
	movq	%r12, %r15
	jmp	.LBB128_67
.LBB128_60:                             # %lor.lhs.false397
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	$32, %rcx
	sarq	%cl, %r15
	testq	%r15, %r15
	jle	.LBB128_63
# BB#61:                                # %land.lhs.true400
	movq	40(%rsp), %rax
	movq	8(%rax), %rsi
	callq	reg_overlap_mentioned_p
	testq	%r12, %rax
	je	.LBB128_62
.LBB128_65:                             # %if.then410
	movq	%r14, %rax
	andq	%r12, %rax
	cmpq	$3, %rax
	movq	%r12, %r15
	jne	.LBB128_68
# BB#66:                                # %if.then410.if.then413_crit_edge
	movq	16(%rsp), %rdi
	movq	48(%rsp), %rax
	movq	56(%rsp), %rsi
.LBB128_67:                             # %if.then413
	movq	32(%rsp), %rcx
	movq	%rcx, 16(%rbx)
	movq	24(%rsp), %rdx
	movq	%rdx, 24(%rbx)
	movq	%rdi, 32(%rbx)
	movq	%rsi, 40(%rbx)
	movq	%rax, 48(%rbx)
	movq	40(%rsp), %rax
	movq	%rax, 56(%rbx)
	movq	%rcx, %rdi
	jmp	.LBB128_70
.LBB128_41:                             # %if.then271
	andq	%r12, %r14
	cmpq	$3, %r14
	jne	.LBB128_53
# BB#42:                                # %if.then274
	cmpq	$18, 8(%rsp)            # 8-byte Folded Reload
	jne	.LBB128_44
# BB#43:                                # %if.then280
	movq	global_rtl+16(%rip), %rbx
	xorq	%rdi, %rdi
	movq	$-4, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_addsi3
	movq	%rax, %rdi
	callq	emit_insn
.LBB128_44:                             # %if.end284
	movq	32(%rsp), %rdi
	movq	56(%rsp), %rsi
	callq	emit_move_insn
	jmp	.LBB128_53
.LBB128_68:                             # %if.else432
	movq	24(%rsp), %rdi
	movq	%rdi, 16(%rbx)
	movq	16(%rsp), %rax
	movq	%rax, 24(%rbx)
	movq	48(%rsp), %rsi
	movq	%rsi, 40(%rbx)
	movq	40(%rsp), %rax
	movq	%rax, 48(%rbx)
	jmp	.LBB128_70
.LBB128_62:                             # %land.lhs.true400.if.else446_crit_edge
	movq	16(%rsp), %rdi
.LBB128_63:                             # %if.else446
	movq	%r12, %r15
	movq	%rdi, 16(%rbx)
	movq	24(%rsp), %rax
	movq	%r14, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	movq	%rax, 24(%rbx)
	jne	.LBB128_69
# BB#64:                                # %if.then449
	movq	32(%rsp), %rax
	movq	40(%rsp), %rsi
	movq	%rsi, 40(%rbx)
	movq	%rax, 32(%rbx)
	movq	48(%rsp), %rax
	movq	56(%rsp), %rcx
	movq	%rcx, 56(%rbx)
	movq	%rax, 48(%rbx)
	jmp	.LBB128_70
.LBB128_69:                             # %if.else468
	movq	40(%rsp), %rsi
	movq	48(%rsp), %rax
	movq	%rax, 48(%rbx)
	movq	%rsi, 40(%rbx)
.LBB128_70:                             # %if.end482
	callq	emit_move_insn
	movq	24(%rbx), %rdi
	movq	48(%rbx), %rsi
	callq	emit_move_insn
	andq	%r15, %r14
	cmpq	$3, %r14
	jne	.LBB128_73
# BB#71:                                # %if.then491
	movq	32(%rbx), %rdi
	movq	56(%rbx), %rsi
	jmp	.LBB128_72
.LBB128_47:                             # %if.then299
	cmpq	$66, %rax
	jne	.LBB128_49
# BB#48:                                # %if.then306
	movq	$5, %rsi
	xorq	%rdx, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	callq	adjust_address_1
.LBB128_51:                             # %if.end329
	movq	%rax, 48(%rsp)
	movq	40(%rsp), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB128_53
# BB#52:                                # %if.then337
	movq	%rax, 40(%rsp)
.LBB128_53:                             # %if.end344
	movq	24(%rsp), %rdi
	movq	48(%rsp), %rsi
	callq	emit_move_insn
	movq	16(%rsp), %rdi
	movq	40(%rsp), %rsi
.LBB128_72:                             # %cleanup
	callq	emit_move_insn
.LBB128_73:                             # %cleanup
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB128_49:                             # %if.else327
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_long_move, %rcx
	movq	$8834, %rsi             # imm = 0x2282
.LBB128_24:                             # %if.then71
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1167:
	.size	ix86_split_long_move, .Ltmp1167-ix86_split_long_move
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_split_to_parts,@function
ix86_split_to_parts:                    # @ix86_split_to_parts
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1174:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1175:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1176:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1177:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1178:
	.cfi_def_cfa_offset 48
	subq	$144, %rsp
.Ltmp1179:
	.cfi_def_cfa_offset 192
.Ltmp1180:
	.cfi_offset %rbx, -48
.Ltmp1181:
	.cfi_offset %r12, -40
.Ltmp1182:
	.cfi_offset %r13, -32
.Ltmp1183:
	.cfi_offset %r14, -24
.Ltmp1184:
	.cfi_offset %r15, -16
	movzbl	target_flags+3(%rip), %eax
	movq	%rdx, %r14
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movq	%rdi, %rbx
	movq	%rbx, 136(%rsp)
	testq	$2, %rax
	je	.LBB129_1
# BB#3:                                 # %if.else
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %eax
	addq	$4, %rax
	movabsq	$4294967288, %r15       # imm = 0xFFFFFFF8
	andq	%rax, %r15
	movq	$3, %rcx
	jmp	.LBB129_4
.LBB129_1:                              # %if.then
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	movq	$3, %r15
	cmpq	$18, %rax
	je	.LBB129_5
# BB#2:                                 # %cond.false
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %r15d
	movq	$2, %rcx
.LBB129_4:                              # %if.end
	shrq	%cl, %r15
.LBB129_5:                              # %if.end
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB129_9
# BB#6:                                 # %land.lhs.true
	movl	8(%rbx), %edx
	addq	$-29, %rdx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	cmpq	$7, %rsi
	jbe	.LBB129_7
.LBB129_9:                              # %if.end17
	movq	%r15, %rdx
	andq	$536870910, %rdx        # imm = 0x1FFFFFFE
	cmpq	$2, %rdx
	jne	.LBB129_10
# BB#11:                                # %if.end23
	cmpq	$66, %rcx
	jne	.LBB129_14
# BB#12:                                # %land.lhs.true28
	movq	8(%rbx), %rdi
	movl	(%rdi), %ecx
	andq	$67174399, %rcx         # imm = 0x400FFFF
	cmpq	$67108932, %rcx         # imm = 0x4000044
	jne	.LBB129_14
# BB#13:                                # %if.then42
	callq	get_pool_constant
	movq	%rax, %rbx
	movq	%rbx, 136(%rsp)
	movl	(%rbx), %eax
.LBB129_14:                             # %if.end46
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB129_18
# BB#15:                                # %land.lhs.true51
	movq	%rbx, %rdi
	callq	offsettable_memref_p
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB129_16
.LBB129_18:                             # %if.else68
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB129_19
# BB#40:                                # %if.else175
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	movq	%r14, %rax
	andq	%r12, %rax
	cmpq	$6, %rax
	jne	.LBB129_42
# BB#41:                                # %if.end181.thread
	movq	24(%rsp), %rdx          # 8-byte Reload
	leaq	8(%rdx), %rcx
	leaq	136(%rsp), %rdi
	movq	$1, %rsi
	callq	split_ti
	jmp	.LBB129_56
.LBB129_19:                             # %if.then71
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%r14, %r12
	andq	%r13, %r12
	cmpq	$5, %r12
	jne	.LBB129_21
# BB#20:                                # %if.then74
	movq	24(%rsp), %rdx          # 8-byte Reload
	leaq	8(%rdx), %rcx
	leaq	136(%rsp), %rdi
	movq	$1, %rsi
	callq	split_di
	jmp	.LBB129_56
.LBB129_42:                             # %if.end181
	addq	$-17, %r14
	andq	%r12, %r14
	cmpq	$1, %r14
	ja	.LBB129_56
# BB#43:                                # %if.then187
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB129_47
# BB#44:                                # %if.then192
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	je	.LBB129_45
# BB#46:                                # %if.end195
	movl	8(%rbx), %esi
	movq	$5, %rdi
	callq	gen_rtx_REG
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	%rax, (%r14)
	movl	8(%rbx), %esi
	incq	%rsi
	movq	$4, %rdi
	callq	gen_rtx_REG
	movq	%rax, 8(%r14)
	jmp	.LBB129_56
.LBB129_16:                             # %if.then54
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB129_17
# BB#55:                                # %if.end58
	movq	%rbx, %rdi
	callq	copy_rtx
	movq	%rax, 136(%rsp)
	movl	target_flags(%rip), %edx
	movl	(%rax), %esi
	movq	$9, %rcx
	shrq	%cl, %rdx
	andq	$65536, %rdx            # imm = 0x10000
	movabsq	$4278255615, %rcx       # imm = 0xFF00FFFF
	andq	%rsi, %rcx
	orq	%rdx, %rcx
	orq	$262144, %rcx           # imm = 0x40000
	movl	%ecx, (%rax)
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rax, 16(%rcx)
	movq	%rax, 8(%rcx)
	movq	%rax, (%rcx)
	jmp	.LBB129_56
.LBB129_21:                             # %if.else77
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB129_26
# BB#22:                                # %if.then82
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	je	.LBB129_23
# BB#24:                                # %if.end85
	movl	8(%rbx), %esi
	movq	$4, %rdi
	callq	gen_rtx_REG
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	%rax, (%r14)
	movl	8(%rbx), %esi
	incq	%rsi
	movq	$4, %rdi
	callq	gen_rtx_REG
	movq	%rax, 8(%r14)
	andq	%r15, %r13
	cmpq	$3, %r13
	jne	.LBB129_56
# BB#25:                                # %if.then100
	movl	8(%rbx), %esi
	addq	$2, %rsi
	movq	$4, %rdi
	callq	gen_rtx_REG
	movq	%rax, 16(%r14)
	jmp	.LBB129_56
.LBB129_26:                             # %if.else108
	movq	%rbx, %rdi
	callq	offsettable_memref_p
	testq	%r13, %rax
	je	.LBB129_29
# BB#27:                                # %if.then111
	movq	$4, %rsi
	xorq	%rdx, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%rbx, %rdi
	callq	adjust_address_1
	movq	%rax, %r12
	movq	%r12, 136(%rsp)
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	%r12, (%rbx)
	movq	$4, %rsi
	movq	$4, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%r12, %rdi
	callq	adjust_address_1
	movq	%rax, 8(%rbx)
	movq	%rbx, %r14
	andq	%r15, %r13
	cmpq	$3, %r13
	jne	.LBB129_56
# BB#28:                                # %if.then118
	movq	$4, %rsi
	movq	$8, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%r12, %rdi
	callq	adjust_address_1
	movq	%rax, 16(%r14)
	jmp	.LBB129_56
.LBB129_47:                             # %if.else208
	movq	%rbx, %rdi
	callq	offsettable_memref_p
	testq	%r12, %rax
	je	.LBB129_49
# BB#48:                                # %if.then211
	movq	$5, %rsi
	xorq	%rdx, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%rbx, %rdi
	callq	adjust_address_1
	movq	%rax, 136(%rsp)
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	%rax, (%rbx)
	movq	$4, %rsi
	movq	$8, %rdx
	movq	$1, %rcx
	movq	$1, %r8
	movq	%rax, %rdi
	callq	adjust_address_1
	movq	%rax, 8(%rbx)
	jmp	.LBB129_56
.LBB129_29:                             # %if.else122
	movzbl	(%rbx), %eax
	cmpq	$55, %rax
	jne	.LBB129_39
# BB#30:                                # %do.body
	movq	24(%rbx), %rax
	movq	16(%rbx), %rcx
	movq	32(%rbx), %rdx
	movq	%rdx, 128(%rsp)
	movq	%rax, 120(%rsp)
	movq	%rcx, 112(%rsp)
	cmpq	$16, %r12
	je	.LBB129_37
# BB#31:                                # %do.body
	addq	$-17, %r14
	andq	%r13, %r14
	cmpq	$1, %r14
	ja	.LBB129_36
# BB#32:                                # %sw.bb
	movzbl	target_flags+3(%rip), %eax
	testq	$1, %rax
	movq	24(%rsp), %rbx          # 8-byte Reload
	je	.LBB129_33
# BB#34:                                # %cond.true150
	movq	128(%rsp), %rax
	movq	%rax, 16(%rsp)
	movq	112(%rsp), %rax
	movq	120(%rsp), %rcx
	movq	%rcx, 8(%rsp)
	leaq	80(%rsp), %rdi
	movq	%rax, (%rsp)
	callq	etartdouble
	jmp	.LBB129_35
.LBB129_49:                             # %if.else216
	movzbl	(%rbx), %eax
	cmpq	$55, %rax
	jne	.LBB129_54
# BB#50:                                # %do.body224
	movq	16(%rbx), %rax
	movq	24(%rbx), %rcx
	movq	32(%rbx), %rdx
	movzbl	target_flags+3(%rip), %esi
	movq	%rdx, 72(%rsp)
	movq	%rcx, 64(%rsp)
	movq	%rax, 56(%rsp)
	testq	$1, %rsi
	je	.LBB129_51
# BB#52:                                # %cond.true252
	movq	72(%rsp), %rax
	movq	%rax, 16(%rsp)
	movq	56(%rsp), %rax
	movq	64(%rsp), %rcx
	movq	%rcx, 8(%rsp)
	leaq	32(%rsp), %rdi
	movq	%rax, (%rsp)
	callq	etartdouble
	jmp	.LBB129_53
.LBB129_37:                             # %sw.bb160
	movq	128(%rsp), %rax
	movq	%rax, 16(%rsp)
	movq	112(%rsp), %rax
	movq	120(%rsp), %rcx
	movq	%rcx, 8(%rsp)
	leaq	80(%rsp), %rdi
	movq	%rax, (%rsp)
	callq	etardouble
	movq	24(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB129_38
.LBB129_51:                             # %cond.true244
	movq	72(%rsp), %rax
	movq	%rax, 16(%rsp)
	movq	56(%rsp), %rax
	movq	64(%rsp), %rcx
	movq	%rcx, 8(%rsp)
	leaq	32(%rsp), %rdi
	movq	%rax, (%rsp)
	callq	etarldouble
.LBB129_53:                             # %cond.end257
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	40(%rsp), %rdi
	movl	32(%rsp), %eax
	movq	$32, %rcx
	shlq	%cl, %rdi
	orq	%rax, %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, (%rbx)
	movq	48(%rsp), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, 8(%rbx)
	jmp	.LBB129_56
.LBB129_33:                             # %cond.true142
	movq	128(%rsp), %rax
	movq	%rax, 16(%rsp)
	movq	112(%rsp), %rax
	movq	120(%rsp), %rcx
	movq	%rcx, 8(%rsp)
	leaq	80(%rsp), %rdi
	movq	%rax, (%rsp)
	callq	etarldouble
.LBB129_35:                             # %cond.end155
	movq	96(%rsp), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, 16(%rbx)
.LBB129_38:                             # %sw.epilog
	movq	88(%rsp), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, 8(%rbx)
	movq	80(%rsp), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, (%rbx)
.LBB129_56:                             # %if.end276
	movq	%r15, %rax
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB129_7:                              # %if.then16
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_to_parts, %rcx
	movq	$8593, %rsi             # imm = 0x2191
	jmp	.LBB129_8
.LBB129_10:                             # %if.then22
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_to_parts, %rcx
	movq	$8595, %rsi             # imm = 0x2193
	jmp	.LBB129_8
.LBB129_45:                             # %if.then194
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_to_parts, %rcx
	movq	$8673, %rsi             # imm = 0x21E1
	jmp	.LBB129_8
.LBB129_17:                             # %if.then57
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_to_parts, %rcx
	movq	$8609, %rsi             # imm = 0x21A1
	jmp	.LBB129_8
.LBB129_23:                             # %if.then84
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_to_parts, %rcx
	movq	$8624, %rsi             # imm = 0x21B0
	jmp	.LBB129_8
.LBB129_39:                             # %if.else170
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_to_parts, %rcx
	movq	$8661, %rsi             # imm = 0x21D5
	jmp	.LBB129_8
.LBB129_36:                             # %sw.default
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_to_parts, %rcx
	movq	$8655, %rsi             # imm = 0x21CF
	jmp	.LBB129_8
.LBB129_54:                             # %if.else270
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_split_to_parts, %rcx
	movq	$8702, %rsi             # imm = 0x21FE
.LBB129_8:                              # %if.then16
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1185:
	.size	ix86_split_to_parts, .Ltmp1185-ix86_split_to_parts
	.cfi_endproc

	.globl	ix86_split_ashldi
	.align	16, 0x90
	.type	ix86_split_ashldi,@function
ix86_split_ashldi:                      # @ix86_split_ashldi
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1192:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1193:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1194:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1195:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1196:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp1197:
	.cfi_def_cfa_offset 80
.Ltmp1198:
	.cfi_offset %rbx, -48
.Ltmp1199:
	.cfi_offset %r12, -40
.Ltmp1200:
	.cfi_offset %r13, -32
.Ltmp1201:
	.cfi_offset %r14, -24
.Ltmp1202:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movq	16(%rbx), %rax
	movzbl	(%rax), %eax
	movq	%rsi, %r14
	cmpq	$54, %rax
	jne	.LBB130_8
# BB#1:                                 # %if.then
	leaq	16(%rsp), %rdx
	leaq	(%rsp), %rcx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	split_di
	movq	16(%rbx), %rax
	movq	8(%rax), %r14
	andq	$63, %r14
	cmpq	$32, %r14
	jb	.LBB130_5
# BB#2:                                 # %if.then6
	movq	(%rsp), %rbx
	movq	24(%rsp), %rsi
	movq	%rbx, %rdi
	callq	emit_move_insn
	movq	16(%rsp), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	callq	emit_move_insn
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$33, %rax
	jb	.LBB130_20
# BB#3:                                 # %if.then13
	addq	$-32, %r14
	jmp	.LBB130_4
.LBB130_8:                              # %if.else41
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB130_10
# BB#9:                                 # %if.then46
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	emit_move_insn
.LBB130_10:                             # %if.end50
	leaq	16(%rsp), %rdx
	leaq	(%rsp), %rcx
	movq	$1, %rsi
	movq	$1, %r13
	movq	%rbx, %rdi
	callq	split_di
	movq	(%rsp), %r12
	movq	16(%rsp), %r15
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	gen_x86_shld_1
	movq	%rax, %rdi
	callq	emit_insn
	movq	16(%rbx), %rdx
	movq	%r15, %rdi
	movq	%r15, %rsi
	callq	gen_ashlsi3
	movq	%rax, %rdi
	callq	emit_insn
	movl	ix86_arch(%rip), %ecx
	shlq	%cl, %r13
	testq	$104, %r13
	jne	.LBB130_12
# BB#11:                                # %lor.lhs.false
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB130_18
.LBB130_12:                             # %land.lhs.true
	movl	no_new_pseudos(%rip), %eax
	testq	%rax, %rax
	je	.LBB130_14
# BB#13:                                # %land.lhs.true
	testq	%r14, %r14
	jne	.LBB130_14
.LBB130_18:                             # %if.else83
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	gen_x86_shift_adj_2
	jmp	.LBB130_19
.LBB130_5:                              # %if.else
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	jne	.LBB130_7
# BB#6:                                 # %if.then23
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	emit_move_insn
.LBB130_7:                              # %if.end27
	movq	(%rsp), %r15
	movq	16(%rsp), %rbx
	andq	%r12, %r14
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_x86_shld_1
	movq	%rax, %rdi
	callq	emit_insn
.LBB130_4:                              # %if.then13
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_ashlsi3
	jmp	.LBB130_19
.LBB130_14:                             # %if.then71
	movq	const_int_rtx+512(%rip), %rsi
	testq	%rax, %rax
	je	.LBB130_15
# BB#16:                                # %if.else75
	movq	%r14, %rdi
	callq	emit_move_insn
	jmp	.LBB130_17
.LBB130_20:                             # %if.end90
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB130_15:                             # %if.then73
	movq	$4, %rdi
	callq	force_reg
	movq	%rax, %r14
.LBB130_17:                             # %if.end77
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%r14, %rcx
	callq	gen_x86_shift_adj_1
.LBB130_19:                             # %if.else83
	movq	%rax, %rdi
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_insn  # TAILCALL
.Ltmp1203:
	.size	ix86_split_ashldi, .Ltmp1203-ix86_split_ashldi
	.cfi_endproc

	.globl	ix86_split_ashrdi
	.align	16, 0x90
	.type	ix86_split_ashrdi,@function
ix86_split_ashrdi:                      # @ix86_split_ashrdi
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1210:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1211:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1212:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1213:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1214:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp1215:
	.cfi_def_cfa_offset 80
.Ltmp1216:
	.cfi_offset %rbx, -48
.Ltmp1217:
	.cfi_offset %r12, -40
.Ltmp1218:
	.cfi_offset %r13, -32
.Ltmp1219:
	.cfi_offset %r14, -24
.Ltmp1220:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movq	16(%rbx), %rax
	movzbl	(%rax), %eax
	movq	%rsi, %r14
	cmpq	$54, %rax
	jne	.LBB131_12
# BB#1:                                 # %if.then
	leaq	16(%rsp), %rdx
	leaq	(%rsp), %rcx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	split_di
	movq	16(%rbx), %rax
	movq	8(%rax), %r14
	andq	$63, %r14
	cmpq	$32, %r14
	jb	.LBB131_9
# BB#2:                                 # %if.then6
	movq	16(%rsp), %r15
	movq	8(%rsp), %rsi
	movq	%r15, %rdi
	callq	emit_move_insn
	movl	reload_completed(%rip), %eax
	movq	(%rsp), %rbx
	testq	%rax, %rax
	je	.LBB131_3
# BB#4:                                 # %if.else
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	emit_move_insn
	xorq	%rdi, %rdi
	movq	$31, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rbx, %rsi
	jmp	.LBB131_5
.LBB131_12:                             # %if.else56
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB131_14
# BB#13:                                # %if.then61
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	emit_move_insn
.LBB131_14:                             # %if.end65
	leaq	16(%rsp), %rdx
	leaq	(%rsp), %rcx
	movq	$1, %rsi
	movq	$1, %r13
	movq	%rbx, %rdi
	callq	split_di
	movq	16(%rsp), %r12
	movq	(%rsp), %r15
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	gen_x86_shrd_1
	movq	%rax, %rdi
	callq	emit_insn
	movq	16(%rbx), %rdx
	movq	%r15, %rdi
	movq	%r15, %rsi
	callq	gen_ashrsi3
	movq	%rax, %rdi
	callq	emit_insn
	movl	ix86_arch(%rip), %ecx
	shlq	%cl, %r13
	testq	$104, %r13
	jne	.LBB131_16
# BB#15:                                # %lor.lhs.false
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB131_21
.LBB131_16:                             # %land.lhs.true
	movl	no_new_pseudos(%rip), %eax
	testq	%rax, %rax
	je	.LBB131_18
# BB#17:                                # %land.lhs.true
	testq	%r14, %r14
	jne	.LBB131_18
.LBB131_21:                             # %if.else101
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	gen_x86_shift_adj_3
	jmp	.LBB131_8
.LBB131_9:                              # %if.else33
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	jne	.LBB131_11
# BB#10:                                # %if.then38
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	emit_move_insn
.LBB131_11:                             # %if.end42
	movq	16(%rsp), %r15
	movq	(%rsp), %rbx
	andq	%r12, %r14
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_x86_shrd_1
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rbx, %rsi
	jmp	.LBB131_7
.LBB131_18:                             # %if.then86
	testq	%rax, %rax
	jne	.LBB131_20
# BB#19:                                # %if.then88
	movq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
.LBB131_20:                             # %if.end90
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	emit_move_insn
	xorq	%rdi, %rdi
	movq	$31, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_ashrsi3
	movq	%rax, %rdi
	callq	emit_insn
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%r14, %rcx
	callq	gen_x86_shift_adj_1
	jmp	.LBB131_8
.LBB131_3:                              # %if.then9
	xorq	%rdi, %rdi
	movq	$31, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%r15, %rsi
.LBB131_5:                              # %if.end
	movq	%rax, %rdx
	callq	gen_ashrsi3
	movq	%rax, %rdi
	callq	emit_insn
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$33, %rax
	jb	.LBB131_22
# BB#6:                                 # %if.then25
	addq	$-32, %r14
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r15, %rsi
.LBB131_7:                              # %if.then25
	movq	%rax, %rdx
	callq	gen_ashrsi3
.LBB131_8:                              # %if.then25
	movq	%rax, %rdi
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_insn  # TAILCALL
.LBB131_22:                             # %if.end108
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1221:
	.size	ix86_split_ashrdi, .Ltmp1221-ix86_split_ashrdi
	.cfi_endproc

	.globl	ix86_split_lshrdi
	.align	16, 0x90
	.type	ix86_split_lshrdi,@function
ix86_split_lshrdi:                      # @ix86_split_lshrdi
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1228:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1229:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1230:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1231:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1232:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp1233:
	.cfi_def_cfa_offset 80
.Ltmp1234:
	.cfi_offset %rbx, -48
.Ltmp1235:
	.cfi_offset %r12, -40
.Ltmp1236:
	.cfi_offset %r13, -32
.Ltmp1237:
	.cfi_offset %r14, -24
.Ltmp1238:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movq	16(%rbx), %rax
	movzbl	(%rax), %eax
	movq	%rsi, %r14
	cmpq	$54, %rax
	jne	.LBB132_8
# BB#1:                                 # %if.then
	leaq	16(%rsp), %rdx
	leaq	(%rsp), %rcx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	split_di
	movq	16(%rbx), %rax
	movq	8(%rax), %r14
	andq	$63, %r14
	cmpq	$32, %r14
	jb	.LBB132_5
# BB#2:                                 # %if.then6
	movq	16(%rsp), %rbx
	movq	8(%rsp), %rsi
	movq	%rbx, %rdi
	callq	emit_move_insn
	movq	(%rsp), %rdi
	movq	const_int_rtx+512(%rip), %rsi
	callq	emit_move_insn
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$33, %rax
	jb	.LBB132_20
# BB#3:                                 # %if.then13
	addq	$-32, %r14
	jmp	.LBB132_4
.LBB132_8:                              # %if.else41
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB132_10
# BB#9:                                 # %if.then46
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	emit_move_insn
.LBB132_10:                             # %if.end50
	leaq	16(%rsp), %rdx
	leaq	(%rsp), %rcx
	movq	$1, %rsi
	movq	$1, %r13
	movq	%rbx, %rdi
	callq	split_di
	movq	16(%rsp), %r12
	movq	(%rsp), %r15
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	gen_x86_shrd_1
	movq	%rax, %rdi
	callq	emit_insn
	movq	16(%rbx), %rdx
	movq	%r15, %rdi
	movq	%r15, %rsi
	callq	gen_lshrsi3
	movq	%rax, %rdi
	callq	emit_insn
	movl	ix86_arch(%rip), %ecx
	shlq	%cl, %r13
	testq	$104, %r13
	jne	.LBB132_12
# BB#11:                                # %lor.lhs.false
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB132_18
.LBB132_12:                             # %land.lhs.true
	movl	no_new_pseudos(%rip), %eax
	testq	%rax, %rax
	je	.LBB132_14
# BB#13:                                # %land.lhs.true
	testq	%r14, %r14
	jne	.LBB132_14
.LBB132_18:                             # %if.else83
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	gen_x86_shift_adj_2
	jmp	.LBB132_19
.LBB132_5:                              # %if.else
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	jne	.LBB132_7
# BB#6:                                 # %if.then23
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	callq	emit_move_insn
.LBB132_7:                              # %if.end27
	movq	16(%rsp), %r15
	movq	(%rsp), %rbx
	andq	%r12, %r14
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_x86_shrd_1
	movq	%rax, %rdi
	callq	emit_insn
.LBB132_4:                              # %if.then13
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_lshrsi3
	jmp	.LBB132_19
.LBB132_14:                             # %if.then71
	movq	const_int_rtx+512(%rip), %rsi
	testq	%rax, %rax
	je	.LBB132_15
# BB#16:                                # %if.else75
	movq	%r14, %rdi
	callq	emit_move_insn
	jmp	.LBB132_17
.LBB132_20:                             # %if.end90
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB132_15:                             # %if.then73
	movq	$4, %rdi
	callq	force_reg
	movq	%rax, %r14
.LBB132_17:                             # %if.end77
	movq	16(%rbx), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%r14, %rcx
	callq	gen_x86_shift_adj_1
.LBB132_19:                             # %if.else83
	movq	%rax, %rdi
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_insn  # TAILCALL
.Ltmp1239:
	.size	ix86_split_lshrdi, .Ltmp1239-ix86_split_lshrdi
	.cfi_endproc

	.globl	ix86_zero_extend_to_Pmode
	.align	16, 0x90
	.type	ix86_zero_extend_to_Pmode,@function
ix86_zero_extend_to_Pmode:              # @ix86_zero_extend_to_Pmode
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp1243:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp1244:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp1245:
	.cfi_def_cfa_offset 32
.Ltmp1246:
	.cfi_offset %rbx, -24
.Ltmp1247:
	.cfi_offset %r14, -16
	movl	target_flags(%rip), %eax
	movq	%rdi, %rbx
	movzbl	2(%rbx), %edi
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	orq	$4, %rax
	testq	%rdi, %rdi
	je	.LBB133_3
# BB#1:                                 # %if.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	%rcx, %rdi
	jne	.LBB133_2
# BB#4:                                 # %if.then8
	movq	%rbx, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	copy_to_mode_reg  # TAILCALL
.LBB133_3:                              # %if.then
	movq	%rax, %rdi
	movq	%rbx, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	force_reg  # TAILCALL
.LBB133_2:                              # %return
	movq	%rax, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	gen_zero_extendsidi2
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp1248:
	.size	ix86_zero_extend_to_Pmode, .Ltmp1248-ix86_zero_extend_to_Pmode
	.cfi_endproc

	.globl	ix86_expand_movstr
	.align	16, 0x90
	.type	ix86_expand_movstr,@function
ix86_expand_movstr:                     # @ix86_expand_movstr
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1255:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1256:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1257:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1258:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1259:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp1260:
	.cfi_def_cfa_offset 128
.Ltmp1261:
	.cfi_offset %rbx, -48
.Ltmp1262:
	.cfi_offset %r12, -40
.Ltmp1263:
	.cfi_offset %r13, -32
.Ltmp1264:
	.cfi_offset %r14, -24
.Ltmp1265:
	.cfi_offset %r15, -16
	movq	%rcx, %rbx
	movq	%rdx, %r12
	movq	%rsi, %r14
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	callq	start_sequence
	movzbl	(%rbx), %eax
	xorq	%r15, %r15
	cmpq	$54, %rax
	jne	.LBB134_2
# BB#1:                                 # %if.then
	movq	8(%rbx), %r15
.LBB134_2:                              # %if.end
	movl	target_flags(%rip), %edi
	testq	$512, %rdi              # imm = 0x200
	je	.LBB134_4
# BB#3:                                 # %if.end
	movq	$64, %r15
.LBB134_4:                              # %if.end
	movq	%r14, 64(%rsp)          # 8-byte Spill
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	xorq	%rbx, %rbx
	cmpq	$54, %rcx
	jne	.LBB134_6
# BB#5:                                 # %if.then6
	movq	8(%r12), %rbx
.LBB134_6:                              # %if.end10
	movq	%r12, %r13
	testq	$33554432, %rdi         # imm = 0x2000000
	movq	$4, %rsi
	je	.LBB134_32
# BB#7:                                 # %if.end10
	andq	$16711680, %rax         # imm = 0xFF0000
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	$262144, %rdx           # imm = 0x40000
	je	.LBB134_32
# BB#8:                                 # %lor.lhs.false16
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jg	.LBB134_19
# BB#9:                                 # %lor.lhs.false16
	cmpq	$54, %rcx
	jne	.LBB134_10
# BB#23:                                # %sw.bb1.i
	movl	12(%r13), %eax
	testq	%rax, %rax
	je	.LBB134_27
# BB#24:
	movabsq	$0, %rax
	jmp	.LBB134_28
.LBB134_19:                             # %lor.lhs.false16
	cmpq	$67, %rcx
	jne	.LBB134_20
# BB#25:                                # %sw.bb3.i
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB134_27
# BB#26:
	movabsq	$0, %rax
	jmp	.LBB134_28
.LBB134_10:                             # %lor.lhs.false16
	cmpq	$58, %rcx
	jne	.LBB134_28
# BB#11:                                # %sw.bb8.i
	movq	8(%r13), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB134_18
# BB#12:                                # %if.then.i
	movl	ix86_cmodel(%rip), %edx
	cmpq	$4, %rdx
	je	.LBB134_28
# BB#13:                                # %if.end.i
	movq	8(%rcx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$67, %rsi
	jne	.LBB134_28
# BB#14:                                # %sw.bb33.i
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rax, %rdx
	cmpq	$1, %rdx
	jne	.LBB134_18
# BB#15:                                # %land.lhs.true.i
	movq	16(%rcx), %r14
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	jne	.LBB134_18
# BB#16:                                # %land.lhs.true42.i
	movq	8(%r14), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	cmpq	$-65535, %rax           # imm = 0xFFFFFFFFFFFF0001
	jl	.LBB134_18
# BB#17:                                # %land.lhs.true48.i
	movq	8(%r14), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	movq	8(%r14), %rcx
	cmpq	%rcx, %rax
	movq	$1, %rax
	je	.LBB134_28
.LBB134_18:                             # %if.end60.i
	xorq	%rax, %rax
	jmp	.LBB134_28
.LBB134_20:                             # %lor.lhs.false16
	cmpq	$68, %rcx
	jne	.LBB134_28
# BB#21:                                # %sw.bb2.i
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB134_22
.LBB134_27:                             # %sw.bb3.i
	movabsq	$1, %rax
	jmp	.LBB134_28
.LBB134_22:
	movabsq	$0, %rax
.LBB134_28:                             # %x86_64_zero_extended_value.exit
	testq	%rax, %rax
	jne	.LBB134_29
# BB#30:                                # %x86_64_zero_extended_value.exit
	movabsq	$1, %rsi
	jmp	.LBB134_31
.LBB134_29:
	movabsq	$0, %rsi
.LBB134_31:                             # %x86_64_zero_extended_value.exit
	movl	target_flags(%rip), %edi
	orq	$4, %rsi
.LBB134_32:                             # %if.end23
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	$25, %rcx
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rsi
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	copy_to_mode_reg
	movl	target_flags(%rip), %edi
	movq	%rax, %r14
	movq	$25, %rcx
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rsi
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	copy_to_mode_reg
	movq	%rax, %r12
	callq	gen_cld
	movq	%rax, %rdi
	callq	emit_insn
	movl	optimize(%rip), %eax
	movl	optimize_size(%rip), %edx
	testq	%rax, %rax
	je	.LBB134_34
# BB#33:                                # %if.end23
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdx
	je	.LBB134_45
.LBB134_34:                             # %land.lhs.true41
	testq	%rbx, %rbx
	je	.LBB134_36
# BB#35:                                # %land.lhs.true41
	movq	%rbx, %rax
	andq	$3, %rax
	jne	.LBB134_36
.LBB134_45:                             # %if.else57
	testq	%rbx, %rbx
	je	.LBB134_46
# BB#50:                                # %land.lhs.true59
	movq	%r15, %rsi
	cmpq	$7, %rsi
	jg	.LBB134_65
# BB#51:                                # %lor.lhs.false61
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB134_52
# BB#63:                                # %lor.lhs.false68
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdx
	jne	.LBB134_65
# BB#64:                                # %lor.lhs.false68
	movq	$3, %rax
	cmpq	$63, %rbx
	ja	.LBB134_47
	jmp	.LBB134_65
.LBB134_46:                             # %if.else57.if.else129_crit_edge
	movl	ix86_cpu(%rip), %eax
	movq	%r15, %rsi
.LBB134_47:                             # %if.else129
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jne	.LBB134_59
# BB#48:                                # %if.else129
	leaq	-1(%rbx), %rcx
	cmpq	$259, %rcx              # imm = 0x103
	jb	.LBB134_59
# BB#49:                                # %if.else129.cond.end_crit_edge
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %edi
	movq	$8, 32(%rsp)            # 8-byte Folded Spill
	jmp	.LBB134_60
.LBB134_36:                             # %if.then46
	movl	target_flags(%rip), %edi
	movq	%r13, %rbx
	movzbl	2(%rbx), %eax
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	testq	%rax, %rax
	je	.LBB134_37
# BB#39:                                # %if.end.i524
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	%rcx, %rax
	jne	.LBB134_41
# BB#40:                                # %if.then8.i
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r15
	jmp	.LBB134_42
.LBB134_52:                             # %land.lhs.true63
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %r8
	movq	%rcx, %rdi
	jne	.LBB134_54
# BB#53:                                # %land.lhs.true63
	movq	%r8, %rdi
.LBB134_54:                             # %land.lhs.true63
	cmpq	$3, %rsi
	jle	.LBB134_56
# BB#55:                                # %land.lhs.true63
	movq	%r8, %rcx
.LBB134_56:                             # %land.lhs.true63
	testq	%rcx, %rdi
	jne	.LBB134_65
# BB#57:                                # %land.lhs.true63
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdx
	jne	.LBB134_65
# BB#58:                                # %land.lhs.true63
	cmpq	$64, %rbx
	jb	.LBB134_65
.LBB134_59:                             # %cond.false
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %edi
	movq	$23, %rcx
	movq	%rdi, %rdx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	movq	%rdx, 32(%rsp)          # 8-byte Spill
.LBB134_60:                             # %cond.end
	testq	$1024, %rdi             # imm = 0x400
	jne	.LBB134_94
# BB#61:                                # %land.lhs.true144
	movq	$23, %rcx
	movq	%rdi, %rdx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rdx, %rcx
	cmpq	%rcx, %rsi
	jge	.LBB134_94
# BB#62:                                # %if.then151
	callq	end_sequence
	xorq	%rax, %rax
	jmp	.LBB134_170
.LBB134_65:                             # %if.then72
	movq	%r12, 24(%rsp)          # 8-byte Spill
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %esi
	movq	%rsi, %rbx
	andq	$33554432, %rbx         # imm = 0x2000000
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rdx
	movabsq	$0, %rax
	movabsq	$1, %r8
	movq	%rax, %rdi
	jne	.LBB134_67
# BB#66:                                # %if.then72
	movq	%r8, %rdi
.LBB134_67:                             # %if.then72
	movq	$25, %rcx
	movq	%rbx, %r15
	shrq	%cl, %r15
	andq	%rdi, %r15
	jne	.LBB134_69
# BB#68:                                # %if.then72
	movq	%r8, %rax
.LBB134_69:                             # %if.then72
	imulq	$4, %rax, %rax
	addq	$-8, %rax
	movq	56(%rsp), %rcx          # 8-byte Reload
	testq	%rcx, %rax
	je	.LBB134_82
# BB#70:                                # %if.then79
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	%r15, %rcx
	andq	$1, %rcx
	orq	$2, %rcx
	movq	56(%rsp), %rax          # 8-byte Reload
	shrq	%cl, %rax
	movq	$5, %rcx
	shlq	%cl, %rsi
	notq	%rsi
	andq	$1073741824, %rsi       # imm = 0x40000000
	decq	%rsi
	andq	%rax, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	copy_to_mode_reg
	movl	target_flags(%rip), %edi
	movq	%rax, %r13
	movzbl	2(%r13), %eax
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	testq	%rax, %rax
	je	.LBB134_71
# BB#73:                                # %if.end.i534
	movq	%rdi, %rcx
	andq	%r12, %rcx
	cmpq	%rcx, %rax
	jne	.LBB134_75
# BB#74:                                # %if.then8.i536
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.LBB134_76
.LBB134_94:                             # %if.end152
	movq	%rsi, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$65, %rdx
	je	.LBB134_96
# BB#95:                                # %if.then155
	callq	gen_cld
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %edi
.LBB134_96:                             # %if.end158
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r15
	xorq	%r13, %r13
	cmpq	$0, 56(%rsp)            # 8-byte Folded Reload
	jne	.LBB134_99
# BB#97:                                # %if.end158
	movq	32(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %rbx
	jge	.LBB134_99
# BB#98:                                # %if.then170
	callq	gen_label_rtx
	movq	%rax, %r13
	movq	32(%rsp), %rax          # 8-byte Reload
	leaq	-1(%rax), %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$110, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	%r13, (%rsp)
	movq	%r15, %rdi
	movq	%rax, %rsi
	movq	48(%rsp), %r8           # 8-byte Reload
	callq	emit_cmp_and_jump_insns
.LBB134_99:                             # %if.end175
	movq	%r13, 48(%rsp)          # 8-byte Spill
	cmpq	$1, %rbx
	jg	.LBB134_104
# BB#100:                               # %if.then178
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	$1, %rsi
	movq	%r14, %rdi
	callq	ix86_expand_aligntest
	movq	%rax, %r13
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovqi
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%r15), %ebx
	andq	$16711680, %rbx         # imm = 0xFF0000
	xorq	%rdi, %rdi
	movq	$-1, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	cmpq	$327680, %rbx           # imm = 0x50000
	jne	.LBB134_102
# BB#101:                               # %if.then.i547
	callq	gen_adddi3
	jmp	.LBB134_103
.LBB134_37:                             # %if.then.i523
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %r15
	jmp	.LBB134_42
.LBB134_71:                             # %if.then.i532
	movq	%r13, %rsi
	callq	force_reg
	movq	%rax, %rbx
	jmp	.LBB134_76
.LBB134_102:                            # %if.else.i
	callq	gen_addsi3
.LBB134_103:                            # %ix86_adjust_counter.exit
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r13, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%r13)
	movq	40(%rsp), %rbx          # 8-byte Reload
.LBB134_104:                            # %if.end186
	cmpq	$2, %rbx
	jg	.LBB134_109
# BB#105:                               # %if.then189
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	ix86_expand_aligntest
	movq	%rax, %r13
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovhi
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%r15), %ebx
	andq	$16711680, %rbx         # imm = 0xFF0000
	xorq	%rdi, %rdi
	movq	$-2, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	cmpq	$327680, %rbx           # imm = 0x50000
	jne	.LBB134_107
# BB#106:                               # %if.then.i555
	callq	gen_adddi3
	jmp	.LBB134_108
.LBB134_107:                            # %if.else.i558
	callq	gen_addsi3
.LBB134_108:                            # %ix86_adjust_counter.exit560
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r13, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%r13)
	movq	40(%rsp), %rbx          # 8-byte Reload
.LBB134_109:                            # %if.end198
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	cmpq	$4, %rbx
	jg	.LBB134_115
# BB#110:                               # %if.end198
	cmpq	$5, 32(%rsp)            # 8-byte Folded Reload
	jl	.LBB134_115
# BB#111:                               # %if.then204
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	ix86_expand_aligntest
	movq	%rax, %r13
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovsi
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%r15), %ebx
	andq	$16711680, %rbx         # imm = 0xFF0000
	xorq	%rdi, %rdi
	movq	$-4, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	cmpq	$327680, %rbx           # imm = 0x50000
	jne	.LBB134_113
# BB#112:                               # %if.then.i567
	callq	gen_adddi3
	jmp	.LBB134_114
.LBB134_113:                            # %if.else.i570
	callq	gen_addsi3
.LBB134_114:                            # %ix86_adjust_counter.exit572
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r13, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%r13)
.LBB134_115:                            # %if.end213
	movq	48(%rsp), %r13          # 8-byte Reload
	testq	%r13, %r13
	je	.LBB134_119
# BB#116:                               # %if.end213
	cmpq	$5, 32(%rsp)            # 8-byte Folded Reload
	jl	.LBB134_119
# BB#117:                               # %land.lhs.true218
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB134_119
# BB#118:                               # %if.then221
	movq	%r13, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%r13)
	xorq	%r13, %r13
.LBB134_119:                            # %if.end226
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$65, %rax
	jne	.LBB134_121
# BB#120:                               # %if.then230
	callq	gen_cld
	movq	%rax, %rdi
	callq	emit_insn
.LBB134_121:                            # %if.end233
	movl	target_flags(%rip), %edi
	testq	$33554432, %rdi         # imm = 0x2000000
	je	.LBB134_128
# BB#122:                               # %if.then236
	movzbl	2(%r15), %eax
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	testq	%rax, %rax
	je	.LBB134_123
# BB#124:                               # %if.end.i581
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	%rcx, %rax
	jne	.LBB134_126
# BB#125:                               # %if.then8.i583
	movq	%rax, %rdi
	movq	%r15, %rsi
	movq	%r15, 48(%rsp)          # 8-byte Spill
	callq	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.LBB134_127
.LBB134_128:                            # %if.else243
	xorq	%rdi, %rdi
	movq	$2, %rsi
	callq	gen_rtx_CONST_INT
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r15, 48(%rsp)          # 8-byte Spill
	movq	%rax, %rdx
	callq	gen_lshrsi3
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%r14, %rcx
	movq	%r12, %r8
	movq	%rbx, %r9
	callq	gen_rep_movsi
	jmp	.LBB134_129
.LBB134_41:                             # %if.end13.i
	callq	gen_reg_rtx
	movq	%rax, %r15
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	gen_zero_extendsidi2
	movq	%rax, %rdi
	callq	emit_insn
.LBB134_42:                             # %ix86_zero_extend_to_Pmode.exit
	movq	64(%rsp), %r13          # 8-byte Reload
	movzbl	target_flags+3(%rip), %eax
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	movq	%r12, %r8
	movq	%r15, %r9
	testq	$2, %rax
	je	.LBB134_44
# BB#43:                                # %if.then50
	callq	gen_rep_movqi_rex64
	jmp	.LBB134_93
.LBB134_44:                             # %if.else53
	callq	gen_rep_movqi
	jmp	.LBB134_93
.LBB134_123:                            # %if.then.i579
	movq	%r15, %rsi
	movq	%r15, 48(%rsp)          # 8-byte Spill
	callq	force_reg
	movq	%rax, %rbx
	jmp	.LBB134_127
.LBB134_75:                             # %if.end13.i540
	callq	gen_reg_rtx
	movq	%rax, %rbx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	gen_zero_extendsidi2
	movq	%rax, %rdi
	callq	emit_insn
.LBB134_76:                             # %ix86_zero_extend_to_Pmode.exit542
	movq	24(%rsp), %r12          # 8-byte Reload
	testq	$1, %r15
	je	.LBB134_77
# BB#80:                                # %if.else103
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%r14, %rcx
	movq	%r12, %r8
	movq	%r12, 24(%rsp)          # 8-byte Spill
	movq	%rbx, %r9
	callq	gen_rep_movdi_rex64
	jmp	.LBB134_81
.LBB134_77:                             # %if.then93
	movzbl	target_flags+3(%rip), %eax
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%r14, %rcx
	movq	%r12, %r8
	testq	$2, %rax
	je	.LBB134_79
# BB#78:                                # %if.end107.thread
	movq	%rbx, %r9
	callq	gen_rep_movsi_rex64
	movq	%rax, %rdi
	callq	emit_insn
	movq	64(%rsp), %r13          # 8-byte Reload
	movq	56(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB134_89
.LBB134_126:                            # %if.end13.i587
	callq	gen_reg_rtx
	movq	%rax, %rbx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r15, 48(%rsp)          # 8-byte Spill
	callq	gen_zero_extendsidi2
	movq	%rax, %rdi
	callq	emit_insn
.LBB134_127:                            # %ix86_zero_extend_to_Pmode.exit589
	xorq	%rdi, %rdi
	movq	$3, %rsi
	callq	gen_rtx_CONST_INT
	movq	16(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_lshrdi3
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	movq	%r12, %r8
	movq	%r15, %r9
	callq	gen_rep_movdi_rex64
.LBB134_129:                            # %if.end249
	movq	%rax, %rdi
	callq	emit_insn
	movq	56(%rsp), %rbx          # 8-byte Reload
	testq	%r13, %r13
	je	.LBB134_131
# BB#130:                               # %if.then251
	movq	%r13, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%r13)
.LBB134_131:                            # %if.end256
	testq	%rbx, %rbx
	movabsq	$0, %rcx
	movabsq	$1, %rdi
	movq	%rcx, %rax
	jne	.LBB134_133
# BB#132:                               # %if.end256
	movq	%rdi, %rax
.LBB134_133:                            # %if.end256
	movzbl	target_flags+3(%rip), %esi
	testq	$2, %rsi
	movq	%rcx, %rsi
	movq	40(%rsp), %rdx          # 8-byte Reload
	jne	.LBB134_135
# BB#134:                               # %if.end256
	movq	%rdi, %rsi
.LBB134_135:                            # %if.end256
	cmpq	$5, %rdx
	jge	.LBB134_137
# BB#136:                               # %if.end256
	movq	%rdi, %rcx
.LBB134_137:                            # %if.end256
	testq	$4, %rbx
	je	.LBB134_140
# BB#138:                               # %if.end256
	orq	%rcx, %rsi
	orq	%rax, %rsi
	jne	.LBB134_140
# BB#139:                               # %if.then268
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rdx, %r15
	callq	gen_strmovsi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r15, %rdx
.LBB134_140:                            # %if.end271
	cmpq	$5, %rdx
	jl	.LBB134_142
# BB#141:                               # %if.end271
	testq	%rbx, %rbx
	jne	.LBB134_144
.LBB134_142:                            # %land.lhs.true277
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB134_144
# BB#143:                               # %if.then280
	movq	$4, %rsi
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%rdx, %r13
	callq	ix86_expand_aligntest
	movq	%rax, %r15
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovsi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r15, %rdi
	callq	emit_label
	movq	%r13, %rdx
	movq	$1, %rax
	movl	%eax, 32(%r15)
.LBB134_144:                            # %if.end289
	testq	%rbx, %rbx
	movabsq	$0, %rax
	movabsq	$1, %rsi
	movq	%rax, %rcx
	jne	.LBB134_146
# BB#145:                               # %if.end289
	movq	%rsi, %rcx
.LBB134_146:                            # %if.end289
	cmpq	$3, %rdx
	jge	.LBB134_148
# BB#147:                               # %if.end289
	movq	%rsi, %rax
.LBB134_148:                            # %if.end289
	testq	$2, %rbx
	je	.LBB134_151
# BB#149:                               # %if.end289
	orq	%rcx, %rax
	jne	.LBB134_151
# BB#150:                               # %if.then298
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rdx, %r15
	callq	gen_strmovhi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r15, %rdx
.LBB134_151:                            # %if.end301
	cmpq	$3, %rdx
	jl	.LBB134_153
# BB#152:                               # %if.end301
	testq	%rbx, %rbx
	jne	.LBB134_154
.LBB134_153:                            # %if.then307
	movq	$2, %rsi
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%rdx, %r13
	callq	ix86_expand_aligntest
	movq	%rax, %r15
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovhi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r15, %rdi
	callq	emit_label
	movq	%r13, %rdx
	movq	$1, %rax
	movl	%eax, 32(%r15)
.LBB134_154:                            # %if.end316
	testq	%rbx, %rbx
	movabsq	$0, %rax
	movabsq	$1, %rsi
	movq	%rax, %rcx
	movq	64(%rsp), %r13          # 8-byte Reload
	jne	.LBB134_156
# BB#155:                               # %if.end316
	movq	%rsi, %rcx
.LBB134_156:                            # %if.end316
	cmpq	$2, %rdx
	jge	.LBB134_158
# BB#157:                               # %if.end316
	movq	%rsi, %rax
.LBB134_158:                            # %if.end316
	testq	$1, %rbx
	je	.LBB134_161
# BB#159:                               # %if.end316
	orq	%rcx, %rax
	jne	.LBB134_161
# BB#160:                               # %if.then325
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rdx, %r15
	callq	gen_strmovqi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r15, %rdx
.LBB134_161:                            # %if.end328
	cmpq	$2, %rdx
	jl	.LBB134_163
# BB#162:                               # %if.end328
	testq	%rbx, %rbx
	jne	.LBB134_164
.LBB134_163:                            # %if.then334
	movq	$1, %rsi
	movq	$1, %r15
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	ix86_expand_aligntest
	movq	%rax, %rbx
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovqi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%rbx, %rdi
	callq	emit_label
	movl	%r15d, 32(%rbx)
	jmp	.LBB134_164
.LBB134_79:                             # %if.else99
	movq	%r12, 24(%rsp)          # 8-byte Spill
	movq	%rbx, %r9
	callq	gen_rep_movsi
.LBB134_81:                             # %if.end107
	movq	%rax, %rdi
	callq	emit_insn
	movl	optimize_size(%rip), %edx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	%rbx, %r12
	movq	40(%rsp), %rbx          # 8-byte Reload
.LBB134_82:                             # %if.end107
	testq	%r12, %rbx
	movabsq	$0, %rax
	movabsq	$1, %rsi
	movq	%rax, %rcx
	jne	.LBB134_84
# BB#83:                                # %if.end107
	movq	%rsi, %rcx
.LBB134_84:                             # %if.end107
	testq	%r12, %rdx
	movq	64(%rsp), %r13          # 8-byte Reload
	movq	56(%rsp), %rbx          # 8-byte Reload
	je	.LBB134_86
# BB#85:                                # %if.end107
	movq	%rsi, %rax
.LBB134_86:                             # %if.end107
	testq	$4, %rbx
	movq	24(%rsp), %r12          # 8-byte Reload
	je	.LBB134_89
# BB#87:                                # %if.end107
	orq	%rcx, %rax
	jne	.LBB134_89
# BB#88:                                # %if.then113
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovsi
	movq	%rax, %rdi
	callq	emit_insn
.LBB134_89:                             # %if.end116
	testq	$2, %rbx
	je	.LBB134_91
# BB#90:                                # %if.then119
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovhi
	movq	%rax, %rdi
	callq	emit_insn
.LBB134_91:                             # %if.end122
	testq	$1, %rbx
	je	.LBB134_164
# BB#92:                                # %if.then125
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	gen_strmovqi
.LBB134_93:                             # %if.end345
	movq	%rax, %rdi
	callq	emit_insn
.LBB134_164:                            # %if.end345
	callq	get_insns
	movq	%rax, %r15
	callq	end_sequence
	testq	%r15, %r15
	je	.LBB134_169
# BB#165:
	movq	%r15, %rbx
	.align	16, 0x90
.LBB134_166:                            # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB134_168
# BB#167:                               # %if.then.i593
                                        #   in Loop: Header=BB134_166 Depth=1
	movq	32(%rbx), %rdi
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %rcx
	movq	%r12, %r8
	callq	ix86_set_move_mem_attrs_1
.LBB134_168:                            # %for.inc.i
                                        #   in Loop: Header=BB134_166 Depth=1
	movq	24(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB134_166
.LBB134_169:                            # %ix86_set_move_mem_attrs.exit
	movq	%r15, %rdi
	callq	emit_insns
	movq	$1, %rax
.LBB134_170:                            # %return
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1266:
	.size	ix86_expand_movstr, .Ltmp1266-ix86_expand_movstr
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_expand_aligntest,@function
ix86_expand_aligntest:                  # @ix86_expand_aligntest
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1273:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1274:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1275:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1276:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1277:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp1278:
	.cfi_def_cfa_offset 64
.Ltmp1279:
	.cfi_offset %rbx, -48
.Ltmp1280:
	.cfi_offset %r12, -40
.Ltmp1281:
	.cfi_offset %r13, -32
.Ltmp1282:
	.cfi_offset %r14, -24
.Ltmp1283:
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
	callq	gen_label_rtx
	movzbl	2(%r12), %edi
	movq	%rax, %r14
	callq	gen_reg_rtx
	movq	%rax, %r15
	movl	(%r12), %r13d
	andq	$16711680, %r13         # imm = 0xFF0000
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	cmpq	$327680, %r13           # imm = 0x50000
	jne	.LBB135_2
# BB#1:                                 # %if.then
	callq	gen_anddi3
	jmp	.LBB135_3
.LBB135_2:                              # %if.else
	callq	gen_andsi3
.LBB135_3:                              # %if.end
	movq	%rax, %rdi
	callq	emit_insn
	movq	const_int_rtx+512(%rip), %rsi
	movzbl	2(%r12), %r8d
	movq	$103, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	%r14, (%rsp)
	movq	%r15, %rdi
	callq	emit_cmp_and_jump_insns
	movq	%r14, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1284:
	.size	ix86_expand_aligntest, .Ltmp1284-ix86_expand_aligntest
	.cfi_endproc

	.globl	ix86_set_move_mem_attrs
	.align	16, 0x90
	.type	ix86_set_move_mem_attrs,@function
ix86_set_move_mem_attrs:                # @ix86_set_move_mem_attrs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1291:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1292:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1293:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1294:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1295:
	.cfi_def_cfa_offset 48
.Ltmp1296:
	.cfi_offset %rbx, -48
.Ltmp1297:
	.cfi_offset %r12, -40
.Ltmp1298:
	.cfi_offset %r13, -32
.Ltmp1299:
	.cfi_offset %r14, -24
.Ltmp1300:
	.cfi_offset %r15, -16
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	%rdi, %rbx
	jmp	.LBB136_1
	.align	16, 0x90
.LBB136_4:                              # %for.inc
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	24(%rbx), %rbx
.LBB136_1:                              # %entry
                                        # =>This Inner Loop Header: Depth=1
	testq	%rbx, %rbx
	je	.LBB136_5
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movzbl	(%rbx), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB136_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	32(%rbx), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	ix86_set_move_mem_attrs_1
	jmp	.LBB136_4
.LBB136_5:                              # %for.end
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1301:
	.size	ix86_set_move_mem_attrs, .Ltmp1301-ix86_set_move_mem_attrs
	.cfi_endproc

	.globl	ix86_expand_clrstr
	.align	16, 0x90
	.type	ix86_expand_clrstr,@function
ix86_expand_clrstr:                     # @ix86_expand_clrstr
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1308:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1309:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1310:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1311:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1312:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp1313:
	.cfi_def_cfa_offset 112
.Ltmp1314:
	.cfi_offset %rbx, -48
.Ltmp1315:
	.cfi_offset %r12, -40
.Ltmp1316:
	.cfi_offset %r13, -32
.Ltmp1317:
	.cfi_offset %r14, -24
.Ltmp1318:
	.cfi_offset %r15, -16
	movzbl	(%rdx), %eax
	movq	%rsi, %r14
	movq	%rdi, %r13
	xorq	%rcx, %rcx
	cmpq	$54, %rax
	jne	.LBB137_2
# BB#1:                                 # %if.then
	movq	8(%rdx), %rcx
.LBB137_2:                              # %if.end
	movl	target_flags(%rip), %edi
	testq	$512, %rdi              # imm = 0x200
	je	.LBB137_4
# BB#3:                                 # %if.end
	movq	$32, %rcx
.LBB137_4:                              # %if.end
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	xorq	%rbx, %rbx
	cmpq	$54, %rcx
	jne	.LBB137_6
# BB#5:                                 # %if.then6
	movq	8(%r14), %rbx
.LBB137_6:                              # %if.end10
	testq	$33554432, %rdi         # imm = 0x2000000
	movq	$4, %r12
	je	.LBB137_32
# BB#7:                                 # %if.end10
	andq	$16711680, %rax         # imm = 0xFF0000
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	$262144, %rdx           # imm = 0x40000
	je	.LBB137_32
# BB#8:                                 # %lor.lhs.false16
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jg	.LBB137_19
# BB#9:                                 # %lor.lhs.false16
	cmpq	$54, %rcx
	jne	.LBB137_10
# BB#23:                                # %sw.bb1.i
	movl	12(%r14), %eax
	testq	%rax, %rax
	je	.LBB137_27
# BB#24:
	movabsq	$0, %rax
	jmp	.LBB137_28
.LBB137_19:                             # %lor.lhs.false16
	cmpq	$67, %rcx
	jne	.LBB137_20
# BB#25:                                # %sw.bb3.i
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB137_27
# BB#26:
	movabsq	$0, %rax
	jmp	.LBB137_28
.LBB137_10:                             # %lor.lhs.false16
	cmpq	$58, %rcx
	jne	.LBB137_28
# BB#11:                                # %sw.bb8.i
	movq	8(%r14), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB137_18
# BB#12:                                # %if.then.i
	movl	ix86_cmodel(%rip), %edx
	cmpq	$4, %rdx
	je	.LBB137_28
# BB#13:                                # %if.end.i
	movq	8(%rcx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$67, %rsi
	jne	.LBB137_28
# BB#14:                                # %sw.bb33.i
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rax, %rdx
	cmpq	$1, %rdx
	jne	.LBB137_18
# BB#15:                                # %land.lhs.true.i
	movq	16(%rcx), %r15
	movzbl	(%r15), %eax
	cmpq	$54, %rax
	jne	.LBB137_18
# BB#16:                                # %land.lhs.true42.i
	movq	8(%r15), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	cmpq	$-65535, %rax           # imm = 0xFFFFFFFFFFFF0001
	jl	.LBB137_18
# BB#17:                                # %land.lhs.true48.i
	movq	8(%r15), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	movq	8(%r15), %rcx
	cmpq	%rcx, %rax
	movq	$1, %rax
	je	.LBB137_28
.LBB137_18:                             # %if.end60.i
	xorq	%rax, %rax
	jmp	.LBB137_28
.LBB137_20:                             # %lor.lhs.false16
	cmpq	$68, %rcx
	jne	.LBB137_28
# BB#21:                                # %sw.bb2.i
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB137_22
.LBB137_27:                             # %sw.bb3.i
	movabsq	$1, %rax
	jmp	.LBB137_28
.LBB137_22:
	movabsq	$0, %rax
.LBB137_28:                             # %x86_64_zero_extended_value.exit
	testq	%rax, %rax
	jne	.LBB137_29
# BB#30:                                # %x86_64_zero_extended_value.exit
	movabsq	$1, %r12
	jmp	.LBB137_31
.LBB137_29:
	movabsq	$0, %r12
.LBB137_31:                             # %x86_64_zero_extended_value.exit
	movl	target_flags(%rip), %edi
	orq	$4, %r12
.LBB137_32:                             # %if.end19
	movq	$25, %rcx
	movq	8(%r13), %rsi
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	copy_to_mode_reg
	movq	%rax, %r15
	callq	gen_cld
	movq	%rax, %rdi
	callq	emit_insn
	movl	optimize(%rip), %eax
	movl	optimize_size(%rip), %edi
	testq	%rax, %rax
	je	.LBB137_34
# BB#33:                                # %if.end19
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	je	.LBB137_45
.LBB137_34:                             # %land.lhs.true
	testq	%rbx, %rbx
	je	.LBB137_36
# BB#35:                                # %land.lhs.true
	movq	%rbx, %rax
	andq	$3, %rax
	jne	.LBB137_36
.LBB137_45:                             # %if.else46
	testq	%rbx, %rbx
	je	.LBB137_46
# BB#50:                                # %land.lhs.true48
	cmpq	$7, 56(%rsp)            # 8-byte Folded Reload
	jg	.LBB137_68
# BB#51:                                # %lor.lhs.false50
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB137_52
# BB#66:                                # %lor.lhs.false57
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	jne	.LBB137_68
# BB#67:                                # %lor.lhs.false57
	movq	$3, %rax
	cmpq	$63, %rbx
	ja	.LBB137_47
	jmp	.LBB137_68
.LBB137_46:                             # %if.else46.if.else124_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB137_47:                             # %if.else124
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jne	.LBB137_59
# BB#48:                                # %if.else124
	leaq	-1(%rbx), %rcx
	cmpq	$259, %rcx              # imm = 0x103
	jb	.LBB137_59
# BB#49:                                # %if.else124.cond.end_crit_edge
	movq	%rbx, %r13
	movq	%r15, 48(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %edi
	movq	$8, %r15
	jmp	.LBB137_60
.LBB137_36:                             # %if.then34
	movl	target_flags(%rip), %edi
	movzbl	2(%r14), %eax
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	testq	%rax, %rax
	je	.LBB137_37
# BB#38:                                # %if.end.i526
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	%rcx, %rax
	jne	.LBB137_40
# BB#39:                                # %if.then8.i
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %rbx
	jmp	.LBB137_41
.LBB137_52:                             # %land.lhs.true52
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	jne	.LBB137_54
# BB#53:                                # %land.lhs.true52
	movq	%rsi, %rdx
.LBB137_54:                             # %land.lhs.true52
	cmpq	$3, 56(%rsp)            # 8-byte Folded Reload
	jle	.LBB137_56
# BB#55:                                # %land.lhs.true52
	movq	%rsi, %rcx
.LBB137_56:                             # %land.lhs.true52
	testq	%rcx, %rdx
	jne	.LBB137_68
# BB#57:                                # %land.lhs.true52
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdi
	jne	.LBB137_68
# BB#58:                                # %land.lhs.true52
	cmpq	$64, %rbx
	jb	.LBB137_68
.LBB137_59:                             # %cond.false
	movq	%rbx, %r13
	movq	%r15, 48(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %edi
	movq	$23, %rcx
	movq	%rdi, %r15
	shrq	%cl, %r15
	andq	$4, %r15
	addq	$4, %r15
.LBB137_60:                             # %cond.end
	testq	$1024, %rdi             # imm = 0x400
	jne	.LBB137_62
# BB#61:                                # %land.lhs.true139
	movq	$23, %rcx
	movq	%rdi, %rdx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rdx, %rcx
	xorq	%rbx, %rbx
	cmpq	%rcx, 56(%rsp)          # 8-byte Folded Reload
	jl	.LBB137_169
.LBB137_62:                             # %if.end147
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$65, %rdx
	je	.LBB137_64
# BB#63:                                # %if.then150
	callq	gen_cld
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %edi
.LBB137_64:                             # %if.end153
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movl	target_flags(%rip), %edi
	movq	%rax, %r14
	movq	$25, %rcx
	movq	const_int_rtx+512(%rip), %rsi
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	copy_to_mode_reg
	xorq	%rbx, %rbx
	testq	%r13, %r13
	jne	.LBB137_65
# BB#95:                                # %if.end153
	movq	%rax, 40(%rsp)          # 8-byte Spill
	cmpq	%r15, 56(%rsp)          # 8-byte Folded Reload
	jge	.LBB137_97
# BB#96:                                # %if.then169
	callq	gen_label_rtx
	movq	%rax, %rbx
	leaq	-1(%r15), %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$110, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	%rbx, (%rsp)
	movq	%r14, %rdi
	movq	%rax, %rsi
	movq	%r12, %r8
	callq	emit_cmp_and_jump_insns
	jmp	.LBB137_97
.LBB137_68:                             # %if.then61
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %r13d
	andq	$33554432, %r13         # imm = 0x2000000
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	movabsq	$0, %rbx
	movabsq	$1, %rax
	movq	%rbx, %rdx
	jne	.LBB137_70
# BB#69:                                # %if.then61
	movq	%rax, %rdx
.LBB137_70:                             # %if.then61
	movq	%r15, 48(%rsp)          # 8-byte Spill
	movq	const_int_rtx+512(%rip), %rsi
	movq	$25, %rcx
	movq	%r13, %r14
	shrq	%cl, %r14
	andq	%rdx, %r14
	jne	.LBB137_72
# BB#71:                                # %if.then61
	movq	%rax, %rbx
.LBB137_72:                             # %if.then61
	movq	%r14, %rdi
	orq	$4, %rdi
	callq	copy_to_mode_reg
	movq	%rax, %r15
	imulq	$4, %rbx, %rax
	addq	$-8, %rax
	movq	56(%rsp), %rcx          # 8-byte Reload
	testq	%rcx, %rax
	je	.LBB137_84
# BB#73:                                # %if.then71
	movq	%r14, %rcx
	andq	$1, %rcx
	movl	target_flags(%rip), %esi
	orq	$2, %rcx
	movq	56(%rsp), %rax          # 8-byte Reload
	shrq	%cl, %rax
	movq	$5, %rcx
	shlq	%cl, %rsi
	notq	%rsi
	andq	$1073741824, %rsi       # imm = 0x40000000
	decq	%rsi
	andq	%rax, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	copy_to_mode_reg
	movl	target_flags(%rip), %edi
	movq	%rax, %rbx
	movzbl	2(%rbx), %eax
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%r15, %r12
	testq	%rax, %rax
	je	.LBB137_74
# BB#75:                                # %if.end.i536
	movq	%rdi, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	%rcx, %rax
	jne	.LBB137_77
# BB#76:                                # %if.then8.i538
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r15
	jmp	.LBB137_78
.LBB137_37:                             # %if.then.i525
	movq	%r14, %rsi
	callq	force_reg
	movq	%rax, %rbx
	jmp	.LBB137_41
.LBB137_74:                             # %if.then.i534
	movq	%rbx, %rsi
	callq	force_reg
	movq	%rax, %r15
	jmp	.LBB137_78
.LBB137_65:
	movq	%rax, 40(%rsp)          # 8-byte Spill
.LBB137_97:                             # %if.end174
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	56(%rsp), %r12          # 8-byte Reload
	cmpq	$1, %r12
	jg	.LBB137_102
# BB#98:                                # %if.then177
	movq	$1, %rsi
	movq	48(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	callq	ix86_expand_aligntest
	movq	%rax, %r12
	movq	$2, %rdi
	xorq	%rdx, %rdx
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	gen_rtx_SUBREG
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_strsetqi
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%r14), %ebx
	andq	$16711680, %rbx         # imm = 0xFF0000
	xorq	%rdi, %rdi
	movq	$-1, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	cmpq	$327680, %rbx           # imm = 0x50000
	jne	.LBB137_100
# BB#99:                                # %if.then.i549
	callq	gen_adddi3
	jmp	.LBB137_101
.LBB137_100:                            # %if.else.i
	callq	gen_addsi3
.LBB137_101:                            # %ix86_adjust_counter.exit
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r12, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%r12)
	movq	56(%rsp), %r12          # 8-byte Reload
.LBB137_102:                            # %if.end186
	cmpq	$2, %r12
	jg	.LBB137_107
# BB#103:                               # %if.then189
	movq	$2, %rsi
	movq	48(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	callq	ix86_expand_aligntest
	movq	%rax, %r12
	movq	$3, %rdi
	xorq	%rdx, %rdx
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	gen_rtx_SUBREG
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_strsethi
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%r14), %ebx
	andq	$16711680, %rbx         # imm = 0xFF0000
	xorq	%rdi, %rdi
	movq	$-2, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	cmpq	$327680, %rbx           # imm = 0x50000
	jne	.LBB137_105
# BB#104:                               # %if.then.i557
	callq	gen_adddi3
	jmp	.LBB137_106
.LBB137_105:                            # %if.else.i560
	callq	gen_addsi3
.LBB137_106:                            # %ix86_adjust_counter.exit562
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r12, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%r12)
	movq	56(%rsp), %r12          # 8-byte Reload
.LBB137_107:                            # %if.end199
	cmpq	$4, %r12
	jg	.LBB137_115
# BB#108:                               # %if.end199
	cmpq	$5, %r15
	jl	.LBB137_115
# BB#109:                               # %if.then205
	movq	$4, %rsi
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	ix86_expand_aligntest
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, %r12
	testq	$2, %rcx
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rsi
	je	.LBB137_111
# BB#110:                               # %cond.true210
	movq	$4, %rdi
	xorq	%rdx, %rdx
	movq	%rax, %rsi
	callq	gen_rtx_SUBREG
	movq	%rax, %rsi
.LBB137_111:                            # %cond.end213
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	gen_strsetsi
	movq	%rax, %rdi
	callq	emit_insn
	movl	(%r14), %ebx
	andq	$16711680, %rbx         # imm = 0xFF0000
	xorq	%rdi, %rdi
	movq	$-4, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	cmpq	$327680, %rbx           # imm = 0x50000
	jne	.LBB137_113
# BB#112:                               # %if.then.i569
	callq	gen_adddi3
	jmp	.LBB137_114
.LBB137_113:                            # %if.else.i572
	callq	gen_addsi3
.LBB137_114:                            # %ix86_adjust_counter.exit574
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r12, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%r12)
	movq	56(%rsp), %r12          # 8-byte Reload
.LBB137_115:                            # %if.end221
	cmpq	$0, 32(%rsp)            # 8-byte Folded Reload
	je	.LBB137_116
# BB#117:                               # %if.end221
	cmpq	$5, %r15
	jl	.LBB137_118
# BB#119:                               # %land.lhs.true226
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	movq	48(%rsp), %r15          # 8-byte Reload
	jne	.LBB137_121
# BB#120:                               # %if.then229
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%rbx)
	movq	$0, 32(%rsp)            # 8-byte Folded Spill
	jmp	.LBB137_121
.LBB137_116:
	movq	48(%rsp), %r15          # 8-byte Reload
	jmp	.LBB137_121
.LBB137_118:
	movq	48(%rsp), %r15          # 8-byte Reload
.LBB137_121:                            # %if.end234
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$65, %rax
	jne	.LBB137_123
# BB#122:                               # %if.then238
	callq	gen_cld
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_123:                            # %if.end241
	movl	target_flags(%rip), %edi
	testq	$33554432, %rdi         # imm = 0x2000000
	je	.LBB137_130
# BB#124:                               # %if.then244
	movzbl	2(%r14), %eax
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	testq	%rax, %rax
	je	.LBB137_125
# BB#126:                               # %if.end.i583
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	%rcx, %rax
	jne	.LBB137_128
# BB#127:                               # %if.then8.i585
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r14, 24(%rsp)          # 8-byte Spill
	callq	copy_to_mode_reg
	movq	%rax, %r14
	jmp	.LBB137_129
.LBB137_130:                            # %if.else251
	xorq	%rdi, %rdi
	movq	$2, %rsi
	callq	gen_rtx_CONST_INT
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movq	%rax, %rdx
	callq	gen_lshrsi3
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rbx, %r8
	callq	gen_rep_stossi
	jmp	.LBB137_131
.LBB137_40:                             # %if.end13.i
	callq	gen_reg_rtx
	movq	%rax, %rbx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	gen_zero_extendsidi2
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_41:                             # %ix86_zero_extend_to_Pmode.exit
	movq	const_int_rtx+512(%rip), %rsi
	movq	$2, %rdi
	callq	copy_to_mode_reg
	movzbl	target_flags+3(%rip), %ecx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	testq	$2, %rcx
	je	.LBB137_44
# BB#42:                                # %if.then39
	movq	%r15, %rcx
	movq	%rbx, %r8
	callq	gen_rep_stosqi_rex64
	jmp	.LBB137_43
.LBB137_44:                             # %if.else42
	movq	%r15, %rcx
	movq	%rbx, %r8
	callq	gen_rep_stosqi
.LBB137_43:                             # %return
	movq	%rax, %rdi
	callq	emit_insn
	movq	$1, %rbx
	jmp	.LBB137_169
.LBB137_125:                            # %if.then.i581
	movq	%r14, %rsi
	movq	%r14, 24(%rsp)          # 8-byte Spill
	callq	force_reg
	movq	%rax, %r14
	jmp	.LBB137_129
.LBB137_77:                             # %if.end13.i542
	callq	gen_reg_rtx
	movq	%rax, %r15
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	gen_zero_extendsidi2
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_78:                             # %ix86_zero_extend_to_Pmode.exit544
	testq	$1, %r14
	je	.LBB137_79
# BB#82:                                # %if.else95
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	%rdi, %rcx
	movq	%r15, %r8
	movq	%rdx, %r15
	callq	gen_rep_stosdi_rex64
	jmp	.LBB137_83
.LBB137_79:                             # %if.then85
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB137_81
# BB#80:                                # %if.end99.thread
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	%rdi, %rcx
	movq	%r15, %r8
	movq	%rdx, %r15
	movq	%rdi, %r14
	callq	gen_rep_stossi_rex64
	movq	%rax, %rdi
	callq	emit_insn
	movq	56(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB137_91
.LBB137_128:                            # %if.end13.i589
	callq	gen_reg_rtx
	movq	%r14, %rsi
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movq	%rax, %r14
	movq	%r14, %rdi
	callq	gen_zero_extendsidi2
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_129:                            # %ix86_zero_extend_to_Pmode.exit591
	xorq	%rdi, %rdi
	movq	$3, %rsi
	callq	gen_rtx_CONST_INT
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	gen_lshrdi3
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rbx, %r8
	callq	gen_rep_stosdi_rex64
.LBB137_131:                            # %if.end257
	movq	%rax, %rdi
	callq	emit_insn
	movq	32(%rsp), %rbx          # 8-byte Reload
	testq	%rbx, %rbx
	je	.LBB137_133
# BB#132:                               # %if.then259
	movq	%rbx, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%rbx)
.LBB137_133:                            # %if.end264
	testq	%r13, %r13
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	movq	%rdx, %rcx
	jne	.LBB137_135
# BB#134:                               # %if.end264
	movq	%rsi, %rcx
.LBB137_135:                            # %if.end264
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	movq	%rdx, %rdi
	jne	.LBB137_137
# BB#136:                               # %if.end264
	movq	%rsi, %rdi
.LBB137_137:                            # %if.end264
	cmpq	$5, %r12
	jge	.LBB137_139
# BB#138:                               # %if.end264
	movq	%rsi, %rdx
.LBB137_139:                            # %if.end264
	testq	$4, %r13
	je	.LBB137_142
# BB#140:                               # %if.end264
	orq	%rdx, %rdi
	orq	%rcx, %rdi
	jne	.LBB137_142
# BB#141:                               # %if.then276
	movq	$4, %rdi
	xorq	%rdx, %rdx
	movq	%r14, %rsi
	callq	gen_rtx_SUBREG
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	gen_strsetsi
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %eax
.LBB137_142:                            # %if.end280
	cmpq	$5, %r12
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	jge	.LBB137_144
# BB#143:                               # %if.end280
	movq	%rsi, %rdx
.LBB137_144:                            # %if.end280
	testq	%r13, %r13
	jne	.LBB137_146
# BB#145:                               # %if.end280
	movq	%rsi, %rcx
.LBB137_146:                            # %if.end280
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB137_149
# BB#147:                               # %if.end280
	orq	%rcx, %rdx
	je	.LBB137_149
# BB#148:                               # %if.then289
	movq	$4, %rsi
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	ix86_expand_aligntest
	movq	%rax, %rbx
	movq	$4, %rdi
	xorq	%rdx, %rdx
	movq	%r14, %rsi
	callq	gen_rtx_SUBREG
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	gen_strsetsi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%rbx, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%rbx)
.LBB137_149:                            # %if.end299
	testq	%r13, %r13
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB137_151
# BB#150:                               # %if.end299
	movq	%rdx, %rcx
.LBB137_151:                            # %if.end299
	cmpq	$3, %r12
	jge	.LBB137_153
# BB#152:                               # %if.end299
	movq	%rdx, %rax
.LBB137_153:                            # %if.end299
	testq	$2, %r13
	je	.LBB137_156
# BB#154:                               # %if.end299
	orq	%rcx, %rax
	jne	.LBB137_156
# BB#155:                               # %if.then308
	movq	$3, %rdi
	xorq	%rdx, %rdx
	movq	%r14, %rsi
	callq	gen_rtx_SUBREG
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	gen_strsethi
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_156:                            # %if.end312
	cmpq	$3, %r12
	jl	.LBB137_158
# BB#157:                               # %if.end312
	testq	%r13, %r13
	jne	.LBB137_159
.LBB137_158:                            # %if.then318
	movq	$2, %rsi
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	ix86_expand_aligntest
	movq	%rax, %rbx
	movq	$3, %rdi
	xorq	%rdx, %rdx
	movq	%r14, %rsi
	callq	gen_rtx_SUBREG
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	gen_strsethi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%rbx, %rdi
	callq	emit_label
	movq	$1, %rax
	movl	%eax, 32(%rbx)
.LBB137_159:                            # %if.end328
	testq	%r13, %r13
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB137_161
# BB#160:                               # %if.end328
	movq	%rdx, %rcx
.LBB137_161:                            # %if.end328
	movq	%r14, %rbx
	cmpq	$2, %r12
	jge	.LBB137_163
# BB#162:                               # %if.end328
	movq	%rdx, %rax
.LBB137_163:                            # %if.end328
	testq	$1, %r13
	movq	%r13, %r14
	je	.LBB137_166
# BB#164:                               # %if.end328
	orq	%rcx, %rax
	jne	.LBB137_166
# BB#165:                               # %if.then337
	movq	$2, %rdi
	xorq	%rdx, %rdx
	movq	%rbx, %rsi
	callq	gen_rtx_SUBREG
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	gen_strsetqi
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_166:                            # %if.end341
	movq	%rbx, %r13
	cmpq	$2, %r12
	jl	.LBB137_168
# BB#167:                               # %if.end341
	movq	$1, %rbx
	testq	%r14, %r14
	jne	.LBB137_169
.LBB137_168:                            # %if.then347
	movq	$1, %rsi
	movq	$1, %rbx
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	ix86_expand_aligntest
	movq	%rax, %r14
	movq	$2, %rdi
	xorq	%rdx, %rdx
	movq	%r13, %rsi
	callq	gen_rtx_SUBREG
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	gen_strsetqi
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rdi
	callq	emit_label
	movl	%ebx, 32(%r14)
	jmp	.LBB137_169
.LBB137_81:                             # %if.else91
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	%rdi, %rcx
	movq	%r15, %r8
	movq	%rdx, %r15
	callq	gen_rep_stossi
.LBB137_83:                             # %if.end99
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_84:                             # %if.end99
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	testq	%rdi, %r13
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	movl	optimize_size(%rip), %esi
	jne	.LBB137_86
# BB#85:                                # %if.end99
	movq	%rdx, %rcx
.LBB137_86:                             # %if.end99
	testq	%rdi, %rsi
	movq	56(%rsp), %rbx          # 8-byte Reload
	movq	48(%rsp), %r14          # 8-byte Reload
	je	.LBB137_88
# BB#87:                                # %if.end99
	movq	%rdx, %rax
.LBB137_88:                             # %if.end99
	testq	$4, %rbx
	je	.LBB137_91
# BB#89:                                # %if.end99
	orq	%rcx, %rax
	jne	.LBB137_91
# BB#90:                                # %if.then105
	movq	$4, %rdi
	xorq	%rdx, %rdx
	movq	%r15, %rsi
	callq	gen_rtx_SUBREG
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_strsetsi
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_91:                             # %if.end109
	testq	$2, %rbx
	je	.LBB137_93
# BB#92:                                # %if.then112
	movq	$3, %rdi
	xorq	%rdx, %rdx
	movq	%r15, %rsi
	callq	gen_rtx_SUBREG
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_strsethi
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_93:                             # %if.end116
	testq	$1, %rbx
	movq	$1, %rbx
	je	.LBB137_169
# BB#94:                                # %if.then119
	movq	$2, %rdi
	xorq	%rdx, %rdx
	movq	%r15, %rsi
	callq	gen_rtx_SUBREG
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_strsetqi
	movq	%rax, %rdi
	callq	emit_insn
.LBB137_169:                            # %return
	movq	%rbx, %rax
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1319:
	.size	ix86_expand_clrstr, .Ltmp1319-ix86_expand_clrstr
	.cfi_endproc

	.globl	ix86_expand_strlen
	.align	16, 0x90
	.type	ix86_expand_strlen,@function
ix86_expand_strlen:                     # @ix86_expand_strlen
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1326:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1327:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1328:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1329:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1330:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp1331:
	.cfi_def_cfa_offset 112
.Ltmp1332:
	.cfi_offset %rbx, -48
.Ltmp1333:
	.cfi_offset %r12, -40
.Ltmp1334:
	.cfi_offset %r13, -32
.Ltmp1335:
	.cfi_offset %r14, -24
.Ltmp1336:
	.cfi_offset %r15, -16
	movl	ix86_cpu(%rip), %eax
	movq	%rcx, %r8
	movq	%rdx, %r12
	movq	%rdi, %r13
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$62, %rdx
	je	.LBB138_6
# BB#1:                                 # %land.lhs.true
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%r12, %rax
	jne	.LBB138_6
# BB#2:                                 # %land.lhs.true
	movl	optimize(%rip), %eax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$2, %rax
	jl	.LBB138_6
# BB#3:                                 # %land.lhs.true3
	movl	target_flags(%rip), %eax
	movl	optimize_size(%rip), %ecx
	andq	$1024, %rax             # imm = 0x400
	orq	%rax, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rcx
	jne	.LBB138_6
# BB#4:                                 # %land.lhs.true8
	movzbl	(%r8), %ecx
	xorq	%rax, %rax
	cmpq	$54, %rcx
	jne	.LBB138_47
# BB#5:                                 # %lor.lhs.false
	movq	8(%r8), %rcx
	cmpq	$4, %rcx
	jl	.LBB138_47
.LBB138_6:                              # %if.end
	movq	%r8, 56(%rsp)           # 8-byte Spill
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	movq	8(%rsi), %rsi
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	force_reg
	movl	target_flags(%rip), %edi
	movq	%rax, %r14
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movl	ix86_cpu(%rip), %ecx
	movq	%rax, %r15
	shlq	%cl, %rbx
	testq	$62, %rbx
	je	.LBB138_43
# BB#7:                                 # %land.lhs.true22
	movslq	optimize(%rip), %rax
	cmpq	$2, %rax
	jl	.LBB138_43
# BB#8:                                 # %land.lhs.true22
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%r12, %rax
	jne	.LBB138_43
# BB#9:                                 # %land.lhs.true22
	movl	optimize_size(%rip), %eax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	jne	.LBB138_43
# BB#10:                                # %if.then28
	movq	%r13, %rdi
	movq	%r14, %rsi
	callq	emit_move_insn
	callq	gen_label_rtx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	gen_label_rtx
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r12
	movq	$4, %rdi
	callq	gen_reg_rtx
	movq	56(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx), %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	xorq	%r15, %r15
	cmpq	$54, %rcx
	jne	.LBB138_12
# BB#11:                                # %if.end.i
	movq	8(%rdx), %r15
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$3, %rax
	jg	.LBB138_27
.LBB138_12:                             # %if.then13.i
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%r13, 48(%rsp)          # 8-byte Spill
	callq	emit_move_insn
	andq	%rbx, %r15
	cmpq	$2, %r15
	je	.LBB138_14
# BB#13:                                # %if.then19.i
	callq	gen_label_rtx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	callq	gen_label_rtx
	movl	target_flags(%rip), %ebx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	$25, %rcx
	movq	optab_table+144(%rip), %r13
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	xorq	%rdi, %rdi
	movq	$3, %rsi
	callq	gen_rtx_CONST_INT
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	$2, (%rsp)
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	expand_binop
	movl	target_flags(%rip), %r8d
	movq	%rax, %rbx
	movq	const_int_rtx+512(%rip), %rsi
	movq	$25, %rcx
	shrq	%cl, %r8
	andq	$1, %r8
	orq	$4, %r8
	movq	$103, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbx, %rdi
	callq	emit_cmp_and_jump_insns
	xorq	%rdi, %rdi
	movq	$2, %rsi
	callq	gen_rtx_CONST_INT
	movl	target_flags(%rip), %r8d
	movq	$25, %rcx
	shrq	%cl, %r8
	andq	$1, %r8
	orq	$4, %r8
	movq	$103, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%rsi, (%rsp)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_cmp_and_jump_insns
	xorq	%rdi, %rdi
	movq	$2, %rsi
	callq	gen_rtx_CONST_INT
	movl	target_flags(%rip), %r8d
	movq	$25, %rcx
	shrq	%cl, %r8
	andq	$1, %r8
	orq	$4, %r8
	movq	$109, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	8(%rsp), %rsi           # 8-byte Reload
	movq	%rsi, (%rsp)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_cmp_and_jump_insns
	jmp	.LBB138_15
.LBB138_43:                             # %if.else38
	movq	%r13, 48(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movl	target_flags(%rip), %edi
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movl	target_flags(%rip), %edi
	movq	%r14, %rbx
	movq	%rax, %r14
	movq	$25, %rcx
	movq	const_int_rtx+504(%rip), %rsi
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	force_reg
	movq	%rax, %r13
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	emit_move_insn
	movq	$2, %rdi
	movq	%r12, %rsi
	callq	force_reg
	movq	%rax, %rbx
	callq	gen_cld
	movq	%rax, %rdi
	callq	emit_insn
	movzbl	target_flags+3(%rip), %eax
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	testq	$2, %rax
	je	.LBB138_45
# BB#44:                                # %if.then57
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%r13, %r8
	movq	%r14, %r9
	callq	gen_strlenqi_rex_1
	movq	%rax, %rdi
	callq	emit_insn
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	gen_one_cmpldi2
	movq	%rax, %rdi
	callq	emit_insn
	movq	const_int_rtx+504(%rip), %rdx
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%rbx, %rsi
	callq	gen_adddi3
	jmp	.LBB138_46
.LBB138_45:                             # %if.else64
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%r13, %r8
	movq	%r14, %r9
	callq	gen_strlenqi_1
	movq	%rax, %rdi
	callq	emit_insn
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	gen_one_cmplsi2
	movq	%rax, %rdi
	callq	emit_insn
	movq	const_int_rtx+504(%rip), %rdx
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%rbx, %rsi
	callq	gen_addsi3
	jmp	.LBB138_46
.LBB138_14:                             # %if.else.i
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	movq	optab_table+144(%rip), %r13
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	xorq	%rdi, %rdi
	movq	$2, %rsi
	movq	$0, 8(%rsp)             # 8-byte Folded Spill
	callq	gen_rtx_CONST_INT
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	$2, (%rsp)
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	expand_binop
	movl	target_flags(%rip), %r8d
	movq	const_int_rtx+512(%rip), %rsi
	movq	$25, %rcx
	shrq	%cl, %r8
	andq	$1, %r8
	orq	$4, %r8
	movq	$103, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	%rdi, (%rsp)
	movq	%rax, %rdi
	callq	emit_cmp_and_jump_insns
	movq	$0, 16(%rsp)            # 8-byte Folded Spill
.LBB138_15:                             # %if.end46.i
	movq	$2, %rdi
	movq	48(%rsp), %r13          # 8-byte Reload
	movq	%r13, %rsi
	callq	gen_rtx_MEM
	movq	const_int_rtx+512(%rip), %rsi
	movq	%rax, %rbx
	movq	$103, %rdx
	xorq	%rcx, %rcx
	movq	$2, %r8
	movq	$1, %r9
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbx, %rdi
	callq	emit_cmp_and_jump_insns
	movzbl	target_flags+3(%rip), %eax
	movq	const_int_rtx+520(%rip), %rdx
	movq	%r13, %rdi
	movq	%r13, %rsi
	testq	$2, %rax
	je	.LBB138_17
# BB#16:                                # %if.then50.i
	callq	gen_adddi3
	jmp	.LBB138_18
.LBB138_17:                             # %if.else53.i
	callq	gen_addsi3
.LBB138_18:                             # %if.end56.i
	movq	%rax, %rdi
	callq	emit_insn
	movq	56(%rsp), %r14          # 8-byte Reload
	cmpq	$2, %r15
	je	.LBB138_23
# BB#19:                                # %if.then59.i
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	emit_label
	movq	const_int_rtx+512(%rip), %rsi
	movq	$103, %rdx
	xorq	%rcx, %rcx
	movq	$2, %r8
	movq	$1, %r9
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbx, %rdi
	callq	emit_cmp_and_jump_insns
	movzbl	target_flags+3(%rip), %eax
	movq	const_int_rtx+520(%rip), %rdx
	movq	%r13, %rdi
	movq	%r13, %rsi
	testq	$2, %rax
	je	.LBB138_21
# BB#20:                                # %if.then63.i
	callq	gen_adddi3
	jmp	.LBB138_22
.LBB138_21:                             # %if.else66.i
	callq	gen_addsi3
.LBB138_22:                             # %if.end69.i
	movq	%rax, %rdi
	callq	emit_insn
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	emit_label
.LBB138_23:                             # %if.end71.i
	movq	const_int_rtx+512(%rip), %rsi
	movq	$103, %rdx
	xorq	%rcx, %rcx
	movq	$2, %r8
	movq	$1, %r9
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%rbx, %rdi
	callq	emit_cmp_and_jump_insns
	movzbl	target_flags+3(%rip), %eax
	movq	const_int_rtx+520(%rip), %rdx
	movq	%r13, %rdi
	movq	%r13, %rsi
	testq	$2, %rax
	je	.LBB138_25
# BB#24:                                # %if.then74.i
	callq	gen_adddi3
	jmp	.LBB138_26
.LBB138_25:                             # %if.else77.i
	callq	gen_addsi3
.LBB138_26:                             # %if.end81.i
	movq	%rax, %rdi
	callq	emit_insn
.LBB138_27:                             # %if.end81.i
	movq	24(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rdi
	callq	emit_label
	movq	$4, %rdi
	movq	%r13, %rsi
	callq	gen_rtx_MEM
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	emit_move_insn
	movl	target_flags(%rip), %ebx
	xorq	%rdi, %rdi
	movq	$4, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r13, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	testq	$33554432, %rbx         # imm = 0x2000000
	je	.LBB138_29
# BB#28:                                # %if.then87.i
	callq	gen_adddi3
	jmp	.LBB138_30
.LBB138_29:                             # %if.else91.i
	callq	gen_addsi3
.LBB138_30:                             # %if.end95.i
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	$-16843009, %rsi        # imm = 0xFFFFFFFFFEFEFEFF
	callq	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_addsi3
	movq	%rax, %rdi
	callq	emit_insn
	movq	%rbx, %rdi
	movq	%rbx, %rsi
	callq	gen_one_cmplsi2
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r12, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	callq	gen_andsi3
	movq	%rax, %rdi
	callq	emit_insn
	movabsq	$2155905152, %rdi       # imm = 0x80808080
	movq	$4, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	gen_andsi3
	movq	%rax, %rdi
	callq	emit_insn
	movq	const_int_rtx+512(%rip), %rsi
	movq	%r15, (%rsp)
	movq	$103, %rdx
	xorq	%rcx, %rcx
	movq	$4, %r8
	movq	$1, %r9
	movq	$1, %rbx
	movq	%r12, %rdi
	callq	emit_cmp_and_jump_insns
	movl	ix86_arch(%rip), %ecx
	shlq	%cl, %rbx
	testq	$104, %rbx
	jne	.LBB138_32
# BB#31:                                # %lor.lhs.false.i
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB138_33
.LBB138_32:                             # %if.then112.i
	movq	$4, %rdi
	callq	gen_reg_rtx
	movl	target_flags(%rip), %edi
	movq	%rax, %rbx
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r15
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	emit_move_insn
	xorq	%rdi, %rdi
	movq	$16, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_lshrsi3
	movq	%rax, %rdi
	callq	emit_insn
	xorq	%rdi, %rdi
	movq	$32896, %rsi            # imm = 0x8080
	callq	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	gen_testsi_ccno_1
	movq	%rax, %rdi
	callq	emit_insn
	movq	$55, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	const_int_rtx+512(%rip), %rcx
	movq	$103, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	$72, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	movq	%r12, %r8
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	xorq	%rdi, %rdi
	movq	$2, %rsi
	callq	gen_rtx_CONST_INT
	movq	$75, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	$47, %rdi
	movq	$4, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	$55, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	const_int_rtx+512(%rip), %rcx
	movq	$103, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$72, %rdi
	movq	%rax, %rdx
	movq	%r15, %rcx
	movq	%r13, %r8
	callq	gen_rtx_fmt_eee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
.LBB138_37:                             # %if.end176.i
	movq	$2, %rdi
	movq	%r12, %rsi
	callq	gen_lowpart
	movq	%rax, %rdi
	movq	%rax, %rsi
	movq	%rax, %rdx
	callq	gen_addqi3_cc
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %ebx
	xorq	%rdi, %rdi
	movq	$3, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r13, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	testq	$33554432, %rbx         # imm = 0x2000000
	je	.LBB138_39
# BB#38:                                # %if.then182.i
	callq	gen_subdi3_carry_rex64
	jmp	.LBB138_40
.LBB138_39:                             # %if.else186.i
	callq	gen_subsi3_carry
.LBB138_40:                             # %ix86_expand_strlensi_unroll_1.exit
	movq	%rax, %rdi
	callq	emit_insn
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	emit_label
	movzbl	target_flags+3(%rip), %eax
	movq	%r13, %rdi
	movq	%r13, %rsi
	movq	%r14, %rdx
	testq	$2, %rax
	je	.LBB138_42
# BB#41:                                # %if.then32
	callq	gen_subdi3
	jmp	.LBB138_46
.LBB138_42:                             # %if.else
	callq	gen_subsi3
.LBB138_46:                             # %return
	movq	%rax, %rdi
	callq	emit_insn
	movq	$1, %rax
.LBB138_47:                             # %return
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB138_33:                             # %if.else147.i
	movq	%r14, %r15
	callq	gen_label_rtx
	movq	%rax, %r14
	xorq	%rdi, %rdi
	movq	$32896, %rsi            # imm = 0x8080
	callq	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	gen_testsi_ccno_1
	movq	%rax, %rdi
	callq	emit_insn
	movq	$55, %rdi
	movq	$17, %rsi
	callq	gen_rtx_REG
	movq	const_int_rtx+512(%rip), %rcx
	movq	$102, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rbx
	movq	$67, %rdi
	xorq	%rsi, %rsi
	movq	%r14, %rdx
	callq	gen_rtx_fmt_u00
	movq	global_rtl(%rip), %r8
	movq	$72, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_eee
	movq	global_rtl(%rip), %rdx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_jump_insn
	movq	%r14, 64(%rax)
	xorq	%rdi, %rdi
	movq	$16, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r12, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	gen_lshrsi3
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %ebx
	xorq	%rdi, %rdi
	movq	$2, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r13, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	testq	$33554432, %rbx         # imm = 0x2000000
	je	.LBB138_35
# BB#34:                                # %if.then166.i
	callq	gen_adddi3
	jmp	.LBB138_36
.LBB138_35:                             # %if.else170.i
	callq	gen_addsi3
.LBB138_36:                             # %if.end174.i
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rdi
	callq	emit_label
	movq	%r15, %r14
	jmp	.LBB138_37
.Ltmp1337:
	.size	ix86_expand_strlen, .Ltmp1337-ix86_expand_strlen
	.cfi_endproc

	.globl	assign_386_stack_local
	.align	16, 0x90
	.type	assign_386_stack_local,@function
assign_386_stack_local:                 # @assign_386_stack_local
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp1341:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp1342:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp1343:
	.cfi_def_cfa_offset 32
.Ltmp1344:
	.cfi_offset %rbx, -24
.Ltmp1345:
	.cfi_offset %r14, -16
	movq	%rsi, %r14
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$3, %rax
	jae	.LBB139_4
# BB#1:                                 # %if.end
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	movq	cfun(%rip), %rax
	sarq	%cl, %r14
	movq	$32, %rcx
	movq	%rdi, %rbx
	shlq	%cl, %rbx
	movq	392(%rax), %rax
	movq	$32, %rcx
	sarq	%cl, %rbx
	leaq	(%rbx,%rbx,2), %rcx
	leaq	(%rax,%rcx,8), %rax
	movq	(%rax,%r14,8), %rax
	testq	%rax, %rax
	jne	.LBB139_3
# BB#2:                                 # %if.then5
	movzbl	mode_size(%rbx), %esi
	xorq	%rdx, %rdx
	callq	assign_stack_local
	movq	cfun(%rip), %rcx
	movq	392(%rcx), %rdx
	movq	$3, %rcx
	shlq	%cl, %rbx
	leaq	(%rbx,%rbx,2), %rcx
	addq	%rcx, %rdx
	movq	%rax, (%rdx,%r14,8)
	movq	cfun(%rip), %rax
	movq	392(%rax), %rax
	addq	%rcx, %rax
	movq	(%rax,%r14,8), %rax
.LBB139_3:                              # %if.end14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB139_4:                              # %if.then
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.assign_386_stack_local, %rcx
	movq	$9850, %rsi             # imm = 0x267A
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1346:
	.size	assign_386_stack_local, .Ltmp1346-assign_386_stack_local
	.cfi_endproc

	.globl	ix86_attr_length_immediate_default
	.align	16, 0x90
	.type	ix86_attr_length_immediate_default,@function
ix86_attr_length_immediate_default:     # @ix86_attr_length_immediate_default
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1352:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1353:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp1354:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp1355:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp1356:
	.cfi_def_cfa_offset 48
.Ltmp1357:
	.cfi_offset %rbx, -40
.Ltmp1358:
	.cfi_offset %r12, -32
.Ltmp1359:
	.cfi_offset %r14, -24
.Ltmp1360:
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
                                        # kill: RDI<def> R14<kill>
	callq	extract_insn_cached
	movsbq	recog_data+996(%rip), %rbx
	xorq	%rax, %rax
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	jmp	.LBB140_1
	.align	16, 0x90
.LBB140_15:                             # %sw.bb164
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	$4, %rax
.LBB140_1:                              # %for.cond.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_2 Depth 2
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
.LBB140_2:                              # %for.cond
                                        #   Parent Loop BB140_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jle	.LBB140_17
# BB#3:                                 # %for.body
                                        #   in Loop: Header=BB140_2 Depth=2
	movq	recog_data-8(,%rbx,8), %rdx
	movzbl	(%rdx), %esi
	decq	%rbx
	cmpq	$133, %rsi
	jg	.LBB140_6
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB140_2 Depth=2
	leaq	-54(%rsi), %rcx
	andq	%r12, %rcx
	cmpq	$14, %rcx
	ja	.LBB140_2
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB140_2 Depth=2
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$24599, %rdi            # imm = 0x6017
	je	.LBB140_2
	jmp	.LBB140_8
	.align	16, 0x90
.LBB140_6:                              # %for.body
                                        #   in Loop: Header=BB140_2 Depth=2
	cmpq	$134, %rsi
	je	.LBB140_8
# BB#7:                                 # %for.body
                                        #   in Loop: Header=BB140_2 Depth=2
	cmpq	$140, %rsi
	jne	.LBB140_2
	.align	16, 0x90
.LBB140_8:                              # %if.then
                                        #   in Loop: Header=BB140_1 Depth=1
	testq	%r12, %rax
	jne	.LBB140_18
# BB#9:                                 # %if.end
                                        #   in Loop: Header=BB140_1 Depth=1
	testq	%r12, %r15
	je	.LBB140_12
# BB#10:                                # %if.end
                                        #   in Loop: Header=BB140_1 Depth=1
	cmpq	$54, %rsi
	jne	.LBB140_12
# BB#11:                                # %cond.true91
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	8(%rdx), %rax
	addq	$128, %rax
	cmpq	$256, %rax              # imm = 0x100
	movq	$1, %rax
	jb	.LBB140_1
.LBB140_12:                             # %if.else
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	%r14, %rdi
	callq	get_attr_mode
	movq	%rax, %rcx
	addq	$-2, %rcx
	andq	%r12, %rcx
	cmpq	$3, %rcx
	ja	.LBB140_16
# BB#13:                                # %if.else
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	$1, %rax
	jmpq	*.LJTI140_0(,%rcx,8)
.LBB140_14:                             # %sw.bb160
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	$2, %rax
	jmp	.LBB140_1
.LBB140_17:                             # %for.end
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB140_16:                             # %sw.default
	movabsq	$.L.str196, %rdi
	movabsq	$.L.str76, %rdx
	movabsq	$.L__FUNCTION__.ix86_attr_length_immediate_default, %r8
	movq	$9956, %rcx             # imm = 0x26E4
	movq	%r14, %rsi
	callq	_fatal_insn
.LBB140_18:                             # %if.then52
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_attr_length_immediate_default, %rcx
	movq	$9933, %rsi             # imm = 0x26CD
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1361:
	.size	ix86_attr_length_immediate_default, .Ltmp1361-ix86_attr_length_immediate_default
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI140_0:
	.quad	.LBB140_1
	.quad	.LBB140_14
	.quad	.LBB140_15
	.quad	.LBB140_15

	.text
	.globl	ix86_attr_length_address_default
	.align	16, 0x90
	.type	ix86_attr_length_address_default,@function
ix86_attr_length_address_default:       # @ix86_attr_length_address_default
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp1363:
	.cfi_def_cfa_offset 16
	callq	extract_insn_cached
	movsbq	recog_data+996(%rip), %rax
	.align	16, 0x90
.LBB141_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jle	.LBB141_4
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB141_1 Depth=1
	movq	recog_data-8(,%rax,8), %rcx
	movzbl	(%rcx), %edx
	decq	%rax
	cmpq	$66, %rdx
	jne	.LBB141_1
# BB#3:                                 # %if.then
	movq	8(%rcx), %rdi
	popq	%rax
	jmp	memory_address_length  # TAILCALL
.LBB141_4:                              # %return
	xorq	%rax, %rax
	popq	%rdx
	retq
.Ltmp1364:
	.size	ix86_attr_length_address_default, .Ltmp1364-ix86_attr_length_address_default
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_set_move_mem_attrs_1,@function
ix86_set_move_mem_attrs_1:              # @ix86_set_move_mem_attrs_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1371:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1372:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1373:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1374:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1375:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp1376:
	.cfi_def_cfa_offset 80
.Ltmp1377:
	.cfi_offset %rbx, -48
.Ltmp1378:
	.cfi_offset %r12, -40
.Ltmp1379:
	.cfi_offset %r13, -32
.Ltmp1380:
	.cfi_offset %r14, -24
.Ltmp1381:
	.cfi_offset %r15, -16
	movq	%rdi, %r9
	movl	(%r9), %edi
	movq	%r8, 16(%rsp)           # 8-byte Spill
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%rsi, %rbx
	movq	%rdi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB142_6
# BB#1:                                 # %land.lhs.true
	movq	8(%r9), %rcx
	movq	24(%rsp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rcx
	je	.LBB142_2
# BB#3:                                 # %land.lhs.true44
	movq	16(%rsp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rcx
	jne	.LBB142_6
# BB#4:                                 # %if.then49
	movq	8(%rsp), %r8            # 8-byte Reload
	movl	(%r8), %ecx
	andq	$134217728, %rcx        # imm = 0x8000000
	movabsq	$4160749567, %rdx       # imm = 0xF7FFFFFF
	andq	%rdx, %rdi
	orq	%rcx, %rdi
	movl	%edi, (%r9)
	movl	(%r8), %ecx
	andq	$268435456, %rcx        # imm = 0x10000000
	movabsq	$4026531839, %rdx       # imm = 0xEFFFFFFF
	andq	%rdi, %rdx
	orq	%rcx, %rdx
	movl	%edx, (%r9)
	movl	(%r8), %ecx
	andq	$-2147483648, %rcx      # imm = 0xFFFFFFFF80000000
	andq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	orq	%rcx, %rdx
	movl	%edx, (%r9)
	movl	(%r8), %ecx
	andq	$67108864, %rcx         # imm = 0x4000000
	andq	$-67108865, %rdx        # imm = 0xFFFFFFFFFBFFFFFF
	orq	%rcx, %rdx
	movl	%edx, (%r9)
	movl	(%r8), %ecx
	andq	$16777216, %rcx         # imm = 0x1000000
	movabsq	$4278190079, %rsi       # imm = 0xFEFFFFFF
	andq	%rdx, %rsi
	orq	%rcx, %rsi
	movl	%esi, (%r9)
	movq	16(%r8), %rcx
	jmp	.LBB142_5
.LBB142_2:                              # %if.then
	movl	(%rbx), %ecx
	andq	$134217728, %rcx        # imm = 0x8000000
	movabsq	$4160749567, %rdx       # imm = 0xF7FFFFFF
	andq	%rdx, %rdi
	orq	%rcx, %rdi
	movl	%edi, (%r9)
	movl	(%rbx), %ecx
	andq	$268435456, %rcx        # imm = 0x10000000
	movabsq	$4026531839, %rdx       # imm = 0xEFFFFFFF
	andq	%rdi, %rdx
	orq	%rcx, %rdx
	movl	%edx, (%r9)
	movl	(%rbx), %ecx
	andq	$-2147483648, %rcx      # imm = 0xFFFFFFFF80000000
	andq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	orq	%rcx, %rdx
	movl	%edx, (%r9)
	movl	(%rbx), %ecx
	andq	$67108864, %rcx         # imm = 0x4000000
	andq	$-67108865, %rdx        # imm = 0xFFFFFFFFFBFFFFFF
	orq	%rcx, %rdx
	movl	%edx, (%r9)
	movl	(%rbx), %ecx
	andq	$16777216, %rcx         # imm = 0x1000000
	movabsq	$4278190079, %rsi       # imm = 0xFEFFFFFF
	andq	%rdx, %rsi
	orq	%rcx, %rsi
	movl	%esi, (%r9)
	movq	16(%rbx), %rcx
.LBB142_5:                              # %for.cond.preheader
	movq	%rcx, 16(%r9)
.LBB142_6:                              # %for.cond.preheader
	movzbl	rtx_length(%rax), %ecx
	movq	%rcx, (%rsp)            # 8-byte Spill
	testq	%rcx, %rcx
	je	.LBB142_12
# BB#7:                                 # %for.body.lr.ph
	movq	rtx_format(,%rax,8), %r14
	xorq	%r15, %r15
	.align	16, 0x90
.LBB142_8:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_14 Depth 2
	movzbl	(%r14), %eax
	cmpq	$69, %rax
	jne	.LBB142_9
# BB#13:                                # %if.then112
                                        #   in Loop: Header=BB142_8 Depth=1
	movq	8(%r9,%r15,8), %rax
	movslq	(%rax), %r12
	testq	%r12, %r12
	jle	.LBB142_11
	jmp	.LBB142_14
	.align	16, 0x90
.LBB142_15:                             # %for.body119.for.body119_crit_edge
                                        #   in Loop: Header=BB142_14 Depth=2
	movq	8(%r9,%r15,8), %rax
.LBB142_14:                             # %for.body119.lr.ph
                                        #   Parent Loop BB142_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r9, %r13
	decq	%r12
	movq	8(%rax,%r12,8), %rdi
	movq	%rbx, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	16(%rsp), %r8           # 8-byte Reload
	callq	ix86_set_move_mem_attrs_1
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	%r13, %r9
	jg	.LBB142_15
	jmp	.LBB142_11
	.align	16, 0x90
.LBB142_9:                              # %for.body
                                        #   in Loop: Header=BB142_8 Depth=1
	cmpq	$101, %rax
	jne	.LBB142_11
# BB#10:                                # %if.then103
                                        #   in Loop: Header=BB142_8 Depth=1
	movq	8(%r9,%r15,8), %rdi
	movq	%rbx, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	16(%rsp), %r8           # 8-byte Reload
	movq	%r9, %r12
	callq	ix86_set_move_mem_attrs_1
	movq	%r12, %r9
.LBB142_11:                             # %for.inc128
                                        #   in Loop: Header=BB142_8 Depth=1
	incq	%r15
	incq	%r14
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	cmpq	%rcx, %rax
	jl	.LBB142_8
.LBB142_12:                             # %for.end129
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1382:
	.size	ix86_set_move_mem_attrs_1, .Ltmp1382-ix86_set_move_mem_attrs_1
	.cfi_endproc

	.globl	ix86_constant_alignment
	.align	16, 0x90
	.type	ix86_constant_alignment,@function
ix86_constant_alignment:                # @ix86_constant_alignment
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	16(%rdi), %eax
	cmpq	$29, %rax
	jne	.LBB143_1
# BB#10:                                # %land.lhs.true61
	movslq	32(%rdi), %rax
	cmpq	$31, %rax
	jl	.LBB143_12
# BB#11:                                # %land.lhs.true61
	movq	$256, %rax              # imm = 0x100
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$256, %rdx              # imm = 0x100
	jl	.LBB143_13
	jmp	.LBB143_12
.LBB143_1:                              # %entry
	cmpq	$26, %rax
	jne	.LBB143_12
# BB#2:                                 # %if.then
	movq	8(%rdi), %rax
	movl	60(%rax), %edx
	movq	$9, %rcx
	shrq	%cl, %rdx
	andq	$127, %rdx
	cmpq	$16, %rdx
	jne	.LBB143_4
# BB#3:                                 # %if.then
	movq	$64, %rax
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$64, %rdi
	jl	.LBB143_13
.LBB143_4:                              # %if.else
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	$46, %rdx
	ja	.LBB143_6
# BB#5:                                 # %if.else
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl, %rax
	movabsq	$70368744570944, %rcx   # imm = 0x400000060040
	testq	%rcx, %rax
	je	.LBB143_6
# BB#9:                                 # %land.lhs.true51
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$128, %rax
	jmp	.LBB143_8
.LBB143_6:                              # %lor.lhs.false42
	cmpq	$37, %rdx
	jne	.LBB143_12
# BB#7:                                 # %lor.lhs.false42
	movq	$128, %rax
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
.LBB143_8:                              # %lor.lhs.false42
	cmpq	$128, %rdx
	jl	.LBB143_13
.LBB143_12:                             # %if.end67
	movq	%rsi, %rax
.LBB143_13:                             # %return
	retq
.Ltmp1383:
	.size	ix86_constant_alignment, .Ltmp1383-ix86_constant_alignment
	.cfi_endproc

	.globl	ix86_data_alignment
	.align	16, 0x90
	.type	ix86_data_alignment,@function
ix86_data_alignment:                    # @ix86_data_alignment
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	16(%rdi), %r9d
	leaq	-18(%r9), %rdx
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rdx
	cmpq	$4, %rdx
	ja	.LBB144_8
# BB#1:                                 # %land.lhs.true
	movq	32(%rdi), %rax
	testq	%rax, %rax
	je	.LBB144_8
# BB#2:                                 # %land.lhs.true25
	movzbl	16(%rax), %ecx
	cmpq	$25, %rcx
	jne	.LBB144_8
# BB#3:                                 # %land.lhs.true33
	movq	32(%rax), %rcx
	cmpq	$255, %rcx
	jbe	.LBB144_4
# BB#6:                                 # %land.lhs.true44
	movq	$32, %rcx
	movq	%rsi, %r10
	shlq	%cl, %r10
	movq	$32, %rcx
	sarq	%cl, %r10
	movq	$256, %rax              # imm = 0x100
	jmp	.LBB144_7
.LBB144_4:                              # %lor.lhs.false38
	cmpq	$0, 40(%rax)
	je	.LBB144_8
# BB#5:                                 # %lor.lhs.false38
	movq	$256, %rax              # imm = 0x100
	movq	$32, %rcx
	movq	%rsi, %r10
	shlq	%cl, %r10
	movq	$32, %rcx
	sarq	%cl, %r10
.LBB144_7:                              # %land.lhs.true44
	cmpq	$256, %r10              # imm = 0x100
	jl	.LBB144_42
.LBB144_8:                              # %if.end
	movzbl	target_flags+3(%rip), %eax
	cmpq	$4, %rdx
	jbe	.LBB144_9
# BB#10:                                # %if.end
	movabsq	$1, %rcx
	jmp	.LBB144_11
.LBB144_9:
	movabsq	$0, %rcx
.LBB144_11:                             # %if.end
	testq	$2, %rax
	je	.LBB144_20
# BB#12:                                # %if.end
	testq	%rcx, %rcx
	jne	.LBB144_20
# BB#13:                                # %land.lhs.true77
	movq	32(%rdi), %rax
	testq	%rax, %rax
	je	.LBB144_20
# BB#14:                                # %land.lhs.true81
	movzbl	16(%rax), %ecx
	cmpq	$25, %rcx
	jne	.LBB144_20
# BB#15:                                # %land.lhs.true89
	movq	32(%rax), %rcx
	cmpq	$127, %rcx
	jbe	.LBB144_16
# BB#18:                                # %land.lhs.true103
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$128, %rax
	jmp	.LBB144_19
.LBB144_16:                             # %lor.lhs.false96
	cmpq	$0, 40(%rax)
	je	.LBB144_20
# BB#17:                                # %lor.lhs.false96
	movq	$128, %rax
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
.LBB144_19:                             # %land.lhs.true103
	cmpq	$128, %rdx
	jl	.LBB144_42
.LBB144_20:                             # %if.end107
	leaq	-6(%r9), %rax
	andq	%r8, %rax
	cmpq	$16, %rax
	ja	.LBB144_41
# BB#21:                                # %if.end107
	jmpq	*.LJTI144_0(,%rax,8)
.LBB144_33:                             # %land.lhs.true216
	movq	24(%rdi), %rax
	testq	%rax, %rax
	je	.LBB144_36
# BB#34:                                # %if.then219
	movzbl	48(%rax), %edx
	cmpq	$16, %rdx
	jne	.LBB144_26
# BB#35:                                # %if.then219
	movq	$64, %rax
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$64, %rdi
	jl	.LBB144_42
	jmp	.LBB144_26
.LBB144_36:                             # %if.else278
	cmpq	$9, %r9
	ja	.LBB144_41
# BB#37:                                # %if.else278
	movq	$1, %rax
	movq	%r9, %rcx
	shlq	%cl, %rax
	testq	$704, %rax              # imm = 0x2C0
	je	.LBB144_41
.LBB144_38:                             # %if.then296
	movl	60(%rdi), %edx
	jmp	.LBB144_23
.LBB144_30:                             # %if.then177
	movl	60(%rdi), %edx
	movq	$9, %rcx
	shrq	%cl, %rdx
	andq	$127, %rdx
	cmpq	$22, %rdx
	jne	.LBB144_32
# BB#31:                                # %if.then177
	movq	$64, %rax
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$64, %rdi
	jl	.LBB144_42
.LBB144_32:                             # %if.end187
	andq	%r8, %rdx
	cmpq	$23, %rdx
	je	.LBB144_29
	jmp	.LBB144_41
.LBB144_22:                             # %if.then113
	movq	8(%rdi), %rax
	movl	60(%rax), %edx
.LBB144_23:                             # %if.then113
	movq	$9, %rcx
	shrq	%cl, %rdx
	andq	$127, %rdx
	cmpq	$16, %rdx
	jne	.LBB144_25
# BB#24:                                # %if.then113
	movq	$64, %rax
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$64, %rdi
	jl	.LBB144_42
.LBB144_25:                             # %if.end123
	andq	%r8, %rdx
.LBB144_26:                             # %if.end123
	cmpq	$46, %rdx
	ja	.LBB144_28
# BB#27:                                # %if.end123
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl, %rax
	movabsq	$70368744570944, %rcx   # imm = 0x400000060040
	testq	%rcx, %rax
	je	.LBB144_28
# BB#39:                                # %land.lhs.true341
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$128, %rax
	jmp	.LBB144_40
.LBB144_28:                             # %lor.lhs.false159
	cmpq	$37, %rdx
	jne	.LBB144_41
.LBB144_29:                             # %lor.lhs.false159
	movq	$128, %rax
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
.LBB144_40:                             # %land.lhs.true341
	cmpq	$128, %rdx
	jl	.LBB144_42
.LBB144_41:                             # %if.end348
	movq	%rsi, %rax
.LBB144_42:                             # %return
	retq
.Ltmp1384:
	.size	ix86_data_alignment, .Ltmp1384-ix86_data_alignment
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI144_0:
	.quad	.LBB144_38
	.quad	.LBB144_38
	.quad	.LBB144_30
	.quad	.LBB144_38
	.quad	.LBB144_41
	.quad	.LBB144_41
	.quad	.LBB144_41
	.quad	.LBB144_41
	.quad	.LBB144_41
	.quad	.LBB144_41
	.quad	.LBB144_41
	.quad	.LBB144_41
	.quad	.LBB144_22
	.quad	.LBB144_41
	.quad	.LBB144_33
	.quad	.LBB144_33
	.quad	.LBB144_33

	.text
	.globl	ix86_local_alignment
	.align	16, 0x90
	.type	ix86_local_alignment,@function
ix86_local_alignment:                   # @ix86_local_alignment
	.cfi_startproc
# BB#0:                                 # %entry
	movzbl	target_flags+3(%rip), %eax
	movl	16(%rdi), %edx
	testq	$2, %rax
	je	.LBB145_9
# BB#1:                                 # %if.then
	movq	%rdx, %rax
	andq	$255, %rax
	addq	$-18, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	ja	.LBB145_9
# BB#2:                                 # %land.lhs.true
	movq	32(%rdi), %rax
	testq	%rax, %rax
	je	.LBB145_9
# BB#3:                                 # %land.lhs.true26
	movzbl	16(%rax), %ecx
	cmpq	$25, %rcx
	jne	.LBB145_9
# BB#4:                                 # %land.lhs.true34
	movq	32(%rax), %rcx
	cmpq	$15, %rcx
	jbe	.LBB145_5
# BB#7:                                 # %land.lhs.true45
	movq	$32, %rcx
	movq	%rsi, %r8
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	movq	$128, %rax
	jmp	.LBB145_8
.LBB145_5:                              # %lor.lhs.false39
	cmpq	$0, 40(%rax)
	je	.LBB145_9
# BB#6:                                 # %lor.lhs.false39
	movq	$128, %rax
	movq	$32, %rcx
	movq	%rsi, %r8
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
.LBB145_8:                              # %land.lhs.true45
	cmpq	$128, %r8
	jl	.LBB145_31
.LBB145_9:                              # %if.end48
	andq	$255, %rdx
	leaq	-6(%rdx), %rax
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rax
	cmpq	$16, %rax
	ja	.LBB145_30
# BB#10:                                # %if.end48
	jmpq	*.LJTI145_0(,%rax,8)
.LBB145_22:                             # %land.lhs.true157
	movq	24(%rdi), %rax
	testq	%rax, %rax
	je	.LBB145_25
# BB#23:                                # %if.then160
	movzbl	48(%rax), %edx
	cmpq	$16, %rdx
	jne	.LBB145_15
# BB#24:                                # %if.then160
	movq	$64, %rax
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$64, %rdi
	jl	.LBB145_31
	jmp	.LBB145_15
.LBB145_25:                             # %if.else219
	cmpq	$9, %rdx
	ja	.LBB145_30
# BB#26:                                # %if.else219
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl, %rax
	testq	$704, %rax              # imm = 0x2C0
	je	.LBB145_30
.LBB145_27:                             # %if.then237
	movl	60(%rdi), %edx
	jmp	.LBB145_12
.LBB145_19:                             # %if.then118
	movl	60(%rdi), %edx
	movq	$9, %rcx
	shrq	%cl, %rdx
	andq	$127, %rdx
	cmpq	$22, %rdx
	jne	.LBB145_21
# BB#20:                                # %if.then118
	movq	$64, %rax
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$64, %rdi
	jl	.LBB145_31
.LBB145_21:                             # %if.end128
	andq	%r8, %rdx
	cmpq	$23, %rdx
	je	.LBB145_18
	jmp	.LBB145_30
.LBB145_11:                             # %if.then54
	movq	8(%rdi), %rax
	movl	60(%rax), %edx
.LBB145_12:                             # %if.then54
	movq	$9, %rcx
	shrq	%cl, %rdx
	andq	$127, %rdx
	cmpq	$16, %rdx
	jne	.LBB145_14
# BB#13:                                # %if.then54
	movq	$64, %rax
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$64, %rdi
	jl	.LBB145_31
.LBB145_14:                             # %if.end64
	andq	%r8, %rdx
.LBB145_15:                             # %if.end64
	cmpq	$46, %rdx
	ja	.LBB145_17
# BB#16:                                # %if.end64
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl, %rax
	movabsq	$70368744570944, %rcx   # imm = 0x400000060040
	testq	%rcx, %rax
	je	.LBB145_17
# BB#28:                                # %land.lhs.true282
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$128, %rax
	jmp	.LBB145_29
.LBB145_17:                             # %lor.lhs.false100
	cmpq	$37, %rdx
	jne	.LBB145_30
.LBB145_18:                             # %lor.lhs.false100
	movq	$128, %rax
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
.LBB145_29:                             # %land.lhs.true282
	cmpq	$128, %rdx
	jl	.LBB145_31
.LBB145_30:                             # %if.end289
	movq	%rsi, %rax
.LBB145_31:                             # %return
	retq
.Ltmp1385:
	.size	ix86_local_alignment, .Ltmp1385-ix86_local_alignment
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI145_0:
	.quad	.LBB145_27
	.quad	.LBB145_27
	.quad	.LBB145_19
	.quad	.LBB145_27
	.quad	.LBB145_30
	.quad	.LBB145_30
	.quad	.LBB145_30
	.quad	.LBB145_30
	.quad	.LBB145_30
	.quad	.LBB145_30
	.quad	.LBB145_30
	.quad	.LBB145_30
	.quad	.LBB145_11
	.quad	.LBB145_30
	.quad	.LBB145_22
	.quad	.LBB145_22
	.quad	.LBB145_22

	.text
	.globl	x86_initialize_trampoline
	.align	16, 0x90
	.type	x86_initialize_trampoline,@function
x86_initialize_trampoline:              # @x86_initialize_trampoline
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1392:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1393:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1394:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1395:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1396:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp1397:
	.cfi_def_cfa_offset 64
.Ltmp1398:
	.cfi_offset %rbx, -48
.Ltmp1399:
	.cfi_offset %r12, -40
.Ltmp1400:
	.cfi_offset %r13, -32
.Ltmp1401:
	.cfi_offset %r14, -24
.Ltmp1402:
	.cfi_offset %r15, -16
	movzbl	target_flags+3(%rip), %eax
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %r12
	testq	$2, %rax
	je	.LBB146_27
# BB#1:                                 # %if.else
	movzbl	(%r15), %eax
	cmpq	$66, %rax
	jg	.LBB146_12
# BB#2:                                 # %if.else
	cmpq	$54, %rax
	jne	.LBB146_3
# BB#16:                                # %sw.bb1.i
	movl	12(%r15), %eax
	testq	%rax, %rax
	je	.LBB146_20
# BB#17:
	movabsq	$0, %rax
	jmp	.LBB146_21
.LBB146_27:                             # %if.then
	movq	optab_table+16(%rip), %rbx
	movq	$10, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$4, %rdi
	xorq	%r8, %r8
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	expand_binop
	movq	%rax, %r15
	movq	$2, %rdi
	movq	%r12, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	$185, %rdi
	movq	$2, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movq	$1, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	emit_move_insn
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$2, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	$233, %rdi
	movq	$2, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movq	$6, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rdi
	movq	%r15, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_move_insn  # TAILCALL
.LBB146_12:                             # %if.else
	cmpq	$67, %rax
	jne	.LBB146_13
# BB#18:                                # %sw.bb3.i
	movl	ix86_cmodel(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB146_20
# BB#19:
	movabsq	$0, %rax
	jmp	.LBB146_21
.LBB146_3:                              # %if.else
	cmpq	$58, %rax
	jne	.LBB146_11
# BB#4:                                 # %sw.bb8.i
	movq	8(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$75, %rcx
	jne	.LBB146_11
# BB#5:                                 # %if.then.i
	movl	ix86_cmodel(%rip), %ecx
	cmpq	$4, %rcx
	je	.LBB146_11
# BB#6:                                 # %if.end.i
	movq	8(%rax), %rdx
	movzbl	(%rdx), %edx
	cmpq	$67, %rdx
	jne	.LBB146_11
# BB#7:                                 # %if.end.i
	movabsq	$4294967293, %rdx       # imm = 0xFFFFFFFD
	andq	%rdx, %rcx
	cmpq	$1, %rcx
	jne	.LBB146_11
# BB#8:                                 # %land.lhs.true.i
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB146_11
# BB#9:                                 # %land.lhs.true42.i
	movq	8(%rbx), %rdi
	movq	$5, %rsi
	callq	trunc_int_for_mode
	cmpq	$-65535, %rax           # imm = 0xFFFFFFFFFFFF0001
	jl	.LBB146_11
# BB#10:                                # %land.lhs.true48.i
	movq	8(%rbx), %rdi
	movq	$4, %rsi
	callq	trunc_int_for_mode
	movq	8(%rbx), %rcx
	cmpq	%rcx, %rax
	je	.LBB146_22
	jmp	.LBB146_11
.LBB146_13:                             # %if.else
	cmpq	$68, %rax
	jne	.LBB146_11
# BB#14:                                # %sw.bb2.i
	movl	ix86_cmodel(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB146_15
.LBB146_20:                             # %sw.bb3.i
	movabsq	$1, %rax
	jmp	.LBB146_21
.LBB146_15:
	movabsq	$0, %rax
.LBB146_21:                             # %x86_64_zero_extended_value.exit
	testq	%rax, %rax
	je	.LBB146_11
.LBB146_22:                             # %if.then19
	movq	$5, %rdi
	movq	%r15, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r15
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$3, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	$47937, %rdi            # imm = 0xBB41
	movq	$3, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	$4, %rdi
	movq	%r15, %rsi
	callq	gen_lowpart
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movq	$6, %rbx
	jmp	.LBB146_23
.LBB146_11:                             # %if.else32
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$3, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	$47945, %rdi            # imm = 0xBB49
	movq	$3, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$5, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	emit_move_insn
	movq	$10, %rbx
.LBB146_23:                             # %if.end
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%rbx, %rsi
	andq	%r13, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$3, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %r15
	movq	$47689, %rdi            # imm = 0xBA49
	movq	$3, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	leaq	2(%rbx), %rsi
	andq	%r13, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$5, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	emit_move_insn
	leaq	10(%rbx), %rsi
	andq	%r13, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$3, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %r14
	movq	$65353, %rdi            # imm = 0xFF49
	movq	$3, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	leaq	12(%rbx), %rsi
	andq	%r13, %rsi
	movq	%r12, %rdi
	callq	plus_constant_wide
	movq	$2, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %r14
	movq	$227, %rdi
	movq	$2, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	emit_move_insn
	addq	$13, %rbx
	movzbl	target_flags+3(%rip), %eax
	andq	%r13, %rbx
	andq	$2, %rax
	movq	$1, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	movq	$23, %rax
	jne	.LBB146_25
# BB#24:                                # %if.end
	movq	$10, %rax
.LBB146_25:                             # %if.end
	cmpq	%rax, %rbx
	ja	.LBB146_28
# BB#26:                                # %if.end76
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB146_28:                             # %if.then74
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.x86_initialize_trampoline, %rcx
	movq	$10894, %rsi            # imm = 0x2A8E
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1403:
	.size	x86_initialize_trampoline, .Ltmp1403-x86_initialize_trampoline
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_expand_unop1_builtin,@function
ix86_expand_unop1_builtin:              # @ix86_expand_unop1_builtin
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1410:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1411:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1412:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1413:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1414:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp1415:
	.cfi_def_cfa_offset 64
.Ltmp1416:
	.cfi_offset %rbx, -48
.Ltmp1417:
	.cfi_offset %r12, -40
.Ltmp1418:
	.cfi_offset %r13, -32
.Ltmp1419:
	.cfi_offset %r14, -24
.Ltmp1420:
	.cfi_offset %r15, -16
	movq	32(%rsi), %rax
	movq	%rdx, %r12
	movq	%rdi, %rbx
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rbx, %rcx
	andq	%rdx, %rcx
	leaq	(%rcx,%rcx,4), %rcx
	movq	insn_data+24(,%rcx,8), %r14
	movzbl	16(%r14), %ebx
	movzbl	40(%r14), %r15d
	movq	%rax, %r13
	testq	%r12, %r12
	je	.LBB147_3
# BB#1:                                 # %lor.lhs.false
	movzbl	2(%r12), %eax
	cmpq	%rbx, %rax
	jne	.LBB147_3
# BB#2:                                 # %lor.lhs.false10
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	*(%r14)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB147_4
.LBB147_3:                              # %if.then
	movq	%rbx, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r12
.LBB147_4:                              # %if.end
	movl	mode_class(,%r15,4), %eax
	addq	$-7, %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$1, %rax
	ja	.LBB147_6
# BB#5:                                 # %if.then25
	movq	%r13, %rdi
	movq	%r15, %rsi
	callq	safe_vector_operand
	movq	%rax, %r13
.LBB147_6:                              # %if.end27
	movq	%r13, %rdi
	movq	%r15, %rsi
	callq	*24(%r14)
	testq	%rbx, %rax
	jne	.LBB147_8
# BB#7:                                 # %if.then35
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r13
.LBB147_8:                              # %if.end37
	movq	%r13, %rdi
	movq	%r15, %rsi
	callq	*48(%r14)
	testq	%rbx, %rax
	movq	%r13, %rdx
	jne	.LBB147_10
# BB#9:                                 # %if.then45
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %rdx
.LBB147_10:                             # %if.end47
	movq	$32, %rcx
	movq	8(%rsp), %rax           # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	leaq	(%rax,%rax,4), %rcx
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	%r12, %r14
	movq	%r14, %rdi
	movq	%r13, %rsi
	callq	*insn_data+16(,%rcx,8)
	testq	%rax, %rax
	je	.LBB147_12
# BB#11:                                # %if.end53
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rbx
.LBB147_12:                             # %return
	movq	%rbx, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1421:
	.size	ix86_expand_unop1_builtin, .Ltmp1421-ix86_expand_unop1_builtin
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_expand_timode_binop_builtin,@function
ix86_expand_timode_binop_builtin:       # @ix86_expand_timode_binop_builtin
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1428:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1429:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1430:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1431:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1432:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp1433:
	.cfi_def_cfa_offset 64
.Ltmp1434:
	.cfi_offset %rbx, -48
.Ltmp1435:
	.cfi_offset %r12, -40
.Ltmp1436:
	.cfi_offset %r13, -32
.Ltmp1437:
	.cfi_offset %r14, -24
.Ltmp1438:
	.cfi_offset %r15, -16
	movq	(%rsi), %rcx
	movq	32(%rsi), %rax
	movq	32(%rcx), %r14
	movq	%rdi, %r13
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movq	%rax, %r15
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	callq	expand_expr
	movq	%rax, %rbx
	movq	$6, %rdi
	movq	%r15, %rsi
	callq	gen_lowpart
	movq	%rax, %r15
	movq	$6, %rdi
	movq	%rbx, %rsi
	callq	gen_lowpart
	movq	%rax, %r12
	movq	$6, %rdi
	callq	gen_reg_rtx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	%r13, %rcx
	andq	%rbx, %rcx
	leaq	(%rcx,%rcx,4), %rcx
	movq	insn_data+24(,%rcx,8), %r14
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$6, %rsi
	movq	%r15, %rdi
	callq	*24(%r14)
	testq	%rbx, %rax
	jne	.LBB148_2
# BB#1:                                 # %if.then
	movq	$6, %rdi
	movq	%r15, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r15
.LBB148_2:                              # %if.end
	movq	$6, %rsi
	movq	%r12, %rdi
	callq	*48(%r14)
	testq	%rbx, %rax
	jne	.LBB148_4
# BB#3:                                 # %if.then17
	movq	$6, %rdi
	movq	%r12, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r12
.LBB148_4:                              # %if.end19
	movzbl	(%r15), %eax
	cmpq	$66, %rax
	jne	.LBB148_5
# BB#6:                                 # %land.lhs.true
	movzbl	(%r12), %eax
	cmpq	$66, %rax
	movq	8(%rsp), %rbx           # 8-byte Reload
	jne	.LBB148_8
# BB#7:                                 # %if.then23
	movq	$6, %rdi
	movq	%r15, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r15
	jmp	.LBB148_8
.LBB148_5:
	movq	8(%rsp), %rbx           # 8-byte Reload
.LBB148_8:                              # %if.end25
	movq	$32, %rcx
	shlq	%cl, %r13
	movq	$32, %rcx
	sarq	%cl, %r13
	leaq	(%r13,%r13,4), %rcx
	xorq	%rax, %rax
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	*insn_data+16(,%rcx,8)
	testq	%rax, %rax
	je	.LBB148_9
# BB#10:                                # %if.end31
	movq	%rax, %rdi
	callq	emit_insn
	movq	$46, %rdi
	movq	%rbx, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_lowpart  # TAILCALL
.LBB148_9:                              # %return
	xorq	%rax, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1439:
	.size	ix86_expand_timode_binop_builtin, .Ltmp1439-ix86_expand_timode_binop_builtin
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_expand_unop_builtin,@function
ix86_expand_unop_builtin:               # @ix86_expand_unop_builtin
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1446:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1447:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1448:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1449:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1450:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp1451:
	.cfi_def_cfa_offset 80
.Ltmp1452:
	.cfi_offset %rbx, -48
.Ltmp1453:
	.cfi_offset %r12, -40
.Ltmp1454:
	.cfi_offset %r13, -32
.Ltmp1455:
	.cfi_offset %r14, -24
.Ltmp1456:
	.cfi_offset %r15, -16
	movq	32(%rsi), %rax
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rdx, %rbx
	movq	%rdi, %r14
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%r14, %rcx
	andq	%rdx, %rcx
	leaq	(%rcx,%rcx,4), %rcx
	movq	insn_data+24(,%rcx,8), %r13
	movzbl	16(%r13), %r12d
	movzbl	40(%r13), %ecx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rax, %r15
	testq	%rbx, %rbx
	je	.LBB149_3
# BB#1:                                 # %lor.lhs.false
	movzbl	2(%rbx), %eax
	cmpq	%r12, %rax
	jne	.LBB149_3
# BB#2:                                 # %lor.lhs.false10
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	*(%r13)
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rax
	jne	.LBB149_4
.LBB149_3:                              # %if.then
	movq	%r12, %rdi
	movq	%rdx, %rbx
	callq	gen_reg_rtx
	movq	%rbx, %rdx
	movq	%rax, %rbx
.LBB149_4:                              # %if.end
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	movq	8(%rsp), %rax           # 8-byte Reload
	testq	%rdx, %rax
	je	.LBB149_6
# BB#5:                                 # %if.then19
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	%r15, %rsi
	callq	copy_to_mode_reg
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	jmp	.LBB149_10
.LBB149_6:                              # %if.else
	movq	24(%rsp), %r12          # 8-byte Reload
	movl	mode_class(,%r12,4), %eax
	addq	$-7, %rax
	andq	%rdx, %rax
	cmpq	$1, %rax
	ja	.LBB149_8
# BB#7:                                 # %if.then30
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	safe_vector_operand
	movq	%rax, %r15
.LBB149_8:                              # %if.end32
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	*24(%r13)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB149_11
# BB#9:                                 # %if.then40
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	copy_to_mode_reg
.LBB149_10:                             # %if.end43
	movq	%rax, %r15
.LBB149_11:                             # %if.end43
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	leaq	(%r14,%r14,4), %rcx
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	16(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	*insn_data+16(,%rcx,8)
	testq	%rax, %rax
	je	.LBB149_13
# BB#12:                                # %if.end49
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rbx
.LBB149_13:                             # %return
	movq	%rbx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1457:
	.size	ix86_expand_unop_builtin, .Ltmp1457-ix86_expand_unop_builtin
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_expand_store_builtin,@function
ix86_expand_store_builtin:              # @ix86_expand_store_builtin
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1464:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1465:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1466:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1467:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1468:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp1469:
	.cfi_def_cfa_offset 64
.Ltmp1470:
	.cfi_offset %rbx, -48
.Ltmp1471:
	.cfi_offset %r12, -40
.Ltmp1472:
	.cfi_offset %r13, -32
.Ltmp1473:
	.cfi_offset %r14, -24
.Ltmp1474:
	.cfi_offset %r15, -16
	movq	(%rsi), %rcx
	movq	32(%rsi), %rax
	movq	32(%rcx), %r14
	movq	%rdi, %rbx
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	callq	expand_expr
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rbx, %rcx
	andq	%rdx, %rcx
	leaq	(%rcx,%rcx,4), %rcx
	movq	insn_data+24(,%rcx,8), %r13
	movzbl	40(%r13), %r15d
	movl	mode_class(,%r15,4), %ecx
	movq	%rax, %r14
	movzbl	16(%r13), %r12d
	addq	$-7, %rcx
	andq	%rdx, %rcx
	cmpq	$1, %rcx
	ja	.LBB150_2
# BB#1:                                 # %if.then
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	safe_vector_operand
	movq	%rax, %r14
.LBB150_2:                              # %if.end
	movl	target_flags(%rip), %edi
	movq	$25, %rcx
	shrq	%cl, %rdi
	andq	$1, %rdi
	orq	$4, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	copy_to_mode_reg
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %r12
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	*24(%r13)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB150_4
# BB#3:                                 # %if.then26
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r14
.LBB150_4:                              # %if.end28
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	leaq	(%rbx,%rbx,4), %rcx
	xorq	%rax, %rax
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	*insn_data+16(,%rcx,8)
	testq	%rax, %rax
	je	.LBB150_5
# BB#6:                                 # %if.then33
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	emit_insn  # TAILCALL
.LBB150_5:                              # %if.end35
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1475:
	.size	ix86_expand_store_builtin, .Ltmp1475-ix86_expand_store_builtin
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_expand_binop_builtin,@function
ix86_expand_binop_builtin:              # @ix86_expand_binop_builtin
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1482:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1483:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1484:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1485:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1486:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp1487:
	.cfi_def_cfa_offset 80
.Ltmp1488:
	.cfi_offset %rbx, -48
.Ltmp1489:
	.cfi_offset %r12, -40
.Ltmp1490:
	.cfi_offset %r13, -32
.Ltmp1491:
	.cfi_offset %r14, -24
.Ltmp1492:
	.cfi_offset %r15, -16
	movq	(%rsi), %rcx
	movq	32(%rsi), %rax
	movq	32(%rcx), %r14
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movq	%rdi, %rbx
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	callq	expand_expr
	movq	%rax, %r13
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	callq	expand_expr
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rbx, %rcx
	andq	%rdx, %rcx
	leaq	(%rcx,%rcx,4), %rcx
	movq	insn_data+24(,%rcx,8), %rbx
	movzbl	40(%rbx), %esi
	movl	mode_class(,%rsi,4), %ecx
	movq	%rax, %r12
	movzbl	16(%rbx), %r15d
	movzbl	64(%rbx), %r14d
	addq	$-7, %rcx
	andq	%rdx, %rcx
	cmpq	$1, %rcx
	ja	.LBB151_1
# BB#2:                                 # %if.then
	movq	%r13, %rdi
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	callq	safe_vector_operand
	movq	%rax, %r13
	jmp	.LBB151_3
.LBB151_1:
	movq	%rsi, 16(%rsp)          # 8-byte Spill
.LBB151_3:                              # %if.end
	movl	mode_class(,%r14,4), %eax
	addq	$-7, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$1, %rax
	ja	.LBB151_5
# BB#4:                                 # %if.then32
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	safe_vector_operand
	movq	%rax, %r12
.LBB151_5:                              # %if.end34
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rdx
	testq	%rdi, %rdi
	je	.LBB151_8
# BB#6:                                 # %lor.lhs.false35
	movzbl	2(%rdi), %eax
	cmpq	%rdx, %rax
	jne	.LBB151_8
# BB#7:                                 # %lor.lhs.false38
	movq	%rdx, %rsi
	movq	%rdx, %r15
	callq	*(%rbx)
	movq	24(%rsp), %rcx          # 8-byte Reload
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rax
	movq	%r15, %rdx
	jne	.LBB151_9
.LBB151_8:                              # %if.then45
	movq	%rdx, %rdi
	callq	gen_reg_rtx
	movq	%rax, %rcx
.LBB151_9:                              # %if.end47
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movzbl	2(%r13), %eax
	movq	16(%rsp), %r15          # 8-byte Reload
	cmpq	%r15, %rax
	jne	.LBB151_21
# BB#10:                                # %lor.lhs.false52
	movzbl	2(%r12), %eax
	cmpq	%r14, %rax
	jne	.LBB151_21
# BB#11:                                # %if.end58
	movq	%r13, %rdi
	movq	%r15, %rsi
	callq	*24(%rbx)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB151_13
# BB#12:                                # %if.then66
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r13
.LBB151_13:                             # %if.end68
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	*48(%rbx)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB151_15
# BB#14:                                # %if.then76
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r12
.LBB151_15:                             # %if.end78
	movzbl	(%r13), %eax
	cmpq	$66, %rax
	movq	%r15, %rdi
	jne	.LBB151_18
# BB#16:                                # %land.lhs.true
	movzbl	(%r12), %eax
	cmpq	$66, %rax
	jne	.LBB151_18
# BB#17:                                # %if.then85
	movq	%r13, %rsi
	callq	copy_to_mode_reg
	movq	%rax, %r13
.LBB151_18:                             # %if.end87
	movq	$32, %rcx
	movq	8(%rsp), %rax           # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	leaq	(%rax,%rax,4), %rcx
	xorq	%rax, %rax
	xorq	%rbx, %rbx
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	callq	*insn_data+16(,%rcx,8)
	testq	%rax, %rax
	je	.LBB151_20
# BB#19:                                # %if.end93
	movq	%rax, %rdi
	callq	emit_insn
	movq	%r14, %rbx
.LBB151_20:                             # %return
	movq	%rbx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB151_21:                             # %if.then57
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_expand_binop_builtin, %rcx
	movq	$11501, %rsi            # imm = 0x2CED
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1493:
	.size	ix86_expand_binop_builtin, .Ltmp1493-ix86_expand_binop_builtin
	.cfi_endproc

	.globl	ix86_force_to_memory
	.align	16, 0x90
	.type	ix86_force_to_memory,@function
ix86_force_to_memory:                   # @ix86_force_to_memory
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1499:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1500:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp1501:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp1502:
	.cfi_def_cfa_offset 40
	subq	$24, %rsp
.Ltmp1503:
	.cfi_def_cfa_offset 64
.Ltmp1504:
	.cfi_offset %rbx, -40
.Ltmp1505:
	.cfi_offset %r12, -32
.Ltmp1506:
	.cfi_offset %r14, -24
.Ltmp1507:
	.cfi_offset %r15, -16
	movl	reload_completed(%rip), %eax
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	%r15, 16(%rsp)
	testq	%rax, %rax
	je	.LBB152_1
# BB#3:                                 # %if.end
	movl	target_flags(%rip), %ebx
	movq	%rbx, %rcx
	andq	$100663296, %rcx        # imm = 0x6000000
	cmpq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB152_4
# BB#20:                                # %if.end56
	movq	$25, %rcx
	movq	global_rtl+16(%rip), %r12
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	xorq	%rdi, %rdi
	movq	$-128, %rsi
	callq	gen_rtx_CONST_INT
	movq	$75, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	%rax, %rbx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	emit_move_insn
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB152_4:                              # %if.end
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$100663296, %rcx        # imm = 0x6000000
	jne	.LBB152_12
# BB#5:                                 # %if.then15
	movq	%r14, %rcx
	andq	%rax, %rcx
	cmpq	$5, %rcx
	je	.LBB152_8
# BB#6:                                 # %if.then15
	leaq	-3(%r14), %rcx
	andq	%rax, %rcx
	cmpq	$1, %rcx
	ja	.LBB152_11
# BB#7:                                 # %sw.bb
	movq	$5, %rdi
	movq	%r15, %rsi
	callq	gen_lowpart
	movq	%rax, %r15
	movq	%r15, 16(%rsp)
.LBB152_8:                              # %sw.bb17
	movq	global_rtl+16(%rip), %rdx
	movq	$96, %rdi
	movq	$5, %rsi
	callq	gen_rtx_fmt_e
	movq	$5, %rdi
	jmp	.LBB152_9
.LBB152_12:                             # %if.else23
	andq	%r14, %rax
	cmpq	$3, %rax
	je	.LBB152_16
# BB#13:                                # %if.else23
	cmpq	$4, %rax
	je	.LBB152_18
# BB#14:                                # %if.else23
	cmpq	$5, %rax
	jne	.LBB152_19
# BB#15:                                # %sw.bb24
	leaq	8(%rsp), %rcx
	leaq	16(%rsp), %rdi
	leaq	(%rsp), %rdx
	movq	$1, %rsi
	callq	split_di
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	movq	global_rtl+16(%rip), %rdx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$96, %rdi
	callq	gen_rtx_fmt_e
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	8(%rsp), %rcx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	movq	global_rtl+16(%rip), %rdx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$96, %rdi
	callq	gen_rtx_fmt_e
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	(%rsp), %rcx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	jmp	.LBB152_10
.LBB152_16:                             # %sw.bb41
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	je	.LBB152_18
# BB#17:                                # %if.then44
	movq	$4, %rdi
	movq	%r15, %rsi
	callq	gen_lowpart
	movq	%rax, %r15
	movq	%r15, 16(%rsp)
.LBB152_18:                             # %sw.bb47
	movq	global_rtl+16(%rip), %rdx
	movzbl	2(%r15), %ebx
	movq	$96, %rdi
	movq	$4, %rsi
	callq	gen_rtx_fmt_e
	movq	%rbx, %rdi
.LBB152_9:                              # %sw.epilog53
	movq	%rax, %rsi
	callq	gen_rtx_MEM
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	movq	%r15, %rcx
.LBB152_10:                             # %sw.epilog53
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	callq	emit_insn
	movq	global_rtl+16(%rip), %rsi
	movq	%r14, %rdi
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	gen_rtx_MEM  # TAILCALL
.LBB152_1:                              # %if.then
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_force_to_memory, %rcx
	movq	$12178, %rsi            # imm = 0x2F92
	jmp	.LBB152_2
.LBB152_11:                             # %sw.default
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_force_to_memory, %rcx
	movq	$12204, %rsi            # imm = 0x2FAC
	jmp	.LBB152_2
.LBB152_19:                             # %sw.default52
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_force_to_memory, %rcx
	movq	$12244, %rsi            # imm = 0x2FD4
.LBB152_2:                              # %if.then
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1508:
	.size	ix86_force_to_memory, .Ltmp1508-ix86_force_to_memory
	.cfi_endproc

	.globl	ix86_free_from_memory
	.align	16, 0x90
	.type	ix86_free_from_memory,@function
ix86_free_from_memory:                  # @ix86_free_from_memory
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp1512:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp1513:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp1514:
	.cfi_def_cfa_offset 32
.Ltmp1515:
	.cfi_offset %rbx, -24
.Ltmp1516:
	.cfi_offset %r14, -16
	movl	target_flags(%rip), %ebx
	movq	%rbx, %rax
	andq	$100663296, %rax        # imm = 0x6000000
	cmpq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB153_1
# BB#11:                                # %if.end18
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB153_1:                              # %if.then
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdi
	cmpq	$5, %rdi
	movq	$8, %rsi
	je	.LBB153_10
# BB#2:                                 # %if.then
	movq	%rbx, %rcx
	andq	$33554432, %rcx         # imm = 0x2000000
	testq	%rax, %rcx
	jne	.LBB153_10
# BB#3:                                 # %if.else
	cmpq	$3, %rdi
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB153_5
# BB#4:                                 # %if.else
	movq	%rcx, %rdx
.LBB153_5:                              # %if.else
	movl	ix86_cpu(%rip), %esi
	cmpq	$3, %rsi
	movq	%rax, %rsi
	jne	.LBB153_7
# BB#6:                                 # %if.else
	movq	%rcx, %rsi
.LBB153_7:                              # %if.else
	testq	%rsi, %rdx
	jne	.LBB153_9
# BB#8:                                 # %if.else
	movq	%rcx, %rax
.LBB153_9:                              # %if.else
	imulq	$2, %rax, %rsi
	addq	$2, %rsi
.LBB153_10:                             # %if.end12
	movq	global_rtl+16(%rip), %r14
	movq	$25, %rcx
	shrq	%cl, %rbx
	andq	$1, %rbx
	orq	$4, %rbx
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$75, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	jmp	emit_insn  # TAILCALL
.Ltmp1517:
	.size	ix86_free_from_memory, .Ltmp1517-ix86_free_from_memory
	.cfi_endproc

	.globl	ix86_preferred_reload_class
	.align	16, 0x90
	.type	ix86_preferred_reload_class,@function
ix86_preferred_reload_class:            # @ix86_preferred_reload_class
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1523:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1524:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp1525:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp1526:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp1527:
	.cfi_def_cfa_offset 48
.Ltmp1528:
	.cfi_offset %rbx, -40
.Ltmp1529:
	.cfi_offset %r12, -32
.Ltmp1530:
	.cfi_offset %r14, -24
.Ltmp1531:
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movl	(%r15), %eax
	movq	%rsi, %r14
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$55, %rcx
	jne	.LBB154_19
# BB#1:                                 # %entry
	andq	$16711680, %rax         # imm = 0xFF0000
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB154_19
# BB#2:                                 # %if.then
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	testq	%r12, %rax
	je	.LBB154_4
# BB#3:
	xorq	%rbx, %rbx
	jmp	.LBB154_28
.LBB154_4:                              # %if.end
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	reg_classes_intersect_p
	testq	%r12, %rax
	je	.LBB154_15
# BB#5:                                 # %land.lhs.true7
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$55, %rcx
	jne	.LBB154_10
# BB#6:                                 # %lor.lhs.false.i
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB154_10
# BB#7:                                 # %lor.lhs.false.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB154_10
# BB#8:                                 # %if.end.i
	movq	const_tiny_rtx(,%rax,8), %rcx
	cmpq	%r15, %rcx
	je	.LBB154_10
# BB#9:                                 # %if.end25.i
	movq	const_tiny_rtx+472(,%rax,8), %rax
	cmpq	%r15, %rax
	je	.LBB154_10
.LBB154_15:                             # %if.end16
	movq	$12, %rsi
	movq	$12, %rbx
	movq	%r14, %rdi
	callq	reg_class_subset_p
	testq	%r12, %rax
	jne	.LBB154_28
# BB#16:                                # %if.end20
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	reg_classes_intersect_p
	testq	%r12, %rax
	je	.LBB154_18
# BB#17:
	xorq	%rbx, %rbx
	jmp	.LBB154_28
.LBB154_10:                             # %if.then10
	movq	$16, %rdi
	movq	%r14, %rsi
	callq	reg_classes_intersect_p
	testq	%r12, %rax
	je	.LBB154_27
# BB#11:                                # %if.then13
	movq	$12, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	testq	%r12, %rax
	je	.LBB154_12
# BB#13:                                # %if.then13
	movabsq	$1, %rax
	jmp	.LBB154_14
.LBB154_12:
	movabsq	$0, %rax
.LBB154_14:                             # %if.then13
	xorq	$1, %rax
	leaq	12(%rax,%rax,2), %rbx
	jmp	.LBB154_28
.LBB154_18:                             # %lor.lhs.false
	movq	$16, %rdi
	movq	%r14, %rsi
	callq	reg_classes_intersect_p
	testq	%r12, %rax
	movabsq	$0, %rbx
	jne	.LBB154_28
.LBB154_19:                             # %if.end27
	movq	$17, %rdi
	movq	%r14, %rsi
	callq	reg_classes_intersect_p
	movl	(%r15), %edx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB154_25
# BB#20:                                # %land.lhs.true30
	xorq	%rbx, %rbx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$133, %rcx
	jg	.LBB154_23
# BB#21:                                # %land.lhs.true30
	addq	$-54, %rcx
	andq	%r15, %rcx
	cmpq	$14, %rcx
	ja	.LBB154_25
# BB#22:                                # %land.lhs.true30
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB154_28
	jmp	.LBB154_25
.LBB154_23:                             # %land.lhs.true30
	cmpq	$134, %rcx
	je	.LBB154_28
# BB#24:                                # %land.lhs.true30
	cmpq	$140, %rcx
	je	.LBB154_28
.LBB154_25:                             # %if.end63
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$131072, %rdx           # imm = 0x20000
	jne	.LBB154_27
# BB#26:                                # %land.lhs.true68
	movq	$8, %rsi
	movq	$8, %rbx
	movq	%r14, %rdi
	callq	reg_class_subset_p
	testq	%r15, %rax
	je	.LBB154_28
.LBB154_27:                             # %if.end72
	movq	%r14, %rbx
.LBB154_28:                             # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp1532:
	.size	ix86_preferred_reload_class, .Ltmp1532-ix86_preferred_reload_class
	.cfi_endproc

	.globl	ix86_secondary_memory_needed
	.align	16, 0x90
	.type	ix86_secondary_memory_needed,@function
ix86_secondary_memory_needed:           # @ix86_secondary_memory_needed
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1539:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1540:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1541:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1542:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1543:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp1544:
	.cfi_def_cfa_offset 64
.Ltmp1545:
	.cfi_offset %rbx, -48
.Ltmp1546:
	.cfi_offset %r12, -40
.Ltmp1547:
	.cfi_offset %r13, -32
.Ltmp1548:
	.cfi_offset %r14, -24
.Ltmp1549:
	.cfi_offset %r15, -16
	movq	%rcx, %r12
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%rsi, %r14
	movq	%rdi, %r13
	movq	$15, %rsi
                                        # kill: RDI<def> R13<kill>
	callq	reg_classes_intersect_p
	movq	%rax, %rbx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rbx
	movq	$15, %rsi
	movq	%r13, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %rbx
	jne	.LBB155_6
# BB#1:                                 # %lor.lhs.false
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	reg_classes_intersect_p
	movq	%rax, %rbx
	andq	%r15, %rbx
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %rbx
	jne	.LBB155_6
# BB#2:                                 # %lor.lhs.false5
	movq	$16, %rdi
	movq	%r13, %rsi
	callq	reg_classes_intersect_p
	movq	%rax, %rbx
	andq	%r15, %rbx
	movq	$16, %rsi
	movq	%r13, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %rbx
	jne	.LBB155_6
# BB#3:                                 # %lor.lhs.false9
	movq	$16, %rdi
	movq	%r14, %rsi
	callq	reg_classes_intersect_p
	movq	%rax, %rbx
	andq	%r15, %rbx
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %rbx
	jne	.LBB155_6
# BB#4:                                 # %lor.lhs.false13
	movq	$17, %rdi
	movq	%r13, %rsi
	callq	reg_classes_intersect_p
	movq	%rax, %rbx
	andq	%r15, %rbx
	movq	$17, %rsi
	movq	%r13, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %rbx
	jne	.LBB155_6
# BB#5:                                 # %lor.lhs.false17
	movq	$17, %rdi
	movq	%r14, %rsi
	callq	reg_classes_intersect_p
	movq	%rax, %rbx
	andq	%r15, %rbx
	movq	$17, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %rbx
	jne	.LBB155_6
# BB#8:                                 # %if.end
	movq	$15, %rsi
	movq	%r13, %rdi
	callq	reg_class_subset_p
	movq	%rax, %rbx
	andq	%r15, %rbx
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %rbx
	movq	$1, %rbx
	jne	.LBB155_16
# BB#9:                                 # %lor.lhs.false25
	movq	$16, %rsi
	movq	%r13, %rdi
	callq	reg_class_subset_p
	movq	%rax, %r12
	andq	%r15, %r12
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %r12
	movq	8(%rsp), %rcx           # 8-byte Reload
	je	.LBB155_11
# BB#10:                                # %lor.lhs.false25
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB155_16
.LBB155_11:                             # %lor.rhs
	andq	%r15, %rcx
	cmpq	$4, %rcx
	movabsq	$0, %rbx
	movabsq	$1, %rax
	je	.LBB155_13
# BB#12:                                # %lor.rhs
	movq	%rax, %rbx
.LBB155_13:                             # %lor.rhs
	movq	$17, %rsi
	movq	%r13, %rdi
	callq	reg_class_subset_p
	movq	%rax, %r12
	andq	%r15, %r12
	movq	$17, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	andq	%r15, %rax
	cmpq	%rax, %r12
	movabsq	$0, %rax
	je	.LBB155_15
# BB#14:                                # %lor.rhs
	movabsq	$1, %rax
.LBB155_15:                             # %lor.rhs
	andq	%rax, %rbx
	jmp	.LBB155_16
.LBB155_6:                              # %if.then
	movq	$1, %rbx
	testq	%r15, %r12
	jne	.LBB155_7
.LBB155_16:                             # %return
	movq	%rbx, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB155_7:                              # %if.then21
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.ix86_secondary_memory_needed, %rcx
	movq	$12336, %rsi            # imm = 0x3030
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1550:
	.size	ix86_secondary_memory_needed, .Ltmp1550-ix86_secondary_memory_needed
	.cfi_endproc

	.globl	ix86_register_move_cost
	.align	16, 0x90
	.type	ix86_register_move_cost,@function
ix86_register_move_cost:                # @ix86_register_move_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1557:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1558:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1559:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1560:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1561:
	.cfi_def_cfa_offset 48
.Ltmp1562:
	.cfi_offset %rbx, -48
.Ltmp1563:
	.cfi_offset %r12, -40
.Ltmp1564:
	.cfi_offset %r13, -32
.Ltmp1565:
	.cfi_offset %r14, -24
.Ltmp1566:
	.cfi_offset %r15, -16
	movq	%rdx, %r15
	movq	%rsi, %r14
	movq	%rdi, %r12
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	ix86_secondary_memory_needed
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB156_22
# BB#1:                                 # %if.then
	movq	$12, %rsi
	movq	%r14, %rdi
	callq	reg_classes_intersect_p
	testq	%r13, %rax
	je	.LBB156_2
# BB#7:                                 # %cond.false
	movq	%r12, %rdx
	andq	%r13, %rdx
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$18, %rdx
	movq	$17, %rcx
	je	.LBB156_9
# BB#8:                                 # %cond.false
	movq	%rax, %rcx
.LBB156_9:                              # %cond.false
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rcx), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	movq	%rax, %rbx
	jmp	.LBB156_10
.LBB156_22:                             # %if.end61
	movq	$17, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	movq	%rax, %rbx
	andq	%r13, %rbx
	movq	$17, %rsi
	movq	%r15, %rdi
	callq	reg_class_subset_p
	andq	%r13, %rax
	cmpq	%rax, %rbx
	jne	.LBB156_24
# BB#23:                                # %lor.lhs.false
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	reg_class_subset_p
	movq	%rax, %rbx
	andq	%r13, %rbx
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	reg_class_subset_p
	andq	%r13, %rax
	cmpq	%rax, %rbx
	jne	.LBB156_24
# BB#25:                                # %if.end71
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	reg_classes_intersect_p
	testq	%r13, %rax
	je	.LBB156_27
# BB#26:                                # %if.then74
	movq	ix86_cost(%rip), %rax
	movl	72(%rax), %eax
	jmp	.LBB156_31
.LBB156_24:                             # %if.then70
	movq	ix86_cost(%rip), %rax
	movl	148(%rax), %eax
	jmp	.LBB156_31
.LBB156_2:                              # %cond.true
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movl	mode_class(,%rax,4), %eax
	cmpq	$5, %rax
	movq	$2, %rbx
	je	.LBB156_10
# BB#3:                                 # %lor.rhs
	cmpq	$6, %rax
	jne	.LBB156_4
# BB#5:                                 # %lor.rhs
	movabsq	$1, %rbx
	incq	%rbx
	jmp	.LBB156_10
.LBB156_4:
	movabsq	$0, %rbx
	incq	%rbx
.LBB156_10:                             # %cond.end17
	movq	$12, %rsi
	movq	%r15, %rdi
	callq	reg_classes_intersect_p
	testq	%r13, %rax
	je	.LBB156_11
# BB#16:                                # %cond.false33
	andq	%r12, %r13
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$18, %r13
	movq	$17, %rcx
	je	.LBB156_18
# BB#17:                                # %cond.false33
	movq	%rax, %rcx
.LBB156_18:                             # %cond.false33
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rcx), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	jmp	.LBB156_19
.LBB156_11:                             # %cond.true21
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB156_19
# BB#12:                                # %lor.rhs26
	cmpq	$6, %rcx
	jne	.LBB156_13
# BB#14:                                # %lor.rhs26
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB156_19
.LBB156_13:
	movabsq	$0, %rax
	incq	%rax
.LBB156_19:                             # %cond.end52
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rax, %rbx
	movq	$20, %r13
	jg	.LBB156_21
# BB#20:                                # %cond.end52
	xorq	%r13, %r13
.LBB156_21:                             # %cond.end52
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	ix86_memory_move_cost
	movq	%rax, %rbx
	movq	$1, %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	ix86_memory_move_cost
	addq	%rbx, %rax
	addq	%r13, %rax
.LBB156_31:                             # %return
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB156_27:                             # %if.end75
	movq	$16, %rdi
	movq	%r14, %rsi
	callq	reg_classes_intersect_p
	testq	%r13, %rax
	je	.LBB156_29
# BB#28:                                # %if.then78
	movq	ix86_cost(%rip), %rax
	movl	120(%rax), %eax
	jmp	.LBB156_31
.LBB156_29:                             # %if.end79
	movq	$17, %rdi
	movq	%r14, %rsi
	callq	reg_classes_intersect_p
	testq	%r13, %rax
	movq	$2, %rax
	je	.LBB156_31
# BB#30:                                # %if.then82
	movq	ix86_cost(%rip), %rax
	movl	100(%rax), %eax
	jmp	.LBB156_31
.Ltmp1567:
	.size	ix86_register_move_cost, .Ltmp1567-ix86_register_move_cost
	.cfi_endproc

	.globl	ix86_memory_move_cost
	.align	16, 0x90
	.type	ix86_memory_move_cost,@function
ix86_memory_move_cost:                  # @ix86_memory_move_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1573:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1574:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp1575:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp1576:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp1577:
	.cfi_def_cfa_offset 48
.Ltmp1578:
	.cfi_offset %rbx, -40
.Ltmp1579:
	.cfi_offset %r12, -32
.Ltmp1580:
	.cfi_offset %r14, -24
.Ltmp1581:
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	reg_class_subset_p
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB157_9
# BB#1:                                 # %if.then
	leaq	-17(%rbx), %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jae	.LBB157_2
# BB#5:                                 # %sw.bb2
	movq	$2, %rax
	jmp	.LBB157_6
.LBB157_9:                              # %if.end
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	reg_class_subset_p
	testq	%r12, %rax
	je	.LBB157_18
# BB#10:                                # %if.then8
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movzbl	mode_size(%rbx), %ecx
	xorq	%rax, %rax
	cmpq	$4, %rcx
	je	.LBB157_15
# BB#11:                                # %if.then8
	cmpq	$16, %rcx
	jne	.LBB157_12
# BB#14:                                # %sw.bb14
	movq	$2, %rax
	jmp	.LBB157_15
.LBB157_2:                              # %if.then
	xorq	%rax, %rax
	andq	%r12, %rbx
	cmpq	$15, %rbx
	je	.LBB157_6
# BB#3:                                 # %if.then
	movq	$100, %rax
	cmpq	$16, %rbx
	jne	.LBB157_44
# BB#4:                                 # %sw.bb1
	movq	$1, %rax
.LBB157_6:                              # %sw.epilog
	movq	ix86_cost(%rip), %rcx
	testq	%r12, %r14
	je	.LBB157_8
# BB#7:                                 # %cond.true
	leaq	76(%rcx,%rax,4), %rax
	movl	(%rax), %eax
	jmp	.LBB157_44
.LBB157_8:                              # %cond.false
	leaq	88(%rcx,%rax,4), %rax
	movl	(%rax), %eax
	jmp	.LBB157_44
.LBB157_18:                             # %if.end26
	movq	$17, %rsi
	movq	%r15, %rdi
	callq	reg_class_subset_p
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movzbl	mode_size(%rdx), %ecx
	testq	%r12, %rax
	je	.LBB157_25
# BB#19:                                # %if.then29
	xorq	%rax, %rax
	cmpq	$4, %rcx
	je	.LBB157_22
# BB#20:                                # %if.then29
	movq	$100, %rax
	cmpq	$8, %rcx
	jne	.LBB157_44
# BB#21:                                # %sw.bb35
	movq	$1, %rax
.LBB157_22:                             # %sw.epilog37
	movq	ix86_cost(%rip), %rcx
	testq	%r12, %r14
	je	.LBB157_24
# BB#23:                                # %cond.true39
	leaq	104(%rcx,%rax,4), %rax
	movl	(%rax), %eax
	jmp	.LBB157_44
.LBB157_12:                             # %if.then8
	movq	$100, %rax
	cmpq	$8, %rcx
	jne	.LBB157_44
# BB#13:                                # %sw.bb13
	movq	$1, %rax
.LBB157_15:                             # %sw.epilog16
	movq	ix86_cost(%rip), %rcx
	testq	%r12, %r14
	je	.LBB157_17
# BB#16:                                # %cond.true18
	leaq	124(%rcx,%rax,4), %rax
	movl	(%rax), %eax
	jmp	.LBB157_44
.LBB157_17:                             # %cond.false21
	leaq	136(%rcx,%rax,4), %rax
	movl	(%rax), %eax
	jmp	.LBB157_44
.LBB157_25:                             # %if.end47
	cmpq	$2, %rcx
	jne	.LBB157_26
# BB#34:                                # %sw.bb70
	movq	ix86_cost(%rip), %rax
	testq	%r12, %r14
	je	.LBB157_35
# BB#36:                                # %sw.bb70
	addq	$52, %rax
	movl	(%rax), %eax
	jmp	.LBB157_44
.LBB157_26:                             # %if.end47
	cmpq	$1, %rcx
	jne	.LBB157_38
# BB#27:                                # %sw.bb51
	movq	$8, %rsi
	movq	%r15, %rdi
	callq	reg_class_subset_p
	movq	ix86_cost(%rip), %rdx
	movq	%rax, %rcx
	testq	%r12, %r14
	je	.LBB157_32
# BB#28:                                # %if.then53
	testq	%r12, %rcx
	jne	.LBB157_29
# BB#30:                                # %if.then53
	addq	$44, %rdx
	movl	(%rdx), %eax
	jmp	.LBB157_44
.LBB157_24:                             # %cond.false42
	leaq	112(%rcx,%rax,4), %rax
	movl	(%rax), %eax
	jmp	.LBB157_44
.LBB157_35:
	addq	$64, %rax
	movl	(%rax), %eax
	jmp	.LBB157_44
.LBB157_38:                             # %sw.default80
	movq	ix86_cost(%rip), %rax
	andq	%r12, %rbx
	testq	%r12, %r14
	je	.LBB157_39
# BB#40:                                # %sw.default80
	addq	$56, %rax
	jmp	.LBB157_41
.LBB157_39:
	addq	$68, %rax
.LBB157_41:                             # %sw.default80
	movl	(%rax), %eax
	cmpq	$18, %rbx
	movq	$17, %rcx
	je	.LBB157_43
# BB#42:                                # %sw.default80
	movq	%rdx, %rcx
.LBB157_43:                             # %sw.default80
	movzbl	mode_size(%rcx), %edx
	imulq	%rax, %rdx
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$61, %rcx
	shrq	%cl, %rax
	andq	$3, %rax
	addq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$34, %rcx
	sarq	%cl, %rax
	jmp	.LBB157_44
.LBB157_32:                             # %if.else
	movl	60(%rdx), %eax
	testq	%r12, %rcx
	jne	.LBB157_44
# BB#33:                                # %if.else
	addq	$4, %rax
	jmp	.LBB157_44
.LBB157_29:
	addq	$48, %rdx
	movl	(%rdx), %eax
.LBB157_44:                             # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp1582:
	.size	ix86_memory_move_cost, .Ltmp1582-ix86_memory_move_cost
	.cfi_endproc

	.globl	ix86_hard_regno_mode_ok
	.align	16, 0x90
	.type	ix86_hard_regno_mode_ok,@function
ix86_hard_regno_mode_ok:                # @ix86_hard_regno_mode_ok
	.cfi_startproc
# BB#0:                                 # %entry
	leaq	-17(%rdi), %rax
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	mode_class(,%rdx,4), %ecx
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	andq	%r9, %rax
	cmpq	$1, %rax
	ja	.LBB158_3
# BB#1:                                 # %if.then
	andq	%r9, %rcx
	cmpq	$4, %rcx
	je	.LBB158_50
# BB#2:
	movabsq	$0, %rax
	retq
.LBB158_3:                              # %if.end
	andq	%r9, %rcx
	cmpq	$4, %rcx
	ja	.LBB158_6
# BB#4:                                 # %if.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$25, %rax
	je	.LBB158_6
# BB#5:
	xorq	%rax, %rax
	retq
.LBB158_6:                              # %if.end18
	movabsq	$4294967288, %rax       # imm = 0xFFFFFFF8
	andq	%rdi, %rax
	cmpq	$8, %rax
	jne	.LBB158_18
# BB#7:                                 # %if.then23
	movq	$1, %rax
	andq	%r9, %rsi
	cmpq	$18, %rsi
	ja	.LBB158_9
# BB#8:                                 # %if.then23
	movq	$1, %rdi
	movq	%rsi, %rcx
	shlq	%cl, %rdi
	testq	$360448, %rdi           # imm = 0x58000
	jne	.LBB158_51
.LBB158_9:                              # %lor.lhs.false32
	movl	target_flags(%rip), %edi
	andq	$33554432, %rdi         # imm = 0x2000000
	jne	.LBB158_11
# BB#10:                                # %lor.lhs.false32
	cmpq	$17, %rsi
	je	.LBB158_51
.LBB158_11:                             # %switch.early.test
	cmpq	$24, %rsi
	ja	.LBB158_13
# BB#12:                                # %switch.early.test
	movq	$1, %r8
	movq	%rsi, %rcx
	shlq	%cl, %r8
	testq	$23068672, %r8          # imm = 0x1600000
	jne	.LBB158_51
.LBB158_13:                             # %lor.rhs
	testq	%r9, %rdi
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rax
	jne	.LBB158_15
# BB#14:                                # %lor.rhs
	movq	%rdx, %rax
.LBB158_15:                             # %lor.rhs
	cmpq	$23, %rsi
	jne	.LBB158_17
# BB#16:                                # %lor.rhs
	movq	%rdx, %rcx
.LBB158_17:                             # %lor.rhs
	andq	%rcx, %rax
	retq
.LBB158_18:                             # %if.end49
	movq	%rdi, %rcx
	andq	%r9, %rcx
	cmpq	$52, %rcx
	ja	.LBB158_27
# BB#19:                                # %if.end49
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB158_27
# BB#20:                                # %if.then61
	movq	%rsi, %rcx
	andq	%r9, %rcx
	cmpq	$46, %rcx
	ja	.LBB158_22
# BB#21:                                # %if.then61
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$70506183163968, %rcx   # imm = 0x402000008040
	testq	%rcx, %rdx
	jne	.LBB158_51
.LBB158_22:                             # %lor.rhs73
	movzbl	target_flags+2(%rip), %eax
	testq	$4, %rax
	je	.LBB158_23
# BB#24:                                # %land.rhs77
	addq	$-4, %rsi
	andq	%r9, %rsi
	cmpq	$35, %rsi
	movabsq	$0, %rax
	ja	.LBB158_51
# BB#25:                                # %switch.lookup336
	movabsq	$39191580675, %rax      # imm = 0x920001003
	jmp	.LBB158_26
.LBB158_27:                             # %if.end102
	leaq	-29(%rdi), %rax
	andq	%r9, %rax
	cmpq	$7, %rax
	ja	.LBB158_30
# BB#28:                                # %if.then108
	addq	$-4, %rsi
	andq	%r9, %rsi
	cmpq	$40, %rsi
	movabsq	$0, %rax
	ja	.LBB158_51
# BB#29:                                # %switch.lookup
	movabsq	$1138703206403, %rax    # imm = 0x10920000803
.LBB158_26:                             # %return
	movq	%rsi, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	retq
.LBB158_30:                             # %if.end133
	andq	%r9, %rsi
	cmpq	$28, %rsi
	ja	.LBB158_32
# BB#31:                                # %if.end133
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl, %rax
	testq	$503316540, %rax        # imm = 0x1E00003C
	jne	.LBB158_44
.LBB158_32:                             # %lor.lhs.false157
	movl	target_flags(%rip), %r8d
	andq	$33554432, %r8          # imm = 0x2000000
	je	.LBB158_35
# BB#33:                                # %land.lhs.true160
	cmpq	$29, %rsi
	ja	.LBB158_41
# BB#34:                                # %land.lhs.true160
	movq	$1, %rax
	movq	$1, %rdx
	movq	%rsi, %rcx
	shlq	%cl, %rdx
	testq	$560300096, %rdx        # imm = 0x21658040
	jne	.LBB158_51
	jmp	.LBB158_41
.LBB158_23:
	xorq	%rax, %rax
	retq
.LBB158_35:                             # %land.lhs.true166
	movq	$1, %rax
	cmpq	$18, %rsi
	ja	.LBB158_37
# BB#36:                                # %land.lhs.true166
	movq	$1, %rdx
	movq	%rsi, %rcx
	shlq	%cl, %rdx
	testq	$360448, %rdx           # imm = 0x58000
	jne	.LBB158_51
.LBB158_37:                             # %lor.lhs.false175
	testq	%r9, %r8
	jne	.LBB158_39
# BB#38:                                # %lor.lhs.false175
	cmpq	$17, %rsi
	je	.LBB158_44
.LBB158_39:                             # %switch.early.test335
	cmpq	$24, %rsi
	ja	.LBB158_41
# BB#40:                                # %switch.early.test335
	movq	$1, %rdx
	movq	%rsi, %rcx
	shlq	%cl, %rdx
	testq	$23068672, %rdx         # imm = 0x1600000
	jne	.LBB158_51
.LBB158_41:                             # %lor.lhs.false190
	testq	%r9, %r8
	jne	.LBB158_42
# BB#43:                                # %lor.lhs.false190
	cmpq	$23, %rsi
	movabsq	$0, %rax
	jne	.LBB158_51
.LBB158_44:                             # %if.end197
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$4, %rdi
	movq	$1, %rax
	jl	.LBB158_51
# BB#45:                                # %if.end197
	cmpq	$2, %rsi
	jne	.LBB158_51
# BB#46:                                # %lor.lhs.false203
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB158_51
# BB#47:                                # %if.end207
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r9, %rcx
	movq	$1, %rax
	jne	.LBB158_51
# BB#48:                                # %lor.rhs211
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	je	.LBB158_49
.LBB158_50:                             # %lor.rhs211
	movabsq	$1, %rax
.LBB158_51:                             # %return
	retq
.LBB158_42:
	xorq	%rax, %rax
	retq
.LBB158_49:
	movabsq	$0, %rax
	retq
.Ltmp1583:
	.size	ix86_hard_regno_mode_ok, .Ltmp1583-ix86_hard_regno_mode_ok
	.cfi_endproc

	.globl	x86_order_regs_for_local_alloc
	.align	16, 0x90
	.type	x86_order_regs_for_local_alloc,@function
x86_order_regs_for_local_alloc:         # @x86_order_regs_for_local_alloc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp1585:
	.cfi_def_cfa_offset 16
	xorq	%rax, %rax
	movabsq	$4294967259, %rsi       # imm = 0xFFFFFFDB
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	xorq	%rdx, %rdx
	.align	16, 0x90
.LBB159_1:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rax, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$8, %rdi
	jl	.LBB159_3
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB159_1 Depth=1
	leaq	(%rax,%rsi), %rcx
	andq	%r10, %rcx
	cmpq	$7, %rcx
	ja	.LBB159_5
.LBB159_3:                              # %land.lhs.true4
                                        #   in Loop: Header=BB159_1 Depth=1
	movzbl	call_used_regs(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB159_5
# BB#4:                                 # %if.then
                                        #   in Loop: Header=BB159_1 Depth=1
	movq	$32, %rcx
	leaq	1(%rdx), %rdi
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	%eax, reg_alloc_order(,%rdx,4)
	movq	%rdi, %rdx
.LBB159_5:                              # %for.inc
                                        #   in Loop: Header=BB159_1 Depth=1
	incq	%rax
	cmpq	$53, %rax
	jne	.LBB159_1
# BB#6:
	xorq	%rdi, %rdi
	.align	16, 0x90
.LBB159_7:                              # %for.body11
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$8, %rax
	jl	.LBB159_9
# BB#8:                                 # %for.body11
                                        #   in Loop: Header=BB159_7 Depth=1
	leaq	(%rdi,%rsi), %rax
	andq	%r10, %rax
	cmpq	$7, %rax
	ja	.LBB159_11
.LBB159_9:                              # %land.lhs.true20
                                        #   in Loop: Header=BB159_7 Depth=1
	movzbl	call_used_regs(%rdi), %eax
	testq	%rax, %rax
	jne	.LBB159_11
# BB#10:                                # %if.then24
                                        #   in Loop: Header=BB159_7 Depth=1
	movq	$32, %rcx
	leaq	1(%rdx), %rax
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	%edi, reg_alloc_order(,%rdx,4)
	movq	%rax, %rdx
.LBB159_11:                             # %for.inc29
                                        #   in Loop: Header=BB159_7 Depth=1
	incq	%rdi
	cmpq	$53, %rdi
	jne	.LBB159_7
# BB#12:                                # %for.end31
	movl	ix86_fpmath(%rip), %r9d
	andq	$2, %r9
	jne	.LBB159_14
# BB#13:                                # %for.cond35.preheader
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$8, %rcx
	movl	%ecx, reg_alloc_order(,%rax,4)
	movq	$9, %rcx
	movl	%ecx, reg_alloc_order+4(,%rax,4)
	movq	$10, %rcx
	movl	%ecx, reg_alloc_order+8(,%rax,4)
	movq	$11, %rcx
	movl	%ecx, reg_alloc_order+12(,%rax,4)
	movq	$12, %rcx
	movl	%ecx, reg_alloc_order+16(,%rax,4)
	movq	$13, %rcx
	movl	%ecx, reg_alloc_order+20(,%rax,4)
	movq	$14, %rcx
	movl	%ecx, reg_alloc_order+24(,%rax,4)
	movq	$15, %rcx
	movl	%ecx, reg_alloc_order+28(,%rax,4)
	addq	$8, %rdx
.LBB159_14:                             # %for.cond46.preheader
	movq	$32, %r8
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	leaq	8(%rdx), %rdi
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	leaq	16(%rdx), %rsi
	testq	%r10, %r9
	movq	$21, %rcx
	movl	%ecx, reg_alloc_order(,%rax,4)
	movq	$22, %rcx
	movl	%ecx, reg_alloc_order+4(,%rax,4)
	movq	$23, %rcx
	movl	%ecx, reg_alloc_order+8(,%rax,4)
	movq	$24, %rcx
	movl	%ecx, reg_alloc_order+12(,%rax,4)
	movq	$25, %rcx
	movl	%ecx, reg_alloc_order+16(,%rax,4)
	movq	$26, %rcx
	movl	%ecx, reg_alloc_order+20(,%rax,4)
	movq	$27, %rcx
	movl	%ecx, reg_alloc_order+24(,%rax,4)
	movq	$28, %rcx
	movl	%ecx, reg_alloc_order+28(,%rax,4)
	movq	$45, %rax
	movl	%eax, reg_alloc_order(,%rdi,4)
	movq	$46, %rax
	movl	%eax, reg_alloc_order+4(,%rdi,4)
	movq	$47, %rax
	movl	%eax, reg_alloc_order+8(,%rdi,4)
	movq	$48, %rax
	movl	%eax, reg_alloc_order+12(,%rdi,4)
	movq	$49, %rax
	movl	%eax, reg_alloc_order+16(,%rdi,4)
	movq	$50, %rax
	movl	%eax, reg_alloc_order+20(,%rdi,4)
	movq	$51, %rax
	movl	%eax, reg_alloc_order+24(,%rdi,4)
	movq	$52, %rax
	movl	%eax, reg_alloc_order+28(,%rdi,4)
	je	.LBB159_16
# BB#15:                                # %for.cond70.preheader
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$8, %rax
	movl	%eax, reg_alloc_order(,%rsi,4)
	movq	$9, %rax
	movl	%eax, reg_alloc_order+4(,%rsi,4)
	movq	$10, %rax
	movl	%eax, reg_alloc_order+8(,%rsi,4)
	movq	$11, %rax
	movl	%eax, reg_alloc_order+12(,%rsi,4)
	movq	$12, %rax
	movl	%eax, reg_alloc_order+16(,%rsi,4)
	movq	$13, %rax
	movl	%eax, reg_alloc_order+20(,%rsi,4)
	movq	$14, %rax
	movl	%eax, reg_alloc_order+24(,%rsi,4)
	movq	$15, %rax
	addq	$24, %rdx
	movl	%eax, reg_alloc_order+28(,%rsi,4)
	movq	%rdx, %rsi
.LBB159_16:                             # %for.cond81.preheader
	movq	$32, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$29, %rcx
	movl	%ecx, reg_alloc_order(,%rax,4)
	movq	$30, %rcx
	movl	%ecx, reg_alloc_order+4(,%rax,4)
	movq	$31, %rcx
	movl	%ecx, reg_alloc_order+8(,%rax,4)
	movl	%r8d, reg_alloc_order+12(,%rax,4)
	movq	$33, %rcx
	movl	%ecx, reg_alloc_order+16(,%rax,4)
	movq	$34, %rcx
	movl	%ecx, reg_alloc_order+20(,%rax,4)
	movq	$35, %rcx
	movl	%ecx, reg_alloc_order+24(,%rax,4)
	movq	$36, %rcx
	movl	%ecx, reg_alloc_order+28(,%rax,4)
	leaq	8(%rsi), %rdx
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$52, %rax
	jg	.LBB159_18
# BB#17:                                # %while.body.lr.ph
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	leaq	reg_alloc_order(,%rdx,4), %rdi
	movq	$44, %rax
	subq	%rsi, %rax
	andq	%r10, %rax
	leaq	4(,%rax,4), %rdx
	xorq	%rsi, %rsi
	callq	memset
.LBB159_18:                             # %while.end
	popq	%rax
	retq
.Ltmp1586:
	.size	x86_order_regs_for_local_alloc, .Ltmp1586-x86_order_regs_for_local_alloc
	.cfi_endproc

	.globl	x86_output_mi_thunk
	.align	16, 0x90
	.type	x86_output_mi_thunk,@function
x86_output_mi_thunk:                    # @x86_output_mi_thunk
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1592:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1593:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp1594:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp1595:
	.cfi_def_cfa_offset 40
	subq	$24, %rsp
.Ltmp1596:
	.cfi_def_cfa_offset 64
.Ltmp1597:
	.cfi_offset %rbx, -40
.Ltmp1598:
	.cfi_offset %r12, -32
.Ltmp1599:
	.cfi_offset %r14, -24
.Ltmp1600:
	.cfi_offset %r15, -16
	movslq	ix86_regparm(%rip), %rax
	movq	%rdx, %r12
	movq	%rdi, %r14
	testq	%rax, %rax
	jle	.LBB160_5
# BB#1:                                 # %for.cond.preheader
	movq	8(%r12), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.LBB160_5
# BB#2:                                 # %for.body.lr.ph
	movq	global_trees+216(%rip), %rcx
	movq	$1, %rbx
	.align	16, 0x90
.LBB160_3:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	32(%rax), %rdx
	cmpq	%rcx, %rdx
	je	.LBB160_6
# BB#4:                                 # %for.inc
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB160_3
.LBB160_5:
	xorq	%rbx, %rbx
.LBB160_6:                              # %for.end
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, (%rsp)
	testq	$2, %rcx
	je	.LBB160_14
# BB#7:                                 # %if.then7
	movq	8(%r12), %rax
	movq	8(%rax), %rdi
	callq	aggregate_value_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB160_8
# BB#9:                                 # %if.then7
	movabsq	$1, %rax
	jmp	.LBB160_10
.LBB160_14:                             # %if.else51
	testq	%rbx, %rbx
	je	.LBB160_16
# BB#15:                                # %if.then53
	movq	$4, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_REG
	jmp	.LBB160_20
.LBB160_8:
	movabsq	$0, %rax
.LBB160_10:                             # %if.then7
	movl	x86_64_int_parameter_registers(,%rax,4), %esi
	movq	$5, %rdi
	callq	gen_rtx_REG
	movq	%rax, 8(%rsp)
	movabsq	$.L.str199, %rdi
	leaq	(%rsp), %rsi
	callq	output_asm_insn
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB160_25
# BB#11:                                # %if.then19
	movabsq	$.L.str200, %rdi
	movq	$6, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	movq	144(%r12), %rax
	testq	%rax, %rax
	jne	.LBB160_13
# BB#12:                                # %cond.false
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	make_decl_rtl
	movq	144(%r12), %rax
.LBB160_13:                             # %cond.end
	movq	8(%rax), %rax
	movq	8(%rax), %rsi
	movq	%r14, %rdi
	callq	assemble_name
	movabsq	$.L.str201, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	jmp	.LBB160_28
.LBB160_16:                             # %if.else56
	movq	8(%r12), %rax
	movq	8(%rax), %rdi
	callq	aggregate_value_p
	movq	global_rtl+16(%rip), %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB160_18
# BB#17:                                # %if.then63
	movq	$8, %rsi
	jmp	.LBB160_19
.LBB160_18:                             # %if.else67
	movq	$4, %rsi
.LBB160_19:                             # %if.end72
	callq	plus_constant_wide
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_MEM
.LBB160_20:                             # %if.end72
	movq	%rax, 8(%rsp)
	movabsq	$.L.str204, %rdi
	leaq	(%rsp), %rsi
	callq	output_asm_insn
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB160_25
# BB#21:                                # %if.then75
	movq	pic_offset_table_rtx(%rip), %rax
	movq	%rax, (%rsp)
	callq	gen_label_rtx
	movl	target_flags(%rip), %esi
	movq	%rax, 8(%rsp)
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movabsq	$.L.str80, %rdx
	movq	$68, %rdi
	callq	gen_rtx_fmt_s
	movslq	ix86_regparm(%rip), %rcx
	movq	%rax, 16(%rsp)
	cmpq	$3, %rcx
	jge	.LBB160_29
# BB#22:                                # %if.end87
	movabsq	$.L.str205, %rdi
	leaq	(%rsp), %r15
	movq	%r15, %rsi
	callq	output_asm_insn
	movabsq	$.L.str206, %rdi
	movq	%r15, %rsi
	callq	output_asm_insn
	movq	8(%rsp), %rax
	movl	48(%rax), %ecx
	movabsq	$.L.str207, %rsi
	movabsq	$.L.str208, %rdx
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	fprintf
	movabsq	$.L.str209, %rdi
	movq	%r15, %rsi
	callq	output_asm_insn
	movabsq	$.L.str210, %rdi
	movq	%r15, %rsi
	callq	output_asm_insn
	movq	144(%r12), %rax
	testq	%rax, %rax
	jne	.LBB160_24
# BB#23:                                # %cond.false102
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	make_decl_rtl
	movq	144(%r12), %rax
.LBB160_24:                             # %cond.end105
	movq	8(%rax), %rsi
	movq	$4, %rdi
	callq	gen_rtx_MEM
	movq	%rax, (%rsp)
	movabsq	$.L.str211, %rdi
	leaq	(%rsp), %rsi
	callq	output_asm_insn
	movabsq	$.L.str212, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	asm_fprintf
	movabsq	$.L.str213, %rsi
	xorq	%rax, %rax
	movq	%r14, %rdi
	callq	asm_fprintf
	jmp	.LBB160_28
.LBB160_25:                             # %if.else113
	movabsq	$.L.str202, %rdi
	movq	$5, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	movq	144(%r12), %rax
	testq	%rax, %rax
	jne	.LBB160_27
# BB#26:                                # %cond.false121
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	make_decl_rtl
	movq	144(%r12), %rax
.LBB160_27:                             # %cond.end124
	movq	8(%rax), %rax
	movq	8(%rax), %rsi
	movq	%r14, %rdi
	callq	assemble_name
	movq	$10, %rdi
	movq	%r14, %rsi
	callq	fputc
.LBB160_28:                             # %if.end134
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB160_29:                             # %if.then86
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.x86_output_mi_thunk, %rcx
	movq	$12615, %rsi            # imm = 0x3147
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1601:
	.size	x86_output_mi_thunk, .Ltmp1601-x86_output_mi_thunk
	.cfi_endproc

	.globl	x86_field_alignment
	.align	16, 0x90
	.type	x86_field_alignment,@function
x86_field_alignment:                    # @x86_field_alignment
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp1604:
	.cfi_def_cfa_offset 16
.Ltmp1605:
	.cfi_offset %rbx, -16
	movl	target_flags(%rip), %eax
	movq	%rsi, %rbx
	testq	$33554436, %rax         # imm = 0x2000004
	jne	.LBB161_9
# BB#1:                                 # %if.end
	movq	8(%rdi), %rax
	movzbl	16(%rax), %ecx
	cmpq	$18, %rcx
	jne	.LBB161_3
# BB#2:                                 # %cond.true
	movq	%rax, %rdi
	callq	get_inner_array_type
.LBB161_3:                              # %cond.end
	movl	60(%rax), %eax
	movq	$9, %rcx
	shrq	%cl, %rax
	andq	$127, %rax
	cmpq	$16, %rax
	je	.LBB161_6
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$22, %rax
	je	.LBB161_6
# BB#5:                                 # %lor.lhs.false12
	movl	mode_class(,%rax,4), %eax
	orq	$4, %rax
	andq	%rcx, %rax
	cmpq	$5, %rax
	jne	.LBB161_9
.LBB161_6:                              # %if.then18
	movq	$32, %rax
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$32, %rdx
	jg	.LBB161_8
# BB#7:                                 # %if.then18
	movq	%rbx, %rax
.LBB161_8:                              # %if.then18
	movq	%rax, %rbx
.LBB161_9:                              # %return
	movq	%rbx, %rax
	popq	%rbx
	retq
.Ltmp1606:
	.size	x86_field_alignment, .Ltmp1606-x86_field_alignment
	.cfi_endproc

	.align	16, 0x90
	.type	safe_vector_operand,@function
safe_vector_operand:                    # @safe_vector_operand
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp1610:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp1611:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp1612:
	.cfi_def_cfa_offset 32
.Ltmp1613:
	.cfi_offset %rbx, -24
.Ltmp1614:
	.cfi_offset %r14, -16
	movq	const_int_rtx+512(%rip), %rax
	movq	%rsi, %rbx
	movq	%rdi, %r14
	cmpq	%r14, %rax
	jne	.LBB162_10
# BB#1:                                 # %if.end
	movq	%rbx, %rdi
	callq	gen_reg_rtx
	movq	%rax, %r14
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rbx, %rcx
	cmpq	$46, %rcx
	ja	.LBB162_5
# BB#2:                                 # %if.end
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$18219251302416, %rdx   # imm = 0x109200008010
	testq	%rdx, %rax
	je	.LBB162_3
# BB#7:                                 # %cond.false
	movq	$5, %rdi
	xorq	%rdx, %rdx
	movq	%r14, %rsi
	callq	gen_rtx_SUBREG
	movq	%rax, %rdi
.LBB162_8:                              # %cond.end
	callq	gen_mmx_clrdi
	jmp	.LBB162_9
.LBB162_3:                              # %if.end
	cmpq	$5, %rcx
	movq	%r14, %rdi
	je	.LBB162_8
# BB#4:                                 # %if.end
	cmpq	$46, %rcx
	movq	%r14, %rdi
	je	.LBB162_6
.LBB162_5:                              # %cond.false20
	movq	$46, %rdi
	xorq	%rdx, %rdx
	movq	%r14, %rsi
	callq	gen_rtx_SUBREG
	movq	%rax, %rdi
.LBB162_6:                              # %cond.end22
	callq	gen_sse_clrv4sf
.LBB162_9:                              # %return
	movq	%rax, %rdi
	callq	emit_insn
.LBB162_10:                             # %return
	movq	%r14, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp1615:
	.size	safe_vector_operand, .Ltmp1615-safe_vector_operand
	.cfi_endproc

	.align	16, 0x90
	.type	ix86_pent_find_pair,@function
ix86_pent_find_pair:                    # @ix86_pent_find_pair
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1622:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1623:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1624:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1625:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1626:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp1627:
	.cfi_def_cfa_offset 112
.Ltmp1628:
	.cfi_offset %rbx, -48
.Ltmp1629:
	.cfi_offset %r12, -40
.Ltmp1630:
	.cfi_offset %r13, -32
.Ltmp1631:
	.cfi_offset %r14, -24
.Ltmp1632:
	.cfi_offset %r15, -16
	movq	%rcx, %rbx
	movslq	40(%rbx), %rax
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rdi, %r15
	testq	%rax, %rax
	jns	.LBB163_2
# BB#1:                                 # %cond.end.i
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$128, %r14
	js	.LBB163_3
.LBB163_2:                              # %if.then.i
	movq	%rbx, %rdi
	callq	get_attr_length
	movq	%rax, %r14
.LBB163_3:                              # %ix86_safe_length.exit
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB163_5
# BB#4:                                 # %cond.end.i75
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$7, %rax
	js	.LBB163_6
.LBB163_5:                              # %if.then.i77
	movq	%rbx, %rdi
	callq	get_attr_length
	addq	$7, %rax
.LBB163_6:                              # %ix86_safe_length_prefix.exit
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	xorq	%r12, %r12
	cmpq	%rax, %r14
	jg	.LBB163_75
# BB#7:                                 # %if.end
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB163_9
# BB#8:                                 # %cond.end.i84
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$4, %rax
	js	.LBB163_10
.LBB163_9:                              # %if.then.i86
	movq	%rbx, %rdi
	callq	get_attr_memory
.LBB163_10:                             # %ix86_safe_memory.exit
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	callq	result_ready_cost
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	56(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %r15
	jb	.LBB163_75
# BB#11:                                # %for.body.lr.ph
	movq	$32, %rcx
	movq	24(%rsp), %rax          # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%r13, %r13
	movq	$2147483647, %r14       # imm = 0x7FFFFFFF
	testq	%rax, %rax
	jle	.LBB163_51
# BB#12:
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	32(%rsp), %rcx          # 8-byte Reload
	andq	%rax, %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	andq	%rax, 16(%rsp)          # 8-byte Folded Spill
	.align	16, 0x90
.LBB163_13:                             # %for.body.us
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15), %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB163_15
# BB#14:                                # %cond.end.i93.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$3, %rax
	js	.LBB163_16
.LBB163_15:                             # %if.then.i95.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
.LBB163_16:                             # %ix86_safe_pent_pair.exit.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	movq	40(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB163_17
# BB#18:                                # %land.lhs.true.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%r14, 48(%rsp)          # 8-byte Spill
	movq	(%r15), %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB163_20
# BB#19:                                # %cond.end.i102.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%r14, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$128, %rbx
	js	.LBB163_21
.LBB163_20:                             # %if.then.i104.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%r14, %rdi
	callq	get_attr_length
	movq	%rax, %rbx
.LBB163_21:                             # %ix86_safe_length.exit106.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	(%r15), %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB163_23
# BB#22:                                # %cond.end.i112.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%r14, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$7, %rax
	js	.LBB163_24
.LBB163_23:                             # %if.then.i114.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%r14, %rdi
	callq	get_attr_length
	addq	$7, %rax
.LBB163_24:                             # %ix86_safe_length_prefix.exit116.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rax, %rbx
	jle	.LBB163_26
# BB#25:                                #   in Loop: Header=BB163_13 Depth=1
	movq	%r13, %r12
	movq	48(%rsp), %r14          # 8-byte Reload
	jmp	.LBB163_49
	.align	16, 0x90
.LBB163_17:                             #   in Loop: Header=BB163_13 Depth=1
	movq	%r13, %r12
	jmp	.LBB163_49
	.align	16, 0x90
.LBB163_26:                             # %if.then14.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	(%r15), %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	movq	48(%rsp), %r14          # 8-byte Reload
	jns	.LBB163_28
# BB#27:                                # %cond.end.i122.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$4, %r12
	js	.LBB163_29
.LBB163_28:                             # %if.then.i124.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%rbx, %rdi
	callq	get_attr_memory
	movq	%rax, %r12
.LBB163_29:                             # %ix86_safe_memory.exit126.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	(%r15), %rdi
	callq	result_ready_cost
	movq	$32, %rcx
	movq	24(%rsp), %rbx          # 8-byte Reload
	subq	%rax, %rbx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$63, %rcx
	sarq	%cl, %rdx
	addq	%rdx, %rbx
	xorq	%rdx, %rbx
	testq	%rax, %rax
	jle	.LBB163_44
# BB#30:                                # %if.then24.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	16(%rsp), %rdx          # 8-byte Reload
	cmpq	$3, %rdx
	movabsq	$0, %rax
	jne	.LBB163_32
# BB#31:                                # %if.then24.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movabsq	$1, %rax
.LBB163_32:                             # %if.then24.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %r12
	cmpq	$3, %r12
	movabsq	$0, %rcx
	jne	.LBB163_34
# BB#33:                                # %if.then24.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movabsq	$1, %rcx
.LBB163_34:                             # %if.then24.us
                                        #   in Loop: Header=BB163_13 Depth=1
	testq	%rcx, %rax
	je	.LBB163_36
# BB#35:                                #   in Loop: Header=BB163_13 Depth=1
	addq	$2, %rbx
.LBB163_36:                             # %if.then24.us
                                        #   in Loop: Header=BB163_13 Depth=1
	cmpq	$3, %rdx
	jne	.LBB163_44
# BB#37:                                # %if.then24.us
                                        #   in Loop: Header=BB163_13 Depth=1
	cmpq	$1, %r12
	jne	.LBB163_44
# BB#38:                                # %if.then24.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	32(%rsp), %rax          # 8-byte Reload
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB163_44
# BB#39:                                # %land.lhs.true36.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	8(%rsp), %rax           # 8-byte Reload
	movslq	40(%rax), %rax
	testq	%rax, %rax
	jns	.LBB163_41
# BB#40:                                # %cond.end.i132.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rcx, %rcx
	testq	%rax, %rax
	js	.LBB163_43
.LBB163_41:                             # %if.then.i134.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_pent_pair
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movabsq	$0, %rcx
	jne	.LBB163_43
# BB#42:                                # %if.then.i134.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movabsq	$1, %rcx
.LBB163_43:                             # %ix86_safe_pent_pair.exit136.us
                                        #   in Loop: Header=BB163_13 Depth=1
	xorq	$1, %rcx
	addq	%rcx, %rbx
.LBB163_44:                             # %if.end42.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	movq	%r15, %r12
	jl	.LBB163_46
# BB#45:                                # %if.end42.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%r13, %r12
.LBB163_46:                             # %if.end42.us
                                        #   in Loop: Header=BB163_13 Depth=1
	jle	.LBB163_48
# BB#47:                                # %if.end42.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%r14, %rbx
.LBB163_48:                             # %if.end42.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movq	%rbx, %r14
.LBB163_49:                             # %for.inc.us
                                        #   in Loop: Header=BB163_13 Depth=1
	addq	$-8, %r15
	movq	56(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %r15
	jb	.LBB163_75
# BB#50:                                # %for.inc.us
                                        #   in Loop: Header=BB163_13 Depth=1
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r14
	movq	%r12, %r13
	jne	.LBB163_13
	jmp	.LBB163_75
.LBB163_51:
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, 32(%rsp)          # 8-byte Folded Spill
	.align	16, 0x90
.LBB163_52:                             # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15), %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB163_54
# BB#53:                                # %cond.end.i93
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$3, %rax
	js	.LBB163_55
.LBB163_54:                             # %if.then.i95
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
.LBB163_55:                             # %ix86_safe_pent_pair.exit
                                        #   in Loop: Header=BB163_52 Depth=1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB163_56
# BB#57:                                # %land.lhs.true
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%r14, 48(%rsp)          # 8-byte Spill
	movq	(%r15), %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB163_59
# BB#58:                                # %cond.end.i102
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%r14, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$128, %rbx
	js	.LBB163_60
.LBB163_59:                             # %if.then.i104
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%r14, %rdi
	callq	get_attr_length
	movq	%rax, %rbx
.LBB163_60:                             # %ix86_safe_length.exit106
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	(%r15), %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB163_62
# BB#61:                                # %cond.end.i112
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%r14, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$7, %rax
	js	.LBB163_63
.LBB163_62:                             # %if.then.i114
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%r14, %rdi
	callq	get_attr_length
	addq	$7, %rax
.LBB163_63:                             # %ix86_safe_length_prefix.exit116
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rax, %rbx
	jle	.LBB163_65
# BB#64:                                #   in Loop: Header=BB163_52 Depth=1
	movq	%r13, %r12
	movq	48(%rsp), %r14          # 8-byte Reload
	jmp	.LBB163_73
	.align	16, 0x90
.LBB163_56:                             #   in Loop: Header=BB163_52 Depth=1
	movq	%r13, %r12
	jmp	.LBB163_73
	.align	16, 0x90
.LBB163_65:                             # %if.then14
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	(%r15), %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	movq	48(%rsp), %r14          # 8-byte Reload
	jns	.LBB163_67
# BB#66:                                # %cond.end.i122
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB163_68
.LBB163_67:                             # %if.then.i124
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%rbx, %rdi
	callq	get_attr_memory
.LBB163_68:                             # %if.end42
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	(%r15), %rdi
	callq	result_ready_cost
	movq	24(%rsp), %rdx          # 8-byte Reload
	subq	%rax, %rdx
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$63, %rcx
	sarq	%cl, %rax
	addq	%rax, %rdx
	xorq	%rax, %rdx
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	%r14, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rsi, %rax
	movq	%r15, %r12
	jl	.LBB163_70
# BB#69:                                # %if.end42
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%r13, %r12
.LBB163_70:                             # %if.end42
                                        #   in Loop: Header=BB163_52 Depth=1
	jle	.LBB163_72
# BB#71:                                # %if.end42
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%r14, %rdx
.LBB163_72:                             # %if.end42
                                        #   in Loop: Header=BB163_52 Depth=1
	movq	%rdx, %r14
.LBB163_73:                             # %for.inc
                                        #   in Loop: Header=BB163_52 Depth=1
	addq	$-8, %r15
	movq	56(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %r15
	jb	.LBB163_75
# BB#74:                                # %for.inc
                                        #   in Loop: Header=BB163_52 Depth=1
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r14
	movq	%r12, %r13
	jne	.LBB163_52
.LBB163_75:                             # %return
	movq	%r12, %rax
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp1633:
	.size	ix86_pent_find_pair, .Ltmp1633-ix86_pent_find_pair
	.cfi_endproc

	.align	16, 0x90
	.type	classify_argument,@function
classify_argument:                      # @classify_argument
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp1640:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp1641:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp1642:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp1643:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp1644:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp1645:
	.cfi_def_cfa_offset 96
.Ltmp1646:
	.cfi_offset %rbx, -48
.Ltmp1647:
	.cfi_offset %r12, -40
.Ltmp1648:
	.cfi_offset %r13, -32
.Ltmp1649:
	.cfi_offset %r14, -24
.Ltmp1650:
	.cfi_offset %r15, -16
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	%rdi, %r15
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%r15, %rax
	andq	%r13, %rax
	cmpq	$51, %rax
	jne	.LBB164_2
# BB#1:                                 # %cond.true
	movq	%rbx, %rdi
	callq	int_size_in_bytes
	movq	%rax, %r12
	jmp	.LBB164_3
.LBB164_2:                              # %cond.false
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %r12d
.LBB164_3:                              # %cond.end
	movl	target_flags(%rip), %esi
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%r12,%rsi), %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	testq	%rbx, %rbx
	je	.LBB164_169
# BB#4:                                 # %land.lhs.true
	movzbl	16(%rbx), %ecx
	addq	$-18, %rcx
	andq	%r13, %rcx
	cmpq	$4, %rcx
	ja	.LBB164_169
# BB#5:                                 # %if.then
	movq	%rbx, %rsi
	movq	$32, %rcx
	movq	%r12, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	xorq	%rbx, %rbx
	cmpq	$16, %rdx
	jg	.LBB164_202
# BB#6:                                 # %for.cond.preheader
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	movq	%rsi, %rbx
	jle	.LBB164_8
# BB#7:                                 # %for.body.lr.ph
	leaq	-1(%rax), %rcx
	andq	%r13, %rcx
	movq	%rax, %r15
	leaq	4(,%rcx,4), %rdx
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	memset
	movq	%r15, %rax
.LBB164_8:                              # %for.end
	testq	%r13, %rax
	je	.LBB164_9
# BB#11:                                # %if.end47
	movzbl	16(%rbx), %edx
	leaq	-21(%rdx), %rcx
	andq	%r13, %rcx
	cmpq	$2, %rcx
	jae	.LBB164_12
# BB#96:                                # %if.then276
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	136(%rbx), %rax
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	testq	%rax, %rax
	je	.LBB164_128
# BB#97:                                # %land.lhs.true281
	movq	64(%rax), %r15
	testq	%r15, %r15
	je	.LBB164_128
# BB#98:                                # %if.then289
	movslq	24(%r15), %r12
	testq	%r12, %r12
	jle	.LBB164_128
# BB#99:                                # %for.body303.lr.ph
	xorq	%rdx, %rdx
.LBB164_100:                            # %for.body303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_104 Depth 2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	32(%r15,%rdx,8), %rbx
	movq	40(%rbx), %rdi
	xorq	%rsi, %rsi
	callq	tree_low_cst
	movq	8(%rbx), %rsi
	movl	60(%rsi), %edi
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
	movq	24(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax,8), %rbx
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$55, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	addq	%rbx, %rax
	andq	$-256, %rax
	movq	%rbx, %rcx
	subq	%rax, %rcx
	leaq	32(%rsp), %rdx
	callq	classify_argument
	testq	%r13, %rax
	je	.LBB164_101
# BB#102:                               # %for.cond332.preheader
                                        #   in Loop: Header=BB164_100 Depth=1
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$1, %rdx
	testq	%rsi, %rsi
	jle	.LBB164_127
# BB#103:                               # %for.body335.lr.ph
                                        #   in Loop: Header=BB164_100 Depth=1
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$57, %rcx
	shrq	%cl, %rdx
	andq	$63, %rdx
	addq	%rbx, %rdx
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$38, %rcx
	sarq	%cl, %rdx
	leaq	(%r14,%rdx,4), %rcx
	movq	$1, %rdx
	.align	16, 0x90
.LBB164_104:                            # %for.body335
                                        #   Parent Loop BB164_100 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	28(%rsp,%rdx,4), %edi
	movl	-4(%rcx,%rdx,4), %esi
	cmpq	%rsi, %rdi
	jne	.LBB164_106
# BB#105:                               #   in Loop: Header=BB164_104 Depth=2
	movq	%rdi, %rbx
	jmp	.LBB164_125
	.align	16, 0x90
.LBB164_106:                            # %if.end.i735
                                        #   in Loop: Header=BB164_104 Depth=2
	testq	%rdi, %rdi
	jne	.LBB164_108
# BB#107:                               #   in Loop: Header=BB164_104 Depth=2
	movq	%rsi, %rbx
	jmp	.LBB164_125
	.align	16, 0x90
.LBB164_108:                            # %if.end3.i737
                                        #   in Loop: Header=BB164_104 Depth=2
	testq	%rsi, %rsi
	jne	.LBB164_110
# BB#109:                               #   in Loop: Header=BB164_104 Depth=2
	movq	%rdi, %rbx
	jmp	.LBB164_125
.LBB164_110:                            # %if.end6.i741
                                        #   in Loop: Header=BB164_104 Depth=2
	cmpq	$9, %rdi
	movq	$9, %rbx
	je	.LBB164_125
# BB#111:                               # %if.end6.i741
                                        #   in Loop: Header=BB164_104 Depth=2
	cmpq	$9, %rsi
	je	.LBB164_125
# BB#112:                               # %if.end10.i745
                                        #   in Loop: Header=BB164_104 Depth=2
	cmpq	$2, %rdi
	movq	$2, %rbx
	jne	.LBB164_114
# BB#113:                               # %if.end10.i745
                                        #   in Loop: Header=BB164_104 Depth=2
	cmpq	$4, %rsi
	je	.LBB164_125
.LBB164_114:                            # %lor.lhs.false13.i749
                                        #   in Loop: Header=BB164_104 Depth=2
	cmpq	$2, %rsi
	jne	.LBB164_116
# BB#115:                               # %lor.lhs.false13.i749
                                        #   in Loop: Header=BB164_104 Depth=2
	cmpq	$4, %rdi
	je	.LBB164_125
.LBB164_116:                            # %if.end18.i754
                                        #   in Loop: Header=BB164_104 Depth=2
	leaq	-1(%rdi), %rbx
	andq	%r13, %rbx
	cmpq	$2, %rbx
	movq	$1, %rbx
	jb	.LBB164_125
# BB#117:                               # %if.end18.i754
                                        #   in Loop: Header=BB164_104 Depth=2
	cmpq	$1, %rsi
	je	.LBB164_125
# BB#118:                               # %if.end18.i754
                                        #   in Loop: Header=BB164_104 Depth=2
	cmpq	$2, %rsi
	je	.LBB164_125
# BB#119:                               # %if.end27.i761
                                        #   in Loop: Header=BB164_104 Depth=2
	addq	$-7, %rdi
	andq	%r13, %rdi
	cmpq	$2, %rdi
	sbbq	%rdi, %rdi
	andq	$1, %rdi
	cmpq	$7, %rsi
	movabsq	$0, %rbx
	jne	.LBB164_121
# BB#120:                               # %if.end27.i761
                                        #   in Loop: Header=BB164_104 Depth=2
	movabsq	$1, %rbx
.LBB164_121:                            # %if.end27.i761
                                        #   in Loop: Header=BB164_104 Depth=2
	orq	%rbx, %rdi
	cmpq	$8, %rsi
	movabsq	$0, %rsi
	jne	.LBB164_123
# BB#122:                               # %if.end27.i761
                                        #   in Loop: Header=BB164_104 Depth=2
	movabsq	$1, %rsi
.LBB164_123:                            # %if.end27.i761
                                        #   in Loop: Header=BB164_104 Depth=2
	orq	%rsi, %rdi
	movq	$9, %rbx
	jne	.LBB164_125
# BB#124:                               # %if.end27.i761
                                        #   in Loop: Header=BB164_104 Depth=2
	movq	$3, %rbx
	.align	16, 0x90
.LBB164_125:                            # %merge_classes.exit763
                                        #   in Loop: Header=BB164_104 Depth=2
	movl	%ebx, -4(%rcx,%rdx,4)
	movq	%rdx, %rsi
	andq	%r13, %rsi
	movq	%rax, %rdi
	andq	%r13, %rdi
	incq	%rdx
	cmpq	%rdi, %rsi
	jne	.LBB164_104
# BB#126:                               # %for.cond332.for.inc352_crit_edge
                                        #   in Loop: Header=BB164_100 Depth=1
	incq	%rax
	movq	%rax, %rdx
.LBB164_127:                            # %for.inc352
                                        #   in Loop: Header=BB164_100 Depth=1
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%r12, %rax
	jl	.LBB164_100
.LBB164_128:                            # %if.end355
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	24(%rax), %rbx
	testq	%rbx, %rbx
	je	.LBB164_82
# BB#129:                               # %for.body360.lr.ph
	leaq	32(%rsp), %r15
	movabsq	$0, %r12
	.align	16, 0x90
.LBB164_130:                            # %for.body360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_134 Depth 2
	movzbl	16(%rbx), %eax
	cmpq	$37, %rax
	jne	.LBB164_156
# BB#131:                               # %if.then367
                                        #   in Loop: Header=BB164_130 Depth=1
	movq	8(%rbx), %rsi
	movl	60(%rsi), %edi
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
	movq	%r15, %rdx
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	classify_argument
	testq	%r13, %rax
	je	.LBB164_132
# BB#133:                               # %for.cond383.preheader
                                        #   in Loop: Header=BB164_130 Depth=1
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$1, %rcx
	testq	%rdx, %rdx
	jle	.LBB164_156
	.align	16, 0x90
.LBB164_134:                            # %for.body386
                                        #   Parent Loop BB164_130 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	28(%rsp,%rcx,4), %edi
	movl	-4(%r14,%rcx,4), %edx
	cmpq	%rdx, %rdi
	jne	.LBB164_136
# BB#135:                               #   in Loop: Header=BB164_134 Depth=2
	movq	%rdi, %rsi
	jmp	.LBB164_155
	.align	16, 0x90
.LBB164_136:                            # %if.end.i
                                        #   in Loop: Header=BB164_134 Depth=2
	testq	%rdi, %rdi
	jne	.LBB164_138
# BB#137:                               #   in Loop: Header=BB164_134 Depth=2
	movq	%rdx, %rsi
	jmp	.LBB164_155
	.align	16, 0x90
.LBB164_138:                            # %if.end3.i
                                        #   in Loop: Header=BB164_134 Depth=2
	testq	%rdx, %rdx
	jne	.LBB164_140
# BB#139:                               #   in Loop: Header=BB164_134 Depth=2
	movq	%rdi, %rsi
	jmp	.LBB164_155
.LBB164_140:                            # %if.end6.i
                                        #   in Loop: Header=BB164_134 Depth=2
	cmpq	$9, %rdi
	movq	$9, %rsi
	je	.LBB164_155
# BB#141:                               # %if.end6.i
                                        #   in Loop: Header=BB164_134 Depth=2
	cmpq	$9, %rdx
	je	.LBB164_155
# BB#142:                               # %if.end10.i
                                        #   in Loop: Header=BB164_134 Depth=2
	cmpq	$2, %rdi
	movq	$2, %rsi
	jne	.LBB164_144
# BB#143:                               # %if.end10.i
                                        #   in Loop: Header=BB164_134 Depth=2
	cmpq	$4, %rdx
	je	.LBB164_155
.LBB164_144:                            # %lor.lhs.false13.i
                                        #   in Loop: Header=BB164_134 Depth=2
	cmpq	$2, %rdx
	jne	.LBB164_146
# BB#145:                               # %lor.lhs.false13.i
                                        #   in Loop: Header=BB164_134 Depth=2
	cmpq	$4, %rdi
	je	.LBB164_155
.LBB164_146:                            # %if.end18.i
                                        #   in Loop: Header=BB164_134 Depth=2
	leaq	-1(%rdi), %rsi
	andq	%r13, %rsi
	cmpq	$2, %rsi
	movq	$1, %rsi
	jb	.LBB164_155
# BB#147:                               # %if.end18.i
                                        #   in Loop: Header=BB164_134 Depth=2
	cmpq	$1, %rdx
	je	.LBB164_155
# BB#148:                               # %if.end18.i
                                        #   in Loop: Header=BB164_134 Depth=2
	cmpq	$2, %rdx
	je	.LBB164_155
# BB#149:                               # %if.end27.i
                                        #   in Loop: Header=BB164_134 Depth=2
	addq	$-7, %rdi
	andq	%r13, %rdi
	cmpq	$2, %rdi
	sbbq	%rsi, %rsi
	andq	$1, %rsi
	cmpq	$7, %rdx
	movq	%r12, %rdi
	jne	.LBB164_151
# BB#150:                               # %if.end27.i
                                        #   in Loop: Header=BB164_134 Depth=2
	movabsq	$1, %rdi
.LBB164_151:                            # %if.end27.i
                                        #   in Loop: Header=BB164_134 Depth=2
	orq	%rdi, %rsi
	cmpq	$8, %rdx
	movq	%r12, %rdx
	jne	.LBB164_153
# BB#152:                               # %if.end27.i
                                        #   in Loop: Header=BB164_134 Depth=2
	movabsq	$1, %rdx
.LBB164_153:                            # %if.end27.i
                                        #   in Loop: Header=BB164_134 Depth=2
	orq	%rdx, %rsi
	movq	$9, %rsi
	jne	.LBB164_155
# BB#154:                               # %if.end27.i
                                        #   in Loop: Header=BB164_134 Depth=2
	movq	$3, %rsi
	.align	16, 0x90
.LBB164_155:                            # %merge_classes.exit
                                        #   in Loop: Header=BB164_134 Depth=2
	movl	%esi, -4(%r14,%rcx,4)
	movq	%rcx, %rdx
	andq	%r13, %rdx
	movq	%rax, %rsi
	andq	%r13, %rsi
	incq	%rcx
	cmpq	%rsi, %rdx
	jne	.LBB164_134
.LBB164_156:                            # %for.inc398
                                        #   in Loop: Header=BB164_130 Depth=1
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB164_130
	jmp	.LBB164_82
.LBB164_169:                            # %if.end453
	xorq	%rbx, %rbx
	testq	%r13, %r15
	je	.LBB164_202
# BB#170:                               # %if.end453
	movq	$128, %rdi
	movq	%r15, %rsi
	andq	%r13, %rsi
	cmpq	$17, %rsi
	je	.LBB164_174
# BB#171:                               # %if.end453
	cmpq	$51, %rsi
	je	.LBB164_202
# BB#172:                               # %if.else466
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	$32, %rcx
	sarq	%cl, %r15
	cmpq	$23, %rsi
	movq	$256, %rdi              # imm = 0x100
	je	.LBB164_174
# BB#173:                               # %if.else466
	movzbl	mode_bitsize(%r15,%r15), %edi
.LBB164_174:                            # %if.end471
	movq	$32, %rcx
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%r8, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cqto
	idivq	%rdi
	testq	%r13, %rdx
	jne	.LBB164_202
# BB#175:                               # %if.end476
	movq	%r8, %rcx
	cmpq	$51, %rsi
	ja	.LBB164_199
# BB#176:                               # %if.end476
	movabsq	$mode_bitsize+50, %rax
	jmpq	*.LJTI164_0(,%rsi,8)
.LBB164_198:                            # %sw.bb517
	movq	$3, %rax
	jmp	.LBB164_10
.LBB164_9:                              # %if.then45
	xorq	%rax, %rax
	jmp	.LBB164_10
.LBB164_12:                             # %if.end47
	cmpq	$18, %rdx
	jne	.LBB164_13
# BB#84:                                # %if.then216
	movq	%rax, %r15
	movq	8(%rbx), %rsi
	movl	60(%rsi), %edi
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
	leaq	32(%rsp), %rdx
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	classify_argument
	movq	%rax, %r8
	testq	%r13, %r8
	movabsq	$0, %rbx
	je	.LBB164_202
# BB#85:                                # %if.end231
	movl	32(%rsp), %eax
	cmpq	$4, %rax
	jne	.LBB164_88
# BB#86:                                # %if.end231
	movq	%r12, %rcx
	andq	%r13, %rcx
	cmpq	$4, %rcx
	je	.LBB164_88
# BB#87:                                # %if.end240.thread
	movq	$3, %rax
	jmp	.LBB164_91
.LBB164_13:                             # %if.end47
	movq	%rax, 8(%rsp)           # 8-byte Spill
	cmpq	$20, %rdx
	jne	.LBB164_157
# BB#14:                                # %if.then54
	movq	136(%rbx), %rax
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	testq	%rax, %rax
	je	.LBB164_46
# BB#15:                                # %land.lhs.true58
	movq	64(%rax), %r15
	testq	%r15, %r15
	je	.LBB164_46
# BB#16:                                # %if.then64
	movslq	24(%r15), %r12
	testq	%r12, %r12
	jle	.LBB164_46
# BB#17:                                # %for.body75.lr.ph
	xorq	%rdx, %rdx
.LBB164_18:                             # %for.body75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_22 Depth 2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	32(%r15,%rdx,8), %rbx
	movq	40(%rbx), %rdi
	xorq	%rsi, %rsi
	callq	tree_low_cst
	movq	8(%rbx), %rsi
	movl	60(%rsi), %edi
	movq	$9, %rcx
	shrq	%cl, %rdi
	andq	$127, %rdi
	movq	24(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax,8), %rbx
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$55, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	addq	%rbx, %rax
	andq	$-256, %rax
	movq	%rbx, %rcx
	subq	%rax, %rcx
	leaq	32(%rsp), %rdx
	callq	classify_argument
	testq	%r13, %rax
	je	.LBB164_19
# BB#20:                                # %for.cond98.preheader
                                        #   in Loop: Header=BB164_18 Depth=1
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$1, %rdx
	testq	%rsi, %rsi
	jle	.LBB164_45
# BB#21:                                # %for.body101.lr.ph
                                        #   in Loop: Header=BB164_18 Depth=1
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$57, %rcx
	shrq	%cl, %rdx
	andq	$63, %rdx
	addq	%rbx, %rdx
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$38, %rcx
	sarq	%cl, %rdx
	leaq	(%r14,%rdx,4), %rcx
	movq	$1, %rdx
	.align	16, 0x90
.LBB164_22:                             # %for.body101
                                        #   Parent Loop BB164_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	28(%rsp,%rdx,4), %edi
	movl	-4(%rcx,%rdx,4), %esi
	cmpq	%rsi, %rdi
	jne	.LBB164_24
# BB#23:                                #   in Loop: Header=BB164_22 Depth=2
	movq	%rdi, %rbx
	jmp	.LBB164_43
	.align	16, 0x90
.LBB164_24:                             # %if.end.i690
                                        #   in Loop: Header=BB164_22 Depth=2
	testq	%rdi, %rdi
	jne	.LBB164_26
# BB#25:                                #   in Loop: Header=BB164_22 Depth=2
	movq	%rsi, %rbx
	jmp	.LBB164_43
	.align	16, 0x90
.LBB164_26:                             # %if.end3.i692
                                        #   in Loop: Header=BB164_22 Depth=2
	testq	%rsi, %rsi
	jne	.LBB164_28
# BB#27:                                #   in Loop: Header=BB164_22 Depth=2
	movq	%rdi, %rbx
	jmp	.LBB164_43
.LBB164_28:                             # %if.end6.i696
                                        #   in Loop: Header=BB164_22 Depth=2
	cmpq	$9, %rdi
	movq	$9, %rbx
	je	.LBB164_43
# BB#29:                                # %if.end6.i696
                                        #   in Loop: Header=BB164_22 Depth=2
	cmpq	$9, %rsi
	je	.LBB164_43
# BB#30:                                # %if.end10.i700
                                        #   in Loop: Header=BB164_22 Depth=2
	cmpq	$2, %rdi
	movq	$2, %rbx
	jne	.LBB164_32
# BB#31:                                # %if.end10.i700
                                        #   in Loop: Header=BB164_22 Depth=2
	cmpq	$4, %rsi
	je	.LBB164_43
.LBB164_32:                             # %lor.lhs.false13.i704
                                        #   in Loop: Header=BB164_22 Depth=2
	cmpq	$2, %rsi
	jne	.LBB164_34
# BB#33:                                # %lor.lhs.false13.i704
                                        #   in Loop: Header=BB164_22 Depth=2
	cmpq	$4, %rdi
	je	.LBB164_43
.LBB164_34:                             # %if.end18.i709
                                        #   in Loop: Header=BB164_22 Depth=2
	leaq	-1(%rdi), %rbx
	andq	%r13, %rbx
	cmpq	$2, %rbx
	movq	$1, %rbx
	jb	.LBB164_43
# BB#35:                                # %if.end18.i709
                                        #   in Loop: Header=BB164_22 Depth=2
	cmpq	$1, %rsi
	je	.LBB164_43
# BB#36:                                # %if.end18.i709
                                        #   in Loop: Header=BB164_22 Depth=2
	cmpq	$2, %rsi
	je	.LBB164_43
# BB#37:                                # %if.end27.i716
                                        #   in Loop: Header=BB164_22 Depth=2
	addq	$-7, %rdi
	andq	%r13, %rdi
	cmpq	$2, %rdi
	sbbq	%rdi, %rdi
	andq	$1, %rdi
	cmpq	$7, %rsi
	movabsq	$0, %rbx
	jne	.LBB164_39
# BB#38:                                # %if.end27.i716
                                        #   in Loop: Header=BB164_22 Depth=2
	movabsq	$1, %rbx
.LBB164_39:                             # %if.end27.i716
                                        #   in Loop: Header=BB164_22 Depth=2
	orq	%rbx, %rdi
	cmpq	$8, %rsi
	movabsq	$0, %rsi
	jne	.LBB164_41
# BB#40:                                # %if.end27.i716
                                        #   in Loop: Header=BB164_22 Depth=2
	movabsq	$1, %rsi
.LBB164_41:                             # %if.end27.i716
                                        #   in Loop: Header=BB164_22 Depth=2
	orq	%rsi, %rdi
	movq	$9, %rbx
	jne	.LBB164_43
# BB#42:                                # %if.end27.i716
                                        #   in Loop: Header=BB164_22 Depth=2
	movq	$3, %rbx
	.align	16, 0x90
.LBB164_43:                             # %merge_classes.exit718
                                        #   in Loop: Header=BB164_22 Depth=2
	movl	%ebx, -4(%rcx,%rdx,4)
	movq	%rdx, %rsi
	andq	%r13, %rsi
	movq	%rax, %rdi
	andq	%r13, %rdi
	incq	%rdx
	cmpq	%rdi, %rsi
	jne	.LBB164_22
# BB#44:                                # %for.cond98.for.inc117_crit_edge
                                        #   in Loop: Header=BB164_18 Depth=1
	incq	%rax
	movq	%rax, %rdx
.LBB164_45:                             # %for.inc117
                                        #   in Loop: Header=BB164_18 Depth=1
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%r12, %rax
	jl	.LBB164_18
.LBB164_46:                             # %if.end120
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	24(%rax), %r12
	testq	%r12, %r12
	je	.LBB164_82
# BB#47:                                # %for.body124.lr.ph
	movq	$32, %rcx
	movq	24(%rsp), %rax          # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	.align	16, 0x90
.LBB164_48:                             # %for.body124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_52 Depth 2
                                        #     Child Loop BB164_59 Depth 2
	movzbl	16(%r12), %eax
	cmpq	$37, %rax
	jne	.LBB164_81
# BB#49:                                # %if.then131
                                        #   in Loop: Header=BB164_48 Depth=1
	movzbl	49(%r12), %eax
	testq	$16, %rax
	jne	.LBB164_50
# BB#57:                                # %if.else
                                        #   in Loop: Header=BB164_48 Depth=1
	movq	8(%r12), %r15
	movl	60(%r15), %ebx
	movq	$9, %rcx
	shrq	%cl, %rbx
	andq	$127, %rbx
	movq	%r12, %rdi
	callq	int_bit_position
	movq	24(%rsp), %rcx          # 8-byte Reload
	addq	%rcx, %rax
	movq	$63, %rcx
	movq	%rax, %rdx
	sarq	%cl, %rdx
	movq	$56, %rcx
	shrq	%cl, %rdx
	addq	%rax, %rdx
	andq	$-256, %rdx
	subq	%rdx, %rax
	movq	%rbx, %rdi
	movq	%r15, %rsi
	leaq	32(%rsp), %rdx
	movq	%rax, %rcx
	callq	classify_argument
	movq	%rax, %r15
	xorq	%rbx, %rbx
	testq	%r13, %r15
	je	.LBB164_202
# BB#58:                                # %for.cond181.preheader
                                        #   in Loop: Header=BB164_48 Depth=1
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rbx, %rbx
	testq	%rax, %rax
	jle	.LBB164_81
	.align	16, 0x90
.LBB164_59:                             # %for.body184
                                        #   Parent Loop BB164_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r12, %rdi
	callq	int_bit_position
	movq	24(%rsp), %rcx          # 8-byte Reload
	addq	%rcx, %rax
	movq	$63, %rcx
	movq	%rax, %rdx
	sarq	%cl, %rdx
	movq	$58, %rcx
	shrq	%cl, %rdx
	addq	%rax, %rdx
	movq	$6, %rcx
	shrq	%cl, %rdx
	movl	32(%rsp,%rbx,4), %esi
	addq	%rbx, %rdx
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	(%r14,%rdx,4), %eax
	cmpq	%rax, %rsi
	jne	.LBB164_61
# BB#60:                                #   in Loop: Header=BB164_59 Depth=2
	movq	%rsi, %rcx
	jmp	.LBB164_80
	.align	16, 0x90
.LBB164_61:                             # %if.end.i766
                                        #   in Loop: Header=BB164_59 Depth=2
	testq	%rsi, %rsi
	jne	.LBB164_63
# BB#62:                                #   in Loop: Header=BB164_59 Depth=2
	movq	%rax, %rcx
	jmp	.LBB164_80
	.align	16, 0x90
.LBB164_63:                             # %if.end3.i768
                                        #   in Loop: Header=BB164_59 Depth=2
	testq	%rax, %rax
	jne	.LBB164_65
# BB#64:                                #   in Loop: Header=BB164_59 Depth=2
	movq	%rsi, %rcx
	jmp	.LBB164_80
.LBB164_65:                             # %if.end6.i772
                                        #   in Loop: Header=BB164_59 Depth=2
	cmpq	$9, %rsi
	movq	$9, %rcx
	je	.LBB164_80
# BB#66:                                # %if.end6.i772
                                        #   in Loop: Header=BB164_59 Depth=2
	cmpq	$9, %rax
	je	.LBB164_80
# BB#67:                                # %if.end10.i776
                                        #   in Loop: Header=BB164_59 Depth=2
	cmpq	$2, %rsi
	movq	$2, %rcx
	jne	.LBB164_69
# BB#68:                                # %if.end10.i776
                                        #   in Loop: Header=BB164_59 Depth=2
	cmpq	$4, %rax
	je	.LBB164_80
.LBB164_69:                             # %lor.lhs.false13.i780
                                        #   in Loop: Header=BB164_59 Depth=2
	cmpq	$2, %rax
	jne	.LBB164_71
# BB#70:                                # %lor.lhs.false13.i780
                                        #   in Loop: Header=BB164_59 Depth=2
	cmpq	$4, %rsi
	je	.LBB164_80
.LBB164_71:                             # %if.end18.i785
                                        #   in Loop: Header=BB164_59 Depth=2
	leaq	-1(%rsi), %rcx
	andq	%r13, %rcx
	cmpq	$2, %rcx
	movq	$1, %rcx
	jb	.LBB164_80
# BB#72:                                # %if.end18.i785
                                        #   in Loop: Header=BB164_59 Depth=2
	cmpq	$1, %rax
	je	.LBB164_80
# BB#73:                                # %if.end18.i785
                                        #   in Loop: Header=BB164_59 Depth=2
	cmpq	$2, %rax
	je	.LBB164_80
# BB#74:                                # %if.end27.i792
                                        #   in Loop: Header=BB164_59 Depth=2
	addq	$-7, %rsi
	andq	%r13, %rsi
	cmpq	$2, %rsi
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	cmpq	$7, %rax
	movabsq	$0, %rsi
	jne	.LBB164_76
# BB#75:                                # %if.end27.i792
                                        #   in Loop: Header=BB164_59 Depth=2
	movabsq	$1, %rsi
.LBB164_76:                             # %if.end27.i792
                                        #   in Loop: Header=BB164_59 Depth=2
	orq	%rsi, %rcx
	cmpq	$8, %rax
	movabsq	$0, %rax
	jne	.LBB164_78
# BB#77:                                # %if.end27.i792
                                        #   in Loop: Header=BB164_59 Depth=2
	movabsq	$1, %rax
.LBB164_78:                             # %if.end27.i792
                                        #   in Loop: Header=BB164_59 Depth=2
	orq	%rax, %rcx
	movq	$9, %rcx
	jne	.LBB164_80
# BB#79:                                # %if.end27.i792
                                        #   in Loop: Header=BB164_59 Depth=2
	movq	$3, %rcx
	.align	16, 0x90
.LBB164_80:                             # %merge_classes.exit794
                                        #   in Loop: Header=BB164_59 Depth=2
	movl	%ecx, (%r14,%rdx,4)
	incq	%rbx
	movq	%rbx, %rax
	andq	%r13, %rax
	movq	%r15, %rcx
	andq	%r13, %rcx
	cmpq	%rcx, %rax
	jne	.LBB164_59
	jmp	.LBB164_81
.LBB164_50:                             # %if.then137
                                        #   in Loop: Header=BB164_48 Depth=1
	movq	%r12, %rdi
	callq	int_bit_position
	movq	$63, %rcx
	movq	%rax, %r15
	sarq	%cl, %r15
	movq	$58, %rcx
	shrq	%cl, %r15
	addq	%rax, %r15
	movq	$6, %rcx
	sarq	%cl, %r15
	movq	$32, %rcx
	movq	%r15, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%r12, %rdi
	callq	int_bit_position
	movq	40(%r12), %rdi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	callq	tree_low_cst
	movq	16(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax), %rdx
	leaq	63(%rcx,%rax), %rax
	movq	$63, %rcx
	sarq	%cl, %rax
	movq	$58, %rcx
	shrq	%cl, %rax
	leaq	63(%rax,%rdx), %rax
	movq	$6, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rbx
	jge	.LBB164_81
# BB#51:                                # %for.body153.lr.ph
                                        #   in Loop: Header=BB164_48 Depth=1
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	$32, %rcx
	sarq	%cl, %r15
	.align	16, 0x90
.LBB164_52:                             # %for.body153
                                        #   Parent Loop BB164_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%r14,%r15,4), %ecx
	cmpq	$2, %rcx
	movq	$1, %rax
	jb	.LBB164_56
# BB#53:                                # %if.end6.i724
                                        #   in Loop: Header=BB164_52 Depth=2
	cmpq	$9, %rcx
	movabsq	$0, %rax
	jne	.LBB164_55
# BB#54:                                # %if.end6.i724
                                        #   in Loop: Header=BB164_52 Depth=2
	movabsq	$1, %rax
.LBB164_55:                             # %if.end6.i724
                                        #   in Loop: Header=BB164_52 Depth=2
	leaq	1(,%rax,8), %rax
.LBB164_56:                             # %merge_classes.exit732
                                        #   in Loop: Header=BB164_52 Depth=2
	movl	%eax, (%r14,%r15,4)
	incq	%r15
	movq	%r12, %rdi
	callq	int_bit_position
	movq	40(%r12), %rdi
	movq	%rax, %rbx
	xorq	%rsi, %rsi
	callq	tree_low_cst
	leaq	(%rbx,%rax), %rdx
	leaq	63(%rbx,%rax), %rax
	movq	$63, %rcx
	sarq	%cl, %rax
	movq	$58, %rcx
	shrq	%cl, %rax
	leaq	63(%rax,%rdx), %rax
	movq	$6, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %r15
	jl	.LBB164_52
	.align	16, 0x90
.LBB164_81:                             # %for.inc206
                                        #   in Loop: Header=BB164_48 Depth=1
	movq	(%r12), %r12
	testq	%r12, %r12
	jne	.LBB164_48
	jmp	.LBB164_82
.LBB164_187:                            # %sw.bb488
	movabsq	$4294967297, %rax       # imm = 0x100000001
	jmp	.LBB164_188
.LBB164_197:                            # %sw.bb519
	movabsq	$25769803779, %rax      # imm = 0x600000003
	jmp	.LBB164_188
.LBB164_132:
	xorq	%rbx, %rbx
	jmp	.LBB164_202
.LBB164_199:                            # %sw.default
	movabsq	$.L.str76, %rdi
	movabsq	$.L__FUNCTION__.classify_argument, %rdx
	movq	$1912, %rsi             # imm = 0x778
	callq	fancy_abort
.LBB164_88:                             # %if.end240
	cmpq	$2, %rax
	jne	.LBB164_92
# BB#89:                                # %if.end240
	andq	%r13, %r12
	cmpq	$4, %r12
	je	.LBB164_92
# BB#90:                                # %if.then247
	movq	$1, %rax
.LBB164_91:                             # %for.cond250.preheader
	movl	%eax, 32(%rsp)
.LBB164_92:                             # %for.cond250.preheader
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB164_93
# BB#94:
	xorq	%rdi, %rdi
	movq	%r15, %rbx
	movq	%r15, 8(%rsp)           # 8-byte Spill
	andq	%r13, %rbx
	.align	16, 0x90
.LBB164_95:                             # %for.body253
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	%r8, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cqto
	idivq	%rsi
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	32(%rsp,%rdx,4), %eax
	movl	%eax, (%r14,%rdi,4)
	incq	%rdi
	movq	%rdi, %rax
	andq	%r13, %rax
	cmpq	%rbx, %rax
	jne	.LBB164_95
.LBB164_82:                             # %for.cond406.preheader
	movq	$32, %rcx
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB164_83
# BB#158:
	xorq	%rax, %rax
	movq	$3, %r8
	xorq	%rbx, %rbx
	.align	16, 0x90
.LBB164_159:                            # %for.body409
                                        # =>This Inner Loop Header: Depth=1
	movl	(%r14,%rax,4), %ecx
	cmpq	$9, %rcx
	je	.LBB164_202
# BB#160:                               # %for.body409
                                        #   in Loop: Header=BB164_159 Depth=1
	cmpq	$8, %rcx
	jne	.LBB164_161
# BB#164:                               # %land.lhs.true437
                                        #   in Loop: Header=BB164_159 Depth=1
	testq	%r13, %rax
	je	.LBB164_166
# BB#165:                               # %lor.lhs.false440
                                        #   in Loop: Header=BB164_159 Depth=1
	movl	-4(%r14,%rax,4), %ecx
	cmpq	$7, %rcx
	je	.LBB164_167
	jmp	.LBB164_166
	.align	16, 0x90
.LBB164_161:                            # %for.body409
                                        #   in Loop: Header=BB164_159 Depth=1
	cmpq	$6, %rcx
	jne	.LBB164_167
# BB#162:                               # %land.lhs.true420
                                        #   in Loop: Header=BB164_159 Depth=1
	testq	%r13, %rax
	je	.LBB164_166
# BB#163:                               # %lor.lhs.false423
                                        #   in Loop: Header=BB164_159 Depth=1
	movl	-4(%r14,%rax,4), %ecx
	cmpq	$3, %rcx
	je	.LBB164_167
	.align	16, 0x90
.LBB164_166:                            # %if.then446
                                        #   in Loop: Header=BB164_159 Depth=1
	movl	%r8d, (%r14,%rax,4)
.LBB164_167:                            # %for.inc450
                                        #   in Loop: Header=BB164_159 Depth=1
	incq	%rax
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$32, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rsi
	jl	.LBB164_159
# BB#168:
	movq	%rdx, %rbx
	jmp	.LBB164_202
.LBB164_83:
	movq	%rdx, %rbx
	jmp	.LBB164_202
.LBB164_101:
	xorq	%rbx, %rbx
	jmp	.LBB164_202
.LBB164_93:
	movq	%r15, %rbx
	jmp	.LBB164_202
.LBB164_179:                            # %if.end476.sw.bb_crit_edge872
	movabsq	$mode_bitsize+4, %rax
	jmp	.LBB164_183
.LBB164_180:                            # %if.end476.sw.bb_crit_edge871
	movabsq	$mode_bitsize+6, %rax
	jmp	.LBB164_183
.LBB164_181:                            # %if.end476.sw.bb_crit_edge870
	movabsq	$mode_bitsize+8, %rax
	jmp	.LBB164_183
.LBB164_182:                            # %if.end476.sw.bb_crit_edge
	movabsq	$mode_bitsize+10, %rax
	jmp	.LBB164_183
.LBB164_189:                            # %sw.bb496
	testq	$63, %rcx
	jne	.LBB164_190
# BB#191:                               # %sw.bb496
	movabsq	$1, %rax
	addq	$3, %rax
	jmp	.LBB164_10
.LBB164_193:                            # %sw.bb504
	movq	$5, %rax
	jmp	.LBB164_10
.LBB164_194:                            # %sw.bb506
	movabsq	$34359738375, %rax      # imm = 0x800000007
	jmp	.LBB164_188
.LBB164_196:                            # %sw.bb514
	movabsq	$21474836485, %rax      # imm = 0x500000005
.LBB164_188:                            # %return
	movq	%rax, (%r14)
	movq	$2, %rbx
	jmp	.LBB164_202
.LBB164_195:                            # %sw.bb509
	movabsq	$34359738375, %rax      # imm = 0x800000007
	movq	%rax, (%r14)
	movq	%rax, 8(%r14)
	jmp	.LBB164_201
.LBB164_177:                            # %if.end476.sw.bb_crit_edge874
	movabsq	$mode_bitsize+52, %rax
	jmp	.LBB164_183
.LBB164_178:                            # %if.end476.sw.bb_crit_edge873
	movabsq	$mode_bitsize+54, %rax
.LBB164_183:                            # %sw.bb
	movzbl	(%rax), %eax
	addq	%rcx, %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$33, %rax
	jge	.LBB164_184
# BB#185:                               # %sw.bb
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB164_10
.LBB164_184:
	movabsq	$0, %rax
	incq	%rax
.LBB164_10:                             # %return
	movl	%eax, (%r14)
	movq	$1, %rbx
.LBB164_202:                            # %return
	movq	%rbx, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB164_200:                            # %sw.bb491
	movq	$1, %rax
	movl	%eax, 12(%r14)
	movl	%eax, 8(%r14)
	movl	%eax, 4(%r14)
	movl	%eax, (%r14)
.LBB164_201:                            # %return
	movq	$4, %rbx
	jmp	.LBB164_202
.LBB164_19:
	xorq	%rbx, %rbx
	jmp	.LBB164_202
.LBB164_190:
	movabsq	$0, %rax
	addq	$3, %rax
	jmp	.LBB164_10
.LBB164_157:                            # %if.else402
	movabsq	$.L.str76, %rax
	movabsq	$.L__FUNCTION__.classify_argument, %rcx
	movq	$1809, %rsi             # imm = 0x711
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp1651:
	.size	classify_argument, .Ltmp1651-classify_argument
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI164_0:
	.quad	.LBB164_202
	.quad	.LBB164_199
	.quad	.LBB164_179
	.quad	.LBB164_180
	.quad	.LBB164_181
	.quad	.LBB164_182
	.quad	.LBB164_187
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_189
	.quad	.LBB164_193
	.quad	.LBB164_199
	.quad	.LBB164_194
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_198
	.quad	.LBB164_196
	.quad	.LBB164_199
	.quad	.LBB164_195
	.quad	.LBB164_183
	.quad	.LBB164_177
	.quad	.LBB164_178
	.quad	.LBB164_187
	.quad	.LBB164_200
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_198
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_198
	.quad	.LBB164_197
	.quad	.LBB164_199
	.quad	.LBB164_198
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_198
	.quad	.LBB164_199
	.quad	.LBB164_197
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_199
	.quad	.LBB164_202

	.type	pentium_cost,@object    # @pentium_cost
	.align	4
pentium_cost:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	1                       # 0x1
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	25                      # 0x19
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	6                       # 0x6
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	pentium_cost, 160

	.type	ix86_cost,@object       # @ix86_cost
	.data
	.globl	ix86_cost
	.align	8
ix86_cost:
	.quad	pentium_cost
	.size	ix86_cost, 8

	.type	x86_use_leave,@object   # @x86_use_leave
	.section	.rodata,"a",@progbits
	.globl	x86_use_leave
	.align	4
x86_use_leave:
	.long	49                      # 0x31
	.size	x86_use_leave, 4

	.type	x86_push_memory,@object # @x86_push_memory
	.globl	x86_push_memory
	.align	4
x86_push_memory:
	.long	113                     # 0x71
	.size	x86_push_memory, 4

	.type	x86_zero_extend_with_and,@object # @x86_zero_extend_with_and
	.globl	x86_zero_extend_with_and
	.align	4
x86_zero_extend_with_and:
	.long	6                       # 0x6
	.size	x86_zero_extend_with_and, 4

	.type	x86_movx,@object        # @x86_movx
	.globl	x86_movx
	.align	4
x86_movx:
	.long	104                     # 0x68
	.size	x86_movx, 4

	.type	x86_double_with_add,@object # @x86_double_with_add
	.globl	x86_double_with_add
	.align	4
x86_double_with_add:
	.long	4294967294              # 0xfffffffe
	.size	x86_double_with_add, 4

	.type	x86_use_bit_test,@object # @x86_use_bit_test
	.globl	x86_use_bit_test
	.align	4
x86_use_bit_test:
	.long	1                       # 0x1
	.size	x86_use_bit_test, 4

	.type	x86_unroll_strlen,@object # @x86_unroll_strlen
	.globl	x86_unroll_strlen
	.align	4
x86_unroll_strlen:
	.long	62                      # 0x3e
	.size	x86_unroll_strlen, 4

	.type	x86_cmove,@object       # @x86_cmove
	.globl	x86_cmove
	.align	4
x86_cmove:
	.long	104                     # 0x68
	.size	x86_cmove, 4

	.type	x86_3dnow_a,@object     # @x86_3dnow_a
	.globl	x86_3dnow_a
	.align	4
x86_3dnow_a:
	.long	32                      # 0x20
	.size	x86_3dnow_a, 4

	.type	x86_deep_branch,@object # @x86_deep_branch
	.globl	x86_deep_branch
	.align	4
x86_deep_branch:
	.long	120                     # 0x78
	.size	x86_deep_branch, 4

	.type	x86_branch_hints,@object # @x86_branch_hints
	.globl	x86_branch_hints
	.align	4
x86_branch_hints:
	.long	64                      # 0x40
	.size	x86_branch_hints, 4

	.type	x86_use_sahf,@object    # @x86_use_sahf
	.globl	x86_use_sahf
	.align	4
x86_use_sahf:
	.long	88                      # 0x58
	.size	x86_use_sahf, 4

	.type	x86_partial_reg_stall,@object # @x86_partial_reg_stall
	.globl	x86_partial_reg_stall
	.align	4
x86_partial_reg_stall:
	.long	8                       # 0x8
	.size	x86_partial_reg_stall, 4

	.type	x86_use_loop,@object    # @x86_use_loop
	.globl	x86_use_loop
	.align	4
x86_use_loop:
	.long	16                      # 0x10
	.size	x86_use_loop, 4

	.type	x86_use_fiop,@object    # @x86_use_fiop
	.globl	x86_use_fiop
	.align	4
x86_use_fiop:
	.long	4294967251              # 0xffffffd3
	.size	x86_use_fiop, 4

	.type	x86_use_mov0,@object    # @x86_use_mov0
	.globl	x86_use_mov0
	.align	4
x86_use_mov0:
	.long	16                      # 0x10
	.size	x86_use_mov0, 4

	.type	x86_use_cltd,@object    # @x86_use_cltd
	.globl	x86_use_cltd
	.align	4
x86_use_cltd:
	.long	4294967275              # 0xffffffeb
	.size	x86_use_cltd, 4

	.type	x86_read_modify_write,@object # @x86_read_modify_write
	.globl	x86_read_modify_write
	.align	4
x86_read_modify_write:
	.long	4294967291              # 0xfffffffb
	.size	x86_read_modify_write, 4

	.type	x86_read_modify,@object # @x86_read_modify
	.globl	x86_read_modify
	.align	4
x86_read_modify:
	.long	4294967283              # 0xfffffff3
	.size	x86_read_modify, 4

	.type	x86_split_long_moves,@object # @x86_split_long_moves
	.globl	x86_split_long_moves
	.align	4
x86_split_long_moves:
	.long	8                       # 0x8
	.size	x86_split_long_moves, 4

	.type	x86_promote_QImode,@object # @x86_promote_QImode
	.globl	x86_promote_QImode
	.align	4
x86_promote_QImode:
	.long	23                      # 0x17
	.size	x86_promote_QImode, 4

	.type	x86_single_stringop,@object # @x86_single_stringop
	.globl	x86_single_stringop
	.align	4
x86_single_stringop:
	.long	65                      # 0x41
	.size	x86_single_stringop, 4

	.type	x86_qimode_math,@object # @x86_qimode_math
	.globl	x86_qimode_math
	.align	4
x86_qimode_math:
	.long	4294967295              # 0xffffffff
	.size	x86_qimode_math, 4

	.type	x86_promote_qi_regs,@object # @x86_promote_qi_regs
	.globl	x86_promote_qi_regs
	.align	4
x86_promote_qi_regs:
	.long	0                       # 0x0
	.size	x86_promote_qi_regs, 4

	.type	x86_himode_math,@object # @x86_himode_math
	.globl	x86_himode_math
	.align	4
x86_himode_math:
	.long	4294967287              # 0xfffffff7
	.size	x86_himode_math, 4

	.type	x86_promote_hi_regs,@object # @x86_promote_hi_regs
	.globl	x86_promote_hi_regs
	.align	4
x86_promote_hi_regs:
	.long	8                       # 0x8
	.size	x86_promote_hi_regs, 4

	.type	x86_sub_esp_4,@object   # @x86_sub_esp_4
	.globl	x86_sub_esp_4
	.align	4
x86_sub_esp_4:
	.long	104                     # 0x68
	.size	x86_sub_esp_4, 4

	.type	x86_sub_esp_8,@object   # @x86_sub_esp_8
	.globl	x86_sub_esp_8
	.align	4
x86_sub_esp_8:
	.long	107                     # 0x6b
	.size	x86_sub_esp_8, 4

	.type	x86_add_esp_4,@object   # @x86_add_esp_4
	.globl	x86_add_esp_4
	.align	4
x86_add_esp_4:
	.long	112                     # 0x70
	.size	x86_add_esp_4, 4

	.type	x86_add_esp_8,@object   # @x86_add_esp_8
	.globl	x86_add_esp_8
	.align	4
x86_add_esp_8:
	.long	123                     # 0x7b
	.size	x86_add_esp_8, 4

	.type	x86_integer_DFmode_moves,@object # @x86_integer_DFmode_moves
	.globl	x86_integer_DFmode_moves
	.align	4
x86_integer_DFmode_moves:
	.long	4294967199              # 0xffffff9f
	.size	x86_integer_DFmode_moves, 4

	.type	x86_partial_reg_dependency,@object # @x86_partial_reg_dependency
	.globl	x86_partial_reg_dependency
	.align	4
x86_partial_reg_dependency:
	.long	96                      # 0x60
	.size	x86_partial_reg_dependency, 4

	.type	x86_memory_mismatch_stall,@object # @x86_memory_mismatch_stall
	.globl	x86_memory_mismatch_stall
	.align	4
x86_memory_mismatch_stall:
	.long	96                      # 0x60
	.size	x86_memory_mismatch_stall, 4

	.type	x86_accumulate_outgoing_args,@object # @x86_accumulate_outgoing_args
	.globl	x86_accumulate_outgoing_args
	.align	4
x86_accumulate_outgoing_args:
	.long	104                     # 0x68
	.size	x86_accumulate_outgoing_args, 4

	.type	x86_prologue_using_move,@object # @x86_prologue_using_move
	.globl	x86_prologue_using_move
	.align	4
x86_prologue_using_move:
	.long	104                     # 0x68
	.size	x86_prologue_using_move, 4

	.type	x86_epilogue_using_move,@object # @x86_epilogue_using_move
	.globl	x86_epilogue_using_move
	.align	4
x86_epilogue_using_move:
	.long	104                     # 0x68
	.size	x86_epilogue_using_move, 4

	.type	x86_decompose_lea,@object # @x86_decompose_lea
	.globl	x86_decompose_lea
	.align	4
x86_decompose_lea:
	.long	64                      # 0x40
	.size	x86_decompose_lea, 4

	.type	x86_arch_always_fancy_math_387,@object # @x86_arch_always_fancy_math_387
	.globl	x86_arch_always_fancy_math_387
	.align	4
x86_arch_always_fancy_math_387:
	.long	108                     # 0x6c
	.size	x86_arch_always_fancy_math_387, 4

	.type	regclass_map,@object    # @regclass_map
	.globl	regclass_map
	.align	16
regclass_map:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	9                       # 0x9
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	9                       # 0x9
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	17                      # 0x11
	.long	17                      # 0x11
	.long	17                      # 0x11
	.long	17                      # 0x11
	.long	17                      # 0x11
	.long	17                      # 0x11
	.long	17                      # 0x11
	.long	17                      # 0x11
	.long	9                       # 0x9
	.long	9                       # 0x9
	.long	9                       # 0x9
	.long	9                       # 0x9
	.long	9                       # 0x9
	.long	9                       # 0x9
	.long	9                       # 0x9
	.long	9                       # 0x9
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	16                      # 0x10
	.size	regclass_map, 212

	.type	dbx_register_map,@object # @dbx_register_map
	.globl	dbx_register_map
	.align	16
dbx_register_map:
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	12                      # 0xc
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	17                      # 0x11
	.long	18                      # 0x12
	.long	19                      # 0x13
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	21                      # 0x15
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	32                      # 0x20
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	35                      # 0x23
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.size	dbx_register_map, 212

	.type	dbx64_register_map,@object # @dbx64_register_map
	.globl	dbx64_register_map
	.align	16
dbx64_register_map:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	35                      # 0x23
	.long	36                      # 0x24
	.long	37                      # 0x25
	.long	38                      # 0x26
	.long	39                      # 0x27
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	17                      # 0x11
	.long	18                      # 0x12
	.long	19                      # 0x13
	.long	20                      # 0x14
	.long	21                      # 0x15
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	24                      # 0x18
	.long	41                      # 0x29
	.long	42                      # 0x2a
	.long	43                      # 0x2b
	.long	44                      # 0x2c
	.long	45                      # 0x2d
	.long	46                      # 0x2e
	.long	47                      # 0x2f
	.long	48                      # 0x30
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	10                      # 0xa
	.long	11                      # 0xb
	.long	12                      # 0xc
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	15                      # 0xf
	.long	25                      # 0x19
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	32                      # 0x20
	.size	dbx64_register_map, 212

	.type	svr4_dbx_register_map,@object # @svr4_dbx_register_map
	.globl	svr4_dbx_register_map
	.align	16
svr4_dbx_register_map:
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	5                       # 0x5
	.long	4                       # 0x4
	.long	11                      # 0xb
	.long	12                      # 0xc
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	17                      # 0x11
	.long	18                      # 0x12
	.long	4294967295              # 0xffffffff
	.long	9                       # 0x9
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	21                      # 0x15
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	32                      # 0x20
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	35                      # 0x23
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.long	4294967295              # 0xffffffff
	.size	svr4_dbx_register_map, 212

	.type	ix86_compare_op0,@object # @ix86_compare_op0
	.bss
	.globl	ix86_compare_op0
	.align	8
ix86_compare_op0:
	.quad	0
	.size	ix86_compare_op0, 8

	.type	ix86_compare_op1,@object # @ix86_compare_op1
	.globl	ix86_compare_op1
	.align	8
ix86_compare_op1:
	.quad	0
	.size	ix86_compare_op1, 8

	.type	ix86_asm_dialect,@object # @ix86_asm_dialect
	.globl	ix86_asm_dialect
	.align	4
ix86_asm_dialect:
	.long	0                       # 0x0
	.size	ix86_asm_dialect, 4

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.zero	1
	.size	.L.str, 1

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"\t.byte\t"
	.size	.L.str1, 8

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"\t.value\t"
	.size	.L.str2, 9

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"\t.long\t"
	.size	.L.str3, 8

	.type	.L.str4,@object         # @.str4
.L.str4:
	.asciz	"\t.quad\t"
	.size	.L.str4, 8

	.type	targetm,@object         # @targetm
	.data
	.globl	targetm
	.align	8
targetm:
	.quad	.L.str
	.quad	.L.str
	.quad	.L.str1
	.quad	.L.str2
	.quad	.L.str3
	.quad	.L.str4
	.quad	0
	.quad	.L.str2
	.quad	.L.str3
	.quad	.L.str4
	.quad	0
	.quad	default_assemble_integer
	.quad	default_function_pro_epilogue
	.quad	no_asm_to_stream
	.quad	no_asm_to_stream
	.quad	default_function_pro_epilogue
	.quad	default_elf_asm_named_section
	.quad	default_exception_section
	.quad	default_eh_frame_section
	.quad	default_named_section_asm_out_constructor
	.quad	default_named_section_asm_out_destructor
	.quad	ix86_adjust_cost
	.quad	0
	.quad	ix86_issue_rate
	.quad	ix86_variable_issue
	.quad	ix86_sched_init
	.quad	0
	.quad	ix86_sched_reorder
	.quad	0
	.quad	0
	.quad	merge_decl_attributes
	.quad	merge_type_attributes
	.quad	ix86_attribute_table
	.quad	ix86_comp_type_attributes
	.quad	default_set_default_type_attributes
	.quad	default_insert_attributes
	.quad	default_function_attribute_inlinable_p
	.quad	default_ms_bitfield_layout_p
	.quad	ix86_init_builtins
	.quad	ix86_expand_builtin
	.quad	default_section_type_flags
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	6
	.quad	hook_void_bool_false
	.size	targetm, 344

	.type	override_options.processor_target_table,@object # @override_options.processor_target_table
	.section	.rodata,"a",@progbits
	.align	16
override_options.processor_target_table:
	.quad	i386_cost
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	1                       # 0x1
	.quad	i486_cost
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	1                       # 0x1
	.quad	pentium_cost
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	1                       # 0x1
	.quad	pentiumpro_cost
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	1                       # 0x1
	.quad	k6_cost
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	32                      # 0x20
	.long	1                       # 0x1
	.quad	athlon_cost
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	7                       # 0x7
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	1                       # 0x1
	.quad	pentium4_cost
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.size	override_options.processor_target_table, 280

	.type	i386_cost,@object       # @i386_cost
	.align	4
i386_cost:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	6                       # 0x6
	.long	1                       # 0x1
	.long	23                      # 0x17
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	15                      # 0xf
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	i386_cost, 160

	.type	i486_cost,@object       # @i486_cost
	.align	4
i486_cost:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	12                      # 0xc
	.long	1                       # 0x1
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	15                      # 0xf
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	i486_cost, 160

	.type	pentiumpro_cost,@object # @pentiumpro_cost
	.align	4
pentiumpro_cost:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	6                       # 0x6
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	3                       # 0x3
	.long	32                      # 0x20
	.long	6                       # 0x6
	.size	pentiumpro_cost, 160

	.type	k6_cost,@object         # @k6_cost
	.align	4
k6_cost:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	18                      # 0x12
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	4                       # 0x4
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	1                       # 0x1
	.size	k6_cost, 160

	.type	athlon_cost,@object     # @athlon_cost
	.align	4
athlon_cost:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	20                      # 0x14
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	16                      # 0x10
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	6                       # 0x6
	.size	athlon_cost, 160

	.type	pentium4_cost,@object   # @pentium4_cost
	.align	4
pentium4_cost:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	112                     # 0x70
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	16                      # 0x10
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	4                       # 0x4
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	6                       # 0x6
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	12                      # 0xc
	.long	12                      # 0xc
	.long	12                      # 0xc
	.long	12                      # 0xc
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	64                      # 0x40
	.long	6                       # 0x6
	.size	pentium4_cost, 160

	.type	.L.str5,@object         # @.str5
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str5:
	.asciz	"i386"
	.size	.L.str5, 5

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	"i486"
	.size	.L.str6, 5

	.type	.L.str7,@object         # @.str7
.L.str7:
	.asciz	"pentium"
	.size	.L.str7, 8

	.type	.L.str8,@object         # @.str8
.L.str8:
	.asciz	"pentium-mmx"
	.size	.L.str8, 12

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	"pentiumpro"
	.size	.L.str9, 11

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	"pentium2"
	.size	.L.str10, 9

	.type	.L.str11,@object        # @.str11
.L.str11:
	.asciz	"pentium3"
	.size	.L.str11, 9

	.type	.L.str12,@object        # @.str12
.L.str12:
	.asciz	"pentium4"
	.size	.L.str12, 9

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	"k6"
	.size	.L.str13, 3

	.type	.L.str14,@object        # @.str14
.L.str14:
	.asciz	"k6-2"
	.size	.L.str14, 5

	.type	.L.str15,@object        # @.str15
.L.str15:
	.asciz	"k6-3"
	.size	.L.str15, 5

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	"athlon"
	.size	.L.str16, 7

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	"athlon-4"
	.size	.L.str17, 9

	.type	override_options.processor_alias_table,@object # @override_options.processor_alias_table
	.section	.rodata,"a",@progbits
	.align	16
override_options.processor_alias_table:
	.quad	.L.str5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.quad	.L.str6
	.long	1                       # 0x1
	.long	0                       # 0x0
	.quad	.L.str18
	.long	2                       # 0x2
	.long	0                       # 0x0
	.quad	.L.str7
	.long	2                       # 0x2
	.long	0                       # 0x0
	.quad	.L.str8
	.long	2                       # 0x2
	.long	4                       # 0x4
	.quad	.L.str19
	.long	3                       # 0x3
	.long	0                       # 0x0
	.quad	.L.str9
	.long	3                       # 0x3
	.long	0                       # 0x0
	.quad	.L.str10
	.long	3                       # 0x3
	.long	4                       # 0x4
	.quad	.L.str11
	.long	3                       # 0x3
	.long	13                      # 0xd
	.quad	.L.str12
	.long	6                       # 0x6
	.long	15                      # 0xf
	.quad	.L.str13
	.long	4                       # 0x4
	.long	4                       # 0x4
	.quad	.L.str14
	.long	4                       # 0x4
	.long	20                      # 0x14
	.quad	.L.str15
	.long	4                       # 0x4
	.long	20                      # 0x14
	.quad	.L.str16
	.long	5                       # 0x5
	.long	92                      # 0x5c
	.quad	.L.str20
	.long	5                       # 0x5
	.long	92                      # 0x5c
	.quad	.L.str17
	.long	5                       # 0x5
	.long	93                      # 0x5d
	.quad	.L.str21
	.long	5                       # 0x5
	.long	93                      # 0x5d
	.quad	.L.str22
	.long	5                       # 0x5
	.long	93                      # 0x5d
	.size	override_options.processor_alias_table, 288

	.type	.L.str18,@object        # @.str18
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str18:
	.asciz	"i586"
	.size	.L.str18, 5

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	"i686"
	.size	.L.str19, 5

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	"athlon-tbird"
	.size	.L.str20, 13

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	"athlon-xp"
	.size	.L.str21, 10

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	"athlon-mp"
	.size	.L.str22, 10

	.type	ix86_cpu_string,@object # @ix86_cpu_string
	.comm	ix86_cpu_string,8,8
	.type	ix86_arch_string,@object # @ix86_arch_string
	.comm	ix86_arch_string,8,8
	.type	ix86_cmodel_string,@object # @ix86_cmodel_string
	.comm	ix86_cmodel_string,8,8
	.type	.L.str23,@object        # @.str23
.L.str23:
	.asciz	"small"
	.size	.L.str23, 6

	.type	ix86_cmodel,@object     # @ix86_cmodel
	.comm	ix86_cmodel,4,4
	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	"code model %s not supported in PIC mode"
	.size	.L.str24, 40

	.type	.L.str25,@object        # @.str25
.L.str25:
	.asciz	"32"
	.size	.L.str25, 3

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	"kernel"
	.size	.L.str26, 7

	.type	.L.str27,@object        # @.str27
.L.str27:
	.asciz	"medium"
	.size	.L.str27, 7

	.type	.L.str28,@object        # @.str28
.L.str28:
	.asciz	"large"
	.size	.L.str28, 6

	.type	.L.str29,@object        # @.str29
.L.str29:
	.asciz	"bad value (%s) for -mcmodel= switch"
	.size	.L.str29, 36

	.type	ix86_asm_string,@object # @ix86_asm_string
	.comm	ix86_asm_string,8,8
	.type	.L.str30,@object        # @.str30
.L.str30:
	.asciz	"intel"
	.size	.L.str30, 6

	.type	.L.str31,@object        # @.str31
.L.str31:
	.asciz	"att"
	.size	.L.str31, 4

	.type	.L.str32,@object        # @.str32
.L.str32:
	.asciz	"bad value (%s) for -masm= switch"
	.size	.L.str32, 33

	.type	.L.str33,@object        # @.str33
.L.str33:
	.asciz	"code model `%s' not supported in the %s bit mode"
	.size	.L.str33, 49

	.type	.L.str34,@object        # @.str34
.L.str34:
	.asciz	"64"
	.size	.L.str34, 3

	.type	.L.str35,@object        # @.str35
.L.str35:
	.asciz	"code model `large' not supported yet"
	.size	.L.str35, 37

	.type	ix86_arch,@object       # @ix86_arch
	.comm	ix86_arch,4,4
	.type	ix86_cpu,@object        # @ix86_cpu
	.comm	ix86_cpu,4,4
	.type	x86_prefetch_sse,@object # @x86_prefetch_sse
	.comm	x86_prefetch_sse,4,4
	.type	.L.str37,@object        # @.str37
.L.str37:
	.asciz	"bad value (%s) for -march= switch"
	.size	.L.str37, 34

	.type	.L.str38,@object        # @.str38
.L.str38:
	.asciz	"bad value (%s) for -mcpu= switch"
	.size	.L.str38, 33

	.type	size_cost,@object       # @size_cost
	.section	.rodata,"a",@progbits
	.align	4
size_cost:
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.size	size_cost, 160

	.type	ix86_regparm_string,@object # @ix86_regparm_string
	.comm	ix86_regparm_string,8,8
	.type	.L.str39,@object        # @.str39
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str39:
	.asciz	"-mregparm=%d is not between 0 and %d"
	.size	.L.str39, 37

	.type	ix86_regparm,@object    # @ix86_regparm
	.comm	ix86_regparm,4,4
	.type	ix86_align_loops_string,@object # @ix86_align_loops_string
	.comm	ix86_align_loops_string,8,8
	.type	.L.str40,@object        # @.str40
.L.str40:
	.asciz	"-malign-loops is obsolete, use -falign-loops"
	.size	.L.str40, 45

	.type	.L.str41,@object        # @.str41
.L.str41:
	.asciz	"-malign-loops=%d is not between 0 and %d"
	.size	.L.str41, 41

	.type	ix86_align_jumps_string,@object # @ix86_align_jumps_string
	.comm	ix86_align_jumps_string,8,8
	.type	.L.str42,@object        # @.str42
.L.str42:
	.asciz	"-malign-jumps is obsolete, use -falign-jumps"
	.size	.L.str42, 45

	.type	ix86_align_funcs_string,@object # @ix86_align_funcs_string
	.comm	ix86_align_funcs_string,8,8
	.type	.L.str43,@object        # @.str43
.L.str43:
	.asciz	"-malign-functions is obsolete, use -falign-functions"
	.size	.L.str43, 53

	.type	ix86_preferred_stack_boundary,@object # @ix86_preferred_stack_boundary
	.comm	ix86_preferred_stack_boundary,4,4
	.type	ix86_preferred_stack_boundary_string,@object # @ix86_preferred_stack_boundary_string
	.comm	ix86_preferred_stack_boundary_string,8,8
	.type	.L.str44,@object        # @.str44
.L.str44:
	.asciz	"-mpreferred-stack-boundary=%d is not between %d and 12"
	.size	.L.str44, 55

	.type	ix86_branch_cost,@object # @ix86_branch_cost
	.comm	ix86_branch_cost,4,4
	.type	ix86_branch_cost_string,@object # @ix86_branch_cost_string
	.comm	ix86_branch_cost_string,8,8
	.type	.L.str45,@object        # @.str45
.L.str45:
	.asciz	"-mbranch-cost=%d is not between 0 and 5"
	.size	.L.str45, 40

	.type	.L.str46,@object        # @.str46
.L.str46:
	.asciz	"-malign-double makes no sense in the 64bit mode"
	.size	.L.str46, 48

	.type	.L.str47,@object        # @.str47
.L.str47:
	.asciz	"-mrtd calling convention not supported in the 64bit mode"
	.size	.L.str47, 57

	.type	ix86_fpmath,@object     # @ix86_fpmath
	.comm	ix86_fpmath,4,4
	.type	ix86_fpmath_string,@object # @ix86_fpmath_string
	.comm	ix86_fpmath_string,8,8
	.type	.L.str48,@object        # @.str48
.L.str48:
	.asciz	"387"
	.size	.L.str48, 4

	.type	.L.str49,@object        # @.str49
.L.str49:
	.asciz	"sse"
	.size	.L.str49, 4

	.type	.L.str50,@object        # @.str50
.L.str50:
	.asciz	"SSE instruction set disabled, using 387 arithmetics"
	.size	.L.str50, 52

	.type	.L.str51,@object        # @.str51
.L.str51:
	.asciz	"387,sse"
	.size	.L.str51, 8

	.type	.L.str52,@object        # @.str52
.L.str52:
	.asciz	"sse,387"
	.size	.L.str52, 8

	.type	.L.str53,@object        # @.str53
.L.str53:
	.asciz	"387 instruction set disabled, using SSE arithmetics"
	.size	.L.str53, 52

	.type	.L.str54,@object        # @.str54
.L.str54:
	.asciz	"bad value (%s) for -mfpmath= switch"
	.size	.L.str54, 36

	.type	internal_label_prefix,@object # @internal_label_prefix
	.local	internal_label_prefix
	.comm	internal_label_prefix,16,16
	.type	.L.str55,@object        # @.str55
.L.str55:
	.asciz	"*.%s%u"
	.size	.L.str55, 7

	.type	.L.str56,@object        # @.str56
.L.str56:
	.asciz	"LX"
	.size	.L.str56, 3

	.type	internal_label_prefix_len,@object # @internal_label_prefix_len
	.local	internal_label_prefix_len
	.comm	internal_label_prefix_len,4,4
	.type	.L.str57,@object        # @.str57
.L.str57:
	.asciz	"stdcall"
	.size	.L.str57, 8

	.type	.L.str58,@object        # @.str58
.L.str58:
	.asciz	"cdecl"
	.size	.L.str58, 6

	.type	.L.str59,@object        # @.str59
.L.str59:
	.asciz	"regparm"
	.size	.L.str59, 8

	.type	ix86_attribute_table,@object # @ix86_attribute_table
	.section	.rodata,"a",@progbits
	.globl	ix86_attribute_table
	.align	16
ix86_attribute_table:
	.quad	.L.str57
	.long	0                       # 0x0
	.long	0                       # 0x0
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	5
	.quad	ix86_handle_cdecl_attribute
	.quad	.L.str58
	.long	0                       # 0x0
	.long	0                       # 0x0
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	5
	.quad	ix86_handle_cdecl_attribute
	.quad	.L.str59
	.long	1                       # 0x1
	.long	1                       # 0x1
	.byte	0                       # 0x0
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	5
	.quad	ix86_handle_regparm_attribute
	.zero	32
	.size	ix86_attribute_table, 128

	.type	x86_64_int_parameter_registers,@object # @x86_64_int_parameter_registers
	.align	16
x86_64_int_parameter_registers:
	.long	5                       # 0x5
	.long	4                       # 0x4
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	37                      # 0x25
	.long	38                      # 0x26
	.size	x86_64_int_parameter_registers, 24

	.type	ix86_debug_arg_string,@object # @ix86_debug_arg_string
	.comm	ix86_debug_arg_string,8,8
	.type	.L.str60,@object        # @.str60
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str60:
	.asciz	"\ninit_cumulative_args ("
	.size	.L.str60, 24

	.type	.L.str61,@object        # @.str61
.L.str61:
	.asciz	"fntype code = %s, ret code = %s"
	.size	.L.str61, 32

	.type	.L.str62,@object        # @.str62
.L.str62:
	.asciz	"no fntype"
	.size	.L.str62, 10

	.type	.L.str63,@object        # @.str63
.L.str63:
	.asciz	", libname = %s"
	.size	.L.str63, 15

	.type	.L.str64,@object        # @.str64
.L.str64:
	.asciz	", nregs=%d )\n"
	.size	.L.str64, 14

	.type	.L.str65,@object        # @.str65
.L.str65:
	.asciz	"function_adv (sz=%d, wds=%2d, nregs=%d, mode=%s, named=%d)\n\n"
	.size	.L.str65, 61

	.type	.L.str66,@object        # @.str66
.L.str66:
	.asciz	"function_arg (size=%d, wds=%2d, nregs=%d, mode=%4s, named=%d"
	.size	.L.str66, 61

	.type	.L.str67,@object        # @.str67
.L.str67:
	.asciz	", reg=%%e%s"
	.size	.L.str67, 12

	.type	.L.str68,@object        # @.str68
.L.str68:
	.asciz	", stack"
	.size	.L.str68, 8

	.type	.L.str69,@object        # @.str69
.L.str69:
	.asciz	" )\n"
	.size	.L.str69, 4

	.type	x86_64_int_return_registers,@object # @x86_64_int_return_registers
	.section	.rodata,"a",@progbits
	.align	16
x86_64_int_return_registers:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	5                       # 0x5
	.long	4                       # 0x4
	.size	x86_64_int_return_registers, 16

	.type	.L.str70,@object        # @.str70
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str70:
	.asciz	"__va_list_tag"
	.size	.L.str70, 14

	.type	.L.str71,@object        # @.str71
.L.str71:
	.asciz	"gp_offset"
	.size	.L.str71, 10

	.type	.L.str72,@object        # @.str72
.L.str72:
	.asciz	"fp_offset"
	.size	.L.str72, 10

	.type	.L.str73,@object        # @.str73
.L.str73:
	.asciz	"overflow_arg_area"
	.size	.L.str73, 18

	.type	.L.str74,@object        # @.str74
.L.str74:
	.asciz	"reg_save_area"
	.size	.L.str74, 14

	.type	.L.str75,@object        # @.str75
.L.str75:
	.asciz	"va_start: words = %d, n_gpr = %d, n_fpr = %d\n"
	.size	.L.str75, 46

	.type	ix86_va_arg.intreg,@object # @ix86_va_arg.intreg
	.data
	.align	16
ix86_va_arg.intreg:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	5                       # 0x5
	.size	ix86_va_arg.intreg, 24

	.type	.L.str76,@object        # @.str76
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str76:
	.asciz	"i386.c"
	.size	.L.str76, 7

	.type	.L__FUNCTION__.memory_displacement_operand,@object # @__FUNCTION__.memory_displacement_operand
.L__FUNCTION__.memory_displacement_operand:
	.asciz	"memory_displacement_operand"
	.size	.L__FUNCTION__.memory_displacement_operand, 28

	.type	.L__FUNCTION__.aligned_operand,@object # @__FUNCTION__.aligned_operand
.L__FUNCTION__.aligned_operand:
	.asciz	"aligned_operand"
	.size	.L__FUNCTION__.aligned_operand, 16

	.type	pic_label_name,@object  # @pic_label_name
	.local	pic_label_name
	.comm	pic_label_name,32,16
	.type	.L.str77,@object        # @.str77
.L.str77:
	.asciz	":\n"
	.size	.L.str77, 3

	.type	.L.str78,@object        # @.str78
.L.str78:
	.asciz	"mov{l}\t{%1, %0|%0, %1}"
	.size	.L.str78, 23

	.type	.L.str79,@object        # @.str79
.L.str79:
	.asciz	"ret"
	.size	.L.str79, 4

	.type	.L__FUNCTION__.load_pic_register,@object # @__FUNCTION__.load_pic_register
.L__FUNCTION__.load_pic_register:
	.asciz	"load_pic_register"
	.size	.L__FUNCTION__.load_pic_register, 18

	.type	.L.str80,@object        # @.str80
.L.str80:
	.asciz	"_GLOBAL_OFFSET_TABLE_"
	.size	.L.str80, 22

	.type	.L.str81,@object        # @.str81
.L.str81:
	.asciz	"LPR"
	.size	.L.str81, 4

	.type	.L__FUNCTION__.ix86_initial_elimination_offset,@object # @__FUNCTION__.ix86_initial_elimination_offset
.L__FUNCTION__.ix86_initial_elimination_offset:
	.asciz	"ix86_initial_elimination_offset"
	.size	.L__FUNCTION__.ix86_initial_elimination_offset, 32

	.type	use_fast_prologue_epilogue,@object # @use_fast_prologue_epilogue
	.local	use_fast_prologue_epilogue
	.comm	use_fast_prologue_epilogue,4,4
	.type	.L__FUNCTION__.ix86_expand_prologue,@object # @__FUNCTION__.ix86_expand_prologue
.L__FUNCTION__.ix86_expand_prologue:
	.asciz	"ix86_expand_prologue"
	.size	.L__FUNCTION__.ix86_expand_prologue, 21

	.type	.L.str82,@object        # @.str82
.L.str82:
	.asciz	"_alloca"
	.size	.L.str82, 8

	.type	.L__FUNCTION__.ix86_expand_epilogue,@object # @__FUNCTION__.ix86_expand_epilogue
.L__FUNCTION__.ix86_expand_epilogue:
	.asciz	"ix86_expand_epilogue"
	.size	.L__FUNCTION__.ix86_expand_epilogue, 21

	.type	.L__FUNCTION__.ix86_address_cost,@object # @__FUNCTION__.ix86_address_cost
.L__FUNCTION__.ix86_address_cost:
	.asciz	"ix86_address_cost"
	.size	.L__FUNCTION__.ix86_address_cost, 18

	.type	ix86_debug_addr_string,@object # @ix86_debug_addr_string
	.comm	ix86_debug_addr_string,8,8
	.type	.L.str83,@object        # @.str83
.L.str83:
	.asciz	"\n======\nGO_IF_LEGITIMATE_ADDRESS, mode = %s, strict = %d\n"
	.size	.L.str83, 58

	.type	.L.str84,@object        # @.str84
.L.str84:
	.asciz	"decomposition failed"
	.size	.L.str84, 21

	.type	.L.str85,@object        # @.str85
.L.str85:
	.asciz	"base is not a register"
	.size	.L.str85, 23

	.type	.L.str86,@object        # @.str86
.L.str86:
	.asciz	"base is not in Pmode"
	.size	.L.str86, 21

	.type	.L.str87,@object        # @.str87
.L.str87:
	.asciz	"base is not valid"
	.size	.L.str87, 18

	.type	.L.str88,@object        # @.str88
.L.str88:
	.asciz	"index is not a register"
	.size	.L.str88, 24

	.type	.L.str89,@object        # @.str89
.L.str89:
	.asciz	"index is not in Pmode"
	.size	.L.str89, 22

	.type	.L.str90,@object        # @.str90
.L.str90:
	.asciz	"index is not valid"
	.size	.L.str90, 19

	.type	.L.str91,@object        # @.str91
.L.str91:
	.asciz	"scale without index"
	.size	.L.str91, 20

	.type	.L.str92,@object        # @.str92
.L.str92:
	.asciz	"scale is not a valid multiplier"
	.size	.L.str92, 32

	.type	.L.str93,@object        # @.str93
.L.str93:
	.asciz	"displacement is not constant"
	.size	.L.str93, 29

	.type	.L.str94,@object        # @.str94
.L.str94:
	.asciz	"displacement is out of range"
	.size	.L.str94, 29

	.type	.L.str95,@object        # @.str95
.L.str95:
	.asciz	"displacement is a const_double"
	.size	.L.str95, 31

	.type	.L.str96,@object        # @.str96
.L.str96:
	.asciz	"non-constant pic memory reference"
	.size	.L.str96, 34

	.type	.L.str97,@object        # @.str97
.L.str97:
	.asciz	"displacement is an invalid pic construct"
	.size	.L.str97, 41

	.type	.L.str98,@object        # @.str98
.L.str98:
	.asciz	"Success.\n"
	.size	.L.str98, 10

	.type	.L.str99,@object        # @.str99
.L.str99:
	.asciz	"Error: %s\n"
	.size	.L.str99, 11

	.type	.L__FUNCTION__.legitimize_pic_address,@object # @__FUNCTION__.legitimize_pic_address
.L__FUNCTION__.legitimize_pic_address:
	.asciz	"legitimize_pic_address"
	.size	.L__FUNCTION__.legitimize_pic_address, 23

	.type	.L.str100,@object       # @.str100
.L.str100:
	.asciz	"\n==========\nLEGITIMIZE_ADDRESS, mode = %s\n"
	.size	.L.str100, 43

	.type	.L__FUNCTION__.print_reg,@object # @__FUNCTION__.print_reg
.L__FUNCTION__.print_reg:
	.asciz	"print_reg"
	.size	.L__FUNCTION__.print_reg, 10

	.type	.L.str102,@object       # @.str102
.L.str102:
	.asciz	"extended registers have no high halves"
	.size	.L.str102, 39

	.type	.L.str103,@object       # @.str103
.L.str103:
	.asciz	"r%ib"
	.size	.L.str103, 5

	.type	.L.str104,@object       # @.str104
.L.str104:
	.asciz	"r%iw"
	.size	.L.str104, 5

	.type	.L.str105,@object       # @.str105
.L.str105:
	.asciz	"r%id"
	.size	.L.str105, 5

	.type	.L.str106,@object       # @.str106
.L.str106:
	.asciz	"r%i"
	.size	.L.str106, 4

	.type	.L.str107,@object       # @.str107
.L.str107:
	.asciz	"unsupported operand size for extended register"
	.size	.L.str107, 47

	.type	.L.str108,@object       # @.str108
.L.str108:
	.asciz	"st(0)"
	.size	.L.str108, 6

	.type	hi_reg_name,@object     # @hi_reg_name
	.section	.rodata,"a",@progbits
	.align	16
hi_reg_name:
	.quad	.L.str417
	.quad	.L.str418
	.quad	.L.str419
	.quad	.L.str420
	.quad	.L.str421
	.quad	.L.str422
	.quad	.L.str423
	.quad	.L.str424
	.quad	.L.str425
	.quad	.L.str426
	.quad	.L.str427
	.quad	.L.str428
	.quad	.L.str429
	.quad	.L.str430
	.quad	.L.str431
	.quad	.L.str432
	.quad	.L.str
	.quad	.L.str433
	.quad	.L.str434
	.quad	.L.str435
	.quad	.L.str436
	.quad	.L.str437
	.quad	.L.str438
	.quad	.L.str439
	.quad	.L.str440
	.quad	.L.str441
	.quad	.L.str442
	.quad	.L.str443
	.quad	.L.str444
	.quad	.L.str445
	.quad	.L.str446
	.quad	.L.str447
	.quad	.L.str448
	.quad	.L.str449
	.quad	.L.str450
	.quad	.L.str451
	.quad	.L.str452
	.quad	.L.str453
	.quad	.L.str454
	.quad	.L.str455
	.quad	.L.str456
	.quad	.L.str457
	.quad	.L.str458
	.quad	.L.str459
	.quad	.L.str460
	.quad	.L.str461
	.quad	.L.str462
	.quad	.L.str463
	.quad	.L.str464
	.quad	.L.str465
	.quad	.L.str466
	.quad	.L.str467
	.quad	.L.str468
	.size	hi_reg_name, 424

	.type	qi_reg_name,@object     # @qi_reg_name
	.align	16
qi_reg_name:
	.quad	.L.str409
	.quad	.L.str410
	.quad	.L.str411
	.quad	.L.str412
	.quad	.L.str413
	.quad	.L.str414
	.quad	.L.str415
	.quad	.L.str416
	.size	qi_reg_name, 64

	.type	qi_high_reg_name,@object # @qi_high_reg_name
	.align	16
qi_high_reg_name:
	.quad	.L.str405
	.quad	.L.str406
	.quad	.L.str407
	.quad	.L.str408
	.size	qi_high_reg_name, 32

	.type	.L__FUNCTION__.print_operand,@object # @__FUNCTION__.print_operand
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__FUNCTION__.print_operand:
	.asciz	"print_operand"
	.size	.L__FUNCTION__.print_operand, 14

	.type	.L.str109,@object       # @.str109
.L.str109:
	.asciz	"eq"
	.size	.L.str109, 3

	.type	.L.str110,@object       # @.str110
.L.str110:
	.asciz	"lt"
	.size	.L.str110, 3

	.type	.L.str111,@object       # @.str111
.L.str111:
	.asciz	"le"
	.size	.L.str111, 3

	.type	.L.str112,@object       # @.str112
.L.str112:
	.asciz	"unord"
	.size	.L.str112, 6

	.type	.L.str113,@object       # @.str113
.L.str113:
	.asciz	"neq"
	.size	.L.str113, 4

	.type	.L.str114,@object       # @.str114
.L.str114:
	.asciz	"nlt"
	.size	.L.str114, 4

	.type	.L.str115,@object       # @.str115
.L.str115:
	.asciz	"nle"
	.size	.L.str115, 4

	.type	.L.str116,@object       # @.str116
.L.str116:
	.asciz	"ord"
	.size	.L.str116, 4

	.type	.L.str117,@object       # @.str117
.L.str117:
	.asciz	"operand is neither a constant nor a condition code, invalid operand code 'c'"
	.size	.L.str117, 77

	.type	.L.str118,@object       # @.str118
.L.str118:
	.asciz	"ds ; "
	.size	.L.str118, 6

	.type	.L.str119,@object       # @.str119
.L.str119:
	.asciz	"cs ; "
	.size	.L.str119, 6

	.type	.L.str120,@object       # @.str120
.L.str120:
	.asciz	"invalid operand code `%c'"
	.size	.L.str120, 26

	.type	.L.str121,@object       # @.str121
.L.str121:
	.asciz	"BYTE"
	.size	.L.str121, 5

	.type	.L.str122,@object       # @.str122
.L.str122:
	.asciz	"WORD"
	.size	.L.str122, 5

	.type	.L.str123,@object       # @.str123
.L.str123:
	.asciz	"DWORD"
	.size	.L.str123, 6

	.type	.L.str124,@object       # @.str124
.L.str124:
	.asciz	"QWORD"
	.size	.L.str124, 6

	.type	.L.str125,@object       # @.str125
.L.str125:
	.asciz	"XWORD"
	.size	.L.str125, 6

	.type	.L.str126,@object       # @.str126
.L.str126:
	.asciz	"XMMWORD"
	.size	.L.str126, 8

	.type	.L.str127,@object       # @.str127
.L.str127:
	.asciz	" PTR "
	.size	.L.str127, 6

	.type	.L.str128,@object       # @.str128
.L.str128:
	.asciz	"0x%lx"
	.size	.L.str128, 6

	.type	.L.str129,@object       # @.str129
.L.str129:
	.asciz	"OFFSET FLAT:"
	.size	.L.str129, 13

	.type	.L.str130,@object       # @.str130
.L.str130:
	.asciz	"%lld"
	.size	.L.str130, 5

	.type	.L__FUNCTION__.print_operand_address,@object # @__FUNCTION__.print_operand_address
.L__FUNCTION__.print_operand_address:
	.asciz	"print_operand_address"
	.size	.L__FUNCTION__.print_operand_address, 22

	.type	.L.str131,@object       # @.str131
.L.str131:
	.asciz	"ds:"
	.size	.L.str131, 4

	.type	.L.str132,@object       # @.str132
.L.str132:
	.asciz	"(%rip)"
	.size	.L.str132, 7

	.type	.L.str133,@object       # @.str133
.L.str133:
	.asciz	",%d"
	.size	.L.str133, 4

	.type	.L.str134,@object       # @.str134
.L.str134:
	.asciz	"*%d"
	.size	.L.str134, 4

	.type	output_387_binary_op.buf,@object # @output_387_binary_op.buf
	.local	output_387_binary_op.buf
	.comm	output_387_binary_op.buf,30,16
	.type	.L.str135,@object       # @.str135
.L.str135:
	.asciz	"fiadd"
	.size	.L.str135, 6

	.type	.L.str136,@object       # @.str136
.L.str136:
	.asciz	"fadd"
	.size	.L.str136, 5

	.type	.L.str137,@object       # @.str137
.L.str137:
	.asciz	"add"
	.size	.L.str137, 4

	.type	.L.str138,@object       # @.str138
.L.str138:
	.asciz	"fisub"
	.size	.L.str138, 6

	.type	.L.str139,@object       # @.str139
.L.str139:
	.asciz	"fsub"
	.size	.L.str139, 5

	.type	.L.str140,@object       # @.str140
.L.str140:
	.asciz	"sub"
	.size	.L.str140, 4

	.type	.L.str141,@object       # @.str141
.L.str141:
	.asciz	"fimul"
	.size	.L.str141, 6

	.type	.L.str142,@object       # @.str142
.L.str142:
	.asciz	"fmul"
	.size	.L.str142, 5

	.type	.L.str143,@object       # @.str143
.L.str143:
	.asciz	"mul"
	.size	.L.str143, 4

	.type	.L.str144,@object       # @.str144
.L.str144:
	.asciz	"fidiv"
	.size	.L.str144, 6

	.type	.L.str145,@object       # @.str145
.L.str145:
	.asciz	"fdiv"
	.size	.L.str145, 5

	.type	.L.str146,@object       # @.str146
.L.str146:
	.asciz	"div"
	.size	.L.str146, 4

	.type	.L__FUNCTION__.output_387_binary_op,@object # @__FUNCTION__.output_387_binary_op
.L__FUNCTION__.output_387_binary_op:
	.asciz	"output_387_binary_op"
	.size	.L__FUNCTION__.output_387_binary_op, 21

	.type	.L.str147,@object       # @.str147
.L.str147:
	.asciz	"ss\t{%2, %0|%0, %2}"
	.size	.L.str147, 19

	.type	.L.str148,@object       # @.str148
.L.str148:
	.asciz	"sd\t{%2, %0|%0, %2}"
	.size	.L.str148, 19

	.type	.L.str149,@object       # @.str149
.L.str149:
	.asciz	"%z2\t%2"
	.size	.L.str149, 7

	.type	.L.str150,@object       # @.str150
.L.str150:
	.asciz	"p\t{%0, %2|%2, %0}"
	.size	.L.str150, 18

	.type	.L.str151,@object       # @.str151
.L.str151:
	.asciz	"p\t{%2, %0|%0, %2}"
	.size	.L.str151, 18

	.type	.L.str152,@object       # @.str152
.L.str152:
	.asciz	"\t{%y2, %0|%0, %y2}"
	.size	.L.str152, 19

	.type	.L.str153,@object       # @.str153
.L.str153:
	.asciz	"\t{%2, %0|%0, %2}"
	.size	.L.str153, 17

	.type	.L.str154,@object       # @.str154
.L.str154:
	.asciz	"r%z1\t%1"
	.size	.L.str154, 8

	.type	.L.str155,@object       # @.str155
.L.str155:
	.asciz	"{p\t%0, %2|rp\t%2, %0}"
	.size	.L.str155, 21

	.type	.L.str156,@object       # @.str156
.L.str156:
	.asciz	"{rp\t%2, %0|p\t%0, %2}"
	.size	.L.str156, 21

	.type	.L.str157,@object       # @.str157
.L.str157:
	.asciz	"{rp\t%0, %1|p\t%1, %0}"
	.size	.L.str157, 21

	.type	.L.str158,@object       # @.str158
.L.str158:
	.asciz	"{p\t%1, %0|rp\t%0, %1}"
	.size	.L.str158, 21

	.type	.L.str159,@object       # @.str159
.L.str159:
	.asciz	"r\t{%y1, %0|%0, %y1}"
	.size	.L.str159, 20

	.type	.L.str160,@object       # @.str160
.L.str160:
	.asciz	"{\t%1, %0|r\t%0, %1}"
	.size	.L.str160, 19

	.type	.L.str161,@object       # @.str161
.L.str161:
	.asciz	"{r\t%2, %0|\t%0, %2}"
	.size	.L.str161, 19

	.type	.L.str162,@object       # @.str162
.L.str162:
	.asciz	"fld\t%y1"
	.size	.L.str162, 8

	.type	.L__FUNCTION__.output_fix_trunc,@object # @__FUNCTION__.output_fix_trunc
.L__FUNCTION__.output_fix_trunc:
	.asciz	"output_fix_trunc"
	.size	.L__FUNCTION__.output_fix_trunc, 17

	.type	.L.str163,@object       # @.str163
.L.str163:
	.asciz	"fldcw\t%3"
	.size	.L.str163, 9

	.type	.L.str164,@object       # @.str164
.L.str164:
	.asciz	"fistp%z0\t%0"
	.size	.L.str164, 12

	.type	.L.str165,@object       # @.str165
.L.str165:
	.asciz	"fist%z0\t%0"
	.size	.L.str165, 11

	.type	.L.str166,@object       # @.str166
.L.str166:
	.asciz	"fldcw\t%2"
	.size	.L.str166, 9

	.type	.L.str167,@object       # @.str167
.L.str167:
	.asciz	"ucomiss\t{%1, %0|%0, %1}"
	.size	.L.str167, 24

	.type	.L.str168,@object       # @.str168
.L.str168:
	.asciz	"comiss\t{%1, %0|%0, %y}"
	.size	.L.str168, 23

	.type	.L.str169,@object       # @.str169
.L.str169:
	.asciz	"ucomisd\t{%1, %0|%0, %1}"
	.size	.L.str169, 24

	.type	.L.str170,@object       # @.str170
.L.str170:
	.asciz	"comisd\t{%1, %0|%0, %y}"
	.size	.L.str170, 23

	.type	.L__FUNCTION__.output_fp_compare,@object # @__FUNCTION__.output_fp_compare
.L__FUNCTION__.output_fp_compare:
	.asciz	"output_fp_compare"
	.size	.L__FUNCTION__.output_fp_compare, 18

	.type	.L.str171,@object       # @.str171
.L.str171:
	.asciz	"fucomip\t{%y1, %0|%0, %y1}"
	.size	.L.str171, 26

	.type	.L.str172,@object       # @.str172
.L.str172:
	.asciz	"fcomip\t{%y1, %0|%0, %y1}"
	.size	.L.str172, 25

	.type	.L.str173,@object       # @.str173
.L.str173:
	.asciz	"fstp\t%y0"
	.size	.L.str173, 9

	.type	.L.str174,@object       # @.str174
.L.str174:
	.asciz	"fucompp\n\tfnstsw\t%0"
	.size	.L.str174, 19

	.type	.L.str175,@object       # @.str175
.L.str175:
	.asciz	"fcompp\n\tfnstsw\t%0"
	.size	.L.str175, 18

	.type	.L.str176,@object       # @.str176
.L.str176:
	.asciz	"fucompp"
	.size	.L.str176, 8

	.type	.L.str177,@object       # @.str177
.L.str177:
	.asciz	"fcompp"
	.size	.L.str177, 7

	.type	output_fp_compare.alt,@object # @output_fp_compare.alt
	.section	.rodata,"a",@progbits
	.align	16
output_fp_compare.alt:
	.quad	.L.str178
	.quad	.L.str179
	.quad	.L.str180
	.quad	.L.str181
	.quad	.L.str182
	.quad	.L.str183
	.quad	0
	.quad	0
	.quad	.L.str184
	.quad	.L.str172
	.quad	.L.str185
	.quad	.L.str171
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	.L.str186
	.quad	.L.str187
	.quad	.L.str188
	.quad	.L.str189
	.quad	.L.str190
	.quad	.L.str191
	.quad	0
	.quad	0
	.size	output_fp_compare.alt, 192

	.type	.L.str178,@object       # @.str178
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str178:
	.asciz	"fcom%z1\t%y1"
	.size	.L.str178, 12

	.type	.L.str179,@object       # @.str179
.L.str179:
	.asciz	"fcomp%z1\t%y1"
	.size	.L.str179, 13

	.type	.L.str180,@object       # @.str180
.L.str180:
	.asciz	"fucom%z1\t%y1"
	.size	.L.str180, 13

	.type	.L.str181,@object       # @.str181
.L.str181:
	.asciz	"fucomp%z1\t%y1"
	.size	.L.str181, 14

	.type	.L.str182,@object       # @.str182
.L.str182:
	.asciz	"ficom%z1\t%y1"
	.size	.L.str182, 13

	.type	.L.str183,@object       # @.str183
.L.str183:
	.asciz	"ficomp%z1\t%y1"
	.size	.L.str183, 14

	.type	.L.str184,@object       # @.str184
.L.str184:
	.asciz	"fcomi\t{%y1, %0|%0, %y1}"
	.size	.L.str184, 24

	.type	.L.str185,@object       # @.str185
.L.str185:
	.asciz	"fucomi\t{%y1, %0|%0, %y1}"
	.size	.L.str185, 25

	.type	.L.str186,@object       # @.str186
.L.str186:
	.asciz	"fcom%z2\t%y2\n\tfnstsw\t%0"
	.size	.L.str186, 23

	.type	.L.str187,@object       # @.str187
.L.str187:
	.asciz	"fcomp%z2\t%y2\n\tfnstsw\t%0"
	.size	.L.str187, 24

	.type	.L.str188,@object       # @.str188
.L.str188:
	.asciz	"fucom%z2\t%y2\n\tfnstsw\t%0"
	.size	.L.str188, 24

	.type	.L.str189,@object       # @.str189
.L.str189:
	.asciz	"fucomp%z2\t%y2\n\tfnstsw\t%0"
	.size	.L.str189, 25

	.type	.L.str190,@object       # @.str190
.L.str190:
	.asciz	"ficom%z2\t%y2\n\tfnstsw\t%0"
	.size	.L.str190, 24

	.type	.L.str191,@object       # @.str191
.L.str191:
	.asciz	"ficomp%z2\t%y2\n\tfnstsw\t%0"
	.size	.L.str191, 25

	.type	.L.str192,@object       # @.str192
.L.str192:
	.asciz	"%s%s%d\n"
	.size	.L.str192, 8

	.type	.L.str193,@object       # @.str193
.L.str193:
	.asciz	".L"
	.size	.L.str193, 3

	.type	.L.str194,@object       # @.str194
.L.str194:
	.asciz	"%s%s%d-.+(.-%s%d)\n"
	.size	.L.str194, 19

	.type	.L.str195,@object       # @.str195
.L.str195:
	.asciz	"%s%U_GLOBAL_OFFSET_TABLE_+[.-%s%d]\n"
	.size	.L.str195, 36

	.type	.L__FUNCTION__.ix86_expand_clear,@object # @__FUNCTION__.ix86_expand_clear
.L__FUNCTION__.ix86_expand_clear:
	.asciz	"ix86_expand_clear"
	.size	.L__FUNCTION__.ix86_expand_clear, 18

	.type	.L__FUNCTION__.ix86_expand_binary_operator,@object # @__FUNCTION__.ix86_expand_binary_operator
.L__FUNCTION__.ix86_expand_binary_operator:
	.asciz	"ix86_expand_binary_operator"
	.size	.L__FUNCTION__.ix86_expand_binary_operator, 28

	.type	.L__FUNCTION__.ix86_expand_unary_operator,@object # @__FUNCTION__.ix86_expand_unary_operator
.L__FUNCTION__.ix86_expand_unary_operator:
	.asciz	"ix86_expand_unary_operator"
	.size	.L__FUNCTION__.ix86_expand_unary_operator, 27

	.type	.L__FUNCTION__.ix86_match_ccmode,@object # @__FUNCTION__.ix86_match_ccmode
.L__FUNCTION__.ix86_match_ccmode:
	.asciz	"ix86_match_ccmode"
	.size	.L__FUNCTION__.ix86_match_ccmode, 18

	.type	.L__FUNCTION__.ix86_cc_mode,@object # @__FUNCTION__.ix86_cc_mode
.L__FUNCTION__.ix86_cc_mode:
	.asciz	"ix86_cc_mode"
	.size	.L__FUNCTION__.ix86_cc_mode, 13

	.type	.L__FUNCTION__.ix86_expand_branch,@object # @__FUNCTION__.ix86_expand_branch
.L__FUNCTION__.ix86_expand_branch:
	.asciz	"ix86_expand_branch"
	.size	.L__FUNCTION__.ix86_expand_branch, 19

	.type	.L__FUNCTION__.ix86_expand_setcc,@object # @__FUNCTION__.ix86_expand_setcc
.L__FUNCTION__.ix86_expand_setcc:
	.asciz	"ix86_expand_setcc"
	.size	.L__FUNCTION__.ix86_expand_setcc, 18

	.type	.L__FUNCTION__.ix86_expand_fp_movcc,@object # @__FUNCTION__.ix86_expand_fp_movcc
.L__FUNCTION__.ix86_expand_fp_movcc:
	.asciz	"ix86_expand_fp_movcc"
	.size	.L__FUNCTION__.ix86_expand_fp_movcc, 21

	.type	.L__FUNCTION__.ix86_split_long_move,@object # @__FUNCTION__.ix86_split_long_move
.L__FUNCTION__.ix86_split_long_move:
	.asciz	"ix86_split_long_move"
	.size	.L__FUNCTION__.ix86_split_long_move, 21

	.type	.L__FUNCTION__.assign_386_stack_local,@object # @__FUNCTION__.assign_386_stack_local
.L__FUNCTION__.assign_386_stack_local:
	.asciz	"assign_386_stack_local"
	.size	.L__FUNCTION__.assign_386_stack_local, 23

	.type	.L__FUNCTION__.ix86_attr_length_immediate_default,@object # @__FUNCTION__.ix86_attr_length_immediate_default
.L__FUNCTION__.ix86_attr_length_immediate_default:
	.asciz	"ix86_attr_length_immediate_default"
	.size	.L__FUNCTION__.ix86_attr_length_immediate_default, 35

	.type	.L.str196,@object       # @.str196
.L.str196:
	.asciz	"unknown insn mode"
	.size	.L.str196, 18

	.type	.L__FUNCTION__.x86_initialize_trampoline,@object # @__FUNCTION__.x86_initialize_trampoline
.L__FUNCTION__.x86_initialize_trampoline:
	.asciz	"x86_initialize_trampoline"
	.size	.L__FUNCTION__.x86_initialize_trampoline, 26

	.type	.L.str197,@object       # @.str197
.L.str197:
	.asciz	"selector must be an immediate"
	.size	.L.str197, 30

	.type	.L.str198,@object       # @.str198
.L.str198:
	.asciz	"mask must be an immediate"
	.size	.L.str198, 26

	.type	.L__FUNCTION__.ix86_force_to_memory,@object # @__FUNCTION__.ix86_force_to_memory
.L__FUNCTION__.ix86_force_to_memory:
	.asciz	"ix86_force_to_memory"
	.size	.L__FUNCTION__.ix86_force_to_memory, 21

	.type	.L__FUNCTION__.ix86_secondary_memory_needed,@object # @__FUNCTION__.ix86_secondary_memory_needed
.L__FUNCTION__.ix86_secondary_memory_needed:
	.asciz	"ix86_secondary_memory_needed"
	.size	.L__FUNCTION__.ix86_secondary_memory_needed, 29

	.type	.L.str199,@object       # @.str199
.L.str199:
	.asciz	"add{q} {%0, %1|%1, %0}"
	.size	.L.str199, 23

	.type	.L.str200,@object       # @.str200
.L.str200:
	.asciz	"\tjmp *"
	.size	.L.str200, 7

	.type	.L.str201,@object       # @.str201
.L.str201:
	.asciz	"@GOTPCREL(%%rip)\n"
	.size	.L.str201, 18

	.type	.L.str202,@object       # @.str202
.L.str202:
	.asciz	"\tjmp "
	.size	.L.str202, 6

	.type	.L.str204,@object       # @.str204
.L.str204:
	.asciz	"add{l} {%0, %1|%1, %0}"
	.size	.L.str204, 23

	.type	.L__FUNCTION__.x86_output_mi_thunk,@object # @__FUNCTION__.x86_output_mi_thunk
.L__FUNCTION__.x86_output_mi_thunk:
	.asciz	"x86_output_mi_thunk"
	.size	.L__FUNCTION__.x86_output_mi_thunk, 20

	.type	.L.str205,@object       # @.str205
.L.str205:
	.asciz	"push{l}\t%0"
	.size	.L.str205, 11

	.type	.L.str206,@object       # @.str206
.L.str206:
	.asciz	"call\t%P1"
	.size	.L.str206, 9

	.type	.L.str207,@object       # @.str207
.L.str207:
	.asciz	".%s%u:\n"
	.size	.L.str207, 8

	.type	.L.str208,@object       # @.str208
.L.str208:
	.asciz	"L"
	.size	.L.str208, 2

	.type	.L.str209,@object       # @.str209
.L.str209:
	.asciz	"pop{l}\t%0"
	.size	.L.str209, 10

	.type	.L.str210,@object       # @.str210
.L.str210:
	.asciz	"add{l}\t{%2+[.-%P1], %0|%0, OFFSET FLAT: %2+[.-%P1]}"
	.size	.L.str210, 52

	.type	.L.str211,@object       # @.str211
.L.str211:
	.asciz	"mov{l}\t{%0@GOT(%%ebx), %%ecx|%%ecx, %0@GOT[%%ebx]}"
	.size	.L.str211, 51

	.type	.L.str212,@object       # @.str212
.L.str212:
	.asciz	"\tpop{l\t%%ebx|\t%%ebx}\n"
	.size	.L.str212, 22

	.type	.L.str213,@object       # @.str213
.L.str213:
	.asciz	"\tjmp\t{*%%ecx|%%ecx}\n"
	.size	.L.str213, 21

	.type	.L.str214,@object       # @.str214
.L.str214:
	.asciz	"__builtin_ia32_comieq"
	.size	.L.str214, 22

	.type	.L.str215,@object       # @.str215
.L.str215:
	.asciz	"__builtin_ia32_comilt"
	.size	.L.str215, 22

	.type	.L.str216,@object       # @.str216
.L.str216:
	.asciz	"__builtin_ia32_comile"
	.size	.L.str216, 22

	.type	.L.str217,@object       # @.str217
.L.str217:
	.asciz	"__builtin_ia32_comigt"
	.size	.L.str217, 22

	.type	.L.str218,@object       # @.str218
.L.str218:
	.asciz	"__builtin_ia32_comige"
	.size	.L.str218, 22

	.type	.L.str219,@object       # @.str219
.L.str219:
	.asciz	"__builtin_ia32_comineq"
	.size	.L.str219, 23

	.type	.L.str220,@object       # @.str220
.L.str220:
	.asciz	"__builtin_ia32_ucomieq"
	.size	.L.str220, 23

	.type	.L.str221,@object       # @.str221
.L.str221:
	.asciz	"__builtin_ia32_ucomilt"
	.size	.L.str221, 23

	.type	.L.str222,@object       # @.str222
.L.str222:
	.asciz	"__builtin_ia32_ucomile"
	.size	.L.str222, 23

	.type	.L.str223,@object       # @.str223
.L.str223:
	.asciz	"__builtin_ia32_ucomigt"
	.size	.L.str223, 23

	.type	.L.str224,@object       # @.str224
.L.str224:
	.asciz	"__builtin_ia32_ucomige"
	.size	.L.str224, 23

	.type	.L.str225,@object       # @.str225
.L.str225:
	.asciz	"__builtin_ia32_ucomineq"
	.size	.L.str225, 24

	.type	bdesc_comi,@object      # @bdesc_comi
	.section	.rodata,"a",@progbits
	.align	16
bdesc_comi:
	.long	65536                   # 0x10000
	.long	731                     # 0x2db
	.quad	.L.str214
	.long	34                      # 0x22
	.long	103                     # 0x67
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	731                     # 0x2db
	.quad	.L.str215
	.long	35                      # 0x23
	.long	107                     # 0x6b
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	731                     # 0x2db
	.quad	.L.str216
	.long	36                      # 0x24
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	731                     # 0x2db
	.quad	.L.str217
	.long	37                      # 0x25
	.long	107                     # 0x6b
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	731                     # 0x2db
	.quad	.L.str218
	.long	38                      # 0x26
	.long	106                     # 0x6a
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	731                     # 0x2db
	.quad	.L.str219
	.long	39                      # 0x27
	.long	102                     # 0x66
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	732                     # 0x2dc
	.quad	.L.str220
	.long	40                      # 0x28
	.long	103                     # 0x67
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	732                     # 0x2dc
	.quad	.L.str221
	.long	41                      # 0x29
	.long	107                     # 0x6b
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	732                     # 0x2dc
	.quad	.L.str222
	.long	42                      # 0x2a
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	732                     # 0x2dc
	.quad	.L.str223
	.long	43                      # 0x2b
	.long	107                     # 0x6b
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	732                     # 0x2dc
	.quad	.L.str224
	.long	44                      # 0x2c
	.long	106                     # 0x6a
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	732                     # 0x2dc
	.quad	.L.str225
	.long	45                      # 0x2d
	.long	102                     # 0x66
	.long	0                       # 0x0
	.zero	4
	.size	bdesc_comi, 384

	.type	bdesc_1arg,@object      # @bdesc_1arg
	.align	16
bdesc_1arg:
	.long	4259840                 # 0x410000
	.long	677                     # 0x2a5
	.quad	0
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	676                     # 0x2a4
	.quad	0
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	702                     # 0x2be
	.quad	0
	.long	142                     # 0x8e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	700                     # 0x2bc
	.quad	0
	.long	140                     # 0x8c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	698                     # 0x2ba
	.quad	0
	.long	138                     # 0x8a
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	740                     # 0x2e4
	.quad	0
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	743                     # 0x2e7
	.quad	0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	741                     # 0x2e5
	.quad	0
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	744                     # 0x2e8
	.quad	0
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.size	bdesc_1arg, 288

	.type	.L.str226,@object       # @.str226
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str226:
	.asciz	"__builtin_ia32_addps"
	.size	.L.str226, 21

	.type	.L.str227,@object       # @.str227
.L.str227:
	.asciz	"__builtin_ia32_subps"
	.size	.L.str227, 21

	.type	.L.str228,@object       # @.str228
.L.str228:
	.asciz	"__builtin_ia32_mulps"
	.size	.L.str228, 21

	.type	.L.str229,@object       # @.str229
.L.str229:
	.asciz	"__builtin_ia32_divps"
	.size	.L.str229, 21

	.type	.L.str230,@object       # @.str230
.L.str230:
	.asciz	"__builtin_ia32_addss"
	.size	.L.str230, 21

	.type	.L.str231,@object       # @.str231
.L.str231:
	.asciz	"__builtin_ia32_subss"
	.size	.L.str231, 21

	.type	.L.str232,@object       # @.str232
.L.str232:
	.asciz	"__builtin_ia32_mulss"
	.size	.L.str232, 21

	.type	.L.str233,@object       # @.str233
.L.str233:
	.asciz	"__builtin_ia32_divss"
	.size	.L.str233, 21

	.type	.L.str234,@object       # @.str234
.L.str234:
	.asciz	"__builtin_ia32_cmpeqps"
	.size	.L.str234, 23

	.type	.L.str235,@object       # @.str235
.L.str235:
	.asciz	"__builtin_ia32_cmpltps"
	.size	.L.str235, 23

	.type	.L.str236,@object       # @.str236
.L.str236:
	.asciz	"__builtin_ia32_cmpleps"
	.size	.L.str236, 23

	.type	.L.str237,@object       # @.str237
.L.str237:
	.asciz	"__builtin_ia32_cmpgtps"
	.size	.L.str237, 23

	.type	.L.str238,@object       # @.str238
.L.str238:
	.asciz	"__builtin_ia32_cmpgeps"
	.size	.L.str238, 23

	.type	.L.str239,@object       # @.str239
.L.str239:
	.asciz	"__builtin_ia32_cmpunordps"
	.size	.L.str239, 26

	.type	.L.str240,@object       # @.str240
.L.str240:
	.asciz	"__builtin_ia32_cmpneqps"
	.size	.L.str240, 24

	.type	.L.str241,@object       # @.str241
.L.str241:
	.asciz	"__builtin_ia32_cmpnltps"
	.size	.L.str241, 24

	.type	.L.str242,@object       # @.str242
.L.str242:
	.asciz	"__builtin_ia32_cmpnleps"
	.size	.L.str242, 24

	.type	.L.str243,@object       # @.str243
.L.str243:
	.asciz	"__builtin_ia32_cmpngtps"
	.size	.L.str243, 24

	.type	.L.str244,@object       # @.str244
.L.str244:
	.asciz	"__builtin_ia32_cmpngeps"
	.size	.L.str244, 24

	.type	.L.str245,@object       # @.str245
.L.str245:
	.asciz	"__builtin_ia32_cmpordps"
	.size	.L.str245, 24

	.type	.L.str246,@object       # @.str246
.L.str246:
	.asciz	"__builtin_ia32_cmpeqss"
	.size	.L.str246, 23

	.type	.L.str247,@object       # @.str247
.L.str247:
	.asciz	"__builtin_ia32_cmpltss"
	.size	.L.str247, 23

	.type	.L.str248,@object       # @.str248
.L.str248:
	.asciz	"__builtin_ia32_cmpless"
	.size	.L.str248, 23

	.type	.L.str249,@object       # @.str249
.L.str249:
	.asciz	"__builtin_ia32_cmpgtss"
	.size	.L.str249, 23

	.type	.L.str250,@object       # @.str250
.L.str250:
	.asciz	"__builtin_ia32_cmpgess"
	.size	.L.str250, 23

	.type	.L.str251,@object       # @.str251
.L.str251:
	.asciz	"__builtin_ia32_cmpunordss"
	.size	.L.str251, 26

	.type	.L.str252,@object       # @.str252
.L.str252:
	.asciz	"__builtin_ia32_cmpneqss"
	.size	.L.str252, 24

	.type	.L.str253,@object       # @.str253
.L.str253:
	.asciz	"__builtin_ia32_cmpnltss"
	.size	.L.str253, 24

	.type	.L.str254,@object       # @.str254
.L.str254:
	.asciz	"__builtin_ia32_cmpnless"
	.size	.L.str254, 24

	.type	.L.str255,@object       # @.str255
.L.str255:
	.asciz	"__builtin_ia32_cmpngtss"
	.size	.L.str255, 24

	.type	.L.str256,@object       # @.str256
.L.str256:
	.asciz	"__builtin_ia32_cmpngess"
	.size	.L.str256, 24

	.type	.L.str257,@object       # @.str257
.L.str257:
	.asciz	"__builtin_ia32_cmpordss"
	.size	.L.str257, 24

	.type	.L.str258,@object       # @.str258
.L.str258:
	.asciz	"__builtin_ia32_minps"
	.size	.L.str258, 21

	.type	.L.str259,@object       # @.str259
.L.str259:
	.asciz	"__builtin_ia32_maxps"
	.size	.L.str259, 21

	.type	.L.str260,@object       # @.str260
.L.str260:
	.asciz	"__builtin_ia32_minss"
	.size	.L.str260, 21

	.type	.L.str261,@object       # @.str261
.L.str261:
	.asciz	"__builtin_ia32_maxss"
	.size	.L.str261, 21

	.type	.L.str262,@object       # @.str262
.L.str262:
	.asciz	"__builtin_ia32_movss"
	.size	.L.str262, 21

	.type	.L.str263,@object       # @.str263
.L.str263:
	.asciz	"__builtin_ia32_movhlps"
	.size	.L.str263, 23

	.type	.L.str264,@object       # @.str264
.L.str264:
	.asciz	"__builtin_ia32_movlhps"
	.size	.L.str264, 23

	.type	.L.str265,@object       # @.str265
.L.str265:
	.asciz	"__builtin_ia32_unpckhps"
	.size	.L.str265, 24

	.type	.L.str266,@object       # @.str266
.L.str266:
	.asciz	"__builtin_ia32_unpcklps"
	.size	.L.str266, 24

	.type	.L.str267,@object       # @.str267
.L.str267:
	.asciz	"__builtin_ia32_paddb"
	.size	.L.str267, 21

	.type	.L.str268,@object       # @.str268
.L.str268:
	.asciz	"__builtin_ia32_paddw"
	.size	.L.str268, 21

	.type	.L.str269,@object       # @.str269
.L.str269:
	.asciz	"__builtin_ia32_paddd"
	.size	.L.str269, 21

	.type	.L.str270,@object       # @.str270
.L.str270:
	.asciz	"__builtin_ia32_psubb"
	.size	.L.str270, 21

	.type	.L.str271,@object       # @.str271
.L.str271:
	.asciz	"__builtin_ia32_psubw"
	.size	.L.str271, 21

	.type	.L.str272,@object       # @.str272
.L.str272:
	.asciz	"__builtin_ia32_psubd"
	.size	.L.str272, 21

	.type	.L.str273,@object       # @.str273
.L.str273:
	.asciz	"__builtin_ia32_paddsb"
	.size	.L.str273, 22

	.type	.L.str274,@object       # @.str274
.L.str274:
	.asciz	"__builtin_ia32_paddsw"
	.size	.L.str274, 22

	.type	.L.str275,@object       # @.str275
.L.str275:
	.asciz	"__builtin_ia32_psubsb"
	.size	.L.str275, 22

	.type	.L.str276,@object       # @.str276
.L.str276:
	.asciz	"__builtin_ia32_psubsw"
	.size	.L.str276, 22

	.type	.L.str277,@object       # @.str277
.L.str277:
	.asciz	"__builtin_ia32_paddusb"
	.size	.L.str277, 23

	.type	.L.str278,@object       # @.str278
.L.str278:
	.asciz	"__builtin_ia32_paddusw"
	.size	.L.str278, 23

	.type	.L.str279,@object       # @.str279
.L.str279:
	.asciz	"__builtin_ia32_psubusb"
	.size	.L.str279, 23

	.type	.L.str280,@object       # @.str280
.L.str280:
	.asciz	"__builtin_ia32_psubusw"
	.size	.L.str280, 23

	.type	.L.str281,@object       # @.str281
.L.str281:
	.asciz	"__builtin_ia32_pmullw"
	.size	.L.str281, 22

	.type	.L.str282,@object       # @.str282
.L.str282:
	.asciz	"__builtin_ia32_pmulhw"
	.size	.L.str282, 22

	.type	.L.str283,@object       # @.str283
.L.str283:
	.asciz	"__builtin_ia32_pmulhuw"
	.size	.L.str283, 23

	.type	.L.str284,@object       # @.str284
.L.str284:
	.asciz	"__builtin_ia32_pand"
	.size	.L.str284, 20

	.type	.L.str285,@object       # @.str285
.L.str285:
	.asciz	"__builtin_ia32_pandn"
	.size	.L.str285, 21

	.type	.L.str286,@object       # @.str286
.L.str286:
	.asciz	"__builtin_ia32_por"
	.size	.L.str286, 19

	.type	.L.str287,@object       # @.str287
.L.str287:
	.asciz	"__builtin_ia32_pxor"
	.size	.L.str287, 20

	.type	.L.str288,@object       # @.str288
.L.str288:
	.asciz	"__builtin_ia32_pavgb"
	.size	.L.str288, 21

	.type	.L.str289,@object       # @.str289
.L.str289:
	.asciz	"__builtin_ia32_pavgw"
	.size	.L.str289, 21

	.type	.L.str290,@object       # @.str290
.L.str290:
	.asciz	"__builtin_ia32_pcmpeqb"
	.size	.L.str290, 23

	.type	.L.str291,@object       # @.str291
.L.str291:
	.asciz	"__builtin_ia32_pcmpeqw"
	.size	.L.str291, 23

	.type	.L.str292,@object       # @.str292
.L.str292:
	.asciz	"__builtin_ia32_pcmpeqd"
	.size	.L.str292, 23

	.type	.L.str293,@object       # @.str293
.L.str293:
	.asciz	"__builtin_ia32_pcmpgtb"
	.size	.L.str293, 23

	.type	.L.str294,@object       # @.str294
.L.str294:
	.asciz	"__builtin_ia32_pcmpgtw"
	.size	.L.str294, 23

	.type	.L.str295,@object       # @.str295
.L.str295:
	.asciz	"__builtin_ia32_pcmpgtd"
	.size	.L.str295, 23

	.type	.L.str296,@object       # @.str296
.L.str296:
	.asciz	"__builtin_ia32_pmaxub"
	.size	.L.str296, 22

	.type	.L.str297,@object       # @.str297
.L.str297:
	.asciz	"__builtin_ia32_pmaxsw"
	.size	.L.str297, 22

	.type	.L.str298,@object       # @.str298
.L.str298:
	.asciz	"__builtin_ia32_pminub"
	.size	.L.str298, 22

	.type	.L.str299,@object       # @.str299
.L.str299:
	.asciz	"__builtin_ia32_pminsw"
	.size	.L.str299, 22

	.type	.L.str300,@object       # @.str300
.L.str300:
	.asciz	"__builtin_ia32_punpckhbw"
	.size	.L.str300, 25

	.type	.L.str301,@object       # @.str301
.L.str301:
	.asciz	"__builtin_ia32_punpckhwd"
	.size	.L.str301, 25

	.type	.L.str302,@object       # @.str302
.L.str302:
	.asciz	"__builtin_ia32_punpckhdq"
	.size	.L.str302, 25

	.type	.L.str303,@object       # @.str303
.L.str303:
	.asciz	"__builtin_ia32_punpcklbw"
	.size	.L.str303, 25

	.type	.L.str304,@object       # @.str304
.L.str304:
	.asciz	"__builtin_ia32_punpcklwd"
	.size	.L.str304, 25

	.type	.L.str305,@object       # @.str305
.L.str305:
	.asciz	"__builtin_ia32_punpckldq"
	.size	.L.str305, 25

	.type	bdesc_2arg,@object      # @bdesc_2arg
	.section	.rodata,"a",@progbits
	.align	16
bdesc_2arg:
	.long	65536                   # 0x10000
	.long	690                     # 0x2b2
	.quad	.L.str226
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	692                     # 0x2b4
	.quad	.L.str227
	.long	6                       # 0x6
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	694                     # 0x2b6
	.quad	.L.str228
	.long	4                       # 0x4
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	696                     # 0x2b8
	.quad	.L.str229
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	691                     # 0x2b3
	.quad	.L.str230
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	693                     # 0x2b5
	.quad	.L.str231
	.long	7                       # 0x7
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	695                     # 0x2b7
	.quad	.L.str232
	.long	5                       # 0x5
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	697                     # 0x2b9
	.quad	.L.str233
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	727                     # 0x2d7
	.quad	.L.str234
	.long	8                       # 0x8
	.long	103                     # 0x67
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	727                     # 0x2d7
	.quad	.L.str235
	.long	9                       # 0x9
	.long	107                     # 0x6b
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	727                     # 0x2d7
	.quad	.L.str236
	.long	10                      # 0xa
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	727                     # 0x2d7
	.quad	.L.str237
	.long	11                      # 0xb
	.long	107                     # 0x6b
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	727                     # 0x2d7
	.quad	.L.str238
	.long	12                      # 0xc
	.long	106                     # 0x6a
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	727                     # 0x2d7
	.quad	.L.str239
	.long	19                      # 0x13
	.long	112                     # 0x70
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	728                     # 0x2d8
	.quad	.L.str240
	.long	13                      # 0xd
	.long	103                     # 0x67
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	728                     # 0x2d8
	.quad	.L.str241
	.long	14                      # 0xe
	.long	107                     # 0x6b
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	728                     # 0x2d8
	.quad	.L.str242
	.long	15                      # 0xf
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	728                     # 0x2d8
	.quad	.L.str243
	.long	16                      # 0x10
	.long	107                     # 0x6b
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	728                     # 0x2d8
	.quad	.L.str244
	.long	17                      # 0x11
	.long	106                     # 0x6a
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	728                     # 0x2d8
	.quad	.L.str245
	.long	18                      # 0x12
	.long	112                     # 0x70
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	729                     # 0x2d9
	.quad	.L.str246
	.long	21                      # 0x15
	.long	103                     # 0x67
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	729                     # 0x2d9
	.quad	.L.str247
	.long	22                      # 0x16
	.long	107                     # 0x6b
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	729                     # 0x2d9
	.quad	.L.str248
	.long	23                      # 0x17
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	729                     # 0x2d9
	.quad	.L.str249
	.long	24                      # 0x18
	.long	107                     # 0x6b
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	729                     # 0x2d9
	.quad	.L.str250
	.long	25                      # 0x19
	.long	106                     # 0x6a
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	729                     # 0x2d9
	.quad	.L.str251
	.long	32                      # 0x20
	.long	112                     # 0x70
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	730                     # 0x2da
	.quad	.L.str252
	.long	26                      # 0x1a
	.long	103                     # 0x67
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	730                     # 0x2da
	.quad	.L.str253
	.long	27                      # 0x1b
	.long	107                     # 0x6b
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	730                     # 0x2da
	.quad	.L.str254
	.long	28                      # 0x1c
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	730                     # 0x2da
	.quad	.L.str255
	.long	29                      # 0x1d
	.long	107                     # 0x6b
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	730                     # 0x2da
	.quad	.L.str256
	.long	30                      # 0x1e
	.long	106                     # 0x6a
	.long	1                       # 0x1
	.zero	4
	.long	65536                   # 0x10000
	.long	730                     # 0x2da
	.quad	.L.str257
	.long	31                      # 0x1f
	.long	112                     # 0x70
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	737                     # 0x2e1
	.quad	.L.str258
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	735                     # 0x2df
	.quad	.L.str259
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	738                     # 0x2e2
	.quad	.L.str260
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	736                     # 0x2e0
	.quad	.L.str261
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	687                     # 0x2af
	.quad	.L.str262
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	682                     # 0x2aa
	.quad	.L.str263
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	683                     # 0x2ab
	.quad	.L.str264
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	733                     # 0x2dd
	.quad	.L.str265
	.long	144                     # 0x90
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	734                     # 0x2de
	.quad	.L.str266
	.long	145                     # 0x91
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	745                     # 0x2e9
	.quad	.L.str267
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	746                     # 0x2ea
	.quad	.L.str268
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	747                     # 0x2eb
	.quad	.L.str269
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	752                     # 0x2f0
	.quad	.L.str270
	.long	84                      # 0x54
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	753                     # 0x2f1
	.quad	.L.str271
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	754                     # 0x2f2
	.quad	.L.str272
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	748                     # 0x2ec
	.quad	.L.str273
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	749                     # 0x2ed
	.quad	.L.str274
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	755                     # 0x2f3
	.quad	.L.str275
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	756                     # 0x2f4
	.quad	.L.str276
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	750                     # 0x2ee
	.quad	.L.str277
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	751                     # 0x2ef
	.quad	.L.str278
	.long	83                      # 0x53
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	757                     # 0x2f5
	.quad	.L.str279
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	758                     # 0x2f6
	.quad	.L.str280
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	759                     # 0x2f7
	.quad	.L.str281
	.long	112                     # 0x70
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	760                     # 0x2f8
	.quad	.L.str282
	.long	111                     # 0x6f
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	4259840                 # 0x410000
	.long	761                     # 0x2f9
	.quad	.L.str283
	.long	110                     # 0x6e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	766                     # 0x2fe
	.quad	.L.str284
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	767                     # 0x2ff
	.quad	.L.str285
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	763                     # 0x2fb
	.quad	.L.str286
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	764                     # 0x2fc
	.quad	.L.str287
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	4259840                 # 0x410000
	.long	768                     # 0x300
	.quad	.L.str288
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	4259840                 # 0x410000
	.long	769                     # 0x301
	.quad	.L.str289
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	774                     # 0x306
	.quad	.L.str290
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	775                     # 0x307
	.quad	.L.str291
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	776                     # 0x308
	.quad	.L.str292
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	777                     # 0x309
	.quad	.L.str293
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	778                     # 0x30a
	.quad	.L.str294
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	779                     # 0x30b
	.quad	.L.str295
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	4259840                 # 0x410000
	.long	780                     # 0x30c
	.quad	.L.str296
	.long	107                     # 0x6b
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	4259840                 # 0x410000
	.long	781                     # 0x30d
	.quad	.L.str297
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	4259840                 # 0x410000
	.long	782                     # 0x30e
	.quad	.L.str298
	.long	109                     # 0x6d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	4259840                 # 0x410000
	.long	783                     # 0x30f
	.quad	.L.str299
	.long	108                     # 0x6c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	795                     # 0x31b
	.quad	.L.str300
	.long	131                     # 0x83
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	796                     # 0x31c
	.quad	.L.str301
	.long	132                     # 0x84
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	797                     # 0x31d
	.quad	.L.str302
	.long	133                     # 0x85
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	798                     # 0x31e
	.quad	.L.str303
	.long	134                     # 0x86
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	799                     # 0x31f
	.quad	.L.str304
	.long	135                     # 0x87
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	800                     # 0x320
	.quad	.L.str305
	.long	136                     # 0x88
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	792                     # 0x318
	.quad	0
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	793                     # 0x319
	.quad	0
	.long	75                      # 0x4b
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	794                     # 0x31a
	.quad	0
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	739                     # 0x2e3
	.quad	0
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	65536                   # 0x10000
	.long	742                     # 0x2e6
	.quad	0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	789                     # 0x315
	.quad	0
	.long	115                     # 0x73
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	789                     # 0x315
	.quad	0
	.long	123                     # 0x7b
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	790                     # 0x316
	.quad	0
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	790                     # 0x316
	.quad	0
	.long	124                     # 0x7c
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	791                     # 0x317
	.quad	0
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	791                     # 0x317
	.quad	0
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	786                     # 0x312
	.quad	0
	.long	120                     # 0x78
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	786                     # 0x312
	.quad	0
	.long	128                     # 0x80
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	787                     # 0x313
	.quad	0
	.long	121                     # 0x79
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	787                     # 0x313
	.quad	0
	.long	129                     # 0x81
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	788                     # 0x314
	.quad	0
	.long	122                     # 0x7a
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	788                     # 0x314
	.quad	0
	.long	130                     # 0x82
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	784                     # 0x310
	.quad	0
	.long	118                     # 0x76
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	784                     # 0x310
	.quad	0
	.long	126                     # 0x7e
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	785                     # 0x311
	.quad	0
	.long	119                     # 0x77
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	785                     # 0x311
	.quad	0
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	4259840                 # 0x410000
	.long	770                     # 0x302
	.quad	0
	.long	113                     # 0x71
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.long	16384                   # 0x4000
	.long	762                     # 0x2fa
	.quad	0
	.long	105                     # 0x69
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	4
	.size	bdesc_2arg, 3296

	.type	.L__FUNCTION__.ix86_expand_binop_builtin,@object # @__FUNCTION__.ix86_expand_binop_builtin
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__FUNCTION__.ix86_expand_binop_builtin:
	.asciz	"ix86_expand_binop_builtin"
	.size	.L__FUNCTION__.ix86_expand_binop_builtin, 26

	.type	.L__FUNCTION__.ix86_init_mmx_sse_builtins,@object # @__FUNCTION__.ix86_init_mmx_sse_builtins
.L__FUNCTION__.ix86_init_mmx_sse_builtins:
	.asciz	"ix86_init_mmx_sse_builtins"
	.size	.L__FUNCTION__.ix86_init_mmx_sse_builtins, 27

	.type	.L.str306,@object       # @.str306
.L.str306:
	.asciz	"__builtin_ia32_mmx_zero"
	.size	.L.str306, 24

	.type	.L.str307,@object       # @.str307
.L.str307:
	.asciz	"__builtin_ia32_emms"
	.size	.L.str307, 20

	.type	.L.str308,@object       # @.str308
.L.str308:
	.asciz	"__builtin_ia32_ldmxcsr"
	.size	.L.str308, 23

	.type	.L.str309,@object       # @.str309
.L.str309:
	.asciz	"__builtin_ia32_stmxcsr"
	.size	.L.str309, 23

	.type	.L.str310,@object       # @.str310
.L.str310:
	.asciz	"__builtin_ia32_psllw"
	.size	.L.str310, 21

	.type	.L.str311,@object       # @.str311
.L.str311:
	.asciz	"__builtin_ia32_pslld"
	.size	.L.str311, 21

	.type	.L.str312,@object       # @.str312
.L.str312:
	.asciz	"__builtin_ia32_psllq"
	.size	.L.str312, 21

	.type	.L.str313,@object       # @.str313
.L.str313:
	.asciz	"__builtin_ia32_psrlw"
	.size	.L.str313, 21

	.type	.L.str314,@object       # @.str314
.L.str314:
	.asciz	"__builtin_ia32_psrld"
	.size	.L.str314, 21

	.type	.L.str315,@object       # @.str315
.L.str315:
	.asciz	"__builtin_ia32_psrlq"
	.size	.L.str315, 21

	.type	.L.str316,@object       # @.str316
.L.str316:
	.asciz	"__builtin_ia32_psraw"
	.size	.L.str316, 21

	.type	.L.str317,@object       # @.str317
.L.str317:
	.asciz	"__builtin_ia32_psrad"
	.size	.L.str317, 21

	.type	.L.str318,@object       # @.str318
.L.str318:
	.asciz	"__builtin_ia32_pshufw"
	.size	.L.str318, 22

	.type	.L.str319,@object       # @.str319
.L.str319:
	.asciz	"__builtin_ia32_pmaddwd"
	.size	.L.str319, 23

	.type	.L.str320,@object       # @.str320
.L.str320:
	.asciz	"__builtin_ia32_packsswb"
	.size	.L.str320, 24

	.type	.L.str321,@object       # @.str321
.L.str321:
	.asciz	"__builtin_ia32_packssdw"
	.size	.L.str321, 24

	.type	.L.str322,@object       # @.str322
.L.str322:
	.asciz	"__builtin_ia32_packuswb"
	.size	.L.str322, 24

	.type	.L.str323,@object       # @.str323
.L.str323:
	.asciz	"__builtin_ia32_cvtpi2ps"
	.size	.L.str323, 24

	.type	.L.str324,@object       # @.str324
.L.str324:
	.asciz	"__builtin_ia32_cvtps2pi"
	.size	.L.str324, 24

	.type	.L.str325,@object       # @.str325
.L.str325:
	.asciz	"__builtin_ia32_cvtsi2ss"
	.size	.L.str325, 24

	.type	.L.str326,@object       # @.str326
.L.str326:
	.asciz	"__builtin_ia32_cvtss2si"
	.size	.L.str326, 24

	.type	.L.str327,@object       # @.str327
.L.str327:
	.asciz	"__builtin_ia32_cvttps2pi"
	.size	.L.str327, 25

	.type	.L.str328,@object       # @.str328
.L.str328:
	.asciz	"__builtin_ia32_cvttss2si"
	.size	.L.str328, 25

	.type	.L.str329,@object       # @.str329
.L.str329:
	.asciz	"__builtin_ia32_andps"
	.size	.L.str329, 21

	.type	.L.str330,@object       # @.str330
.L.str330:
	.asciz	"__builtin_ia32_andnps"
	.size	.L.str330, 22

	.type	.L.str331,@object       # @.str331
.L.str331:
	.asciz	"__builtin_ia32_orps"
	.size	.L.str331, 20

	.type	.L.str332,@object       # @.str332
.L.str332:
	.asciz	"__builtin_ia32_xorps"
	.size	.L.str332, 21

	.type	.L.str333,@object       # @.str333
.L.str333:
	.asciz	"__builtin_ia32_pextrw"
	.size	.L.str333, 22

	.type	.L.str334,@object       # @.str334
.L.str334:
	.asciz	"__builtin_ia32_pinsrw"
	.size	.L.str334, 22

	.type	.L.str335,@object       # @.str335
.L.str335:
	.asciz	"__builtin_ia32_maskmovq"
	.size	.L.str335, 24

	.type	.L.str336,@object       # @.str336
.L.str336:
	.asciz	"__builtin_ia32_loadaps"
	.size	.L.str336, 23

	.type	.L.str337,@object       # @.str337
.L.str337:
	.asciz	"__builtin_ia32_loadups"
	.size	.L.str337, 23

	.type	.L.str338,@object       # @.str338
.L.str338:
	.asciz	"__builtin_ia32_loadss"
	.size	.L.str338, 22

	.type	.L.str339,@object       # @.str339
.L.str339:
	.asciz	"__builtin_ia32_storeaps"
	.size	.L.str339, 24

	.type	.L.str340,@object       # @.str340
.L.str340:
	.asciz	"__builtin_ia32_storeups"
	.size	.L.str340, 24

	.type	.L.str341,@object       # @.str341
.L.str341:
	.asciz	"__builtin_ia32_storess"
	.size	.L.str341, 23

	.type	.L.str342,@object       # @.str342
.L.str342:
	.asciz	"__builtin_ia32_loadhps"
	.size	.L.str342, 23

	.type	.L.str343,@object       # @.str343
.L.str343:
	.asciz	"__builtin_ia32_loadlps"
	.size	.L.str343, 23

	.type	.L.str344,@object       # @.str344
.L.str344:
	.asciz	"__builtin_ia32_storehps"
	.size	.L.str344, 24

	.type	.L.str345,@object       # @.str345
.L.str345:
	.asciz	"__builtin_ia32_storelps"
	.size	.L.str345, 24

	.type	.L.str346,@object       # @.str346
.L.str346:
	.asciz	"__builtin_ia32_movmskps"
	.size	.L.str346, 24

	.type	.L.str347,@object       # @.str347
.L.str347:
	.asciz	"__builtin_ia32_pmovmskb"
	.size	.L.str347, 24

	.type	.L.str348,@object       # @.str348
.L.str348:
	.asciz	"__builtin_ia32_movntps"
	.size	.L.str348, 23

	.type	.L.str349,@object       # @.str349
.L.str349:
	.asciz	"__builtin_ia32_movntq"
	.size	.L.str349, 22

	.type	.L.str350,@object       # @.str350
.L.str350:
	.asciz	"__builtin_ia32_sfence"
	.size	.L.str350, 22

	.type	.L.str351,@object       # @.str351
.L.str351:
	.asciz	"__builtin_ia32_psadbw"
	.size	.L.str351, 22

	.type	.L.str352,@object       # @.str352
.L.str352:
	.asciz	"__builtin_ia32_rcpps"
	.size	.L.str352, 21

	.type	.L.str353,@object       # @.str353
.L.str353:
	.asciz	"__builtin_ia32_rcpss"
	.size	.L.str353, 21

	.type	.L.str354,@object       # @.str354
.L.str354:
	.asciz	"__builtin_ia32_rsqrtps"
	.size	.L.str354, 23

	.type	.L.str355,@object       # @.str355
.L.str355:
	.asciz	"__builtin_ia32_rsqrtss"
	.size	.L.str355, 23

	.type	.L.str356,@object       # @.str356
.L.str356:
	.asciz	"__builtin_ia32_sqrtps"
	.size	.L.str356, 22

	.type	.L.str357,@object       # @.str357
.L.str357:
	.asciz	"__builtin_ia32_sqrtss"
	.size	.L.str357, 22

	.type	.L.str358,@object       # @.str358
.L.str358:
	.asciz	"__builtin_ia32_shufps"
	.size	.L.str358, 22

	.type	.L.str359,@object       # @.str359
.L.str359:
	.asciz	"__builtin_ia32_femms"
	.size	.L.str359, 21

	.type	.L.str360,@object       # @.str360
.L.str360:
	.asciz	"__builtin_ia32_pavgusb"
	.size	.L.str360, 23

	.type	.L.str361,@object       # @.str361
.L.str361:
	.asciz	"__builtin_ia32_pf2id"
	.size	.L.str361, 21

	.type	.L.str362,@object       # @.str362
.L.str362:
	.asciz	"__builtin_ia32_pfacc"
	.size	.L.str362, 21

	.type	.L.str363,@object       # @.str363
.L.str363:
	.asciz	"__builtin_ia32_pfadd"
	.size	.L.str363, 21

	.type	.L.str364,@object       # @.str364
.L.str364:
	.asciz	"__builtin_ia32_pfcmpeq"
	.size	.L.str364, 23

	.type	.L.str365,@object       # @.str365
.L.str365:
	.asciz	"__builtin_ia32_pfcmpge"
	.size	.L.str365, 23

	.type	.L.str366,@object       # @.str366
.L.str366:
	.asciz	"__builtin_ia32_pfcmpgt"
	.size	.L.str366, 23

	.type	.L.str367,@object       # @.str367
.L.str367:
	.asciz	"__builtin_ia32_pfmax"
	.size	.L.str367, 21

	.type	.L.str368,@object       # @.str368
.L.str368:
	.asciz	"__builtin_ia32_pfmin"
	.size	.L.str368, 21

	.type	.L.str369,@object       # @.str369
.L.str369:
	.asciz	"__builtin_ia32_pfmul"
	.size	.L.str369, 21

	.type	.L.str370,@object       # @.str370
.L.str370:
	.asciz	"__builtin_ia32_pfrcp"
	.size	.L.str370, 21

	.type	.L.str371,@object       # @.str371
.L.str371:
	.asciz	"__builtin_ia32_pfrcpit1"
	.size	.L.str371, 24

	.type	.L.str372,@object       # @.str372
.L.str372:
	.asciz	"__builtin_ia32_pfrcpit2"
	.size	.L.str372, 24

	.type	.L.str373,@object       # @.str373
.L.str373:
	.asciz	"__builtin_ia32_pfrsqrt"
	.size	.L.str373, 23

	.type	.L.str374,@object       # @.str374
.L.str374:
	.asciz	"__builtin_ia32_pfrsqit1"
	.size	.L.str374, 24

	.type	.L.str375,@object       # @.str375
.L.str375:
	.asciz	"__builtin_ia32_pfsub"
	.size	.L.str375, 21

	.type	.L.str376,@object       # @.str376
.L.str376:
	.asciz	"__builtin_ia32_pfsubr"
	.size	.L.str376, 22

	.type	.L.str377,@object       # @.str377
.L.str377:
	.asciz	"__builtin_ia32_pi2fd"
	.size	.L.str377, 21

	.type	.L.str378,@object       # @.str378
.L.str378:
	.asciz	"__builtin_ia32_pmulhrw"
	.size	.L.str378, 23

	.type	.L.str379,@object       # @.str379
.L.str379:
	.asciz	"__builtin_ia32_pf2iw"
	.size	.L.str379, 21

	.type	.L.str380,@object       # @.str380
.L.str380:
	.asciz	"__builtin_ia32_pfnacc"
	.size	.L.str380, 22

	.type	.L.str381,@object       # @.str381
.L.str381:
	.asciz	"__builtin_ia32_pfpnacc"
	.size	.L.str381, 23

	.type	.L.str382,@object       # @.str382
.L.str382:
	.asciz	"__builtin_ia32_pi2fw"
	.size	.L.str382, 21

	.type	.L.str383,@object       # @.str383
.L.str383:
	.asciz	"__builtin_ia32_pswapdsf"
	.size	.L.str383, 24

	.type	.L.str384,@object       # @.str384
.L.str384:
	.asciz	"__builtin_ia32_pswapdsi"
	.size	.L.str384, 24

	.type	.L.str385,@object       # @.str385
.L.str385:
	.asciz	"__builtin_ia32_setzerops"
	.size	.L.str385, 25

	.type	ix86_sched_data,@object # @ix86_sched_data
	.local	ix86_sched_data
	.comm	ix86_sched_data,32,8
	.type	.L__FUNCTION__.ix86_variable_issue,@object # @__FUNCTION__.ix86_variable_issue
.L__FUNCTION__.ix86_variable_issue:
	.asciz	"ix86_variable_issue"
	.size	.L__FUNCTION__.ix86_variable_issue, 20

	.type	.L.str386,@object       # @.str386
.L.str386:
	.asciz	"PPRO packet: %d"
	.size	.L.str386, 16

	.type	.L.str387,@object       # @.str387
.L.str387:
	.asciz	" %d"
	.size	.L.str387, 4

	.type	.L__FUNCTION__.ix86_agi_dependant,@object # @__FUNCTION__.ix86_agi_dependant
.L__FUNCTION__.ix86_agi_dependant:
	.asciz	"ix86_agi_dependant"
	.size	.L__FUNCTION__.ix86_agi_dependant, 19

	.type	.L__FUNCTION__.memory_address_length,@object # @__FUNCTION__.memory_address_length
.L__FUNCTION__.memory_address_length:
	.asciz	"memory_address_length"
	.size	.L__FUNCTION__.memory_address_length, 22

	.type	.L__FUNCTION__.ix86_split_to_parts,@object # @__FUNCTION__.ix86_split_to_parts
.L__FUNCTION__.ix86_split_to_parts:
	.asciz	"ix86_split_to_parts"
	.size	.L__FUNCTION__.ix86_split_to_parts, 20

	.type	.L__FUNCTION__.ix86_expand_fp_compare,@object # @__FUNCTION__.ix86_expand_fp_compare
.L__FUNCTION__.ix86_expand_fp_compare:
	.asciz	"ix86_expand_fp_compare"
	.size	.L__FUNCTION__.ix86_expand_fp_compare, 23

	.type	.L__FUNCTION__.ix86_fp_comparison_arithmetics_cost,@object # @__FUNCTION__.ix86_fp_comparison_arithmetics_cost
.L__FUNCTION__.ix86_fp_comparison_arithmetics_cost:
	.asciz	"ix86_fp_comparison_arithmetics_cost"
	.size	.L__FUNCTION__.ix86_fp_comparison_arithmetics_cost, 36

	.type	.L__FUNCTION__.ix86_fp_comparison_codes,@object # @__FUNCTION__.ix86_fp_comparison_codes
.L__FUNCTION__.ix86_fp_comparison_codes:
	.asciz	"ix86_fp_comparison_codes"
	.size	.L__FUNCTION__.ix86_fp_comparison_codes, 25

	.type	.L__FUNCTION__.put_condition_code,@object # @__FUNCTION__.put_condition_code
.L__FUNCTION__.put_condition_code:
	.asciz	"put_condition_code"
	.size	.L__FUNCTION__.put_condition_code, 19

	.type	.L.str388,@object       # @.str388
.L.str388:
	.asciz	"e"
	.size	.L.str388, 2

	.type	.L.str389,@object       # @.str389
.L.str389:
	.asciz	"ne"
	.size	.L.str389, 3

	.type	.L.str390,@object       # @.str390
.L.str390:
	.asciz	"g"
	.size	.L.str390, 2

	.type	.L.str391,@object       # @.str391
.L.str391:
	.asciz	"nbe"
	.size	.L.str391, 4

	.type	.L.str392,@object       # @.str392
.L.str392:
	.asciz	"a"
	.size	.L.str392, 2

	.type	.L.str393,@object       # @.str393
.L.str393:
	.asciz	"s"
	.size	.L.str393, 2

	.type	.L.str394,@object       # @.str394
.L.str394:
	.asciz	"l"
	.size	.L.str394, 2

	.type	.L.str395,@object       # @.str395
.L.str395:
	.asciz	"b"
	.size	.L.str395, 2

	.type	.L.str396,@object       # @.str396
.L.str396:
	.asciz	"ns"
	.size	.L.str396, 3

	.type	.L.str397,@object       # @.str397
.L.str397:
	.asciz	"ge"
	.size	.L.str397, 3

	.type	.L.str398,@object       # @.str398
.L.str398:
	.asciz	"nb"
	.size	.L.str398, 3

	.type	.L.str399,@object       # @.str399
.L.str399:
	.asciz	"ae"
	.size	.L.str399, 3

	.type	.L.str400,@object       # @.str400
.L.str400:
	.asciz	"be"
	.size	.L.str400, 3

	.type	.L.str401,@object       # @.str401
.L.str401:
	.asciz	"u"
	.size	.L.str401, 2

	.type	.L.str402,@object       # @.str402
.L.str402:
	.asciz	"p"
	.size	.L.str402, 2

	.type	.L.str403,@object       # @.str403
.L.str403:
	.asciz	"nu"
	.size	.L.str403, 3

	.type	.L.str404,@object       # @.str404
.L.str404:
	.asciz	"np"
	.size	.L.str404, 3

	.type	.L.str405,@object       # @.str405
.L.str405:
	.asciz	"ah"
	.size	.L.str405, 3

	.type	.L.str406,@object       # @.str406
.L.str406:
	.asciz	"dh"
	.size	.L.str406, 3

	.type	.L.str407,@object       # @.str407
.L.str407:
	.asciz	"ch"
	.size	.L.str407, 3

	.type	.L.str408,@object       # @.str408
.L.str408:
	.asciz	"bh"
	.size	.L.str408, 3

	.type	.L.str409,@object       # @.str409
.L.str409:
	.asciz	"al"
	.size	.L.str409, 3

	.type	.L.str410,@object       # @.str410
.L.str410:
	.asciz	"dl"
	.size	.L.str410, 3

	.type	.L.str411,@object       # @.str411
.L.str411:
	.asciz	"cl"
	.size	.L.str411, 3

	.type	.L.str412,@object       # @.str412
.L.str412:
	.asciz	"bl"
	.size	.L.str412, 3

	.type	.L.str413,@object       # @.str413
.L.str413:
	.asciz	"sil"
	.size	.L.str413, 4

	.type	.L.str414,@object       # @.str414
.L.str414:
	.asciz	"dil"
	.size	.L.str414, 4

	.type	.L.str415,@object       # @.str415
.L.str415:
	.asciz	"bpl"
	.size	.L.str415, 4

	.type	.L.str416,@object       # @.str416
.L.str416:
	.asciz	"spl"
	.size	.L.str416, 4

	.type	.L.str417,@object       # @.str417
.L.str417:
	.asciz	"ax"
	.size	.L.str417, 3

	.type	.L.str418,@object       # @.str418
.L.str418:
	.asciz	"dx"
	.size	.L.str418, 3

	.type	.L.str419,@object       # @.str419
.L.str419:
	.asciz	"cx"
	.size	.L.str419, 3

	.type	.L.str420,@object       # @.str420
.L.str420:
	.asciz	"bx"
	.size	.L.str420, 3

	.type	.L.str421,@object       # @.str421
.L.str421:
	.asciz	"si"
	.size	.L.str421, 3

	.type	.L.str422,@object       # @.str422
.L.str422:
	.asciz	"di"
	.size	.L.str422, 3

	.type	.L.str423,@object       # @.str423
.L.str423:
	.asciz	"bp"
	.size	.L.str423, 3

	.type	.L.str424,@object       # @.str424
.L.str424:
	.asciz	"sp"
	.size	.L.str424, 3

	.type	.L.str425,@object       # @.str425
.L.str425:
	.asciz	"st"
	.size	.L.str425, 3

	.type	.L.str426,@object       # @.str426
.L.str426:
	.asciz	"st(1)"
	.size	.L.str426, 6

	.type	.L.str427,@object       # @.str427
.L.str427:
	.asciz	"st(2)"
	.size	.L.str427, 6

	.type	.L.str428,@object       # @.str428
.L.str428:
	.asciz	"st(3)"
	.size	.L.str428, 6

	.type	.L.str429,@object       # @.str429
.L.str429:
	.asciz	"st(4)"
	.size	.L.str429, 6

	.type	.L.str430,@object       # @.str430
.L.str430:
	.asciz	"st(5)"
	.size	.L.str430, 6

	.type	.L.str431,@object       # @.str431
.L.str431:
	.asciz	"st(6)"
	.size	.L.str431, 6

	.type	.L.str432,@object       # @.str432
.L.str432:
	.asciz	"st(7)"
	.size	.L.str432, 6

	.type	.L.str433,@object       # @.str433
.L.str433:
	.asciz	"flags"
	.size	.L.str433, 6

	.type	.L.str434,@object       # @.str434
.L.str434:
	.asciz	"fpsr"
	.size	.L.str434, 5

	.type	.L.str435,@object       # @.str435
.L.str435:
	.asciz	"dirflag"
	.size	.L.str435, 8

	.type	.L.str436,@object       # @.str436
.L.str436:
	.asciz	"frame"
	.size	.L.str436, 6

	.type	.L.str437,@object       # @.str437
.L.str437:
	.asciz	"xmm0"
	.size	.L.str437, 5

	.type	.L.str438,@object       # @.str438
.L.str438:
	.asciz	"xmm1"
	.size	.L.str438, 5

	.type	.L.str439,@object       # @.str439
.L.str439:
	.asciz	"xmm2"
	.size	.L.str439, 5

	.type	.L.str440,@object       # @.str440
.L.str440:
	.asciz	"xmm3"
	.size	.L.str440, 5

	.type	.L.str441,@object       # @.str441
.L.str441:
	.asciz	"xmm4"
	.size	.L.str441, 5

	.type	.L.str442,@object       # @.str442
.L.str442:
	.asciz	"xmm5"
	.size	.L.str442, 5

	.type	.L.str443,@object       # @.str443
.L.str443:
	.asciz	"xmm6"
	.size	.L.str443, 5

	.type	.L.str444,@object       # @.str444
.L.str444:
	.asciz	"xmm7"
	.size	.L.str444, 5

	.type	.L.str445,@object       # @.str445
.L.str445:
	.asciz	"mm0"
	.size	.L.str445, 4

	.type	.L.str446,@object       # @.str446
.L.str446:
	.asciz	"mm1"
	.size	.L.str446, 4

	.type	.L.str447,@object       # @.str447
.L.str447:
	.asciz	"mm2"
	.size	.L.str447, 4

	.type	.L.str448,@object       # @.str448
.L.str448:
	.asciz	"mm3"
	.size	.L.str448, 4

	.type	.L.str449,@object       # @.str449
.L.str449:
	.asciz	"mm4"
	.size	.L.str449, 4

	.type	.L.str450,@object       # @.str450
.L.str450:
	.asciz	"mm5"
	.size	.L.str450, 4

	.type	.L.str451,@object       # @.str451
.L.str451:
	.asciz	"mm6"
	.size	.L.str451, 4

	.type	.L.str452,@object       # @.str452
.L.str452:
	.asciz	"mm7"
	.size	.L.str452, 4

	.type	.L.str453,@object       # @.str453
.L.str453:
	.asciz	"r8"
	.size	.L.str453, 3

	.type	.L.str454,@object       # @.str454
.L.str454:
	.asciz	"r9"
	.size	.L.str454, 3

	.type	.L.str455,@object       # @.str455
.L.str455:
	.asciz	"r10"
	.size	.L.str455, 4

	.type	.L.str456,@object       # @.str456
.L.str456:
	.asciz	"r11"
	.size	.L.str456, 4

	.type	.L.str457,@object       # @.str457
.L.str457:
	.asciz	"r12"
	.size	.L.str457, 4

	.type	.L.str458,@object       # @.str458
.L.str458:
	.asciz	"r13"
	.size	.L.str458, 4

	.type	.L.str459,@object       # @.str459
.L.str459:
	.asciz	"r14"
	.size	.L.str459, 4

	.type	.L.str460,@object       # @.str460
.L.str460:
	.asciz	"r15"
	.size	.L.str460, 4

	.type	.L.str461,@object       # @.str461
.L.str461:
	.asciz	"xmm8"
	.size	.L.str461, 5

	.type	.L.str462,@object       # @.str462
.L.str462:
	.asciz	"xmm9"
	.size	.L.str462, 5

	.type	.L.str463,@object       # @.str463
.L.str463:
	.asciz	"xmm10"
	.size	.L.str463, 6

	.type	.L.str464,@object       # @.str464
.L.str464:
	.asciz	"xmm11"
	.size	.L.str464, 6

	.type	.L.str465,@object       # @.str465
.L.str465:
	.asciz	"xmm12"
	.size	.L.str465, 6

	.type	.L.str466,@object       # @.str466
.L.str466:
	.asciz	"xmm13"
	.size	.L.str466, 6

	.type	.L.str467,@object       # @.str467
.L.str467:
	.asciz	"xmm14"
	.size	.L.str467, 6

	.type	.L.str468,@object       # @.str468
.L.str468:
	.asciz	"xmm15"
	.size	.L.str468, 6

	.type	.L__FUNCTION__.output_pic_addr_const,@object # @__FUNCTION__.output_pic_addr_const
.L__FUNCTION__.output_pic_addr_const:
	.asciz	"output_pic_addr_const"
	.size	.L__FUNCTION__.output_pic_addr_const, 22

	.type	.L.str469,@object       # @.str469
.L.str469:
	.asciz	"@PLT"
	.size	.L.str469, 5

	.type	.L.str470,@object       # @.str470
.L.str470:
	.asciz	"0x%lx%08lx"
	.size	.L.str470, 11

	.type	.L.str471,@object       # @.str471
.L.str471:
	.asciz	"floating constant misused"
	.size	.L.str471, 26

	.type	.L.str472,@object       # @.str472
.L.str472:
	.asciz	"@GOT"
	.size	.L.str472, 5

	.type	.L.str473,@object       # @.str473
.L.str473:
	.asciz	"@GOTOFF"
	.size	.L.str473, 8

	.type	.L.str474,@object       # @.str474
.L.str474:
	.asciz	"@GOTPCREL(%RIP)"
	.size	.L.str474, 16

	.type	.L.str475,@object       # @.str475
.L.str475:
	.asciz	"invalid UNSPEC as operand"
	.size	.L.str475, 26

	.type	.L.str476,@object       # @.str476
.L.str476:
	.asciz	"invalid expression as operand"
	.size	.L.str476, 30

	.type	ix86_GOT_alias_set.set,@object # @ix86_GOT_alias_set.set
	.data
	.align	8
ix86_GOT_alias_set.set:
	.quad	-1                      # 0xffffffffffffffff
	.size	ix86_GOT_alias_set.set, 8

	.type	.L__FUNCTION__.ix86_compute_frame_layout,@object # @__FUNCTION__.ix86_compute_frame_layout
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__FUNCTION__.ix86_compute_frame_layout:
	.asciz	"ix86_compute_frame_layout"
	.size	.L__FUNCTION__.ix86_compute_frame_layout, 26

	.type	.L.str477,@object       # @.str477
.L.str477:
	.asciz	"Memory class\n"
	.size	.L.str477, 14

	.type	.L.str478,@object       # @.str478
.L.str478:
	.asciz	"Classes:"
	.size	.L.str478, 9

	.type	.L.str479,@object       # @.str479
.L.str479:
	.asciz	" %s"
	.size	.L.str479, 4

	.type	x86_64_reg_class_name,@object # @x86_64_reg_class_name
	.section	.rodata,"a",@progbits
	.align	16
x86_64_reg_class_name:
	.quad	.L.str480
	.quad	.L.str481
	.quad	.L.str482
	.quad	.L.str49
	.quad	.L.str483
	.quad	.L.str484
	.quad	.L.str485
	.quad	.L.str486
	.quad	.L.str487
	.quad	.L.str480
	.size	x86_64_reg_class_name, 80

	.type	.L__FUNCTION__.construct_container,@object # @__FUNCTION__.construct_container
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__FUNCTION__.construct_container:
	.asciz	"construct_container"
	.size	.L__FUNCTION__.construct_container, 20

	.type	.L.str480,@object       # @.str480
.L.str480:
	.asciz	"no"
	.size	.L.str480, 3

	.type	.L.str481,@object       # @.str481
.L.str481:
	.asciz	"integer"
	.size	.L.str481, 8

	.type	.L.str482,@object       # @.str482
.L.str482:
	.asciz	"integerSI"
	.size	.L.str482, 10

	.type	.L.str483,@object       # @.str483
.L.str483:
	.asciz	"sseSF"
	.size	.L.str483, 6

	.type	.L.str484,@object       # @.str484
.L.str484:
	.asciz	"sseDF"
	.size	.L.str484, 6

	.type	.L.str485,@object       # @.str485
.L.str485:
	.asciz	"sseup"
	.size	.L.str485, 6

	.type	.L.str486,@object       # @.str486
.L.str486:
	.asciz	"x87"
	.size	.L.str486, 4

	.type	.L.str487,@object       # @.str487
.L.str487:
	.asciz	"x87up"
	.size	.L.str487, 6

	.type	.L__FUNCTION__.classify_argument,@object # @__FUNCTION__.classify_argument
.L__FUNCTION__.classify_argument:
	.asciz	"classify_argument"
	.size	.L__FUNCTION__.classify_argument, 18

	.type	.L__FUNCTION__.examine_argument,@object # @__FUNCTION__.examine_argument
.L__FUNCTION__.examine_argument:
	.asciz	"examine_argument"
	.size	.L__FUNCTION__.examine_argument, 17

	.type	.L.str488,@object       # @.str488
.L.str488:
	.asciz	"`%s' attribute only applies to functions"
	.size	.L.str488, 41

	.type	.L.str489,@object       # @.str489
.L.str489:
	.asciz	"`%s' attribute requires an integer constant argument"
	.size	.L.str489, 53

	.type	.L.str490,@object       # @.str490
.L.str490:
	.asciz	"argument to `%s' attribute larger than %d"
	.size	.L.str490, 42

	.type	.L.str491,@object       # @.str491
.L.str491:
	.asciz	"`%s' attribute ignored"
	.size	.L.str491, 23


	.ident	"clang version 3.5 (trunk)"
	.section	".note.GNU-stack","",@progbits
