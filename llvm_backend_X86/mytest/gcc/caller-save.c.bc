; ModuleID = 'caller-save.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.insn_chain = type { %struct.insn_chain*, %struct.insn_chain*, %struct.insn_chain*, i32, %struct.rtx_def*, %struct.bitmap_head_def, %struct.bitmap_head_def, %struct.reload*, i32, i64, %struct.needs, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.reload = type opaque
%struct.needs = type { [2 x [25 x i16]], [25 x i16] }
%struct.reg_info_def = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }

@call_used_regs = external global [53 x i8]
@call_fixed_regs = external global [53 x i8]
@target_flags = external global i32
@regno_save_mode = internal unnamed_addr global [53 x [5 x i32]] zeroinitializer, align 16
@call_fixed_reg_set = external global i64
@reg_class_contents = external global [25 x i64]
@.str = private unnamed_addr constant [14 x i8] c"caller-save.c\00", align 1
@__FUNCTION__.init_caller_save = private unnamed_addr constant [17 x i8] c"init_caller_save\00", align 1
@reg_save_code = internal unnamed_addr global [53 x [59 x i32]] zeroinitializer, align 16
@reg_restore_code = internal unnamed_addr global [53 x [59 x i32]] zeroinitializer, align 16
@regno_save_mem = internal unnamed_addr global [53 x [5 x %struct.rtx_def*]] zeroinitializer, align 16
@max_regno = external global i32
@reg_renumber = external global i16*
@reg_n_info = external global %struct.varray_head_tag*
@cfun = external global %struct.function*
@mode_class = external constant [59 x i32]
@mode_size = external constant [59 x i8]
@hard_regs_saved = internal unnamed_addr global i64 0, align 8
@n_regs_saved = internal unnamed_addr global i32 0, align 4
@reload_insn_chain = external global %struct.insn_chain*
@__FUNCTION__.save_call_clobbered_regs = private unnamed_addr constant [25 x i8] c"save_call_clobbered_regs\00", align 1
@rtx_class = external constant [153 x i8]
@referenced_regs = internal unnamed_addr global i64 0, align 8
@x86_partial_reg_stall = external constant i32
@ix86_cpu = external global i32
@mode_bitsize = external constant [59 x i16]
@this_insn_sets = internal unnamed_addr global i64 0, align 8
@call_used_reg_set = external global i64
@__FUNCTION__.insert_save = private unnamed_addr constant [12 x i8] c"insert_save\00", align 1
@__FUNCTION__.insert_one_insn = private unnamed_addr constant [16 x i8] c"insert_one_insn\00", align 1
@basic_block_info = external global %struct.varray_head_tag*
@__FUNCTION__.insert_restore = private unnamed_addr constant [15 x i8] c"insert_restore\00", align 1
@reg_equiv_mem = external global %struct.rtx_def**
@reg_equiv_address = external global %struct.rtx_def**
@rtx_format = external constant [153 x i8*]
@rtx_length = external constant [153 x i8]

; Function Attrs: nounwind uwtable
define void @init_caller_save() #0 {
entry:
  br label %for.body

for.cond43.preheader:                             ; preds = %for.inc40
  %0 = load i64* getelementptr inbounds ([25 x i64]* @reg_class_contents, i64 0, i64 12), align 8, !tbaa !1
  br label %for.body46

for.body:                                         ; preds = %for.inc40, %entry
  %indvars.iv351 = phi i64 [ 0, %entry ], [ %indvars.iv.next352, %for.inc40 ]
  %1 = trunc i64 %indvars.iv351 to i32
  %sext = shl i64 %indvars.iv351, 32
  %idxprom = ashr exact i64 %sext, 32
  %arrayidx = getelementptr inbounds [53 x i8]* @call_used_regs, i64 0, i64 %idxprom
  %2 = load i8* %arrayidx, align 1, !tbaa !5
  %tobool = icmp eq i8 %2, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %arrayidx2 = getelementptr inbounds [53 x i8]* @call_fixed_regs, i64 0, i64 %idxprom
  %3 = load i8* %arrayidx2, align 1, !tbaa !5
  %tobool3 = icmp eq i8 %3, 0
  br i1 %tobool3, label %for.cond4.preheader, label %if.else

for.cond4.preheader:                              ; preds = %land.lhs.true
  %4 = load i32* @target_flags, align 4, !tbaa !6
  %and327 = lshr i32 %4, 23
  %5 = and i32 %and327, 4
  %6 = add i32 %5, 4
  %div328 = sdiv i32 16, %6
  %cmp6329 = icmp slt i32 %div328, 1
  br i1 %cmp6329, label %for.inc40, label %for.body8.lr.ph

for.body8.lr.ph:                                  ; preds = %for.cond4.preheader
  %i.0.off = add i32 %1, -17
  %7 = icmp ult i32 %i.0.off, 2
  %shl = shl i64 1, %indvars.iv351
  br i1 %7, label %cond.end18.us, label %for.body8

cond.end18.us:                                    ; preds = %for.body8.lr.ph, %for.inc.us
  %indvars.iv349 = phi i64 [ %indvars.iv.next350, %for.inc.us ], [ 1, %for.body8.lr.ph ]
  %arrayidx23.us = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %idxprom, i64 %indvars.iv349
  store i32 0, i32* %arrayidx23.us, align 4, !tbaa !5
  %8 = trunc i64 %indvars.iv349 to i32
  %cmp31.us = icmp eq i32 %8, 1
  br i1 %cmp31.us, label %if.then33.us, label %for.inc.us

if.then33.us:                                     ; preds = %cond.end18.us
  store i8 1, i8* %arrayidx2, align 1, !tbaa !5
  %9 = load i64* @call_fixed_reg_set, align 8, !tbaa !1
  %or.us = or i64 %9, %shl
  store i64 %or.us, i64* @call_fixed_reg_set, align 8, !tbaa !1
  br label %for.inc.us

for.inc.us:                                       ; preds = %if.then33.us, %cond.end18.us
  %indvars.iv.next350 = add nuw nsw i64 %indvars.iv349, 1
  %cmp6.us = icmp slt i32 %8, %div328
  br i1 %cmp6.us, label %cond.end18.us, label %for.inc40

for.body8:                                        ; preds = %for.body8.lr.ph, %for.inc
  %indvars.iv347 = phi i64 [ %indvars.iv.next348, %for.inc ], [ 1, %for.body8.lr.ph ]
  %10 = trunc i64 %indvars.iv347 to i32
  %cmp13 = icmp eq i32 %10, 1
  br i1 %cmp13, label %cond.end18, label %cond.end18.thread

cond.end18.thread:                                ; preds = %for.body8
  %arrayidx23357 = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %idxprom, i64 %indvars.iv347
  store i32 0, i32* %arrayidx23357, align 4, !tbaa !5
  br label %for.inc

cond.end18:                                       ; preds = %for.body8
  %call = tail call i32 @choose_hard_reg_mode(i32 %1, i32 1) #3
  %arrayidx23 = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %idxprom, i64 %indvars.iv347
  store i32 %call, i32* %arrayidx23, align 4, !tbaa !5
  %cmp28 = icmp eq i32 %call, 0
  %or.cond240 = and i1 %cmp28, %cmp13
  br i1 %or.cond240, label %if.then33, label %for.inc

if.then33:                                        ; preds = %cond.end18
  store i8 1, i8* %arrayidx2, align 1, !tbaa !5
  %11 = load i64* @call_fixed_reg_set, align 8, !tbaa !1
  %or = or i64 %11, %shl
  store i64 %or, i64* @call_fixed_reg_set, align 8, !tbaa !1
  br label %for.inc

for.inc:                                          ; preds = %cond.end18.thread, %cond.end18, %if.then33
  %indvars.iv.next348 = add nuw nsw i64 %indvars.iv347, 1
  %12 = load i32* @target_flags, align 4, !tbaa !6
  %and = lshr i32 %12, 23
  %13 = and i32 %and, 4
  %14 = add i32 %13, 4
  %div = sdiv i32 16, %14
  %cmp6 = icmp slt i32 %10, %div
  br i1 %cmp6, label %for.body8, label %for.inc40

if.else:                                          ; preds = %land.lhs.true, %for.body
  %arrayidx38 = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %idxprom, i64 1
  store i32 0, i32* %arrayidx38, align 4, !tbaa !5
  br label %for.inc40

for.inc40:                                        ; preds = %for.inc, %for.inc.us, %for.cond4.preheader, %if.else
  %indvars.iv.next352 = add nuw nsw i64 %indvars.iv351, 1
  %exitcond353 = icmp eq i64 %indvars.iv.next352, 53
  br i1 %exitcond353, label %for.cond43.preheader, label %for.body

for.cond43:                                       ; preds = %for.body46
  %15 = trunc i64 %indvars.iv.next346 to i32
  %cmp44 = icmp slt i32 %15, 53
  br i1 %cmp44, label %for.body46, label %for.end55

for.body46:                                       ; preds = %for.cond43.preheader, %for.cond43
  %indvars.iv345 = phi i64 [ 0, %for.cond43.preheader ], [ %indvars.iv.next346, %for.cond43 ]
  %i.1326 = phi i32 [ 0, %for.cond43.preheader ], [ %inc54, %for.cond43 ]
  %shl48 = shl i64 1, %indvars.iv345
  %and49 = and i64 %0, %shl48
  %tobool50 = icmp eq i64 %and49, 0
  %indvars.iv.next346 = add nuw nsw i64 %indvars.iv345, 1
  %inc54 = add nsw i32 %i.1326, 1
  %16 = trunc i64 %indvars.iv345 to i32
  br i1 %tobool50, label %for.cond43, label %for.end55

for.end55:                                        ; preds = %for.body46, %for.cond43
  %i.1.lcssa = phi i32 [ %16, %for.body46 ], [ %inc54, %for.cond43 ]
  %cmp56 = icmp eq i32 %i.1.lcssa, 53
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %for.end55
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 160, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.init_caller_save, i64 0, i64 0)) #4
  unreachable

if.end59:                                         ; preds = %for.end55
  %17 = load i32* @target_flags, align 4, !tbaa !6
  %and60 = lshr i32 %17, 25
  %18 = and i32 %and60, 1
  %19 = or i32 %18, 4
  %call63 = tail call %struct.rtx_def* @gen_rtx_REG(i32 %19, i32 %i.1.lcssa) #3
  br label %for.body66

for.cond64:                                       ; preds = %for.end92
  %tobool65 = icmp eq i32 %shr, 0
  br i1 %tobool65, label %for.end98, label %for.body66

for.body66:                                       ; preds = %if.end59, %for.cond64
  %offset.0324 = phi i32 [ 65536, %if.end59 ], [ %shr, %for.cond64 ]
  %20 = load i32* @target_flags, align 4, !tbaa !6
  %and67 = lshr i32 %20, 25
  %21 = and i32 %and67, 1
  %22 = or i32 %21, 4
  %conv70 = sext i32 %offset.0324 to i64
  %call71 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv70) #3
  %call72 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %22, %struct.rtx_def* %call63, %struct.rtx_def* %call71) #3
  br label %for.body76

for.body76:                                       ; preds = %for.body66, %for.inc90
  %indvars.iv343 = phi i64 [ 0, %for.body66 ], [ %indvars.iv.next344, %for.inc90 ]
  %i.2323 = phi i32 [ 0, %for.body66 ], [ %inc91, %for.inc90 ]
  %arrayidx79 = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %indvars.iv343, i64 1
  %23 = load i32* %arrayidx79, align 4, !tbaa !5
  %cmp80 = icmp eq i32 %23, 0
  br i1 %cmp80, label %for.inc90, label %land.lhs.true82

land.lhs.true82:                                  ; preds = %for.body76
  %call86 = tail call i32 @strict_memory_address_p(i32 %23, %struct.rtx_def* %call72) #3
  %tobool87 = icmp eq i32 %call86, 0
  %24 = trunc i64 %indvars.iv343 to i32
  br i1 %tobool87, label %for.end92, label %for.inc90

for.inc90:                                        ; preds = %land.lhs.true82, %for.body76
  %indvars.iv.next344 = add nuw nsw i64 %indvars.iv343, 1
  %inc91 = add nsw i32 %i.2323, 1
  %25 = trunc i64 %indvars.iv.next344 to i32
  %cmp74 = icmp slt i32 %25, 53
  br i1 %cmp74, label %for.body76, label %for.end92

for.end92:                                        ; preds = %land.lhs.true82, %for.inc90
  %i.2.lcssa = phi i32 [ %24, %land.lhs.true82 ], [ %inc91, %for.inc90 ]
  %cmp93 = icmp eq i32 %i.2.lcssa, 53
  %shr = ashr i32 %offset.0324, 1
  br i1 %cmp93, label %for.end98, label %for.cond64

for.end98:                                        ; preds = %for.cond64, %for.end92
  %tobool65.lcssa = phi %struct.rtx_def* [ %call63, %for.cond64 ], [ %call72, %for.end92 ]
  tail call void @start_sequence() #3
  br label %for.cond107.preheader

for.cond107.preheader:                            ; preds = %for.inc194, %for.end98
  %indvars.iv340 = phi i64 [ 0, %for.end98 ], [ %indvars.iv.next341, %for.inc194 ]
  br label %for.body110

for.cond197.preheader:                            ; preds = %for.inc194
  %26 = load i32* @target_flags, align 4, !tbaa !6
  %and202316 = lshr i32 %26, 23
  %27 = and i32 %and202316, 4
  %28 = add i32 %27, 4
  %div205317 = sdiv i32 16, %28
  %cmp206318 = icmp slt i32 %div205317, 1
  br i1 %cmp206318, label %vector.body, label %for.body208.lr.ph

vector.body:                                      ; preds = %for.cond197.preheader, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %for.cond197.preheader ]
  %index.next = add i32 %index, 4
  %29 = icmp eq i32 %index.next, 52
  br i1 %29, label %for.inc237.us, label %vector.body, !llvm.loop !8

for.inc237.us:                                    ; preds = %vector.body, %for.inc237.us
  %i.4320.us = phi i32 [ %inc238.us, %for.inc237.us ], [ 52, %vector.body ]
  %inc238.us = add nsw i32 %i.4320.us, 1
  %exitcond354 = icmp eq i32 %inc238.us, 53
  br i1 %exitcond354, label %for.end239, label %for.inc237.us, !llvm.loop !11

for.body110:                                      ; preds = %for.inc191, %for.cond107.preheader
  %indvars.iv337 = phi i64 [ 0, %for.cond107.preheader ], [ %indvars.iv.next338, %for.inc191 ]
  %30 = trunc i64 %indvars.iv337 to i32
  %31 = trunc i64 %indvars.iv340 to i32
  %call111 = tail call i32 @ix86_hard_regno_mode_ok(i32 %31, i32 %30) #3
  %tobool112 = icmp eq i32 %call111, 0
  br i1 %tobool112, label %if.else181, label %if.then113

if.then113:                                       ; preds = %for.body110
  %call114 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 %30, %struct.rtx_def* %tobool65.lcssa) #3
  %call115 = tail call %struct.rtx_def* @gen_rtx_REG(i32 %30, i32 %31) #3
  %call116 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call114, %struct.rtx_def* %call115) #3
  %call117 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call115, %struct.rtx_def* %call114) #3
  %call118 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call116) #3
  %call119 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call117) #3
  %arrayidx120 = getelementptr inbounds %struct.rtx_def* %call118, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx120 to i32*
  %32 = load i32* %rtint, align 4, !tbaa !6
  %cmp121 = icmp sgt i32 %32, -1
  br i1 %cmp121, label %cond.end129, label %cond.false127

cond.false127:                                    ; preds = %if.then113
  %call128 = tail call i32 @recog_memoized_1(%struct.rtx_def* %call118) #3
  br label %cond.end129

cond.end129:                                      ; preds = %if.then113, %cond.false127
  %cond130 = phi i32 [ %call128, %cond.false127 ], [ %32, %if.then113 ]
  %arrayidx134 = getelementptr inbounds [53 x [59 x i32]]* @reg_save_code, i64 0, i64 %indvars.iv340, i64 %indvars.iv337
  store i32 %cond130, i32* %arrayidx134, align 4, !tbaa !6
  %arrayidx136 = getelementptr inbounds %struct.rtx_def* %call119, i64 0, i32 1, i64 4
  %rtint137 = bitcast %union.rtunion_def* %arrayidx136 to i32*
  %33 = load i32* %rtint137, align 4, !tbaa !6
  %cmp138 = icmp sgt i32 %33, -1
  br i1 %cmp138, label %cond.end146, label %cond.false144

cond.false144:                                    ; preds = %cond.end129
  %call145 = tail call i32 @recog_memoized_1(%struct.rtx_def* %call119) #3
  %.pre = load i32* %arrayidx134, align 4, !tbaa !6
  br label %cond.end146

cond.end146:                                      ; preds = %cond.end129, %cond.false144
  %34 = phi i32 [ %.pre, %cond.false144 ], [ %cond130, %cond.end129 ]
  %cond147 = phi i32 [ %call145, %cond.false144 ], [ %33, %cond.end129 ]
  %arrayidx151 = getelementptr inbounds [53 x [59 x i32]]* @reg_restore_code, i64 0, i64 %indvars.iv340, i64 %indvars.iv337
  store i32 %cond147, i32* %arrayidx151, align 4, !tbaa !6
  %cmp162 = icmp ne i32 %cond147, -1
  %not.cmp156 = icmp ne i32 %34, -1
  %.cmp162 = and i1 %cmp162, %not.cmp156
  %land.ext = zext i1 %.cmp162 to i32
  br i1 %.cmp162, label %if.then165, label %if.end169

if.then165:                                       ; preds = %cond.end146
  tail call void @extract_insn(%struct.rtx_def* %call118) #3
  %call166 = tail call i32 @constrain_operands(i32 1) #3
  tail call void @extract_insn(%struct.rtx_def* %call119) #3
  %call167 = tail call i32 @constrain_operands(i32 1) #3
  %and168 = and i32 %call167, %call166
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %cond.end146
  %ok.0 = phi i32 [ %and168, %if.then165 ], [ %land.ext, %cond.end146 ]
  %tobool170 = icmp eq i32 %ok.0, 0
  br i1 %tobool170, label %if.then171, label %for.inc191

if.then171:                                       ; preds = %if.end169
  store i32 -1, i32* %arrayidx134, align 4, !tbaa !6
  store i32 -1, i32* %arrayidx151, align 4, !tbaa !6
  br label %for.inc191

if.else181:                                       ; preds = %for.body110
  %arrayidx185 = getelementptr inbounds [53 x [59 x i32]]* @reg_save_code, i64 0, i64 %indvars.iv340, i64 %indvars.iv337
  store i32 -1, i32* %arrayidx185, align 4, !tbaa !6
  %arrayidx189 = getelementptr inbounds [53 x [59 x i32]]* @reg_restore_code, i64 0, i64 %indvars.iv340, i64 %indvars.iv337
  store i32 -1, i32* %arrayidx189, align 4, !tbaa !6
  br label %for.inc191

for.inc191:                                       ; preds = %if.end169, %if.else181, %if.then171
  %indvars.iv.next338 = add nuw nsw i64 %indvars.iv337, 1
  %exitcond339 = icmp eq i64 %indvars.iv.next338, 59
  br i1 %exitcond339, label %for.inc194, label %for.body110

for.inc194:                                       ; preds = %for.inc191
  %indvars.iv.next341 = add nuw nsw i64 %indvars.iv340, 1
  %exitcond342 = icmp eq i64 %indvars.iv.next341, 53
  br i1 %exitcond342, label %for.cond197.preheader, label %for.cond107.preheader

for.body208.lr.ph:                                ; preds = %for.cond197.preheader, %for.inc237
  %indvars.iv335 = phi i64 [ %indvars.iv.next336, %for.inc237 ], [ 0, %for.cond197.preheader ]
  %sext356 = shl i64 %indvars.iv335, 32
  %idxprom210 = ashr exact i64 %sext356, 32
  %arrayidx228 = getelementptr inbounds [53 x i8]* @call_fixed_regs, i64 0, i64 %idxprom210
  %shl230 = shl i64 1, %indvars.iv335
  br label %for.body208

for.body208:                                      ; preds = %for.inc234, %for.body208.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc234 ], [ 1, %for.body208.lr.ph ]
  %arrayidx212 = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %idxprom210, i64 %indvars.iv
  %35 = load i32* %arrayidx212, align 4, !tbaa !5
  %idxprom213 = zext i32 %35 to i64
  %arrayidx216 = getelementptr inbounds [53 x [59 x i32]]* @reg_save_code, i64 0, i64 %idxprom210, i64 %idxprom213
  %36 = load i32* %arrayidx216, align 4, !tbaa !6
  %cmp217 = icmp eq i32 %36, -1
  br i1 %cmp217, label %if.then219, label %for.body208.for.inc234_crit_edge

for.body208.for.inc234_crit_edge:                 ; preds = %for.body208
  %.pre355 = trunc i64 %indvars.iv to i32
  br label %for.inc234

if.then219:                                       ; preds = %for.body208
  store i32 0, i32* %arrayidx212, align 4, !tbaa !5
  %37 = trunc i64 %indvars.iv to i32
  %cmp224 = icmp eq i32 %37, 1
  br i1 %cmp224, label %if.then226, label %for.inc234

if.then226:                                       ; preds = %if.then219
  store i8 1, i8* %arrayidx228, align 1, !tbaa !5
  %38 = load i64* @call_fixed_reg_set, align 8, !tbaa !1
  %or231 = or i64 %38, %shl230
  store i64 %or231, i64* @call_fixed_reg_set, align 8, !tbaa !1
  br label %for.inc234

for.inc234:                                       ; preds = %for.body208.for.inc234_crit_edge, %if.then226, %if.then219
  %.pre-phi = phi i32 [ %.pre355, %for.body208.for.inc234_crit_edge ], [ 1, %if.then226 ], [ %37, %if.then219 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp206 = icmp slt i32 %.pre-phi, %div205317
  br i1 %cmp206, label %for.body208, label %for.inc237

for.inc237:                                       ; preds = %for.inc234
  %indvars.iv.next336 = add nuw nsw i64 %indvars.iv335, 1
  %exitcond = icmp eq i64 %indvars.iv.next336, 53
  br i1 %exitcond, label %for.end239, label %for.body208.lr.ph

for.end239:                                       ; preds = %for.inc237, %for.inc237.us
  tail call void @end_sequence() #3
  ret void
}

declare i32 @choose_hard_reg_mode(i32, i32) #1

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

declare i32 @strict_memory_address_p(i32, %struct.rtx_def*) #1

declare void @start_sequence() #1

declare i32 @ix86_hard_regno_mode_ok(i32, i32) #1

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare i32 @recog_memoized_1(%struct.rtx_def*) #1

declare void @extract_insn(%struct.rtx_def*) #1

declare i32 @constrain_operands(i32) #1

declare void @end_sequence() #1

; Function Attrs: nounwind uwtable
define void @init_save_areas() #0 {
entry:
  %0 = load i32* @target_flags, align 4, !tbaa !6
  %and13 = lshr i32 %0, 23
  %1 = and i32 %and13, 4
  %2 = add i32 %1, 4
  %div14 = sdiv i32 16, %2
  %cmp215 = icmp slt i32 %div14, 1
  br i1 %cmp215, label %vector.body, label %entry.entry.split_crit_edge

vector.body:                                      ; preds = %entry, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %entry ]
  %index.next = add i32 %index, 4
  %3 = icmp eq i32 %index.next, 52
  br i1 %3, label %for.inc6.us, label %vector.body, !llvm.loop !12

entry.entry.split_crit_edge:                      ; preds = %entry
  %4 = icmp sgt i32 %div14, 1
  %div14.op = add i32 %div14, -1
  %5 = zext i32 %div14.op to i64
  %.op = shl nuw nsw i64 %5, 3
  %.op.op = add i64 %.op, 8
  %6 = select i1 %4, i64 %.op.op, i64 8
  br label %for.inc6

for.inc6.us:                                      ; preds = %vector.body, %for.inc6.us
  %i.017.us = phi i32 [ %inc7.us, %for.inc6.us ], [ 52, %vector.body ]
  %inc7.us = add nsw i32 %i.017.us, 1
  %exitcond19 = icmp eq i32 %inc7.us, 53
  br i1 %exitcond19, label %for.end8, label %for.inc6.us, !llvm.loop !13

for.inc6:                                         ; preds = %for.inc6, %entry.entry.split_crit_edge
  %indvar = phi i64 [ 0, %entry.entry.split_crit_edge ], [ %indvar.next, %for.inc6 ]
  %scevgep = getelementptr [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %indvar, i64 1
  %scevgep18 = bitcast %struct.rtx_def** %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep18, i8 0, i64 %6, i32 8, i1 false)
  %indvar.next = add i64 %indvar, 1
  %exitcond = icmp eq i64 %indvar.next, 53
  br i1 %exitcond, label %for.end8, label %for.inc6

for.end8:                                         ; preds = %for.inc6, %for.inc6.us
  ret void
}

; Function Attrs: nounwind uwtable
define void @setup_save_areas() #0 {
entry:
  %0 = load i32* @max_regno, align 4, !tbaa !6
  %cmp345 = icmp sgt i32 %0, 53
  br i1 %cmp345, label %for.body.lr.ph, label %for.cond109.preheader

for.body.lr.ph:                                   ; preds = %entry
  %1 = load i16** @reg_renumber, align 8, !tbaa !14
  %2 = load %struct.varray_head_tag** @reg_n_info, align 8, !tbaa !14
  %data = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  %3 = load %struct.function** @cfun, align 8, !tbaa !14
  %emit = getelementptr inbounds %struct.function* %3, i64 0, i32 3
  %4 = load i32* @target_flags, align 4, !tbaa !6
  %and85 = lshr i32 %4, 23
  %5 = and i32 %and85, 4
  %6 = add i32 %5, 4
  %and = lshr i32 %4, 25
  %7 = and i32 %and, 1
  %8 = xor i32 %7, 3
  %and71 = lshr i32 %4, 24
  %9 = and i32 %and71, 2
  %10 = xor i32 %9, 6
  br label %for.body

for.cond109.preheader:                            ; preds = %for.inc106, %entry
  %hard_regs_used.0.lcssa = phi i64 [ 0, %entry ], [ %hard_regs_used.3, %for.inc106 ]
  br label %for.body112

for.body:                                         ; preds = %for.body.lr.ph, %for.inc106
  %indvars.iv371 = phi i64 [ 53, %for.body.lr.ph ], [ %indvars.iv.next372, %for.inc106 ]
  %hard_regs_used.0346 = phi i64 [ 0, %for.body.lr.ph ], [ %hard_regs_used.3, %for.inc106 ]
  %arrayidx = getelementptr inbounds i16* %1, i64 %indvars.iv371
  %11 = load i16* %arrayidx, align 2, !tbaa !16
  %conv = sext i16 %11 to i32
  %cmp1 = icmp sgt i16 %11, -1
  br i1 %cmp1, label %land.lhs.true, label %for.inc106

land.lhs.true:                                    ; preds = %for.body
  %arrayidx4 = getelementptr inbounds [1 x %struct.reg_info_def*]* %reg, i64 0, i64 %indvars.iv371
  %12 = load %struct.reg_info_def** %arrayidx4, align 8, !tbaa !14
  %calls_crossed = getelementptr inbounds %struct.reg_info_def* %12, i64 0, i32 8
  %13 = load i32* %calls_crossed, align 4, !tbaa !18
  %cmp5 = icmp sgt i32 %13, 0
  br i1 %cmp5, label %if.then, label %for.inc106

if.then:                                          ; preds = %land.lhs.true
  %14 = and i16 %11, -8
  %15 = icmp eq i16 %14, 8
  %.off = add i16 %11, -21
  %16 = icmp ult i16 %.off, 8
  %or.cond = or i1 %15, %16
  %.off309 = add i16 %11, -45
  %17 = icmp ult i16 %.off309, 8
  %or.cond315 = or i1 %or.cond, %17
  %.off310 = add i16 %11, -29
  %18 = icmp ult i16 %.off310, 8
  %or.cond317 = or i1 %or.cond315, %18
  %19 = load %struct.emit_status** %emit, align 8, !tbaa !20
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %19, i64 0, i32 12
  %20 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !23
  %arrayidx33 = getelementptr inbounds %struct.rtx_def** %20, i64 %indvars.iv371
  %21 = load %struct.rtx_def** %arrayidx33, align 8, !tbaa !14
  %22 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 0
  %bf.load = load i32* %22, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  br i1 %or.cond317, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %idxprom34312 = zext i32 %bf.clear to i64
  %arrayidx35 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom34312
  %23 = load i32* %arrayidx35, align 4, !tbaa !5
  %cmp36 = icmp eq i32 %23, 5
  br i1 %cmp36, label %cond.end94, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp47 = icmp eq i32 %23, 6
  %phitmp = select i1 %cmp47, i32 2, i32 1
  br label %cond.end94

cond.false:                                       ; preds = %if.then
  switch i32 %bf.clear, label %cond.false74 [
    i32 18, label %cond.end94
    i32 24, label %cond.true70
  ]

cond.true70:                                      ; preds = %cond.false
  br label %cond.end94

cond.false74:                                     ; preds = %cond.false
  %idxprom82311 = zext i32 %bf.clear to i64
  %arrayidx83 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom82311
  %24 = load i8* %arrayidx83, align 1, !tbaa !5
  %conv84 = zext i8 %24 to i32
  %add = add i32 %conv84, -1
  %sub = add i32 %add, %6
  %div = sdiv i32 %sub, %6
  br label %cond.end94

cond.end94:                                       ; preds = %cond.false, %cond.true, %lor.rhs, %cond.false74, %cond.true70
  %cond95 = phi i32 [ %10, %cond.true70 ], [ %div, %cond.false74 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ], [ %8, %cond.false ]
  %add96 = add i32 %cond95, %conv
  %cmp98342 = icmp ult i32 %conv, %add96
  br i1 %cmp98342, label %for.body100.lr.ph, label %for.inc106

for.body100.lr.ph:                                ; preds = %cond.end94
  %25 = zext i32 %conv to i64
  br label %for.body100

for.body100:                                      ; preds = %for.inc, %for.body100.lr.ph
  %indvars.iv367 = phi i64 [ %25, %for.body100.lr.ph ], [ %indvars.iv.next368, %for.inc ]
  %hard_regs_used.1344 = phi i64 [ %hard_regs_used.0346, %for.body100.lr.ph ], [ %hard_regs_used.2, %for.inc ]
  %r.0343 = phi i32 [ %conv, %for.body100.lr.ph ], [ %inc, %for.inc ]
  %arrayidx102 = getelementptr inbounds [53 x i8]* @call_used_regs, i64 0, i64 %indvars.iv367
  %26 = load i8* %arrayidx102, align 1, !tbaa !5
  %tobool103 = icmp eq i8 %26, 0
  br i1 %tobool103, label %for.inc, label %if.then104

if.then104:                                       ; preds = %for.body100
  %shl = shl i64 1, %indvars.iv367
  %or = or i64 %shl, %hard_regs_used.1344
  br label %for.inc

for.inc:                                          ; preds = %for.body100, %if.then104
  %hard_regs_used.2 = phi i64 [ %or, %if.then104 ], [ %hard_regs_used.1344, %for.body100 ]
  %inc = add i32 %r.0343, 1
  %indvars.iv.next368 = add nuw nsw i64 %indvars.iv367, 1
  %exitcond370 = icmp eq i32 %inc, %add96
  br i1 %exitcond370, label %for.inc106, label %for.body100

for.inc106:                                       ; preds = %for.inc, %cond.end94, %for.body, %land.lhs.true
  %hard_regs_used.3 = phi i64 [ %hard_regs_used.0346, %land.lhs.true ], [ %hard_regs_used.0346, %for.body ], [ %hard_regs_used.0346, %cond.end94 ], [ %hard_regs_used.2, %for.inc ]
  %indvars.iv.next372 = add nuw nsw i64 %indvars.iv371, 1
  %27 = trunc i64 %indvars.iv.next372 to i32
  %cmp = icmp slt i32 %27, %0
  br i1 %cmp, label %for.body, label %for.cond109.preheader

for.body112:                                      ; preds = %for.inc210, %for.cond109.preheader
  %indvars.iv364 = phi i64 [ 0, %for.cond109.preheader ], [ %indvars.iv.next365, %for.inc210 ]
  %28 = load i32* @target_flags, align 4, !tbaa !6
  %and113 = lshr i32 %28, 23
  %29 = and i32 %and113, 4
  %30 = add i32 %29, 4
  %div116 = sdiv i32 16, %30
  %cmp118336 = icmp sgt i32 %div116, 0
  br i1 %cmp118336, label %for.body120.lr.ph, label %for.inc210

for.body120.lr.ph:                                ; preds = %for.body112
  %arrayidx130 = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %indvars.iv364, i64 1
  %31 = sext i32 %div116 to i64
  br label %for.body120

for.body120:                                      ; preds = %for.body120.lr.ph, %for.inc208
  %indvars.iv362 = phi i64 [ %31, %for.body120.lr.ph ], [ %indvars.iv.next363, %for.inc208 ]
  %indvars.iv359 = phi i32 [ %div116, %for.body120.lr.ph ], [ %indvars.iv.next360, %for.inc208 ]
  %arrayidx124 = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %indvars.iv364, i64 %indvars.iv362
  %32 = load i32* %arrayidx124, align 4, !tbaa !5
  %cmp125 = icmp eq i32 %32, 0
  br i1 %cmp125, label %for.inc208, label %lor.lhs.false127

lor.lhs.false127:                                 ; preds = %for.body120
  %33 = load %struct.rtx_def** %arrayidx130, align 8, !tbaa !14
  %cmp131 = icmp eq %struct.rtx_def* %33, null
  br i1 %cmp131, label %for.body138, label %for.inc208

for.cond135:                                      ; preds = %for.body138
  %34 = trunc i64 %indvars.iv.next352 to i32
  %35 = trunc i64 %indvars.iv362 to i32
  %cmp136 = icmp slt i32 %34, %35
  br i1 %cmp136, label %for.body138, label %for.body155

for.body138:                                      ; preds = %lor.lhs.false127, %for.cond135
  %indvars.iv351 = phi i64 [ %indvars.iv.next352, %for.cond135 ], [ 0, %lor.lhs.false127 ]
  %36 = add nsw i64 %indvars.iv351, %indvars.iv364
  %arrayidx142 = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %36, i64 1
  %37 = load %struct.rtx_def** %arrayidx142, align 8, !tbaa !14
  %tobool143 = icmp eq %struct.rtx_def* %37, null
  %indvars.iv.next352 = add nuw nsw i64 %indvars.iv351, 1
  br i1 %tobool143, label %for.cond135, label %for.inc208

for.cond152:                                      ; preds = %for.body155
  %38 = trunc i64 %indvars.iv.next355 to i32
  %39 = trunc i64 %indvars.iv362 to i32
  %cmp153 = icmp slt i32 %38, %39
  br i1 %cmp153, label %for.body155, label %for.body187.lr.ph

for.body155:                                      ; preds = %for.cond135, %for.cond152
  %indvars.iv354 = phi i64 [ %indvars.iv.next355, %for.cond152 ], [ 0, %for.cond135 ]
  %add156 = add i64 %indvars.iv354, %indvars.iv364
  %sh_prom157 = and i64 %add156, 4294967295
  %shl158 = shl i64 1, %sh_prom157
  %and159 = and i64 %shl158, %hard_regs_used.0.lcssa
  %tobool160 = icmp eq i64 %and159, 0
  %indvars.iv.next355 = add nuw nsw i64 %indvars.iv354, 1
  br i1 %tobool160, label %for.inc208, label %for.cond152

for.body187.lr.ph:                                ; preds = %for.cond152
  %idxprom177 = sext i32 %32 to i64
  %arrayidx178 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom177
  %40 = load i8* %arrayidx178, align 1, !tbaa !5
  %conv179 = zext i8 %40 to i64
  %call = tail call %struct.rtx_def* @assign_stack_local(i32 %32, i64 %conv179, i32 0) #3
  %arrayidx183 = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %indvars.iv364, i64 %indvars.iv362
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx183, align 8, !tbaa !14
  br label %for.body187

for.body187:                                      ; preds = %for.body187.for.body187_crit_edge, %for.body187.lr.ph
  %41 = phi %struct.rtx_def* [ %call, %for.body187.lr.ph ], [ %.pre, %for.body187.for.body187_crit_edge ]
  %indvars.iv356 = phi i64 [ 0, %for.body187.lr.ph ], [ %indvars.iv.next357, %for.body187.for.body187_crit_edge ]
  %42 = add nsw i64 %indvars.iv356, %indvars.iv364
  %arrayidx195 = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %42, i64 1
  %43 = load i32* %arrayidx195, align 4, !tbaa !5
  %44 = load i32* @target_flags, align 4, !tbaa !6
  %and196 = lshr i32 %44, 23
  %45 = and i32 %and196, 4
  %46 = add i32 %45, 4
  %47 = trunc i64 %indvars.iv356 to i32
  %mul = mul nsw i32 %46, %47
  %conv199 = sext i32 %mul to i64
  %call200 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %41, i32 %43, i64 %conv199, i32 0, i32 1) #3
  %arrayidx204 = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %42, i64 1
  store %struct.rtx_def* %call200, %struct.rtx_def** %arrayidx204, align 8, !tbaa !14
  %indvars.iv.next357 = add nuw nsw i64 %indvars.iv356, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next357 to i32
  %exitcond361 = icmp eq i32 %lftr.wideiv, %indvars.iv359
  br i1 %exitcond361, label %for.inc208, label %for.body187.for.body187_crit_edge

for.body187.for.body187_crit_edge:                ; preds = %for.body187
  %.pre = load %struct.rtx_def** %arrayidx183, align 8, !tbaa !14
  br label %for.body187

for.inc208:                                       ; preds = %for.body138, %for.body155, %for.body187, %lor.lhs.false127, %for.body120
  %indvars.iv.next363 = add nsw i64 %indvars.iv362, -1
  %indvars.iv.next360 = add nsw i32 %indvars.iv359, -1
  %48 = trunc i64 %indvars.iv.next363 to i32
  %cmp118 = icmp sgt i32 %48, 0
  br i1 %cmp118, label %for.body120, label %for.inc210

for.inc210:                                       ; preds = %for.inc208, %for.body112
  %indvars.iv.next365 = add nuw nsw i64 %indvars.iv364, 1
  %exitcond366 = icmp eq i64 %indvars.iv.next365, 53
  br i1 %exitcond366, label %for.body216, label %for.body112

for.body216:                                      ; preds = %for.inc210, %for.inc241
  %indvars.iv349 = phi i64 [ %indvars.iv.next350, %for.inc241 ], [ 0, %for.inc210 ]
  %49 = load i32* @target_flags, align 4, !tbaa !6
  %and217 = lshr i32 %49, 23
  %50 = and i32 %and217, 4
  %51 = add i32 %50, 4
  %div220 = sdiv i32 16, %51
  %cmp222327 = icmp sgt i32 %div220, 0
  br i1 %cmp222327, label %for.body224.lr.ph, label %for.inc241

for.body224.lr.ph:                                ; preds = %for.body216
  %52 = sext i32 %div220 to i64
  br label %for.body224

for.body224:                                      ; preds = %for.body224.lr.ph, %for.inc238
  %indvars.iv = phi i64 [ %52, %for.body224.lr.ph ], [ %indvars.iv.next, %for.inc238 ]
  %arrayidx228 = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %indvars.iv349, i64 %indvars.iv
  %53 = load %struct.rtx_def** %arrayidx228, align 8, !tbaa !14
  %cmp229 = icmp eq %struct.rtx_def* %53, null
  br i1 %cmp229, label %for.inc238, label %if.then231

if.then231:                                       ; preds = %for.body224
  %call236 = tail call i64 @get_frame_alias_set() #3
  tail call void @set_mem_alias_set(%struct.rtx_def* %53, i64 %call236) #3
  br label %for.inc238

for.inc238:                                       ; preds = %for.body224, %if.then231
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %54 = trunc i64 %indvars.iv.next to i32
  %cmp222 = icmp sgt i32 %54, 0
  br i1 %cmp222, label %for.body224, label %for.inc241

for.inc241:                                       ; preds = %for.inc238, %for.body216
  %indvars.iv.next350 = add nuw nsw i64 %indvars.iv349, 1
  %exitcond = icmp eq i64 %indvars.iv.next350, 53
  br i1 %exitcond, label %for.end243, label %for.body216

for.end243:                                       ; preds = %for.inc241
  ret void
}

declare %struct.rtx_def* @assign_stack_local(i32, i64, i32) #1

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #1

declare void @set_mem_alias_set(%struct.rtx_def*, i64) #1

declare i64 @get_frame_alias_set() #1

; Function Attrs: nounwind uwtable
define void @save_call_clobbered_regs() #0 {
entry:
  %save_mode = alloca [53 x i32], align 16
  %hard_regs_to_save = alloca i64, align 8
  %0 = bitcast [53 x i32]* %save_mode to i8*
  call void @llvm.lifetime.start(i64 212, i8* %0) #3
  store i64 0, i64* @hard_regs_saved, align 8, !tbaa !1
  store i32 0, i32* @n_regs_saved, align 4, !tbaa !6
  %1 = load %struct.insn_chain** @reload_insn_chain, align 8, !tbaa !14
  %cmp519 = icmp eq %struct.insn_chain* %1, null
  br i1 %cmp519, label %for.end397, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %2 = load i32* @x86_partial_reg_stall, align 4, !tbaa !6
  %arraydecay = getelementptr inbounds [53 x i32]* %save_mode, i64 0, i64 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %chain.0520 = phi %struct.insn_chain* [ %1, %for.body.lr.ph ], [ %5, %for.cond.backedge ]
  %insn1 = getelementptr inbounds %struct.insn_chain* %chain.0520, i64 0, i32 4
  %3 = load %struct.rtx_def** %insn1, align 8, !tbaa !25
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %next2 = getelementptr inbounds %struct.insn_chain* %chain.0520, i64 0, i32 0
  %5 = load %struct.insn_chain** %next2, align 8, !tbaa !29
  %is_caller_save_insn = getelementptr inbounds %struct.insn_chain* %chain.0520, i64 0, i32 11
  %bf.load3 = load i8* %is_caller_save_insn, align 2
  %bf.clear4 = and i8 %bf.load3, 8
  %tobool = icmp eq i8 %bf.clear4, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 369, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.save_call_clobbered_regs, i64 0, i64 0)) #4
  unreachable

if.end:                                           ; preds = %for.body
  %idxprom492 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom492
  %6 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp5 = icmp eq i8 %6, 105
  br i1 %cmp5, label %if.then7, label %if.end357

if.then7:                                         ; preds = %if.end
  %7 = load i32* @n_regs_saved, align 4, !tbaa !6
  %tobool8 = icmp eq i32 %7, 0
  br i1 %tobool8, label %if.end25, label %if.then9

if.then9:                                         ; preds = %if.then7
  %cmp10 = icmp eq i32 %bf.clear, 33
  br i1 %cmp10, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then9
  %8 = load i64* @hard_regs_saved, align 8, !tbaa !1
  br label %if.end14

if.else:                                          ; preds = %if.then9
  store i64 0, i64* @referenced_regs, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx, align 8, !tbaa !14
  call fastcc void @mark_referenced_regs(%struct.rtx_def* %9)
  %10 = load i64* @hard_regs_saved, align 8, !tbaa !1
  %11 = load i64* @referenced_regs, align 8, !tbaa !1
  %and = and i64 %11, %10
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then12
  %storemerge = phi i64 [ %and, %if.else ], [ %8, %if.then12 ]
  store i64 %storemerge, i64* @referenced_regs, align 8, !tbaa !1
  br label %for.body18

for.body18:                                       ; preds = %for.inc.for.body18_crit_edge, %if.end14
  %12 = phi i64 [ %storemerge, %if.end14 ], [ %.pre536, %for.inc.for.body18_crit_edge ]
  %regno.0505 = phi i32 [ 0, %if.end14 ], [ %inc, %for.inc.for.body18_crit_edge ]
  %sh_prom = zext i32 %regno.0505 to i64
  %shl = shl i64 1, %sh_prom
  %and19 = and i64 %12, %shl
  %tobool20 = icmp eq i64 %and19, 0
  br i1 %tobool20, label %for.inc, label %if.then21

if.then21:                                        ; preds = %for.body18
  %13 = load i32* @target_flags, align 4, !tbaa !6
  %and22 = lshr i32 %13, 23
  %14 = and i32 %and22, 4
  %15 = add i32 %14, 4
  %div = sdiv i32 16, %15
  %call = call fastcc i32 @insert_restore(%struct.insn_chain* %chain.0520, i32 1, i32 %regno.0505, i32 %div, i32* %arraydecay)
  %add = add nsw i32 %call, %regno.0505
  br label %for.inc

for.inc:                                          ; preds = %for.body18, %if.then21
  %regno.1 = phi i32 [ %add, %if.then21 ], [ %regno.0505, %for.body18 ]
  %inc = add nsw i32 %regno.1, 1
  %cmp16 = icmp slt i32 %inc, 53
  br i1 %cmp16, label %for.inc.for.body18_crit_edge, label %if.end25

for.inc.for.body18_crit_edge:                     ; preds = %for.inc
  %.pre536 = load i64* @referenced_regs, align 8, !tbaa !1
  br label %for.body18

if.end25:                                         ; preds = %for.inc, %if.then7
  %cmp26 = icmp eq i32 %bf.clear, 34
  br i1 %cmp26, label %do.body, label %if.end357

do.body:                                          ; preds = %if.end25
  store i64 0, i64* %hard_regs_to_save, align 8, !tbaa !1
  %live_throughout = getelementptr inbounds %struct.insn_chain* %chain.0520, i64 0, i32 5
  call void @reg_set_to_hard_reg_set(i64* %hard_regs_to_save, %struct.bitmap_head_def* %live_throughout) #3
  %16 = load i64* %hard_regs_to_save, align 8, !tbaa !1
  br label %for.body33

for.body33:                                       ; preds = %for.inc48, %do.body
  %indvars.iv = phi i64 [ 0, %do.body ], [ %indvars.iv.next, %for.inc48 ]
  %sh_prom34 = and i64 %indvars.iv, 4294967295
  %shl35 = shl i64 1, %sh_prom34
  %and36 = and i64 %16, %shl35
  %tobool37 = icmp eq i64 %and36, 0
  br i1 %tobool37, label %if.else44, label %if.then38

if.then38:                                        ; preds = %for.body33
  %arrayidx41 = getelementptr inbounds [53 x [5 x i32]]* @regno_save_mode, i64 0, i64 %indvars.iv, i64 1
  %17 = load i32* %arrayidx41, align 4, !tbaa !5
  %arrayidx43 = getelementptr inbounds [53 x i32]* %save_mode, i64 0, i64 %indvars.iv
  store i32 %17, i32* %arrayidx43, align 4, !tbaa !5
  br label %for.inc48

if.else44:                                        ; preds = %for.body33
  %arrayidx46 = getelementptr inbounds [53 x i32]* %save_mode, i64 0, i64 %indvars.iv
  store i32 0, i32* %arrayidx46, align 4, !tbaa !5
  br label %for.inc48

for.inc48:                                        ; preds = %if.then38, %if.else44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 53
  br i1 %exitcond, label %do.body51, label %for.body33

do.body51:                                        ; preds = %for.inc48
  %first = getelementptr inbounds %struct.bitmap_head_def* %live_throughout, i64 0, i32 0
  %18 = load %struct.bitmap_element_def** %first, align 8, !tbaa !30
  %cmp53 = icmp eq %struct.bitmap_element_def* %18, null
  br i1 %cmp53, label %do.end315, label %for.cond69.preheader.lr.ph

for.cond69.preheader.lr.ph:                       ; preds = %do.body51
  %indx60 = getelementptr inbounds %struct.bitmap_element_def* %18, i64 0, i32 2
  %19 = load i32* %indx60, align 4, !tbaa !31
  %cmp61 = icmp eq i32 %19, 0
  %. = select i1 %cmp61, i32 53, i32 0
  br label %for.cond69.preheader

for.cond69.preheader:                             ; preds = %for.cond69.preheader.lr.ph, %for.end310
  %bit_num_.0515 = phi i32 [ %., %for.cond69.preheader.lr.ph ], [ 0, %for.end310 ]
  %ptr_.1514 = phi %struct.bitmap_element_def* [ %18, %for.cond69.preheader.lr.ph ], [ %56, %for.end310 ]
  %indx89 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.1514, i64 0, i32 2
  br label %for.body72

for.body72:                                       ; preds = %for.cond69.preheader, %if.end307
  %indvars.iv529 = phi i64 [ 0, %for.cond69.preheader ], [ %indvars.iv.next530, %if.end307 ]
  %bit_num_.1511 = phi i32 [ %bit_num_.0515, %for.cond69.preheader ], [ 0, %if.end307 ]
  %arrayidx74 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.1514, i64 0, i32 3, i64 %indvars.iv529
  %20 = load i64* %arrayidx74, align 8, !tbaa !1
  %cmp75 = icmp eq i64 %20, 0
  br i1 %cmp75, label %if.end307, label %for.body81.preheader

for.body81.preheader:                             ; preds = %for.body72
  %21 = shl i64 %indvars.iv529, 6
  %22 = zext i32 %bit_num_.1511 to i64
  br label %for.body81

for.body81:                                       ; preds = %for.body81.preheader, %for.inc304
  %indvars.iv526 = phi i64 [ %22, %for.body81.preheader ], [ %indvars.iv.next527, %for.inc304 ]
  %bit_num_.2 = phi i32 [ %bit_num_.1511, %for.body81.preheader ], [ %inc305, %for.inc304 ]
  %word_.0 = phi i64 [ %20, %for.body81.preheader ], [ %word_.1, %for.inc304 ]
  %shl83 = shl i64 1, %indvars.iv526
  %and84 = and i64 %shl83, %word_.0
  %cmp85 = icmp eq i64 %and84, 0
  br i1 %cmp85, label %for.inc304, label %if.then87

if.then87:                                        ; preds = %for.body81
  %neg = xor i64 %shl83, -1
  %and88 = and i64 %word_.0, %neg
  %23 = load i32* %indx89, align 4, !tbaa !31
  %mul = shl i32 %23, 7
  %24 = trunc i64 %indvars.iv526 to i32
  %25 = trunc i64 %21 to i32
  %add91 = add i32 %24, %25
  %add92 = add i32 %add91, %mul
  %idxprom93 = sext i32 %add92 to i64
  %26 = load i16** @reg_renumber, align 8, !tbaa !14
  %arrayidx94 = getelementptr inbounds i16* %26, i64 %idxprom93
  %27 = load i16* %arrayidx94, align 2, !tbaa !16
  %conv95 = sext i16 %27 to i32
  %cmp96 = icmp sgt i16 %27, -1
  br i1 %cmp96, label %if.then98, label %if.else297

if.then98:                                        ; preds = %if.then87
  %28 = and i16 %27, -8
  %29 = icmp eq i16 %28, 8
  %.off = add i16 %27, -21
  %30 = icmp ult i16 %.off, 8
  %or.cond = or i1 %29, %30
  %.off493 = add i16 %27, -45
  %31 = icmp ult i16 %.off493, 8
  %or.cond500 = or i1 %or.cond, %31
  %.off494 = add i16 %27, -29
  %32 = icmp ult i16 %.off494, 8
  %or.cond502 = or i1 %or.cond500, %32
  %33 = load %struct.function** @cfun, align 8, !tbaa !14
  %emit = getelementptr inbounds %struct.function* %33, i64 0, i32 3
  %34 = load %struct.emit_status** %emit, align 8, !tbaa !20
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %34, i64 0, i32 12
  %35 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !23
  %arrayidx122 = getelementptr inbounds %struct.rtx_def** %35, i64 %idxprom93
  %36 = load %struct.rtx_def** %arrayidx122, align 8, !tbaa !14
  %37 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 0
  %bf.load123 = load i32* %37, align 8
  %bf.lshr124 = lshr i32 %bf.load123, 16
  %bf.clear125 = and i32 %bf.lshr124, 255
  br i1 %or.cond502, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then98
  %idxprom126497 = zext i32 %bf.clear125 to i64
  %arrayidx127 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom126497
  %38 = load i32* %arrayidx127, align 4, !tbaa !5
  %cmp128 = icmp eq i32 %38, 5
  br i1 %cmp128, label %cond.end191, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp139 = icmp eq i32 %38, 6
  %phitmp = select i1 %cmp139, i32 2, i32 1
  br label %cond.end191

cond.false:                                       ; preds = %if.then98
  switch i32 %bf.clear125, label %cond.false169 [
    i32 18, label %cond.true151
    i32 24, label %cond.true165
  ]

cond.true151:                                     ; preds = %cond.false
  %39 = load i32* @target_flags, align 4, !tbaa !6
  %and152 = lshr i32 %39, 25
  %40 = and i32 %and152, 1
  %41 = xor i32 %40, 3
  br label %cond.end191

cond.true165:                                     ; preds = %cond.false
  %42 = load i32* @target_flags, align 4, !tbaa !6
  %and166 = lshr i32 %42, 24
  %43 = and i32 %and166, 2
  %44 = xor i32 %43, 6
  br label %cond.end191

cond.false169:                                    ; preds = %cond.false
  %idxprom177495 = zext i32 %bf.clear125 to i64
  %arrayidx178 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom177495
  %45 = load i8* %arrayidx178, align 1, !tbaa !5
  %conv179 = zext i8 %45 to i32
  %46 = load i32* @target_flags, align 4, !tbaa !6
  %and180 = lshr i32 %46, 23
  %47 = and i32 %and180, 4
  %48 = add i32 %47, 4
  %add183 = add i32 %conv179, -1
  %sub = add i32 %add183, %48
  %div187 = sdiv i32 %sub, %48
  br label %cond.end191

cond.end191:                                      ; preds = %cond.true, %lor.rhs, %cond.true151, %cond.false169, %cond.true165
  %cond192 = phi i32 [ %41, %cond.true151 ], [ %44, %cond.true165 ], [ %div187, %cond.false169 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ]
  %.off496 = add i16 %27, -17
  %49 = icmp ult i16 %.off496, 2
  br i1 %49, label %cond.end273, label %cond.false199

cond.false199:                                    ; preds = %cond.end191
  %cmp207 = icmp eq i32 %bf.clear125, 0
  %cmp210 = icmp ne i32 %cond192, 1
  %or.cond402 = and i1 %cmp207, %cmp210
  br i1 %or.cond402, label %cond.end273, label %cond.false213

cond.false213:                                    ; preds = %cond.false199
  br i1 %cmp207, label %cond.true223, label %cond.false225

cond.true223:                                     ; preds = %cond.false213
  %call224 = call i32 @choose_hard_reg_mode(i32 %conv95, i32 %cond192) #3
  br label %cond.end273

cond.false225:                                    ; preds = %cond.false213
  %cmp233 = icmp eq i32 %bf.clear125, 3
  br i1 %cmp233, label %land.lhs.true235, label %cond.false240

land.lhs.true235:                                 ; preds = %cond.false225
  %50 = load i32* @ix86_cpu, align 4, !tbaa !5
  %shl236 = shl i32 1, %50
  %and237 = and i32 %shl236, %2
  %tobool238 = icmp eq i32 %and237, 0
  br i1 %tobool238, label %cond.end273, label %cond.false240

cond.false240:                                    ; preds = %land.lhs.true235, %cond.false225
  %bf.clear247 = and i32 %bf.load123, 16711680
  %cmp248 = icmp eq i32 %bf.clear247, 131072
  %cmp251 = icmp sgt i16 %27, 3
  %or.cond403 = and i1 %cmp248, %cmp251
  br i1 %or.cond403, label %land.lhs.true253, label %cond.false257

land.lhs.true253:                                 ; preds = %cond.false240
  %51 = load i32* @target_flags, align 4, !tbaa !6
  %and254 = and i32 %51, 33554432
  %tobool255 = icmp eq i32 %and254, 0
  br i1 %tobool255, label %cond.end273, label %cond.false257

cond.false257:                                    ; preds = %land.lhs.true253, %cond.false240
  br label %cond.end273

cond.end273:                                      ; preds = %land.lhs.true235, %land.lhs.true253, %cond.false199, %cond.false257, %cond.true223, %cond.end191
  %cond274 = phi i32 [ 0, %cond.end191 ], [ 0, %cond.false199 ], [ %call224, %cond.true223 ], [ 4, %land.lhs.true235 ], [ %bf.clear125, %cond.false257 ], [ 4, %land.lhs.true253 ]
  %idxprom275 = sext i32 %cond274 to i64
  %arrayidx276 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom275
  %52 = load i16* %arrayidx276, align 2, !tbaa !16
  %idxprom278 = sext i16 %27 to i64
  %arrayidx279 = getelementptr inbounds [53 x i32]* %save_mode, i64 0, i64 %idxprom278
  %53 = load i32* %arrayidx279, align 4, !tbaa !5
  %idxprom280 = sext i32 %53 to i64
  %arrayidx281 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom280
  %54 = load i16* %arrayidx281, align 2, !tbaa !16
  %cmp283 = icmp ugt i16 %52, %54
  br i1 %cmp283, label %if.then285, label %while.cond289.preheader

if.then285:                                       ; preds = %cond.end273
  store i32 %cond274, i32* %arrayidx279, align 4, !tbaa !5
  br label %while.cond289.preheader

while.cond289.preheader:                          ; preds = %if.then285, %cond.end273
  %cmp290508 = icmp sgt i32 %cond192, 0
  br i1 %cmp290508, label %while.body292.lr.ph, label %if.end298

while.body292.lr.ph:                              ; preds = %while.cond289.preheader
  %hard_regs_to_save.promoted = load i64* %hard_regs_to_save, align 8, !tbaa !1
  br label %while.body292

while.body292:                                    ; preds = %while.body292.lr.ph, %while.body292
  %or510 = phi i64 [ %hard_regs_to_save.promoted, %while.body292.lr.ph ], [ %or, %while.body292 ]
  %dec509.in = phi i32 [ %cond192, %while.body292.lr.ph ], [ %dec509, %while.body292 ]
  %dec509 = add nsw i32 %dec509.in, -1
  %add293 = add nsw i32 %dec509, %conv95
  %sh_prom294 = zext i32 %add293 to i64
  %shl295 = shl i64 1, %sh_prom294
  %or = or i64 %or510, %shl295
  %cmp290 = icmp sgt i32 %dec509, 0
  br i1 %cmp290, label %while.body292, label %while.cond289.if.end298_crit_edge

if.else297:                                       ; preds = %if.then87
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 433, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.save_call_clobbered_regs, i64 0, i64 0)) #4
  unreachable

while.cond289.if.end298_crit_edge:                ; preds = %while.body292
  store i64 %or, i64* %hard_regs_to_save, align 8, !tbaa !1
  br label %if.end298

if.end298:                                        ; preds = %while.cond289.if.end298_crit_edge, %while.cond289.preheader
  %cmp299 = icmp eq i64 %and88, 0
  br i1 %cmp299, label %if.end307, label %for.inc304

for.inc304:                                       ; preds = %for.body81, %if.end298
  %word_.1 = phi i64 [ %and88, %if.end298 ], [ %word_.0, %for.body81 ]
  %inc305 = add i32 %bit_num_.2, 1
  %cmp79.old = icmp ult i32 %inc305, 64
  %indvars.iv.next527 = add nuw nsw i64 %indvars.iv526, 1
  br i1 %cmp79.old, label %for.body81, label %if.end307

if.end307:                                        ; preds = %for.inc304, %if.end298, %for.body72
  %indvars.iv.next530 = add nuw nsw i64 %indvars.iv529, 1
  %55 = trunc i64 %indvars.iv.next530 to i32
  %cmp70 = icmp ult i32 %55, 2
  br i1 %cmp70, label %for.body72, label %for.end310

for.end310:                                       ; preds = %if.end307
  %next312 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.1514, i64 0, i32 0
  %56 = load %struct.bitmap_element_def** %next312, align 8, !tbaa !33
  %cmp66 = icmp eq %struct.bitmap_element_def* %56, null
  br i1 %cmp66, label %do.end315, label %for.cond69.preheader

do.end315:                                        ; preds = %for.end310, %do.body51
  store i64 0, i64* @this_insn_sets, align 8, !tbaa !1
  %arrayidx317 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 3
  %rtx318 = bitcast %union.rtunion_def* %arrayidx317 to %struct.rtx_def**
  %57 = load %struct.rtx_def** %rtx318, align 8, !tbaa !14
  call void @note_stores(%struct.rtx_def* %57, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @mark_set_regs, i8* null) #3
  %58 = load i64* @call_fixed_reg_set, align 8, !tbaa !1
  %neg319 = xor i64 %58, -1
  %59 = load i64* %hard_regs_to_save, align 8, !tbaa !1
  %and320 = and i64 %59, %neg319
  %60 = load i64* @this_insn_sets, align 8, !tbaa !1
  %neg321 = xor i64 %60, -1
  %and322 = and i64 %and320, %neg321
  %61 = load i64* @hard_regs_saved, align 8, !tbaa !1
  %neg323 = xor i64 %61, -1
  %and324 = and i64 %and322, %neg323
  %62 = load i64* @call_used_reg_set, align 8, !tbaa !1
  %and325 = and i64 %and324, %62
  store i64 %and325, i64* %hard_regs_to_save, align 8, !tbaa !1
  br label %for.body329

for.body329:                                      ; preds = %for.inc339.for.body329_crit_edge, %do.end315
  %63 = phi i64 [ %and325, %do.end315 ], [ %.pre, %for.inc339.for.body329_crit_edge ]
  %regno29.1516 = phi i32 [ 0, %do.end315 ], [ %inc340, %for.inc339.for.body329_crit_edge ]
  %sh_prom330 = zext i32 %regno29.1516 to i64
  %shl331 = shl i64 1, %sh_prom330
  %and332 = and i64 %63, %shl331
  %tobool333 = icmp eq i64 %and332, 0
  br i1 %tobool333, label %for.inc339, label %if.then334

if.then334:                                       ; preds = %for.body329
  %idxprom.i = sext i32 %regno29.1516 to i64
  %arrayidx1.i = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %idxprom.i, i64 1
  %64 = load %struct.rtx_def** %arrayidx1.i, align 8, !tbaa !14
  %cmp.i = icmp eq %struct.rtx_def* %64, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then334
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 724, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.insert_save, i64 0, i64 0)) #4
  unreachable

if.end.i:                                         ; preds = %if.then334
  %65 = load i32* @target_flags, align 4, !tbaa !6
  %and.i = lshr i32 %65, 23
  %66 = and i32 %and.i, 4
  %67 = add i32 %66, 4
  %div.i = sdiv i32 16, %67
  %cmp29.i = icmp sgt i32 %div.i, 0
  br i1 %cmp29.i, label %for.body.lr.ph.i, label %for.end21.i

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %68 = sext i32 %div.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc20.i, %for.body.lr.ph.i
  %indvars.iv17.i = phi i64 [ %68, %for.body.lr.ph.i ], [ %indvars.iv.next18.i, %for.inc20.i ]
  %arrayidx6.i = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %idxprom.i, i64 %indvars.iv17.i
  %69 = load %struct.rtx_def** %arrayidx6.i, align 8, !tbaa !14
  %cmp7.i = icmp eq %struct.rtx_def* %69, null
  br i1 %cmp7.i, label %for.inc20.i, label %for.body12.i.preheader

for.body12.i.preheader:                           ; preds = %for.body.i
  %70 = trunc i64 %indvars.iv17.i to i32
  br label %for.body12.i

for.cond10.i:                                     ; preds = %for.body12.i
  %71 = trunc i64 %indvars.iv.next16.i to i32
  %cmp11.i = icmp slt i32 %71, %70
  br i1 %cmp11.i, label %for.body12.i, label %for.end21.i

for.body12.i:                                     ; preds = %for.body12.i.preheader, %for.cond10.i
  %indvars.iv15.i = phi i64 [ %indvars.iv.next16.i, %for.cond10.i ], [ 0, %for.body12.i.preheader ]
  %72 = trunc i64 %indvars.iv15.i to i32
  %add.i = add nsw i32 %72, %regno29.1516
  %sh_prom.i = zext i32 %add.i to i64
  %shl.i = shl i64 1, %sh_prom.i
  %and13.i = and i64 %shl.i, %63
  %tobool14.i = icmp eq i64 %and13.i, 0
  %indvars.iv.next16.i = add nuw nsw i64 %indvars.iv15.i, 1
  br i1 %tobool14.i, label %for.inc20.i, label %for.cond10.i

for.inc20.i:                                      ; preds = %for.body12.i, %for.body.i
  %indvars.iv.next18.i = add nsw i64 %indvars.iv17.i, -1
  %73 = trunc i64 %indvars.iv.next18.i to i32
  %cmp2.i = icmp sgt i32 %73, 0
  br i1 %cmp2.i, label %for.body.i, label %for.end21.i

for.end21.i:                                      ; preds = %for.inc20.i, %for.cond10.i, %if.end.i
  %numregs.0.i = phi i32 [ 0, %if.end.i ], [ %70, %for.cond10.i ], [ 0, %for.inc20.i ]
  %idxprom22.i = zext i32 %numregs.0.i to i64
  %arrayidx25.i = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %idxprom.i, i64 %idxprom22.i
  %74 = load %struct.rtx_def** %arrayidx25.i, align 8, !tbaa !14
  %arrayidx27.i = getelementptr inbounds [53 x i32]* %save_mode, i64 0, i64 %idxprom.i
  %75 = load i32* %arrayidx27.i, align 4, !tbaa !5
  %cmp28.i = icmp eq i32 %75, 0
  br i1 %cmp28.i, label %if.end96.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %for.end21.i
  %76 = getelementptr inbounds %struct.rtx_def* %74, i64 0, i32 0
  %bf.load.i = load i32* %76, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %cmp31.i = icmp eq i32 %75, %bf.clear.i
  br i1 %cmp31.i, label %if.end96.i, label %land.lhs.true32.i

land.lhs.true32.i:                                ; preds = %land.lhs.true.i
  %77 = and i32 %regno29.1516, -8
  %78 = icmp eq i32 %77, 8
  %regno.off.i = add i32 %regno29.1516, -21
  %79 = icmp ult i32 %regno.off.i, 8
  %or.cond.i = or i1 %78, %79
  %regno.off1.i = add i32 %regno29.1516, -45
  %80 = icmp ult i32 %regno.off1.i, 8
  %or.cond5.i = or i1 %or.cond.i, %80
  %regno.off2.i = add i32 %regno29.1516, -29
  %81 = icmp ult i32 %regno.off2.i, 8
  %or.cond7.i = or i1 %or.cond5.i, %81
  br i1 %or.cond7.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %land.lhs.true32.i
  %idxprom49.i = sext i32 %75 to i64
  %arrayidx50.i = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom49.i
  %82 = load i32* %arrayidx50.i, align 4, !tbaa !5
  %cmp51.i = icmp eq i32 %82, 5
  br i1 %cmp51.i, label %cond.end89.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %cond.true.i
  %cmp56.i = icmp eq i32 %82, 6
  %phitmp.i = select i1 %cmp56.i, i32 2, i32 1
  br label %cond.end89.i

cond.false.i:                                     ; preds = %land.lhs.true32.i
  switch i32 %75, label %cond.false73.i [
    i32 18, label %cond.true61.i
    i32 24, label %cond.true69.i
  ]

cond.true61.i:                                    ; preds = %cond.false.i
  %and62.i = lshr i32 %65, 25
  %83 = and i32 %and62.i, 1
  %84 = xor i32 %83, 3
  br label %cond.end89.i

cond.true69.i:                                    ; preds = %cond.false.i
  %and70.i = lshr i32 %65, 24
  %85 = and i32 %and70.i, 2
  %86 = xor i32 %85, 6
  br label %cond.end89.i

cond.false73.i:                                   ; preds = %cond.false.i
  %idxprom76.i = sext i32 %75 to i64
  %arrayidx77.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom76.i
  %87 = load i8* %arrayidx77.i, align 1, !tbaa !5
  %conv.i = zext i8 %87 to i32
  %add81.i522 = or i32 %66, 3
  %sub.i = add i32 %add81.i522, %conv.i
  %div85.i = sdiv i32 %sub.i, %67
  br label %cond.end89.i

cond.end89.i:                                     ; preds = %cond.false73.i, %cond.true69.i, %cond.true61.i, %lor.rhs.i, %cond.true.i
  %cond90.i = phi i32 [ %84, %cond.true61.i ], [ %86, %cond.true69.i ], [ %div85.i, %cond.false73.i ], [ 2, %cond.true.i ], [ %phitmp.i, %lor.rhs.i ]
  %cmp91.i = icmp eq i32 %numregs.0.i, %cond90.i
  br i1 %cmp91.i, label %if.then93.i, label %if.end96.i

if.then93.i:                                      ; preds = %cond.end89.i
  %call.i = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %74, i32 %75, i64 0, i32 1, i32 1) #3
  br label %if.end96.i

if.end96.i:                                       ; preds = %if.then93.i, %cond.end89.i, %land.lhs.true.i, %for.end21.i
  %mem.0.i = phi %struct.rtx_def* [ %call.i, %if.then93.i ], [ %74, %cond.end89.i ], [ %74, %land.lhs.true.i ], [ %74, %for.end21.i ]
  %88 = getelementptr inbounds %struct.rtx_def* %mem.0.i, i64 0, i32 0
  %bf.load97.i = load i32* %88, align 8
  %bf.lshr98.i = lshr i32 %bf.load97.i, 16
  %bf.clear99.i = and i32 %bf.lshr98.i, 255
  %call100.i = call %struct.rtx_def* @gen_rtx_REG(i32 %bf.clear99.i, i32 %regno29.1516) #3
  %call101.i = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %mem.0.i, %struct.rtx_def* %call100.i) #3
  %bf.load102.i = load i32* %88, align 8
  %bf.lshr103.i = lshr i32 %bf.load102.i, 16
  %bf.clear104.i = and i32 %bf.lshr103.i, 255
  %idxprom105.i = zext i32 %bf.clear104.i to i64
  %arrayidx108.i = getelementptr inbounds [53 x [59 x i32]]* @reg_save_code, i64 0, i64 %idxprom.i, i64 %idxprom105.i
  %89 = load i32* %arrayidx108.i, align 4, !tbaa !6
  %call109.i = call fastcc %struct.insn_chain* @insert_one_insn(%struct.insn_chain* %chain.0520, i32 1, i32 %89, %struct.rtx_def* %call101.i) #3
  %cmp1113.i = icmp eq i32 %numregs.0.i, 0
  br i1 %cmp1113.i, label %insert_save.exit, label %for.body113.lr.ph.i

for.body113.lr.ph.i:                              ; preds = %if.end96.i
  %dead_or_set.i = getelementptr inbounds %struct.insn_chain* %call109.i, i64 0, i32 6
  br label %for.body113.i

for.body113.i:                                    ; preds = %for.body113.i, %for.body113.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body113.lr.ph.i ], [ %indvars.iv.next.i, %for.body113.i ]
  %90 = trunc i64 %indvars.iv.i to i32
  %add114.i = add i32 %90, %regno29.1516
  %sh_prom115.i = zext i32 %add114.i to i64
  %shl116.i = shl i64 1, %sh_prom115.i
  %91 = load i64* @hard_regs_saved, align 8, !tbaa !1
  %or.i = or i64 %shl116.i, %91
  store i64 %or.i, i64* @hard_regs_saved, align 8, !tbaa !1
  call void @bitmap_set_bit(%struct.bitmap_head_def* %dead_or_set.i, i32 %add114.i) #3
  %92 = load i32* @n_regs_saved, align 4, !tbaa !6
  %inc118.i = add nsw i32 %92, 1
  store i32 %inc118.i, i32* @n_regs_saved, align 4, !tbaa !6
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32
  %exitcond532 = icmp eq i32 %lftr.wideiv, %numregs.0.i
  br i1 %exitcond532, label %insert_save.exit, label %for.body113.i

insert_save.exit:                                 ; preds = %for.body113.i, %if.end96.i
  %sub122.i = add i32 %regno29.1516, -1
  %add337 = add i32 %sub122.i, %numregs.0.i
  br label %for.inc339

for.inc339:                                       ; preds = %for.body329, %insert_save.exit
  %regno29.2 = phi i32 [ %add337, %insert_save.exit ], [ %regno29.1516, %for.body329 ]
  %inc340 = add nsw i32 %regno29.2, 1
  %cmp327 = icmp slt i32 %inc340, 53
  br i1 %cmp327, label %for.inc339.for.body329_crit_edge, label %for.end341

for.inc339.for.body329_crit_edge:                 ; preds = %for.inc339
  %.pre = load i64* %hard_regs_to_save, align 8, !tbaa !1
  br label %for.body329

for.end341:                                       ; preds = %for.inc339
  store i32 0, i32* @n_regs_saved, align 4, !tbaa !6
  %93 = load i64* @hard_regs_saved, align 8, !tbaa !1
  br label %for.body345

for.body345:                                      ; preds = %for.inc353, %for.end341
  %94 = phi i32 [ 0, %for.end341 ], [ %95, %for.inc353 ]
  %indvars.iv533 = phi i64 [ 0, %for.end341 ], [ %indvars.iv.next534, %for.inc353 ]
  %shl347 = shl i64 1, %indvars.iv533
  %and348 = and i64 %93, %shl347
  %tobool349 = icmp eq i64 %and348, 0
  br i1 %tobool349, label %for.inc353, label %if.then350

if.then350:                                       ; preds = %for.body345
  %inc351 = add nsw i32 %94, 1
  store i32 %inc351, i32* @n_regs_saved, align 4, !tbaa !6
  br label %for.inc353

for.inc353:                                       ; preds = %for.body345, %if.then350
  %95 = phi i32 [ %94, %for.body345 ], [ %inc351, %if.then350 ]
  %indvars.iv.next534 = add nuw nsw i64 %indvars.iv533, 1
  %exitcond535 = icmp eq i64 %indvars.iv.next534, 53
  br i1 %exitcond535, label %if.end357, label %for.body345

if.end357:                                        ; preds = %for.inc353, %if.end25, %if.end
  %96 = load %struct.insn_chain** %next2, align 8, !tbaa !29
  %cmp359 = icmp eq %struct.insn_chain* %96, null
  br i1 %cmp359, label %if.then366, label %lor.lhs.false361

lor.lhs.false361:                                 ; preds = %if.end357
  %block = getelementptr inbounds %struct.insn_chain* %96, i64 0, i32 3
  %97 = load i32* %block, align 4, !tbaa !34
  %block363 = getelementptr inbounds %struct.insn_chain* %chain.0520, i64 0, i32 3
  %98 = load i32* %block363, align 4, !tbaa !34
  %cmp364 = icmp sgt i32 %97, %98
  %99 = load i32* @n_regs_saved, align 4
  %tobool368 = icmp ne i32 %99, 0
  %or.cond406 = and i1 %cmp364, %tobool368
  br i1 %or.cond406, label %for.body373, label %for.cond.backedge

if.then366:                                       ; preds = %if.end357
  %.old405 = load i32* @n_regs_saved, align 4, !tbaa !6
  %tobool368.old = icmp eq i32 %.old405, 0
  br i1 %tobool368.old, label %for.cond.backedge, label %for.body373

for.cond.backedge:                                ; preds = %for.inc391, %if.then366, %lor.lhs.false361
  %cmp = icmp eq %struct.insn_chain* %5, null
  br i1 %cmp, label %for.end397, label %for.body

for.body373:                                      ; preds = %lor.lhs.false361, %if.then366, %for.inc391
  %regno367.0518 = phi i32 [ %inc392, %for.inc391 ], [ 0, %if.then366 ], [ 0, %lor.lhs.false361 ]
  %100 = load i64* @hard_regs_saved, align 8, !tbaa !1
  %sh_prom374 = zext i32 %regno367.0518 to i64
  %shl375 = shl i64 1, %sh_prom374
  %and376 = and i64 %100, %shl375
  %tobool377 = icmp eq i64 %and376, 0
  br i1 %tobool377, label %for.inc391, label %if.then378

if.then378:                                       ; preds = %for.body373
  %bf.load379 = load i32* %4, align 8
  %bf.clear380 = and i32 %bf.load379, 65535
  %cmp381 = icmp eq i32 %bf.clear380, 33
  %conv382 = zext i1 %cmp381 to i32
  %101 = load i32* @target_flags, align 4, !tbaa !6
  %and383 = lshr i32 %101, 23
  %102 = and i32 %and383, 4
  %103 = add i32 %102, 4
  %div386 = sdiv i32 16, %103
  %call388 = call fastcc i32 @insert_restore(%struct.insn_chain* %chain.0520, i32 %conv382, i32 %regno367.0518, i32 %div386, i32* %arraydecay)
  %add389 = add nsw i32 %call388, %regno367.0518
  br label %for.inc391

for.inc391:                                       ; preds = %for.body373, %if.then378
  %regno367.1 = phi i32 [ %add389, %if.then378 ], [ %regno367.0518, %for.body373 ]
  %inc392 = add nsw i32 %regno367.1, 1
  %cmp371 = icmp slt i32 %inc392, 53
  br i1 %cmp371, label %for.body373, label %for.cond.backedge

for.end397:                                       ; preds = %for.cond.backedge, %entry
  call void @llvm.lifetime.end(i64 212, i8* %0) #3
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #3

; Function Attrs: nounwind uwtable
define internal fastcc void @mark_referenced_regs(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %if.else169, %if.then163, %entry
  %x.tr = phi %struct.rtx_def* [ %x, %entry ], [ %35, %if.then163 ], [ %37, %if.else169 ]
  %0 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.end51 [
    i32 47, label %if.then
    i32 49, label %if.then3
  ]

if.then:                                          ; preds = %tailrecurse
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !14
  tail call fastcc void @mark_referenced_regs(%struct.rtx_def* %1)
  br label %if.then3

if.then3:                                         ; preds = %if.then, %tailrecurse
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 0
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx6, align 8, !tbaa !14
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load7 = load i32* %3, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  switch i32 %bf.clear8, label %if.end51 [
    i32 69, label %for.end225
    i32 61, label %for.end225
    i32 59, label %for.end225
    i32 63, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %if.then3
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx18, align 8, !tbaa !14
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load19 = load i32* %5, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 61
  br i1 %cmp21, label %land.lhs.true22, label %if.then57

land.lhs.true22:                                  ; preds = %land.lhs.true
  %bf.lshr = lshr i32 %bf.load7, 16
  %bf.clear24 = and i32 %bf.lshr, 255
  %idxprom288 = zext i32 %bf.clear24 to i64
  %arrayidx25 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom288
  %6 = load i8* %arrayidx25, align 1, !tbaa !5
  %bf.lshr30 = lshr i32 %bf.load19, 16
  %bf.clear31 = and i32 %bf.lshr30, 255
  %idxprom32289 = zext i32 %bf.clear31 to i64
  %arrayidx33 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom32289
  %7 = load i8* %arrayidx33, align 1, !tbaa !5
  %cmp35 = icmp ult i8 %6, %7
  br i1 %cmp35, label %lor.lhs.false37, label %for.end225

lor.lhs.false37:                                  ; preds = %land.lhs.true22
  %conv34 = zext i8 %7 to i32
  %8 = load i32* @target_flags, align 4, !tbaa !6
  %and = lshr i32 %8, 23
  %9 = and i32 %and, 4
  %10 = add i32 %9, 4
  %cmp47 = icmp ugt i32 %conv34, %10
  br i1 %cmp47, label %if.end51.if.then57_crit_edge315, label %for.end225

if.end51:                                         ; preds = %tailrecurse, %if.then3
  %code.0 = phi i32 [ %bf.clear8, %if.then3 ], [ %bf.clear, %tailrecurse ]
  %x.addr.0 = phi %struct.rtx_def* [ %2, %if.then3 ], [ %x.tr, %tailrecurse ]
  switch i32 %code.0, label %if.end63 [
    i32 66, label %if.end51.if.then57_crit_edge
    i32 63, label %if.end51.if.then57_crit_edge315
  ]

if.end51.if.then57_crit_edge315:                  ; preds = %lor.lhs.false37, %if.end51
  %x.addr.0320 = phi %struct.rtx_def* [ %x.addr.0, %if.end51 ], [ %2, %lor.lhs.false37 ]
  %arrayidx59.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %x.addr.0320, i64 0, i32 1, i64 0
  %rtx60.phi.trans.insert = bitcast %union.rtunion_def* %arrayidx59.phi.trans.insert to %struct.rtx_def**
  %.pre318 = load %struct.rtx_def** %rtx60.phi.trans.insert, align 8, !tbaa !14
  br label %if.then57

if.end51.if.then57_crit_edge:                     ; preds = %if.end51
  %arrayidx59.phi.trans.insert316 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtx60.phi.trans.insert317 = bitcast %union.rtunion_def* %arrayidx59.phi.trans.insert316 to %struct.rtx_def**
  %.pre319 = load %struct.rtx_def** %rtx60.phi.trans.insert317, align 8, !tbaa !14
  br label %if.then57

if.then57:                                        ; preds = %if.end51.if.then57_crit_edge315, %if.end51.if.then57_crit_edge, %land.lhs.true
  %11 = phi %struct.rtx_def* [ %.pre319, %if.end51.if.then57_crit_edge ], [ %.pre318, %if.end51.if.then57_crit_edge315 ], [ %4, %land.lhs.true ]
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load61 = load i32* %12, align 8
  %bf.clear62 = and i32 %bf.load61, 65535
  br label %if.end63

if.end63:                                         ; preds = %if.end51, %if.then57
  %code.1 = phi i32 [ %bf.clear62, %if.then57 ], [ %code.0, %if.end51 ]
  %x.addr.1 = phi %struct.rtx_def* [ %11, %if.then57 ], [ %x.addr.0, %if.end51 ]
  %cmp64 = icmp eq i32 %code.1, 61
  br i1 %cmp64, label %if.then66, label %if.end180

if.then66:                                        ; preds = %if.end63
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %x.addr.1, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx68 to i32*
  %13 = load i32* %rtuint, align 4, !tbaa !6
  %cmp69 = icmp slt i32 %13, 53
  br i1 %cmp69, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.then66
  %idxprom71 = sext i32 %13 to i64
  %14 = load i16** @reg_renumber, align 8, !tbaa !14
  %arrayidx72 = getelementptr inbounds i16* %14, i64 %idxprom71
  %15 = load i16* %arrayidx72, align 2, !tbaa !16
  %conv73 = sext i16 %15 to i32
  br label %cond.end

cond.end:                                         ; preds = %if.then66, %cond.false
  %cond74 = phi i32 [ %conv73, %cond.false ], [ %13, %if.then66 ]
  %cmp75 = icmp sgt i32 %cond74, -1
  br i1 %cmp75, label %if.then77, label %if.else

if.then77:                                        ; preds = %cond.end
  %16 = and i32 %cond74, -8
  %17 = icmp eq i32 %16, 8
  %cond74.off = add i32 %cond74, -21
  %18 = icmp ult i32 %cond74.off, 8
  %or.cond = or i1 %17, %18
  %cond74.off284 = add i32 %cond74, -45
  %19 = icmp ult i32 %cond74.off284, 8
  %or.cond292 = or i1 %or.cond, %19
  %cond74.off285 = add i32 %cond74, -29
  %20 = icmp ult i32 %cond74.off285, 8
  %or.cond294 = or i1 %or.cond292, %20
  %21 = getelementptr inbounds %struct.rtx_def* %x.addr.1, i64 0, i32 0
  %bf.load102 = load i32* %21, align 8
  %bf.lshr103 = lshr i32 %bf.load102, 16
  %bf.clear104 = and i32 %bf.lshr103, 255
  br i1 %or.cond294, label %cond.true101, label %cond.false117

cond.true101:                                     ; preds = %if.then77
  %idxprom105287 = zext i32 %bf.clear104 to i64
  %arrayidx106 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom105287
  %22 = load i32* %arrayidx106, align 4, !tbaa !5
  %cmp107 = icmp eq i32 %22, 5
  br i1 %cmp107, label %while.body.lr.ph, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true101
  %cmp114 = icmp eq i32 %22, 6
  %phitmp = select i1 %cmp114, i32 2, i32 1
  br label %while.body.lr.ph

cond.false117:                                    ; preds = %if.then77
  switch i32 %bf.clear104, label %while.cond.preheader [
    i32 18, label %cond.true123
    i32 24, label %cond.true133
  ]

cond.true123:                                     ; preds = %cond.false117
  %23 = load i32* @target_flags, align 4, !tbaa !6
  %and124 = lshr i32 %23, 25
  %24 = and i32 %and124, 1
  %25 = xor i32 %24, 3
  br label %while.body.lr.ph

cond.true133:                                     ; preds = %cond.false117
  %26 = load i32* @target_flags, align 4, !tbaa !6
  %and134 = lshr i32 %26, 24
  %27 = and i32 %and134, 2
  %28 = xor i32 %27, 6
  br label %while.body.lr.ph

while.cond.preheader:                             ; preds = %cond.false117
  %idxprom141286 = zext i32 %bf.clear104 to i64
  %arrayidx142 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom141286
  %29 = load i8* %arrayidx142, align 1, !tbaa !5
  %conv143 = zext i8 %29 to i32
  %30 = load i32* @target_flags, align 4, !tbaa !6
  %and144 = lshr i32 %30, 23
  %31 = and i32 %and144, 4
  %32 = add i32 %31, 4
  %add = add i32 %conv143, -1
  %sub = add i32 %add, %32
  %div = sdiv i32 %sub, %32
  %cmp156301 = icmp sgt i32 %div, 0
  br i1 %cmp156301, label %while.body.lr.ph, label %for.end225

while.body.lr.ph:                                 ; preds = %cond.true101, %lor.rhs, %cond.true123, %cond.true133, %while.cond.preheader
  %nregs.0.ph322 = phi i32 [ %div, %while.cond.preheader ], [ %28, %cond.true133 ], [ %25, %cond.true123 ], [ %phitmp, %lor.rhs ], [ 2, %cond.true101 ]
  %referenced_regs.promoted = load i64* @referenced_regs, align 8, !tbaa !1
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %or303 = phi i64 [ %referenced_regs.promoted, %while.body.lr.ph ], [ %or, %while.body ]
  %dec302.in = phi i32 [ %nregs.0.ph322, %while.body.lr.ph ], [ %dec302, %while.body ]
  %dec302 = add nsw i32 %dec302.in, -1
  %add158 = add nsw i32 %dec302, %cond74
  %sh_prom = zext i32 %add158 to i64
  %shl = shl i64 1, %sh_prom
  %or = or i64 %or303, %shl
  %cmp156 = icmp sgt i32 %dec302, 0
  br i1 %cmp156, label %while.body, label %while.cond.for.end225.loopexit_crit_edge

if.else:                                          ; preds = %cond.end
  %idxprom159 = sext i32 %13 to i64
  %33 = load %struct.rtx_def*** @reg_equiv_mem, align 8, !tbaa !14
  %arrayidx160 = getelementptr inbounds %struct.rtx_def** %33, i64 %idxprom159
  %34 = load %struct.rtx_def** %arrayidx160, align 8, !tbaa !14
  %cmp161 = icmp eq %struct.rtx_def* %34, null
  br i1 %cmp161, label %if.else169, label %if.then163

if.then163:                                       ; preds = %if.else
  %arrayidx167 = getelementptr inbounds %struct.rtx_def* %34, i64 0, i32 1, i64 0
  %rtx168 = bitcast %union.rtunion_def* %arrayidx167 to %struct.rtx_def**
  %35 = load %struct.rtx_def** %rtx168, align 8, !tbaa !14
  br label %tailrecurse

if.else169:                                       ; preds = %if.else
  %36 = load %struct.rtx_def*** @reg_equiv_address, align 8, !tbaa !14
  %arrayidx171 = getelementptr inbounds %struct.rtx_def** %36, i64 %idxprom159
  %37 = load %struct.rtx_def** %arrayidx171, align 8, !tbaa !14
  %cmp172 = icmp eq %struct.rtx_def* %37, null
  br i1 %cmp172, label %for.end225, label %tailrecurse

if.end180:                                        ; preds = %if.end63
  %idxprom181 = sext i32 %code.1 to i64
  %arrayidx182 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom181
  %38 = load i8** %arrayidx182, align 8, !tbaa !14
  %arrayidx184 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom181
  %39 = load i8* %arrayidx184, align 1, !tbaa !5
  %cmp187308 = icmp eq i8 %39, 0
  br i1 %cmp187308, label %for.end225, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end180
  %40 = zext i8 %39 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv313 = phi i64 [ %40, %for.body.lr.ph ], [ %indvars.iv.next314, %for.cond.backedge ]
  %indvars.iv.next314 = add nsw i64 %indvars.iv313, -1
  %arrayidx190 = getelementptr inbounds i8* %38, i64 %indvars.iv.next314
  %41 = load i8* %arrayidx190, align 1, !tbaa !5
  switch i8 %41, label %for.cond.backedge [
    i8 101, label %if.then194
    i8 69, label %if.then205
  ]

for.cond.backedge:                                ; preds = %for.body213, %if.then205, %for.body, %if.then194
  %42 = trunc i64 %indvars.iv.next314 to i32
  %cmp187 = icmp sgt i32 %42, 0
  br i1 %cmp187, label %for.body, label %for.end225

if.then194:                                       ; preds = %for.body
  %arrayidx197 = getelementptr inbounds %struct.rtx_def* %x.addr.1, i64 0, i32 1, i64 %indvars.iv.next314
  %rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**
  %43 = load %struct.rtx_def** %rtx198, align 8, !tbaa !14
  tail call fastcc void @mark_referenced_regs(%struct.rtx_def* %43)
  br label %for.cond.backedge

if.then205:                                       ; preds = %for.body
  %arrayidx208 = getelementptr inbounds %struct.rtx_def* %x.addr.1, i64 0, i32 1, i64 %indvars.iv.next314
  %rtvec = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtvec_def**
  %44 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !14
  %num_elem = getelementptr inbounds %struct.rtvec_def* %44, i64 0, i32 0
  %45 = load i32* %num_elem, align 4, !tbaa !35
  %cmp211305 = icmp sgt i32 %45, 0
  br i1 %cmp211305, label %for.body213.lr.ph, label %for.cond.backedge

for.body213.lr.ph:                                ; preds = %if.then205
  %46 = sext i32 %45 to i64
  br label %for.body213

for.body213:                                      ; preds = %for.body213.for.body213_crit_edge, %for.body213.lr.ph
  %47 = phi %struct.rtvec_def* [ %44, %for.body213.lr.ph ], [ %.pre, %for.body213.for.body213_crit_edge ]
  %indvars.iv = phi i64 [ %46, %for.body213.lr.ph ], [ %indvars.iv.next, %for.body213.for.body213_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx219 = getelementptr inbounds %struct.rtvec_def* %47, i64 0, i32 1, i64 %indvars.iv.next
  %48 = load %struct.rtx_def** %arrayidx219, align 8, !tbaa !14
  tail call fastcc void @mark_referenced_regs(%struct.rtx_def* %48)
  %49 = trunc i64 %indvars.iv.next to i32
  %cmp211 = icmp sgt i32 %49, 0
  br i1 %cmp211, label %for.body213.for.body213_crit_edge, label %for.cond.backedge

for.body213.for.body213_crit_edge:                ; preds = %for.body213
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !14
  br label %for.body213

while.cond.for.end225.loopexit_crit_edge:         ; preds = %while.body
  store i64 %or, i64* @referenced_regs, align 8, !tbaa !1
  br label %for.end225

for.end225:                                       ; preds = %if.then3, %if.then3, %if.then3, %lor.lhs.false37, %land.lhs.true22, %if.else169, %for.cond.backedge, %if.end180, %while.cond.preheader, %while.cond.for.end225.loopexit_crit_edge
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @insert_restore(%struct.insn_chain* %chain, i32 %before_p, i32 %regno, i32 %maxrestore, i32* nocapture readonly %save_mode) #0 {
entry:
  %idxprom = sext i32 %regno to i64
  %arrayidx1 = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %idxprom, i64 1
  %0 = load %struct.rtx_def** %arrayidx1, align 8, !tbaa !14
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %cmp2184 = icmp sgt i32 %maxrestore, 0
  br i1 %cmp2184, label %for.body.lr.ph, label %for.end19

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %1 = load i64* @hard_regs_saved, align 8, !tbaa !1
  %2 = sext i32 %maxrestore to i64
  br label %for.body

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 647, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.insert_restore, i64 0, i64 0)) #4
  unreachable

for.body:                                         ; preds = %for.body.lr.ph, %for.inc18
  %indvars.iv193 = phi i64 [ %2, %for.body.lr.ph ], [ %indvars.iv.next194, %for.inc18 ]
  %arrayidx6 = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %idxprom, i64 %indvars.iv193
  %3 = load %struct.rtx_def** %arrayidx6, align 8, !tbaa !14
  %cmp7 = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp7, label %for.inc18, label %for.body12

for.cond10:                                       ; preds = %for.body12
  %4 = trunc i64 %indvars.iv.next192 to i32
  %5 = trunc i64 %indvars.iv193 to i32
  %cmp11 = icmp slt i32 %4, %5
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.body, %for.cond10
  %indvars.iv191 = phi i64 [ %indvars.iv.next192, %for.cond10 ], [ 0, %for.body ]
  %6 = trunc i64 %indvars.iv191 to i32
  %add = add nsw i32 %6, %regno
  %sh_prom = zext i32 %add to i64
  %shl = shl i64 1, %sh_prom
  %and = and i64 %1, %shl
  %tobool = icmp eq i64 %and, 0
  %indvars.iv.next192 = add nuw nsw i64 %indvars.iv191, 1
  br i1 %tobool, label %for.inc18, label %for.cond10

for.inc18:                                        ; preds = %for.body12, %for.body
  %indvars.iv.next194 = add nsw i64 %indvars.iv193, -1
  %7 = trunc i64 %indvars.iv.next194 to i32
  %cmp2 = icmp sgt i32 %7, 0
  br i1 %cmp2, label %for.body, label %for.end19

for.end19:                                        ; preds = %for.inc18, %for.cond10, %for.cond.preheader
  %i.0178 = phi i32 [ %maxrestore, %for.cond.preheader ], [ %5, %for.cond10 ], [ %7, %for.inc18 ]
  %numregs.0 = phi i32 [ 0, %for.cond.preheader ], [ %5, %for.cond10 ], [ 0, %for.inc18 ]
  %idxprom20 = zext i32 %numregs.0 to i64
  %arrayidx23 = getelementptr inbounds [53 x [5 x %struct.rtx_def*]]* @regno_save_mem, i64 0, i64 %idxprom, i64 %idxprom20
  %8 = load %struct.rtx_def** %arrayidx23, align 8, !tbaa !14
  %arrayidx25 = getelementptr inbounds i32* %save_mode, i64 %idxprom
  %9 = load i32* %arrayidx25, align 4, !tbaa !5
  %cmp26 = icmp eq i32 %9, 0
  br i1 %cmp26, label %if.end92, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.end19
  %10 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load = load i32* %10, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp29 = icmp eq i32 %9, %bf.clear
  br i1 %cmp29, label %if.end92, label %land.lhs.true30

land.lhs.true30:                                  ; preds = %land.lhs.true
  %11 = and i32 %regno, -8
  %12 = icmp eq i32 %11, 8
  %regno.off = add i32 %regno, -21
  %13 = icmp ult i32 %regno.off, 8
  %or.cond = or i1 %12, %13
  %regno.off169 = add i32 %regno, -45
  %14 = icmp ult i32 %regno.off169, 8
  %or.cond173 = or i1 %or.cond, %14
  %regno.off170 = add i32 %regno, -29
  %15 = icmp ult i32 %regno.off170, 8
  %or.cond175 = or i1 %or.cond173, %15
  br i1 %or.cond175, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true30
  %idxprom47 = sext i32 %9 to i64
  %arrayidx48 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom47
  %16 = load i32* %arrayidx48, align 4, !tbaa !5
  %cmp49 = icmp eq i32 %16, 5
  br i1 %cmp49, label %cond.end85, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp54 = icmp eq i32 %16, 6
  %phitmp = select i1 %cmp54, i32 2, i32 1
  br label %cond.end85

cond.false:                                       ; preds = %land.lhs.true30
  switch i32 %9, label %cond.false70 [
    i32 18, label %cond.true58
    i32 24, label %cond.true66
  ]

cond.true58:                                      ; preds = %cond.false
  %17 = load i32* @target_flags, align 4, !tbaa !6
  %and59 = lshr i32 %17, 25
  %18 = and i32 %and59, 1
  %19 = xor i32 %18, 3
  br label %cond.end85

cond.true66:                                      ; preds = %cond.false
  %20 = load i32* @target_flags, align 4, !tbaa !6
  %and67 = lshr i32 %20, 24
  %21 = and i32 %and67, 2
  %22 = xor i32 %21, 6
  br label %cond.end85

cond.false70:                                     ; preds = %cond.false
  %idxprom73 = sext i32 %9 to i64
  %arrayidx74 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom73
  %23 = load i8* %arrayidx74, align 1, !tbaa !5
  %conv = zext i8 %23 to i32
  %24 = load i32* @target_flags, align 4, !tbaa !6
  %and75 = lshr i32 %24, 23
  %25 = and i32 %and75, 4
  %26 = add i32 %25, 4
  %add78 = add i32 %conv, -1
  %sub = add i32 %add78, %26
  %div = sdiv i32 %sub, %26
  br label %cond.end85

cond.end85:                                       ; preds = %cond.true, %lor.rhs, %cond.true58, %cond.false70, %cond.true66
  %cond86 = phi i32 [ %19, %cond.true58 ], [ %22, %cond.true66 ], [ %div, %cond.false70 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ]
  %cmp87 = icmp eq i32 %numregs.0, %cond86
  br i1 %cmp87, label %if.then89, label %if.end92

if.then89:                                        ; preds = %cond.end85
  %call = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %8, i32 %9, i64 0, i32 1, i32 1) #3
  br label %if.end92

if.end92:                                         ; preds = %land.lhs.true, %for.end19, %if.then89, %cond.end85
  %mem.0 = phi %struct.rtx_def* [ %call, %if.then89 ], [ %8, %cond.end85 ], [ %8, %land.lhs.true ], [ %8, %for.end19 ]
  %27 = getelementptr inbounds %struct.rtx_def* %mem.0, i64 0, i32 0
  %bf.load93 = load i32* %27, align 8
  %bf.lshr94 = lshr i32 %bf.load93, 16
  %bf.clear95 = and i32 %bf.lshr94, 255
  %call96 = tail call %struct.rtx_def* @gen_rtx_REG(i32 %bf.clear95, i32 %regno) #3
  %call97 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call96, %struct.rtx_def* %mem.0) #3
  %bf.load98 = load i32* %27, align 8
  %bf.lshr99 = lshr i32 %bf.load98, 16
  %bf.clear100 = and i32 %bf.lshr99, 255
  %idxprom101 = zext i32 %bf.clear100 to i64
  %arrayidx104 = getelementptr inbounds [53 x [59 x i32]]* @reg_restore_code, i64 0, i64 %idxprom, i64 %idxprom101
  %28 = load i32* %arrayidx104, align 4, !tbaa !6
  %call105 = tail call fastcc %struct.insn_chain* @insert_one_insn(%struct.insn_chain* %chain, i32 %before_p, i32 %28, %struct.rtx_def* %call97)
  %cmp107179 = icmp sgt i32 %i.0178, 0
  br i1 %cmp107179, label %for.body109.lr.ph, label %for.end118

for.body109.lr.ph:                                ; preds = %if.end92
  %dead_or_set = getelementptr inbounds %struct.insn_chain* %call105, i64 0, i32 6
  br label %for.body109

for.body109:                                      ; preds = %for.body109, %for.body109.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body109.lr.ph ], [ %indvars.iv.next, %for.body109 ]
  %29 = trunc i64 %indvars.iv to i32
  %add110 = add nsw i32 %29, %regno
  %sh_prom111 = zext i32 %add110 to i64
  %shl112 = shl i64 1, %sh_prom111
  %neg = xor i64 %shl112, -1
  %30 = load i64* @hard_regs_saved, align 8, !tbaa !1
  %and113 = and i64 %30, %neg
  store i64 %and113, i64* @hard_regs_saved, align 8, !tbaa !1
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %dead_or_set, i32 %add110) #3
  %31 = load i32* @n_regs_saved, align 4, !tbaa !6
  %dec115 = add nsw i32 %31, -1
  store i32 %dec115, i32* @n_regs_saved, align 4, !tbaa !6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %i.0178
  br i1 %exitcond, label %for.end118, label %for.body109

for.end118:                                       ; preds = %for.body109, %if.end92
  %sub119 = add i32 %numregs.0, -1
  ret i32 %sub119
}

declare void @reg_set_to_hard_reg_set(i64*, %struct.bitmap_head_def*) #1

declare void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @mark_set_regs(%struct.rtx_def* %reg, %struct.rtx_def* nocapture readnone %setter, i8* nocapture readnone %data) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %bf.clear2 = and i32 %bf.load, 65535
  switch i32 %bf.clear2, label %for.end [
    i32 63, label %if.then
    i32 61, label %land.lhs.true
  ]

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !14
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load3 = load i32* %2, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 61
  br i1 %cmp5, label %lor.lhs.false, label %for.end

lor.lhs.false:                                    ; preds = %if.then
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %3 = load i32* %rtuint, align 4, !tbaa !6
  %cmp8 = icmp ugt i32 %3, 52
  br i1 %cmp8, label %for.end, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %call = tail call i32 @subreg_hard_regno(%struct.rtx_def* %reg, i32 1) #3
  br label %if.end23

land.lhs.true:                                    ; preds = %entry
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint15 = bitcast %union.rtunion_def* %arrayidx14 to i32*
  %4 = load i32* %rtuint15, align 4, !tbaa !6
  %cmp16 = icmp ult i32 %4, 53
  br i1 %cmp16, label %if.end23, label %for.end

if.end23:                                         ; preds = %land.lhs.true, %if.end
  %regno.0 = phi i32 [ %call, %if.end ], [ %4, %land.lhs.true ]
  %5 = and i32 %regno.0, -8
  %6 = icmp eq i32 %5, 8
  %regno.0.off = add i32 %regno.0, -21
  %7 = icmp ult i32 %regno.0.off, 8
  %or.cond = or i1 %6, %7
  %regno.0.off94 = add i32 %regno.0, -45
  %8 = icmp ult i32 %regno.0.off94, 8
  %or.cond100 = or i1 %or.cond, %8
  %regno.0.off95 = add i32 %regno.0, -29
  %9 = icmp ult i32 %regno.0.off95, 8
  %or.cond102 = or i1 %or.cond100, %9
  br i1 %or.cond102, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end23
  %idxprom97 = zext i32 %bf.clear to i64
  %arrayidx39 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom97
  %10 = load i32* %arrayidx39, align 4, !tbaa !5
  %cmp40 = icmp eq i32 %10, 5
  br i1 %cmp40, label %for.body.lr.ph, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp43 = icmp eq i32 %10, 6
  %phitmp = select i1 %cmp43, i32 2, i32 1
  br label %for.body.lr.ph

cond.false:                                       ; preds = %if.end23
  switch i32 %bf.clear, label %cond.end65 [
    i32 18, label %cond.true45
    i32 24, label %cond.true49
  ]

cond.true45:                                      ; preds = %cond.false
  %11 = load i32* @target_flags, align 4, !tbaa !6
  %and = lshr i32 %11, 25
  %12 = and i32 %and, 1
  %13 = xor i32 %12, 3
  br label %for.body.lr.ph

cond.true49:                                      ; preds = %cond.false
  %14 = load i32* @target_flags, align 4, !tbaa !6
  %and50 = lshr i32 %14, 24
  %15 = and i32 %and50, 2
  %16 = xor i32 %15, 6
  br label %for.body.lr.ph

cond.end65:                                       ; preds = %cond.false
  %idxprom5496 = zext i32 %bf.clear to i64
  %arrayidx55 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom5496
  %17 = load i8* %arrayidx55, align 1, !tbaa !5
  %conv = zext i8 %17 to i32
  %18 = load i32* @target_flags, align 4, !tbaa !6
  %and56 = lshr i32 %18, 23
  %19 = and i32 %and56, 4
  %20 = add i32 %19, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %20
  %div = sdiv i32 %sub, %20
  %cmp68103 = icmp sgt i32 %div, 0
  br i1 %cmp68103, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %lor.rhs, %cond.true, %cond.true49, %cond.true45, %cond.end65
  %cond66.ph.pn = phi i32 [ %div, %cond.end65 ], [ %13, %cond.true45 ], [ %16, %cond.true49 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ]
  %add67108 = add nsw i32 %cond66.ph.pn, %regno.0
  %this_insn_sets.promoted = load i64* @this_insn_sets, align 8, !tbaa !1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %or105 = phi i64 [ %this_insn_sets.promoted, %for.body.lr.ph ], [ %or, %for.body ]
  %i.0104 = phi i32 [ %regno.0, %for.body.lr.ph ], [ %inc, %for.body ]
  %sh_prom = zext i32 %i.0104 to i64
  %shl = shl i64 1, %sh_prom
  %or = or i64 %or105, %shl
  %inc = add nsw i32 %i.0104, 1
  %cmp68 = icmp slt i32 %inc, %add67108
  br i1 %cmp68, label %for.body, label %for.cond.for.end.loopexit_crit_edge

for.cond.for.end.loopexit_crit_edge:              ; preds = %for.body
  store i64 %or, i64* @this_insn_sets, align 8, !tbaa !1
  br label %for.end

for.end:                                          ; preds = %cond.end65, %for.cond.for.end.loopexit_crit_edge, %entry, %if.then, %land.lhs.true, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #3

; Function Attrs: nounwind uwtable
define internal fastcc %struct.insn_chain* @insert_one_insn(%struct.insn_chain* %chain, i32 %before_p, i32 %code, %struct.rtx_def* %pat) #0 {
entry:
  %insn1 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 4
  %0 = load %struct.rtx_def** %insn1, align 8, !tbaa !25
  %call = tail call %struct.insn_chain* @new_insn_chain() #3
  %tobool = icmp eq i32 %before_p, 0
  br i1 %tobool, label %if.else131, label %if.then

if.then:                                          ; preds = %entry
  %prev = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 1
  %1 = load %struct.insn_chain** %prev, align 8, !tbaa !37
  %prev2 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 1
  store %struct.insn_chain* %1, %struct.insn_chain** %prev2, align 8, !tbaa !37
  %cmp = icmp eq %struct.insn_chain* %1, null
  br i1 %cmp, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.insn_chain* %1, i64 0, i32 0
  store %struct.insn_chain* %call, %struct.insn_chain** %next, align 8, !tbaa !29
  br label %if.end

if.else:                                          ; preds = %if.then
  store %struct.insn_chain* %call, %struct.insn_chain** @reload_insn_chain, align 8, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  store %struct.insn_chain* %call, %struct.insn_chain** %prev, align 8, !tbaa !37
  %next7 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 0
  store %struct.insn_chain* %chain, %struct.insn_chain** %next7, align 8, !tbaa !29
  %call8 = tail call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %pat, %struct.rtx_def* %0) #3
  %insn9 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 4
  store %struct.rtx_def* %call8, %struct.rtx_def** %insn9, align 8, !tbaa !25
  %live_throughout = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 5
  %live_throughout10 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 5
  tail call void @bitmap_copy(%struct.bitmap_head_def* %live_throughout, %struct.bitmap_head_def* %live_throughout10) #3
  %2 = load %struct.rtx_def** %insn1, align 8, !tbaa !25
  %arrayidx = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 6
  %link.0.in258 = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %link.0259 = load %struct.rtx_def** %link.0.in258, align 8
  %tobool12260 = icmp eq %struct.rtx_def* %link.0259, null
  br i1 %tobool12260, label %for.end116, label %for.body

for.body:                                         ; preds = %if.end, %for.inc112
  %link.0261 = phi %struct.rtx_def* [ %link.0, %for.inc112 ], [ %link.0259, %if.end ]
  %3 = getelementptr inbounds %struct.rtx_def* %link.0261, i64 0, i32 0
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 16711680
  %cmp13 = icmp eq i32 %bf.clear, 65536
  br i1 %cmp13, label %if.then14, label %for.inc112

if.then14:                                        ; preds = %for.body
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %link.0261, i64 0, i32 1, i64 0
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx17, align 8, !tbaa !14
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load18 = load i32* %5, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 61
  br i1 %cmp20, label %if.end22, label %if.then21

if.then21:                                        ; preds = %if.then14
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 824, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.insert_one_insn, i64 0, i64 0)) #4
  unreachable

if.end22:                                         ; preds = %if.then14
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx24 to i32*
  %6 = load i32* %rtuint, align 4, !tbaa !6
  %cmp25 = icmp sgt i32 %6, 52
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end22
  %idxprom = sext i32 %6 to i64
  %7 = load i16** @reg_renumber, align 8, !tbaa !14
  %arrayidx27 = getelementptr inbounds i16* %7, i64 %idxprom
  %8 = load i16* %arrayidx27, align 2, !tbaa !16
  %conv = sext i16 %8 to i32
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end22
  %regno.0 = phi i32 [ %conv, %if.then26 ], [ %6, %if.end22 ]
  %cmp29 = icmp slt i32 %regno.0, 0
  br i1 %cmp29, label %for.inc112, label %if.end32

if.end32:                                         ; preds = %if.end28
  %9 = and i32 %regno.0, -8
  %10 = icmp eq i32 %9, 8
  %regno.0.off = add i32 %regno.0, -21
  %11 = icmp ult i32 %regno.0.off, 8
  %or.cond = or i1 %10, %11
  %regno.0.off246 = add i32 %regno.0, -45
  %12 = icmp ult i32 %regno.0.off246, 8
  %or.cond252 = or i1 %or.cond, %12
  %regno.0.off247 = add i32 %regno.0, -29
  %13 = icmp ult i32 %regno.0.off247, 8
  %or.cond254 = or i1 %or.cond252, %13
  %bf.lshr55 = lshr i32 %bf.load18, 16
  %bf.clear56 = and i32 %bf.lshr55, 255
  br i1 %or.cond254, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end32
  %idxprom57249 = zext i32 %bf.clear56 to i64
  %arrayidx58 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom57249
  %14 = load i32* %arrayidx58, align 4, !tbaa !5
  %cmp59 = icmp eq i32 %14, 5
  br i1 %cmp59, label %for.body108, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp66 = icmp eq i32 %14, 6
  %phitmp = select i1 %cmp66, i32 2, i32 1
  br label %for.body108

cond.false:                                       ; preds = %if.end32
  switch i32 %bf.clear56, label %for.cond105.preheader [
    i32 18, label %cond.true73
    i32 24, label %cond.true82
  ]

cond.true73:                                      ; preds = %cond.false
  %15 = load i32* @target_flags, align 4, !tbaa !6
  %and = lshr i32 %15, 25
  %16 = and i32 %and, 1
  %17 = xor i32 %16, 3
  br label %for.body108

cond.true82:                                      ; preds = %cond.false
  %18 = load i32* @target_flags, align 4, !tbaa !6
  %and83 = lshr i32 %18, 24
  %19 = and i32 %and83, 2
  %20 = xor i32 %19, 6
  br label %for.body108

for.cond105.preheader:                            ; preds = %cond.false
  %idxprom90248 = zext i32 %bf.clear56 to i64
  %arrayidx91 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom90248
  %21 = load i8* %arrayidx91, align 1, !tbaa !5
  %conv92 = zext i8 %21 to i32
  %22 = load i32* @target_flags, align 4, !tbaa !6
  %and93 = lshr i32 %22, 23
  %23 = and i32 %and93, 4
  %24 = add i32 %23, 4
  %add = add i32 %conv92, -1
  %sub = add i32 %add, %24
  %div = sdiv i32 %sub, %24
  %cmp106256 = icmp sgt i32 %div, 0
  br i1 %cmp106256, label %for.body108, label %for.inc112

for.body108:                                      ; preds = %cond.true, %lor.rhs, %cond.true73, %cond.true82, %for.cond105.preheader, %for.body108
  %i.0257.in = phi i32 [ %i.0257, %for.body108 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ], [ %17, %cond.true73 ], [ %20, %cond.true82 ], [ %div, %for.cond105.preheader ]
  %i.0257 = add nsw i32 %i.0257.in, -1
  %add110 = add nsw i32 %i.0257, %regno.0
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %live_throughout, i32 %add110) #3
  %cmp106 = icmp sgt i32 %i.0257, 0
  br i1 %cmp106, label %for.body108, label %for.inc112

for.inc112:                                       ; preds = %for.body108, %for.cond105.preheader, %for.body, %if.end28
  %arrayidx114 = getelementptr inbounds %struct.rtx_def* %link.0261, i64 0, i32 1, i64 1
  %link.0.in = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %link.0.in, align 8
  %tobool12 = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool12, label %for.end116, label %for.body

for.end116:                                       ; preds = %for.inc112, %if.end
  %dead_or_set = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 6
  tail call void @bitmap_clear(%struct.bitmap_head_def* %dead_or_set) #3
  %25 = load %struct.rtx_def** %insn1, align 8, !tbaa !25
  %block = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 3
  %26 = load i32* %block, align 4, !tbaa !34
  %idxprom118 = sext i32 %26 to i64
  %27 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !14
  %data = getelementptr inbounds %struct.varray_head_tag* %27, i64 0, i32 4
  %bb = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx119 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb, i64 0, i64 %idxprom118
  %28 = load %struct.basic_block_def** %arrayidx119, align 8, !tbaa !14
  %head = getelementptr inbounds %struct.basic_block_def* %28, i64 0, i32 0
  %29 = load %struct.rtx_def** %head, align 8, !tbaa !38
  %cmp120 = icmp eq %struct.rtx_def* %25, %29
  br i1 %cmp120, label %if.then122, label %if.end170

if.then122:                                       ; preds = %for.end116
  %30 = load %struct.rtx_def** %insn9, align 8, !tbaa !25
  store %struct.rtx_def* %30, %struct.rtx_def** %head, align 8, !tbaa !38
  br label %if.end170

if.else131:                                       ; preds = %entry
  %next132 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 0
  %31 = load %struct.insn_chain** %next132, align 8, !tbaa !29
  %next133 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 0
  store %struct.insn_chain* %31, %struct.insn_chain** %next133, align 8, !tbaa !29
  %cmp135 = icmp eq %struct.insn_chain* %31, null
  br i1 %cmp135, label %if.end140, label %if.then137

if.then137:                                       ; preds = %if.else131
  %prev139 = getelementptr inbounds %struct.insn_chain* %31, i64 0, i32 1
  store %struct.insn_chain* %call, %struct.insn_chain** %prev139, align 8, !tbaa !37
  br label %if.end140

if.end140:                                        ; preds = %if.else131, %if.then137
  store %struct.insn_chain* %call, %struct.insn_chain** %next132, align 8, !tbaa !29
  %prev142 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 1
  store %struct.insn_chain* %chain, %struct.insn_chain** %prev142, align 8, !tbaa !37
  %call143 = tail call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %pat, %struct.rtx_def* %0) #3
  %insn144 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 4
  store %struct.rtx_def* %call143, %struct.rtx_def** %insn144, align 8, !tbaa !25
  %live_throughout145 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 5
  %live_throughout146 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 5
  tail call void @bitmap_copy(%struct.bitmap_head_def* %live_throughout145, %struct.bitmap_head_def* %live_throughout146) #3
  %32 = load %struct.rtx_def** %insn1, align 8, !tbaa !25
  %arrayidx149 = getelementptr inbounds %struct.rtx_def* %32, i64 0, i32 1, i64 3
  %rtx150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtx_def**
  %33 = load %struct.rtx_def** %rtx150, align 8, !tbaa !14
  %34 = bitcast %struct.bitmap_head_def* %live_throughout145 to i8*
  tail call void @note_stores(%struct.rtx_def* %33, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @add_stored_regs, i8* %34) #3
  %dead_or_set152 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 6
  tail call void @bitmap_clear(%struct.bitmap_head_def* %dead_or_set152) #3
  %35 = load %struct.rtx_def** %insn1, align 8, !tbaa !25
  %block154 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 3
  %36 = load i32* %block154, align 4, !tbaa !34
  %idxprom155 = sext i32 %36 to i64
  %37 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !14
  %data156 = getelementptr inbounds %struct.varray_head_tag* %37, i64 0, i32 4
  %bb157 = bitcast %union.varray_data_tag* %data156 to [1 x %struct.basic_block_def*]*
  %arrayidx158 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb157, i64 0, i64 %idxprom155
  %38 = load %struct.basic_block_def** %arrayidx158, align 8, !tbaa !14
  %end = getelementptr inbounds %struct.basic_block_def* %38, i64 0, i32 1
  %39 = load %struct.rtx_def** %end, align 8, !tbaa !40
  %cmp159 = icmp eq %struct.rtx_def* %35, %39
  br i1 %cmp159, label %if.then161, label %if.end170

if.then161:                                       ; preds = %if.end140
  %40 = load %struct.rtx_def** %insn144, align 8, !tbaa !25
  store %struct.rtx_def* %40, %struct.rtx_def** %end, align 8, !tbaa !40
  br label %if.end170

if.end170:                                        ; preds = %if.end140, %if.then161, %for.end116, %if.then122
  %41 = phi i32 [ %36, %if.end140 ], [ %36, %if.then161 ], [ %26, %for.end116 ], [ %26, %if.then122 ]
  %block172 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 3
  store i32 %41, i32* %block172, align 4, !tbaa !34
  %is_caller_save_insn = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 11
  %bf.load173 = load i8* %is_caller_save_insn, align 2
  %bf.set = or i8 %bf.load173, 8
  store i8 %bf.set, i8* %is_caller_save_insn, align 2
  %insn175 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 4
  %42 = load %struct.rtx_def** %insn175, align 8, !tbaa !25
  %arrayidx177 = getelementptr inbounds %struct.rtx_def* %42, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx177 to i32*
  store i32 %code, i32* %rtint, align 4, !tbaa !6
  ret %struct.insn_chain* %call
}

declare void @bitmap_set_bit(%struct.bitmap_head_def*, i32) #1

declare %struct.insn_chain* @new_insn_chain() #1

declare %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #1

declare void @bitmap_clear(%struct.bitmap_head_def*) #1

declare %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal void @add_stored_regs(%struct.rtx_def* nocapture readonly %reg, %struct.rtx_def* nocapture readonly %setter, i8* %data) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %1 = getelementptr inbounds %struct.rtx_def* %setter, i64 0, i32 0
  %bf.load1 = load i32* %1, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp = icmp eq i32 %bf.clear2, 49
  br i1 %cmp, label %for.end, label %if.end

if.end:                                           ; preds = %entry
  %bf.clear4 = and i32 %bf.load, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 63
  br i1 %cmp5, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.end
  %fld = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !14
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load6 = load i32* %3, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 61
  br i1 %cmp8, label %if.then9, label %if.end30

if.then9:                                         ; preds = %land.lhs.true
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx14 to i32*
  %4 = load i32* %rtuint, align 4, !tbaa !6
  %bf.lshr19 = lshr i32 %bf.load6, 16
  %bf.clear20 = and i32 %bf.lshr19, 255
  %arrayidx22 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 1
  %rtuint23 = bitcast %union.rtunion_def* %arrayidx22 to i32*
  %5 = load i32* %rtuint23, align 4, !tbaa !6
  %call = tail call i32 @subreg_regno_offset(i32 %4, i32 %bf.clear20, i32 %5, i32 %bf.clear) #3
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !14
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load31.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.then9, %land.lhs.true, %if.end
  %bf.load31 = phi i32 [ %bf.load31.pre, %if.then9 ], [ %bf.load, %land.lhs.true ], [ %bf.load, %if.end ]
  %reg.addr.0 = phi %struct.rtx_def* [ %6, %if.then9 ], [ %reg, %land.lhs.true ], [ %reg, %if.end ]
  %offset.0 = phi i32 [ %call, %if.then9 ], [ 0, %land.lhs.true ], [ 0, %if.end ]
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 61
  br i1 %cmp33, label %lor.lhs.false, label %for.end

lor.lhs.false:                                    ; preds = %if.end30
  %arrayidx35 = getelementptr inbounds %struct.rtx_def* %reg.addr.0, i64 0, i32 1, i64 0
  %rtuint36 = bitcast %union.rtunion_def* %arrayidx35 to i32*
  %7 = load i32* %rtuint36, align 4, !tbaa !6
  %cmp37 = icmp ugt i32 %7, 52
  br i1 %cmp37, label %for.end, label %if.end39

if.end39:                                         ; preds = %lor.lhs.false
  %add = add i32 %7, %offset.0
  %8 = and i32 %add, -8
  %9 = icmp eq i32 %8, 8
  %add.off = add i32 %add, -21
  %10 = icmp ult i32 %add.off, 8
  %or.cond = or i1 %9, %10
  %add.off118 = add i32 %add, -45
  %11 = icmp ult i32 %add.off118, 8
  %or.cond124 = or i1 %or.cond, %11
  %add.off119 = add i32 %add, -29
  %12 = icmp ult i32 %add.off119, 8
  %or.cond126 = or i1 %or.cond124, %12
  br i1 %or.cond126, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end39
  %idxprom121 = zext i32 %bf.clear to i64
  %arrayidx58 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom121
  %13 = load i32* %arrayidx58, align 4, !tbaa !5
  %cmp59 = icmp eq i32 %13, 5
  br i1 %cmp59, label %for.body.lr.ph, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp62 = icmp eq i32 %13, 6
  %phitmp = select i1 %cmp62, i32 2, i32 1
  br label %for.body.lr.ph

cond.false:                                       ; preds = %if.end39
  switch i32 %bf.clear, label %cond.end85 [
    i32 18, label %cond.true64
    i32 24, label %cond.true68
  ]

cond.true64:                                      ; preds = %cond.false
  %14 = load i32* @target_flags, align 4, !tbaa !6
  %and = lshr i32 %14, 25
  %15 = and i32 %and, 1
  %16 = xor i32 %15, 3
  br label %for.body.lr.ph

cond.true68:                                      ; preds = %cond.false
  %17 = load i32* @target_flags, align 4, !tbaa !6
  %and69 = lshr i32 %17, 24
  %18 = and i32 %and69, 2
  %19 = xor i32 %18, 6
  br label %for.body.lr.ph

cond.end85:                                       ; preds = %cond.false
  %idxprom73120 = zext i32 %bf.clear to i64
  %arrayidx74 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom73120
  %20 = load i8* %arrayidx74, align 1, !tbaa !5
  %conv = zext i8 %20 to i32
  %21 = load i32* @target_flags, align 4, !tbaa !6
  %and75 = lshr i32 %21, 23
  %22 = and i32 %and75, 4
  %23 = add i32 %22, 4
  %add78 = add i32 %conv, -1
  %sub = add i32 %add78, %23
  %div = sdiv i32 %sub, %23
  %cmp88127 = icmp sgt i32 %div, 0
  br i1 %cmp88127, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %lor.rhs, %cond.true, %cond.true68, %cond.true64, %cond.end85
  %cond86.ph.pn = phi i32 [ %div, %cond.end85 ], [ %16, %cond.true64 ], [ %19, %cond.true68 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ]
  %add87132 = add nsw i32 %cond86.ph.pn, %add
  %24 = bitcast i8* %data to %struct.bitmap_head_def*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %i.0128 = phi i32 [ %add, %for.body.lr.ph ], [ %inc, %for.body ]
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %24, i32 %i.0128) #3
  %inc = add nsw i32 %i.0128, 1
  %cmp88 = icmp slt i32 %inc, %add87132
  br i1 %cmp88, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %cond.end85, %if.end30, %lor.lhs.false, %entry
  ret void
}

declare i32 @subreg_regno_offset(i32, i32, i32, i32) #1

declare i32 @subreg_hard_regno(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"long long", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !3, metadata !3, i64 0}
!6 = metadata !{metadata !7, metadata !7, i64 0}
!7 = metadata !{metadata !"int", metadata !3, i64 0}
!8 = metadata !{metadata !8, metadata !9, metadata !10}
!9 = metadata !{metadata !"llvm.vectorizer.width", i32 1}
!10 = metadata !{metadata !"llvm.vectorizer.unroll", i32 1}
!11 = metadata !{metadata !11, metadata !9, metadata !10}
!12 = metadata !{metadata !12, metadata !9, metadata !10}
!13 = metadata !{metadata !13, metadata !9, metadata !10}
!14 = metadata !{metadata !15, metadata !15, i64 0}
!15 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!16 = metadata !{metadata !17, metadata !17, i64 0}
!17 = metadata !{metadata !"short", metadata !3, i64 0}
!18 = metadata !{metadata !19, metadata !7, i64 32}
!19 = metadata !{metadata !"reg_info_def", metadata !7, i64 0, metadata !7, i64 4, metadata !7, i64 8, metadata !7, i64 12, metadata !7, i64 16, metadata !7, i64 20, metadata !7, i64 24, metadata !7, i64 28, metadata !7, i64 32, metadata !7, i64 36, metadata !3, i64 40}
!20 = metadata !{metadata !21, metadata !15, i64 24}
!21 = metadata !{metadata !"function", metadata !15, i64 0, metadata !15, i64 8, metadata !15, i64 16, metadata !15, i64 24, metadata !15, i64 32, metadata !15, i64 40, metadata !15, i64 48, metadata !15, i64 56, metadata !7, i64 64, metadata !7, i64 68, metadata !7, i64 72, metadata !7, i64 76, metadata !15, i64 80, metadata !22, i64 88, metadata !15, i64 120, metadata !15, i64 128, metadata !15, i64 136, metadata !15, i64 144, metadata !7, i64 152, metadata !15, i64 160, metadata !15, i64 168, metadata !15, i64 176, metadata !15, i64 184, metadata !15, i64 192, metadata !15, i64 200, metadata !15, i64 208, metadata !15, i64 216, metadata !15, i64 224, metadata !15, i64 232, metadata !15, i64 240, metadata !15, i64 248, metadata !15, i64 256, metadata !2, i64 264, metadata !15, i64 272, metadata !15, i64 280, metadata !15, i64 288, metadata !15, i64 296, metadata !7, i64 304, metadata !15, i64 312, metadata !15, i64 320, metadata !7, i64 328, metadata !7, i64 332, metadata !7, i64 336, metadata !15, i64 344, metadata !7, i64 352, metadata !7, i64 356, metadata !15, i64 360, metadata !15, i64 368, metadata !15, i64 376, metadata !7, i64 384, metadata !7, i64 388, metadata !15, i64 392, metadata !7, i64 400, metadata !7, i64 404, metadata !15, i64 408, metadata !15, i64 416, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426}
!22 = metadata !{metadata !"ix86_args", metadata !7, i64 0, metadata !7, i64 4, metadata !7, i64 8, metadata !7, i64 12, metadata !7, i64 16, metadata !7, i64 20, metadata !7, i64 24}
!23 = metadata !{metadata !24, metadata !15, i64 80}
!24 = metadata !{metadata !"emit_status", metadata !7, i64 0, metadata !7, i64 4, metadata !15, i64 8, metadata !15, i64 16, metadata !15, i64 24, metadata !15, i64 32, metadata !7, i64 40, metadata !7, i64 44, metadata !15, i64 48, metadata !7, i64 56, metadata !15, i64 64, metadata !15, i64 72, metadata !15, i64 80}
!25 = metadata !{metadata !26, metadata !15, i64 32}
!26 = metadata !{metadata !"insn_chain", metadata !15, i64 0, metadata !15, i64 8, metadata !15, i64 16, metadata !7, i64 24, metadata !15, i64 32, metadata !27, i64 40, metadata !27, i64 64, metadata !15, i64 88, metadata !7, i64 96, metadata !2, i64 104, metadata !28, i64 112, metadata !7, i64 262, metadata !7, i64 262, metadata !7, i64 262, metadata !7, i64 262}
!27 = metadata !{metadata !"bitmap_head_def", metadata !15, i64 0, metadata !15, i64 8, metadata !7, i64 16}
!28 = metadata !{metadata !"needs", metadata !3, i64 0, metadata !3, i64 100}
!29 = metadata !{metadata !26, metadata !15, i64 0}
!30 = metadata !{metadata !27, metadata !15, i64 0}
!31 = metadata !{metadata !32, metadata !7, i64 16}
!32 = metadata !{metadata !"bitmap_element_def", metadata !15, i64 0, metadata !15, i64 8, metadata !7, i64 16, metadata !3, i64 24}
!33 = metadata !{metadata !32, metadata !15, i64 0}
!34 = metadata !{metadata !26, metadata !7, i64 24}
!35 = metadata !{metadata !36, metadata !7, i64 0}
!36 = metadata !{metadata !"rtvec_def", metadata !7, i64 0, metadata !3, i64 8}
!37 = metadata !{metadata !26, metadata !15, i64 8}
!38 = metadata !{metadata !39, metadata !15, i64 0}
!39 = metadata !{metadata !"basic_block_def", metadata !15, i64 0, metadata !15, i64 8, metadata !15, i64 16, metadata !15, i64 24, metadata !15, i64 32, metadata !15, i64 40, metadata !15, i64 48, metadata !15, i64 56, metadata !15, i64 64, metadata !15, i64 72, metadata !15, i64 80, metadata !7, i64 88, metadata !7, i64 92, metadata !2, i64 96, metadata !7, i64 104, metadata !7, i64 108}
!40 = metadata !{metadata !39, metadata !15, i64 8}
