; ModuleID = 'cfgrtl.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct._IO_FILE = type opaque
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.simple_bitmap_def = type { i32, i32, i32, [1 x i64] }

@cfun = external global %struct.function*
@.str = private unnamed_addr constant [9 x i8] c"cfgrtl.c\00", align 1
@__FUNCTION__.delete_insn = private unnamed_addr constant [12 x i8] c"delete_insn\00", align 1
@basic_block_info = external global %struct.varray_head_tag*
@basic_block_for_insn = common global %struct.varray_head_tag* null, align 8
@n_basic_blocks = external global i32
@.str1 = private unnamed_addr constant [21 x i8] c"basic_block_for_insn\00", align 1
@flow_obstack = external global %struct.obstack
@entry_exit_blocks = external global [2 x %struct.basic_block_def]
@target_flags = external global i32
@rtx_class = external constant [153 x i8]
@global_rtl = external global [11 x %struct.rtx_def*]
@__FUNCTION__.redirect_edge_and_branch = private unnamed_addr constant [25 x i8] c"redirect_edge_and_branch\00", align 1
@rtl_dump_file = external global %struct._IO_FILE*
@.str2 = private unnamed_addr constant [30 x i8] c"Edge %i->%i redirected to %i\0A\00", align 1
@__FUNCTION__.split_edge = private unnamed_addr constant [11 x i8] c"split_edge\00", align 1
@__FUNCTION__.insert_insn_on_edge = private unnamed_addr constant [20 x i8] c"insert_insn_on_edge\00", align 1
@.str3 = private unnamed_addr constant [41 x i8] c";; Basic block %d, loop depth %d, count \00", align 1
@.str4 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str5 = private unnamed_addr constant [18 x i8] c";; Predecessors: \00", align 1
@.str6 = private unnamed_addr constant [28 x i8] c";; Registers live at start:\00", align 1
@.str7 = private unnamed_addr constant [26 x i8] c";; Registers live at end:\00", align 1
@.str8 = private unnamed_addr constant [16 x i8] c";; Successors: \00", align 1
@stderr = external constant %struct._IO_FILE*
@.str9 = private unnamed_addr constant [7 x i8] c"(nil)\0A\00", align 1
@.str10 = private unnamed_addr constant [44 x i8] c";; Start of basic block %d, registers live:\00", align 1
@.str11 = private unnamed_addr constant [37 x i8] c";; Insn is not within a basic block\0A\00", align 1
@.str12 = private unnamed_addr constant [37 x i8] c";; Insn is in multiple basic blocks\0A\00", align 1
@.str13 = private unnamed_addr constant [43 x i8] c";; End of basic block %d, registers live:\0A\00", align 1
@.str14 = private unnamed_addr constant [36 x i8] c"\0A;; Insns in epilogue delay list:\0A\0A\00", align 1
@.str15 = private unnamed_addr constant [54 x i8] c"end insn %d for block %d not found in the insn stream\00", align 1
@.str16 = private unnamed_addr constant [48 x i8] c"insn %d is in multiple basic blocks (%d and %d)\00", align 1
@.str17 = private unnamed_addr constant [55 x i8] c"head insn %d for block %d not found in the insn stream\00", align 1
@.str18 = private unnamed_addr constant [40 x i8] c"verify_flow_info: Duplicate edge %i->%i\00", align 1
@.str19 = private unnamed_addr constant [55 x i8] c"verify_flow_info: Incorrect blocks for fallthru %i->%i\00", align 1
@.str20 = private unnamed_addr constant [44 x i8] c"verify_flow_info: Incorrect fallthru %i->%i\00", align 1
@.str21 = private unnamed_addr constant [32 x i8] c"wrong insn in the fallthru edge\00", align 1
@__FUNCTION__.verify_flow_info = private unnamed_addr constant [17 x i8] c"verify_flow_info\00", align 1
@.str22 = private unnamed_addr constant [56 x i8] c"verify_flow_info: Basic block %d succ edge is corrupted\00", align 1
@.str23 = private unnamed_addr constant [14 x i8] c"Predecessor: \00", align 1
@.str24 = private unnamed_addr constant [13 x i8] c"\0ASuccessor: \00", align 1
@.str26 = private unnamed_addr constant [31 x i8] c"missing barrier after block %i\00", align 1
@.str27 = private unnamed_addr constant [38 x i8] c"basic block %d pred edge is corrupted\00", align 1
@.str28 = private unnamed_addr constant [57 x i8] c"insn %d inside basic block %d but block_for_insn is NULL\00", align 1
@.str29 = private unnamed_addr constant [55 x i8] c"insn %d inside basic block %d but block_for_insn is %i\00", align 1
@.str30 = private unnamed_addr constant [46 x i8] c"NOTE_INSN_BASIC_BLOCK is missing for block %d\00", align 1
@.str31 = private unnamed_addr constant [53 x i8] c"NOTE_INSN_BASIC_BLOCK %d in middle of basic block %d\00", align 1
@.str32 = private unnamed_addr constant [19 x i8] c"in basic block %d:\00", align 1
@.str33 = private unnamed_addr constant [39 x i8] c"flow control insn inside a basic block\00", align 1
@.str34 = private unnamed_addr constant [40 x i8] c"basic block %i edge lists are corrupted\00", align 1
@.str35 = private unnamed_addr constant [40 x i8] c"basic blocks not numbered consecutively\00", align 1
@.str36 = private unnamed_addr constant [25 x i8] c"insn outside basic block\00", align 1
@.str37 = private unnamed_addr constant [31 x i8] c"return not followed by barrier\00", align 1
@.str38 = private unnamed_addr constant [61 x i8] c"number of bb notes in insn chain (%d) != n_basic_blocks (%d)\00", align 1
@.str39 = private unnamed_addr constant [24 x i8] c"verify_flow_info failed\00", align 1
@.str40 = private unnamed_addr constant [25 x i8] c"Purged edges from bb %i\0A\00", align 1
@optimize = external global i32
@__FUNCTION__.purge_dead_edges = private unnamed_addr constant [17 x i8] c"purge_dead_edges\00", align 1
@.str41 = private unnamed_addr constant [38 x i8] c"Purged non-fallthru edges from bb %i\0A\00", align 1
@label_value_list = common global %struct.rtx_def* null, align 8
@tail_recursion_label_list = common global %struct.rtx_def* null, align 8
@__FUNCTION__.commit_one_edge_insertion = private unnamed_addr constant [26 x i8] c"commit_one_edge_insertion\00", align 1
@__FUNCTION__.force_nonfallthru_and_redirect = private unnamed_addr constant [31 x i8] c"force_nonfallthru_and_redirect\00", align 1
@.str42 = private unnamed_addr constant [19 x i8] c"Removing jump %i.\0A\00", align 1
@.str43 = private unnamed_addr constant [36 x i8] c"Redirecting jump %i from %i to %i.\0A\00", align 1
@__FUNCTION__.try_redirect_by_replacing_jump = private unnamed_addr constant [31 x i8] c"try_redirect_by_replacing_jump\00", align 1
@.str44 = private unnamed_addr constant [30 x i8] c"Replacing insn %i by jump %i\0A\00", align 1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @delete_insn(%struct.rtx_def* %insn) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %if.then, label %if.then13

if.then:                                          ; preds = %entry
  %bf.clear.i = and i32 %bf.load, 268435456
  %tobool.i = icmp eq i32 %bf.clear.i, 0
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  br i1 %tobool.i, label %land.lhs.true.i, label %if.then1

land.lhs.true.i:                                  ; preds = %if.then
  %2 = load i8** %rtstr.i, align 8, !tbaa !1
  %cmp.i = icmp eq i8* %2, null
  br i1 %cmp.i, label %land.lhs.true1.i, label %if.then1

land.lhs.true1.i:                                 ; preds = %land.lhs.true.i
  %3 = load %struct.function** @cfun, align 8, !tbaa !1
  %expr.i = getelementptr inbounds %struct.function* %3, i64 0, i32 2
  %4 = load %struct.expr_status** %expr.i, align 8, !tbaa !5
  %x_forced_labels.i = getelementptr inbounds %struct.expr_status* %4, i64 0, i32 5
  %5 = load %struct.rtx_def** %x_forced_labels.i, align 8, !tbaa !10
  %call.i = tail call i32 @in_expr_list_p(%struct.rtx_def* %5, %struct.rtx_def* %insn) #4
  %tobool2.i = icmp eq i32 %call.i, 0
  br i1 %tobool2.i, label %land.rhs.i, label %if.then1

land.rhs.i:                                       ; preds = %land.lhs.true1.i
  %6 = load %struct.rtx_def** @label_value_list, align 8, !tbaa !1
  %call3.i = tail call i32 @in_expr_list_p(%struct.rtx_def* %6, %struct.rtx_def* %insn) #4
  %lnot.i = icmp eq i32 %call3.i, 0
  br i1 %lnot.i, label %if.then13.critedge, label %if.then1

if.then1:                                         ; preds = %if.then, %land.lhs.true.i, %land.lhs.true1.i, %land.rhs.i
  %7 = load i8** %rtstr.i, align 8, !tbaa !1
  %bf.load4 = load i32* %1, align 8
  %bf.clear5 = and i32 %bf.load4, -65536
  %bf.set = or i32 %bf.clear5, 37
  store i32 %bf.set, i32* %1, align 8
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  store i32 -88, i32* %rtint, align 4, !tbaa !12
  %8 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3, i32 0
  %.c = ptrtoint i8* %7 to i64
  store i64 %.c, i64* %8, align 8, !tbaa !1
  %9 = load %struct.function** @cfun, align 8, !tbaa !1
  %x_nonlocal_goto_handler_labels = getelementptr inbounds %struct.function* %9, i64 0, i32 21
  tail call void @remove_node_from_expr_list(%struct.rtx_def* %insn, %struct.rtx_def** %x_nonlocal_goto_handler_labels) #4
  %bf.load23.pre = load i32* %1, align 8
  br label %if.end22

if.then13.critedge:                               ; preds = %land.rhs.i
  %10 = load %struct.function** @cfun, align 8, !tbaa !1
  %x_nonlocal_goto_handler_labels.c = getelementptr inbounds %struct.function* %10, i64 0, i32 21
  tail call void @remove_node_from_expr_list(%struct.rtx_def* %insn, %struct.rtx_def** %x_nonlocal_goto_handler_labels.c) #4
  %bf.load14.pre = load i32* %1, align 8
  br label %if.then13

if.then13:                                        ; preds = %if.then13.critedge, %entry
  %bf.load14 = phi i32 [ %bf.load14.pre, %if.then13.critedge ], [ %bf.load, %entry ]
  %bf.clear15 = and i32 %bf.load14, 134217728
  %tobool16 = icmp eq i32 %bf.clear15, 0
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.then13
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 139, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.delete_insn, i64 0, i64 0)) #5
  unreachable

if.end18:                                         ; preds = %if.then13
  tail call void @remove_insn(%struct.rtx_def* %insn) #4
  %bf.load19 = load i32* %1, align 8
  %bf.set21 = or i32 %bf.load19, 134217728
  store i32 %bf.set21, i32* %1, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then1, %if.end18
  %bf.load23 = phi i32 [ %bf.load23.pre, %if.then1 ], [ %bf.set21, %if.end18 ]
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 33
  br i1 %cmp25, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end22
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 7
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx28, align 8, !tbaa !1
  %tobool29 = icmp eq %struct.rtx_def* %11, null
  br i1 %tobool29, label %if.else, label %land.lhs.true30

land.lhs.true30:                                  ; preds = %land.lhs.true
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load34 = load i32* %12, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp eq i32 %bf.clear35, 36
  br i1 %cmp36, label %if.then37, label %if.else

if.then37:                                        ; preds = %land.lhs.true30
  %arrayidx42 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 3
  %rtint43 = bitcast %union.rtunion_def* %arrayidx42 to i32*
  %13 = load i32* %rtint43, align 4, !tbaa !12
  %dec = add nsw i32 %13, -1
  store i32 %dec, i32* %rtint43, align 4, !tbaa !12
  br label %if.end62

if.else:                                          ; preds = %land.lhs.true, %land.lhs.true30, %if.end22
  %call44 = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn, i32 13, %struct.rtx_def* null) #4
  %cmp45 = icmp eq %struct.rtx_def* %call44, null
  br i1 %cmp45, label %if.end62, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %if.else
  %arrayidx48 = getelementptr inbounds %struct.rtx_def* %call44, i64 0, i32 1, i64 0
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx49, align 8, !tbaa !1
  %15 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 0
  %bf.load50 = load i32* %15, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 36
  br i1 %cmp52, label %if.then53, label %if.end62

if.then53:                                        ; preds = %land.lhs.true46
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 3
  %rtint59 = bitcast %union.rtunion_def* %arrayidx58 to i32*
  %16 = load i32* %rtint59, align 4, !tbaa !12
  %dec60 = add nsw i32 %16, -1
  store i32 %dec60, i32* %rtint59, align 4, !tbaa !12
  br label %if.end62

if.end62:                                         ; preds = %if.else, %land.lhs.true46, %if.then53, %if.then37
  %bf.load63 = load i32* %1, align 8
  %bf.clear64 = and i32 %bf.load63, 65535
  %cmp65 = icmp eq i32 %bf.clear64, 33
  br i1 %cmp65, label %land.lhs.true66, label %if.end112

land.lhs.true66:                                  ; preds = %if.end62
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx69, align 8, !tbaa !1
  %18 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 0
  %bf.load70 = load i32* %18, align 8
  %19 = and i32 %bf.load70, 65534
  %switch = icmp eq i32 %19, 44
  br i1 %switch, label %if.then79, label %if.end112

if.then79:                                        ; preds = %land.lhs.true66
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp88 = icmp eq i32 %bf.clear71, 45
  %idxprom = zext i1 %cmp88 to i64
  %arrayidx90 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 1, i64 %idxprom
  %rtvec = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtvec_def**
  %20 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %20, i64 0, i32 0
  %21 = load i32* %num_elem, align 4, !tbaa !13
  %cmp91142 = icmp sgt i32 %21, 0
  br i1 %cmp91142, label %for.body, label %if.end112

for.body:                                         ; preds = %if.then79, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %if.then79 ]
  %arrayidx98 = getelementptr inbounds %struct.rtvec_def* %20, i64 0, i32 1, i64 %indvars.iv
  %22 = load %struct.rtx_def** %arrayidx98, align 8, !tbaa !1
  %arrayidx100 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 1, i64 0
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  %23 = load %struct.rtx_def** %rtx101, align 8, !tbaa !1
  %24 = getelementptr inbounds %struct.rtx_def* %23, i64 0, i32 0
  %bf.load102 = load i32* %24, align 8
  %bf.clear103 = and i32 %bf.load102, 65535
  %cmp104 = icmp eq i32 %bf.clear103, 37
  br i1 %cmp104, label %for.inc, label %if.then106

if.then106:                                       ; preds = %for.body
  %arrayidx108 = getelementptr inbounds %struct.rtx_def* %23, i64 0, i32 1, i64 3
  %rtint109 = bitcast %union.rtunion_def* %arrayidx108 to i32*
  %25 = load i32* %rtint109, align 4, !tbaa !12
  %dec110 = add nsw i32 %25, -1
  store i32 %dec110, i32* %rtint109, align 4, !tbaa !12
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then106
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %21
  br i1 %exitcond, label %if.end112, label %for.body

if.end112:                                        ; preds = %for.inc, %if.then79, %land.lhs.true66, %if.end62
  ret %struct.rtx_def* %0
}

declare void @remove_node_from_expr_list(%struct.rtx_def*, %struct.rtx_def**) #1

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

declare void @remove_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @delete_insn_chain(%struct.rtx_def* %start, %struct.rtx_def* readnone %finish) #0 {
entry:
  br label %while.body

while.body:                                       ; preds = %if.end, %entry
  %start.addr.0 = phi %struct.rtx_def* [ %start, %entry ], [ %next.0, %if.end ]
  %0 = getelementptr inbounds %struct.rtx_def* %start.addr.0, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %arrayidx = getelementptr inbounds %struct.rtx_def* %start.addr.0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %start.addr.0, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %2 = load i32* %rtint.i, align 4, !tbaa !12
  switch i32 %2, label %if.end [
    i32 -80, label %if.else
    i32 -99, label %if.else
  ]

if.else:                                          ; preds = %land.lhs.true, %land.lhs.true, %while.body
  %call1 = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %start.addr.0)
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %if.else
  %next.0 = phi %struct.rtx_def* [ %call1, %if.else ], [ %1, %land.lhs.true ]
  %cmp2 = icmp eq %struct.rtx_def* %start.addr.0, %finish
  br i1 %cmp2, label %while.end, label %while.body

while.end:                                        ; preds = %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.basic_block_def* @create_basic_block_structure(i32 %index, %struct.rtx_def* %head, %struct.rtx_def* %end, %struct.rtx_def* %bb_note) #0 {
entry:
  %tobool = icmp eq %struct.rtx_def* %bb_note, null
  br i1 %tobool, label %if.else20, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %bb_note, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 1073741824
  %tobool1 = icmp eq i32 %bf.clear, 0
  br i1 %tobool1, label %land.lhs.true2, label %if.else20

land.lhs.true2:                                   ; preds = %land.lhs.true
  %arrayidx = getelementptr inbounds %struct.rtx_def* %bb_note, i64 0, i32 1, i64 3
  %bb3 = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**
  %1 = load %struct.basic_block_def** %bb3, align 8, !tbaa !1
  %cmp = icmp eq %struct.basic_block_def* %1, null
  br i1 %cmp, label %if.else20, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %aux = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 10
  %2 = load i8** %aux, align 8, !tbaa !15
  %cmp5 = icmp eq i8* %2, null
  br i1 %cmp5, label %if.then, label %if.else20

if.then:                                          ; preds = %land.lhs.true4
  %3 = getelementptr inbounds %struct.rtx_def* %head, i64 0, i32 0
  %bf.load6 = load i32* %3, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 36
  br i1 %cmp8, label %if.end, label %if.else

if.else:                                          ; preds = %if.then
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %head, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %if.else
  %head.addr.0 = phi %struct.rtx_def* [ %bb_note, %if.else ], [ %head, %if.then ]
  %after.0 = phi %struct.rtx_def* [ %4, %if.else ], [ %head, %if.then ]
  %cmp12 = icmp eq %struct.rtx_def* %after.0, %bb_note
  br i1 %cmp12, label %if.end48, label %land.lhs.true13

land.lhs.true13:                                  ; preds = %if.end
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %after.0, i64 0, i32 1, i64 2
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx16, align 8, !tbaa !1
  %cmp17 = icmp eq %struct.rtx_def* %5, %bb_note
  br i1 %cmp17, label %if.end48, label %if.then18

if.then18:                                        ; preds = %land.lhs.true13
  tail call void @reorder_insns(%struct.rtx_def* %bb_note, %struct.rtx_def* %bb_note, %struct.rtx_def* %after.0) #4
  br label %if.end48

if.else20:                                        ; preds = %land.lhs.true2, %land.lhs.true, %entry, %land.lhs.true4
  %call = tail call %struct.basic_block_def* @alloc_block() #4
  %tobool21 = icmp ne %struct.rtx_def* %head, null
  %tobool23 = icmp ne %struct.rtx_def* %end, null
  %or.cond = or i1 %tobool21, %tobool23
  br i1 %or.cond, label %if.else27, label %if.then24

if.then24:                                        ; preds = %if.else20
  %call25 = tail call %struct.rtx_def* @get_last_insn() #4
  %call26 = tail call %struct.rtx_def* @emit_note_after(i32 -80, %struct.rtx_def* %call25) #4
  br label %if.end44

if.else27:                                        ; preds = %if.else20
  %6 = getelementptr inbounds %struct.rtx_def* %head, i64 0, i32 0
  %bf.load28 = load i32* %6, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 36
  %or.cond64 = and i1 %cmp30, %tobool23
  br i1 %or.cond64, label %if.then33, label %if.else38

if.then33:                                        ; preds = %if.else27
  %call34 = tail call %struct.rtx_def* @emit_note_after(i32 -80, %struct.rtx_def* %head) #4
  %cmp35 = icmp eq %struct.rtx_def* %head, %end
  %call34.end = select i1 %cmp35, %struct.rtx_def* %call34, %struct.rtx_def* %end
  br label %if.end44

if.else38:                                        ; preds = %if.else27
  %call39 = tail call %struct.rtx_def* @emit_note_before(i32 -80, %struct.rtx_def* %head) #4
  %end.call39 = select i1 %tobool23, %struct.rtx_def* %end, %struct.rtx_def* %call39
  br label %if.end44

if.end44:                                         ; preds = %if.else38, %if.then33, %if.then24
  %head.addr.1 = phi %struct.rtx_def* [ %call26, %if.then24 ], [ %head, %if.then33 ], [ %call39, %if.else38 ]
  %end.addr.0 = phi %struct.rtx_def* [ %call26, %if.then24 ], [ %call34.end, %if.then33 ], [ %end.call39, %if.else38 ]
  %bb_note.addr.0 = phi %struct.rtx_def* [ %call26, %if.then24 ], [ %call34, %if.then33 ], [ %call39, %if.else38 ]
  %7 = getelementptr inbounds %struct.rtx_def* %bb_note.addr.0, i64 0, i32 1, i64 3, i32 0
  %call.c = ptrtoint %struct.basic_block_def* %call to i64
  store i64 %call.c, i64* %7, align 8, !tbaa !1
  br label %if.end48

if.end48:                                         ; preds = %land.lhs.true13, %if.end, %if.then18, %if.end44
  %head.addr.2 = phi %struct.rtx_def* [ %head.addr.1, %if.end44 ], [ %head.addr.0, %if.then18 ], [ %head.addr.0, %land.lhs.true13 ], [ %head.addr.0, %if.end ]
  %end.addr.1 = phi %struct.rtx_def* [ %end.addr.0, %if.end44 ], [ %end, %if.then18 ], [ %end, %land.lhs.true13 ], [ %end, %if.end ]
  %bb_note.addr.1 = phi %struct.rtx_def* [ %bb_note.addr.0, %if.end44 ], [ %bb_note, %if.then18 ], [ %bb_note, %land.lhs.true13 ], [ %bb_note, %if.end ]
  %bb.0 = phi %struct.basic_block_def* [ %call, %if.end44 ], [ %1, %if.then18 ], [ %1, %land.lhs.true13 ], [ %1, %if.end ]
  %arrayidx50 = getelementptr inbounds %struct.rtx_def* %end.addr.1, i64 0, i32 1, i64 2
  %rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx51, align 8, !tbaa !1
  %cmp52 = icmp eq %struct.rtx_def* %8, %bb_note.addr.1
  %bb_note.addr.1.end.addr.1 = select i1 %cmp52, %struct.rtx_def* %bb_note.addr.1, %struct.rtx_def* %end.addr.1
  %head55 = getelementptr inbounds %struct.basic_block_def* %bb.0, i64 0, i32 0
  store %struct.rtx_def* %head.addr.2, %struct.rtx_def** %head55, align 8, !tbaa !17
  %end56 = getelementptr inbounds %struct.basic_block_def* %bb.0, i64 0, i32 1
  store %struct.rtx_def* %bb_note.addr.1.end.addr.1, %struct.rtx_def** %end56, align 8, !tbaa !18
  %index57 = getelementptr inbounds %struct.basic_block_def* %bb.0, i64 0, i32 11
  store i32 %index, i32* %index57, align 4, !tbaa !19
  %idxprom = sext i32 %index to i64
  %9 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %9, i64 0, i32 4
  %bb58 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx59 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb58, i64 0, i64 %idxprom
  store %struct.basic_block_def* %bb.0, %struct.basic_block_def** %arrayidx59, align 8, !tbaa !1
  %10 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool60 = icmp eq %struct.varray_head_tag* %10, null
  br i1 %tobool60, label %if.end62, label %for.cond.i

for.cond.i:                                       ; preds = %if.end48, %for.inc.i
  %11 = phi %struct.varray_head_tag* [ %.pre.i, %for.inc.i ], [ %10, %if.end48 ]
  %insn.0.in.i = phi %struct.rtx_def** [ %rtx.i, %for.inc.i ], [ %head55, %if.end48 ]
  %insn.0.i = load %struct.rtx_def** %insn.0.in.i, align 8
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %insn.0.i, i64 0, i32 1, i64 0
  %rtint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to i32*
  %12 = load i32* %rtint.i.i, align 4, !tbaa !12
  %conv.i.i = sext i32 %12 to i64
  %num_elements.i.i = getelementptr inbounds %struct.varray_head_tag* %11, i64 0, i32 0
  %13 = load i64* %num_elements.i.i, align 8, !tbaa !20
  %cmp.i.i = icmp ult i64 %conv.i.i, %13
  br i1 %cmp.i.i, label %set_block_for_insn.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.cond.i
  %add.i.i = add i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %add2.i.i = add i64 %div.i.i, %conv.i.i
  %call.i.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %11, i64 %add2.i.i) #4
  store %struct.varray_head_tag* %call.i.i, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit.i

set_block_for_insn.exit.i:                        ; preds = %if.then.i.i, %for.cond.i
  %14 = phi %struct.varray_head_tag* [ %11, %for.cond.i ], [ %call.i.i, %if.then.i.i ]
  %data.i.i = getelementptr inbounds %struct.varray_head_tag* %14, i64 0, i32 4
  %bb3.i.i = bitcast %union.varray_data_tag* %data.i.i to [1 x %struct.basic_block_def*]*
  %arrayidx4.i.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i.i, i64 0, i64 %conv.i.i
  store %struct.basic_block_def* %bb.0, %struct.basic_block_def** %arrayidx4.i.i, align 8, !tbaa !1
  %15 = load %struct.rtx_def** %end56, align 8, !tbaa !18
  %cmp.i = icmp eq %struct.rtx_def* %insn.0.i, %15
  br i1 %cmp.i, label %if.end62, label %for.inc.i

for.inc.i:                                        ; preds = %set_block_for_insn.exit.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %insn.0.i, i64 0, i32 1, i64 2
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %.pre.i = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %for.cond.i

if.end62:                                         ; preds = %set_block_for_insn.exit.i, %if.end48
  %16 = bitcast %struct.basic_block_def* %bb.0 to i8*
  %aux63 = getelementptr inbounds %struct.basic_block_def* %bb.0, i64 0, i32 10
  store i8* %16, i8** %aux63, align 8, !tbaa !15
  ret %struct.basic_block_def* %bb.0
}

declare void @reorder_insns(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.basic_block_def* @alloc_block() #1

declare %struct.rtx_def* @emit_note_after(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @get_last_insn() #1

declare %struct.rtx_def* @emit_note_before(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @update_bb_for_insn(%struct.basic_block_def* %bb) #0 {
entry:
  %0 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool = icmp eq %struct.varray_head_tag* %0, null
  br i1 %tobool, label %for.end, label %if.end

if.end:                                           ; preds = %entry
  %head = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 0
  %end = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = phi %struct.varray_head_tag* [ %0, %if.end ], [ %.pre, %for.inc ]
  %insn.0.in = phi %struct.rtx_def** [ %head, %if.end ], [ %rtx, %for.inc ]
  %insn.0 = load %struct.rtx_def** %insn.0.in, align 8
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 0
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %2 = load i32* %rtint.i, align 4, !tbaa !12
  %conv.i = sext i32 %2 to i64
  %num_elements.i = getelementptr inbounds %struct.varray_head_tag* %1, i64 0, i32 0
  %3 = load i64* %num_elements.i, align 8, !tbaa !20
  %cmp.i = icmp ult i64 %conv.i, %3
  br i1 %cmp.i, label %set_block_for_insn.exit, label %if.then.i

if.then.i:                                        ; preds = %for.cond
  %add.i = add i64 %conv.i, 7
  %div.i = lshr i64 %add.i, 3
  %add2.i = add i64 %div.i, %conv.i
  %call.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %1, i64 %add2.i) #4
  store %struct.varray_head_tag* %call.i, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit

set_block_for_insn.exit:                          ; preds = %for.cond, %if.then.i
  %4 = phi %struct.varray_head_tag* [ %1, %for.cond ], [ %call.i, %if.then.i ]
  %data.i = getelementptr inbounds %struct.varray_head_tag* %4, i64 0, i32 4
  %bb3.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx4.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %conv.i
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %arrayidx4.i, align 8, !tbaa !1
  %5 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %cmp = icmp eq %struct.rtx_def* %insn.0, %5
  br i1 %cmp, label %for.end, label %for.inc

for.inc:                                          ; preds = %set_block_for_insn.exit
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %.pre = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %for.cond

for.end:                                          ; preds = %set_block_for_insn.exit, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.basic_block_def* @create_basic_block(i32 %index, %struct.rtx_def* %head, %struct.rtx_def* %end) #0 {
entry:
  %0 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %1 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* @n_basic_blocks, align 4, !tbaa !12
  %conv = sext i32 %inc to i64
  %call = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %0, i64 %conv) #4
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %2 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %i.017 = add i32 %2, -1
  %cmp18 = icmp sgt i32 %i.017, %index
  br i1 %cmp18, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %3 = sext i32 %i.017 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %4 = phi %struct.varray_head_tag* [ %call, %for.body.lr.ph ], [ %.pre, %for.body.for.body_crit_edge ]
  %indvars.iv = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next, %for.body.for.body_crit_edge ]
  %i.020 = phi i32 [ %i.017, %for.body.lr.ph ], [ %i.0, %for.body.for.body_crit_edge ]
  %i.0.in19 = phi i32 [ %2, %for.body.lr.ph ], [ %6, %for.body.for.body_crit_edge ]
  %sub2 = add nsw i32 %i.0.in19, -2
  %idxprom = sext i32 %sub2 to i64
  %data = getelementptr inbounds %struct.varray_head_tag* %4, i64 0, i32 4
  %bb3 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3, i64 0, i64 %idxprom
  %5 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %arrayidx7 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3, i64 0, i64 %indvars.iv
  store %struct.basic_block_def* %5, %struct.basic_block_def** %arrayidx7, align 8, !tbaa !1
  %index8 = getelementptr inbounds %struct.basic_block_def* %5, i64 0, i32 11
  %6 = trunc i64 %indvars.iv to i32
  store i32 %6, i32* %index8, align 4, !tbaa !19
  %i.0 = add nsw i32 %i.020, -1
  %cmp = icmp sgt i32 %i.0, %index
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.end

for.body.for.body_crit_edge:                      ; preds = %for.body
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %.pre = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  br label %for.body

for.end:                                          ; preds = %for.body, %entry
  %call9 = tail call %struct.basic_block_def* @create_basic_block_structure(i32 %index, %struct.rtx_def* %head, %struct.rtx_def* %end, %struct.rtx_def* null)
  %aux = getelementptr inbounds %struct.basic_block_def* %call9, i64 0, i32 10
  store i8* null, i8** %aux, align 8, !tbaa !15
  ret %struct.basic_block_def* %call9
}

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #1

; Function Attrs: nounwind uwtable
define i32 @flow_delete_block_noexpunge(%struct.basic_block_def* nocapture %b) #0 {
entry:
  %head = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 0
  %0 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %end1 = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 1
  %1 = load %struct.rtx_def** %end1, align 8, !tbaa !18
  tail call void @never_reached_warning(%struct.rtx_def* %0, %struct.rtx_def* %1) #4
  %2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @maybe_remove_eh_handler(%struct.rtx_def* %0) #4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.rtx_def** %end1, align 8, !tbaa !18
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load3 = load i32* %4, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 33
  br i1 %cmp5, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp6 = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp6, label %if.end30, label %land.lhs.true7

land.lhs.true7:                                   ; preds = %land.lhs.true
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 2
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx10, align 8, !tbaa !1
  %cmp11 = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp11, label %if.end30, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %land.lhs.true7
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load13 = load i32* %7, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 33
  br i1 %cmp15, label %land.lhs.true16, label %if.end30

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 3
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx19, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load20 = load i32* %9, align 8
  %10 = and i32 %bf.load20, 65534
  %switch = icmp eq i32 %10, 44
  %. = select i1 %switch, %struct.rtx_def* %6, %struct.rtx_def* %3
  br label %if.end30

if.end30:                                         ; preds = %land.lhs.true16, %land.lhs.true7, %land.lhs.true, %land.lhs.true12, %if.end
  %end.0 = phi %struct.rtx_def* [ %3, %land.lhs.true12 ], [ %3, %land.lhs.true7 ], [ %3, %land.lhs.true ], [ %3, %if.end ], [ %., %land.lhs.true16 ]
  %call = tail call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %end.0) #4
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %if.end36, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %if.end30
  %11 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %bf.load32 = load i32* %11, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 35
  %call.end.0 = select i1 %cmp34, %struct.rtx_def* %call, %struct.rtx_def* %end.0
  br label %if.end36

if.end36:                                         ; preds = %land.lhs.true31, %if.end30
  %end.1 = phi %struct.rtx_def* [ %end.0, %if.end30 ], [ %call.end.0, %land.lhs.true31 ]
  store %struct.rtx_def* null, %struct.rtx_def** %head, align 8, !tbaa !17
  br label %while.body.i

while.body.i:                                     ; preds = %if.end.i, %if.end36
  %start.addr.0.i = phi %struct.rtx_def* [ %0, %if.end36 ], [ %next.0.i, %if.end.i ]
  %12 = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 0
  %bf.load.i = load i32* %12, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 37
  br i1 %cmp.i, label %land.lhs.true.i, label %if.else.i

land.lhs.true.i:                                  ; preds = %while.body.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 1, i64 2
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 1, i64 4
  %rtint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to i32*
  %14 = load i32* %rtint.i.i, align 4, !tbaa !12
  switch i32 %14, label %if.end.i [
    i32 -80, label %if.else.i
    i32 -99, label %if.else.i
  ]

if.else.i:                                        ; preds = %land.lhs.true.i, %land.lhs.true.i, %while.body.i
  %call1.i = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %start.addr.0.i) #4
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %land.lhs.true.i
  %next.0.i = phi %struct.rtx_def* [ %call1.i, %if.else.i ], [ %13, %land.lhs.true.i ]
  %cmp2.i = icmp eq %struct.rtx_def* %start.addr.0.i, %end.1
  br i1 %cmp2.i, label %while.cond.preheader, label %while.body.i

while.cond.preheader:                             ; preds = %if.end.i
  %pred = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 4
  %15 = load %struct.edge_def** %pred, align 8, !tbaa !23
  %cmp3869 = icmp eq %struct.edge_def* %15, null
  br i1 %cmp3869, label %while.cond40.preheader, label %while.body

while.cond40.preheader:                           ; preds = %while.body, %while.cond.preheader
  %succ = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 5
  %16 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %cmp4168 = icmp eq %struct.edge_def* %16, null
  br i1 %cmp4168, label %while.end44, label %while.body42

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %17 = phi %struct.edge_def* [ %18, %while.body ], [ %15, %while.cond.preheader ]
  tail call void @remove_edge(%struct.edge_def* %17) #4
  %18 = load %struct.edge_def** %pred, align 8, !tbaa !23
  %cmp38 = icmp eq %struct.edge_def* %18, null
  br i1 %cmp38, label %while.cond40.preheader, label %while.body

while.body42:                                     ; preds = %while.cond40.preheader, %while.body42
  %19 = phi %struct.edge_def* [ %20, %while.body42 ], [ %16, %while.cond40.preheader ]
  tail call void @remove_edge(%struct.edge_def* %19) #4
  %20 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %cmp41 = icmp eq %struct.edge_def* %20, null
  br i1 %cmp41, label %while.end44, label %while.body42

while.end44:                                      ; preds = %while.body42, %while.cond40.preheader
  %21 = bitcast %struct.edge_def** %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 16, i32 8, i1 false)
  ret i32 0
}

declare void @never_reached_warning(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @maybe_remove_eh_handler(%struct.rtx_def*) #1

declare %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #1

declare void @remove_edge(%struct.edge_def*) #1

; Function Attrs: nounwind uwtable
define i32 @flow_delete_block(%struct.basic_block_def* %b) #0 {
entry:
  %call = tail call i32 @flow_delete_block_noexpunge(%struct.basic_block_def* %b)
  tail call void @expunge_block(%struct.basic_block_def* %b) #4
  ret i32 0
}

declare void @expunge_block(%struct.basic_block_def*) #1

; Function Attrs: nounwind uwtable
define void @compute_bb_for_insn(i32 %max) #0 {
entry:
  %0 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool = icmp eq %struct.varray_head_tag* %0, null
  br i1 %tobool, label %if.end3, label %if.then2

if.then2:                                         ; preds = %entry
  %1 = bitcast %struct.varray_head_tag* %0 to i8*
  tail call void @free(i8* %1)
  store %struct.varray_head_tag* null, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %if.end3

if.end3:                                          ; preds = %entry, %if.then2
  %conv = sext i32 %max to i64
  %call = tail call %struct.varray_head_tag* @varray_init(i64 %conv, i64 8, i8* getelementptr inbounds ([21 x i8]* @.str1, i64 0, i64 0)) #4
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %2 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %cmp36 = icmp sgt i32 %2, 0
  br i1 %cmp36, label %for.body, label %for.end27

for.body:                                         ; preds = %if.end3, %for.inc26
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc26 ], [ 0, %if.end3 ]
  %3 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 4
  %bb5 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb5, i64 0, i64 %indvars.iv
  %4 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %end6 = getelementptr inbounds %struct.basic_block_def* %4, i64 0, i32 1
  %5 = load %struct.rtx_def** %end6, align 8, !tbaa !18
  %head = getelementptr inbounds %struct.basic_block_def* %4, i64 0, i32 0
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc, %for.body
  %insn.0.in = phi %struct.rtx_def** [ %head, %for.body ], [ %rtx, %for.inc ]
  %insn.0 = load %struct.rtx_def** %insn.0.in, align 8
  %fld = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  %6 = load i32* %rtint, align 4, !tbaa !12
  %cmp9 = icmp slt i32 %6, %max
  br i1 %cmp9, label %if.then11, label %if.end19

if.then11:                                        ; preds = %for.cond7
  %idxprom15 = sext i32 %6 to i64
  %7 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %data16 = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 4
  %bb17 = bitcast %union.varray_data_tag* %data16 to [1 x %struct.basic_block_def*]*
  %arrayidx18 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb17, i64 0, i64 %idxprom15
  store %struct.basic_block_def* %4, %struct.basic_block_def** %arrayidx18, align 8, !tbaa !1
  br label %if.end19

if.end19:                                         ; preds = %if.then11, %for.cond7
  %cmp20 = icmp eq %struct.rtx_def* %insn.0, %5
  br i1 %cmp20, label %for.inc26, label %for.inc

for.inc:                                          ; preds = %if.end19
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  br label %for.cond7

for.inc26:                                        ; preds = %if.end19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %8 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %8, %2
  br i1 %cmp, label %for.body, label %for.end27

for.end27:                                        ; preds = %for.inc26, %if.end3
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #3

declare %struct.varray_head_tag* @varray_init(i64, i64, i8*) #1

; Function Attrs: nounwind uwtable
define void @free_bb_for_insn() #0 {
entry:
  %0 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool = icmp eq %struct.varray_head_tag* %0, null
  br i1 %tobool, label %if.end3, label %if.then2

if.then2:                                         ; preds = %entry
  %1 = bitcast %struct.varray_head_tag* %0 to i8*
  tail call void @free(i8* %1)
  store %struct.varray_head_tag* null, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %if.end3

if.end3:                                          ; preds = %entry, %if.then2
  store %struct.varray_head_tag* null, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_block_for_insn(%struct.rtx_def* nocapture readonly %insn, %struct.basic_block_def* %bb) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtint, align 4, !tbaa !12
  %conv = sext i32 %0 to i64
  %1 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %1, i64 0, i32 0
  %2 = load i64* %num_elements, align 8, !tbaa !20
  %cmp = icmp ult i64 %conv, %2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %add = add i64 %conv, 7
  %div = lshr i64 %add, 3
  %add2 = add i64 %div, %conv
  %call = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %1, i64 %add2) #4
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %3 = phi %struct.varray_head_tag* [ %1, %entry ], [ %call, %if.then ]
  %data = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 4
  %bb3 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx4 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3, i64 0, i64 %conv
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %arrayidx4, align 8, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.edge_def* @split_block(%struct.basic_block_def* %bb, %struct.rtx_def* %insn) #0 {
entry:
  %end = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 1
  %0 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %cmp = icmp eq %struct.rtx_def* %0, %insn
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %index = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 11
  %1 = load i32* %index, align 4, !tbaa !19
  %add = add nsw i32 %1, 1
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %3 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %4 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %inc.i = add nsw i32 %4, 1
  store i32 %inc.i, i32* @n_basic_blocks, align 4, !tbaa !12
  %conv.i = sext i32 %inc.i to i64
  %call.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %3, i64 %conv.i) #4
  store %struct.varray_head_tag* %call.i, %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %5 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %i.017.i = add i32 %5, -1
  %cmp18.i = icmp sgt i32 %i.017.i, %add
  br i1 %cmp18.i, label %for.body.lr.ph.i, label %create_basic_block.exit

for.body.lr.ph.i:                                 ; preds = %if.end
  %6 = sext i32 %i.017.i to i64
  %sub2.i203 = add i32 %5, -2
  %idxprom.i204 = sext i32 %sub2.i203 to i64
  %data.i205 = getelementptr inbounds %struct.varray_head_tag* %call.i, i64 0, i32 4
  %bb3.i206 = bitcast %union.varray_data_tag* %data.i205 to [1 x %struct.basic_block_def*]*
  %arrayidx.i207 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i206, i64 0, i64 %idxprom.i204
  %7 = load %struct.basic_block_def** %arrayidx.i207, align 8, !tbaa !1
  %arrayidx7.i208 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i206, i64 0, i64 %6
  store %struct.basic_block_def* %7, %struct.basic_block_def** %arrayidx7.i208, align 8, !tbaa !1
  %index8.i209 = getelementptr inbounds %struct.basic_block_def* %7, i64 0, i32 11
  store i32 %i.017.i, i32* %index8.i209, align 4, !tbaa !19
  %cmp.i211 = icmp sgt i32 %sub2.i203, %add
  br i1 %cmp.i211, label %for.body.for.body_crit_edge.i, label %create_basic_block.exit

for.body.for.body_crit_edge.i:                    ; preds = %for.body.lr.ph.i, %for.body.for.body_crit_edge.i
  %i.0.i213 = phi i32 [ %i.0.i, %for.body.for.body_crit_edge.i ], [ %sub2.i203, %for.body.lr.ph.i ]
  %8 = phi i32 [ %10, %for.body.for.body_crit_edge.i ], [ %i.017.i, %for.body.lr.ph.i ]
  %indvars.iv.i212 = phi i64 [ %indvars.iv.next.i, %for.body.for.body_crit_edge.i ], [ %6, %for.body.lr.ph.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i212, -1
  %.pre.i = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %sub2.i = add nsw i32 %8, -2
  %idxprom.i = sext i32 %sub2.i to i64
  %data.i = getelementptr inbounds %struct.varray_head_tag* %.pre.i, i64 0, i32 4
  %bb3.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %idxprom.i
  %9 = load %struct.basic_block_def** %arrayidx.i, align 8, !tbaa !1
  %arrayidx7.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %indvars.iv.next.i
  store %struct.basic_block_def* %9, %struct.basic_block_def** %arrayidx7.i, align 8, !tbaa !1
  %index8.i = getelementptr inbounds %struct.basic_block_def* %9, i64 0, i32 11
  %10 = trunc i64 %indvars.iv.next.i to i32
  store i32 %10, i32* %index8.i, align 4, !tbaa !19
  %i.0.i = add nsw i32 %i.0.i213, -1
  %cmp.i = icmp sgt i32 %i.0.i, %add
  br i1 %cmp.i, label %for.body.for.body_crit_edge.i, label %create_basic_block.exit

create_basic_block.exit:                          ; preds = %for.body.for.body_crit_edge.i, %for.body.lr.ph.i, %if.end
  %call9.i = tail call %struct.basic_block_def* @create_basic_block_structure(i32 %add, %struct.rtx_def* %2, %struct.rtx_def* %0, %struct.rtx_def* null) #4
  %aux.i = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 10
  store i8* null, i8** %aux.i, align 8, !tbaa !15
  %count = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 13
  %11 = load i64* %count, align 8, !tbaa !25
  %count2 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 13
  store i64 %11, i64* %count2, align 8, !tbaa !25
  %frequency = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 14
  %12 = load i32* %frequency, align 4, !tbaa !26
  %frequency3 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 14
  store i32 %12, i32* %frequency3, align 4, !tbaa !26
  %loop_depth = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 12
  %13 = load i32* %loop_depth, align 4, !tbaa !27
  %loop_depth4 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 12
  store i32 %13, i32* %loop_depth4, align 4, !tbaa !27
  store %struct.rtx_def* %insn, %struct.rtx_def** %end, align 8, !tbaa !18
  %succ = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 5
  %14 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %succ6 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 5
  store %struct.edge_def* %14, %struct.edge_def** %succ6, align 8, !tbaa !24
  store %struct.edge_def* null, %struct.edge_def** %succ, align 8, !tbaa !24
  %e.0200 = load %struct.edge_def** %succ6, align 8
  %tobool201 = icmp eq %struct.edge_def* %e.0200, null
  br i1 %tobool201, label %for.end, label %for.body

for.body:                                         ; preds = %create_basic_block.exit, %for.body
  %e.0202 = phi %struct.edge_def* [ %e.0, %for.body ], [ %e.0200, %create_basic_block.exit ]
  %src = getelementptr inbounds %struct.edge_def* %e.0202, i64 0, i32 2
  store %struct.basic_block_def* %call9.i, %struct.basic_block_def** %src, align 8, !tbaa !28
  %succ_next = getelementptr inbounds %struct.edge_def* %e.0202, i64 0, i32 1
  %e.0 = load %struct.edge_def** %succ_next, align 8
  %tobool = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %create_basic_block.exit
  %call9 = tail call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %bb, %struct.basic_block_def* %call9.i, i32 1) #4
  %global_live_at_start = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 8
  %15 = load %struct.bitmap_head_def** %global_live_at_start, align 8, !tbaa !30
  %tobool10 = icmp eq %struct.bitmap_head_def* %15, null
  br i1 %tobool10, label %return, label %if.then11

if.then11:                                        ; preds = %for.end
  %16 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %17 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp12 = icmp slt i64 %sub.ptr.sub, 24
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then11
  tail call void @_obstack_newchunk(%struct.obstack* @flow_obstack, i32 24) #4
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.then11
  %18 = phi i8* [ %.pre, %if.then14 ], [ %17, %if.then11 ]
  %add.ptr = getelementptr inbounds i8* %18, i64 24
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %19 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %cmp20 = icmp eq i8* %add.ptr, %19
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end15
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %if.end15
  %sub.ptr.lhs.cast25 = ptrtoint i8* %add.ptr to i64
  %20 = load i32* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 6), align 8, !tbaa !35
  %conv27 = sext i32 %20 to i64
  %add28 = add nsw i64 %conv27, %sub.ptr.lhs.cast25
  %neg = xor i32 %20, -1
  %conv30 = sext i32 %neg to i64
  %and = and i64 %add28, %conv30
  %add.ptr31 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr31, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %21 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 1), align 8, !tbaa !36
  %sub.ptr.lhs.cast34 = ptrtoint i8* %add.ptr31 to i64
  %sub.ptr.rhs.cast35 = ptrtoint %struct._obstack_chunk* %21 to i64
  %sub.ptr.sub36 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast35
  %22 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %sub.ptr.lhs.cast39 = ptrtoint i8* %22 to i64
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast35
  %cmp42 = icmp sgt i64 %sub.ptr.sub36, %sub.ptr.sub41
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.end23
  store i8* %22, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.end23
  %23 = phi i8* [ %22, %if.then44 ], [ %add.ptr31, %if.end23 ]
  store i8* %23, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %24 = bitcast i8* %19 to %struct.bitmap_head_def*
  %call51 = tail call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %24) #4
  %global_live_at_start52 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 8
  store %struct.bitmap_head_def* %call51, %struct.bitmap_head_def** %global_live_at_start52, align 8, !tbaa !30
  %25 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %26 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %sub.ptr.lhs.cast61 = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast62 = ptrtoint i8* %26 to i64
  %sub.ptr.sub63 = sub i64 %sub.ptr.lhs.cast61, %sub.ptr.rhs.cast62
  %cmp65 = icmp slt i64 %sub.ptr.sub63, 24
  br i1 %cmp65, label %if.then67, label %if.end68

if.then67:                                        ; preds = %if.end47
  tail call void @_obstack_newchunk(%struct.obstack* @flow_obstack, i32 24) #4
  %.pre214 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %if.end47
  %27 = phi i8* [ %.pre214, %if.then67 ], [ %26, %if.end47 ]
  %add.ptr71 = getelementptr inbounds i8* %27, i64 24
  store i8* %add.ptr71, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %28 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %cmp79 = icmp eq i8* %add.ptr71, %28
  br i1 %cmp79, label %if.then81, label %if.end86

if.then81:                                        ; preds = %if.end68
  %bf.load83 = load i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  %bf.set85 = or i8 %bf.load83, 2
  store i8 %bf.set85, i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  br label %if.end86

if.end86:                                         ; preds = %if.then81, %if.end68
  %sub.ptr.lhs.cast88 = ptrtoint i8* %add.ptr71 to i64
  %29 = load i32* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 6), align 8, !tbaa !35
  %conv91 = sext i32 %29 to i64
  %add92 = add nsw i64 %conv91, %sub.ptr.lhs.cast88
  %neg94 = xor i32 %29, -1
  %conv95 = sext i32 %neg94 to i64
  %and96 = and i64 %add92, %conv95
  %add.ptr97 = getelementptr inbounds i8* null, i64 %and96
  store i8* %add.ptr97, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %30 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 1), align 8, !tbaa !36
  %sub.ptr.lhs.cast101 = ptrtoint i8* %add.ptr97 to i64
  %sub.ptr.rhs.cast102 = ptrtoint %struct._obstack_chunk* %30 to i64
  %sub.ptr.sub103 = sub i64 %sub.ptr.lhs.cast101, %sub.ptr.rhs.cast102
  %31 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %sub.ptr.lhs.cast106 = ptrtoint i8* %31 to i64
  %sub.ptr.sub108 = sub i64 %sub.ptr.lhs.cast106, %sub.ptr.rhs.cast102
  %cmp109 = icmp sgt i64 %sub.ptr.sub103, %sub.ptr.sub108
  br i1 %cmp109, label %if.then111, label %if.end114

if.then111:                                       ; preds = %if.end86
  store i8* %31, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end114

if.end114:                                        ; preds = %if.then111, %if.end86
  %32 = phi i8* [ %31, %if.then111 ], [ %add.ptr97, %if.end86 ]
  store i8* %32, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %33 = bitcast i8* %28 to %struct.bitmap_head_def*
  %call118 = tail call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %33) #4
  %global_live_at_end = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 9
  store %struct.bitmap_head_def* %call118, %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !37
  %global_live_at_end120 = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 9
  %34 = load %struct.bitmap_head_def** %global_live_at_end120, align 8, !tbaa !37
  tail call void @bitmap_copy(%struct.bitmap_head_def* %call118, %struct.bitmap_head_def* %34) #4
  %35 = load %struct.bitmap_head_def** %global_live_at_start52, align 8, !tbaa !30
  %36 = load %struct.bitmap_head_def** %global_live_at_end120, align 8, !tbaa !37
  tail call void @bitmap_copy(%struct.bitmap_head_def* %35, %struct.bitmap_head_def* %36) #4
  %37 = load %struct.bitmap_head_def** %global_live_at_start52, align 8, !tbaa !30
  %call124 = tail call i32 @propagate_block(%struct.basic_block_def* %call9.i, %struct.bitmap_head_def* %37, %struct.bitmap_head_def* null, %struct.bitmap_head_def* null, i32 0) #4
  %38 = load %struct.bitmap_head_def** %global_live_at_end120, align 8, !tbaa !37
  %39 = load %struct.bitmap_head_def** %global_live_at_start52, align 8, !tbaa !30
  tail call void @bitmap_copy(%struct.bitmap_head_def* %38, %struct.bitmap_head_def* %39) #4
  br label %return

return:                                           ; preds = %if.end114, %for.end, %entry
  %retval.0 = phi %struct.edge_def* [ null, %entry ], [ %call9, %for.end ], [ %call9, %if.end114 ]
  ret %struct.edge_def* %retval.0
}

declare %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #1

declare %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def*) #1

declare void @_obstack_newchunk(%struct.obstack*, i32) #1

declare void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #1

declare i32 @propagate_block(%struct.basic_block_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32) #1

; Function Attrs: nounwind uwtable
define void @merge_blocks_nomove(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 {
entry:
  %head = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 0
  %0 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %end = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 1
  %1 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %end1 = getelementptr inbounds %struct.basic_block_def* %a, i64 0, i32 1
  %2 = load %struct.rtx_def** %end1, align 8, !tbaa !18
  %3 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %cmp2 = icmp eq %struct.rtx_def* %0, %1
  %. = zext i1 %cmp2 to i32
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load5.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then, %entry
  %bf.load5 = phi i32 [ %bf.load5.pre, %if.then ], [ %bf.load, %entry ]
  %b_head.0 = phi %struct.rtx_def* [ %4, %if.then ], [ %0, %entry ]
  %del_first.0 = phi %struct.rtx_def* [ %0, %if.then ], [ null, %entry ]
  %b_empty.1 = phi i32 [ %., %if.then ], [ 0, %entry ]
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 37
  br i1 %cmp7, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.end4
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %b_head.0, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %5 = load i32* %rtint, align 4, !tbaa !12
  %cmp10 = icmp eq i32 %5, -80
  br i1 %cmp10, label %if.then11, label %if.end20

if.then11:                                        ; preds = %land.lhs.true
  %cmp12 = icmp eq %struct.rtx_def* %b_head.0, %1
  %.b_empty.1 = select i1 %cmp12, i32 1, i32 %b_empty.1
  %tobool = icmp eq %struct.rtx_def* %del_first.0, null
  %del_first.1 = select i1 %tobool, %struct.rtx_def* %b_head.0, %struct.rtx_def* %del_first.0
  br label %if.end20

if.end20:                                         ; preds = %if.then11, %land.lhs.true, %if.end4
  %del_first.2 = phi %struct.rtx_def* [ %del_first.0, %land.lhs.true ], [ %del_first.0, %if.end4 ], [ %del_first.1, %if.then11 ]
  %del_last.1 = phi %struct.rtx_def* [ %del_first.0, %land.lhs.true ], [ %del_first.0, %if.end4 ], [ %b_head.0, %if.then11 ]
  %b_empty.3 = phi i32 [ %b_empty.1, %land.lhs.true ], [ %b_empty.1, %if.end4 ], [ %.b_empty.1, %if.then11 ]
  %6 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load21 = load i32* %6, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 33
  br i1 %cmp23, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.end20
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 1
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %head36 = getelementptr inbounds %struct.basic_block_def* %a, i64 0, i32 0
  %prev.0151 = load %struct.rtx_def** %rtx27, align 8
  %7 = getelementptr inbounds %struct.rtx_def* %prev.0151, i64 0, i32 0
  %bf.load28152 = load i32* %7, align 8
  %bf.clear29153 = and i32 %bf.load28152, 65535
  %cmp30154 = icmp eq i32 %bf.clear29153, 37
  br i1 %cmp30154, label %lor.lhs.false, label %while.cond.preheader

lor.lhs.false:                                    ; preds = %if.then24, %for.inc
  %prev.0155 = phi %struct.rtx_def* [ %prev.0, %for.inc ], [ %prev.0151, %if.then24 ]
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %prev.0155, i64 0, i32 1, i64 4
  %rtint33 = bitcast %union.rtunion_def* %arrayidx32 to i32*
  %8 = load i32* %rtint33, align 4, !tbaa !12
  %cmp34 = icmp eq i32 %8, -80
  br i1 %cmp34, label %while.cond.preheader, label %lor.lhs.false35

lor.lhs.false35:                                  ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def** %head36, align 8, !tbaa !17
  %cmp37 = icmp eq %struct.rtx_def* %prev.0155, %9
  br i1 %cmp37, label %while.cond.preheader, label %for.inc

for.inc:                                          ; preds = %lor.lhs.false35
  %arrayidx41 = getelementptr inbounds %struct.rtx_def* %prev.0155, i64 0, i32 1, i64 1
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %prev.0 = load %struct.rtx_def** %rtx42, align 8
  %10 = getelementptr inbounds %struct.rtx_def* %prev.0, i64 0, i32 0
  %bf.load28 = load i32* %10, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 37
  br i1 %cmp30, label %lor.lhs.false, label %while.cond.preheader

if.else:                                          ; preds = %if.end20
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 2
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx48, align 8, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load49 = load i32* %12, align 8
  %bf.clear50 = and i32 %bf.load49, 65535
  %cmp51 = icmp eq i32 %bf.clear50, 35
  %.del_first.2 = select i1 %cmp51, %struct.rtx_def* %11, %struct.rtx_def* %del_first.2
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %for.inc, %lor.lhs.false, %lor.lhs.false35, %if.then24, %if.else
  %a_end.0.ph = phi %struct.rtx_def* [ %2, %if.else ], [ %prev.0151, %if.then24 ], [ %prev.0151, %lor.lhs.false35 ], [ %prev.0151, %lor.lhs.false ], [ %prev.0151, %for.inc ]
  %del_first.3.ph = phi %struct.rtx_def* [ %.del_first.2, %if.else ], [ %2, %if.then24 ], [ %2, %lor.lhs.false35 ], [ %2, %lor.lhs.false ], [ %2, %for.inc ]
  %succ = getelementptr inbounds %struct.basic_block_def* %a, i64 0, i32 5
  %13 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %tobool58150 = icmp eq %struct.edge_def* %13, null
  br i1 %tobool58150, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %14 = phi %struct.edge_def* [ %15, %while.body ], [ %13, %while.cond.preheader ]
  tail call void @remove_edge(%struct.edge_def* %14) #4
  %15 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %tobool58 = icmp eq %struct.edge_def* %15, null
  br i1 %tobool58, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %succ60 = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 5
  %e.0147 = load %struct.edge_def** %succ60, align 8
  %tobool62148 = icmp eq %struct.edge_def* %e.0147, null
  br i1 %tobool62148, label %for.end64, label %for.body

for.body:                                         ; preds = %while.end, %for.body
  %e.0149 = phi %struct.edge_def* [ %e.0, %for.body ], [ %e.0147, %while.end ]
  %src = getelementptr inbounds %struct.edge_def* %e.0149, i64 0, i32 2
  store %struct.basic_block_def* %a, %struct.basic_block_def** %src, align 8, !tbaa !28
  %succ_next = getelementptr inbounds %struct.edge_def* %e.0149, i64 0, i32 1
  %e.0 = load %struct.edge_def** %succ_next, align 8
  %tobool62 = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool62, label %for.end64, label %for.body

for.end64:                                        ; preds = %for.body, %while.end
  %16 = phi %struct.edge_def* [ null, %while.end ], [ %e.0147, %for.body ]
  store %struct.edge_def* %16, %struct.edge_def** %succ, align 8, !tbaa !24
  %pred = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 4
  %global_live_at_end = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 9
  %17 = bitcast %struct.edge_def** %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i32 8, i1 false)
  %18 = load %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !37
  %global_live_at_end68 = getelementptr inbounds %struct.basic_block_def* %a, i64 0, i32 9
  store %struct.bitmap_head_def* %18, %struct.bitmap_head_def** %global_live_at_end68, align 8, !tbaa !37
  tail call void @expunge_block(%struct.basic_block_def* %b) #4
  br label %while.body.i

while.body.i:                                     ; preds = %if.end.i, %for.end64
  %start.addr.0.i = phi %struct.rtx_def* [ %del_first.3.ph, %for.end64 ], [ %next.0.i, %if.end.i ]
  %19 = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 0
  %bf.load.i = load i32* %19, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 37
  br i1 %cmp.i, label %land.lhs.true.i, label %if.else.i

land.lhs.true.i:                                  ; preds = %while.body.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 1, i64 2
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %20 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 1, i64 4
  %rtint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to i32*
  %21 = load i32* %rtint.i.i, align 4, !tbaa !12
  switch i32 %21, label %if.end.i [
    i32 -80, label %if.else.i
    i32 -99, label %if.else.i
  ]

if.else.i:                                        ; preds = %land.lhs.true.i, %land.lhs.true.i, %while.body.i
  %call1.i = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %start.addr.0.i) #4
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %land.lhs.true.i
  %next.0.i = phi %struct.rtx_def* [ %call1.i, %if.else.i ], [ %20, %land.lhs.true.i ]
  %cmp2.i = icmp eq %struct.rtx_def* %start.addr.0.i, %del_last.1
  br i1 %cmp2.i, label %delete_insn_chain.exit, label %while.body.i

delete_insn_chain.exit:                           ; preds = %if.end.i
  %tobool69 = icmp eq i32 %b_empty.3, 0
  br i1 %tobool69, label %if.then70, label %if.end82

if.then70:                                        ; preds = %delete_insn_chain.exit
  %22 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool71 = icmp eq %struct.varray_head_tag* %22, null
  br i1 %tobool71, label %if.end82, label %for.cond73.preheader

for.cond73.preheader:                             ; preds = %if.then70
  %cmp74145 = icmp eq %struct.rtx_def* %a_end.0.ph, %1
  br i1 %cmp74145, label %for.end80, label %for.body75

for.body75:                                       ; preds = %for.cond73.preheader, %set_block_for_insn.exit
  %23 = phi %struct.varray_head_tag* [ %.pre157, %set_block_for_insn.exit ], [ %22, %for.cond73.preheader ]
  %x.0146 = phi %struct.rtx_def* [ %27, %set_block_for_insn.exit ], [ %a_end.0.ph, %for.cond73.preheader ]
  %arrayidx.i127 = getelementptr inbounds %struct.rtx_def* %x.0146, i64 0, i32 1, i64 0
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i127 to i32*
  %24 = load i32* %rtint.i, align 4, !tbaa !12
  %conv.i = sext i32 %24 to i64
  %num_elements.i = getelementptr inbounds %struct.varray_head_tag* %23, i64 0, i32 0
  %25 = load i64* %num_elements.i, align 8, !tbaa !20
  %cmp.i128 = icmp ult i64 %conv.i, %25
  br i1 %cmp.i128, label %set_block_for_insn.exit, label %if.then.i

if.then.i:                                        ; preds = %for.body75
  %add.i = add i64 %conv.i, 7
  %div.i = lshr i64 %add.i, 3
  %add2.i = add i64 %div.i, %conv.i
  %call.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %23, i64 %add2.i) #4
  store %struct.varray_head_tag* %call.i, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit

set_block_for_insn.exit:                          ; preds = %for.body75, %if.then.i
  %26 = phi %struct.varray_head_tag* [ %23, %for.body75 ], [ %call.i, %if.then.i ]
  %data.i = getelementptr inbounds %struct.varray_head_tag* %26, i64 0, i32 4
  %bb3.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx4.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %conv.i
  store %struct.basic_block_def* %a, %struct.basic_block_def** %arrayidx4.i, align 8, !tbaa !1
  %arrayidx78 = getelementptr inbounds %struct.rtx_def* %x.0146, i64 0, i32 1, i64 2
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %27 = load %struct.rtx_def** %rtx79, align 8, !tbaa !1
  %cmp74 = icmp eq %struct.rtx_def* %27, %1
  %.pre157 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br i1 %cmp74, label %for.end80, label %for.body75

for.end80:                                        ; preds = %set_block_for_insn.exit, %for.cond73.preheader
  %28 = phi %struct.varray_head_tag* [ %22, %for.cond73.preheader ], [ %.pre157, %set_block_for_insn.exit ]
  %arrayidx.i130 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtint.i131 = bitcast %union.rtunion_def* %arrayidx.i130 to i32*
  %29 = load i32* %rtint.i131, align 4, !tbaa !12
  %conv.i132 = sext i32 %29 to i64
  %num_elements.i133 = getelementptr inbounds %struct.varray_head_tag* %28, i64 0, i32 0
  %30 = load i64* %num_elements.i133, align 8, !tbaa !20
  %cmp.i134 = icmp ult i64 %conv.i132, %30
  br i1 %cmp.i134, label %set_block_for_insn.exit144, label %if.then.i139

if.then.i139:                                     ; preds = %for.end80
  %add.i135 = add i64 %conv.i132, 7
  %div.i136 = lshr i64 %add.i135, 3
  %add2.i137 = add i64 %div.i136, %conv.i132
  %call.i138 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %28, i64 %add2.i137) #4
  store %struct.varray_head_tag* %call.i138, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit144

set_block_for_insn.exit144:                       ; preds = %for.end80, %if.then.i139
  %31 = phi %struct.varray_head_tag* [ %28, %for.end80 ], [ %call.i138, %if.then.i139 ]
  %data.i140 = getelementptr inbounds %struct.varray_head_tag* %31, i64 0, i32 4
  %bb3.i141 = bitcast %union.varray_data_tag* %data.i140 to [1 x %struct.basic_block_def*]*
  %arrayidx4.i142 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i141, i64 0, i64 %conv.i132
  store %struct.basic_block_def* %a, %struct.basic_block_def** %arrayidx4.i142, align 8, !tbaa !1
  br label %if.end82

if.end82:                                         ; preds = %set_block_for_insn.exit144, %if.then70, %delete_insn_chain.exit
  %a_end.1 = phi %struct.rtx_def* [ %a_end.0.ph, %delete_insn_chain.exit ], [ %1, %if.then70 ], [ %1, %set_block_for_insn.exit144 ]
  store %struct.rtx_def* %a_end.1, %struct.rtx_def** %end1, align 8, !tbaa !18
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @block_label(%struct.basic_block_def* %block) #0 {
entry:
  %cmp = icmp eq %struct.basic_block_def* %block, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %head = getelementptr inbounds %struct.basic_block_def* %block, i64 0, i32 0
  %0 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 36
  br i1 %cmp1, label %return, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = tail call %struct.rtx_def* @gen_label_rtx() #4
  %2 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %call4 = tail call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call, %struct.rtx_def* %2) #4
  store %struct.rtx_def* %call4, %struct.rtx_def** %head, align 8, !tbaa !17
  %3 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool = icmp eq %struct.varray_head_tag* %3, null
  br i1 %tobool, label %return, label %if.then6

if.then6:                                         ; preds = %if.then2
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 0
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %4 = load i32* %rtint.i, align 4, !tbaa !12
  %conv.i = sext i32 %4 to i64
  %num_elements.i = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 0
  %5 = load i64* %num_elements.i, align 8, !tbaa !20
  %cmp.i = icmp ult i64 %conv.i, %5
  br i1 %cmp.i, label %set_block_for_insn.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then6
  %add.i = add i64 %conv.i, 7
  %div.i = lshr i64 %add.i, 3
  %add2.i = add i64 %div.i, %conv.i
  %call.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %3, i64 %add2.i) #4
  store %struct.varray_head_tag* %call.i, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit

set_block_for_insn.exit:                          ; preds = %if.then6, %if.then.i
  %6 = phi %struct.varray_head_tag* [ %3, %if.then6 ], [ %call.i, %if.then.i ]
  %data.i = getelementptr inbounds %struct.varray_head_tag* %6, i64 0, i32 4
  %bb3.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx4.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %conv.i
  store %struct.basic_block_def* %block, %struct.basic_block_def** %arrayidx4.i, align 8, !tbaa !1
  %.pre = load %struct.rtx_def** %head, align 8, !tbaa !17
  br label %return

return:                                           ; preds = %set_block_for_insn.exit, %if.end, %if.then2, %entry
  %retval.0 = phi %struct.rtx_def* [ null, %entry ], [ %call4, %if.then2 ], [ %0, %if.end ], [ %.pre, %set_block_for_insn.exit ]
  ret %struct.rtx_def* %retval.0
}

declare %struct.rtx_def* @emit_label_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_label_rtx() #1

; Function Attrs: nounwind uwtable
define zeroext i1 @redirect_edge_and_branch(%struct.edge_def* %e, %struct.basic_block_def* %target) #0 {
entry:
  %dest = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 3
  %0 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %head = getelementptr inbounds %struct.basic_block_def* %0, i64 0, i32 0
  %1 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %src3 = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 2
  %2 = load %struct.basic_block_def** %src3, align 8, !tbaa !28
  %end = getelementptr inbounds %struct.basic_block_def* %2, i64 0, i32 1
  %3 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %flags = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 6
  %4 = load i32* %flags, align 4, !tbaa !39
  %and = and i32 %4, 12
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %succ.i = getelementptr inbounds %struct.basic_block_def* %2, i64 0, i32 5
  %tmp.0317.i = load %struct.edge_def** %succ.i, align 8
  %tobool318.i = icmp eq %struct.edge_def* %tmp.0317.i, null
  br i1 %tobool318.i, label %lor.lhs.false.i, label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %succ_next.i = getelementptr inbounds %struct.edge_def* %tmp.0319.i, i64 0, i32 1
  %tmp.0.i = load %struct.edge_def** %succ_next.i, align 8
  %tobool.i = icmp eq %struct.edge_def* %tmp.0.i, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %for.body.i

for.body.i:                                       ; preds = %if.end, %for.cond.i
  %tmp.0319.i = phi %struct.edge_def* [ %tmp.0.i, %for.cond.i ], [ %tmp.0317.i, %if.end ]
  %dest.i = getelementptr inbounds %struct.edge_def* %tmp.0319.i, i64 0, i32 3
  %5 = load %struct.basic_block_def** %dest.i, align 8, !tbaa !38
  %cmp.i = icmp eq %struct.basic_block_def* %5, %target
  %cmp4.i = icmp eq %struct.edge_def* %tmp.0319.i, %e
  %or.cond.i = or i1 %cmp.i, %cmp4.i
  br i1 %or.cond.i, label %for.cond.i, label %if.else

lor.lhs.false.i:                                  ; preds = %for.cond.i, %if.end
  %call.i = tail call i32 @onlyjump_p(%struct.rtx_def* %3) #4
  %tobool6.i = icmp eq i32 %call.i, 0
  br i1 %tobool6.i, label %if.else, label %if.end8.i

if.end8.i:                                        ; preds = %lor.lhs.false.i
  %6 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load.i = load i32* %6, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom243.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom243.i
  %7 = load i8* %arrayidx.i, align 1, !tbaa !40
  %cmp9.i = icmp eq i8 %7, 105
  br i1 %cmp9.i, label %cond.true.i, label %if.else

cond.true.i:                                      ; preds = %if.end8.i
  %arrayidx11.i = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx11.i to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load12.i = load i32* %9, align 8
  %bf.clear13.i = and i32 %bf.load12.i, 65535
  %cmp14.i = icmp eq i32 %bf.clear13.i, 47
  br i1 %cmp14.i, label %cond.end25.i, label %cond.false.i

cond.false.i:                                     ; preds = %cond.true.i
  %call23.i = tail call %struct.rtx_def* @single_set_2(%struct.rtx_def* %3, %struct.rtx_def* %8) #4
  br label %cond.end25.i

cond.end25.i:                                     ; preds = %cond.false.i, %cond.true.i
  %cond26.i = phi %struct.rtx_def* [ %call23.i, %cond.false.i ], [ %8, %cond.true.i ]
  %tobool27.i = icmp eq %struct.rtx_def* %cond26.i, null
  br i1 %tobool27.i, label %if.else, label %lor.lhs.false28.i

lor.lhs.false28.i:                                ; preds = %cond.end25.i
  %call29.i = tail call i32 @side_effects_p(%struct.rtx_def* %cond26.i) #4
  %tobool30.i = icmp eq i32 %call29.i, 0
  br i1 %tobool30.i, label %if.end32.i, label %if.else

if.end32.i:                                       ; preds = %lor.lhs.false28.i
  %call33.i = tail call zeroext i1 @can_fallthru(%struct.basic_block_def* %2, %struct.basic_block_def* %target) #4
  br i1 %call33.i, label %if.then34.i, label %if.else.i

if.then34.i:                                      ; preds = %if.end32.i
  %10 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool35.i = icmp eq %struct._IO_FILE* %10, null
  br i1 %tobool35.i, label %if.end40.i, label %if.then36.i

if.then36.i:                                      ; preds = %if.then34.i
  %arrayidx38.i = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtint.i = bitcast %union.rtunion_def* %arrayidx38.i to i32*
  %11 = load i32* %rtint.i, align 4, !tbaa !12
  %call39.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([19 x i8]* @.str42, i64 0, i64 0), i32 %11) #4
  br label %if.end40.i

if.end40.i:                                       ; preds = %if.then36.i, %if.then34.i
  %head.i = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 0
  %12 = load %struct.rtx_def** %head.i, align 8, !tbaa !17
  %arrayidx42.i = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 1, i64 1
  %rtx43.i = bitcast %union.rtunion_def* %arrayidx42.i to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx43.i, align 8, !tbaa !1
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %if.end.i.i, %if.end40.i
  %start.addr.0.i.i = phi %struct.rtx_def* [ %3, %if.end40.i ], [ %next.0.i.i, %if.end.i.i ]
  %14 = getelementptr inbounds %struct.rtx_def* %start.addr.0.i.i, i64 0, i32 0
  %bf.load.i.i = load i32* %14, align 8
  %bf.clear.i.i = and i32 %bf.load.i.i, 65535
  %cmp.i.i = icmp eq i32 %bf.clear.i.i, 37
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %if.else.i.i

land.lhs.true.i.i:                                ; preds = %while.body.i.i
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i.i, i64 0, i32 1, i64 2
  %rtx.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx.i.i, align 8, !tbaa !1
  %arrayidx.i.i.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i.i, i64 0, i32 1, i64 4
  %rtint.i.i.i = bitcast %union.rtunion_def* %arrayidx.i.i.i to i32*
  %16 = load i32* %rtint.i.i.i, align 4, !tbaa !12
  switch i32 %16, label %if.end.i.i [
    i32 -80, label %if.else.i.i
    i32 -99, label %if.else.i.i
  ]

if.else.i.i:                                      ; preds = %land.lhs.true.i.i, %land.lhs.true.i.i, %while.body.i.i
  %call1.i.i = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %start.addr.0.i.i) #4
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.else.i.i, %land.lhs.true.i.i
  %next.0.i.i = phi %struct.rtx_def* [ %call1.i.i, %if.else.i.i ], [ %15, %land.lhs.true.i.i ]
  %cmp2.i.i = icmp eq %struct.rtx_def* %start.addr.0.i.i, %13
  br i1 %cmp2.i.i, label %while.cond.preheader.i, label %while.body.i.i

if.else.i:                                        ; preds = %if.end32.i
  %call44.i = tail call i32 @simplejump_p(%struct.rtx_def* %3) #4
  %tobool45.i = icmp eq i32 %call44.i, 0
  br i1 %tobool45.i, label %if.else70.i, label %if.then46.i

if.then46.i:                                      ; preds = %if.else.i
  %17 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %cmp48.i = icmp eq %struct.basic_block_def* %17, %target
  br i1 %cmp48.i, label %if.else, label %if.end51.i

if.end51.i:                                       ; preds = %if.then46.i
  %18 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool52.i = icmp eq %struct._IO_FILE* %18, null
  br i1 %tobool52.i, label %if.end60.i, label %if.then53.i

if.then53.i:                                      ; preds = %if.end51.i
  %arrayidx55.i = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtint56.i = bitcast %union.rtunion_def* %arrayidx55.i to i32*
  %19 = load i32* %rtint56.i, align 4, !tbaa !12
  %index.i = getelementptr inbounds %struct.basic_block_def* %17, i64 0, i32 11
  %20 = load i32* %index.i, align 4, !tbaa !19
  %index58.i = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 11
  %21 = load i32* %index58.i, align 4, !tbaa !19
  %call59.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([36 x i8]* @.str43, i64 0, i64 0), i32 %19, i32 %20, i32 %21) #4
  br label %if.end60.i

if.end60.i:                                       ; preds = %if.then53.i, %if.end51.i
  %cmp.i244.i = icmp eq %struct.basic_block_def* %target, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp.i244.i, label %block_label.exit.i, label %if.end.i247.i

if.end.i247.i:                                    ; preds = %if.end60.i
  %head.i.i = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 0
  %22 = load %struct.rtx_def** %head.i.i, align 8, !tbaa !17
  %23 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 0
  %bf.load.i245.i = load i32* %23, align 8
  %bf.clear.i246.i = and i32 %bf.load.i245.i, 65535
  %cmp1.i.i = icmp eq i32 %bf.clear.i246.i, 36
  br i1 %cmp1.i.i, label %block_label.exit.i, label %if.then2.i.i

if.then2.i.i:                                     ; preds = %if.end.i247.i
  %call.i.i = tail call %struct.rtx_def* @gen_label_rtx() #4
  %24 = load %struct.rtx_def** %head.i.i, align 8, !tbaa !17
  %call4.i.i = tail call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call.i.i, %struct.rtx_def* %24) #4
  store %struct.rtx_def* %call4.i.i, %struct.rtx_def** %head.i.i, align 8, !tbaa !17
  %25 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool.i.i = icmp eq %struct.varray_head_tag* %25, null
  br i1 %tobool.i.i, label %block_label.exit.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %if.then2.i.i
  %arrayidx.i.i248.i = getelementptr inbounds %struct.rtx_def* %call4.i.i, i64 0, i32 1, i64 0
  %rtint.i.i249.i = bitcast %union.rtunion_def* %arrayidx.i.i248.i to i32*
  %26 = load i32* %rtint.i.i249.i, align 4, !tbaa !12
  %conv.i.i.i = sext i32 %26 to i64
  %num_elements.i.i.i = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 0
  %27 = load i64* %num_elements.i.i.i, align 8, !tbaa !20
  %cmp.i.i.i = icmp ult i64 %conv.i.i.i, %27
  br i1 %cmp.i.i.i, label %set_block_for_insn.exit.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.then6.i.i
  %add.i.i.i = add i64 %conv.i.i.i, 7
  %div.i.i.i = lshr i64 %add.i.i.i, 3
  %add2.i.i.i = add i64 %div.i.i.i, %conv.i.i.i
  %call.i.i.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %25, i64 %add2.i.i.i) #4
  store %struct.varray_head_tag* %call.i.i.i, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit.i.i

set_block_for_insn.exit.i.i:                      ; preds = %if.then.i.i.i, %if.then6.i.i
  %28 = phi %struct.varray_head_tag* [ %25, %if.then6.i.i ], [ %call.i.i.i, %if.then.i.i.i ]
  %data.i.i.i = getelementptr inbounds %struct.varray_head_tag* %28, i64 0, i32 4
  %bb3.i.i.i = bitcast %union.varray_data_tag* %data.i.i.i to [1 x %struct.basic_block_def*]*
  %arrayidx4.i.i.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i.i.i, i64 0, i64 %conv.i.i.i
  store %struct.basic_block_def* %target, %struct.basic_block_def** %arrayidx4.i.i.i, align 8, !tbaa !1
  %.pre.i.i = load %struct.rtx_def** %head.i.i, align 8, !tbaa !17
  br label %block_label.exit.i

block_label.exit.i:                               ; preds = %set_block_for_insn.exit.i.i, %if.then2.i.i, %if.end.i247.i, %if.end60.i
  %retval.0.i.i = phi %struct.rtx_def* [ null, %if.end60.i ], [ %call4.i.i, %if.then2.i.i ], [ %22, %if.end.i247.i ], [ %.pre.i.i, %set_block_for_insn.exit.i.i ]
  %call62.i = tail call i32 @redirect_jump(%struct.rtx_def* %3, %struct.rtx_def* %retval.0.i.i, i32 0) #4
  %tobool63.i = icmp eq i32 %call62.i, 0
  br i1 %tobool63.i, label %if.then64.i, label %while.cond.preheader.i

if.then64.i:                                      ; preds = %block_label.exit.i
  br i1 %cmp.i244.i, label %if.else, label %if.end68.i

if.end68.i:                                       ; preds = %if.then64.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 713, i8* getelementptr inbounds ([31 x i8]* @__FUNCTION__.try_redirect_by_replacing_jump, i64 0, i64 0)) #5
  unreachable

if.else70.i:                                      ; preds = %if.else.i
  %cmp71.i = icmp eq %struct.basic_block_def* %target, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp71.i, label %if.else, label %if.end.i255.i

if.end.i255.i:                                    ; preds = %if.else70.i
  %head.i251.i = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 0
  %29 = load %struct.rtx_def** %head.i251.i, align 8, !tbaa !17
  %30 = getelementptr inbounds %struct.rtx_def* %29, i64 0, i32 0
  %bf.load.i252.i = load i32* %30, align 8
  %bf.clear.i253.i = and i32 %bf.load.i252.i, 65535
  %cmp1.i254.i = icmp eq i32 %bf.clear.i253.i, 36
  br i1 %cmp1.i254.i, label %block_label.exit277.i, label %if.then2.i259.i

if.then2.i259.i:                                  ; preds = %if.end.i255.i
  %call.i256.i = tail call %struct.rtx_def* @gen_label_rtx() #4
  %31 = load %struct.rtx_def** %head.i251.i, align 8, !tbaa !17
  %call4.i257.i = tail call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call.i256.i, %struct.rtx_def* %31) #4
  store %struct.rtx_def* %call4.i257.i, %struct.rtx_def** %head.i251.i, align 8, !tbaa !17
  %32 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool.i258.i = icmp eq %struct.varray_head_tag* %32, null
  br i1 %tobool.i258.i, label %block_label.exit277.i, label %if.then6.i265.i

if.then6.i265.i:                                  ; preds = %if.then2.i259.i
  %arrayidx.i.i260.i = getelementptr inbounds %struct.rtx_def* %call4.i257.i, i64 0, i32 1, i64 0
  %rtint.i.i261.i = bitcast %union.rtunion_def* %arrayidx.i.i260.i to i32*
  %33 = load i32* %rtint.i.i261.i, align 4, !tbaa !12
  %conv.i.i262.i = sext i32 %33 to i64
  %num_elements.i.i263.i = getelementptr inbounds %struct.varray_head_tag* %32, i64 0, i32 0
  %34 = load i64* %num_elements.i.i263.i, align 8, !tbaa !20
  %cmp.i.i264.i = icmp ult i64 %conv.i.i262.i, %34
  br i1 %cmp.i.i264.i, label %set_block_for_insn.exit.i275.i, label %if.then.i.i270.i

if.then.i.i270.i:                                 ; preds = %if.then6.i265.i
  %add.i.i266.i = add i64 %conv.i.i262.i, 7
  %div.i.i267.i = lshr i64 %add.i.i266.i, 3
  %add2.i.i268.i = add i64 %div.i.i267.i, %conv.i.i262.i
  %call.i.i269.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %32, i64 %add2.i.i268.i) #4
  store %struct.varray_head_tag* %call.i.i269.i, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit.i275.i

set_block_for_insn.exit.i275.i:                   ; preds = %if.then.i.i270.i, %if.then6.i265.i
  %35 = phi %struct.varray_head_tag* [ %32, %if.then6.i265.i ], [ %call.i.i269.i, %if.then.i.i270.i ]
  %data.i.i271.i = getelementptr inbounds %struct.varray_head_tag* %35, i64 0, i32 4
  %bb3.i.i272.i = bitcast %union.varray_data_tag* %data.i.i271.i to [1 x %struct.basic_block_def*]*
  %arrayidx4.i.i273.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i.i272.i, i64 0, i64 %conv.i.i262.i
  store %struct.basic_block_def* %target, %struct.basic_block_def** %arrayidx4.i.i273.i, align 8, !tbaa !1
  %.pre.i274.i = load %struct.rtx_def** %head.i251.i, align 8, !tbaa !17
  br label %block_label.exit277.i

block_label.exit277.i:                            ; preds = %set_block_for_insn.exit.i275.i, %if.then2.i259.i, %if.end.i255.i
  %retval.0.i276.i = phi %struct.rtx_def* [ %call4.i257.i, %if.then2.i259.i ], [ %29, %if.end.i255.i ], [ %.pre.i274.i, %set_block_for_insn.exit.i275.i ]
  %call80.i = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %retval.0.i276.i) #4
  %call81.i = tail call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call80.i, %struct.rtx_def* %3) #4
  %36 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %37 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 1, i64 7, i32 0
  %call76.c.i = ptrtoint %struct.rtx_def* %retval.0.i276.i to i64
  store i64 %call76.c.i, i64* %37, align 8, !tbaa !1
  %arrayidx87.i = getelementptr inbounds %struct.rtx_def* %retval.0.i276.i, i64 0, i32 1, i64 3
  %rtint88.i = bitcast %union.rtunion_def* %arrayidx87.i to i32*
  %38 = load i32* %rtint88.i, align 4, !tbaa !12
  %inc.i = add nsw i32 %38, 1
  store i32 %inc.i, i32* %rtint88.i, align 4, !tbaa !12
  %39 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool89.i = icmp eq %struct._IO_FILE* %39, null
  br i1 %tobool89.i, label %while.body.i282.i, label %if.then90.i

if.then90.i:                                      ; preds = %block_label.exit277.i
  %arrayidx92.i = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtint93.i = bitcast %union.rtunion_def* %arrayidx92.i to i32*
  %40 = load i32* %rtint93.i, align 4, !tbaa !12
  %41 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %arrayidx96.i = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 1, i64 0
  %rtint97.i = bitcast %union.rtunion_def* %arrayidx96.i to i32*
  %42 = load i32* %rtint97.i, align 4, !tbaa !12
  %call98.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([30 x i8]* @.str44, i64 0, i64 0), i32 %40, i32 %42) #4
  br label %while.body.i282.i

while.body.i282.i:                                ; preds = %if.then90.i, %block_label.exit277.i, %if.end.i292.i
  %start.addr.0.i278.i = phi %struct.rtx_def* [ %next.0.i290.i, %if.end.i292.i ], [ %3, %block_label.exit277.i ], [ %3, %if.then90.i ]
  %43 = getelementptr inbounds %struct.rtx_def* %start.addr.0.i278.i, i64 0, i32 0
  %bf.load.i279.i = load i32* %43, align 8
  %bf.clear.i280.i = and i32 %bf.load.i279.i, 65535
  %cmp.i281.i = icmp eq i32 %bf.clear.i280.i, 37
  br i1 %cmp.i281.i, label %land.lhs.true.i287.i, label %if.else.i289.i

land.lhs.true.i287.i:                             ; preds = %while.body.i282.i
  %arrayidx.i283.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i278.i, i64 0, i32 1, i64 2
  %rtx.i284.i = bitcast %union.rtunion_def* %arrayidx.i283.i to %struct.rtx_def**
  %44 = load %struct.rtx_def** %rtx.i284.i, align 8, !tbaa !1
  %arrayidx.i.i285.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i278.i, i64 0, i32 1, i64 4
  %rtint.i.i286.i = bitcast %union.rtunion_def* %arrayidx.i.i285.i to i32*
  %45 = load i32* %rtint.i.i286.i, align 4, !tbaa !12
  switch i32 %45, label %if.end.i292.i [
    i32 -80, label %if.else.i289.i
    i32 -99, label %if.else.i289.i
  ]

if.else.i289.i:                                   ; preds = %land.lhs.true.i287.i, %land.lhs.true.i287.i, %while.body.i282.i
  %call1.i288.i = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %start.addr.0.i278.i) #4
  br label %if.end.i292.i

if.end.i292.i:                                    ; preds = %if.else.i289.i, %land.lhs.true.i287.i
  %next.0.i290.i = phi %struct.rtx_def* [ %call1.i288.i, %if.else.i289.i ], [ %44, %land.lhs.true.i287.i ]
  %cmp2.i291.i = icmp eq %struct.rtx_def* %start.addr.0.i278.i, %3
  br i1 %cmp2.i291.i, label %delete_insn_chain.exit293.i, label %while.body.i282.i

delete_insn_chain.exit293.i:                      ; preds = %if.end.i292.i
  %arrayidx101.i = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 7
  %rtx102.i = bitcast %union.rtunion_def* %arrayidx101.i to %struct.rtx_def**
  %46 = load %struct.rtx_def** %rtx102.i, align 8, !tbaa !1
  %cmp103.i = icmp eq %struct.rtx_def* %46, null
  br i1 %cmp103.i, label %if.end136.i, label %land.lhs.true105.i

land.lhs.true105.i:                               ; preds = %delete_insn_chain.exit293.i
  %arrayidx107.i = getelementptr inbounds %struct.rtx_def* %46, i64 0, i32 1, i64 2
  %rtx108.i = bitcast %union.rtunion_def* %arrayidx107.i to %struct.rtx_def**
  %47 = load %struct.rtx_def** %rtx108.i, align 8, !tbaa !1
  %cmp109.i = icmp eq %struct.rtx_def* %47, null
  br i1 %cmp109.i, label %if.end136.i, label %land.lhs.true111.i

land.lhs.true111.i:                               ; preds = %land.lhs.true105.i
  %48 = getelementptr inbounds %struct.rtx_def* %47, i64 0, i32 0
  %bf.load112.i = load i32* %48, align 8
  %bf.clear113.i = and i32 %bf.load112.i, 65535
  %cmp114.i = icmp eq i32 %bf.clear113.i, 33
  br i1 %cmp114.i, label %land.lhs.true116.i, label %if.end136.i

land.lhs.true116.i:                               ; preds = %land.lhs.true111.i
  %arrayidx118.i = getelementptr inbounds %struct.rtx_def* %47, i64 0, i32 1, i64 3
  %rtx119.i = bitcast %union.rtunion_def* %arrayidx118.i to %struct.rtx_def**
  %49 = load %struct.rtx_def** %rtx119.i, align 8, !tbaa !1
  %50 = getelementptr inbounds %struct.rtx_def* %49, i64 0, i32 0
  %bf.load120.i = load i32* %50, align 8
  %51 = and i32 %bf.load120.i, 65534
  %switch.i = icmp eq i32 %51, 44
  br i1 %switch.i, label %while.body.i298.i, label %if.end136.i

while.body.i298.i:                                ; preds = %land.lhs.true116.i, %if.end.i308.i
  %start.addr.0.i294.i = phi %struct.rtx_def* [ %next.0.i306.i, %if.end.i308.i ], [ %46, %land.lhs.true116.i ]
  %52 = getelementptr inbounds %struct.rtx_def* %start.addr.0.i294.i, i64 0, i32 0
  %bf.load.i295.i = load i32* %52, align 8
  %bf.clear.i296.i = and i32 %bf.load.i295.i, 65535
  %cmp.i297.i = icmp eq i32 %bf.clear.i296.i, 37
  br i1 %cmp.i297.i, label %land.lhs.true.i303.i, label %if.else.i305.i

land.lhs.true.i303.i:                             ; preds = %while.body.i298.i
  %arrayidx.i299.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i294.i, i64 0, i32 1, i64 2
  %rtx.i300.i = bitcast %union.rtunion_def* %arrayidx.i299.i to %struct.rtx_def**
  %53 = load %struct.rtx_def** %rtx.i300.i, align 8, !tbaa !1
  %arrayidx.i.i301.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i294.i, i64 0, i32 1, i64 4
  %rtint.i.i302.i = bitcast %union.rtunion_def* %arrayidx.i.i301.i to i32*
  %54 = load i32* %rtint.i.i302.i, align 4, !tbaa !12
  switch i32 %54, label %if.end.i308.i [
    i32 -80, label %if.else.i305.i
    i32 -99, label %if.else.i305.i
  ]

if.else.i305.i:                                   ; preds = %land.lhs.true.i303.i, %land.lhs.true.i303.i, %while.body.i298.i
  %call1.i304.i = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %start.addr.0.i294.i) #4
  br label %if.end.i308.i

if.end.i308.i:                                    ; preds = %if.else.i305.i, %land.lhs.true.i303.i
  %next.0.i306.i = phi %struct.rtx_def* [ %call1.i304.i, %if.else.i305.i ], [ %53, %land.lhs.true.i303.i ]
  %cmp2.i307.i = icmp eq %struct.rtx_def* %start.addr.0.i294.i, %47
  br i1 %cmp2.i307.i, label %if.end136.i, label %while.body.i298.i

if.end136.i:                                      ; preds = %if.end.i308.i, %land.lhs.true116.i, %land.lhs.true111.i, %land.lhs.true105.i, %delete_insn_chain.exit293.i
  %55 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %call138.i = tail call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %55) #4
  %tobool139.i = icmp eq %struct.rtx_def* %call138.i, null
  br i1 %tobool139.i, label %if.then145.i, label %lor.lhs.false140.i

lor.lhs.false140.i:                               ; preds = %if.end136.i
  %56 = getelementptr inbounds %struct.rtx_def* %call138.i, i64 0, i32 0
  %bf.load141.i = load i32* %56, align 8
  %bf.clear142.i = and i32 %bf.load141.i, 65535
  %cmp143.i = icmp eq i32 %bf.clear142.i, 35
  br i1 %cmp143.i, label %while.cond.preheader.i, label %if.then145.i

if.then145.i:                                     ; preds = %lor.lhs.false140.i, %if.end136.i
  %57 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %call147.i = tail call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %57) #4
  br label %while.cond.preheader.i

while.cond.preheader.i:                           ; preds = %if.end.i.i, %if.then145.i, %lor.lhs.false140.i, %block_label.exit.i
  %fallthru.0.ph.i = phi i32 [ 0, %block_label.exit.i ], [ 0, %lor.lhs.false140.i ], [ 0, %if.then145.i ], [ 1, %if.end.i.i ]
  %58 = load %struct.edge_def** %succ.i, align 8, !tbaa !24
  %succ_next153315.i = getelementptr inbounds %struct.edge_def* %58, i64 0, i32 1
  %59 = load %struct.edge_def** %succ_next153315.i, align 8, !tbaa !41
  %tobool154316.i = icmp eq %struct.edge_def* %59, null
  br i1 %tobool154316.i, label %while.end.i, label %while.body.i

while.body.i:                                     ; preds = %while.cond.preheader.i, %while.body.i
  %60 = phi %struct.edge_def* [ %61, %while.body.i ], [ %58, %while.cond.preheader.i ]
  tail call void @remove_edge(%struct.edge_def* %60) #4
  %61 = load %struct.edge_def** %succ.i, align 8, !tbaa !24
  %succ_next153.i = getelementptr inbounds %struct.edge_def* %61, i64 0, i32 1
  %62 = load %struct.edge_def** %succ_next153.i, align 8, !tbaa !41
  %tobool154.i = icmp eq %struct.edge_def* %62, null
  br i1 %tobool154.i, label %while.end.i, label %while.body.i

while.end.i:                                      ; preds = %while.body.i, %while.cond.preheader.i
  %.lcssa.i = phi %struct.edge_def* [ %58, %while.cond.preheader.i ], [ %61, %while.body.i ]
  %flags.i = getelementptr inbounds %struct.edge_def* %.lcssa.i, i64 0, i32 6
  store i32 %fallthru.0.ph.i, i32* %flags.i, align 4, !tbaa !39
  %probability.i = getelementptr inbounds %struct.edge_def* %.lcssa.i, i64 0, i32 7
  store i32 10000, i32* %probability.i, align 4, !tbaa !42
  %count.i = getelementptr inbounds %struct.basic_block_def* %2, i64 0, i32 13
  %63 = load i64* %count.i, align 8, !tbaa !25
  %count162.i = getelementptr inbounds %struct.edge_def* %.lcssa.i, i64 0, i32 8
  store i64 %63, i64* %count162.i, align 8, !tbaa !43
  %src164.i = getelementptr inbounds %struct.edge_def* %.lcssa.i, i64 0, i32 2
  %64 = load %struct.basic_block_def** %src164.i, align 8, !tbaa !28
  %end165311.i = getelementptr inbounds %struct.basic_block_def* %64, i64 0, i32 1
  %65 = load %struct.rtx_def** %end165311.i, align 8, !tbaa !18
  %66 = getelementptr inbounds %struct.rtx_def* %65, i64 0, i32 0
  %bf.load166312.i = load i32* %66, align 8
  %bf.clear167313.i = and i32 %bf.load166312.i, 65535
  %cmp168314.i = icmp eq i32 %bf.clear167313.i, 37
  br i1 %cmp168314.i, label %land.rhs.i, label %while.end181.i

land.rhs.i:                                       ; preds = %while.end.i, %while.body177.i
  %67 = phi %struct.rtx_def* [ %70, %while.body177.i ], [ %65, %while.end.i ]
  %arrayidx173.i = getelementptr inbounds %struct.rtx_def* %67, i64 0, i32 1, i64 4
  %rtint174.i = bitcast %union.rtunion_def* %arrayidx173.i to i32*
  %68 = load i32* %rtint174.i, align 4, !tbaa !12
  %cmp175.i = icmp sgt i32 %68, -1
  br i1 %cmp175.i, label %while.body177.i, label %while.end181.i

while.body177.i:                                  ; preds = %land.rhs.i
  %call180.i = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %67) #4
  %69 = load %struct.basic_block_def** %src164.i, align 8, !tbaa !28
  %end165.i = getelementptr inbounds %struct.basic_block_def* %69, i64 0, i32 1
  %70 = load %struct.rtx_def** %end165.i, align 8, !tbaa !18
  %71 = getelementptr inbounds %struct.rtx_def* %70, i64 0, i32 0
  %bf.load166.i = load i32* %71, align 8
  %bf.clear167.i = and i32 %bf.load166.i, 65535
  %cmp168.i = icmp eq i32 %bf.clear167.i, 37
  br i1 %cmp168.i, label %land.rhs.i, label %while.end181.i

while.end181.i:                                   ; preds = %while.body177.i, %land.rhs.i, %while.end.i
  %dest182.i = getelementptr inbounds %struct.edge_def* %.lcssa.i, i64 0, i32 3
  %72 = load %struct.basic_block_def** %dest182.i, align 8, !tbaa !38
  %cmp183.i = icmp eq %struct.basic_block_def* %72, %target
  br i1 %cmp183.i, label %return, label %if.then185.i

if.then185.i:                                     ; preds = %while.end181.i
  tail call void @redirect_edge_succ(%struct.edge_def* %.lcssa.i, %struct.basic_block_def* %target) #4
  br label %return

if.else:                                          ; preds = %for.body.i, %lor.lhs.false.i, %lor.lhs.false28.i, %cond.end25.i, %if.then46.i, %if.then64.i, %if.else70.i, %if.end8.i
  %73 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %cmp = icmp eq %struct.basic_block_def* %73, %target
  br i1 %cmp, label %return, label %if.end9

if.end9:                                          ; preds = %if.else
  %74 = load i32* %flags, align 4, !tbaa !39
  %and11 = and i32 %74, 1
  %tobool12 = icmp eq i32 %and11, 0
  br i1 %tobool12, label %if.else14, label %return

if.else14:                                        ; preds = %if.end9
  %75 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load = load i32* %75, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp15 = icmp eq i32 %bf.clear, 33
  br i1 %cmp15, label %if.end18, label %return

if.end18:                                         ; preds = %if.else14
  %arrayidx = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %76 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp19 = icmp eq %struct.rtx_def* %76, null
  br i1 %cmp19, label %if.else170, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end18
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %76, i64 0, i32 1, i64 2
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %77 = load %struct.rtx_def** %rtx22, align 8, !tbaa !1
  %cmp23 = icmp eq %struct.rtx_def* %77, null
  br i1 %cmp23, label %if.else170, label %land.lhs.true24

land.lhs.true24:                                  ; preds = %land.lhs.true
  %78 = getelementptr inbounds %struct.rtx_def* %77, i64 0, i32 0
  %bf.load25 = load i32* %78, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 33
  br i1 %cmp27, label %land.lhs.true28, label %if.else170

land.lhs.true28:                                  ; preds = %land.lhs.true24
  %arrayidx30 = getelementptr inbounds %struct.rtx_def* %77, i64 0, i32 1, i64 3
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %79 = load %struct.rtx_def** %rtx31, align 8, !tbaa !1
  %80 = getelementptr inbounds %struct.rtx_def* %79, i64 0, i32 0
  %bf.load32 = load i32* %80, align 8
  %81 = and i32 %bf.load32, 65534
  %switch = icmp eq i32 %81, 44
  br i1 %switch, label %if.then41, label %if.else170

if.then41:                                        ; preds = %land.lhs.true28
  %cmp.i258 = icmp eq %struct.basic_block_def* %target, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp.i258, label %return, label %if.end.i

if.end.i:                                         ; preds = %if.then41
  %head.i259 = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 0
  %82 = load %struct.rtx_def** %head.i259, align 8, !tbaa !17
  %83 = getelementptr inbounds %struct.rtx_def* %82, i64 0, i32 0
  %bf.load.i260 = load i32* %83, align 8
  %bf.clear.i261 = and i32 %bf.load.i260, 65535
  %cmp1.i = icmp eq i32 %bf.clear.i261, 36
  br i1 %cmp1.i, label %if.end48, label %if.then2.i

if.then2.i:                                       ; preds = %if.end.i
  %call.i262 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %84 = load %struct.rtx_def** %head.i259, align 8, !tbaa !17
  %call4.i = tail call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call.i262, %struct.rtx_def* %84) #4
  store %struct.rtx_def* %call4.i, %struct.rtx_def** %head.i259, align 8, !tbaa !17
  %85 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool.i263 = icmp eq %struct.varray_head_tag* %85, null
  br i1 %tobool.i263, label %if.end48, label %if.then6.i

if.then6.i:                                       ; preds = %if.then2.i
  %arrayidx.i.i264 = getelementptr inbounds %struct.rtx_def* %call4.i, i64 0, i32 1, i64 0
  %rtint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i264 to i32*
  %86 = load i32* %rtint.i.i, align 4, !tbaa !12
  %conv.i.i = sext i32 %86 to i64
  %num_elements.i.i = getelementptr inbounds %struct.varray_head_tag* %85, i64 0, i32 0
  %87 = load i64* %num_elements.i.i, align 8, !tbaa !20
  %cmp.i.i265 = icmp ult i64 %conv.i.i, %87
  br i1 %cmp.i.i265, label %block_label.exit.thread299, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then6.i
  %add.i.i = add i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %add2.i.i = add i64 %div.i.i, %conv.i.i
  %call.i.i266 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %85, i64 %add2.i.i) #4
  store %struct.varray_head_tag* %call.i.i266, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %block_label.exit.thread299

block_label.exit.thread299:                       ; preds = %if.then6.i, %if.then.i.i
  %.ph = phi %struct.varray_head_tag* [ %85, %if.then6.i ], [ %call.i.i266, %if.then.i.i ]
  %data.i.i300 = getelementptr inbounds %struct.varray_head_tag* %.ph, i64 0, i32 4
  %bb3.i.i301 = bitcast %union.varray_data_tag* %data.i.i300 to [1 x %struct.basic_block_def*]*
  %arrayidx4.i.i302 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i.i301, i64 0, i64 %conv.i.i
  store %struct.basic_block_def* %target, %struct.basic_block_def** %arrayidx4.i.i302, align 8, !tbaa !1
  %.pre.i303 = load %struct.rtx_def** %head.i259, align 8, !tbaa !17
  br label %if.end48

if.end48:                                         ; preds = %if.then2.i, %if.end.i, %block_label.exit.thread299
  %retval.0.i267296 = phi %struct.rtx_def* [ %.pre.i303, %block_label.exit.thread299 ], [ %82, %if.end.i ], [ %call4.i, %if.then2.i ]
  %88 = load %struct.rtx_def** %rtx31, align 8, !tbaa !1
  %89 = getelementptr inbounds %struct.rtx_def* %88, i64 0, i32 0
  %bf.load52 = load i32* %89, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 44
  %arrayidx60 = getelementptr inbounds %struct.rtx_def* %88, i64 0, i32 1, i64 0
  %arrayidx66 = getelementptr inbounds %struct.rtx_def* %88, i64 0, i32 1, i64 1
  %vec.0.in.in = select i1 %cmp54, %union.rtunion_def* %arrayidx60, %union.rtunion_def* %arrayidx66
  %vec.0.in = bitcast %union.rtunion_def* %vec.0.in.in to %struct.rtvec_def**
  %vec.0 = load %struct.rtvec_def** %vec.0.in, align 8
  %num_elem = getelementptr inbounds %struct.rtvec_def* %vec.0, i64 0, i32 0
  %90 = load i32* %num_elem, align 4, !tbaa !13
  %cmp69306 = icmp sgt i32 %90, 0
  br i1 %cmp69306, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end48
  %arrayidx83 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx83 to i32*
  %arrayidx85 = getelementptr inbounds %struct.rtx_def* %retval.0.i267296, i64 0, i32 1, i64 3
  %rtint86 = bitcast %union.rtunion_def* %arrayidx85 to i32*
  %91 = sext i32 %90 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv = phi i64 [ %91, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.backedge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx70 = getelementptr inbounds %struct.rtvec_def* %vec.0, i64 0, i32 1, i64 %indvars.iv.next
  %92 = load %struct.rtx_def** %arrayidx70, align 8, !tbaa !1
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %92, i64 0, i32 1, i64 0
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  %93 = load %struct.rtx_def** %rtx73, align 8, !tbaa !1
  %cmp74 = icmp eq %struct.rtx_def* %93, %1
  br i1 %cmp74, label %if.then75, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.body, %if.then75
  %94 = trunc i64 %indvars.iv.next to i32
  %cmp69 = icmp sgt i32 %94, 0
  br i1 %cmp69, label %for.body, label %for.end

if.then75:                                        ; preds = %for.body
  %95 = load i32* @target_flags, align 4, !tbaa !12
  %and76 = lshr i32 %95, 25
  %96 = and i32 %and76, 1
  %97 = or i32 %96, 4
  %call78 = tail call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %97, %struct.rtx_def* %retval.0.i267296) #4
  store %struct.rtx_def* %call78, %struct.rtx_def** %arrayidx70, align 8, !tbaa !1
  %98 = load i32* %rtint, align 4, !tbaa !12
  %dec = add nsw i32 %98, -1
  store i32 %dec, i32* %rtint, align 4, !tbaa !12
  %99 = load i32* %rtint86, align 4, !tbaa !12
  %inc = add nsw i32 %99, 1
  store i32 %inc, i32* %rtint86, align 4, !tbaa !12
  br label %for.cond.backedge

for.end:                                          ; preds = %for.cond.backedge, %if.end48
  %bf.load89 = load i32* %75, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %idxprom91257 = zext i32 %bf.clear90 to i64
  %arrayidx92 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom91257
  %100 = load i8* %arrayidx92, align 1, !tbaa !40
  %cmp93 = icmp eq i8 %100, 105
  br i1 %cmp93, label %cond.true, label %if.end194

cond.true:                                        ; preds = %for.end
  %arrayidx96 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 3
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %101 = load %struct.rtx_def** %rtx97, align 8, !tbaa !1
  %102 = getelementptr inbounds %struct.rtx_def* %101, i64 0, i32 0
  %bf.load98 = load i32* %102, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 47
  br i1 %cmp100, label %cond.end112, label %cond.false

cond.false:                                       ; preds = %cond.true
  %call109 = tail call %struct.rtx_def* @single_set_2(%struct.rtx_def* %3, %struct.rtx_def* %101) #4
  br label %cond.end112

cond.end112:                                      ; preds = %cond.true, %cond.false
  %cond113 = phi %struct.rtx_def* [ %call109, %cond.false ], [ %101, %cond.true ]
  %cmp114 = icmp eq %struct.rtx_def* %cond113, null
  br i1 %cmp114, label %if.end194, label %land.lhs.true116

land.lhs.true116:                                 ; preds = %cond.end112
  %fld117 = getelementptr inbounds %struct.rtx_def* %cond113, i64 0, i32 1
  %rtx119 = bitcast [1 x %union.rtunion_def]* %fld117 to %struct.rtx_def**
  %103 = load %struct.rtx_def** %rtx119, align 8, !tbaa !1
  %104 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !1
  %cmp120 = icmp eq %struct.rtx_def* %103, %104
  br i1 %cmp120, label %land.lhs.true122, label %if.end194

land.lhs.true122:                                 ; preds = %land.lhs.true116
  %arrayidx124 = getelementptr inbounds %struct.rtx_def* %cond113, i64 0, i32 1, i64 1
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %105 = load %struct.rtx_def** %rtx125, align 8, !tbaa !1
  %106 = getelementptr inbounds %struct.rtx_def* %105, i64 0, i32 0
  %bf.load126 = load i32* %106, align 8
  %bf.clear127 = and i32 %bf.load126, 65535
  %cmp128 = icmp eq i32 %bf.clear127, 72
  br i1 %cmp128, label %land.lhs.true130, label %if.end194

land.lhs.true130:                                 ; preds = %land.lhs.true122
  %arrayidx135 = getelementptr inbounds %struct.rtx_def* %105, i64 0, i32 1, i64 2
  %rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**
  %107 = load %struct.rtx_def** %rtx136, align 8, !tbaa !1
  %108 = getelementptr inbounds %struct.rtx_def* %107, i64 0, i32 0
  %bf.load137 = load i32* %108, align 8
  %bf.clear138 = and i32 %bf.load137, 65535
  %cmp139 = icmp eq i32 %bf.clear138, 67
  br i1 %cmp139, label %land.lhs.true141, label %if.end194

land.lhs.true141:                                 ; preds = %land.lhs.true130
  %arrayidx149 = getelementptr inbounds %struct.rtx_def* %107, i64 0, i32 1, i64 0
  %rtx150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtx_def**
  %109 = load %struct.rtx_def** %rtx150, align 8, !tbaa !1
  %cmp151 = icmp eq %struct.rtx_def* %109, %1
  br i1 %cmp151, label %if.then153, label %if.end194

if.then153:                                       ; preds = %land.lhs.true141
  %call154 = tail call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %retval.0.i267296) #4
  %110 = load %struct.rtx_def** %rtx125, align 8, !tbaa !1
  %111 = getelementptr inbounds %struct.rtx_def* %110, i64 0, i32 1, i64 2, i32 0
  %call154.c = ptrtoint %struct.rtx_def* %call154 to i64
  store i64 %call154.c, i64* %111, align 8, !tbaa !1
  %arrayidx162 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 3
  %rtint163 = bitcast %union.rtunion_def* %arrayidx162 to i32*
  %112 = load i32* %rtint163, align 4, !tbaa !12
  %dec164 = add nsw i32 %112, -1
  store i32 %dec164, i32* %rtint163, align 4, !tbaa !12
  %arrayidx166 = getelementptr inbounds %struct.rtx_def* %retval.0.i267296, i64 0, i32 1, i64 3
  %rtint167 = bitcast %union.rtunion_def* %arrayidx166 to i32*
  %113 = load i32* %rtint167, align 4, !tbaa !12
  %inc168 = add nsw i32 %113, 1
  store i32 %inc168, i32* %rtint167, align 4, !tbaa !12
  br label %if.end194

if.else170:                                       ; preds = %land.lhs.true28, %land.lhs.true, %if.end18, %land.lhs.true24
  %call171 = tail call i32 @computed_jump_p(%struct.rtx_def* %3) #4
  %tobool172 = icmp eq i32 %call171, 0
  br i1 %tobool172, label %lor.lhs.false173, label %return

lor.lhs.false173:                                 ; preds = %if.else170
  %call174 = tail call i32 @returnjump_p(%struct.rtx_def* %3) #4
  %tobool175 = icmp eq i32 %call174, 0
  br i1 %tobool175, label %if.end177, label %return

if.end177:                                        ; preds = %lor.lhs.false173
  %114 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp181 = icmp eq %struct.rtx_def* %114, %1
  br i1 %cmp181, label %if.end184, label %if.then183

if.then183:                                       ; preds = %if.end177
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 890, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.redirect_edge_and_branch, i64 0, i64 0)) #5
  unreachable

if.end184:                                        ; preds = %if.end177
  %cmp.i268 = icmp eq %struct.basic_block_def* %target, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp.i268, label %block_label.exit295, label %if.end.i273

if.end.i273:                                      ; preds = %if.end184
  %head.i269 = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 0
  %115 = load %struct.rtx_def** %head.i269, align 8, !tbaa !17
  %116 = getelementptr inbounds %struct.rtx_def* %115, i64 0, i32 0
  %bf.load.i270 = load i32* %116, align 8
  %bf.clear.i271 = and i32 %bf.load.i270, 65535
  %cmp1.i272 = icmp eq i32 %bf.clear.i271, 36
  br i1 %cmp1.i272, label %block_label.exit295, label %if.then2.i277

if.then2.i277:                                    ; preds = %if.end.i273
  %call.i274 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %117 = load %struct.rtx_def** %head.i269, align 8, !tbaa !17
  %call4.i275 = tail call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call.i274, %struct.rtx_def* %117) #4
  store %struct.rtx_def* %call4.i275, %struct.rtx_def** %head.i269, align 8, !tbaa !17
  %118 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool.i276 = icmp eq %struct.varray_head_tag* %118, null
  br i1 %tobool.i276, label %block_label.exit295, label %if.then6.i283

if.then6.i283:                                    ; preds = %if.then2.i277
  %arrayidx.i.i278 = getelementptr inbounds %struct.rtx_def* %call4.i275, i64 0, i32 1, i64 0
  %rtint.i.i279 = bitcast %union.rtunion_def* %arrayidx.i.i278 to i32*
  %119 = load i32* %rtint.i.i279, align 4, !tbaa !12
  %conv.i.i280 = sext i32 %119 to i64
  %num_elements.i.i281 = getelementptr inbounds %struct.varray_head_tag* %118, i64 0, i32 0
  %120 = load i64* %num_elements.i.i281, align 8, !tbaa !20
  %cmp.i.i282 = icmp ult i64 %conv.i.i280, %120
  br i1 %cmp.i.i282, label %set_block_for_insn.exit.i293, label %if.then.i.i288

if.then.i.i288:                                   ; preds = %if.then6.i283
  %add.i.i284 = add i64 %conv.i.i280, 7
  %div.i.i285 = lshr i64 %add.i.i284, 3
  %add2.i.i286 = add i64 %div.i.i285, %conv.i.i280
  %call.i.i287 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %118, i64 %add2.i.i286) #4
  store %struct.varray_head_tag* %call.i.i287, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit.i293

set_block_for_insn.exit.i293:                     ; preds = %if.then.i.i288, %if.then6.i283
  %121 = phi %struct.varray_head_tag* [ %118, %if.then6.i283 ], [ %call.i.i287, %if.then.i.i288 ]
  %data.i.i289 = getelementptr inbounds %struct.varray_head_tag* %121, i64 0, i32 4
  %bb3.i.i290 = bitcast %union.varray_data_tag* %data.i.i289 to [1 x %struct.basic_block_def*]*
  %arrayidx4.i.i291 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i.i290, i64 0, i64 %conv.i.i280
  store %struct.basic_block_def* %target, %struct.basic_block_def** %arrayidx4.i.i291, align 8, !tbaa !1
  %.pre.i292 = load %struct.rtx_def** %head.i269, align 8, !tbaa !17
  br label %block_label.exit295

block_label.exit295:                              ; preds = %if.end184, %if.end.i273, %if.then2.i277, %set_block_for_insn.exit.i293
  %retval.0.i294 = phi %struct.rtx_def* [ null, %if.end184 ], [ %call4.i275, %if.then2.i277 ], [ %115, %if.end.i273 ], [ %.pre.i292, %set_block_for_insn.exit.i293 ]
  %call186 = tail call i32 @redirect_jump(%struct.rtx_def* %3, %struct.rtx_def* %retval.0.i294, i32 0) #4
  %tobool187 = icmp eq i32 %call186, 0
  br i1 %tobool187, label %if.then188, label %if.end194

if.then188:                                       ; preds = %block_label.exit295
  br i1 %cmp.i268, label %return, label %if.end192

if.end192:                                        ; preds = %if.then188
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 899, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.redirect_edge_and_branch, i64 0, i64 0)) #5
  unreachable

if.end194:                                        ; preds = %for.end, %cond.end112, %block_label.exit295, %land.lhs.true116, %land.lhs.true122, %land.lhs.true130, %land.lhs.true141, %if.then153
  %122 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool195 = icmp eq %struct._IO_FILE* %122, null
  br i1 %tobool195, label %if.end202, label %if.then196

if.then196:                                       ; preds = %if.end194
  %123 = load %struct.basic_block_def** %src3, align 8, !tbaa !28
  %index = getelementptr inbounds %struct.basic_block_def* %123, i64 0, i32 11
  %124 = load i32* %index, align 4, !tbaa !19
  %125 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %index199 = getelementptr inbounds %struct.basic_block_def* %125, i64 0, i32 11
  %126 = load i32* %index199, align 4, !tbaa !19
  %index200 = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 11
  %127 = load i32* %index200, align 4, !tbaa !19
  %call201 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %122, i8* getelementptr inbounds ([30 x i8]* @.str2, i64 0, i64 0), i32 %124, i32 %126, i32 %127) #4
  br label %if.end202

if.end202:                                        ; preds = %if.end194, %if.then196
  %128 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %cmp204 = icmp eq %struct.basic_block_def* %128, %target
  br i1 %cmp204, label %return, label %if.then206

if.then206:                                       ; preds = %if.end202
  %call207 = tail call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %e, %struct.basic_block_def* %target) #4
  br label %return

return:                                           ; preds = %if.then41, %if.then185.i, %while.end181.i, %if.then206, %if.end202, %if.then188, %if.else170, %lor.lhs.false173, %if.else14, %if.end9, %if.else, %entry
  %retval.0 = phi i1 [ false, %entry ], [ false, %if.else ], [ false, %if.end9 ], [ false, %if.else14 ], [ false, %lor.lhs.false173 ], [ false, %if.else170 ], [ false, %if.then188 ], [ true, %if.end202 ], [ true, %if.then206 ], [ true, %while.end181.i ], [ true, %if.then185.i ], [ false, %if.then41 ]
  ret i1 %retval.0
}

declare %struct.rtx_def* @gen_rtx_fmt_u00(i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @computed_jump_p(%struct.rtx_def*) #1

declare i32 @returnjump_p(%struct.rtx_def*) #1

declare i32 @redirect_jump(%struct.rtx_def*, %struct.rtx_def*, i32) #1

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #3

declare %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def*, %struct.basic_block_def*) #1

; Function Attrs: nounwind uwtable
define %struct.basic_block_def* @force_nonfallthru(%struct.edge_def* %e) #0 {
entry:
  %dest = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 3
  %0 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %call = tail call fastcc %struct.basic_block_def* @force_nonfallthru_and_redirect(%struct.edge_def* %e, %struct.basic_block_def* %0)
  ret %struct.basic_block_def* %call
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.basic_block_def* @force_nonfallthru_and_redirect(%struct.edge_def* %e, %struct.basic_block_def* %target) #0 {
entry:
  %flags = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 6
  %0 = load i32* %flags, align 4, !tbaa !39
  %and = and i32 %0, 2
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 926, i8* getelementptr inbounds ([31 x i8]* @__FUNCTION__.force_nonfallthru_and_redirect, i64 0, i64 0)) #5
  unreachable

if.else:                                          ; preds = %entry
  %and2 = and i32 %0, 1
  %tobool3 = icmp eq i32 %and2, 0
  br i1 %tobool3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 928, i8* getelementptr inbounds ([31 x i8]* @__FUNCTION__.force_nonfallthru_and_redirect, i64 0, i64 0)) #5
  unreachable

if.else5:                                         ; preds = %if.else
  %src = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 2
  %1 = load %struct.basic_block_def** %src, align 8, !tbaa !28
  %cmp = icmp eq %struct.basic_block_def* %1, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  br i1 %cmp, label %if.then6, label %if.end19

if.then6:                                         ; preds = %if.else5
  %dest = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 3
  %2 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %head = getelementptr inbounds %struct.basic_block_def* %2, i64 0, i32 0
  %3 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %4 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %5 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %inc.i = add nsw i32 %5, 1
  store i32 %inc.i, i32* @n_basic_blocks, align 4, !tbaa !12
  %conv.i = sext i32 %inc.i to i64
  %call.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %4, i64 %conv.i) #4
  store %struct.varray_head_tag* %call.i, %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %6 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %i.017.i = add i32 %6, -1
  %cmp18.i = icmp sgt i32 %i.017.i, 0
  br i1 %cmp18.i, label %for.body.lr.ph.i, label %create_basic_block.exit

for.body.lr.ph.i:                                 ; preds = %if.then6
  %7 = sext i32 %i.017.i to i64
  %sub2.i389 = add i32 %6, -2
  %idxprom.i390 = sext i32 %sub2.i389 to i64
  %data.i391 = getelementptr inbounds %struct.varray_head_tag* %call.i, i64 0, i32 4
  %bb3.i392 = bitcast %union.varray_data_tag* %data.i391 to [1 x %struct.basic_block_def*]*
  %arrayidx.i393 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i392, i64 0, i64 %idxprom.i390
  %8 = load %struct.basic_block_def** %arrayidx.i393, align 8, !tbaa !1
  %arrayidx7.i394 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i392, i64 0, i64 %7
  store %struct.basic_block_def* %8, %struct.basic_block_def** %arrayidx7.i394, align 8, !tbaa !1
  %index8.i395 = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 11
  store i32 %i.017.i, i32* %index8.i395, align 4, !tbaa !19
  %cmp.i397 = icmp sgt i32 %sub2.i389, 0
  br i1 %cmp.i397, label %for.body.for.body_crit_edge.i, label %create_basic_block.exit

for.body.for.body_crit_edge.i:                    ; preds = %for.body.lr.ph.i, %for.body.for.body_crit_edge.i
  %i.0.i399 = phi i32 [ %i.0.i, %for.body.for.body_crit_edge.i ], [ %sub2.i389, %for.body.lr.ph.i ]
  %9 = phi i32 [ %11, %for.body.for.body_crit_edge.i ], [ %i.017.i, %for.body.lr.ph.i ]
  %indvars.iv.i398 = phi i64 [ %indvars.iv.next.i, %for.body.for.body_crit_edge.i ], [ %7, %for.body.lr.ph.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i398, -1
  %.pre.i = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %sub2.i = add nsw i32 %9, -2
  %idxprom.i = sext i32 %sub2.i to i64
  %data.i = getelementptr inbounds %struct.varray_head_tag* %.pre.i, i64 0, i32 4
  %bb3.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %idxprom.i
  %10 = load %struct.basic_block_def** %arrayidx.i, align 8, !tbaa !1
  %arrayidx7.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %indvars.iv.next.i
  store %struct.basic_block_def* %10, %struct.basic_block_def** %arrayidx7.i, align 8, !tbaa !1
  %index8.i = getelementptr inbounds %struct.basic_block_def* %10, i64 0, i32 11
  %11 = trunc i64 %indvars.iv.next.i to i32
  store i32 %11, i32* %index8.i, align 4, !tbaa !19
  %i.0.i = add nsw i32 %i.0.i399, -1
  %cmp.i = icmp sgt i32 %i.0.i, 0
  br i1 %cmp.i, label %for.body.for.body_crit_edge.i, label %create_basic_block.exit

create_basic_block.exit:                          ; preds = %for.body.for.body_crit_edge.i, %for.body.lr.ph.i, %if.then6
  %call9.i = tail call %struct.basic_block_def* @create_basic_block_structure(i32 0, %struct.rtx_def* %3, %struct.rtx_def* null, %struct.rtx_def* null) #4
  %aux.i = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 10
  store i8* null, i8** %aux.i, align 8, !tbaa !15
  store %struct.basic_block_def* %call9.i, %struct.basic_block_def** %src, align 8, !tbaa !28
  %count = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 8
  %12 = load i64* %count, align 8, !tbaa !43
  %count8 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 13
  store i64 %12, i64* %count8, align 8, !tbaa !25
  %frequency = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 14
  %13 = load i32* %frequency, align 4, !tbaa !26
  %probability = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 7
  %14 = load i32* %probability, align 4, !tbaa !42
  %mul = mul nsw i32 %14, %13
  %add = add nsw i32 %mul, 5000
  %div = sdiv i32 %add, 10000
  store i32 %div, i32* %frequency, align 4, !tbaa !26
  %loop_depth = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 12
  store i32 0, i32* %loop_depth, align 4, !tbaa !27
  %15 = load %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 5), align 8, !tbaa !1
  %tobool11387 = icmp eq %struct.edge_def* %15, null
  br i1 %tobool11387, label %for.end.loopexit, label %for.body

for.cond:                                         ; preds = %for.body
  %16 = load %struct.edge_def** %succ_next14, align 8, !tbaa !1
  %tobool11 = icmp eq %struct.edge_def* %16, null
  br i1 %tobool11, label %for.end.loopexit, label %for.body

for.body:                                         ; preds = %create_basic_block.exit, %for.cond
  %17 = phi %struct.edge_def* [ %16, %for.cond ], [ %15, %create_basic_block.exit ]
  %pe1.0388 = phi %struct.edge_def** [ %succ_next14, %for.cond ], [ getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 5), %create_basic_block.exit ]
  %cmp12 = icmp eq %struct.edge_def* %17, %e
  %succ_next14 = getelementptr inbounds %struct.edge_def* %17, i64 0, i32 1
  br i1 %cmp12, label %if.then13, label %for.cond

if.then13:                                        ; preds = %for.body
  %succ_next = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 1
  %18 = load %struct.edge_def** %succ_next, align 8, !tbaa !41
  store %struct.edge_def* %18, %struct.edge_def** %pe1.0388, align 8, !tbaa !1
  br label %for.end

for.end.loopexit:                                 ; preds = %for.cond, %create_basic_block.exit
  %succ_next15.pre = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 1
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.then13
  %succ_next15.pre-phi = phi %struct.edge_def** [ %succ_next15.pre, %for.end.loopexit ], [ %succ_next, %if.then13 ]
  store %struct.edge_def* null, %struct.edge_def** %succ_next15.pre-phi, align 8, !tbaa !41
  %succ = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 5
  store %struct.edge_def* %e, %struct.edge_def** %succ, align 8, !tbaa !24
  %call16 = tail call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0), %struct.basic_block_def* %call9.i, i32 1) #4
  %.pre = load %struct.basic_block_def** %src, align 8, !tbaa !28
  br label %if.end19

if.end19:                                         ; preds = %for.end, %if.else5
  %19 = phi %struct.basic_block_def* [ %.pre, %for.end ], [ %1, %if.else5 ]
  %succ21 = getelementptr inbounds %struct.basic_block_def* %19, i64 0, i32 5
  %20 = load %struct.edge_def** %succ21, align 8, !tbaa !24
  %succ_next22 = getelementptr inbounds %struct.edge_def* %20, i64 0, i32 1
  %21 = load %struct.edge_def** %succ_next22, align 8, !tbaa !41
  %tobool23 = icmp eq %struct.edge_def* %21, null
  br i1 %tobool23, label %if.end208, label %if.then24

if.then24:                                        ; preds = %if.end19
  %end = getelementptr inbounds %struct.basic_block_def* %19, i64 0, i32 1
  %22 = load %struct.rtx_def** %end, align 8, !tbaa !18
  br label %for.cond.outer.i

for.cond.outer.i:                                 ; preds = %land.rhs.i, %if.then24
  %insn.pn.ph.i = phi %struct.rtx_def* [ %22, %if.then24 ], [ %insn.addr.0.i, %land.rhs.i ]
  br label %for.cond.i

for.cond.i:                                       ; preds = %land.rhs.i, %for.cond.outer.i
  %insn.pn.i = phi %struct.rtx_def* [ %insn.addr.0.i, %land.rhs.i ], [ %insn.pn.ph.i, %for.cond.outer.i ]
  %insn.addr.0.in.in.i = getelementptr inbounds %struct.rtx_def* %insn.pn.i, i64 0, i32 1, i64 2
  %insn.addr.0.in.i = bitcast %union.rtunion_def* %insn.addr.0.in.in.i to %struct.rtx_def**
  %insn.addr.0.i = load %struct.rtx_def** %insn.addr.0.in.i, align 8
  %tobool.i = icmp eq %struct.rtx_def* %insn.addr.0.i, null
  br i1 %tobool.i, label %last_loop_beg_note.exit, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %for.cond.i
  %23 = getelementptr inbounds %struct.rtx_def* %insn.addr.0.i, i64 0, i32 0
  %bf.load.i = load i32* %23, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i342 = icmp eq i32 %bf.clear.i, 37
  br i1 %cmp.i342, label %land.rhs.i, label %last_loop_beg_note.exit

land.rhs.i:                                       ; preds = %land.lhs.true.i
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %insn.addr.0.i, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx2.i to i32*
  %24 = load i32* %rtint.i, align 4, !tbaa !12
  switch i32 %24, label %for.cond.i [
    i32 -80, label %last_loop_beg_note.exit
    i32 -96, label %for.cond.outer.i
  ]

last_loop_beg_note.exit:                          ; preds = %for.cond.i, %land.lhs.true.i, %land.rhs.i
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.pn.ph.i, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %25 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp27 = icmp eq %struct.rtx_def* %25, null
  br i1 %cmp27, label %if.end67, label %land.lhs.true

land.lhs.true:                                    ; preds = %last_loop_beg_note.exit
  %26 = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 0
  %bf.load = load i32* %26, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp28 = icmp eq i32 %bf.clear, 36
  br i1 %cmp28, label %land.lhs.true29, label %if.end67

land.lhs.true29:                                  ; preds = %land.lhs.true
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 1, i64 2
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %27 = load %struct.rtx_def** %rtx32, align 8, !tbaa !1
  %tobool33 = icmp eq %struct.rtx_def* %27, null
  br i1 %tobool33, label %if.end67, label %land.lhs.true34

land.lhs.true34:                                  ; preds = %land.lhs.true29
  %28 = getelementptr inbounds %struct.rtx_def* %27, i64 0, i32 0
  %bf.load38 = load i32* %28, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 33
  br i1 %cmp40, label %land.lhs.true41, label %if.end67

land.lhs.true41:                                  ; preds = %land.lhs.true34
  %arrayidx46 = getelementptr inbounds %struct.rtx_def* %27, i64 0, i32 1, i64 3
  %rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %29 = load %struct.rtx_def** %rtx47, align 8, !tbaa !1
  %30 = getelementptr inbounds %struct.rtx_def* %29, i64 0, i32 0
  %bf.load48 = load i32* %30, align 8
  %31 = and i32 %bf.load48, 65534
  %switch = icmp eq i32 %31, 44
  br i1 %switch, label %if.then60, label %if.end67

if.then60:                                        ; preds = %land.lhs.true41
  %arrayidx65 = getelementptr inbounds %struct.rtx_def* %27, i64 0, i32 1, i64 2
  %rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**
  %32 = load %struct.rtx_def** %rtx66, align 8, !tbaa !1
  br label %if.end67

if.end67:                                         ; preds = %land.lhs.true41, %land.lhs.true29, %last_loop_beg_note.exit, %if.then60, %land.lhs.true34, %land.lhs.true
  %note.0 = phi %struct.rtx_def* [ %32, %if.then60 ], [ %25, %land.lhs.true34 ], [ %25, %land.lhs.true29 ], [ %25, %land.lhs.true ], [ null, %last_loop_beg_note.exit ], [ %25, %land.lhs.true41 ]
  %index = getelementptr inbounds %struct.basic_block_def* %19, i64 0, i32 11
  %33 = load i32* %index, align 4, !tbaa !19
  %add69 = add nsw i32 %33, 1
  %34 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %35 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %inc.i343 = add nsw i32 %35, 1
  store i32 %inc.i343, i32* @n_basic_blocks, align 4, !tbaa !12
  %conv.i344 = sext i32 %inc.i343 to i64
  %call.i345 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %34, i64 %conv.i344) #4
  store %struct.varray_head_tag* %call.i345, %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %36 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %i.017.i346 = add i32 %36, -1
  %cmp18.i347 = icmp sgt i32 %i.017.i346, %add69
  br i1 %cmp18.i347, label %for.body.lr.ph.i348, label %create_basic_block.exit367

for.body.lr.ph.i348:                              ; preds = %if.end67
  %37 = sext i32 %i.017.i346 to i64
  %sub2.i352376 = add i32 %36, -2
  %idxprom.i353377 = sext i32 %sub2.i352376 to i64
  %data.i354378 = getelementptr inbounds %struct.varray_head_tag* %call.i345, i64 0, i32 4
  %bb3.i355379 = bitcast %union.varray_data_tag* %data.i354378 to [1 x %struct.basic_block_def*]*
  %arrayidx.i356380 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i355379, i64 0, i64 %idxprom.i353377
  %38 = load %struct.basic_block_def** %arrayidx.i356380, align 8, !tbaa !1
  %arrayidx7.i357381 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i355379, i64 0, i64 %37
  store %struct.basic_block_def* %38, %struct.basic_block_def** %arrayidx7.i357381, align 8, !tbaa !1
  %index8.i358382 = getelementptr inbounds %struct.basic_block_def* %38, i64 0, i32 11
  store i32 %i.017.i346, i32* %index8.i358382, align 4, !tbaa !19
  %cmp.i360384 = icmp sgt i32 %sub2.i352376, %add69
  br i1 %cmp.i360384, label %for.body.for.body_crit_edge.i364, label %create_basic_block.exit367

for.body.for.body_crit_edge.i364:                 ; preds = %for.body.lr.ph.i348, %for.body.for.body_crit_edge.i364
  %i.0.i359386 = phi i32 [ %i.0.i359, %for.body.for.body_crit_edge.i364 ], [ %sub2.i352376, %for.body.lr.ph.i348 ]
  %39 = phi i32 [ %41, %for.body.for.body_crit_edge.i364 ], [ %i.017.i346, %for.body.lr.ph.i348 ]
  %indvars.iv.i349385 = phi i64 [ %indvars.iv.next.i362, %for.body.for.body_crit_edge.i364 ], [ %37, %for.body.lr.ph.i348 ]
  %indvars.iv.next.i362 = add nsw i64 %indvars.iv.i349385, -1
  %.pre.i363 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %sub2.i352 = add nsw i32 %39, -2
  %idxprom.i353 = sext i32 %sub2.i352 to i64
  %data.i354 = getelementptr inbounds %struct.varray_head_tag* %.pre.i363, i64 0, i32 4
  %bb3.i355 = bitcast %union.varray_data_tag* %data.i354 to [1 x %struct.basic_block_def*]*
  %arrayidx.i356 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i355, i64 0, i64 %idxprom.i353
  %40 = load %struct.basic_block_def** %arrayidx.i356, align 8, !tbaa !1
  %arrayidx7.i357 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i355, i64 0, i64 %indvars.iv.next.i362
  store %struct.basic_block_def* %40, %struct.basic_block_def** %arrayidx7.i357, align 8, !tbaa !1
  %index8.i358 = getelementptr inbounds %struct.basic_block_def* %40, i64 0, i32 11
  %41 = trunc i64 %indvars.iv.next.i362 to i32
  store i32 %41, i32* %index8.i358, align 4, !tbaa !19
  %i.0.i359 = add nsw i32 %i.0.i359386, -1
  %cmp.i360 = icmp sgt i32 %i.0.i359, %add69
  br i1 %cmp.i360, label %for.body.for.body_crit_edge.i364, label %create_basic_block.exit367

create_basic_block.exit367:                       ; preds = %for.body.for.body_crit_edge.i364, %for.body.lr.ph.i348, %if.end67
  %call9.i365 = tail call %struct.basic_block_def* @create_basic_block_structure(i32 %add69, %struct.rtx_def* %note.0, %struct.rtx_def* null, %struct.rtx_def* null) #4
  %aux.i366 = getelementptr inbounds %struct.basic_block_def* %call9.i365, i64 0, i32 10
  store i8* null, i8** %aux.i366, align 8, !tbaa !15
  %count71 = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 8
  %42 = load i64* %count71, align 8, !tbaa !43
  %count72 = getelementptr inbounds %struct.basic_block_def* %call9.i365, i64 0, i32 13
  store i64 %42, i64* %count72, align 8, !tbaa !25
  %43 = load %struct.basic_block_def** %src, align 8, !tbaa !28
  %frequency74 = getelementptr inbounds %struct.basic_block_def* %43, i64 0, i32 14
  %44 = load i32* %frequency74, align 4, !tbaa !26
  %probability75 = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 7
  %45 = load i32* %probability75, align 4, !tbaa !42
  %mul76 = mul nsw i32 %45, %44
  %add77 = add nsw i32 %mul76, 5000
  %div78 = sdiv i32 %add77, 10000
  %frequency79 = getelementptr inbounds %struct.basic_block_def* %call9.i365, i64 0, i32 14
  store i32 %div78, i32* %frequency79, align 4, !tbaa !26
  %loop_depth80 = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 12
  %46 = load i32* %loop_depth80, align 4, !tbaa !27
  %loop_depth81 = getelementptr inbounds %struct.basic_block_def* %call9.i365, i64 0, i32 12
  store i32 %46, i32* %loop_depth81, align 4, !tbaa !27
  %global_live_at_start = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 8
  %47 = load %struct.bitmap_head_def** %global_live_at_start, align 8, !tbaa !30
  %tobool82 = icmp eq %struct.bitmap_head_def* %47, null
  br i1 %tobool82, label %if.end198, label %if.then83

if.then83:                                        ; preds = %create_basic_block.exit367
  %48 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %49 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %sub.ptr.lhs.cast = ptrtoint i8* %48 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %49 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp84 = icmp slt i64 %sub.ptr.sub, 24
  br i1 %cmp84, label %if.then86, label %if.end87

if.then86:                                        ; preds = %if.then83
  tail call void @_obstack_newchunk(%struct.obstack* @flow_obstack, i32 24) #4
  %.pre403 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end87

if.end87:                                         ; preds = %if.then86, %if.then83
  %50 = phi i8* [ %.pre403, %if.then86 ], [ %49, %if.then83 ]
  %add.ptr = getelementptr inbounds i8* %50, i64 24
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %51 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %cmp92 = icmp eq i8* %add.ptr, %51
  br i1 %cmp92, label %if.then94, label %if.end97

if.then94:                                        ; preds = %if.end87
  %bf.load95 = load i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load95, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  br label %if.end97

if.end97:                                         ; preds = %if.then94, %if.end87
  %sub.ptr.lhs.cast99 = ptrtoint i8* %add.ptr to i64
  %52 = load i32* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 6), align 8, !tbaa !35
  %conv101 = sext i32 %52 to i64
  %add102 = add nsw i64 %conv101, %sub.ptr.lhs.cast99
  %neg = xor i32 %52, -1
  %conv104 = sext i32 %neg to i64
  %and105 = and i64 %add102, %conv104
  %add.ptr106 = getelementptr inbounds i8* null, i64 %and105
  store i8* %add.ptr106, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %53 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 1), align 8, !tbaa !36
  %sub.ptr.lhs.cast109 = ptrtoint i8* %add.ptr106 to i64
  %sub.ptr.rhs.cast110 = ptrtoint %struct._obstack_chunk* %53 to i64
  %sub.ptr.sub111 = sub i64 %sub.ptr.lhs.cast109, %sub.ptr.rhs.cast110
  %54 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %sub.ptr.lhs.cast114 = ptrtoint i8* %54 to i64
  %sub.ptr.sub116 = sub i64 %sub.ptr.lhs.cast114, %sub.ptr.rhs.cast110
  %cmp117 = icmp sgt i64 %sub.ptr.sub111, %sub.ptr.sub116
  br i1 %cmp117, label %if.then119, label %if.end122

if.then119:                                       ; preds = %if.end97
  store i8* %54, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end122

if.end122:                                        ; preds = %if.then119, %if.end97
  %55 = phi i8* [ %54, %if.then119 ], [ %add.ptr106, %if.end97 ]
  store i8* %55, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %56 = bitcast i8* %51 to %struct.bitmap_head_def*
  %call126 = tail call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %56) #4
  %global_live_at_start127 = getelementptr inbounds %struct.basic_block_def* %call9.i365, i64 0, i32 8
  store %struct.bitmap_head_def* %call126, %struct.bitmap_head_def** %global_live_at_start127, align 8, !tbaa !30
  %57 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %58 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %sub.ptr.lhs.cast136 = ptrtoint i8* %57 to i64
  %sub.ptr.rhs.cast137 = ptrtoint i8* %58 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  %cmp140 = icmp slt i64 %sub.ptr.sub138, 24
  br i1 %cmp140, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.end122
  tail call void @_obstack_newchunk(%struct.obstack* @flow_obstack, i32 24) #4
  %.pre404 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end143

if.end143:                                        ; preds = %if.then142, %if.end122
  %59 = phi i8* [ %.pre404, %if.then142 ], [ %58, %if.end122 ]
  %add.ptr146 = getelementptr inbounds i8* %59, i64 24
  store i8* %add.ptr146, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %60 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %cmp154 = icmp eq i8* %add.ptr146, %60
  br i1 %cmp154, label %if.then156, label %if.end161

if.then156:                                       ; preds = %if.end143
  %bf.load158 = load i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  %bf.set160 = or i8 %bf.load158, 2
  store i8 %bf.set160, i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  br label %if.end161

if.end161:                                        ; preds = %if.then156, %if.end143
  %sub.ptr.lhs.cast163 = ptrtoint i8* %add.ptr146 to i64
  %61 = load i32* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 6), align 8, !tbaa !35
  %conv166 = sext i32 %61 to i64
  %add167 = add nsw i64 %conv166, %sub.ptr.lhs.cast163
  %neg169 = xor i32 %61, -1
  %conv170 = sext i32 %neg169 to i64
  %and171 = and i64 %add167, %conv170
  %add.ptr172 = getelementptr inbounds i8* null, i64 %and171
  store i8* %add.ptr172, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %62 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 1), align 8, !tbaa !36
  %sub.ptr.lhs.cast176 = ptrtoint i8* %add.ptr172 to i64
  %sub.ptr.rhs.cast177 = ptrtoint %struct._obstack_chunk* %62 to i64
  %sub.ptr.sub178 = sub i64 %sub.ptr.lhs.cast176, %sub.ptr.rhs.cast177
  %63 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %sub.ptr.lhs.cast181 = ptrtoint i8* %63 to i64
  %sub.ptr.sub183 = sub i64 %sub.ptr.lhs.cast181, %sub.ptr.rhs.cast177
  %cmp184 = icmp sgt i64 %sub.ptr.sub178, %sub.ptr.sub183
  br i1 %cmp184, label %if.then186, label %if.end189

if.then186:                                       ; preds = %if.end161
  store i8* %63, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end189

if.end189:                                        ; preds = %if.then186, %if.end161
  %64 = phi i8* [ %63, %if.then186 ], [ %add.ptr172, %if.end161 ]
  store i8* %64, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %65 = bitcast i8* %60 to %struct.bitmap_head_def*
  %call193 = tail call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %65) #4
  %global_live_at_end = getelementptr inbounds %struct.basic_block_def* %call9.i365, i64 0, i32 9
  store %struct.bitmap_head_def* %call193, %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !37
  %66 = load %struct.bitmap_head_def** %global_live_at_start127, align 8, !tbaa !30
  %67 = load %struct.bitmap_head_def** %global_live_at_start, align 8, !tbaa !30
  tail call void @bitmap_copy(%struct.bitmap_head_def* %66, %struct.bitmap_head_def* %67) #4
  %68 = load %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !37
  %69 = load %struct.bitmap_head_def** %global_live_at_start, align 8, !tbaa !30
  tail call void @bitmap_copy(%struct.bitmap_head_def* %68, %struct.bitmap_head_def* %69) #4
  %.pre402 = load %struct.basic_block_def** %src, align 8, !tbaa !28
  br label %if.end198

if.end198:                                        ; preds = %create_basic_block.exit367, %if.end189
  %70 = phi %struct.basic_block_def* [ %43, %create_basic_block.exit367 ], [ %.pre402, %if.end189 ]
  %call200 = tail call %struct.edge_def* @make_edge(%struct.basic_block_def* %70, %struct.basic_block_def* %call9.i365, i32 1) #4
  %71 = load i32* %probability75, align 4, !tbaa !42
  %probability202 = getelementptr inbounds %struct.edge_def* %call200, i64 0, i32 7
  store i32 %71, i32* %probability202, align 4, !tbaa !42
  %72 = load i64* %count71, align 8, !tbaa !43
  %count204 = getelementptr inbounds %struct.edge_def* %call200, i64 0, i32 8
  store i64 %72, i64* %count204, align 8, !tbaa !43
  tail call void @redirect_edge_pred(%struct.edge_def* %e, %struct.basic_block_def* %call9.i365) #4
  store i32 10000, i32* %probability75, align 4, !tbaa !42
  br label %if.end208

if.end208:                                        ; preds = %if.end19, %if.end198
  %new_bb.0 = phi %struct.basic_block_def* [ %call9.i365, %if.end198 ], [ null, %if.end19 ]
  %jump_block.0 = phi %struct.basic_block_def* [ %call9.i365, %if.end198 ], [ %19, %if.end19 ]
  %73 = load i32* %flags, align 4, !tbaa !39
  %and210 = and i32 %73, -2
  store i32 %and210, i32* %flags, align 4, !tbaa !39
  %cmp211 = icmp eq %struct.basic_block_def* %target, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp211, label %if.then213, label %if.end.i

if.then213:                                       ; preds = %if.end208
  %call214 = tail call i32 @ix86_can_use_return_insn_p() #4
  %tobool215 = icmp eq i32 %call214, 0
  br i1 %tobool215, label %if.else220, label %if.then216

if.then216:                                       ; preds = %if.then213
  %call217 = tail call %struct.rtx_def* @gen_return() #4
  %end218 = getelementptr inbounds %struct.basic_block_def* %jump_block.0, i64 0, i32 1
  %74 = load %struct.rtx_def** %end218, align 8, !tbaa !18
  %call219 = tail call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call217, %struct.rtx_def* %74) #4
  br label %if.end234

if.else220:                                       ; preds = %if.then213
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1007, i8* getelementptr inbounds ([31 x i8]* @__FUNCTION__.force_nonfallthru_and_redirect, i64 0, i64 0)) #5
  unreachable

if.end.i:                                         ; preds = %if.end208
  %head.i = getelementptr inbounds %struct.basic_block_def* %target, i64 0, i32 0
  %75 = load %struct.rtx_def** %head.i, align 8, !tbaa !17
  %76 = getelementptr inbounds %struct.rtx_def* %75, i64 0, i32 0
  %bf.load.i369 = load i32* %76, align 8
  %bf.clear.i370 = and i32 %bf.load.i369, 65535
  %cmp1.i = icmp eq i32 %bf.clear.i370, 36
  br i1 %cmp1.i, label %block_label.exit, label %if.then2.i

if.then2.i:                                       ; preds = %if.end.i
  %call.i371 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %77 = load %struct.rtx_def** %head.i, align 8, !tbaa !17
  %call4.i = tail call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call.i371, %struct.rtx_def* %77) #4
  store %struct.rtx_def* %call4.i, %struct.rtx_def** %head.i, align 8, !tbaa !17
  %78 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool.i372 = icmp eq %struct.varray_head_tag* %78, null
  br i1 %tobool.i372, label %block_label.exit, label %if.then6.i

if.then6.i:                                       ; preds = %if.then2.i
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %call4.i, i64 0, i32 1, i64 0
  %rtint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to i32*
  %79 = load i32* %rtint.i.i, align 4, !tbaa !12
  %conv.i.i = sext i32 %79 to i64
  %num_elements.i.i = getelementptr inbounds %struct.varray_head_tag* %78, i64 0, i32 0
  %80 = load i64* %num_elements.i.i, align 8, !tbaa !20
  %cmp.i.i = icmp ult i64 %conv.i.i, %80
  br i1 %cmp.i.i, label %set_block_for_insn.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then6.i
  %add.i.i = add i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %add2.i.i = add i64 %div.i.i, %conv.i.i
  %call.i.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %78, i64 %add2.i.i) #4
  store %struct.varray_head_tag* %call.i.i, %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  br label %set_block_for_insn.exit.i

set_block_for_insn.exit.i:                        ; preds = %if.then.i.i, %if.then6.i
  %81 = phi %struct.varray_head_tag* [ %78, %if.then6.i ], [ %call.i.i, %if.then.i.i ]
  %data.i.i = getelementptr inbounds %struct.varray_head_tag* %81, i64 0, i32 4
  %bb3.i.i = bitcast %union.varray_data_tag* %data.i.i to [1 x %struct.basic_block_def*]*
  %arrayidx4.i.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i.i, i64 0, i64 %conv.i.i
  store %struct.basic_block_def* %target, %struct.basic_block_def** %arrayidx4.i.i, align 8, !tbaa !1
  %.pre.i373 = load %struct.rtx_def** %head.i, align 8, !tbaa !17
  br label %block_label.exit

block_label.exit:                                 ; preds = %if.end.i, %if.then2.i, %set_block_for_insn.exit.i
  %retval.0.i = phi %struct.rtx_def* [ %call4.i, %if.then2.i ], [ %75, %if.end.i ], [ %.pre.i373, %set_block_for_insn.exit.i ]
  %call225 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %retval.0.i) #4
  %end226 = getelementptr inbounds %struct.basic_block_def* %jump_block.0, i64 0, i32 1
  %82 = load %struct.rtx_def** %end226, align 8, !tbaa !18
  %call227 = tail call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call225, %struct.rtx_def* %82) #4
  %83 = load %struct.rtx_def** %end226, align 8, !tbaa !18
  %84 = getelementptr inbounds %struct.rtx_def* %83, i64 0, i32 1, i64 7, i32 0
  %call224.c = ptrtoint %struct.rtx_def* %retval.0.i to i64
  store i64 %call224.c, i64* %84, align 8, !tbaa !1
  %arrayidx233 = getelementptr inbounds %struct.rtx_def* %retval.0.i, i64 0, i32 1, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx233 to i32*
  %85 = load i32* %rtint, align 4, !tbaa !12
  %inc = add nsw i32 %85, 1
  store i32 %inc, i32* %rtint, align 4, !tbaa !12
  br label %if.end234

if.end234:                                        ; preds = %block_label.exit, %if.then216
  %end235 = getelementptr inbounds %struct.basic_block_def* %jump_block.0, i64 0, i32 1
  %86 = load %struct.rtx_def** %end235, align 8, !tbaa !18
  %call236 = tail call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %86) #4
  %call237 = tail call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %e, %struct.basic_block_def* %target) #4
  ret %struct.basic_block_def* %new_bb.0
}

; Function Attrs: nounwind uwtable
define %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %e, %struct.basic_block_def* %target) #0 {
entry:
  %call = tail call zeroext i1 @redirect_edge_and_branch(%struct.edge_def* %e, %struct.basic_block_def* %target)
  br i1 %call, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %dest = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 3
  %0 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %cmp = icmp eq %struct.basic_block_def* %0, %target
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %call1 = tail call fastcc %struct.basic_block_def* @force_nonfallthru_and_redirect(%struct.edge_def* %e, %struct.basic_block_def* %target)
  br label %return

return:                                           ; preds = %entry, %lor.lhs.false, %if.end
  %retval.0 = phi %struct.basic_block_def* [ %call1, %if.end ], [ null, %lor.lhs.false ], [ null, %entry ]
  ret %struct.basic_block_def* %retval.0
}

; Function Attrs: nounwind uwtable
define void @tidy_fallthru_edge(%struct.edge_def* %e, %struct.basic_block_def* nocapture readonly %b, %struct.basic_block_def* nocapture readonly %c) #0 {
entry:
  %end = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 1
  %0 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %call = tail call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %0) #4
  %head = getelementptr inbounds %struct.basic_block_def* %c, i64 0, i32 0
  %1 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %arrayidx = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call1 = tail call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %2) #4
  %cmp = icmp eq %struct.rtx_def* %call, %call1
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp3 = icmp eq i32 %bf.clear, 33
  br i1 %cmp3, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.end
  %call4 = tail call i32 @onlyjump_p(%struct.rtx_def* %3) #4
  %tobool = icmp eq i32 %call4, 0
  br i1 %tobool, label %if.end24, label %land.lhs.true5

land.lhs.true5:                                   ; preds = %land.lhs.true
  %call6 = tail call i32 @any_uncondjump_p(%struct.rtx_def* %3) #4
  %tobool7 = icmp eq i32 %call6, 0
  br i1 %tobool7, label %lor.lhs.false, label %while.cond

lor.lhs.false:                                    ; preds = %land.lhs.true5
  %succ = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 5
  %5 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %cmp8 = icmp eq %struct.edge_def* %5, %e
  br i1 %cmp8, label %land.lhs.true9, label %if.end24

land.lhs.true9:                                   ; preds = %lor.lhs.false
  %succ_next = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 1
  %6 = load %struct.edge_def** %succ_next, align 8, !tbaa !41
  %cmp10 = icmp eq %struct.edge_def* %6, null
  br i1 %cmp10, label %while.cond, label %if.end24

while.cond:                                       ; preds = %land.lhs.true9, %land.lhs.true5, %land.rhs
  %.pn = phi %struct.rtx_def* [ %q.0, %land.rhs ], [ %3, %land.lhs.true5 ], [ %3, %land.lhs.true9 ]
  %q.0.in.in = getelementptr inbounds %struct.rtx_def* %.pn, i64 0, i32 1, i64 1
  %q.0.in = bitcast %union.rtunion_def* %q.0.in.in to %struct.rtx_def**
  %q.0 = load %struct.rtx_def** %q.0.in, align 8
  %7 = getelementptr inbounds %struct.rtx_def* %q.0, i64 0, i32 0
  %bf.load15 = load i32* %7, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 37
  br i1 %cmp17, label %land.rhs, label %if.end24

land.rhs:                                         ; preds = %while.cond
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %q.0, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %8 = load i32* %rtint, align 4, !tbaa !12
  %cmp20 = icmp sgt i32 %8, -1
  br i1 %cmp20, label %while.cond, label %if.end24

if.end24:                                         ; preds = %land.rhs, %while.cond, %land.lhs.true, %land.lhs.true9, %lor.lhs.false, %if.end
  %q.1 = phi %struct.rtx_def* [ %3, %land.lhs.true9 ], [ %3, %lor.lhs.false ], [ %3, %land.lhs.true ], [ %3, %if.end ], [ %q.0, %while.cond ], [ %q.0, %land.rhs ]
  %9 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 1
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx28, align 8, !tbaa !1
  %cmp29 = icmp eq %struct.rtx_def* %q.1, %10
  br i1 %cmp29, label %if.end38, label %if.then30

if.then30:                                        ; preds = %if.end24
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %q.1, i64 0, i32 1, i64 2
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx33, align 8, !tbaa !1
  br label %while.body.i

while.body.i:                                     ; preds = %if.end.i, %if.then30
  %start.addr.0.i = phi %struct.rtx_def* [ %11, %if.then30 ], [ %next.0.i, %if.end.i ]
  %12 = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 0
  %bf.load.i = load i32* %12, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 37
  br i1 %cmp.i, label %land.lhs.true.i, label %if.else.i

land.lhs.true.i:                                  ; preds = %while.body.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 1, i64 2
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %start.addr.0.i, i64 0, i32 1, i64 4
  %rtint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to i32*
  %14 = load i32* %rtint.i.i, align 4, !tbaa !12
  switch i32 %14, label %if.end.i [
    i32 -80, label %if.else.i
    i32 -99, label %if.else.i
  ]

if.else.i:                                        ; preds = %land.lhs.true.i, %land.lhs.true.i, %while.body.i
  %call1.i = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %start.addr.0.i) #4
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %land.lhs.true.i
  %next.0.i = phi %struct.rtx_def* [ %call1.i, %if.else.i ], [ %13, %land.lhs.true.i ]
  %cmp2.i = icmp eq %struct.rtx_def* %start.addr.0.i, %10
  br i1 %cmp2.i, label %if.end38, label %while.body.i

if.end38:                                         ; preds = %if.end.i, %if.end24
  %flags = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 6
  %15 = load i32* %flags, align 4, !tbaa !39
  %or = or i32 %15, 1
  store i32 %or, i32* %flags, align 4, !tbaa !39
  br label %return

return:                                           ; preds = %entry, %if.end38
  ret void
}

declare %struct.rtx_def* @next_real_insn(%struct.rtx_def*) #1

declare i32 @onlyjump_p(%struct.rtx_def*) #1

declare i32 @any_uncondjump_p(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @tidy_fallthru_edges() #0 {
entry:
  %0 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %cmp24 = icmp sgt i32 %0, 1
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 1, %entry ]
  %1 = add nsw i64 %indvars.iv, -1
  %2 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 4
  %bb = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb, i64 0, i64 %1
  %3 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %arrayidx4 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb, i64 0, i64 %indvars.iv
  %4 = load %struct.basic_block_def** %arrayidx4, align 8, !tbaa !1
  %succ = getelementptr inbounds %struct.basic_block_def* %3, i64 0, i32 5
  %5 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %cmp5 = icmp eq %struct.edge_def* %5, null
  br i1 %cmp5, label %for.inc, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %flags = getelementptr inbounds %struct.edge_def* %5, i64 0, i32 6
  %6 = load i32* %flags, align 4, !tbaa !39
  %and = and i32 %6, 14
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %land.lhs.true6, label %for.inc

land.lhs.true6:                                   ; preds = %land.lhs.true
  %succ_next = getelementptr inbounds %struct.edge_def* %5, i64 0, i32 1
  %7 = load %struct.edge_def** %succ_next, align 8, !tbaa !41
  %cmp7 = icmp eq %struct.edge_def* %7, null
  br i1 %cmp7, label %land.lhs.true8, label %for.inc

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %dest = getelementptr inbounds %struct.edge_def* %5, i64 0, i32 3
  %8 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %cmp9 = icmp eq %struct.basic_block_def* %8, %4
  br i1 %cmp9, label %land.lhs.true10, label %for.inc

land.lhs.true10:                                  ; preds = %land.lhs.true8
  %end = getelementptr inbounds %struct.basic_block_def* %3, i64 0, i32 1
  %9 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load = load i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp11 = icmp eq i32 %bf.clear, 33
  br i1 %cmp11, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true10
  %call = tail call i32 @onlyjump_p(%struct.rtx_def* %9) #4
  %tobool13 = icmp eq i32 %call, 0
  br i1 %tobool13, label %for.inc, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true10
  tail call void @tidy_fallthru_edge(%struct.edge_def* %5, %struct.basic_block_def* %3, %struct.basic_block_def* %4)
  br label %for.inc

for.inc:                                          ; preds = %lor.lhs.false, %land.lhs.true, %for.body, %land.lhs.true6, %land.lhs.true8, %if.then
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %11 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %12 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %12, %11
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.basic_block_def* @split_edge(%struct.edge_def* %edge_in) #0 {
entry:
  %flags = getelementptr inbounds %struct.edge_def* %edge_in, i64 0, i32 6
  %0 = load i32* %flags, align 4, !tbaa !39
  %and = and i32 %0, 2
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1190, i8* getelementptr inbounds ([11 x i8]* @__FUNCTION__.split_edge, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %entry
  %and2 = and i32 %0, 1
  %cmp3 = icmp eq i32 %and2, 0
  %dest = getelementptr inbounds %struct.edge_def* %edge_in, i64 0, i32 3
  br i1 %cmp3, label %if.then4, label %if.end13

if.then4:                                         ; preds = %if.end
  %1 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %pred = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 4
  %e.0289 = load %struct.edge_def** %pred, align 8
  %tobool290 = icmp eq %struct.edge_def* %e.0289, null
  br i1 %tobool290, label %if.end13, label %for.body

for.cond:                                         ; preds = %for.body
  %pred_next = getelementptr inbounds %struct.edge_def* %e.0291, i64 0, i32 0
  %e.0 = load %struct.edge_def** %pred_next, align 8
  %tobool = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool, label %if.end13, label %for.body

for.body:                                         ; preds = %if.then4, %for.cond
  %e.0291 = phi %struct.edge_def* [ %e.0, %for.cond ], [ %e.0289, %if.then4 ]
  %flags5 = getelementptr inbounds %struct.edge_def* %e.0291, i64 0, i32 6
  %2 = load i32* %flags5, align 4, !tbaa !39
  %and6 = and i32 %2, 1
  %tobool7 = icmp eq i32 %and6, 0
  br i1 %tobool7, label %for.cond, label %if.then11

if.then11:                                        ; preds = %for.body
  %dest.i = getelementptr inbounds %struct.edge_def* %e.0291, i64 0, i32 3
  %3 = load %struct.basic_block_def** %dest.i, align 8, !tbaa !38
  %call.i = tail call fastcc %struct.basic_block_def* @force_nonfallthru_and_redirect(%struct.edge_def* %e.0291, %struct.basic_block_def* %3) #4
  br label %if.end13

if.end13:                                         ; preds = %for.cond, %if.end, %if.then4, %if.then11
  %4 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %cmp15 = icmp eq %struct.basic_block_def* %4, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp15, label %if.end50, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end13
  %head = getelementptr inbounds %struct.basic_block_def* %4, i64 0, i32 0
  %5 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %arrayidx = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %tobool17 = icmp eq %struct.rtx_def* %6, null
  br i1 %tobool17, label %if.then45, label %land.lhs.true18

land.lhs.true18:                                  ; preds = %land.lhs.true
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load = load i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp24 = icmp eq i32 %bf.clear, 37
  br i1 %cmp24, label %land.lhs.true25, label %if.then45

land.lhs.true25:                                  ; preds = %land.lhs.true18
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx32 to i32*
  %8 = load i32* %rtint, align 4, !tbaa !12
  %cmp33 = icmp eq i32 %8, -96
  br i1 %cmp33, label %land.lhs.true34, label %if.then45

land.lhs.true34:                                  ; preds = %land.lhs.true25
  %src = getelementptr inbounds %struct.edge_def* %edge_in, i64 0, i32 2
  %9 = load %struct.basic_block_def** %src, align 8, !tbaa !28
  %index.i = getelementptr inbounds %struct.basic_block_def* %4, i64 0, i32 11
  %10 = load i32* %index.i, align 4, !tbaa !19
  %index1.i = getelementptr inbounds %struct.basic_block_def* %9, i64 0, i32 11
  %11 = load i32* %index1.i, align 4, !tbaa !19
  %cmp.i = icmp sgt i32 %10, %11
  br i1 %cmp.i, label %if.end50, label %if.else.i

if.else.i:                                        ; preds = %land.lhs.true34
  %cmp4.i = icmp eq i32 %10, %11
  br i1 %cmp4.i, label %if.then45, label %if.end6.i

if.end6.i:                                        ; preds = %if.else.i
  %end.i = getelementptr inbounds %struct.basic_block_def* %4, i64 0, i32 1
  %insn.036.i = load %struct.rtx_def** %end.i, align 8
  %head.i = getelementptr inbounds %struct.basic_block_def* %9, i64 0, i32 0
  %12 = load %struct.rtx_def** %head.i, align 8, !tbaa !17
  %cmp737.i = icmp eq %struct.rtx_def* %insn.036.i, %12
  br i1 %cmp737.i, label %if.then45, label %for.body.i

for.body.i:                                       ; preds = %if.end6.i, %for.inc.i
  %insn.039.i = phi %struct.rtx_def* [ %insn.0.i, %for.inc.i ], [ %insn.036.i, %if.end6.i ]
  %count.038.i = phi i32 [ %count.1.i, %for.inc.i ], [ 0, %if.end6.i ]
  %13 = getelementptr inbounds %struct.rtx_def* %insn.039.i, i64 0, i32 0
  %bf.load.i = load i32* %13, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp9.i = icmp eq i32 %bf.clear.i, 37
  br i1 %cmp9.i, label %if.then10.i, label %for.inc.i

if.then10.i:                                      ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %insn.039.i, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %14 = load i32* %rtint.i, align 4, !tbaa !12
  switch i32 %14, label %for.inc.i [
    i32 -96, label %if.then12.i
    i32 -95, label %if.then18.i
  ]

if.then12.i:                                      ; preds = %if.then10.i
  %inc.i = add nsw i32 %count.038.i, 1
  br label %for.inc.i

if.then18.i:                                      ; preds = %if.then10.i
  %dec.i = add nsw i32 %count.038.i, -1
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then18.i, %if.then12.i, %if.then10.i, %for.body.i
  %count.1.i = phi i32 [ %inc.i, %if.then12.i ], [ %dec.i, %if.then18.i ], [ %count.038.i, %for.body.i ], [ %count.038.i, %if.then10.i ]
  %arrayidx23.i = getelementptr inbounds %struct.rtx_def* %insn.039.i, i64 0, i32 1, i64 2
  %rtx.i = bitcast %union.rtunion_def* %arrayidx23.i to %struct.rtx_def**
  %insn.0.i = load %struct.rtx_def** %rtx.i, align 8
  %cmp7.i = icmp ne %struct.rtx_def* %insn.0.i, %12
  %cmp8.i = icmp sgt i32 %count.1.i, -1
  %or.cond.i = and i1 %cmp7.i, %cmp8.i
  br i1 %or.cond.i, label %for.body.i, label %back_edge_of_syntactic_loop_p.exit

back_edge_of_syntactic_loop_p.exit:               ; preds = %for.inc.i
  br i1 %cmp8.i, label %if.then45, label %if.end50

if.then45:                                        ; preds = %land.lhs.true18, %land.lhs.true25, %back_edge_of_syntactic_loop_p.exit, %land.lhs.true, %if.else.i, %if.end6.i
  br label %if.end50

if.end50:                                         ; preds = %back_edge_of_syntactic_loop_p.exit, %land.lhs.true34, %if.end13, %if.then45
  %15 = phi %struct.basic_block_def* [ %4, %if.then45 ], [ getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1), %if.end13 ], [ %4, %land.lhs.true34 ], [ %4, %back_edge_of_syntactic_loop_p.exit ]
  %before.0 = phi %struct.rtx_def* [ %5, %if.then45 ], [ null, %if.end13 ], [ %6, %land.lhs.true34 ], [ %6, %back_edge_of_syntactic_loop_p.exit ]
  %cmp52 = icmp eq %struct.basic_block_def* %15, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  %index = getelementptr inbounds %struct.basic_block_def* %15, i64 0, i32 11
  %cond.in = select i1 %cmp52, i32* @n_basic_blocks, i32* %index
  %cond = load i32* %cond.in, align 4
  %16 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %17 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %inc.i270 = add nsw i32 %17, 1
  store i32 %inc.i270, i32* @n_basic_blocks, align 4, !tbaa !12
  %conv.i = sext i32 %inc.i270 to i64
  %call.i271 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %16, i64 %conv.i) #4
  store %struct.varray_head_tag* %call.i271, %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %18 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %i.017.i = add i32 %18, -1
  %cmp18.i = icmp sgt i32 %i.017.i, %cond
  br i1 %cmp18.i, label %for.body.lr.ph.i, label %create_basic_block.exit

for.body.lr.ph.i:                                 ; preds = %if.end50
  %19 = sext i32 %i.017.i to i64
  %sub2.i278 = add i32 %18, -2
  %idxprom.i279 = sext i32 %sub2.i278 to i64
  %data.i280 = getelementptr inbounds %struct.varray_head_tag* %call.i271, i64 0, i32 4
  %bb3.i281 = bitcast %union.varray_data_tag* %data.i280 to [1 x %struct.basic_block_def*]*
  %arrayidx.i272282 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i281, i64 0, i64 %idxprom.i279
  %20 = load %struct.basic_block_def** %arrayidx.i272282, align 8, !tbaa !1
  %arrayidx7.i283 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i281, i64 0, i64 %19
  store %struct.basic_block_def* %20, %struct.basic_block_def** %arrayidx7.i283, align 8, !tbaa !1
  %index8.i284 = getelementptr inbounds %struct.basic_block_def* %20, i64 0, i32 11
  store i32 %i.017.i, i32* %index8.i284, align 4, !tbaa !19
  %cmp.i273286 = icmp sgt i32 %sub2.i278, %cond
  br i1 %cmp.i273286, label %for.body.for.body_crit_edge.i, label %create_basic_block.exit

for.body.for.body_crit_edge.i:                    ; preds = %for.body.lr.ph.i, %for.body.for.body_crit_edge.i
  %i.0.i288 = phi i32 [ %i.0.i, %for.body.for.body_crit_edge.i ], [ %sub2.i278, %for.body.lr.ph.i ]
  %21 = phi i32 [ %23, %for.body.for.body_crit_edge.i ], [ %i.017.i, %for.body.lr.ph.i ]
  %indvars.iv.i287 = phi i64 [ %indvars.iv.next.i, %for.body.for.body_crit_edge.i ], [ %19, %for.body.lr.ph.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i287, -1
  %.pre.i = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %sub2.i = add nsw i32 %21, -2
  %idxprom.i = sext i32 %sub2.i to i64
  %data.i = getelementptr inbounds %struct.varray_head_tag* %.pre.i, i64 0, i32 4
  %bb3.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx.i272 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %idxprom.i
  %22 = load %struct.basic_block_def** %arrayidx.i272, align 8, !tbaa !1
  %arrayidx7.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb3.i, i64 0, i64 %indvars.iv.next.i
  store %struct.basic_block_def* %22, %struct.basic_block_def** %arrayidx7.i, align 8, !tbaa !1
  %index8.i = getelementptr inbounds %struct.basic_block_def* %22, i64 0, i32 11
  %23 = trunc i64 %indvars.iv.next.i to i32
  store i32 %23, i32* %index8.i, align 4, !tbaa !19
  %i.0.i = add nsw i32 %i.0.i288, -1
  %cmp.i273 = icmp sgt i32 %i.0.i, %cond
  br i1 %cmp.i273, label %for.body.for.body_crit_edge.i, label %create_basic_block.exit

create_basic_block.exit:                          ; preds = %for.body.for.body_crit_edge.i, %for.body.lr.ph.i, %if.end50
  %call9.i = tail call %struct.basic_block_def* @create_basic_block_structure(i32 %cond, %struct.rtx_def* %before.0, %struct.rtx_def* null, %struct.rtx_def* null) #4
  %aux.i = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 10
  store i8* null, i8** %aux.i, align 8, !tbaa !15
  %count = getelementptr inbounds %struct.edge_def* %edge_in, i64 0, i32 8
  %24 = load i64* %count, align 8, !tbaa !43
  %count55 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 13
  store i64 %24, i64* %count55, align 8, !tbaa !25
  %src56 = getelementptr inbounds %struct.edge_def* %edge_in, i64 0, i32 2
  %25 = load %struct.basic_block_def** %src56, align 8, !tbaa !28
  %frequency = getelementptr inbounds %struct.basic_block_def* %25, i64 0, i32 14
  %26 = load i32* %frequency, align 4, !tbaa !26
  %probability = getelementptr inbounds %struct.edge_def* %edge_in, i64 0, i32 7
  %27 = load i32* %probability, align 4, !tbaa !42
  %mul = mul nsw i32 %27, %26
  %add = add nsw i32 %mul, 5000
  %div = sdiv i32 %add, 10000
  %frequency57 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 14
  store i32 %div, i32* %frequency57, align 4, !tbaa !26
  %28 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %loop_depth = getelementptr inbounds %struct.basic_block_def* %28, i64 0, i32 12
  %29 = load i32* %loop_depth, align 4, !tbaa !27
  %loop_depth59 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 12
  store i32 %29, i32* %loop_depth59, align 4, !tbaa !27
  %global_live_at_start = getelementptr inbounds %struct.basic_block_def* %28, i64 0, i32 8
  %30 = load %struct.bitmap_head_def** %global_live_at_start, align 8, !tbaa !30
  %tobool61 = icmp eq %struct.bitmap_head_def* %30, null
  br i1 %tobool61, label %if.end179, label %if.then62

if.then62:                                        ; preds = %create_basic_block.exit
  %31 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %32 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %sub.ptr.lhs.cast = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %32 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp63 = icmp slt i64 %sub.ptr.sub, 24
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %if.then62
  tail call void @_obstack_newchunk(%struct.obstack* @flow_obstack, i32 24) #4
  %.pre293 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %if.then62
  %33 = phi i8* [ %.pre293, %if.then65 ], [ %32, %if.then62 ]
  %add.ptr = getelementptr inbounds i8* %33, i64 24
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %34 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %cmp71 = icmp eq i8* %add.ptr, %34
  br i1 %cmp71, label %if.then73, label %if.end76

if.then73:                                        ; preds = %if.end66
  %bf.load74 = load i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load74, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  br label %if.end76

if.end76:                                         ; preds = %if.then73, %if.end66
  %sub.ptr.lhs.cast78 = ptrtoint i8* %add.ptr to i64
  %35 = load i32* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 6), align 8, !tbaa !35
  %conv80 = sext i32 %35 to i64
  %add81 = add nsw i64 %conv80, %sub.ptr.lhs.cast78
  %neg = xor i32 %35, -1
  %conv83 = sext i32 %neg to i64
  %and84 = and i64 %add81, %conv83
  %add.ptr85 = getelementptr inbounds i8* null, i64 %and84
  store i8* %add.ptr85, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %36 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 1), align 8, !tbaa !36
  %sub.ptr.lhs.cast88 = ptrtoint i8* %add.ptr85 to i64
  %sub.ptr.rhs.cast89 = ptrtoint %struct._obstack_chunk* %36 to i64
  %sub.ptr.sub90 = sub i64 %sub.ptr.lhs.cast88, %sub.ptr.rhs.cast89
  %37 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %sub.ptr.lhs.cast93 = ptrtoint i8* %37 to i64
  %sub.ptr.sub95 = sub i64 %sub.ptr.lhs.cast93, %sub.ptr.rhs.cast89
  %cmp96 = icmp sgt i64 %sub.ptr.sub90, %sub.ptr.sub95
  br i1 %cmp96, label %if.then98, label %if.end101

if.then98:                                        ; preds = %if.end76
  store i8* %37, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end101

if.end101:                                        ; preds = %if.then98, %if.end76
  %38 = phi i8* [ %37, %if.then98 ], [ %add.ptr85, %if.end76 ]
  store i8* %38, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %39 = bitcast i8* %34 to %struct.bitmap_head_def*
  %call105 = tail call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %39) #4
  %global_live_at_start106 = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 8
  store %struct.bitmap_head_def* %call105, %struct.bitmap_head_def** %global_live_at_start106, align 8, !tbaa !30
  %40 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %41 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %sub.ptr.lhs.cast115 = ptrtoint i8* %40 to i64
  %sub.ptr.rhs.cast116 = ptrtoint i8* %41 to i64
  %sub.ptr.sub117 = sub i64 %sub.ptr.lhs.cast115, %sub.ptr.rhs.cast116
  %cmp119 = icmp slt i64 %sub.ptr.sub117, 24
  br i1 %cmp119, label %if.then121, label %if.end122

if.then121:                                       ; preds = %if.end101
  tail call void @_obstack_newchunk(%struct.obstack* @flow_obstack, i32 24) #4
  %.pre294 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end122

if.end122:                                        ; preds = %if.then121, %if.end101
  %42 = phi i8* [ %.pre294, %if.then121 ], [ %41, %if.end101 ]
  %add.ptr125 = getelementptr inbounds i8* %42, i64 24
  store i8* %add.ptr125, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %43 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %cmp133 = icmp eq i8* %add.ptr125, %43
  br i1 %cmp133, label %if.then135, label %if.end140

if.then135:                                       ; preds = %if.end122
  %bf.load137 = load i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  %bf.set139 = or i8 %bf.load137, 2
  store i8 %bf.set139, i8* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 10), align 8
  br label %if.end140

if.end140:                                        ; preds = %if.then135, %if.end122
  %sub.ptr.lhs.cast142 = ptrtoint i8* %add.ptr125 to i64
  %44 = load i32* getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 6), align 8, !tbaa !35
  %conv145 = sext i32 %44 to i64
  %add146 = add nsw i64 %conv145, %sub.ptr.lhs.cast142
  %neg148 = xor i32 %44, -1
  %conv149 = sext i32 %neg148 to i64
  %and150 = and i64 %add146, %conv149
  %add.ptr151 = getelementptr inbounds i8* null, i64 %and150
  store i8* %add.ptr151, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  %45 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 1), align 8, !tbaa !36
  %sub.ptr.lhs.cast155 = ptrtoint i8* %add.ptr151 to i64
  %sub.ptr.rhs.cast156 = ptrtoint %struct._obstack_chunk* %45 to i64
  %sub.ptr.sub157 = sub i64 %sub.ptr.lhs.cast155, %sub.ptr.rhs.cast156
  %46 = load i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 4), align 8, !tbaa !31
  %sub.ptr.lhs.cast160 = ptrtoint i8* %46 to i64
  %sub.ptr.sub162 = sub i64 %sub.ptr.lhs.cast160, %sub.ptr.rhs.cast156
  %cmp163 = icmp sgt i64 %sub.ptr.sub157, %sub.ptr.sub162
  br i1 %cmp163, label %if.then165, label %if.end168

if.then165:                                       ; preds = %if.end140
  store i8* %46, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 3), align 8, !tbaa !33
  br label %if.end168

if.end168:                                        ; preds = %if.then165, %if.end140
  %47 = phi i8* [ %46, %if.then165 ], [ %add.ptr151, %if.end140 ]
  store i8* %47, i8** getelementptr inbounds (%struct.obstack* @flow_obstack, i64 0, i32 2), align 8, !tbaa !34
  %48 = bitcast i8* %43 to %struct.bitmap_head_def*
  %call172 = tail call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %48) #4
  %global_live_at_end = getelementptr inbounds %struct.basic_block_def* %call9.i, i64 0, i32 9
  store %struct.bitmap_head_def* %call172, %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !37
  %49 = load %struct.bitmap_head_def** %global_live_at_start106, align 8, !tbaa !30
  %50 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %global_live_at_start175 = getelementptr inbounds %struct.basic_block_def* %50, i64 0, i32 8
  %51 = load %struct.bitmap_head_def** %global_live_at_start175, align 8, !tbaa !30
  tail call void @bitmap_copy(%struct.bitmap_head_def* %49, %struct.bitmap_head_def* %51) #4
  %52 = load %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !37
  %53 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %global_live_at_start178 = getelementptr inbounds %struct.basic_block_def* %53, i64 0, i32 8
  %54 = load %struct.bitmap_head_def** %global_live_at_start178, align 8, !tbaa !30
  tail call void @bitmap_copy(%struct.bitmap_head_def* %52, %struct.bitmap_head_def* %54) #4
  %.pre = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  br label %if.end179

if.end179:                                        ; preds = %create_basic_block.exit, %if.end168
  %55 = phi %struct.basic_block_def* [ %28, %create_basic_block.exit ], [ %.pre, %if.end168 ]
  %call181 = tail call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %call9.i, %struct.basic_block_def* %55, i32 1) #4
  %56 = load i32* %flags, align 4, !tbaa !39
  %and183 = and i32 %56, 1
  %cmp184 = icmp eq i32 %and183, 0
  br i1 %cmp184, label %if.then186, label %if.else190

if.then186:                                       ; preds = %if.end179
  %call187 = tail call zeroext i1 @redirect_edge_and_branch(%struct.edge_def* %edge_in, %struct.basic_block_def* %call9.i)
  br i1 %call187, label %if.end191, label %if.then188

if.then188:                                       ; preds = %if.then186
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1260, i8* getelementptr inbounds ([11 x i8]* @__FUNCTION__.split_edge, i64 0, i64 0)) #5
  unreachable

if.else190:                                       ; preds = %if.end179
  tail call void @redirect_edge_succ(%struct.edge_def* %edge_in, %struct.basic_block_def* %call9.i) #4
  br label %if.end191

if.end191:                                        ; preds = %if.then186, %if.else190
  ret %struct.basic_block_def* %call9.i
}

declare void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #1

; Function Attrs: nounwind uwtable
define void @insert_insn_on_edge(%struct.rtx_def* %pattern, %struct.edge_def* nocapture %e) #0 {
entry:
  %flags = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 6
  %0 = load i32* %flags, align 4, !tbaa !39
  %and = and i32 %0, 2
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %src = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 2
  %1 = load %struct.basic_block_def** %src, align 8, !tbaa !28
  %succ = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 5
  %2 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %succ_next = getelementptr inbounds %struct.edge_def* %2, i64 0, i32 1
  %3 = load %struct.edge_def** %succ_next, align 8, !tbaa !41
  %tobool1 = icmp eq %struct.edge_def* %3, null
  br i1 %tobool1, label %if.end, label %land.lhs.true2

land.lhs.true2:                                   ; preds = %land.lhs.true
  %dest = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 3
  %4 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %pred = getelementptr inbounds %struct.basic_block_def* %4, i64 0, i32 4
  %5 = load %struct.edge_def** %pred, align 8, !tbaa !23
  %pred_next = getelementptr inbounds %struct.edge_def* %5, i64 0, i32 0
  %6 = load %struct.edge_def** %pred_next, align 8, !tbaa !44
  %tobool3 = icmp eq %struct.edge_def* %6, null
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true2
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1280, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.insert_insn_on_edge, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %insns = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 4
  %7 = load %struct.rtx_def** %insns, align 8, !tbaa !45
  %cmp = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  tail call void @start_sequence() #4
  br label %if.end6

if.else:                                          ; preds = %if.end
  tail call void @push_to_sequence(%struct.rtx_def* %7) #4
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then4
  %call = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %pattern) #4
  %call7 = tail call %struct.rtx_def* @get_insns() #4
  store %struct.rtx_def* %call7, %struct.rtx_def** %insns, align 8, !tbaa !45
  tail call void @end_sequence() #4
  ret void
}

declare void @start_sequence() #1

declare void @push_to_sequence(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @get_insns() #1

declare void @end_sequence() #1

; Function Attrs: nounwind uwtable
define void @commit_edge_insertions() #0 {
entry:
  br label %while.body

while.body:                                       ; preds = %entry, %if.end3
  %bb.0 = phi %struct.basic_block_def* [ getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0), %entry ], [ %29, %if.end3 ]
  %i.0 = phi i32 [ 0, %entry ], [ %phitmp, %if.end3 ]
  %succ = getelementptr inbounds %struct.basic_block_def* %bb.0, i64 0, i32 5
  %0 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %tobool9 = icmp eq %struct.edge_def* %0, null
  br i1 %tobool9, label %for.end, label %for.body

for.body:                                         ; preds = %while.body, %for.cond.backedge
  %e.010 = phi %struct.edge_def* [ %1, %for.cond.backedge ], [ %0, %while.body ]
  %succ_next = getelementptr inbounds %struct.edge_def* %e.010, i64 0, i32 1
  %1 = load %struct.edge_def** %succ_next, align 8, !tbaa !41
  %insns = getelementptr inbounds %struct.edge_def* %e.010, i64 0, i32 4
  %2 = load %struct.rtx_def** %insns, align 8, !tbaa !45
  %tobool1 = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool1, label %for.cond.backedge, label %if.then

for.cond.backedge:                                ; preds = %for.body, %commit_one_edge_insertion.exit
  %tobool = icmp eq %struct.edge_def* %1, null
  br i1 %tobool, label %for.end, label %for.body

if.then:                                          ; preds = %for.body
  store %struct.rtx_def* null, %struct.rtx_def** %insns, align 8, !tbaa !45
  %dest.i = getelementptr inbounds %struct.edge_def* %e.010, i64 0, i32 3
  %3 = load %struct.basic_block_def** %dest.i, align 8, !tbaa !38
  %pred.i = getelementptr inbounds %struct.basic_block_def* %3, i64 0, i32 4
  %4 = load %struct.edge_def** %pred.i, align 8, !tbaa !23
  %pred_next.i = getelementptr inbounds %struct.edge_def* %4, i64 0, i32 0
  %5 = load %struct.edge_def** %pred_next.i, align 8, !tbaa !44
  %cmp.i = icmp ne %struct.edge_def* %5, null
  %cmp6.i = icmp eq %struct.basic_block_def* %3, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  %or.cond.i = or i1 %cmp.i, %cmp6.i
  br i1 %or.cond.i, label %if.else29.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %head.i = getelementptr inbounds %struct.basic_block_def* %3, i64 0, i32 0
  %6 = load %struct.rtx_def** %head.i, align 8, !tbaa !17
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load.i = load i32* %7, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp8.i = icmp eq i32 %bf.clear.i, 36
  br i1 %cmp8.i, label %if.then9.i, label %if.end.i

if.then9.i:                                       ; preds = %if.then.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 2
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %.phi.trans.insert.i = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load10.pre.i = load i32* %.phi.trans.insert.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then9.i, %if.then.i
  %bf.load10.i = phi i32 [ %bf.load10.pre.i, %if.then9.i ], [ %bf.load.i, %if.then.i ]
  %tmp.0.i = phi %struct.rtx_def* [ %8, %if.then9.i ], [ %6, %if.then.i ]
  %bf.clear11.i = and i32 %bf.load10.i, 65535
  %cmp12.i = icmp eq i32 %bf.clear11.i, 37
  br i1 %cmp12.i, label %land.lhs.true13.i, label %if.end21.i

land.lhs.true13.i:                                ; preds = %if.end.i
  %arrayidx15.i = getelementptr inbounds %struct.rtx_def* %tmp.0.i, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx15.i to i32*
  %9 = load i32* %rtint.i, align 4, !tbaa !12
  %cmp16.i = icmp eq i32 %9, -80
  br i1 %cmp16.i, label %if.then17.i, label %if.end21.i

if.then17.i:                                      ; preds = %land.lhs.true13.i
  %arrayidx19.i = getelementptr inbounds %struct.rtx_def* %tmp.0.i, i64 0, i32 1, i64 2
  %rtx20.i = bitcast %union.rtunion_def* %arrayidx19.i to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx20.i, align 8, !tbaa !1
  br label %if.end21.i

if.end21.i:                                       ; preds = %if.then17.i, %land.lhs.true13.i, %if.end.i
  %tmp.1.i = phi %struct.rtx_def* [ %10, %if.then17.i ], [ %tmp.0.i, %land.lhs.true13.i ], [ %tmp.0.i, %if.end.i ]
  %cmp23.i = icmp eq %struct.rtx_def* %tmp.1.i, %6
  br i1 %cmp23.i, label %if.end70.i, label %if.else.i

if.else.i:                                        ; preds = %if.end21.i
  %arrayidx26.i = getelementptr inbounds %struct.rtx_def* %tmp.1.i, i64 0, i32 1, i64 1
  %rtx27.i = bitcast %union.rtunion_def* %arrayidx26.i to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx27.i, align 8, !tbaa !1
  br label %if.else74.i

if.else29.i:                                      ; preds = %if.then
  %flags.i = getelementptr inbounds %struct.edge_def* %e.010, i64 0, i32 6
  %12 = load i32* %flags.i, align 4, !tbaa !39
  %and.i = and i32 %12, 2
  %cmp30.i = icmp eq i32 %and.i, 0
  br i1 %cmp30.i, label %land.lhs.true31.i, label %if.else67.i

land.lhs.true31.i:                                ; preds = %if.else29.i
  %src.i = getelementptr inbounds %struct.edge_def* %e.010, i64 0, i32 2
  %13 = load %struct.basic_block_def** %src.i, align 8, !tbaa !28
  %succ.i = getelementptr inbounds %struct.basic_block_def* %13, i64 0, i32 5
  %14 = load %struct.edge_def** %succ.i, align 8, !tbaa !24
  %succ_next.i = getelementptr inbounds %struct.edge_def* %14, i64 0, i32 1
  %15 = load %struct.edge_def** %succ_next.i, align 8, !tbaa !41
  %cmp32.i = icmp ne %struct.edge_def* %15, null
  %cmp35.i = icmp eq %struct.basic_block_def* %13, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  %or.cond141.i = or i1 %cmp32.i, %cmp35.i
  br i1 %or.cond141.i, label %if.else67.i, label %if.then36.i

if.then36.i:                                      ; preds = %land.lhs.true31.i
  %end.i = getelementptr inbounds %struct.basic_block_def* %13, i64 0, i32 1
  %16 = load %struct.rtx_def** %end.i, align 8, !tbaa !18
  %17 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 0
  %bf.load38.i = load i32* %17, align 8
  %bf.clear39.i = and i32 %bf.load38.i, 65535
  %cmp40.i = icmp eq i32 %bf.clear39.i, 33
  br i1 %cmp40.i, label %for.cond.i, label %if.else59.i

for.cond.i:                                       ; preds = %if.then36.i, %land.rhs.i
  %before.0.i = phi %struct.rtx_def* [ %18, %land.rhs.i ], [ %16, %if.then36.i ]
  %arrayidx44.i = getelementptr inbounds %struct.rtx_def* %before.0.i, i64 0, i32 1, i64 1
  %rtx45.i = bitcast %union.rtunion_def* %arrayidx44.i to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx45.i, align 8, !tbaa !1
  %19 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 0
  %bf.load46.i = load i32* %19, align 8
  %bf.clear47.i = and i32 %bf.load46.i, 65535
  %cmp48.i = icmp eq i32 %bf.clear47.i, 37
  br i1 %cmp48.i, label %land.rhs.i, label %if.end70.i

land.rhs.i:                                       ; preds = %for.cond.i
  %arrayidx53.i = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 4
  %rtint54.i = bitcast %union.rtunion_def* %arrayidx53.i to i32*
  %20 = load i32* %rtint54.i, align 4, !tbaa !12
  %cmp55.i = icmp eq i32 %20, -96
  br i1 %cmp55.i, label %for.cond.i, label %if.end70.i

if.else59.i:                                      ; preds = %if.then36.i
  %and61.i = and i32 %12, 1
  %cmp62.i = icmp eq i32 %and61.i, 0
  br i1 %cmp62.i, label %if.then63.i, label %if.else74.i

if.then63.i:                                      ; preds = %if.else59.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1350, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.commit_one_edge_insertion, i64 0, i64 0)) #5
  unreachable

if.else67.i:                                      ; preds = %land.lhs.true31.i, %if.else29.i
  %call.i = tail call %struct.basic_block_def* @split_edge(%struct.edge_def* %e.010) #4
  %end68.i = getelementptr inbounds %struct.basic_block_def* %call.i, i64 0, i32 1
  %21 = load %struct.rtx_def** %end68.i, align 8, !tbaa !18
  br label %if.else74.i

if.end70.i:                                       ; preds = %land.rhs.i, %for.cond.i, %if.end21.i
  %before.1.i = phi %struct.rtx_def* [ %6, %if.end21.i ], [ %before.0.i, %for.cond.i ], [ %before.0.i, %land.rhs.i ]
  %bb.0.i = phi %struct.basic_block_def* [ %3, %if.end21.i ], [ %13, %for.cond.i ], [ %13, %land.rhs.i ]
  %tobool.i = icmp eq %struct.rtx_def* %before.1.i, null
  br i1 %tobool.i, label %if.else74.i, label %if.then71.i

if.then71.i:                                      ; preds = %if.end70.i
  %call72.i = tail call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %2, %struct.rtx_def* %before.1.i) #4
  %call73.i = tail call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %before.1.i) #4
  br label %if.end76.i

if.else74.i:                                      ; preds = %if.end70.i, %if.else67.i, %if.else59.i, %if.else.i
  %bb.0147.i = phi %struct.basic_block_def* [ %bb.0.i, %if.end70.i ], [ %3, %if.else.i ], [ %call.i, %if.else67.i ], [ %13, %if.else59.i ]
  %after.0145.i = phi %struct.rtx_def* [ null, %if.end70.i ], [ %11, %if.else.i ], [ %21, %if.else67.i ], [ %16, %if.else59.i ]
  %call75.i = tail call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %2, %struct.rtx_def* %after.0145.i) #4
  br label %if.end76.i

if.end76.i:                                       ; preds = %if.else74.i, %if.then71.i
  %tobool148.i = phi i1 [ true, %if.then71.i ], [ false, %if.else74.i ]
  %bb.0146.i = phi %struct.basic_block_def* [ %bb.0.i, %if.then71.i ], [ %bb.0147.i, %if.else74.i ]
  %before.1143.i = phi %struct.rtx_def* [ %before.1.i, %if.then71.i ], [ null, %if.else74.i ]
  %last.0.i = phi %struct.rtx_def* [ %call73.i, %if.then71.i ], [ %call75.i, %if.else74.i ]
  %call77.i = tail call i32 @returnjump_p(%struct.rtx_def* %last.0.i) #4
  %tobool78.i = icmp eq i32 %call77.i, 0
  br i1 %tobool78.i, label %if.else98.i, label %if.then79.i

if.then79.i:                                      ; preds = %if.end76.i
  %succ80.i = getelementptr inbounds %struct.basic_block_def* %bb.0146.i, i64 0, i32 5
  %22 = load %struct.edge_def** %succ80.i, align 8, !tbaa !24
  %dest81.i = getelementptr inbounds %struct.edge_def* %22, i64 0, i32 3
  %23 = load %struct.basic_block_def** %dest81.i, align 8, !tbaa !38
  %cmp82.i = icmp eq %struct.basic_block_def* %23, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp82.i, label %lor.lhs.false.i, label %if.then89.i

lor.lhs.false.i:                                  ; preds = %if.then79.i
  %succ_next83.i = getelementptr inbounds %struct.edge_def* %22, i64 0, i32 1
  %24 = load %struct.edge_def** %succ_next83.i, align 8, !tbaa !41
  %cmp84.i = icmp eq %struct.edge_def* %24, null
  br i1 %cmp84.i, label %lor.lhs.false85.i, label %if.then89.i

lor.lhs.false85.i:                                ; preds = %lor.lhs.false.i
  %flags86.i = getelementptr inbounds %struct.edge_def* %22, i64 0, i32 6
  %25 = load i32* %flags86.i, align 4, !tbaa !39
  %and87.i = and i32 %25, 1
  %cmp88.i = icmp eq i32 %and87.i, 0
  br i1 %cmp88.i, label %if.then89.i, label %if.end90.i

if.then89.i:                                      ; preds = %lor.lhs.false85.i, %lor.lhs.false.i, %if.then79.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1384, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.commit_one_edge_insertion, i64 0, i64 0)) #5
  unreachable

if.end90.i:                                       ; preds = %lor.lhs.false85.i
  %and92.i = and i32 %25, -2
  store i32 %and92.i, i32* %flags86.i, align 4, !tbaa !39
  %call93.i = tail call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %last.0.i) #4
  br i1 %tobool148.i, label %if.then95.i, label %commit_one_edge_insertion.exit

if.then95.i:                                      ; preds = %if.end90.i
  %call96.i = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %before.1143.i) #4
  br label %commit_one_edge_insertion.exit

if.else98.i:                                      ; preds = %if.end76.i
  %26 = getelementptr inbounds %struct.rtx_def* %last.0.i, i64 0, i32 0
  %bf.load99.i = load i32* %26, align 8
  %bf.clear100.i = and i32 %bf.load99.i, 65535
  %cmp101.i = icmp eq i32 %bf.clear100.i, 33
  br i1 %cmp101.i, label %if.then102.i, label %commit_one_edge_insertion.exit

if.then102.i:                                     ; preds = %if.else98.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1393, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.commit_one_edge_insertion, i64 0, i64 0)) #5
  unreachable

commit_one_edge_insertion.exit:                   ; preds = %if.end90.i, %if.then95.i, %if.else98.i
  tail call void @find_sub_basic_blocks(%struct.basic_block_def* %bb.0146.i) #4
  br label %for.cond.backedge

for.end:                                          ; preds = %for.cond.backedge, %while.body
  %27 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %cmp = icmp slt i32 %i.0, %27
  br i1 %cmp, label %if.end3, label %while.end

if.end3:                                          ; preds = %for.end
  %idxprom = sext i32 %i.0 to i64
  %28 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %28, i64 0, i32 4
  %bb4 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb4, i64 0, i64 %idxprom
  %29 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %phitmp = add i32 %i.0, 1
  br label %while.body

while.end:                                        ; preds = %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @dump_bb(%struct.basic_block_def* nocapture readonly %bb, %struct._IO_FILE* %outf) #0 {
entry:
  %index = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 11
  %0 = load i32* %index, align 4, !tbaa !19
  %loop_depth = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 12
  %1 = load i32* %loop_depth, align 4, !tbaa !27
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %outf, i8* getelementptr inbounds ([41 x i8]* @.str3, i64 0, i64 0), i32 %0, i32 %1) #4
  %count = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 13
  %2 = load i64* %count, align 8, !tbaa !25
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %outf, i8* getelementptr inbounds ([5 x i8]* @.str4, i64 0, i64 0), i64 %2) #4
  %call2 = tail call i32 @putc(i32 10, %struct._IO_FILE* %outf) #4
  %3 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8]* @.str5, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %outf)
  %pred = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 4
  %e.057 = load %struct.edge_def** %pred, align 8
  %tobool58 = icmp eq %struct.edge_def* %e.057, null
  br i1 %tobool58, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %e.059 = phi %struct.edge_def* [ %e.0, %for.body ], [ %e.057, %entry ]
  tail call void @dump_edge_info(%struct._IO_FILE* %outf, %struct.edge_def* %e.059, i32 0) #4
  %pred_next = getelementptr inbounds %struct.edge_def* %e.059, i64 0, i32 0
  %e.0 = load %struct.edge_def** %pred_next, align 8
  %tobool = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %call4 = tail call i32 @putc(i32 10, %struct._IO_FILE* %outf) #4
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8]* @.str6, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %outf)
  %global_live_at_start = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 8
  %5 = load %struct.bitmap_head_def** %global_live_at_start, align 8, !tbaa !30
  tail call void @dump_regset(%struct.bitmap_head_def* %5, %struct._IO_FILE* %outf) #4
  %call6 = tail call i32 @putc(i32 10, %struct._IO_FILE* %outf) #4
  %head = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 0
  %end = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 1
  %6 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %arrayidx = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %insn.054 = load %struct.rtx_def** %head, align 8
  %cmp55 = icmp eq %struct.rtx_def* %insn.054, %7
  br i1 %cmp55, label %for.end14, label %for.body8

for.body8:                                        ; preds = %for.end, %for.body8
  %insn.056 = phi %struct.rtx_def* [ %insn.0, %for.body8 ], [ %insn.054, %for.end ]
  %call9 = tail call i32 @print_rtl_single(%struct._IO_FILE* %outf, %struct.rtx_def* %insn.056) #4
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %insn.056, i64 0, i32 1, i64 2
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %insn.0 = load %struct.rtx_def** %rtx13, align 8
  %cmp = icmp eq %struct.rtx_def* %insn.0, %7
  br i1 %cmp, label %for.end14, label %for.body8

for.end14:                                        ; preds = %for.body8, %for.end
  %8 = tail call i64 @fwrite(i8* getelementptr inbounds ([26 x i8]* @.str7, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %outf)
  %global_live_at_end = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 9
  %9 = load %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !37
  tail call void @dump_regset(%struct.bitmap_head_def* %9, %struct._IO_FILE* %outf) #4
  %call16 = tail call i32 @putc(i32 10, %struct._IO_FILE* %outf) #4
  %10 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8]* @.str8, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %outf)
  %succ = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 5
  %e.151 = load %struct.edge_def** %succ, align 8
  %tobool1952 = icmp eq %struct.edge_def* %e.151, null
  br i1 %tobool1952, label %for.end22, label %for.body20

for.body20:                                       ; preds = %for.end14, %for.body20
  %e.153 = phi %struct.edge_def* [ %e.1, %for.body20 ], [ %e.151, %for.end14 ]
  tail call void @dump_edge_info(%struct._IO_FILE* %outf, %struct.edge_def* %e.153, i32 1) #4
  %succ_next = getelementptr inbounds %struct.edge_def* %e.153, i64 0, i32 1
  %e.1 = load %struct.edge_def** %succ_next, align 8
  %tobool19 = icmp eq %struct.edge_def* %e.1, null
  br i1 %tobool19, label %for.end22, label %for.body20

for.end22:                                        ; preds = %for.body20, %for.end14
  %call23 = tail call i32 @putc(i32 10, %struct._IO_FILE* %outf) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @putc(i32, %struct._IO_FILE* nocapture) #3

declare void @dump_edge_info(%struct._IO_FILE*, %struct.edge_def*, i32) #1

declare void @dump_regset(%struct.bitmap_head_def*, %struct._IO_FILE*) #1

declare i32 @print_rtl_single(%struct._IO_FILE*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @debug_bb(%struct.basic_block_def* nocapture readonly %bb) #0 {
entry:
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !1
  tail call void @dump_bb(%struct.basic_block_def* %bb, %struct._IO_FILE* %0)
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_bb_n(i32 %n) #0 {
entry:
  %idxprom = sext i32 %n to i64
  %0 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %0, i64 0, i32 4
  %bb = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb, i64 0, i64 %idxprom
  %1 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %2 = load %struct._IO_FILE** @stderr, align 8, !tbaa !1
  tail call void @dump_bb(%struct.basic_block_def* %1, %struct._IO_FILE* %2)
  ret void
}

; Function Attrs: nounwind uwtable
define void @print_rtl_with_bb(%struct._IO_FILE* %outf, %struct.rtx_def* %rtx_first) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %rtx_first, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %0 = tail call i64 @fwrite(i8* getelementptr inbounds ([7 x i8]* @.str9, i64 0, i64 0), i64 6, i64 1, %struct._IO_FILE* %outf)
  br label %if.end111

if.else:                                          ; preds = %entry
  %call1 = tail call i32 @get_max_uid() #4
  %conv = sext i32 %call1 to i64
  %call2 = tail call noalias i8* @xcalloc(i64 %conv, i64 8) #4
  %1 = bitcast i8* %call2 to %struct.basic_block_def**
  %call4 = tail call noalias i8* @xcalloc(i64 %conv, i64 8) #4
  %2 = bitcast i8* %call4 to %struct.basic_block_def**
  %call6 = tail call noalias i8* @xcalloc(i64 %conv, i64 4) #4
  %3 = bitcast i8* %call6 to i32*
  %4 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %cmp7188 = icmp sgt i32 %4, 0
  br i1 %cmp7188, label %for.body.lr.ph, label %for.body49

for.body.lr.ph:                                   ; preds = %if.else
  %5 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %5, i64 0, i32 4
  %bb9 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %6 = sext i32 %4 to i64
  br label %for.body

for.cond.loopexit:                                ; preds = %for.body23, %for.inc, %for.body
  %7 = trunc i64 %indvars.iv.next to i32
  %cmp7 = icmp sgt i32 %7, 0
  br i1 %cmp7, label %for.body, label %for.body49

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.loopexit
  %indvars.iv = phi i64 [ %6, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb9, i64 0, i64 %indvars.iv.next
  %8 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %head = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 0
  %9 = load %struct.rtx_def** %head, align 8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx10 to i32*
  %10 = load i32* %rtint, align 4, !tbaa !12
  %idxprom11 = sext i32 %10 to i64
  %arrayidx12 = getelementptr inbounds %struct.basic_block_def** %1, i64 %idxprom11
  store %struct.basic_block_def* %8, %struct.basic_block_def** %arrayidx12, align 8, !tbaa !1
  %end13 = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 1
  %11 = load %struct.rtx_def** %end13, align 8, !tbaa !18
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 0
  %rtint16 = bitcast %union.rtunion_def* %arrayidx15 to i32*
  %12 = load i32* %rtint16, align 4, !tbaa !12
  %idxprom17 = sext i32 %12 to i64
  %arrayidx18 = getelementptr inbounds %struct.basic_block_def** %2, i64 %idxprom17
  store %struct.basic_block_def* %8, %struct.basic_block_def** %arrayidx18, align 8, !tbaa !1
  %cmp21185 = icmp eq %struct.rtx_def* %9, null
  br i1 %cmp21185, label %for.cond.loopexit, label %for.body23

for.body23:                                       ; preds = %for.body, %for.inc
  %x.0186 = phi %struct.rtx_def* [ %x.0, %for.inc ], [ %9, %for.body ]
  %fld24 = getelementptr inbounds %struct.rtx_def* %x.0186, i64 0, i32 1
  %rtint26 = bitcast [1 x %union.rtunion_def]* %fld24 to i32*
  %13 = load i32* %rtint26, align 4, !tbaa !12
  %idxprom27 = sext i32 %13 to i64
  %arrayidx28 = getelementptr inbounds i32* %3, i64 %idxprom27
  %14 = load i32* %arrayidx28, align 4, !tbaa !40
  %cmp29 = icmp eq i32 %14, 0
  %. = select i1 %cmp29, i32 1, i32 2
  store i32 %., i32* %arrayidx28, align 4, !tbaa !40
  %cmp38 = icmp eq %struct.rtx_def* %x.0186, %11
  br i1 %cmp38, label %for.cond.loopexit, label %for.inc

for.inc:                                          ; preds = %for.body23
  %arrayidx43 = getelementptr inbounds %struct.rtx_def* %x.0186, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %x.0 = load %struct.rtx_def** %rtx, align 8
  %cmp21 = icmp eq %struct.rtx_def* %x.0, null
  br i1 %cmp21, label %for.cond.loopexit, label %for.body23

for.body49:                                       ; preds = %if.else, %for.cond.loopexit, %for.inc106
  %tmp_rtx.0183 = phi %struct.rtx_def* [ %28, %for.inc106 ], [ %rtx_first, %for.cond.loopexit ], [ %rtx_first, %if.else ]
  %fld51 = getelementptr inbounds %struct.rtx_def* %tmp_rtx.0183, i64 0, i32 1
  %rtint53 = bitcast [1 x %union.rtunion_def]* %fld51 to i32*
  %15 = load i32* %rtint53, align 4, !tbaa !12
  %idxprom54 = sext i32 %15 to i64
  %arrayidx55 = getelementptr inbounds %struct.basic_block_def** %1, i64 %idxprom54
  %16 = load %struct.basic_block_def** %arrayidx55, align 8, !tbaa !1
  %cmp56 = icmp eq %struct.basic_block_def* %16, null
  br i1 %cmp56, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.body49
  %index = getelementptr inbounds %struct.basic_block_def* %16, i64 0, i32 11
  %17 = load i32* %index, align 4, !tbaa !19
  %call59 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %outf, i8* getelementptr inbounds ([44 x i8]* @.str10, i64 0, i64 0), i32 %17) #4
  %global_live_at_start = getelementptr inbounds %struct.basic_block_def* %16, i64 0, i32 8
  %18 = load %struct.bitmap_head_def** %global_live_at_start, align 8, !tbaa !30
  tail call void @dump_regset(%struct.bitmap_head_def* %18, %struct._IO_FILE* %outf) #4
  %call60 = tail call i32 @putc(i32 10, %struct._IO_FILE* %outf) #4
  %.pre = load i32* %rtint53, align 4, !tbaa !12
  br label %if.end61

if.end61:                                         ; preds = %for.body49, %if.then58
  %19 = phi i32 [ %15, %for.body49 ], [ %.pre, %if.then58 ]
  %idxprom65 = sext i32 %19 to i64
  %arrayidx66 = getelementptr inbounds i32* %3, i64 %idxprom65
  %20 = load i32* %arrayidx66, align 4, !tbaa !40
  switch i32 %20, label %if.end89 [
    i32 0, label %land.lhs.true
    i32 2, label %if.then86
  ]

land.lhs.true:                                    ; preds = %if.end61
  %21 = getelementptr inbounds %struct.rtx_def* %tmp_rtx.0183, i64 0, i32 0
  %bf.load = load i32* %21, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.then76 [
    i32 37, label %if.end89
    i32 35, label %if.end89
  ]

if.then76:                                        ; preds = %land.lhs.true
  %22 = tail call i64 @fwrite(i8* getelementptr inbounds ([37 x i8]* @.str11, i64 0, i64 0), i64 36, i64 1, %struct._IO_FILE* %outf)
  br label %if.end89

if.then86:                                        ; preds = %if.end61
  %23 = tail call i64 @fwrite(i8* getelementptr inbounds ([37 x i8]* @.str12, i64 0, i64 0), i64 36, i64 1, %struct._IO_FILE* %outf)
  br label %if.end89

if.end89:                                         ; preds = %if.end61, %land.lhs.true, %land.lhs.true, %if.then86, %if.then76
  %call90 = tail call i32 @print_rtl_single(%struct._IO_FILE* %outf, %struct.rtx_def* %tmp_rtx.0183) #4
  %24 = load i32* %rtint53, align 4, !tbaa !12
  %idxprom94 = sext i32 %24 to i64
  %arrayidx95 = getelementptr inbounds %struct.basic_block_def** %2, i64 %idxprom94
  %25 = load %struct.basic_block_def** %arrayidx95, align 8, !tbaa !1
  %cmp96 = icmp eq %struct.basic_block_def* %25, null
  br i1 %cmp96, label %if.end102, label %if.then98

if.then98:                                        ; preds = %if.end89
  %index99 = getelementptr inbounds %struct.basic_block_def* %25, i64 0, i32 11
  %26 = load i32* %index99, align 4, !tbaa !19
  %call100 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %outf, i8* getelementptr inbounds ([43 x i8]* @.str13, i64 0, i64 0), i32 %26) #4
  %global_live_at_end = getelementptr inbounds %struct.basic_block_def* %25, i64 0, i32 9
  %27 = load %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !37
  tail call void @dump_regset(%struct.bitmap_head_def* %27, %struct._IO_FILE* %outf) #4
  %call101 = tail call i32 @putc(i32 10, %struct._IO_FILE* %outf) #4
  br label %if.end102

if.end102:                                        ; preds = %if.end89, %if.then98
  %tobool = icmp eq i32 %call90, 0
  br i1 %tobool, label %for.inc106, label %if.then103

if.then103:                                       ; preds = %if.end102
  %call104 = tail call i32 @putc(i32 10, %struct._IO_FILE* %outf) #4
  br label %for.inc106

for.inc106:                                       ; preds = %if.end102, %if.then103
  %arrayidx108 = getelementptr inbounds %struct.rtx_def* %tmp_rtx.0183, i64 0, i32 1, i64 2
  %rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**
  %28 = load %struct.rtx_def** %rtx109, align 8, !tbaa !1
  %cmp47 = icmp eq %struct.rtx_def* %28, null
  br i1 %cmp47, label %for.end110, label %for.body49

for.end110:                                       ; preds = %for.inc106
  tail call void @free(i8* %call2)
  tail call void @free(i8* %call4)
  tail call void @free(i8* %call6)
  br label %if.end111

if.end111:                                        ; preds = %for.end110, %if.then
  %29 = load %struct.function** @cfun, align 8, !tbaa !1
  %epilogue_delay_list = getelementptr inbounds %struct.function* %29, i64 0, i32 55
  %30 = load %struct.rtx_def** %epilogue_delay_list, align 8, !tbaa !46
  %cmp112 = icmp eq %struct.rtx_def* %30, null
  br i1 %cmp112, label %if.end130, label %if.then114

if.then114:                                       ; preds = %if.end111
  %31 = tail call i64 @fwrite(i8* getelementptr inbounds ([36 x i8]* @.str14, i64 0, i64 0), i64 35, i64 1, %struct._IO_FILE* %outf)
  %32 = load %struct.function** @cfun, align 8, !tbaa !1
  %epilogue_delay_list116 = getelementptr inbounds %struct.function* %32, i64 0, i32 55
  %tmp_rtx.1179 = load %struct.rtx_def** %epilogue_delay_list116, align 8
  %cmp118180 = icmp eq %struct.rtx_def* %tmp_rtx.1179, null
  br i1 %cmp118180, label %if.end130, label %for.body120

for.body120:                                      ; preds = %if.then114, %for.body120
  %tmp_rtx.1181 = phi %struct.rtx_def* [ %tmp_rtx.1, %for.body120 ], [ %tmp_rtx.1179, %if.then114 ]
  %fld121 = getelementptr inbounds %struct.rtx_def* %tmp_rtx.1181, i64 0, i32 1
  %rtx123 = bitcast [1 x %union.rtunion_def]* %fld121 to %struct.rtx_def**
  %33 = load %struct.rtx_def** %rtx123, align 8, !tbaa !1
  %call124 = tail call i32 @print_rtl_single(%struct._IO_FILE* %outf, %struct.rtx_def* %33) #4
  %arrayidx127 = getelementptr inbounds %struct.rtx_def* %tmp_rtx.1181, i64 0, i32 1, i64 1
  %rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**
  %tmp_rtx.1 = load %struct.rtx_def** %rtx128, align 8
  %cmp118 = icmp eq %struct.rtx_def* %tmp_rtx.1, null
  br i1 %cmp118, label %if.end130, label %for.body120

if.end130:                                        ; preds = %for.body120, %if.then114, %if.end111
  ret void
}

declare i32 @get_max_uid() #1

declare noalias i8* @xcalloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @update_br_prob_note(%struct.basic_block_def* nocapture readonly %bb) #0 {
entry:
  %end = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 1
  %0 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 33
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %0, i32 16, %struct.rtx_def* null) #4
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %rtwint = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0, i32 0
  %3 = load i64* %rtwint, align 8, !tbaa !47
  %succ = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 5
  %4 = load %struct.edge_def** %succ, align 8, !tbaa !24
  %flags = getelementptr inbounds %struct.edge_def* %4, i64 0, i32 6
  %5 = load i32* %flags, align 4, !tbaa !39
  %and = and i32 %5, 1
  %tobool4 = icmp eq i32 %and, 0
  br i1 %tobool4, label %cond.end, label %cond.true

cond.true:                                        ; preds = %lor.lhs.false
  %succ_next = getelementptr inbounds %struct.edge_def* %4, i64 0, i32 1
  %6 = load %struct.edge_def** %succ_next, align 8, !tbaa !41
  br label %cond.end

cond.end:                                         ; preds = %lor.lhs.false, %cond.true
  %cond = phi %struct.edge_def* [ %6, %cond.true ], [ %4, %lor.lhs.false ]
  %probability = getelementptr inbounds %struct.edge_def* %cond, i64 0, i32 7
  %7 = load i32* %probability, align 4, !tbaa !42
  %conv = sext i32 %7 to i64
  %cmp7 = icmp eq i64 %3, %conv
  br i1 %cmp7, label %return, label %if.end10

if.end10:                                         ; preds = %cond.end
  br i1 %tobool4, label %cond.end20, label %cond.true15

cond.true15:                                      ; preds = %if.end10
  %succ_next17 = getelementptr inbounds %struct.edge_def* %4, i64 0, i32 1
  %8 = load %struct.edge_def** %succ_next17, align 8, !tbaa !41
  br label %cond.end20

cond.end20:                                       ; preds = %if.end10, %cond.true15
  %cond21 = phi %struct.edge_def* [ %8, %cond.true15 ], [ %4, %if.end10 ]
  %probability22 = getelementptr inbounds %struct.edge_def* %cond21, i64 0, i32 7
  %9 = load i32* %probability22, align 4, !tbaa !42
  %conv23 = sext i32 %9 to i64
  %call24 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv23) #4
  %10 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %call24.c = ptrtoint %struct.rtx_def* %call24 to i64
  store i64 %call24.c, i64* %10, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %if.end, %entry, %cond.end, %cond.end20
  ret void
}

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

; Function Attrs: nounwind uwtable
define void @verify_flow_info() #0 {
entry:
  %call = tail call i32 @get_max_uid() #4
  %call1 = tail call %struct.rtx_def* @get_insns() #4
  %call2 = tail call %struct.rtx_def* @get_last_insn() #4
  %conv = sext i32 %call to i64
  %call3 = tail call noalias i8* @xcalloc(i64 %conv, i64 8) #4
  %0 = bitcast i8* %call3 to %struct.basic_block_def**
  %1 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %add = add nsw i32 %1, 2
  %conv4 = sext i32 %add to i64
  %call5 = tail call noalias i8* @xcalloc(i64 %conv4, i64 8) #4
  %2 = bitcast i8* %call5 to %struct.basic_block_def**
  %3 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %add6 = add nsw i32 %3, 2
  %conv7 = sext i32 %add6 to i64
  %call8 = tail call noalias i8* @xcalloc(i64 %conv7, i64 8) #4
  %4 = bitcast i8* %call8 to i64*
  %5 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %cmp760 = icmp sgt i32 %5, 0
  br i1 %cmp760, label %for.body.lr.ph, label %for.cond375.preheader

for.body.lr.ph:                                   ; preds = %entry
  %6 = sext i32 %5 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv787 = phi i64 [ %6, %for.body.lr.ph ], [ %indvars.iv.next788, %for.cond.backedge ]
  %last_head.0762 = phi %struct.rtx_def* [ %call2, %for.body.lr.ph ], [ %last_head.0.be, %for.cond.backedge ]
  %err.0761 = phi i32 [ 0, %for.body.lr.ph ], [ %err.0.be, %for.cond.backedge ]
  %indvars.iv.next788 = add nsw i64 %indvars.iv787, -1
  %7 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 4
  %bb10 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb10, i64 0, i64 %indvars.iv.next788
  %8 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %head11 = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 0
  %9 = load %struct.rtx_def** %head11, align 8, !tbaa !17
  %end12 = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 1
  %10 = load %struct.rtx_def** %end12, align 8, !tbaa !18
  %cmp14748 = icmp ne %struct.rtx_def* %last_head.0762, null
  %cmp14.not749 = xor i1 %cmp14748, true
  %cmp17750 = icmp eq %struct.rtx_def* %last_head.0762, %10
  %or.cond751 = or i1 %cmp17750, %cmp14.not749
  br i1 %or.cond751, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body, %for.inc
  %x.0752 = phi %struct.rtx_def* [ %11, %for.inc ], [ %last_head.0762, %for.body ]
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %x.0752, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp14 = icmp ne %struct.rtx_def* %11, null
  %cmp14.not = xor i1 %cmp14, true
  %cmp17 = icmp eq %struct.rtx_def* %11, %10
  %or.cond = or i1 %cmp17, %cmp14.not
  br i1 %or.cond, label %for.end, label %for.inc

for.end:                                          ; preds = %for.inc, %for.body
  %cmp14.lcssa = phi i1 [ %cmp14748, %for.body ], [ %cmp14, %for.inc ]
  %x.0.lcssa = phi %struct.rtx_def* [ %last_head.0762, %for.body ], [ %11, %for.inc ]
  br i1 %cmp14.lcssa, label %for.cond24.preheader, label %for.cond24.preheader.thread

for.cond24.preheader.thread:                      ; preds = %for.end
  %arrayidx22 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx22 to i32*
  %12 = load i32* %rtint, align 4, !tbaa !12
  %index = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 11
  %13 = load i32* %index, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([54 x i8]* @.str15, i64 0, i64 0), i32 %12, i32 %13) #4
  br label %for.cond24.preheader.if.then62.loopexit_crit_edge

for.cond24.preheader:                             ; preds = %for.end
  %cmp25755 = icmp eq %struct.rtx_def* %x.0.lcssa, null
  br i1 %cmp25755, label %for.cond24.preheader.if.then62.loopexit_crit_edge, label %for.body27.lr.ph

for.cond24.preheader.if.then62.loopexit_crit_edge: ; preds = %for.cond24.preheader.thread, %for.cond24.preheader
  %index66.pre.pre = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 11
  br label %if.then62

for.body27.lr.ph:                                 ; preds = %for.cond24.preheader
  %index39 = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 11
  br label %for.body27

for.body27:                                       ; preds = %for.inc56, %for.body27.lr.ph
  %x.1757 = phi %struct.rtx_def* [ %x.0.lcssa, %for.body27.lr.ph ], [ %19, %for.inc56 ]
  %err.1756 = phi i32 [ %err.0761, %for.body27.lr.ph ], [ %err.2, %for.inc56 ]
  %fld28 = getelementptr inbounds %struct.rtx_def* %x.1757, i64 0, i32 1
  %rtint30 = bitcast [1 x %union.rtunion_def]* %fld28 to i32*
  %14 = load i32* %rtint30, align 4, !tbaa !12
  %idxprom31 = sext i32 %14 to i64
  %arrayidx32 = getelementptr inbounds %struct.basic_block_def** %0, i64 %idxprom31
  %15 = load %struct.basic_block_def** %arrayidx32, align 8, !tbaa !1
  %cmp33 = icmp eq %struct.basic_block_def* %15, null
  br i1 %cmp33, label %if.end46, label %if.then35

if.then35:                                        ; preds = %for.body27
  %16 = load i32* %index39, align 4, !tbaa !19
  %index45 = getelementptr inbounds %struct.basic_block_def* %15, i64 0, i32 11
  %17 = load i32* %index45, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([48 x i8]* @.str16, i64 0, i64 0), i32 %14, i32 %16, i32 %17) #4
  %.pre799 = load i32* %rtint30, align 4, !tbaa !12
  br label %if.end46

if.end46:                                         ; preds = %for.body27, %if.then35
  %18 = phi i32 [ %.pre799, %if.then35 ], [ %14, %for.body27 ]
  %err.2 = phi i32 [ 1, %if.then35 ], [ %err.1756, %for.body27 ]
  %idxprom50 = sext i32 %18 to i64
  %arrayidx51 = getelementptr inbounds %struct.basic_block_def** %0, i64 %idxprom50
  store %struct.basic_block_def* %8, %struct.basic_block_def** %arrayidx51, align 8, !tbaa !1
  %cmp52 = icmp eq %struct.rtx_def* %x.1757, %9
  br i1 %cmp52, label %for.cond.backedge, label %for.inc56

for.inc56:                                        ; preds = %if.end46
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %x.1757, i64 0, i32 1, i64 1
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx59, align 8, !tbaa !1
  %cmp25 = icmp eq %struct.rtx_def* %19, null
  br i1 %cmp25, label %if.then62, label %for.body27

if.then62:                                        ; preds = %for.inc56, %for.cond24.preheader.if.then62.loopexit_crit_edge
  %index66.pre.pre-phi = phi i32* [ %index66.pre.pre, %for.cond24.preheader.if.then62.loopexit_crit_edge ], [ %index39, %for.inc56 ]
  %arrayidx64 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0
  %rtint65 = bitcast %union.rtunion_def* %arrayidx64 to i32*
  %20 = load i32* %rtint65, align 4, !tbaa !12
  %21 = load i32* %index66.pre.pre-phi, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([55 x i8]* @.str17, i64 0, i64 0), i32 %20, i32 %21) #4
  br label %for.cond.backedge

for.cond.backedge:                                ; preds = %if.end46, %if.then62
  %err.0.be = phi i32 [ 1, %if.then62 ], [ %err.2, %if.end46 ]
  %last_head.0.be = phi %struct.rtx_def* [ null, %if.then62 ], [ %9, %if.end46 ]
  %22 = trunc i64 %indvars.iv.next788 to i32
  %cmp = icmp sgt i32 %22, 0
  br i1 %cmp, label %for.body, label %for.end69

for.end69:                                        ; preds = %for.cond.backedge
  %.pre = load i32* @n_basic_blocks, align 4, !tbaa !12
  %cmp72744 = icmp sgt i32 %.pre, 0
  br i1 %cmp72744, label %for.body74.lr.ph, label %for.cond375.preheader

for.body74.lr.ph:                                 ; preds = %for.end69
  %23 = load %struct._IO_FILE** @stderr, align 8, !tbaa !1
  %24 = sext i32 %.pre to i64
  br label %for.body74

for.cond375.preheader:                            ; preds = %for.cond71.backedge, %entry, %for.end69
  %err.5.lcssa = phi i32 [ %err.0.be, %for.end69 ], [ 0, %entry ], [ %err.5.be, %for.cond71.backedge ]
  %e374.0716 = load %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 5), align 8
  %tobool376717 = icmp eq %struct.edge_def* %e374.0716, null
  br i1 %tobool376717, label %for.cond387.preheader, label %for.body377

for.body74:                                       ; preds = %for.body74.lr.ph, %for.cond71.backedge
  %indvars.iv785 = phi i64 [ %24, %for.body74.lr.ph ], [ %indvars.iv.next786, %for.cond71.backedge ]
  %err.5745 = phi i32 [ %err.0.be, %for.body74.lr.ph ], [ %err.5.be, %for.cond71.backedge ]
  %indvars.iv.next786 = add nsw i64 %indvars.iv785, -1
  %25 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data77 = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 4
  %bb78 = bitcast %union.varray_data_tag* %data77 to [1 x %struct.basic_block_def*]*
  %arrayidx79 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb78, i64 0, i64 %indvars.iv.next786
  %26 = load %struct.basic_block_def** %arrayidx79, align 8, !tbaa !1
  %succ = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 5
  %e.0719 = load %struct.edge_def** %succ, align 8
  %tobool81720 = icmp eq %struct.edge_def* %e.0719, null
  br i1 %tobool81720, label %if.then176, label %for.body82.lr.ph

for.body82.lr.ph:                                 ; preds = %for.body74
  %index162 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 11
  br label %for.body82

for.body82:                                       ; preds = %for.body82.lr.ph, %if.end166
  %e.0723 = phi %struct.edge_def* [ %e.0719, %for.body82.lr.ph ], [ %e.0, %if.end166 ]
  %has_fallthru.0722 = phi i32 [ 0, %for.body82.lr.ph ], [ %has_fallthru.0., %if.end166 ]
  %err.6721 = phi i32 [ %err.5745, %for.body82.lr.ph ], [ %err.9, %if.end166 ]
  %dest = getelementptr inbounds %struct.edge_def* %e.0723, i64 0, i32 3
  %27 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %index83 = getelementptr inbounds %struct.basic_block_def* %27, i64 0, i32 11
  %28 = load i32* %index83, align 4, !tbaa !19
  %add84 = add nsw i32 %28, 2
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds %struct.basic_block_def** %2, i64 %idxprom85
  %29 = load %struct.basic_block_def** %arrayidx86, align 8, !tbaa !1
  %cmp87 = icmp eq %struct.basic_block_def* %29, %26
  br i1 %cmp87, label %if.then89, label %if.end93

if.then89:                                        ; preds = %for.body82
  %src = getelementptr inbounds %struct.edge_def* %e.0723, i64 0, i32 2
  %30 = load %struct.basic_block_def** %src, align 8, !tbaa !28
  %index90 = getelementptr inbounds %struct.basic_block_def* %30, i64 0, i32 11
  %31 = load i32* %index90, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([40 x i8]* @.str18, i64 0, i64 0), i32 %31, i32 %28) #4
  %.pre797 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %index95.phi.trans.insert = getelementptr inbounds %struct.basic_block_def* %.pre797, i64 0, i32 11
  %.pre798 = load i32* %index95.phi.trans.insert, align 4, !tbaa !19
  br label %if.end93

if.end93:                                         ; preds = %if.then89, %for.body82
  %32 = phi i32 [ %.pre798, %if.then89 ], [ %28, %for.body82 ]
  %33 = phi %struct.basic_block_def* [ %.pre797, %if.then89 ], [ %27, %for.body82 ]
  %err.7 = phi i32 [ 1, %if.then89 ], [ %err.6721, %for.body82 ]
  %add96 = add nsw i32 %32, 2
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds %struct.basic_block_def** %2, i64 %idxprom97
  store %struct.basic_block_def* %26, %struct.basic_block_def** %arrayidx98, align 8, !tbaa !1
  %flags = getelementptr inbounds %struct.edge_def* %e.0723, i64 0, i32 6
  %34 = load i32* %flags, align 4, !tbaa !39
  %and = and i32 %34, 1
  %tobool99 = icmp eq i32 %and, 0
  %has_fallthru.0. = select i1 %tobool99, i32 %has_fallthru.0722, i32 1
  %src158.pre = getelementptr inbounds %struct.edge_def* %e.0723, i64 0, i32 2
  br i1 %tobool99, label %if.end157, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end93
  %35 = load %struct.basic_block_def** %src158.pre, align 8, !tbaa !28
  %cmp106 = icmp eq %struct.basic_block_def* %35, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  %cmp110 = icmp eq %struct.basic_block_def* %33, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  %or.cond803 = or i1 %cmp106, %cmp110
  br i1 %or.cond803, label %if.end157, label %if.then112

if.then112:                                       ; preds = %land.lhs.true
  %index114 = getelementptr inbounds %struct.basic_block_def* %35, i64 0, i32 11
  %36 = load i32* %index114, align 4, !tbaa !19
  %add115 = add nsw i32 %36, 1
  %cmp118 = icmp eq i32 %add115, %32
  br i1 %cmp118, label %if.else, label %if.then120

if.then120:                                       ; preds = %if.then112
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([55 x i8]* @.str19, i64 0, i64 0), i32 %36, i32 %32) #4
  br label %if.end157

if.else:                                          ; preds = %if.then112
  %end126 = getelementptr inbounds %struct.basic_block_def* %35, i64 0, i32 1
  %37 = load %struct.rtx_def** %end126, align 8, !tbaa !18
  %head132 = getelementptr inbounds %struct.basic_block_def* %33, i64 0, i32 0
  %38 = load %struct.rtx_def** %head132, align 8, !tbaa !17
  br label %for.cond130

for.cond130:                                      ; preds = %lor.lhs.false, %if.else
  %.pn = phi %struct.rtx_def* [ %37, %if.else ], [ %insn.0, %lor.lhs.false ]
  %insn.0.in.in = getelementptr inbounds %struct.rtx_def* %.pn, i64 0, i32 1, i64 2
  %insn.0.in = bitcast %union.rtunion_def* %insn.0.in.in to %struct.rtx_def**
  %insn.0 = load %struct.rtx_def** %insn.0.in, align 8
  %cmp133 = icmp eq %struct.rtx_def* %insn.0, %38
  br i1 %cmp133, label %if.end157, label %for.body135

for.body135:                                      ; preds = %for.cond130
  %39 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 0
  %bf.load = load i32* %39, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp136 = icmp eq i32 %bf.clear, 35
  br i1 %cmp136, label %if.then145, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body135
  %idxprom140687 = zext i32 %bf.clear to i64
  %arrayidx141 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom140687
  %40 = load i8* %arrayidx141, align 1, !tbaa !40
  %cmp143 = icmp eq i8 %40, 105
  br i1 %cmp143, label %if.then145, label %for.cond130

if.then145:                                       ; preds = %lor.lhs.false, %for.body135
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([44 x i8]* @.str20, i64 0, i64 0), i32 %36, i32 %32) #4
  tail call void @_fatal_insn(i8* getelementptr inbounds ([32 x i8]* @.str21, i64 0, i64 0), %struct.rtx_def* %insn.0, i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1717, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.verify_flow_info, i64 0, i64 0)) #5
  unreachable

if.end157:                                        ; preds = %for.cond130, %if.end93, %land.lhs.true, %if.then120
  %err.8 = phi i32 [ %err.7, %land.lhs.true ], [ 1, %if.then120 ], [ %err.7, %if.end93 ], [ %err.7, %for.cond130 ]
  %41 = load %struct.basic_block_def** %src158.pre, align 8, !tbaa !28
  %cmp159 = icmp eq %struct.basic_block_def* %41, %26
  br i1 %cmp159, label %if.end166, label %if.then161

if.then161:                                       ; preds = %if.end157
  %42 = load i32* %index162, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([56 x i8]* @.str22, i64 0, i64 0), i32 %42) #4
  %43 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8]* @.str23, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %23) #6
  tail call void @dump_edge_info(%struct._IO_FILE* %23, %struct.edge_def* %e.0723, i32 0) #4
  %44 = tail call i64 @fwrite(i8* getelementptr inbounds ([13 x i8]* @.str24, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %23) #6
  tail call void @dump_edge_info(%struct._IO_FILE* %23, %struct.edge_def* %e.0723, i32 1) #4
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %23) #7
  br label %if.end166

if.end166:                                        ; preds = %if.end157, %if.then161
  %err.9 = phi i32 [ 1, %if.then161 ], [ %err.8, %if.end157 ]
  %45 = ptrtoint %struct.edge_def* %e.0723 to i64
  %46 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %index168 = getelementptr inbounds %struct.basic_block_def* %46, i64 0, i32 11
  %47 = load i32* %index168, align 4, !tbaa !19
  %add169 = add nsw i32 %47, 2
  %idxprom170 = sext i32 %add169 to i64
  %arrayidx171 = getelementptr inbounds i64* %4, i64 %idxprom170
  %48 = load i64* %arrayidx171, align 8, !tbaa !48
  %add172 = add i64 %48, %45
  store i64 %add172, i64* %arrayidx171, align 8, !tbaa !48
  %succ_next = getelementptr inbounds %struct.edge_def* %e.0723, i64 0, i32 1
  %e.0 = load %struct.edge_def** %succ_next, align 8
  %tobool81 = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool81, label %for.end174, label %for.body82

for.end174:                                       ; preds = %if.end166
  %phitmp = icmp eq i32 %has_fallthru.0., 0
  br i1 %phitmp, label %if.then176, label %if.end206

if.then176:                                       ; preds = %for.body74, %for.end174
  %err.6.lcssa802 = phi i32 [ %err.9, %for.end174 ], [ %err.5745, %for.body74 ]
  %end178 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 1
  %insn177.0726 = load %struct.rtx_def** %end178, align 8
  %tobool180727 = icmp eq %struct.rtx_def* %insn177.0726, null
  br i1 %tobool180727, label %if.then198, label %lor.rhs

lor.rhs:                                          ; preds = %if.then176, %for.inc201
  %insn177.0728 = phi %struct.rtx_def* [ %insn177.0, %for.inc201 ], [ %insn177.0726, %if.then176 ]
  %49 = getelementptr inbounds %struct.rtx_def* %insn177.0728, i64 0, i32 0
  %bf.load181 = load i32* %49, align 8
  %bf.clear182 = and i32 %bf.load181, 65535
  switch i32 %bf.clear182, label %for.inc201 [
    i32 35, label %if.end206
    i32 37, label %land.lhs.true192
  ]

land.lhs.true192:                                 ; preds = %lor.rhs
  %arrayidx194 = getelementptr inbounds %struct.rtx_def* %insn177.0728, i64 0, i32 1, i64 4
  %rtint195 = bitcast %union.rtunion_def* %arrayidx194 to i32*
  %50 = load i32* %rtint195, align 4, !tbaa !12
  %cmp196 = icmp eq i32 %50, -80
  br i1 %cmp196, label %if.then198, label %for.inc201

if.then198:                                       ; preds = %land.lhs.true192, %for.inc201, %if.then176
  %index199 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 11
  %51 = load i32* %index199, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([31 x i8]* @.str26, i64 0, i64 0), i32 %51) #4
  br label %if.end206

for.inc201:                                       ; preds = %lor.rhs, %land.lhs.true192
  %arrayidx203 = getelementptr inbounds %struct.rtx_def* %insn177.0728, i64 0, i32 1, i64 2
  %rtx204 = bitcast %union.rtunion_def* %arrayidx203 to %struct.rtx_def**
  %insn177.0 = load %struct.rtx_def** %rtx204, align 8
  %tobool180 = icmp eq %struct.rtx_def* %insn177.0, null
  br i1 %tobool180, label %if.then198, label %lor.rhs

if.end206:                                        ; preds = %lor.rhs, %for.end174, %if.then198
  %err.10 = phi i32 [ %err.9, %for.end174 ], [ 1, %if.then198 ], [ %err.6.lcssa802, %lor.rhs ]
  %pred = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 4
  %e.1729 = load %struct.edge_def** %pred, align 8
  %tobool208730 = icmp eq %struct.edge_def* %e.1729, null
  br i1 %tobool208730, label %for.end226, label %for.body209.lr.ph

for.body209.lr.ph:                                ; preds = %if.end206
  %index214 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 11
  br label %for.body209

for.body209:                                      ; preds = %for.body209.lr.ph, %if.end218
  %e.1732 = phi %struct.edge_def* [ %e.1729, %for.body209.lr.ph ], [ %e.1, %if.end218 ]
  %err.11731 = phi i32 [ %err.10, %for.body209.lr.ph ], [ %err.12, %if.end218 ]
  %dest210 = getelementptr inbounds %struct.edge_def* %e.1732, i64 0, i32 3
  %52 = load %struct.basic_block_def** %dest210, align 8, !tbaa !38
  %cmp211 = icmp eq %struct.basic_block_def* %52, %26
  br i1 %cmp211, label %if.end218, label %if.then213

if.then213:                                       ; preds = %for.body209
  %53 = load i32* %index214, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str27, i64 0, i64 0), i32 %53) #4
  %54 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8]* @.str23, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %23) #6
  tail call void @dump_edge_info(%struct._IO_FILE* %23, %struct.edge_def* %e.1732, i32 0) #4
  %55 = tail call i64 @fwrite(i8* getelementptr inbounds ([13 x i8]* @.str24, i64 0, i64 0), i64 12, i64 1, %struct._IO_FILE* %23) #6
  tail call void @dump_edge_info(%struct._IO_FILE* %23, %struct.edge_def* %e.1732, i32 1) #4
  %call217 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %23) #7
  %.pre796 = load %struct.basic_block_def** %dest210, align 8, !tbaa !38
  br label %if.end218

if.end218:                                        ; preds = %for.body209, %if.then213
  %56 = phi %struct.basic_block_def* [ %.pre796, %if.then213 ], [ %26, %for.body209 ]
  %err.12 = phi i32 [ 1, %if.then213 ], [ %err.11731, %for.body209 ]
  %57 = ptrtoint %struct.edge_def* %e.1732 to i64
  %index220 = getelementptr inbounds %struct.basic_block_def* %56, i64 0, i32 11
  %58 = load i32* %index220, align 4, !tbaa !19
  %add221 = add nsw i32 %58, 2
  %idxprom222 = sext i32 %add221 to i64
  %arrayidx223 = getelementptr inbounds i64* %4, i64 %idxprom222
  %59 = load i64* %arrayidx223, align 8, !tbaa !48
  %sub224 = sub i64 %59, %57
  store i64 %sub224, i64* %arrayidx223, align 8, !tbaa !48
  %pred_next = getelementptr inbounds %struct.edge_def* %e.1732, i64 0, i32 0
  %e.1 = load %struct.edge_def** %pred_next, align 8
  %tobool208 = icmp eq %struct.edge_def* %e.1, null
  br i1 %tobool208, label %for.end226, label %for.body209

for.end226:                                       ; preds = %if.end218, %if.end206
  %err.11.lcssa = phi i32 [ %err.10, %if.end206 ], [ %err.12, %if.end218 ]
  %head227 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 0
  %x.2734 = load %struct.rtx_def** %head227, align 8
  %end229 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 1
  %60 = load %struct.rtx_def** %end229, align 8, !tbaa !18
  %arrayidx231735 = getelementptr inbounds %struct.rtx_def* %60, i64 0, i32 1, i64 2
  %rtx232736 = bitcast %union.rtunion_def* %arrayidx231735 to %struct.rtx_def**
  %61 = load %struct.rtx_def** %rtx232736, align 8, !tbaa !1
  %cmp233737 = icmp eq %struct.rtx_def* %x.2734, %61
  br i1 %cmp233737, label %for.end280, label %for.body235.lr.ph

for.body235.lr.ph:                                ; preds = %for.end226
  %index265 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 11
  br label %for.body235

for.body235:                                      ; preds = %for.body235.lr.ph, %for.inc276
  %x.2739 = phi %struct.rtx_def* [ %x.2734, %for.body235.lr.ph ], [ %x.2, %for.inc276 ]
  %err.13738 = phi i32 [ %err.11.lcssa, %for.body235.lr.ph ], [ %err.14, %for.inc276 ]
  %62 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %tobool236 = icmp eq %struct.varray_head_tag* %62, null
  br i1 %tobool236, label %for.inc276, label %land.lhs.true237

land.lhs.true237:                                 ; preds = %for.body235
  %arrayidx239 = getelementptr inbounds %struct.rtx_def* %x.2739, i64 0, i32 1, i64 0
  %rtint240 = bitcast %union.rtunion_def* %arrayidx239 to i32*
  %63 = load i32* %rtint240, align 4, !tbaa !12
  %idxprom241 = sext i32 %63 to i64
  %data242 = getelementptr inbounds %struct.varray_head_tag* %62, i64 0, i32 4
  %bb243 = bitcast %union.varray_data_tag* %data242 to [1 x %struct.basic_block_def*]*
  %arrayidx244 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb243, i64 0, i64 %idxprom241
  %64 = load %struct.basic_block_def** %arrayidx244, align 8, !tbaa !1
  %cmp245 = icmp eq %struct.basic_block_def* %64, %26
  br i1 %cmp245, label %for.inc276, label %if.then247

if.then247:                                       ; preds = %land.lhs.true237
  tail call void @debug_rtx(%struct.rtx_def* %x.2739) #4
  %65 = load i32* %rtint240, align 4, !tbaa !12
  %idxprom251 = sext i32 %65 to i64
  %66 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !1
  %data252 = getelementptr inbounds %struct.varray_head_tag* %66, i64 0, i32 4
  %bb253 = bitcast %union.varray_data_tag* %data252 to [1 x %struct.basic_block_def*]*
  %arrayidx254 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb253, i64 0, i64 %idxprom251
  %67 = load %struct.basic_block_def** %arrayidx254, align 8, !tbaa !1
  %tobool255 = icmp eq %struct.basic_block_def* %67, null
  %68 = load i32* %index265, align 4, !tbaa !19
  br i1 %tobool255, label %if.then256, label %if.else261

if.then256:                                       ; preds = %if.then247
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([57 x i8]* @.str28, i64 0, i64 0), i32 %65, i32 %68) #4
  br label %for.inc276

if.else261:                                       ; preds = %if.then247
  %index273 = getelementptr inbounds %struct.basic_block_def* %67, i64 0, i32 11
  %69 = load i32* %index273, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([55 x i8]* @.str29, i64 0, i64 0), i32 %65, i32 %68, i32 %69) #4
  br label %for.inc276

for.inc276:                                       ; preds = %if.then256, %if.else261, %land.lhs.true237, %for.body235
  %err.14 = phi i32 [ %err.13738, %land.lhs.true237 ], [ %err.13738, %for.body235 ], [ 1, %if.else261 ], [ 1, %if.then256 ]
  %arrayidx278 = getelementptr inbounds %struct.rtx_def* %x.2739, i64 0, i32 1, i64 2
  %rtx279 = bitcast %union.rtunion_def* %arrayidx278 to %struct.rtx_def**
  %x.2 = load %struct.rtx_def** %rtx279, align 8
  %70 = load %struct.rtx_def** %end229, align 8, !tbaa !18
  %arrayidx231 = getelementptr inbounds %struct.rtx_def* %70, i64 0, i32 1, i64 2
  %rtx232 = bitcast %union.rtunion_def* %arrayidx231 to %struct.rtx_def**
  %71 = load %struct.rtx_def** %rtx232, align 8, !tbaa !1
  %cmp233 = icmp eq %struct.rtx_def* %x.2, %71
  br i1 %cmp233, label %for.cond228.for.end280_crit_edge, label %for.body235

for.cond228.for.end280_crit_edge:                 ; preds = %for.inc276
  %.pre792 = load %struct.rtx_def** %head227, align 8, !tbaa !17
  br label %for.end280

for.end280:                                       ; preds = %for.cond228.for.end280_crit_edge, %for.end226
  %72 = phi %struct.rtx_def* [ %.pre792, %for.cond228.for.end280_crit_edge ], [ %x.2734, %for.end226 ]
  %.lcssa = phi %struct.rtx_def* [ %70, %for.cond228.for.end280_crit_edge ], [ %60, %for.end226 ]
  %err.13.lcssa = phi i32 [ %err.14, %for.cond228.for.end280_crit_edge ], [ %err.11.lcssa, %for.end226 ]
  %73 = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 0
  %bf.load282 = load i32* %73, align 8
  %bf.clear283 = and i32 %bf.load282, 65535
  %cmp284 = icmp eq i32 %bf.clear283, 36
  br i1 %cmp284, label %if.then286, label %if.end296

if.then286:                                       ; preds = %for.end280
  %cmp288 = icmp eq %struct.rtx_def* %.lcssa, %72
  br i1 %cmp288, label %if.then290, label %if.end292

if.then290:                                       ; preds = %if.then286
  %index291 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 11
  %74 = load i32* %index291, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([46 x i8]* @.str30, i64 0, i64 0), i32 %74) #4
  br label %if.end292

if.end292:                                        ; preds = %if.then290, %if.then286
  %err.15 = phi i32 [ 1, %if.then290 ], [ %err.13.lcssa, %if.then286 ]
  %arrayidx294 = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 1, i64 2
  %rtx295 = bitcast %union.rtunion_def* %arrayidx294 to %struct.rtx_def**
  %75 = load %struct.rtx_def** %rtx295, align 8, !tbaa !1
  %.phi.trans.insert793 = getelementptr inbounds %struct.rtx_def* %75, i64 0, i32 0
  %bf.load297.pre = load i32* %.phi.trans.insert793, align 8
  br label %if.end296

if.end296:                                        ; preds = %if.end292, %for.end280
  %bf.load297 = phi i32 [ %bf.load297.pre, %if.end292 ], [ %bf.load282, %for.end280 ]
  %err.16 = phi i32 [ %err.15, %if.end292 ], [ %err.13.lcssa, %for.end280 ]
  %x.3 = phi %struct.rtx_def* [ %75, %if.end292 ], [ %72, %for.end280 ]
  %bf.clear298 = and i32 %bf.load297, 65535
  %cmp299 = icmp eq i32 %bf.clear298, 37
  br i1 %cmp299, label %land.lhs.true301, label %if.then313

land.lhs.true301:                                 ; preds = %if.end296
  %arrayidx303 = getelementptr inbounds %struct.rtx_def* %x.3, i64 0, i32 1, i64 4
  %rtint304 = bitcast %union.rtunion_def* %arrayidx303 to i32*
  %76 = load i32* %rtint304, align 4, !tbaa !12
  %cmp305 = icmp eq i32 %76, -80
  br i1 %cmp305, label %lor.lhs.false307, label %if.then313

lor.lhs.false307:                                 ; preds = %land.lhs.true301
  %arrayidx309 = getelementptr inbounds %struct.rtx_def* %x.3, i64 0, i32 1, i64 3
  %bb310 = bitcast %union.rtunion_def* %arrayidx309 to %struct.basic_block_def**
  %77 = load %struct.basic_block_def** %bb310, align 8, !tbaa !1
  %cmp311 = icmp eq %struct.basic_block_def* %77, %26
  br i1 %cmp311, label %if.end315, label %if.then313

if.then313:                                       ; preds = %lor.lhs.false307, %land.lhs.true301, %if.end296
  %index314 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 11
  %78 = load i32* %index314, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([46 x i8]* @.str30, i64 0, i64 0), i32 %78) #4
  br label %if.end315

if.end315:                                        ; preds = %lor.lhs.false307, %if.then313
  %err.17 = phi i32 [ 1, %if.then313 ], [ %err.16, %lor.lhs.false307 ]
  %79 = load %struct.rtx_def** %end229, align 8, !tbaa !18
  %cmp317 = icmp eq %struct.rtx_def* %79, %x.3
  br i1 %cmp317, label %for.cond71.backedge, label %for.cond324.preheader

for.cond71.backedge:                              ; preds = %if.end342, %for.cond324, %if.end315
  %err.5.be = phi i32 [ %err.17, %if.end315 ], [ %err.19, %if.end342 ], [ %err.18, %for.cond324 ]
  %80 = trunc i64 %indvars.iv.next786 to i32
  %cmp72 = icmp sgt i32 %80, 0
  br i1 %cmp72, label %for.body74, label %for.cond375.preheader

for.cond324.preheader:                            ; preds = %if.end315
  %index341 = getelementptr inbounds %struct.basic_block_def* %26, i64 0, i32 11
  br label %for.cond324

for.cond324:                                      ; preds = %for.cond324.preheader, %if.end347
  %81 = phi %struct.rtx_def* [ %86, %if.end347 ], [ %79, %for.cond324.preheader ]
  %err.18 = phi i32 [ %err.19, %if.end347 ], [ %err.17, %for.cond324.preheader ]
  %x.3.pn = phi %struct.rtx_def* [ %x.4, %if.end347 ], [ %x.3, %for.cond324.preheader ]
  %x.4.in.in = getelementptr inbounds %struct.rtx_def* %x.3.pn, i64 0, i32 1, i64 2
  %x.4.in = bitcast %union.rtunion_def* %x.4.in.in to %struct.rtx_def**
  %x.4 = load %struct.rtx_def** %x.4.in, align 8
  %tobool325 = icmp eq %struct.rtx_def* %x.4, null
  br i1 %tobool325, label %for.cond71.backedge, label %for.body326

for.body326:                                      ; preds = %for.cond324
  %82 = getelementptr inbounds %struct.rtx_def* %x.4, i64 0, i32 0
  %bf.load327 = load i32* %82, align 8
  %bf.clear328 = and i32 %bf.load327, 65535
  %cmp329 = icmp eq i32 %bf.clear328, 37
  br i1 %cmp329, label %land.lhs.true331, label %if.end342

land.lhs.true331:                                 ; preds = %for.body326
  %arrayidx333 = getelementptr inbounds %struct.rtx_def* %x.4, i64 0, i32 1, i64 4
  %rtint334 = bitcast %union.rtunion_def* %arrayidx333 to i32*
  %83 = load i32* %rtint334, align 4, !tbaa !12
  %cmp335 = icmp eq i32 %83, -80
  br i1 %cmp335, label %if.then337, label %if.end342

if.then337:                                       ; preds = %land.lhs.true331
  %arrayidx339 = getelementptr inbounds %struct.rtx_def* %x.4, i64 0, i32 1, i64 0
  %rtint340 = bitcast %union.rtunion_def* %arrayidx339 to i32*
  %84 = load i32* %rtint340, align 4, !tbaa !12
  %85 = load i32* %index341, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([53 x i8]* @.str31, i64 0, i64 0), i32 %84, i32 %85) #4
  %.pre795 = load %struct.rtx_def** %end229, align 8, !tbaa !18
  br label %if.end342

if.end342:                                        ; preds = %if.then337, %land.lhs.true331, %for.body326
  %86 = phi %struct.rtx_def* [ %.pre795, %if.then337 ], [ %81, %land.lhs.true331 ], [ %81, %for.body326 ]
  %err.19 = phi i32 [ 1, %if.then337 ], [ %err.18, %land.lhs.true331 ], [ %err.18, %for.body326 ]
  %cmp344 = icmp eq %struct.rtx_def* %x.4, %86
  br i1 %cmp344, label %for.cond71.backedge, label %if.end347

if.end347:                                        ; preds = %if.end342
  %bf.load348 = load i32* %82, align 8
  %bf.clear349 = and i32 %bf.load348, 65535
  switch i32 %bf.clear349, label %for.cond324 [
    i32 33, label %if.then362
    i32 36, label %if.then362
    i32 35, label %if.then362
  ]

if.then362:                                       ; preds = %if.end347, %if.end347, %if.end347
  %87 = load i32* %index341, align 4, !tbaa !19
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([19 x i8]* @.str32, i64 0, i64 0), i32 %87) #4
  tail call void @_fatal_insn(i8* getelementptr inbounds ([39 x i8]* @.str33, i64 0, i64 0), %struct.rtx_def* %x.4, i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1829, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.verify_flow_info, i64 0, i64 0)) #5
  unreachable

for.cond387.preheader:                            ; preds = %for.body377, %for.cond375.preheader
  %e374.1713 = load %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 4), align 8
  %tobool388714 = icmp eq %struct.edge_def* %e374.1713, null
  br i1 %tobool388714, label %for.cond399.preheader, label %for.body389

for.body377:                                      ; preds = %for.cond375.preheader, %for.body377
  %e374.0718 = phi %struct.edge_def* [ %e374.0, %for.body377 ], [ %e374.0716, %for.cond375.preheader ]
  %88 = ptrtoint %struct.edge_def* %e374.0718 to i64
  %dest378 = getelementptr inbounds %struct.edge_def* %e374.0718, i64 0, i32 3
  %89 = load %struct.basic_block_def** %dest378, align 8, !tbaa !38
  %index379 = getelementptr inbounds %struct.basic_block_def* %89, i64 0, i32 11
  %90 = load i32* %index379, align 4, !tbaa !19
  %add380 = add nsw i32 %90, 2
  %idxprom381 = sext i32 %add380 to i64
  %arrayidx382 = getelementptr inbounds i64* %4, i64 %idxprom381
  %91 = load i64* %arrayidx382, align 8, !tbaa !48
  %add383 = add i64 %91, %88
  store i64 %add383, i64* %arrayidx382, align 8, !tbaa !48
  %succ_next385 = getelementptr inbounds %struct.edge_def* %e374.0718, i64 0, i32 1
  %e374.0 = load %struct.edge_def** %succ_next385, align 8
  %tobool376 = icmp eq %struct.edge_def* %e374.0, null
  br i1 %tobool376, label %for.cond387.preheader, label %for.body377

for.cond399.preheader:                            ; preds = %for.body389, %for.cond387.preheader
  %92 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %cmp400709 = icmp sgt i32 %92, -2
  br i1 %cmp400709, label %for.body402, label %for.cond411.preheader

for.body389:                                      ; preds = %for.cond387.preheader, %for.body389
  %e374.1715 = phi %struct.edge_def* [ %e374.1, %for.body389 ], [ %e374.1713, %for.cond387.preheader ]
  %93 = ptrtoint %struct.edge_def* %e374.1715 to i64
  %dest390 = getelementptr inbounds %struct.edge_def* %e374.1715, i64 0, i32 3
  %94 = load %struct.basic_block_def** %dest390, align 8, !tbaa !38
  %index391 = getelementptr inbounds %struct.basic_block_def* %94, i64 0, i32 11
  %95 = load i32* %index391, align 4, !tbaa !19
  %add392 = add nsw i32 %95, 2
  %idxprom393 = sext i32 %add392 to i64
  %arrayidx394 = getelementptr inbounds i64* %4, i64 %idxprom393
  %96 = load i64* %arrayidx394, align 8, !tbaa !48
  %sub395 = sub i64 %96, %93
  store i64 %sub395, i64* %arrayidx394, align 8, !tbaa !48
  %pred_next397 = getelementptr inbounds %struct.edge_def* %e374.1715, i64 0, i32 0
  %e374.1 = load %struct.edge_def** %pred_next397, align 8
  %tobool388 = icmp eq %struct.edge_def* %e374.1, null
  br i1 %tobool388, label %for.cond399.preheader, label %for.body389

for.cond411.preheader:                            ; preds = %for.inc409, %for.cond399.preheader
  %97 = phi i32 [ %92, %for.cond399.preheader ], [ %102, %for.inc409 ]
  %err.21.lcssa = phi i32 [ %err.5.lcssa, %for.cond399.preheader ], [ %err.22, %for.inc409 ]
  %tobool412705 = icmp eq %struct.rtx_def* %call1, null
  br i1 %tobool412705, label %for.end525, label %for.body413

for.body402:                                      ; preds = %for.cond399.preheader, %for.inc409
  %98 = phi i32 [ %102, %for.inc409 ], [ %92, %for.cond399.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc409 ], [ -2, %for.cond399.preheader ]
  %err.21710 = phi i32 [ %err.22, %for.inc409 ], [ %err.5.lcssa, %for.cond399.preheader ]
  %99 = add nsw i64 %indvars.iv, 2
  %arrayidx405 = getelementptr inbounds i64* %4, i64 %99
  %100 = load i64* %arrayidx405, align 8, !tbaa !48
  %tobool406 = icmp eq i64 %100, 0
  br i1 %tobool406, label %for.inc409, label %if.then407

if.then407:                                       ; preds = %for.body402
  %101 = trunc i64 %indvars.iv to i32
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([40 x i8]* @.str34, i64 0, i64 0), i32 %101) #4
  %.pre791 = load i32* @n_basic_blocks, align 4, !tbaa !12
  br label %for.inc409

for.inc409:                                       ; preds = %for.body402, %if.then407
  %102 = phi i32 [ %.pre791, %if.then407 ], [ %98, %for.body402 ]
  %err.22 = phi i32 [ 1, %if.then407 ], [ %err.21710, %for.body402 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %103 = trunc i64 %indvars.iv.next to i32
  %cmp400 = icmp slt i32 %103, %102
  br i1 %cmp400, label %for.body402, label %for.cond411.preheader

for.body413:                                      ; preds = %for.cond411.preheader, %for.inc521
  %x.5708 = phi %struct.rtx_def* [ %118, %for.inc521 ], [ %call1, %for.cond411.preheader ]
  %last_bb_num_seen.0707 = phi i32 [ %last_bb_num_seen.1, %for.inc521 ], [ -1, %for.cond411.preheader ]
  %num_bb_notes.0706 = phi i32 [ %num_bb_notes.1, %for.inc521 ], [ 0, %for.cond411.preheader ]
  %104 = getelementptr inbounds %struct.rtx_def* %x.5708, i64 0, i32 0
  %bf.load414 = load i32* %104, align 8
  %bf.clear415 = and i32 %bf.load414, 65535
  %cmp416 = icmp eq i32 %bf.clear415, 37
  br i1 %cmp416, label %land.lhs.true418, label %if.end437

land.lhs.true418:                                 ; preds = %for.body413
  %arrayidx420 = getelementptr inbounds %struct.rtx_def* %x.5708, i64 0, i32 1, i64 4
  %rtint421 = bitcast %union.rtunion_def* %arrayidx420 to i32*
  %105 = load i32* %rtint421, align 4, !tbaa !12
  %cmp422 = icmp eq i32 %105, -80
  br i1 %cmp422, label %if.then424, label %if.end437

if.then424:                                       ; preds = %land.lhs.true418
  %arrayidx427 = getelementptr inbounds %struct.rtx_def* %x.5708, i64 0, i32 1, i64 3
  %bb428 = bitcast %union.rtunion_def* %arrayidx427 to %struct.basic_block_def**
  %106 = load %struct.basic_block_def** %bb428, align 8, !tbaa !1
  %index430 = getelementptr inbounds %struct.basic_block_def* %106, i64 0, i32 11
  %107 = load i32* %index430, align 4, !tbaa !19
  %add431 = add nsw i32 %last_bb_num_seen.0707, 1
  %cmp432 = icmp eq i32 %107, %add431
  br i1 %cmp432, label %if.end435, label %if.then434

if.then434:                                       ; preds = %if.then424
  tail call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([40 x i8]* @.str35, i64 0, i64 0)) #5
  unreachable

if.end435:                                        ; preds = %if.then424
  %inc429 = add nsw i32 %num_bb_notes.0706, 1
  br label %if.end437

if.end437:                                        ; preds = %if.end435, %land.lhs.true418, %for.body413
  %num_bb_notes.1 = phi i32 [ %inc429, %if.end435 ], [ %num_bb_notes.0706, %land.lhs.true418 ], [ %num_bb_notes.0706, %for.body413 ]
  %last_bb_num_seen.1 = phi i32 [ %107, %if.end435 ], [ %last_bb_num_seen.0707, %land.lhs.true418 ], [ %last_bb_num_seen.0707, %for.body413 ]
  %fld438 = getelementptr inbounds %struct.rtx_def* %x.5708, i64 0, i32 1
  %rtint440 = bitcast [1 x %union.rtunion_def]* %fld438 to i32*
  %108 = load i32* %rtint440, align 4, !tbaa !12
  %idxprom441 = sext i32 %108 to i64
  %arrayidx442 = getelementptr inbounds %struct.basic_block_def** %0, i64 %idxprom441
  %109 = load %struct.basic_block_def** %arrayidx442, align 8, !tbaa !1
  %tobool443 = icmp eq %struct.basic_block_def* %109, null
  br i1 %tobool443, label %if.then444, label %if.end487

if.then444:                                       ; preds = %if.end437
  switch i32 %bf.clear415, label %sw.default [
    i32 35, label %if.end487
    i32 37, label %if.end487
    i32 36, label %sw.bb447
  ]

sw.bb447:                                         ; preds = %if.then444
  %arrayidx449 = getelementptr inbounds %struct.rtx_def* %x.5708, i64 0, i32 1, i64 2
  %rtx450 = bitcast %union.rtunion_def* %arrayidx449 to %struct.rtx_def**
  %110 = load %struct.rtx_def** %rtx450, align 8, !tbaa !1
  %tobool451 = icmp eq %struct.rtx_def* %110, null
  br i1 %tobool451, label %if.end487, label %land.lhs.true452

land.lhs.true452:                                 ; preds = %sw.bb447
  %111 = getelementptr inbounds %struct.rtx_def* %110, i64 0, i32 0
  %bf.load456 = load i32* %111, align 8
  %bf.clear457 = and i32 %bf.load456, 65535
  %cmp458 = icmp eq i32 %bf.clear457, 33
  br i1 %cmp458, label %land.lhs.true460, label %if.end487

land.lhs.true460:                                 ; preds = %land.lhs.true452
  %arrayidx465 = getelementptr inbounds %struct.rtx_def* %110, i64 0, i32 1, i64 3
  %rtx466 = bitcast %union.rtunion_def* %arrayidx465 to %struct.rtx_def**
  %112 = load %struct.rtx_def** %rtx466, align 8, !tbaa !1
  %113 = getelementptr inbounds %struct.rtx_def* %112, i64 0, i32 0
  %bf.load467 = load i32* %113, align 8
  %114 = and i32 %bf.load467, 65534
  %switch = icmp eq i32 %114, 44
  %.x.5 = select i1 %switch, %struct.rtx_def* %110, %struct.rtx_def* %x.5708
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %.x.5, i64 0, i32 0
  %bf.load488.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end487

sw.default:                                       ; preds = %if.then444
  tail call void @_fatal_insn(i8* getelementptr inbounds ([25 x i8]* @.str36, i64 0, i64 0), %struct.rtx_def* %x.5708, i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1887, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.verify_flow_info, i64 0, i64 0)) #5
  unreachable

if.end487:                                        ; preds = %land.lhs.true460, %sw.bb447, %if.end437, %if.then444, %if.then444, %land.lhs.true452
  %bf.load488 = phi i32 [ %bf.load414, %if.end437 ], [ %bf.load414, %land.lhs.true452 ], [ %bf.load414, %sw.bb447 ], [ %bf.load414, %if.then444 ], [ %bf.load414, %if.then444 ], [ %bf.load488.pre, %land.lhs.true460 ]
  %x.6 = phi %struct.rtx_def* [ %x.5708, %if.end437 ], [ %x.5708, %land.lhs.true452 ], [ %x.5708, %sw.bb447 ], [ %x.5708, %if.then444 ], [ %x.5708, %if.then444 ], [ %.x.5, %land.lhs.true460 ]
  %bf.clear489 = and i32 %bf.load488, 65535
  %idxprom490686 = zext i32 %bf.clear489 to i64
  %arrayidx491 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom490686
  %115 = load i8* %arrayidx491, align 1, !tbaa !40
  %cmp493 = icmp eq i8 %115, 105
  %cmp498 = icmp eq i32 %bf.clear489, 33
  %or.cond688 = and i1 %cmp493, %cmp498
  br i1 %or.cond688, label %land.lhs.true500, label %for.inc521

land.lhs.true500:                                 ; preds = %if.end487
  %call501 = tail call i32 @returnjump_p(%struct.rtx_def* %x.6) #4
  %tobool502 = icmp eq i32 %call501, 0
  br i1 %tobool502, label %for.inc521, label %land.lhs.true503

land.lhs.true503:                                 ; preds = %land.lhs.true500
  %call504 = tail call i32 @condjump_p(%struct.rtx_def* %x.6) #4
  %tobool505 = icmp eq i32 %call504, 0
  br i1 %tobool505, label %land.lhs.true506, label %for.inc521

land.lhs.true506:                                 ; preds = %land.lhs.true503
  %arrayidx508 = getelementptr inbounds %struct.rtx_def* %x.6, i64 0, i32 1, i64 2
  %rtx509 = bitcast %union.rtunion_def* %arrayidx508 to %struct.rtx_def**
  %116 = load %struct.rtx_def** %rtx509, align 8, !tbaa !1
  %tobool510 = icmp eq %struct.rtx_def* %116, null
  br i1 %tobool510, label %if.then519, label %land.lhs.true511

land.lhs.true511:                                 ; preds = %land.lhs.true506
  %117 = getelementptr inbounds %struct.rtx_def* %116, i64 0, i32 0
  %bf.load515 = load i32* %117, align 8
  %bf.clear516 = and i32 %bf.load515, 65535
  %cmp517 = icmp eq i32 %bf.clear516, 35
  br i1 %cmp517, label %for.inc521, label %if.then519

if.then519:                                       ; preds = %land.lhs.true506, %land.lhs.true511
  tail call void @_fatal_insn(i8* getelementptr inbounds ([31 x i8]* @.str37, i64 0, i64 0), %struct.rtx_def* %x.6, i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 1895, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.verify_flow_info, i64 0, i64 0)) #5
  unreachable

for.inc521:                                       ; preds = %land.lhs.true503, %land.lhs.true500, %if.end487, %land.lhs.true511
  %arrayidx523 = getelementptr inbounds %struct.rtx_def* %x.6, i64 0, i32 1, i64 2
  %rtx524 = bitcast %union.rtunion_def* %arrayidx523 to %struct.rtx_def**
  %118 = load %struct.rtx_def** %rtx524, align 8, !tbaa !1
  %tobool412 = icmp eq %struct.rtx_def* %118, null
  br i1 %tobool412, label %for.cond411.for.end525_crit_edge, label %for.body413

for.cond411.for.end525_crit_edge:                 ; preds = %for.inc521
  %.pre789 = load i32* @n_basic_blocks, align 4, !tbaa !12
  br label %for.end525

for.end525:                                       ; preds = %for.cond411.for.end525_crit_edge, %for.cond411.preheader
  %119 = phi i32 [ %.pre789, %for.cond411.for.end525_crit_edge ], [ %97, %for.cond411.preheader ]
  %num_bb_notes.0.lcssa = phi i32 [ %num_bb_notes.1, %for.cond411.for.end525_crit_edge ], [ 0, %for.cond411.preheader ]
  %cmp526 = icmp eq i32 %num_bb_notes.0.lcssa, %119
  br i1 %cmp526, label %if.end529, label %if.then528

if.then528:                                       ; preds = %for.end525
  tail call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([61 x i8]* @.str38, i64 0, i64 0), i32 %num_bb_notes.0.lcssa, i32 %119) #5
  unreachable

if.end529:                                        ; preds = %for.end525
  %tobool530 = icmp eq i32 %err.21.lcssa, 0
  br i1 %tobool530, label %if.end532, label %if.then531

if.then531:                                       ; preds = %if.end529
  tail call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([24 x i8]* @.str39, i64 0, i64 0)) #5
  unreachable

if.end532:                                        ; preds = %if.end529
  tail call void @free(i8* %call3)
  tail call void @free(i8* %call5)
  tail call void @free(i8* %call8)
  ret void
}

declare void @error(i8*, ...) #1

; Function Attrs: noreturn
declare void @_fatal_insn(i8*, %struct.rtx_def*, i8*, i32, i8*) #2

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #3

declare void @debug_rtx(%struct.rtx_def*) #1

; Function Attrs: noreturn
declare void @internal_error(i8*, ...) #2

declare i32 @condjump_p(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @purge_dead_edges(%struct.basic_block_def* nocapture readonly %bb) #0 {
entry:
  %end = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 1
  %0 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %entry
  %call = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %0, i32 23, %struct.rtx_def* null) #4
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %if.end12, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call1 = tail call i32 @may_trap_p(%struct.rtx_def* %2) #4
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %call3 = tail call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %0) #4
  %tobool4 = icmp eq %struct.rtx_def* %call3, null
  br i1 %tobool4, label %if.end12, label %land.lhs.true5

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %call3, i64 0, i32 1, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx8, align 8, !tbaa !1
  %call9 = tail call i32 @may_trap_p(%struct.rtx_def* %3) #4
  %tobool10 = icmp eq i32 %call9, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true5, %if.then
  tail call void @remove_note(%struct.rtx_def* %0, %struct.rtx_def* %call) #4
  br label %if.end12

if.end12:                                         ; preds = %land.lhs.true5, %lor.lhs.false, %land.lhs.true, %if.then11, %entry
  %4 = load %struct.rtx_def** %end, align 8, !tbaa !18
  %call14 = tail call zeroext i1 @can_throw_internal(%struct.rtx_def* %4) #4
  br i1 %call14, label %if.end20, label %if.then15

if.then15:                                        ; preds = %if.end12
  %succ = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 5
  %5 = load %struct.edge_def** %succ, align 8, !tbaa !24
  br label %for.cond.outer

for.cond.outer:                                   ; preds = %if.then18, %if.then15
  %purged.0.ph = phi i8 [ 0, %if.then15 ], [ 1, %if.then18 ]
  %e.0.ph = phi %struct.edge_def* [ %5, %if.then15 ], [ %6, %if.then18 ]
  br label %for.cond

for.cond:                                         ; preds = %for.cond.outer, %for.body
  %e.0 = phi %struct.edge_def* [ %6, %for.body ], [ %e.0.ph, %for.cond.outer ]
  %tobool16 = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool16, label %if.end20, label %for.body

for.body:                                         ; preds = %for.cond
  %succ_next = getelementptr inbounds %struct.edge_def* %e.0, i64 0, i32 1
  %6 = load %struct.edge_def** %succ_next, align 8, !tbaa !41
  %flags = getelementptr inbounds %struct.edge_def* %e.0, i64 0, i32 6
  %7 = load i32* %flags, align 4, !tbaa !39
  %and = and i32 %7, 8
  %tobool17 = icmp eq i32 %and, 0
  br i1 %tobool17, label %for.cond, label %if.then18

if.then18:                                        ; preds = %for.body
  tail call void @remove_edge(%struct.edge_def* %e.0) #4
  br label %for.cond.outer

if.end20:                                         ; preds = %for.cond, %if.end12
  %purged.2 = phi i8 [ 0, %if.end12 ], [ %purged.0.ph, %for.cond ]
  %bf.load21 = load i32* %1, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 33
  br i1 %cmp23, label %if.then24, label %if.end143

if.then24:                                        ; preds = %if.end20
  %call26 = tail call i32 @any_condjump_p(%struct.rtx_def* %0) #4
  %tobool27 = icmp eq i32 %call26, 0
  br i1 %tobool27, label %land.lhs.true28, label %if.end35

land.lhs.true28:                                  ; preds = %if.then24
  %call29 = tail call i32 @returnjump_p(%struct.rtx_def* %0) #4
  %tobool30 = icmp eq i32 %call29, 0
  br i1 %tobool30, label %land.lhs.true31, label %if.end35

land.lhs.true31:                                  ; preds = %land.lhs.true28
  %call32 = tail call i32 @simplejump_p(%struct.rtx_def* %0) #4
  %tobool33 = icmp eq i32 %call32, 0
  br i1 %tobool33, label %return, label %if.end35

if.end35:                                         ; preds = %land.lhs.true31, %land.lhs.true28, %if.then24
  %succ36 = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 5
  %8 = load %struct.edge_def** %succ36, align 8, !tbaa !24
  %tobool38264267 = icmp eq %struct.edge_def* %8, null
  br i1 %tobool38264267, label %return, label %for.body39.lr.ph.lr.ph

for.body39.lr.ph.lr.ph:                           ; preds = %if.end35
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 7
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  br label %for.body39.lr.ph

for.body39.lr.ph:                                 ; preds = %for.body39.lr.ph.lr.ph, %if.end75
  %e.1.ph269 = phi %struct.edge_def* [ %8, %for.body39.lr.ph.lr.ph ], [ %9, %if.end75 ]
  %purged.3.ph268 = phi i8 [ %purged.2, %for.body39.lr.ph.lr.ph ], [ 1, %if.end75 ]
  br label %for.body39

for.body39:                                       ; preds = %for.body39.lr.ph, %for.cond37.backedge
  %e.1265 = phi %struct.edge_def* [ %e.1.ph269, %for.body39.lr.ph ], [ %9, %for.cond37.backedge ]
  %succ_next40 = getelementptr inbounds %struct.edge_def* %e.1265, i64 0, i32 1
  %9 = load %struct.edge_def** %succ_next40, align 8, !tbaa !41
  %flags41 = getelementptr inbounds %struct.edge_def* %e.1265, i64 0, i32 6
  %10 = load i32* %flags41, align 4, !tbaa !39
  %and42 = and i32 %10, -3
  store i32 %and42, i32* %flags41, align 4, !tbaa !39
  %and44 = and i32 %10, 1
  %tobool45 = icmp eq i32 %and44, 0
  br i1 %tobool45, label %if.else, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %for.body39
  %call47 = tail call i32 @any_condjump_p(%struct.rtx_def* %0) #4
  %tobool48 = icmp eq i32 %call47, 0
  br i1 %tobool48, label %if.else, label %for.cond37.backedge

for.cond37.backedge:                              ; preds = %land.lhs.true46, %land.lhs.true61, %land.lhs.true69, %land.lhs.true51
  %tobool38 = icmp eq %struct.edge_def* %9, null
  br i1 %tobool38, label %for.end77, label %for.body39

if.else:                                          ; preds = %land.lhs.true46, %for.body39
  %dest = getelementptr inbounds %struct.edge_def* %e.1265, i64 0, i32 3
  %11 = load %struct.basic_block_def** %dest, align 8, !tbaa !38
  %cmp50 = icmp eq %struct.basic_block_def* %11, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp50, label %land.lhs.true61, label %land.lhs.true51

land.lhs.true51:                                  ; preds = %if.else
  %head = getelementptr inbounds %struct.basic_block_def* %11, i64 0, i32 0
  %12 = load %struct.rtx_def** %head, align 8, !tbaa !17
  %13 = load %struct.rtx_def** %rtx55, align 8, !tbaa !1
  %cmp56 = icmp eq %struct.rtx_def* %12, %13
  br i1 %cmp56, label %for.cond37.backedge, label %if.else65

land.lhs.true61:                                  ; preds = %if.else
  %call62 = tail call i32 @returnjump_p(%struct.rtx_def* %0) #4
  %tobool63 = icmp eq i32 %call62, 0
  br i1 %tobool63, label %if.else65, label %for.cond37.backedge

if.else65:                                        ; preds = %land.lhs.true51, %land.lhs.true61
  %14 = load i32* %flags41, align 4, !tbaa !39
  %and67 = and i32 %14, 8
  %tobool68 = icmp eq i32 %and67, 0
  br i1 %tobool68, label %if.end75, label %land.lhs.true69

land.lhs.true69:                                  ; preds = %if.else65
  %call70 = tail call zeroext i1 @can_throw_internal(%struct.rtx_def* %0) #4
  br i1 %call70, label %for.cond37.backedge, label %if.end75

if.end75:                                         ; preds = %if.else65, %land.lhs.true69
  tail call void @remove_edge(%struct.edge_def* %e.1265) #4
  %tobool38264 = icmp eq %struct.edge_def* %9, null
  br i1 %tobool38264, label %for.end77, label %for.body39.lr.ph

for.end77:                                        ; preds = %if.end75, %for.cond37.backedge
  %purged.3.ph.lcssa.ph = phi i8 [ %purged.3.ph268, %for.cond37.backedge ], [ 1, %if.end75 ]
  %.pr = load %struct.edge_def** %succ36, align 8, !tbaa !24
  %tobool79 = icmp eq %struct.edge_def* %.pr, null
  %15 = and i8 %purged.3.ph.lcssa.ph, 1
  %tobool81 = icmp eq i8 %15, 0
  %or.cond = or i1 %tobool79, %tobool81
  br i1 %or.cond, label %return, label %if.end83

if.end83:                                         ; preds = %for.end77
  %16 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool84 = icmp eq %struct._IO_FILE* %16, null
  br i1 %tobool84, label %if.end87, label %if.then85

if.then85:                                        ; preds = %if.end83
  %index = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 11
  %17 = load i32* %index, align 4, !tbaa !19
  %call86 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([25 x i8]* @.str40, i64 0, i64 0), i32 %17) #4
  br label %if.end87

if.end87:                                         ; preds = %if.end83, %if.then85
  %18 = load i32* @optimize, align 4, !tbaa !12
  %tobool88 = icmp eq i32 %18, 0
  br i1 %tobool88, label %return, label %if.end91

if.end91:                                         ; preds = %if.end87
  %19 = load %struct.edge_def** %succ36, align 8, !tbaa !24
  %succ_next93 = getelementptr inbounds %struct.edge_def* %19, i64 0, i32 1
  %20 = load %struct.edge_def** %succ_next93, align 8, !tbaa !41
  %tobool94 = icmp eq %struct.edge_def* %20, null
  br i1 %tobool94, label %if.then95, label %if.else99

if.then95:                                        ; preds = %if.end91
  %probability = getelementptr inbounds %struct.edge_def* %19, i64 0, i32 7
  store i32 10000, i32* %probability, align 4, !tbaa !42
  %count = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 13
  %21 = load i64* %count, align 8, !tbaa !25
  %count98 = getelementptr inbounds %struct.edge_def* %19, i64 0, i32 8
  store i64 %21, i64* %count98, align 8, !tbaa !43
  br label %return

if.else99:                                        ; preds = %if.end91
  %call100 = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %0, i32 16, %struct.rtx_def* null) #4
  %tobool101 = icmp eq %struct.rtx_def* %call100, null
  br i1 %tobool101, label %return, label %if.end104

if.end104:                                        ; preds = %if.else99
  %22 = load %struct.edge_def** %succ36, align 8, !tbaa !24
  %flags106 = getelementptr inbounds %struct.edge_def* %22, i64 0, i32 6
  %23 = load i32* %flags106, align 4, !tbaa !39
  %and107 = and i32 %23, 1
  %tobool108 = icmp eq i32 %and107, 0
  %succ_next120 = getelementptr inbounds %struct.edge_def* %22, i64 0, i32 1
  %24 = load %struct.edge_def** %succ_next120, align 8, !tbaa !41
  %. = select i1 %tobool108, %struct.edge_def* %22, %struct.edge_def* %24
  %.284 = select i1 %tobool108, %struct.edge_def* %24, %struct.edge_def* %22
  %arrayidx124 = getelementptr inbounds %struct.rtx_def* %call100, i64 0, i32 1, i64 0
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %25 = load %struct.rtx_def** %rtx125, align 8, !tbaa !1
  %rtwint = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 1, i64 0, i32 0
  %26 = load i64* %rtwint, align 8, !tbaa !47
  %conv = trunc i64 %26 to i32
  %probability128 = getelementptr inbounds %struct.edge_def* %., i64 0, i32 7
  store i32 %conv, i32* %probability128, align 4, !tbaa !42
  %sub = sub nsw i32 10000, %conv
  %probability130 = getelementptr inbounds %struct.edge_def* %.284, i64 0, i32 7
  store i32 %sub, i32* %probability130, align 4, !tbaa !42
  %count131 = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 13
  %27 = load i64* %count131, align 8, !tbaa !25
  %28 = load i32* %probability128, align 4, !tbaa !42
  %conv133 = sext i32 %28 to i64
  %mul = mul nsw i64 %conv133, %27
  %div = sdiv i64 %mul, 10000
  %count134 = getelementptr inbounds %struct.edge_def* %., i64 0, i32 8
  store i64 %div, i64* %count134, align 8, !tbaa !43
  %conv137 = sext i32 %sub to i64
  %mul138 = mul nsw i64 %conv137, %27
  %div139 = sdiv i64 %mul138, 10000
  %count140 = getelementptr inbounds %struct.edge_def* %.284, i64 0, i32 8
  store i64 %div139, i64* %count140, align 8, !tbaa !43
  br label %return

if.end143:                                        ; preds = %if.end20
  %succ144 = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 5
  %e.2271 = load %struct.edge_def** %succ144, align 8
  %tobool146272 = icmp eq %struct.edge_def* %e.2271, null
  br i1 %tobool146272, label %if.then155, label %land.rhs

for.cond145:                                      ; preds = %land.rhs
  %succ_next152 = getelementptr inbounds %struct.edge_def* %e.2273, i64 0, i32 1
  %e.2 = load %struct.edge_def** %succ_next152, align 8
  %tobool146 = icmp eq %struct.edge_def* %e.2, null
  br i1 %tobool146, label %if.then155, label %land.rhs

land.rhs:                                         ; preds = %if.end143, %for.cond145
  %e.2273 = phi %struct.edge_def* [ %e.2, %for.cond145 ], [ %e.2271, %if.end143 ]
  %flags147 = getelementptr inbounds %struct.edge_def* %e.2273, i64 0, i32 6
  %29 = load i32* %flags147, align 4, !tbaa !39
  %and148 = and i32 %29, 15
  %tobool149 = icmp eq i32 %and148, 0
  br i1 %tobool149, label %for.cond159.outer, label %for.cond145

if.then155:                                       ; preds = %for.cond145, %if.end143
  %30 = and i8 %purged.2, 1
  %tobool156 = icmp ne i8 %30, 0
  br label %return

for.cond159.outer:                                ; preds = %land.rhs, %if.then166
  %purged.5.ph = phi i8 [ 1, %if.then166 ], [ %purged.2, %land.rhs ]
  %e.3.ph = phi %struct.edge_def* [ %31, %if.then166 ], [ %e.2271, %land.rhs ]
  br label %for.cond159

for.cond159:                                      ; preds = %for.cond159.outer, %for.body161
  %e.3 = phi %struct.edge_def* [ %31, %for.body161 ], [ %e.3.ph, %for.cond159.outer ]
  %tobool160 = icmp eq %struct.edge_def* %e.3, null
  br i1 %tobool160, label %for.end169, label %for.body161

for.body161:                                      ; preds = %for.cond159
  %succ_next162 = getelementptr inbounds %struct.edge_def* %e.3, i64 0, i32 1
  %31 = load %struct.edge_def** %succ_next162, align 8, !tbaa !41
  %flags163 = getelementptr inbounds %struct.edge_def* %e.3, i64 0, i32 6
  %32 = load i32* %flags163, align 4, !tbaa !39
  %and164 = and i32 %32, 1
  %tobool165 = icmp eq i32 %and164, 0
  br i1 %tobool165, label %if.then166, label %for.cond159

if.then166:                                       ; preds = %for.body161
  tail call void @remove_edge(%struct.edge_def* %e.3) #4
  br label %for.cond159.outer

for.end169:                                       ; preds = %for.cond159
  %33 = load %struct.edge_def** %succ144, align 8, !tbaa !24
  %tobool171 = icmp eq %struct.edge_def* %33, null
  br i1 %tobool171, label %if.then176, label %lor.lhs.false172

lor.lhs.false172:                                 ; preds = %for.end169
  %succ_next174 = getelementptr inbounds %struct.edge_def* %33, i64 0, i32 1
  %34 = load %struct.edge_def** %succ_next174, align 8, !tbaa !41
  %tobool175 = icmp eq %struct.edge_def* %34, null
  br i1 %tobool175, label %if.end177, label %if.then176

if.then176:                                       ; preds = %lor.lhs.false172, %for.end169
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0), i32 2045, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.purge_dead_edges, i64 0, i64 0)) #5
  unreachable

if.end177:                                        ; preds = %lor.lhs.false172
  %probability179 = getelementptr inbounds %struct.edge_def* %33, i64 0, i32 7
  store i32 10000, i32* %probability179, align 4, !tbaa !42
  %count180 = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 13
  %35 = load i64* %count180, align 8, !tbaa !25
  %count182 = getelementptr inbounds %struct.edge_def* %33, i64 0, i32 8
  store i64 %35, i64* %count182, align 8, !tbaa !43
  %36 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool183 = icmp eq %struct._IO_FILE* %36, null
  br i1 %tobool183, label %if.end187, label %if.then184

if.then184:                                       ; preds = %if.end177
  %index185 = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 11
  %37 = load i32* %index185, align 4, !tbaa !19
  %call186 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([38 x i8]* @.str41, i64 0, i64 0), i32 %37) #4
  br label %if.end187

if.end187:                                        ; preds = %if.end177, %if.then184
  %38 = and i8 %purged.5.ph, 1
  %tobool188 = icmp ne i8 %38, 0
  br label %return

return:                                           ; preds = %if.end35, %if.then95, %if.end104, %if.else99, %if.end87, %for.end77, %land.lhs.true31, %if.end187, %if.then155
  %retval.0 = phi i1 [ %tobool188, %if.end187 ], [ %tobool156, %if.then155 ], [ false, %land.lhs.true31 ], [ false, %for.end77 ], [ true, %if.end87 ], [ true, %if.else99 ], [ true, %if.end104 ], [ true, %if.then95 ], [ false, %if.end35 ]
  ret i1 %retval.0
}

declare i32 @may_trap_p(%struct.rtx_def*) #1

declare %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def*) #1

declare void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #1

declare zeroext i1 @can_throw_internal(%struct.rtx_def*) #1

declare i32 @any_condjump_p(%struct.rtx_def*) #1

declare i32 @simplejump_p(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @purge_all_dead_edges(i32 %update_life_p) #0 {
entry:
  %tobool = icmp ne i32 %update_life_p, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %call = tail call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %0) #4
  tail call void @sbitmap_zero(%struct.simple_bitmap_def* %call) #4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %blocks.0 = phi %struct.simple_bitmap_def* [ %call, %if.then ], [ null, %entry ]
  %1 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %cmp34 = icmp sgt i32 %1, 0
  br i1 %cmp34, label %for.body.lr.ph, label %if.end15

for.body.lr.ph:                                   ; preds = %if.end
  br i1 %tobool, label %for.body.us, label %for.inc

for.body.us:                                      ; preds = %for.body.lr.ph, %for.inc.us
  %indvars.iv37 = phi i64 [ %indvars.iv.next38, %for.inc.us ], [ 0, %for.body.lr.ph ]
  %purged.035.us = phi i32 [ %or.us, %for.inc.us ], [ 0, %for.body.lr.ph ]
  %2 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data.us = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 4
  %bb.us = bitcast %union.varray_data_tag* %data.us to [1 x %struct.basic_block_def*]*
  %arrayidx.us = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb.us, i64 0, i64 %indvars.iv37
  %3 = load %struct.basic_block_def** %arrayidx.us, align 8, !tbaa !1
  %call1.us = tail call zeroext i1 @purge_dead_edges(%struct.basic_block_def* %3)
  %conv.us = zext i1 %call1.us to i32
  %or.us = or i32 %conv.us, %purged.035.us
  br i1 %call1.us, label %if.then6.us, label %for.inc.us

if.then6.us:                                      ; preds = %for.body.us
  %rem.us = and i64 %indvars.iv37, 63
  %shl.us = shl i64 1, %rem.us
  %div.us = lshr i64 %indvars.iv37, 6
  %idxprom7.us = and i64 %div.us, 67108863
  %arrayidx8.us = getelementptr inbounds %struct.simple_bitmap_def* %blocks.0, i64 0, i32 3, i64 %idxprom7.us
  %4 = load i64* %arrayidx8.us, align 8, !tbaa !47
  %or9.us = or i64 %4, %shl.us
  store i64 %or9.us, i64* %arrayidx8.us, align 8, !tbaa !47
  br label %for.inc.us

for.inc.us:                                       ; preds = %if.then6.us, %for.body.us
  %indvars.iv.next38 = add nuw nsw i64 %indvars.iv37, 1
  %5 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %6 = trunc i64 %indvars.iv.next38 to i32
  %cmp.us = icmp slt i32 %6, %5
  br i1 %cmp.us, label %for.body.us, label %for.end

for.inc:                                          ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.body.lr.ph ]
  %purged.035 = phi i32 [ %or, %for.inc ], [ 0, %for.body.lr.ph ]
  %7 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 4
  %bb = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb, i64 0, i64 %indvars.iv
  %8 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %call1 = tail call zeroext i1 @purge_dead_edges(%struct.basic_block_def* %8)
  %conv = zext i1 %call1 to i32
  %or = or i32 %conv, %purged.035
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %9 = load i32* @n_basic_blocks, align 4, !tbaa !12
  %10 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %10, %9
  br i1 %cmp, label %for.inc, label %for.end

for.end:                                          ; preds = %for.inc, %for.inc.us
  %purged.0.lcssa = phi i32 [ %or.us, %for.inc.us ], [ %or, %for.inc ]
  %tobool13 = icmp ne i32 %purged.0.lcssa, 0
  %or.cond20 = and i1 %tobool, %tobool13
  br i1 %or.cond20, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.end
  tail call void @update_life_info(%struct.simple_bitmap_def* %blocks.0, i32 1, i32 25) #4
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then14, %for.end
  %tobool1341 = phi i1 [ %tobool13, %if.then14 ], [ %tobool13, %for.end ], [ false, %if.end ]
  br i1 %tobool, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end15
  %11 = bitcast %struct.simple_bitmap_def* %blocks.0 to i8*
  tail call void @free(i8* %11)
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end15
  ret i1 %tobool1341
}

declare %struct.simple_bitmap_def* @sbitmap_alloc(i32) #1

declare void @sbitmap_zero(%struct.simple_bitmap_def*) #1

declare void @update_life_info(%struct.simple_bitmap_def*, i32, i32) #1

declare %struct.rtx_def* @emit_insns_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insns_after(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #1

declare void @find_sub_basic_blocks(%struct.basic_block_def*) #1

declare %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #1

declare void @redirect_edge_pred(%struct.edge_def*, %struct.basic_block_def*) #1

declare i32 @ix86_can_use_return_insn_p() #1

declare %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_return() #1

declare %struct.rtx_def* @gen_jump(%struct.rtx_def*) #1

declare i32 @side_effects_p(%struct.rtx_def*) #1

declare zeroext i1 @can_fallthru(%struct.basic_block_def*, %struct.basic_block_def*) #1

declare i32 @in_expr_list_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }
attributes #6 = { cold }
attributes #7 = { cold nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !2, i64 16}
!6 = metadata !{metadata !"function", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !7, i64 64, metadata !7, i64 68, metadata !7, i64 72, metadata !7, i64 76, metadata !2, i64 80, metadata !8, i64 88, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !7, i64 152, metadata !2, i64 160, metadata !2, i64 168, metadata !2, i64 176, metadata !2, i64 184, metadata !2, i64 192, metadata !2, i64 200, metadata !2, i64 208, metadata !2, i64 216, metadata !2, i64 224, metadata !2, i64 232, metadata !2, i64 240, metadata !2, i64 248, metadata !2, i64 256, metadata !9, i64 264, metadata !2, i64 272, metadata !2, i64 280, metadata !2, i64 288, metadata !2, i64 296, metadata !7, i64 304, metadata !2, i64 312, metadata !2, i64 320, metadata !7, i64 328, metadata !7, i64 332, metadata !7, i64 336, metadata !2, i64 344, metadata !7, i64 352, metadata !7, i64 356, metadata !2, i64 360, metadata !2, i64 368, metadata !2, i64 376, metadata !7, i64 384, metadata !7, i64 388, metadata !2, i64 392, metadata !7, i64 400, metadata !7, i64 404, metadata !2, i64 408, metadata !2, i64 416, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426}
!7 = metadata !{metadata !"int", metadata !3, i64 0}
!8 = metadata !{metadata !"ix86_args", metadata !7, i64 0, metadata !7, i64 4, metadata !7, i64 8, metadata !7, i64 12, metadata !7, i64 16, metadata !7, i64 20, metadata !7, i64 24}
!9 = metadata !{metadata !"long long", metadata !3, i64 0}
!10 = metadata !{metadata !11, metadata !2, i64 32}
!11 = metadata !{metadata !"expr_status", metadata !7, i64 0, metadata !7, i64 4, metadata !7, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40}
!12 = metadata !{metadata !7, metadata !7, i64 0}
!13 = metadata !{metadata !14, metadata !7, i64 0}
!14 = metadata !{metadata !"rtvec_def", metadata !7, i64 0, metadata !3, i64 8}
!15 = metadata !{metadata !16, metadata !2, i64 80}
!16 = metadata !{metadata !"basic_block_def", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !7, i64 88, metadata !7, i64 92, metadata !9, i64 96, metadata !7, i64 104, metadata !7, i64 108}
!17 = metadata !{metadata !16, metadata !2, i64 0}
!18 = metadata !{metadata !16, metadata !2, i64 8}
!19 = metadata !{metadata !16, metadata !7, i64 88}
!20 = metadata !{metadata !21, metadata !22, i64 0}
!21 = metadata !{metadata !"varray_head_tag", metadata !22, i64 0, metadata !22, i64 8, metadata !22, i64 16, metadata !2, i64 24, metadata !3, i64 32}
!22 = metadata !{metadata !"long", metadata !3, i64 0}
!23 = metadata !{metadata !16, metadata !2, i64 32}
!24 = metadata !{metadata !16, metadata !2, i64 40}
!25 = metadata !{metadata !16, metadata !9, i64 96}
!26 = metadata !{metadata !16, metadata !7, i64 104}
!27 = metadata !{metadata !16, metadata !7, i64 92}
!28 = metadata !{metadata !29, metadata !2, i64 16}
!29 = metadata !{metadata !"edge_def", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !7, i64 48, metadata !7, i64 52, metadata !9, i64 56}
!30 = metadata !{metadata !16, metadata !2, i64 64}
!31 = metadata !{metadata !32, metadata !2, i64 32}
!32 = metadata !{metadata !"obstack", metadata !22, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !22, i64 40, metadata !7, i64 48, metadata !2, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !7, i64 80, metadata !7, i64 80, metadata !7, i64 80}
!33 = metadata !{metadata !32, metadata !2, i64 24}
!34 = metadata !{metadata !32, metadata !2, i64 16}
!35 = metadata !{metadata !32, metadata !7, i64 48}
!36 = metadata !{metadata !32, metadata !2, i64 8}
!37 = metadata !{metadata !16, metadata !2, i64 72}
!38 = metadata !{metadata !29, metadata !2, i64 24}
!39 = metadata !{metadata !29, metadata !7, i64 48}
!40 = metadata !{metadata !3, metadata !3, i64 0}
!41 = metadata !{metadata !29, metadata !2, i64 8}
!42 = metadata !{metadata !29, metadata !7, i64 52}
!43 = metadata !{metadata !29, metadata !9, i64 56}
!44 = metadata !{metadata !29, metadata !2, i64 0}
!45 = metadata !{metadata !29, metadata !2, i64 32}
!46 = metadata !{metadata !6, metadata !2, i64 416}
!47 = metadata !{metadata !9, metadata !9, i64 0}
!48 = metadata !{metadata !22, metadata !22, i64 0}
