; ModuleID = 'stor-layout.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.lang_decl = type opaque
%struct.record_layout_info_s = type { %union.tree_node*, %union.tree_node*, i32, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, i32 }
%struct._IO_FILE = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque

@set_alignment = global i32 0, align 4
@reference_types_internal = internal unnamed_addr global i1 false
@pending_sizes = internal global %union.tree_node* null, align 8
@current_function_decl = external global %union.tree_node*
@tree_code_type = external global [256 x i8]
@.str = private unnamed_addr constant [14 x i8] c"stor-layout.c\00", align 1
@__FUNCTION__.put_pending_sizes = private unnamed_addr constant [18 x i8] c"put_pending_sizes\00", align 1
@.str1 = private unnamed_addr constant [40 x i8] c"type size can't be explicitly evaluated\00", align 1
@.str2 = private unnamed_addr constant [52 x i8] c"variable-size type declared outside of any function\00", align 1
@global_trees = external global [51 x %union.tree_node*]
@immediate_size_expand = common global i32 0, align 4
@cfun = external global %struct.function*
@mode_bitsize = external constant [59 x i16]
@class_narrowest_mode = external constant [9 x i32]
@mode_wider_mode = external constant [59 x i8]
@__FUNCTION__.smallest_mode_for_size = private unnamed_addr constant [23 x i8] c"smallest_mode_for_size\00", align 1
@mode_class = external constant [59 x i32]
@__FUNCTION__.int_mode_for_mode = private unnamed_addr constant [18 x i8] c"int_mode_for_mode\00", align 1
@__FUNCTION__.layout_decl = private unnamed_addr constant [12 x i8] c"layout_decl\00", align 1
@sizetype_tab = common global [6 x %union.tree_node*] zeroinitializer, align 16
@maximum_field_alignment = common global i32 0, align 4
@warn_larger_than = external global i32
@larger_than_size = external global i64
@.str3 = private unnamed_addr constant [25 x i8] c"size of `%s' is %d bytes\00", align 1
@.str4 = private unnamed_addr constant [37 x i8] c"size of `%s' is larger than %d bytes\00", align 1
@lang_adjust_rli = global void (%struct.record_layout_info_s*)* null, align 8
@stderr = external constant %struct._IO_FILE*
@.str5 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str6 = private unnamed_addr constant [8 x i8] c"\0Aoffset\00", align 1
@.str7 = private unnamed_addr constant [8 x i8] c" bitpos\00", align 1
@.str8 = private unnamed_addr constant [54 x i8] c"\0Aaligns: rec = %u, unpack = %u, unpad = %u, off = %u\0A\00", align 1
@.str9 = private unnamed_addr constant [25 x i8] c"packed may be necessary\0A\00", align 1
@.str10 = private unnamed_addr constant [18 x i8] c"pending statics:\0A\00", align 1
@targetm = external global %struct.gcc_target
@warn_packed = external global i32
@.str11 = private unnamed_addr constant [41 x i8] c"packed attribute is unnecessary for `%s'\00", align 1
@warn_padded = external global i32
@.str12 = private unnamed_addr constant [29 x i8] c"padding struct to align `%s'\00", align 1
@target_flags = external global i32
@__FUNCTION__.layout_type = private unnamed_addr constant [12 x i8] c"layout_type\00", align 1
@mode_size = external constant [59 x i8]
@ptr_mode = external global i32
@sizetype_set = internal unnamed_addr global i1 false
@early_type_list = internal unnamed_addr global %union.tree_node* null, align 8
@integer_types = external global [11 x %union.tree_node*]
@__FUNCTION__.set_sizetype = private unnamed_addr constant [13 x i8] c"set_sizetype\00", align 1
@.str13 = private unnamed_addr constant [14 x i8] c"bit_size_type\00", align 1
@.str14 = private unnamed_addr constant [42 x i8] c"padding struct size to alignment boundary\00", align 1
@.str15 = private unnamed_addr constant [32 x i8] c"packed attribute is unnecessary\00", align 1

; Function Attrs: nounwind uwtable
define void @internal_reference_types() #0 {
entry:
  store i1 true, i1* @reference_types_internal, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @get_pending_sizes() #0 {
entry:
  %0 = load %union.tree_node** @pending_sizes, align 8, !tbaa !1
  %tobool5 = icmp eq %union.tree_node* %0, null
  br i1 %tobool5, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %t.06 = phi %union.tree_node* [ %5, %for.body ], [ %0, %entry ]
  %1 = load %union.tree_node** @current_function_decl, align 8, !tbaa !1
  %value = getelementptr inbounds %union.tree_node* %t.06, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !5
  %operands = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %4 = bitcast i32* %arrayidx to %union.tree_node**
  store %union.tree_node* %1, %union.tree_node** %4, align 8, !tbaa !1
  %chain1 = getelementptr inbounds %union.tree_node* %t.06, i64 0, i32 0, i32 0, i32 0
  %5 = load %union.tree_node** %chain1, align 8, !tbaa !9
  %tobool = icmp eq %union.tree_node* %5, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  store %union.tree_node* null, %union.tree_node** @pending_sizes, align 8, !tbaa !1
  ret %union.tree_node* %0
}

; Function Attrs: nounwind readonly uwtable
define i32 @is_pending_size(%union.tree_node* readnone %expr) #1 {
entry:
  %t.03 = load %union.tree_node** @pending_sizes, align 8
  %tobool4 = icmp eq %union.tree_node* %t.03, null
  br i1 %tobool4, label %return, label %for.body

for.cond:                                         ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %t.05, i64 0, i32 0, i32 0, i32 0
  %t.0 = load %union.tree_node** %chain, align 8
  %tobool = icmp eq %union.tree_node* %t.0, null
  br i1 %tobool, label %return, label %for.body

for.body:                                         ; preds = %entry, %for.cond
  %t.05 = phi %union.tree_node* [ %t.0, %for.cond ], [ %t.03, %entry ]
  %value = getelementptr inbounds %union.tree_node* %t.05, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !5
  %cmp = icmp eq %union.tree_node* %1, %expr
  br i1 %cmp, label %return, label %for.cond

return:                                           ; preds = %for.body, %for.cond, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %for.body ], [ 0, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @put_pending_size(%union.tree_node* %expr) #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %3, %while.body ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom28 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom28
  %0 = load i8* %arrayidx, align 1, !tbaa !10
  switch i8 %0, label %while.end [
    i8 49, label %while.cond.while.body_crit_edge
    i8 50, label %land.rhs
  ]

while.cond.while.body_crit_edge:                  ; preds = %while.cond
  %operands16.pre = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  br label %while.body

land.rhs:                                         ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx11 = getelementptr inbounds i32* %operands, i64 2
  %1 = bitcast i32* %arrayidx11 to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !1
  %constant_flag = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load13 = load i32* %constant_flag, align 8
  %bf.clear14 = and i32 %bf.load13, 512
  %tobool = icmp eq i32 %bf.clear14, 0
  br i1 %tobool, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.while.body_crit_edge, %land.rhs
  %operands16.pre-phi = phi i32* [ %operands16.pre, %while.cond.while.body_crit_edge ], [ %operands, %land.rhs ]
  %arrayidx17 = bitcast i32* %operands16.pre-phi to %union.tree_node**
  %3 = load %union.tree_node** %arrayidx17, align 8, !tbaa !1
  br label %while.cond

while.end:                                        ; preds = %land.rhs, %while.cond
  %cmp22 = icmp eq i32 %bf.clear, 118
  br i1 %cmp22, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %4 = load %union.tree_node** @pending_sizes, align 8, !tbaa !1
  %call = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %expr.addr.0, %union.tree_node* %4) #6
  store %union.tree_node* %call, %union.tree_node** @pending_sizes, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  ret void
}

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define void @put_pending_sizes(%union.tree_node* %chain) #0 {
entry:
  %0 = load %union.tree_node** @pending_sizes, align 8, !tbaa !1
  %tobool = icmp eq %union.tree_node* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 137, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.put_pending_sizes, i64 0, i64 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  store %union.tree_node* %chain, %union.tree_node** @pending_sizes, align 8, !tbaa !1
  ret void
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #3

; Function Attrs: nounwind uwtable
define %union.tree_node* @variable_size(%union.tree_node* %size) #0 {
entry:
  %constant_flag = getelementptr inbounds %union.tree_node* %size, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %constant_flag, align 8
  %bf.clear = and i32 %bf.load, 512
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %entry
  %call = tail call i32 @global_bindings_p() #6
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %return, label %lor.lhs.false1

lor.lhs.false1:                                   ; preds = %lor.lhs.false
  %call2 = tail call i32 @contains_placeholder_p(%union.tree_node* %size) #6
  %tobool3 = icmp eq i32 %call2, 0
  br i1 %tobool3, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false1
  %call4 = tail call %union.tree_node* @save_expr(%union.tree_node* %size) #6
  %code = getelementptr inbounds %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 2
  %bf.load6 = load i32* %code, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  %cmp8 = icmp eq i32 %bf.clear7, 118
  br i1 %cmp8, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.end
  %bf.set = or i32 %bf.load6, 16384
  store i32 %bf.set, i32* %code, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then9, %if.end
  %call14 = tail call i32 @global_bindings_p() #6
  %tobool15 = icmp eq i32 %call14, 0
  br i1 %tobool15, label %if.end25, label %if.then16

if.then16:                                        ; preds = %if.end13
  %bf.load19 = load i32* %code, align 8
  %bf.clear21 = and i32 %bf.load19, 512
  %tobool22 = icmp eq i32 %bf.clear21, 0
  br i1 %tobool22, label %if.else, label %if.then23

if.then23:                                        ; preds = %if.then16
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([40 x i8]* @.str1, i64 0, i64 0)) #6
  br label %if.end24

if.else:                                          ; preds = %if.then16
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([52 x i8]* @.str2, i64 0, i64 0)) #6
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.then23
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !1
  br label %return

if.end25:                                         ; preds = %if.end13
  %1 = load i32* @immediate_size_expand, align 4, !tbaa !11
  %tobool26 = icmp eq i32 %1, 0
  br i1 %tobool26, label %if.else30, label %if.then27

if.then27:                                        ; preds = %if.end25
  %2 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !1
  %call28 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %2, %struct.rtx_def* null, i32 0, i32 0) #6
  %call29 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call4, %struct.rtx_def* %call28, i32 0, i32 0) #6
  br label %return

if.else30:                                        ; preds = %if.end25
  %3 = load %struct.function** @cfun, align 8, !tbaa !1
  %cmp31 = icmp eq %struct.function* %3, null
  br i1 %cmp31, label %while.cond.i, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else30
  %x_dont_save_pending_sizes_p = getelementptr inbounds %struct.function* %3, i64 0, i32 56
  %4 = bitcast i24* %x_dont_save_pending_sizes_p to i32*
  %bf.load32 = load i32* %4, align 8
  %bf.clear34 = and i32 %bf.load32, 524288
  %tobool35 = icmp eq i32 %bf.clear34, 0
  br i1 %tobool35, label %while.cond.i, label %return

while.cond.i:                                     ; preds = %if.else30, %land.lhs.true, %while.body.i
  %expr.addr.0.i = phi %union.tree_node* [ %8, %while.body.i ], [ %call4, %land.lhs.true ], [ %call4, %if.else30 ]
  %code.i = getelementptr inbounds %union.tree_node* %expr.addr.0.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %idxprom28.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom28.i
  %5 = load i8* %arrayidx.i, align 1, !tbaa !10
  switch i8 %5, label %while.end.i [
    i8 49, label %while.cond.while.body_crit_edge.i
    i8 50, label %land.rhs.i
  ]

while.cond.while.body_crit_edge.i:                ; preds = %while.cond.i
  %operands16.pre.i = getelementptr inbounds %union.tree_node* %expr.addr.0.i, i64 0, i32 0, i32 2
  br label %while.body.i

land.rhs.i:                                       ; preds = %while.cond.i
  %operands.i = getelementptr inbounds %union.tree_node* %expr.addr.0.i, i64 0, i32 0, i32 2
  %arrayidx11.i = getelementptr inbounds i32* %operands.i, i64 2
  %6 = bitcast i32* %arrayidx11.i to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !1
  %constant_flag.i = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load13.i = load i32* %constant_flag.i, align 8
  %bf.clear14.i = and i32 %bf.load13.i, 512
  %tobool.i = icmp eq i32 %bf.clear14.i, 0
  br i1 %tobool.i, label %while.end.i, label %while.body.i

while.body.i:                                     ; preds = %land.rhs.i, %while.cond.while.body_crit_edge.i
  %operands16.pre-phi.i = phi i32* [ %operands16.pre.i, %while.cond.while.body_crit_edge.i ], [ %operands.i, %land.rhs.i ]
  %arrayidx17.i = bitcast i32* %operands16.pre-phi.i to %union.tree_node**
  %8 = load %union.tree_node** %arrayidx17.i, align 8, !tbaa !1
  br label %while.cond.i

while.end.i:                                      ; preds = %land.rhs.i, %while.cond.i
  %cmp22.i = icmp eq i32 %bf.clear.i, 118
  br i1 %cmp22.i, label %if.then.i, label %return

if.then.i:                                        ; preds = %while.end.i
  %9 = load %union.tree_node** @pending_sizes, align 8, !tbaa !1
  %call.i = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %expr.addr.0.i, %union.tree_node* %9) #6
  store %union.tree_node* %call.i, %union.tree_node** @pending_sizes, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %if.then.i, %while.end.i, %if.then27, %land.lhs.true, %lor.lhs.false, %entry, %lor.lhs.false1, %if.end24
  %retval.0 = phi %union.tree_node* [ %0, %if.end24 ], [ %size, %lor.lhs.false1 ], [ %size, %entry ], [ %size, %lor.lhs.false ], [ %call4, %land.lhs.true ], [ %call4, %if.then27 ], [ %call4, %while.end.i ], [ %call4, %if.then.i ]
  ret %union.tree_node* %retval.0
}

declare i32 @global_bindings_p() #2

declare i32 @contains_placeholder_p(%union.tree_node*) #2

declare %union.tree_node* @save_expr(%union.tree_node*) #2

declare void @error(i8*, ...) #2

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #2

; Function Attrs: nounwind readnone uwtable
define i32 @mode_for_size(i32 %size, i32 %class, i32 %limit) #4 {
entry:
  %tobool = icmp eq i32 %limit, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %0 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 5), align 2, !tbaa !12
  %conv = zext i16 %0 to i32
  %cmp = icmp ult i32 %conv, %size
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry, %land.lhs.true
  %idxprom = sext i32 %class to i64
  %arrayidx = getelementptr inbounds [9 x i32]* @class_narrowest_mode, i64 0, i64 %idxprom
  %1 = load i32* %arrayidx, align 4, !tbaa !10
  %cmp217 = icmp eq i32 %1, 0
  br i1 %cmp217, label %return, label %for.body

for.body:                                         ; preds = %if.end, %for.inc
  %mode.018 = phi i32 [ %conv13, %for.inc ], [ %1, %if.end ]
  %idxprom4 = sext i32 %mode.018 to i64
  %arrayidx5 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4
  %2 = load i16* %arrayidx5, align 2, !tbaa !12
  %conv6 = zext i16 %2 to i32
  %cmp7 = icmp eq i32 %conv6, %size
  br i1 %cmp7, label %return, label %for.inc

for.inc:                                          ; preds = %for.body
  %arrayidx12 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4
  %3 = load i8* %arrayidx12, align 1, !tbaa !10
  %conv13 = zext i8 %3 to i32
  %cmp2 = icmp eq i8 %3, 0
  br i1 %cmp2, label %return, label %for.body

return:                                           ; preds = %for.body, %for.inc, %if.end, %land.lhs.true
  %retval.0 = phi i32 [ 51, %land.lhs.true ], [ 51, %if.end ], [ %mode.018, %for.body ], [ 51, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @mode_for_size_tree(%union.tree_node* %size, i32 %class, i32 %limit) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %size, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 25
  br i1 %cmp, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %entry
  %call = tail call i32 @compare_tree_int(%union.tree_node* %size, i64 1000) #6
  %cmp1 = icmp sgt i32 %call, 0
  br i1 %cmp1, label %return, label %if.else

if.else:                                          ; preds = %lor.lhs.false
  %int_cst2 = getelementptr inbounds %union.tree_node* %size, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst2 to i64*
  %0 = load i64* %low, align 8, !tbaa !14
  %conv = trunc i64 %0 to i32
  %tobool.i = icmp eq i32 %limit, 0
  br i1 %tobool.i, label %if.end.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.else
  %1 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 5), align 2, !tbaa !12
  %conv.i = zext i16 %1 to i32
  %cmp.i = icmp ult i32 %conv.i, %conv
  br i1 %cmp.i, label %return, label %if.end.i

if.end.i:                                         ; preds = %land.lhs.true.i, %if.else
  %idxprom.i = sext i32 %class to i64
  %arrayidx.i = getelementptr inbounds [9 x i32]* @class_narrowest_mode, i64 0, i64 %idxprom.i
  %2 = load i32* %arrayidx.i, align 4, !tbaa !10
  %cmp217.i = icmp eq i32 %2, 0
  br i1 %cmp217.i, label %return, label %for.body.i

for.body.i:                                       ; preds = %if.end.i, %for.inc.i
  %mode.018.i = phi i32 [ %conv13.i, %for.inc.i ], [ %2, %if.end.i ]
  %idxprom4.i = sext i32 %mode.018.i to i64
  %arrayidx5.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i
  %3 = load i16* %arrayidx5.i, align 2, !tbaa !12
  %conv6.i = zext i16 %3 to i32
  %cmp7.i = icmp eq i32 %conv6.i, %conv
  br i1 %cmp7.i, label %return, label %for.inc.i

for.inc.i:                                        ; preds = %for.body.i
  %arrayidx12.i = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i
  %4 = load i8* %arrayidx12.i, align 1, !tbaa !10
  %conv13.i = zext i8 %4 to i32
  %cmp2.i = icmp eq i8 %4, 0
  br i1 %cmp2.i, label %return, label %for.body.i

return:                                           ; preds = %for.inc.i, %for.body.i, %if.end.i, %land.lhs.true.i, %lor.lhs.false, %entry
  %retval.0 = phi i32 [ 51, %entry ], [ 51, %lor.lhs.false ], [ 51, %land.lhs.true.i ], [ 51, %if.end.i ], [ 51, %for.inc.i ], [ %mode.018.i, %for.body.i ]
  ret i32 %retval.0
}

declare i32 @compare_tree_int(%union.tree_node*, i64) #2

; Function Attrs: nounwind uwtable
define i32 @smallest_mode_for_size(i32 %size, i32 %class) #0 {
entry:
  %idxprom = sext i32 %class to i64
  %arrayidx = getelementptr inbounds [9 x i32]* @class_narrowest_mode, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !10
  %cmp11 = icmp eq i32 %0, 0
  br i1 %cmp11, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %mode.012 = phi i32 [ %conv7, %for.inc ], [ %0, %entry ]
  %idxprom1 = sext i32 %mode.012 to i64
  %arrayidx2 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom1
  %1 = load i16* %arrayidx2, align 2, !tbaa !12
  %conv = zext i16 %1 to i32
  %cmp3 = icmp ult i32 %conv, %size
  br i1 %cmp3, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  ret i32 %mode.012

for.inc:                                          ; preds = %for.body
  %arrayidx6 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom1
  %2 = load i8* %arrayidx6, align 1, !tbaa !10
  %conv7 = zext i8 %2 to i32
  %cmp = icmp eq i8 %2, 0
  br i1 %cmp, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 259, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.smallest_mode_for_size, i64 0, i64 0)) #7
  unreachable
}

; Function Attrs: nounwind uwtable
define i32 @int_mode_for_mode(i32 %mode) #0 {
entry:
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !10
  switch i32 %0, label %sw.default [
    i32 1, label %sw.epilog
    i32 3, label %sw.epilog
    i32 5, label %sw.bb1
    i32 6, label %sw.bb1
    i32 2, label %sw.bb1
    i32 7, label %sw.bb1
    i32 8, label %sw.bb1
    i32 0, label %sw.bb4
  ]

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry
  %arrayidx3 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %1 = load i16* %arrayidx3, align 2, !tbaa !12
  %2 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp217.i = icmp eq i32 %2, 0
  br i1 %cmp217.i, label %sw.epilog, label %for.body.i

for.body.i:                                       ; preds = %sw.bb1, %for.inc.i
  %mode.018.i = phi i32 [ %conv13.i, %for.inc.i ], [ %2, %sw.bb1 ]
  %idxprom4.i = sext i32 %mode.018.i to i64
  %arrayidx5.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i
  %3 = load i16* %arrayidx5.i, align 2, !tbaa !12
  %cmp7.i = icmp eq i16 %3, %1
  br i1 %cmp7.i, label %sw.epilog, label %for.inc.i

for.inc.i:                                        ; preds = %for.body.i
  %arrayidx12.i = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i
  %4 = load i8* %arrayidx12.i, align 1, !tbaa !10
  %conv13.i = zext i8 %4 to i32
  %cmp2.i = icmp eq i8 %4, 0
  br i1 %cmp2.i, label %sw.epilog, label %for.body.i

sw.bb4:                                           ; preds = %entry
  %cmp = icmp eq i32 %mode, 51
  br i1 %cmp, label %sw.epilog, label %sw.default

sw.default:                                       ; preds = %sw.bb4, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 290, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.int_mode_for_mode, i64 0, i64 0)) #7
  unreachable

sw.epilog:                                        ; preds = %for.inc.i, %for.body.i, %sw.bb1, %sw.bb4, %entry, %entry
  %mode.addr.0 = phi i32 [ 51, %sw.bb4 ], [ %mode, %entry ], [ %mode, %entry ], [ 51, %sw.bb1 ], [ 51, %for.inc.i ], [ %mode.018.i, %for.body.i ]
  ret i32 %mode.addr.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @round_up(%union.tree_node* %value, i32 %divisor) #0 {
entry:
  %conv = sext i32 %divisor to i64
  %type = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !18
  %call = tail call %union.tree_node* @size_int_type_wide(i64 %conv, %union.tree_node* %0) #6
  %call1 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %value, %union.tree_node* %call) #6
  %call2 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1, %union.tree_node* %call) #6
  ret %union.tree_node* %call2
}

declare %union.tree_node* @size_int_type_wide(i64, %union.tree_node*) #2

declare %union.tree_node* @size_binop(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @round_down(%union.tree_node* %value, i32 %divisor) #0 {
entry:
  %conv = sext i32 %divisor to i64
  %type = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !18
  %call = tail call %union.tree_node* @size_int_type_wide(i64 %conv, %union.tree_node* %0) #6
  %call1 = tail call %union.tree_node* @size_binop(i32 64, %union.tree_node* %value, %union.tree_node* %call) #6
  %call2 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1, %union.tree_node* %call) #6
  ret %union.tree_node* %call2
}

; Function Attrs: nounwind uwtable
define void @layout_decl(%union.tree_node* %decl, i32 %known_align) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !18
  %code3 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code3, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %if.end383, label %if.else

if.else:                                          ; preds = %entry
  %1 = and i32 %bf.load, 254
  %bf.clear.cmp = icmp ne i32 %1, 34
  %cmp7 = icmp ne i32 %bf.clear, 36
  %or.cond384 = and i1 %bf.clear.cmp, %cmp7
  %cmp9 = icmp ne i32 %bf.clear, 33
  %or.cond385 = and i1 %or.cond384, %cmp9
  %cmp11 = icmp ne i32 %bf.clear, 37
  %or.cond386 = and i1 %or.cond385, %cmp11
  br i1 %or.cond386, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.else
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 346, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.layout_decl, i64 0, i64 0)) #7
  unreachable

if.end13:                                         ; preds = %if.else
  %2 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !1
  %cmp14 = icmp eq %union.tree_node* %0, %2
  %3 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !1
  %. = select i1 %cmp14, %union.tree_node* %3, %union.tree_node* %0
  %unsigned_flag = getelementptr inbounds %union.tree_node* %., i64 0, i32 0, i32 0, i32 2
  %bf.load18 = load i32* %unsigned_flag, align 8
  %bf.clear19 = and i32 %bf.load18, 8192
  %bf.clear23 = and i32 %bf.load, -8193
  %bf.set = or i32 %bf.clear19, %bf.clear23
  store i32 %bf.set, i32* %code3, align 8
  %mode = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %4 = bitcast i48* %mode to i64*
  %bf.load25 = load i64* %4, align 8
  %bf.cast = and i64 %bf.load25, 255
  %cmp27 = icmp eq i64 %bf.cast, 0
  br i1 %cmp27, label %if.then28, label %if.end40

if.then28:                                        ; preds = %if.end13
  %type29 = bitcast %union.tree_node* %. to %struct.tree_type*
  %mode30 = getelementptr inbounds %struct.tree_type* %type29, i64 0, i32 6
  %bf.load31 = load i32* %mode30, align 4
  %bf.lshr32 = lshr i32 %bf.load31, 9
  %5 = zext i32 %bf.lshr32 to i64
  %bf.value37 = and i64 %5, 127
  %bf.clear38 = and i64 %bf.load25, -256
  %bf.set39 = or i64 %bf.value37, %bf.clear38
  store i64 %bf.set39, i64* %4, align 8
  br label %if.end40

if.end40:                                         ; preds = %if.then28, %if.end13
  %size = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 4
  %6 = load %union.tree_node** %size, align 8, !tbaa !19
  %cmp42 = icmp eq %union.tree_node* %6, null
  br i1 %cmp42, label %if.then43, label %if.else51

if.then43:                                        ; preds = %if.end40
  %size45 = getelementptr inbounds %union.tree_node* %., i64 0, i32 0, i32 2
  %7 = bitcast i32* %size45 to %union.tree_node**
  %8 = load %union.tree_node** %7, align 8, !tbaa !21
  store %union.tree_node* %8, %union.tree_node** %size, align 8, !tbaa !19
  %9 = getelementptr inbounds %union.tree_node* %., i64 0, i32 0, i32 4
  %10 = load %union.tree_node** %9, align 8, !tbaa !23
  %size_unit50 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  store %union.tree_node* %10, %union.tree_node** %size_unit50, align 8, !tbaa !24
  br label %if.end57

if.else51:                                        ; preds = %if.end40
  %11 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %12 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %6, %union.tree_node* %12) #6
  %call54 = tail call %union.tree_node* @convert(%union.tree_node* %11, %union.tree_node* %call) #6
  %size_unit56 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  store %union.tree_node* %call54, %union.tree_node** %size_unit56, align 8, !tbaa !24
  br label %if.end57

if.end57:                                         ; preds = %if.else51, %if.then43
  %13 = phi %union.tree_node* [ %call54, %if.else51 ], [ %10, %if.then43 ]
  %cmp58 = icmp eq i32 %bf.clear, 37
  br i1 %cmp58, label %land.lhs.true59, label %land.lhs.true65

land.lhs.true59:                                  ; preds = %if.end57
  %bf.load61 = load i64* %4, align 8
  %bf.cast64 = and i64 %bf.load61, 4096
  %tobool = icmp eq i64 %bf.cast64, 0
  br i1 %tobool, label %land.lhs.true65, label %if.then101

land.lhs.true65:                                  ; preds = %land.lhs.true59, %if.end57
  %u1 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %14 = bitcast %union.anon* %u1 to i32*
  %bf.load67 = load i32* %14, align 4
  %bf.clear68 = and i32 %bf.load67, 16777215
  %cmp69 = icmp eq i32 %bf.clear68, 0
  br i1 %cmp69, label %land.lhs.true65.if.then86_crit_edge, label %lor.lhs.false

land.lhs.true65.if.then86_crit_edge:              ; preds = %land.lhs.true65
  %align88.phi.trans.insert = getelementptr inbounds %union.tree_node* %., i64 0, i32 0, i32 7
  %.phi.trans.insert = bitcast %union.tree_node** %align88.phi.trans.insert to i32*
  %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !25
  br label %if.then86

lor.lhs.false:                                    ; preds = %land.lhs.true65
  br i1 %cmp58, label %land.lhs.true71, label %land.lhs.true78

land.lhs.true71:                                  ; preds = %lor.lhs.false
  %bf.load73 = load i64* %4, align 8
  %bf.cast76 = and i64 %bf.load73, 1024
  %tobool77 = icmp eq i64 %bf.cast76, 0
  br i1 %tobool77, label %land.lhs.true78, label %if.then101

land.lhs.true78:                                  ; preds = %land.lhs.true71, %lor.lhs.false
  %align = getelementptr inbounds %union.tree_node* %., i64 0, i32 0, i32 7
  %15 = bitcast %union.tree_node** %align to i32*
  %16 = load i32* %15, align 4, !tbaa !25
  %cmp85 = icmp ugt i32 %16, %bf.clear68
  br i1 %cmp85, label %if.then86, label %if.end99

if.then86:                                        ; preds = %land.lhs.true65.if.then86_crit_edge, %land.lhs.true78
  %17 = phi i32 [ %.pre, %land.lhs.true65.if.then86_crit_edge ], [ %16, %land.lhs.true78 ]
  %bf.value93 = and i32 %17, 16777215
  %bf.clear94 = and i32 %bf.load67, -16777216
  %bf.set95 = or i32 %bf.clear94, %bf.value93
  store i32 %bf.set95, i32* %14, align 4
  %bf.load97 = load i64* %4, align 8
  %bf.clear98 = and i64 %bf.load97, -34359738369
  store i64 %bf.clear98, i64* %4, align 8
  br label %if.end99

if.end99:                                         ; preds = %if.then86, %land.lhs.true78
  br i1 %cmp58, label %if.end99.if.then101_crit_edge, label %if.end310

if.end99.if.then101_crit_edge:                    ; preds = %if.end99
  %bf.load104.pre = load i64* %4, align 8
  br label %if.then101

if.then101:                                       ; preds = %if.end99.if.then101_crit_edge, %land.lhs.true71, %land.lhs.true59
  %bf.load186 = phi i64 [ %bf.load104.pre, %if.end99.if.then101_crit_edge ], [ %bf.load73, %land.lhs.true71 ], [ %bf.load61, %land.lhs.true59 ]
  %bf.cast107 = and i64 %bf.load186, 4096
  %tobool108 = icmp ne i64 %bf.cast107, 0
  %cond = select i1 %tobool108, %union.tree_node* %., %union.tree_node* null
  %result = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 11
  store %union.tree_node* %cond, %union.tree_node** %result, align 8, !tbaa !26
  %18 = load i32* @maximum_field_alignment, align 4, !tbaa !11
  %cmp110 = icmp eq i32 %18, 0
  br i1 %cmp110, label %if.else134, label %if.then111

if.then111:                                       ; preds = %if.then101
  %u1113 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %19 = bitcast %union.anon* %u1113 to i32*
  %bf.load115 = load i32* %19, align 4
  %bf.clear116 = and i32 %bf.load115, 16777215
  %cmp117 = icmp ult i32 %bf.clear116, %18
  %bf.clear116. = select i1 %cmp117, i32 %bf.load115, i32 %18
  %bf.value131 = and i32 %bf.clear116., 16777215
  %bf.clear132 = and i32 %bf.load115, -16777216
  %bf.set133 = or i32 %bf.value131, %bf.clear132
  store i32 %bf.set133, i32* %19, align 4
  br label %if.end190

if.else134:                                       ; preds = %if.then101
  %bf.cast140 = and i64 %bf.load186, 1024
  %tobool141 = icmp eq i64 %bf.cast140, 0
  br i1 %tobool141, label %if.end190, label %land.lhs.true142

land.lhs.true142:                                 ; preds = %if.else134
  %bf.cast147 = and i64 %bf.load186, 17179869184
  %tobool148 = icmp ne i64 %bf.cast147, 0
  %cmp152 = icmp eq %union.tree_node* %13, null
  %or.cond485 = or i1 %tobool148, %cmp152
  br i1 %or.cond485, label %if.then161, label %lor.lhs.false153

lor.lhs.false153:                                 ; preds = %land.lhs.true142
  %code157 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load158 = load i32* %code157, align 8
  %bf.clear159 = and i32 %bf.load158, 255
  %cmp160 = icmp eq i32 %bf.clear159, 25
  br i1 %cmp160, label %if.then161, label %if.end190

if.then161:                                       ; preds = %land.lhs.true142, %lor.lhs.false153
  %u1163 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %20 = bitcast %union.anon* %u1163 to i32*
  %bf.load165 = load i32* %20, align 4
  %bf.clear166 = and i32 %bf.load165, 16777215
  %cmp167 = icmp ult i32 %bf.clear166, 8
  %bf.clear166. = select i1 %cmp167, i32 %bf.clear166, i32 8
  %bf.clear182 = and i32 %bf.load165, -16777216
  %bf.set183 = or i32 %bf.clear166., %bf.clear182
  store i32 %bf.set183, i32* %20, align 4
  %bf.clear187 = and i64 %bf.load186, -34359738369
  store i64 %bf.clear187, i64* %4, align 8
  br label %if.end190

if.end190:                                        ; preds = %if.else134, %if.then111, %if.then161, %lor.lhs.false153
  %bf.load195 = phi i64 [ %bf.load186, %if.else134 ], [ %bf.load186, %if.then111 ], [ %bf.clear187, %if.then161 ], [ %bf.load186, %lor.lhs.false153 ]
  br i1 %cmp58, label %land.lhs.true192, label %if.end310

land.lhs.true192:                                 ; preds = %if.end190
  %bf.cast198 = and i64 %bf.load195, 4096
  %tobool199 = icmp eq i64 %bf.cast198, 0
  br i1 %tobool199, label %land.lhs.true266, label %land.lhs.true200

land.lhs.true200:                                 ; preds = %land.lhs.true192
  %type201 = bitcast %union.tree_node* %. to %struct.tree_type*
  %size202 = getelementptr inbounds %union.tree_node* %., i64 0, i32 0, i32 2
  %21 = bitcast i32* %size202 to %union.tree_node**
  %22 = load %union.tree_node** %21, align 8, !tbaa !21
  %cmp203 = icmp eq %union.tree_node* %22, null
  br i1 %cmp203, label %if.end264.land.lhs.true266_crit_edge, label %land.lhs.true204

land.lhs.true204:                                 ; preds = %land.lhs.true200
  %code208 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load209 = load i32* %code208, align 8
  %bf.clear210 = and i32 %bf.load209, 255
  %cmp211 = icmp eq i32 %bf.clear210, 25
  br i1 %cmp211, label %land.lhs.true212, label %if.end264.land.lhs.true266_crit_edge

land.lhs.true212:                                 ; preds = %land.lhs.true204
  %mode214 = getelementptr inbounds %struct.tree_type* %type201, i64 0, i32 6
  %bf.load215 = load i32* %mode214, align 4
  %bf.lshr216 = lshr i32 %bf.load215, 9
  %bf.clear217 = and i32 %bf.lshr216, 127
  %idxprom473 = zext i32 %bf.clear217 to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom473
  %23 = load i32* %arrayidx, align 4, !tbaa !10
  %cmp218 = icmp eq i32 %23, 1
  br i1 %cmp218, label %if.then219, label %if.end264.land.lhs.true266_crit_edge

if.then219:                                       ; preds = %land.lhs.true212
  %24 = load %union.tree_node** %size, align 8, !tbaa !19
  %code.i = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 25
  br i1 %cmp.i, label %lor.lhs.false.i, label %if.end264.land.lhs.true266_crit_edge

lor.lhs.false.i:                                  ; preds = %if.then219
  %call.i = tail call i32 @compare_tree_int(%union.tree_node* %24, i64 1000) #6
  %cmp1.i = icmp sgt i32 %call.i, 0
  br i1 %cmp1.i, label %if.end264.land.lhs.true266_crit_edge, label %if.else.i

if.else.i:                                        ; preds = %lor.lhs.false.i
  %int_cst2.i = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 2
  %low.i = bitcast i32* %int_cst2.i to i64*
  %25 = load i64* %low.i, align 8, !tbaa !14
  %conv.i = trunc i64 %25 to i32
  %26 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 5), align 2, !tbaa !12
  %conv.i.i = zext i16 %26 to i32
  %cmp.i.i = icmp ult i32 %conv.i.i, %conv.i
  br i1 %cmp.i.i, label %if.end264.land.lhs.true266_crit_edge, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.else.i
  %27 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp217.i.i = icmp eq i32 %27, 0
  br i1 %cmp217.i.i, label %if.end264.land.lhs.true266_crit_edge, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i, %for.inc.i.i
  %mode.018.i.i = phi i32 [ %conv13.i.i, %for.inc.i.i ], [ %27, %if.end.i.i ]
  %idxprom4.i.i = sext i32 %mode.018.i.i to i64
  %arrayidx5.i.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i.i
  %28 = load i16* %arrayidx5.i.i, align 2, !tbaa !12
  %conv6.i.i = zext i16 %28 to i32
  %cmp7.i.i = icmp eq i32 %conv6.i.i, %conv.i
  br i1 %cmp7.i.i, label %mode_for_size_tree.exit, label %for.inc.i.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %arrayidx12.i.i = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i.i
  %29 = load i8* %arrayidx12.i.i, align 1, !tbaa !10
  %conv13.i.i = zext i8 %29 to i32
  %cmp2.i.i = icmp eq i8 %29, 0
  br i1 %cmp2.i.i, label %if.end264.land.lhs.true266_crit_edge, label %for.body.i.i

mode_for_size_tree.exit:                          ; preds = %for.body.i.i
  %cmp223 = icmp eq i32 %mode.018.i.i, 51
  br i1 %cmp223, label %if.end264.land.lhs.true266_crit_edge, label %land.lhs.true224

land.lhs.true224:                                 ; preds = %mode_for_size_tree.exit
  %call225 = tail call i32 @get_mode_alignment(i32 %mode.018.i.i) #6
  %cmp226 = icmp ugt i32 %call225, %known_align
  br i1 %cmp226, label %if.end264.land.lhs.true266_crit_edge, label %if.then227

if.then227:                                       ; preds = %land.lhs.true224
  %call228 = tail call i32 @get_mode_alignment(i32 %mode.018.i.i) #6
  %u1230 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %30 = bitcast %union.anon* %u1230 to i32*
  %bf.load232 = load i32* %30, align 4
  %bf.clear233 = and i32 %bf.load232, 16777215
  %cmp234 = icmp ugt i32 %call228, %bf.clear233
  br i1 %cmp234, label %cond.true235, label %cond.end243

cond.true235:                                     ; preds = %if.then227
  %call236 = tail call i32 @get_mode_alignment(i32 %mode.018.i.i) #6
  %bf.load248.pre = load i32* %30, align 4
  br label %cond.end243

cond.end243:                                      ; preds = %if.then227, %cond.true235
  %bf.load248 = phi i32 [ %bf.load248.pre, %cond.true235 ], [ %bf.load232, %if.then227 ]
  %cond244 = phi i32 [ %call236, %cond.true235 ], [ %bf.clear233, %if.then227 ]
  %bf.value249 = and i32 %cond244, 16777215
  %bf.clear250 = and i32 %bf.load248, -16777216
  %bf.set251 = or i32 %bf.clear250, %bf.value249
  store i32 %bf.set251, i32* %30, align 4
  %31 = zext i32 %mode.018.i.i to i64
  %bf.load254 = load i64* %4, align 8
  %bf.value255 = and i64 %31, 255
  %bf.clear256 = and i64 %bf.load254, -4352
  %bf.set257 = or i64 %bf.clear256, %bf.value255
  store i64 %bf.set257, i64* %4, align 8
  br label %if.end264.land.lhs.true266_crit_edge

if.end264.land.lhs.true266_crit_edge:             ; preds = %for.inc.i.i, %land.lhs.true204, %land.lhs.true212, %cond.end243, %land.lhs.true200, %mode_for_size_tree.exit, %land.lhs.true224, %if.then219, %lor.lhs.false.i, %if.else.i, %if.end.i.i
  %bf.load269.pre = load i64* %4, align 8
  br label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end264.land.lhs.true266_crit_edge, %land.lhs.true192
  %bf.load269 = phi i64 [ %bf.load269.pre, %if.end264.land.lhs.true266_crit_edge ], [ %bf.load195, %land.lhs.true192 ]
  %bf.cast272 = and i64 %bf.load269, 4096
  %tobool273 = icmp eq i64 %bf.cast272, 0
  br i1 %tobool273, label %if.end310, label %land.lhs.true274

land.lhs.true274:                                 ; preds = %land.lhs.true266
  %type275 = bitcast %union.tree_node* %. to %struct.tree_type*
  %mode276 = getelementptr inbounds %struct.tree_type* %type275, i64 0, i32 6
  %bf.load277 = load i32* %mode276, align 4
  %bf.clear279 = and i32 %bf.load277, 65024
  %cmp280 = icmp eq i32 %bf.clear279, 26112
  %bf.cast286 = and i64 %bf.load269, 255
  %cmp287 = icmp eq i64 %bf.cast286, 51
  %or.cond = and i1 %cmp280, %cmp287
  br i1 %or.cond, label %land.lhs.true288, label %if.end310

land.lhs.true288:                                 ; preds = %land.lhs.true274
  %align290 = getelementptr inbounds %union.tree_node* %., i64 0, i32 0, i32 7
  %32 = bitcast %union.tree_node** %align290 to i32*
  %33 = load i32* %32, align 4, !tbaa !25
  %cmp291 = icmp ugt i32 %33, %known_align
  br i1 %cmp291, label %if.end310, label %land.lhs.true292

land.lhs.true292:                                 ; preds = %land.lhs.true288
  %u1294 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %34 = bitcast %union.anon* %u1294 to i32*
  %bf.load296 = load i32* %34, align 4
  %bf.clear297 = and i32 %bf.load296, 16777215
  %cmp300 = icmp ult i32 %bf.clear297, %33
  br i1 %cmp300, label %if.end310, label %land.lhs.true301

land.lhs.true301:                                 ; preds = %land.lhs.true292
  %size_unit303 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  %35 = load %union.tree_node** %size_unit303, align 8, !tbaa !24
  %cmp304 = icmp eq %union.tree_node* %35, null
  br i1 %cmp304, label %if.end310, label %if.then305

if.then305:                                       ; preds = %land.lhs.true301
  %bf.clear309 = and i64 %bf.load269, -4097
  store i64 %bf.clear309, i64* %4, align 8
  br label %if.end310

if.end310:                                        ; preds = %if.end190, %if.end99, %land.lhs.true301, %land.lhs.true292, %land.lhs.true288, %land.lhs.true266, %if.then305, %land.lhs.true274
  %36 = load %union.tree_node** %size, align 8, !tbaa !19
  %cmp313 = icmp eq %union.tree_node* %36, null
  br i1 %cmp313, label %if.end328, label %land.lhs.true314

land.lhs.true314:                                 ; preds = %if.end310
  %code318 = getelementptr inbounds %union.tree_node* %36, i64 0, i32 0, i32 0, i32 2
  %bf.load319 = load i32* %code318, align 8
  %bf.clear320 = and i32 %bf.load319, 255
  %cmp321 = icmp eq i32 %bf.clear320, 25
  br i1 %cmp321, label %if.end328, label %if.then322

if.then322:                                       ; preds = %land.lhs.true314
  %call325 = tail call %union.tree_node* @variable_size(%union.tree_node* %36)
  store %union.tree_node* %call325, %union.tree_node** %size, align 8, !tbaa !19
  br label %if.end328

if.end328:                                        ; preds = %land.lhs.true314, %if.end310, %if.then322
  %size_unit330 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  %37 = load %union.tree_node** %size_unit330, align 8, !tbaa !24
  %cmp331 = icmp eq %union.tree_node* %37, null
  br i1 %cmp331, label %if.end346, label %land.lhs.true332

land.lhs.true332:                                 ; preds = %if.end328
  %code336 = getelementptr inbounds %union.tree_node* %37, i64 0, i32 0, i32 0, i32 2
  %bf.load337 = load i32* %code336, align 8
  %bf.clear338 = and i32 %bf.load337, 255
  %cmp339 = icmp eq i32 %bf.clear338, 25
  br i1 %cmp339, label %if.end346, label %if.then340

if.then340:                                       ; preds = %land.lhs.true332
  %call343 = tail call %union.tree_node* @variable_size(%union.tree_node* %37)
  store %union.tree_node* %call343, %union.tree_node** %size_unit330, align 8, !tbaa !24
  br label %if.end346

if.end346:                                        ; preds = %land.lhs.true332, %if.end328, %if.then340
  %38 = phi %union.tree_node* [ %37, %land.lhs.true332 ], [ null, %if.end328 ], [ %call343, %if.then340 ]
  %39 = load i32* @warn_larger_than, align 4, !tbaa !11
  %tobool347 = icmp ne i32 %39, 0
  %40 = icmp eq i32 %1, 34
  %or.cond476 = and i1 %tobool347, %40
  br i1 %or.cond476, label %land.lhs.true352, label %if.end383

land.lhs.true352:                                 ; preds = %if.end346
  %bf.load354 = load i64* %4, align 8
  %bf.cast357 = and i64 %bf.load354, 256
  %tobool358 = icmp ne i64 %bf.cast357, 0
  %cmp363 = icmp eq %union.tree_node* %38, null
  %or.cond486 = or i1 %tobool358, %cmp363
  br i1 %or.cond486, label %if.end383, label %land.lhs.true364

land.lhs.true364:                                 ; preds = %land.lhs.true352
  %code366 = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 0, i32 2
  %bf.load367 = load i32* %code366, align 8
  %bf.clear368 = and i32 %bf.load367, 255
  %cmp369 = icmp eq i32 %bf.clear368, 25
  br i1 %cmp369, label %land.lhs.true370, label %if.end383

land.lhs.true370:                                 ; preds = %land.lhs.true364
  %41 = load i64* @larger_than_size, align 8, !tbaa !27
  %call371 = tail call i32 @compare_tree_int(%union.tree_node* %38, i64 %41) #6
  %cmp372 = icmp sgt i32 %call371, 0
  br i1 %cmp372, label %if.then373, label %if.end383

if.then373:                                       ; preds = %land.lhs.true370
  %int_cst374 = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst374 to i64*
  %42 = load i64* %low, align 8, !tbaa !14
  %conv375 = and i64 %42, 4294967295
  %call376 = tail call i32 @compare_tree_int(%union.tree_node* %38, i64 %conv375) #6
  %cmp377 = icmp eq i32 %call376, 0
  br i1 %cmp377, label %if.then379, label %if.else380

if.then379:                                       ; preds = %if.then373
  %conv = trunc i64 %42 to i32
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([25 x i8]* @.str3, i64 0, i64 0), i32 %conv) #6
  br label %if.end383

if.else380:                                       ; preds = %if.then373
  %43 = load i64* @larger_than_size, align 8, !tbaa !27
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([37 x i8]* @.str4, i64 0, i64 0), i64 %43) #6
  br label %if.end383

if.end383:                                        ; preds = %land.lhs.true352, %if.end346, %land.lhs.true364, %land.lhs.true370, %if.else380, %if.then379, %entry
  ret void
}

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #2

declare i32 @get_mode_alignment(i32) #2

declare void @warning_with_decl(%union.tree_node*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define void @set_lang_adjust_rli(void (%struct.record_layout_info_s*)* %f) #0 {
entry:
  store void (%struct.record_layout_info_s*)* %f, void (%struct.record_layout_info_s*)** @lang_adjust_rli, align 8, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define noalias %struct.record_layout_info_s* @start_record_layout(%union.tree_node* %t) #0 {
entry:
  %call = tail call noalias i8* @xmalloc(i64 72) #6
  %0 = bitcast i8* %call to %struct.record_layout_info_s*
  %t1 = bitcast i8* %call to %union.tree_node**
  store %union.tree_node* %t, %union.tree_node** %t1, align 8, !tbaa !28
  %align = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 7
  %1 = bitcast %union.tree_node** %align to i32*
  %2 = load i32* %1, align 4, !tbaa !25
  %cmp = icmp ult i32 %2, 8
  %. = select i1 %cmp, i32 8, i32 %2
  %record_align = getelementptr inbounds i8* %call, i64 32
  %3 = bitcast i8* %record_align to i32*
  store i32 %., i32* %3, align 4, !tbaa !30
  %unpadded_align = getelementptr inbounds i8* %call, i64 40
  %4 = bitcast i8* %unpadded_align to i32*
  store i32 %., i32* %4, align 4, !tbaa !31
  %unpacked_align = getelementptr inbounds i8* %call, i64 36
  %5 = bitcast i8* %unpacked_align to i32*
  store i32 %., i32* %5, align 4, !tbaa !32
  %cmp6 = icmp ugt i32 %., 128
  %cond11 = select i1 %cmp6, i32 %., i32 128
  %offset_align = getelementptr inbounds i8* %call, i64 16
  %6 = bitcast i8* %offset_align to i32*
  store i32 %cond11, i32* %6, align 4, !tbaa !33
  %7 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !1
  %offset = getelementptr inbounds i8* %call, i64 8
  %8 = bitcast i8* %offset to %union.tree_node**
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !tbaa !34
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !1
  %bitpos = getelementptr inbounds i8* %call, i64 24
  %10 = bitcast i8* %bitpos to %union.tree_node**
  store %union.tree_node* %9, %union.tree_node** %10, align 8, !tbaa !35
  %prev_field = getelementptr inbounds i8* %call, i64 48
  call void @llvm.memset.p0i8.i64(i8* %prev_field, i8 0, i64 20, i32 8, i1 false)
  ret %struct.record_layout_info_s* %0
}

declare noalias i8* @xmalloc(i64) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @bit_from_pos(%union.tree_node* %offset, %union.tree_node* %bitpos) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %call = tail call %union.tree_node* @convert(%union.tree_node* %0, %union.tree_node* %offset) #6
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call1 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call, %union.tree_node* %1) #6
  %call2 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %bitpos, %union.tree_node* %call1) #6
  ret %union.tree_node* %call2
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @byte_from_pos(%union.tree_node* %offset, %union.tree_node* %bitpos) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call = tail call %union.tree_node* @size_binop(i32 62, %union.tree_node* %bitpos, %union.tree_node* %1) #6
  %call1 = tail call %union.tree_node* @convert(%union.tree_node* %0, %union.tree_node* %call) #6
  %call2 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %offset, %union.tree_node* %call1) #6
  ret %union.tree_node* %call2
}

; Function Attrs: nounwind uwtable
define void @pos_from_byte(%union.tree_node** nocapture %poffset, %union.tree_node** nocapture %pbitpos, i32 %off_align, %union.tree_node* %pos) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %div = lshr i32 %off_align, 3
  %conv = zext i32 %div to i64
  %call = tail call %union.tree_node* @size_int_wide(i64 %conv, i32 3) #6
  %call1 = tail call %union.tree_node* @size_binop(i32 64, %union.tree_node* %pos, %union.tree_node* %call) #6
  %call2 = tail call %union.tree_node* @convert(%union.tree_node* %0, %union.tree_node* %call1) #6
  %call5 = tail call %union.tree_node* @size_int_wide(i64 %conv, i32 0) #6
  %call6 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call2, %union.tree_node* %call5) #6
  store %union.tree_node* %call6, %union.tree_node** %poffset, align 8, !tbaa !1
  %call9 = tail call %union.tree_node* @size_int_wide(i64 %conv, i32 3) #6
  %call10 = tail call %union.tree_node* @size_binop(i32 68, %union.tree_node* %pos, %union.tree_node* %call9) #6
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call11 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call10, %union.tree_node* %1) #6
  store %union.tree_node* %call11, %union.tree_node** %pbitpos, align 8, !tbaa !1
  ret void
}

declare %union.tree_node* @size_int_wide(i64, i32) #2

; Function Attrs: nounwind uwtable
define void @pos_from_bit(%union.tree_node** nocapture %poffset, %union.tree_node** nocapture %pbitpos, i32 %off_align, %union.tree_node* %pos) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %conv = zext i32 %off_align to i64
  %call = tail call %union.tree_node* @size_int_wide(i64 %conv, i32 3) #6
  %call1 = tail call %union.tree_node* @size_binop(i32 64, %union.tree_node* %pos, %union.tree_node* %call) #6
  %call2 = tail call %union.tree_node* @convert(%union.tree_node* %0, %union.tree_node* %call1) #6
  %div = lshr i32 %off_align, 3
  %conv3 = zext i32 %div to i64
  %call4 = tail call %union.tree_node* @size_int_wide(i64 %conv3, i32 0) #6
  %call5 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call2, %union.tree_node* %call4) #6
  store %union.tree_node* %call5, %union.tree_node** %poffset, align 8, !tbaa !1
  %call7 = tail call %union.tree_node* @size_int_wide(i64 %conv, i32 3) #6
  %call8 = tail call %union.tree_node* @size_binop(i32 68, %union.tree_node* %pos, %union.tree_node* %call7) #6
  store %union.tree_node* %call8, %union.tree_node** %pbitpos, align 8, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @normalize_offset(%union.tree_node** nocapture %poffset, %union.tree_node** nocapture %pbitpos, i32 %off_align) #0 {
entry:
  %0 = load %union.tree_node** %pbitpos, align 8, !tbaa !1
  %conv = zext i32 %off_align to i64
  %call = tail call i32 @compare_tree_int(%union.tree_node* %0, i64 %conv) #6
  %cmp = icmp sgt i32 %call, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node** %pbitpos, align 8, !tbaa !1
  %call3 = tail call %union.tree_node* @size_int_wide(i64 %conv, i32 3) #6
  %call4 = tail call %union.tree_node* @size_binop(i32 64, %union.tree_node* %1, %union.tree_node* %call3) #6
  %2 = load %union.tree_node** %poffset, align 8, !tbaa !1
  %3 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %call5 = tail call %union.tree_node* @convert(%union.tree_node* %3, %union.tree_node* %call4) #6
  %div = lshr i32 %off_align, 3
  %conv6 = zext i32 %div to i64
  %call7 = tail call %union.tree_node* @size_int_wide(i64 %conv6, i32 0) #6
  %call8 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call5, %union.tree_node* %call7) #6
  %call9 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %2, %union.tree_node* %call8) #6
  store %union.tree_node* %call9, %union.tree_node** %poffset, align 8, !tbaa !1
  %4 = load %union.tree_node** %pbitpos, align 8, !tbaa !1
  %call11 = tail call %union.tree_node* @size_int_wide(i64 %conv, i32 3) #6
  %call12 = tail call %union.tree_node* @size_binop(i32 68, %union.tree_node* %4, %union.tree_node* %call11) #6
  store %union.tree_node* %call12, %union.tree_node** %pbitpos, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @debug_rli(%struct.record_layout_info_s* nocapture readonly %rli) #0 {
entry:
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !1
  %t = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 0
  %1 = load %union.tree_node** %t, align 8, !tbaa !28
  tail call void @print_node_brief(%struct._IO_FILE* %0, i8* getelementptr inbounds ([5 x i8]* @.str5, i64 0, i64 0), %union.tree_node* %1, i32 0) #6
  %offset = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %2 = load %union.tree_node** %offset, align 8, !tbaa !34
  tail call void @print_node_brief(%struct._IO_FILE* %0, i8* getelementptr inbounds ([8 x i8]* @.str6, i64 0, i64 0), %union.tree_node* %2, i32 0) #6
  %bitpos = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 3
  %3 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  tail call void @print_node_brief(%struct._IO_FILE* %0, i8* getelementptr inbounds ([8 x i8]* @.str7, i64 0, i64 0), %union.tree_node* %3, i32 0) #6
  %record_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 4
  %4 = load i32* %record_align, align 4, !tbaa !30
  %unpacked_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 5
  %5 = load i32* %unpacked_align, align 4, !tbaa !32
  %unpadded_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 6
  %6 = load i32* %unpadded_align, align 4, !tbaa !31
  %offset_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 2
  %7 = load i32* %offset_align, align 4, !tbaa !33
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([54 x i8]* @.str8, i64 0, i64 0), i32 %4, i32 %5, i32 %6, i32 %7) #8
  %packed_maybe_necessary = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 9
  %8 = load i32* %packed_maybe_necessary, align 4, !tbaa !36
  %tobool = icmp eq i32 %8, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([25 x i8]* @.str9, i64 0, i64 0), i64 24, i64 1, %struct._IO_FILE* %0) #9
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %pending_statics = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 8
  %10 = load %union.tree_node** %pending_statics, align 8, !tbaa !37
  %tobool2 = icmp eq %union.tree_node* %10, null
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %11 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8]* @.str10, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %0) #9
  %12 = load %union.tree_node** %pending_statics, align 8, !tbaa !37
  tail call void @debug_tree(%union.tree_node* %12) #6
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then3
  ret void
}

declare void @print_node_brief(%struct._IO_FILE*, i8*, %union.tree_node*, i32) #2

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #5

declare void @debug_tree(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define void @normalize_rli(%struct.record_layout_info_s* nocapture %rli) #0 {
entry:
  %offset = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %bitpos = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 3
  %offset_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 2
  %0 = load i32* %offset_align, align 4, !tbaa !33
  tail call void @normalize_offset(%union.tree_node** %offset, %union.tree_node** %bitpos, i32 %0)
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @rli_size_unit_so_far(%struct.record_layout_info_s* nocapture readonly %rli) #0 {
entry:
  %offset = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %0 = load %union.tree_node** %offset, align 8, !tbaa !34
  %bitpos = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 3
  %1 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %2 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %3 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call.i = tail call %union.tree_node* @size_binop(i32 62, %union.tree_node* %1, %union.tree_node* %3) #6
  %call1.i = tail call %union.tree_node* @convert(%union.tree_node* %2, %union.tree_node* %call.i) #6
  %call2.i = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %0, %union.tree_node* %call1.i) #6
  ret %union.tree_node* %call2.i
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @rli_size_so_far(%struct.record_layout_info_s* nocapture readonly %rli) #0 {
entry:
  %offset = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %0 = load %union.tree_node** %offset, align 8, !tbaa !34
  %bitpos = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 3
  %1 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %2 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %call.i = tail call %union.tree_node* @convert(%union.tree_node* %2, %union.tree_node* %0) #6
  %3 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call1.i = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call.i, %union.tree_node* %3) #6
  %call2.i = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %1, %union.tree_node* %call1.i) #6
  ret %union.tree_node* %call2.i
}

; Function Attrs: nounwind uwtable
define void @place_field(%struct.record_layout_info_s* %rli, %union.tree_node* %field) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !18
  %code = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.end759, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %code4 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load5 = load i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 0
  br i1 %cmp7, label %if.end759, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  switch i32 %bf.clear, label %if.end759 [
    i32 34, label %if.then13
    i32 37, label %if.else21
  ]

if.then13:                                        ; preds = %if.end
  %pending_statics = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 8
  %1 = load %union.tree_node** %pending_statics, align 8, !tbaa !37
  %call = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %field, %union.tree_node* %1) #6
  store %union.tree_node* %call, %union.tree_node** %pending_statics, align 8, !tbaa !37
  br label %if.end759

if.else21:                                        ; preds = %if.end
  %t = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 0
  %2 = load %union.tree_node** %t, align 8, !tbaa !28
  %code23 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load24 = load i32* %code23, align 8
  %bf.clear25 = and i32 %bf.load24, 255
  %cmp26 = icmp eq i32 %bf.clear25, 20
  br i1 %cmp26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.else21
  tail call void @layout_decl(%union.tree_node* %field, i32 0) #6
  %3 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !1
  %arguments.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 10
  store %union.tree_node* %3, %union.tree_node** %arguments.i, align 8, !tbaa !38
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !1
  %5 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 19, i32 0
  %.c.i = bitcast %union.tree_node* %4 to %struct.function*
  store %struct.function* %.c.i, %struct.function** %5, align 8, !tbaa !1
  %call.i = tail call i32 @exact_log2_wide(i64 128) #6
  %u1.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 6
  %6 = bitcast %union.anon* %u1.i to i32*
  %bf.load.i = load i32* %6, align 4
  %bf.shl.i = shl i32 %call.i, 24
  %bf.clear.i = and i32 %bf.load.i, 16777215
  %bf.set.i = or i32 %bf.clear.i, %bf.shl.i
  store i32 %bf.set.i, i32* %6, align 4
  %user_align.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 5
  %7 = bitcast i48* %user_align.i to i64*
  %bf.load9.i = load i64* %7, align 8
  %bf.cast.i = and i64 %bf.load9.i, 34359738368
  %tobool.i = icmp eq i64 %bf.cast.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then27
  %call11.i = tail call i32 @x86_field_alignment(%union.tree_node* %field, i32 %bf.clear.i) #6
  %bf.load14.pre.i = load i64* %7, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then27
  %bf.load14.i = phi i64 [ %bf.load9.i, %if.then27 ], [ %bf.load14.pre.i, %if.then.i ]
  %desired_align.0.i = phi i32 [ %bf.clear.i, %if.then27 ], [ %call11.i, %if.then.i ]
  %bf.lshr15.i = lshr i64 %bf.load14.i, 35
  %8 = load %union.tree_node** %t, align 8, !tbaa !28
  %type.i = bitcast %union.tree_node* %8 to %struct.tree_type*
  %user_align19.i = getelementptr inbounds %struct.tree_type* %type.i, i64 0, i32 6
  %bf.load20.i = load i32* %user_align19.i, align 4
  %bf.value23151153.i = shl nuw nsw i64 %bf.lshr15.i, 31
  %bf.value23151.i = trunc i64 %bf.value23151153.i to i32
  %bf.set26.i = or i32 %bf.value23151.i, %bf.load20.i
  store i32 %bf.set26.i, i32* %user_align19.i, align 4
  %record_align.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 4
  %9 = load i32* %record_align.i, align 4, !tbaa !30
  %cmp.i = icmp ugt i32 %9, %desired_align.0.i
  %.desired_align.0.i = select i1 %cmp.i, i32 %9, i32 %desired_align.0.i
  store i32 %.desired_align.0.i, i32* %record_align.i, align 4, !tbaa !30
  %unpadded_align.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 6
  %10 = load i32* %unpadded_align.i, align 4, !tbaa !31
  %cmp29.i = icmp ugt i32 %10, %desired_align.0.i
  %cond34.i = select i1 %cmp29.i, i32 %10, i32 %desired_align.0.i
  store i32 %cond34.i, i32* %unpadded_align.i, align 4, !tbaa !31
  %result.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 11
  %11 = load %union.tree_node** %result.i, align 8, !tbaa !26
  %tobool37.i = icmp eq %union.tree_node* %11, null
  br i1 %tobool37.i, label %if.end84.i, label %if.then38.i

if.then38.i:                                      ; preds = %if.end.i
  %12 = load %union.tree_node** %type1, align 8, !tbaa !18
  %type40.i = bitcast %union.tree_node* %12 to %struct.tree_type*
  %align.i = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 7
  %13 = bitcast %union.tree_node** %align.i to i32*
  %14 = load i32* %13, align 4, !tbaa !25
  %user_align44.i = getelementptr inbounds %struct.tree_type* %type40.i, i64 0, i32 6
  %bf.load45.i = load i32* %user_align44.i, align 4
  %tobool47.i = icmp slt i32 %bf.load45.i, 0
  br i1 %tobool47.i, label %if.end50.i, label %if.then48.i

if.then48.i:                                      ; preds = %if.then38.i
  %call49.i = tail call i32 @x86_field_alignment(%union.tree_node* %field, i32 %14) #6
  %.pre.i = load i32* %record_align.i, align 4, !tbaa !30
  %.pre157.i = load i32* %unpadded_align.i, align 4, !tbaa !31
  %.pre158.i = load %union.tree_node** %type1, align 8, !tbaa !18
  br label %if.end50.i

if.end50.i:                                       ; preds = %if.then48.i, %if.then38.i
  %15 = phi %union.tree_node* [ %12, %if.then38.i ], [ %.pre158.i, %if.then48.i ]
  %16 = phi i32 [ %cond34.i, %if.then38.i ], [ %.pre157.i, %if.then48.i ]
  %17 = phi i32 [ %.desired_align.0.i, %if.then38.i ], [ %.pre.i, %if.then48.i ]
  %type_align.0.i = phi i32 [ %14, %if.then38.i ], [ %call49.i, %if.then48.i ]
  %cmp52.i = icmp ugt i32 %17, %type_align.0.i
  %.type_align.0.i = select i1 %cmp52.i, i32 %17, i32 %type_align.0.i
  store i32 %.type_align.0.i, i32* %record_align.i, align 4, !tbaa !30
  %cmp60.i = icmp ugt i32 %16, %type_align.0.i
  %cond65.i = select i1 %cmp60.i, i32 %16, i32 %type_align.0.i
  store i32 %cond65.i, i32* %unpadded_align.i, align 4, !tbaa !31
  %type69.i = bitcast %union.tree_node* %15 to %struct.tree_type*
  %user_align70.i = getelementptr inbounds %struct.tree_type* %type69.i, i64 0, i32 6
  %bf.load71.i = load i32* %user_align70.i, align 4
  %18 = load %union.tree_node** %t, align 8, !tbaa !28
  %type74.i = bitcast %union.tree_node* %18 to %struct.tree_type*
  %user_align75.i = getelementptr inbounds %struct.tree_type* %type74.i, i64 0, i32 6
  %bf.load76.i = load i32* %user_align75.i, align 4
  %19 = and i32 %bf.load71.i, -2147483648
  %bf.set83.i = or i32 %bf.load76.i, %19
  store i32 %bf.set83.i, i32* %user_align75.i, align 4
  br label %if.end84.i

if.end84.i:                                       ; preds = %if.end50.i, %if.end.i
  %20 = load %union.tree_node** %t, align 8, !tbaa !28
  %code.i = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 2
  %bf.load87.i = load i32* %code.i, align 8
  %bf.clear88.i = and i32 %bf.load87.i, 255
  switch i32 %bf.clear88.i, label %if.end759 [
    i32 21, label %if.then90.i
    i32 22, label %if.then100.i
  ]

if.then90.i:                                      ; preds = %if.end84.i
  %offset.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %21 = load %union.tree_node** %offset.i, align 8, !tbaa !34
  %size_unit.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 7
  %22 = load %union.tree_node** %size_unit.i, align 8, !tbaa !24
  %call92.i = tail call %union.tree_node* @size_binop(i32 79, %union.tree_node* %21, %union.tree_node* %22) #6
  store %union.tree_node* %call92.i, %union.tree_node** %offset.i, align 8, !tbaa !34
  br label %if.end759

if.then100.i:                                     ; preds = %if.end84.i
  %23 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %initial.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 12
  %24 = load %union.tree_node** %initial.i, align 8, !tbaa !39
  %size_unit103.i = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 7
  %25 = load %union.tree_node** %size_unit103.i, align 8, !tbaa !24
  %offset104.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %26 = load %union.tree_node** %offset104.i, align 8, !tbaa !34
  %call105.i = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 51, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %25, %union.tree_node* %26) #6
  %call106.i = tail call %union.tree_node* @fold(%union.tree_node* %call105.i) #6
  store %union.tree_node* %call106.i, %union.tree_node** %offset104.i, align 8, !tbaa !34
  br label %if.end759

if.end30:                                         ; preds = %if.else21
  %bitpos = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 3
  %27 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %call31 = tail call i32 @integer_zerop(%union.tree_node* %27) #6
  %tobool = icmp eq i32 %call31, 0
  br i1 %tobool, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.end30
  %28 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %call34 = tail call i64 @tree_low_cst(%union.tree_node* %28, i32 1) #6
  %29 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %call36 = tail call i64 @tree_low_cst(%union.tree_node* %29, i32 1) #6
  %sub = sub nsw i64 0, %call36
  %and = and i64 %call34, %sub
  %conv = trunc i64 %and to i32
  br label %if.end56

if.else37:                                        ; preds = %if.end30
  %offset = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %30 = load %union.tree_node** %offset, align 8, !tbaa !34
  %call38 = tail call i32 @integer_zerop(%union.tree_node* %30) #6
  %tobool39 = icmp eq i32 %call38, 0
  br i1 %tobool39, label %if.else41, label %if.end56

if.else41:                                        ; preds = %if.else37
  %31 = load %union.tree_node** %offset, align 8, !tbaa !34
  %call43 = tail call i32 @host_integerp(%union.tree_node* %31, i32 1) #6
  %tobool44 = icmp eq i32 %call43, 0
  br i1 %tobool44, label %if.else53, label %if.then45

if.then45:                                        ; preds = %if.else41
  %32 = load %union.tree_node** %offset, align 8, !tbaa !34
  %call47 = tail call i64 @tree_low_cst(%union.tree_node* %32, i32 1) #6
  %33 = load %union.tree_node** %offset, align 8, !tbaa !34
  %call49 = tail call i64 @tree_low_cst(%union.tree_node* %33, i32 1) #6
  %sub50 = sub nsw i64 0, %call49
  %and51 = and i64 %call47, %sub50
  %mul = shl nsw i64 %and51, 3
  %conv52 = trunc i64 %mul to i32
  br label %if.end56

if.else53:                                        ; preds = %if.else41
  %offset_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 2
  %34 = load i32* %offset_align, align 4, !tbaa !33
  br label %if.end56

if.end56:                                         ; preds = %if.else37, %if.else53, %if.then45, %if.then32
  %known_align.0 = phi i32 [ %conv52, %if.then45 ], [ %34, %if.else53 ], [ %conv, %if.then32 ], [ 128, %if.else37 ]
  %u1 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 6
  %35 = bitcast %union.anon* %u1 to i32*
  %bf.load57 = load i32* %35, align 4
  %user_align60 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 5
  %36 = bitcast i48* %user_align60 to i64*
  %bf.load61 = load i64* %36, align 8
  tail call void @layout_decl(%union.tree_node* %field, i32 %known_align.0)
  %bf.load64 = load i64* %36, align 8
  %bf.cast67 = and i64 %bf.load64, 1024
  %tobool68 = icmp eq i64 %bf.cast67, 0
  br i1 %tobool68, label %if.then69, label %if.end81

if.then69:                                        ; preds = %if.end56
  %bf.load73 = load i32* %35, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.end56, %if.then69
  %user_align.0.in.in.in = phi i64 [ %bf.load61, %if.end56 ], [ %bf.load64, %if.then69 ]
  %desired_align.0.in = phi i32 [ %bf.load57, %if.end56 ], [ %bf.load73, %if.then69 ]
  %desired_align.0 = and i32 %desired_align.0.in, 16777215
  %user_align.0.in.in = lshr i64 %user_align.0.in.in.in, 35
  %user_align.0.in = trunc i64 %user_align.0.in.in to i32
  %user_align.0 = and i32 %user_align.0.in, 1
  %tobool82 = icmp eq i32 %user_align.0, 0
  br i1 %tobool82, label %if.then83, label %if.end85

if.then83:                                        ; preds = %if.end81
  %call84 = tail call i32 @x86_field_alignment(%union.tree_node* %field, i32 %desired_align.0) #6
  br label %if.end85

if.end85:                                         ; preds = %if.end81, %if.then83
  %desired_align.1 = phi i32 [ %desired_align.0, %if.end81 ], [ %call84, %if.then83 ]
  %37 = load i1 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 9), align 8, !tbaa !40
  %38 = load %union.tree_node** %t, align 8, !tbaa !28
  %call87 = tail call zeroext i1 %37(%union.tree_node* %38) #6
  %call87.not = xor i1 %call87, true
  %39 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp89 = icmp eq %union.tree_node* %0, %39
  %or.cond975 = or i1 %cmp89, %call87.not
  br i1 %or.cond975, label %if.else134, label %land.lhs.true91

land.lhs.true91:                                  ; preds = %if.end85
  %result = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 11
  %40 = load %union.tree_node** %result, align 8, !tbaa !26
  %tobool93 = icmp eq %union.tree_node* %40, null
  br i1 %tobool93, label %if.else134, label %land.lhs.true94

land.lhs.true94:                                  ; preds = %land.lhs.true91
  %size = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 2
  %41 = bitcast i32* %size to %union.tree_node**
  %42 = load %union.tree_node** %41, align 8, !tbaa !21
  %call96 = tail call i32 @integer_zerop(%union.tree_node* %42) #6
  %tobool97 = icmp eq i32 %call96, 0
  br i1 %tobool97, label %land.lhs.true98, label %if.else134

land.lhs.true98:                                  ; preds = %land.lhs.true94
  %size100 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 4
  %43 = load %union.tree_node** %size100, align 8, !tbaa !19
  %call101 = tail call i32 @integer_zerop(%union.tree_node* %43) #6
  %tobool102 = icmp eq i32 %call101, 0
  br i1 %tobool102, label %if.else134, label %if.then103

if.then103:                                       ; preds = %land.lhs.true98
  %prev_field = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 7
  %44 = load %union.tree_node** %prev_field, align 8, !tbaa !46
  %tobool104 = icmp eq %union.tree_node* %44, null
  br i1 %tobool104, label %if.end308, label %land.lhs.true105

land.lhs.true105:                                 ; preds = %if.then103
  %result108 = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 11
  %45 = load %union.tree_node** %result108, align 8, !tbaa !26
  %tobool109 = icmp eq %union.tree_node* %45, null
  br i1 %tobool109, label %if.end308, label %land.lhs.true110

land.lhs.true110:                                 ; preds = %land.lhs.true105
  %size113 = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 4
  %46 = load %union.tree_node** %size113, align 8, !tbaa !19
  %call114 = tail call i32 @integer_zerop(%union.tree_node* %46) #6
  %tobool115 = icmp eq i32 %call114, 0
  br i1 %tobool115, label %if.then116, label %if.end308

if.then116:                                       ; preds = %land.lhs.true110
  %record_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 4
  %47 = load i32* %record_align, align 4, !tbaa !30
  %cmp117 = icmp ugt i32 %47, %desired_align.1
  %.desired_align.1 = select i1 %cmp117, i32 %47, i32 %desired_align.1
  store i32 %.desired_align.1, i32* %record_align, align 4, !tbaa !30
  %unpacked_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 5
  %48 = load i32* %unpacked_align, align 4, !tbaa !32
  %align = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %49 = bitcast %union.tree_node** %align to i32*
  %50 = load i32* %49, align 4, !tbaa !25
  %cmp122 = icmp ugt i32 %48, %50
  %cond130 = select i1 %cmp122, i32 %48, i32 %50
  store i32 %cond130, i32* %unpacked_align, align 4, !tbaa !32
  br label %if.end308

if.else134:                                       ; preds = %if.end85, %land.lhs.true98, %land.lhs.true94, %land.lhs.true91
  %51 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !1
  %cmp135 = icmp eq %union.tree_node* %0, %51
  br i1 %cmp135, label %if.else265, label %land.lhs.true137

land.lhs.true137:                                 ; preds = %if.else134
  %52 = load i1 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 9), align 8, !tbaa !40
  %53 = load %union.tree_node** %t, align 8, !tbaa !28
  %call139 = tail call zeroext i1 %52(%union.tree_node* %53) #6
  br i1 %call139, label %if.else265, label %land.lhs.true140

land.lhs.true140:                                 ; preds = %land.lhs.true137
  %result142 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 11
  %54 = load %union.tree_node** %result142, align 8, !tbaa !26
  %tobool143 = icmp eq %union.tree_node* %54, null
  br i1 %tobool143, label %if.else265, label %land.lhs.true144

land.lhs.true144:                                 ; preds = %land.lhs.true140
  %type145 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %size146 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 2
  %55 = bitcast i32* %size146 to %union.tree_node**
  %56 = load %union.tree_node** %55, align 8, !tbaa !21
  %call147 = tail call i32 @integer_zerop(%union.tree_node* %56) #6
  %tobool148 = icmp eq i32 %call147, 0
  br i1 %tobool148, label %if.then149, label %if.else265

if.then149:                                       ; preds = %land.lhs.true144
  %size151 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 4
  %57 = load %union.tree_node** %size151, align 8, !tbaa !19
  %call152 = tail call i32 @integer_zerop(%union.tree_node* %57) #6
  %tobool153 = icmp eq i32 %call152, 0
  br i1 %tobool153, label %if.then154, label %if.else164

if.then154:                                       ; preds = %if.then149
  %record_align155 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 4
  %58 = load i32* %record_align155, align 4, !tbaa !30
  %cmp156 = icmp ugt i32 %58, %desired_align.1
  %.desired_align.1976 = select i1 %cmp156, i32 %58, i32 %desired_align.1
  store i32 %.desired_align.1976, i32* %record_align155, align 4, !tbaa !30
  br label %if.end176

if.else164:                                       ; preds = %if.then149
  %bf.load167 = load i64* %36, align 8
  %bf.cast170 = and i64 %bf.load167, 1024
  %tobool171 = icmp eq i64 %bf.cast170, 0
  br i1 %tobool171, label %if.then172, label %if.end176

if.then172:                                       ; preds = %if.else164
  %align174 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %59 = bitcast %union.tree_node** %align174 to i32*
  %60 = load i32* %59, align 4, !tbaa !25
  br label %if.end176

if.end176:                                        ; preds = %if.else164, %if.then172, %if.then154
  %desired_align.2 = phi i32 [ %desired_align.1, %if.else164 ], [ %60, %if.then172 ], [ %desired_align.1, %if.then154 ]
  %name = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 8
  %61 = load %union.tree_node** %name, align 8, !tbaa !47
  %cmp178 = icmp eq %union.tree_node* %61, null
  br i1 %cmp178, label %if.end308, label %if.then180

if.then180:                                       ; preds = %if.end176
  %align182 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %62 = bitcast %union.tree_node** %align182 to i32*
  %63 = load i32* %62, align 4, !tbaa !25
  %user_align184 = getelementptr inbounds %struct.tree_type* %type145, i64 0, i32 6
  %bf.load185 = load i32* %user_align184, align 4
  %tobool187 = icmp slt i32 %bf.load185, 0
  br i1 %tobool187, label %if.end190, label %if.then188

if.then188:                                       ; preds = %if.then180
  %call189 = tail call i32 @x86_field_alignment(%union.tree_node* %field, i32 %63) #6
  br label %if.end190

if.end190:                                        ; preds = %if.then188, %if.then180
  %type_align.0 = phi i32 [ %63, %if.then180 ], [ %call189, %if.then188 ]
  %64 = load i32* @maximum_field_alignment, align 4, !tbaa !11
  %cmp191 = icmp eq i32 %64, 0
  br i1 %cmp191, label %if.else200, label %if.then193

if.then193:                                       ; preds = %if.end190
  %cmp194 = icmp ult i32 %type_align.0, %64
  %cond199 = select i1 %cmp194, i32 %type_align.0, i32 %64
  br label %if.end216

if.else200:                                       ; preds = %if.end190
  %bf.load203 = load i64* %36, align 8
  %bf.cast206 = and i64 %bf.load203, 1024
  %tobool207 = icmp eq i64 %bf.cast206, 0
  br i1 %tobool207, label %if.end216, label %if.then208

if.then208:                                       ; preds = %if.else200
  %cmp209 = icmp ult i32 %type_align.0, 8
  %cond214 = select i1 %cmp209, i32 %type_align.0, i32 8
  br label %if.end216

if.end216:                                        ; preds = %if.else200, %if.then208, %if.then193
  %type_align.1 = phi i32 [ %cond199, %if.then193 ], [ %cond214, %if.then208 ], [ %type_align.0, %if.else200 ]
  %record_align217 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 4
  %65 = load i32* %record_align217, align 4, !tbaa !30
  %cmp218 = icmp ugt i32 %65, %type_align.1
  %.type_align.1 = select i1 %cmp218, i32 %65, i32 %type_align.1
  store i32 %.type_align.1, i32* %record_align217, align 4, !tbaa !30
  %unpadded_align = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 6
  %66 = load i32* %unpadded_align, align 4, !tbaa !31
  %bf.load229 = load i32* %35, align 4
  %bf.clear230 = and i32 %bf.load229, 16777215
  %cmp231 = icmp ugt i32 %66, %bf.clear230
  %cond242 = select i1 %cmp231, i32 %66, i32 %bf.clear230
  store i32 %cond242, i32* %unpadded_align, align 4, !tbaa !31
  %67 = load i32* @warn_packed, align 4, !tbaa !11
  %tobool244 = icmp eq i32 %67, 0
  br i1 %tobool244, label %if.end259, label %if.then245

if.then245:                                       ; preds = %if.end216
  %unpacked_align246 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 5
  %68 = load i32* %unpacked_align246, align 4, !tbaa !32
  %69 = load i32* %62, align 4, !tbaa !25
  %cmp249 = icmp ugt i32 %68, %69
  %. = select i1 %cmp249, i32 %68, i32 %69
  store i32 %., i32* %unpacked_align246, align 4, !tbaa !32
  br label %if.end259

if.end259:                                        ; preds = %if.end216, %if.then245
  %bf.load262 = load i32* %user_align184, align 4
  %bf.lshr263 = lshr i32 %bf.load262, 31
  %or = or i32 %bf.lshr263, %user_align.0
  br label %if.end308

if.else265:                                       ; preds = %land.lhs.true144, %land.lhs.true140, %if.else134, %land.lhs.true137
  %record_align266 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 4
  %70 = load i32* %record_align266, align 4, !tbaa !30
  %cmp267 = icmp ugt i32 %70, %desired_align.1
  %.desired_align.1977 = select i1 %cmp267, i32 %70, i32 %desired_align.1
  store i32 %.desired_align.1977, i32* %record_align266, align 4, !tbaa !30
  %unpacked_align275 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 5
  %71 = load i32* %unpacked_align275, align 4, !tbaa !32
  %align277 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %72 = bitcast %union.tree_node** %align277 to i32*
  %73 = load i32* %72, align 4, !tbaa !25
  %cmp278 = icmp ugt i32 %71, %73
  %cond286 = select i1 %cmp278, i32 %71, i32 %73
  store i32 %cond286, i32* %unpacked_align275, align 4, !tbaa !32
  %unpadded_align288 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 6
  %74 = load i32* %unpadded_align288, align 4, !tbaa !31
  %bf.load292 = load i32* %35, align 4
  %bf.clear293 = and i32 %bf.load292, 16777215
  %cmp294 = icmp ugt i32 %74, %bf.clear293
  %.bf.clear293 = select i1 %cmp294, i32 %74, i32 %bf.clear293
  store i32 %.bf.clear293, i32* %unpadded_align288, align 4, !tbaa !31
  br label %if.end308

if.end308:                                        ; preds = %if.then103, %land.lhs.true105, %land.lhs.true110, %if.end176, %if.else265, %if.end259, %if.then116
  %user_align.1 = phi i32 [ %user_align.0, %if.else265 ], [ %or, %if.end259 ], [ %user_align.0, %if.end176 ], [ %user_align.0, %if.then116 ], [ %user_align.0, %land.lhs.true110 ], [ %user_align.0, %land.lhs.true105 ], [ %user_align.0, %if.then103 ]
  %desired_align.3 = phi i32 [ %desired_align.1, %if.else265 ], [ %desired_align.2, %if.end259 ], [ %desired_align.2, %if.end176 ], [ %desired_align.1, %if.then116 ], [ 1, %land.lhs.true110 ], [ 1, %land.lhs.true105 ], [ 1, %if.then103 ]
  %75 = load i32* @warn_packed, align 4, !tbaa !11
  %tobool309 = icmp eq i32 %75, 0
  br i1 %tobool309, label %if.end332, label %land.lhs.true310

land.lhs.true310:                                 ; preds = %if.end308
  %bf.load313 = load i64* %36, align 8
  %bf.cast316 = and i64 %bf.load313, 1024
  %tobool317 = icmp eq i64 %bf.cast316, 0
  br i1 %tobool317, label %if.end332, label %if.then318

if.then318:                                       ; preds = %land.lhs.true310
  %align320 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %76 = bitcast %union.tree_node** %align320 to i32*
  %77 = load i32* %76, align 4, !tbaa !25
  %cmp321 = icmp ugt i32 %known_align.0, %77
  br i1 %cmp321, label %if.then323, label %if.else330

if.then323:                                       ; preds = %if.then318
  %cmp326 = icmp ugt i32 %77, %desired_align.3
  br i1 %cmp326, label %if.then328, label %if.end332

if.then328:                                       ; preds = %if.then323
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %field, i8* getelementptr inbounds ([41 x i8]* @.str11, i64 0, i64 0)) #6
  br label %if.end332

if.else330:                                       ; preds = %if.then318
  %packed_maybe_necessary = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 9
  store i32 1, i32* %packed_maybe_necessary, align 4, !tbaa !36
  br label %if.end332

if.end332:                                        ; preds = %land.lhs.true310, %if.end308, %if.else330, %if.then328, %if.then323
  %cmp333 = icmp ult i32 %known_align.0, %desired_align.3
  br i1 %cmp333, label %if.then335, label %if.end367

if.then335:                                       ; preds = %if.end332
  %78 = load i32* @warn_padded, align 4, !tbaa !11
  %tobool336 = icmp eq i32 %78, 0
  br i1 %tobool336, label %if.end338, label %if.then337

if.then337:                                       ; preds = %if.then335
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %field, i8* getelementptr inbounds ([29 x i8]* @.str12, i64 0, i64 0)) #6
  br label %if.end338

if.end338:                                        ; preds = %if.then335, %if.then337
  %offset_align339 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 2
  %79 = load i32* %offset_align339, align 4, !tbaa !33
  %cmp340 = icmp ult i32 %desired_align.3, %79
  br i1 %cmp340, label %if.then342, label %if.else346

if.then342:                                       ; preds = %if.end338
  %80 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %conv.i = sext i32 %desired_align.3 to i64
  %type.i982 = getelementptr inbounds %union.tree_node* %80, i64 0, i32 0, i32 0, i32 1
  %81 = load %union.tree_node** %type.i982, align 8, !tbaa !18
  %call.i983 = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i, %union.tree_node* %81) #6
  %call1.i = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %80, %union.tree_node* %call.i983) #6
  %call2.i = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i, %union.tree_node* %call.i983) #6
  store %union.tree_node* %call2.i, %union.tree_node** %bitpos, align 8, !tbaa !35
  %offset358.phi.trans.insert = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %.pre = load %union.tree_node** %offset358.phi.trans.insert, align 8, !tbaa !34
  br label %if.end357

if.else346:                                       ; preds = %if.end338
  %offset347 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %82 = load %union.tree_node** %offset347, align 8, !tbaa !34
  %83 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %84 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %85 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call349 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %84, %union.tree_node* %85) #6
  %call350 = tail call %union.tree_node* @convert(%union.tree_node* %83, %union.tree_node* %call349) #6
  %call351 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %82, %union.tree_node* %call350) #6
  store %union.tree_node* %call351, %union.tree_node** %offset347, align 8, !tbaa !34
  %86 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !1
  store %union.tree_node* %86, %union.tree_node** %bitpos, align 8, !tbaa !35
  %div = lshr i32 %desired_align.3, 3
  %conv.i9841003 = zext i32 %div to i64
  %type.i985 = getelementptr inbounds %union.tree_node* %call351, i64 0, i32 0, i32 0, i32 1
  %87 = load %union.tree_node** %type.i985, align 8, !tbaa !18
  %call.i986 = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i9841003, %union.tree_node* %87) #6
  %call1.i987 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %call351, %union.tree_node* %call.i986) #6
  %call2.i988 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i987, %union.tree_node* %call.i986) #6
  store %union.tree_node* %call2.i988, %union.tree_node** %offset347, align 8, !tbaa !34
  br label %if.end357

if.end357:                                        ; preds = %if.else346, %if.then342
  %88 = phi %union.tree_node* [ %call2.i988, %if.else346 ], [ %.pre, %if.then342 ]
  %constant_flag = getelementptr inbounds %union.tree_node* %88, i64 0, i32 0, i32 0, i32 2
  %bf.load360 = load i32* %constant_flag, align 8
  %bf.clear362 = and i32 %bf.load360, 512
  %tobool363 = icmp eq i32 %bf.clear362, 0
  br i1 %tobool363, label %if.then364, label %if.end367

if.then364:                                       ; preds = %if.end357
  store i32 %desired_align.3, i32* %offset_align339, align 4, !tbaa !33
  br label %if.end367

if.end367:                                        ; preds = %if.end357, %if.then364, %if.end332
  %89 = load i1 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 9), align 8, !tbaa !40
  %90 = load %union.tree_node** %t, align 8, !tbaa !28
  %call369 = tail call zeroext i1 %89(%union.tree_node* %90) #6
  br i1 %call369, label %if.end466, label %land.lhs.true370

land.lhs.true370:                                 ; preds = %if.end367
  %bf.load373 = load i32* %code, align 8
  %bf.clear374 = and i32 %bf.load373, 255
  %cmp375 = icmp ne i32 %bf.clear374, 37
  %91 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp378 = icmp eq %union.tree_node* %0, %91
  %or.cond978 = or i1 %cmp375, %cmp378
  br i1 %or.cond978, label %if.end466, label %land.lhs.true380

land.lhs.true380:                                 ; preds = %land.lhs.true370
  %bf.load382 = load i64* %36, align 8
  %bf.cast385 = and i64 %bf.load382, 4096
  %tobool386 = icmp eq i64 %bf.cast385, 0
  br i1 %tobool386, label %if.end466, label %land.lhs.true387

land.lhs.true387:                                 ; preds = %land.lhs.true380
  %bf.cast393 = and i64 %bf.load382, 1024
  %tobool394 = icmp eq i64 %bf.cast393, 0
  %92 = load i32* @maximum_field_alignment, align 4
  %cmp396 = icmp eq i32 %92, 0
  %or.cond = and i1 %tobool394, %cmp396
  br i1 %or.cond, label %land.lhs.true398, label %if.end466

land.lhs.true398:                                 ; preds = %land.lhs.true387
  %size400 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 4
  %93 = load %union.tree_node** %size400, align 8, !tbaa !19
  %call401 = tail call i32 @integer_zerop(%union.tree_node* %93) #6
  %tobool402 = icmp eq i32 %call401, 0
  br i1 %tobool402, label %land.lhs.true403, label %if.end466

land.lhs.true403:                                 ; preds = %land.lhs.true398
  %94 = load %union.tree_node** %size400, align 8, !tbaa !19
  %call406 = tail call i32 @host_integerp(%union.tree_node* %94, i32 1) #6
  %tobool407 = icmp eq i32 %call406, 0
  br i1 %tobool407, label %if.end466, label %land.lhs.true408

land.lhs.true408:                                 ; preds = %land.lhs.true403
  %offset409 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %95 = load %union.tree_node** %offset409, align 8, !tbaa !34
  %call410 = tail call i32 @host_integerp(%union.tree_node* %95, i32 1) #6
  %tobool411 = icmp eq i32 %call410, 0
  br i1 %tobool411, label %if.end466, label %land.lhs.true412

land.lhs.true412:                                 ; preds = %land.lhs.true408
  %size414 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 2
  %96 = bitcast i32* %size414 to %union.tree_node**
  %97 = load %union.tree_node** %96, align 8, !tbaa !21
  %call415 = tail call i32 @host_integerp(%union.tree_node* %97, i32 1) #6
  %tobool416 = icmp eq i32 %call415, 0
  br i1 %tobool416, label %if.end466, label %if.then417

if.then417:                                       ; preds = %land.lhs.true412
  %type413 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %align420 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %98 = bitcast %union.tree_node** %align420 to i32*
  %99 = load i32* %98, align 4, !tbaa !25
  %100 = load %union.tree_node** %size400, align 8, !tbaa !19
  %call423 = tail call i64 @tree_low_cst(%union.tree_node* %100, i32 1) #6
  %101 = load %union.tree_node** %offset409, align 8, !tbaa !34
  %call426 = tail call i64 @tree_low_cst(%union.tree_node* %101, i32 0) #6
  %102 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %call428 = tail call i64 @tree_low_cst(%union.tree_node* %102, i32 0) #6
  %user_align430 = getelementptr inbounds %struct.tree_type* %type413, i64 0, i32 6
  %bf.load431 = load i32* %user_align430, align 4
  %tobool433 = icmp slt i32 %bf.load431, 0
  br i1 %tobool433, label %if.end436, label %if.then434

if.then434:                                       ; preds = %if.then417
  %call435 = tail call i32 @x86_field_alignment(%union.tree_node* %field, i32 %99) #6
  br label %if.end436

if.end436:                                        ; preds = %if.then434, %if.then417
  %type_align418.0 = phi i32 [ %99, %if.then417 ], [ %call435, %if.then434 ]
  %mul437 = shl nsw i64 %call426, 3
  %add = add nsw i64 %call428, %mul437
  %conv439 = zext i32 %type_align418.0 to i64
  %add438 = add i64 %call423, -1
  %add440 = add i64 %add438, %add
  %sub441 = add i64 %add440, %conv439
  %div443 = sdiv i64 %sub441, %conv439
  %div447 = sdiv i64 %add, %conv439
  %sub448 = sub nsw i64 %div443, %div447
  %103 = load %union.tree_node** %96, align 8, !tbaa !21
  %call451 = tail call i64 @tree_low_cst(%union.tree_node* %103, i32 1) #6
  %div453 = sdiv i64 %call451, %conv439
  %cmp454 = icmp sgt i64 %sub448, %div453
  br i1 %cmp454, label %if.then456, label %if.end460

if.then456:                                       ; preds = %if.end436
  %104 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %conv.i989 = sext i32 %type_align418.0 to i64
  %type.i990 = getelementptr inbounds %union.tree_node* %104, i64 0, i32 0, i32 0, i32 1
  %105 = load %union.tree_node** %type.i990, align 8, !tbaa !18
  %call.i991 = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i989, %union.tree_node* %105) #6
  %call1.i992 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %104, %union.tree_node* %call.i991) #6
  %call2.i993 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i992, %union.tree_node* %call.i991) #6
  store %union.tree_node* %call2.i993, %union.tree_node** %bitpos, align 8, !tbaa !35
  br label %if.end460

if.end460:                                        ; preds = %if.then456, %if.end436
  %bf.load463 = load i32* %user_align430, align 4
  %bf.lshr464 = lshr i32 %bf.load463, 31
  %or465 = or i32 %bf.lshr464, %user_align.1
  br label %if.end466

if.end466:                                        ; preds = %land.lhs.true370, %land.lhs.true412, %land.lhs.true408, %land.lhs.true403, %land.lhs.true398, %land.lhs.true380, %land.lhs.true387, %if.end460, %if.end367
  %user_align.2 = phi i32 [ %user_align.1, %if.end367 ], [ %user_align.1, %land.lhs.true398 ], [ %or465, %if.end460 ], [ %user_align.1, %land.lhs.true412 ], [ %user_align.1, %land.lhs.true408 ], [ %user_align.1, %land.lhs.true403 ], [ %user_align.1, %land.lhs.true387 ], [ %user_align.1, %land.lhs.true380 ], [ %user_align.1, %land.lhs.true370 ]
  %106 = load i1 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 9), align 8, !tbaa !40
  %107 = load %union.tree_node** %t, align 8, !tbaa !28
  %call468 = tail call zeroext i1 %106(%union.tree_node* %107) #6
  br i1 %call468, label %land.lhs.true470, label %if.end617

land.lhs.true470:                                 ; preds = %if.end466
  %bf.load473 = load i32* %code, align 8
  %bf.clear474 = and i32 %bf.load473, 255
  %cmp475 = icmp ne i32 %bf.clear474, 37
  %108 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp478 = icmp eq %union.tree_node* %0, %108
  %or.cond979 = or i1 %cmp475, %cmp478
  br i1 %or.cond979, label %if.end617, label %land.lhs.true480

land.lhs.true480:                                 ; preds = %land.lhs.true470
  %bf.load483 = load i64* %36, align 8
  %bf.cast486 = and i64 %bf.load483, 1024
  %tobool487 = icmp eq i64 %bf.cast486, 0
  br i1 %tobool487, label %land.lhs.true488, label %if.end617

land.lhs.true488:                                 ; preds = %land.lhs.true480
  %prev_field489 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 7
  %109 = load %union.tree_node** %prev_field489, align 8, !tbaa !46
  %tobool490 = icmp eq %union.tree_node* %109, null
  br i1 %tobool490, label %if.end617, label %land.lhs.true491

land.lhs.true491:                                 ; preds = %land.lhs.true488
  %size493 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 4
  %110 = load %union.tree_node** %size493, align 8, !tbaa !19
  %tobool494 = icmp eq %union.tree_node* %110, null
  br i1 %tobool494, label %if.end617, label %land.lhs.true495

land.lhs.true495:                                 ; preds = %land.lhs.true491
  %call498 = tail call i32 @host_integerp(%union.tree_node* %110, i32 1) #6
  %tobool499 = icmp eq i32 %call498, 0
  br i1 %tobool499, label %if.end617, label %land.lhs.true500

land.lhs.true500:                                 ; preds = %land.lhs.true495
  %111 = load %union.tree_node** %prev_field489, align 8, !tbaa !46
  %size503 = getelementptr inbounds %union.tree_node* %111, i64 0, i32 0, i32 4
  %112 = load %union.tree_node** %size503, align 8, !tbaa !19
  %tobool504 = icmp eq %union.tree_node* %112, null
  br i1 %tobool504, label %if.end617, label %land.lhs.true505

land.lhs.true505:                                 ; preds = %land.lhs.true500
  %call509 = tail call i32 @host_integerp(%union.tree_node* %112, i32 1) #6
  %tobool510 = icmp eq i32 %call509, 0
  br i1 %tobool510, label %if.end617, label %land.lhs.true511

land.lhs.true511:                                 ; preds = %land.lhs.true505
  %offset512 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %113 = load %union.tree_node** %offset512, align 8, !tbaa !34
  %call513 = tail call i32 @host_integerp(%union.tree_node* %113, i32 1) #6
  %tobool514 = icmp eq i32 %call513, 0
  br i1 %tobool514, label %if.end617, label %land.lhs.true515

land.lhs.true515:                                 ; preds = %land.lhs.true511
  %size517 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 2
  %114 = bitcast i32* %size517 to %union.tree_node**
  %115 = load %union.tree_node** %114, align 8, !tbaa !21
  %call518 = tail call i32 @host_integerp(%union.tree_node* %115, i32 1) #6
  %tobool519 = icmp eq i32 %call518, 0
  br i1 %tobool519, label %if.end617, label %land.lhs.true520

land.lhs.true520:                                 ; preds = %land.lhs.true515
  %116 = load %union.tree_node** %prev_field489, align 8, !tbaa !46
  %type523 = getelementptr inbounds %union.tree_node* %116, i64 0, i32 0, i32 0, i32 1
  %117 = load %union.tree_node** %type523, align 8, !tbaa !18
  %size525 = getelementptr inbounds %union.tree_node* %117, i64 0, i32 0, i32 2
  %118 = bitcast i32* %size525 to %union.tree_node**
  %119 = load %union.tree_node** %118, align 8, !tbaa !21
  %call526 = tail call i32 @host_integerp(%union.tree_node* %119, i32 1) #6
  %tobool527 = icmp eq i32 %call526, 0
  br i1 %tobool527, label %if.end617, label %land.lhs.true528

land.lhs.true528:                                 ; preds = %land.lhs.true520
  %120 = load %union.tree_node** %prev_field489, align 8, !tbaa !46
  %result531 = getelementptr inbounds %union.tree_node* %120, i64 0, i32 0, i32 11
  %121 = load %union.tree_node** %result531, align 8, !tbaa !26
  %tobool532 = icmp eq %union.tree_node* %121, null
  br i1 %tobool532, label %lor.lhs.false539, label %land.lhs.true533

land.lhs.true533:                                 ; preds = %land.lhs.true528
  %size536 = getelementptr inbounds %union.tree_node* %120, i64 0, i32 0, i32 4
  %122 = load %union.tree_node** %size536, align 8, !tbaa !19
  %call537 = tail call i32 @integer_zerop(%union.tree_node* %122) #6
  %tobool538 = icmp eq i32 %call537, 0
  br i1 %tobool538, label %land.lhs.true548, label %lor.lhs.false539

lor.lhs.false539:                                 ; preds = %land.lhs.true533, %land.lhs.true528
  %result541 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 11
  %123 = load %union.tree_node** %result541, align 8, !tbaa !26
  %tobool542 = icmp eq %union.tree_node* %123, null
  br i1 %tobool542, label %if.end617, label %land.lhs.true543

land.lhs.true543:                                 ; preds = %lor.lhs.false539
  %124 = load %union.tree_node** %size493, align 8, !tbaa !19
  %call546 = tail call i32 @integer_zerop(%union.tree_node* %124) #6
  %tobool547 = icmp eq i32 %call546, 0
  br i1 %tobool547, label %land.lhs.true548, label %if.end617

land.lhs.true548:                                 ; preds = %land.lhs.true533, %land.lhs.true543
  %125 = load %union.tree_node** %114, align 8, !tbaa !21
  %126 = load %union.tree_node** %prev_field489, align 8, !tbaa !46
  %type553 = getelementptr inbounds %union.tree_node* %126, i64 0, i32 0, i32 0, i32 1
  %127 = load %union.tree_node** %type553, align 8, !tbaa !18
  %size555 = getelementptr inbounds %union.tree_node* %127, i64 0, i32 0, i32 2
  %128 = bitcast i32* %size555 to %union.tree_node**
  %129 = load %union.tree_node** %128, align 8, !tbaa !21
  %call556 = tail call i32 @simple_cst_equal(%union.tree_node* %125, %union.tree_node* %129) #6
  %tobool557 = icmp eq i32 %call556, 0
  br i1 %tobool557, label %if.then569, label %lor.lhs.false558

lor.lhs.false558:                                 ; preds = %land.lhs.true548
  %130 = load %union.tree_node** %prev_field489, align 8, !tbaa !46
  %result561 = getelementptr inbounds %union.tree_node* %130, i64 0, i32 0, i32 11
  %131 = load %union.tree_node** %result561, align 8, !tbaa !26
  %tobool562 = icmp eq %union.tree_node* %131, null
  br i1 %tobool562, label %if.end617, label %land.lhs.true563

land.lhs.true563:                                 ; preds = %lor.lhs.false558
  %size566 = getelementptr inbounds %union.tree_node* %130, i64 0, i32 0, i32 4
  %132 = load %union.tree_node** %size566, align 8, !tbaa !19
  %call567 = tail call i32 @integer_zerop(%union.tree_node* %132) #6
  %tobool568 = icmp eq i32 %call567, 0
  br i1 %tobool568, label %if.end617, label %if.then569

if.then569:                                       ; preds = %land.lhs.true563, %land.lhs.true548
  %align572 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %133 = bitcast %union.tree_node** %align572 to i32*
  %134 = load i32* %133, align 4, !tbaa !25
  %135 = load %union.tree_node** %prev_field489, align 8, !tbaa !46
  %tobool574 = icmp eq %union.tree_node* %135, null
  br i1 %tobool574, label %if.end603, label %land.lhs.true575

land.lhs.true575:                                 ; preds = %if.then569
  %result578 = getelementptr inbounds %union.tree_node* %135, i64 0, i32 0, i32 11
  %136 = load %union.tree_node** %result578, align 8, !tbaa !26
  %tobool579 = icmp eq %union.tree_node* %136, null
  br i1 %tobool579, label %if.end603, label %land.lhs.true580

land.lhs.true580:                                 ; preds = %land.lhs.true575
  %size583 = getelementptr inbounds %union.tree_node* %135, i64 0, i32 0, i32 4
  %137 = load %union.tree_node** %size583, align 8, !tbaa !19
  %call584 = tail call i32 @integer_zerop(%union.tree_node* %137) #6
  %tobool585 = icmp eq i32 %call584, 0
  br i1 %tobool585, label %if.then586, label %if.end603

if.then586:                                       ; preds = %land.lhs.true580
  %138 = load %union.tree_node** %prev_field489, align 8, !tbaa !46
  %type589 = getelementptr inbounds %union.tree_node* %138, i64 0, i32 0, i32 0, i32 1
  %139 = load %union.tree_node** %type589, align 8, !tbaa !18
  %align591 = getelementptr inbounds %union.tree_node* %139, i64 0, i32 0, i32 7
  %140 = bitcast %union.tree_node** %align591 to i32*
  %141 = load i32* %140, align 4, !tbaa !25
  %cmp592 = icmp ugt i32 %134, %141
  %.980 = select i1 %cmp592, i32 %134, i32 %141
  br label %if.end603

if.end603:                                        ; preds = %land.lhs.true580, %land.lhs.true575, %if.then569, %if.then586
  %type_align570.0 = phi i32 [ %134, %land.lhs.true580 ], [ %.980, %if.then586 ], [ %134, %land.lhs.true575 ], [ %134, %if.then569 ]
  %142 = load i32* @maximum_field_alignment, align 4, !tbaa !11
  %cmp604 = icmp eq i32 %142, 0
  br i1 %cmp604, label %if.end613, label %if.then606

if.then606:                                       ; preds = %if.end603
  %cmp607 = icmp ult i32 %type_align570.0, %142
  %cond612 = select i1 %cmp607, i32 %type_align570.0, i32 %142
  br label %if.end613

if.end613:                                        ; preds = %if.end603, %if.then606
  %type_align570.1 = phi i32 [ %cond612, %if.then606 ], [ %type_align570.0, %if.end603 ]
  %143 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %conv.i994 = sext i32 %type_align570.1 to i64
  %type.i995 = getelementptr inbounds %union.tree_node* %143, i64 0, i32 0, i32 0, i32 1
  %144 = load %union.tree_node** %type.i995, align 8, !tbaa !18
  %call.i996 = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i994, %union.tree_node* %144) #6
  %call1.i997 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %143, %union.tree_node* %call.i996) #6
  %call2.i998 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i997, %union.tree_node* %call.i996) #6
  store %union.tree_node* %call2.i998, %union.tree_node** %bitpos, align 8, !tbaa !35
  br label %if.end617

if.end617:                                        ; preds = %land.lhs.true470, %land.lhs.true563, %lor.lhs.false558, %land.lhs.true543, %lor.lhs.false539, %land.lhs.true520, %land.lhs.true515, %land.lhs.true511, %land.lhs.true505, %land.lhs.true500, %land.lhs.true495, %land.lhs.true491, %land.lhs.true488, %land.lhs.true480, %if.end613, %if.end466
  %offset.i999 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %offset_align.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 2
  %145 = load i32* %offset_align.i, align 4, !tbaa !33
  tail call void @normalize_offset(%union.tree_node** %offset.i999, %union.tree_node** %bitpos, i32 %145) #6
  %146 = load %union.tree_node** %offset.i999, align 8, !tbaa !34
  %arguments = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 10
  store %union.tree_node* %146, %union.tree_node** %arguments, align 8, !tbaa !38
  %147 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %u2 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 19
  %t622 = bitcast %union.anon.1* %u2 to %union.tree_node**
  %148 = getelementptr inbounds %union.anon.1* %u2, i64 0, i32 0
  %.c = bitcast %union.tree_node* %147 to %struct.function*
  store %struct.function* %.c, %struct.function** %148, align 8, !tbaa !1
  %149 = load i32* %offset_align.i, align 4, !tbaa !33
  %sub625 = sub i32 0, %149
  %and626 = and i32 %149, %sub625
  %conv627 = zext i32 %and626 to i64
  %call628 = tail call i32 @exact_log2_wide(i64 %conv627) #6
  %bf.load632 = load i32* %35, align 4
  %bf.shl = shl i32 %call628, 24
  %bf.clear633 = and i32 %bf.load632, 16777215
  %bf.set = or i32 %bf.clear633, %bf.shl
  store i32 %bf.set, i32* %35, align 4
  %150 = load %union.tree_node** %t, align 8, !tbaa !28
  %type635 = bitcast %union.tree_node* %150 to %struct.tree_type*
  %user_align636 = getelementptr inbounds %struct.tree_type* %type635, i64 0, i32 6
  %bf.load637 = load i32* %user_align636, align 4
  %bf.value641973 = shl i32 %user_align.2, 31
  %bf.set644 = or i32 %bf.load637, %bf.value641973
  store i32 %bf.set644, i32* %user_align636, align 4
  %151 = load %union.tree_node** %t622, align 8, !tbaa !1
  %call648 = tail call i32 @integer_zerop(%union.tree_node* %151) #6
  %tobool649 = icmp eq i32 %call648, 0
  br i1 %tobool649, label %if.then650, label %if.else662

if.then650:                                       ; preds = %if.end617
  %152 = load %union.tree_node** %t622, align 8, !tbaa !1
  %call654 = tail call i64 @tree_low_cst(%union.tree_node* %152, i32 1) #6
  %153 = load %union.tree_node** %t622, align 8, !tbaa !1
  %call658 = tail call i64 @tree_low_cst(%union.tree_node* %153, i32 1) #6
  %sub659 = sub nsw i64 0, %call658
  %and660 = and i64 %call654, %sub659
  %conv661 = trunc i64 %and660 to i32
  br label %if.end693

if.else662:                                       ; preds = %if.end617
  %154 = load %union.tree_node** %arguments, align 8, !tbaa !38
  %call665 = tail call i32 @integer_zerop(%union.tree_node* %154) #6
  %tobool666 = icmp eq i32 %call665, 0
  br i1 %tobool666, label %if.else668, label %if.end693

if.else668:                                       ; preds = %if.else662
  %155 = load %union.tree_node** %arguments, align 8, !tbaa !38
  %call671 = tail call i32 @host_integerp(%union.tree_node* %155, i32 1) #6
  %tobool672 = icmp eq i32 %call671, 0
  br i1 %tobool672, label %if.else684, label %if.then673

if.then673:                                       ; preds = %if.else668
  %156 = load %union.tree_node** %arguments, align 8, !tbaa !38
  %call676 = tail call i64 @tree_low_cst(%union.tree_node* %156, i32 1) #6
  %157 = load %union.tree_node** %arguments, align 8, !tbaa !38
  %call679 = tail call i64 @tree_low_cst(%union.tree_node* %157, i32 1) #6
  %sub680 = sub nsw i64 0, %call679
  %and681 = and i64 %call676, %sub680
  %mul682 = shl nsw i64 %and681, 3
  %conv683 = trunc i64 %mul682 to i32
  br label %if.end693

if.else684:                                       ; preds = %if.else668
  %bf.load688 = load i32* %35, align 4
  %bf.lshr689 = lshr i32 %bf.load688, 24
  %sh_prom = zext i32 %bf.lshr689 to i64
  %shl = shl i64 1, %sh_prom
  %conv690 = trunc i64 %shl to i32
  br label %if.end693

if.end693:                                        ; preds = %if.else662, %if.else684, %if.then673, %if.then650
  %actual_align.0 = phi i32 [ %conv683, %if.then673 ], [ %conv690, %if.else684 ], [ %conv661, %if.then650 ], [ 128, %if.else662 ]
  %cmp694 = icmp eq i32 %known_align.0, %actual_align.0
  br i1 %cmp694, label %if.end697, label %if.then696

if.then696:                                       ; preds = %if.end693
  tail call void @layout_decl(%union.tree_node* %field, i32 %actual_align.0)
  br label %if.end697

if.end697:                                        ; preds = %if.end693, %if.then696
  %prev_field698 = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 7
  store %union.tree_node* %field, %union.tree_node** %prev_field698, align 8, !tbaa !46
  %size700 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 4
  %158 = load %union.tree_node** %size700, align 8, !tbaa !19
  %cmp701 = icmp eq %union.tree_node* %158, null
  br i1 %cmp701, label %if.end759, label %if.else704

if.else704:                                       ; preds = %if.end697
  %size_unit = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 7
  %159 = load %union.tree_node** %size_unit, align 8, !tbaa !24
  %code707 = getelementptr inbounds %union.tree_node* %159, i64 0, i32 0, i32 0, i32 2
  %bf.load708 = load i32* %code707, align 8
  %160 = and i32 %bf.load708, 262399
  %161 = icmp eq i32 %160, 25
  br i1 %161, label %if.else752, label %if.then720

if.then720:                                       ; preds = %if.else704
  %162 = load %union.tree_node** %offset.i999, align 8, !tbaa !34
  %163 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %164 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %165 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call723 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %164, %union.tree_node* %165) #6
  %call724 = tail call %union.tree_node* @convert(%union.tree_node* %163, %union.tree_node* %call723) #6
  %call725 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %162, %union.tree_node* %call724) #6
  store %union.tree_node* %call725, %union.tree_node** %offset.i999, align 8, !tbaa !34
  %166 = load %union.tree_node** %size_unit, align 8, !tbaa !24
  %call730 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call725, %union.tree_node* %166) #6
  store %union.tree_node* %call730, %union.tree_node** %offset.i999, align 8, !tbaa !34
  %167 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !1
  store %union.tree_node* %167, %union.tree_node** %bitpos, align 8, !tbaa !35
  %168 = load i32* %offset_align.i, align 4, !tbaa !33
  %bf.load737 = load i32* %35, align 4
  %bf.clear738 = and i32 %bf.load737, 16777215
  %cmp739 = icmp ult i32 %168, %bf.clear738
  %.bf.clear738 = select i1 %cmp739, i32 %168, i32 %bf.clear738
  store i32 %.bf.clear738, i32* %offset_align.i, align 4, !tbaa !33
  br label %if.end759

if.else752:                                       ; preds = %if.else704
  %169 = load %union.tree_node** %bitpos, align 8, !tbaa !35
  %call756 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %169, %union.tree_node* %158) #6
  store %union.tree_node* %call756, %union.tree_node** %bitpos, align 8, !tbaa !35
  %170 = load i32* %offset_align.i, align 4, !tbaa !33
  tail call void @normalize_offset(%union.tree_node** %offset.i999, %union.tree_node** %bitpos, i32 %170) #6
  br label %if.end759

if.end759:                                        ; preds = %if.then100.i, %if.then90.i, %if.end84.i, %if.end, %if.then720, %if.else752, %if.end697, %entry, %lor.lhs.false, %if.then13
  ret void
}

declare i32 @integer_zerop(%union.tree_node*) #2

declare i64 @tree_low_cst(%union.tree_node*, i32) #2

declare i32 @host_integerp(%union.tree_node*, i32) #2

declare i32 @x86_field_alignment(%union.tree_node*, i32) #2

declare i32 @simple_cst_equal(%union.tree_node*, %union.tree_node*) #2

declare i32 @exact_log2_wide(i64) #2

; Function Attrs: nounwind uwtable
define void @compute_record_mode(%union.tree_node* nocapture %type) #0 {
entry:
  %type1 = bitcast %union.tree_node* %type to %struct.tree_type*
  %mode2 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %mode2, align 4
  %bf.clear = and i32 %bf.load, -65025
  %bf.set = or i32 %bf.clear, 26112
  store i32 %bf.set, i32* %mode2, align 4
  %size = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 2
  %0 = bitcast i32* %size to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !21
  %call = tail call i32 @host_integerp(%union.tree_node* %1, i32 1) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end142, label %if.end

if.end:                                           ; preds = %entry
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %2 = load i8** %values, align 8
  %tobool5170 = icmp eq i8* %2, null
  br i1 %tobool5170, label %if.else, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %3 = bitcast i8* %2 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %field.0172 = phi %union.tree_node* [ %3, %for.body.lr.ph ], [ %22, %for.inc ]
  %mode.0171 = phi i32 [ 0, %for.body.lr.ph ], [ %mode.1, %for.inc ]
  %code = getelementptr inbounds %union.tree_node* %field.0172, i64 0, i32 0, i32 0, i32 2
  %bf.load6 = load i32* %code, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  %cmp = icmp eq i32 %bf.clear7, 37
  br i1 %cmp, label %if.end9, label %for.inc

if.end9:                                          ; preds = %for.body
  %type11 = getelementptr inbounds %union.tree_node* %field.0172, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type11, align 8, !tbaa !18
  %code13 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load14 = load i32* %code13, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %cmp16 = icmp eq i32 %bf.clear15, 0
  br i1 %cmp16, label %if.end142, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end9
  %type19 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %mode20 = getelementptr inbounds %struct.tree_type* %type19, i64 0, i32 6
  %bf.load21 = load i32* %mode20, align 4
  %5 = and i32 %bf.load21, 196096
  %6 = icmp eq i32 %5, 26112
  br i1 %6, label %if.end142, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %lor.lhs.false
  %call32 = tail call %union.tree_node* @bit_position(%union.tree_node* %field.0172) #6
  %call33 = tail call i32 @host_integerp(%union.tree_node* %call32, i32 1) #6
  %tobool34 = icmp eq i32 %call33, 0
  br i1 %tobool34, label %if.end142, label %lor.lhs.false35

lor.lhs.false35:                                  ; preds = %lor.lhs.false31
  %size36 = getelementptr inbounds %union.tree_node* %field.0172, i64 0, i32 0, i32 4
  %7 = load %union.tree_node** %size36, align 8, !tbaa !19
  %cmp37 = icmp eq %union.tree_node* %7, null
  br i1 %cmp37, label %if.end142, label %lor.lhs.false38

lor.lhs.false38:                                  ; preds = %lor.lhs.false35
  %call41 = tail call i32 @host_integerp(%union.tree_node* %7, i32 1) #6
  %tobool42 = icmp eq i32 %call41, 0
  br i1 %tobool42, label %if.end142, label %if.end44

if.end44:                                         ; preds = %lor.lhs.false38
  %call45 = tail call i64 @int_bit_position(%union.tree_node* %field.0172) #6
  %8 = load i32* @target_flags, align 4, !tbaa !11
  %and = lshr i32 %8, 20
  %9 = and i32 %and, 32
  %10 = add i32 %9, 32
  %conv165 = zext i32 %10 to i64
  %div = udiv i64 %call45, %conv165
  %11 = load %union.tree_node** %size36, align 8, !tbaa !19
  %call49 = tail call i64 @tree_low_cst(%union.tree_node* %11, i32 1) #6
  %add = add i64 %call45, -1
  %sub = add i64 %add, %call49
  %12 = load i32* @target_flags, align 4, !tbaa !11
  %and50 = lshr i32 %12, 20
  %13 = and i32 %and50, 32
  %14 = add i32 %13, 32
  %conv53166 = zext i32 %14 to i64
  %div54 = udiv i64 %sub, %conv53166
  %cmp55 = icmp eq i64 %div, %div54
  br i1 %cmp55, label %if.end68, label %land.lhs.true57

land.lhs.true57:                                  ; preds = %if.end44
  %15 = load %union.tree_node** %size36, align 8, !tbaa !19
  %call60 = tail call i64 @tree_low_cst(%union.tree_node* %15, i32 1) #6
  %16 = load i32* @target_flags, align 4, !tbaa !11
  %and61 = lshr i32 %16, 20
  %17 = and i32 %and61, 32
  %18 = add i32 %17, 32
  %conv64167 = zext i32 %18 to i64
  %rem = srem i64 %call60, %conv64167
  %cmp65 = icmp eq i64 %rem, 0
  br i1 %cmp65, label %if.end68, label %if.end142

if.end68:                                         ; preds = %land.lhs.true57, %if.end44
  %19 = load %union.tree_node** %0, align 8, !tbaa !21
  %20 = load %union.tree_node** %size36, align 8, !tbaa !19
  %call73 = tail call i32 @simple_cst_equal(%union.tree_node* %19, %union.tree_node* %20) #6
  %tobool74 = icmp eq i32 %call73, 0
  br i1 %tobool74, label %for.inc, label %if.then75

if.then75:                                        ; preds = %if.end68
  %mode77 = getelementptr inbounds %union.tree_node* %field.0172, i64 0, i32 0, i32 5
  %21 = bitcast i48* %mode77 to i64*
  %bf.load78 = load i64* %21, align 8
  %bf.load78.tr = trunc i64 %bf.load78 to i32
  %bf.cast = and i32 %bf.load78.tr, 255
  br label %for.inc

for.inc:                                          ; preds = %if.end68, %for.body, %if.then75
  %mode.1 = phi i32 [ %mode.0171, %for.body ], [ %bf.cast, %if.then75 ], [ %mode.0171, %if.end68 ]
  %chain = getelementptr inbounds %union.tree_node* %field.0172, i64 0, i32 0, i32 0, i32 0
  %22 = load %union.tree_node** %chain, align 8, !tbaa !9
  %tobool5 = icmp eq %union.tree_node* %22, null
  br i1 %tobool5, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  %code83 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load84 = load i32* %code83, align 8
  %bf.clear85 = and i32 %bf.load84, 255
  %cmp86 = icmp eq i32 %bf.clear85, 20
  %cmp89 = icmp ne i32 %mode.1, 0
  %or.cond = and i1 %cmp86, %cmp89
  br i1 %or.cond, label %if.then91, label %if.else

if.then91:                                        ; preds = %for.end
  %bf.load94 = load i32* %mode2, align 4
  %bf.value = shl i32 %mode.1, 9
  %bf.shl = and i32 %bf.value, 65024
  %bf.clear95 = and i32 %bf.load94, -65025
  %bf.set96 = or i32 %bf.clear95, %bf.shl
  br label %if.end107

if.else:                                          ; preds = %if.end, %for.end
  %23 = load %union.tree_node** %0, align 8, !tbaa !21
  %code.i = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 25
  br i1 %cmp.i, label %lor.lhs.false.i, label %mode_for_size_tree.exit

lor.lhs.false.i:                                  ; preds = %if.else
  %call.i = tail call i32 @compare_tree_int(%union.tree_node* %23, i64 1000) #6
  %cmp1.i = icmp sgt i32 %call.i, 0
  br i1 %cmp1.i, label %mode_for_size_tree.exit, label %if.else.i

if.else.i:                                        ; preds = %lor.lhs.false.i
  %int_cst2.i = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 2
  %low.i = bitcast i32* %int_cst2.i to i64*
  %24 = load i64* %low.i, align 8, !tbaa !14
  %conv.i = trunc i64 %24 to i32
  %25 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 5), align 2, !tbaa !12
  %conv.i.i = zext i16 %25 to i32
  %cmp.i.i = icmp ult i32 %conv.i.i, %conv.i
  br i1 %cmp.i.i, label %mode_for_size_tree.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.else.i
  %26 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp217.i.i = icmp eq i32 %26, 0
  br i1 %cmp217.i.i, label %mode_for_size_tree.exit, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i, %for.inc.i.i
  %mode.018.i.i = phi i32 [ %conv13.i.i, %for.inc.i.i ], [ %26, %if.end.i.i ]
  %idxprom4.i.i = sext i32 %mode.018.i.i to i64
  %arrayidx5.i.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i.i
  %27 = load i16* %arrayidx5.i.i, align 2, !tbaa !12
  %conv6.i.i = zext i16 %27 to i32
  %cmp7.i.i = icmp eq i32 %conv6.i.i, %conv.i
  br i1 %cmp7.i.i, label %mode_for_size_tree.exit, label %for.inc.i.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %arrayidx12.i.i = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i.i
  %28 = load i8* %arrayidx12.i.i, align 1, !tbaa !10
  %conv13.i.i = zext i8 %28 to i32
  %cmp2.i.i = icmp eq i8 %28, 0
  br i1 %cmp2.i.i, label %mode_for_size_tree.exit, label %for.body.i.i

mode_for_size_tree.exit:                          ; preds = %for.body.i.i, %for.inc.i.i, %if.else, %lor.lhs.false.i, %if.else.i, %if.end.i.i
  %retval.0.i = phi i32 [ 51, %if.else ], [ 51, %lor.lhs.false.i ], [ 51, %if.else.i ], [ 51, %if.end.i.i ], [ %mode.018.i.i, %for.body.i.i ], [ 51, %for.inc.i.i ]
  %bf.load102 = load i32* %mode2, align 4
  %bf.value103 = shl i32 %retval.0.i, 9
  %bf.shl104 = and i32 %bf.value103, 65024
  %bf.clear105 = and i32 %bf.load102, -65025
  %bf.set106 = or i32 %bf.clear105, %bf.shl104
  br label %if.end107

if.end107:                                        ; preds = %mode_for_size_tree.exit, %if.then91
  %storemerge = phi i32 [ %bf.set106, %mode_for_size_tree.exit ], [ %bf.set96, %if.then91 ]
  store i32 %storemerge, i32* %mode2, align 4
  ret void

if.end142:                                        ; preds = %lor.lhs.false, %land.lhs.true57, %lor.lhs.false38, %lor.lhs.false31, %if.end9, %lor.lhs.false35, %entry
  ret void
}

declare %union.tree_node* @bit_position(%union.tree_node*) #2

declare i64 @int_bit_position(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define void @finish_record_layout(%struct.record_layout_info_s* nocapture %rli) #0 {
entry:
  %offset_align.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 2
  store i32 8, i32* %offset_align.i, align 4, !tbaa !33
  %offset.i.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 1
  %bitpos.i.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 3
  tail call void @normalize_offset(%union.tree_node** %offset.i.i, %union.tree_node** %bitpos.i.i, i32 8) #6
  %t.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 0
  %0 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %align.i = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %1 = bitcast %union.tree_node** %align.i to i32*
  %2 = load i32* %1, align 4, !tbaa !25
  %record_align.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 4
  %3 = load i32* %record_align.i, align 4, !tbaa !30
  %cmp.i = icmp ugt i32 %2, %3
  %..i = select i1 %cmp.i, i32 %2, i32 %3
  store i32 %..i, i32* %1, align 4, !tbaa !25
  %4 = load %union.tree_node** %offset.i.i, align 8, !tbaa !34
  %5 = load %union.tree_node** %bitpos.i.i, align 8, !tbaa !35
  %6 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %call.i.i.i = tail call %union.tree_node* @convert(%union.tree_node* %6, %union.tree_node* %4) #6
  %7 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call1.i.i.i = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call.i.i.i, %union.tree_node* %7) #6
  %call2.i.i.i = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %5, %union.tree_node* %call1.i.i.i) #6
  %8 = load %union.tree_node** %offset.i.i, align 8, !tbaa !34
  %9 = load %union.tree_node** %bitpos.i.i, align 8, !tbaa !35
  %10 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %11 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call.i.i177.i = tail call %union.tree_node* @size_binop(i32 62, %union.tree_node* %9, %union.tree_node* %11) #6
  %call1.i.i178.i = tail call %union.tree_node* @convert(%union.tree_node* %10, %union.tree_node* %call.i.i177.i) #6
  %call2.i.i179.i = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %8, %union.tree_node* %call1.i.i178.i) #6
  %12 = load %union.tree_node** %bitpos.i.i, align 8, !tbaa !35
  %call9.i = tail call i32 @integer_zerop(%union.tree_node* %12) #6
  %tobool.i = icmp eq i32 %call9.i, 0
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %13 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !1
  %call10.i = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call2.i.i179.i, %union.tree_node* %13) #6
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %unpadded_size_unit.0.i = phi %union.tree_node* [ %call2.i.i179.i, %entry ], [ %call10.i, %if.then.i ]
  %14 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %15 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 16
  %16 = load %union.tree_node** %15, align 8, !tbaa !48
  %tobool13.i = icmp eq %union.tree_node* %16, null
  br i1 %tobool13.i, label %if.end29.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.end.i
  %length.i = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 1
  %17 = bitcast i8** %length.i to i32*
  %18 = load i32* %17, align 4, !tbaa !49
  %cmp17.i = icmp sgt i32 %18, 6
  br i1 %cmp17.i, label %if.then18.i, label %if.end29.i

if.then18.i:                                      ; preds = %land.lhs.true.i
  %a.i = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 2
  %arrayidx.i = getelementptr inbounds i32* %a.i, i64 12
  %19 = bitcast i32* %arrayidx.i to %union.tree_node**
  store %union.tree_node* %call2.i.i.i, %union.tree_node** %19, align 8, !tbaa !1
  %20 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %21 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 16
  %22 = load %union.tree_node** %21, align 8, !tbaa !48
  %a27.i = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 2
  %arrayidx28.i = getelementptr inbounds i32* %a27.i, i64 14
  %23 = bitcast i32* %arrayidx28.i to %union.tree_node**
  store %union.tree_node* %unpadded_size_unit.0.i, %union.tree_node** %23, align 8, !tbaa !1
  %.pre.i = load %union.tree_node** %t.i, align 8, !tbaa !28
  br label %if.end29.i

if.end29.i:                                       ; preds = %if.then18.i, %land.lhs.true.i, %if.end.i
  %24 = phi %union.tree_node* [ %14, %if.end.i ], [ %.pre.i, %if.then18.i ], [ %14, %land.lhs.true.i ]
  %align32.i = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 7
  %25 = bitcast %union.tree_node** %align32.i to i32*
  %26 = load i32* %25, align 4, !tbaa !25
  %conv.i.i = sext i32 %26 to i64
  %type.i.i = getelementptr inbounds %union.tree_node* %call2.i.i.i, i64 0, i32 0, i32 0, i32 1
  %27 = load %union.tree_node** %type.i.i, align 8, !tbaa !18
  %call.i.i = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i.i, %union.tree_node* %27) #6
  %call1.i.i = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %call2.i.i.i, %union.tree_node* %call.i.i) #6
  %call2.i.i = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i.i, %union.tree_node* %call.i.i) #6
  %28 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %size.i = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 2
  %29 = bitcast i32* %size.i to %union.tree_node**
  store %union.tree_node* %call2.i.i, %union.tree_node** %29, align 8, !tbaa !21
  %align38.i = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 7
  %30 = bitcast %union.tree_node** %align38.i to i32*
  %31 = load i32* %30, align 4, !tbaa !25
  %div.i = lshr i32 %31, 3
  %conv.i180190.i = zext i32 %div.i to i64
  %type.i181.i = getelementptr inbounds %union.tree_node* %unpadded_size_unit.0.i, i64 0, i32 0, i32 0, i32 1
  %32 = load %union.tree_node** %type.i181.i, align 8, !tbaa !18
  %call.i182.i = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i180190.i, %union.tree_node* %32) #6
  %call1.i183.i = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %unpadded_size_unit.0.i, %union.tree_node* %call.i182.i) #6
  %call2.i184.i = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i183.i, %union.tree_node* %call.i182.i) #6
  %33 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %34 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 4
  store %union.tree_node* %call2.i184.i, %union.tree_node** %34, align 8, !tbaa !23
  %35 = load i32* @warn_padded, align 4, !tbaa !11
  %tobool42.i = icmp eq i32 %35, 0
  br i1 %tobool42.i, label %if.end52.i, label %land.lhs.true43.i

land.lhs.true43.i:                                ; preds = %if.end29.i
  %constant_flag.i = getelementptr inbounds %union.tree_node* %call2.i.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %constant_flag.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 512
  %tobool44.i = icmp eq i32 %bf.clear.i, 0
  br i1 %tobool44.i, label %if.end52.i, label %land.lhs.true45.i

land.lhs.true45.i:                                ; preds = %land.lhs.true43.i
  %size48.i = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 2
  %36 = bitcast i32* %size48.i to %union.tree_node**
  %37 = load %union.tree_node** %36, align 8, !tbaa !21
  %call49.i = tail call i32 @simple_cst_equal(%union.tree_node* %call2.i.i.i, %union.tree_node* %37) #6
  %cmp50.i = icmp eq i32 %call49.i, 0
  br i1 %cmp50.i, label %if.then51.i, label %if.end52.i

if.then51.i:                                      ; preds = %land.lhs.true45.i
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([42 x i8]* @.str14, i64 0, i64 0)) #6
  br label %if.end52.i

if.end52.i:                                       ; preds = %if.then51.i, %land.lhs.true45.i, %land.lhs.true43.i, %if.end29.i
  %38 = load i32* @warn_packed, align 4, !tbaa !11
  %tobool53.i = icmp eq i32 %38, 0
  br i1 %tobool53.i, label %finalize_record_size.exit, label %land.lhs.true54.i

land.lhs.true54.i:                                ; preds = %if.end52.i
  %39 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %code.i = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 0, i32 2
  %bf.load57.i = load i32* %code.i, align 8
  %bf.clear58.i = and i32 %bf.load57.i, 255
  %cmp59.i = icmp eq i32 %bf.clear58.i, 20
  br i1 %cmp59.i, label %land.lhs.true60.i, label %finalize_record_size.exit

land.lhs.true60.i:                                ; preds = %land.lhs.true54.i
  %type62.i = bitcast %union.tree_node* %39 to %struct.tree_type*
  %packed_flag.i = getelementptr inbounds %struct.tree_type* %type62.i, i64 0, i32 6
  %bf.load63.i = load i32* %packed_flag.i, align 4
  %bf.clear65.i = and i32 %bf.load63.i, 1048576
  %tobool66.i = icmp eq i32 %bf.clear65.i, 0
  br i1 %tobool66.i, label %finalize_record_size.exit, label %land.lhs.true67.i

land.lhs.true67.i:                                ; preds = %land.lhs.true60.i
  %packed_maybe_necessary.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 9
  %40 = load i32* %packed_maybe_necessary.i, align 4, !tbaa !36
  %tobool68.i = icmp eq i32 %40, 0
  br i1 %tobool68.i, label %land.lhs.true69.i, label %finalize_record_size.exit

land.lhs.true69.i:                                ; preds = %land.lhs.true67.i
  %constant_flag71.i = getelementptr inbounds %union.tree_node* %call2.i.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load72.i = load i32* %constant_flag71.i, align 8
  %bf.clear74.i = and i32 %bf.load72.i, 512
  %tobool75.i = icmp eq i32 %bf.clear74.i, 0
  br i1 %tobool75.i, label %finalize_record_size.exit, label %if.then76.i

if.then76.i:                                      ; preds = %land.lhs.true69.i
  %align79.i = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 7
  %41 = bitcast %union.tree_node** %align79.i to i32*
  %42 = load i32* %41, align 4, !tbaa !25
  %unpacked_align.i = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 5
  %43 = load i32* %unpacked_align.i, align 4, !tbaa !32
  %cmp80.i = icmp ugt i32 %42, %43
  %.172.i = select i1 %cmp80.i, i32 %42, i32 %43
  store i32 %.172.i, i32* %unpacked_align.i, align 4, !tbaa !32
  %size92.i = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 2
  %44 = bitcast i32* %size92.i to %union.tree_node**
  %45 = load %union.tree_node** %44, align 8, !tbaa !21
  %conv.i185.i = sext i32 %.172.i to i64
  %type.i186.i = getelementptr inbounds %union.tree_node* %45, i64 0, i32 0, i32 0, i32 1
  %46 = load %union.tree_node** %type.i186.i, align 8, !tbaa !18
  %call.i187.i = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i185.i, %union.tree_node* %46) #6
  %call1.i188.i = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %45, %union.tree_node* %call.i187.i) #6
  %call2.i189.i = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i188.i, %union.tree_node* %call.i187.i) #6
  %47 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %size97.i = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 2
  %48 = bitcast i32* %size97.i to %union.tree_node**
  %49 = load %union.tree_node** %48, align 8, !tbaa !21
  %call98.i = tail call i32 @simple_cst_equal(%union.tree_node* %call2.i189.i, %union.tree_node* %49) #6
  %tobool99.i = icmp eq i32 %call98.i, 0
  br i1 %tobool99.i, label %finalize_record_size.exit, label %if.then100.i

if.then100.i:                                     ; preds = %if.then76.i
  %50 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %type102.i = bitcast %union.tree_node* %50 to %struct.tree_type*
  %packed_flag103.i = getelementptr inbounds %struct.tree_type* %type102.i, i64 0, i32 6
  %bf.load104.i = load i32* %packed_flag103.i, align 4
  %bf.clear105.i = and i32 %bf.load104.i, -1048577
  store i32 %bf.clear105.i, i32* %packed_flag103.i, align 4
  %51 = load %union.tree_node** %t.i, align 8, !tbaa !28
  %52 = getelementptr inbounds %union.tree_node* %51, i64 0, i32 0, i32 11
  %53 = load %union.tree_node** %52, align 8, !tbaa !51
  %tobool108.i = icmp eq %union.tree_node* %53, null
  br i1 %tobool108.i, label %if.else131.i, label %if.then109.i

if.then109.i:                                     ; preds = %if.then100.i
  %code115.i = getelementptr inbounds %union.tree_node* %53, i64 0, i32 0, i32 0, i32 2
  %bf.load116.i = load i32* %code115.i, align 8
  %bf.clear117.i = and i32 %bf.load116.i, 255
  %cmp118.i = icmp eq i32 %bf.clear117.i, 1
  br i1 %cmp118.i, label %if.end130.i, label %if.else.i

if.else.i:                                        ; preds = %if.then109.i
  %name126.i = getelementptr inbounds %union.tree_node* %53, i64 0, i32 0, i32 8
  %54 = load %union.tree_node** %name126.i, align 8, !tbaa !47
  br label %if.end130.i

if.end130.i:                                      ; preds = %if.else.i, %if.then109.i
  %.pn.i = phi %union.tree_node* [ %54, %if.else.i ], [ %53, %if.then109.i ]
  %id.pn.i = getelementptr inbounds %union.tree_node* %.pn.i, i64 0, i32 0, i32 1
  %name110.0.in.i = getelementptr inbounds i8** %id.pn.i, i64 1
  %name110.0.i = load i8** %name110.0.in.i, align 8
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([41 x i8]* @.str11, i64 0, i64 0), i8* %name110.0.i) #6
  br label %finalize_record_size.exit

if.else131.i:                                     ; preds = %if.then100.i
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([32 x i8]* @.str15, i64 0, i64 0)) #6
  br label %finalize_record_size.exit

finalize_record_size.exit:                        ; preds = %if.end52.i, %land.lhs.true54.i, %land.lhs.true60.i, %land.lhs.true67.i, %land.lhs.true69.i, %if.then76.i, %if.end130.i, %if.else131.i
  %55 = load %union.tree_node** %t.i, align 8, !tbaa !28
  tail call void @compute_record_mode(%union.tree_node* %55)
  %56 = load %union.tree_node** %t.i, align 8, !tbaa !28
  tail call fastcc void @finalize_type_size(%union.tree_node* %56)
  %pending_statics = getelementptr inbounds %struct.record_layout_info_s* %rli, i64 0, i32 8
  %57 = load %union.tree_node** %pending_statics, align 8, !tbaa !37
  %tobool11 = icmp eq %union.tree_node* %57, null
  br i1 %tobool11, label %while.end, label %while.body

while.body:                                       ; preds = %finalize_record_size.exit, %while.body
  %58 = phi %union.tree_node* [ %62, %while.body ], [ %57, %finalize_record_size.exit ]
  %value = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 2
  %59 = bitcast i32* %value to %union.tree_node**
  %60 = load %union.tree_node** %59, align 8, !tbaa !5
  tail call void @layout_decl(%union.tree_node* %60, i32 0)
  %61 = load %union.tree_node** %pending_statics, align 8, !tbaa !37
  %chain = getelementptr inbounds %union.tree_node* %61, i64 0, i32 0, i32 0, i32 0
  %62 = load %union.tree_node** %chain, align 8, !tbaa !9
  store %union.tree_node* %62, %union.tree_node** %pending_statics, align 8, !tbaa !37
  %tobool = icmp eq %union.tree_node* %62, null
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %finalize_record_size.exit
  %63 = bitcast %struct.record_layout_info_s* %rli to i8*
  tail call void @free(i8* %63)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @finalize_type_size(%union.tree_node* %type) #0 {
entry:
  %type1 = bitcast %union.tree_node* %type to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  switch i32 %bf.clear, label %land.lhs.true8 [
    i32 51, label %if.end
    i32 0, label %if.end
  ]

land.lhs.true8:                                   ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load9 = load i32* %code, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  switch i32 %bf.clear10, label %if.then [
    i32 20, label %if.end
    i32 21, label %if.end
    i32 22, label %if.end
    i32 18, label %if.end
  ]

if.then:                                          ; preds = %land.lhs.true8
  %call = tail call i32 @get_mode_alignment(i32 %bf.clear) #6
  %align = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 7
  %0 = bitcast %union.tree_node** %align to i32*
  store i32 %call, i32* %0, align 4, !tbaa !25
  %bf.load37 = load i32* %mode, align 4
  %bf.clear38 = and i32 %bf.load37, 2147483647
  store i32 %bf.clear38, i32* %mode, align 4
  br label %if.end

if.end:                                           ; preds = %land.lhs.true8, %land.lhs.true8, %land.lhs.true8, %land.lhs.true8, %entry, %entry, %if.then
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  %2 = load %union.tree_node** %1, align 8, !tbaa !23
  %cmp40 = icmp eq %union.tree_node* %2, null
  %size = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 2
  %3 = bitcast i32* %size to %union.tree_node**
  br i1 %cmp40, label %land.lhs.true41, label %if.end51

land.lhs.true41:                                  ; preds = %if.end
  %4 = load %union.tree_node** %3, align 8, !tbaa !21
  %cmp43 = icmp eq %union.tree_node* %4, null
  br i1 %cmp43, label %if.end51, label %if.then44

if.then44:                                        ; preds = %land.lhs.true41
  %5 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !tbaa !1
  %call47 = tail call %union.tree_node* @size_binop(i32 64, %union.tree_node* %4, %union.tree_node* %6) #6
  %call48 = tail call %union.tree_node* @convert(%union.tree_node* %5, %union.tree_node* %call47) #6
  store %union.tree_node* %call48, %union.tree_node** %1, align 8, !tbaa !23
  br label %if.end51

if.end51:                                         ; preds = %if.end, %land.lhs.true41, %if.then44
  %.pr202208 = phi %union.tree_node* [ null, %land.lhs.true41 ], [ %call48, %if.then44 ], [ %2, %if.end ]
  %7 = load %union.tree_node** %3, align 8, !tbaa !21
  %cmp54 = icmp eq %union.tree_node* %7, null
  br i1 %cmp54, label %if.end88, label %if.end70

if.end70:                                         ; preds = %if.end51
  %align59 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 7
  %8 = bitcast %union.tree_node** %align59 to i32*
  %9 = load i32* %8, align 4, !tbaa !25
  %conv.i = sext i32 %9 to i64
  %type.i = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type.i, align 8, !tbaa !18
  %call.i = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i, %union.tree_node* %10) #6
  %call1.i = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %7, %union.tree_node* %call.i) #6
  %call2.i = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i, %union.tree_node* %call.i) #6
  store %union.tree_node* %call2.i, %union.tree_node** %3, align 8, !tbaa !21
  %11 = load %union.tree_node** %1, align 8, !tbaa !23
  %12 = load i32* %8, align 4, !tbaa !25
  %div = lshr i32 %12, 3
  %conv.i196203 = zext i32 %div to i64
  %type.i197 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 1
  %13 = load %union.tree_node** %type.i197, align 8, !tbaa !18
  %call.i198 = tail call %union.tree_node* @size_int_type_wide(i64 %conv.i196203, %union.tree_node* %13) #6
  %call1.i199 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %11, %union.tree_node* %call.i198) #6
  %call2.i200 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call1.i199, %union.tree_node* %call.i198) #6
  store %union.tree_node* %call2.i200, %union.tree_node** %1, align 8, !tbaa !23
  %.pr = load %union.tree_node** %3, align 8, !tbaa !21
  %cmp73 = icmp eq %union.tree_node* %.pr, null
  br i1 %cmp73, label %if.end88, label %land.lhs.true74

land.lhs.true74:                                  ; preds = %if.end70
  %code78 = getelementptr inbounds %union.tree_node* %.pr, i64 0, i32 0, i32 0, i32 2
  %bf.load79 = load i32* %code78, align 8
  %bf.clear80 = and i32 %bf.load79, 255
  %cmp81 = icmp eq i32 %bf.clear80, 25
  br i1 %cmp81, label %if.end88, label %if.then82

if.then82:                                        ; preds = %land.lhs.true74
  %call85 = tail call %union.tree_node* @variable_size(%union.tree_node* %.pr)
  store %union.tree_node* %call85, %union.tree_node** %3, align 8, !tbaa !21
  %.pr202.pre = load %union.tree_node** %1, align 8, !tbaa !23
  br label %if.end88

if.end88:                                         ; preds = %land.lhs.true74, %if.then82, %if.end51, %if.end70
  %14 = phi %union.tree_node* [ %call2.i200, %if.end70 ], [ %.pr202208, %if.end51 ], [ %.pr202.pre, %if.then82 ], [ %call2.i200, %land.lhs.true74 ]
  %cmp91 = icmp eq %union.tree_node* %14, null
  br i1 %cmp91, label %if.end106, label %land.lhs.true92

land.lhs.true92:                                  ; preds = %if.end88
  %code96 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 2
  %bf.load97 = load i32* %code96, align 8
  %bf.clear98 = and i32 %bf.load97, 255
  %cmp99 = icmp eq i32 %bf.clear98, 25
  br i1 %cmp99, label %if.end106, label %if.then100

if.then100:                                       ; preds = %land.lhs.true92
  %call103 = tail call %union.tree_node* @variable_size(%union.tree_node* %14)
  store %union.tree_node* %call103, %union.tree_node** %1, align 8, !tbaa !23
  br label %if.end106

if.end106:                                        ; preds = %land.lhs.true92, %if.end88, %if.then100
  %15 = phi %union.tree_node* [ %14, %land.lhs.true92 ], [ null, %if.end88 ], [ %call103, %if.then100 ]
  %16 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 14
  %17 = load %union.tree_node** %16, align 8, !tbaa !52
  %tobool = icmp eq %union.tree_node* %17, null
  %18 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %19 = load %union.tree_node** %18, align 8, !tbaa !53
  %cmp109 = icmp eq %union.tree_node* %19, %type
  %or.cond = and i1 %tobool, %cmp109
  br i1 %or.cond, label %if.end153, label %if.then110

if.then110:                                       ; preds = %if.end106
  %20 = load %union.tree_node** %3, align 8, !tbaa !21
  %align119 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 7
  %21 = bitcast %union.tree_node** %align119 to i32*
  %22 = load i32* %21, align 4, !tbaa !25
  %cmp133205 = icmp eq %union.tree_node* %19, null
  br i1 %cmp133205, label %if.end153, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then110
  %bf.load123 = load i32* %mode, align 4
  %bf.set = and i32 %bf.load123, -2147418624
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %variant.0206 = phi %union.tree_node* [ %19, %for.body.lr.ph ], [ %variant.0, %for.body ]
  %type134 = bitcast %union.tree_node* %variant.0206 to %struct.tree_type*
  %size135 = getelementptr inbounds %union.tree_node* %variant.0206, i64 0, i32 0, i32 2
  %23 = bitcast i32* %size135 to %union.tree_node**
  store %union.tree_node* %20, %union.tree_node** %23, align 8, !tbaa !21
  %24 = getelementptr inbounds %union.tree_node* %variant.0206, i64 0, i32 0, i32 4
  store %union.tree_node* %15, %union.tree_node** %24, align 8, !tbaa !23
  %align139 = getelementptr inbounds %union.tree_node* %variant.0206, i64 0, i32 0, i32 7
  %25 = bitcast %union.tree_node** %align139 to i32*
  store i32 %22, i32* %25, align 4, !tbaa !25
  %user_align141 = getelementptr inbounds %struct.tree_type* %type134, i64 0, i32 6
  %bf.load142 = load i32* %user_align141, align 4
  %bf.clear143 = and i32 %bf.load142, 2147418623
  %bf.set150 = or i32 %bf.set, %bf.clear143
  store i32 %bf.set150, i32* %user_align141, align 4
  %26 = getelementptr inbounds %union.tree_node* %variant.0206, i64 0, i32 0, i32 14
  %variant.0 = load %union.tree_node** %26, align 8
  %cmp133 = icmp eq %union.tree_node* %variant.0, null
  br i1 %cmp133, label %if.end153, label %for.body

if.end153:                                        ; preds = %for.body, %if.end106, %if.then110
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #5

; Function Attrs: nounwind uwtable
define void @layout_type(%union.tree_node* %type) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %type, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 1422, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.layout_type, i64 0, i64 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %type1 = bitcast %union.tree_node* %type to %struct.tree_type*
  %size = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 2
  %0 = bitcast i32* %size to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !21
  %tobool = icmp eq %union.tree_node* %1, null
  br i1 %tobool, label %if.end3, label %if.end758

if.end3:                                          ; preds = %if.end
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 24, label %sw.bb
    i32 11, label %sw.bb4
    i32 6, label %sw.bb15
    i32 10, label %sw.bb15
    i32 12, label %sw.bb15
    i32 7, label %sw.bb57
    i32 8, label %sw.bb92
    i32 9, label %sw.bb151
    i32 5, label %sw.bb188
    i32 14, label %sw.bb197
    i32 23, label %sw.bb222
    i32 16, label %sw.bb222
    i32 13, label %sw.bb252
    i32 15, label %sw.bb252
    i32 18, label %sw.bb310
    i32 20, label %sw.bb554
    i32 21, label %sw.bb554
    i32 22, label %sw.bb554
    i32 19, label %sw.bb589
    i32 17, label %sw.bb679
  ]

sw.bb:                                            ; preds = %if.end3
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 1433, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.layout_type, i64 0, i64 0)) #7
  unreachable

sw.bb4:                                           ; preds = %if.end3
  %precision = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load6 = load i32* %precision, align 4
  %bf.clear7 = and i32 %bf.load6, 511
  %cmp8 = icmp eq i32 %bf.clear7, 0
  br i1 %cmp8, label %if.then9, label %sw.bb15

if.then9:                                         ; preds = %sw.bb4
  %bf.clear13 = and i32 %bf.load6, -512
  %bf.set = or i32 %bf.clear13, 1
  store i32 %bf.set, i32* %precision, align 4
  br label %sw.bb15

sw.bb15:                                          ; preds = %sw.bb4, %if.then9, %if.end3, %if.end3, %if.end3
  %2 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12
  %3 = load %union.tree_node** %2, align 8, !tbaa !54
  %code18 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load19 = load i32* %code18, align 8
  %bf.clear20 = and i32 %bf.load19, 255
  %cmp21 = icmp eq i32 %bf.clear20, 25
  br i1 %cmp21, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %sw.bb15
  %call = tail call i32 @tree_int_cst_sgn(%union.tree_node* %3) #6
  %cmp24 = icmp sgt i32 %call, -1
  br i1 %cmp24, label %if.then25, label %if.end30

if.then25:                                        ; preds = %land.lhs.true
  %bf.load27 = load i32* %code, align 8
  %bf.set29 = or i32 %bf.load27, 8192
  store i32 %bf.set29, i32* %code, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.then25, %land.lhs.true, %sw.bb15
  %precision32 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load33 = load i32* %precision32, align 4
  %bf.clear34 = and i32 %bf.load33, 511
  %4 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp11.i = icmp eq i32 %4, 0
  br i1 %cmp11.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %if.end30, %for.inc.i
  %mode.012.i = phi i32 [ %conv7.i, %for.inc.i ], [ %4, %if.end30 ]
  %idxprom1.i = sext i32 %mode.012.i to i64
  %arrayidx2.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom1.i
  %5 = load i16* %arrayidx2.i, align 2, !tbaa !12
  %conv.i = zext i16 %5 to i32
  %cmp3.i = icmp ult i32 %conv.i, %bf.clear34
  br i1 %cmp3.i, label %for.inc.i, label %smallest_mode_for_size.exit

for.inc.i:                                        ; preds = %for.body.i
  %arrayidx6.i = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom1.i
  %6 = load i8* %arrayidx6.i, align 1, !tbaa !10
  %conv7.i = zext i8 %6 to i32
  %cmp.i = icmp eq i8 %6, 0
  br i1 %cmp.i, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.inc.i, %if.end30
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 259, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.smallest_mode_for_size, i64 0, i64 0)) #7
  unreachable

smallest_mode_for_size.exit:                      ; preds = %for.body.i
  %bf.value = shl i32 %mode.012.i, 9
  %bf.shl = and i32 %bf.value, 65024
  %bf.clear38 = and i32 %bf.load33, -65025
  %bf.set39 = or i32 %bf.clear38, %bf.shl
  store i32 %bf.set39, i32* %precision32, align 4
  %bf.clear43 = and i32 %mode.012.i, 127
  %idxprom910 = zext i32 %bf.clear43 to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom910
  %7 = load i16* %arrayidx, align 2, !tbaa !12
  %conv = zext i16 %7 to i64
  %call44 = tail call %union.tree_node* @size_int_wide(i64 %conv, i32 3) #6
  store %union.tree_node* %call44, %union.tree_node** %0, align 8, !tbaa !21
  %bf.load49 = load i32* %precision32, align 4
  %bf.lshr50 = lshr i32 %bf.load49, 9
  %bf.clear51 = and i32 %bf.lshr50, 127
  %idxprom52911 = zext i32 %bf.clear51 to i64
  %arrayidx53 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom52911
  %8 = load i8* %arrayidx53, align 1, !tbaa !10
  %conv54 = zext i8 %8 to i64
  %call55 = tail call %union.tree_node* @size_int_wide(i64 %conv54, i32 0) #6
  %9 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call55, %union.tree_node** %9, align 8, !tbaa !23
  br label %sw.epilog

sw.bb57:                                          ; preds = %if.end3
  %precision59 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load60 = load i32* %precision59, align 4
  %bf.clear61 = and i32 %bf.load60, 511
  %10 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 2), align 4, !tbaa !10
  %cmp217.i = icmp eq i32 %10, 0
  br i1 %cmp217.i, label %mode_for_size.exit, label %for.body.i916

for.body.i916:                                    ; preds = %sw.bb57, %for.inc.i917
  %mode.018.i = phi i32 [ %conv13.i, %for.inc.i917 ], [ %10, %sw.bb57 ]
  %idxprom4.i = sext i32 %mode.018.i to i64
  %arrayidx5.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i
  %11 = load i16* %arrayidx5.i, align 2, !tbaa !12
  %conv6.i = zext i16 %11 to i32
  %cmp7.i = icmp eq i32 %conv6.i, %bf.clear61
  br i1 %cmp7.i, label %mode_for_size.exit, label %for.inc.i917

for.inc.i917:                                     ; preds = %for.body.i916
  %arrayidx12.i = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i
  %12 = load i8* %arrayidx12.i, align 1, !tbaa !10
  %conv13.i = zext i8 %12 to i32
  %cmp2.i = icmp eq i8 %12, 0
  br i1 %cmp2.i, label %mode_for_size.exit, label %for.body.i916

mode_for_size.exit:                               ; preds = %for.body.i916, %for.inc.i917, %sw.bb57
  %retval.0.i = phi i32 [ 51, %sw.bb57 ], [ %mode.018.i, %for.body.i916 ], [ 51, %for.inc.i917 ]
  %bf.value66 = shl i32 %retval.0.i, 9
  %bf.shl67 = and i32 %bf.value66, 65024
  %bf.clear68 = and i32 %bf.load60, -65025
  %bf.set69 = or i32 %bf.clear68, %bf.shl67
  store i32 %bf.set69, i32* %precision59, align 4
  %bf.clear74 = and i32 %retval.0.i, 127
  %idxprom75908 = zext i32 %bf.clear74 to i64
  %arrayidx76 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom75908
  %13 = load i16* %arrayidx76, align 2, !tbaa !12
  %conv77 = zext i16 %13 to i64
  %call78 = tail call %union.tree_node* @size_int_wide(i64 %conv77, i32 3) #6
  store %union.tree_node* %call78, %union.tree_node** %0, align 8, !tbaa !21
  %bf.load83 = load i32* %precision59, align 4
  %bf.lshr84 = lshr i32 %bf.load83, 9
  %bf.clear85 = and i32 %bf.lshr84, 127
  %idxprom86909 = zext i32 %bf.clear85 to i64
  %arrayidx87 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom86909
  %14 = load i8* %arrayidx87, align 1, !tbaa !10
  %conv88 = zext i8 %14 to i64
  %call89 = tail call %union.tree_node* @size_int_wide(i64 %conv88, i32 0) #6
  %15 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call89, %union.tree_node** %15, align 8, !tbaa !23
  br label %sw.epilog

sw.bb92:                                          ; preds = %if.end3
  %type94 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %16 = load %union.tree_node** %type94, align 8, !tbaa !18
  %unsigned_flag96 = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 2
  %bf.load97 = load i32* %unsigned_flag96, align 8
  %bf.clear99 = and i32 %bf.load97, 8192
  %bf.clear105 = and i32 %bf.load, -8193
  %bf.set106 = or i32 %bf.clear99, %bf.clear105
  store i32 %bf.set106, i32* %code, align 8
  %type109 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %precision110 = getelementptr inbounds %struct.tree_type* %type109, i64 0, i32 6
  %bf.load111 = load i32* %precision110, align 4
  %bf.clear112 = shl i32 %bf.load111, 1
  %mul = and i32 %bf.clear112, 1022
  %bf.load117 = load i32* %unsigned_flag96, align 8
  %bf.clear118 = and i32 %bf.load117, 255
  %cmp119 = icmp eq i32 %bf.clear118, 6
  %idxprom.i = select i1 %cmp119, i64 5, i64 6
  %arrayidx.i = getelementptr inbounds [9 x i32]* @class_narrowest_mode, i64 0, i64 %idxprom.i
  %17 = load i32* %arrayidx.i, align 4, !tbaa !10
  %cmp217.i918 = icmp eq i32 %17, 0
  br i1 %cmp217.i918, label %mode_for_size.exit930, label %for.body.i924

for.body.i924:                                    ; preds = %sw.bb92, %for.inc.i928
  %mode.018.i919 = phi i32 [ %conv13.i926, %for.inc.i928 ], [ %17, %sw.bb92 ]
  %idxprom4.i920 = sext i32 %mode.018.i919 to i64
  %arrayidx5.i921 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i920
  %18 = load i16* %arrayidx5.i921, align 2, !tbaa !12
  %conv6.i922 = zext i16 %18 to i32
  %cmp7.i923 = icmp eq i32 %conv6.i922, %mul
  br i1 %cmp7.i923, label %mode_for_size.exit930, label %for.inc.i928

for.inc.i928:                                     ; preds = %for.body.i924
  %arrayidx12.i925 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i920
  %19 = load i8* %arrayidx12.i925, align 1, !tbaa !10
  %conv13.i926 = zext i8 %19 to i32
  %cmp2.i927 = icmp eq i8 %19, 0
  br i1 %cmp2.i927, label %mode_for_size.exit930, label %for.body.i924

mode_for_size.exit930:                            ; preds = %for.body.i924, %for.inc.i928, %sw.bb92
  %retval.0.i929 = phi i32 [ 51, %sw.bb92 ], [ %mode.018.i919, %for.body.i924 ], [ 51, %for.inc.i928 ]
  %mode123 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load124 = load i32* %mode123, align 4
  %bf.value125 = shl i32 %retval.0.i929, 9
  %bf.shl126 = and i32 %bf.value125, 65024
  %bf.clear127 = and i32 %bf.load124, -65025
  %bf.set128 = or i32 %bf.clear127, %bf.shl126
  store i32 %bf.set128, i32* %mode123, align 4
  %bf.clear133 = and i32 %retval.0.i929, 127
  %idxprom134906 = zext i32 %bf.clear133 to i64
  %arrayidx135 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom134906
  %20 = load i16* %arrayidx135, align 2, !tbaa !12
  %conv136 = zext i16 %20 to i64
  %call137 = tail call %union.tree_node* @size_int_wide(i64 %conv136, i32 3) #6
  store %union.tree_node* %call137, %union.tree_node** %0, align 8, !tbaa !21
  %bf.load142 = load i32* %mode123, align 4
  %bf.lshr143 = lshr i32 %bf.load142, 9
  %bf.clear144 = and i32 %bf.lshr143, 127
  %idxprom145907 = zext i32 %bf.clear144 to i64
  %arrayidx146 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom145907
  %21 = load i8* %arrayidx146, align 1, !tbaa !10
  %conv147 = zext i8 %21 to i64
  %call148 = tail call %union.tree_node* @size_int_wide(i64 %conv147, i32 0) #6
  %22 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call148, %union.tree_node** %22, align 8, !tbaa !23
  br label %sw.epilog

sw.bb151:                                         ; preds = %if.end3
  %type153 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %type153, align 8, !tbaa !18
  %unsigned_flag155 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load156 = load i32* %unsigned_flag155, align 8
  %bf.clear158 = and i32 %bf.load156, 8192
  %bf.clear164 = and i32 %bf.load, -8193
  %bf.set165 = or i32 %bf.clear158, %bf.clear164
  store i32 %bf.set165, i32* %code, align 8
  %mode167 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load168 = load i32* %mode167, align 4
  %bf.lshr169 = lshr i32 %bf.load168, 9
  %bf.clear170 = and i32 %bf.lshr169, 127
  %idxprom171904 = zext i32 %bf.clear170 to i64
  %arrayidx172 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom171904
  %24 = load i16* %arrayidx172, align 2, !tbaa !12
  %conv173 = zext i16 %24 to i64
  %call174 = tail call %union.tree_node* @size_int_wide(i64 %conv173, i32 3) #6
  store %union.tree_node* %call174, %union.tree_node** %0, align 8, !tbaa !21
  %bf.load179 = load i32* %mode167, align 4
  %bf.lshr180 = lshr i32 %bf.load179, 9
  %bf.clear181 = and i32 %bf.lshr180, 127
  %idxprom182905 = zext i32 %bf.clear181 to i64
  %arrayidx183 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom182905
  %25 = load i8* %arrayidx183, align 1, !tbaa !10
  %conv184 = zext i8 %25 to i64
  %call185 = tail call %union.tree_node* @size_int_wide(i64 %conv184, i32 0) #6
  %26 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call185, %union.tree_node** %26, align 8, !tbaa !23
  br label %sw.epilog

sw.bb188:                                         ; preds = %if.end3
  %align = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 7
  %27 = bitcast %union.tree_node** %align to i32*
  store i32 1, i32* %27, align 4, !tbaa !25
  %user_align = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load191 = load i32* %user_align, align 4
  %bf.clear196 = and i32 %bf.load191, 2147418623
  store i32 %bf.clear196, i32* %user_align, align 4
  br label %sw.epilog

sw.bb197:                                         ; preds = %if.end3
  %28 = load i32* @target_flags, align 4, !tbaa !11
  %and = lshr i32 %28, 20
  %29 = and i32 %and, 32
  %30 = add i32 %29, 32
  %conv200903 = zext i32 %30 to i64
  %call201 = tail call %union.tree_node* @size_int_wide(i64 %conv200903, i32 3) #6
  store %union.tree_node* %call201, %union.tree_node** %0, align 8, !tbaa !21
  %31 = load i32* @target_flags, align 4, !tbaa !11
  %and204 = lshr i32 %31, 20
  %32 = and i32 %and204, 32
  %33 = add i32 %32, 32
  %div = sdiv i32 %33, 8
  %conv207 = sext i32 %div to i64
  %call208 = tail call %union.tree_node* @size_int_wide(i64 %conv207, i32 0) #6
  %34 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call208, %union.tree_node** %34, align 8, !tbaa !23
  %35 = load i32* @target_flags, align 4, !tbaa !11
  %and211 = lshr i32 %35, 20
  %36 = and i32 %and211, 32
  %37 = add i32 %36, 32
  %38 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp217.i946 = icmp eq i32 %38, 0
  br i1 %cmp217.i946, label %mode_for_size.exit959, label %for.body.i953

for.body.i953:                                    ; preds = %sw.bb197, %for.inc.i957
  %mode.018.i948 = phi i32 [ %conv13.i955, %for.inc.i957 ], [ %38, %sw.bb197 ]
  %idxprom4.i949 = sext i32 %mode.018.i948 to i64
  %arrayidx5.i950 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i949
  %39 = load i16* %arrayidx5.i950, align 2, !tbaa !12
  %conv6.i951 = zext i16 %39 to i32
  %cmp7.i952 = icmp eq i32 %conv6.i951, %37
  br i1 %cmp7.i952, label %mode_for_size.exit959, label %for.inc.i957

for.inc.i957:                                     ; preds = %for.body.i953
  %arrayidx12.i954 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i949
  %40 = load i8* %arrayidx12.i954, align 1, !tbaa !10
  %conv13.i955 = zext i8 %40 to i32
  %cmp2.i956 = icmp eq i8 %40, 0
  br i1 %cmp2.i956, label %mode_for_size.exit959, label %for.body.i953

mode_for_size.exit959:                            ; preds = %for.body.i953, %for.inc.i957, %sw.bb197
  %retval.0.i958 = phi i32 [ 51, %sw.bb197 ], [ %mode.018.i948, %for.body.i953 ], [ 51, %for.inc.i957 ]
  %mode216 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load217 = load i32* %mode216, align 4
  %bf.value218 = shl i32 %retval.0.i958, 9
  %bf.shl219 = and i32 %bf.value218, 65024
  %bf.clear220 = and i32 %bf.load217, -65025
  %bf.set221 = or i32 %bf.clear220, %bf.shl219
  store i32 %bf.set221, i32* %mode216, align 4
  br label %sw.epilog

sw.bb222:                                         ; preds = %if.end3, %if.end3
  %41 = load i32* @target_flags, align 4, !tbaa !11
  %42 = lshr i32 %41, 19
  %43 = and i32 %42, 64
  %mul226 = add i32 %43, 64
  %44 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp217.i960 = icmp eq i32 %44, 0
  br i1 %cmp217.i960, label %mode_for_size.exit973, label %for.body.i967

for.body.i967:                                    ; preds = %sw.bb222, %for.inc.i971
  %mode.018.i962 = phi i32 [ %conv13.i969, %for.inc.i971 ], [ %44, %sw.bb222 ]
  %idxprom4.i963 = sext i32 %mode.018.i962 to i64
  %arrayidx5.i964 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i963
  %45 = load i16* %arrayidx5.i964, align 2, !tbaa !12
  %conv6.i965 = zext i16 %45 to i32
  %cmp7.i966 = icmp eq i32 %conv6.i965, %mul226
  br i1 %cmp7.i966, label %mode_for_size.exit973, label %for.inc.i971

for.inc.i971:                                     ; preds = %for.body.i967
  %arrayidx12.i968 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i963
  %46 = load i8* %arrayidx12.i968, align 1, !tbaa !10
  %conv13.i969 = zext i8 %46 to i32
  %cmp2.i970 = icmp eq i8 %46, 0
  br i1 %cmp2.i970, label %mode_for_size.exit973, label %for.body.i967

mode_for_size.exit973:                            ; preds = %for.body.i967, %for.inc.i971, %sw.bb222
  %retval.0.i972 = phi i32 [ 51, %sw.bb222 ], [ %mode.018.i962, %for.body.i967 ], [ 51, %for.inc.i971 ]
  %mode229 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load230 = load i32* %mode229, align 4
  %bf.value231 = shl i32 %retval.0.i972, 9
  %bf.shl232 = and i32 %bf.value231, 65024
  %bf.clear233 = and i32 %bf.load230, -65025
  %bf.set234 = or i32 %bf.clear233, %bf.shl232
  store i32 %bf.set234, i32* %mode229, align 4
  %47 = load i32* @target_flags, align 4, !tbaa !11
  %48 = lshr i32 %47, 19
  %49 = and i32 %48, 64
  %mul238 = add i32 %49, 64
  %conv239902 = zext i32 %mul238 to i64
  %call240 = tail call %union.tree_node* @size_int_wide(i64 %conv239902, i32 3) #6
  store %union.tree_node* %call240, %union.tree_node** %0, align 8, !tbaa !21
  %50 = load i32* @target_flags, align 4, !tbaa !11
  %51 = lshr i32 %50, 19
  %52 = and i32 %51, 64
  %mul246 = add i32 %52, 64
  %div247 = sdiv i32 %mul246, 8
  %conv248 = sext i32 %div247 to i64
  %call249 = tail call %union.tree_node* @size_int_wide(i64 %conv248, i32 0) #6
  %53 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call249, %union.tree_node** %53, align 8, !tbaa !23
  br label %sw.epilog

sw.bb252:                                         ; preds = %if.end3, %if.end3
  %cmp257 = icmp eq i32 %bf.clear, 15
  %.b = load i1* @reference_types_internal, align 1
  %or.cond = and i1 %cmp257, %.b
  %54 = load i32* @target_flags, align 4, !tbaa !11
  %and261 = and i32 %54, 33554432
  br i1 %or.cond, label %cond.end, label %cond.end.thread

cond.end.thread:                                  ; preds = %sw.bb252
  %55 = lshr exact i32 %and261, 20
  %56 = add i32 %55, 32
  br label %cond.true276

cond.end:                                         ; preds = %sw.bb252
  %57 = lshr exact i32 %and261, 25
  %58 = or i32 %57, 4
  %idxprom264901 = zext i32 %58 to i64
  %arrayidx265 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom264901
  %59 = load i16* %arrayidx265, align 2, !tbaa !12
  %conv266 = zext i16 %59 to i32
  %.pre983 = lshr exact i32 %and261, 20
  %.pre984 = add i32 %.pre983, 32
  %cmp274 = icmp eq i32 %conv266, %.pre984
  br i1 %cmp274, label %cond.true276, label %cond.false277

cond.true276:                                     ; preds = %cond.end.thread, %cond.end
  %cond270988 = phi i32 [ %56, %cond.end.thread ], [ %conv266, %cond.end ]
  %60 = load i32* @ptr_mode, align 4, !tbaa !10
  br label %cond.end281

cond.false277:                                    ; preds = %cond.end
  %61 = lshr exact i32 %and261, 25
  %62 = or i32 %61, 4
  br label %cond.end281

cond.end281:                                      ; preds = %cond.false277, %cond.true276
  %cond270987 = phi i32 [ %cond270988, %cond.true276 ], [ %conv266, %cond.false277 ]
  %cond282 = phi i32 [ %60, %cond.true276 ], [ %62, %cond.false277 ]
  %mode284 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load285 = load i32* %mode284, align 4
  %bf.value286 = shl i32 %cond282, 9
  %bf.shl287 = and i32 %bf.value286, 65024
  %bf.clear288 = and i32 %bf.load285, -65025
  %bf.set289 = or i32 %bf.clear288, %bf.shl287
  store i32 %bf.set289, i32* %mode284, align 4
  %conv290 = sext i32 %cond270987 to i64
  %call291 = tail call %union.tree_node* @size_int_wide(i64 %conv290, i32 3) #6
  store %union.tree_node* %call291, %union.tree_node** %0, align 8, !tbaa !21
  %div294 = sdiv i32 %cond270987, 8
  %conv295 = sext i32 %div294 to i64
  %call296 = tail call %union.tree_node* @size_int_wide(i64 %conv295, i32 0) #6
  %63 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call296, %union.tree_node** %63, align 8, !tbaa !23
  %bf.load301 = load i32* %code, align 8
  %bf.set303 = or i32 %bf.load301, 8192
  store i32 %bf.set303, i32* %code, align 8
  %bf.load306 = load i32* %mode284, align 4
  %bf.value307 = and i32 %cond270987, 511
  %bf.clear308 = and i32 %bf.load306, -512
  %bf.set309 = or i32 %bf.clear308, %bf.value307
  store i32 %bf.set309, i32* %mode284, align 4
  br label %sw.epilog

sw.bb310:                                         ; preds = %if.end3
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %64 = load i8** %values, align 8
  %type313 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %65 = load %union.tree_node** %type313, align 8, !tbaa !18
  %call314 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %65) #6
  %tobool315 = icmp eq i8* %64, null
  br i1 %tobool315, label %if.end423, label %land.lhs.true316

land.lhs.true316:                                 ; preds = %sw.bb310
  %maxval = getelementptr inbounds i8* %64, i64 112
  %66 = bitcast i8* %maxval to %union.tree_node**
  %67 = load %union.tree_node** %66, align 8, !tbaa !55
  %tobool318 = icmp eq %union.tree_node* %67, null
  br i1 %tobool318, label %if.end423, label %land.lhs.true319

land.lhs.true319:                                 ; preds = %land.lhs.true316
  %minval321 = getelementptr inbounds i8* %64, i64 104
  %68 = bitcast i8* %minval321 to %union.tree_node**
  %69 = load %union.tree_node** %68, align 8, !tbaa !54
  %tobool322 = icmp eq %union.tree_node* %69, null
  br i1 %tobool322, label %if.end423, label %land.lhs.true323

land.lhs.true323:                                 ; preds = %land.lhs.true319
  %size325 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 2
  %70 = bitcast i32* %size325 to %union.tree_node**
  %71 = load %union.tree_node** %70, align 8, !tbaa !21
  %tobool326 = icmp eq %union.tree_node* %71, null
  br i1 %tobool326, label %if.end423, label %if.then327

if.then327:                                       ; preds = %land.lhs.true323
  %72 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !1
  %73 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %type333 = getelementptr inbounds %union.tree_node* %69, i64 0, i32 0, i32 0, i32 1
  %74 = load %union.tree_node** %type333, align 8, !tbaa !18
  %call334 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %74, %union.tree_node* %67, %union.tree_node* %69) #6
  %call335 = tail call %union.tree_node* @fold(%union.tree_node* %call334) #6
  %call336 = tail call %union.tree_node* @convert(%union.tree_node* %73, %union.tree_node* %call335) #6
  %call337 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %72, %union.tree_node* %call336) #6
  %75 = load %union.tree_node** %70, align 8, !tbaa !21
  %packed_flag = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load341 = load i32* %packed_flag, align 4
  %bf.clear343 = and i32 %bf.load341, 1048576
  %tobool344 = icmp eq i32 %bf.clear343, 0
  br i1 %tobool344, label %if.end404, label %land.lhs.true345

land.lhs.true345:                                 ; preds = %if.then327
  %code347 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 0, i32 2
  %bf.load348 = load i32* %code347, align 8
  %bf.clear349 = and i32 %bf.load348, 255
  switch i32 %bf.clear349, label %if.end404 [
    i32 6, label %land.lhs.true372
    i32 10, label %land.lhs.true372
    i32 11, label %land.lhs.true372
    i32 12, label %land.lhs.true372
  ]

land.lhs.true372:                                 ; preds = %land.lhs.true345, %land.lhs.true345, %land.lhs.true345, %land.lhs.true345
  %76 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 13
  %77 = load %union.tree_node** %76, align 8, !tbaa !55
  %call375 = tail call i32 @integer_zerop(%union.tree_node* %77) #6
  %tobool376 = icmp eq i32 %call375, 0
  br i1 %tobool376, label %lor.lhs.false377, label %land.lhs.true382

lor.lhs.false377:                                 ; preds = %land.lhs.true372
  %78 = load %union.tree_node** %76, align 8, !tbaa !55
  %call380 = tail call i32 @integer_onep(%union.tree_node* %78) #6
  %tobool381 = icmp eq i32 %call380, 0
  br i1 %tobool381, label %if.end404, label %land.lhs.true382

land.lhs.true382:                                 ; preds = %lor.lhs.false377, %land.lhs.true372
  %79 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 12
  %80 = load %union.tree_node** %79, align 8, !tbaa !54
  %call385 = tail call i32 @host_integerp(%union.tree_node* %80, i32 1) #6
  %tobool386 = icmp eq i32 %call385, 0
  br i1 %tobool386, label %if.end404, label %if.then387

if.then387:                                       ; preds = %land.lhs.true382
  %81 = load %union.tree_node** %76, align 8, !tbaa !55
  %call390 = tail call i64 @tree_low_cst(%union.tree_node* %81, i32 1) #6
  %82 = load %union.tree_node** %79, align 8, !tbaa !54
  %call393 = tail call i64 @tree_low_cst(%union.tree_node* %82, i32 1) #6
  %sub = sub nsw i64 %call390, %call393
  %cmp394 = icmp eq i64 %sub, 1
  %83 = icmp ult i64 %call390, 2
  %or.cond912 = and i1 %cmp394, %83
  %84 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !1
  %.914 = select i1 %or.cond912, %union.tree_node* %84, %union.tree_node* %75
  br label %if.end404

if.end404:                                        ; preds = %if.then387, %land.lhs.true345, %land.lhs.true382, %lor.lhs.false377, %if.then327
  %element_size.0 = phi %union.tree_node* [ %75, %land.lhs.true382 ], [ %75, %lor.lhs.false377 ], [ %75, %if.then327 ], [ %75, %land.lhs.true345 ], [ %.914, %if.then387 ]
  %85 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %call405 = tail call %union.tree_node* @convert(%union.tree_node* %85, %union.tree_node* %call337) #6
  %call406 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %element_size.0, %union.tree_node* %call405) #6
  store %union.tree_node* %call406, %union.tree_node** %0, align 8, !tbaa !21
  %86 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 4
  %87 = load %union.tree_node** %86, align 8, !tbaa !23
  %cmp411 = icmp eq %union.tree_node* %87, null
  br i1 %cmp411, label %if.end423, label %land.lhs.true413

land.lhs.true413:                                 ; preds = %if.end404
  %call414 = tail call i32 @integer_onep(%union.tree_node* %element_size.0) #6
  %tobool415 = icmp eq i32 %call414, 0
  br i1 %tobool415, label %if.then416, label %if.end423

if.then416:                                       ; preds = %land.lhs.true413
  %88 = load %union.tree_node** %86, align 8, !tbaa !23
  %call419 = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %88, %union.tree_node* %call337) #6
  %89 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call419, %union.tree_node** %89, align 8, !tbaa !23
  br label %if.end423

if.end423:                                        ; preds = %land.lhs.true413, %if.end404, %land.lhs.true323, %land.lhs.true319, %land.lhs.true316, %sw.bb310, %if.then416
  %type424 = bitcast %union.tree_node* %65 to %struct.tree_type*
  %align425 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 7
  %90 = bitcast %union.tree_node** %align425 to i32*
  %91 = load i32* %90, align 4, !tbaa !25
  %cmp426 = icmp ugt i32 %91, 8
  %. = select i1 %cmp426, i32 %91, i32 8
  %align435 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 7
  %92 = bitcast %union.tree_node** %align435 to i32*
  store i32 %., i32* %92, align 4, !tbaa !25
  %user_align437 = getelementptr inbounds %struct.tree_type* %type424, i64 0, i32 6
  %bf.load438 = load i32* %user_align437, align 4
  %bf.lshr439 = and i32 %bf.load438, -2147483648
  %user_align441 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load442 = load i32* %user_align441, align 4
  %bf.clear445 = and i32 %bf.load442, 2147418623
  %bf.set446 = or i32 %bf.lshr439, %bf.clear445
  %bf.set451 = or i32 %bf.set446, 26112
  store i32 %bf.set451, i32* %user_align441, align 4
  %93 = load %union.tree_node** %0, align 8, !tbaa !21
  %cmp454 = icmp eq %union.tree_node* %93, null
  br i1 %cmp454, label %sw.epilog, label %land.lhs.true456

land.lhs.true456:                                 ; preds = %if.end423
  %94 = load %union.tree_node** %type313, align 8, !tbaa !18
  %type459 = bitcast %union.tree_node* %94 to %struct.tree_type*
  %mode460 = getelementptr inbounds %struct.tree_type* %type459, i64 0, i32 6
  %bf.load461 = load i32* %mode460, align 4
  %95 = and i32 %bf.load461, 196096
  %96 = icmp eq i32 %95, 26112
  br i1 %96, label %sw.epilog, label %if.then474

if.then474:                                       ; preds = %land.lhs.true456
  %size480 = getelementptr inbounds %union.tree_node* %94, i64 0, i32 0, i32 2
  %97 = bitcast i32* %size480 to %union.tree_node**
  %98 = load %union.tree_node** %97, align 8, !tbaa !21
  %call481 = tail call i32 @simple_cst_equal(%union.tree_node* %93, %union.tree_node* %98) #6
  %tobool482 = icmp eq i32 %call481, 0
  br i1 %tobool482, label %if.else, label %if.then483

if.then483:                                       ; preds = %if.then474
  %99 = load %union.tree_node** %type313, align 8, !tbaa !18
  %type486 = bitcast %union.tree_node* %99 to %struct.tree_type*
  %mode487 = getelementptr inbounds %struct.tree_type* %type486, i64 0, i32 6
  %bf.load488 = load i32* %mode487, align 4
  %bf.clear490 = and i32 %bf.load488, 65024
  %bf.load493 = load i32* %user_align441, align 4
  %bf.clear496 = and i32 %bf.load493, -65025
  %bf.set497 = or i32 %bf.clear496, %bf.clear490
  br label %if.end508

if.else:                                          ; preds = %if.then474
  %100 = load %union.tree_node** %0, align 8, !tbaa !21
  %code.i = getelementptr inbounds %union.tree_node* %100, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i974 = icmp eq i32 %bf.clear.i, 25
  br i1 %cmp.i974, label %lor.lhs.false.i, label %mode_for_size_tree.exit

lor.lhs.false.i:                                  ; preds = %if.else
  %call.i = tail call i32 @compare_tree_int(%union.tree_node* %100, i64 1000) #6
  %cmp1.i = icmp sgt i32 %call.i, 0
  br i1 %cmp1.i, label %mode_for_size_tree.exit, label %if.else.i

if.else.i:                                        ; preds = %lor.lhs.false.i
  %int_cst2.i = getelementptr inbounds %union.tree_node* %100, i64 0, i32 0, i32 2
  %low.i = bitcast i32* %int_cst2.i to i64*
  %101 = load i64* %low.i, align 8, !tbaa !14
  %conv.i975 = trunc i64 %101 to i32
  %102 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 5), align 2, !tbaa !12
  %conv.i.i = zext i16 %102 to i32
  %cmp.i.i = icmp ult i32 %conv.i.i, %conv.i975
  br i1 %cmp.i.i, label %mode_for_size_tree.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.else.i
  %103 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp217.i.i = icmp eq i32 %103, 0
  br i1 %cmp217.i.i, label %mode_for_size_tree.exit, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.end.i.i, %for.inc.i.i
  %mode.018.i.i = phi i32 [ %conv13.i.i, %for.inc.i.i ], [ %103, %if.end.i.i ]
  %idxprom4.i.i = sext i32 %mode.018.i.i to i64
  %arrayidx5.i.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i.i
  %104 = load i16* %arrayidx5.i.i, align 2, !tbaa !12
  %conv6.i.i = zext i16 %104 to i32
  %cmp7.i.i = icmp eq i32 %conv6.i.i, %conv.i975
  br i1 %cmp7.i.i, label %mode_for_size_tree.exit, label %for.inc.i.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %arrayidx12.i.i = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i.i
  %105 = load i8* %arrayidx12.i.i, align 1, !tbaa !10
  %conv13.i.i = zext i8 %105 to i32
  %cmp2.i.i = icmp eq i8 %105, 0
  br i1 %cmp2.i.i, label %mode_for_size_tree.exit, label %for.body.i.i

mode_for_size_tree.exit:                          ; preds = %for.body.i.i, %for.inc.i.i, %if.else, %lor.lhs.false.i, %if.else.i, %if.end.i.i
  %retval.0.i976 = phi i32 [ 51, %if.else ], [ 51, %lor.lhs.false.i ], [ 51, %if.else.i ], [ 51, %if.end.i.i ], [ %mode.018.i.i, %for.body.i.i ], [ 51, %for.inc.i.i ]
  %bf.load503 = load i32* %user_align441, align 4
  %bf.value504 = shl i32 %retval.0.i976, 9
  %bf.shl505 = and i32 %bf.value504, 65024
  %bf.clear506 = and i32 %bf.load503, -65025
  %bf.set507 = or i32 %bf.clear506, %bf.shl505
  br label %if.end508

if.end508:                                        ; preds = %mode_for_size_tree.exit, %if.then483
  %storemerge = phi i32 [ %bf.set507, %mode_for_size_tree.exit ], [ %bf.set497, %if.then483 ]
  store i32 %storemerge, i32* %user_align441, align 4
  br label %sw.epilog

sw.bb554:                                         ; preds = %if.end3, %if.end3, %if.end3
  %call.i977 = tail call noalias i8* @xmalloc(i64 72) #6
  %106 = bitcast i8* %call.i977 to %struct.record_layout_info_s*
  %t1.i = bitcast i8* %call.i977 to %union.tree_node**
  store %union.tree_node* %type, %union.tree_node** %t1.i, align 8, !tbaa !28
  %align.i = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 7
  %107 = bitcast %union.tree_node** %align.i to i32*
  %108 = load i32* %107, align 4, !tbaa !25
  %cmp.i978 = icmp ult i32 %108, 8
  %..i = select i1 %cmp.i978, i32 8, i32 %108
  %record_align.i = getelementptr inbounds i8* %call.i977, i64 32
  %109 = bitcast i8* %record_align.i to i32*
  store i32 %..i, i32* %109, align 4, !tbaa !30
  %unpadded_align.i = getelementptr inbounds i8* %call.i977, i64 40
  %110 = bitcast i8* %unpadded_align.i to i32*
  store i32 %..i, i32* %110, align 4, !tbaa !31
  %unpacked_align.i = getelementptr inbounds i8* %call.i977, i64 36
  %111 = bitcast i8* %unpacked_align.i to i32*
  store i32 %..i, i32* %111, align 4, !tbaa !32
  %cmp6.i = icmp ugt i32 %..i, 128
  %cond11.i = select i1 %cmp6.i, i32 %..i, i32 128
  %offset_align.i = getelementptr inbounds i8* %call.i977, i64 16
  %112 = bitcast i8* %offset_align.i to i32*
  store i32 %cond11.i, i32* %112, align 4, !tbaa !33
  %113 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !1
  %offset.i = getelementptr inbounds i8* %call.i977, i64 8
  %114 = bitcast i8* %offset.i to %union.tree_node**
  store %union.tree_node* %113, %union.tree_node** %114, align 8, !tbaa !34
  %115 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !1
  %bitpos.i = getelementptr inbounds i8* %call.i977, i64 24
  %116 = bitcast i8* %bitpos.i to %union.tree_node**
  store %union.tree_node* %115, %union.tree_node** %116, align 8, !tbaa !35
  %prev_field.i = getelementptr inbounds i8* %call.i977, i64 48
  tail call void @llvm.memset.p0i8.i64(i8* %prev_field.i, i8 0, i64 20, i32 8, i1 false) #6
  %bf.load558 = load i32* %code, align 8
  %bf.clear559 = and i32 %bf.load558, 255
  %cmp560 = icmp eq i32 %bf.clear559, 22
  %values564 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %117 = load i8** %values564, align 8
  br i1 %cmp560, label %if.then562, label %if.end568

if.then562:                                       ; preds = %sw.bb554
  %118 = bitcast i8* %117 to %union.tree_node*
  %call565 = tail call %union.tree_node* @nreverse(%union.tree_node* %118) #6
  %call565.c = bitcast %union.tree_node* %call565 to i8*
  store i8* %call565.c, i8** %values564, align 8, !tbaa !56
  br label %if.end568

if.end568:                                        ; preds = %sw.bb554, %if.then562
  %119 = phi i8* [ %call565.c, %if.then562 ], [ %117, %sw.bb554 ]
  %values570 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %tobool571980 = icmp eq i8* %119, null
  br i1 %tobool571980, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end568
  %120 = bitcast i8* %119 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %field.0981 = phi %union.tree_node* [ %120, %for.body.lr.ph ], [ %121, %for.body ]
  tail call void @place_field(%struct.record_layout_info_s* %106, %union.tree_node* %field.0981)
  %chain = getelementptr inbounds %union.tree_node* %field.0981, i64 0, i32 0, i32 0, i32 0
  %121 = load %union.tree_node** %chain, align 8, !tbaa !9
  %tobool571 = icmp eq %union.tree_node* %121, null
  br i1 %tobool571, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.end568
  %bf.load575 = load i32* %code, align 8
  %bf.clear576 = and i32 %bf.load575, 255
  %cmp577 = icmp eq i32 %bf.clear576, 22
  br i1 %cmp577, label %if.then579, label %if.end585

if.then579:                                       ; preds = %for.end
  %122 = load i8** %values570, align 8
  %123 = bitcast i8* %122 to %union.tree_node*
  %call582 = tail call %union.tree_node* @nreverse(%union.tree_node* %123) #6
  %call582.c = bitcast %union.tree_node* %call582 to i8*
  store i8* %call582.c, i8** %values570, align 8, !tbaa !56
  br label %if.end585

if.end585:                                        ; preds = %if.then579, %for.end
  %124 = load void (%struct.record_layout_info_s*)** @lang_adjust_rli, align 8, !tbaa !1
  %tobool586 = icmp eq void (%struct.record_layout_info_s*)* %124, null
  br i1 %tobool586, label %if.end588, label %if.then587

if.then587:                                       ; preds = %if.end585
  tail call void %124(%struct.record_layout_info_s* %106) #6
  br label %if.end588

if.end588:                                        ; preds = %if.end585, %if.then587
  tail call void @finish_record_layout(%struct.record_layout_info_s* %106)
  br label %sw.epilog

sw.bb589:                                         ; preds = %if.end3
  %values591 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %125 = load i8** %values591, align 8
  %maxval593 = getelementptr inbounds i8* %125, i64 112
  %126 = bitcast i8* %maxval593 to %union.tree_node**
  %127 = load %union.tree_node** %126, align 8, !tbaa !55
  %code595 = getelementptr inbounds %union.tree_node* %127, i64 0, i32 0, i32 0, i32 2
  %bf.load596 = load i32* %code595, align 8
  %bf.clear597 = and i32 %bf.load596, 255
  %cmp598 = icmp eq i32 %bf.clear597, 25
  br i1 %cmp598, label %lor.lhs.false600, label %if.then611

lor.lhs.false600:                                 ; preds = %sw.bb589
  %minval604 = getelementptr inbounds i8* %125, i64 104
  %128 = bitcast i8* %minval604 to %union.tree_node**
  %129 = load %union.tree_node** %128, align 8, !tbaa !54
  %code606 = getelementptr inbounds %union.tree_node* %129, i64 0, i32 0, i32 0, i32 2
  %bf.load607 = load i32* %code606, align 8
  %bf.clear608 = and i32 %bf.load607, 255
  %cmp609 = icmp eq i32 %bf.clear608, 25
  br i1 %cmp609, label %if.else612, label %if.then611

if.then611:                                       ; preds = %lor.lhs.false600, %sw.bb589
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 1666, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.layout_type, i64 0, i64 0)) #7
  unreachable

if.else612:                                       ; preds = %lor.lhs.false600
  %130 = load i32* @set_alignment, align 4, !tbaa !11
  %tobool613 = icmp eq i32 %130, 0
  br i1 %tobool613, label %cond.false615, label %cond.end619

cond.false615:                                    ; preds = %if.else612
  %131 = load i32* @target_flags, align 4, !tbaa !11
  %and616 = lshr i32 %131, 20
  %132 = and i32 %and616, 32
  %133 = add i32 %132, 32
  br label %cond.end619

cond.end619:                                      ; preds = %if.else612, %cond.false615
  %cond620 = phi i32 [ %133, %cond.false615 ], [ %130, %if.else612 ]
  %int_cst625 = getelementptr inbounds %union.tree_node* %127, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst625 to i64*
  %134 = load i64* %low, align 8, !tbaa !14
  %int_cst631 = getelementptr inbounds %union.tree_node* %129, i64 0, i32 0, i32 2
  %low632 = bitcast i32* %int_cst631 to i64*
  %135 = load i64* %low632, align 8, !tbaa !14
  %sub633 = add i64 %134, 1
  %add = sub i64 %sub633, %135
  %conv634 = trunc i64 %add to i32
  %add635 = add i32 %cond620, -1
  %sub636 = add i32 %add635, %conv634
  %div637 = urem i32 %sub636, %cond620
  %mul638 = sub i32 %sub636, %div637
  %cmp639 = icmp sgt i32 %mul638, %cond620
  br i1 %cmp639, label %if.then641, label %if.else647

if.then641:                                       ; preds = %cond.end619
  %mode643 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load644 = load i32* %mode643, align 4
  %bf.clear645 = and i32 %bf.load644, -65025
  %bf.set646 = or i32 %bf.clear645, 26112
  store i32 %bf.set646, i32* %mode643, align 4
  br label %if.end656

if.else647:                                       ; preds = %cond.end619
  %136 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 5), align 2, !tbaa !12
  %conv.i931 = zext i16 %136 to i32
  %cmp.i932 = icmp ult i32 %conv.i931, %cond620
  br i1 %cmp.i932, label %mode_for_size.exit945, label %if.end.i

if.end.i:                                         ; preds = %if.else647
  %137 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp217.i933 = icmp eq i32 %137, 0
  br i1 %cmp217.i933, label %mode_for_size.exit945, label %for.body.i939

for.body.i939:                                    ; preds = %if.end.i, %for.inc.i943
  %mode.018.i934 = phi i32 [ %conv13.i941, %for.inc.i943 ], [ %137, %if.end.i ]
  %idxprom4.i935 = sext i32 %mode.018.i934 to i64
  %arrayidx5.i936 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom4.i935
  %138 = load i16* %arrayidx5.i936, align 2, !tbaa !12
  %conv6.i937 = zext i16 %138 to i32
  %cmp7.i938 = icmp eq i32 %conv6.i937, %cond620
  br i1 %cmp7.i938, label %mode_for_size.exit945, label %for.inc.i943

for.inc.i943:                                     ; preds = %for.body.i939
  %arrayidx12.i940 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom4.i935
  %139 = load i8* %arrayidx12.i940, align 1, !tbaa !10
  %conv13.i941 = zext i8 %139 to i32
  %cmp2.i942 = icmp eq i8 %139, 0
  br i1 %cmp2.i942, label %mode_for_size.exit945, label %for.body.i939

mode_for_size.exit945:                            ; preds = %for.body.i939, %for.inc.i943, %if.else647, %if.end.i
  %retval.0.i944 = phi i32 [ 51, %if.else647 ], [ 51, %if.end.i ], [ %mode.018.i934, %for.body.i939 ], [ 51, %for.inc.i943 ]
  %mode650 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load651 = load i32* %mode650, align 4
  %bf.value652 = shl i32 %retval.0.i944, 9
  %bf.shl653 = and i32 %bf.value652, 65024
  %bf.clear654 = and i32 %bf.load651, -65025
  %bf.set655 = or i32 %bf.clear654, %bf.shl653
  store i32 %bf.set655, i32* %mode650, align 4
  br label %if.end656

if.end656:                                        ; preds = %mode_for_size.exit945, %if.then641
  %conv657 = sext i32 %mul638 to i64
  %call658 = tail call %union.tree_node* @size_int_wide(i64 %conv657, i32 3) #6
  store %union.tree_node* %call658, %union.tree_node** %0, align 8, !tbaa !21
  %div661 = sdiv i32 %mul638, 8
  %conv662 = sext i32 %div661 to i64
  %call663 = tail call %union.tree_node* @size_int_wide(i64 %conv662, i32 0) #6
  %140 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  store %union.tree_node* %call663, %union.tree_node** %140, align 8, !tbaa !23
  %align667 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 7
  %141 = bitcast %union.tree_node** %align667 to i32*
  store i32 %cond620, i32* %141, align 4, !tbaa !25
  %user_align669 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load670 = load i32* %user_align669, align 4
  %bf.value675 = and i32 %conv634, 511
  %bf.clear676 = and i32 %bf.load670, 2147483136
  %bf.set677 = or i32 %bf.clear676, %bf.value675
  store i32 %bf.set677, i32* %user_align669, align 4
  br label %sw.epilog

sw.bb679:                                         ; preds = %if.end3
  %align681 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 7
  %142 = bitcast %union.tree_node** %align681 to i32*
  store i32 128, i32* %142, align 4, !tbaa !25
  %user_align683 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load684 = load i32* %user_align683, align 4
  %bf.clear689 = and i32 %bf.load684, 2147418623
  %bf.set690 = or i32 %bf.clear689, 26112
  store i32 %bf.set690, i32* %user_align683, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end3
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 1702, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.layout_type, i64 0, i64 0)) #7
  unreachable

sw.epilog:                                        ; preds = %land.lhs.true456, %if.end423, %if.end508, %sw.bb679, %if.end656, %if.end588, %cond.end281, %mode_for_size.exit973, %mode_for_size.exit959, %sw.bb188, %sw.bb151, %mode_for_size.exit930, %mode_for_size.exit, %smallest_mode_for_size.exit
  %bf.load693 = load i32* %code, align 8
  %bf.clear694 = and i32 %bf.load693, 255
  %bf.clear694.off = add i32 %bf.clear694, -20
  %switch = icmp ult i32 %bf.clear694.off, 3
  br i1 %switch, label %if.end712, label %if.then711

if.then711:                                       ; preds = %sw.epilog
  tail call fastcc void @finalize_type_size(%union.tree_node* %type)
  br label %if.end712

if.end712:                                        ; preds = %sw.epilog, %if.then711
  %.b900 = load i1* @sizetype_set, align 1
  br i1 %.b900, label %if.end716, label %if.then714

if.then714:                                       ; preds = %if.end712
  %143 = load %union.tree_node** @early_type_list, align 8, !tbaa !1
  %call715 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %type, %union.tree_node* %143) #6
  store %union.tree_node* %call715, %union.tree_node** @early_type_list, align 8, !tbaa !1
  br label %if.end716

if.end716:                                        ; preds = %if.then714, %if.end712
  %bf.load719 = load i32* %code, align 8
  %bf.clear720 = and i32 %bf.load719, 255
  %bf.clear720.off = add i32 %bf.clear720, -18
  %switch915 = icmp ult i32 %bf.clear720.off, 5
  br i1 %switch915, label %land.lhs.true751, label %if.end758

land.lhs.true751:                                 ; preds = %if.end716
  %alias_set = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 18
  %144 = bitcast %struct.rtx_def** %alias_set to i64*
  %145 = load i64* %144, align 8, !tbaa !57
  %cmp753 = icmp eq i64 %145, -1
  br i1 %cmp753, label %if.end758, label %if.then755

if.then755:                                       ; preds = %land.lhs.true751
  store %struct.rtx_def* null, %struct.rtx_def** %alias_set, align 8, !tbaa !57
  br label %if.end758

if.end758:                                        ; preds = %if.end716, %land.lhs.true751, %if.end, %if.then755
  ret void
}

declare i32 @tree_int_cst_sgn(%union.tree_node*) #2

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare %union.tree_node* @fold(%union.tree_node*) #2

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #2

declare i32 @integer_onep(%union.tree_node*) #2

declare %union.tree_node* @nreverse(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @make_signed_type(i32 %precision) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 6) #6
  %type1 = bitcast %union.tree_node* %call to %struct.tree_type*
  %precision2 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %precision2, align 4
  %bf.value = and i32 %precision, 511
  %bf.clear = and i32 %bf.load, -512
  %bf.set = or i32 %bf.clear, %bf.value
  store i32 %bf.set, i32* %precision2, align 4
  %cmp.i = icmp ugt i32 %bf.value, 128
  %.bf.clear.i = select i1 %cmp.i, i32 128, i32 %bf.value
  %sub.i = add nsw i32 %.bf.clear.i, -64
  %cmp3.i = icmp sgt i32 %sub.i, 0
  br i1 %cmp3.i, label %cond.end.i, label %cond.false.i

cond.false.i:                                     ; preds = %entry
  %sub4.i = add nsw i32 %.bf.clear.i, -1
  %sh_prom.i = zext i32 %sub4.i to i64
  %shl.i = shl i64 -1, %sh_prom.i
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %entry
  %cond.i = phi i64 [ %shl.i, %cond.false.i ], [ 0, %entry ]
  %sub6.i = add nsw i32 %.bf.clear.i, -65
  %cmp7.i = icmp sgt i32 %sub6.i, 0
  %phitmp.i = zext i32 %sub6.i to i64
  %phitmp.op.i = shl i64 -1, %phitmp.i
  %shl15.i = select i1 %cmp7.i, i64 %phitmp.op.i, i64 -1
  %call.i = tail call %union.tree_node* @build_int_2_wide(i64 %cond.i, i64 %shl15.i) #6
  %0 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 12
  store %union.tree_node* %call.i, %union.tree_node** %0, align 8, !tbaa !54
  br i1 %cmp3.i, label %cond.end25.i, label %cond.false20.i

cond.false20.i:                                   ; preds = %cond.end.i
  %sub21.i = add nsw i32 %.bf.clear.i, -1
  %sh_prom22.i = zext i32 %sub21.i to i64
  %shl23.i = shl i64 1, %sh_prom22.i
  %sub24.i = add nsw i64 %shl23.i, -1
  br label %cond.end25.i

cond.end25.i:                                     ; preds = %cond.false20.i, %cond.end.i
  %cond26.i = phi i64 [ %sub24.i, %cond.false20.i ], [ -1, %cond.end.i ]
  br i1 %cmp7.i, label %cond.true30.i, label %fixup_signed_type.exit

cond.true30.i:                                    ; preds = %cond.end25.i
  %shl34.i = shl i64 1, %phitmp.i
  %sub35.i = add nsw i64 %shl34.i, -1
  br label %fixup_signed_type.exit

fixup_signed_type.exit:                           ; preds = %cond.end25.i, %cond.true30.i
  %cond38.i = phi i64 [ %sub35.i, %cond.true30.i ], [ 0, %cond.end25.i ]
  %call39.i = tail call %union.tree_node* @build_int_2_wide(i64 %cond26.i, i64 %cond38.i) #6
  %1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 13
  store %union.tree_node* %call39.i, %union.tree_node** %1, align 8, !tbaa !55
  %2 = load %union.tree_node** %0, align 8, !tbaa !54
  %type43.i = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type43.i, align 8, !tbaa !18
  %type47.i = getelementptr inbounds %union.tree_node* %call39.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type47.i, align 8, !tbaa !18
  tail call void @layout_type(%union.tree_node* %call) #6
  ret %union.tree_node* %call
}

declare %union.tree_node* @make_node(i32) #2

; Function Attrs: nounwind uwtable
define void @fixup_signed_type(%union.tree_node* %type) #0 {
entry:
  %type1 = bitcast %union.tree_node* %type to %struct.tree_type*
  %precision2 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %precision2, align 4
  %bf.clear = and i32 %bf.load, 511
  %cmp = icmp ugt i32 %bf.clear, 128
  %.bf.clear = select i1 %cmp, i32 128, i32 %bf.clear
  %sub = add nsw i32 %.bf.clear, -64
  %cmp3 = icmp sgt i32 %sub, 0
  br i1 %cmp3, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  %sub4 = add nsw i32 %.bf.clear, -1
  %sh_prom = zext i32 %sub4 to i64
  %shl = shl i64 -1, %sh_prom
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %cond = phi i64 [ %shl, %cond.false ], [ 0, %entry ]
  %sub6 = add nsw i32 %.bf.clear, -65
  %cmp7 = icmp sgt i32 %sub6, 0
  %phitmp = zext i32 %sub6 to i64
  %phitmp.op = shl i64 -1, %phitmp
  %shl15 = select i1 %cmp7, i64 %phitmp.op, i64 -1
  %call = tail call %union.tree_node* @build_int_2_wide(i64 %cond, i64 %shl15) #6
  %0 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12
  store %union.tree_node* %call, %union.tree_node** %0, align 8, !tbaa !54
  br i1 %cmp3, label %cond.end25, label %cond.false20

cond.false20:                                     ; preds = %cond.end
  %sub21 = add nsw i32 %.bf.clear, -1
  %sh_prom22 = zext i32 %sub21 to i64
  %shl23 = shl i64 1, %sh_prom22
  %sub24 = add nsw i64 %shl23, -1
  br label %cond.end25

cond.end25:                                       ; preds = %cond.end, %cond.false20
  %cond26 = phi i64 [ %sub24, %cond.false20 ], [ -1, %cond.end ]
  br i1 %cmp7, label %cond.true30, label %cond.end37

cond.true30:                                      ; preds = %cond.end25
  %shl34 = shl i64 1, %phitmp
  %sub35 = add nsw i64 %shl34, -1
  br label %cond.end37

cond.end37:                                       ; preds = %cond.end25, %cond.true30
  %cond38 = phi i64 [ %sub35, %cond.true30 ], [ 0, %cond.end25 ]
  %call39 = tail call %union.tree_node* @build_int_2_wide(i64 %cond26, i64 %cond38) #6
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 13
  store %union.tree_node* %call39, %union.tree_node** %1, align 8, !tbaa !55
  %2 = load %union.tree_node** %0, align 8, !tbaa !54
  %type43 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type43, align 8, !tbaa !18
  %type47 = getelementptr inbounds %union.tree_node* %call39, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type47, align 8, !tbaa !18
  tail call void @layout_type(%union.tree_node* %type)
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @make_unsigned_type(i32 %precision) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 6) #6
  %type1 = bitcast %union.tree_node* %call to %struct.tree_type*
  %precision2 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %precision2, align 4
  %bf.value = and i32 %precision, 511
  %bf.clear = and i32 %bf.load, -512
  %bf.set = or i32 %bf.clear, %bf.value
  store i32 %bf.set, i32* %precision2, align 4
  %cmp.i = icmp ugt i32 %bf.value, 128
  %.bf.clear.i = select i1 %cmp.i, i32 128, i32 %bf.value
  %call.i = tail call %union.tree_node* @build_int_2_wide(i64 0, i64 0) #6
  %0 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 12
  store %union.tree_node* %call.i, %union.tree_node** %0, align 8, !tbaa !54
  %sub.i = add nsw i32 %.bf.clear.i, -64
  %cmp4.i = icmp sgt i32 %sub.i, -1
  br i1 %cmp4.i, label %cond.end.i, label %cond.end.thread.i

cond.end.thread.i:                                ; preds = %entry
  %sh_prom.i = zext i32 %.bf.clear.i to i64
  %shl.i = shl i64 1, %sh_prom.i
  %sub5.i = add nsw i64 %shl.i, -1
  br label %fixup_unsigned_type.exit

cond.end.i:                                       ; preds = %entry
  %cmp7.i = icmp sgt i32 %sub.i, 0
  br i1 %cmp7.i, label %cond.true8.i, label %fixup_unsigned_type.exit

cond.true8.i:                                     ; preds = %cond.end.i
  %sub10.i = sub i32 128, %.bf.clear.i
  %sh_prom11.i = zext i32 %sub10.i to i64
  %shr.i = lshr i64 -1, %sh_prom11.i
  br label %fixup_unsigned_type.exit

fixup_unsigned_type.exit:                         ; preds = %cond.end.thread.i, %cond.end.i, %cond.true8.i
  %cond36.i = phi i64 [ -1, %cond.true8.i ], [ -1, %cond.end.i ], [ %sub5.i, %cond.end.thread.i ]
  %cond14.i = phi i64 [ %shr.i, %cond.true8.i ], [ 0, %cond.end.i ], [ 0, %cond.end.thread.i ]
  %call15.i = tail call %union.tree_node* @build_int_2_wide(i64 %cond36.i, i64 %cond14.i) #6
  %1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 13
  store %union.tree_node* %call15.i, %union.tree_node** %1, align 8, !tbaa !55
  %2 = load %union.tree_node** %0, align 8, !tbaa !54
  %type19.i = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type19.i, align 8, !tbaa !18
  %type23.i = getelementptr inbounds %union.tree_node* %call15.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call, %union.tree_node** %type23.i, align 8, !tbaa !18
  tail call void @layout_type(%union.tree_node* %call) #6
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define void @fixup_unsigned_type(%union.tree_node* %type) #0 {
entry:
  %type1 = bitcast %union.tree_node* %type to %struct.tree_type*
  %precision2 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %precision2, align 4
  %bf.clear = and i32 %bf.load, 511
  %cmp = icmp ugt i32 %bf.clear, 128
  %.bf.clear = select i1 %cmp, i32 128, i32 %bf.clear
  %call = tail call %union.tree_node* @build_int_2_wide(i64 0, i64 0) #6
  %0 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12
  store %union.tree_node* %call, %union.tree_node** %0, align 8, !tbaa !54
  %sub = add nsw i32 %.bf.clear, -64
  %cmp4 = icmp sgt i32 %sub, -1
  br i1 %cmp4, label %cond.end, label %cond.end.thread

cond.end.thread:                                  ; preds = %entry
  %sh_prom = zext i32 %.bf.clear to i64
  %shl = shl i64 1, %sh_prom
  %sub5 = add nsw i64 %shl, -1
  br label %cond.end13

cond.end:                                         ; preds = %entry
  %cmp7 = icmp sgt i32 %sub, 0
  br i1 %cmp7, label %cond.true8, label %cond.end13

cond.true8:                                       ; preds = %cond.end
  %sub10 = sub i32 128, %.bf.clear
  %sh_prom11 = zext i32 %sub10 to i64
  %shr = lshr i64 -1, %sh_prom11
  br label %cond.end13

cond.end13:                                       ; preds = %cond.end.thread, %cond.end, %cond.true8
  %cond36 = phi i64 [ -1, %cond.true8 ], [ -1, %cond.end ], [ %sub5, %cond.end.thread ]
  %cond14 = phi i64 [ %shr, %cond.true8 ], [ 0, %cond.end ], [ 0, %cond.end.thread ]
  %call15 = tail call %union.tree_node* @build_int_2_wide(i64 %cond36, i64 %cond14) #6
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 13
  store %union.tree_node* %call15, %union.tree_node** %1, align 8, !tbaa !55
  %2 = load %union.tree_node** %0, align 8, !tbaa !54
  %type19 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type19, align 8, !tbaa !18
  %type23 = getelementptr inbounds %union.tree_node* %call15, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type23, align 8, !tbaa !18
  tail call void @layout_type(%union.tree_node* %type)
  ret void
}

; Function Attrs: nounwind uwtable
define void @initialize_sizetypes() #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 6) #6
  store %union.tree_node* %call, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !1
  %type = bitcast %union.tree_node* %call to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type, i64 0, i32 6
  %bf.load = load i32* %mode, align 4
  %bf.clear = and i32 %bf.load, -65025
  %bf.set = or i32 %bf.clear, 2048
  store i32 %bf.set, i32* %mode, align 4
  %call1 = tail call i32 @get_mode_alignment(i32 4) #6
  %align = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 7
  %0 = bitcast %union.tree_node** %align to i32*
  store i32 %call1, i32* %0, align 4, !tbaa !25
  %bf.load4 = load i32* %mode, align 4
  %bf.clear5 = and i32 %bf.load4, 2147483647
  store i32 %bf.clear5, i32* %mode, align 4
  %1 = load i16* getelementptr inbounds ([59 x i16]* @mode_bitsize, i64 0, i64 4), align 2, !tbaa !12
  %conv = zext i16 %1 to i64
  %call6 = tail call %union.tree_node* @build_int_2_wide(i64 %conv, i64 0) #6
  %size = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %2 = bitcast i32* %size to %union.tree_node**
  store %union.tree_node* %call6, %union.tree_node** %2, align 8, !tbaa !21
  %3 = load i8* getelementptr inbounds ([59 x i8]* @mode_size, i64 0, i64 4), align 1, !tbaa !10
  %conv8 = zext i8 %3 to i64
  %call9 = tail call %union.tree_node* @build_int_2_wide(i64 %conv8, i64 0) #6
  %4 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 4
  store %union.tree_node* %call9, %union.tree_node** %4, align 8, !tbaa !23
  %unsigned_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load11 = load i32* %unsigned_flag, align 8
  %bf.set13 = or i32 %bf.load11, 8192
  store i32 %bf.set13, i32* %unsigned_flag, align 8
  %conv14 = zext i16 %1 to i32
  %bf.load16 = load i32* %mode, align 4
  %bf.value = and i32 %conv14, 511
  %bf.clear17 = and i32 %bf.load16, -512
  %bf.set18 = or i32 %bf.clear17, %bf.value
  store i32 %bf.set18, i32* %mode, align 4
  %call19 = tail call %union.tree_node* @build_int_2_wide(i64 0, i64 0) #6
  %5 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 12
  store %union.tree_node* %call19, %union.tree_node** %5, align 8, !tbaa !54
  %bf.load22 = load i32* %mode, align 4
  %bf.set24 = or i32 %bf.load22, 131072
  store i32 %bf.set24, i32* %mode, align 4
  %call25 = tail call %union.tree_node* @build_int_2_wide(i64 1000, i64 0) #6
  %6 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 13
  store %union.tree_node* %call25, %union.tree_node** %6, align 8, !tbaa !55
  store %union.tree_node* %call, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %call27 = tail call %union.tree_node* @copy_node(%union.tree_node* %call) #6
  store %union.tree_node* %call27, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  store %union.tree_node* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !1
  ret void
}

declare %union.tree_node* @build_int_2_wide(i64, i64) #2

declare %union.tree_node* @copy_node(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define void @set_sizetype(%union.tree_node* %type) #0 {
entry:
  %type1 = bitcast %union.tree_node* %type to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6
  %bf.load = load i32* %precision, align 4
  %bf.clear = and i32 %bf.load, 511
  %add3 = add nsw i32 %bf.clear, 4
  %cmp = icmp ult i32 %add3, 128
  %add3. = select i1 %cmp, i32 %add3, i32 128
  %.b = load i1* @sizetype_set, align 1
  br i1 %.b, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 1806, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.set_sizetype, i64 0, i64 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %call = tail call %union.tree_node* @copy_node(%union.tree_node* %type) #6
  store %union.tree_node* %call, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %values = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 1
  %type.c = bitcast %union.tree_node* %type to i8*
  store i8* %type.c, i8** %values, align 8, !tbaa !56
  %0 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %type7 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type* %type7, i64 0, i32 6
  %bf.load8 = load i32* %no_force_blk_flag, align 4
  %bf.set = or i32 %bf.load8, 131072
  store i32 %bf.set, i32* %no_force_blk_flag, align 4
  %call10 = tail call %union.tree_node* @make_node(i32 6) #6
  store %union.tree_node* %call10, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 11
  %2 = load %union.tree_node** %1, align 8, !tbaa !51
  %3 = getelementptr inbounds %union.tree_node* %call10, i64 0, i32 0, i32 11
  store %union.tree_node* %2, %union.tree_node** %3, align 8, !tbaa !51
  %4 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %type14 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %precision15 = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load16 = load i32* %precision15, align 4
  %bf.value = and i32 %add3., 511
  %bf.clear17 = and i32 %bf.load16, -512
  %bf.set18 = or i32 %bf.clear17, %bf.value
  store i32 %bf.set18, i32* %precision15, align 4
  %5 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %type19 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %no_force_blk_flag20 = getelementptr inbounds %struct.tree_type* %type19, i64 0, i32 6
  %bf.load21 = load i32* %no_force_blk_flag20, align 4
  %bf.set23 = or i32 %bf.load21, 131072
  store i32 %bf.set23, i32* %no_force_blk_flag20, align 4
  %unsigned_flag = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load24 = load i32* %unsigned_flag, align 8
  %bf.clear25 = and i32 %bf.load24, 8192
  %tobool26 = icmp eq i32 %bf.clear25, 0
  %6 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %type1.i115 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %precision2.i116 = getelementptr inbounds %struct.tree_type* %type1.i115, i64 0, i32 6
  %bf.load.i117 = load i32* %precision2.i116, align 4
  %bf.clear.i118 = and i32 %bf.load.i117, 511
  %cmp.i119 = icmp ugt i32 %bf.clear.i118, 128
  %.bf.clear.i120 = select i1 %cmp.i119, i32 128, i32 %bf.clear.i118
  br i1 %tobool26, label %if.else, label %if.then27

if.then27:                                        ; preds = %if.end
  %call.i = tail call %union.tree_node* @build_int_2_wide(i64 0, i64 0) #6
  %7 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 12
  store %union.tree_node* %call.i, %union.tree_node** %7, align 8, !tbaa !54
  %sub.i = add nsw i32 %.bf.clear.i120, -64
  %cmp4.i = icmp sgt i32 %sub.i, -1
  br i1 %cmp4.i, label %cond.end.i, label %cond.end.thread.i

cond.end.thread.i:                                ; preds = %if.then27
  %sh_prom.i = zext i32 %.bf.clear.i120 to i64
  %shl.i = shl i64 1, %sh_prom.i
  %sub5.i = add nsw i64 %shl.i, -1
  br label %fixup_unsigned_type.exit

cond.end.i:                                       ; preds = %if.then27
  %cmp7.i = icmp sgt i32 %sub.i, 0
  br i1 %cmp7.i, label %cond.true8.i, label %fixup_unsigned_type.exit

cond.true8.i:                                     ; preds = %cond.end.i
  %sub10.i = sub i32 128, %.bf.clear.i120
  %sh_prom11.i = zext i32 %sub10.i to i64
  %shr.i = lshr i64 -1, %sh_prom11.i
  br label %fixup_unsigned_type.exit

fixup_unsigned_type.exit:                         ; preds = %cond.end.thread.i, %cond.end.i, %cond.true8.i
  %cond36.i = phi i64 [ -1, %cond.true8.i ], [ -1, %cond.end.i ], [ %sub5.i, %cond.end.thread.i ]
  %cond14.i = phi i64 [ %shr.i, %cond.true8.i ], [ 0, %cond.end.i ], [ 0, %cond.end.thread.i ]
  %call15.i = tail call %union.tree_node* @build_int_2_wide(i64 %cond36.i, i64 %cond14.i) #6
  %8 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 13
  store %union.tree_node* %call15.i, %union.tree_node** %8, align 8, !tbaa !55
  %9 = load %union.tree_node** %7, align 8, !tbaa !54
  %type19.i = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %6, %union.tree_node** %type19.i, align 8, !tbaa !18
  %type23.i = getelementptr inbounds %union.tree_node* %call15.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %6, %union.tree_node** %type23.i, align 8, !tbaa !18
  tail call void @layout_type(%union.tree_node* %6) #6
  br label %if.end28

if.else:                                          ; preds = %if.end
  %sub.i121 = add nsw i32 %.bf.clear.i120, -64
  %cmp3.i = icmp sgt i32 %sub.i121, 0
  br i1 %cmp3.i, label %cond.end.i126, label %cond.false.i

cond.false.i:                                     ; preds = %if.else
  %sub4.i = add nsw i32 %.bf.clear.i120, -1
  %sh_prom.i122 = zext i32 %sub4.i to i64
  %shl.i123 = shl i64 -1, %sh_prom.i122
  br label %cond.end.i126

cond.end.i126:                                    ; preds = %cond.false.i, %if.else
  %cond.i = phi i64 [ %shl.i123, %cond.false.i ], [ 0, %if.else ]
  %sub6.i = add nsw i32 %.bf.clear.i120, -65
  %cmp7.i124 = icmp sgt i32 %sub6.i, 0
  %phitmp.i = zext i32 %sub6.i to i64
  %phitmp.op.i = shl i64 -1, %phitmp.i
  %shl15.i = select i1 %cmp7.i124, i64 %phitmp.op.i, i64 -1
  %call.i125 = tail call %union.tree_node* @build_int_2_wide(i64 %cond.i, i64 %shl15.i) #6
  %10 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 12
  store %union.tree_node* %call.i125, %union.tree_node** %10, align 8, !tbaa !54
  br i1 %cmp3.i, label %cond.end25.i, label %cond.false20.i

cond.false20.i:                                   ; preds = %cond.end.i126
  %sub21.i = add nsw i32 %.bf.clear.i120, -1
  %sh_prom22.i = zext i32 %sub21.i to i64
  %shl23.i = shl i64 1, %sh_prom22.i
  %sub24.i = add nsw i64 %shl23.i, -1
  br label %cond.end25.i

cond.end25.i:                                     ; preds = %cond.false20.i, %cond.end.i126
  %cond26.i = phi i64 [ %sub24.i, %cond.false20.i ], [ -1, %cond.end.i126 ]
  br i1 %cmp7.i124, label %cond.true30.i, label %fixup_signed_type.exit

cond.true30.i:                                    ; preds = %cond.end25.i
  %shl34.i = shl i64 1, %phitmp.i
  %sub35.i = add nsw i64 %shl34.i, -1
  br label %fixup_signed_type.exit

fixup_signed_type.exit:                           ; preds = %cond.end25.i, %cond.true30.i
  %cond38.i = phi i64 [ %sub35.i, %cond.true30.i ], [ 0, %cond.end25.i ]
  %call39.i = tail call %union.tree_node* @build_int_2_wide(i64 %cond26.i, i64 %cond38.i) #6
  %11 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 13
  store %union.tree_node* %call39.i, %union.tree_node** %11, align 8, !tbaa !55
  %12 = load %union.tree_node** %10, align 8, !tbaa !54
  %type43.i = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %6, %union.tree_node** %type43.i, align 8, !tbaa !18
  %type47.i = getelementptr inbounds %union.tree_node* %call39.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %6, %union.tree_node** %type47.i, align 8, !tbaa !18
  tail call void @layout_type(%union.tree_node* %6) #6
  br label %if.end28

if.end28:                                         ; preds = %fixup_signed_type.exit, %fixup_unsigned_type.exit
  %13 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  tail call void @layout_type(%union.tree_node* %13)
  %bf.load31 = load i32* %unsigned_flag, align 8
  %bf.clear33 = and i32 %bf.load31, 8192
  %tobool34 = icmp eq i32 %bf.clear33, 0
  %14 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  br i1 %tobool34, label %if.else40, label %if.then35

if.then35:                                        ; preds = %if.end28
  store %union.tree_node* %14, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !tbaa !1
  %15 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  store %union.tree_node* %15, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 5), align 8, !tbaa !1
  %call36 = tail call %union.tree_node* @make_signed_type(i32 %bf.clear)
  %call37 = tail call %union.tree_node* @copy_node(%union.tree_node* %call36) #6
  store %union.tree_node* %call37, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %call38 = tail call %union.tree_node* @make_signed_type(i32 %add3.)
  %call39 = tail call %union.tree_node* @copy_node(%union.tree_node* %call38) #6
  store %union.tree_node* %call39, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 4), align 16, !tbaa !1
  br label %if.end45

if.else40:                                        ; preds = %if.end28
  store %union.tree_node* %14, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %16 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  store %union.tree_node* %16, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 4), align 16, !tbaa !1
  %call.i127 = tail call %union.tree_node* @make_node(i32 6) #6
  %type1.i128 = bitcast %union.tree_node* %call.i127 to %struct.tree_type*
  %precision2.i129 = getelementptr inbounds %struct.tree_type* %type1.i128, i64 0, i32 6
  %bf.load.i130 = load i32* %precision2.i129, align 4
  %bf.clear.i131 = and i32 %bf.load.i130, -512
  %bf.set.i = or i32 %bf.clear.i131, %bf.clear
  store i32 %bf.set.i, i32* %precision2.i129, align 4
  %cmp.i.i = icmp ugt i32 %bf.clear, 128
  %.bf.clear.i.i = select i1 %cmp.i.i, i32 128, i32 %bf.clear
  %call.i.i = tail call %union.tree_node* @build_int_2_wide(i64 0, i64 0) #6
  %17 = getelementptr inbounds %union.tree_node* %call.i127, i64 0, i32 0, i32 12
  store %union.tree_node* %call.i.i, %union.tree_node** %17, align 8, !tbaa !54
  %sub.i.i = add nsw i32 %.bf.clear.i.i, -64
  %cmp4.i.i = icmp sgt i32 %sub.i.i, -1
  br i1 %cmp4.i.i, label %cond.end.i.i, label %cond.end.thread.i.i

cond.end.thread.i.i:                              ; preds = %if.else40
  %sh_prom.i.i = zext i32 %.bf.clear.i.i to i64
  %shl.i.i = shl i64 1, %sh_prom.i.i
  %sub5.i.i = add nsw i64 %shl.i.i, -1
  br label %make_unsigned_type.exit

cond.end.i.i:                                     ; preds = %if.else40
  %cmp7.i.i = icmp sgt i32 %sub.i.i, 0
  br i1 %cmp7.i.i, label %cond.true8.i.i, label %make_unsigned_type.exit

cond.true8.i.i:                                   ; preds = %cond.end.i.i
  %sub10.i.i = sub i32 128, %.bf.clear.i.i
  %sh_prom11.i.i = zext i32 %sub10.i.i to i64
  %shr.i.i = lshr i64 -1, %sh_prom11.i.i
  br label %make_unsigned_type.exit

make_unsigned_type.exit:                          ; preds = %cond.end.thread.i.i, %cond.end.i.i, %cond.true8.i.i
  %cond36.i.i = phi i64 [ -1, %cond.true8.i.i ], [ -1, %cond.end.i.i ], [ %sub5.i.i, %cond.end.thread.i.i ]
  %cond14.i.i = phi i64 [ %shr.i.i, %cond.true8.i.i ], [ 0, %cond.end.i.i ], [ 0, %cond.end.thread.i.i ]
  %call15.i.i = tail call %union.tree_node* @build_int_2_wide(i64 %cond36.i.i, i64 %cond14.i.i) #6
  %18 = getelementptr inbounds %union.tree_node* %call.i127, i64 0, i32 0, i32 13
  store %union.tree_node* %call15.i.i, %union.tree_node** %18, align 8, !tbaa !55
  %19 = load %union.tree_node** %17, align 8, !tbaa !54
  %type19.i.i = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call.i127, %union.tree_node** %type19.i.i, align 8, !tbaa !18
  %type23.i.i = getelementptr inbounds %union.tree_node* %call15.i.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call.i127, %union.tree_node** %type23.i.i, align 8, !tbaa !18
  tail call void @layout_type(%union.tree_node* %call.i127) #6
  %call42 = tail call %union.tree_node* @copy_node(%union.tree_node* %call.i127) #6
  store %union.tree_node* %call42, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !tbaa !1
  %call.i132 = tail call %union.tree_node* @make_node(i32 6) #6
  %type1.i133 = bitcast %union.tree_node* %call.i132 to %struct.tree_type*
  %precision2.i134 = getelementptr inbounds %struct.tree_type* %type1.i133, i64 0, i32 6
  %bf.load.i135 = load i32* %precision2.i134, align 4
  %bf.clear.i136 = and i32 %bf.load.i135, -512
  %bf.set.i137 = or i32 %bf.clear.i136, %bf.value
  store i32 %bf.set.i137, i32* %precision2.i134, align 4
  %cmp.i.i138 = icmp ugt i32 %bf.value, 128
  %.bf.clear.i.i139 = select i1 %cmp.i.i138, i32 128, i32 %bf.value
  %call.i.i140 = tail call %union.tree_node* @build_int_2_wide(i64 0, i64 0) #6
  %20 = getelementptr inbounds %union.tree_node* %call.i132, i64 0, i32 0, i32 12
  store %union.tree_node* %call.i.i140, %union.tree_node** %20, align 8, !tbaa !54
  %sub.i.i141 = add nsw i32 %.bf.clear.i.i139, -64
  %cmp4.i.i142 = icmp sgt i32 %sub.i.i141, -1
  br i1 %cmp4.i.i142, label %cond.end.i.i148, label %cond.end.thread.i.i146

cond.end.thread.i.i146:                           ; preds = %make_unsigned_type.exit
  %sh_prom.i.i143 = zext i32 %.bf.clear.i.i139 to i64
  %shl.i.i144 = shl i64 1, %sh_prom.i.i143
  %sub5.i.i145 = add nsw i64 %shl.i.i144, -1
  br label %make_unsigned_type.exit158

cond.end.i.i148:                                  ; preds = %make_unsigned_type.exit
  %cmp7.i.i147 = icmp sgt i32 %sub.i.i141, 0
  br i1 %cmp7.i.i147, label %cond.true8.i.i152, label %make_unsigned_type.exit158

cond.true8.i.i152:                                ; preds = %cond.end.i.i148
  %sub10.i.i149 = sub i32 128, %.bf.clear.i.i139
  %sh_prom11.i.i150 = zext i32 %sub10.i.i149 to i64
  %shr.i.i151 = lshr i64 -1, %sh_prom11.i.i150
  br label %make_unsigned_type.exit158

make_unsigned_type.exit158:                       ; preds = %cond.end.thread.i.i146, %cond.end.i.i148, %cond.true8.i.i152
  %cond36.i.i153 = phi i64 [ -1, %cond.true8.i.i152 ], [ -1, %cond.end.i.i148 ], [ %sub5.i.i145, %cond.end.thread.i.i146 ]
  %cond14.i.i154 = phi i64 [ %shr.i.i151, %cond.true8.i.i152 ], [ 0, %cond.end.i.i148 ], [ 0, %cond.end.thread.i.i146 ]
  %call15.i.i155 = tail call %union.tree_node* @build_int_2_wide(i64 %cond36.i.i153, i64 %cond14.i.i154) #6
  %21 = getelementptr inbounds %union.tree_node* %call.i132, i64 0, i32 0, i32 13
  store %union.tree_node* %call15.i.i155, %union.tree_node** %21, align 8, !tbaa !55
  %22 = load %union.tree_node** %20, align 8, !tbaa !54
  %type19.i.i156 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call.i132, %union.tree_node** %type19.i.i156, align 8, !tbaa !18
  %type23.i.i157 = getelementptr inbounds %union.tree_node* %call15.i.i155, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call.i132, %union.tree_node** %type23.i.i157, align 8, !tbaa !18
  tail call void @layout_type(%union.tree_node* %call.i132) #6
  %call44 = tail call %union.tree_node* @copy_node(%union.tree_node* %call.i132) #6
  store %union.tree_node* %call44, %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 5), align 8, !tbaa !1
  br label %if.end45

if.end45:                                         ; preds = %make_unsigned_type.exit158, %if.then35
  %call46 = tail call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([14 x i8]* @.str13, i64 0, i64 0)) #6
  %23 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %24 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 11
  store %union.tree_node* %call46, %union.tree_node** %24, align 8, !tbaa !51
  %25 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %type51 = bitcast %union.tree_node* %25 to %struct.tree_type*
  %no_force_blk_flag52 = getelementptr inbounds %struct.tree_type* %type51, i64 0, i32 6
  %bf.load53 = load i32* %no_force_blk_flag52, align 4
  %bf.set55 = or i32 %bf.load53, 131072
  store i32 %bf.set55, i32* %no_force_blk_flag52, align 4
  %26 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %27 = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 15
  store %union.tree_node* %26, %union.tree_node** %27, align 8, !tbaa !53
  %28 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %29 = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 14
  store %union.tree_node* null, %union.tree_node** %29, align 8, !tbaa !52
  %30 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %31 = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %31, align 8, !tbaa !58
  %32 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %33 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 9
  store %union.tree_node* null, %union.tree_node** %33, align 8, !tbaa !59
  %34 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %type51.1 = bitcast %union.tree_node* %34 to %struct.tree_type*
  %no_force_blk_flag52.1 = getelementptr inbounds %struct.tree_type* %type51.1, i64 0, i32 6
  %bf.load53.1 = load i32* %no_force_blk_flag52.1, align 4
  %bf.set55.1 = or i32 %bf.load53.1, 131072
  store i32 %bf.set55.1, i32* %no_force_blk_flag52.1, align 4
  %35 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %36 = getelementptr inbounds %union.tree_node* %35, i64 0, i32 0, i32 15
  store %union.tree_node* %35, %union.tree_node** %36, align 8, !tbaa !53
  %37 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %38 = getelementptr inbounds %union.tree_node* %37, i64 0, i32 0, i32 14
  store %union.tree_node* null, %union.tree_node** %38, align 8, !tbaa !52
  %39 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %40 = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %40, align 8, !tbaa !58
  %41 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !1
  %42 = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 9
  store %union.tree_node* null, %union.tree_node** %42, align 8, !tbaa !59
  %43 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !tbaa !1
  %type51.2 = bitcast %union.tree_node* %43 to %struct.tree_type*
  %no_force_blk_flag52.2 = getelementptr inbounds %struct.tree_type* %type51.2, i64 0, i32 6
  %bf.load53.2 = load i32* %no_force_blk_flag52.2, align 4
  %bf.set55.2 = or i32 %bf.load53.2, 131072
  store i32 %bf.set55.2, i32* %no_force_blk_flag52.2, align 4
  %44 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !tbaa !1
  %45 = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 15
  store %union.tree_node* %44, %union.tree_node** %45, align 8, !tbaa !53
  %46 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !tbaa !1
  %47 = getelementptr inbounds %union.tree_node* %46, i64 0, i32 0, i32 14
  store %union.tree_node* null, %union.tree_node** %47, align 8, !tbaa !52
  %48 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !tbaa !1
  %49 = getelementptr inbounds %union.tree_node* %48, i64 0, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %49, align 8, !tbaa !58
  %50 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !tbaa !1
  %51 = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 9
  store %union.tree_node* null, %union.tree_node** %51, align 8, !tbaa !59
  %52 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %type51.3 = bitcast %union.tree_node* %52 to %struct.tree_type*
  %no_force_blk_flag52.3 = getelementptr inbounds %struct.tree_type* %type51.3, i64 0, i32 6
  %bf.load53.3 = load i32* %no_force_blk_flag52.3, align 4
  %bf.set55.3 = or i32 %bf.load53.3, 131072
  store i32 %bf.set55.3, i32* %no_force_blk_flag52.3, align 4
  %53 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %54 = getelementptr inbounds %union.tree_node* %53, i64 0, i32 0, i32 15
  store %union.tree_node* %53, %union.tree_node** %54, align 8, !tbaa !53
  %55 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %56 = getelementptr inbounds %union.tree_node* %55, i64 0, i32 0, i32 14
  store %union.tree_node* null, %union.tree_node** %56, align 8, !tbaa !52
  %57 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %58 = getelementptr inbounds %union.tree_node* %57, i64 0, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %58, align 8, !tbaa !58
  %59 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %60 = getelementptr inbounds %union.tree_node* %59, i64 0, i32 0, i32 9
  store %union.tree_node* null, %union.tree_node** %60, align 8, !tbaa !59
  %61 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 4), align 16, !tbaa !1
  %type51.4 = bitcast %union.tree_node* %61 to %struct.tree_type*
  %no_force_blk_flag52.4 = getelementptr inbounds %struct.tree_type* %type51.4, i64 0, i32 6
  %bf.load53.4 = load i32* %no_force_blk_flag52.4, align 4
  %bf.set55.4 = or i32 %bf.load53.4, 131072
  store i32 %bf.set55.4, i32* %no_force_blk_flag52.4, align 4
  %62 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 4), align 16, !tbaa !1
  %63 = getelementptr inbounds %union.tree_node* %62, i64 0, i32 0, i32 15
  store %union.tree_node* %62, %union.tree_node** %63, align 8, !tbaa !53
  %64 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 4), align 16, !tbaa !1
  %65 = getelementptr inbounds %union.tree_node* %64, i64 0, i32 0, i32 14
  store %union.tree_node* null, %union.tree_node** %65, align 8, !tbaa !52
  %66 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 4), align 16, !tbaa !1
  %67 = getelementptr inbounds %union.tree_node* %66, i64 0, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %67, align 8, !tbaa !58
  %68 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 4), align 16, !tbaa !1
  %69 = getelementptr inbounds %union.tree_node* %68, i64 0, i32 0, i32 9
  store %union.tree_node* null, %union.tree_node** %69, align 8, !tbaa !59
  %70 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 5), align 8, !tbaa !1
  %type51.5 = bitcast %union.tree_node* %70 to %struct.tree_type*
  %no_force_blk_flag52.5 = getelementptr inbounds %struct.tree_type* %type51.5, i64 0, i32 6
  %bf.load53.5 = load i32* %no_force_blk_flag52.5, align 4
  %bf.set55.5 = or i32 %bf.load53.5, 131072
  store i32 %bf.set55.5, i32* %no_force_blk_flag52.5, align 4
  %71 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 5), align 8, !tbaa !1
  %72 = getelementptr inbounds %union.tree_node* %71, i64 0, i32 0, i32 15
  store %union.tree_node* %71, %union.tree_node** %72, align 8, !tbaa !53
  %73 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 5), align 8, !tbaa !1
  %74 = getelementptr inbounds %union.tree_node* %73, i64 0, i32 0, i32 14
  store %union.tree_node* null, %union.tree_node** %74, align 8, !tbaa !52
  %75 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 5), align 8, !tbaa !1
  %76 = getelementptr inbounds %union.tree_node* %75, i64 0, i32 0, i32 8
  store %union.tree_node* null, %union.tree_node** %76, align 8, !tbaa !58
  %77 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 5), align 8, !tbaa !1
  %78 = getelementptr inbounds %union.tree_node* %77, i64 0, i32 0, i32 9
  store %union.tree_node* null, %union.tree_node** %78, align 8, !tbaa !59
  tail call void @ggc_add_tree_root(%union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), i32 6) #6
  %t.0159 = load %union.tree_node** @early_type_list, align 8
  %cmp71160 = icmp eq %union.tree_node* %t.0159, null
  br i1 %cmp71160, label %for.end93, label %for.body73

for.body73:                                       ; preds = %if.end45, %if.end80
  %t.0161 = phi %union.tree_node* [ %t.0, %if.end80 ], [ %t.0159, %if.end45 ]
  %value = getelementptr inbounds %union.tree_node* %t.0161, i64 0, i32 0, i32 2
  %79 = bitcast i32* %value to %union.tree_node**
  %80 = load %union.tree_node** %79, align 8, !tbaa !5
  %code = getelementptr inbounds %union.tree_node* %80, i64 0, i32 0, i32 0, i32 2
  %bf.load75 = load i32* %code, align 8
  %bf.clear76 = and i32 %bf.load75, 255
  %cmp77 = icmp eq i32 %bf.clear76, 6
  br i1 %cmp77, label %if.end80, label %if.then79

if.then79:                                        ; preds = %for.body73
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8]* @.str, i64 0, i64 0), i32 1859, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.set_sizetype, i64 0, i64 0)) #7
  unreachable

if.end80:                                         ; preds = %for.body73
  %81 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !1
  %size = getelementptr inbounds %union.tree_node* %80, i64 0, i32 0, i32 2
  %82 = bitcast i32* %size to %union.tree_node**
  %83 = load %union.tree_node** %82, align 8, !tbaa !21
  %type85 = getelementptr inbounds %union.tree_node* %83, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %81, %union.tree_node** %type85, align 8, !tbaa !18
  %84 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !tbaa !1
  %85 = getelementptr inbounds %union.tree_node* %80, i64 0, i32 0, i32 4
  %86 = load %union.tree_node** %85, align 8, !tbaa !23
  %type90 = getelementptr inbounds %union.tree_node* %86, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %84, %union.tree_node** %type90, align 8, !tbaa !18
  %chain = getelementptr inbounds %union.tree_node* %t.0161, i64 0, i32 0, i32 0, i32 0
  %t.0 = load %union.tree_node** %chain, align 8
  %cmp71 = icmp eq %union.tree_node* %t.0, null
  br i1 %cmp71, label %for.end93, label %for.body73

for.end93:                                        ; preds = %if.end80, %if.end45
  store %union.tree_node* null, %union.tree_node** @early_type_list, align 8, !tbaa !1
  store i1 true, i1* @sizetype_set, align 1
  ret void
}

declare %union.tree_node* @get_identifier(i8*) #2

declare void @ggc_add_tree_root(%union.tree_node**, i32) #2

; Function Attrs: nounwind readnone uwtable
define i32 @get_best_mode(i32 %bitsize, i32 %bitpos, i32 %align, i32 %largest_mode, i32 %volatilep) #4 {
entry:
  %0 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !10
  %cmp34 = icmp eq i32 %0, 0
  br i1 %cmp34, label %return, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %mode.035 = phi i32 [ %conv5, %for.inc ], [ %0, %entry ]
  %idxprom = sext i32 %mode.035 to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %1 = load i16* %arrayidx, align 2, !tbaa !12
  %conv = zext i16 %1 to i32
  %rem = urem i32 %bitpos, %conv
  %add = add i32 %rem, %bitsize
  %cmp1 = icmp ugt i32 %add, %conv
  br i1 %cmp1, label %for.inc, label %lor.lhs.false

for.inc:                                          ; preds = %for.body
  %arrayidx4 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom
  %2 = load i8* %arrayidx4, align 1, !tbaa !10
  %conv5 = zext i8 %2 to i32
  %cmp = icmp eq i8 %2, 0
  br i1 %cmp, label %return, label %for.body

lor.lhs.false:                                    ; preds = %for.body
  %cmp8 = icmp ult i32 %conv, 128
  %cond = select i1 %cmp8, i32 %conv, i32 128
  %cmp10 = icmp ugt i32 %cond, %align
  br i1 %cmp10, label %return, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %cmp13 = icmp eq i32 %largest_mode, 0
  br i1 %cmp13, label %if.end21, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %idxprom15 = sext i32 %largest_mode to i64
  %arrayidx16 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom15
  %3 = load i16* %arrayidx16, align 2, !tbaa !12
  %cmp18 = icmp ugt i16 %1, %3
  br i1 %cmp18, label %return, label %if.end21

if.end21:                                         ; preds = %lor.lhs.false12, %land.lhs.true
  br label %return

return:                                           ; preds = %for.inc, %entry, %lor.lhs.false, %land.lhs.true, %if.end21
  %retval.0 = phi i32 [ %mode.035, %if.end21 ], [ 0, %land.lhs.true ], [ 0, %lor.lhs.false ], [ 0, %entry ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @init_stor_layout_once() #0 {
entry:
  tail call void @ggc_add_tree_root(%union.tree_node** @pending_sizes, i32 1) #6
  ret void
}

declare void @warning(i8*, ...) #2

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #6

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #6

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { cold nounwind }
attributes #9 = { cold }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !2, i64 32}
!6 = metadata !{metadata !"tree_list", metadata !7, i64 0, metadata !2, i64 24, metadata !2, i64 32}
!7 = metadata !{metadata !"tree_common", metadata !2, i64 0, metadata !2, i64 8, metadata !3, i64 16, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19}
!8 = metadata !{metadata !"int", metadata !3, i64 0}
!9 = metadata !{metadata !7, metadata !2, i64 0}
!10 = metadata !{metadata !3, metadata !3, i64 0}
!11 = metadata !{metadata !8, metadata !8, i64 0}
!12 = metadata !{metadata !13, metadata !13, i64 0}
!13 = metadata !{metadata !"short", metadata !3, i64 0}
!14 = metadata !{metadata !15, metadata !17, i64 32}
!15 = metadata !{metadata !"tree_int_cst", metadata !7, i64 0, metadata !2, i64 24, metadata !16, i64 32}
!16 = metadata !{metadata !"", metadata !17, i64 0, metadata !17, i64 8}
!17 = metadata !{metadata !"long long", metadata !3, i64 0}
!18 = metadata !{metadata !7, metadata !2, i64 8}
!19 = metadata !{metadata !20, metadata !2, i64 40}
!20 = metadata !{metadata !"tree_decl", metadata !7, i64 0, metadata !2, i64 24, metadata !8, i64 32, metadata !8, i64 36, metadata !2, i64 40, metadata !3, i64 48, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !3, i64 51, metadata !8, i64 51, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !3, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !2, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !2, i64 152, metadata !3, i64 160, metadata !2, i64 168, metadata !2, i64 176, metadata !2, i64 184, metadata !17, i64 192, metadata !2, i64 200}
!21 = metadata !{metadata !22, metadata !2, i64 32}
!22 = metadata !{metadata !"tree_type", metadata !7, i64 0, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !8, i64 56, metadata !8, i64 60, metadata !3, i64 61, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !3, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !17, i64 152, metadata !2, i64 160}
!23 = metadata !{metadata !22, metadata !2, i64 40}
!24 = metadata !{metadata !20, metadata !2, i64 64}
!25 = metadata !{metadata !22, metadata !8, i64 64}
!26 = metadata !{metadata !20, metadata !2, i64 96}
!27 = metadata !{metadata !17, metadata !17, i64 0}
!28 = metadata !{metadata !29, metadata !2, i64 0}
!29 = metadata !{metadata !"record_layout_info_s", metadata !2, i64 0, metadata !2, i64 8, metadata !8, i64 16, metadata !2, i64 24, metadata !8, i64 32, metadata !8, i64 36, metadata !8, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !8, i64 64}
!30 = metadata !{metadata !29, metadata !8, i64 32}
!31 = metadata !{metadata !29, metadata !8, i64 40}
!32 = metadata !{metadata !29, metadata !8, i64 36}
!33 = metadata !{metadata !29, metadata !8, i64 16}
!34 = metadata !{metadata !29, metadata !2, i64 8}
!35 = metadata !{metadata !29, metadata !2, i64 24}
!36 = metadata !{metadata !29, metadata !8, i64 64}
!37 = metadata !{metadata !29, metadata !2, i64 56}
!38 = metadata !{metadata !20, metadata !2, i64 88}
!39 = metadata !{metadata !20, metadata !2, i64 104}
!40 = metadata !{metadata !41, metadata !2, i64 296}
!41 = metadata !{metadata !"gcc_target", metadata !42, i64 0, metadata !44, i64 168, metadata !2, i64 240, metadata !2, i64 248, metadata !2, i64 256, metadata !2, i64 264, metadata !2, i64 272, metadata !2, i64 280, metadata !2, i64 288, metadata !2, i64 296, metadata !2, i64 304, metadata !2, i64 312, metadata !2, i64 320, metadata !45, i64 328, metadata !45, i64 329, metadata !2, i64 336}
!42 = metadata !{metadata !"asm_out", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !43, i64 24, metadata !43, i64 56, metadata !2, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !2, i64 152, metadata !2, i64 160}
!43 = metadata !{metadata !"asm_int_op", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24}
!44 = metadata !{metadata !"sched", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !2, i64 64}
!45 = metadata !{metadata !"_Bool", metadata !3, i64 0}
!46 = metadata !{metadata !29, metadata !2, i64 48}
!47 = metadata !{metadata !20, metadata !2, i64 72}
!48 = metadata !{metadata !22, metadata !2, i64 136}
!49 = metadata !{metadata !50, metadata !8, i64 24}
!50 = metadata !{metadata !"tree_vec", metadata !7, i64 0, metadata !8, i64 24, metadata !3, i64 32}
!51 = metadata !{metadata !22, metadata !2, i64 96}
!52 = metadata !{metadata !22, metadata !2, i64 120}
!53 = metadata !{metadata !22, metadata !2, i64 128}
!54 = metadata !{metadata !22, metadata !2, i64 104}
!55 = metadata !{metadata !22, metadata !2, i64 112}
!56 = metadata !{metadata !22, metadata !2, i64 24}
!57 = metadata !{metadata !22, metadata !17, i64 152}
!58 = metadata !{metadata !22, metadata !2, i64 72}
!59 = metadata !{metadata !22, metadata !2, i64 80}
