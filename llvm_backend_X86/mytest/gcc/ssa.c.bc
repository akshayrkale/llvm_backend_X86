; ModuleID = 'ssa.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i32 }
%struct._IO_FILE = type opaque
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%union.tree_node = type opaque
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.simple_bitmap_def = type { i32, i32, i32, [1 x i64] }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.ssa_rename_from_pair = type { i32, %struct.rtx_def* }
%struct.ssa_rename_from_hash_table_data = type { %struct.simple_bitmap_def*, %struct.partition_def* }
%struct.partition_def = type { i32, [1 x %struct.partition_elem] }
%struct.partition_elem = type { i32, %struct.partition_elem*, i32 }
%struct.phi_coalesce_context = type { %struct.partition_def*, %struct.conflict_graph_def*, i32 }
%struct.conflict_graph_def = type opaque
%struct.rename_context = type { %struct.rename_set_data*, %struct.rename_set_data*, %struct.rtx_def* }
%struct.rename_set_data = type { %struct.rename_set_data*, %struct.rtx_def**, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }

@in_ssa_form = global i32 0, align 4
@ssa_rename_from_ht = common global %struct.htab* null, align 8
@n_basic_blocks = external global i32
@.str1 = private unnamed_addr constant [6 x i8] c"ssa.c\00", align 1
@__FUNCTION__.convert_to_ssa = private unnamed_addr constant [15 x i8] c"convert_to_ssa\00", align 1
@rtl_dump_file = external global %struct._IO_FILE*
@.str2 = private unnamed_addr constant [26 x i8] c";; Immediate Dominators:\0A\00", align 1
@.str3 = private unnamed_addr constant [13 x i8] c";\09%3d = %3d\0A\00", align 1
@.str4 = private unnamed_addr constant [24 x i8] c";; Dominance Frontiers:\00", align 1
@.str5 = private unnamed_addr constant [14 x i8] c"; Basic Block\00", align 1
@ssa_max_reg_num = internal unnamed_addr global i32 0, align 4
@.str6 = private unnamed_addr constant [33 x i8] c";; Iterated Dominance Frontiers:\00", align 1
@.str7 = private unnamed_addr constant [11 x i8] c"; Register\00", align 1
@__FUNCTION__.convert_from_ssa = private unnamed_addr constant [17 x i8] c"convert_from_ssa\00", align 1
@basic_block_info = external global %struct.varray_head_tag*
@entry_exit_blocks = external global [2 x %struct.basic_block_def]
@rtx_class = external constant [153 x i8]
@ssa_definition = common global %struct.varray_head_tag* null, align 8
@ssa_rename_from = common global %struct.varray_head_tag* null, align 8
@__FUNCTION__.eliminate_phi = private unnamed_addr constant [14 x i8] c"eliminate_phi\00", align 1
@cfun = external global %struct.function*
@.str8 = private unnamed_addr constant [31 x i8] c"Emitting copy on edge (%d,%d)\0A\00", align 1
@__FUNCTION__.rename_equivalent_regs = private unnamed_addr constant [23 x i8] c"rename_equivalent_regs\00", align 1
@__FUNCTION__.rename_equivalent_regs_in_insn = private unnamed_addr constant [31 x i8] c"rename_equivalent_regs_in_insn\00", align 1
@__FUNCTION__.mark_reg_in_phi = private unnamed_addr constant [16 x i8] c"mark_reg_in_phi\00", align 1
@__FUNCTION__.make_regs_equivalent_over_bad_edges = private unnamed_addr constant [36 x i8] c"make_regs_equivalent_over_bad_edges\00", align 1
@.str9 = private unnamed_addr constant [15 x i8] c"ssa_definition\00", align 1
@ssa_rename_to_pseudo = internal unnamed_addr global %struct.rtx_def** null, align 8
@ssa_rename_to_hard = internal unnamed_addr global [53 x [59 x %struct.rtx_def*]] zeroinitializer, align 16
@__FUNCTION__.rename_block = private unnamed_addr constant [13 x i8] c"rename_block\00", align 1
@global_rtl = external global [11 x %struct.rtx_def*]
@__FUNCTION__.apply_delayed_renames = private unnamed_addr constant [22 x i8] c"apply_delayed_renames\00", align 1
@mode_size = external constant [59 x i8]
@__FUNCTION__.rename_insn_1 = private unnamed_addr constant [14 x i8] c"rename_insn_1\00", align 1
@__FUNCTION__.create_delayed_rename = private unnamed_addr constant [22 x i8] c"create_delayed_rename\00", align 1
@.str10 = private unnamed_addr constant [52 x i8] c"Iterated dominance frontier: %d passes on %d regs.\0A\00", align 1
@fe_evals = internal unnamed_addr global %struct.simple_bitmap_def** null, align 8
@fe_current_bb = internal unnamed_addr global i32 0, align 4
@.str11 = private unnamed_addr constant [48 x i8] c"ssa_rename_from maps pseudo %i to original %i.\0A\00", align 1
@str = private unnamed_addr constant [39 x i8] c"ssa_rename_from's hash table contents:\00"

; Function Attrs: nounwind uwtable
define void @ssa_rename_from_print() #0 {
entry:
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([39 x i8]* @str, i64 0, i64 0))
  %0 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  tail call void @htab_traverse(%struct.htab* %0, i32 (i8**, i8*)* @ssa_rename_from_print_1, i8* null) #4
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #1

declare void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @ssa_rename_from_print_1(i8** nocapture readonly %slot, i8* nocapture readnone %data) #0 {
entry:
  %0 = load i8** %slot, align 8, !tbaa !1
  %reg = bitcast i8* %0 to i32*
  %1 = load i32* %reg, align 4, !tbaa !5
  %original = getelementptr inbounds i8* %0, i64 8
  %2 = bitcast i8* %original to %struct.rtx_def**
  %3 = load %struct.rtx_def** %2, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %4 = load i32* %rtuint, align 4, !tbaa !9
  %call = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([48 x i8]* @.str11, i64 0, i64 0), i32 %1, i32 %4) #4
  ret i32 1
}

; Function Attrs: nounwind uwtable
define i32 @remove_phi_alternative(%struct.rtx_def* nocapture readonly %set, %struct.basic_block_def* nocapture readonly %block) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %set, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtvec_def**
  %1 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem3 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 0
  %2 = load i32* %num_elem3, align 4, !tbaa !10
  %sub = add i32 %2, -2
  %cmp47 = icmp sgt i32 %sub, -1
  br i1 %cmp47, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %index = getelementptr inbounds %struct.basic_block_def* %block, i64 0, i32 11
  %3 = load i32* %index, align 4, !tbaa !12
  %conv = sext i32 %3 to i64
  %4 = sext i32 %sub to i64
  br label %for.body

for.cond:                                         ; preds = %for.body
  %cmp = icmp sgt i32 %sub31, -1
  %indvars.iv.next = add nsw i64 %indvars.iv, -2
  br i1 %cmp, label %for.body, label %return

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv = phi i64 [ %4, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %v.048 = phi i32 [ %sub, %for.body.lr.ph ], [ %sub31, %for.cond ]
  %5 = add nsw i64 %indvars.iv, 1
  %arrayidx4 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 1, i64 %5
  %6 = load %struct.rtx_def** %arrayidx4, align 8, !tbaa !1
  %rtwint = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0, i32 0
  %7 = load i64* %rtwint, align 8, !tbaa !15
  %cmp7 = icmp eq i64 %7, %conv
  %sub31 = add nsw i32 %v.048, -2
  br i1 %cmp7, label %if.then, label %for.cond

if.then:                                          ; preds = %for.body
  %8 = trunc i64 %indvars.iv to i32
  %cmp10 = icmp slt i32 %8, %sub
  br i1 %cmp10, label %if.then12, label %if.end

if.then12:                                        ; preds = %if.then
  %arrayidx16 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 1, i64 %4
  %9 = load %struct.rtx_def** %arrayidx16, align 8, !tbaa !1
  %sext = shl i64 %indvars.iv, 32
  %idxprom17 = ashr exact i64 %sext, 32
  %arrayidx19 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 1, i64 %idxprom17
  store %struct.rtx_def* %9, %struct.rtx_def** %arrayidx19, align 8, !tbaa !1
  %sub20 = add nsw i32 %2, -1
  %idxprom21 = sext i32 %sub20 to i64
  %arrayidx23 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 1, i64 %idxprom21
  %10 = load %struct.rtx_def** %arrayidx23, align 8, !tbaa !1
  store %struct.rtx_def* %10, %struct.rtx_def** %arrayidx4, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then12, %if.then
  store i32 %sub, i32* %num_elem3, align 4, !tbaa !10
  br label %return

return:                                           ; preds = %for.cond, %entry, %if.end
  %retval.0 = phi i32 [ 1, %if.end ], [ 0, %entry ], [ 0, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @compute_dominance_frontiers(%struct.simple_bitmap_def** nocapture readonly %frontiers, i32* nocapture readonly %idom) #0 {
entry:
  %0 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %call = tail call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %0) #4
  tail call void @sbitmap_zero(%struct.simple_bitmap_def* %call) #4
  tail call fastcc void @compute_dominance_frontiers_1(%struct.simple_bitmap_def** %frontiers, i32* %idom, i32 0, %struct.simple_bitmap_def* %call)
  %1 = bitcast %struct.simple_bitmap_def* %call to i8*
  tail call void @free(i8* %1)
  ret void
}

declare %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @compute_dominance_frontiers_1(%struct.simple_bitmap_def** nocapture readonly %frontiers, i32* nocapture readonly %idom, i32 %bb, %struct.simple_bitmap_def* nocapture %done) #0 {
entry:
  %idxprom = sext i32 %bb to i64
  %0 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %0, i64 0, i32 4
  %bb1 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb1, i64 0, i64 %idxprom
  %1 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %rem = and i32 %bb, 63
  %sh_prom = zext i32 %rem to i64
  %shl = shl i64 1, %sh_prom
  %div = lshr i32 %bb, 6
  %idxprom2 = zext i32 %div to i64
  %arrayidx3 = getelementptr inbounds %struct.simple_bitmap_def* %done, i64 0, i32 3, i64 %idxprom2
  %2 = load i64* %arrayidx3, align 8, !tbaa !15
  %or = or i64 %2, %shl
  store i64 %or, i64* %arrayidx3, align 8, !tbaa !15
  %arrayidx5 = getelementptr inbounds %struct.simple_bitmap_def** %frontiers, i64 %idxprom
  %3 = load %struct.simple_bitmap_def** %arrayidx5, align 8, !tbaa !1
  tail call void @sbitmap_zero(%struct.simple_bitmap_def* %3) #4
  %4 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp157 = icmp sgt i32 %4, 0
  br i1 %cmp157, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.inc
  %5 = phi i32 [ %10, %for.inc ], [ %4, %entry ]
  %indvars.iv163 = phi i64 [ %indvars.iv.next164, %for.inc ], [ 0, %entry ]
  %arrayidx7 = getelementptr inbounds i32* %idom, i64 %indvars.iv163
  %6 = load i32* %arrayidx7, align 4, !tbaa !9
  %cmp8 = icmp eq i32 %6, %bb
  br i1 %cmp8, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %div9 = lshr i64 %indvars.iv163, 6
  %idxprom10 = and i64 %div9, 67108863
  %arrayidx12 = getelementptr inbounds %struct.simple_bitmap_def* %done, i64 0, i32 3, i64 %idxprom10
  %7 = load i64* %arrayidx12, align 8, !tbaa !15
  %rem13 = and i64 %indvars.iv163, 63
  %8 = shl i64 1, %rem13
  %and149 = and i64 %7, %8
  %tobool = icmp eq i64 %and149, 0
  br i1 %tobool, label %if.then, label %for.inc

if.then:                                          ; preds = %land.lhs.true
  %9 = trunc i64 %indvars.iv163 to i32
  tail call fastcc void @compute_dominance_frontiers_1(%struct.simple_bitmap_def** %frontiers, i32* %idom, i32 %9, %struct.simple_bitmap_def* %done)
  %.pre = load i32* @n_basic_blocks, align 4, !tbaa !9
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body, %if.then
  %10 = phi i32 [ %5, %land.lhs.true ], [ %5, %for.body ], [ %.pre, %if.then ]
  %indvars.iv.next164 = add nuw nsw i64 %indvars.iv163, 1
  %11 = trunc i64 %indvars.iv.next164 to i32
  %cmp = icmp slt i32 %11, %10
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %entry
  %12 = phi i32 [ %4, %entry ], [ %10, %for.inc ]
  %succ = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 5
  %e.0154 = load %struct.edge_def** %succ, align 8
  %tobool16155 = icmp eq %struct.edge_def* %e.0154, null
  br i1 %tobool16155, label %for.cond43.preheader, label %for.body17

for.cond43.preheader:                             ; preds = %for.inc41, %for.end
  %cmp44152 = icmp sgt i32 %12, 0
  br i1 %cmp44152, label %for.body45, label %for.end100

for.body17:                                       ; preds = %for.end, %for.inc41
  %e.0156 = phi %struct.edge_def* [ %e.0, %for.inc41 ], [ %e.0154, %for.end ]
  %dest = getelementptr inbounds %struct.edge_def* %e.0156, i64 0, i32 3
  %13 = load %struct.basic_block_def** %dest, align 8, !tbaa !16
  %cmp18 = icmp eq %struct.basic_block_def* %13, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp18, label %for.inc41, label %if.end20

if.end20:                                         ; preds = %for.body17
  %index = getelementptr inbounds %struct.basic_block_def* %13, i64 0, i32 11
  %14 = load i32* %index, align 4, !tbaa !12
  %idxprom22 = sext i32 %14 to i64
  %arrayidx23 = getelementptr inbounds i32* %idom, i64 %idxprom22
  %15 = load i32* %arrayidx23, align 4, !tbaa !9
  %cmp24 = icmp eq i32 %15, %bb
  br i1 %cmp24, label %for.inc41, label %if.then25

if.then25:                                        ; preds = %if.end20
  %rem28 = and i32 %14, 63
  %sh_prom29 = zext i32 %rem28 to i64
  %shl30 = shl i64 1, %sh_prom29
  %div33 = lshr i32 %14, 6
  %idxprom34 = zext i32 %div33 to i64
  %16 = load %struct.simple_bitmap_def** %arrayidx5, align 8, !tbaa !1
  %arrayidx38 = getelementptr inbounds %struct.simple_bitmap_def* %16, i64 0, i32 3, i64 %idxprom34
  %17 = load i64* %arrayidx38, align 8, !tbaa !15
  %or39 = or i64 %17, %shl30
  store i64 %or39, i64* %arrayidx38, align 8, !tbaa !15
  br label %for.inc41

for.inc41:                                        ; preds = %if.end20, %if.then25, %for.body17
  %succ_next = getelementptr inbounds %struct.edge_def* %e.0156, i64 0, i32 1
  %e.0 = load %struct.edge_def** %succ_next, align 8
  %tobool16 = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool16, label %for.cond43.preheader, label %for.body17

for.body45:                                       ; preds = %for.cond43.preheader, %for.inc98
  %indvars.iv161 = phi i64 [ %indvars.iv.next162, %for.inc98 ], [ 0, %for.cond43.preheader ]
  %arrayidx47 = getelementptr inbounds i32* %idom, i64 %indvars.iv161
  %18 = load i32* %arrayidx47, align 4, !tbaa !9
  %cmp48 = icmp eq i32 %18, %bb
  br i1 %cmp48, label %do.body, label %for.inc98

do.body:                                          ; preds = %for.body45
  %arrayidx51 = getelementptr inbounds %struct.simple_bitmap_def** %frontiers, i64 %indvars.iv161
  %19 = load %struct.simple_bitmap_def** %arrayidx51, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.simple_bitmap_def* %19, i64 0, i32 1
  %20 = load i32* %size, align 4, !tbaa !18
  %cmp56150 = icmp eq i32 %20, 0
  br i1 %cmp56150, label %for.inc98, label %for.body57

for.body57:                                       ; preds = %do.body, %for.inc94
  %indvars.iv159 = phi i64 [ %indvars.iv.next160, %for.inc94 ], [ 0, %do.body ]
  %arrayidx59 = getelementptr inbounds %struct.simple_bitmap_def* %19, i64 0, i32 3, i64 %indvars.iv159
  %21 = load i64* %arrayidx59, align 8, !tbaa !15
  %cmp60 = icmp eq i64 %21, 0
  br i1 %cmp60, label %for.inc94, label %for.body64.preheader

for.body64.preheader:                             ; preds = %for.body57
  %22 = trunc i64 %indvars.iv159 to i32
  %mul = shl i32 %22, 6
  br label %for.body64

for.body64:                                       ; preds = %for.body64.preheader, %for.inc90
  %indvars.iv = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next, %for.inc90 ]
  %word_.0 = phi i64 [ %21, %for.body64.preheader ], [ %word_.1, %for.inc90 ]
  %shl66 = shl i64 1, %indvars.iv
  %and67 = and i64 %shl66, %word_.0
  %cmp68 = icmp eq i64 %and67, 0
  br i1 %cmp68, label %for.inc90, label %if.then69

if.then69:                                        ; preds = %for.body64
  %neg = xor i64 %shl66, -1
  %and70 = and i64 %word_.0, %neg
  %23 = trunc i64 %indvars.iv to i32
  %add = add i32 %23, %mul
  %idxprom71 = sext i32 %add to i64
  %arrayidx72 = getelementptr inbounds i32* %idom, i64 %idxprom71
  %24 = load i32* %arrayidx72, align 4, !tbaa !9
  %cmp73 = icmp eq i32 %24, %bb
  br i1 %cmp73, label %if.end85, label %if.then74

if.then74:                                        ; preds = %if.then69
  %rem75 = and i32 %add, 63
  %sh_prom76 = zext i32 %rem75 to i64
  %shl77 = shl i64 1, %sh_prom76
  %div78 = lshr i32 %add, 6
  %idxprom79 = zext i32 %div78 to i64
  %25 = load %struct.simple_bitmap_def** %arrayidx5, align 8, !tbaa !1
  %arrayidx83 = getelementptr inbounds %struct.simple_bitmap_def* %25, i64 0, i32 3, i64 %idxprom79
  %26 = load i64* %arrayidx83, align 8, !tbaa !15
  %or84 = or i64 %26, %shl77
  store i64 %or84, i64* %arrayidx83, align 8, !tbaa !15
  br label %if.end85

if.end85:                                         ; preds = %if.then69, %if.then74
  %cmp86 = icmp eq i64 %and70, 0
  br i1 %cmp86, label %for.inc94, label %for.inc90

for.inc90:                                        ; preds = %for.body64, %if.end85
  %word_.1 = phi i64 [ %and70, %if.end85 ], [ %word_.0, %for.body64 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %27 = trunc i64 %indvars.iv.next to i32
  %cmp63.old = icmp ult i32 %27, 64
  br i1 %cmp63.old, label %for.body64, label %for.inc94

for.inc94:                                        ; preds = %if.end85, %for.inc90, %for.body57
  %indvars.iv.next160 = add nuw nsw i64 %indvars.iv159, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next160 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %20
  br i1 %exitcond, label %for.inc98, label %for.body57

for.inc98:                                        ; preds = %for.inc94, %do.body, %for.body45
  %indvars.iv.next162 = add nuw nsw i64 %indvars.iv161, 1
  %28 = trunc i64 %indvars.iv.next162 to i32
  %cmp44 = icmp slt i32 %28, %12
  br i1 %cmp44, label %for.body45, label %for.end100

for.end100:                                       ; preds = %for.inc98, %for.cond43.preheader
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #1

; Function Attrs: nounwind uwtable
define void @convert_to_ssa() #0 {
entry:
  %0 = load i32* @in_ssa_form, align 4, !tbaa !9
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1145, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.convert_to_ssa, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %call = call %struct.rtx_def* @get_insns() #4
  call void @life_analysis(%struct.rtx_def* %call, %struct._IO_FILE* null, i32 0) #4
  %1 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %conv = sext i32 %1 to i64
  %mul = shl nsw i64 %conv, 2
  %2 = alloca i32, i64 %conv, align 1
  %3 = bitcast i32* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 -1, i64 %mul, i32 1, i1 false)
  call void @calculate_dominance_info(i32* %2, %struct.simple_bitmap_def** null, i32 0) #4
  %4 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool3 = icmp eq %struct._IO_FILE* %4, null
  br i1 %tobool3, label %if.end9, label %if.then4

if.then4:                                         ; preds = %if.end
  %5 = call i64 @fwrite(i8* getelementptr inbounds ([26 x i8]* @.str2, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %4)
  %6 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp74 = icmp sgt i32 %6, 0
  %7 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  br i1 %cmp74, label %for.body, label %for.end

for.body:                                         ; preds = %if.then4, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then4 ]
  %8 = phi %struct._IO_FILE* [ %13, %for.body ], [ %7, %if.then4 ]
  %arrayidx = getelementptr inbounds i32* %2, i64 %indvars.iv
  %9 = load i32* %arrayidx, align 4, !tbaa !9
  %10 = trunc i64 %indvars.iv to i32
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([13 x i8]* @.str3, i64 0, i64 0), i32 %10, i32 %9) #4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %11 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %12 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %12, %11
  %13 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %if.then4
  %.lcssa = phi %struct._IO_FILE* [ %7, %if.then4 ], [ %13, %for.body ]
  %call8 = call i32 @fflush(%struct._IO_FILE* %.lcssa) #4
  br label %if.end9

if.end9:                                          ; preds = %if.end, %for.end
  %14 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %call10 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %14, i32 %14) #4
  %15 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %call.i = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %15) #4
  call void @sbitmap_zero(%struct.simple_bitmap_def* %call.i) #4
  call fastcc void @compute_dominance_frontiers_1(%struct.simple_bitmap_def** %call10, i32* %2, i32 0, %struct.simple_bitmap_def* %call.i) #4
  %16 = bitcast %struct.simple_bitmap_def* %call.i to i8*
  call void @free(i8* %16) #4
  %17 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool11 = icmp eq %struct._IO_FILE* %17, null
  br i1 %tobool11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.end9
  %18 = load i32* @n_basic_blocks, align 4, !tbaa !9
  call void @dump_sbitmap_vector(%struct._IO_FILE* %17, i8* getelementptr inbounds ([24 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8]* @.str5, i64 0, i64 0), %struct.simple_bitmap_def** %call10, i32 %18) #4
  %19 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %call13 = call i32 @fflush(%struct._IO_FILE* %19) #4
  br label %if.end14

if.end14:                                         ; preds = %if.end9, %if.then12
  %call15 = call i32 @max_reg_num() #4
  store i32 %call15, i32* @ssa_max_reg_num, align 4, !tbaa !9
  %20 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %call16 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %call15, i32 %20) #4
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %call16, i32 %call15) #4
  store %struct.simple_bitmap_def** %call16, %struct.simple_bitmap_def*** @fe_evals, align 8, !tbaa !1
  %21 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp27.i = icmp sgt i32 %21, 0
  br i1 %cmp27.i, label %for.body.lr.ph.i, label %find_evaluations.exit

for.body.lr.ph.i:                                 ; preds = %if.end14
  %22 = sext i32 %21 to i64
  br label %for.body.i

for.cond.loopexit.i:                              ; preds = %if.end.i
  %cmp.i = icmp sgt i32 %23, 0
  br i1 %cmp.i, label %for.body.i, label %find_evaluations.exit.loopexit

for.body.i:                                       ; preds = %for.cond.loopexit.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ %22, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.cond.loopexit.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -1
  %23 = trunc i64 %indvars.iv.next.i to i32
  store i32 %23, i32* @fe_current_bb, align 4, !tbaa !9
  %24 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data.i = getelementptr inbounds %struct.varray_head_tag* %24, i64 0, i32 4
  %bb1.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb1.i, i64 0, i64 %indvars.iv.next.i
  %25 = load %struct.basic_block_def** %arrayidx.i, align 8, !tbaa !1
  %head.i = getelementptr inbounds %struct.basic_block_def* %25, i64 0, i32 0
  %end.i = getelementptr inbounds %struct.basic_block_def* %25, i64 0, i32 1
  %26 = load %struct.rtx_def** %end.i, align 8, !tbaa !20
  br label %while.body.i

while.body.i:                                     ; preds = %if.end14.i, %for.body.i
  %p.0.in.i = phi %struct.rtx_def** [ %head.i, %for.body.i ], [ %rtx17.i, %if.end14.i ]
  %p.0.i = load %struct.rtx_def** %p.0.in.i, align 8
  %27 = getelementptr inbounds %struct.rtx_def* %p.0.i, i64 0, i32 0
  %bf.load.i = load i32* %27, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom625.i = zext i32 %bf.clear.i to i64
  %arrayidx7.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom625.i
  %28 = load i8* %arrayidx7.i, align 1, !tbaa !21
  %cmp8.i = icmp eq i8 %28, 105
  br i1 %cmp8.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %while.body.i
  %arrayidx10.i = getelementptr inbounds %struct.rtx_def* %p.0.i, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx10.i to %struct.rtx_def**
  %29 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  call void @note_stores(%struct.rtx_def* %29, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @find_evaluations_1, i8* null) #4
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body.i
  %cmp11.i = icmp eq %struct.rtx_def* %p.0.i, %26
  br i1 %cmp11.i, label %for.cond.loopexit.i, label %if.end14.i

if.end14.i:                                       ; preds = %if.end.i
  %arrayidx16.i = getelementptr inbounds %struct.rtx_def* %p.0.i, i64 0, i32 1, i64 2
  %rtx17.i = bitcast %union.rtunion_def* %arrayidx16.i to %struct.rtx_def**
  br label %while.body.i

find_evaluations.exit.loopexit:                   ; preds = %for.cond.loopexit.i
  %.pre = load i32* @n_basic_blocks, align 4, !tbaa !9
  br label %find_evaluations.exit

find_evaluations.exit:                            ; preds = %find_evaluations.exit.loopexit, %if.end14
  %30 = phi i32 [ %.pre, %find_evaluations.exit.loopexit ], [ %21, %if.end14 ]
  %call17 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %call15, i32 %30) #4
  %31 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %call.i46 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %31) #4
  %cmp77.i = icmp sgt i32 %call15, 0
  br i1 %cmp77.i, label %for.body.lr.ph.i47, label %for.end40.i

for.body.lr.ph.i47:                               ; preds = %find_evaluations.exit
  %size.i = getelementptr inbounds %struct.simple_bitmap_def* %call.i46, i64 0, i32 1
  br label %for.body.i49

for.body.i49:                                     ; preds = %for.inc38.i, %for.body.lr.ph.i47
  %indvars.iv83.i = phi i64 [ 0, %for.body.lr.ph.i47 ], [ %indvars.iv.next84.i, %for.inc38.i ]
  %passes.078.i = phi i32 [ 0, %for.body.lr.ph.i47 ], [ %inc.i, %for.inc38.i ]
  %arrayidx.i48 = getelementptr inbounds %struct.simple_bitmap_def** %call17, i64 %indvars.iv83.i
  %32 = load %struct.simple_bitmap_def** %arrayidx.i48, align 8, !tbaa !1
  %arrayidx2.i = getelementptr inbounds %struct.simple_bitmap_def** %call16, i64 %indvars.iv83.i
  %33 = load %struct.simple_bitmap_def** %arrayidx2.i, align 8, !tbaa !1
  call void @sbitmap_copy(%struct.simple_bitmap_def* %call.i46, %struct.simple_bitmap_def* %33) #4
  call void @sbitmap_zero(%struct.simple_bitmap_def* %32) #4
  br label %do.body.i

do.body.i:                                        ; preds = %do.cond.i, %for.body.i49
  %passes.1.i = phi i32 [ %passes.078.i, %for.body.i49 ], [ %inc.i, %do.cond.i ]
  %inc.i = add nsw i32 %passes.1.i, 1
  %34 = load i32* %size.i, align 4, !tbaa !18
  %cmp574.i = icmp eq i32 %34, 0
  br i1 %cmp574.i, label %for.inc38.i, label %for.body6.i

for.body6.i:                                      ; preds = %do.body.i, %for.inc34.i
  %indvars.iv81.i = phi i64 [ %indvars.iv.next82.i, %for.inc34.i ], [ 0, %do.body.i ]
  %changed.076.i = phi i32 [ %changed.3.i, %for.inc34.i ], [ 0, %do.body.i ]
  %arrayidx8.i = getelementptr inbounds %struct.simple_bitmap_def* %call.i46, i64 0, i32 3, i64 %indvars.iv81.i
  %35 = load i64* %arrayidx8.i, align 8, !tbaa !15
  %cmp9.i = icmp eq i64 %35, 0
  br i1 %cmp9.i, label %for.inc34.i, label %for.body12.preheader.i

for.body12.preheader.i:                           ; preds = %for.body6.i
  %36 = trunc i64 %indvars.iv81.i to i32
  %mul.i = shl i32 %36, 6
  br label %for.body12.i

for.body12.i:                                     ; preds = %for.inc.i, %for.body12.preheader.i
  %indvars.iv.i50 = phi i64 [ 0, %for.body12.preheader.i ], [ %indvars.iv.next.i51, %for.inc.i ]
  %changed.1.i = phi i32 [ %changed.076.i, %for.body12.preheader.i ], [ %changed.2.i, %for.inc.i ]
  %word_.0.i = phi i64 [ %35, %for.body12.preheader.i ], [ %word_.1.i, %for.inc.i ]
  %shl.i = shl i64 1, %indvars.iv.i50
  %and.i = and i64 %word_.0.i, %shl.i
  %cmp13.i = icmp eq i64 %and.i, 0
  br i1 %cmp13.i, label %for.inc.i, label %if.then14.i

if.then14.i:                                      ; preds = %for.body12.i
  %neg.i = xor i64 %shl.i, -1
  %and15.i = and i64 %word_.0.i, %neg.i
  %37 = trunc i64 %indvars.iv.i50 to i32
  %add.i = add i32 %37, %mul.i
  %rem.i = and i32 %add.i, 63
  %sh_prom16.i = zext i32 %rem.i to i64
  %shl17.i = shl i64 1, %sh_prom16.i
  %neg18.i = xor i64 %shl17.i, -1
  %div.i = lshr i32 %add.i, 6
  %idxprom19.i = zext i32 %div.i to i64
  %arrayidx21.i = getelementptr inbounds %struct.simple_bitmap_def* %call.i46, i64 0, i32 3, i64 %idxprom19.i
  %38 = load i64* %arrayidx21.i, align 8, !tbaa !15
  %and22.i = and i64 %38, %neg18.i
  store i64 %and22.i, i64* %arrayidx21.i, align 8, !tbaa !15
  %idxprom23.i = sext i32 %add.i to i64
  %arrayidx24.i = getelementptr inbounds %struct.simple_bitmap_def** %call10, i64 %idxprom23.i
  %39 = load %struct.simple_bitmap_def** %arrayidx24.i, align 8, !tbaa !1
  %call25.i = call i32 @sbitmap_union_of_diff(%struct.simple_bitmap_def* %call.i46, %struct.simple_bitmap_def* %call.i46, %struct.simple_bitmap_def* %39, %struct.simple_bitmap_def* %32) #4
  %40 = load %struct.simple_bitmap_def** %arrayidx24.i, align 8, !tbaa !1
  %call28.i = call i32 @sbitmap_a_or_b(%struct.simple_bitmap_def* %32, %struct.simple_bitmap_def* %32, %struct.simple_bitmap_def* %40) #4
  %cmp29.i = icmp eq i64 %and15.i, 0
  br i1 %cmp29.i, label %for.inc34.i, label %for.inc.i

for.inc.i:                                        ; preds = %if.then14.i, %for.body12.i
  %changed.2.i = phi i32 [ 1, %if.then14.i ], [ %changed.1.i, %for.body12.i ]
  %word_.1.i = phi i64 [ %and15.i, %if.then14.i ], [ %word_.0.i, %for.body12.i ]
  %indvars.iv.next.i51 = add nuw nsw i64 %indvars.iv.i50, 1
  %41 = trunc i64 %indvars.iv.next.i51 to i32
  %cmp11.old.i = icmp ult i32 %41, 64
  br i1 %cmp11.old.i, label %for.body12.i, label %for.inc34.i

for.inc34.i:                                      ; preds = %for.inc.i, %if.then14.i, %for.body6.i
  %changed.3.i = phi i32 [ %changed.076.i, %for.body6.i ], [ %changed.2.i, %for.inc.i ], [ 1, %if.then14.i ]
  %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1
  %lftr.wideiv79 = trunc i64 %indvars.iv.next82.i to i32
  %exitcond80 = icmp eq i32 %lftr.wideiv79, %34
  br i1 %exitcond80, label %do.cond.i, label %for.body6.i

do.cond.i:                                        ; preds = %for.inc34.i
  %tobool.i = icmp eq i32 %changed.3.i, 0
  br i1 %tobool.i, label %for.inc38.i, label %do.body.i

for.inc38.i:                                      ; preds = %do.cond.i, %do.body.i
  %indvars.iv.next84.i = add nuw nsw i64 %indvars.iv83.i, 1
  %lftr.wideiv81 = trunc i64 %indvars.iv.next84.i to i32
  %exitcond82 = icmp eq i32 %lftr.wideiv81, %call15
  br i1 %exitcond82, label %for.end40.i, label %for.body.i49

for.end40.i:                                      ; preds = %for.inc38.i, %find_evaluations.exit
  %passes.0.lcssa.i = phi i32 [ 0, %find_evaluations.exit ], [ %inc.i, %for.inc38.i ]
  %42 = bitcast %struct.simple_bitmap_def* %call.i46 to i8*
  call void @free(i8* %42) #4
  %43 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool41.i = icmp eq %struct._IO_FILE* %43, null
  br i1 %tobool41.i, label %if.end21, label %compute_iterated_dominance_frontiers.exit

compute_iterated_dominance_frontiers.exit:        ; preds = %for.end40.i
  %call43.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([52 x i8]* @.str10, i64 0, i64 0), i32 %passes.0.lcssa.i, i32 %call15) #4
  %.pr = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool18 = icmp eq %struct._IO_FILE* %.pr, null
  br i1 %tobool18, label %if.end21, label %if.then19

if.then19:                                        ; preds = %compute_iterated_dominance_frontiers.exit
  call void @dump_sbitmap_vector(%struct._IO_FILE* %.pr, i8* getelementptr inbounds ([33 x i8]* @.str6, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), %struct.simple_bitmap_def** %call17, i32 %call15) #4
  %44 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %call20 = call i32 @fflush(%struct._IO_FILE* %44) #4
  br label %if.end21

if.end21:                                         ; preds = %for.end40.i, %compute_iterated_dominance_frontiers.exit, %if.then19
  br i1 %cmp77.i, label %for.body.i52, label %insert_phi_nodes.exit

for.body.i52:                                     ; preds = %if.end21, %for.inc32.i
  %indvars.iv7.i = phi i64 [ %indvars.iv.next8.i, %for.inc32.i ], [ 0, %if.end21 ]
  %45 = trunc i64 %indvars.iv7.i to i32
  %cmp1.i = icmp sgt i32 %45, 52
  %46 = and i32 %45, -2
  %switch.i = icmp eq i32 %46, 16
  %or.cond.i = or i1 %cmp1.i, %switch.i
  br i1 %or.cond.i, label %do.body.i55, label %for.inc32.i

do.body.i55:                                      ; preds = %for.body.i52
  %arrayidx.i53 = getelementptr inbounds %struct.simple_bitmap_def** %call17, i64 %indvars.iv7.i
  %47 = load %struct.simple_bitmap_def** %arrayidx.i53, align 8, !tbaa !1
  %size.i54 = getelementptr inbounds %struct.simple_bitmap_def* %47, i64 0, i32 1
  %48 = load i32* %size.i54, align 4, !tbaa !18
  %cmp81.i = icmp eq i32 %48, 0
  br i1 %cmp81.i, label %for.inc32.i, label %for.body9.i

for.body9.i:                                      ; preds = %do.body.i55, %for.inc28.i
  %indvars.iv5.i = phi i64 [ %indvars.iv.next6.i, %for.inc28.i ], [ 0, %do.body.i55 ]
  %arrayidx11.i = getelementptr inbounds %struct.simple_bitmap_def* %47, i64 0, i32 3, i64 %indvars.iv5.i
  %49 = load i64* %arrayidx11.i, align 8, !tbaa !15
  %cmp12.i = icmp eq i64 %49, 0
  br i1 %cmp12.i, label %for.inc28.i, label %for.body16.preheader.i

for.body16.preheader.i:                           ; preds = %for.body9.i
  %50 = trunc i64 %indvars.iv5.i to i32
  %mul.i56 = shl i32 %50, 6
  br label %for.body16.i

for.body16.i:                                     ; preds = %for.inc.i70, %for.body16.preheader.i
  %indvars.iv.i57 = phi i64 [ 0, %for.body16.preheader.i ], [ %indvars.iv.next.i69, %for.inc.i70 ]
  %word_.0.i58 = phi i64 [ %49, %for.body16.preheader.i ], [ %word_.1.i68, %for.inc.i70 ]
  %shl.i59 = shl i64 1, %indvars.iv.i57
  %and.i60 = and i64 %shl.i59, %word_.0.i58
  %cmp17.i = icmp eq i64 %and.i60, 0
  br i1 %cmp17.i, label %for.inc.i70, label %if.then18.i

if.then18.i:                                      ; preds = %for.body16.i
  %neg.i61 = xor i64 %shl.i59, -1
  %and19.i = and i64 %word_.0.i58, %neg.i61
  %51 = trunc i64 %indvars.iv.i57 to i32
  %add.i62 = add i32 %51, %mul.i56
  %idxprom20.i = sext i32 %add.i62 to i64
  %52 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data.i63 = getelementptr inbounds %struct.varray_head_tag* %52, i64 0, i32 4
  %bb.i = bitcast %union.varray_data_tag* %data.i63 to [1 x %struct.basic_block_def*]*
  %arrayidx21.i64 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb.i, i64 0, i64 %idxprom20.i
  %53 = load %struct.basic_block_def** %arrayidx21.i64, align 8, !tbaa !1
  %global_live_at_start.i = getelementptr inbounds %struct.basic_block_def* %53, i64 0, i32 8
  %54 = load %struct.bitmap_head_def** %global_live_at_start.i, align 8, !tbaa !22
  %call.i65 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %54, i32 %45) #4
  %tobool.i66 = icmp eq i32 %call.i65, 0
  br i1 %tobool.i66, label %if.end.i67, label %if.then22.i

if.then22.i:                                      ; preds = %if.then18.i
  %55 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data.i.i = getelementptr inbounds %struct.varray_head_tag* %55, i64 0, i32 4
  %bb1.i.i = bitcast %union.varray_data_tag* %data.i.i to [1 x %struct.basic_block_def*]*
  %arrayidx.i.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb1.i.i, i64 0, i64 %idxprom20.i
  %56 = load %struct.basic_block_def** %arrayidx.i.i, align 8, !tbaa !1
  %pred.i.i = getelementptr inbounds %struct.basic_block_def* %56, i64 0, i32 4
  %e.065.i.i = load %struct.edge_def** %pred.i.i, align 8
  %tobool66.i.i = icmp eq %struct.edge_def* %e.065.i.i, null
  br i1 %tobool66.i.i, label %if.end.i67, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.then22.i, %for.body.i.i
  %e.068.i.i = phi %struct.edge_def* [ %e.0.i.i, %for.body.i.i ], [ %e.065.i.i, %if.then22.i ]
  %npred.067.i.i = phi i32 [ %npred.0.inc.i.i, %for.body.i.i ], [ 0, %if.then22.i ]
  %src.i.i = getelementptr inbounds %struct.edge_def* %e.068.i.i, i64 0, i32 2
  %57 = load %struct.basic_block_def** %src.i.i, align 8, !tbaa !23
  %not.cmp.i.i = icmp ne %struct.basic_block_def* %57, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  %inc.i.i = zext i1 %not.cmp.i.i to i32
  %npred.0.inc.i.i = add nsw i32 %inc.i.i, %npred.067.i.i
  %pred_next.i.i = getelementptr inbounds %struct.edge_def* %e.068.i.i, i64 0, i32 0
  %e.0.i.i = load %struct.edge_def** %pred_next.i.i, align 8
  %tobool.i.i = icmp eq %struct.edge_def* %e.0.i.i, null
  br i1 %tobool.i.i, label %for.end.i.i, label %for.body.i.i

for.end.i.i:                                      ; preds = %for.body.i.i
  %cmp2.i.i = icmp eq i32 %npred.0.inc.i.i, 0
  br i1 %cmp2.i.i, label %if.end.i67, label %if.end4.i.i

if.end4.i.i:                                      ; preds = %for.end.i.i
  %58 = load %struct.function** @cfun, align 8, !tbaa !1
  %emit.i.i = getelementptr inbounds %struct.function* %58, i64 0, i32 3
  %59 = load %struct.emit_status** %emit.i.i, align 8, !tbaa !24
  %x_regno_reg_rtx.i.i = getelementptr inbounds %struct.emit_status* %59, i64 0, i32 12
  %60 = load %struct.rtx_def*** %x_regno_reg_rtx.i.i, align 8, !tbaa !27
  %arrayidx6.i.i = getelementptr inbounds %struct.rtx_def** %60, i64 %indvars.iv7.i
  %61 = load %struct.rtx_def** %arrayidx6.i.i, align 8, !tbaa !1
  %mul.i.i = shl nsw i32 %npred.0.inc.i.i, 1
  %call.i.i = call %struct.rtvec_def* @rtvec_alloc(i32 %mul.i.i) #4
  %e.161.i.i = load %struct.edge_def** %pred.i.i, align 8
  %tobool962.i.i = icmp eq %struct.edge_def* %e.161.i.i, null
  br i1 %tobool962.i.i, label %for.end26.i.i, label %for.body10.i.i

for.body10.i.i:                                   ; preds = %if.end4.i.i, %for.inc23.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.inc23.i.i ], [ 0, %if.end4.i.i ]
  %e.164.i.i = phi %struct.edge_def* [ %e.1.i.i, %for.inc23.i.i ], [ %e.161.i.i, %if.end4.i.i ]
  %src11.i.i = getelementptr inbounds %struct.edge_def* %e.164.i.i, i64 0, i32 2
  %62 = load %struct.basic_block_def** %src11.i.i, align 8, !tbaa !23
  %cmp12.i.i = icmp eq %struct.basic_block_def* %62, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  br i1 %cmp12.i.i, label %for.inc23.i.i, label %if.then13.i.i

if.then13.i.i:                                    ; preds = %for.body10.i.i
  %63 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !1
  %arrayidx15.i.i = getelementptr inbounds %struct.rtvec_def* %call.i.i, i64 0, i32 1, i64 %indvars.iv.i.i
  store %struct.rtx_def* %63, %struct.rtx_def** %arrayidx15.i.i, align 8, !tbaa !1
  %64 = load %struct.basic_block_def** %src11.i.i, align 8, !tbaa !23
  %index.i.i = getelementptr inbounds %struct.basic_block_def* %64, i64 0, i32 11
  %65 = load i32* %index.i.i, align 4, !tbaa !12
  %conv.i.i = sext i32 %65 to i64
  %call17.i.i = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv.i.i) #4
  %66 = or i64 %indvars.iv.i.i, 1
  %arrayidx21.i.i = getelementptr inbounds %struct.rtvec_def* %call.i.i, i64 0, i32 1, i64 %66
  store %struct.rtx_def* %call17.i.i, %struct.rtx_def** %arrayidx21.i.i, align 8, !tbaa !1
  br label %for.inc23.i.i

for.inc23.i.i:                                    ; preds = %if.then13.i.i, %for.body10.i.i
  %pred_next24.i.i = getelementptr inbounds %struct.edge_def* %e.164.i.i, i64 0, i32 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 2
  %e.1.i.i = load %struct.edge_def** %pred_next24.i.i, align 8
  %tobool9.i.i = icmp eq %struct.edge_def* %e.1.i.i, null
  br i1 %tobool9.i.i, label %for.end26.i.i, label %for.body10.i.i

for.end26.i.i:                                    ; preds = %for.inc23.i.i, %if.end4.i.i
  %call27.i.i = call %struct.rtx_def* @gen_rtx_fmt_E(i32 152, i32 0, %struct.rtvec_def* %call.i.i) #4
  %call28.i.i = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %61, %struct.rtx_def* %call27.i.i) #4
  %call29.i.i = call %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def* %56) #4
  %arrayidx30.i.i = getelementptr inbounds %struct.rtx_def* %call29.i.i, i64 0, i32 1, i64 1
  %rtx.i.i = bitcast %union.rtunion_def* %arrayidx30.i.i to %struct.rtx_def**
  %67 = load %struct.rtx_def** %rtx.i.i, align 8, !tbaa !1
  %end.i.i = getelementptr inbounds %struct.basic_block_def* %56, i64 0, i32 1
  %68 = load %struct.rtx_def** %end.i.i, align 8, !tbaa !20
  %cmp31.i.i = icmp eq %struct.rtx_def* %67, %68
  %call33.i.i = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call28.i.i, %struct.rtx_def* %call29.i.i) #4
  br i1 %cmp31.i.i, label %if.then35.i.i, label %if.end.i67

if.then35.i.i:                                    ; preds = %for.end26.i.i
  %69 = load %struct.rtx_def** %rtx.i.i, align 8, !tbaa !1
  store %struct.rtx_def* %69, %struct.rtx_def** %end.i.i, align 8, !tbaa !20
  br label %if.end.i67

if.end.i67:                                       ; preds = %if.then35.i.i, %for.end26.i.i, %for.end.i.i, %if.then22.i, %if.then18.i
  %cmp23.i = icmp eq i64 %and19.i, 0
  br i1 %cmp23.i, label %for.inc28.i, label %for.inc.i70

for.inc.i70:                                      ; preds = %if.end.i67, %for.body16.i
  %word_.1.i68 = phi i64 [ %and19.i, %if.end.i67 ], [ %word_.0.i58, %for.body16.i ]
  %indvars.iv.next.i69 = add nuw nsw i64 %indvars.iv.i57, 1
  %70 = trunc i64 %indvars.iv.next.i69 to i32
  %cmp15.old.i = icmp ult i32 %70, 64
  br i1 %cmp15.old.i, label %for.body16.i, label %for.inc28.i

for.inc28.i:                                      ; preds = %for.inc.i70, %if.end.i67, %for.body9.i
  %indvars.iv.next6.i = add nuw nsw i64 %indvars.iv5.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next6.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %48
  br i1 %exitcond, label %for.inc32.i, label %for.body9.i

for.inc32.i:                                      ; preds = %for.inc28.i, %do.body.i55, %for.body.i52
  %indvars.iv.next8.i = add nuw nsw i64 %indvars.iv7.i, 1
  %lftr.wideiv77 = trunc i64 %indvars.iv.next8.i to i32
  %exitcond78 = icmp eq i32 %lftr.wideiv77, %call15
  br i1 %exitcond78, label %insert_phi_nodes.exit, label %for.body.i52

insert_phi_nodes.exit:                            ; preds = %for.inc32.i, %if.end21
  call fastcc void @rename_registers(i32 %call15, i32* %2)
  %71 = bitcast %struct.simple_bitmap_def** %call10 to i8*
  call void @free(i8* %71)
  %72 = bitcast %struct.simple_bitmap_def** %call16 to i8*
  call void @free(i8* %72)
  %73 = bitcast %struct.simple_bitmap_def** %call17 to i8*
  call void @free(i8* %73)
  store i32 1, i32* @in_ssa_form, align 4, !tbaa !9
  %call22 = call %struct.rtx_def* @get_insns() #4
  %call23 = call i32 @max_reg_num() #4
  call void @reg_scan(%struct.rtx_def* %call22, i32 %call23, i32 1) #4
  ret void
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #3

declare void @life_analysis(%struct.rtx_def*, %struct._IO_FILE*, i32) #2

declare %struct.rtx_def* @get_insns() #2

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

declare void @calculate_dominance_info(i32*, %struct.simple_bitmap_def**, i32) #2

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #1

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) #1

declare %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32, i32) #2

declare void @dump_sbitmap_vector(%struct._IO_FILE*, i8*, i8*, %struct.simple_bitmap_def**, i32) #2

declare i32 @max_reg_num() #2

; Function Attrs: nounwind uwtable
define internal fastcc void @rename_registers(i32 %nregs, i32* nocapture readonly %idom) #0 {
entry:
  %mul = mul nsw i32 %nregs, 3
  %conv = sext i32 %mul to i64
  %call = call %struct.varray_head_tag* @varray_init(i64 %conv, i64 8, i8* getelementptr inbounds ([15 x i8]* @.str9, i64 0, i64 0)) #4
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** @ssa_definition, align 8, !tbaa !1
  %call.i = call %struct.htab* @htab_create(i64 64, i32 (i8*)* @ssa_rename_from_hash_function, i32 (i8*, i8*)* @ssa_rename_from_equal, void (i8*)* @ssa_rename_from_delete) #4
  store %struct.htab* %call.i, %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %conv1 = sext i32 %nregs to i64
  %mul2 = shl nsw i64 %conv1, 3
  %0 = alloca %struct.rtx_def*, i64 %conv1, align 1
  store %struct.rtx_def** %0, %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  %1 = bitcast %struct.rtx_def** %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 %mul2, i32 1, i1 false)
  call void @llvm.memset.p0i8.i64(i8* bitcast ([53 x [59 x %struct.rtx_def*]]* @ssa_rename_to_hard to i8*), i8 0, i64 25016, i32 16, i1 false)
  call fastcc void @rename_block(i32 0, i32* %idom)
  store %struct.rtx_def** null, %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  ret void
}

declare void @reg_scan(%struct.rtx_def*, i32, i32) #2

; Function Attrs: nounwind uwtable
define void @convert_from_ssa() #0 {
entry:
  %srfp.i.i = alloca %struct.ssa_rename_from_pair, align 8
  %srfhd.i.i = alloca %struct.ssa_rename_from_hash_table_data, align 8
  %already_seen.i = alloca [53 x [59 x i32]], align 16
  %context.i.i = alloca %struct.phi_coalesce_context, align 8
  %src.i37.i = alloca %struct.rtx_def*, align 8
  %srfp.i.i24.i.i.i = alloca %struct.ssa_rename_from_pair, align 8
  %srfp.i.i.i.i.i = alloca %struct.ssa_rename_from_pair, align 8
  %phi_set_head.i = alloca %struct.bitmap_head_def, align 8
  %call = call %struct.rtx_def* @get_insns() #4
  call void @life_analysis(%struct.rtx_def* %call, %struct._IO_FILE* null, i32 1) #4
  %0 = bitcast %struct.bitmap_head_def* %phi_set_head.i to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #4
  %1 = load %struct.varray_head_tag** @ssa_definition, align 8, !tbaa !1
  %num_elements.i = getelementptr inbounds %struct.varray_head_tag* %1, i64 0, i32 0
  %2 = load i64* %num_elements.i, align 8, !tbaa !29
  %conv.i = trunc i64 %2 to i32
  %call.i = call %struct.partition_def* @partition_new(i32 %conv.i) #4
  %3 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp75.i = icmp sgt i32 %3, 0
  br i1 %cmp75.i, label %for.body.lr.ph.i, label %for.end.i

for.body.lr.ph.i:                                 ; preds = %entry
  %4 = bitcast %struct.ssa_rename_from_pair* %srfp.i.i.i.i.i to i8*
  %reg1.i.i.i.i.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i.i.i.i, i64 0, i32 0
  %original.i.i.i.i.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i.i.i.i, i64 0, i32 1
  %5 = bitcast %struct.ssa_rename_from_pair* %srfp.i.i24.i.i.i to i8*
  %reg1.i.i25.i.i.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i24.i.i.i, i64 0, i32 0
  %original.i.i26.i.i.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i24.i.i.i, i64 0, i32 1
  %6 = sext i32 %3 to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.cond.backedge.i, %for.body.lr.ph.i
  %indvars.iv78.i = phi i64 [ %6, %for.body.lr.ph.i ], [ %indvars.iv.next79.i, %for.cond.backedge.i ]
  %indvars.iv.next79.i = add nsw i64 %indvars.iv78.i, -1
  %7 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data.i.i = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 4
  %bb1.i.i = bitcast %union.varray_data_tag* %data.i.i to [1 x %struct.basic_block_def*]*
  %arrayidx.i.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb1.i.i, i64 0, i64 %indvars.iv.next79.i
  %8 = load %struct.basic_block_def** %arrayidx.i.i, align 8, !tbaa !1
  %call.i.i = call %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def* %8) #4
  %tobool20.i.i = icmp eq %struct.rtx_def* %call.i.i, null
  br i1 %tobool20.i.i, label %for.cond.backedge.i, label %land.lhs.true.lr.ph.i.i

for.cond.backedge.i:                              ; preds = %for.inc95.i.i, %land.rhs.i.i, %land.lhs.true2.i.i, %land.lhs.true.i.i, %for.body.i
  %9 = trunc i64 %indvars.iv.next79.i to i32
  %cmp.i = icmp sgt i32 %9, 0
  br i1 %cmp.i, label %for.body.i, label %for.end.i

land.lhs.true.lr.ph.i.i:                          ; preds = %for.body.i
  %pred.i.i = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 4
  br label %land.lhs.true.i.i

land.lhs.true.i.i:                                ; preds = %for.inc95.i.i, %land.lhs.true.lr.ph.i.i
  %phi.021.i.i = phi %struct.rtx_def* [ %call.i.i, %land.lhs.true.lr.ph.i.i ], [ %call96.i.i, %for.inc95.i.i ]
  %10 = getelementptr inbounds %struct.rtx_def* %phi.021.i.i, i64 0, i32 0
  %bf.load.i.i = load i32* %10, align 8
  %bf.clear.i.i = and i32 %bf.load.i.i, 65535
  %cmp.i.i = icmp eq i32 %bf.clear.i.i, 32
  br i1 %cmp.i.i, label %land.lhs.true2.i.i, label %for.cond.backedge.i

land.lhs.true2.i.i:                               ; preds = %land.lhs.true.i.i
  %arrayidx3.i.i = getelementptr inbounds %struct.rtx_def* %phi.021.i.i, i64 0, i32 1, i64 3
  %rtx.i.i = bitcast %union.rtunion_def* %arrayidx3.i.i to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx.i.i, align 8, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load4.i.i = load i32* %12, align 8
  %bf.clear5.i.i = and i32 %bf.load4.i.i, 65535
  %cmp6.i.i = icmp eq i32 %bf.clear5.i.i, 47
  br i1 %cmp6.i.i, label %land.rhs.i.i, label %for.cond.backedge.i

land.rhs.i.i:                                     ; preds = %land.lhs.true2.i.i
  %arrayidx11.i.i = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 1
  %rtx12.i.i = bitcast %union.rtunion_def* %arrayidx11.i.i to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx12.i.i, align 8, !tbaa !1
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 0
  %bf.load13.i.i = load i32* %14, align 8
  %bf.clear14.i.i = and i32 %bf.load13.i.i, 65535
  %cmp15.i.i = icmp eq i32 %bf.clear14.i.i, 152
  br i1 %cmp15.i.i, label %for.body.i.i, label %for.cond.backedge.i

for.body.i.i:                                     ; preds = %land.rhs.i.i
  %arrayidx20.i.i = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 0
  %rtx21.i.i = bitcast %union.rtunion_def* %arrayidx20.i.i to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx21.i.i, align 8, !tbaa !1
  %16 = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 0
  %bf.load22.i.i = load i32* %16, align 8
  %bf.clear23.i.i = and i32 %bf.load22.i.i, 65535
  %cmp24.i.i = icmp eq i32 %bf.clear23.i.i, 61
  br i1 %cmp24.i.i, label %lor.lhs.false.i.i, label %if.then.i.i

lor.lhs.false.i.i:                                ; preds = %for.body.i.i
  %arrayidx26.i.i = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 1, i64 0
  %rtuint.i.i = bitcast %union.rtunion_def* %arrayidx26.i.i to i32*
  %17 = load i32* %rtuint.i.i, align 4, !tbaa !9
  %cmp27.i.i = icmp ugt i32 %17, 52
  %18 = and i32 %17, -2
  %switch.i.i = icmp eq i32 %18, 16
  %or.cond.i.i = or i1 %cmp27.i.i, %switch.i.i
  br i1 %or.cond.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %lor.lhs.false.i.i, %for.body.i.i
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1496, i8* getelementptr inbounds ([36 x i8]* @__FUNCTION__.make_regs_equivalent_over_bad_edges, i64 0, i64 0)) #6
  unreachable

if.end.i.i:                                       ; preds = %lor.lhs.false.i.i
  %e.016.i.i = load %struct.edge_def** %pred.i.i, align 8
  %tobool4217.i.i = icmp eq %struct.edge_def* %e.016.i.i, null
  br i1 %tobool4217.i.i, label %for.inc95.i.i, label %for.body43.lr.ph.i.i

for.body43.lr.ph.i.i:                             ; preds = %if.end.i.i
  %idxprom79.i.i = sext i32 %17 to i64
  %class_element.i.i = getelementptr inbounds %struct.partition_def* %call.i, i64 0, i32 1, i64 %idxprom79.i.i, i32 0
  br label %for.body43.i.i

for.body43.i.i:                                   ; preds = %for.inc.i.i, %for.body43.lr.ph.i.i
  %e.019.i.i = phi %struct.edge_def* [ %e.016.i.i, %for.body43.lr.ph.i.i ], [ %e.0.i.i, %for.inc.i.i ]
  %flags.i.i = getelementptr inbounds %struct.edge_def* %e.019.i.i, i64 0, i32 6
  %19 = load i32* %flags.i.i, align 4, !tbaa !32
  %and.i.i = and i32 %19, 2
  %tobool44.i.i = icmp eq i32 %and.i.i, 0
  br i1 %tobool44.i.i, label %for.inc.i.i, label %land.lhs.true45.i.i

land.lhs.true45.i.i:                              ; preds = %for.body43.i.i
  %src.i.i = getelementptr inbounds %struct.edge_def* %e.019.i.i, i64 0, i32 2
  %20 = load %struct.basic_block_def** %src.i.i, align 8, !tbaa !23
  %succ.i.i = getelementptr inbounds %struct.basic_block_def* %20, i64 0, i32 5
  %21 = load %struct.edge_def** %succ.i.i, align 8, !tbaa !33
  %succ_next.i.i = getelementptr inbounds %struct.edge_def* %21, i64 0, i32 1
  %22 = load %struct.edge_def** %succ_next.i.i, align 8, !tbaa !34
  %tobool46.i.i = icmp eq %struct.edge_def* %22, null
  br i1 %tobool46.i.i, label %for.inc.i.i, label %land.lhs.true47.i.i

land.lhs.true47.i.i:                              ; preds = %land.lhs.true45.i.i
  %dest.i.i = getelementptr inbounds %struct.edge_def* %e.019.i.i, i64 0, i32 3
  %23 = load %struct.basic_block_def** %dest.i.i, align 8, !tbaa !16
  %pred48.i.i = getelementptr inbounds %struct.basic_block_def* %23, i64 0, i32 4
  %24 = load %struct.edge_def** %pred48.i.i, align 8, !tbaa !35
  %pred_next.i.i = getelementptr inbounds %struct.edge_def* %24, i64 0, i32 0
  %25 = load %struct.edge_def** %pred_next.i.i, align 8, !tbaa !36
  %tobool49.i.i = icmp eq %struct.edge_def* %25, null
  br i1 %tobool49.i.i, label %for.inc.i.i, label %if.then50.i.i

if.then50.i.i:                                    ; preds = %land.lhs.true47.i.i
  %index.i.i = getelementptr inbounds %struct.basic_block_def* %20, i64 0, i32 11
  %26 = load i32* %index.i.i, align 4, !tbaa !12
  %27 = load %struct.rtx_def** %rtx12.i.i, align 8, !tbaa !1
  %arrayidx2.i.i.i = getelementptr inbounds %struct.rtx_def* %27, i64 0, i32 1, i64 0
  %rtvec.i.i.i = bitcast %union.rtunion_def* %arrayidx2.i.i.i to %struct.rtvec_def**
  %28 = load %struct.rtvec_def** %rtvec.i.i.i, align 8, !tbaa !1
  %num_elem.i.i.i = getelementptr inbounds %struct.rtvec_def* %28, i64 0, i32 0
  %29 = load i32* %num_elem.i.i.i, align 4, !tbaa !10
  %conv.i.i.i = sext i32 %26 to i64
  %30 = sext i32 %29 to i64
  br label %for.cond.i.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i, %if.then50.i.i
  %indvars.iv.i.i.i = phi i64 [ %indvars.iv.next.i.i.i, %for.body.i.i.i ], [ %30, %if.then50.i.i ]
  %indvars.iv.next.i.i.i = add nsw i64 %indvars.iv.i.i.i, -2
  %31 = trunc i64 %indvars.iv.next.i.i.i to i32
  %cmp.i.i.i = icmp sgt i32 %31, -1
  br i1 %cmp.i.i.i, label %for.body.i.i.i, label %for.inc.i.i

for.body.i.i.i:                                   ; preds = %for.cond.i.i.i
  %32 = add nsw i64 %indvars.iv.i.i.i, -1
  %arrayidx3.i.i.i = getelementptr inbounds %struct.rtvec_def* %28, i64 0, i32 1, i64 %32
  %33 = load %struct.rtx_def** %arrayidx3.i.i.i, align 8, !tbaa !1
  %rtwint.i.i.i = getelementptr inbounds %struct.rtx_def* %33, i64 0, i32 1, i64 0, i32 0
  %34 = load i64* %rtwint.i.i.i, align 8, !tbaa !15
  %cmp6.i.i.i = icmp eq i64 %34, %conv.i.i.i
  br i1 %cmp6.i.i.i, label %if.end55.i.i, label %for.cond.i.i.i

if.end55.i.i:                                     ; preds = %for.body.i.i.i
  %sext.i.i.i = shl i64 %indvars.iv.next.i.i.i, 32
  %idxprom8.i.i.i = ashr exact i64 %sext.i.i.i, 32
  %arrayidx10.i.i.i = getelementptr inbounds %struct.rtvec_def* %28, i64 0, i32 1, i64 %idxprom8.i.i.i
  %35 = load %struct.rtx_def** %arrayidx10.i.i.i, align 8, !tbaa !1
  %36 = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 0
  %bf.load56.i.i = load i32* %36, align 8
  %bf.clear57.i.i = and i32 %bf.load56.i.i, 65535
  %cmp58.i.i = icmp eq i32 %bf.clear57.i.i, 61
  br i1 %cmp58.i.i, label %lor.lhs.false59.i.i, label %if.then74.i.i

lor.lhs.false59.i.i:                              ; preds = %if.end55.i.i
  %arrayidx61.i.i = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 1, i64 0
  %rtuint62.i.i = bitcast %union.rtunion_def* %arrayidx61.i.i to i32*
  %37 = load i32* %rtuint62.i.i, align 4, !tbaa !9
  %cmp63.i.i = icmp ugt i32 %37, 52
  %38 = and i32 %37, -2
  %switch6.i.i = icmp eq i32 %38, 16
  %or.cond7.i.i = or i1 %cmp63.i.i, %switch6.i.i
  br i1 %or.cond7.i.i, label %if.end75.i.i, label %if.then74.i.i

if.then74.i.i:                                    ; preds = %lor.lhs.false59.i.i, %if.end55.i.i
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1514, i8* getelementptr inbounds ([36 x i8]* @__FUNCTION__.make_regs_equivalent_over_bad_edges, i64 0, i64 0)) #6
  unreachable

if.end75.i.i:                                     ; preds = %lor.lhs.false59.i.i
  %39 = load i32* %class_element.i.i, align 4, !tbaa !37
  %idxprom81.i.i = sext i32 %37 to i64
  %class_element84.i.i = getelementptr inbounds %struct.partition_def* %call.i, i64 0, i32 1, i64 %idxprom81.i.i, i32 0
  %40 = load i32* %class_element84.i.i, align 4, !tbaa !37
  %cmp85.i.i = icmp eq i32 %39, %40
  br i1 %cmp85.i.i, label %for.inc.i.i, label %if.then86.i.i

if.then86.i.i:                                    ; preds = %if.end75.i.i
  call void @llvm.lifetime.start(i64 16, i8* %4) #4
  store i32 %17, i32* %reg1.i.i.i.i.i, align 8, !tbaa !5
  store %struct.rtx_def* null, %struct.rtx_def** %original.i.i.i.i.i, align 8, !tbaa !8
  %41 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %call.i.i.i.i.i = call i8* @htab_find_with_hash(%struct.htab* %41, i8* %4, i32 %17) #4
  %cmp.i.i.i.i.i = icmp eq i8* %call.i.i.i.i.i, null
  br i1 %cmp.i.i.i.i.i, label %original_register.exit.i.i.i, label %ssa_rename_from_lookup.exit.i.i.i.i

ssa_rename_from_lookup.exit.i.i.i.i:              ; preds = %if.then86.i.i
  %original2.i.i.i.i.i = getelementptr inbounds i8* %call.i.i.i.i.i, i64 8
  %42 = bitcast i8* %original2.i.i.i.i.i to %struct.rtx_def**
  %43 = load %struct.rtx_def** %42, align 8, !tbaa !8
  call void @llvm.lifetime.end(i64 16, i8* %4) #4
  %cmp.i.i.i.i = icmp eq %struct.rtx_def* %43, null
  br i1 %cmp.i.i.i.i, label %original_register.exit.i.i.i, label %cond.true.i.i.i.i

cond.true.i.i.i.i:                                ; preds = %ssa_rename_from_lookup.exit.i.i.i.i
  %arrayidx.i.i.i.i = getelementptr inbounds %struct.rtx_def* %43, i64 0, i32 1, i64 0
  %rtuint.i.i.i.i = bitcast %union.rtunion_def* %arrayidx.i.i.i.i to i32*
  %44 = load i32* %rtuint.i.i.i.i, align 4, !tbaa !9
  br label %original_register.exit.i.i.i

original_register.exit.i.i.i:                     ; preds = %cond.true.i.i.i.i, %ssa_rename_from_lookup.exit.i.i.i.i, %if.then86.i.i
  %cond.i.i.i.i = phi i32 [ %44, %cond.true.i.i.i.i ], [ %17, %ssa_rename_from_lookup.exit.i.i.i.i ], [ %17, %if.then86.i.i ]
  call void @llvm.lifetime.start(i64 16, i8* %5) #4
  store i32 %37, i32* %reg1.i.i25.i.i.i, align 8, !tbaa !5
  store %struct.rtx_def* null, %struct.rtx_def** %original.i.i26.i.i.i, align 8, !tbaa !8
  %45 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %call.i.i27.i.i.i = call i8* @htab_find_with_hash(%struct.htab* %45, i8* %5, i32 %37) #4
  %cmp.i.i28.i.i.i = icmp eq i8* %call.i.i27.i.i.i, null
  br i1 %cmp.i.i28.i.i.i, label %original_register.exit36.i.i.i, label %ssa_rename_from_lookup.exit.i31.i.i.i

ssa_rename_from_lookup.exit.i31.i.i.i:            ; preds = %original_register.exit.i.i.i
  %original2.i.i29.i.i.i = getelementptr inbounds i8* %call.i.i27.i.i.i, i64 8
  %46 = bitcast i8* %original2.i.i29.i.i.i to %struct.rtx_def**
  %47 = load %struct.rtx_def** %46, align 8, !tbaa !8
  call void @llvm.lifetime.end(i64 16, i8* %5) #4
  %cmp.i30.i.i.i = icmp eq %struct.rtx_def* %47, null
  br i1 %cmp.i30.i.i.i, label %original_register.exit36.i.i.i, label %cond.true.i34.i.i.i

cond.true.i34.i.i.i:                              ; preds = %ssa_rename_from_lookup.exit.i31.i.i.i
  %arrayidx.i32.i.i.i = getelementptr inbounds %struct.rtx_def* %47, i64 0, i32 1, i64 0
  %rtuint.i33.i.i.i = bitcast %union.rtunion_def* %arrayidx.i32.i.i.i to i32*
  %48 = load i32* %rtuint.i33.i.i.i, align 4, !tbaa !9
  br label %original_register.exit36.i.i.i

original_register.exit36.i.i.i:                   ; preds = %cond.true.i34.i.i.i, %ssa_rename_from_lookup.exit.i31.i.i.i, %original_register.exit.i.i.i
  %cond.i35.i.i.i = phi i32 [ %48, %cond.true.i34.i.i.i ], [ %37, %ssa_rename_from_lookup.exit.i31.i.i.i ], [ %37, %original_register.exit.i.i.i ]
  %cmp.i8.i.i = icmp slt i32 %cond.i.i.i.i, 53
  %cmp2.i.i.i = icmp slt i32 %cond.i35.i.i.i, 53
  %or.cond.i.i.i = and i1 %cmp.i8.i.i, %cmp2.i.i.i
  %or.cond.not.i.i.i = xor i1 %or.cond.i.i.i, true
  %cmp4.i.i.i = icmp eq i32 %cond.i.i.i.i, %cond.i35.i.i.i
  %or.cond23.i.i.i = or i1 %cmp4.i.i.i, %or.cond.not.i.i.i
  br i1 %or.cond23.i.i.i, label %if.end.i.i.i, label %if.then89.i.i

if.end.i.i.i:                                     ; preds = %original_register.exit36.i.i.i
  %cmp5.i.i.i = icmp sgt i32 %cond.i.i.i.i, 52
  %or.cond15.i.i.i = or i1 %cmp5.i.i.i, %cmp2.i.i.i
  %or.cond15.i.not.i.i = xor i1 %or.cond15.i.i.i, true
  %or.cond16.i.i.i = and i1 %cmp5.i.i.i, %cmp2.i.i.i
  %or.cond12.i.i = or i1 %or.cond16.i.i.i, %or.cond15.i.not.i.i
  br i1 %or.cond12.i.i, label %if.then89.i.i, label %if.end90.i.i

if.then89.i.i:                                    ; preds = %if.end.i.i.i, %original_register.exit36.i.i.i
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1526, i8* getelementptr inbounds ([36 x i8]* @__FUNCTION__.make_regs_equivalent_over_bad_edges, i64 0, i64 0)) #6
  unreachable

if.end90.i.i:                                     ; preds = %if.end.i.i.i
  %call91.i.i = call i32 @partition_union(%struct.partition_def* %call.i, i32 %17, i32 %37) #4
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %for.cond.i.i.i, %if.end90.i.i, %if.end75.i.i, %land.lhs.true47.i.i, %land.lhs.true45.i.i, %for.body43.i.i
  %pred_next94.i.i = getelementptr inbounds %struct.edge_def* %e.019.i.i, i64 0, i32 0
  %e.0.i.i = load %struct.edge_def** %pred_next94.i.i, align 8
  %tobool42.i.i = icmp eq %struct.edge_def* %e.0.i.i, null
  br i1 %tobool42.i.i, label %for.inc95.i.i, label %for.body43.i.i

for.inc95.i.i:                                    ; preds = %for.inc.i.i, %if.end.i.i
  %call96.i.i = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %phi.021.i.i) #4
  %tobool.i.i = icmp eq %struct.rtx_def* %call96.i.i, null
  br i1 %tobool.i.i, label %for.cond.backedge.i, label %land.lhs.true.i.i

for.end.i:                                        ; preds = %for.cond.backedge.i, %entry
  %call3.i = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %phi_set_head.i) #4
  %49 = bitcast %struct.rtx_def** %src.i37.i to i8*
  %50 = bitcast %struct.phi_coalesce_context* %context.i.i to i8*
  %p1.i.i = getelementptr inbounds %struct.phi_coalesce_context* %context.i.i, i64 0, i32 0
  %conflicts2.i.i = getelementptr inbounds %struct.phi_coalesce_context* %context.i.i, i64 0, i32 1
  %changed.i.i = getelementptr inbounds %struct.phi_coalesce_context* %context.i.i, i64 0, i32 2
  br label %do.body.i

do.body.i:                                        ; preds = %for.end14.i, %for.end.i
  call void @bitmap_clear(%struct.bitmap_head_def* %phi_set_head.i) #4
  call void @llvm.lifetime.start(i64 8, i8* %49) #4
  %51 = load %struct.varray_head_tag** @ssa_definition, align 8, !tbaa !1
  %num_elements60.i.i = getelementptr inbounds %struct.varray_head_tag* %51, i64 0, i32 0
  %52 = load i64* %num_elements60.i.i, align 8, !tbaa !29
  %cmp61.i.i = icmp eq i64 %52, 0
  br i1 %cmp61.i.i, label %mark_phi_and_copy_regs.exit.i, label %for.body.i40.i

for.body.i40.i:                                   ; preds = %do.body.i, %for.inc.i53.i
  %53 = phi %struct.varray_head_tag* [ %64, %for.inc.i53.i ], [ %51, %do.body.i ]
  %conv64.i.i = phi i64 [ %conv.i.i, %for.inc.i53.i ], [ 0, %do.body.i ]
  %reg.062.i.i = phi i32 [ %inc.i.i, %for.inc.i53.i ], [ 0, %do.body.i ]
  %cmp2.i.i = icmp ugt i32 %reg.062.i.i, 52
  %54 = and i32 %reg.062.i.i, -2
  %switch.i38.i = icmp eq i32 %54, 16
  %or.cond.i39.i = or i1 %cmp2.i.i, %switch.i38.i
  br i1 %or.cond.i39.i, label %if.then.i44.i, label %for.inc.i53.i

if.then.i44.i:                                    ; preds = %for.body.i40.i
  %data.i41.i = getelementptr inbounds %struct.varray_head_tag* %53, i64 0, i32 4
  %rtx.i42.i = bitcast %union.varray_data_tag* %data.i41.i to [1 x %struct.rtx_def*]*
  %arrayidx.i43.i = getelementptr inbounds [1 x %struct.rtx_def*]* %rtx.i42.i, i64 0, i64 %conv64.i.i
  %55 = load %struct.rtx_def** %arrayidx.i43.i, align 8, !tbaa !1
  %cmp9.i.i = icmp eq %struct.rtx_def* %55, null
  br i1 %cmp9.i.i, label %for.inc.i53.i, label %lor.lhs.false11.i.i

lor.lhs.false11.i.i:                              ; preds = %if.then.i44.i
  %56 = getelementptr inbounds %struct.rtx_def* %55, i64 0, i32 0
  %bf.load.i45.i = load i32* %56, align 8
  %bf.clear.i46.i = and i32 %bf.load.i45.i, 65535
  %cmp12.i.i = icmp eq i32 %bf.clear.i46.i, 37
  br i1 %cmp12.i.i, label %land.lhs.true.i48.i, label %if.end.i49.i

land.lhs.true.i48.i:                              ; preds = %lor.lhs.false11.i.i
  %arrayidx14.i.i = getelementptr inbounds %struct.rtx_def* %55, i64 0, i32 1, i64 4
  %rtint.i.i = bitcast %union.rtunion_def* %arrayidx14.i.i to i32*
  %57 = load i32* %rtint.i.i, align 4, !tbaa !9
  %cmp15.i47.i = icmp eq i32 %57, -99
  br i1 %cmp15.i47.i, label %for.inc.i53.i, label %if.end.i49.i

if.end.i49.i:                                     ; preds = %land.lhs.true.i48.i, %lor.lhs.false11.i.i
  %arrayidx19.i.i = getelementptr inbounds %struct.rtx_def* %55, i64 0, i32 1, i64 3
  %rtx20.i.i = bitcast %union.rtunion_def* %arrayidx19.i.i to %struct.rtx_def**
  %58 = load %struct.rtx_def** %rtx20.i.i, align 8, !tbaa !1
  %59 = getelementptr inbounds %struct.rtx_def* %58, i64 0, i32 0
  %bf.load21.i.i = load i32* %59, align 8
  %bf.clear22.i.i = and i32 %bf.load21.i.i, 65535
  %cmp23.i.i = icmp eq i32 %bf.clear22.i.i, 47
  br i1 %cmp23.i.i, label %if.end26.i.i, label %for.inc.i53.i

if.end26.i.i:                                     ; preds = %if.end.i49.i
  %arrayidx28.i.i = getelementptr inbounds %struct.rtx_def* %58, i64 0, i32 1, i64 1
  %rtx29.i.i = bitcast %union.rtunion_def* %arrayidx28.i.i to %struct.rtx_def**
  %60 = load %struct.rtx_def** %rtx29.i.i, align 8, !tbaa !1
  store %struct.rtx_def* %60, %struct.rtx_def** %src.i37.i, align 8, !tbaa !1
  %61 = getelementptr inbounds %struct.rtx_def* %60, i64 0, i32 0
  %bf.load30.i.i = load i32* %61, align 8
  %bf.clear31.i.i = and i32 %bf.load30.i.i, 65535
  switch i32 %bf.clear31.i.i, label %for.inc.i53.i [
    i32 61, label %if.then34.i.i
    i32 152, label %if.then41.i.i
  ]

if.then34.i.i:                                    ; preds = %if.end26.i.i
  call void @bitmap_set_bit(%struct.bitmap_head_def* %phi_set_head.i, i32 %reg.062.i.i) #4
  %62 = load %struct.rtx_def** %src.i37.i, align 8, !tbaa !1
  %arrayidx36.i.i = getelementptr inbounds %struct.rtx_def* %62, i64 0, i32 1, i64 0
  %rtuint.i50.i = bitcast %union.rtunion_def* %arrayidx36.i.i to i32*
  %63 = load i32* %rtuint.i50.i, align 4, !tbaa !9
  call void @bitmap_set_bit(%struct.bitmap_head_def* %phi_set_head.i, i32 %63) #4
  br label %for.inc.i53.i

if.then41.i.i:                                    ; preds = %if.end26.i.i
  call void @bitmap_set_bit(%struct.bitmap_head_def* %phi_set_head.i, i32 %reg.062.i.i) #4
  %call.i51.i = call i32 @for_each_rtx(%struct.rtx_def** %src.i37.i, i32 (%struct.rtx_def**, i8*)* @mark_reg_in_phi, i8* %0) #4
  br label %for.inc.i53.i

for.inc.i53.i:                                    ; preds = %if.then41.i.i, %if.then34.i.i, %if.end26.i.i, %if.end.i49.i, %land.lhs.true.i48.i, %if.then.i44.i, %for.body.i40.i
  %inc.i.i = add i32 %reg.062.i.i, 1
  %conv.i.i = zext i32 %inc.i.i to i64
  %64 = load %struct.varray_head_tag** @ssa_definition, align 8, !tbaa !1
  %num_elements.i.i = getelementptr inbounds %struct.varray_head_tag* %64, i64 0, i32 0
  %65 = load i64* %num_elements.i.i, align 8, !tbaa !29
  %cmp.i52.i = icmp ult i64 %conv.i.i, %65
  br i1 %cmp.i52.i, label %for.body.i40.i, label %mark_phi_and_copy_regs.exit.i

mark_phi_and_copy_regs.exit.i:                    ; preds = %for.inc.i53.i, %do.body.i
  call void @llvm.lifetime.end(i64 8, i8* %49) #4
  %call4.i = call %struct.conflict_graph_def* @conflict_graph_compute(%struct.bitmap_head_def* %phi_set_head.i, %struct.partition_def* %call.i) #4
  %66 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp771.i = icmp sgt i32 %66, 0
  br i1 %cmp771.i, label %for.body9.lr.ph.i, label %for.end14.thread.i

for.end14.thread.i:                               ; preds = %mark_phi_and_copy_regs.exit.i
  call void @conflict_graph_delete(%struct.conflict_graph_def* %call4.i) #4
  br label %compute_coalesced_reg_partition.exit

for.body9.lr.ph.i:                                ; preds = %mark_phi_and_copy_regs.exit.i
  %67 = sext i32 %66 to i64
  br label %for.body9.i

for.body9.i:                                      ; preds = %coalesce_regs_in_copies.exit.i, %for.body9.lr.ph.i
  %indvars.iv.i = phi i64 [ %67, %for.body9.lr.ph.i ], [ %indvars.iv.next.i, %coalesce_regs_in_copies.exit.i ]
  %changed.072.i = phi i32 [ 0, %for.body9.lr.ph.i ], [ %add13.i, %coalesce_regs_in_copies.exit.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -1
  %68 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data.i = getelementptr inbounds %struct.varray_head_tag* %68, i64 0, i32 4
  %bb10.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb10.i, i64 0, i64 %indvars.iv.next.i
  %69 = load %struct.basic_block_def** %arrayidx.i, align 8, !tbaa !1
  %end1.i.i = getelementptr inbounds %struct.basic_block_def* %69, i64 0, i32 1
  %70 = load %struct.rtx_def** %end1.i.i, align 8, !tbaa !20
  %head.i.i = getelementptr inbounds %struct.basic_block_def* %69, i64 0, i32 0
  %insn.050.i.i = load %struct.rtx_def** %head.i.i, align 8
  %cmp51.i.i = icmp eq %struct.rtx_def* %insn.050.i.i, %70
  br i1 %cmp51.i.i, label %coalesce_regs_in_copies.exit.i, label %for.body.i57.i

for.body.i57.i:                                   ; preds = %for.body9.i, %for.inc.i67.i
  %insn.053.i.i = phi %struct.rtx_def* [ %insn.0.i.i, %for.inc.i67.i ], [ %insn.050.i.i, %for.body9.i ]
  %changed.052.i.i = phi i32 [ %changed.1.i.i, %for.inc.i67.i ], [ 0, %for.body9.i ]
  %71 = getelementptr inbounds %struct.rtx_def* %insn.053.i.i, i64 0, i32 0
  %bf.load.i54.i = load i32* %71, align 8
  %bf.clear.i55.i = and i32 %bf.load.i54.i, 65535
  %cmp2.i56.i = icmp eq i32 %bf.clear.i55.i, 32
  br i1 %cmp2.i56.i, label %if.end.i60.i, label %for.inc.i67.i

if.end.i60.i:                                     ; preds = %for.body.i57.i
  %arrayidx.i58.i = getelementptr inbounds %struct.rtx_def* %insn.053.i.i, i64 0, i32 1, i64 3
  %rtx.i59.i = bitcast %union.rtunion_def* %arrayidx.i58.i to %struct.rtx_def**
  %72 = load %struct.rtx_def** %rtx.i59.i, align 8, !tbaa !1
  %73 = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 0
  %bf.load3.i.i = load i32* %73, align 8
  %bf.clear4.i.i = and i32 %bf.load3.i.i, 65535
  %cmp5.i.i = icmp eq i32 %bf.clear4.i.i, 47
  br i1 %cmp5.i.i, label %if.end7.i.i, label %for.inc.i67.i

if.end7.i.i:                                      ; preds = %if.end.i60.i
  %arrayidx9.i.i = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 1, i64 1
  %rtx10.i.i = bitcast %union.rtunion_def* %arrayidx9.i.i to %struct.rtx_def**
  %74 = load %struct.rtx_def** %rtx10.i.i, align 8, !tbaa !1
  %arrayidx12.i.i = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 1, i64 0
  %rtx13.i.i = bitcast %union.rtunion_def* %arrayidx12.i.i to %struct.rtx_def**
  %75 = load %struct.rtx_def** %rtx13.i.i, align 8, !tbaa !1
  %76 = getelementptr inbounds %struct.rtx_def* %74, i64 0, i32 0
  %bf.load14.i.i = load i32* %76, align 8
  %bf.clear15.i.i = and i32 %bf.load14.i.i, 65535
  %cmp16.i.i = icmp eq i32 %bf.clear15.i.i, 61
  br i1 %cmp16.i.i, label %lor.lhs.false.i61.i, label %for.inc.i67.i

lor.lhs.false.i61.i:                              ; preds = %if.end7.i.i
  %77 = getelementptr inbounds %struct.rtx_def* %75, i64 0, i32 0
  %bf.load17.i.i = load i32* %77, align 8
  %bf.clear18.i.i = and i32 %bf.load17.i.i, 65535
  %cmp19.i.i = icmp eq i32 %bf.clear18.i.i, 61
  br i1 %cmp19.i.i, label %if.end21.i.i, label %for.inc.i67.i

if.end21.i.i:                                     ; preds = %lor.lhs.false.i61.i
  %bf.lshr49.i.i = xor i32 %bf.load17.i.i, %bf.load14.i.i
  %78 = and i32 %bf.lshr49.i.i, 16711680
  %cmp27.i62.i = icmp eq i32 %78, 0
  br i1 %cmp27.i62.i, label %if.end29.i.i, label %for.inc.i67.i

if.end29.i.i:                                     ; preds = %if.end21.i.i
  %arrayidx31.i.i = getelementptr inbounds %struct.rtx_def* %74, i64 0, i32 1, i64 0
  %rtuint.i63.i = bitcast %union.rtunion_def* %arrayidx31.i.i to i32*
  %79 = load i32* %rtuint.i63.i, align 4, !tbaa !9
  %arrayidx33.i.i = getelementptr inbounds %struct.rtx_def* %75, i64 0, i32 1, i64 0
  %rtuint34.i.i = bitcast %union.rtunion_def* %arrayidx33.i.i to i32*
  %80 = load i32* %rtuint34.i.i, align 4, !tbaa !9
  %call.i64.i = call fastcc i32 @coalesce_if_unconflicting(%struct.partition_def* %call.i, %struct.conflict_graph_def* %call4.i, i32 %79, i32 %80) #4
  %add.i.i = add nsw i32 %call.i64.i, %changed.052.i.i
  br label %for.inc.i67.i

for.inc.i67.i:                                    ; preds = %if.end29.i.i, %if.end21.i.i, %lor.lhs.false.i61.i, %if.end7.i.i, %if.end.i60.i, %for.body.i57.i
  %changed.1.i.i = phi i32 [ %changed.052.i.i, %for.body.i57.i ], [ %changed.052.i.i, %if.end.i60.i ], [ %changed.052.i.i, %if.end7.i.i ], [ %changed.052.i.i, %lor.lhs.false.i61.i ], [ %changed.052.i.i, %if.end21.i.i ], [ %add.i.i, %if.end29.i.i ]
  %arrayidx36.i65.i = getelementptr inbounds %struct.rtx_def* %insn.053.i.i, i64 0, i32 1, i64 2
  %rtx37.i.i = bitcast %union.rtunion_def* %arrayidx36.i65.i to %struct.rtx_def**
  %insn.0.i.i = load %struct.rtx_def** %rtx37.i.i, align 8
  %cmp.i66.i = icmp eq %struct.rtx_def* %insn.0.i.i, %70
  br i1 %cmp.i66.i, label %coalesce_regs_in_copies.exit.i, label %for.body.i57.i

coalesce_regs_in_copies.exit.i:                   ; preds = %for.inc.i67.i, %for.body9.i
  %changed.0.lcssa.i.i = phi i32 [ 0, %for.body9.i ], [ %changed.1.i.i, %for.inc.i67.i ]
  %add.i = add nsw i32 %changed.0.lcssa.i.i, %changed.072.i
  call void @llvm.lifetime.start(i64 24, i8* %50) #4
  store %struct.partition_def* %call.i, %struct.partition_def** %p1.i.i, align 8, !tbaa !39
  store %struct.conflict_graph_def* %call4.i, %struct.conflict_graph_def** %conflicts2.i.i, align 8, !tbaa !41
  store i32 0, i32* %changed.i.i, align 8, !tbaa !42
  %call.i68.i = call i32 @for_each_successor_phi(%struct.basic_block_def* %69, i32 (%struct.rtx_def*, i32, i32, i8*)* @coalesce_reg_in_phi, i8* %50) #4
  %81 = load i32* %changed.i.i, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 24, i8* %50) #4
  %add13.i = add nsw i32 %add.i, %81
  %82 = trunc i64 %indvars.iv.next.i to i32
  %cmp7.i = icmp sgt i32 %82, 0
  br i1 %cmp7.i, label %for.body9.i, label %for.end14.i

for.end14.i:                                      ; preds = %coalesce_regs_in_copies.exit.i
  %phitmp.i = icmp sgt i32 %add13.i, 0
  call void @conflict_graph_delete(%struct.conflict_graph_def* %call4.i) #4
  br i1 %phitmp.i, label %do.body.i, label %compute_coalesced_reg_partition.exit

compute_coalesced_reg_partition.exit:             ; preds = %for.end14.i, %for.end14.thread.i
  call void @bitmap_clear(%struct.bitmap_head_def* %phi_set_head.i) #4
  call void @llvm.lifetime.end(i64 24, i8* %0) #4
  %83 = bitcast [53 x [59 x i32]]* %already_seen.i to i8*
  call void @llvm.lifetime.start(i64 12508, i8* %83) #4
  %call.i108 = call i32 @max_reg_num() #4
  %call1.i = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call.i108) #4
  call void @sbitmap_zero(%struct.simple_bitmap_def* %call1.i) #4
  %84 = bitcast %struct.ssa_rename_from_hash_table_data* %srfhd.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %84) #4
  %canonical_elements1.i.i = getelementptr inbounds %struct.ssa_rename_from_hash_table_data* %srfhd.i.i, i64 0, i32 0
  store %struct.simple_bitmap_def* %call1.i, %struct.simple_bitmap_def** %canonical_elements1.i.i, align 8, !tbaa !43
  %reg_partition2.i.i = getelementptr inbounds %struct.ssa_rename_from_hash_table_data* %srfhd.i.i, i64 0, i32 1
  store %struct.partition_def* %call.i, %struct.partition_def** %reg_partition2.i.i, align 8, !tbaa !45
  %85 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  call void @htab_traverse(%struct.htab* %85, i32 (i8**, i8*)* @record_canonical_element_1, i8* %84) #4
  call void @llvm.lifetime.end(i64 16, i8* %84) #4
  call void @llvm.memset.p0i8.i64(i8* %83, i8 0, i64 12508, i32 16, i1 false) #4
  %size.i = getelementptr inbounds %struct.simple_bitmap_def* %call1.i, i64 0, i32 1
  %86 = load i32* %size.i, align 4, !tbaa !18
  %cmp1170.i = icmp eq i32 %86, 0
  br i1 %cmp1170.i, label %if.end6, label %for.body12.lr.ph.i

for.body12.lr.ph.i:                               ; preds = %compute_coalesced_reg_partition.exit
  %87 = bitcast %struct.ssa_rename_from_pair* %srfp.i.i to i8*
  %reg1.i.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i, i64 0, i32 0
  %original.i.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i, i64 0, i32 1
  br label %for.body12.i

for.body12.i:                                     ; preds = %for.inc44.i, %for.body12.lr.ph.i
  %indvars.iv74.i = phi i64 [ 0, %for.body12.lr.ph.i ], [ %indvars.iv.next75.i, %for.inc44.i ]
  %arrayidx14.i = getelementptr inbounds %struct.simple_bitmap_def* %call1.i, i64 0, i32 3, i64 %indvars.iv74.i
  %88 = load i64* %arrayidx14.i, align 8, !tbaa !15
  %cmp15.i = icmp eq i64 %88, 0
  br i1 %cmp15.i, label %for.inc44.i, label %for.body18.preheader.i

for.body18.preheader.i:                           ; preds = %for.body12.i
  %89 = trunc i64 %indvars.iv74.i to i32
  %mul.i = shl i32 %89, 6
  br label %for.body18.i

for.body18.i:                                     ; preds = %for.inc40.i, %for.body18.preheader.i
  %indvars.iv.i109 = phi i64 [ 0, %for.body18.preheader.i ], [ %indvars.iv.next.i113, %for.inc40.i ]
  %word_.0.i = phi i64 [ %88, %for.body18.preheader.i ], [ %word_.1.i, %for.inc40.i ]
  %shl.i = shl i64 1, %indvars.iv.i109
  %and.i = and i64 %shl.i, %word_.0.i
  %cmp19.i = icmp eq i64 %and.i, 0
  br i1 %cmp19.i, label %for.inc40.i, label %if.then20.i

if.then20.i:                                      ; preds = %for.body18.i
  %neg.i = xor i64 %shl.i, -1
  %and21.i = and i64 %word_.0.i, %neg.i
  %90 = trunc i64 %indvars.iv.i109 to i32
  %add.i110 = add i32 %90, %mul.i
  call void @llvm.lifetime.start(i64 16, i8* %87) #4
  store i32 %add.i110, i32* %reg1.i.i, align 8, !tbaa !5
  store %struct.rtx_def* null, %struct.rtx_def** %original.i.i, align 8, !tbaa !8
  %91 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %call.i.i111 = call i8* @htab_find_with_hash(%struct.htab* %91, i8* %87, i32 %add.i110) #4
  %cmp.i.i112 = icmp eq i8* %call.i.i111, null
  br i1 %cmp.i.i112, label %if.end.i, label %ssa_rename_from_lookup.exit.i

ssa_rename_from_lookup.exit.i:                    ; preds = %if.then20.i
  %original2.i.i = getelementptr inbounds i8* %call.i.i111, i64 8
  %92 = bitcast i8* %original2.i.i to %struct.rtx_def**
  %93 = load %struct.rtx_def** %92, align 8, !tbaa !8
  call void @llvm.lifetime.end(i64 16, i8* %87) #4
  %cmp23.i = icmp eq %struct.rtx_def* %93, null
  br i1 %cmp23.i, label %if.end.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %ssa_rename_from_lookup.exit.i
  %arrayidx24.i = getelementptr inbounds %struct.rtx_def* %93, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx24.i to i32*
  %94 = load i32* %rtuint.i, align 4, !tbaa !9
  %cmp25.i = icmp ult i32 %94, 53
  br i1 %cmp25.i, label %land.lhs.true26.i, label %if.end.i

land.lhs.true26.i:                                ; preds = %land.lhs.true.i
  %95 = getelementptr inbounds %struct.rtx_def* %93, i64 0, i32 0
  %bf.load.i = load i32* %95, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %idxprom27.i = zext i32 %bf.clear.i to i64
  %idxprom31.i = zext i32 %94 to i64
  %arrayidx33.i = getelementptr inbounds [53 x [59 x i32]]* %already_seen.i, i64 0, i64 %idxprom31.i, i64 %idxprom27.i
  %96 = load i32* %arrayidx33.i, align 4, !tbaa !9
  %cmp34.i = icmp eq i32 %96, 0
  br i1 %cmp34.i, label %if.end.i, label %if.then5

if.end.i:                                         ; preds = %land.lhs.true26.i, %land.lhs.true.i, %ssa_rename_from_lookup.exit.i, %if.then20.i
  %cmp36.i = icmp eq i64 %and21.i, 0
  br i1 %cmp36.i, label %for.inc44.i, label %for.inc40.i

for.inc40.i:                                      ; preds = %if.end.i, %for.body18.i
  %word_.1.i = phi i64 [ %and21.i, %if.end.i ], [ %word_.0.i, %for.body18.i ]
  %indvars.iv.next.i113 = add nuw nsw i64 %indvars.iv.i109, 1
  %97 = trunc i64 %indvars.iv.next.i113 to i32
  %cmp17.old.i = icmp ult i32 %97, 64
  br i1 %cmp17.old.i, label %for.body18.i, label %for.inc44.i

for.inc44.i:                                      ; preds = %for.inc40.i, %if.end.i, %for.body12.i
  %indvars.iv.next75.i = add nuw nsw i64 %indvars.iv74.i, 1
  %98 = trunc i64 %indvars.iv.next75.i to i32
  %cmp11.i = icmp ult i32 %98, %86
  br i1 %cmp11.i, label %for.body12.i, label %if.end6

if.then5:                                         ; preds = %land.lhs.true26.i
  call void @llvm.lifetime.end(i64 12508, i8* %83) #4
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 2165, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.convert_from_ssa, i64 0, i64 0)) #6
  unreachable

if.end6:                                          ; preds = %for.inc44.i, %compute_coalesced_reg_partition.exit
  %99 = bitcast %struct.simple_bitmap_def* %call1.i to i8*
  call void @free(i8* %99) #4
  call void @llvm.lifetime.end(i64 12508, i8* %83) #4
  %100 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp76.i = icmp sgt i32 %100, 0
  br i1 %cmp76.i, label %for.body.lr.ph.i114, label %for.end14

for.body.lr.ph.i114:                              ; preds = %if.end6
  %101 = bitcast %struct.partition_def* %call.i to i8*
  %102 = sext i32 %100 to i64
  br label %for.body.i120

for.cond.loopexit.i:                              ; preds = %if.end48.i
  %103 = trunc i64 %indvars.iv.next79.i117 to i32
  %cmp.i115 = icmp sgt i32 %103, 0
  br i1 %cmp.i115, label %for.body.i120, label %rename_equivalent_regs.exit

for.body.i120:                                    ; preds = %for.cond.loopexit.i, %for.body.lr.ph.i114
  %indvars.iv78.i116 = phi i64 [ %102, %for.body.lr.ph.i114 ], [ %indvars.iv.next79.i117, %for.cond.loopexit.i ]
  %indvars.iv.next79.i117 = add nsw i64 %indvars.iv78.i116, -1
  %104 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data.i118 = getelementptr inbounds %struct.varray_head_tag* %104, i64 0, i32 4
  %bb1.i = bitcast %union.varray_data_tag* %data.i118 to [1 x %struct.basic_block_def*]*
  %arrayidx.i119 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb1.i, i64 0, i64 %indvars.iv.next79.i117
  %105 = load %struct.basic_block_def** %arrayidx.i119, align 8, !tbaa !1
  %head.i = getelementptr inbounds %struct.basic_block_def* %105, i64 0, i32 0
  %end.i = getelementptr inbounds %struct.basic_block_def* %105, i64 0, i32 1
  %106 = load %struct.rtx_def** %end.i, align 8, !tbaa !20
  br label %do.body.i123

do.body.i123:                                     ; preds = %if.end48.i, %for.body.i120
  %next.0.in.i = phi %struct.rtx_def** [ %head.i, %for.body.i120 ], [ %rtx51.i, %if.end48.i ]
  %next.0.i = load %struct.rtx_def** %next.0.in.i, align 8
  %107 = getelementptr inbounds %struct.rtx_def* %next.0.i, i64 0, i32 0
  %bf.load.i121 = load i32* %107, align 8
  %bf.clear.i122 = and i32 %bf.load.i121, 65535
  %idxprom272.i = zext i32 %bf.clear.i122 to i64
  %arrayidx3.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom272.i
  %108 = load i8* %arrayidx3.i, align 1, !tbaa !21
  %cmp4.i = icmp eq i8 %108, 105
  br i1 %cmp4.i, label %if.then.i, label %if.end48.i

if.then.i:                                        ; preds = %do.body.i123
  %arrayidx6.i = getelementptr inbounds %struct.rtx_def* %next.0.i, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx6.i to %struct.rtx_def**
  %call.i124 = call i32 @for_each_rtx(%struct.rtx_def** %rtx.i, i32 (%struct.rtx_def**, i8*)* @rename_equivalent_regs_in_insn, i8* %101) #4
  %arrayidx8.i = getelementptr inbounds %struct.rtx_def* %next.0.i, i64 0, i32 1, i64 6
  %rtx9.i = bitcast %union.rtunion_def* %arrayidx8.i to %struct.rtx_def**
  %call10.i = call i32 @for_each_rtx(%struct.rtx_def** %rtx9.i, i32 (%struct.rtx_def**, i8*)* @rename_equivalent_regs_in_insn, i8* %101) #4
  %109 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %110 = getelementptr inbounds %struct.rtx_def* %109, i64 0, i32 0
  %bf.load14.i = load i32* %110, align 8
  %bf.clear15.i = and i32 %bf.load14.i, 65535
  %cmp16.i = icmp eq i32 %bf.clear15.i, 24
  br i1 %cmp16.i, label %if.then18.i, label %if.end48.i

if.then18.i:                                      ; preds = %if.then.i
  %arrayidx23.i = getelementptr inbounds %struct.rtx_def* %109, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx23.i to %struct.rtvec_def**
  %111 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !1
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %111, i64 0, i32 0
  %112 = load i32* %num_elem.i, align 4, !tbaa !10
  %cmp24.i = icmp slt i32 %112, 2
  br i1 %cmp24.i, label %if.then26.i, label %if.end.i126

if.then26.i:                                      ; preds = %if.then18.i
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 2125, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.rename_equivalent_regs, i64 0, i64 0)) #6
  unreachable

if.end.i126:                                      ; preds = %if.then18.i
  %sub.i = add i32 %112, -1
  %idxprom27.i125 = sext i32 %sub.i to i64
  %arrayidx31.i = getelementptr inbounds %struct.rtvec_def* %111, i64 0, i32 1, i64 %idxprom27.i125
  %113 = load %struct.rtx_def** %arrayidx31.i, align 8, !tbaa !1
  %114 = getelementptr inbounds %union.rtunion_def* %arrayidx6.i, i64 0, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %113 to i64
  store i64 %.c.i, i64* %114, align 8, !tbaa !1
  %cmp3773.i = icmp sgt i32 %sub.i, 0
  br i1 %cmp3773.i, label %for.body39.i, label %if.end48.i

for.body39.i:                                     ; preds = %if.end.i126, %for.body39.i
  %indvars.iv.i127 = phi i64 [ %indvars.iv.next.i128, %for.body39.i ], [ 0, %if.end.i126 ]
  %115 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !1
  %arrayidx45.i = getelementptr inbounds %struct.rtvec_def* %115, i64 0, i32 1, i64 %indvars.iv.i127
  %116 = load %struct.rtx_def** %arrayidx45.i, align 8, !tbaa !1
  %call46.i = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %116, %struct.rtx_def* %next.0.i) #4
  %indvars.iv.next.i128 = add nuw nsw i64 %indvars.iv.i127, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i128 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %sub.i
  br i1 %exitcond, label %if.end48.i, label %for.body39.i

if.end48.i:                                       ; preds = %for.body39.i, %if.end.i126, %if.then.i, %do.body.i123
  %arrayidx50.i = getelementptr inbounds %struct.rtx_def* %next.0.i, i64 0, i32 1, i64 2
  %rtx51.i = bitcast %union.rtunion_def* %arrayidx50.i to %struct.rtx_def**
  %cmp52.i = icmp eq %struct.rtx_def* %next.0.i, %106
  br i1 %cmp52.i, label %for.cond.loopexit.i, label %do.body.i123

rename_equivalent_regs.exit:                      ; preds = %for.cond.loopexit.i
  %.pre = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp139 = icmp sgt i32 %.pre, 0
  br i1 %cmp139, label %for.body.lr.ph, label %for.end14

for.body.lr.ph:                                   ; preds = %rename_equivalent_regs.exit
  %117 = sext i32 %.pre to i64
  br label %for.body

for.cond.loopexit:                                ; preds = %for.inc, %for.body
  %118 = trunc i64 %indvars.iv.next144 to i32
  %cmp = icmp sgt i32 %118, 0
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.loopexit
  %indvars.iv143 = phi i64 [ %117, %for.body.lr.ph ], [ %indvars.iv.next144, %for.cond.loopexit ]
  %indvars.iv.next144 = add nsw i64 %indvars.iv143, -1
  %119 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %119, i64 0, i32 4
  %bb7 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb7, i64 0, i64 %indvars.iv.next144
  %120 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %pred = getelementptr inbounds %struct.basic_block_def* %120, i64 0, i32 4
  %e.0135 = load %struct.edge_def** %pred, align 8
  %tobool9136 = icmp eq %struct.edge_def* %e.0135, null
  br i1 %tobool9136, label %for.cond.loopexit, label %for.body10

for.body10:                                       ; preds = %for.body, %for.inc
  %e.0137 = phi %struct.edge_def* [ %e.0, %for.inc ], [ %e.0135, %for.body ]
  %src = getelementptr inbounds %struct.edge_def* %e.0137, i64 0, i32 2
  %121 = load %struct.basic_block_def** %src, align 8, !tbaa !23
  %cmp11 = icmp eq %struct.basic_block_def* %121, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  br i1 %cmp11, label %for.inc, label %if.then12

if.then12:                                        ; preds = %for.body10
  call fastcc void @eliminate_phi(%struct.edge_def* %e.0137, %struct.partition_def* %call.i)
  br label %for.inc

for.inc:                                          ; preds = %for.body10, %if.then12
  %pred_next = getelementptr inbounds %struct.edge_def* %e.0137, i64 0, i32 0
  %e.0 = load %struct.edge_def** %pred_next, align 8
  %tobool9 = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool9, label %for.cond.loopexit, label %for.body10

for.end14:                                        ; preds = %for.cond.loopexit, %if.end6, %rename_equivalent_regs.exit
  call void @partition_delete(%struct.partition_def* %call.i) #4
  %122 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp17133 = icmp sgt i32 %122, 0
  br i1 %cmp17133, label %for.body18.lr.ph, label %for.end81

for.body18.lr.ph:                                 ; preds = %for.end14
  %123 = sext i32 %122 to i64
  br label %for.body18

for.cond15.loopexit:                              ; preds = %if.else65, %if.else57
  %124 = trunc i64 %indvars.iv.next to i32
  %cmp17 = icmp sgt i32 %124, 0
  br i1 %cmp17, label %for.body18, label %for.end81

for.body18:                                       ; preds = %for.body18.lr.ph, %for.cond15.loopexit
  %indvars.iv = phi i64 [ %123, %for.body18.lr.ph ], [ %indvars.iv.next, %for.cond15.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %125 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data20 = getelementptr inbounds %struct.varray_head_tag* %125, i64 0, i32 4
  %bb21 = bitcast %union.varray_data_tag* %data20 to [1 x %struct.basic_block_def*]*
  %arrayidx22 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb21, i64 0, i64 %indvars.iv.next
  %126 = load %struct.basic_block_def** %arrayidx22, align 8, !tbaa !1
  %head = getelementptr inbounds %struct.basic_block_def* %126, i64 0, i32 0
  %127 = load %struct.rtx_def** %head, align 8, !tbaa !46
  br label %while.body

while.body:                                       ; preds = %if.end55, %if.else74, %for.body18
  %insn.0 = phi %struct.rtx_def* [ %127, %for.body18 ], [ %call56, %if.end55 ], [ %141, %if.else74 ]
  %tobool23 = icmp eq %struct.rtx_def* %insn.0, null
  br i1 %tobool23, label %if.else57, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %128 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 0
  %bf.load = load i32* %128, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp24 = icmp eq i32 %bf.clear, 32
  br i1 %cmp24, label %land.lhs.true25, label %if.else57

land.lhs.true25:                                  ; preds = %land.lhs.true
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %129 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %130 = getelementptr inbounds %struct.rtx_def* %129, i64 0, i32 0
  %bf.load27 = load i32* %130, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 47
  br i1 %cmp29, label %land.lhs.true30, label %if.else57

land.lhs.true30:                                  ; preds = %land.lhs.true25
  %arrayidx35 = getelementptr inbounds %struct.rtx_def* %129, i64 0, i32 1, i64 1
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %131 = load %struct.rtx_def** %rtx36, align 8, !tbaa !1
  %132 = getelementptr inbounds %struct.rtx_def* %131, i64 0, i32 0
  %bf.load37 = load i32* %132, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  %cmp39 = icmp eq i32 %bf.clear38, 152
  br i1 %cmp39, label %if.then40, label %if.else57

if.then40:                                        ; preds = %land.lhs.true30
  %133 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data42 = getelementptr inbounds %struct.varray_head_tag* %133, i64 0, i32 4
  %bb43 = bitcast %union.varray_data_tag* %data42 to [1 x %struct.basic_block_def*]*
  %arrayidx44 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb43, i64 0, i64 %indvars.iv.next
  %134 = load %struct.basic_block_def** %arrayidx44, align 8, !tbaa !1
  %end = getelementptr inbounds %struct.basic_block_def* %134, i64 0, i32 1
  %135 = load %struct.rtx_def** %end, align 8, !tbaa !20
  %cmp45 = icmp eq %struct.rtx_def* %insn.0, %135
  br i1 %cmp45, label %if.then46, label %if.end55

if.then46:                                        ; preds = %if.then40
  %arrayidx48 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 1
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %136 = load %struct.rtx_def** %rtx49, align 8, !tbaa !1
  store %struct.rtx_def* %136, %struct.rtx_def** %end, align 8, !tbaa !20
  br label %if.end55

if.end55:                                         ; preds = %if.then46, %if.then40
  %call56 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %insn.0) #4
  br label %while.body

if.else57:                                        ; preds = %while.body, %land.lhs.true30, %land.lhs.true25, %land.lhs.true
  %bf.load58 = phi i32 [ %bf.load, %land.lhs.true30 ], [ %bf.load, %land.lhs.true25 ], [ %bf.load, %land.lhs.true ], [ 0, %while.body ]
  %bf.clear59 = and i32 %bf.load58, 65535
  %idxprom60107 = zext i32 %bf.clear59 to i64
  %arrayidx61 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom60107
  %137 = load i8* %arrayidx61, align 1, !tbaa !21
  %cmp62 = icmp eq i8 %137, 105
  br i1 %cmp62, label %for.cond15.loopexit, label %if.else65

if.else65:                                        ; preds = %if.else57
  %138 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data67 = getelementptr inbounds %struct.varray_head_tag* %138, i64 0, i32 4
  %bb68 = bitcast %union.varray_data_tag* %data67 to [1 x %struct.basic_block_def*]*
  %arrayidx69 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb68, i64 0, i64 %indvars.iv.next
  %139 = load %struct.basic_block_def** %arrayidx69, align 8, !tbaa !1
  %end70 = getelementptr inbounds %struct.basic_block_def* %139, i64 0, i32 1
  %140 = load %struct.rtx_def** %end70, align 8, !tbaa !20
  %cmp71 = icmp eq %struct.rtx_def* %insn.0, %140
  br i1 %cmp71, label %for.cond15.loopexit, label %if.else74

if.else74:                                        ; preds = %if.else65
  %arrayidx76 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 2
  %rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**
  %141 = load %struct.rtx_def** %rtx77, align 8, !tbaa !1
  br label %while.body

for.end81:                                        ; preds = %for.cond15.loopexit, %for.end14
  call void @commit_edge_insertions() #4
  store i32 0, i32* @in_ssa_form, align 4, !tbaa !9
  %call82 = call i32 @count_or_remove_death_notes(%struct.simple_bitmap_def* null, i32 1) #4
  %142 = load %struct.varray_head_tag** @ssa_definition, align 8, !tbaa !1
  %tobool83 = icmp eq %struct.varray_head_tag* %142, null
  br i1 %tobool83, label %do.end, label %if.then84

if.then84:                                        ; preds = %for.end81
  %143 = bitcast %struct.varray_head_tag* %142 to i8*
  call void @free(i8* %143)
  store %struct.varray_head_tag* null, %struct.varray_head_tag** @ssa_definition, align 8, !tbaa !1
  br label %do.end

do.end:                                           ; preds = %for.end81, %if.then84
  %144 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  call void @htab_delete(%struct.htab* %144) #4
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @eliminate_phi(%struct.edge_def* %e, %struct.partition_def* nocapture readonly %reg_partition) #0 {
entry:
  %dest = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 3
  %0 = load %struct.basic_block_def** %dest, align 8, !tbaa !16
  %call = call %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def* %0) #4
  %tobool279 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool279, label %return, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry, %while.body
  %insn.0281 = phi %struct.rtx_def* [ %call14, %while.body ], [ %call, %entry ]
  %storemerge280 = phi i32 [ %add, %while.body ], [ 0, %entry ]
  %1 = getelementptr inbounds %struct.rtx_def* %insn.0281, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %land.lhs.true1, label %while.end

land.lhs.true1:                                   ; preds = %land.lhs.true
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.0281, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load2 = load i32* %3, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 47
  br i1 %cmp4, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %land.lhs.true1
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 1
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx10, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load11 = load i32* %5, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 152
  br i1 %cmp13, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %call14 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %insn.0281) #4
  %add = add nsw i32 %storemerge280, 2
  %tobool = icmp eq %struct.rtx_def* %call14, null
  br i1 %tobool, label %while.end, label %land.lhs.true

while.end:                                        ; preds = %land.rhs, %land.lhs.true1, %land.lhs.true, %while.body
  %storemerge.lcssa = phi i32 [ %add, %while.body ], [ %storemerge280, %land.lhs.true ], [ %storemerge280, %land.lhs.true1 ], [ %storemerge280, %land.rhs ]
  %cmp15 = icmp eq i32 %storemerge.lcssa, 0
  br i1 %cmp15, label %return, label %if.end

if.end:                                           ; preds = %while.end
  %conv = sext i32 %storemerge.lcssa to i64
  %6 = alloca %struct.rtx_def*, i64 %conv, align 1
  %call16 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %storemerge.lcssa, i32 %storemerge.lcssa) #4
  %call17 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %storemerge.lcssa, i32 %storemerge.lcssa) #4
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %call16, i32 %storemerge.lcssa) #4
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %call17, i32 %storemerge.lcssa) #4
  %7 = load %struct.basic_block_def** %dest, align 8, !tbaa !16
  %call19 = call %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def* %7) #4
  %tobool20272 = icmp eq %struct.rtx_def* %call19, null
  br i1 %tobool20272, label %out, label %land.lhs.true21.lr.ph

land.lhs.true21.lr.ph:                            ; preds = %if.end
  %src = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 2
  br label %land.lhs.true21

land.lhs.true21:                                  ; preds = %land.lhs.true21.lr.ph, %for.inc
  %insn.1274 = phi %struct.rtx_def* [ %call19, %land.lhs.true21.lr.ph ], [ %call106, %for.inc ]
  %n_nodes.0.load256273 = phi i32 [ 0, %land.lhs.true21.lr.ph ], [ %n_nodes.0.load255, %for.inc ]
  %8 = getelementptr inbounds %struct.rtx_def* %insn.1274, i64 0, i32 0
  %bf.load22 = load i32* %8, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 32
  br i1 %cmp24, label %land.lhs.true26, label %for.end

land.lhs.true26:                                  ; preds = %land.lhs.true21
  %arrayidx28 = getelementptr inbounds %struct.rtx_def* %insn.1274, i64 0, i32 1, i64 3
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx29, align 8, !tbaa !1
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load30 = load i32* %10, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 47
  br i1 %cmp32, label %land.rhs34, label %for.end

land.rhs34:                                       ; preds = %land.lhs.true26
  %arrayidx39 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 1
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx40, align 8, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load41 = load i32* %12, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 152
  br i1 %cmp43, label %for.body, label %for.end

for.body:                                         ; preds = %land.rhs34
  %13 = load %struct.basic_block_def** %src, align 8, !tbaa !23
  %index = getelementptr inbounds %struct.basic_block_def* %13, i64 0, i32 11
  %14 = load i32* %index, align 4, !tbaa !12
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtvec_def**
  %15 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !1
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 0
  %16 = load i32* %num_elem.i, align 4, !tbaa !10
  %conv.i = sext i32 %14 to i64
  %17 = sext i32 %16 to i64
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %for.body
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ %17, %for.body ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -2
  %18 = trunc i64 %indvars.iv.next.i to i32
  %cmp.i = icmp sgt i32 %18, -1
  br i1 %cmp.i, label %for.body.i, label %for.inc

for.body.i:                                       ; preds = %for.cond.i
  %19 = add nsw i64 %indvars.iv.i, -1
  %arrayidx3.i = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 1, i64 %19
  %20 = load %struct.rtx_def** %arrayidx3.i, align 8, !tbaa !1
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 1, i64 0, i32 0
  %21 = load i64* %rtwint.i, align 8, !tbaa !15
  %cmp6.i = icmp eq i64 %21, %conv.i
  br i1 %cmp6.i, label %phi_alternative.exit, label %for.cond.i

phi_alternative.exit:                             ; preds = %for.body.i
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx55, align 8, !tbaa !1
  %sext.i = shl i64 %indvars.iv.next.i, 32
  %idxprom8.i = ashr exact i64 %sext.i, 32
  %arrayidx10.i = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 1, i64 %idxprom8.i
  %23 = load %struct.rtx_def** %arrayidx10.i, align 8, !tbaa !1
  %24 = getelementptr inbounds %struct.rtx_def* %23, i64 0, i32 0
  %bf.load60 = load i32* %24, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 61
  br i1 %cmp62, label %lor.lhs.false, label %if.then68

lor.lhs.false:                                    ; preds = %phi_alternative.exit
  %25 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 0
  %bf.load64 = load i32* %25, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %cmp66 = icmp eq i32 %bf.clear65, 61
  br i1 %cmp66, label %if.end69, label %if.then68

if.then68:                                        ; preds = %lor.lhs.false, %phi_alternative.exit
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1398, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.eliminate_phi, i64 0, i64 0)) #6
  unreachable

if.end69:                                         ; preds = %lor.lhs.false
  %arrayidx71 = getelementptr inbounds %struct.rtx_def* %23, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx71 to i32*
  %26 = load i32* %rtuint, align 4, !tbaa !9
  %idxprom = zext i32 %26 to i64
  %class_element = getelementptr inbounds %struct.partition_def* %reg_partition, i64 0, i32 1, i64 %idxprom, i32 0
  %27 = load i32* %class_element, align 4, !tbaa !37
  %idxprom73 = sext i32 %27 to i64
  %28 = load %struct.function** @cfun, align 8, !tbaa !1
  %emit = getelementptr inbounds %struct.function* %28, i64 0, i32 3
  %29 = load %struct.emit_status** %emit, align 8, !tbaa !24
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %29, i64 0, i32 12
  %30 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !27
  %arrayidx74 = getelementptr inbounds %struct.rtx_def** %30, i64 %idxprom73
  %31 = load %struct.rtx_def** %arrayidx74, align 8, !tbaa !1
  %arrayidx76 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 1, i64 0
  %rtuint77 = bitcast %union.rtunion_def* %arrayidx76 to i32*
  %32 = load i32* %rtuint77, align 4, !tbaa !9
  %idxprom78 = zext i32 %32 to i64
  %class_element81 = getelementptr inbounds %struct.partition_def* %reg_partition, i64 0, i32 1, i64 %idxprom78, i32 0
  %33 = load i32* %class_element81, align 4, !tbaa !37
  %idxprom82 = sext i32 %33 to i64
  %arrayidx85 = getelementptr inbounds %struct.rtx_def** %30, i64 %idxprom82
  %34 = load %struct.rtx_def** %arrayidx85, align 8, !tbaa !1
  %cmp86 = icmp eq %struct.rtx_def* %31, %34
  br i1 %cmp86, label %for.inc, label %if.then88

if.then88:                                        ; preds = %if.end69
  %arrayidx.i218 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx.i218 to i32*
  %35 = sext i32 %n_nodes.0.load256273 to i64
  br label %for.cond.i222

for.cond.i222:                                    ; preds = %for.body.i225, %if.then88
  %indvars.iv.i219 = phi i64 [ %indvars.iv.next.i220, %for.body.i225 ], [ %35, %if.then88 ]
  %indvars.iv.next.i220 = add nsw i64 %indvars.iv.i219, -1
  %36 = trunc i64 %indvars.iv.i219 to i32
  %cmp.i221 = icmp sgt i32 %36, 0
  br i1 %cmp.i221, label %for.body.i225, label %for.end.i

for.body.i225:                                    ; preds = %for.cond.i222
  %37 = load i32* %rtuint.i, align 4, !tbaa !9
  %arrayidx1.i = getelementptr inbounds %struct.rtx_def** %6, i64 %indvars.iv.next.i220
  %38 = load %struct.rtx_def** %arrayidx1.i, align 8, !tbaa !1
  %arrayidx3.i223 = getelementptr inbounds %struct.rtx_def* %38, i64 0, i32 1, i64 0
  %rtuint4.i = bitcast %union.rtunion_def* %arrayidx3.i223 to i32*
  %39 = load i32* %rtuint4.i, align 4, !tbaa !9
  %cmp5.i224 = icmp eq i32 %37, %39
  br i1 %cmp5.i224, label %return.loopexit.i, label %for.cond.i222

for.end.i:                                        ; preds = %for.cond.i222
  %inc.i = add nsw i32 %n_nodes.0.load256273, 1
  %arrayidx7.i = getelementptr inbounds %struct.rtx_def** %6, i64 %35
  store %struct.rtx_def* %31, %struct.rtx_def** %arrayidx7.i, align 8, !tbaa !1
  br label %ephi_add_node.exit

return.loopexit.i:                                ; preds = %for.body.i225
  %40 = trunc i64 %indvars.iv.next.i220 to i32
  br label %ephi_add_node.exit

ephi_add_node.exit:                               ; preds = %for.end.i, %return.loopexit.i
  %n_nodes.0.load254 = phi i32 [ %inc.i, %for.end.i ], [ %n_nodes.0.load256273, %return.loopexit.i ]
  %retval.0.i226 = phi i32 [ %n_nodes.0.load256273, %for.end.i ], [ %40, %return.loopexit.i ]
  %arrayidx.i227 = getelementptr inbounds %struct.rtx_def* %34, i64 0, i32 1, i64 0
  %rtuint.i228 = bitcast %union.rtunion_def* %arrayidx.i227 to i32*
  %41 = sext i32 %n_nodes.0.load254 to i64
  br label %for.cond.i232

for.cond.i232:                                    ; preds = %for.body.i237, %ephi_add_node.exit
  %indvars.iv.i229 = phi i64 [ %indvars.iv.next.i230, %for.body.i237 ], [ %41, %ephi_add_node.exit ]
  %indvars.iv.next.i230 = add nsw i64 %indvars.iv.i229, -1
  %42 = trunc i64 %indvars.iv.i229 to i32
  %cmp.i231 = icmp sgt i32 %42, 0
  br i1 %cmp.i231, label %for.body.i237, label %for.end.i240

for.body.i237:                                    ; preds = %for.cond.i232
  %43 = load i32* %rtuint.i228, align 4, !tbaa !9
  %arrayidx1.i233 = getelementptr inbounds %struct.rtx_def** %6, i64 %indvars.iv.next.i230
  %44 = load %struct.rtx_def** %arrayidx1.i233, align 8, !tbaa !1
  %arrayidx3.i234 = getelementptr inbounds %struct.rtx_def* %44, i64 0, i32 1, i64 0
  %rtuint4.i235 = bitcast %union.rtunion_def* %arrayidx3.i234 to i32*
  %45 = load i32* %rtuint4.i235, align 4, !tbaa !9
  %cmp5.i236 = icmp eq i32 %43, %45
  br i1 %cmp5.i236, label %return.loopexit.i241, label %for.cond.i232

for.end.i240:                                     ; preds = %for.cond.i232
  %inc.i238 = add nsw i32 %n_nodes.0.load254, 1
  %arrayidx7.i239 = getelementptr inbounds %struct.rtx_def** %6, i64 %41
  store %struct.rtx_def* %34, %struct.rtx_def** %arrayidx7.i239, align 8, !tbaa !1
  br label %ephi_add_node.exit243

return.loopexit.i241:                             ; preds = %for.body.i237
  %46 = trunc i64 %indvars.iv.next.i230 to i32
  br label %ephi_add_node.exit243

ephi_add_node.exit243:                            ; preds = %for.end.i240, %return.loopexit.i241
  %n_nodes.0.load253 = phi i32 [ %inc.i238, %for.end.i240 ], [ %n_nodes.0.load254, %return.loopexit.i241 ]
  %retval.0.i242 = phi i32 [ %n_nodes.0.load254, %for.end.i240 ], [ %46, %return.loopexit.i241 ]
  %rem = and i32 %retval.0.i242, 63
  %sh_prom = zext i32 %rem to i64
  %shl = shl i64 1, %sh_prom
  %div = lshr i32 %retval.0.i242, 6
  %idxprom91 = zext i32 %div to i64
  %idxprom92 = sext i32 %retval.0.i226 to i64
  %arrayidx93 = getelementptr inbounds %struct.simple_bitmap_def** %call16, i64 %idxprom92
  %47 = load %struct.simple_bitmap_def** %arrayidx93, align 8, !tbaa !1
  %arrayidx94 = getelementptr inbounds %struct.simple_bitmap_def* %47, i64 0, i32 3, i64 %idxprom91
  %48 = load i64* %arrayidx94, align 8, !tbaa !15
  %or = or i64 %shl, %48
  store i64 %or, i64* %arrayidx94, align 8, !tbaa !15
  %rem95 = and i32 %retval.0.i226, 63
  %sh_prom96 = zext i32 %rem95 to i64
  %shl97 = shl i64 1, %sh_prom96
  %div98 = lshr i32 %retval.0.i226, 6
  %idxprom99 = zext i32 %div98 to i64
  %idxprom100 = sext i32 %retval.0.i242 to i64
  %arrayidx101 = getelementptr inbounds %struct.simple_bitmap_def** %call17, i64 %idxprom100
  %49 = load %struct.simple_bitmap_def** %arrayidx101, align 8, !tbaa !1
  %arrayidx103 = getelementptr inbounds %struct.simple_bitmap_def* %49, i64 0, i32 3, i64 %idxprom99
  %50 = load i64* %arrayidx103, align 8, !tbaa !15
  %or104 = or i64 %50, %shl97
  store i64 %or104, i64* %arrayidx103, align 8, !tbaa !15
  br label %for.inc

for.inc:                                          ; preds = %for.cond.i, %if.end69, %ephi_add_node.exit243
  %n_nodes.0.load255 = phi i32 [ %n_nodes.0.load256273, %if.end69 ], [ %n_nodes.0.load253, %ephi_add_node.exit243 ], [ %n_nodes.0.load256273, %for.cond.i ]
  %call106 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %insn.1274) #4
  %tobool20 = icmp eq %struct.rtx_def* %call106, null
  br i1 %tobool20, label %for.end, label %land.lhs.true21

for.end:                                          ; preds = %land.rhs34, %land.lhs.true26, %land.lhs.true21, %for.inc
  %n_nodes.0.load256.lcssa = phi i32 [ %n_nodes.0.load255, %for.inc ], [ %n_nodes.0.load256273, %land.lhs.true21 ], [ %n_nodes.0.load256273, %land.lhs.true26 ], [ %n_nodes.0.load256273, %land.rhs34 ]
  %cmp107 = icmp eq i32 %n_nodes.0.load256.lcssa, 0
  br i1 %cmp107, label %out, label %if.end110

if.end110:                                        ; preds = %for.end
  %call111 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %n_nodes.0.load256.lcssa) #4
  call void @sbitmap_zero(%struct.simple_bitmap_def* %call111) #4
  %conv112 = sext i32 %n_nodes.0.load256.lcssa to i64
  %51 = alloca i32, i64 %conv112, align 1
  %cmp115269 = icmp sgt i32 %n_nodes.0.load256.lcssa, 0
  br i1 %cmp115269, label %for.body117, label %for.end129

for.body117:                                      ; preds = %if.end110, %for.inc128
  %tstack.0271 = phi i32* [ %tstack.1, %for.inc128 ], [ %51, %if.end110 ]
  %i.0270 = phi i32 [ %inc, %for.inc128 ], [ 0, %if.end110 ]
  %div118 = lshr i32 %i.0270, 6
  %idxprom119 = zext i32 %div118 to i64
  %arrayidx121 = getelementptr inbounds %struct.simple_bitmap_def* %call111, i64 0, i32 3, i64 %idxprom119
  %52 = load i64* %arrayidx121, align 8, !tbaa !15
  %rem122 = and i32 %i.0270, 63
  %sh_prom123 = zext i32 %rem122 to i64
  %53 = shl i64 1, %sh_prom123
  %and213 = and i64 %52, %53
  %tobool124 = icmp eq i64 %and213, 0
  br i1 %tobool124, label %if.then125, label %for.inc128

if.then125:                                       ; preds = %for.body117
  %call126 = call fastcc i32* @ephi_forward(i32 %i.0270, %struct.simple_bitmap_def* %call111, %struct.simple_bitmap_def** %call17, i32* %tstack.0271)
  br label %for.inc128

for.inc128:                                       ; preds = %for.body117, %if.then125
  %tstack.1 = phi i32* [ %tstack.0271, %for.body117 ], [ %call126, %if.then125 ]
  %inc = add nsw i32 %i.0270, 1
  %exitcond300 = icmp eq i32 %inc, %n_nodes.0.load256.lcssa
  br i1 %exitcond300, label %for.end129, label %for.body117

for.end129:                                       ; preds = %for.inc128, %if.end110
  %tstack.0.lcssa = phi i32* [ %51, %if.end110 ], [ %tstack.1, %for.inc128 ]
  call void @sbitmap_zero(%struct.simple_bitmap_def* %call111) #4
  call void @start_sequence() #4
  %cmp131267 = icmp eq i32* %tstack.0.lcssa, %51
  br i1 %cmp131267, label %while.end145, label %while.body133

while.body133:                                    ; preds = %for.end129, %while.cond130.backedge
  %tstack.2268 = phi i32* [ %incdec.ptr, %while.cond130.backedge ], [ %tstack.0.lcssa, %for.end129 ]
  %incdec.ptr = getelementptr inbounds i32* %tstack.2268, i64 -1
  %54 = load i32* %incdec.ptr, align 4, !tbaa !9
  %div134 = lshr i32 %54, 6
  %idxprom135 = zext i32 %div134 to i64
  %arrayidx137 = getelementptr inbounds %struct.simple_bitmap_def* %call111, i64 0, i32 3, i64 %idxprom135
  %55 = load i64* %arrayidx137, align 8, !tbaa !15
  %rem138 = and i32 %54, 63
  %sh_prom139 = zext i32 %rem138 to i64
  %56 = shl i64 1, %sh_prom139
  %and141212 = and i64 %56, %55
  %tobool142 = icmp eq i64 %and141212, 0
  br i1 %tobool142, label %if.then143, label %while.cond130.backedge

while.cond130.backedge:                           ; preds = %for.inc96.i, %for.inc151.i, %while.body133, %do.body41.i, %do.body101.i, %if.then129.i
  %cmp131 = icmp eq i32* %incdec.ptr, %51
  br i1 %cmp131, label %while.end145, label %while.body133

if.then143:                                       ; preds = %while.body133
  %idxprom.i = sext i32 %54 to i64
  %arrayidx.i214 = getelementptr inbounds %struct.simple_bitmap_def** %call16, i64 %idxprom.i
  %57 = load %struct.simple_bitmap_def** %arrayidx.i214, align 8, !tbaa !1
  %size.i = getelementptr inbounds %struct.simple_bitmap_def* %57, i64 0, i32 1
  %58 = load i32* %size.i, align 4, !tbaa !18
  %cmp235.i = icmp eq i32 %58, 0
  br i1 %cmp235.i, label %do.body101.i, label %for.body.i215

for.body.i215:                                    ; preds = %if.then143, %for.inc28.i
  %indvars.iv248.i = phi i64 [ %indvars.iv.next249.i, %for.inc28.i ], [ 0, %if.then143 ]
  %reg_u.0238.i = phi %struct.rtx_def* [ %reg_u.4.i, %for.inc28.i ], [ null, %if.then143 ]
  %unvisited_predecessors.0237.i = phi i32 [ %unvisited_predecessors.4.i, %for.inc28.i ], [ 0, %if.then143 ]
  %arrayidx4.i = getelementptr inbounds %struct.simple_bitmap_def* %57, i64 0, i32 3, i64 %indvars.iv248.i
  %59 = load i64* %arrayidx4.i, align 8, !tbaa !15
  %cmp5.i = icmp eq i64 %59, 0
  br i1 %cmp5.i, label %for.inc28.i, label %for.body8.preheader.i

for.body8.preheader.i:                            ; preds = %for.body.i215
  %60 = trunc i64 %indvars.iv248.i to i32
  %mul.i = shl i32 %60, 6
  br label %for.body8.i

for.body8.i:                                      ; preds = %for.inc.i, %for.body8.preheader.i
  %indvars.iv246.i = phi i64 [ 0, %for.body8.preheader.i ], [ %indvars.iv.next247.i, %for.inc.i ]
  %word_.0.i = phi i64 [ %59, %for.body8.preheader.i ], [ %word_.1.i, %for.inc.i ]
  %unvisited_predecessors.1.i = phi i32 [ %unvisited_predecessors.0237.i, %for.body8.preheader.i ], [ %unvisited_predecessors.3.i, %for.inc.i ]
  %reg_u.1.i = phi %struct.rtx_def* [ %reg_u.0238.i, %for.body8.preheader.i ], [ %reg_u.3.i, %for.inc.i ]
  %shl.i = shl i64 1, %indvars.iv246.i
  %and.i = and i64 %shl.i, %word_.0.i
  %cmp9.i = icmp eq i64 %and.i, 0
  br i1 %cmp9.i, label %for.inc.i, label %if.then10.i

if.then10.i:                                      ; preds = %for.body8.i
  %neg.i = xor i64 %shl.i, -1
  %and11.i = and i64 %word_.0.i, %neg.i
  %61 = trunc i64 %indvars.iv246.i to i32
  %add.i = add i32 %61, %mul.i
  %div.i = lshr i32 %add.i, 6
  %idxprom12.i = zext i32 %div.i to i64
  %arrayidx14.i = getelementptr inbounds %struct.simple_bitmap_def* %call111, i64 0, i32 3, i64 %idxprom12.i
  %62 = load i64* %arrayidx14.i, align 8, !tbaa !15
  %rem.i = and i32 %add.i, 63
  %sh_prom15.i = zext i32 %rem.i to i64
  %63 = shl i64 1, %sh_prom15.i
  %and16226.i = and i64 %62, %63
  %tobool.i = icmp eq i64 %and16226.i, 0
  br i1 %tobool.i, label %if.end22.i, label %if.else.i

if.else.i:                                        ; preds = %if.then10.i
  %tobool18.i = icmp eq %struct.rtx_def* %reg_u.1.i, null
  br i1 %tobool18.i, label %if.then19.i, label %if.end22.i

if.then19.i:                                      ; preds = %if.else.i
  %idxprom20.i = sext i32 %add.i to i64
  %arrayidx21.i = getelementptr inbounds %struct.rtx_def** %6, i64 %idxprom20.i
  %64 = load %struct.rtx_def** %arrayidx21.i, align 8, !tbaa !1
  br label %if.end22.i

if.end22.i:                                       ; preds = %if.then19.i, %if.else.i, %if.then10.i
  %unvisited_predecessors.2.i = phi i32 [ %unvisited_predecessors.1.i, %if.else.i ], [ %unvisited_predecessors.1.i, %if.then19.i ], [ 1, %if.then10.i ]
  %reg_u.2.i = phi %struct.rtx_def* [ %reg_u.1.i, %if.else.i ], [ %64, %if.then19.i ], [ %reg_u.1.i, %if.then10.i ]
  %cmp23.i = icmp eq i64 %and11.i, 0
  br i1 %cmp23.i, label %for.inc28.i, label %for.inc.i

for.inc.i:                                        ; preds = %if.end22.i, %for.body8.i
  %word_.1.i = phi i64 [ %and11.i, %if.end22.i ], [ %word_.0.i, %for.body8.i ]
  %unvisited_predecessors.3.i = phi i32 [ %unvisited_predecessors.2.i, %if.end22.i ], [ %unvisited_predecessors.1.i, %for.body8.i ]
  %reg_u.3.i = phi %struct.rtx_def* [ %reg_u.2.i, %if.end22.i ], [ %reg_u.1.i, %for.body8.i ]
  %indvars.iv.next247.i = add nuw nsw i64 %indvars.iv246.i, 1
  %65 = trunc i64 %indvars.iv.next247.i to i32
  %cmp7.old.i = icmp ult i32 %65, 64
  br i1 %cmp7.old.i, label %for.body8.i, label %for.inc28.i

for.inc28.i:                                      ; preds = %for.inc.i, %if.end22.i, %for.body.i215
  %unvisited_predecessors.4.i = phi i32 [ %unvisited_predecessors.0237.i, %for.body.i215 ], [ %unvisited_predecessors.3.i, %for.inc.i ], [ %unvisited_predecessors.2.i, %if.end22.i ]
  %reg_u.4.i = phi %struct.rtx_def* [ %reg_u.0238.i, %for.body.i215 ], [ %reg_u.3.i, %for.inc.i ], [ %reg_u.2.i, %if.end22.i ]
  %indvars.iv.next249.i = add nuw nsw i64 %indvars.iv248.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next249.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %58
  br i1 %exitcond, label %do.end.i, label %for.body.i215

do.end.i:                                         ; preds = %for.inc28.i
  %tobool31.i = icmp eq i32 %unvisited_predecessors.4.i, 0
  br i1 %tobool31.i, label %do.body101.i, label %if.then32.i

if.then32.i:                                      ; preds = %do.end.i
  %tobool33.i = icmp eq %struct.rtx_def* %reg_u.4.i, null
  br i1 %tobool33.i, label %if.then34.i, label %do.body41.i

if.then34.i:                                      ; preds = %if.then32.i
  %arrayidx36.i = getelementptr inbounds %struct.rtx_def** %6, i64 %idxprom.i
  %66 = load %struct.rtx_def** %arrayidx36.i, align 8, !tbaa !1
  %67 = getelementptr inbounds %struct.rtx_def* %66, i64 0, i32 0
  %bf.load.i = load i32* %67, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %call.i = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear.i) #4
  %call39.i = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call.i, %struct.rtx_def* %66) #4
  %.pre.i = load %struct.simple_bitmap_def** %arrayidx.i214, align 8, !tbaa !1
  %size47.phi.trans.insert.i = getelementptr inbounds %struct.simple_bitmap_def* %.pre.i, i64 0, i32 1
  %.pre252.i = load i32* %size47.phi.trans.insert.i, align 4, !tbaa !18
  br label %do.body41.i

do.body41.i:                                      ; preds = %if.then34.i, %if.then32.i
  %68 = phi i32 [ %58, %if.then32.i ], [ %.pre252.i, %if.then34.i ]
  %69 = phi %struct.simple_bitmap_def* [ %57, %if.then32.i ], [ %.pre.i, %if.then34.i ]
  %reg_u.5.i = phi %struct.rtx_def* [ %reg_u.4.i, %if.then32.i ], [ %call.i, %if.then34.i ]
  %cmp54233.i = icmp eq i32 %68, 0
  br i1 %cmp54233.i, label %while.cond130.backedge, label %for.body55.i

for.body55.i:                                     ; preds = %do.body41.i, %for.inc96.i
  %indvars.iv244.i = phi i64 [ %indvars.iv.next245.i, %for.inc96.i ], [ 0, %do.body41.i ]
  %arrayidx58.i = getelementptr inbounds %struct.simple_bitmap_def* %69, i64 0, i32 3, i64 %indvars.iv244.i
  %70 = load i64* %arrayidx58.i, align 8, !tbaa !15
  %cmp59.i = icmp eq i64 %70, 0
  br i1 %cmp59.i, label %for.inc96.i, label %for.body63.preheader.i

for.body63.preheader.i:                           ; preds = %for.body55.i
  %71 = trunc i64 %indvars.iv244.i to i32
  %mul72.i = shl i32 %71, 6
  br label %for.body63.i

for.body63.i:                                     ; preds = %for.inc92.i, %for.body63.preheader.i
  %indvars.iv242.i = phi i64 [ 0, %for.body63.preheader.i ], [ %indvars.iv.next243.i, %for.inc92.i ]
  %word_56.0.i = phi i64 [ %70, %for.body63.preheader.i ], [ %word_56.1.i, %for.inc92.i ]
  %shl66.i = shl i64 1, %indvars.iv242.i
  %and67.i = and i64 %shl66.i, %word_56.0.i
  %cmp68.i = icmp eq i64 %and67.i, 0
  br i1 %cmp68.i, label %for.inc92.i, label %if.then69.i

if.then69.i:                                      ; preds = %for.body63.i
  %neg70.i = xor i64 %shl66.i, -1
  %and71.i = and i64 %word_56.0.i, %neg70.i
  %72 = trunc i64 %indvars.iv242.i to i32
  %add73.i = add i32 %72, %mul72.i
  %div74.i = lshr i32 %add73.i, 6
  %idxprom75.i = zext i32 %div74.i to i64
  %arrayidx77.i = getelementptr inbounds %struct.simple_bitmap_def* %call111, i64 0, i32 3, i64 %idxprom75.i
  %73 = load i64* %arrayidx77.i, align 8, !tbaa !15
  %rem78.i = and i32 %add73.i, 63
  %sh_prom79.i = zext i32 %rem78.i to i64
  %74 = shl i64 1, %sh_prom79.i
  %and81225.i = and i64 %73, %74
  %tobool82.i = icmp eq i64 %and81225.i, 0
  br i1 %tobool82.i, label %if.then83.i, label %if.end87.i

if.then83.i:                                      ; preds = %if.then69.i
  call fastcc void @ephi_backward(i32 %add73.i, %struct.simple_bitmap_def* %call111, %struct.simple_bitmap_def** %call16, %struct.rtx_def** %6) #4
  %idxprom84.i = sext i32 %add73.i to i64
  %arrayidx85.i = getelementptr inbounds %struct.rtx_def** %6, i64 %idxprom84.i
  %75 = load %struct.rtx_def** %arrayidx85.i, align 8, !tbaa !1
  %call86.i = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %75, %struct.rtx_def* %reg_u.5.i) #4
  br label %if.end87.i

if.end87.i:                                       ; preds = %if.then83.i, %if.then69.i
  %cmp88.i = icmp eq i64 %and71.i, 0
  br i1 %cmp88.i, label %for.inc96.i, label %for.inc92.i

for.inc92.i:                                      ; preds = %if.end87.i, %for.body63.i
  %word_56.1.i = phi i64 [ %and71.i, %if.end87.i ], [ %word_56.0.i, %for.body63.i ]
  %indvars.iv.next243.i = add nuw nsw i64 %indvars.iv242.i, 1
  %76 = trunc i64 %indvars.iv.next243.i to i32
  %cmp62.old.i = icmp ult i32 %76, 64
  br i1 %cmp62.old.i, label %for.body63.i, label %for.inc96.i

for.inc96.i:                                      ; preds = %for.inc92.i, %if.end87.i, %for.body55.i
  %indvars.iv.next245.i = add nuw nsw i64 %indvars.iv244.i, 1
  %lftr.wideiv298 = trunc i64 %indvars.iv.next245.i to i32
  %exitcond299 = icmp eq i32 %lftr.wideiv298, %68
  br i1 %exitcond299, label %while.cond130.backedge, label %for.body55.i

do.body101.i:                                     ; preds = %do.end.i, %if.then143
  %arrayidx106.i = getelementptr inbounds %struct.simple_bitmap_def** %call17, i64 %idxprom.i
  %77 = load %struct.simple_bitmap_def** %arrayidx106.i, align 8, !tbaa !1
  %size107.i = getelementptr inbounds %struct.simple_bitmap_def* %77, i64 0, i32 1
  %78 = load i32* %size107.i, align 4, !tbaa !18
  %cmp114230.i = icmp eq i32 %78, 0
  br i1 %cmp114230.i, label %while.cond130.backedge, label %for.body115.i

for.body115.i:                                    ; preds = %do.body101.i, %for.inc151.i
  %indvars.iv.i216 = phi i64 [ %indvars.iv.next.i217, %for.inc151.i ], [ 0, %do.body101.i ]
  %arrayidx118.i = getelementptr inbounds %struct.simple_bitmap_def* %77, i64 0, i32 3, i64 %indvars.iv.i216
  %79 = load i64* %arrayidx118.i, align 8, !tbaa !15
  %cmp119.i = icmp eq i64 %79, 0
  br i1 %cmp119.i, label %for.inc151.i, label %for.body123.i

for.body123.i:                                    ; preds = %for.body115.i, %for.inc147.i
  %bit_num_103.1.i = phi i32 [ %inc148.i, %for.inc147.i ], [ 0, %for.body115.i ]
  %sh_prom125.i = zext i32 %bit_num_103.1.i to i64
  %shl126.i = shl i64 1, %sh_prom125.i
  %and127.i = and i64 %shl126.i, %79
  %cmp128.i = icmp eq i64 %and127.i, 0
  br i1 %cmp128.i, label %for.inc147.i, label %if.then129.i

if.then129.i:                                     ; preds = %for.body123.i
  %80 = trunc i64 %indvars.iv.i216 to i32
  %mul132.i = shl i32 %80, 6
  %add133.i = add i32 %bit_num_103.1.i, %mul132.i
  %or.i = or i64 %55, %56
  store i64 %or.i, i64* %arrayidx137, align 8, !tbaa !15
  %arrayidx142.i = getelementptr inbounds %struct.rtx_def** %6, i64 %idxprom.i
  %81 = load %struct.rtx_def** %arrayidx142.i, align 8, !tbaa !1
  %idxprom143.i = sext i32 %add133.i to i64
  %arrayidx144.i = getelementptr inbounds %struct.rtx_def** %6, i64 %idxprom143.i
  %82 = load %struct.rtx_def** %arrayidx144.i, align 8, !tbaa !1
  %call145.i = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %81, %struct.rtx_def* %82) #4
  br label %while.cond130.backedge

for.inc147.i:                                     ; preds = %for.body123.i
  %inc148.i = add i32 %bit_num_103.1.i, 1
  %cmp122.old.i = icmp ult i32 %inc148.i, 64
  br i1 %cmp122.old.i, label %for.body123.i, label %for.inc151.i

for.inc151.i:                                     ; preds = %for.inc147.i, %for.body115.i
  %indvars.iv.next.i217 = add nuw nsw i64 %indvars.iv.i216, 1
  %83 = trunc i64 %indvars.iv.next.i217 to i32
  %cmp114.i = icmp ult i32 %83, %78
  br i1 %cmp114.i, label %for.body115.i, label %while.cond130.backedge

while.end145:                                     ; preds = %while.cond130.backedge, %for.end129
  %call146 = call %struct.rtx_def* @gen_sequence() #4
  call void @end_sequence() #4
  call void @insert_insn_on_edge(%struct.rtx_def* %call146, %struct.edge_def* %e) #4
  %84 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !1
  %tobool147 = icmp eq %struct._IO_FILE* %84, null
  br i1 %tobool147, label %if.end154, label %if.then148

if.then148:                                       ; preds = %while.end145
  %src149 = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 2
  %85 = load %struct.basic_block_def** %src149, align 8, !tbaa !23
  %index150 = getelementptr inbounds %struct.basic_block_def* %85, i64 0, i32 11
  %86 = load i32* %index150, align 4, !tbaa !12
  %87 = load %struct.basic_block_def** %dest, align 8, !tbaa !16
  %index152 = getelementptr inbounds %struct.basic_block_def* %87, i64 0, i32 11
  %88 = load i32* %index152, align 4, !tbaa !12
  %call153 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([31 x i8]* @.str8, i64 0, i64 0), i32 %86, i32 %88) #4
  br label %if.end154

if.end154:                                        ; preds = %while.end145, %if.then148
  %89 = bitcast %struct.simple_bitmap_def* %call111 to i8*
  call void @free(i8* %89)
  br label %out

out:                                              ; preds = %if.end, %for.end, %if.end154
  %90 = bitcast %struct.simple_bitmap_def** %call16 to i8*
  call void @free(i8* %90)
  %91 = bitcast %struct.simple_bitmap_def** %call17 to i8*
  call void @free(i8* %91)
  br label %return

return:                                           ; preds = %entry, %while.end, %out
  ret void
}

declare void @partition_delete(%struct.partition_def*) #2

declare %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

declare void @commit_edge_insertions() #2

declare i32 @count_or_remove_death_notes(%struct.simple_bitmap_def*, i32) #2

; Function Attrs: nounwind uwtable
define i32 @for_each_successor_phi(%struct.basic_block_def* readonly %bb, i32 (%struct.rtx_def*, i32, i32, i8*)* nocapture %fn, i8* %data) #0 {
entry:
  %cmp = icmp eq %struct.basic_block_def* %bb, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %succ = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 5
  %e.071 = load %struct.edge_def** %succ, align 8
  %cmp172 = icmp eq %struct.edge_def* %e.071, null
  br i1 %cmp172, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %index = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 11
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc47
  %e.073 = phi %struct.edge_def* [ %e.071, %for.body.lr.ph ], [ %e.0, %for.inc47 ]
  %dest = getelementptr inbounds %struct.edge_def* %e.073, i64 0, i32 3
  %0 = load %struct.basic_block_def** %dest, align 8, !tbaa !16
  %cmp2 = icmp eq %struct.basic_block_def* %0, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0)
  %cmp3 = icmp eq %struct.basic_block_def* %0, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  %or.cond = or i1 %cmp2, %cmp3
  br i1 %or.cond, label %for.inc47, label %if.end5

if.end5:                                          ; preds = %for.body
  %call = tail call %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def* %0) #4
  %cmp6 = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp6, label %for.inc47, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end5, %for.inc
  %insn.0 = phi %struct.rtx_def* [ %18, %for.inc ], [ %call, %if.end5 ]
  %1 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp10 = icmp eq i32 %bf.clear, 32
  br i1 %cmp10, label %land.lhs.true11, label %for.inc47

land.lhs.true11:                                  ; preds = %land.lhs.true
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load12 = load i32* %3, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp eq i32 %bf.clear13, 47
  br i1 %cmp14, label %land.rhs, label %for.inc47

land.rhs:                                         ; preds = %land.lhs.true11
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx20, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load21 = load i32* %5, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 152
  br i1 %cmp23, label %for.body24, label %for.inc47

for.body24:                                       ; preds = %land.rhs
  %6 = load i32* %index, align 4, !tbaa !12
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !1
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %8 = load i32* %num_elem.i, align 4, !tbaa !10
  %conv.i = sext i32 %6 to i64
  %9 = sext i32 %8 to i64
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %for.body24
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ %9, %for.body24 ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -2
  %10 = trunc i64 %indvars.iv.next.i to i32
  %cmp.i = icmp sgt i32 %10, -1
  br i1 %cmp.i, label %for.body.i, label %for.inc

for.body.i:                                       ; preds = %for.cond.i
  %11 = add nsw i64 %indvars.iv.i, -1
  %arrayidx3.i = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 %11
  %12 = load %struct.rtx_def** %arrayidx3.i, align 8, !tbaa !1
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 1, i64 0, i32 0
  %13 = load i64* %rtwint.i, align 8, !tbaa !15
  %cmp6.i = icmp eq i64 %13, %conv.i
  br i1 %cmp6.i, label %if.end31, label %for.cond.i

if.end31:                                         ; preds = %for.body.i
  %sext.i = shl i64 %indvars.iv.next.i, 32
  %idxprom8.i = ashr exact i64 %sext.i, 32
  %arrayidx10.i = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 %idxprom8.i
  %14 = load %struct.rtx_def** %arrayidx10.i, align 8, !tbaa !1
  %arrayidx33 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx34, align 8, !tbaa !1
  %arrayidx36 = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx36 to i32*
  %16 = load i32* %rtuint, align 4, !tbaa !9
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 0
  %rtuint39 = bitcast %union.rtunion_def* %arrayidx38 to i32*
  %17 = load i32* %rtuint39, align 4, !tbaa !9
  %call40 = tail call i32 %fn(%struct.rtx_def* %insn.0, i32 %16, i32 %17, i8* %data) #4
  %cmp41 = icmp eq i32 %call40, 0
  br i1 %cmp41, label %for.inc, label %return

for.inc:                                          ; preds = %for.cond.i, %if.end31
  %arrayidx45 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 2
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx46, align 8, !tbaa !1
  %tobool.old = icmp eq %struct.rtx_def* %18, null
  br i1 %tobool.old, label %for.inc47, label %land.lhs.true

for.inc47:                                        ; preds = %for.inc, %land.rhs, %land.lhs.true11, %land.lhs.true, %if.end5, %for.body
  %succ_next = getelementptr inbounds %struct.edge_def* %e.073, i64 0, i32 1
  %e.0 = load %struct.edge_def** %succ_next, align 8
  %cmp1 = icmp eq %struct.edge_def* %e.0, null
  br i1 %cmp1, label %return, label %for.body

return:                                           ; preds = %for.inc47, %if.end31, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %if.end ], [ %call40, %if.end31 ], [ 0, %for.inc47 ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def*) #2

declare void @htab_delete(%struct.htab*) #2

declare %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #2

declare void @sbitmap_vector_zero(%struct.simple_bitmap_def**, i32) #2

; Function Attrs: nounwind uwtable
define internal fastcc i32* @ephi_forward(i32 %t, %struct.simple_bitmap_def* nocapture %visited, %struct.simple_bitmap_def** nocapture readonly %succ, i32* %tstack) #0 {
entry:
  %rem = and i32 %t, 63
  %sh_prom = zext i32 %rem to i64
  %shl = shl i64 1, %sh_prom
  %div = lshr i32 %t, 6
  %idxprom = zext i32 %div to i64
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def* %visited, i64 0, i32 3, i64 %idxprom
  %0 = load i64* %arrayidx, align 8, !tbaa !15
  %or = or i64 %0, %shl
  store i64 %or, i64* %arrayidx, align 8, !tbaa !15
  %idxprom1 = sext i32 %t to i64
  %arrayidx2 = getelementptr inbounds %struct.simple_bitmap_def** %succ, i64 %idxprom1
  %1 = load %struct.simple_bitmap_def** %arrayidx2, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.simple_bitmap_def* %1, i64 0, i32 1
  %2 = load i32* %size, align 4, !tbaa !18
  %cmp57 = icmp eq i32 %2, 0
  br i1 %cmp57, label %do.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc30
  %indvars.iv60 = phi i64 [ %indvars.iv.next61, %for.inc30 ], [ 0, %entry ]
  %tstack.addr.059 = phi i32* [ %tstack.addr.4, %for.inc30 ], [ %tstack, %entry ]
  %arrayidx7 = getelementptr inbounds %struct.simple_bitmap_def* %1, i64 0, i32 3, i64 %indvars.iv60
  %3 = load i64* %arrayidx7, align 8, !tbaa !15
  %cmp8 = icmp eq i64 %3, 0
  br i1 %cmp8, label %for.inc30, label %for.body11.preheader

for.body11.preheader:                             ; preds = %for.body
  %4 = trunc i64 %indvars.iv60 to i32
  %mul = shl i32 %4, 6
  br label %for.body11

for.body11:                                       ; preds = %for.body11.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body11.preheader ], [ %indvars.iv.next, %for.inc ]
  %word_.0 = phi i64 [ %3, %for.body11.preheader ], [ %word_.1, %for.inc ]
  %tstack.addr.1 = phi i32* [ %tstack.addr.059, %for.body11.preheader ], [ %tstack.addr.3, %for.inc ]
  %shl13 = shl i64 1, %indvars.iv
  %and = and i64 %shl13, %word_.0
  %cmp14 = icmp eq i64 %and, 0
  br i1 %cmp14, label %for.inc, label %if.then15

if.then15:                                        ; preds = %for.body11
  %neg = xor i64 %shl13, -1
  %and16 = and i64 %word_.0, %neg
  %5 = trunc i64 %indvars.iv to i32
  %add = add i32 %5, %mul
  %div17 = lshr i32 %add, 6
  %idxprom18 = zext i32 %div17 to i64
  %arrayidx20 = getelementptr inbounds %struct.simple_bitmap_def* %visited, i64 0, i32 3, i64 %idxprom18
  %6 = load i64* %arrayidx20, align 8, !tbaa !15
  %rem21 = and i32 %add, 63
  %sh_prom22 = zext i32 %rem21 to i64
  %7 = shl i64 1, %sh_prom22
  %and2356 = and i64 %6, %7
  %tobool = icmp eq i64 %and2356, 0
  br i1 %tobool, label %if.then24, label %if.end

if.then24:                                        ; preds = %if.then15
  %call = tail call fastcc i32* @ephi_forward(i32 %add, %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %succ, i32* %tstack.addr.1)
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then24
  %tstack.addr.2 = phi i32* [ %tstack.addr.1, %if.then15 ], [ %call, %if.then24 ]
  %cmp25 = icmp eq i64 %and16, 0
  br i1 %cmp25, label %for.inc30, label %for.inc

for.inc:                                          ; preds = %for.body11, %if.end
  %word_.1 = phi i64 [ %and16, %if.end ], [ %word_.0, %for.body11 ]
  %tstack.addr.3 = phi i32* [ %tstack.addr.2, %if.end ], [ %tstack.addr.1, %for.body11 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %8 = trunc i64 %indvars.iv.next to i32
  %cmp10.old = icmp ult i32 %8, 64
  br i1 %cmp10.old, label %for.body11, label %for.inc30

for.inc30:                                        ; preds = %if.end, %for.inc, %for.body
  %tstack.addr.4 = phi i32* [ %tstack.addr.059, %for.body ], [ %tstack.addr.2, %if.end ], [ %tstack.addr.3, %for.inc ]
  %indvars.iv.next61 = add nuw nsw i64 %indvars.iv60, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next61 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %2
  br i1 %exitcond, label %do.end, label %for.body

do.end:                                           ; preds = %for.inc30, %entry
  %tstack.addr.0.lcssa = phi i32* [ %tstack, %entry ], [ %tstack.addr.4, %for.inc30 ]
  %incdec.ptr = getelementptr inbounds i32* %tstack.addr.0.lcssa, i64 1
  store i32 %t, i32* %tstack.addr.0.lcssa, align 4, !tbaa !9
  ret i32* %incdec.ptr
}

declare void @start_sequence() #2

declare %struct.rtx_def* @gen_sequence() #2

declare void @end_sequence() #2

declare void @insert_insn_on_edge(%struct.rtx_def*, %struct.edge_def*) #2

declare %struct.rtx_def* @gen_reg_rtx(i32) #2

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @ephi_backward(i32 %t, %struct.simple_bitmap_def* nocapture %visited, %struct.simple_bitmap_def** nocapture readonly %pred, %struct.rtx_def** nocapture readonly %nodes) #0 {
entry:
  %rem = and i32 %t, 63
  %sh_prom = zext i32 %rem to i64
  %shl = shl i64 1, %sh_prom
  %div = lshr i32 %t, 6
  %idxprom = zext i32 %div to i64
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def* %visited, i64 0, i32 3, i64 %idxprom
  %0 = load i64* %arrayidx, align 8, !tbaa !15
  %or = or i64 %0, %shl
  store i64 %or, i64* %arrayidx, align 8, !tbaa !15
  %idxprom1 = sext i32 %t to i64
  %arrayidx2 = getelementptr inbounds %struct.simple_bitmap_def** %pred, i64 %idxprom1
  %1 = load %struct.simple_bitmap_def** %arrayidx2, align 8, !tbaa !1
  %size = getelementptr inbounds %struct.simple_bitmap_def* %1, i64 0, i32 1
  %2 = load i32* %size, align 4, !tbaa !18
  %cmp62 = icmp eq i32 %2, 0
  br i1 %cmp62, label %do.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %arrayidx28 = getelementptr inbounds %struct.rtx_def** %nodes, i64 %idxprom1
  br label %for.body

for.body:                                         ; preds = %for.inc34, %for.body.lr.ph
  %indvars.iv64 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next65, %for.inc34 ]
  %arrayidx7 = getelementptr inbounds %struct.simple_bitmap_def* %1, i64 0, i32 3, i64 %indvars.iv64
  %3 = load i64* %arrayidx7, align 8, !tbaa !15
  %cmp8 = icmp eq i64 %3, 0
  br i1 %cmp8, label %for.inc34, label %for.body11.preheader

for.body11.preheader:                             ; preds = %for.body
  %4 = trunc i64 %indvars.iv64 to i32
  %mul = shl i32 %4, 6
  br label %for.body11

for.body11:                                       ; preds = %for.body11.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body11.preheader ], [ %indvars.iv.next, %for.inc ]
  %word_.0 = phi i64 [ %3, %for.body11.preheader ], [ %word_.1, %for.inc ]
  %shl13 = shl i64 1, %indvars.iv
  %and = and i64 %shl13, %word_.0
  %cmp14 = icmp eq i64 %and, 0
  br i1 %cmp14, label %for.inc, label %if.then15

if.then15:                                        ; preds = %for.body11
  %neg = xor i64 %shl13, -1
  %and16 = and i64 %word_.0, %neg
  %5 = trunc i64 %indvars.iv to i32
  %add = add i32 %5, %mul
  %div17 = lshr i32 %add, 6
  %idxprom18 = zext i32 %div17 to i64
  %arrayidx20 = getelementptr inbounds %struct.simple_bitmap_def* %visited, i64 0, i32 3, i64 %idxprom18
  %6 = load i64* %arrayidx20, align 8, !tbaa !15
  %rem21 = and i32 %add, 63
  %sh_prom22 = zext i32 %rem21 to i64
  %7 = shl i64 1, %sh_prom22
  %and2361 = and i64 %6, %7
  %tobool = icmp eq i64 %and2361, 0
  br i1 %tobool, label %if.then24, label %if.end

if.then24:                                        ; preds = %if.then15
  tail call fastcc void @ephi_backward(i32 %add, %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %pred, %struct.rtx_def** %nodes)
  %idxprom25 = sext i32 %add to i64
  %arrayidx26 = getelementptr inbounds %struct.rtx_def** %nodes, i64 %idxprom25
  %8 = load %struct.rtx_def** %arrayidx26, align 8, !tbaa !1
  %9 = load %struct.rtx_def** %arrayidx28, align 8, !tbaa !1
  %call = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %8, %struct.rtx_def* %9) #4
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.then24
  %cmp29 = icmp eq i64 %and16, 0
  br i1 %cmp29, label %for.inc34, label %for.inc

for.inc:                                          ; preds = %for.body11, %if.end
  %word_.1 = phi i64 [ %and16, %if.end ], [ %word_.0, %for.body11 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = trunc i64 %indvars.iv.next to i32
  %cmp10.old = icmp ult i32 %10, 64
  br i1 %cmp10.old, label %for.body11, label %for.inc34

for.inc34:                                        ; preds = %if.end, %for.inc, %for.body
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next65 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %2
  br i1 %exitcond, label %do.end, label %for.body

do.end:                                           ; preds = %for.inc34, %entry
  ret void
}

declare i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @rename_equivalent_regs_in_insn(%struct.rtx_def** nocapture %ptr, i8* nocapture readonly %data) #0 {
entry:
  %srfp.i = alloca %struct.ssa_rename_from_pair, align 8
  %0 = load %struct.rtx_def** %ptr, align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 61, label %sw.bb
    i32 152, label %return
  ]

sw.bb:                                            ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !9
  %cmp1 = icmp ugt i32 %2, 52
  %3 = and i32 %2, -2
  %switch = icmp eq i32 %3, 16
  %or.cond = or i1 %cmp1, %switch
  br i1 %or.cond, label %if.then11, label %return

if.then11:                                        ; preds = %sw.bb
  %idxprom = zext i32 %2 to i64
  %elements = getelementptr inbounds i8* %data, i64 8
  %4 = bitcast i8* %elements to [1 x %struct.partition_elem]*
  %class_element = getelementptr inbounds [1 x %struct.partition_elem]* %4, i64 0, i64 %idxprom, i32 0
  %5 = load i32* %class_element, align 4, !tbaa !37
  %6 = bitcast %struct.ssa_rename_from_pair* %srfp.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %6) #4
  %reg1.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i, i64 0, i32 0
  store i32 %5, i32* %reg1.i, align 8, !tbaa !5
  %original.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i, i64 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %original.i, align 8, !tbaa !8
  %7 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %call.i = call i8* @htab_find_with_hash(%struct.htab* %7, i8* %6, i32 %5) #4
  %cmp.i = icmp eq i8* %call.i, null
  br i1 %cmp.i, label %if.else, label %ssa_rename_from_lookup.exit

ssa_rename_from_lookup.exit:                      ; preds = %if.then11
  %original2.i = getelementptr inbounds i8* %call.i, i64 8
  %8 = bitcast i8* %original2.i to %struct.rtx_def**
  %9 = load %struct.rtx_def** %8, align 8, !tbaa !8
  call void @llvm.lifetime.end(i64 16, i8* %6) #4
  %cmp16 = icmp eq %struct.rtx_def* %9, null
  br i1 %cmp16, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %ssa_rename_from_lookup.exit
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0
  %rtuint19 = bitcast %union.rtunion_def* %arrayidx18 to i32*
  %10 = load i32* %rtuint19, align 4, !tbaa !9
  %cmp20 = icmp ult i32 %10, 53
  br i1 %cmp20, label %if.then21, label %if.else

if.then21:                                        ; preds = %land.lhs.true
  %cmp25 = icmp eq i32 %10, %2
  br i1 %cmp25, label %return, label %if.then26

if.then26:                                        ; preds = %if.then21
  store %struct.rtx_def* %9, %struct.rtx_def** %ptr, align 8, !tbaa !1
  br label %return

if.else:                                          ; preds = %if.then11, %ssa_rename_from_lookup.exit, %land.lhs.true
  %cmp28 = icmp eq i32 %2, %5
  br i1 %cmp28, label %return, label %if.then29

if.then29:                                        ; preds = %if.else
  %idxprom30 = zext i32 %5 to i64
  %11 = load %struct.function** @cfun, align 8, !tbaa !1
  %emit = getelementptr inbounds %struct.function* %11, i64 0, i32 3
  %12 = load %struct.emit_status** %emit, align 8, !tbaa !24
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 12
  %13 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !27
  %arrayidx31 = getelementptr inbounds %struct.rtx_def** %13, i64 %idxprom30
  %14 = load %struct.rtx_def** %arrayidx31, align 8, !tbaa !1
  %bf.load32 = load i32* %1, align 8
  %15 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 0
  %bf.load34 = load i32* %15, align 8
  %bf.lshr60 = xor i32 %bf.load34, %bf.load32
  %16 = and i32 %bf.lshr60, 16711680
  %cmp37 = icmp eq i32 %16, 0
  br i1 %cmp37, label %if.end39, label %if.then38

if.then38:                                        ; preds = %if.then29
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 2008, i8* getelementptr inbounds ([31 x i8]* @__FUNCTION__.rename_equivalent_regs_in_insn, i64 0, i64 0)) #6
  unreachable

if.end39:                                         ; preds = %if.then29
  store %struct.rtx_def* %14, %struct.rtx_def** %ptr, align 8, !tbaa !1
  br label %return

sw.default:                                       ; preds = %if.end
  br label %return

return:                                           ; preds = %sw.bb, %if.end, %if.end39, %if.then26, %if.else, %if.then21, %entry, %sw.default
  %retval.0 = phi i32 [ 0, %sw.default ], [ 0, %entry ], [ -1, %if.then21 ], [ -1, %if.else ], [ -1, %if.then26 ], [ -1, %if.end39 ], [ -1, %if.end ], [ -1, %sw.bb ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

; Function Attrs: nounwind uwtable
define internal i32 @record_canonical_element_1(i8** nocapture readonly %srfp, i8* nocapture readonly %data) #0 {
entry:
  %0 = load i8** %srfp, align 8, !tbaa !1
  %reg1 = bitcast i8* %0 to i32*
  %1 = load i32* %reg1, align 4, !tbaa !5
  %canonical_elements2 = bitcast i8* %data to %struct.simple_bitmap_def**
  %2 = load %struct.simple_bitmap_def** %canonical_elements2, align 8, !tbaa !43
  %reg_partition3 = getelementptr inbounds i8* %data, i64 8
  %3 = bitcast i8* %reg_partition3 to %struct.partition_def**
  %4 = load %struct.partition_def** %3, align 8, !tbaa !45
  %idxprom = zext i32 %1 to i64
  %class_element = getelementptr inbounds %struct.partition_def* %4, i64 0, i32 1, i64 %idxprom, i32 0
  %5 = load i32* %class_element, align 4, !tbaa !37
  %rem = and i32 %5, 63
  %sh_prom = zext i32 %rem to i64
  %shl = shl i64 1, %sh_prom
  %div = lshr i32 %5, 6
  %idxprom8 = zext i32 %div to i64
  %arrayidx9 = getelementptr inbounds %struct.simple_bitmap_def* %2, i64 0, i32 3, i64 %idxprom8
  %6 = load i64* %arrayidx9, align 8, !tbaa !15
  %or = or i64 %shl, %6
  store i64 %or, i64* %arrayidx9, align 8, !tbaa !15
  ret i32 1
}

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

declare %struct.partition_def* @partition_new(i32) #2

declare %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def*) #2

declare void @bitmap_clear(%struct.bitmap_head_def*) #2

declare %struct.conflict_graph_def* @conflict_graph_compute(%struct.bitmap_head_def*, %struct.partition_def*) #2

declare void @conflict_graph_delete(%struct.conflict_graph_def*) #2

; Function Attrs: nounwind uwtable
define internal i32 @coalesce_reg_in_phi(%struct.rtx_def* nocapture readnone %insn, i32 %dest_regno, i32 %src_regno, i8* nocapture %data) #0 {
entry:
  %p = bitcast i8* %data to %struct.partition_def**
  %0 = load %struct.partition_def** %p, align 8, !tbaa !39
  %conflicts = getelementptr inbounds i8* %data, i64 8
  %1 = bitcast i8* %conflicts to %struct.conflict_graph_def**
  %2 = load %struct.conflict_graph_def** %1, align 8, !tbaa !41
  %call = tail call fastcc i32 @coalesce_if_unconflicting(%struct.partition_def* %0, %struct.conflict_graph_def* %2, i32 %dest_regno, i32 %src_regno)
  %changed = getelementptr inbounds i8* %data, i64 16
  %3 = bitcast i8* %changed to i32*
  %4 = load i32* %3, align 4, !tbaa !42
  %add = add nsw i32 %4, %call
  store i32 %add, i32* %3, align 4, !tbaa !42
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @coalesce_if_unconflicting(%struct.partition_def* %p, %struct.conflict_graph_def* %conflicts, i32 %reg1, i32 %reg2) #0 {
entry:
  %srfp.i.i24.i = alloca %struct.ssa_rename_from_pair, align 8
  %srfp.i.i.i = alloca %struct.ssa_rename_from_pair, align 8
  %cmp = icmp sgt i32 %reg1, 52
  %0 = and i32 %reg1, -2
  %switch = icmp eq i32 %0, 16
  %or.cond = or i1 %cmp, %switch
  br i1 %or.cond, label %lor.lhs.false4, label %return

lor.lhs.false4:                                   ; preds = %entry
  %cmp5 = icmp sgt i32 %reg2, 52
  %1 = and i32 %reg2, -2
  %switch54 = icmp eq i32 %1, 16
  %or.cond55 = or i1 %cmp5, %switch54
  br i1 %or.cond55, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false4
  %idxprom = sext i32 %reg1 to i64
  %class_element = getelementptr inbounds %struct.partition_def* %p, i64 0, i32 1, i64 %idxprom, i32 0
  %2 = load i32* %class_element, align 4, !tbaa !37
  %idxprom10 = sext i32 %reg2 to i64
  %class_element13 = getelementptr inbounds %struct.partition_def* %p, i64 0, i32 1, i64 %idxprom10, i32 0
  %3 = load i32* %class_element13, align 4, !tbaa !37
  %cmp14 = icmp eq i32 %2, %3
  br i1 %cmp14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end
  %4 = bitcast %struct.ssa_rename_from_pair* %srfp.i.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #4
  %reg1.i.i.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i.i, i64 0, i32 0
  store i32 %2, i32* %reg1.i.i.i, align 8, !tbaa !5
  %original.i.i.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i.i, i64 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %original.i.i.i, align 8, !tbaa !8
  %5 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %call.i.i.i = call i8* @htab_find_with_hash(%struct.htab* %5, i8* %4, i32 %2) #4
  %cmp.i.i.i = icmp eq i8* %call.i.i.i, null
  br i1 %cmp.i.i.i, label %original_register.exit.i, label %ssa_rename_from_lookup.exit.i.i

ssa_rename_from_lookup.exit.i.i:                  ; preds = %if.end16
  %original2.i.i.i = getelementptr inbounds i8* %call.i.i.i, i64 8
  %6 = bitcast i8* %original2.i.i.i to %struct.rtx_def**
  %7 = load %struct.rtx_def** %6, align 8, !tbaa !8
  call void @llvm.lifetime.end(i64 16, i8* %4) #4
  %cmp.i.i = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp.i.i, label %original_register.exit.i, label %cond.true.i.i

cond.true.i.i:                                    ; preds = %ssa_rename_from_lookup.exit.i.i
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtuint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to i32*
  %8 = load i32* %rtuint.i.i, align 4, !tbaa !9
  br label %original_register.exit.i

original_register.exit.i:                         ; preds = %cond.true.i.i, %ssa_rename_from_lookup.exit.i.i, %if.end16
  %cond.i.i = phi i32 [ %8, %cond.true.i.i ], [ %2, %ssa_rename_from_lookup.exit.i.i ], [ %2, %if.end16 ]
  %9 = bitcast %struct.ssa_rename_from_pair* %srfp.i.i24.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %9) #4
  %reg1.i.i25.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i24.i, i64 0, i32 0
  store i32 %3, i32* %reg1.i.i25.i, align 8, !tbaa !5
  %original.i.i26.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i.i24.i, i64 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %original.i.i26.i, align 8, !tbaa !8
  %10 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %call.i.i27.i = call i8* @htab_find_with_hash(%struct.htab* %10, i8* %9, i32 %3) #4
  %cmp.i.i28.i = icmp eq i8* %call.i.i27.i, null
  br i1 %cmp.i.i28.i, label %original_register.exit36.i, label %ssa_rename_from_lookup.exit.i31.i

ssa_rename_from_lookup.exit.i31.i:                ; preds = %original_register.exit.i
  %original2.i.i29.i = getelementptr inbounds i8* %call.i.i27.i, i64 8
  %11 = bitcast i8* %original2.i.i29.i to %struct.rtx_def**
  %12 = load %struct.rtx_def** %11, align 8, !tbaa !8
  call void @llvm.lifetime.end(i64 16, i8* %9) #4
  %cmp.i30.i = icmp eq %struct.rtx_def* %12, null
  br i1 %cmp.i30.i, label %original_register.exit36.i, label %cond.true.i34.i

cond.true.i34.i:                                  ; preds = %ssa_rename_from_lookup.exit.i31.i
  %arrayidx.i32.i = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 1, i64 0
  %rtuint.i33.i = bitcast %union.rtunion_def* %arrayidx.i32.i to i32*
  %13 = load i32* %rtuint.i33.i, align 4, !tbaa !9
  br label %original_register.exit36.i

original_register.exit36.i:                       ; preds = %cond.true.i34.i, %ssa_rename_from_lookup.exit.i31.i, %original_register.exit.i
  %cond.i35.i = phi i32 [ %13, %cond.true.i34.i ], [ %3, %ssa_rename_from_lookup.exit.i31.i ], [ %3, %original_register.exit.i ]
  %cmp.i = icmp slt i32 %cond.i.i, 53
  %cmp2.i = icmp slt i32 %cond.i35.i, 53
  %or.cond.i = and i1 %cmp.i, %cmp2.i
  %or.cond.not.i = xor i1 %or.cond.i, true
  %cmp4.i = icmp eq i32 %cond.i.i, %cond.i35.i
  %or.cond23.i = or i1 %cmp4.i, %or.cond.not.i
  br i1 %or.cond23.i, label %if.end.i, label %return

if.end.i:                                         ; preds = %original_register.exit36.i
  %cmp5.i = icmp sgt i32 %cond.i.i, 52
  %or.cond15.i = or i1 %cmp5.i, %cmp2.i
  %or.cond15.i.not = xor i1 %or.cond15.i, true
  %or.cond16.i = and i1 %cmp5.i, %cmp2.i
  %or.cond57 = or i1 %or.cond16.i, %or.cond15.i.not
  br i1 %or.cond57, label %return, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.end.i
  %call18 = call i32 @conflict_graph_conflict_p(%struct.conflict_graph_def* %conflicts, i32 %2, i32 %3) #4
  %tobool19 = icmp eq i32 %call18, 0
  br i1 %tobool19, label %if.end21, label %return

if.end21:                                         ; preds = %lor.lhs.false17
  %call22 = call i32 @partition_union(%struct.partition_def* %p, i32 %2, i32 %3) #4
  %idxprom23 = sext i32 %2 to i64
  %class_element26 = getelementptr inbounds %struct.partition_def* %p, i64 0, i32 1, i64 %idxprom23, i32 0
  %14 = load i32* %class_element26, align 4, !tbaa !37
  call void @conflict_graph_merge_regs(%struct.conflict_graph_def* %conflicts, i32 %14, i32 %2) #4
  call void @conflict_graph_merge_regs(%struct.conflict_graph_def* %conflicts, i32 %14, i32 %3) #4
  br label %return

return:                                           ; preds = %if.end.i, %original_register.exit36.i, %lor.lhs.false4, %entry, %lor.lhs.false17, %if.end, %if.end21
  %retval.0 = phi i32 [ 1, %if.end21 ], [ 0, %if.end ], [ 0, %lor.lhs.false17 ], [ 0, %entry ], [ 0, %lor.lhs.false4 ], [ 0, %original_register.exit36.i ], [ 0, %if.end.i ]
  ret i32 %retval.0
}

declare i32 @conflict_graph_conflict_p(%struct.conflict_graph_def*, i32, i32) #2

declare i32 @partition_union(%struct.partition_def*, i32, i32) #2

declare void @conflict_graph_merge_regs(%struct.conflict_graph_def*, i32, i32) #2

declare void @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @mark_reg_in_phi(%struct.rtx_def** nocapture readonly %ptr, i8* %data) #0 {
entry:
  %0 = load %struct.rtx_def** %ptr, align 8, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 61, label %sw.bb
    i32 54, label %sw.bb1
    i32 152, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry
  %2 = bitcast i8* %data to %struct.bitmap_head_def*
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %3 = load i32* %rtuint, align 4, !tbaa !9
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %2, i32 %3) #4
  br label %sw.bb1

sw.bb1:                                           ; preds = %entry, %entry, %sw.bb
  ret i32 0

sw.default:                                       ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1924, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.mark_reg_in_phi, i64 0, i64 0)) #6
  unreachable
}

declare %struct.varray_head_tag* @varray_init(i64, i64, i8*) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @rename_block(i32 %bb, i32* nocapture readonly %idom) #0 {
entry:
  %srfp.i = alloca %struct.ssa_rename_from_pair, align 8
  %context = alloca %struct.rename_context, align 8
  %idxprom = sext i32 %bb to i64
  %0 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %0, i64 0, i32 4
  %bb1 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb1, i64 0, i64 %idxprom
  %1 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %head = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 0
  %end = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 1
  %2 = load %struct.rtx_def** %end, align 8, !tbaa !20
  %done_renames = getelementptr inbounds %struct.rename_context* %context, i64 0, i32 1
  %new_renames = getelementptr inbounds %struct.rename_context* %context, i64 0, i32 0
  %current_insn = getelementptr inbounds %struct.rename_context* %context, i64 0, i32 2
  %3 = bitcast %struct.rename_context* %context to i8*
  br label %do.body

do.body:                                          ; preds = %if.end41, %entry
  %set_data.0 = phi %struct.rename_set_data* [ null, %entry ], [ %set_data.1, %if.end41 ]
  %next.0.in = phi %struct.rtx_def** [ %head, %entry ], [ %rtx44, %if.end41 ]
  %next.0 = load %struct.rtx_def** %next.0.in, align 8
  %4 = getelementptr inbounds %struct.rtx_def* %next.0, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom2227 = zext i32 %bf.clear to i64
  %arrayidx3 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom2227
  %5 = load i8* %arrayidx3, align 1, !tbaa !21
  %cmp = icmp eq i8 %5, 105
  br i1 %cmp, label %if.then, label %if.end41

if.then:                                          ; preds = %do.body
  store %struct.rename_set_data* %set_data.0, %struct.rename_set_data** %done_renames, align 8, !tbaa !47
  store %struct.rename_set_data* null, %struct.rename_set_data** %new_renames, align 8, !tbaa !49
  store %struct.rtx_def* %next.0, %struct.rtx_def** %current_insn, align 8, !tbaa !50
  call void @start_sequence() #4
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %next.0, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %call = call i32 @for_each_rtx(%struct.rtx_def** %rtx, i32 (%struct.rtx_def**, i8*)* @rename_insn_1, i8* %3) #4
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %next.0, i64 0, i32 1, i64 6
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %call9 = call i32 @for_each_rtx(%struct.rtx_def** %rtx8, i32 (%struct.rtx_def**, i8*)* @rename_insn_1, i8* %3) #4
  %call10 = call %struct.rtx_def* @get_insns() #4
  %cmp11 = icmp eq %struct.rtx_def* %call10, null
  br i1 %cmp11, label %if.end, label %if.then13

if.then13:                                        ; preds = %if.then
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call17 = call %struct.rtx_def* @emit(%struct.rtx_def* %6) #4
  %call18 = call %struct.rtx_def* @gen_sequence() #4
  %arrayidx20 = getelementptr inbounds %struct.rtx_def* %call18, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem277 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %8 = load i32* %num_elem277, align 4, !tbaa !10
  %cmp21278 = icmp sgt i32 %8, 0
  br i1 %cmp21278, label %for.body, label %for.end

for.body:                                         ; preds = %if.then13, %for.body
  %indvars.iv282 = phi i64 [ %indvars.iv.next283, %for.body ], [ 0, %if.then13 ]
  %9 = phi %struct.rtvec_def* [ %12, %for.body ], [ %7, %if.then13 ]
  %arrayidx27 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %indvars.iv282
  %10 = load %struct.rtx_def** %arrayidx27, align 8, !tbaa !1
  %arrayidx29 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 3
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx30, align 8, !tbaa !1
  store %struct.rtx_def* %11, %struct.rtx_def** %arrayidx27, align 8, !tbaa !1
  %indvars.iv.next283 = add nuw nsw i64 %indvars.iv282, 1
  %12 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 0
  %13 = load i32* %num_elem, align 4, !tbaa !10
  %14 = trunc i64 %indvars.iv.next283 to i32
  %cmp21 = icmp slt i32 %14, %13
  br i1 %cmp21, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %if.then13
  %15 = getelementptr inbounds %union.rtunion_def* %arrayidx5, i64 0, i32 0
  %call18.c = ptrtoint %struct.rtx_def* %call18 to i64
  store i64 %call18.c, i64* %15, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  call void @end_sequence() #4
  call fastcc void @apply_delayed_renames(%struct.rename_context* %context)
  %16 = load %struct.rename_set_data** %done_renames, align 8, !tbaa !47
  br label %if.end41

if.end41:                                         ; preds = %if.end, %do.body
  %set_data.1 = phi %struct.rename_set_data* [ %16, %if.end ], [ %set_data.0, %do.body ]
  %arrayidx43 = getelementptr inbounds %struct.rtx_def* %next.0, i64 0, i32 1, i64 2
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %cmp45 = icmp eq %struct.rtx_def* %next.0, %2
  br i1 %cmp45, label %do.end, label %do.body

do.end:                                           ; preds = %if.end41
  %succ = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 5
  %e.0274 = load %struct.edge_def** %succ, align 8
  %tobool275 = icmp eq %struct.edge_def* %e.0274, null
  br i1 %tobool275, label %for.cond146.preheader, label %for.body48.lr.ph

for.body48.lr.ph:                                 ; preds = %do.end
  %index.i = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 11
  %17 = bitcast %struct.ssa_rename_from_pair* %srfp.i to i8*
  %reg1.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i, i64 0, i32 0
  %original.i = getelementptr inbounds %struct.ssa_rename_from_pair* %srfp.i, i64 0, i32 1
  br label %for.body48

for.cond146.preheader:                            ; preds = %for.inc144, %do.end
  %18 = load i32* @n_basic_blocks, align 4, !tbaa !9
  %cmp147270 = icmp sgt i32 %18, 0
  br i1 %cmp147270, label %for.body149, label %while.cond159.preheader

for.body48:                                       ; preds = %for.body48.lr.ph, %for.inc144
  %e.0276 = phi %struct.edge_def* [ %e.0274, %for.body48.lr.ph ], [ %e.0, %for.inc144 ]
  %dest = getelementptr inbounds %struct.edge_def* %e.0276, i64 0, i32 3
  %19 = load %struct.basic_block_def** %dest, align 8, !tbaa !16
  %cmp49 = icmp eq %struct.basic_block_def* %19, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp49, label %for.inc144, label %if.end52

if.end52:                                         ; preds = %for.body48
  %call54 = call %struct.rtx_def* @first_insn_after_basic_block_note(%struct.basic_block_def* %19) #4
  %tobool55272 = icmp eq %struct.rtx_def* %call54, null
  br i1 %tobool55272, label %for.inc144, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end52, %if.end140
  %insn.0273 = phi %struct.rtx_def* [ %56, %if.end140 ], [ %call54, %if.end52 ]
  %20 = getelementptr inbounds %struct.rtx_def* %insn.0273, i64 0, i32 0
  %bf.load56 = load i32* %20, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 32
  br i1 %cmp58, label %land.lhs.true60, label %for.inc144

land.lhs.true60:                                  ; preds = %land.lhs.true
  %arrayidx62 = getelementptr inbounds %struct.rtx_def* %insn.0273, i64 0, i32 1, i64 3
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %21 = load %struct.rtx_def** %rtx63, align 8, !tbaa !1
  %22 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 0
  %bf.load64 = load i32* %22, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %cmp66 = icmp eq i32 %bf.clear65, 47
  br i1 %cmp66, label %land.rhs, label %for.inc144

land.rhs:                                         ; preds = %land.lhs.true60
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 1, i64 1
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  %23 = load %struct.rtx_def** %rtx73, align 8, !tbaa !1
  %24 = getelementptr inbounds %struct.rtx_def* %23, i64 0, i32 0
  %bf.load74 = load i32* %24, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 152
  br i1 %cmp76, label %while.body, label %for.inc144

while.body:                                       ; preds = %land.rhs
  %arrayidx82 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 1, i64 0
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %25 = load %struct.rtx_def** %rtx83, align 8, !tbaa !1
  %arrayidx85 = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx85 to i32*
  %26 = load i32* %rtuint, align 4, !tbaa !9
  %27 = load i32* @ssa_max_reg_num, align 4, !tbaa !9
  %cmp86 = icmp ult i32 %26, %27
  br i1 %cmp86, label %if.end93, label %if.then88

if.then88:                                        ; preds = %while.body
  call void @llvm.lifetime.start(i64 16, i8* %17) #4
  store i32 %26, i32* %reg1.i, align 8, !tbaa !5
  store %struct.rtx_def* null, %struct.rtx_def** %original.i, align 8, !tbaa !8
  %28 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %call.i = call i8* @htab_find_with_hash(%struct.htab* %28, i8* %17, i32 %26) #4
  %cmp.i = icmp eq i8* %call.i, null
  br i1 %cmp.i, label %if.then96, label %cond.false.i

cond.false.i:                                     ; preds = %if.then88
  %original2.i = getelementptr inbounds i8* %call.i, i64 8
  %29 = bitcast i8* %original2.i to %struct.rtx_def**
  %30 = load %struct.rtx_def** %29, align 8, !tbaa !8
  br label %if.end93

if.end93:                                         ; preds = %cond.false.i, %while.body
  %reg.0 = phi %struct.rtx_def* [ %25, %while.body ], [ %30, %cond.false.i ]
  %cmp94 = icmp eq %struct.rtx_def* %reg.0, null
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %if.then88, %if.end93
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1050, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.rename_block, i64 0, i64 0)) #6
  unreachable

if.end97:                                         ; preds = %if.end93
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %reg.0, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %31 = load i32* %rtuint.i, align 4, !tbaa !9
  %cmp.i228 = icmp ult i32 %31, 53
  br i1 %cmp.i228, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.end97
  %sub.i = add i32 %31, -53
  %idxprom.i = zext i32 %sub.i to i64
  %32 = load %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def** %32, i64 %idxprom.i
  br label %ssa_rename_to_lookup.exit

if.else.i:                                        ; preds = %if.end97
  %33 = getelementptr inbounds %struct.rtx_def* %reg.0, i64 0, i32 0
  %bf.load.i = load i32* %33, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %idxprom5.i = zext i32 %bf.clear.i to i64
  %idxprom9.i = zext i32 %31 to i64
  %arrayidx11.i = getelementptr inbounds [53 x [59 x %struct.rtx_def*]]* @ssa_rename_to_hard, i64 0, i64 %idxprom9.i, i64 %idxprom5.i
  br label %ssa_rename_to_lookup.exit

ssa_rename_to_lookup.exit:                        ; preds = %if.then.i, %if.else.i
  %retval.0.in.i = phi %struct.rtx_def** [ %arrayidx11.i, %if.else.i ], [ %arrayidx4.i, %if.then.i ]
  %retval.0.i = load %struct.rtx_def** %retval.0.in.i, align 8
  %cmp99 = icmp eq %struct.rtx_def* %retval.0.i, null
  %34 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8
  %cmp101 = icmp eq %struct.rtx_def* %retval.0.i, %34
  %or.cond = or i1 %cmp99, %cmp101
  br i1 %or.cond, label %if.then103, label %if.else

if.then103:                                       ; preds = %ssa_rename_to_lookup.exit
  %35 = load %struct.rtx_def** %rtx73, align 8, !tbaa !1
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtvec_def**
  %36 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !1
  %num_elem3.i = getelementptr inbounds %struct.rtvec_def* %36, i64 0, i32 0
  %37 = load i32* %num_elem3.i, align 4, !tbaa !10
  %sub.i230 = add i32 %37, -2
  %cmp47.i = icmp sgt i32 %sub.i230, -1
  br i1 %cmp47.i, label %for.body.lr.ph.i, label %if.then106

for.body.lr.ph.i:                                 ; preds = %if.then103
  %38 = load i32* %index.i, align 4, !tbaa !12
  %conv.i = sext i32 %38 to i64
  %39 = sext i32 %sub.i230 to i64
  br label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %cmp.i231 = icmp sgt i32 %sub31.i, -1
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -2
  br i1 %cmp.i231, label %for.body.i, label %if.then106

for.body.i:                                       ; preds = %for.cond.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ %39, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.cond.i ]
  %v.048.i = phi i32 [ %sub.i230, %for.body.lr.ph.i ], [ %sub31.i, %for.cond.i ]
  %40 = add nsw i64 %indvars.iv.i, 1
  %arrayidx4.i232 = getelementptr inbounds %struct.rtvec_def* %36, i64 0, i32 1, i64 %40
  %41 = load %struct.rtx_def** %arrayidx4.i232, align 8, !tbaa !1
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 1, i64 0, i32 0
  %42 = load i64* %rtwint.i, align 8, !tbaa !15
  %cmp7.i = icmp eq i64 %42, %conv.i
  %sub31.i = add nsw i32 %v.048.i, -2
  br i1 %cmp7.i, label %if.then.i233, label %for.cond.i

if.then.i233:                                     ; preds = %for.body.i
  %43 = trunc i64 %indvars.iv.i to i32
  %cmp10.i = icmp slt i32 %43, %sub.i230
  br i1 %cmp10.i, label %if.then12.i, label %remove_phi_alternative.exit

if.then12.i:                                      ; preds = %if.then.i233
  %arrayidx16.i = getelementptr inbounds %struct.rtvec_def* %36, i64 0, i32 1, i64 %39
  %44 = load %struct.rtx_def** %arrayidx16.i, align 8, !tbaa !1
  %sext.i = shl i64 %indvars.iv.i, 32
  %idxprom17.i = ashr exact i64 %sext.i, 32
  %arrayidx19.i = getelementptr inbounds %struct.rtvec_def* %36, i64 0, i32 1, i64 %idxprom17.i
  store %struct.rtx_def* %44, %struct.rtx_def** %arrayidx19.i, align 8, !tbaa !1
  %sub20.i = add nsw i32 %37, -1
  %idxprom21.i = sext i32 %sub20.i to i64
  %arrayidx23.i = getelementptr inbounds %struct.rtvec_def* %36, i64 0, i32 1, i64 %idxprom21.i
  %45 = load %struct.rtx_def** %arrayidx23.i, align 8, !tbaa !1
  store %struct.rtx_def* %45, %struct.rtx_def** %arrayidx4.i232, align 8, !tbaa !1
  br label %remove_phi_alternative.exit

remove_phi_alternative.exit:                      ; preds = %if.then.i233, %if.then12.i
  store i32 %sub.i230, i32* %num_elem3.i, align 4, !tbaa !10
  br label %if.end140

if.then106:                                       ; preds = %if.then103, %for.cond.i
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1059, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.rename_block, i64 0, i64 0)) #6
  unreachable

if.else:                                          ; preds = %ssa_rename_to_lookup.exit
  %46 = load %struct.rtx_def** %rtx83, align 8, !tbaa !1
  %47 = getelementptr inbounds %struct.rtx_def* %46, i64 0, i32 0
  %bf.load111 = load i32* %47, align 8
  %bf.lshr = lshr i32 %bf.load111, 16
  %bf.clear112 = and i32 %bf.lshr, 255
  %cmp113 = icmp eq i32 %bf.clear112, 0
  %48 = getelementptr inbounds %struct.rtx_def* %retval.0.i, i64 0, i32 0
  %bf.load116 = load i32* %48, align 8
  br i1 %cmp113, label %if.then115, label %if.else124

if.then115:                                       ; preds = %if.else
  %bf.clear118 = and i32 %bf.load116, 16711680
  %bf.clear123 = and i32 %bf.load111, -16711681
  %bf.set = or i32 %bf.clear118, %bf.clear123
  store i32 %bf.set, i32* %47, align 8
  br label %if.end138

if.else124:                                       ; preds = %if.else
  %bf.lshr132 = lshr i32 %bf.load116, 16
  %bf.clear133 = and i32 %bf.lshr132, 255
  %cmp134 = icmp eq i32 %bf.clear112, %bf.clear133
  br i1 %cmp134, label %if.end138, label %if.then136

if.then136:                                       ; preds = %if.else124
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1069, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.rename_block, i64 0, i64 0)) #6
  unreachable

if.end138:                                        ; preds = %if.else124, %if.then115
  %49 = load %struct.rtx_def** %rtx73, align 8, !tbaa !1
  %arrayidx2.i252 = getelementptr inbounds %struct.rtx_def* %49, i64 0, i32 1, i64 0
  %rtvec.i253 = bitcast %union.rtunion_def* %arrayidx2.i252 to %struct.rtvec_def**
  %50 = load %struct.rtvec_def** %rtvec.i253, align 8, !tbaa !1
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %50, i64 0, i32 0
  %51 = load i32* %num_elem.i, align 4, !tbaa !10
  %52 = sext i32 %51 to i64
  br label %for.cond.i258

for.cond.i258:                                    ; preds = %for.cond.i258, %if.end138
  %indvars.iv.i255 = phi i64 [ %indvars.iv.next.i256, %for.cond.i258 ], [ %52, %if.end138 ]
  %indvars.iv.next.i256 = add nsw i64 %indvars.iv.i255, -2
  %53 = add nsw i64 %indvars.iv.i255, -1
  %arrayidx3.i = getelementptr inbounds %struct.rtvec_def* %50, i64 0, i32 1, i64 %53
  %54 = load %struct.rtx_def** %arrayidx3.i, align 8, !tbaa !1
  %rtwint.i259 = getelementptr inbounds %struct.rtx_def* %54, i64 0, i32 1, i64 0, i32 0
  %55 = load i64* %rtwint.i259, align 8, !tbaa !15
  %cmp6.i = icmp eq i64 %55, %idxprom
  br i1 %cmp6.i, label %if.then.i262, label %for.cond.i258

if.then.i262:                                     ; preds = %for.cond.i258
  %sext.i261 = shl i64 %indvars.iv.next.i256, 32
  %idxprom8.i = ashr exact i64 %sext.i261, 32
  %arrayidx10.i = getelementptr inbounds %struct.rtvec_def* %50, i64 0, i32 1, i64 %idxprom8.i
  store %struct.rtx_def* %retval.0.i, %struct.rtx_def** %arrayidx10.i, align 8, !tbaa !1
  br label %if.end140

if.end140:                                        ; preds = %remove_phi_alternative.exit, %if.then.i262
  %arrayidx142 = getelementptr inbounds %struct.rtx_def* %insn.0273, i64 0, i32 1, i64 2
  %rtx143 = bitcast %union.rtunion_def* %arrayidx142 to %struct.rtx_def**
  %56 = load %struct.rtx_def** %rtx143, align 8, !tbaa !1
  %tobool55 = icmp eq %struct.rtx_def* %56, null
  br i1 %tobool55, label %for.inc144, label %land.lhs.true

for.inc144:                                       ; preds = %land.lhs.true, %land.lhs.true60, %land.rhs, %if.end140, %if.end52, %for.body48
  %succ_next = getelementptr inbounds %struct.edge_def* %e.0276, i64 0, i32 1
  %e.0 = load %struct.edge_def** %succ_next, align 8
  %tobool = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool, label %for.cond146.preheader, label %for.body48

while.cond159.preheader:                          ; preds = %for.inc156, %for.cond146.preheader
  %tobool160268 = icmp eq %struct.rename_set_data* %set_data.1, null
  br i1 %tobool160268, label %while.end171, label %while.body161

for.body149:                                      ; preds = %for.cond146.preheader, %for.inc156
  %57 = phi i32 [ %60, %for.inc156 ], [ %18, %for.cond146.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc156 ], [ 0, %for.cond146.preheader ]
  %arrayidx151 = getelementptr inbounds i32* %idom, i64 %indvars.iv
  %58 = load i32* %arrayidx151, align 4, !tbaa !9
  %cmp152 = icmp eq i32 %58, %bb
  br i1 %cmp152, label %if.then154, label %for.inc156

if.then154:                                       ; preds = %for.body149
  %59 = trunc i64 %indvars.iv to i32
  call fastcc void @rename_block(i32 %59, i32* %idom)
  %.pre = load i32* @n_basic_blocks, align 4, !tbaa !9
  br label %for.inc156

for.inc156:                                       ; preds = %for.body149, %if.then154
  %60 = phi i32 [ %57, %for.body149 ], [ %.pre, %if.then154 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %61 = trunc i64 %indvars.iv.next to i32
  %cmp147 = icmp slt i32 %61, %60
  br i1 %cmp147, label %for.body149, label %while.cond159.preheader

while.body161:                                    ; preds = %while.cond159.preheader, %ssa_rename_to_insert.exit
  %set_data.2269 = phi %struct.rename_set_data* [ %70, %ssa_rename_to_insert.exit ], [ %set_data.1, %while.cond159.preheader ]
  %reg_loc = getelementptr inbounds %struct.rename_set_data* %set_data.2269, i64 0, i32 1
  %62 = load %struct.rtx_def*** %reg_loc, align 8, !tbaa !51
  %63 = load %struct.rtx_def** %62, align 8, !tbaa !1
  %old_reg164 = getelementptr inbounds %struct.rename_set_data* %set_data.2269, i64 0, i32 2
  %64 = load %struct.rtx_def** %old_reg164, align 8, !tbaa !53
  %cmp165 = icmp eq %struct.rtx_def* %63, %64
  br i1 %cmp165, label %if.end168, label %if.then167

if.then167:                                       ; preds = %while.body161
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.rename_block, i64 0, i64 0)) #6
  unreachable

if.end168:                                        ; preds = %while.body161
  %new_reg = getelementptr inbounds %struct.rename_set_data* %set_data.2269, i64 0, i32 3
  %65 = load %struct.rtx_def** %new_reg, align 8, !tbaa !54
  store %struct.rtx_def* %65, %struct.rtx_def** %62, align 8, !tbaa !1
  %prev_reg = getelementptr inbounds %struct.rename_set_data* %set_data.2269, i64 0, i32 4
  %66 = load %struct.rtx_def** %prev_reg, align 8, !tbaa !55
  %arrayidx.i235 = getelementptr inbounds %struct.rtx_def* %63, i64 0, i32 1, i64 0
  %rtuint.i236 = bitcast %union.rtunion_def* %arrayidx.i235 to i32*
  %67 = load i32* %rtuint.i236, align 4, !tbaa !9
  %cmp.i237 = icmp ult i32 %67, 53
  br i1 %cmp.i237, label %if.else.i248, label %if.then.i241

if.then.i241:                                     ; preds = %if.end168
  %sub.i238 = add i32 %67, -53
  %idxprom.i239 = zext i32 %sub.i238 to i64
  %68 = load %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  %arrayidx4.i240 = getelementptr inbounds %struct.rtx_def** %68, i64 %idxprom.i239
  store %struct.rtx_def* %66, %struct.rtx_def** %arrayidx4.i240, align 8, !tbaa !1
  br label %ssa_rename_to_insert.exit

if.else.i248:                                     ; preds = %if.end168
  %69 = getelementptr inbounds %struct.rtx_def* %63, i64 0, i32 0
  %bf.load.i242 = load i32* %69, align 8
  %bf.lshr.i243 = lshr i32 %bf.load.i242, 16
  %bf.clear.i244 = and i32 %bf.lshr.i243, 255
  %idxprom5.i245 = zext i32 %bf.clear.i244 to i64
  %idxprom9.i246 = zext i32 %67 to i64
  %arrayidx11.i247 = getelementptr inbounds [53 x [59 x %struct.rtx_def*]]* @ssa_rename_to_hard, i64 0, i64 %idxprom9.i246, i64 %idxprom5.i245
  store %struct.rtx_def* %66, %struct.rtx_def** %arrayidx11.i247, align 8, !tbaa !1
  br label %ssa_rename_to_insert.exit

ssa_rename_to_insert.exit:                        ; preds = %if.then.i241, %if.else.i248
  %next170 = getelementptr inbounds %struct.rename_set_data* %set_data.2269, i64 0, i32 0
  %70 = load %struct.rename_set_data** %next170, align 8, !tbaa !56
  %71 = bitcast %struct.rename_set_data* %set_data.2269 to i8*
  call void @free(i8* %71)
  %tobool160 = icmp eq %struct.rename_set_data* %70, null
  br i1 %tobool160, label %while.end171, label %while.body161

while.end171:                                     ; preds = %ssa_rename_to_insert.exit, %while.cond159.preheader
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @rename_insn_1(%struct.rtx_def** nocapture %ptr, i8* %data) #0 {
entry:
  %i = alloca %struct.rtx_def*, align 8
  %0 = load %struct.rtx_def** %ptr, align 8, !tbaa !1
  %1 = bitcast i8* %data to %struct.rename_context*
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 47, label %sw.bb
    i32 61, label %sw.bb166
    i32 49, label %sw.bb210
    i32 152, label %return
  ]

sw.bb:                                            ; preds = %if.end
  %fld = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load4 = load i32* %4, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 63
  br i1 %cmp6, label %land.lhs.true, label %if.end61

land.lhs.true:                                    ; preds = %sw.bb
  %bf.lshr = lshr i32 %bf.load4, 16
  %bf.clear8 = and i32 %bf.lshr, 255
  %idxprom315 = zext i32 %bf.clear8 to i64
  %arrayidx9 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom315
  %5 = load i8* %arrayidx9, align 1, !tbaa !21
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx12, align 8, !tbaa !1
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load13 = load i32* %7, align 8
  %bf.lshr14 = lshr i32 %bf.load13, 16
  %bf.clear15 = and i32 %bf.lshr14, 255
  %idxprom16316 = zext i32 %bf.clear15 to i64
  %arrayidx17 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom16316
  %8 = load i8* %arrayidx17, align 1, !tbaa !21
  %cmp19 = icmp ugt i8 %5, %8
  %bf.clear26 = and i32 %bf.load13, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 61
  %or.cond = and i1 %cmp19, %cmp27
  br i1 %or.cond, label %land.lhs.true29, label %if.end61

land.lhs.true29:                                  ; preds = %land.lhs.true
  %arrayidx34 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx34 to i32*
  %9 = load i32* %rtuint, align 4, !tbaa !9
  %cmp35 = icmp ugt i32 %9, 52
  %10 = and i32 %9, -2
  %switch = icmp eq i32 %10, 16
  %or.cond334 = or i1 %cmp35, %switch
  %. = select i1 %or.cond334, %struct.rtx_def* %6, %struct.rtx_def* %3
  %rtx12.rtx = select i1 %or.cond334, %struct.rtx_def** %rtx12, %struct.rtx_def** %rtx
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %., i64 0, i32 0
  %bf.load62.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end61

if.end61:                                         ; preds = %land.lhs.true29, %land.lhs.true, %sw.bb
  %bf.load62 = phi i32 [ %bf.load4, %land.lhs.true ], [ %bf.load4, %sw.bb ], [ %bf.load62.pre, %land.lhs.true29 ]
  %dest.0 = phi %struct.rtx_def* [ %3, %land.lhs.true ], [ %3, %sw.bb ], [ %., %land.lhs.true29 ]
  %destp.0 = phi %struct.rtx_def** [ %rtx, %land.lhs.true ], [ %rtx, %sw.bb ], [ %rtx12.rtx, %land.lhs.true29 ]
  %bf.clear63 = and i32 %bf.load62, 65535
  switch i32 %bf.clear63, label %return [
    i32 64, label %while.cond
    i32 63, label %while.cond
    i32 132, label %while.cond
    i32 133, label %while.cond
    i32 61, label %land.lhs.true135
  ]

while.cond:                                       ; preds = %if.end61, %if.end61, %if.end61, %if.end61, %while.body
  %bf.load82 = phi i32 [ %bf.load82.pre, %while.body ], [ %bf.load62, %if.end61 ], [ %bf.load62, %if.end61 ], [ %bf.load62, %if.end61 ], [ %bf.load62, %if.end61 ]
  %reg.0 = phi %struct.rtx_def* [ %11, %while.body ], [ %dest.0, %if.end61 ], [ %dest.0, %if.end61 ], [ %dest.0, %if.end61 ], [ %dest.0, %if.end61 ]
  %bf.clear83 = and i32 %bf.load82, 65535
  switch i32 %bf.clear83, label %return [
    i32 64, label %while.body
    i32 63, label %while.body
    i32 132, label %while.body
    i32 133, label %while.body
    i32 61, label %land.lhs.true107
  ]

while.body:                                       ; preds = %while.cond, %while.cond, %while.cond, %while.cond
  %arrayidx101 = getelementptr inbounds %struct.rtx_def* %reg.0, i64 0, i32 1, i64 0
  %rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx102, align 8, !tbaa !1
  %.phi.trans.insert375 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load82.pre = load i32* %.phi.trans.insert375, align 8
  br label %while.cond

land.lhs.true107:                                 ; preds = %while.cond
  %arrayidx109 = getelementptr inbounds %struct.rtx_def* %reg.0, i64 0, i32 1, i64 0
  %rtuint110 = bitcast %union.rtunion_def* %arrayidx109 to i32*
  %12 = load i32* %rtuint110, align 4, !tbaa !9
  %cmp111 = icmp ugt i32 %12, 52
  %13 = and i32 %12, -2
  %switch336 = icmp eq i32 %13, 16
  %or.cond337 = or i1 %cmp111, %switch336
  br i1 %or.cond337, label %if.then125, label %return

if.then125:                                       ; preds = %land.lhs.true107
  %new_renames = bitcast i8* %data to %struct.rename_set_data**
  %14 = load %struct.rename_set_data** %new_renames, align 8, !tbaa !49
  store %struct.rename_set_data* null, %struct.rename_set_data** %new_renames, align 8, !tbaa !49
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %reg.0, %struct.rtx_def* %reg.0) #4
  %call127 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call) #4
  store %struct.rtx_def* %call127, %struct.rtx_def** %i, align 8, !tbaa !1
  %call128 = call i32 @for_each_rtx(%struct.rtx_def** %i, i32 (%struct.rtx_def**, i8*)* @rename_insn_1, i8* %data) #4
  call fastcc void @apply_delayed_renames(%struct.rename_context* %1)
  store %struct.rename_set_data* %14, %struct.rename_set_data** %new_renames, align 8, !tbaa !49
  br label %return

land.lhs.true135:                                 ; preds = %if.end61
  %arrayidx137 = getelementptr inbounds %struct.rtx_def* %dest.0, i64 0, i32 1, i64 0
  %rtuint138 = bitcast %union.rtunion_def* %arrayidx137 to i32*
  %15 = load i32* %rtuint138, align 4, !tbaa !9
  %cmp139 = icmp ugt i32 %15, 52
  %16 = and i32 %15, -2
  %switch339 = icmp eq i32 %16, 16
  %or.cond340 = or i1 %cmp139, %switch339
  br i1 %or.cond340, label %if.then153, label %return

if.then153:                                       ; preds = %land.lhs.true135
  %call.i = call noalias i8* @xmalloc(i64 48) #4
  %17 = bitcast i8* %call.i to %struct.rename_set_data*
  %18 = load %struct.rtx_def** %destp.0, align 8, !tbaa !1
  %19 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 0
  %bf.load.i = load i32* %19, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 61
  br i1 %cmp.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %if.then153
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %20 = load i32* %rtuint.i, align 4, !tbaa !9
  %cmp1.i = icmp ugt i32 %20, 52
  %21 = and i32 %20, -2
  %switch.i = icmp eq i32 %21, 16
  %or.cond.i = or i1 %cmp1.i, %switch.i
  br i1 %or.cond.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %lor.lhs.false.i, %if.then153
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 746, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.create_delayed_rename, i64 0, i64 0)) #6
  unreachable

if.end.i:                                         ; preds = %lor.lhs.false.i
  %reg_loc12.i = getelementptr inbounds i8* %call.i, i64 8
  %22 = bitcast i8* %reg_loc12.i to %struct.rtx_def***
  store %struct.rtx_def** %destp.0, %struct.rtx_def*** %22, align 8, !tbaa !51
  %old_reg.i = getelementptr inbounds i8* %call.i, i64 16
  %23 = bitcast i8* %old_reg.i to %struct.rtx_def**
  store %struct.rtx_def* %18, %struct.rtx_def** %23, align 8, !tbaa !53
  %cmp.i.i = icmp ult i32 %20, 53
  br i1 %cmp.i.i, label %if.else.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end.i
  %sub.i.i = add i32 %20, -53
  %idxprom.i.i = zext i32 %sub.i.i to i64
  %24 = load %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  %arrayidx4.i.i = getelementptr inbounds %struct.rtx_def** %24, i64 %idxprom.i.i
  br label %create_delayed_rename.exit

if.else.i.i:                                      ; preds = %if.end.i
  %bf.load.i.i = load i32* %19, align 8
  %bf.lshr.i.i = lshr i32 %bf.load.i.i, 16
  %bf.clear.i.i = and i32 %bf.lshr.i.i, 255
  %idxprom5.i.i = zext i32 %bf.clear.i.i to i64
  %idxprom9.i.i = zext i32 %20 to i64
  %arrayidx11.i.i = getelementptr inbounds [53 x [59 x %struct.rtx_def*]]* @ssa_rename_to_hard, i64 0, i64 %idxprom9.i.i, i64 %idxprom5.i.i
  br label %create_delayed_rename.exit

create_delayed_rename.exit:                       ; preds = %if.then.i.i, %if.else.i.i
  %retval.0.in.i.i = phi %struct.rtx_def** [ %arrayidx11.i.i, %if.else.i.i ], [ %arrayidx4.i.i, %if.then.i.i ]
  %retval.0.i.i = load %struct.rtx_def** %retval.0.in.i.i, align 8
  %prev_reg.i = getelementptr inbounds i8* %call.i, i64 32
  %25 = bitcast i8* %prev_reg.i to %struct.rtx_def**
  store %struct.rtx_def* %retval.0.i.i, %struct.rtx_def** %25, align 8, !tbaa !55
  %current_insn.i = getelementptr inbounds i8* %data, i64 16
  %26 = bitcast i8* %current_insn.i to %struct.rtx_def**
  %27 = load %struct.rtx_def** %26, align 8, !tbaa !50
  %set_insn.i = getelementptr inbounds i8* %call.i, i64 40
  %28 = bitcast i8* %set_insn.i to %struct.rtx_def**
  store %struct.rtx_def* %27, %struct.rtx_def** %28, align 8, !tbaa !57
  %new_renames.i = bitcast i8* %data to %struct.rename_set_data**
  %29 = load %struct.rename_set_data** %new_renames.i, align 8, !tbaa !49
  %next.i = bitcast i8* %call.i to %struct.rename_set_data**
  store %struct.rename_set_data* %29, %struct.rename_set_data** %next.i, align 8, !tbaa !56
  store %struct.rename_set_data* %17, %struct.rename_set_data** %new_renames.i, align 8, !tbaa !49
  %bf.load154 = load i32* %2, align 8
  %bf.clear155 = and i32 %bf.load154, 65535
  %cmp156 = icmp eq i32 %bf.clear155, 47
  br i1 %cmp156, label %if.then158, label %return

if.then158:                                       ; preds = %create_delayed_rename.exit
  %arrayidx160 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx161 = bitcast %union.rtunion_def* %arrayidx160 to %struct.rtx_def**
  %call162 = call i32 @for_each_rtx(%struct.rtx_def** %rtx161, i32 (%struct.rtx_def**, i8*)* @rename_insn_1, i8* %data) #4
  br label %return

sw.bb166:                                         ; preds = %if.end
  %arrayidx168 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint169 = bitcast %union.rtunion_def* %arrayidx168 to i32*
  %30 = load i32* %rtuint169, align 4, !tbaa !9
  %cmp170 = icmp ugt i32 %30, 52
  %31 = and i32 %30, -2
  %switch342 = icmp eq i32 %31, 16
  %or.cond343 = or i1 %cmp170, %switch342
  %32 = load i32* @ssa_max_reg_num, align 4
  %cmp188 = icmp ult i32 %30, %32
  %or.cond370 = and i1 %or.cond343, %cmp188
  br i1 %or.cond370, label %if.then190, label %return

if.then190:                                       ; preds = %sw.bb166
  %cmp.i349 = icmp ult i32 %30, 53
  br i1 %cmp.i349, label %if.else.i, label %if.then.i350

if.then.i350:                                     ; preds = %if.then190
  %sub.i = add i32 %30, -53
  %idxprom.i = zext i32 %sub.i to i64
  %33 = load %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def** %33, i64 %idxprom.i
  br label %ssa_rename_to_lookup.exit

if.else.i:                                        ; preds = %if.then190
  %bf.lshr.i = lshr i32 %bf.load, 16
  %bf.clear.i352 = and i32 %bf.lshr.i, 255
  %idxprom5.i = zext i32 %bf.clear.i352 to i64
  %idxprom9.i = zext i32 %30 to i64
  %arrayidx11.i = getelementptr inbounds [53 x [59 x %struct.rtx_def*]]* @ssa_rename_to_hard, i64 0, i64 %idxprom9.i, i64 %idxprom5.i
  br label %ssa_rename_to_lookup.exit

ssa_rename_to_lookup.exit:                        ; preds = %if.then.i350, %if.else.i
  %retval.0.in.i = phi %struct.rtx_def** [ %arrayidx11.i, %if.else.i ], [ %arrayidx4.i, %if.then.i350 ]
  %retval.0.i = load %struct.rtx_def** %retval.0.in.i, align 8
  %cmp192 = icmp eq %struct.rtx_def* %retval.0.i, null
  %34 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8
  %cmp195 = icmp eq %struct.rtx_def* %retval.0.i, %34
  %or.cond326 = or i1 %cmp192, %cmp195
  br i1 %or.cond326, label %return, label %if.then197

if.then197:                                       ; preds = %ssa_rename_to_lookup.exit
  %35 = getelementptr inbounds %struct.rtx_def* %retval.0.i, i64 0, i32 0
  %bf.load201 = load i32* %35, align 8
  %bf.lshr199317 = xor i32 %bf.load201, %bf.load
  %36 = and i32 %bf.lshr199317, 16711680
  %cmp204 = icmp eq i32 %36, 0
  br i1 %cmp204, label %if.end207, label %if.then206

if.then206:                                       ; preds = %if.then197
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 927, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.rename_insn_1, i64 0, i64 0)) #6
  unreachable

if.end207:                                        ; preds = %if.then197
  store %struct.rtx_def* %retval.0.i, %struct.rtx_def** %ptr, align 8, !tbaa !1
  br label %return

sw.bb210:                                         ; preds = %if.end
  %arrayidx213 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx214 = bitcast %union.rtunion_def* %arrayidx213 to %struct.rtx_def**
  %37 = load %struct.rtx_def** %rtx214, align 8, !tbaa !1
  %38 = getelementptr inbounds %struct.rtx_def* %37, i64 0, i32 0
  %bf.load215 = load i32* %38, align 8
  %bf.clear216 = and i32 %bf.load215, 65535
  %cmp217 = icmp eq i32 %bf.clear216, 61
  br i1 %cmp217, label %if.then219, label %return

if.then219:                                       ; preds = %sw.bb210
  %arrayidx221 = getelementptr inbounds %struct.rtx_def* %37, i64 0, i32 1, i64 0
  %rtuint222 = bitcast %union.rtunion_def* %arrayidx221 to i32*
  %39 = load i32* %rtuint222, align 4, !tbaa !9
  %cmp223 = icmp ugt i32 %39, 52
  %40 = and i32 %39, -2
  %switch345 = icmp eq i32 %40, 16
  %or.cond346 = or i1 %cmp223, %switch345
  %41 = load i32* @ssa_max_reg_num, align 4
  %cmp241 = icmp ult i32 %39, %41
  %or.cond371 = and i1 %or.cond346, %cmp241
  br i1 %or.cond371, label %if.then243, label %return

if.then243:                                       ; preds = %if.then219
  %cmp.i355 = icmp ult i32 %39, 53
  br i1 %cmp.i355, label %if.else.i366, label %if.then.i359

if.then.i359:                                     ; preds = %if.then243
  %sub.i356 = add i32 %39, -53
  %idxprom.i357 = zext i32 %sub.i356 to i64
  %42 = load %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  %arrayidx4.i358 = getelementptr inbounds %struct.rtx_def** %42, i64 %idxprom.i357
  br label %ssa_rename_to_lookup.exit369

if.else.i366:                                     ; preds = %if.then243
  %bf.lshr.i361 = lshr i32 %bf.load215, 16
  %bf.clear.i362 = and i32 %bf.lshr.i361, 255
  %idxprom5.i363 = zext i32 %bf.clear.i362 to i64
  %idxprom9.i364 = zext i32 %39 to i64
  %arrayidx11.i365 = getelementptr inbounds [53 x [59 x %struct.rtx_def*]]* @ssa_rename_to_hard, i64 0, i64 %idxprom9.i364, i64 %idxprom5.i363
  br label %ssa_rename_to_lookup.exit369

ssa_rename_to_lookup.exit369:                     ; preds = %if.then.i359, %if.else.i366
  %retval.0.in.i367 = phi %struct.rtx_def** [ %arrayidx11.i365, %if.else.i366 ], [ %arrayidx4.i358, %if.then.i359 ]
  %retval.0.i368 = load %struct.rtx_def** %retval.0.in.i367, align 8
  %cmp246 = icmp eq %struct.rtx_def* %retval.0.i368, null
  %43 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8
  %cmp249 = icmp eq %struct.rtx_def* %retval.0.i368, %43
  %or.cond329 = or i1 %cmp246, %cmp249
  br i1 %or.cond329, label %return, label %if.then251

if.then251:                                       ; preds = %ssa_rename_to_lookup.exit369
  %44 = getelementptr inbounds %union.rtunion_def* %arrayidx213, i64 0, i32 0
  %call245.c = ptrtoint %struct.rtx_def* %retval.0.i368 to i64
  store i64 %call245.c, i64* %44, align 8, !tbaa !1
  br label %return

sw.default:                                       ; preds = %if.end
  br label %return

return:                                           ; preds = %while.cond, %if.then219, %sw.bb166, %land.lhs.true135, %land.lhs.true107, %if.end, %sw.bb210, %if.then251, %ssa_rename_to_lookup.exit369, %if.end207, %ssa_rename_to_lookup.exit, %if.then125, %if.end61, %create_delayed_rename.exit, %if.then158, %entry, %sw.default
  %retval.0 = phi i32 [ 0, %sw.default ], [ 0, %entry ], [ -1, %if.then158 ], [ -1, %create_delayed_rename.exit ], [ 0, %if.end61 ], [ 0, %if.then125 ], [ -1, %ssa_rename_to_lookup.exit ], [ -1, %if.end207 ], [ -1, %ssa_rename_to_lookup.exit369 ], [ -1, %if.then251 ], [ 0, %sw.bb210 ], [ -1, %if.end ], [ 0, %land.lhs.true107 ], [ 0, %land.lhs.true135 ], [ -1, %sw.bb166 ], [ -1, %if.then219 ], [ 0, %while.cond ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @emit(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @apply_delayed_renames(%struct.rename_context* nocapture %c) #0 {
entry:
  %new_renames = getelementptr inbounds %struct.rename_context* %c, i64 0, i32 0
  %r.076 = load %struct.rename_set_data** %new_renames, align 8
  %cmp77 = icmp eq %struct.rename_set_data* %r.076, null
  br i1 %cmp77, label %if.end34, label %for.body

for.body:                                         ; preds = %entry, %ssa_rename_from_insert.exit
  %r.078 = phi %struct.rename_set_data* [ %r.0, %ssa_rename_from_insert.exit ], [ %r.076, %entry ]
  %old_reg = getelementptr inbounds %struct.rename_set_data* %r.078, i64 0, i32 2
  %0 = load %struct.rtx_def** %old_reg, align 8, !tbaa !53
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %1 = load i32* %rtuint.i, align 4, !tbaa !9
  %cmp.i = icmp ult i32 %1, 53
  br i1 %cmp.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %for.body
  %sub.i = add i32 %1, -53
  %idxprom.i = zext i32 %sub.i to i64
  %2 = load %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def** %2, i64 %idxprom.i
  br label %ssa_rename_to_lookup.exit

if.else.i:                                        ; preds = %for.body
  %3 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load.i = load i32* %3, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %idxprom5.i = zext i32 %bf.clear.i to i64
  %idxprom9.i = zext i32 %1 to i64
  %arrayidx11.i = getelementptr inbounds [53 x [59 x %struct.rtx_def*]]* @ssa_rename_to_hard, i64 0, i64 %idxprom9.i, i64 %idxprom5.i
  br label %ssa_rename_to_lookup.exit

ssa_rename_to_lookup.exit:                        ; preds = %if.then.i, %if.else.i
  %retval.0.in.i = phi %struct.rtx_def** [ %arrayidx11.i, %if.else.i ], [ %arrayidx4.i, %if.then.i ]
  %retval.0.i = load %struct.rtx_def** %retval.0.in.i, align 8
  %prev_reg = getelementptr inbounds %struct.rename_set_data* %r.078, i64 0, i32 4
  %4 = load %struct.rtx_def** %prev_reg, align 8, !tbaa !55
  %cmp1 = icmp eq %struct.rtx_def* %retval.0.i, %4
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %ssa_rename_to_lookup.exit
  tail call void @fancy_abort(i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0), i32 782, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.apply_delayed_renames, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %ssa_rename_to_lookup.exit
  %cmp3.not = icmp ne %struct.rtx_def* %retval.0.i, null
  %brmerge = or i1 %cmp3.not, %cmp.i
  br i1 %brmerge, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.end
  %new_reg = getelementptr inbounds %struct.rename_set_data* %r.078, i64 0, i32 3
  store %struct.rtx_def* %0, %struct.rtx_def** %new_reg, align 8, !tbaa !54
  %5 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !1
  store %struct.rtx_def* %5, %struct.rtx_def** %prev_reg, align 8, !tbaa !55
  br label %if.end12

if.else:                                          ; preds = %if.end
  %6 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %6, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call10 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear) #4
  %new_reg11 = getelementptr inbounds %struct.rename_set_data* %r.078, i64 0, i32 3
  store %struct.rtx_def* %call10, %struct.rtx_def** %new_reg11, align 8, !tbaa !54
  %arrayidx15.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %call10, i64 0, i32 1, i64 0
  %rtuint16.phi.trans.insert = bitcast %union.rtunion_def* %arrayidx15.phi.trans.insert to i32*
  %.pre = load i32* %rtuint16.phi.trans.insert, align 4, !tbaa !9
  %.pre80 = load %struct.rtx_def** %old_reg, align 8, !tbaa !53
  %arrayidx.i61.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %.pre80, i64 0, i32 1, i64 0
  %rtuint.i62.phi.trans.insert = bitcast %union.rtunion_def* %arrayidx.i61.phi.trans.insert to i32*
  %.pre81 = load i32* %rtuint.i62.phi.trans.insert, align 4, !tbaa !9
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then6
  %7 = phi i32 [ %.pre81, %if.else ], [ %1, %if.then6 ]
  %8 = phi %struct.rtx_def* [ %.pre80, %if.else ], [ %0, %if.then6 ]
  %9 = phi i32 [ %.pre, %if.else ], [ %1, %if.then6 ]
  %10 = phi %struct.rtx_def* [ %call10, %if.else ], [ %0, %if.then6 ]
  %cmp.i63 = icmp ult i32 %7, 53
  br i1 %cmp.i63, label %if.else.i74, label %if.then.i67

if.then.i67:                                      ; preds = %if.end12
  %sub.i64 = add i32 %7, -53
  %idxprom.i65 = zext i32 %sub.i64 to i64
  %11 = load %struct.rtx_def*** @ssa_rename_to_pseudo, align 8, !tbaa !1
  %arrayidx4.i66 = getelementptr inbounds %struct.rtx_def** %11, i64 %idxprom.i65
  store %struct.rtx_def* %10, %struct.rtx_def** %arrayidx4.i66, align 8, !tbaa !1
  br label %ssa_rename_to_insert.exit

if.else.i74:                                      ; preds = %if.end12
  %12 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load.i68 = load i32* %12, align 8
  %bf.lshr.i69 = lshr i32 %bf.load.i68, 16
  %bf.clear.i70 = and i32 %bf.lshr.i69, 255
  %idxprom5.i71 = zext i32 %bf.clear.i70 to i64
  %idxprom9.i72 = zext i32 %7 to i64
  %arrayidx11.i73 = getelementptr inbounds [53 x [59 x %struct.rtx_def*]]* @ssa_rename_to_hard, i64 0, i64 %idxprom9.i72, i64 %idxprom5.i71
  store %struct.rtx_def* %10, %struct.rtx_def** %arrayidx11.i73, align 8, !tbaa !1
  br label %ssa_rename_to_insert.exit

ssa_rename_to_insert.exit:                        ; preds = %if.then.i67, %if.else.i74
  %13 = load %struct.varray_head_tag** @ssa_definition, align 8, !tbaa !1
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %13, i64 0, i32 0
  %14 = load i64* %num_elements, align 8, !tbaa !29
  %conv = trunc i64 %14 to i32
  %cmp19 = icmp slt i32 %9, %conv
  br i1 %cmp19, label %if.end24, label %if.then21

if.then21:                                        ; preds = %ssa_rename_to_insert.exit
  %mul = mul nsw i32 %9, 5
  %div = sdiv i32 %mul, 4
  %conv22 = sext i32 %div to i64
  %call23 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %13, i64 %conv22) #4
  store %struct.varray_head_tag* %call23, %struct.varray_head_tag** @ssa_definition, align 8, !tbaa !1
  br label %if.end24

if.end24:                                         ; preds = %ssa_rename_to_insert.exit, %if.then21
  %15 = phi %struct.varray_head_tag* [ %13, %ssa_rename_to_insert.exit ], [ %call23, %if.then21 ]
  %set_insn = getelementptr inbounds %struct.rename_set_data* %r.078, i64 0, i32 5
  %16 = load %struct.rtx_def** %set_insn, align 8, !tbaa !57
  %idxprom = sext i32 %9 to i64
  %data = getelementptr inbounds %struct.varray_head_tag* %15, i64 0, i32 4
  %rtx = bitcast %union.varray_data_tag* %data to [1 x %struct.rtx_def*]*
  %arrayidx25 = getelementptr inbounds [1 x %struct.rtx_def*]* %rtx, i64 0, i64 %idxprom
  store %struct.rtx_def* %16, %struct.rtx_def** %arrayidx25, align 8, !tbaa !1
  %17 = load %struct.rtx_def** %old_reg, align 8, !tbaa !53
  %call.i = tail call noalias i8* @xmalloc(i64 16) #4
  %reg1.i = bitcast i8* %call.i to i32*
  store i32 %9, i32* %reg1.i, align 4, !tbaa !5
  %original.i = getelementptr inbounds i8* %call.i, i64 8
  %18 = bitcast i8* %original.i to %struct.rtx_def**
  store %struct.rtx_def* %17, %struct.rtx_def** %18, align 8, !tbaa !8
  %19 = load %struct.htab** @ssa_rename_from_ht, align 8, !tbaa !1
  %call2.i = tail call i8** @htab_find_slot_with_hash(%struct.htab* %19, i8* %call.i, i32 %9, i32 1) #4
  %20 = load i8** %call2.i, align 8, !tbaa !1
  %cmp.i59 = icmp eq i8* %20, null
  br i1 %cmp.i59, label %ssa_rename_from_insert.exit, label %if.then.i60

if.then.i60:                                      ; preds = %if.end24
  tail call void @free(i8* %20) #4
  br label %ssa_rename_from_insert.exit

ssa_rename_from_insert.exit:                      ; preds = %if.end24, %if.then.i60
  store i8* %call.i, i8** %call2.i, align 8, !tbaa !1
  %next = getelementptr inbounds %struct.rename_set_data* %r.078, i64 0, i32 0
  %r.0 = load %struct.rename_set_data** %next, align 8
  %cmp = icmp eq %struct.rename_set_data* %r.0, null
  br i1 %cmp, label %for.end, label %for.body

for.end:                                          ; preds = %ssa_rename_from_insert.exit
  %cmp27 = icmp eq %struct.rename_set_data* %r.078, null
  br i1 %cmp27, label %if.end34, label %if.then29

if.then29:                                        ; preds = %for.end
  %done_renames = getelementptr inbounds %struct.rename_context* %c, i64 0, i32 1
  %21 = load %struct.rename_set_data** %done_renames, align 8, !tbaa !47
  %next30 = getelementptr inbounds %struct.rename_set_data* %r.078, i64 0, i32 0
  store %struct.rename_set_data* %21, %struct.rename_set_data** %next30, align 8, !tbaa !56
  %22 = load %struct.rename_set_data** %new_renames, align 8, !tbaa !49
  store %struct.rename_set_data* %22, %struct.rename_set_data** %done_renames, align 8, !tbaa !47
  store %struct.rename_set_data* null, %struct.rename_set_data** %new_renames, align 8, !tbaa !49
  br label %if.end34

if.end34:                                         ; preds = %entry, %for.end, %if.then29
  ret void
}

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #2

declare noalias i8* @xmalloc(i64) #2

declare i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: nounwind readonly uwtable
define internal i32 @ssa_rename_from_hash_function(i8* nocapture readonly %srfp) #5 {
entry:
  %reg = bitcast i8* %srfp to i32*
  %0 = load i32* %reg, align 4, !tbaa !5
  ret i32 %0
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @ssa_rename_from_equal(i8* nocapture readonly %srfp1, i8* nocapture readonly %srfp2) #5 {
entry:
  %reg.i = bitcast i8* %srfp1 to i32*
  %0 = load i32* %reg.i, align 4, !tbaa !5
  %reg.i2 = bitcast i8* %srfp2 to i32*
  %1 = load i32* %reg.i2, align 4, !tbaa !5
  %cmp = icmp eq i32 %0, %1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal void @ssa_rename_from_delete(i8* nocapture %srfp) #0 {
entry:
  tail call void @free(i8* %srfp)
  ret void
}

declare i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare %struct.rtvec_def* @rtvec_alloc(i32) #2

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare %struct.rtx_def* @gen_rtx_fmt_E(i32, i32, %struct.rtvec_def*) #2

declare void @sbitmap_copy(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare i32 @sbitmap_union_of_diff(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare i32 @sbitmap_a_or_b(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal void @find_evaluations_1(%struct.rtx_def* nocapture readonly %dest, %struct.rtx_def* nocapture readnone %set, i8* nocapture readnone %data) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %dest, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %dest, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !9
  %cmp1 = icmp ugt i32 %1, 52
  %2 = and i32 %1, -2
  %switch = icmp eq i32 %2, 16
  %or.cond = or i1 %cmp1, %switch
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32* @fe_current_bb, align 4, !tbaa !9
  %rem = and i32 %3, 63
  %sh_prom = zext i32 %rem to i64
  %shl = shl i64 1, %sh_prom
  %div = lshr i32 %3, 6
  %idxprom = zext i32 %div to i64
  %idxprom14 = zext i32 %1 to i64
  %4 = load %struct.simple_bitmap_def*** @fe_evals, align 8, !tbaa !1
  %arrayidx15 = getelementptr inbounds %struct.simple_bitmap_def** %4, i64 %idxprom14
  %5 = load %struct.simple_bitmap_def** %arrayidx15, align 8, !tbaa !1
  %arrayidx16 = getelementptr inbounds %struct.simple_bitmap_def* %5, i64 0, i32 3, i64 %idxprom
  %6 = load i64* %arrayidx16, align 8, !tbaa !15
  %or = or i64 %6, %shl
  store i64 %or, i64* %arrayidx16, align 8, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) #4

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !7, i64 0}
!6 = metadata !{metadata !"", metadata !7, i64 0, metadata !2, i64 8}
!7 = metadata !{metadata !"int", metadata !3, i64 0}
!8 = metadata !{metadata !6, metadata !2, i64 8}
!9 = metadata !{metadata !7, metadata !7, i64 0}
!10 = metadata !{metadata !11, metadata !7, i64 0}
!11 = metadata !{metadata !"rtvec_def", metadata !7, i64 0, metadata !3, i64 8}
!12 = metadata !{metadata !13, metadata !7, i64 88}
!13 = metadata !{metadata !"basic_block_def", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !7, i64 88, metadata !7, i64 92, metadata !14, i64 96, metadata !7, i64 104, metadata !7, i64 108}
!14 = metadata !{metadata !"long long", metadata !3, i64 0}
!15 = metadata !{metadata !14, metadata !14, i64 0}
!16 = metadata !{metadata !17, metadata !2, i64 24}
!17 = metadata !{metadata !"edge_def", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !7, i64 48, metadata !7, i64 52, metadata !14, i64 56}
!18 = metadata !{metadata !19, metadata !7, i64 4}
!19 = metadata !{metadata !"simple_bitmap_def", metadata !7, i64 0, metadata !7, i64 4, metadata !7, i64 8, metadata !3, i64 16}
!20 = metadata !{metadata !13, metadata !2, i64 8}
!21 = metadata !{metadata !3, metadata !3, i64 0}
!22 = metadata !{metadata !13, metadata !2, i64 64}
!23 = metadata !{metadata !17, metadata !2, i64 16}
!24 = metadata !{metadata !25, metadata !2, i64 24}
!25 = metadata !{metadata !"function", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !7, i64 64, metadata !7, i64 68, metadata !7, i64 72, metadata !7, i64 76, metadata !2, i64 80, metadata !26, i64 88, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !7, i64 152, metadata !2, i64 160, metadata !2, i64 168, metadata !2, i64 176, metadata !2, i64 184, metadata !2, i64 192, metadata !2, i64 200, metadata !2, i64 208, metadata !2, i64 216, metadata !2, i64 224, metadata !2, i64 232, metadata !2, i64 240, metadata !2, i64 248, metadata !2, i64 256, metadata !14, i64 264, metadata !2, i64 272, metadata !2, i64 280, metadata !2, i64 288, metadata !2, i64 296, metadata !7, i64 304, metadata !2, i64 312, metadata !2, i64 320, metadata !7, i64 328, metadata !7, i64 332, metadata !7, i64 336, metadata !2, i64 344, metadata !7, i64 352, metadata !7, i64 356, metadata !2, i64 360, metadata !2, i64 368, metadata !2, i64 376, metadata !7, i64 384, metadata !7, i64 388, metadata !2, i64 392, metadata !7, i64 400, metadata !7, i64 404, metadata !2, i64 408, metadata !2, i64 416, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426}
!26 = metadata !{metadata !"ix86_args", metadata !7, i64 0, metadata !7, i64 4, metadata !7, i64 8, metadata !7, i64 12, metadata !7, i64 16, metadata !7, i64 20, metadata !7, i64 24}
!27 = metadata !{metadata !28, metadata !2, i64 80}
!28 = metadata !{metadata !"emit_status", metadata !7, i64 0, metadata !7, i64 4, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !7, i64 40, metadata !7, i64 44, metadata !2, i64 48, metadata !7, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80}
!29 = metadata !{metadata !30, metadata !31, i64 0}
!30 = metadata !{metadata !"varray_head_tag", metadata !31, i64 0, metadata !31, i64 8, metadata !31, i64 16, metadata !2, i64 24, metadata !3, i64 32}
!31 = metadata !{metadata !"long", metadata !3, i64 0}
!32 = metadata !{metadata !17, metadata !7, i64 48}
!33 = metadata !{metadata !13, metadata !2, i64 40}
!34 = metadata !{metadata !17, metadata !2, i64 8}
!35 = metadata !{metadata !13, metadata !2, i64 32}
!36 = metadata !{metadata !17, metadata !2, i64 0}
!37 = metadata !{metadata !38, metadata !7, i64 0}
!38 = metadata !{metadata !"partition_elem", metadata !7, i64 0, metadata !2, i64 8, metadata !7, i64 16}
!39 = metadata !{metadata !40, metadata !2, i64 0}
!40 = metadata !{metadata !"phi_coalesce_context", metadata !2, i64 0, metadata !2, i64 8, metadata !7, i64 16}
!41 = metadata !{metadata !40, metadata !2, i64 8}
!42 = metadata !{metadata !40, metadata !7, i64 16}
!43 = metadata !{metadata !44, metadata !2, i64 0}
!44 = metadata !{metadata !"ssa_rename_from_hash_table_data", metadata !2, i64 0, metadata !2, i64 8}
!45 = metadata !{metadata !44, metadata !2, i64 8}
!46 = metadata !{metadata !13, metadata !2, i64 0}
!47 = metadata !{metadata !48, metadata !2, i64 8}
!48 = metadata !{metadata !"rename_context", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16}
!49 = metadata !{metadata !48, metadata !2, i64 0}
!50 = metadata !{metadata !48, metadata !2, i64 16}
!51 = metadata !{metadata !52, metadata !2, i64 8}
!52 = metadata !{metadata !"rename_set_data", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40}
!53 = metadata !{metadata !52, metadata !2, i64 16}
!54 = metadata !{metadata !52, metadata !2, i64 24}
!55 = metadata !{metadata !52, metadata !2, i64 32}
!56 = metadata !{metadata !52, metadata !2, i64 0}
!57 = metadata !{metadata !52, metadata !2, i64 40}
