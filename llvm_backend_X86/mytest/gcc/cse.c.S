	.file	"cse.c.bc"
	.text
	.globl	dump_class
	.align	16, 0x90
	.type	dump_class,@function
dump_class:                             # @dump_class
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp3:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp4:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp5:
	.cfi_def_cfa_offset 32
.Ltmp6:
	.cfi_offset %rbx, -24
.Ltmp7:
	.cfi_offset %r14, -16
	movq	stderr(%rip), %r14
	movq	%rdi, %rbx
	movabsq	$.L.str, %rdi
	movq	$22, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	callq	print_rtl
	movabsq	$.L.str1, %rdi
	movq	$3, %rsi
	movq	$1, %rdx
	movq	%r14, %rcx
	callq	fwrite
	movq	48(%rbx), %rbx
	jmp	.LBB0_2
	.align	16, 0x90
.LBB0_1:                                # %for.body
                                        #   in Loop: Header=BB0_2 Depth=1
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	callq	print_rtl
	movq	$10, %rdi
	movq	%r14, %rsi
	callq	fputc
	movq	32(%rbx), %rbx
.LBB0_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	testq	%rbx, %rbx
	jne	.LBB0_1
# BB#3:                                 # %for.end
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp8:
	.size	dump_class, .Ltmp8-dump_class
	.cfi_endproc

	.globl	rtx_cost
	.align	16, 0x90
	.type	rtx_cost,@function
rtx_cost:                               # @rtx_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp15:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp16:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp17:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp18:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp19:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp20:
	.cfi_def_cfa_offset 80
.Ltmp21:
	.cfi_offset %rbx, -48
.Ltmp22:
	.cfi_offset %r12, -40
.Ltmp23:
	.cfi_offset %r13, -32
.Ltmp24:
	.cfi_offset %r14, -24
.Ltmp25:
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	xorq	%r13, %r13
	testq	%rdi, %rdi
	je	.LBB1_33
# BB#1:                                 # %if.end
	movq	24(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %ebx
	movq	$28, %rax
	leaq	-79(%rbx), %rcx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rcx
	cmpq	$4, %rcx
	jb	.LBB1_8
# BB#2:                                 # %if.end
	xorq	%rax, %rax
	cmpq	$48, %rbx
	je	.LBB1_46
# BB#3:                                 # %if.end
	cmpq	$78, %rbx
	jne	.LBB1_7
# BB#4:                                 # %sw.bb
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_6
# BB#5:                                 # %land.lhs.true
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$2, %rax
	jns	.LBB1_8
.LBB1_6:                                # %if.else
	movq	$20, %rax
	jmp	.LBB1_8
.LBB1_7:                                # %sw.default
	movq	$4, %rax
.LBB1_8:                                # %sw.epilog
	cmpq	$119, %rbx
	jg	.LBB1_11
# BB#9:                                 # %sw.epilog
	leaq	-54(%rbx), %rcx
	andq	%r14, %rcx
	cmpq	$37, %rcx
	ja	.LBB1_46
# BB#10:                                # %sw.epilog
	xorq	%r13, %r13
	jmpq	*.LJTI1_0(,%rcx,8)
.LBB1_107:                              # %sw.bb653
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_110
# BB#108:                               # %land.lhs.true656
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	x86_64_sign_extended_value
	testq	%r14, %rax
	movq	$3, %r13
	je	.LBB1_33
# BB#109:                               # %land.lhs.true656.if.end660_crit_edge
	movl	target_flags(%rip), %eax
.LBB1_110:                              # %if.end660
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_112
# BB#111:                               # %land.lhs.true663
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	x86_64_zero_extended_value
	testq	%r14, %rax
	movq	$2, %r13
	je	.LBB1_33
.LBB1_112:                              # %if.end667
	movl	flag_pic(%rip), %eax
	xorq	%r13, %r13
	testq	%rax, %rax
	je	.LBB1_33
# BB#113:                               # %land.rhs
	movq	24(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	leaq	-67(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$2, %rcx
	movq	$1, %r13
	jb	.LBB1_33
# BB#114:                               # %lor.rhs
	cmpq	$58, %rax
	movabsq	$0, %r13
	jne	.LBB1_33
# BB#115:                               # %land.rhs682
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	symbolic_reference_mentioned_p
	testq	%r14, %rax
	je	.LBB1_116
# BB#117:                               # %land.rhs682
	movabsq	$1, %r13
	jmp	.LBB1_33
.LBB1_11:                               # %sw.epilog
	cmpq	$120, %rbx
	jne	.LBB1_12
# BB#35:                                # %do.body126
	movq	ix86_cost(%rip), %rax
	movl	28(%rax), %eax
	jmp	.LBB1_44
.LBB1_12:                               # %sw.epilog
	cmpq	$121, %rbx
	jne	.LBB1_46
# BB#13:                                # %sw.bb98
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_16
# BB#14:                                # %land.lhs.true101
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB1_16
# BB#15:                                # %land.lhs.true107
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	movq	$1, %rax
	je	.LBB1_46
.LBB1_16:                               # %do.body
	movl	ix86_cpu(%rip), %ecx
	movl	x86_zero_extend_with_and(%rip), %edx
	movq	$1, %rsi
	movq	ix86_cost(%rip), %rax
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	jne	.LBB1_18
# BB#17:
	addq	$32, %rax
.LBB1_18:                               # %do.body
	movl	(%rax), %eax
	jmp	.LBB1_44
.LBB1_71:                               # %do.body300
	movq	ix86_cost(%rip), %rax
	movl	24(%rax), %eax
	jmp	.LBB1_44
.LBB1_102:                              # %sw.epilog.sw.bb633_crit_edge
	movl	target_flags(%rip), %eax
	jmp	.LBB1_103
.LBB1_118:                              # %sw.bb687
	movq	24(%rsp), %rax          # 8-byte Reload
	movzbl	2(%rax), %eax
	testq	%rax, %rax
	je	.LBB1_33
# BB#119:                               # %if.end695
	movq	24(%rsp), %rdi          # 8-byte Reload
	callq	standard_80387_constant_p
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$1, %r13
	je	.LBB1_33
# BB#120:                               # %cond.false700
	cmpq	$2, %rax
	je	.LBB1_121
# BB#122:                               # %cond.false700
	movabsq	$1, %r13
	orq	$2, %r13
	jmp	.LBB1_33
.LBB1_19:                               # %sw.bb15
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	8(%rdx), %rcx
	movl	(%rdx), %edi
	movl	(%rcx), %r8d
	movq	$16, %rcx
	movq	%rdi, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movq	$16, %rcx
	movq	%r8, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	cmpq	%rsi, %rdx
	je	.LBB1_46
# BB#20:                                # %lor.lhs.false
	leaq	-3(%rdx), %rcx
	andq	%r14, %rcx
	cmpq	$2, %rcx
	jb	.LBB1_26
# BB#21:                                # %lor.lhs.false
	cmpq	$2, %rdx
	jne	.LBB1_24
# BB#22:                                # %land.lhs.true39
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB1_26
# BB#23:                                # %lor.lhs.false40
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %r9d
	movq	$1, %r10
	shlq	%cl, %r10
	andq	%r9, %r10
	testq	%r14, %r10
	je	.LBB1_26
.LBB1_24:                               # %lor.lhs.false43
	movq	%rdi, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB1_32
# BB#25:                                # %land.lhs.true48
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB1_32
.LBB1_26:                               # %land.lhs.true51
	addq	$-3, %rsi
	andq	%r14, %rsi
	cmpq	$2, %rsi
	jb	.LBB1_46
# BB#27:                                # %lor.lhs.false67
	andq	$16711680, %rdi         # imm = 0xFF0000
	cmpq	$131072, %rdi           # imm = 0x20000
	jne	.LBB1_30
# BB#28:                                # %land.lhs.true72
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB1_46
# BB#29:                                # %lor.lhs.false75
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r14, %rdi
	je	.LBB1_46
.LBB1_30:                               # %lor.lhs.false79
	andq	$16711680, %r8          # imm = 0xFF0000
	cmpq	$327680, %r8            # imm = 0x50000
	jne	.LBB1_32
# BB#31:                                # %land.lhs.true87
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB1_46
.LBB1_32:                               # %if.then90
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rdx), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	addq	$4, %rsi
	xorq	%rdx, %rdx
	idivq	%rsi
	leaq	8(,%rax,4), %r13
	jmp	.LBB1_33
.LBB1_72:                               # %sw.bb303
	movl	ix86_cpu(%rip), %ecx
	movl	x86_decompose_lea(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB1_95
# BB#73:                                # %land.lhs.true307
	movq	24(%rsp), %rax          # 8-byte Reload
	movzbl	2(%rax), %eax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$7, %rcx
	ja	.LBB1_95
# BB#74:                                # %land.lhs.true307
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$170, %rdx
	je	.LBB1_95
# BB#75:                                # %land.lhs.true339
	movl	target_flags(%rip), %edx
	movzbl	mode_bitsize(%rax,%rax), %eax
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	movzbl	mode_bitsize+8(%rdx,%rdx), %ecx
	cmpq	%rcx, %rax
	ja	.LBB1_95
# BB#76:                                # %if.then354
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movzbl	(%rax), %edx
	cmpq	$75, %rdx
	jne	.LBB1_82
# BB#77:                                # %land.lhs.true362
	movq	8(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$78, %rsi
	jne	.LBB1_94
# BB#78:                                # %land.lhs.true373
	movq	16(%rcx), %rsi
	movzbl	(%rsi), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_82
# BB#79:                                # %land.lhs.true387
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$133, %rcx
	jg	.LBB1_88
# BB#80:                                # %land.lhs.true387
	addq	$-54, %rcx
	andq	%r14, %rcx
	cmpq	$14, %rcx
	ja	.LBB1_82
# BB#81:                                # %land.lhs.true387
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$24599, %rdi            # imm = 0x6017
	jne	.LBB1_90
	jmp	.LBB1_82
.LBB1_65:                               # %sw.bb267
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_70
# BB#66:                                # %if.then275
	movq	8(%rax), %rax
	xorq	%rdx, %rdx
	testq	%rax, %rax
	je	.LBB1_69
# BB#67:
	movq	$1, %rcx
.LBB1_68:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	incq	%rdx
	shrq	%cl, %rax
	testq	%rax, %rax
	jne	.LBB1_68
.LBB1_69:                               # %do.body285
	movq	ix86_cost(%rip), %rcx
	movl	20(%rcx), %eax
	movl	16(%rcx), %ecx
	imulq	%rdx, %rax
	addq	%rcx, %rax
	jmp	.LBB1_44
.LBB1_36:                               # %sw.bb129
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_55
# BB#37:                                # %land.lhs.true137
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB1_39
# BB#38:                                # %lor.lhs.false146
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB1_55
.LBB1_39:                               # %if.then149
	movq	8(%rax), %rax
	cmpq	$1, %rax
	je	.LBB1_40
# BB#41:                                # %if.end163
	andq	$-2, %rax
	cmpq	$2, %rax
	jne	.LBB1_55
# BB#42:                                # %land.lhs.true169
	movl	ix86_cpu(%rip), %ecx
	movl	x86_decompose_lea(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB1_55
# BB#43:                                # %land.lhs.true173
	movq	ix86_cost(%rip), %rcx
	movslq	4(%rcx), %rax
	movslq	12(%rcx), %rcx
	cmpq	%rcx, %rax
	jle	.LBB1_44
.LBB1_55:                               # %sw.bb183
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB1_62
# BB#56:                                # %land.lhs.true186
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB1_62
# BB#57:                                # %if.then195
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_60
# BB#58:                                # %if.then203
	movq	ix86_cost(%rip), %rcx
	movq	8(%rax), %rdx
	movl	12(%rcx), %eax
	cmpq	$33, %rdx
	jl	.LBB1_106
# BB#59:                                # %do.body213
	leaq	8(,%rax,4), %rax
	jmp	.LBB1_46
.LBB1_62:                               # %if.else247
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	movq	ix86_cost(%rip), %rax
	cmpq	$54, %rcx
	jne	.LBB1_64
# BB#63:                                # %do.body256
	movl	12(%rax), %eax
	jmp	.LBB1_44
.LBB1_64:                               # %do.body261
	movl	8(%rax), %eax
	jmp	.LBB1_44
.LBB1_70:                               # %do.body291
	movq	ix86_cost(%rip), %rax
	movl	20(%rax), %ecx
	movl	16(%rax), %edx
	imulq	$7, %rcx, %rax
	addq	%rdx, %rax
	jmp	.LBB1_44
.LBB1_60:                               # %if.else225
	movq	ix86_cost(%rip), %rax
	movl	8(%rax), %eax
	cmpq	$83, %rcx
	je	.LBB1_106
# BB#61:                                # %do.body239
	leaq	(%rax,%rax,2), %rax
	leaq	8(,%rax,8), %rax
	jmp	.LBB1_46
.LBB1_116:
	movabsq	$0, %r13
	jmp	.LBB1_33
.LBB1_121:
	movabsq	$0, %r13
	orq	$2, %r13
	jmp	.LBB1_33
.LBB1_88:                               # %land.lhs.true387
	cmpq	$134, %rcx
	je	.LBB1_90
# BB#89:                                # %land.lhs.true387
	cmpq	$140, %rcx
	jne	.LBB1_82
.LBB1_90:                               # %if.then451
	movq	8(%rsi), %rcx
	cmpq	$8, %rcx
	ja	.LBB1_95
# BB#91:                                # %if.then451
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$276, %rdx              # imm = 0x114
	je	.LBB1_95
# BB#92:                                # %if.then472
	movq	ix86_cost(%rip), %rcx
	movl	4(%rcx), %ebx
	movq	16(%rax), %rax
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	rtx_cost
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	8(%r14), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	leaq	(%rax,%rbx,4), %rbx
	movq	%rcx, %rdi
	movq	%r15, %rsi
	callq	rtx_cost
	movq	16(%r14), %rcx
	movq	%rax, %r14
	addq	%rbx, %r14
	movq	%rcx, %rdi
	movq	%r15, %rsi
	callq	rtx_cost
	addq	%r14, %rax
	jmp	.LBB1_34
.LBB1_82:                               # %if.else500
	cmpq	$78, %rdx
	jne	.LBB1_93
# BB#83:                                # %land.lhs.true508
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$54, %rsi
	jne	.LBB1_93
# BB#84:                                # %if.then519
	movq	8(%rcx), %rcx
	cmpq	$8, %rcx
	ja	.LBB1_95
# BB#85:                                # %if.then519
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$276, %rdx              # imm = 0x114
	je	.LBB1_95
# BB#86:                                # %if.then538
	movq	ix86_cost(%rip), %rcx
	movq	8(%rax), %rax
	movl	4(%rcx), %ebx
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	rtx_cost
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	16(%rcx), %rcx
	leaq	(%rax,%rbx,4), %rbx
	movq	%rcx, %rdi
	jmp	.LBB1_87
.LBB1_93:                               # %if.else555
	cmpq	$75, %rdx
	jne	.LBB1_95
.LBB1_94:                               # %if.then563
	movq	ix86_cost(%rip), %rcx
	movl	4(%rcx), %r14d
	movq	8(%rax), %rdi
	movq	%r15, %rsi
	callq	rtx_cost
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	8(%rbx), %rcx
	movq	16(%rcx), %rdi
	leaq	(%rax,%r14,4), %r14
	movq	%r15, %rsi
	callq	rtx_cost
	movq	16(%rbx), %rdi
	movq	%rax, %rbx
	addq	%r14, %rbx
.LBB1_87:                               # %if.then538
	movq	%r15, %rsi
	callq	rtx_cost
	addq	%rbx, %rax
	jmp	.LBB1_34
.LBB1_95:                               # %sw.bb591
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB1_103
# BB#96:                                # %land.lhs.true594
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB1_103
# BB#97:                                # %if.then600
	movq	ix86_cost(%rip), %rax
	movl	(%rax), %eax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	8(%rbx), %rdi
	movq	%r15, %rsi
	callq	rtx_cost
	movq	8(%rbx), %rcx
	movl	(%rcx), %ecx
	movq	16(%rbx), %rdi
	movq	%rbx, %r13
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	movabsq	$0, %r12
	movabsq	$1, %r14
	movq	%r12, %rcx
	je	.LBB1_99
# BB#98:                                # %if.then600
	movq	%r14, %rcx
.LBB1_99:                               # %if.then600
	shlq	%cl, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	leaq	(%rax,%rcx,8), %rbx
	movq	%r15, %rsi
	callq	rtx_cost
	movq	16(%r13), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	je	.LBB1_101
# BB#100:                               # %if.then600
	movq	%r14, %r12
.LBB1_101:                              # %if.then600
	movq	%r12, %rcx
	shlq	%cl, %rax
	addq	%rax, %rbx
	movq	%rbx, %rax
	jmp	.LBB1_34
.LBB1_103:                              # %sw.bb633
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB1_40
# BB#104:                               # %land.lhs.true636
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB1_40
# BB#105:                               # %do.body643
	movq	ix86_cost(%rip), %rax
	movl	(%rax), %eax
.LBB1_106:                              # %do.body219
	movq	$3, %rcx
	jmp	.LBB1_45
.LBB1_40:                               # %do.body159
	movq	ix86_cost(%rip), %rax
	movl	(%rax), %eax
.LBB1_44:                               # %do.body177
	movq	$2, %rcx
.LBB1_45:                               # %sw.epilog707
	shlq	%cl, %rax
.LBB1_46:                               # %sw.epilog707
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	movq	rtx_format(,%rbx,8), %r15
	movzbl	rtx_length(%rbx), %r14d
	movq	%rbx, %r12
	movq	%rax, %r13
	jmp	.LBB1_47
	.align	16, 0x90
.LBB1_124:                              # %if.then720
                                        #   in Loop: Header=BB1_47 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	(%rax,%rbx,8), %rdi
	movq	%r12, %rsi
	callq	rtx_cost
	addq	%rax, %r13
.LBB1_47:                               # %for.cond.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_48 Depth 2
                                        #     Child Loop BB1_53 Depth 2
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
.LBB1_48:                               # %for.cond
                                        #   Parent Loop BB1_47 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r14, %rbx
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB1_33
# BB#49:                                # %for.body
                                        #   in Loop: Header=BB1_48 Depth=2
	movzbl	-1(%r15,%rbx), %eax
	leaq	-1(%rbx), %r14
	cmpq	$101, %rax
	je	.LBB1_124
# BB#50:                                # %for.body
                                        #   in Loop: Header=BB1_48 Depth=2
	cmpq	$69, %rax
	jne	.LBB1_48
# BB#51:                                # %for.cond734.preheader
                                        #   in Loop: Header=BB1_47 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	(%rax,%rbx,8), %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	jle	.LBB1_47
# BB#52:                                # %for.body740.preheader
                                        #   in Loop: Header=BB1_47 Depth=1
	movq	$1, %rcx
.LBB1_53:                               # %for.body740
                                        #   Parent Loop BB1_47 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%rcx,8), %rdi
	movq	%r13, 8(%rsp)           # 8-byte Spill
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%rcx, %r12
	callq	rtx_cost
	movq	%rax, %r13
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	(%rax,%rbx,8), %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	%rcx, %r13
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%r12, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	%r12, %rcx
	incq	%rcx
	cmpq	%rdx, %rsi
	jl	.LBB1_53
# BB#54:                                #   in Loop: Header=BB1_47 Depth=1
	movq	16(%rsp), %r12          # 8-byte Reload
	jmp	.LBB1_47
.LBB1_33:                               # %return
	movq	%r13, %rax
.LBB1_34:                               # %return
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp26:
	.size	rtx_cost, .Ltmp26-rtx_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI1_0:
	.quad	.LBB1_107
	.quad	.LBB1_118
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_107
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_33
	.quad	.LBB1_46
	.quad	.LBB1_19
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_107
	.quad	.LBB1_107
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_46
	.quad	.LBB1_72
	.quad	.LBB1_95
	.quad	.LBB1_102
	.quad	.LBB1_65
	.quad	.LBB1_71
	.quad	.LBB1_71
	.quad	.LBB1_71
	.quad	.LBB1_71
	.quad	.LBB1_95
	.quad	.LBB1_95
	.quad	.LBB1_95
	.quad	.LBB1_102
	.quad	.LBB1_36
	.quad	.LBB1_55
	.quad	.LBB1_55
	.quad	.LBB1_55
	.quad	.LBB1_55

	.text
	.globl	address_cost
	.align	16, 0x90
	.type	address_cost,@function
address_cost:                           # @address_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp29:
	.cfi_def_cfa_offset 16
.Ltmp30:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movzbl	(%rbx), %eax
	cmpq	$70, %rax
	jne	.LBB2_3
# BB#1:                                 # %land.lhs.true
	movq	8(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB2_3
# BB#2:
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	popq	%rbx
	retq
.LBB2_3:                                # %if.end
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	callq	memory_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$1000, %rax             # imm = 0x3E8
	je	.LBB2_4
# BB#5:                                 # %if.end5
	movq	%rbx, %rdi
	popq	%rbx
	jmp	ix86_address_cost  # TAILCALL
.LBB2_4:                                # %return
	popq	%rbx
	retq
.Ltmp31:
	.size	address_cost, .Ltmp31-address_cost
	.cfi_endproc

	.globl	gen_lowpart_if_possible
	.align	16, 0x90
	.type	gen_lowpart_if_possible,@function
gen_lowpart_if_possible:                # @gen_lowpart_if_possible
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp35:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp36:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp37:
	.cfi_def_cfa_offset 32
.Ltmp38:
	.cfi_offset %rbx, -24
.Ltmp39:
	.cfi_offset %r14, -16
	movq	%rsi, %rbx
	movq	%rdi, %r14
                                        # kill: RDI<def> R14<kill>
                                        # kill: RSI<def> RBX<kill>
	callq	gen_lowpart_common
	testq	%rax, %rax
	jne	.LBB3_4
# BB#1:                                 # %if.else
	movzbl	(%rbx), %ecx
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jne	.LBB3_4
# BB#2:                                 # %if.then1
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	adjust_address_1
	movq	%rax, %rbx
	movq	8(%rbx), %rsi
	movq	%r14, %rdi
	callq	memory_address_p
	movq	%rax, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	je	.LBB3_4
# BB#3:                                 # %if.then1
	movq	%rbx, %rax
.LBB3_4:                                # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.Ltmp40:
	.size	gen_lowpart_if_possible, .Ltmp40-gen_lowpart_if_possible
	.cfi_endproc

	.globl	cse_end_of_basic_block
	.align	16, 0x90
	.type	cse_end_of_basic_block,@function
cse_end_of_basic_block:                 # @cse_end_of_basic_block
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp47:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp48:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp49:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp50:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp51:
	.cfi_def_cfa_offset 48
	subq	$144, %rsp
.Ltmp52:
	.cfi_def_cfa_offset 192
.Ltmp53:
	.cfi_offset %rbx, -48
.Ltmp54:
	.cfi_offset %r12, -40
.Ltmp55:
	.cfi_offset %r13, -32
.Ltmp56:
	.cfi_offset %r14, -24
.Ltmp57:
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movslq	8(%r13), %rax
	movzbl	(%r13), %edi
	movq	uid_cuid(%rip), %rbx
	movzbl	rtx_class(%rdi), %edi
	movl	(%rbx,%rax,4), %r12d
	movq	%r8, %r14
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	movq	%rsi, %rbx
	cmpq	$105, %rdi
	movq	%r13, 40(%rsp)          # 8-byte Spill
	je	.LBB4_2
# BB#1:                                 # %cond.false
	movq	%r13, %rdi
	callq	next_real_insn
	movq	%rax, 40(%rsp)          # 8-byte Spill
.LBB4_2:                                # %cond.end
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movslq	24(%rbx), %rdx
	movq	$4, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	leaq	40(%rax,%rbx), %rax
	.align	16, 0x90
.LBB4_3:                                # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, %r15
	movq	$32, %rcx
                                        # kill: RDX<def> R15<kill>
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jle	.LBB4_6
# BB#4:                                 # %while.body
                                        #   in Loop: Header=BB4_3 Depth=1
	movl	-16(%rax), %ecx
	leaq	-1(%r15), %rdx
	addq	$-16, %rax
	cmpq	$1, %rcx
	je	.LBB4_3
# BB#5:                                 # %if.then
	movq	$1, %rcx
	movl	%ecx, (%rax)
.LBB4_6:                                # %while.end
	movl	(%r13), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$131072, %rax           # imm = 0x20000
	movabsq	$0, %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB4_8
# BB#7:                                 # %while.end
	movq	%r14, 24(%rsp)          # 8-byte Spill
.LBB4_8:                                # %while.end
	movabsq	$0, %rax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	movq	%r12, %r14
	je	.LBB4_10
# BB#9:                                 # %while.end
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
.LBB4_10:                               # %while.end
	testq	%r13, %r13
	movabsq	$0, %r9
	je	.LBB4_11
# BB#12:                                # %land.rhs.lr.ph.lr.ph
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	orq	%rax, %rcx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	64(%rsp), %rax          # 8-byte Reload
	leaq	32(%rax), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movabsq	$0, %r10
	movabsq	$4294967201, %r11       # imm = 0xFFFFFFA1
	movq	$0, 120(%rsp)           # 8-byte Folded Spill
	movq	%r14, %r8
	xorq	%r9, %r9
	jmp	.LBB4_13
.LBB4_11:
	xorq	%rax, %rax
	movq	%r14, %r8
	jmp	.LBB4_100
.LBB4_44:                               # %if.then144
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	$4, %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	shlq	%cl, %rdx
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	40(%rax,%rdx), %eax
	cmpq	$1, %rax
	movq	%rbx, %r8
	je	.LBB4_46
# BB#45:                                # %if.then151
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	64(%r13), %r13
.LBB4_46:                               # %if.end155
                                        #   in Loop: Header=BB4_13 Depth=1
	incq	120(%rsp)               # 8-byte Folded Spill
	jmp	.LBB4_99
.LBB4_71:                               # %for.cond281.preheader
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	$32, %rcx
	movq	120(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	xorq	%rax, %rax
	testq	%rdx, %rdx
	movq	%r14, %r11
	jle	.LBB4_72
# BB#73:                                #   in Loop: Header=BB4_13 Depth=1
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	.align	16, 0x90
.LBB4_77:                               # %for.body284
                                        #   Parent Loop BB4_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdx), %rcx
	cmpq	%r13, %rcx
	je	.LBB4_78
# BB#76:                                # %for.cond281
                                        #   in Loop: Header=BB4_77 Depth=2
	incq	%rax
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$32, %rcx
	movq	%rbx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	addq	$16, %rdx
	cmpq	%rdi, %rsi
	jl	.LBB4_77
	jmp	.LBB4_78
.LBB4_85:                               # %for.cond336.preheader
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	$32, %rcx
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	%r8, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	xorq	%rax, %rax
	testq	%rdx, %rdx
	movq	%r14, %r11
	jle	.LBB4_86
# BB#87:                                #   in Loop: Header=BB4_13 Depth=1
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	112(%rsp), %r13         # 8-byte Reload
	.align	16, 0x90
.LBB4_89:                               # %for.body339
                                        #   Parent Loop BB4_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdx), %rcx
	cmpq	%r13, %rcx
	je	.LBB4_90
# BB#88:                                # %for.cond336
                                        #   in Loop: Header=BB4_89 Depth=2
	incq	%rax
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$32, %rcx
	movq	%r8, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	addq	$16, %rdx
	cmpq	%rdi, %rsi
	jl	.LBB4_89
	jmp	.LBB4_90
.LBB4_83:                               #   in Loop: Header=BB4_13 Depth=1
	movq	88(%rsp), %r15          # 8-byte Reload
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	%rcx, %r14
	jmp	.LBB4_99
.LBB4_72:                               #   in Loop: Header=BB4_13 Depth=1
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
.LBB4_78:                               # %for.end295
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	%rbx, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	andq	%rdx, %rax
	cmpq	%rcx, %rax
	movq	%r12, %r10
	jne	.LBB4_79
# BB#80:                                # %if.end299
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%r13, (%rax)
	movq	$4, %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	shlq	%cl, %rdx
	movq	64(%rsp), %rax          # 8-byte Reload
	xorq	%rcx, %rcx
	movl	%ecx, 40(%rax,%rdx)
	movq	64(%r13), %r13
	movq	24(%r13), %rax
	incq	%rbx
	movq	%rbx, 120(%rsp)         # 8-byte Spill
	movq	$2, %rcx
	movb	%cl, 2(%rax)
	movq	%rbx, %r15
	jmp	.LBB4_98
.LBB4_86:                               #   in Loop: Header=BB4_13 Depth=1
	movq	112(%rsp), %r13         # 8-byte Reload
.LBB4_90:                               # %for.end350
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	%r8, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	andq	%rdx, %rax
	cmpq	%rcx, %rax
	movq	%r13, %rax
	movq	%r12, %r10
	jne	.LBB4_91
	.align	16, 0x90
.LBB4_92:                               # %for.cond358
                                        #   Parent Loop BB4_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.LBB4_95
# BB#93:                                # %for.cond358
                                        #   in Loop: Header=BB4_92 Depth=2
	cmpq	%rbx, %rax
	je	.LBB4_95
# BB#94:                                # %for.body364
                                        #   in Loop: Header=BB4_92 Depth=2
	movzbl	(%rax), %ecx
	cmpq	$36, %rcx
	jne	.LBB4_92
	jmp	.LBB4_97
.LBB4_95:                               # %for.end375
                                        #   in Loop: Header=BB4_13 Depth=1
	cmpq	%rbx, %rax
	jne	.LBB4_97
# BB#96:                                # %if.then378
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%r13, (%rax)
	movq	$4, %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	shlq	%cl, %rdx
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	$2, %rcx
	movl	%ecx, 40(%rax,%rdx)
	movq	64(%r13), %r13
	movq	24(%r13), %rax
	movq	120(%rsp), %rdx         # 8-byte Reload
	incq	%rdx
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movb	%cl, 2(%rax)
	movq	%rdx, %r15
.LBB4_97:                               # %if.end401
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	104(%rsp), %r8          # 8-byte Reload
.LBB4_98:                               # %if.end401
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	96(%rsp), %r14          # 8-byte Reload
	jmp	.LBB4_99
	.align	16, 0x90
.LBB4_13:                               # %land.rhs.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_18 Depth 2
                                        #       Child Loop BB4_56 Depth 3
                                        #     Child Loop BB4_89 Depth 2
                                        #     Child Loop BB4_92 Depth 2
                                        #     Child Loop BB4_77 Depth 2
	movq	%r15, 88(%rsp)          # 8-byte Spill
	movq	48(%rsp), %rax          # 8-byte Reload
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%r10, 128(%rsp)         # 8-byte Spill
	je	.LBB4_15
# BB#14:                                # %land.rhs.lr.ph
                                        #   in Loop: Header=BB4_13 Depth=1
	movabsq	$1, %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
.LBB4_15:                               # %land.rhs.lr.ph
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	%r14, %rdi
	movq	$32, %rcx
	movq	120(%rsp), %rax         # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	$4, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$9, %rdx
	movq	%r10, %rcx
	jge	.LBB4_17
# BB#16:                                # %land.rhs.lr.ph
                                        #   in Loop: Header=BB4_13 Depth=1
	movabsq	$1, %rcx
.LBB4_17:                               # %land.rhs.lr.ph
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	64(%rsp), %rdx          # 8-byte Reload
	leaq	32(%rdx,%rax), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	andq	%rcx, 128(%rsp)         # 8-byte Folded Spill
.LBB4_18:                               # %land.rhs
                                        #   Parent Loop BB4_13 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_56 Depth 3
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$36, %rcx
	je	.LBB4_19
# BB#20:                                # %while.body33
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	80(%rsp), %rdx          # 8-byte Reload
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	testq	%rsi, %rdx
	movq	%rdi, %r14
	jne	.LBB4_24
# BB#21:                                # %while.body33
                                        #   in Loop: Header=BB4_18 Depth=2
	cmpq	$37, %rcx
	jne	.LBB4_24
# BB#22:                                # %land.lhs.true39
                                        #   in Loop: Header=BB4_18 Depth=2
	movl	40(%r13), %ecx
	cmpq	%r11, %rcx
	je	.LBB4_23
.LBB4_24:                               # %if.end46
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	16(%r13), %rdi
	testq	%rdi, %rdi
	je	.LBB4_29
# BB#25:                                # %land.lhs.true50
                                        #   in Loop: Header=BB4_18 Depth=2
	movzbl	(%rdi), %ecx
	cmpq	$34, %rcx
	jne	.LBB4_29
# BB#26:                                # %land.lhs.true58
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r14, 96(%rsp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%r11, %r14
	movq	%r10, %rbx
	movq	$28, %rsi
	xorq	%rdx, %rdx
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB4_27
# BB#28:                                # %land.lhs.true58.if.end65_crit_edge
                                        #   in Loop: Header=BB4_18 Depth=2
	movl	(%r13), %eax
	movq	%rbx, %r10
	movq	%r14, %r11
	movq	%r12, %r8
	movq	96(%rsp), %r14          # 8-byte Reload
.LBB4_29:                               # %if.end65
                                        #   in Loop: Header=BB4_18 Depth=2
	andq	$65535, %rax            # imm = 0xFFFF
	movzbl	rtx_class(%rax), %ecx
	cmpq	$105, %rcx
	jne	.LBB4_32
# BB#30:                                # %land.lhs.true73
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	32(%r13), %rcx
	movzbl	(%rcx), %edx
	cmpq	$39, %rdx
	jne	.LBB4_32
# BB#31:                                # %if.then81
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r8, %rdx
	movq	8(%rcx), %rcx
	movl	(%rcx), %r8d
	jmp	.LBB4_35
	.align	16, 0x90
.LBB4_32:                               # %if.else87
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r14, %r12
	movq	%r8, %rdx
	cmpq	$37, %rax
	movq	%r10, %r8
	je	.LBB4_34
# BB#33:                                # %if.else87
                                        #   in Loop: Header=BB4_18 Depth=2
	movabsq	$1, %r8
.LBB4_34:                               # %if.else87
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r12, %r14
.LBB4_35:                               # %if.end95
                                        #   in Loop: Header=BB4_18 Depth=2
	movslq	8(%r13), %rdi
	movslq	max_uid(%rip), %rcx
	cmpq	%rcx, %rdi
	jle	.LBB4_37
# BB#36:                                #   in Loop: Header=BB4_18 Depth=2
	movq	%rdx, %rbx
	jmp	.LBB4_42
	.align	16, 0x90
.LBB4_37:                               # %land.lhs.true121
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	uid_cuid(%rip), %rbx
	movslq	(%rbx,%rdi,4), %r9
	movq	$32, %rcx
	movq	%rdx, %rsi
                                        # kill: RDX<def> RSI<kill>
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %r9
	jge	.LBB4_39
# BB#38:                                # %land.lhs.true121
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%rsi, %r9
.LBB4_39:                               # %land.lhs.true121
                                        #   in Loop: Header=BB4_18 Depth=2
	movslq	(%rbx,%rdi,4), %rdi
	movq	$32, %rcx
	movq	%r14, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %rdi
	jle	.LBB4_41
# BB#40:                                # %land.lhs.true121
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r14, %rdi
.LBB4_41:                               # %land.lhs.true121
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r9, %rbx
	movq	%rdi, %r14
.LBB4_42:                               # %if.end135
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	136(%rsp), %r9          # 8-byte Reload
	addq	%r8, %r9
	movq	$32, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	movq	120(%rsp), %rsi         # 8-byte Reload
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jge	.LBB4_47
# BB#43:                                # %land.lhs.true138
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rcx
	cmpq	%r13, %rcx
	je	.LBB4_44
.LBB4_47:                               # %if.else156
                                        #   in Loop: Header=BB4_18 Depth=2
	cmpq	$33, %rax
	movq	%r10, %rax
	movq	%rbx, %r8
	jne	.LBB4_49
# BB#48:                                # %if.else156
                                        #   in Loop: Header=BB4_18 Depth=2
	movabsq	$1, %rax
.LBB4_49:                               # %if.else156
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	128(%rsp), %rcx         # 8-byte Reload
	andq	%rcx, %rax
	cmpq	$1, %rax
	jne	.LBB4_99
# BB#50:                                # %land.lhs.true167
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	32(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB4_99
# BB#51:                                # %land.lhs.true175
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	16(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$72, %rax
	jne	.LBB4_99
# BB#52:                                # %land.lhs.true186
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	64(%r13), %rax
	testq	%rax, %rax
	je	.LBB4_99
# BB#53:                                # %land.lhs.true192
                                        #   in Loop: Header=BB4_18 Depth=2
	movl	32(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB4_99
# BB#54:                                # %land.lhs.true201
                                        #   in Loop: Header=BB4_18 Depth=2
	cmpq	$0, 24(%rax)
	je	.LBB4_99
# BB#55:                                # %for.cond.preheader
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%r13, 112(%rsp)         # 8-byte Spill
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	16(%rax), %rbx
	jmp	.LBB4_56
	.align	16, 0x90
.LBB4_67:                               # %for.cond.backedge
                                        #   in Loop: Header=BB4_56 Depth=3
	movq	(%r12), %rbx
.LBB4_56:                               # %for.cond.preheader
                                        #   Parent Loop BB4_13 Depth=1
                                        #     Parent Loop BB4_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rbx, %rbx
	je	.LBB4_57
# BB#58:                                # %for.body
                                        #   in Loop: Header=BB4_56 Depth=3
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$37, %rcx
	jne	.LBB4_64
# BB#59:                                # %lor.lhs.false222
                                        #   in Loop: Header=BB4_56 Depth=3
	movl	40(%rbx), %ecx
	cmpq	%r11, %rcx
	je	.LBB4_64
# BB#60:                                # %lor.lhs.false228
                                        #   in Loop: Header=BB4_56 Depth=3
	movq	16(%rbx), %rdi
	leaq	16(%rbx), %r12
	testq	%rdi, %rdi
	je	.LBB4_67
# BB#61:                                # %land.lhs.true233
                                        #   in Loop: Header=BB4_56 Depth=3
	movzbl	(%rdi), %eax
	cmpq	$34, %rax
	jne	.LBB4_67
# BB#62:                                # %land.lhs.true241
                                        #   in Loop: Header=BB4_56 Depth=3
	movq	$28, %rsi
	xorq	%rdx, %rdx
	movq	%r10, %r13
	movq	%r11, %r15
	callq	find_reg_note
	movq	%r15, %r11
	movq	%r13, %r10
	testq	%rax, %rax
	je	.LBB4_67
# BB#63:                                # %land.lhs.true241.land.lhs.true247_crit_edge
                                        #   in Loop: Header=BB4_56 Depth=3
	movl	(%rbx), %eax
	.align	16, 0x90
.LBB4_64:                               # %land.lhs.true247
                                        #   in Loop: Header=BB4_56 Depth=3
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$36, %rax
	jne	.LBB4_68
# BB#65:                                # %lor.lhs.false252
                                        #   in Loop: Header=BB4_56 Depth=3
	movl	32(%rbx), %ecx
	testq	%rcx, %rcx
	jne	.LBB4_68
# BB#66:                                # %lor.lhs.false252.for.cond.backedge_crit_edge
                                        #   in Loop: Header=BB4_56 Depth=3
	addq	$16, %rbx
	movq	%rbx, %r12
	jmp	.LBB4_67
	.align	16, 0x90
.LBB4_68:                               # %for.end
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	56(%rsp), %rcx          # 8-byte Reload
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rcx
	je	.LBB4_81
# BB#69:                                # %for.end
                                        #   in Loop: Header=BB4_18 Depth=2
	cmpq	$35, %rax
	jne	.LBB4_81
# BB#70:                                # %if.then272
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r14, %rax
	movq	%r11, %r14
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	%r10, %r12
	movq	%rbx, %rdi
	callq	next_real_insn
	movq	40(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	movq	136(%rsp), %r9          # 8-byte Reload
	movq	88(%rsp), %r15          # 8-byte Reload
	je	.LBB4_74
	jmp	.LBB4_71
	.align	16, 0x90
.LBB4_81:                               # %if.else317
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	24(%rsp), %rcx          # 8-byte Reload
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rcx
	je	.LBB4_57
# BB#82:                                # %if.else317
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r14, %rcx
	cmpq	$36, %rax
	movq	136(%rsp), %r9          # 8-byte Reload
	je	.LBB4_83
# BB#84:                                # %if.then327
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	%r11, %r14
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%r10, %r12
	movq	%rbx, %rdi
	movq	%r9, %r15
	callq	next_real_insn
	movq	%r15, %r9
	movq	40(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	movq	88(%rsp), %r15          # 8-byte Reload
	jne	.LBB4_85
.LBB4_74:                               # %while.cond28.backedge
                                        #   in Loop: Header=BB4_18 Depth=2
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	24(%r13), %r13
	xorq	%rax, %rax
	testq	%r13, %r13
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	%r12, %r10
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	%r14, %r11
	jne	.LBB4_18
	jmp	.LBB4_75
	.align	16, 0x90
.LBB4_57:                               #   in Loop: Header=BB4_13 Depth=1
	movq	136(%rsp), %r9          # 8-byte Reload
	movq	88(%rsp), %r15          # 8-byte Reload
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
.LBB4_99:                               # %if.end401
                                        #   in Loop: Header=BB4_13 Depth=1
	movq	24(%r13), %r13
	xorq	%rax, %rax
	testq	%r13, %r13
	jne	.LBB4_13
	jmp	.LBB4_100
.LBB4_19:
	movq	%r13, %rax
	movq	%rdi, %r14
	jmp	.LBB4_100
.LBB4_23:
	movq	%r13, %rax
	jmp	.LBB4_100
.LBB4_75:
	movq	%rdi, %r14
	jmp	.LBB4_100
.LBB4_27:
	movq	%r13, %rax
	movq	136(%rsp), %r9          # 8-byte Reload
	movq	%r12, %r8
	movq	96(%rsp), %r14          # 8-byte Reload
.LBB4_100:                              # %while.end405
	movq	64(%rsp), %rdi          # 8-byte Reload
	movl	%r14d, (%rdi)
	movl	%r8d, 4(%rdi)
	movl	%r9d, 8(%rdi)
	movq	%rax, 16(%rdi)
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$4, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	leaq	24(%rdx,%rdi), %rsi
	movq	%rdi, %rbx
	movq	%rax, %rcx
	.align	16, 0x90
.LBB4_101:                              # %for.cond410
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rdx
	movq	$32, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	testq	%rdi, %rdi
	jle	.LBB4_103
# BB#102:                               # %for.body413
                                        #   in Loop: Header=BB4_101 Depth=1
	movl	(%rsi), %edi
	leaq	-1(%rdx), %rcx
	addq	$-16, %rsi
	cmpq	$1, %rdi
	je	.LBB4_101
.LBB4_103:                              # %for.end424
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	je	.LBB4_105
# BB#104:                               # %for.end424
	movq	%r15, %rdx
.LBB4_105:                              # %for.end424
	movl	%edx, 24(%rbx)
	movq	$4, %rcx
	shlq	%cl, %rax
	movq	$0, 32(%rbx,%rax)
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB4_79:
	movq	%r13, %rax
	movq	96(%rsp), %r14          # 8-byte Reload
	jmp	.LBB4_100
.LBB4_91:
	movq	%r13, %rax
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	96(%rsp), %r14          # 8-byte Reload
	jmp	.LBB4_100
.Ltmp58:
	.size	cse_end_of_basic_block, .Ltmp58-cse_end_of_basic_block
	.cfi_endproc

	.globl	cse_main
	.align	16, 0x90
	.type	cse_main,@function
cse_main:                               # @cse_main
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp65:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp66:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp67:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp68:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp69:
	.cfi_def_cfa_offset 48
	subq	$208, %rsp
.Ltmp70:
	.cfi_def_cfa_offset 256
.Ltmp71:
	.cfi_offset %rbx, -48
.Ltmp72:
	.cfi_offset %r12, -40
.Ltmp73:
	.cfi_offset %r13, -32
.Ltmp74:
	.cfi_offset %r14, -24
.Ltmp75:
	.cfi_offset %r15, -16
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %r14
	xorq	%rbx, %rbx
	movl	%ebx, cse_jumps_altered(%rip)
	movb	%bl, recorded_label_ref(%rip)
	movl	%ebx, constant_pool_entries_cost(%rip)
	movl	%ebx, 40(%rsp)
	callq	init_recog
	callq	init_alias_analysis
	movl	%r12d, max_reg(%rip)
	callq	get_max_uid
	movl	%eax, max_insn_uid(%rip)
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	movq	$3, %rcx
	shlq	%cl, %r12
	movq	%r12, %rdi
	callq	xmalloc
	movq	%rax, reg_eqv_table(%rip)
	movl	%ebx, n_elements_made(%rip)
	callq	get_max_uid
	movl	%eax, max_uid(%rip)
	leaq	1(%rax), %rdi
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	$4, %rsi
	callq	xcalloc
	testq	%r14, %r14
	movq	%rax, uid_cuid(%rip)
	je	.LBB5_32
# BB#1:
	movq	%r14, %rcx
	.align	16, 0x90
.LBB5_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rcx), %edx
	cmpq	$37, %rdx
	jne	.LBB5_4
# BB#3:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB5_2 Depth=1
	movslq	40(%rcx), %rdx
	testq	%rdx, %rdx
	jns	.LBB5_5
.LBB5_4:                                # %if.then
                                        #   in Loop: Header=BB5_2 Depth=1
	movslq	8(%rcx), %rdx
	incq	%rbx
	jmp	.LBB5_6
	.align	16, 0x90
.LBB5_5:                                # %if.else
                                        #   in Loop: Header=BB5_2 Depth=1
	movslq	8(%rcx), %rdx
.LBB5_6:                                # %for.inc
                                        #   in Loop: Header=BB5_2 Depth=1
	movl	%ebx, (%rax,%rdx,4)
	movq	24(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB5_2
# BB#7:                                 # %for.end
	callq	ggc_push_context
	testq	%r14, %r14
	je	.LBB5_33
# BB#8:                                 # %while.body.lr.ph
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r15
	jne	.LBB5_9
# BB#10:                                # %while.body.lr.ph
	movabsq	$1, %rax
	jmp	.LBB5_11
.LBB5_32:                               # %for.end.thread
	callq	ggc_push_context
	jmp	.LBB5_33
.LBB5_9:
	movabsq	$0, %rax
.LBB5_11:                               # %while.body.lr.ph
	movq	%rax, (%rsp)            # 8-byte Spill
	xorq	%r12, %r12
	leaq	16(%rsp), %rbx
	.align	16, 0x90
.LBB5_12:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movl	flag_cse_skip_blocks(%rip), %r8d
	movl	flag_cse_follow_jumps(%rip), %edx
	movb	%r12b, cse_altered(%rip)
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rcx
	callq	cse_end_of_basic_block
	movl	24(%rsp), %r8d
	movl	(%r14), %eax
	testq	%r8, %r8
	je	.LBB5_14
# BB#13:                                # %while.body
                                        #   in Loop: Header=BB5_12 Depth=1
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$131072, %rcx           # imm = 0x20000
	je	.LBB5_14
# BB#18:                                # %if.end36
                                        #   in Loop: Header=BB5_12 Depth=1
	movq	16(%rsp), %rdx
	movq	$32, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	leaq	(%r8,%r8), %rax
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	movl	%edx, cse_basic_block_start(%rip)
	movl	%esi, cse_basic_block_end(%rip)
	movl	%eax, max_qty(%rip)
	je	.LBB5_22
# BB#19:                                # %if.then40
                                        #   in Loop: Header=BB5_12 Depth=1
	movq	32(%rsp), %rax
	movl	8(%r14), %edx
	xorq	%rcx, %rcx
	testq	%rax, %rax
	je	.LBB5_21
# BB#20:                                # %cond.true46
                                        #   in Loop: Header=BB5_12 Depth=1
	movl	8(%rax), %ecx
.LBB5_21:                               # %cond.end52
                                        #   in Loop: Header=BB5_12 Depth=1
	xorq	%rax, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movabsq	$.L.str3, %rsi
	callq	fnotice
	movl	max_qty(%rip), %eax
.LBB5_22:                               # %if.end55
                                        #   in Loop: Header=BB5_12 Depth=1
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$499, %rdx              # imm = 0x1F3
	jg	.LBB5_24
# BB#23:                                # %if.then58
                                        #   in Loop: Header=BB5_12 Depth=1
	movq	$500, %rax              # imm = 0x1F4
	movl	%eax, max_qty(%rip)
.LBB5_24:                               # %if.end59
                                        #   in Loop: Header=BB5_12 Depth=1
	movl	max_reg(%rip), %ecx
	movslq	40(%rsp), %rdx
	addq	%rax, %rcx
	movl	%ecx, max_qty(%rip)
	testq	%rdx, %rdx
	jle	.LBB5_26
# BB#25:                                # %if.then64
                                        #   in Loop: Header=BB5_12 Depth=1
	movq	32(%rsp), %rsi
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	leaq	48(%rsp), %rdx
	callq	cse_basic_block
	jmp	.LBB5_30
	.align	16, 0x90
.LBB5_14:                               # %if.then27
                                        #   in Loop: Header=BB5_12 Depth=1
	movabsq	$4278255615, %rcx       # imm = 0xFF00FFFF
	andq	%rcx, %rax
	movl	%eax, (%r14)
	movq	32(%rsp), %rax
	xorq	%r14, %r14
	testq	%rax, %rax
	je	.LBB5_16
# BB#15:                                # %cond.true
                                        #   in Loop: Header=BB5_12 Depth=1
	movq	24(%rax), %r14
.LBB5_16:                               # %cond.end
                                        #   in Loop: Header=BB5_12 Depth=1
	movl	%r12d, 40(%rsp)
	jmp	.LBB5_17
	.align	16, 0x90
.LBB5_26:                               # %if.else67
                                        #   in Loop: Header=BB5_12 Depth=1
	movl	cse_jumps_altered(%rip), %r13d
	movq	32(%rsp), %rsi
	movl	%r12d, cse_jumps_altered(%rip)
	movq	%r14, %rdi
	leaq	48(%rsp), %rdx
	movq	(%rsp), %rcx            # 8-byte Reload
	callq	cse_basic_block
	movl	cse_jumps_altered(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB5_28
# BB#27:                                # %lor.lhs.false75
                                        #   in Loop: Header=BB5_12 Depth=1
	movl	flag_cse_follow_jumps(%rip), %edx
	movl	flag_cse_skip_blocks(%rip), %esi
	orq	%rdx, %rsi
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rsi
	jne	.LBB5_29
.LBB5_28:                               # %if.then80
                                        #   in Loop: Header=BB5_12 Depth=1
	movq	%rax, %r14
.LBB5_29:                               # %if.end81
                                        #   in Loop: Header=BB5_12 Depth=1
	orq	%r13, %rcx
	movl	%ecx, cse_jumps_altered(%rip)
.LBB5_30:                               # %if.end82
                                        #   in Loop: Header=BB5_12 Depth=1
	movzbl	cse_altered(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB5_17
# BB#31:                                # %if.then84
                                        #   in Loop: Header=BB5_12 Depth=1
	callq	ggc_collect
.LBB5_17:                               # %while.cond.backedge
                                        #   in Loop: Header=BB5_12 Depth=1
	testq	%r14, %r14
	jne	.LBB5_12
.LBB5_33:                               # %while.end
	callq	ggc_pop_context
	movslq	max_elements_made(%rip), %rcx
	movslq	n_elements_made(%rip), %rax
	cmpq	%rax, %rcx
	jge	.LBB5_35
# BB#34:                                # %if.then88
	movl	%eax, max_elements_made(%rip)
.LBB5_35:                               # %if.end89
	callq	end_alias_analysis
	movq	uid_cuid(%rip), %rdi
	callq	free
	movq	reg_eqv_table(%rip), %rdi
	callq	free
	movl	cse_jumps_altered(%rip), %ecx
	movzbl	recorded_label_ref(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB5_36
# BB#37:                                # %if.end89
	movabsq	$1, %rcx
	jmp	.LBB5_38
.LBB5_36:
	movabsq	$0, %rcx
.LBB5_38:                               # %if.end89
	orq	%rcx, %rax
	andq	$1, %rax
	addq	$208, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp76:
	.size	cse_main, .Ltmp76-cse_main
	.cfi_endproc

	.align	16, 0x90
	.type	cse_basic_block,@function
cse_basic_block:                        # @cse_basic_block
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp83:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp84:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp85:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp86:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp87:
	.cfi_def_cfa_offset 48
	subq	$240, %rsp
.Ltmp88:
	.cfi_def_cfa_offset 288
.Ltmp89:
	.cfi_offset %rbx, -48
.Ltmp90:
	.cfi_offset %r12, -40
.Ltmp91:
	.cfi_offset %r13, -32
.Ltmp92:
	.cfi_offset %r14, -24
.Ltmp93:
	.cfi_offset %r15, -16
	movl	max_qty(%rip), %eax
	movl	max_reg(%rip), %ebx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%rsi, %r14
	movq	%rdi, %r15
	subq	%rbx, %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	leaq	(%rax,%rax,2), %rdi
	callq	xmalloc
	movslq	max_reg(%rip), %rdx
	movq	%rdx, %rcx
	negq	%rcx
	leaq	(%rcx,%rcx,2), %rsi
	movq	$4, %rcx
	shlq	%cl, %rsi
	addq	%rax, %rsi
	movq	%rsi, qty_table(%rip)
	movl	%edx, next_qty(%rip)
	movabsq	$reg_hash, %rdi
	xorq	%rsi, %rsi
	movq	$1024, %rdx             # imm = 0x400
	xorq	%rbx, %rbx
	callq	memset
	cmpq	$0, cse_reg_info_used_list(%rip)
	je	.LBB6_2
# BB#1:                                 # %if.then.i
	movq	cse_reg_info_free_list(%rip), %rax
	movq	cse_reg_info_used_list_end(%rip), %rcx
	movq	%rax, 8(%rcx)
	movq	cse_reg_info_used_list(%rip), %rax
	movq	%rax, cse_reg_info_free_list(%rip)
	movq	$0, cse_reg_info_used_list_end(%rip)
	movq	$0, cse_reg_info_used_list(%rip)
.LBB6_2:                                # %if.end.i
	movq	$0, cached_cse_reg_info(%rip)
	movq	$0, hard_regs_in_table(%rip)
	.align	16, 0x90
.LBB6_3:                                # %for.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_5 Depth 2
	movq	table(,%rbx,8), %rax
	testq	%rax, %rax
	je	.LBB6_7
# BB#4:                                 # %if.then2.i
                                        #   in Loop: Header=BB6_3 Depth=1
	movq	$0, table(,%rbx,8)
	movq	%rax, %rdx
	.align	16, 0x90
.LBB6_5:                                # %while.cond.i
                                        #   Parent Loop BB6_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdx, %rcx
	movq	16(%rcx), %rdx
	testq	%rdx, %rdx
	jne	.LBB6_5
# BB#6:                                 # %while.end.i
                                        #   in Loop: Header=BB6_3 Depth=1
	movq	free_element_chain(%rip), %rdx
	movq	%rdx, 16(%rcx)
	movq	%rax, free_element_chain(%rip)
.LBB6_7:                                # %for.inc.i
                                        #   in Loop: Header=BB6_3 Depth=1
	incq	%rbx
	cmpq	$32, %rbx
	jne	.LBB6_3
# BB#8:                                 # %new_basic_block.exit
	xorq	%r12, %r12
	testq	%r14, %r14
	je	.LBB6_12
# BB#9:                                 # %land.lhs.true
	movzbl	(%r14), %eax
	cmpq	$36, %rax
	jne	.LBB6_11
# BB#10:                                # %if.then
	movl	32(%r14), %eax
	incq	%rax
	movl	%eax, 32(%r14)
.LBB6_11:                               # %for.cond.preheader
	movq	%r14, %r12
.LBB6_12:                               # %for.cond.preheader
	cmpq	%r15, %r12
	je	.LBB6_13
# BB#14:                                # %for.body.lr.ph
	xorq	%r13, %r13
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
	movq	$0, 32(%rsp)            # 8-byte Folded Spill
	.align	16, 0x90
.LBB6_15:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_18 Depth 2
                                        #       Child Loop BB6_25 Depth 3
                                        #       Child Loop BB6_32 Depth 3
                                        #       Child Loop BB6_37 Depth 3
                                        #     Child Loop BB6_57 Depth 2
                                        #       Child Loop BB6_62 Depth 3
                                        #         Child Loop BB6_63 Depth 4
                                        #           Child Loop BB6_73 Depth 5
                                        #           Child Loop BB6_80 Depth 5
                                        #           Child Loop BB6_85 Depth 5
	movzbl	(%r15), %r14d
	cmpq	$37, %r14
	je	.LBB6_43
# BB#16:                                # %land.lhs.true10
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rbx, %rbx
	cmpq	$1001, %rax             # imm = 0x3E9
	jge	.LBB6_18
# BB#17:                                #   in Loop: Header=BB6_15 Depth=1
	incq	%r13
	jmp	.LBB6_43
	.align	16, 0x90
.LBB6_41:                               # %remove_from_table.exit
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	free_element_chain(%rip), %rcx
	movq	%rcx, 16(%rax)
	movq	%rax, free_element_chain(%rip)
.LBB6_18:                               # %for.body.i311
                                        #   Parent Loop BB6_15 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_25 Depth 3
                                        #       Child Loop BB6_32 Depth 3
                                        #       Child Loop BB6_37 Depth 3
	movq	table(,%rbx,8), %rax
	testq	%rax, %rax
	jne	.LBB6_19
# BB#42:                                # %for.inc7.i
                                        #   in Loop: Header=BB6_18 Depth=2
	incq	%rbx
	xorq	%r13, %r13
	cmpq	$32, %rbx
	jne	.LBB6_18
	jmp	.LBB6_43
	.align	16, 0x90
.LBB6_19:                               # %for.body2.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	(%rax), %rdi
	movzbl	(%rdi), %ecx
	cmpq	$61, %rcx
	jne	.LBB6_21
# BB#20:                                # %if.then.i315
                                        #   in Loop: Header=BB6_18 Depth=2
	movl	72(%rax), %esi
	callq	invalidate
	jmp	.LBB6_18
	.align	16, 0x90
.LBB6_21:                               # %if.end.i324
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	$0, 48(%rax)
	movq	32(%rax), %rcx
	movq	40(%rax), %rdx
	testq	%rcx, %rcx
	je	.LBB6_23
# BB#22:                                # %if.then1.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	%rdx, 40(%rcx)
.LBB6_23:                               # %if.end3.i
                                        #   in Loop: Header=BB6_18 Depth=2
	testq	%rdx, %rdx
	jne	.LBB6_166
# BB#24:                                # %while.cond.preheader.i
                                        #   in Loop: Header=BB6_18 Depth=2
	testq	%rcx, %rcx
	movq	%rcx, %rdx
	je	.LBB6_26
	.align	16, 0x90
.LBB6_25:                               # %while.body.i
                                        #   Parent Loop BB6_15 Depth=1
                                        #     Parent Loop BB6_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rcx, 48(%rdx)
	movq	32(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.LBB6_25
	jmp	.LBB6_26
.LBB6_166:                              # %if.then5.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	%rcx, 32(%rdx)
.LBB6_26:                               # %if.end10.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	16(%rax), %rcx
	movq	24(%rax), %rdx
	testq	%rcx, %rcx
	je	.LBB6_28
# BB#27:                                # %if.then14.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	%rdx, 24(%rcx)
.LBB6_28:                               # %if.end16.i
                                        #   in Loop: Header=BB6_18 Depth=2
	testq	%rdx, %rdx
	jne	.LBB6_29
# BB#30:                                # %if.else20.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	table(,%rbx,8), %rdx
	cmpq	%rax, %rdx
	movq	$-256, %rdx
	jne	.LBB6_32
# BB#31:                                # %if.then22.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	%rcx, table(,%rbx,8)
	jmp	.LBB6_35
	.align	16, 0x90
.LBB6_32:                               # %for.body.i329
                                        #   Parent Loop BB6_15 Depth=1
                                        #     Parent Loop BB6_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	table+256(%rdx), %rsi
	cmpq	%rax, %rsi
	jne	.LBB6_34
# BB#33:                                # %if.then30.i
                                        #   in Loop: Header=BB6_32 Depth=3
	movq	%rcx, table+256(%rdx)
.LBB6_34:                               # %for.inc.i332
                                        #   in Loop: Header=BB6_32 Depth=3
	addq	$8, %rdx
	jne	.LBB6_32
	jmp	.LBB6_35
.LBB6_29:                               # %if.then18.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	%rcx, 16(%rdx)
.LBB6_35:                               # %if.end35.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	56(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB6_41
# BB#36:                                # %if.end35.i
                                        #   in Loop: Header=BB6_18 Depth=2
	cmpq	%rax, %rcx
	movq	%rcx, %rsi
	je	.LBB6_41
	.align	16, 0x90
.LBB6_37:                               # %while.cond41.i
                                        #   Parent Loop BB6_15 Depth=1
                                        #     Parent Loop BB6_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rdx
	movq	56(%rdx), %rsi
	cmpq	%rax, %rsi
	jne	.LBB6_37
# BB#38:                                # %while.end46.i
                                        #   in Loop: Header=BB6_18 Depth=2
	xorq	%rsi, %rsi
	cmpq	%rdx, %rcx
	je	.LBB6_40
# BB#39:                                # %while.end46.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	%rcx, %rsi
.LBB6_40:                               # %while.end46.i
                                        #   in Loop: Header=BB6_18 Depth=2
	movq	%rsi, 56(%rdx)
	jmp	.LBB6_41
	.align	16, 0x90
.LBB6_43:                               # %if.end15
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rax
	cmpq	%r15, %rax
	jne	.LBB6_46
# BB#44:                                # %if.then18
                                        #   in Loop: Header=BB6_15 Depth=1
	movl	8(%rcx), %eax
	addq	$16, %rcx
	cmpq	$1, %rax
	jne	.LBB6_53
# BB#45:                                #   in Loop: Header=BB6_15 Depth=1
	movq	%rcx, 40(%rsp)          # 8-byte Spill
.LBB6_46:                               # %if.end33
                                        #   in Loop: Header=BB6_15 Depth=1
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB6_48
# BB#47:                                # %if.then38
                                        #   in Loop: Header=BB6_15 Depth=1
	movabsq	$4278255615, %rcx       # imm = 0xFF00FFFF
	andq	%rcx, %rax
	movl	%eax, (%r15)
.LBB6_48:                               # %if.end41
                                        #   in Loop: Header=BB6_15 Depth=1
	movzbl	rtx_class(%r14), %eax
	cmpq	$105, %rax
	jne	.LBB6_96
# BB#49:                                # %if.then46
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	56(%r15), %rdi
	testq	%rdi, %rdi
	je	.LBB6_92
# BB#50:                                # %if.end58
                                        #   in Loop: Header=BB6_15 Depth=1
	xorq	%rsi, %rsi
	callq	cse_process_notes
	testq	%rax, %rax
	movq	%rax, 56(%r15)
	je	.LBB6_92
# BB#51:                                # %if.then64
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	$7, %rsi
	xorq	%rdx, %rdx
	movq	%r15, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB6_52
# BB#90:                                # %if.else71
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	$6, %rsi
	xorq	%rdx, %rdx
	movq	%r15, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB6_92
# BB#91:                                # %if.else71
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
	jmp	.LBB6_92
	.align	16, 0x90
.LBB6_53:                               # %if.then18
                                        #   in Loop: Header=BB6_15 Depth=1
	testq	%rax, %rax
	jne	.LBB6_56
# BB#54:                                # %if.then25
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	$1, %rsi
	movq	%r15, %rdi
	callq	record_jump_equiv
	jmp	.LBB6_55
.LBB6_56:                               # %if.else
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	24(%r15), %r14
	jmp	.LBB6_57
	.align	16, 0x90
.LBB6_68:                               # %for.inc.i343
                                        #   in Loop: Header=BB6_57 Depth=2
	movq	24(%r14), %r14
.LBB6_57:                               # %if.else
                                        #   Parent Loop BB6_15 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_62 Depth 3
                                        #         Child Loop BB6_63 Depth 4
                                        #           Child Loop BB6_73 Depth 5
                                        #           Child Loop BB6_80 Depth 5
                                        #           Child Loop BB6_85 Depth 5
	testq	%r14, %r14
	je	.LBB6_55
# BB#58:                                # %land.rhs.i337
                                        #   in Loop: Header=BB6_57 Depth=2
	movl	(%r14), %ecx
	movq	%rcx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$36, %rax
	je	.LBB6_55
# BB#59:                                # %for.body.i340
                                        #   in Loop: Header=BB6_57 Depth=2
	movzbl	rtx_class(%rax), %edx
	cmpq	$105, %rdx
	jne	.LBB6_68
# BB#60:                                # %if.end.i341
                                        #   in Loop: Header=BB6_57 Depth=2
	cmpq	$34, %rax
	jne	.LBB6_67
# BB#61:                                # %if.then9.i
                                        #   in Loop: Header=BB6_57 Depth=2
	xorq	%rax, %rax
	testq	$67108864, %rcx         # imm = 0x4000000
	jne	.LBB6_66
	.align	16, 0x90
.LBB6_62:                               # %for.body.i.i
                                        #   Parent Loop BB6_15 Depth=1
                                        #     Parent Loop BB6_57 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB6_63 Depth 4
                                        #           Child Loop BB6_73 Depth 5
                                        #           Child Loop BB6_80 Depth 5
                                        #           Child Loop BB6_85 Depth 5
	movq	table(,%rax,8), %rcx
	testq	%rcx, %rcx
	je	.LBB6_65
	.align	16, 0x90
.LBB6_63:                               # %for.body2.i.i
                                        #   Parent Loop BB6_15 Depth=1
                                        #     Parent Loop BB6_57 Depth=2
                                        #       Parent Loop BB6_62 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB6_73 Depth 5
                                        #           Child Loop BB6_80 Depth 5
                                        #           Child Loop BB6_85 Depth 5
	movzbl	76(%rcx), %esi
	movq	16(%rcx), %rdx
	testq	%rsi, %rsi
	je	.LBB6_64
# BB#69:                                # %if.end.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	$0, 48(%rcx)
	movq	32(%rcx), %rsi
	movq	40(%rcx), %rdi
	testq	%rsi, %rsi
	je	.LBB6_71
# BB#70:                                # %if.then1.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	%rdi, 40(%rsi)
.LBB6_71:                               # %if.end3.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	testq	%rdi, %rdi
	jne	.LBB6_167
# BB#72:                                # %while.cond.preheader.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	testq	%rsi, %rsi
	movq	%rsi, %rdi
	je	.LBB6_74
	.align	16, 0x90
.LBB6_73:                               # %while.body.i.i
                                        #   Parent Loop BB6_15 Depth=1
                                        #     Parent Loop BB6_57 Depth=2
                                        #       Parent Loop BB6_62 Depth=3
                                        #         Parent Loop BB6_63 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movq	%rsi, 48(%rdi)
	movq	32(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.LBB6_73
	jmp	.LBB6_74
	.align	16, 0x90
.LBB6_167:                              # %if.then5.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	%rsi, 32(%rdi)
.LBB6_74:                               # %if.end10.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	24(%rcx), %rsi
	testq	%rdx, %rdx
	je	.LBB6_76
# BB#75:                                # %if.then14.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	%rsi, 24(%rdx)
.LBB6_76:                               # %if.end16.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	testq	%rsi, %rsi
	jne	.LBB6_77
# BB#78:                                # %if.else20.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	table(,%rax,8), %rsi
	cmpq	%rcx, %rsi
	movq	$-256, %rsi
	jne	.LBB6_80
# BB#79:                                # %if.then22.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	%rdx, table(,%rax,8)
	jmp	.LBB6_83
	.align	16, 0x90
.LBB6_80:                               # %for.body.i35.i
                                        #   Parent Loop BB6_15 Depth=1
                                        #     Parent Loop BB6_57 Depth=2
                                        #       Parent Loop BB6_62 Depth=3
                                        #         Parent Loop BB6_63 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movq	table+256(%rsi), %rdi
	cmpq	%rcx, %rdi
	jne	.LBB6_82
# BB#81:                                # %if.then30.i.i
                                        #   in Loop: Header=BB6_80 Depth=5
	movq	%rdx, table+256(%rsi)
.LBB6_82:                               # %for.inc.i.i
                                        #   in Loop: Header=BB6_80 Depth=5
	addq	$8, %rsi
	jne	.LBB6_80
	jmp	.LBB6_83
	.align	16, 0x90
.LBB6_77:                               # %if.then18.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	%rdx, 16(%rsi)
.LBB6_83:                               # %if.end35.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	56(%rcx), %rsi
	testq	%rsi, %rsi
	je	.LBB6_89
# BB#84:                                # %if.end35.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	cmpq	%rcx, %rsi
	movq	%rsi, %rdi
	je	.LBB6_89
	.align	16, 0x90
.LBB6_85:                               # %while.cond41.i.i
                                        #   Parent Loop BB6_15 Depth=1
                                        #     Parent Loop BB6_57 Depth=2
                                        #       Parent Loop BB6_62 Depth=3
                                        #         Parent Loop BB6_63 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movq	%rdi, %rbx
	movq	56(%rbx), %rdi
	cmpq	%rcx, %rdi
	jne	.LBB6_85
# BB#86:                                # %while.end46.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	xorq	%rdi, %rdi
	cmpq	%rbx, %rsi
	je	.LBB6_88
# BB#87:                                # %while.end46.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	%rsi, %rdi
.LBB6_88:                               # %while.end46.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	%rdi, 56(%rbx)
.LBB6_89:                               # %remove_from_table.exit.i
                                        #   in Loop: Header=BB6_63 Depth=4
	movq	free_element_chain(%rip), %rsi
	movq	%rsi, 16(%rcx)
	movq	%rcx, free_element_chain(%rip)
.LBB6_64:                               # %for.cond1.backedge.i.i
                                        #   in Loop: Header=BB6_63 Depth=4
	testq	%rdx, %rdx
	movq	%rdx, %rcx
	jne	.LBB6_63
.LBB6_65:                               # %for.inc4.i.i
                                        #   in Loop: Header=BB6_62 Depth=3
	incq	%rax
	cmpq	$32, %rax
	jne	.LBB6_62
.LBB6_66:                               # %if.end14.i
                                        #   in Loop: Header=BB6_57 Depth=2
	callq	invalidate_for_call
.LBB6_67:                               # %if.end15.i
                                        #   in Loop: Header=BB6_57 Depth=2
	movq	32(%r14), %rdi
	callq	invalidate_from_clobbers
	movq	32(%r14), %rdi
	xorq	%rdx, %rdx
	movabsq	$invalidate_skipped_set, %rsi
	callq	note_stores
	jmp	.LBB6_68
	.align	16, 0x90
.LBB6_55:                               # %if.end28
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	%r15, prev_insn(%rip)
	movq	64(%r15), %r15
	jmp	.LBB6_118
.LBB6_52:                               # %if.then67
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	8(%rax), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	.align	16, 0x90
.LBB6_92:                               # %if.end77
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	%r15, %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	cse_insn
	movzbl	(%r15), %eax
	cmpq	$32, %rax
	jne	.LBB6_96
# BB#93:                                # %if.end77
                                        #   in Loop: Header=BB6_15 Depth=1
	movzbl	recorded_label_ref(%rip), %eax
	testq	$1, %rax
	jne	.LBB6_96
# BB#94:                                # %land.lhs.true84
                                        #   in Loop: Header=BB6_15 Depth=1
	leaq	32(%r15), %rdi
	movabsq	$check_for_label_ref, %rsi
	movq	%r15, %rdx
	callq	for_each_rtx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_96
# BB#95:                                # %if.then90
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	$1, %rax
	movb	%al, recorded_label_ref(%rip)
	.align	16, 0x90
.LBB6_96:                               # %if.end92
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	%r15, %rdi
	callq	any_uncondjump_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_104
# BB#97:                                # %if.then95
                                        #   in Loop: Header=BB6_15 Depth=1
	testq	%r12, %r12
	je	.LBB6_98
# BB#100:                               # %if.end101
                                        #   in Loop: Header=BB6_15 Depth=1
	movzbl	3(%r12), %eax
	testq	$8, %rax
	jne	.LBB6_119
# BB#101:                               # %if.end114
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	64(%r15), %rax
	cmpq	%r12, %rax
	movq	$1, %rax
	je	.LBB6_103
# BB#102:                               # %select.mid
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	32(%rsp), %rax          # 8-byte Reload
.LBB6_103:                              # %select.end
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	16(%r12), %r15
	movq	%rax, 32(%rsp)          # 8-byte Spill
.LBB6_104:                              # %if.end118
                                        #   in Loop: Header=BB6_15 Depth=1
	testq	%r12, %r12
	jne	.LBB6_106
# BB#105:                               #   in Loop: Header=BB6_15 Depth=1
	xorq	%r12, %r12
	jmp	.LBB6_118
	.align	16, 0x90
.LBB6_106:                              # %land.lhs.true121
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	24(%r15), %rax
	cmpq	%r12, %rax
	jne	.LBB6_118
# BB#107:                               # %land.lhs.true127
                                        #   in Loop: Header=BB6_15 Depth=1
	movzbl	(%r12), %eax
	cmpq	$36, %rax
	jne	.LBB6_118
# BB#108:                               # %land.lhs.true132
                                        #   in Loop: Header=BB6_15 Depth=1
	movl	32(%r12), %eax
	decq	%rax
	movq	%rax, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rdx, %rsi
	andq	%rsi, %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	andq	%rsi, %rdx
	cmpq	%rdx, %rcx
	movl	%eax, 32(%r12)
	jne	.LBB6_118
# BB#109:                               # %if.then138
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	24(%r12), %rbx
	testq	%rbx, %rbx
	je	.LBB6_98
# BB#110:                               # %if.end147
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	%r12, %rdi
	callq	prev_nonnote_insn
	testq	%rax, %rax
	je	.LBB6_113
# BB#111:                               # %land.lhs.true150
                                        #   in Loop: Header=BB6_15 Depth=1
	movzbl	(%rax), %eax
	cmpq	$35, %rax
	je	.LBB6_112
.LBB6_113:                              # %if.end158
                                        #   in Loop: Header=BB6_15 Depth=1
	xorq	%rax, %rax
	movl	%eax, 72(%rsp)
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%rbx, %rdi
	leaq	48(%rsp), %rsi
	callq	cse_end_of_basic_block
	movl	56(%rsp), %eax
	movl	next_qty(%rip), %ecx
	leaq	(%rcx,%rax,2), %rax
	movq	$32, %rcx
	movslq	max_qty(%rip), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rdx, %rax
	jg	.LBB6_119
# BB#114:                               # %if.end163
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	48(%rsp), %rax
	movl	%eax, cse_basic_block_start(%rip)
	movq	64(%rsp), %r12
	movq	$32, %rcx
	shrq	%cl, %rax
	movl	%eax, cse_basic_block_end(%rip)
	testq	%r12, %r12
	je	.LBB6_117
# BB#115:                               # %land.lhs.true166
                                        #   in Loop: Header=BB6_15 Depth=1
	movzbl	(%r12), %eax
	cmpq	$36, %rax
	jne	.LBB6_117
# BB#116:                               # %if.then171
                                        #   in Loop: Header=BB6_15 Depth=1
	movl	32(%r12), %eax
	incq	%rax
	movl	%eax, 32(%r12)
.LBB6_117:                              # %cleanup.thread345
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	16(%rbx), %r15
	movq	$0, 32(%rsp)            # 8-byte Folded Spill
	.align	16, 0x90
.LBB6_118:                              # %for.inc
                                        #   in Loop: Header=BB6_15 Depth=1
	movq	24(%r15), %r15
	cmpq	%r12, %r15
	jne	.LBB6_15
	jmp	.LBB6_119
.LBB6_13:
	movq	%r15, %r12
.LBB6_119:                              # %for.end
	movslq	next_qty(%rip), %rax
	movslq	max_qty(%rip), %rcx
	cmpq	%rcx, %rax
	jg	.LBB6_168
# BB#120:                               # %if.end187
	movq	%r12, %rdi
	callq	prev_nonnote_insn
	movl	cse_jumps_altered(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB6_125
# BB#121:                               # %lor.lhs.false
	movl	flag_cse_follow_jumps(%rip), %ecx
	movl	flag_cse_skip_blocks(%rip), %edx
	orq	%rcx, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdx
	je	.LBB6_122
	jmp	.LBB6_123
.LBB6_125:                              # %land.lhs.true196
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
.LBB6_122:                              # %lor.lhs.false
	movq	16(%rsp), %rdx          # 8-byte Reload
	testq	%rcx, %rdx
	je	.LBB6_123
# BB#126:                               # %land.lhs.true196
	testq	%r12, %r12
	je	.LBB6_123
# BB#127:                               # %land.lhs.true201
	movzbl	(%r12), %ecx
	cmpq	$37, %rcx
	jne	.LBB6_123
# BB#128:                               # %land.lhs.true206
	movl	40(%r12), %ecx
	movabsq	$4294967201, %rbx       # imm = 0xFFFFFFA1
	cmpq	%rbx, %rcx
	jne	.LBB6_123
# BB#129:                               # %land.lhs.true212
	movzbl	(%rax), %ecx
	cmpq	$33, %rcx
	jne	.LBB6_123
# BB#130:                               # %land.lhs.true217
	movq	64(%rax), %r15
	testq	%r15, %r15
	je	.LBB6_123
# BB#131:                               # %land.lhs.true223
	movl	32(%r15), %eax
	cmpq	$1, %rax
	jne	.LBB6_123
# BB#132:
	movq	%r15, %rax
.LBB6_133:                              # %for.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.LBB6_123
# BB#134:                               # %land.rhs.i
                                        #   in Loop: Header=BB6_133 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$37, %rcx
	jne	.LBB6_123
# BB#135:                               # %land.rhs1.i
                                        #   in Loop: Header=BB6_133 Depth=1
	movslq	40(%rax), %rcx
	testq	%rcx, %rcx
	jns	.LBB6_133
# BB#136:                               # %lor.lhs.false13.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	movabsq	$4294967200, %rax       # imm = 0xFFFFFFA0
	cmpq	%rax, %rcx
	jne	.LBB6_123
# BB#137:                               # %if.end.i306
	movq	%rdx, %rcx
	movq	last_jump_equiv_class(%rip), %rax
	testq	%rax, %rax
	movq	%r15, %r14
	je	.LBB6_150
# BB#138:                               # %if.then19.i
	movq	48(%rax), %r13
	testq	%r13, %r13
	movq	%r15, %r14
	je	.LBB6_150
# BB#139:
	movq	%rcx, %r14
.LBB6_140:                              # %for.body22.i
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB6_145
# BB#141:                               # %for.body22.i
                                        #   in Loop: Header=BB6_140 Depth=1
	addq	$-61, %rax
	andq	%r14, %rax
	cmpq	$5, %rax
	ja	.LBB6_148
# BB#142:                               # %for.body22.i
                                        #   in Loop: Header=BB6_140 Depth=1
	jmpq	*.LJTI6_0(,%rax,8)
.LBB6_143:                              # %land.lhs.true.i
                                        #   in Loop: Header=BB6_140 Depth=1
	movq	8(%rdi), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB6_148
.LBB6_144:                              # %if.then43.i
                                        #   in Loop: Header=BB6_140 Depth=1
	xorq	%rsi, %rsi
	jmp	.LBB6_147
.LBB6_145:                              # %for.body22.i
                                        #   in Loop: Header=BB6_140 Depth=1
	cmpq	$133, %rax
	jne	.LBB6_148
.LBB6_146:                              # %if.then54.i
                                        #   in Loop: Header=BB6_140 Depth=1
	movq	8(%rdi), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
.LBB6_147:                              # %for.inc64.i
                                        #   in Loop: Header=BB6_140 Depth=1
	callq	invalidate
.LBB6_148:                              # %for.inc64.i
                                        #   in Loop: Header=BB6_140 Depth=1
	movq	32(%r13), %r13
	testq	%r13, %r13
	jne	.LBB6_140
# BB#149:
	movq	%r15, %r14
	jmp	.LBB6_150
.LBB6_98:                               # %if.then98
	movslq	max_reg(%rip), %rax
	movq	qty_table(%rip), %rdx
	leaq	(%rax,%rax,2), %rdi
	movq	$4, %rcx
	shlq	%cl, %rdi
	addq	%rdx, %rdi
	callq	free
	xorq	%rbx, %rbx
	jmp	.LBB6_99
.LBB6_112:                              # %if.then155
	movslq	max_reg(%rip), %rax
	movq	qty_table(%rip), %rdx
	leaq	(%rax,%rax,2), %rdi
	movq	$4, %rcx
	shlq	%cl, %rdi
	addq	%rdx, %rdi
	callq	free
	jmp	.LBB6_99
.LBB6_159:                              # %if.then116.i
                                        #   in Loop: Header=BB6_150 Depth=1
	movq	%r14, %rsi
	movq	%r15, %rdx
	callq	cse_set_around_loop
.LBB6_150:                              # %for.cond70.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_161 Depth 2
	movq	24(%r14), %r14
	movzbl	(%r14), %eax
	cmpq	$34, %rax
	je	.LBB6_123
# BB#151:                               # %for.cond70.i
                                        #   in Loop: Header=BB6_150 Depth=1
	cmpq	$36, %rax
	je	.LBB6_123
# BB#152:                               # %land.lhs.true78.i
                                        #   in Loop: Header=BB6_150 Depth=1
	movslq	8(%r14), %rcx
	movslq	max_insn_uid(%rip), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB6_123
# BB#153:                               # %land.rhs83.i
                                        #   in Loop: Header=BB6_150 Depth=1
	cmpq	$37, %rax
	jne	.LBB6_155
# BB#154:                               # %land.rhs87.i
                                        #   in Loop: Header=BB6_150 Depth=1
	movl	40(%r14), %ecx
	cmpq	%rbx, %rcx
	je	.LBB6_123
.LBB6_155:                              # %for.body94.i
                                        #   in Loop: Header=BB6_150 Depth=1
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB6_150
# BB#156:                               # %land.lhs.true100.i
                                        #   in Loop: Header=BB6_150 Depth=1
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$39, %rax
	je	.LBB6_160
# BB#157:                               # %land.lhs.true100.i
                                        #   in Loop: Header=BB6_150 Depth=1
	cmpq	$47, %rax
	je	.LBB6_159
# BB#158:                               # %land.lhs.true100.i
                                        #   in Loop: Header=BB6_150 Depth=1
	cmpq	$49, %rax
	jne	.LBB6_150
	jmp	.LBB6_159
.LBB6_160:                              # %if.then136.i
                                        #   in Loop: Header=BB6_150 Depth=1
	movq	8(%rdi), %rax
	movslq	(%rax), %r13
	testq	%r13, %r13
	jle	.LBB6_150
	jmp	.LBB6_161
.LBB6_164:                              # %for.cond142.backedge.for.body145_crit_edge.i
                                        #   in Loop: Header=BB6_161 Depth=2
	movq	32(%r14), %rax
	movq	8(%rax), %rax
.LBB6_161:                              # %for.body145.lr.ph.i
                                        #   Parent Loop BB6_150 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%r13
	movq	8(%rax,%r13,8), %rdi
	movzbl	(%rdi), %eax
	cmpq	$47, %rax
	je	.LBB6_165
# BB#162:                               # %for.body145.i
                                        #   in Loop: Header=BB6_161 Depth=2
	cmpq	$49, %rax
	jne	.LBB6_163
.LBB6_165:                              # %if.then172.i
                                        #   in Loop: Header=BB6_161 Depth=2
	movq	%r14, %rsi
	movq	%r15, %rdx
	callq	cse_set_around_loop
.LBB6_163:                              # %for.cond142.backedge.i
                                        #   in Loop: Header=BB6_161 Depth=2
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB6_164
	jmp	.LBB6_150
.LBB6_123:                              # %if.end236
	movslq	max_reg(%rip), %rax
	movq	qty_table(%rip), %rdx
	leaq	(%rax,%rax,2), %rdi
	movq	$4, %rcx
	shlq	%cl, %rdi
	addq	%rdx, %rdi
	callq	free
	xorq	%rbx, %rbx
	testq	%r12, %r12
	je	.LBB6_99
# BB#124:                               # %cond.true
	movq	24(%r12), %rbx
.LBB6_99:                               # %return
	movq	%rbx, %rax
	addq	$240, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB6_168:                              # %if.then186
	movabsq	$.L.str4, %rax
	movabsq	$.L__FUNCTION__.cse_basic_block, %rcx
	movq	$7379, %rsi             # imm = 0x1CD3
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp94:
	.size	cse_basic_block, .Ltmp94-cse_basic_block
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI6_0:
	.quad	.LBB6_144
	.quad	.LBB6_148
	.quad	.LBB6_143
	.quad	.LBB6_146
	.quad	.LBB6_148
	.quad	.LBB6_144

	.text
	.globl	delete_trivially_dead_insns
	.align	16, 0x90
	.type	delete_trivially_dead_insns,@function
delete_trivially_dead_insns:            # @delete_trivially_dead_insns
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp101:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp102:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp103:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp104:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp105:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp106:
	.cfi_def_cfa_offset 80
.Ltmp107:
	.cfi_offset %rbx, -48
.Ltmp108:
	.cfi_offset %r12, -40
.Ltmp109:
	.cfi_offset %r13, -32
.Ltmp110:
	.cfi_offset %r14, -24
.Ltmp111:
	.cfi_offset %r15, -16
	movq	%rdx, %r14
	movq	%rsi, %rax
	movq	%rdi, %rbx
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	xcalloc
	movq	%rax, %r15
	jmp	.LBB7_2
	.align	16, 0x90
.LBB7_1:                                # %for.body
                                        #   in Loop: Header=BB7_2 Depth=1
	xorq	%rdx, %rdx
	movq	$1, %rcx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	count_reg_usage
.LBB7_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	callq	next_real_insn
	movq	%rax, %rbx
	testq	%rbx, %rbx
	jne	.LBB7_1
# BB#3:                                 # %for.end
	movq	%r15, (%rsp)            # 8-byte Spill
	callq	get_last_insn
	movq	%rax, %r12
	movzbl	(%r12), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	je	.LBB7_5
# BB#4:                                 # %if.then
	movq	%r12, %rdi
	callq	prev_real_insn
	movq	%rax, %r12
.LBB7_5:                                # %if.end
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r14
	je	.LBB7_18
# BB#6:                                 # %for.cond37.preheader
	movslq	n_basic_blocks(%rip), %rax
	testq	%rax, %rax
	jle	.LBB7_79
# BB#7:
	xorq	%r13, %r13
	movq	$0, 16(%rsp)            # 8-byte Folded Spill
	xorq	%r15, %r15
	.align	16, 0x90
.LBB7_8:                                # %for.body40
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_9 Depth 2
                                        #       Child Loop BB7_10 Depth 3
                                        #       Child Loop BB7_68 Depth 3
	movq	basic_block_info(%rip), %rax
	movq	32(%rax,%r13,8), %r14
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movq	8(%r14), %r12
	jmp	.LBB7_9
	.align	16, 0x90
.LBB7_17:                               # %if.end78
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	$0, 16(%rsp)            # 8-byte Folded Spill
.LBB7_9:                                # %for.cond44.outer
                                        #   Parent Loop BB7_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_10 Depth 3
                                        #       Child Loop BB7_68 Depth 3
	movq	(%r14), %rax
	.align	16, 0x90
.LBB7_10:                               # %for.cond44
                                        #   Parent Loop BB7_8 Depth=1
                                        #     Parent Loop BB7_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%r12, %rbx
	cmpq	%rax, %rbx
	je	.LBB7_78
# BB#11:                                # %for.body47
                                        #   in Loop: Header=BB7_10 Depth=3
	movzbl	(%rbx), %ecx
	movzbl	rtx_class(%rcx), %ecx
	movq	16(%rbx), %r12
	cmpq	$105, %rcx
	jne	.LBB7_10
# BB#12:                                # %if.end58
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	$6, %rsi
	xorq	%rdx, %rdx
	movq	%rbx, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB7_13
# BB#53:                                # %if.else64
                                        #   in Loop: Header=BB7_9 Depth=2
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %r15
	jne	.LBB7_54
# BB#56:                                # %if.else70
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	32(%rbx), %r14
	movzbl	(%r14), %eax
	cmpq	$39, %rax
	jne	.LBB7_57
# BB#67:                                # %if.then10.i137
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	%r15, 8(%rsp)           # 8-byte Spill
	movq	8(%r14), %rax
	movslq	(%rax), %r15
	testq	%r15, %r15
	jle	.LBB7_65
	jmp	.LBB7_68
	.align	16, 0x90
.LBB7_71:                               # %for.cond.backedge.for.body_crit_edge.i151
                                        #   in Loop: Header=BB7_68 Depth=3
	movq	32(%rbx), %rax
	movq	8(%rax), %rax
.LBB7_68:                               # %for.body.lr.ph.i138
                                        #   Parent Loop BB7_8 Depth=1
                                        #     Parent Loop BB7_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	decq	%r15
	movq	8(%rax,%r15,8), %r14
	movzbl	(%r14), %eax
	cmpq	$47, %rax
	je	.LBB7_72
# BB#69:                                # %for.body.i144
                                        #   in Loop: Header=BB7_68 Depth=3
	addq	$-48, %rax
	andq	%r8, %rax
	cmpq	$1, %rax
	jbe	.LBB7_70
	jmp	.LBB7_58
	.align	16, 0x90
.LBB7_72:                               # %if.then27.i152
                                        #   in Loop: Header=BB7_68 Depth=3
	movq	%r14, %rdi
	callq	set_noop_p
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rax
	jne	.LBB7_70
# BB#73:                                # %if.else.i162
                                        #   in Loop: Header=BB7_68 Depth=3
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_58
# BB#74:                                # %lor.lhs.false.i166
                                        #   in Loop: Header=BB7_68 Depth=3
	movl	8(%rax), %eax
	cmpq	$53, %rax
	jb	.LBB7_58
# BB#75:                                # %lor.lhs.false7.i170
                                        #   in Loop: Header=BB7_68 Depth=3
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	testq	%rax, %rax
	jne	.LBB7_58
# BB#76:                                # %lor.lhs.false16.i175
                                        #   in Loop: Header=BB7_68 Depth=3
	movq	16(%r14), %rdi
	callq	side_effects_p
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rax
	jne	.LBB7_58
# BB#77:                                # %lor.lhs.false22.i178
                                        #   in Loop: Header=BB7_68 Depth=3
	movq	cfun(%rip), %rax
	movq	8(%r14), %rcx
	movq	128(%rax), %rax
	cmpq	%rax, %rcx
	je	.LBB7_58
	.align	16, 0x90
.LBB7_70:                               # %for.cond.backedge.i146
                                        #   in Loop: Header=BB7_68 Depth=3
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB7_71
	jmp	.LBB7_65
	.align	16, 0x90
.LBB7_13:                               # %if.end74.thread
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	%rbx, %rdi
	callq	dead_libcall_p
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	$1, %r15
	jmp	.LBB7_14
.LBB7_54:                               # %if.then66
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	%r15, 8(%rsp)           # 8-byte Spill
	movq	16(%rsp), %rax          # 8-byte Reload
	testq	%r8, %rax
	jne	.LBB7_65
# BB#55:                                #   in Loop: Header=BB7_9 Depth=2
	movq	$0, 16(%rsp)            # 8-byte Folded Spill
	jmp	.LBB7_66
.LBB7_57:                               # %if.else70
                                        #   in Loop: Header=BB7_9 Depth=2
	cmpq	$47, %rax
	jne	.LBB7_58
# BB#59:                                # %if.then.i132
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	%r15, 8(%rsp)           # 8-byte Spill
	movq	%r14, %rdi
	callq	set_noop_p
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rax
	jne	.LBB7_65
# BB#60:                                # %if.else.i215
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_58
# BB#61:                                # %lor.lhs.false.i219
                                        #   in Loop: Header=BB7_9 Depth=2
	movl	8(%rax), %eax
	cmpq	$53, %rax
	jb	.LBB7_58
# BB#62:                                # %lor.lhs.false7.i223
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	testq	%rax, %rax
	jne	.LBB7_58
# BB#63:                                # %lor.lhs.false16.i228
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	16(%r14), %rdi
	callq	side_effects_p
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rax
	jne	.LBB7_58
# BB#64:                                # %lor.lhs.false22.i231
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	cfun(%rip), %rax
	movq	8(%r14), %rcx
	movq	128(%rax), %rax
	cmpq	%rax, %rcx
	jne	.LBB7_65
.LBB7_58:                               #   in Loop: Header=BB7_9 Depth=2
	xorq	%r15, %r15
	movq	24(%rsp), %r14          # 8-byte Reload
	jmp	.LBB7_14
.LBB7_65:                               # %if.then76
                                        #   in Loop: Header=BB7_9 Depth=2
	xorq	%rdx, %rdx
	movq	%rbx, %rdi
	movq	(%rsp), %rsi            # 8-byte Reload
	movq	%r8, %rcx
	callq	count_reg_usage
	movq	%rbx, %rdi
	callq	delete_insn
.LBB7_66:                               # %if.end78
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	8(%rsp), %r15           # 8-byte Reload
.LBB7_14:                               # %if.end78
                                        #   in Loop: Header=BB7_9 Depth=2
	movq	$7, %rsi
	xorq	%rdx, %rdx
	movq	%rbx, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB7_16
# BB#15:                                # %if.end78
                                        #   in Loop: Header=BB7_9 Depth=2
	movabsq	$0, %r15
.LBB7_16:                               # %if.end78
                                        #   in Loop: Header=BB7_9 Depth=2
	je	.LBB7_9
	jmp	.LBB7_17
	.align	16, 0x90
.LBB7_78:                               # %for.inc85
                                        #   in Loop: Header=BB7_8 Depth=1
	incq	%r13
	movslq	n_basic_blocks(%rip), %rax
	movq	$32, %rcx
	movq	%r13, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jl	.LBB7_8
	jmp	.LBB7_79
.LBB7_18:                               # %for.cond9.preheader
	testq	%r12, %r12
	je	.LBB7_79
# BB#19:
	xorq	%r14, %r14
	xorq	%r15, %r15
	.align	16, 0x90
.LBB7_20:                               # %for.body11
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_43 Depth 2
	movq	%r12, %rdi
	callq	prev_real_insn
	movq	%rax, %rbx
	movq	$6, %rsi
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB7_21
# BB#27:                                # %if.else
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %r15
	jne	.LBB7_28
# BB#30:                                # %if.else21
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	32(%r12), %r14
	movzbl	(%r14), %eax
	cmpq	$39, %rax
	jne	.LBB7_31
# BB#42:                                # %if.then10.i
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	8(%r14), %rax
	movslq	(%rax), %r14
	testq	%r14, %r14
	jle	.LBB7_39
	jmp	.LBB7_43
	.align	16, 0x90
.LBB7_46:                               # %for.cond.backedge.for.body_crit_edge.i
                                        #   in Loop: Header=BB7_43 Depth=2
	movq	32(%r12), %rax
	movq	8(%rax), %rax
.LBB7_43:                               # %for.body.lr.ph.i
                                        #   Parent Loop BB7_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%r14
	movq	8(%rax,%r14,8), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	je	.LBB7_47
# BB#44:                                # %for.body.i
                                        #   in Loop: Header=BB7_43 Depth=2
	addq	$-48, %rax
	andq	%r8, %rax
	cmpq	$1, %rax
	jbe	.LBB7_45
	jmp	.LBB7_32
	.align	16, 0x90
.LBB7_47:                               # %if.then27.i
                                        #   in Loop: Header=BB7_43 Depth=2
	movq	%rbx, %rdi
	movq	%r15, %r13
	movq	%r8, %r15
	callq	set_noop_p
	movq	%r15, %r8
	movq	%r13, %r15
	testq	%r8, %rax
	jne	.LBB7_45
# BB#48:                                # %if.else.i
                                        #   in Loop: Header=BB7_43 Depth=2
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_32
# BB#49:                                # %lor.lhs.false.i
                                        #   in Loop: Header=BB7_43 Depth=2
	movl	8(%rax), %eax
	cmpq	$53, %rax
	jb	.LBB7_32
# BB#50:                                # %lor.lhs.false7.i
                                        #   in Loop: Header=BB7_43 Depth=2
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	testq	%rax, %rax
	jne	.LBB7_32
# BB#51:                                # %lor.lhs.false16.i
                                        #   in Loop: Header=BB7_43 Depth=2
	movq	16(%rbx), %rdi
	callq	side_effects_p
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rax
	jne	.LBB7_32
# BB#52:                                # %lor.lhs.false22.i
                                        #   in Loop: Header=BB7_43 Depth=2
	movq	cfun(%rip), %rax
	movq	8(%rbx), %rcx
	movq	128(%rax), %rax
	cmpq	%rax, %rcx
	je	.LBB7_32
	.align	16, 0x90
.LBB7_45:                               # %for.cond.backedge.i
                                        #   in Loop: Header=BB7_43 Depth=2
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB7_46
	jmp	.LBB7_39
	.align	16, 0x90
.LBB7_21:                               # %if.end25.thread
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	%r12, %rdi
	callq	dead_libcall_p
	movq	%rax, %r14
	movq	$1, %r15
	jmp	.LBB7_22
	.align	16, 0x90
.LBB7_28:                               # %if.then19
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	testq	%r8, %rax
	jne	.LBB7_39
# BB#29:                                #   in Loop: Header=BB7_20 Depth=1
	xorq	%r14, %r14
	movq	16(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB7_22
.LBB7_31:                               # %if.else21
                                        #   in Loop: Header=BB7_20 Depth=1
	cmpq	$47, %rax
	jne	.LBB7_32
# BB#33:                                # %if.then.i
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	%r14, %rdi
	callq	set_noop_p
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rax
	jne	.LBB7_39
# BB#34:                                # %if.else.i189
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_32
# BB#35:                                # %lor.lhs.false.i193
                                        #   in Loop: Header=BB7_20 Depth=1
	movl	8(%rax), %eax
	cmpq	$53, %rax
	jb	.LBB7_32
# BB#36:                                # %lor.lhs.false7.i197
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	testq	%rax, %rax
	jne	.LBB7_32
# BB#37:                                # %lor.lhs.false16.i202
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	16(%r14), %rdi
	callq	side_effects_p
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rax
	jne	.LBB7_32
# BB#38:                                # %lor.lhs.false22.i205
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	cfun(%rip), %rax
	movq	8(%r14), %rcx
	movq	128(%rax), %rax
	cmpq	%rax, %rcx
	jne	.LBB7_39
.LBB7_32:                               #   in Loop: Header=BB7_20 Depth=1
	xorq	%r15, %r15
	jmp	.LBB7_40
	.align	16, 0x90
.LBB7_39:                               # %if.then27
                                        #   in Loop: Header=BB7_20 Depth=1
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	movq	(%rsp), %rsi            # 8-byte Reload
	movq	%r8, %rcx
	callq	count_reg_usage
	movq	%r12, %rdi
	callq	delete_related_insns
.LBB7_40:                               # %if.end29
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	16(%rsp), %rbx          # 8-byte Reload
.LBB7_22:                               # %if.end29
                                        #   in Loop: Header=BB7_20 Depth=1
	movq	$7, %rsi
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB7_24
# BB#23:                                # %if.end29
                                        #   in Loop: Header=BB7_20 Depth=1
	movabsq	$0, %r15
.LBB7_24:                               # %if.end29
                                        #   in Loop: Header=BB7_20 Depth=1
	je	.LBB7_26
# BB#25:                                # %if.end29
                                        #   in Loop: Header=BB7_20 Depth=1
	xorq	%r14, %r14
.LBB7_26:                               # %if.end29
                                        #   in Loop: Header=BB7_20 Depth=1
	testq	%rbx, %rbx
	movq	%rbx, %r12
	jne	.LBB7_20
.LBB7_79:                               # %if.end87
	movq	(%rsp), %rdi            # 8-byte Reload
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	free  # TAILCALL
.Ltmp112:
	.size	delete_trivially_dead_insns, .Ltmp112-delete_trivially_dead_insns
	.cfi_endproc

	.align	16, 0x90
	.type	count_reg_usage,@function
count_reg_usage:                        # @count_reg_usage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp119:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp120:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp121:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp122:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp123:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp124:
	.cfi_def_cfa_offset 80
.Ltmp125:
	.cfi_offset %rbx, -48
.Ltmp126:
	.cfi_offset %r12, -40
.Ltmp127:
	.cfi_offset %r13, -32
.Ltmp128:
	.cfi_offset %r14, -24
.Ltmp129:
	.cfi_offset %r15, -16
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %rbx
	testq	%rbx, %rbx
	je	.LBB8_27
# BB#1:
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	jmp	.LBB8_2
.LBB8_18:                               # %sw.bb20
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	8(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	je	.LBB8_20
# BB#19:                                # %if.then27
                                        #   in Loop: Header=BB8_2 Depth=1
	xorq	%rdx, %rdx
	movq	%r15, %rsi
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	count_reg_usage
.LBB8_20:                               # %if.end31
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	16(%rbx), %r13
	movq	%r13, %rdi
	callq	side_effects_p
	xorq	%r12, %r12
	testq	%r14, %rax
	jne	.LBB8_26
# BB#21:                                # %cond.false
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	8(%rbx), %r12
	jmp	.LBB8_26
.LBB8_22:                               # %land.lhs.true
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	8(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$48, %rax
	jne	.LBB8_24
.LBB8_23:                               # %if.then66
                                        #   in Loop: Header=BB8_2 Depth=1
	xorq	%rdx, %rdx
	movq	%r15, %rsi
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	count_reg_usage
.LBB8_24:                               # %if.end70
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	16(%rbx), %r13
.LBB8_25:                               # %tailrecurse.backedge
                                        #   in Loop: Header=BB8_2 Depth=1
	xorq	%r12, %r12
.LBB8_26:                               # %tailrecurse.backedge
                                        #   in Loop: Header=BB8_2 Depth=1
	testq	%r13, %r13
	movq	%r13, %rbx
	jne	.LBB8_2
	jmp	.LBB8_27
.LBB8_16:                               # %sw.bb6
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	jne	.LBB8_27
# BB#17:                                # %if.then12
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	8(%rax), %r13
	jmp	.LBB8_25
	.align	16, 0x90
.LBB8_2:                                # %if.end
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rbx), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$31, %rax
	jg	.LBB8_7
# BB#3:                                 # %if.end
                                        #   in Loop: Header=BB8_2 Depth=1
	leaq	-3(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$2, %rcx
	jae	.LBB8_28
# BB#4:                                 # %sw.bb52
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$8, %rdx
	je	.LBB8_24
# BB#5:                                 # %sw.bb52
                                        #   in Loop: Header=BB8_2 Depth=1
	cmpq	$4, %rdx
	jne	.LBB8_22
# BB#6:                                 # %sw.bb52.if.then66_crit_edge
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	8(%rbx), %rdi
	jmp	.LBB8_23
	.align	16, 0x90
.LBB8_7:                                # %if.end
                                        #   in Loop: Header=BB8_2 Depth=1
	cmpq	$46, %rax
	jg	.LBB8_12
# BB#8:                                 # %if.end
                                        #   in Loop: Header=BB8_2 Depth=1
	leaq	-32(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$2, %rcx
	jb	.LBB8_11
# BB#9:                                 # %if.end
                                        #   in Loop: Header=BB8_2 Depth=1
	cmpq	$34, %rax
	jne	.LBB8_28
# BB#10:                                # %sw.bb41
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	64(%rbx), %rdi
	xorq	%rdx, %rdx
	movq	%r15, %rsi
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	count_reg_usage
.LBB8_11:                               # %sw.bb45
                                        #   in Loop: Header=BB8_2 Depth=1
	movq	32(%rbx), %rdi
	xorq	%rdx, %rdx
	xorq	%r12, %r12
	movq	%r15, %rsi
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	count_reg_usage
	movq	56(%rbx), %r13
	jmp	.LBB8_26
	.align	16, 0x90
.LBB8_12:                               # %if.end
                                        #   in Loop: Header=BB8_2 Depth=1
	leaq	-47(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$22, %rcx
	ja	.LBB8_28
# BB#13:                                # %if.end
                                        #   in Loop: Header=BB8_2 Depth=1
	jmpq	*.LJTI8_0(,%rcx,8)
.LBB8_28:                               # %sw.epilog
	movzbl	rtx_length(%rax), %edx
	testq	%rdx, %rdx
	je	.LBB8_27
# BB#29:                                # %for.body.lr.ph
	movq	rtx_format(,%rax,8), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	.align	16, 0x90
.LBB8_30:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_35 Depth 2
	movq	%rdx, %r13
	movq	8(%rsp), %rax           # 8-byte Reload
	movzbl	-1(%rax,%r13), %eax
	leaq	-1(%r13), %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	cmpq	$69, %rax
	jne	.LBB8_31
# BB#34:                                # %if.then95
                                        #   in Loop: Header=BB8_30 Depth=1
	movq	(%rbx,%r13,8), %rax
	movslq	(%rax), %r14
	testq	%r14, %r14
	jle	.LBB8_32
	jmp	.LBB8_35
	.align	16, 0x90
.LBB8_36:                               # %for.body103.for.body103_crit_edge
                                        #   in Loop: Header=BB8_35 Depth=2
	movq	(%rbx,%r13,8), %rax
.LBB8_35:                               # %for.body103.lr.ph
                                        #   Parent Loop BB8_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%r14
	movq	8(%rax,%r14,8), %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	count_reg_usage
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB8_36
	jmp	.LBB8_32
	.align	16, 0x90
.LBB8_31:                               # %for.body
                                        #   in Loop: Header=BB8_30 Depth=1
	cmpq	$101, %rax
	jne	.LBB8_32
# BB#33:                                # %if.then85
                                        #   in Loop: Header=BB8_30 Depth=1
	movq	(%rbx,%r13,8), %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	count_reg_usage
.LBB8_32:                               # %for.cond.backedge
                                        #   in Loop: Header=BB8_30 Depth=1
	movq	$32, %rcx
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB8_30
	jmp	.LBB8_27
.LBB8_14:                               # %sw.bb
	cmpq	%r12, %rbx
	je	.LBB8_27
# BB#15:                                # %if.then2
	movl	8(%rbx), %eax
	movl	(%r15,%rax,4), %ecx
	movq	24(%rsp), %rdx          # 8-byte Reload
	addq	%rdx, %rcx
	movl	%ecx, (%r15,%rax,4)
.LBB8_27:                               # %for.end114
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp130:
	.size	count_reg_usage, .Ltmp130-count_reg_usage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI8_0:
	.quad	.LBB8_18
	.quad	.LBB8_28
	.quad	.LBB8_16
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_27
	.quad	.LBB8_27
	.quad	.LBB8_27
	.quad	.LBB8_28
	.quad	.LBB8_27
	.quad	.LBB8_27
	.quad	.LBB8_28
	.quad	.LBB8_14
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_27
	.quad	.LBB8_27
	.quad	.LBB8_27

	.text
	.align	16, 0x90
	.type	dead_libcall_p,@function
dead_libcall_p:                         # @dead_libcall_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp136:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp137:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp138:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp139:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp140:
	.cfi_def_cfa_offset 48
.Ltmp141:
	.cfi_offset %rbx, -40
.Ltmp142:
	.cfi_offset %r12, -32
.Ltmp143:
	.cfi_offset %r14, -24
.Ltmp144:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	$4, %rsi
	xorq	%rdx, %rdx
	xorq	%rbx, %rbx
                                        # kill: RDI<def> R14<kill>
	callq	find_reg_note
	movq	%rax, %r15
	testq	%r15, %r15
	je	.LBB9_9
# BB#1:                                 # %if.then
	movzbl	(%r14), %eax
	movzbl	rtx_class(%rax), %eax
	xorq	%r12, %r12
	cmpq	$105, %rax
	jne	.LBB9_4
# BB#2:                                 # %cond.true
	movq	32(%r14), %r12
	movzbl	(%r12), %eax
	cmpq	$47, %rax
	je	.LBB9_4
# BB#3:                                 # %cond.false
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	single_set_2
	movq	%rax, %r12
.LBB9_4:                                # %cond.end16
	movq	8(%r15), %rdi
	callq	simplify_rtx
	testq	%rax, %rax
	jne	.LBB9_6
# BB#5:                                 # %if.then23
	movq	8(%r15), %rax
.LBB9_6:                                # %if.end
	xorq	%rbx, %rbx
	testq	%r12, %r12
	je	.LBB9_9
# BB#7:                                 # %land.lhs.true
	addq	$16, %r12
	xorq	%rcx, %rcx
	xorq	%rbx, %rbx
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	validate_change
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_9
# BB#8:                                 # %if.then33
	movq	$6, %rsi
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	callq	find_reg_note
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	remove_note
	movq	$1, %rbx
.LBB9_9:                                # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp145:
	.size	dead_libcall_p, .Ltmp145-dead_libcall_p
	.cfi_endproc

	.align	16, 0x90
	.type	record_jump_equiv,@function
record_jump_equiv:                      # @record_jump_equiv
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp152:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp153:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp154:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp155:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp156:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp157:
	.cfi_def_cfa_offset 80
.Ltmp158:
	.cfi_offset %rbx, -48
.Ltmp159:
	.cfi_offset %r12, -40
.Ltmp160:
	.cfi_offset %r13, -32
.Ltmp161:
	.cfi_offset %r14, -24
.Ltmp162:
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %r12
                                        # kill: RDI<def> R12<kill>
	callq	any_condjump_p
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB10_12
# BB#1:                                 # %if.end
	movq	%r12, %rdi
	callq	pc_set
	movq	%rax, %r14
	movq	16(%r14), %rax
	testq	%r15, %rbx
	je	.LBB10_4
# BB#2:                                 # %if.then3
	movq	24(%rax), %rcx
	movq	global_rtl(%rip), %rdx
	cmpq	%rdx, %rcx
	je	.LBB10_6
# BB#3:
	movabsq	$0, %r13
	jmp	.LBB10_7
.LBB10_4:                               # %if.else
	movq	16(%rax), %rcx
	movq	global_rtl(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB10_5
.LBB10_6:                               # %if.else
	movabsq	$1, %r13
	jmp	.LBB10_7
.LBB10_5:
	movabsq	$0, %r13
.LBB10_7:                               # %if.end15
	movq	8(%rax), %rax
	movq	8(%rax), %rdi
	movzbl	(%rax), %ebx
	movq	%r12, %rsi
	callq	fold_rtx
	movq	%rax, 24(%rsp)
	movq	16(%r14), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rdi
	movq	%r12, %rsi
	callq	fold_rtx
	movq	%rax, 16(%rsp)
	leaq	24(%rsp), %rsi
	leaq	16(%rsp), %rdx
	leaq	12(%rsp), %rcx
	leaq	8(%rsp), %r8
	movq	%rbx, %rdi
	callq	find_comparison_args
	movq	24(%rsp), %r14
	movq	16(%rsp), %r15
	testq	%r13, %r13
	jne	.LBB10_9
# BB#8:                                 # %if.then44
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	movq	%r12, %rcx
	callq	reversed_comparison_code_parts
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_12
.LBB10_9:                               # %if.end50
	movl	8(%rsp), %esi
	testq	%rsi, %rsi
	jne	.LBB10_11
# BB#10:
	movl	12(%rsp), %esi
.LBB10_11:                              # %if.end50
	movq	%rax, %rdi
	movq	%r14, %rdx
	movq	%r15, %rcx
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	record_jump_cond  # TAILCALL
.LBB10_12:                              # %return
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp163:
	.size	record_jump_equiv, .Ltmp163-record_jump_equiv
	.cfi_endproc

	.align	16, 0x90
	.type	cse_process_notes,@function
cse_process_notes:                      # @cse_process_notes
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp170:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp171:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp172:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp173:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp174:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp175:
	.cfi_def_cfa_offset 64
.Ltmp176:
	.cfi_offset %rbx, -48
.Ltmp177:
	.cfi_offset %r12, -40
.Ltmp178:
	.cfi_offset %r13, -32
.Ltmp179:
	.cfi_offset %r14, -24
.Ltmp180:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	(%r14), %ecx
	movq	%rcx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movq	rtx_format(,%rax,8), %r12
	movq	%rsi, %r15
	cmpq	$53, %rax
	jg	.LBB11_4
# BB#1:                                 # %entry
	leaq	-3(%rax), %rdx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	cmpq	$2, %rsi
	jae	.LBB11_2
# BB#11:                                # %sw.bb7
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB11_13
# BB#12:                                # %if.then
	movq	8(%r14), %rdi
	xorq	%rsi, %rsi
	callq	cse_process_notes
	movq	%rax, 8(%r14)
.LBB11_13:                              # %if.end
	movq	16(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB11_14
# BB#15:                                # %if.then20
	xorq	%rsi, %rsi
	callq	cse_process_notes
	movq	%rax, 16(%r14)
.LBB11_16:                              # %if.then20
	movq	%r14, %rax
	jmp	.LBB11_17
.LBB11_4:                               # %entry
	cmpq	$119, %rax
	jg	.LBB11_7
# BB#5:                                 # %entry
	leaq	-54(%rax), %rcx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	$15, %rcx
	ja	.LBB11_2
# BB#6:                                 # %entry
	movq	%r14, %rbx
	jmpq	*.LJTI11_0(,%rcx,8)
.LBB11_21:                              # %sw.bb44
	movl	8(%r14), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB11_23
# BB#22:                                # %sw.bb44
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%rbx, %r12
	jne	.LBB11_33
.LBB11_23:                              # %cond.false
	movq	$7, %rcx
	movq	%rbx, %r15
	shrq	%cl, %r15
	xorq	%rbx, %r15
	andq	$127, %r15
	movq	reg_hash(,%r15,8), %rcx
	testq	%rcx, %rcx
	je	.LBB11_27
# BB#24:
	movq	%rcx, %rax
.LBB11_26:                              # %for.body.i222
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB11_32
# BB#25:                                # %for.cond.i218
                                        #   in Loop: Header=BB11_26 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB11_26
.LBB11_27:                              # %if.then4.i224
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB11_29
# BB#28:                                # %if.then5.i226
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB11_30
.LBB11_7:                               # %entry
	leaq	-120(%rax), %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$2, %rdx
	jae	.LBB11_8
.LBB11_18:                              # %sw.bb29
	movq	8(%r14), %rdi
	movq	%r15, %rsi
	callq	cse_process_notes
	movzbl	2(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB11_19
# BB#20:                                # %if.then38
	leaq	8(%r14), %rsi
	xorq	%rcx, %rcx
	movq	%r15, %rdi
	movq	%rax, %rdx
	callq	validate_change
	movq	%r14, %rbx
	movq	%rbx, %rax
	jmp	.LBB11_17
.LBB11_14:
	movq	%r14, %rbx
	movq	%rbx, %rax
	jmp	.LBB11_17
.LBB11_8:                               # %entry
	cmpq	$135, %rax
	jne	.LBB11_2
# BB#9:
	movq	%r14, %rbx
	movq	%rbx, %rax
	jmp	.LBB11_17
.LBB11_2:                               # %for.cond.preheader
	movzbl	rtx_length(%rax), %r13d
	testq	%r13, %r13
	je	.LBB11_3
# BB#57:                                # %for.body.lr.ph
	leaq	8(%r14), %rbx
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	$1, %r14
	.align	16, 0x90
.LBB11_58:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-1(%r12,%r14), %eax
	cmpq	$101, %rax
	jne	.LBB11_60
# BB#59:                                # %if.then142
                                        #   in Loop: Header=BB11_58 Depth=1
	movq	(%rbx), %rdi
	movq	%r15, %rsi
	callq	cse_process_notes
	xorq	%rcx, %rcx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	validate_change
.LBB11_60:                              # %for.inc
                                        #   in Loop: Header=BB11_58 Depth=1
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	incq	%r14
	addq	$8, %rbx
	cmpq	%r13, %rax
	jl	.LBB11_58
# BB#61:
	movq	8(%rsp), %rbx           # 8-byte Reload
.LBB11_62:                              # %return
	movq	%rbx, %rax
	jmp	.LBB11_17
.LBB11_3:
	movq	%r14, %rbx
	movq	%rbx, %rax
	jmp	.LBB11_17
.LBB11_19:
	movq	%r14, %rbx
	movq	%rbx, %rax
.LBB11_17:                              # %if.then20
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB11_10:                              # %sw.bb1
	movq	8(%r14), %rdi
	leaq	8(%r14), %rbx
	movq	%r14, %rsi
	callq	cse_process_notes
	xorq	%rcx, %rcx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	validate_change
	jmp	.LBB11_16
.LBB11_29:                              # %if.else.i229
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r15,8), %rcx
.LBB11_30:                              # %if.end6.i238
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r15,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB11_32
# BB#31:                                # %if.then11.i239
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB11_32:                              # %get_cse_reg_info.exit241
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r14), %r12d
.LBB11_33:                              # %cond.end
	movslq	20(%rax), %r15
	movq	%r12, %rdx
	andq	%r13, %rdx
	cmpq	%rbx, %rdx
	jne	.LBB11_35
# BB#34:                                # %cond.end
	testq	%rax, %rax
	movq	%r15, %rax
	jne	.LBB11_45
.LBB11_35:                              # %cond.false60
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB11_39
# BB#36:
	movq	%rcx, %rax
.LBB11_38:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB11_44
# BB#37:                                # %for.cond.i
                                        #   in Loop: Header=BB11_38 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB11_38
.LBB11_39:                              # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB11_41
# BB#40:                                # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB11_42
.LBB11_41:                              # %if.else.i207
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB11_42:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB11_44
# BB#43:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB11_44:                              # %get_cse_reg_info.exit
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %eax
	movl	8(%r14), %ebx
.LBB11_45:                              # %cond.end65
	andq	%r13, %rbx
	andq	%r13, %rax
	cmpq	%rbx, %rax
	je	.LBB11_56
# BB#46:                                # %if.then72
	movq	qty_table(%rip), %rax
	leaq	(%r15,%r15,2), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	movq	(%rax,%rdx), %r15
	testq	%r15, %r15
	je	.LBB11_56
# BB#47:                                # %land.lhs.true76
	movzbl	(%r15), %ecx
	cmpq	$133, %rcx
	jg	.LBB11_50
# BB#48:                                # %land.lhs.true76
	addq	$-54, %rcx
	andq	%r13, %rcx
	cmpq	$14, %rcx
	ja	.LBB11_56
# BB#49:                                # %land.lhs.true76
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24727, %rax            # imm = 0x6097
	jne	.LBB11_52
	jmp	.LBB11_56
.LBB11_50:                              # %land.lhs.true76
	cmpq	$134, %rcx
	je	.LBB11_52
# BB#51:                                # %land.lhs.true76
	cmpq	$140, %rcx
	jne	.LBB11_56
.LBB11_52:                              # %if.then120
	movzbl	2(%r14), %r12d
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	gen_lowpart_common
	movq	%rax, %rbx
	testq	%rbx, %rbx
	jne	.LBB11_62
# BB#53:                                # %if.else.i
	movzbl	(%r15), %eax
	cmpq	$66, %rax
	jne	.LBB11_56
# BB#54:                                # %if.then1.i
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	adjust_address_1
	movq	%rax, %rbx
	movq	8(%rbx), %rsi
	movq	%r12, %rdi
	callq	memory_address_p
	testq	%r13, %rax
	je	.LBB11_56
# BB#55:                                # %if.then1.i
	testq	%rbx, %rbx
	jne	.LBB11_62
.LBB11_56:                              # %if.end131
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	canon_reg  # TAILCALL
.Ltmp181:
	.size	cse_process_notes, .Ltmp181-cse_process_notes
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI11_0:
	.quad	.LBB11_62
	.quad	.LBB11_62
	.quad	.LBB11_62
	.quad	.LBB11_2
	.quad	.LBB11_62
	.quad	.LBB11_62
	.quad	.LBB11_2
	.quad	.LBB11_21
	.quad	.LBB11_2
	.quad	.LBB11_18
	.quad	.LBB11_2
	.quad	.LBB11_2
	.quad	.LBB11_10
	.quad	.LBB11_62
	.quad	.LBB11_62
	.quad	.LBB11_62

	.text
	.align	16, 0x90
	.type	cse_insn,@function
cse_insn:                               # @cse_insn
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp185:
	.cfi_def_cfa_offset 16
.Ltmp186:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp187:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$360, %rsp              # imm = 0x168
.Ltmp188:
	.cfi_offset %rbx, -56
.Ltmp189:
	.cfi_offset %r12, -48
.Ltmp190:
	.cfi_offset %r13, -40
.Ltmp191:
	.cfi_offset %r14, -32
.Ltmp192:
	.cfi_offset %r15, -24
	movq	%rdi, %r14
	movq	32(%r14), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movq	%r14, this_insn(%rip)
	movzbl	(%r14), %eax
	movq	%rsi, -208(%rbp)        # 8-byte Spill
	cmpq	$34, %rax
	jne	.LBB12_6
# BB#1:                                 # %if.then
	movq	64(%r14), %rbx
	jmp	.LBB12_2
	.align	16, 0x90
.LBB12_5:                               # %if.end
                                        #   in Loop: Header=BB12_2 Depth=1
	movq	%r14, %rsi
	callq	canon_reg
	movq	%rax, 8(%rbx)
	movq	16(%rbx), %rbx
.LBB12_2:                               # %if.then
                                        # =>This Inner Loop Header: Depth=1
	testq	%rbx, %rbx
	je	.LBB12_6
# BB#3:                                 # %for.body
                                        #   in Loop: Header=BB12_2 Depth=1
	movq	8(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$49, %rax
	jne	.LBB12_5
# BB#4:                                 # %if.then10
                                        #   in Loop: Header=BB12_2 Depth=1
	movq	8(%rdi), %rdi
	xorq	%rsi, %rsi
	callq	invalidate
	movq	8(%rbx), %rdi
	jmp	.LBB12_5
.LBB12_6:                               # %if.end26
	movq	-160(%rbp), %rax        # 8-byte Reload
	movzbl	(%rax), %eax
	movq	$0, -104(%rbp)          # 8-byte Folded Spill
	movq	$0, -80(%rbp)           # 8-byte Folded Spill
	leaq	-39(%rax), %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	xorq	%r13, %r13
	cmpq	$11, %rcx
	ja	.LBB12_55
# BB#7:                                 # %if.end26
	jmpq	*.LJTI12_0(,%rcx,8)
.LBB12_13:                              # %if.then69
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	8(%rax), %rax
	movslq	(%rax), %r15
	movq	$4, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	leaq	(%rax,%rax,4), %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	movq	%rcx, %rsp
	testq	%r15, %r15
	movabsq	$0, %r13
	jle	.LBB12_55
# BB#14:
	movq	%r14, -96(%rbp)         # 8-byte Spill
	movq	$1, %rbx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB12_15:                              # %for.body75
                                        # =>This Inner Loop Header: Depth=1
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	8(%rax), %rax
	movq	(%rax,%rbx,8), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB12_26
# BB#16:                                # %if.then84
                                        #   in Loop: Header=BB12_15 Depth=1
	movq	8(%rax), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB12_23
# BB#17:                                # %if.then84
                                        #   in Loop: Header=BB12_15 Depth=1
	movq	%rdx, %r12
	cmpq	$61, %rax
	je	.LBB12_22
# BB#18:                                # %if.then84
                                        #   in Loop: Header=BB12_15 Depth=1
	cmpq	$63, %rax
	jne	.LBB12_19
.LBB12_22:                              # %if.then96
                                        #   in Loop: Header=BB12_15 Depth=1
	xorq	%rsi, %rsi
	jmp	.LBB12_25
	.align	16, 0x90
.LBB12_23:                              # %if.then84
                                        #   in Loop: Header=BB12_15 Depth=1
	cmpq	$133, %rax
	jne	.LBB12_26
	jmp	.LBB12_24
.LBB12_19:                              # %if.then84
                                        #   in Loop: Header=BB12_15 Depth=1
	cmpq	$64, %rax
	movq	%r12, %rdx
	jne	.LBB12_26
.LBB12_24:                              # %if.then107
                                        #   in Loop: Header=BB12_15 Depth=1
	movq	8(%rdi), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%rdx, %r12
.LBB12_25:                              # %for.inc116
                                        #   in Loop: Header=BB12_15 Depth=1
	callq	invalidate
	movq	%r12, %rdx
.LBB12_26:                              # %for.inc116
                                        #   in Loop: Header=BB12_15 Depth=1
	movq	%rbx, %rax
	andq	%r14, %rax
	movq	%r15, %r12
	andq	%r14, %r12
	incq	%rbx
	cmpq	%r12, %rax
	jne	.LBB12_15
# BB#20:                                # %for.cond118.preheader
	xorq	%r13, %r13
	testq	%r15, %r15
	jle	.LBB12_21
# BB#27:
	movq	$0, -88(%rbp)           # 8-byte Folded Spill
	movq	$1, %r13
	jmp	.LBB12_28
.LBB12_8:                               # %if.then30
	movq	%rsp, %rax
	leaq	-80(%rax), %rbx
	movq	%rbx, %rsp
	movq	-160(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -80(%rax)
	movq	16(%rdx), %rdi
	movq	global_rtl(%rip), %rcx
	movl	(%rdi), %eax
	movq	8(%rdx), %rdx
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	%rcx, %rdx
	jne	.LBB12_11
# BB#9:                                 # %if.then30
	cmpq	$67, %rax
	jne	.LBB12_11
# BB#10:
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	jmp	.LBB12_54
.LBB12_50:                              # %land.lhs.true258
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	8(%rcx), %rdi
	movzbl	(%rdi), %ecx
	cmpq	$61, %rcx
	jne	.LBB12_49
# BB#51:                                # %land.lhs.true266
	movl	8(%rdi), %ecx
	cmpq	$53, %rcx
	jae	.LBB12_49
# BB#52:                                # %if.else280
	movq	$0, -80(%rbp)           # 8-byte Folded Spill
	cmpq	$50, %rax
	movabsq	$0, %r13
	jne	.LBB12_55
.LBB12_53:                              # %if.then285
	movq	-160(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	canon_reg
	callq	apply_change_group
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fold_rtx
	movq	$0, -80(%rbp)           # 8-byte Folded Spill
	jmp	.LBB12_54
.LBB12_48:                              # %if.then239
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	8(%rax), %rdi
	movzbl	(%rdi), %eax
	movq	$0, -80(%rbp)           # 8-byte Folded Spill
	cmpq	$66, %rax
	movabsq	$0, %r13
	jne	.LBB12_55
.LBB12_49:                              # %if.then247
	xorq	%rsi, %rsi
	movq	$0, -80(%rbp)           # 8-byte Folded Spill
	callq	canon_reg
.LBB12_54:                              # %for.end2546.thread.thread
	xorq	%r13, %r13
.LBB12_55:                              # %for.end2546.thread.thread
	callq	apply_change_group
	movq	$0, -112(%rbp)          # 8-byte Folded Spill
.LBB12_985:                             # %for.end2857
	movq	-160(%rbp), %rdi        # 8-byte Reload
	callq	invalidate_from_clobbers
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$34, %rcx
	jne	.LBB12_993
# BB#986:                               # %if.then2862
	testq	$67108864, %rax         # imm = 0x4000000
	jne	.LBB12_992
# BB#987:
	xorq	%rax, %rax
	.align	16, 0x90
.LBB12_988:                             # %for.body.i6290
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_989 Depth 2
                                        #       Child Loop BB12_1007 Depth 3
                                        #       Child Loop BB12_1014 Depth 3
                                        #       Child Loop BB12_1019 Depth 3
	movq	table(,%rax,8), %rcx
	testq	%rcx, %rcx
	je	.LBB12_991
	.align	16, 0x90
.LBB12_989:                             # %for.body2.i
                                        #   Parent Loop BB12_988 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_1007 Depth 3
                                        #       Child Loop BB12_1014 Depth 3
                                        #       Child Loop BB12_1019 Depth 3
	movzbl	76(%rcx), %esi
	movq	16(%rcx), %rdx
	testq	%rsi, %rsi
	je	.LBB12_990
# BB#1003:                              # %if.end.i6298
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	$0, 48(%rcx)
	movq	32(%rcx), %rsi
	movq	40(%rcx), %rdi
	testq	%rsi, %rsi
	je	.LBB12_1005
# BB#1004:                              # %if.then1.i6299
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	%rdi, 40(%rsi)
.LBB12_1005:                            # %if.end3.i
                                        #   in Loop: Header=BB12_989 Depth=2
	testq	%rdi, %rdi
	jne	.LBB12_1327
# BB#1006:                              # %while.cond.preheader.i
                                        #   in Loop: Header=BB12_989 Depth=2
	testq	%rsi, %rsi
	movq	%rsi, %rdi
	je	.LBB12_1008
	.align	16, 0x90
.LBB12_1007:                            # %while.body.i6302
                                        #   Parent Loop BB12_988 Depth=1
                                        #     Parent Loop BB12_989 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, 48(%rdi)
	movq	32(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.LBB12_1007
	jmp	.LBB12_1008
	.align	16, 0x90
.LBB12_1327:                            # %if.then5.i6301
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	%rsi, 32(%rdi)
.LBB12_1008:                            # %if.end10.i
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	24(%rcx), %rsi
	testq	%rdx, %rdx
	je	.LBB12_1010
# BB#1009:                              # %if.then14.i
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	%rsi, 24(%rdx)
.LBB12_1010:                            # %if.end16.i6304
                                        #   in Loop: Header=BB12_989 Depth=2
	testq	%rsi, %rsi
	jne	.LBB12_1011
# BB#1012:                              # %if.else20.i
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	table(,%rax,8), %rsi
	cmpq	%rcx, %rsi
	movq	$-256, %rsi
	jne	.LBB12_1014
# BB#1013:                              # %if.then22.i
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	%rdx, table(,%rax,8)
	jmp	.LBB12_1017
	.align	16, 0x90
.LBB12_1014:                            # %for.body.i6308
                                        #   Parent Loop BB12_988 Depth=1
                                        #     Parent Loop BB12_989 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	table+256(%rsi), %rdi
	cmpq	%rcx, %rdi
	jne	.LBB12_1016
# BB#1015:                              # %if.then30.i
                                        #   in Loop: Header=BB12_1014 Depth=3
	movq	%rdx, table+256(%rsi)
.LBB12_1016:                            # %for.inc.i6311
                                        #   in Loop: Header=BB12_1014 Depth=3
	addq	$8, %rsi
	jne	.LBB12_1014
	jmp	.LBB12_1017
	.align	16, 0x90
.LBB12_1011:                            # %if.then18.i
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	%rdx, 16(%rsi)
.LBB12_1017:                            # %if.end35.i
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	56(%rcx), %rsi
	testq	%rsi, %rsi
	je	.LBB12_1023
# BB#1018:                              # %if.end35.i
                                        #   in Loop: Header=BB12_989 Depth=2
	cmpq	%rcx, %rsi
	movq	%rsi, %rdi
	je	.LBB12_1023
	.align	16, 0x90
.LBB12_1019:                            # %while.cond41.i
                                        #   Parent Loop BB12_988 Depth=1
                                        #     Parent Loop BB12_989 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdi, %rbx
	movq	56(%rbx), %rdi
	cmpq	%rcx, %rdi
	jne	.LBB12_1019
# BB#1020:                              # %while.end46.i
                                        #   in Loop: Header=BB12_989 Depth=2
	xorq	%rdi, %rdi
	cmpq	%rbx, %rsi
	je	.LBB12_1022
# BB#1021:                              # %while.end46.i
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	%rsi, %rdi
.LBB12_1022:                            # %while.end46.i
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	%rdi, 56(%rbx)
.LBB12_1023:                            # %remove_from_table.exit
                                        #   in Loop: Header=BB12_989 Depth=2
	movq	free_element_chain(%rip), %rsi
	movq	%rsi, 16(%rcx)
	movq	%rcx, free_element_chain(%rip)
.LBB12_990:                             # %for.cond1.backedge.i
                                        #   in Loop: Header=BB12_989 Depth=2
	testq	%rdx, %rdx
	movq	%rdx, %rcx
	jne	.LBB12_989
.LBB12_991:                             # %for.inc4.i
                                        #   in Loop: Header=BB12_988 Depth=1
	incq	%rax
	cmpq	$32, %rax
	jne	.LBB12_988
.LBB12_992:                             # %if.end2868
	callq	invalidate_for_call
.LBB12_993:                             # %for.cond2870.preheader
	movq	%r13, -88(%rbp)         # 8-byte Spill
	cmpq	$0, -104(%rbp)          # 8-byte Folded Reload
	je	.LBB12_1030
# BB#994:                               # %for.body2873.lr.ph
	cmpq	$0, -208(%rbp)          # 8-byte Folded Reload
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rsi
	jne	.LBB12_996
# BB#995:                               # %for.body2873.lr.ph
	movq	%rcx, %rsi
.LBB12_996:                             # %for.body2873.lr.ph
	movq	-208(%rbp), %rdx        # 8-byte Reload
	cmpq	%rdx, %r14
	jne	.LBB12_998
# BB#997:                               # %for.body2873.lr.ph
	movq	%rcx, %rax
.LBB12_998:                             # %for.body2873.lr.ph
	orq	%rax, %rsi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	$1, %r13
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movq	-88(%rbp), %r12         # 8-byte Reload
	andq	%r15, %r12
	movq	-80(%rbp), %rbx         # 8-byte Reload
	.align	16, 0x90
.LBB12_999:                             # %for.body2873
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB12_1029
# BB#1000:                              # %if.then2878
                                        #   in Loop: Header=BB12_999 Depth=1
	movq	8(%rax), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB12_1026
# BB#1001:                              # %if.then2878
                                        #   in Loop: Header=BB12_999 Depth=1
	addq	$-61, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	ja	.LBB12_1029
# BB#1002:                              # %if.then2878
                                        #   in Loop: Header=BB12_999 Depth=1
	jmpq	*.LJTI12_3(,%rax,8)
.LBB12_1024:                            # %if.then2901
                                        #   in Loop: Header=BB12_999 Depth=1
	cmpq	$0, -48(%rbp)           # 8-byte Folded Reload
	je	.LBB12_1029
.LBB12_1025:                            # %if.then2895
                                        #   in Loop: Header=BB12_999 Depth=1
	xorq	%rsi, %rsi
	jmp	.LBB12_1028
	.align	16, 0x90
.LBB12_1026:                            # %if.then2878
                                        #   in Loop: Header=BB12_999 Depth=1
	cmpq	$133, %rax
	jne	.LBB12_1029
.LBB12_1027:                            # %if.then2918
                                        #   in Loop: Header=BB12_999 Depth=1
	movq	8(%rdi), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
.LBB12_1028:                            # %for.inc2929
                                        #   in Loop: Header=BB12_999 Depth=1
	callq	invalidate
.LBB12_1029:                            # %for.inc2929
                                        #   in Loop: Header=BB12_999 Depth=1
	movq	%r13, %rax
	andq	%r15, %rax
	incq	%r13
	addq	$80, %rbx
	cmpq	%r12, %rax
	jne	.LBB12_999
.LBB12_1030:                            # %for.end2931
	movzbl	(%r14), %eax
	cmpq	$32, %rax
	jne	.LBB12_1058
# BB#1031:                              # %land.lhs.true2936
	movq	32(%r14), %rax
	movl	(%rax), %eax
	andq	$134283263, %rax        # imm = 0x800FFFF
	cmpq	$134217769, %rax        # imm = 0x8000029
	jne	.LBB12_1058
# BB#1032:
	xorq	%rbx, %rbx
	jmp	.LBB12_1033
	.align	16, 0x90
.LBB12_1056:                            # %remove_from_table.exit6389
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	free_element_chain(%rip), %rcx
	movq	%rcx, 16(%rax)
	movq	%rax, free_element_chain(%rip)
.LBB12_1033:                            # %for.body.i6320
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_1040 Depth 2
                                        #     Child Loop BB12_1047 Depth 2
                                        #     Child Loop BB12_1052 Depth 2
	movq	table(,%rbx,8), %rax
	testq	%rax, %rax
	jne	.LBB12_1034
# BB#1057:                              # %for.inc7.i
                                        #   in Loop: Header=BB12_1033 Depth=1
	incq	%rbx
	cmpq	$32, %rbx
	jne	.LBB12_1033
	jmp	.LBB12_1058
	.align	16, 0x90
.LBB12_1034:                            # %for.body2.i6326
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	(%rax), %rdi
	movzbl	(%rdi), %ecx
	cmpq	$61, %rcx
	jne	.LBB12_1036
# BB#1035:                              # %if.then.i6327
                                        #   in Loop: Header=BB12_1033 Depth=1
	movl	72(%rax), %esi
	callq	invalidate
	jmp	.LBB12_1033
	.align	16, 0x90
.LBB12_1036:                            # %if.end.i6339
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	$0, 48(%rax)
	movq	32(%rax), %rcx
	movq	40(%rax), %rdx
	testq	%rcx, %rcx
	je	.LBB12_1038
# BB#1037:                              # %if.then1.i6341
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	%rdx, 40(%rcx)
.LBB12_1038:                            # %if.end3.i6343
                                        #   in Loop: Header=BB12_1033 Depth=1
	testq	%rdx, %rdx
	jne	.LBB12_1328
# BB#1039:                              # %while.cond.preheader.i6344
                                        #   in Loop: Header=BB12_1033 Depth=1
	testq	%rcx, %rcx
	movq	%rcx, %rdx
	je	.LBB12_1041
	.align	16, 0x90
.LBB12_1040:                            # %while.body.i6351
                                        #   Parent Loop BB12_1033 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, 48(%rdx)
	movq	32(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.LBB12_1040
	jmp	.LBB12_1041
.LBB12_1328:                            # %if.then5.i6346
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	%rcx, 32(%rdx)
.LBB12_1041:                            # %if.end10.i6355
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	16(%rax), %rcx
	movq	24(%rax), %rdx
	testq	%rcx, %rcx
	je	.LBB12_1043
# BB#1042:                              # %if.then14.i6357
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	%rdx, 24(%rcx)
.LBB12_1043:                            # %if.end16.i6359
                                        #   in Loop: Header=BB12_1033 Depth=1
	testq	%rdx, %rdx
	jne	.LBB12_1044
# BB#1045:                              # %if.else20.i6365
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	table(,%rbx,8), %rdx
	cmpq	%rax, %rdx
	movq	$-256, %rdx
	jne	.LBB12_1047
# BB#1046:                              # %if.then22.i6366
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	%rcx, table(,%rbx,8)
	jmp	.LBB12_1050
	.align	16, 0x90
.LBB12_1047:                            # %for.body.i6370
                                        #   Parent Loop BB12_1033 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	table+256(%rdx), %rsi
	cmpq	%rax, %rsi
	jne	.LBB12_1049
# BB#1048:                              # %if.then30.i6371
                                        #   in Loop: Header=BB12_1047 Depth=2
	movq	%rcx, table+256(%rdx)
.LBB12_1049:                            # %for.inc.i6374
                                        #   in Loop: Header=BB12_1047 Depth=2
	addq	$8, %rdx
	jne	.LBB12_1047
	jmp	.LBB12_1050
.LBB12_1044:                            # %if.then18.i6361
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	%rcx, 16(%rdx)
.LBB12_1050:                            # %if.end35.i6379
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	56(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB12_1056
# BB#1051:                              # %if.end35.i6379
                                        #   in Loop: Header=BB12_1033 Depth=1
	cmpq	%rax, %rcx
	movq	%rcx, %rsi
	je	.LBB12_1056
	.align	16, 0x90
.LBB12_1052:                            # %while.cond41.i6383
                                        #   Parent Loop BB12_1033 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rdx
	movq	56(%rdx), %rsi
	cmpq	%rax, %rsi
	jne	.LBB12_1052
# BB#1053:                              # %while.end46.i6386
                                        #   in Loop: Header=BB12_1033 Depth=1
	xorq	%rsi, %rsi
	cmpq	%rdx, %rcx
	je	.LBB12_1055
# BB#1054:                              # %while.end46.i6386
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	%rcx, %rsi
.LBB12_1055:                            # %while.end46.i6386
                                        #   in Loop: Header=BB12_1033 Depth=1
	movq	%rsi, 56(%rdx)
	jmp	.LBB12_1056
.LBB12_1058:                            # %for.cond2954.preheader
	movq	%r14, -96(%rbp)         # 8-byte Spill
	cmpq	$0, -104(%rbp)          # 8-byte Folded Reload
	movq	-88(%rbp), %rax         # 8-byte Reload
	je	.LBB12_1272
# BB#1059:
	xorq	%rcx, %rcx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	.align	16, 0x90
.LBB12_1060:                            # %for.body2957
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_1107 Depth 2
                                        #       Child Loop BB12_1113 Depth 3
                                        #       Child Loop BB12_1119 Depth 3
                                        #         Child Loop BB12_1120 Depth 4
                                        #           Child Loop BB12_1127 Depth 5
                                        #           Child Loop BB12_1134 Depth 5
                                        #           Child Loop BB12_1139 Depth 5
                                        #       Child Loop BB12_1151 Depth 3
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	leaq	(%rcx,%rcx,4), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx,%rax), %rax
	testq	%rax, %rax
	je	.LBB12_1158
# BB#1061:                              # %if.then2962
                                        #   in Loop: Header=BB12_1060 Depth=1
	movq	8(%rax), %rdi
	movl	(%rdi), %ebx
	movq	%rbx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB12_1062
# BB#1092:                              # %if.else2976
                                        #   in Loop: Header=BB12_1060 Depth=1
	movl	8(%rdi), %r12d
	cmpq	$52, %r12
	movq	$1, %rax
	ja	.LBB12_1106
# BB#1093:                              # %cond.false2983
                                        #   in Loop: Header=BB12_1060 Depth=1
	movq	%r12, %rdx
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	cmpq	$8, %rdx
	je	.LBB12_1097
# BB#1094:                              # %cond.false2983
                                        #   in Loop: Header=BB12_1060 Depth=1
	leaq	-21(%r12), %rcx
	andq	%r14, %rcx
	cmpq	$8, %rcx
	jb	.LBB12_1097
# BB#1095:                              # %cond.false2983
                                        #   in Loop: Header=BB12_1060 Depth=1
	leaq	-45(%r12), %rcx
	andq	%r14, %rcx
	cmpq	$8, %rcx
	jb	.LBB12_1097
# BB#1096:                              # %cond.false2983
                                        #   in Loop: Header=BB12_1060 Depth=1
	leaq	-29(%r12), %rcx
	andq	%r14, %rcx
	cmpq	$7, %rcx
	jbe	.LBB12_1097
# BB#1101:                              # %cond.false3025
                                        #   in Loop: Header=BB12_1060 Depth=1
	cmpq	$24, %rbx
	jne	.LBB12_1102
# BB#1104:                              # %cond.true3041
                                        #   in Loop: Header=BB12_1060 Depth=1
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB12_1106
	.align	16, 0x90
.LBB12_1062:                            # %if.then2974
                                        #   in Loop: Header=BB12_1060 Depth=1
	callq	mention_regs
	jmp	.LBB12_1158
.LBB12_1097:                            # %cond.true3007
                                        #   in Loop: Header=BB12_1060 Depth=1
	movl	mode_class(,%rbx,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB12_1106
# BB#1098:                              # %lor.rhs3015
                                        #   in Loop: Header=BB12_1060 Depth=1
	cmpq	$6, %rcx
	movabsq	$0, %rax
	jne	.LBB12_1100
# BB#1099:                              # %lor.rhs3015
                                        #   in Loop: Header=BB12_1060 Depth=1
	movabsq	$1, %rax
.LBB12_1100:                            # %lor.rhs3015
                                        #   in Loop: Header=BB12_1060 Depth=1
	incq	%rax
	jmp	.LBB12_1106
.LBB12_1102:                            # %cond.false3025
                                        #   in Loop: Header=BB12_1060 Depth=1
	cmpq	$18, %rbx
	jne	.LBB12_1105
# BB#1103:                              # %cond.true3031
                                        #   in Loop: Header=BB12_1060 Depth=1
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB12_1106
.LBB12_1105:                            # %cond.false3045
                                        #   in Loop: Header=BB12_1060 Depth=1
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rbx), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	.align	16, 0x90
.LBB12_1106:                            # %cond.end3065
                                        #   in Loop: Header=BB12_1060 Depth=1
	addq	%r12, %rax
	andq	%r14, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	cmpq	%rax, %r12
	jae	.LBB12_1158
	.align	16, 0x90
.LBB12_1107:                            # %for.body3072
                                        #   Parent Loop BB12_1060 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_1113 Depth 3
                                        #       Child Loop BB12_1119 Depth 3
                                        #         Child Loop BB12_1120 Depth 4
                                        #           Child Loop BB12_1127 Depth 5
                                        #           Child Loop BB12_1134 Depth 5
                                        #           Child Loop BB12_1139 Depth 5
                                        #       Child Loop BB12_1151 Depth 3
	movl	cached_regno(%rip), %eax
	movq	%r12, %rbx
	andq	%r14, %rbx
	cmpq	%rax, %rbx
	jne	.LBB12_1109
# BB#1108:                              # %for.body3072
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1118
.LBB12_1109:                            # %cond.false3078
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	$7, %rcx
	movq	%r12, %r15
	shrq	%cl, %r15
	xorq	%r12, %r15
	andq	$127, %r15
	movq	reg_hash(,%r15,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_1110
	.align	16, 0x90
.LBB12_1113:                            # %for.body.i6404
                                        #   Parent Loop BB12_1060 Depth=1
                                        #     Parent Loop BB12_1107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB12_1117
# BB#1112:                              # %for.cond.i6400
                                        #   in Loop: Header=BB12_1113 Depth=3
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_1113
.LBB12_1110:                            # %if.then4.i6406
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1111
# BB#1114:                              # %if.else.i6411
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r15,8), %rcx
	jmp	.LBB12_1115
.LBB12_1111:                            # %if.then5.i6408
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_1115:                            # %if.end6.i6420
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r15,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_1117
# BB#1116:                              # %if.then11.i6421
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_1117:                            # %get_cse_reg_info.exit6423
                                        #   in Loop: Header=BB12_1107 Depth=2
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_1118:                            # %cond.end3080
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	%rbx, -56(%rbp)         # 8-byte Spill
	movq	%r14, %r15
	movslq	28(%rax), %rax
	leaq	1(%r12), %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%r12, %rbx
	xorq	%r13, %r13
	testq	%rax, %rax
	js	.LBB12_1157
	.align	16, 0x90
.LBB12_1119:                            # %for.body.i6426
                                        #   Parent Loop BB12_1060 Depth=1
                                        #     Parent Loop BB12_1107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_1120 Depth 4
                                        #           Child Loop BB12_1127 Depth 5
                                        #           Child Loop BB12_1134 Depth 5
                                        #           Child Loop BB12_1139 Depth 5
	movq	table(,%r13,8), %r12
	jmp	.LBB12_1120
.LBB12_1143:                            # %if.end54.i6493
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%r14)
	movq	%r14, free_element_chain(%rip)
	.align	16, 0x90
.LBB12_1120:                            # %for.body.i6426
                                        #   Parent Loop BB12_1060 Depth=1
                                        #     Parent Loop BB12_1107 Depth=2
                                        #       Parent Loop BB12_1119 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB12_1127 Depth 5
                                        #           Child Loop BB12_1134 Depth 5
                                        #           Child Loop BB12_1139 Depth 5
	testq	%r12, %r12
	je	.LBB12_1144
# BB#1121:                              # %for.body2.i6432
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	%r12, %r14
	movq	(%r14), %rdx
	movzbl	(%rdx), %eax
	movq	16(%r14), %r12
	cmpq	$61, %rax
	je	.LBB12_1120
# BB#1122:                              # %land.lhs.true.i6434
                                        #   in Loop: Header=BB12_1120 Depth=4
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	movq	-48(%rbp), %rsi         # 8-byte Reload
	callq	refers_to_regno_p
	testq	%r15, %rax
	je	.LBB12_1120
# BB#1123:                              # %if.end.i6445
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	$0, 48(%r14)
	movq	32(%r14), %rax
	movq	40(%r14), %rcx
	testq	%rax, %rax
	je	.LBB12_1125
# BB#1124:                              # %if.then1.i6447
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	%rcx, 40(%rax)
.LBB12_1125:                            # %if.end3.i6449
                                        #   in Loop: Header=BB12_1120 Depth=4
	testq	%rcx, %rcx
	jne	.LBB12_1329
# BB#1126:                              # %while.cond.preheader.i6450
                                        #   in Loop: Header=BB12_1120 Depth=4
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB12_1128
	.align	16, 0x90
.LBB12_1127:                            # %while.body.i6457
                                        #   Parent Loop BB12_1060 Depth=1
                                        #     Parent Loop BB12_1107 Depth=2
                                        #       Parent Loop BB12_1119 Depth=3
                                        #         Parent Loop BB12_1120 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB12_1127
	jmp	.LBB12_1128
.LBB12_1329:                            # %if.then5.i6452
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	%rax, 32(%rcx)
.LBB12_1128:                            # %if.end10.i6461
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	16(%r14), %rax
	movq	24(%r14), %rcx
	testq	%rax, %rax
	je	.LBB12_1130
# BB#1129:                              # %if.then14.i6463
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	%rcx, 24(%rax)
.LBB12_1130:                            # %if.end16.i6465
                                        #   in Loop: Header=BB12_1120 Depth=4
	testq	%rcx, %rcx
	jne	.LBB12_1131
# BB#1132:                              # %if.else20.i6471
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	table(,%r13,8), %rcx
	cmpq	%r14, %rcx
	movq	$-256, %rcx
	jne	.LBB12_1134
# BB#1133:                              # %if.then22.i6472
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	%rax, table(,%r13,8)
	jmp	.LBB12_1137
	.align	16, 0x90
.LBB12_1134:                            # %for.body.i6476
                                        #   Parent Loop BB12_1060 Depth=1
                                        #     Parent Loop BB12_1107 Depth=2
                                        #       Parent Loop BB12_1119 Depth=3
                                        #         Parent Loop BB12_1120 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movq	table+256(%rcx), %rdx
	cmpq	%r14, %rdx
	jne	.LBB12_1136
# BB#1135:                              # %if.then30.i6477
                                        #   in Loop: Header=BB12_1134 Depth=5
	movq	%rax, table+256(%rcx)
.LBB12_1136:                            # %for.inc.i6480
                                        #   in Loop: Header=BB12_1134 Depth=5
	addq	$8, %rcx
	jne	.LBB12_1134
	jmp	.LBB12_1137
.LBB12_1131:                            # %if.then18.i6467
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	%rax, 16(%rcx)
.LBB12_1137:                            # %if.end35.i6485
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	56(%r14), %rax
	testq	%rax, %rax
	je	.LBB12_1143
# BB#1138:                              # %if.end35.i6485
                                        #   in Loop: Header=BB12_1120 Depth=4
	cmpq	%r14, %rax
	movq	%rax, %rdx
	je	.LBB12_1143
	.align	16, 0x90
.LBB12_1139:                            # %while.cond41.i6489
                                        #   Parent Loop BB12_1060 Depth=1
                                        #     Parent Loop BB12_1107 Depth=2
                                        #       Parent Loop BB12_1119 Depth=3
                                        #         Parent Loop BB12_1120 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%r14, %rdx
	jne	.LBB12_1139
# BB#1140:                              # %while.end46.i6492
                                        #   in Loop: Header=BB12_1120 Depth=4
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB12_1142
# BB#1141:                              # %while.end46.i6492
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	%rax, %rdx
.LBB12_1142:                            # %while.end46.i6492
                                        #   in Loop: Header=BB12_1120 Depth=4
	movq	%rdx, 56(%rcx)
	jmp	.LBB12_1143
	.align	16, 0x90
.LBB12_1144:                            # %for.inc6.i
                                        #   in Loop: Header=BB12_1119 Depth=3
	incq	%r13
	cmpq	$32, %r13
	jne	.LBB12_1119
# BB#1145:                              # %remove_invalid_refs.exit
                                        #   in Loop: Header=BB12_1107 Depth=2
	movl	cached_regno(%rip), %eax
	movq	-56(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB12_1147
# BB#1146:                              # %remove_invalid_refs.exit
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1156
.LBB12_1147:                            # %cond.false3090
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	$7, %rcx
	movq	%rbx, %r14
	shrq	%cl, %r14
	xorq	%rbx, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_1148
	.align	16, 0x90
.LBB12_1151:                            # %for.body.i6510
                                        #   Parent Loop BB12_1060 Depth=1
                                        #     Parent Loop BB12_1107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	16(%rax), %edx
	cmpq	%rsi, %rdx
	je	.LBB12_1155
# BB#1150:                              # %for.cond.i6506
                                        #   in Loop: Header=BB12_1151 Depth=3
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_1151
.LBB12_1148:                            # %if.then4.i6512
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1149
# BB#1152:                              # %if.else.i6517
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
	jmp	.LBB12_1153
.LBB12_1149:                            # %if.then5.i6514
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_1153:                            # %if.end6.i6526
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_1155
# BB#1154:                              # %if.then11.i6527
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_1155:                            # %get_cse_reg_info.exit6529
                                        #   in Loop: Header=BB12_1107 Depth=2
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_1156:                            # %cond.end3092
                                        #   in Loop: Header=BB12_1107 Depth=2
	movl	%r15d, 28(%rax)
.LBB12_1157:                            # %for.inc3096
                                        #   in Loop: Header=BB12_1107 Depth=2
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rdx, %rax
	movq	%r15, %r14
	andq	%r14, %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rdx, %r12
	jne	.LBB12_1107
	.align	16, 0x90
.LBB12_1158:                            # %for.inc3101
                                        #   in Loop: Header=BB12_1060 Depth=1
	movq	-72(%rbp), %rcx         # 8-byte Reload
	incq	%rcx
	movq	%rcx, %rax
	andq	%r14, %rax
	movq	-88(%rbp), %rbx         # 8-byte Reload
	cmpq	%rbx, %rax
	jne	.LBB12_1060
# BB#1063:                              # %for.cond3104.preheader
	cmpq	$0, -104(%rbp)          # 8-byte Folded Reload
	je	.LBB12_1272
# BB#1064:
	xorq	%rax, %rax
	movq	-80(%rbp), %rdi         # 8-byte Reload
	.align	16, 0x90
.LBB12_1065:                            # %for.body3107
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_1069 Depth 2
                                        #     Child Loop BB12_1071 Depth 2
	leaq	(%rax,%rax,4), %rdx
	movq	$4, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	cmpq	$0, (%rdi,%rsi)
	je	.LBB12_1075
# BB#1066:                              # %if.then3112
                                        #   in Loop: Header=BB12_1065 Depth=1
	movq	$4, %rcx
	shlq	%cl, %rdx
	movq	16(%rdi,%rdx), %rsi
	testq	%rsi, %rsi
	je	.LBB12_1075
# BB#1067:                              # %land.lhs.true3117
                                        #   in Loop: Header=BB12_1065 Depth=1
	cmpq	$0, 48(%rsi)
	jne	.LBB12_1075
# BB#1068:                              #   in Loop: Header=BB12_1065 Depth=1
	leaq	16(%rdi,%rdx), %rcx
	.align	16, 0x90
.LBB12_1069:                            # %while.cond3129
                                        #   Parent Loop BB12_1065 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rdx
	testq	%rdx, %rdx
	je	.LBB12_1073
# BB#1070:                              # %land.rhs3131
                                        #   in Loop: Header=BB12_1069 Depth=2
	movq	40(%rdx), %rsi
	testq	%rsi, %rsi
	jne	.LBB12_1069
	.align	16, 0x90
.LBB12_1071:                            # %land.rhs3139
                                        #   Parent Loop BB12_1065 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	48(%rdx), %rsi
	testq	%rsi, %rsi
	jne	.LBB12_1074
# BB#1072:                              # %while.body3144
                                        #   in Loop: Header=BB12_1071 Depth=2
	movq	32(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.LBB12_1071
.LBB12_1073:                            #   in Loop: Header=BB12_1065 Depth=1
	xorq	%rsi, %rsi
.LBB12_1074:                            # %cond.end3151
                                        #   in Loop: Header=BB12_1065 Depth=1
	movq	%rsi, (%rcx)
	.align	16, 0x90
.LBB12_1075:                            # %for.inc3158
                                        #   in Loop: Header=BB12_1065 Depth=1
	incq	%rax
	movq	%rax, %rcx
	andq	%r14, %rcx
	cmpq	%rbx, %rcx
	jne	.LBB12_1065
# BB#1076:                              # %for.cond3161.preheader
	cmpq	$0, -104(%rbp)          # 8-byte Folded Reload
	je	.LBB12_1272
# BB#1077:                              # %for.body3164.lr.ph
	xorq	%r15, %r15
	.align	16, 0x90
.LBB12_1078:                            # %for.body3164
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_1170 Depth 2
                                        #     Child Loop BB12_1205 Depth 2
                                        #       Child Loop BB12_1224 Depth 3
                                        #       Child Loop BB12_1232 Depth 3
                                        #       Child Loop BB12_1250 Depth 3
                                        #       Child Loop BB12_1263 Depth 3
	leaq	(%r15,%r15,4), %r12
	movq	$4, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx,%rax), %rax
	testq	%rax, %rax
	je	.LBB12_1271
# BB#1079:                              # %if.then3169
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	8(%rax), %r13
	movq	$4, %rcx
	movq	%r12, %rdi
	movl	(%r13), %r8d
	shlq	%cl, %rdi
	movl	flag_float_store(%rip), %eax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	32(%rcx,%rdi), %r9
	movq	%r8, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	testq	%rax, %rax
	je	.LBB12_1083
# BB#1080:                              # %if.then3169
                                        #   in Loop: Header=BB12_1078 Depth=1
	cmpq	$66, %rdx
	jne	.LBB12_1083
# BB#1081:                              # %land.lhs.true3188
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$14, %rcx
	movq	%r8, %rax
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %ecx
	cmpq	$8, %rcx
	ja	.LBB12_1083
# BB#1082:                              # %land.lhs.true3188
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	jne	.LBB12_1271
	.align	16, 0x90
.LBB12_1083:                            # %lor.lhs.false3212
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$16, %rcx
	movq	%r8, %rax
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$51, %rax
	je	.LBB12_1271
# BB#1084:                              # %lor.lhs.false3212
                                        #   in Loop: Header=BB12_1078 Depth=1
	cmpq	$0, -208(%rbp)          # 8-byte Folded Reload
	jne	.LBB12_1271
# BB#1085:                              # %lor.lhs.false3220
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$4, %rcx
	movq	%r12, %rbx
	shlq	%cl, %rbx
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	16(%rcx,%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB12_1271
# BB#1086:                              # %lor.lhs.false3226
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	-80(%rbp), %rcx         # 8-byte Reload
	leaq	32(%rcx,%rdi), %rdi
	leaq	16(%rcx,%rbx), %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	cmpq	$64, %rdx
	je	.LBB12_1159
# BB#1087:                              # %lor.lhs.false3226
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%r9, %rbx
	cmpq	$63, %rdx
	jne	.LBB12_1160
# BB#1088:                              # %land.lhs.true3231
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %ecx
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rcx), %ecx
	cmpq	%rcx, %rax
	jbe	.LBB12_1160
# BB#1089:                              # %land.lhs.true3249
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$4, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx,%rax), %rax
	movl	(%rax), %eax
	andq	$65534, %rax            # imm = 0xFFFE
	cmpq	$120, %rax
	movq	%rbx, %r9
	je	.LBB12_1271
# BB#1090:                              # %if.end3266
                                        #   in Loop: Header=BB12_1078 Depth=1
	cmpq	$64, %rdx
	jne	.LBB12_1091
.LBB12_1159:                            # %if.then3271
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%r9, %rbx
	movq	8(%r13), %rax
	movq	8(%rax), %r13
	movl	(%r13), %r8d
.LBB12_1160:                            # %if.end3278
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	orq	$2, %r8
	andq	$65535, %r8             # imm = 0xFFFF
	cmpq	$63, %r8
	jne	.LBB12_1178
# BB#1161:                              # %if.then3288
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$1, %rdx
	movq	%r13, %rdi
	callq	insert_regs
	testq	%r14, %rax
	je	.LBB12_1178
# BB#1162:                              # %if.then3294
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%r13, %rdi
	callq	rehash_using_reg
	movl	(%r13), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB12_1176
# BB#1163:                              # %land.lhs.true3299
                                        #   in Loop: Header=BB12_1078 Depth=1
	movl	8(%r13), %edi
	cmpq	$53, %rdi
	jb	.LBB12_1176
# BB#1164:                              # %cond.true3305
                                        #   in Loop: Header=BB12_1078 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rdi
	jne	.LBB12_1166
# BB#1165:                              # %cond.true3305
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1175
.LBB12_1166:                            # %cond.false3314
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$7, %rcx
	movq	%rdi, %rsi
	shrq	%cl, %rsi
	xorq	%rdi, %rsi
	andq	$127, %rsi
	movq	reg_hash(,%rsi,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_1167
.LBB12_1170:                            # %for.body.i6544
                                        #   Parent Loop BB12_1078 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB12_1174
# BB#1169:                              # %for.cond.i6540
                                        #   in Loop: Header=BB12_1170 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_1170
.LBB12_1167:                            # %if.then4.i6546
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1168
# BB#1171:                              # %if.else.i6551
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	reg_hash(,%rdx,8), %rcx
	movl	8(%r13), %edi
	jmp	.LBB12_1172
.LBB12_1176:                            # %cond.false3323
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%r13, %rdi
	callq	canon_hash
	jmp	.LBB12_1177
.LBB12_1091:                            #   in Loop: Header=BB12_1078 Depth=1
	movq	%r9, %rbx
	jmp	.LBB12_1160
.LBB12_1168:                            # %if.then5.i6548
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	movl	8(%r13), %edi
	movq	-64(%rbp), %rdx         # 8-byte Reload
.LBB12_1172:                            # %if.end6.i6560
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rdx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_1174
# BB#1173:                              # %if.then11.i6561
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_1174:                            # %get_cse_reg_info.exit6563
                                        #   in Loop: Header=BB12_1078 Depth=1
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_1175:                            # %cond.end3319
                                        #   in Loop: Header=BB12_1078 Depth=1
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_1177:                            # %cond.end3328
                                        #   in Loop: Header=BB12_1078 Depth=1
	andq	$31, %rax
	movq	$4, %rcx
	movq	%r12, %rdx
	shlq	%cl, %rdx
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	%eax, 28(%rcx,%rdx)
.LBB12_1178:                            # %if.end3335
                                        #   in Loop: Header=BB12_1078 Depth=1
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB12_1181
# BB#1179:                              # %land.lhs.true3340
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	8(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$70, %rax
	jne	.LBB12_1181
# BB#1180:                              # %if.then3348
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	$4, %rcx
	shlq	%cl, %r12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	28(%rax,%r12), %edx
	movzbl	2(%r13), %ecx
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	insert
	movq	-48(%rbp), %rbx         # 8-byte Reload
	jmp	.LBB12_1182
.LBB12_1181:                            # %if.else3356
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	-48(%rbp), %rbx         # 8-byte Reload
	movq	(%rbx), %rsi
	movq	$4, %rcx
	shlq	%cl, %r12
	movq	-80(%rbp), %rax         # 8-byte Reload
	movl	28(%rax,%r12), %edx
	movzbl	2(%r13), %ecx
	movq	%r13, %rdi
	callq	insert
.LBB12_1182:                            # %if.end3367
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rdx
	movl	(%rdx), %esi
	movq	%rsi, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	xorq	%rcx, %rcx
	cmpq	$66, %rdi
	jne	.LBB12_1200
# BB#1183:                              # %land.rhs3375
                                        #   in Loop: Header=BB12_1078 Depth=1
	testq	$67108864, %rsi         # imm = 0x4000000
	movq	$1, %rcx
	je	.LBB12_1200
# BB#1184:                              # %lor.rhs3383
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	8(%rdx), %rdx
	movq	global_rtl+24(%rip), %rsi
	cmpq	%rsi, %rdx
	je	.LBB12_1200
# BB#1185:                              # %lor.rhs3383
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	global_rtl+32(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.LBB12_1200
# BB#1186:                              # %lor.lhs.false3401
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%rbx, %r8
	movq	global_rtl+40(%rip), %rbx
	cmpq	%rbx, %rdx
	jne	.LBB12_1189
# BB#1187:                              # %lor.lhs.false3401
                                        #   in Loop: Header=BB12_1078 Depth=1
	movzbl	fixed_regs+16(%rip), %ebx
	testq	$255, %rbx
	je	.LBB12_1189
# BB#1188:                              #   in Loop: Header=BB12_1078 Depth=1
	movq	%r8, %rbx
	jmp	.LBB12_1200
.LBB12_1189:                            # %lor.lhs.false3413
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	global_rtl+56(%rip), %r10
	cmpq	%r10, %rdx
	je	.LBB12_1190
# BB#1191:                              # %lor.lhs.false3413
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	global_rtl+48(%rip), %r9
	cmpq	%r9, %rdx
	movq	%r8, %rbx
	je	.LBB12_1200
# BB#1192:                              # %lor.lhs.false3431
                                        #   in Loop: Header=BB12_1078 Depth=1
	movzbl	(%rdx), %r8d
	cmpq	$75, %r8
	jne	.LBB12_1198
# BB#1193:                              # %land.lhs.true3442
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	%rbx, %r11
	movq	16(%rdx), %rbx
	movzbl	(%rbx), %ebx
	cmpq	$54, %rbx
	movq	%r11, %rbx
	jne	.LBB12_1198
# BB#1194:                              # %land.lhs.true3456
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	8(%rdx), %rdx
	cmpq	%rsi, %rdx
	je	.LBB12_1200
# BB#1195:                              # %land.lhs.true3456
                                        #   in Loop: Header=BB12_1078 Depth=1
	cmpq	%rdi, %rdx
	je	.LBB12_1200
# BB#1196:                              # %lor.lhs.false3492
                                        #   in Loop: Header=BB12_1078 Depth=1
	cmpq	%r10, %rdx
	je	.LBB12_1200
# BB#1197:                              # %lor.lhs.false3492
                                        #   in Loop: Header=BB12_1078 Depth=1
	cmpq	%r9, %rdx
	je	.LBB12_1200
.LBB12_1198:                            # %lor.rhs3516
                                        #   in Loop: Header=BB12_1078 Depth=1
	cmpq	$70, %r8
	movabsq	$0, %rcx
	jne	.LBB12_1200
# BB#1199:                              # %lor.rhs3516
                                        #   in Loop: Header=BB12_1078 Depth=1
	movabsq	$1, %rcx
	jmp	.LBB12_1200
.LBB12_1190:                            #   in Loop: Header=BB12_1078 Depth=1
	movq	%r8, %rbx
.LBB12_1200:                            # %land.end3529
                                        #   in Loop: Header=BB12_1078 Depth=1
	movb	%cl, 76(%rax)
	movl	(%r13), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB12_1271
# BB#1201:                              # %land.lhs.true3536
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	8(%r13), %rax
	movzbl	2(%rax), %eax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movzbl	mode_size(%rax), %esi
	leaq	-1(%rsi), %rax
	movq	%rbx, %r8
	movl	target_flags(%rip), %ebx
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movzbl	mode_size(%rdx), %edi
	addq	$4, %rbx
	cqto
	idivq	%rbx
	movq	%rax, %rcx
	leaq	-1(%rdi), %rax
	cqto
	idivq	%rbx
	andq	%r14, %rcx
	andq	%r14, %rax
	cmpq	%rax, %rcx
	jne	.LBB12_1271
# BB#1202:                              # %land.lhs.true3536
                                        #   in Loop: Header=BB12_1078 Depth=1
	cmpq	%rsi, %rdi
	jb	.LBB12_1271
# BB#1203:                              # %land.lhs.true3582
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	(%r8), %rax
	testq	%rax, %rax
	je	.LBB12_1271
# BB#1204:                              # %if.then3588
                                        #   in Loop: Header=BB12_1078 Depth=1
	movq	48(%rax), %rbx
	movq	$0, -64(%rbp)           # 8-byte Folded Spill
	jmp	.LBB12_1205
.LBB12_1269:                            # %for.inc3733
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	-56(%rbp), %rbx         # 8-byte Reload
	movq	32(%rbx), %rbx
.LBB12_1205:                            # %if.then3588
                                        #   Parent Loop BB12_1078 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_1224 Depth 3
                                        #       Child Loop BB12_1232 Depth 3
                                        #       Child Loop BB12_1250 Depth 3
                                        #       Child Loop BB12_1263 Depth 3
	testq	%rbx, %rbx
	je	.LBB12_1271
# BB#1206:                              # %for.body3603
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	(%rbx), %r12
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB12_1208
# BB#1207:                              #   in Loop: Header=BB12_1205 Depth=2
	movq	%r14, %r13
	jmp	.LBB12_1211
.LBB12_1208:                            # %land.lhs.true3612
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	$1, %rdx
	movq	%r12, %rdi
	movq	%r12, %rsi
	callq	exp_equiv_p
	movq	%r14, %r13
	testq	%r13, %rax
	jne	.LBB12_1210
# BB#1209:                              #   in Loop: Header=BB12_1205 Depth=2
	movq	%r13, %r14
	movq	32(%rbx), %rbx
	jmp	.LBB12_1205
.LBB12_1210:                            # %land.lhs.true3612.if.end3618_crit_edge
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	(%rbx), %r12
.LBB12_1211:                            # %if.end3618
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%r12, %rsi
	callq	gen_lowpart_common
	movq	%rax, %r14
	testq	%r14, %r14
	jne	.LBB12_1216
# BB#1212:                              # %if.else.i6569
                                        #   in Loop: Header=BB12_1205 Depth=2
	movzbl	(%r12), %eax
	cmpq	$66, %rax
	jne	.LBB12_1215
# BB#1213:                              # %if.then1.i6576
                                        #   in Loop: Header=BB12_1205 Depth=2
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%r12, %rdi
	movq	-48(%rbp), %r12         # 8-byte Reload
	movq	%r12, %rsi
	callq	adjust_address_1
	movq	%rax, %r14
	movq	8(%r14), %rsi
	movq	%r12, %rdi
	callq	memory_address_p
	testq	%r13, %rax
	je	.LBB12_1215
# BB#1214:                              # %if.then1.i6576
                                        #   in Loop: Header=BB12_1205 Depth=2
	testq	%r14, %r14
	jne	.LBB12_1216
.LBB12_1215:                            # %if.then3623
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	(%rbx), %rsi
	xorq	%rdx, %rdx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	callq	gen_rtx_SUBREG
	movq	%rax, %r14
.LBB12_1216:                            # %if.end3626
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%rbx, -56(%rbp)         # 8-byte Spill
	movzbl	(%r14), %eax
	cmpq	$61, %rax
	jne	.LBB12_1230
# BB#1217:                              # %land.lhs.true3631
                                        #   in Loop: Header=BB12_1205 Depth=2
	movl	8(%r14), %r12d
	cmpq	$53, %r12
	jb	.LBB12_1230
# BB#1218:                              # %cond.true3637
                                        #   in Loop: Header=BB12_1205 Depth=2
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r12
	jne	.LBB12_1220
# BB#1219:                              # %cond.true3637
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1229
.LBB12_1220:                            # %cond.false3646
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_1221
.LBB12_1224:                            # %for.body.i6594
                                        #   Parent Loop BB12_1078 Depth=1
                                        #     Parent Loop BB12_1205 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB12_1228
# BB#1223:                              # %for.cond.i6590
                                        #   in Loop: Header=BB12_1224 Depth=3
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_1224
.LBB12_1221:                            # %if.then4.i6596
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1222
# BB#1225:                              # %if.else.i6601
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_1226
.LBB12_1230:                            # %cond.false3655
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%r13, %r12
	movq	%r14, %rdi
	movq	-48(%rbp), %rsi         # 8-byte Reload
	callq	canon_hash
	movq	%rax, %r13
	jmp	.LBB12_1231
.LBB12_1222:                            # %if.then5.i6598
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_1226:                            # %if.end6.i6610
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_1228
# BB#1227:                              # %if.then11.i6611
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_1228:                            # %get_cse_reg_info.exit6613
                                        #   in Loop: Header=BB12_1205 Depth=2
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_1229:                            # %cond.end3651
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%r13, %r12
	movl	20(%rax), %r13d
	addq	$7808, %r13             # imm = 0x1E80
.LBB12_1231:                            # %cond.end3657
                                        #   in Loop: Header=BB12_1205 Depth=2
	andq	$31, %r13
	movq	table(,%r13,8), %rbx
	jmp	.LBB12_1232
.LBB12_1239:                            # %for.inc.i6638
                                        #   in Loop: Header=BB12_1232 Depth=3
	movq	16(%rbx), %rbx
.LBB12_1232:                            # %cond.end3657
                                        #   Parent Loop BB12_1078 Depth=1
                                        #     Parent Loop BB12_1205 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rbx, %rbx
	je	.LBB12_1241
# BB#1233:                              # %for.body.i6621
                                        #   in Loop: Header=BB12_1232 Depth=3
	movl	72(%rbx), %eax
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB12_1239
# BB#1234:                              # %land.lhs.true.i6628
                                        #   in Loop: Header=BB12_1232 Depth=3
	movq	(%rbx), %rsi
	movzbl	(%r14), %eax
	cmpq	%r14, %rsi
	jne	.LBB12_1236
# BB#1235:                              # %land.lhs.true.i6628
                                        #   in Loop: Header=BB12_1232 Depth=3
	cmpq	$61, %rax
	je	.LBB12_1240
.LBB12_1236:                            # %lor.lhs.false.i6634
                                        #   in Loop: Header=BB12_1232 Depth=3
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_1238
# BB#1237:                              # %lor.lhs.false.i6634
                                        #   in Loop: Header=BB12_1232 Depth=3
	movabsq	$1, %rdx
.LBB12_1238:                            # %lor.lhs.false.i6634
                                        #   in Loop: Header=BB12_1232 Depth=3
	movq	%r14, %rdi
	callq	exp_equiv_p
	testq	%r12, %rax
	je	.LBB12_1239
.LBB12_1240:                            # %lookup.exit6641
                                        #   in Loop: Header=BB12_1205 Depth=2
	testq	%rbx, %rbx
	jne	.LBB12_1259
.LBB12_1241:                            # %if.then3663
                                        #   in Loop: Header=BB12_1205 Depth=2
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	movq	-64(%rbp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	callq	insert_regs
	testq	%r12, %rax
	je	.LBB12_1258
# BB#1242:                              # %if.then3666
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%r14, %rdi
	callq	rehash_using_reg
	movzbl	(%r14), %eax
	cmpq	$61, %rax
	jne	.LBB12_1256
# BB#1243:                              # %land.lhs.true3671
                                        #   in Loop: Header=BB12_1205 Depth=2
	movl	8(%r14), %r13d
	cmpq	$53, %r13
	jb	.LBB12_1256
# BB#1244:                              # %cond.true3677
                                        #   in Loop: Header=BB12_1205 Depth=2
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r13
	jne	.LBB12_1246
# BB#1245:                              # %cond.true3677
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1255
.LBB12_1246:                            # %cond.false3686
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_1247
.LBB12_1250:                            # %for.body.i6656
                                        #   Parent Loop BB12_1078 Depth=1
                                        #     Parent Loop BB12_1205 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB12_1254
# BB#1249:                              # %for.cond.i6652
                                        #   in Loop: Header=BB12_1250 Depth=3
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_1250
.LBB12_1247:                            # %if.then4.i6658
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_1248
# BB#1251:                              # %if.else.i6663
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_1252
.LBB12_1256:                            # %cond.false3695
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%r14, %rdi
	movq	-48(%rbp), %rsi         # 8-byte Reload
	callq	canon_hash
	movq	%rax, %r13
	jmp	.LBB12_1257
.LBB12_1248:                            # %if.then5.i6660
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_1252:                            # %if.end6.i6672
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_1254
# BB#1253:                              # %if.then11.i6673
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_1254:                            # %get_cse_reg_info.exit6675
                                        #   in Loop: Header=BB12_1205 Depth=2
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_1255:                            # %cond.end3691
                                        #   in Loop: Header=BB12_1205 Depth=2
	movl	20(%rax), %r13d
	addq	$7808, %r13             # imm = 0x1E80
	movq	-64(%rbp), %rbx         # 8-byte Reload
.LBB12_1257:                            # %cond.end3697
                                        #   in Loop: Header=BB12_1205 Depth=2
	andq	$31, %r13
.LBB12_1258:                            # %if.end3700
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movq	-48(%rbp), %rcx         # 8-byte Reload
	callq	insert
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movzbl	76(%rcx), %ecx
	movq	%rax, %rbx
	movb	%cl, 76(%rbx)
.LBB12_1262:                            # %if.end3712
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	48(%rbx), %rbx
	movq	$0, -64(%rbp)           # 8-byte Folded Spill
	jmp	.LBB12_1263
.LBB12_1265:                            # %while.cond3714
                                        #   in Loop: Header=BB12_1263 Depth=3
	movq	32(%rbx), %rbx
.LBB12_1263:                            # %if.end3712
                                        #   Parent Loop BB12_1078 Depth=1
                                        #     Parent Loop BB12_1205 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rbx, %rbx
	je	.LBB12_1264
# BB#1266:                              # %land.lhs.true3716
                                        #   in Loop: Header=BB12_1263 Depth=3
	movq	(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	je	.LBB12_1268
# BB#1267:                              # %land.rhs3722
                                        #   in Loop: Header=BB12_1263 Depth=3
	movq	$1, %rdx
	movq	%rdi, %rsi
	callq	exp_equiv_p
	testq	%r12, %rax
	je	.LBB12_1265
.LBB12_1268:                            #   in Loop: Header=BB12_1205 Depth=2
	movq	%r12, %r14
	movq	%rbx, -64(%rbp)         # 8-byte Spill
	jmp	.LBB12_1269
.LBB12_1264:                            #   in Loop: Header=BB12_1205 Depth=2
	movq	%r12, %r14
	jmp	.LBB12_1269
.LBB12_1259:                            # %if.else3704
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	testq	%rax, %rax
	je	.LBB12_1262
# BB#1260:                              # %land.lhs.true3706
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	48(%rbx), %rdi
	cmpq	%rdi, %rax
	je	.LBB12_1262
# BB#1261:                              # %if.then3710
                                        #   in Loop: Header=BB12_1205 Depth=2
	movq	48(%rax), %rsi
	callq	merge_equiv_classes
	jmp	.LBB12_1262
	.align	16, 0x90
.LBB12_1271:                            # %for.inc3738
                                        #   in Loop: Header=BB12_1078 Depth=1
	incq	%r15
	movq	%r15, %rax
	andq	%r14, %rax
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB12_1078
.LBB12_1272:                            # %for.end3740
	cmpq	$0, -112(%rbp)          # 8-byte Folded Reload
	je	.LBB12_1273
# BB#1274:                              # %land.lhs.true3743
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	je	.LBB12_1320
# BB#1275:                              # %land.lhs.true3747
	movq	8(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB12_1320
# BB#1276:                              # %land.lhs.true3757
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	16(%rcx), %rax
	movq	24(%rax), %rax
	cmpq	%rcx, %rax
	jne	.LBB12_1320
# BB#1277:                              # %land.lhs.true3766
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB12_1320
# BB#1278:                              # %land.lhs.true3776
	movl	8(%rax), %r12d
	cmpq	$53, %r12
	jb	.LBB12_1320
# BB#1279:                              # %land.lhs.true3787
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r12
	jne	.LBB12_1281
# BB#1280:                              # %land.lhs.true3787
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r12, %r14
	jne	.LBB12_1292
.LBB12_1281:                            # %cond.false3801
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB12_1286
# BB#1282:
	movq	%rcx, %rax
.LBB12_1284:                            # %for.body.i6690
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB12_1285
# BB#1283:                              # %for.cond.i6686
                                        #   in Loop: Header=BB12_1284 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_1284
.LBB12_1286:                            # %if.then4.i6692
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB12_1288
# BB#1287:                              # %if.then5.i6694
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB12_1289
.LBB12_1273:                            # %if.end3973.thread
	movq	$0, last_jump_equiv_class(%rip)
	movq	-96(%rbp), %rbx         # 8-byte Reload
	jmp	.LBB12_1324
.LBB12_32:                              # %if.else154
                                        #   in Loop: Header=BB12_28 Depth=1
	movq	8(%r15), %rcx
	movq	global_rtl(%rip), %rdx
	cmpq	%rdx, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	jne	.LBB12_34
# BB#33:                                # %if.else154
                                        #   in Loop: Header=BB12_28 Depth=1
	cmpq	$67, %rax
	je	.LBB12_44
.LBB12_34:                              # %if.else169
                                        #   in Loop: Header=BB12_28 Depth=1
	movq	$32, %rcx
	movq	-88(%rbp), %rsi         # 8-byte Reload
	leaq	1(%rsi), %rax
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	leaq	(%rsi,%rsi,4), %rsi
	movq	$4, %rcx
	shlq	%cl, %rsi
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%r15, (%rcx,%rsi)
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB12_44
	.align	16, 0x90
.LBB12_28:                              # %for.body121
                                        # =>This Inner Loop Header: Depth=1
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	8(%rax), %rax
	movq	(%rax,%r13,8), %r15
	movzbl	(%r15), %eax
	leaq	-47(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$3, %rcx
	ja	.LBB12_44
# BB#29:                                # %for.body121
                                        #   in Loop: Header=BB12_28 Depth=1
	jmpq	*.LJTI12_1(,%rcx,8)
.LBB12_30:                              # %if.then133
                                        #   in Loop: Header=BB12_28 Depth=1
	movq	16(%r15), %rdi
	movzbl	(%rdi), %eax
	cmpq	$50, %rax
	jne	.LBB12_32
# BB#31:                                # %if.then141
                                        #   in Loop: Header=BB12_28 Depth=1
	movq	-96(%rbp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	callq	canon_reg
	callq	apply_change_group
	movq	16(%r15), %rdi
	movq	%rbx, %rsi
	callq	fold_rtx
	movq	8(%r15), %rdi
	xorq	%rsi, %rsi
	callq	invalidate
	jmp	.LBB12_43
.LBB12_38:                              # %land.lhs.true200
                                        #   in Loop: Header=BB12_28 Depth=1
	movq	%rdx, %rbx
	movq	8(%r15), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB12_40
# BB#39:                                # %land.lhs.true208
                                        #   in Loop: Header=BB12_28 Depth=1
	movl	8(%rcx), %ecx
	cmpq	$53, %rcx
	jae	.LBB12_40
# BB#41:                                # %if.else218
                                        #   in Loop: Header=BB12_28 Depth=1
	cmpq	$50, %rax
	movq	%rbx, %rdx
	jne	.LBB12_44
.LBB12_42:                              # %if.then223
                                        #   in Loop: Header=BB12_28 Depth=1
	movq	%r15, %rdi
	movq	-96(%rbp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	callq	canon_reg
	callq	apply_change_group
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	fold_rtx
.LBB12_43:                              # %for.inc231
                                        #   in Loop: Header=BB12_28 Depth=1
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	jmp	.LBB12_44
.LBB12_35:                              # %if.then181
                                        #   in Loop: Header=BB12_28 Depth=1
	movq	8(%r15), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB12_44
# BB#36:                                # %if.then189
                                        #   in Loop: Header=BB12_28 Depth=1
	xorq	%rsi, %rsi
	movq	%rdx, %rbx
	jmp	.LBB12_37
.LBB12_40:                              # %if.then216
                                        #   in Loop: Header=BB12_28 Depth=1
	xorq	%rsi, %rsi
	movq	%r15, %rdi
.LBB12_37:                              # %for.inc231
                                        #   in Loop: Header=BB12_28 Depth=1
	callq	canon_reg
	movq	%rbx, %rdx
	.align	16, 0x90
.LBB12_44:                              # %for.inc231
                                        #   in Loop: Header=BB12_28 Depth=1
	movq	%r13, %rax
	andq	%r14, %rax
	incq	%r13
	cmpq	%r12, %rax
	jne	.LBB12_28
# BB#45:                                # %if.end293
	movq	-88(%rbp), %r13         # 8-byte Reload
	andq	%r13, %r14
	cmpq	$1, %r14
	movq	-96(%rbp), %r14         # 8-byte Reload
	movq	-80(%rbp), %rbx         # 8-byte Reload
	je	.LBB12_46
# BB#61:                                # %if.end336
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%r12, %r12
	testq	%rax, %rax
	movabsq	$0, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jg	.LBB12_62
	jmp	.LBB12_55
.LBB12_11:                              # %if.else
	cmpq	$50, %rax
	jne	.LBB12_46
# BB#12:                                # %if.then49
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movq	%r14, %rsi
	callq	canon_reg
	callq	apply_change_group
	movq	-160(%rbp), %rbx        # 8-byte Reload
	movq	16(%rbx), %rdi
	movq	%r14, %rsi
	callq	fold_rtx
	movq	8(%rbx), %rdi
	xorq	%rsi, %rsi
	xorq	%r13, %r13
	callq	invalidate
	jmp	.LBB12_55
.LBB12_46:                              # %land.lhs.true296
	cmpq	$0, 56(%r14)
	je	.LBB12_47
# BB#56:                                # %land.lhs.true302
	movq	$4, %rsi
	xorq	%rdx, %rdx
	xorq	%r12, %r12
	movq	%r14, %rdi
	callq	find_reg_note
	movq	%rax, %r15
	testq	%r15, %r15
	movq	$1, %r13
	je	.LBB12_57
# BB#58:                                # %land.lhs.true306
	movq	(%rbx), %rax
	movq	8(%r15), %rdi
	movq	16(%rax), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB12_60
# BB#59:                                # %lor.lhs.false317
	movq	(%rbx), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$64, %rax
	movq	$1, %r13
	jne	.LBB12_57
.LBB12_60:                              # %if.then327
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movq	8(%r15), %rdi
	xorq	%rsi, %rsi
	callq	canon_reg
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	fold_rtx
	movq	%rax, %r12
	movq	%r12, 8(%r15)
	movq	$1, %r13
	movq	$1, -112(%rbp)          # 8-byte Folded Spill
	jmp	.LBB12_62
.LBB12_21:
	movq	-96(%rbp), %r14         # 8-byte Reload
	jmp	.LBB12_55
.LBB12_47:
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movq	$1, %r13
	xorq	%r12, %r12
	movq	$1, -112(%rbp)          # 8-byte Folded Spill
	jmp	.LBB12_62
.LBB12_57:
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movq	$1, -112(%rbp)          # 8-byte Folded Spill
.LBB12_62:                              # %for.body340.lr.ph
	movq	%r12, -288(%rbp)        # 8-byte Spill
	movq	%r13, -88(%rbp)         # 8-byte Spill
	xorq	%rcx, %rcx
	movq	-80(%rbp), %r15         # 8-byte Reload
	.align	16, 0x90
.LBB12_63:                              # %for.body340
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_74 Depth 2
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	leaq	(%rcx,%rcx,4), %r12
	movq	$4, %rcx
	shlq	%cl, %r12
	movq	(%r15,%r12), %rax
	movq	8(%rax), %rbx
	movq	16(%rax), %r13
	leaq	(%r15,%r12), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%r14, %rsi
	callq	canon_reg
	movq	%rax, %rdx
	movq	%r13, 56(%r15,%r12)
	movq	%r14, %r12
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB12_66
# BB#64:                                # %land.lhs.true360
                                        #   in Loop: Header=BB12_63 Depth=1
	movzbl	(%r13), %eax
	cmpq	$61, %rax
	jne	.LBB12_66
# BB#65:                                # %land.lhs.true365
                                        #   in Loop: Header=BB12_63 Depth=1
	movl	8(%rdx), %eax
	movl	8(%r13), %ecx
	cmpq	$53, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	cmpq	$53, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	xorq	%rax, %rcx
	jne	.LBB12_69
	.align	16, 0x90
.LBB12_66:                              # %lor.lhs.false378
                                        #   in Loop: Header=BB12_63 Depth=1
	movslq	40(%r12), %rax
	testq	%rax, %rax
	jns	.LBB12_68
# BB#67:                                # %cond.end
                                        #   in Loop: Header=BB12_63 Depth=1
	movq	%r12, %rdi
	movq	%rdx, %r14
	callq	recog_memoized_1
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	movq	%r14, %rdx
	js	.LBB12_69
.LBB12_68:                              # %lor.lhs.false389
                                        #   in Loop: Header=BB12_63 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	leaq	(%rax,%rax,4), %rax
	movsbq	insn_data+33(,%rax,8), %rax
	testq	%rax, %rax
	jle	.LBB12_70
.LBB12_69:                              # %if.then395
                                        #   in Loop: Header=BB12_63 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rsi
	addq	$16, %rsi
	movq	$1, %rcx
	movq	%r12, %rdi
	callq	validate_change
	jmp	.LBB12_71
	.align	16, 0x90
.LBB12_70:                              # %if.else403
                                        #   in Loop: Header=BB12_63 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	%rdx, 16(%rax)
.LBB12_71:                              # %if.end410
                                        #   in Loop: Header=BB12_63 Depth=1
	movq	-88(%rbp), %r13         # 8-byte Reload
	movl	(%rbx), %eax
	andq	$65534, %rax            # imm = 0xFFFE
	cmpq	$132, %rax
	movq	-80(%rbp), %r15         # 8-byte Reload
	jne	.LBB12_73
# BB#72:                                # %if.then420
                                        #   in Loop: Header=BB12_63 Depth=1
	movq	16(%rbx), %rdi
	leaq	16(%rbx), %r14
	movq	%r12, %rsi
	callq	canon_reg
	movq	$1, %rcx
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	validate_change
	movq	24(%rbx), %rdi
	leaq	24(%rbx), %r14
	movq	%r12, %rsi
	callq	canon_reg
	movq	$1, %rcx
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	validate_change
.LBB12_73:                              # %while.cond
                                        #   in Loop: Header=BB12_63 Depth=1
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	jmp	.LBB12_74
	.align	16, 0x90
.LBB12_77:                              # %while.body
                                        #   in Loop: Header=BB12_74 Depth=2
	movq	8(%rbx), %rbx
.LBB12_74:                              # %while.cond
                                        #   Parent Loop BB12_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rbx), %eax
	leaq	-63(%rax), %rcx
	andq	%rdx, %rcx
	cmpq	$2, %rcx
	jb	.LBB12_77
# BB#75:                                # %while.cond
                                        #   in Loop: Header=BB12_74 Depth=2
	cmpq	$66, %rax
	je	.LBB12_78
# BB#76:                                # %while.cond
                                        #   in Loop: Header=BB12_74 Depth=2
	addq	$-132, %rax
	andq	%rdx, %rax
	cmpq	$1, %rax
	jbe	.LBB12_77
	jmp	.LBB12_79
	.align	16, 0x90
.LBB12_78:                              # %if.then463
                                        #   in Loop: Header=BB12_63 Depth=1
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rdx, %rbx
	callq	canon_reg
	movq	%rbx, %rdx
.LBB12_79:                              # %for.inc466
                                        #   in Loop: Header=BB12_63 Depth=1
	movq	%r12, %r14
	movq	-56(%rbp), %rcx         # 8-byte Reload
	incq	%rcx
	movq	%rcx, %rax
	andq	%rdx, %rax
	andq	%rdx, %r13
	cmpq	%r13, %rax
	jne	.LBB12_63
# BB#80:                                # %for.end468
	movq	%r13, -368(%rbp)        # 8-byte Spill
	callq	apply_change_group
	xorq	%rbx, %rbx
	xorq	%r13, %r13
	movq	$0, -376(%rbp)          # 8-byte Folded Spill
	movq	$0, -384(%rbp)          # 8-byte Folded Spill
	movq	$0, -360(%rbp)          # 8-byte Folded Spill
	movq	%r14, -96(%rbp)         # 8-byte Spill
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	jmp	.LBB12_81
.LBB12_827:                             # %land.lhs.true2143
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdi
	movq	-48(%rbp), %rsi         # 8-byte Reload
	callq	rtx_equal_p
	movq	%r12, %r9
	testq	%r9, %rax
	je	.LBB12_831
# BB#828:                               # %if.then2149
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rbx, %rbx
	jne	.LBB12_829
# BB#830:                               # %if.else2155
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-96(%rbp), %rbx         # 8-byte Reload
	movq	56(%rbx), %rcx
	movq	$4, %rdi
	movq	$5, %rsi
	movq	%r14, %rdx
	movq	%r9, %r14
	callq	gen_rtx_fmt_ue
	movq	%r14, %r9
	movq	%rax, 56(%rbx)
	jmp	.LBB12_831
.LBB12_720:                             # %if.then1875
                                        #   in Loop: Header=BB12_81 Depth=1
	andq	%r9, %r15
	cmpq	%r15, %r14
	jne	.LBB12_722
# BB#721:                               # %if.then1875
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	jne	.LBB12_731
.LBB12_722:                             # %cond.false1884
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_723
.LBB12_726:                             # %for.body.i5937
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB12_730
# BB#725:                               # %for.cond.i5933
                                        #   in Loop: Header=BB12_726 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_726
.LBB12_723:                             # %if.then4.i5939
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_724
# BB#727:                               # %if.else.i5944
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	$32, %rdi
	movq	%r9, %r15
	callq	xmalloc
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%r15, %r9
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_728
.LBB12_829:                             # %if.then2151
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r14, 8(%rbx)
.LBB12_831:                             # %if.end2167
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
.LBB12_832:                             # %if.end2167
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-48(%rbp), %r12         # 8-byte Reload
	movq	%r15, %rdi
	movq	%rax, %r15
	jmp	.LBB12_833
.LBB12_724:                             # %if.then5.i5941
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_728:                             # %if.end6.i5953
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_730
# BB#729:                               # %if.then11.i5954
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_730:                             # %get_cse_reg_info.exit5956
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movslq	20(%rax), %rax
	movq	qty_table(%rip), %rdx
	leaq	(%rax,%rax,2), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movl	28(%rdx,%rax), %esi
.LBB12_731:                             # %cond.end1889
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %r15
	movq	$32, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$53, %rax
	movq	-80(%rbp), %r14         # 8-byte Reload
	jl	.LBB12_733
# BB#732:                               # %cond.true1897
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %rbx
	movq	cfun(%rip), %rax
	movq	24(%rax), %rax
	movq	$32, %rcx
	movq	80(%rax), %rax
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	(%rax,%rsi,8), %rdx
	jmp	.LBB12_734
.LBB12_733:                             # %cond.false1900
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %rax
	movzbl	2(%rax), %edi
	movq	%rax, %rbx
	callq	gen_rtx_REG
	movq	%rax, %rdx
.LBB12_734:                             # %cond.end1905
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	addq	$16, %rsi
	xorq	%rcx, %rcx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	validate_change
	movq	%r15, %r9
	andq	%r9, %rax
	je	.LBB12_736
# BB#735:                               # %cond.end1905
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-56(%rbp), %rbx         # 8-byte Reload
.LBB12_736:                             # %cond.end1905
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %r15
	je	.LBB12_737
# BB#738:                               # %cond.end1905
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-240(%rbp), %rax        # 8-byte Reload
	xorq	$1, %rax
	movq	%rbx, %rdi
	jne	.LBB12_761
# BB#739:                               # %land.lhs.true1917
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-248(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	xorq	%r13, %r13
	cmpq	$61, %rcx
	movabsq	$0, %rbx
	je	.LBB12_747
# BB#740:                               # %land.lhs.true1917
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$63, %rcx
	jne	.LBB12_746
# BB#741:                               # %land.lhs.true.i5965
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-248(%rbp), %rcx        # 8-byte Reload
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB12_746
# BB#742:                               # %land.lhs.true4.i5971
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_746
# BB#743:                               # %land.lhs.true9.i5977
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_746
# BB#744:                               # %land.lhs.true19.i5981
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB12_746
# BB#745:                               # %land.lhs.true36.i5984
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	%r9, %rbx
	callq	subreg_lowpart_p
	movq	%rbx, %r9
	testq	%r9, %rax
	movabsq	$0, %rbx
	jne	.LBB12_747
.LBB12_746:                             # %cond.false.i5987
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$47, %rsi
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	%r9, %rbx
	callq	rtx_cost
	movq	%rbx, %r9
	movq	%rax, %rbx
	addq	%rbx, %rbx
.LBB12_747:                             # %cond.end1925
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %r12
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	je	.LBB12_755
# BB#748:                               # %cond.end1925
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$63, %rcx
	jne	.LBB12_754
# BB#749:                               # %land.lhs.true.i5998
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rdi), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB12_754
# BB#750:                               # %land.lhs.true4.i6004
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_754
# BB#751:                               # %land.lhs.true9.i6010
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_754
# BB#752:                               # %land.lhs.true19.i6014
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB12_754
# BB#753:                               # %land.lhs.true36.i6017
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %r14
	callq	subreg_lowpart_p
	movq	%r14, %rdi
	testq	%r12, %rax
	jne	.LBB12_755
.LBB12_754:                             # %cond.false.i6020
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$47, %rsi
	movq	%rdi, %r14
	callq	rtx_cost
	movq	%r14, %rdi
	movq	%rax, %r13
	addq	%r13, %r13
.LBB12_755:                             # %cond.end1934
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rcx
	shlq	%cl, %r13
	movq	$32, %rcx
	sarq	%cl, %r13
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%r13, %rbx
	jge	.LBB12_756
# BB#757:                               # %land.lhs.true1938
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %rbx
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	addq	$16, %rsi
	xorq	%rcx, %rcx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-248(%rbp), %rdx        # 8-byte Reload
	callq	validate_change
	movq	%r12, %r9
	testq	%r9, %rax
	movq	-312(%rbp), %r13        # 8-byte Reload
	je	.LBB12_759
# BB#758:                               # %land.lhs.true1938
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-248(%rbp), %rbx        # 8-byte Reload
.LBB12_759:                             # %land.lhs.true1938
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	movq	-48(%rbp), %r12         # 8-byte Reload
	jmp	.LBB12_760
.LBB12_737:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	jmp	.LBB12_761
.LBB12_756:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %r9
	movq	-48(%rbp), %r12         # 8-byte Reload
	jmp	.LBB12_660
.LBB12_368:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, %rdx
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r14
	movq	%r12, %r8
	jmp	.LBB12_334
.LBB12_370:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %rdx
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r14
	jmp	.LBB12_334
.LBB12_415:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, %r14
	movq	-48(%rbp), %r12         # 8-byte Reload
	jmp	.LBB12_424
.LBB12_420:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, %r14
	movq	-48(%rbp), %r12         # 8-byte Reload
	jmp	.LBB12_424
	.align	16, 0x90
.LBB12_81:                              # %for.body473
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_95 Depth 2
                                        #     Child Loop BB12_104 Depth 2
                                        #     Child Loop BB12_125 Depth 2
                                        #     Child Loop BB12_139 Depth 2
                                        #     Child Loop BB12_161 Depth 2
                                        #     Child Loop BB12_172 Depth 2
                                        #     Child Loop BB12_190 Depth 2
                                        #     Child Loop BB12_222 Depth 2
                                        #     Child Loop BB12_230 Depth 2
                                        #     Child Loop BB12_268 Depth 2
                                        #     Child Loop BB12_279 Depth 2
                                        #       Child Loop BB12_282 Depth 3
                                        #     Child Loop BB12_299 Depth 2
                                        #     Child Loop BB12_307 Depth 2
                                        #     Child Loop BB12_338 Depth 2
                                        #       Child Loop BB12_346 Depth 3
                                        #       Child Loop BB12_354 Depth 3
                                        #       Child Loop BB12_364 Depth 3
                                        #     Child Loop BB12_381 Depth 2
                                        #       Child Loop BB12_393 Depth 3
                                        #       Child Loop BB12_401 Depth 3
                                        #       Child Loop BB12_412 Depth 3
                                        #     Child Loop BB12_430 Depth 2
                                        #     Child Loop BB12_520 Depth 2
                                        #     Child Loop BB12_692 Depth 2
                                        #     Child Loop BB12_705 Depth 2
                                        #     Child Loop BB12_726 Depth 2
                                        #     Child Loop BB12_770 Depth 2
                                        #     Child Loop BB12_778 Depth 2
                                        #     Child Loop BB12_802 Depth 2
                                        #     Child Loop BB12_815 Depth 2
                                        #     Child Loop BB12_834 Depth 2
                                        #     Child Loop BB12_851 Depth 2
                                        #     Child Loop BB12_903 Depth 2
	leaq	(%rbx,%rbx,4), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	$4, %rcx
	shlq	%cl, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	(%r15,%rax), %rax
	movq	16(%rax), %rcx
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movl	(%rcx), %edx
	movq	8(%rax), %rax
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB12_83
# BB#82:                                # %cond.true493
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	(%rax), %edx
.LBB12_83:                              # %cond.end501
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movq	$4, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	shlq	%cl, %rax
	movq	%rdx, %rcx
	movl	%ecx, 44(%r15,%rax)
	movq	-288(%rbp), %r12        # 8-byte Reload
	testq	%r12, %r12
	jne	.LBB12_85
# BB#84:                                #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, -296(%rbp)        # 8-byte Spill
	movq	%r13, -224(%rbp)        # 8-byte Spill
	movq	%r12, %rdx
	jmp	.LBB12_115
.LBB12_85:                              # %if.then507
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, -296(%rbp)        # 8-byte Spill
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$64, %rax
	movq	%rcx, %r15
	jne	.LBB12_87
# BB#86:                                # %if.then512
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movzbl	2(%rax), %r15d
.LBB12_87:                              # %if.end522
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %rbx
	xorq	%rax, %rax
	movb	%al, do_not_record(%rip)
	movb	%al, hash_arg_in_memory(%rip)
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB12_101
# BB#88:                                # %land.lhs.true527
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%r12), %r14d
	cmpq	$53, %r14
	jb	.LBB12_101
# BB#89:                                # %cond.true533
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	movq	%rbx, %r9
	jne	.LBB12_91
# BB#90:                                # %cond.true533
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_100
.LBB12_91:                              # %cond.false542
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_92
.LBB12_95:                              # %for.body.i
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB12_99
# BB#94:                                # %for.cond.i
                                        #   in Loop: Header=BB12_95 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_95
.LBB12_92:                              # %if.then4.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_93
# BB#96:                                # %if.else.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	movq	%r13, -224(%rbp)        # 8-byte Spill
	movq	%r12, %r13
	movq	%r9, %r12
	callq	xmalloc
	movq	%r12, %r9
	movq	%r13, %r12
	movq	-224(%rbp), %r13        # 8-byte Reload
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_97
.LBB12_101:                             # %cond.false549
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	canon_hash
	movq	%rbx, %r9
	jmp	.LBB12_102
.LBB12_93:                              # %if.then5.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_97:                              # %if.end6.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_99
# BB#98:                                # %if.then11.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_99:                              # %get_cse_reg_info.exit
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_100:                             # %cond.end547
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_102:                             # %cond.end551
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	do_not_record(%rip), %ecx
	andq	$31, %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	movq	$1, %rax
	testq	%rcx, %rcx
	jne	.LBB12_114
# BB#103:                               # %if.then554
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-360(%rbp), %rax        # 8-byte Reload
	andq	%r9, %rax
	movq	table(,%rax,8), %rbx
	xorq	%rax, %rax
	testq	%rbx, %rbx
	movabsq	$0, %r13
	je	.LBB12_114
	.align	16, 0x90
.LBB12_104:                             # %for.body.i5134
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%rbx), %eax
	cmpq	%r15, %rax
	jne	.LBB12_112
# BB#105:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB12_104 Depth=2
	movq	(%rbx), %rsi
	movzbl	(%r12), %eax
	cmpq	%r12, %rsi
	jne	.LBB12_108
# BB#106:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB12_104 Depth=2
	cmpq	$61, %rax
	je	.LBB12_107
.LBB12_108:                             # %lor.lhs.false.i
                                        #   in Loop: Header=BB12_104 Depth=2
	movq	%r9, %r14
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_110
# BB#109:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB12_104 Depth=2
	movabsq	$1, %rdx
.LBB12_110:                             # %lor.lhs.false.i
                                        #   in Loop: Header=BB12_104 Depth=2
	movq	%r12, %rdi
	callq	exp_equiv_p
	movq	%r14, %r9
	testq	%r9, %rax
	jne	.LBB12_111
.LBB12_112:                             # %for.inc.i
                                        #   in Loop: Header=BB12_104 Depth=2
	movq	16(%rbx), %rbx
	xorq	%r13, %r13
	testq	%rbx, %rbx
	jne	.LBB12_104
	jmp	.LBB12_113
.LBB12_107:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %r13
	jmp	.LBB12_113
.LBB12_111:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %r13
.LBB12_113:                             # %if.end556.loopexit
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	do_not_record(%rip), %eax
.LBB12_114:                             # %if.end556
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, -224(%rbp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	%rax, %rcx
	movzbl	hash_arg_in_memory(%rip), %eax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	andq	$1, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	-200(%rbp), %rcx        # 8-byte Reload
.LBB12_115:                             # %if.end557
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%r9, %r12
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	xorq	%rbx, %rbx
	cmpq	$64, %rax
	movabsq	$0, %rax
	je	.LBB12_117
# BB#116:                               # %if.end557
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdx, %rax
.LBB12_117:                             # %if.end557
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, -56(%rbp)         # 8-byte Spill
	addq	%r15, -136(%rbp)        # 8-byte Folded Spill
	movq	-64(%rbp), %r14         # 8-byte Reload
	movq	%r14, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	callq	fold_rtx
	movq	$4, %rcx
	movq	-216(%rbp), %rdx        # 8-byte Reload
	shlq	%cl, %rdx
	movb	%bl, do_not_record(%rip)
	movb	%bl, hash_arg_in_memory(%rip)
	movq	%r14, 8(%r15,%rdx)
	movzbl	(%r14), %ecx
	movq	%rax, -104(%rbp)        # 8-byte Spill
	leaq	8(%r15,%rdx), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	cmpq	$61, %rcx
	jne	.LBB12_131
# BB#118:                               # %land.lhs.true573
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%r14), %r13d
	cmpq	$53, %r13
	jb	.LBB12_131
# BB#119:                               # %cond.true579
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r13
	movq	%r12, %r8
	jne	.LBB12_121
# BB#120:                               # %cond.true579
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_130
.LBB12_121:                             # %cond.false588
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_122
	.align	16, 0x90
.LBB12_125:                             # %for.body.i5153
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB12_129
# BB#124:                               # %for.cond.i5149
                                        #   in Loop: Header=BB12_125 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_125
.LBB12_122:                             # %if.then4.i5155
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_123
# BB#126:                               # %if.else.i5160
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	movq	%r8, %r12
	callq	xmalloc
	movq	%r12, %r8
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_127
	.align	16, 0x90
.LBB12_131:                             # %cond.false597
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r14, %rdi
	movq	-200(%rbp), %rsi        # 8-byte Reload
	callq	canon_hash
	movq	%r12, %r8
	jmp	.LBB12_132
.LBB12_123:                             # %if.then5.i5157
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_127:                             # %if.end6.i5169
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r8d, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_129
# BB#128:                               # %if.then11.i5170
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_129:                             # %get_cse_reg_info.exit5172
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_130:                             # %cond.end593
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_132:                             # %cond.end599
                                        #   in Loop: Header=BB12_81 Depth=1
	andq	$31, %rax
	movq	$4, %rcx
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movzbl	do_not_record(%rip), %esi
	movzbl	hash_arg_in_memory(%rip), %edi
	shlq	%cl, %rdx
	movl	%eax, 24(%r15,%rdx)
	movb	%sil, 41(%r15,%rdx)
	movb	%dil, 40(%r15,%rdx)
	movzbl	(%r14), %eax
	leaq	24(%r15,%rdx), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	41(%r15,%rdx), %rcx
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	leaq	40(%r15,%rdx), %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	cmpq	$66, %rax
	movq	%r14, %r13
	jne	.LBB12_137
# BB#133:                               # %land.lhs.true614
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$3, %rsi
	xorq	%rdx, %rdx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%r8, %rbx
	callq	find_reg_note
	movq	%rbx, %r8
	testq	%rax, %rax
	je	.LBB12_137
# BB#134:                               # %land.lhs.true618
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB12_137
# BB#135:                               # %land.lhs.true623
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	8(%rax), %eax
	cmpq	$53, %rax
	jb	.LBB12_137
# BB#136:                               # %if.end633.thread
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$1, %rax
	movq	-256(%rbp), %rcx        # 8-byte Reload
	movb	%al, (%rcx)
	xorq	%r15, %r15
	jmp	.LBB12_148
	.align	16, 0x90
.LBB12_137:                             # %if.end633
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-256(%rbp), %rax        # 8-byte Reload
	movzbl	(%rax), %eax
	xorq	%r15, %r15
	testq	%rax, %rax
	jne	.LBB12_148
# BB#138:                               # %if.then638
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-304(%rbp), %rax        # 8-byte Reload
	movl	(%rax), %eax
	movq	table(,%rax,8), %rbx
	testq	%rbx, %rbx
	movq	-200(%rbp), %rcx        # 8-byte Reload
	je	.LBB12_148
	.align	16, 0x90
.LBB12_139:                             # %for.body.i5180
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%rbx), %eax
	cmpq	%rcx, %rax
	jne	.LBB12_146
# BB#140:                               # %land.lhs.true.i5187
                                        #   in Loop: Header=BB12_139 Depth=2
	movq	(%rbx), %rsi
	movzbl	(%r13), %eax
	cmpq	%r13, %rsi
	jne	.LBB12_143
# BB#141:                               # %land.lhs.true.i5187
                                        #   in Loop: Header=BB12_139 Depth=2
	cmpq	$61, %rax
	je	.LBB12_142
.LBB12_143:                             # %lor.lhs.false.i5193
                                        #   in Loop: Header=BB12_139 Depth=2
	movq	%rcx, %r12
	movq	%r8, %r14
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_145
# BB#144:                               # %lor.lhs.false.i5193
                                        #   in Loop: Header=BB12_139 Depth=2
	movabsq	$1, %rdx
.LBB12_145:                             # %lor.lhs.false.i5193
                                        #   in Loop: Header=BB12_139 Depth=2
	movq	%r13, %rdi
	callq	exp_equiv_p
	movq	%r14, %r8
	testq	%r8, %rax
	movq	%r12, %rcx
	jne	.LBB12_142
.LBB12_146:                             # %for.inc.i5197
                                        #   in Loop: Header=BB12_139 Depth=2
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB12_139
# BB#147:                               #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	jmp	.LBB12_148
.LBB12_142:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%rbx, %r15
	.align	16, 0x90
.LBB12_148:                             # %if.end643
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$4, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	shlq	%cl, %rax
	movq	-80(%rbp), %rdx         # 8-byte Reload
	leaq	16(%rdx,%rax), %rcx
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	%rcx, 16(%rdx,%rax)
	testq	%rcx, %rcx
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-224(%rbp), %r15        # 8-byte Reload
	je	.LBB12_180
# BB#149:                               # %if.end643
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	je	.LBB12_180
# BB#150:                               # %if.end643
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%r15, %r15
	je	.LBB12_180
# BB#151:                               # %if.then651
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	48(%rcx), %rdi
	movq	48(%r15), %rsi
	cmpq	%rsi, %rdi
	jne	.LBB12_153
# BB#152:                               #   in Loop: Header=BB12_81 Depth=1
	movq	$0, -56(%rbp)           # 8-byte Folded Spill
	movq	%r13, -64(%rbp)         # 8-byte Spill
	jmp	.LBB12_186
.LBB12_180:                             # %if.else693
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, -64(%rbp)         # 8-byte Spill
	testq	%r15, %r15
	movq	%r15, %rax
	jne	.LBB12_182
# BB#181:                               # %if.else693
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, %rax
.LBB12_182:                             # %if.else693
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, %rcx
	jmp	.LBB12_183
.LBB12_153:                             # %if.then655
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, %rbx
	movq	%r8, %r15
	callq	merge_equiv_classes
	movq	-288(%rbp), %r12        # 8-byte Reload
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB12_168
# BB#154:                               # %land.lhs.true660
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%r12), %r14d
	cmpq	$53, %r14
	jb	.LBB12_168
# BB#155:                               # %cond.true666
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	movq	%r15, %r8
	jne	.LBB12_157
# BB#156:                               # %cond.true666
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_167
.LBB12_157:                             # %cond.false675
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %r15
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_158
.LBB12_161:                             # %for.body.i5214
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB12_166
# BB#160:                               # %for.cond.i5210
                                        #   in Loop: Header=BB12_161 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_161
.LBB12_158:                             # %if.then4.i5216
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_159
# BB#162:                               # %if.else.i5221
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	movq	%r12, %r13
	movq	%r8, %r12
	callq	xmalloc
	movq	%r12, %r8
	movq	%r13, %r12
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_163
.LBB12_168:                             # %cond.false684
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, -64(%rbp)         # 8-byte Spill
	movq	%rbx, -72(%rbp)         # 8-byte Spill
	movl	72(%rbx), %esi
	leaq	72(%rbx), %r14
	movq	%r12, %rdi
	callq	canon_hash
	movq	%r15, %r8
	jmp	.LBB12_169
.LBB12_159:                             # %if.then5.i5218
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_163:                             # %if.end6.i5230
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r8d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_165
# BB#164:                               # %if.then11.i5231
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_165:                             # %get_cse_reg_info.exit5233
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-64(%rbp), %r13         # 8-byte Reload
.LBB12_166:                             # %get_cse_reg_info.exit5233
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, %rbx
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_167:                             # %cond.end680
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, -72(%rbp)         # 8-byte Spill
	movq	%r13, -64(%rbp)         # 8-byte Spill
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
	leaq	72(%rbx), %r14
.LBB12_169:                             # %cond.end687
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %r13
	andq	$31, %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	movq	table(,%rax,8), %r15
	testq	%r15, %r15
	je	.LBB12_170
# BB#171:                               #   in Loop: Header=BB12_81 Depth=1
	movl	(%r14), %r14d
	.align	16, 0x90
.LBB12_172:                             # %for.body.i5241
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%r15), %eax
	movq	%r14, %rcx
	andq	%r8, %rcx
	cmpq	%rcx, %rax
	jne	.LBB12_179
# BB#173:                               # %land.lhs.true.i5248
                                        #   in Loop: Header=BB12_172 Depth=2
	movq	(%r15), %rsi
	movzbl	(%r13), %eax
	movq	$0, -56(%rbp)           # 8-byte Folded Spill
	cmpq	%r13, %rsi
	jne	.LBB12_176
# BB#174:                               # %land.lhs.true.i5248
                                        #   in Loop: Header=BB12_172 Depth=2
	cmpq	$61, %rax
	je	.LBB12_175
.LBB12_176:                             # %lor.lhs.false.i5254
                                        #   in Loop: Header=BB12_172 Depth=2
	movq	%r8, %rbx
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_178
# BB#177:                               # %lor.lhs.false.i5254
                                        #   in Loop: Header=BB12_172 Depth=2
	movabsq	$1, %rdx
.LBB12_178:                             # %lor.lhs.false.i5254
                                        #   in Loop: Header=BB12_172 Depth=2
	movq	%r13, %rdi
	callq	exp_equiv_p
	movq	%rbx, %r8
	testq	%r8, %rax
	jne	.LBB12_175
.LBB12_179:                             # %for.inc.i5258
                                        #   in Loop: Header=BB12_172 Depth=2
	movq	16(%r15), %r15
	testq	%r15, %r15
	jne	.LBB12_172
.LBB12_170:                             #   in Loop: Header=BB12_81 Depth=1
	movq	$0, -56(%rbp)           # 8-byte Folded Spill
	movq	%r13, -288(%rbp)        # 8-byte Spill
	xorq	%r15, %r15
	movq	-72(%rbp), %rcx         # 8-byte Reload
	jmp	.LBB12_183
.LBB12_175:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, -288(%rbp)        # 8-byte Spill
	movq	-72(%rbp), %rcx         # 8-byte Reload
	.align	16, 0x90
.LBB12_183:                             # %if.end697
                                        #   in Loop: Header=BB12_81 Depth=1
	xorq	%r12, %r12
	testq	%rcx, %rcx
	jne	.LBB12_185
# BB#184:                               #   in Loop: Header=BB12_81 Depth=1
	movq	$0, -72(%rbp)           # 8-byte Folded Spill
	xorq	%r9, %r9
	jmp	.LBB12_192
.LBB12_185:                             # %if.end697.if.then699_crit_edge
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	48(%rcx), %rdi
.LBB12_186:                             # %if.then699
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$1, %r9
	xorq	%r12, %r12
	testq	%rdi, %rdi
	jne	.LBB12_190
# BB#187:                               #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	jmp	.LBB12_192
	.align	16, 0x90
.LBB12_190:                             # %for.body703
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	77(%rdi), %eax
	testq	%rax, %rax
	jne	.LBB12_191
# BB#188:                               # %for.cond701
                                        #   in Loop: Header=BB12_190 Depth=2
	movq	32(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.LBB12_190
# BB#189:                               #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	jmp	.LBB12_192
.LBB12_191:                             # %if.end709
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	(%rdi), %rbx
	testq	%rbx, %rbx
	movq	$1, %r9
	movq	%rcx, %r12
	movq	%rcx, %rax
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	jne	.LBB12_209
	.align	16, 0x90
.LBB12_192:                             # %land.lhs.true712
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movzbl	(%rdx), %ecx
	cmpq	$133, %rcx
	jg	.LBB12_196
# BB#193:                               # %land.lhs.true712
                                        #   in Loop: Header=BB12_81 Depth=1
	addq	$-54, %rcx
	andq	%r8, %rcx
	cmpq	$22, %rcx
	ja	.LBB12_201
# BB#194:                               # %land.lhs.true712
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB12_195
# BB#198:                               # %land.lhs.true712
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$22, %rcx
	jne	.LBB12_201
# BB#199:                               # %land.lhs.true757
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$67, %rax
	jne	.LBB12_201
# BB#200:                               # %land.lhs.true765
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	16(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$67, %rax
	je	.LBB12_195
	jmp	.LBB12_201
.LBB12_196:                             # %land.lhs.true712
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$134, %rcx
	je	.LBB12_195
# BB#197:                               # %land.lhs.true712
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$140, %rcx
	jne	.LBB12_201
.LBB12_195:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rdx, %rbx
.LBB12_209:                             # %if.end821
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rbx, %rbx
	movabsq	$0, %rcx
	je	.LBB12_211
# BB#210:                               # %if.end821
                                        #   in Loop: Header=BB12_81 Depth=1
	movabsq	$1, %rcx
.LBB12_211:                             # %if.end821
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	movq	-200(%rbp), %rsi        # 8-byte Reload
	je	.LBB12_212
# BB#213:                               # %if.end821
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	jne	.LBB12_212
# BB#214:                               # %if.then826
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, -128(%rbp)         # 8-byte Spill
	movq	%r15, %r13
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB12_228
# BB#215:                               # %land.lhs.true831
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%rbx), %r15d
	cmpq	$53, %r15
	jb	.LBB12_228
# BB#216:                               # %cond.true837
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rsi, %r14
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB12_218
# BB#217:                               # %cond.true837
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_227
.LBB12_218:                             # %cond.false846
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r15, %r12
	shrq	%cl, %r12
	xorq	%r15, %r12
	andq	$127, %r12
	movq	reg_hash(,%r12,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_219
.LBB12_222:                             # %for.body.i5275
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB12_226
# BB#221:                               # %for.cond.i5271
                                        #   in Loop: Header=BB12_222 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_222
.LBB12_219:                             # %if.then4.i5277
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, -224(%rbp)        # 8-byte Spill
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_220
# BB#223:                               # %if.else.i5282
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r12,8), %rcx
	jmp	.LBB12_224
.LBB12_201:                             # %if.else774
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	testq	%rax, %rax
	jne	.LBB12_203
# BB#202:                               #   in Loop: Header=BB12_81 Depth=1
	movq	$0, -120(%rbp)          # 8-byte Folded Spill
	xorq	%rdx, %rdx
	movq	$0, -56(%rbp)           # 8-byte Folded Spill
	jmp	.LBB12_241
.LBB12_212:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdx
	movq	%rax, %r12
	jmp	.LBB12_241
.LBB12_228:                             # %cond.false855
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	movq	%rbx, %r15
	movq	%rsi, %r14
	movq	%r8, %rbx
	callq	canon_hash
	movq	%rbx, %r8
	jmp	.LBB12_229
.LBB12_203:                             # %land.lhs.true779
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$133, %rcx
	jg	.LBB12_206
# BB#204:                               # %land.lhs.true779
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$0, -120(%rbp)          # 8-byte Folded Spill
	addq	$-54, %rcx
	andq	%r8, %rcx
	cmpq	$14, %rcx
	jbe	.LBB12_240
# BB#205:                               #   in Loop: Header=BB12_81 Depth=1
	xorq	%rdx, %rdx
	jmp	.LBB12_241
.LBB12_206:                             # %land.lhs.true779
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$134, %rcx
	jne	.LBB12_208
# BB#207:                               #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, %rax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	jmp	.LBB12_209
.LBB12_240:                             # %land.lhs.true779
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	movq	%r15, %rax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	movabsq	$0, %rdx
	jne	.LBB12_209
	jmp	.LBB12_241
.LBB12_208:                             # %land.lhs.true779
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$0, -120(%rbp)          # 8-byte Folded Spill
	cmpq	$140, %rcx
	movq	%r15, %rax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	movabsq	$0, %rdx
	jne	.LBB12_241
	jmp	.LBB12_209
.LBB12_220:                             # %if.then5.i5279
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_224:                             # %if.end6.i5291
                                        #   in Loop: Header=BB12_81 Depth=1
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r8d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	movq	-224(%rbp), %r13        # 8-byte Reload
	jne	.LBB12_226
# BB#225:                               # %if.then11.i5292
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_226:                             # %get_cse_reg_info.exit5294
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_227:                             # %cond.end851
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %r15
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_229:                             # %cond.end857
                                        #   in Loop: Header=BB12_81 Depth=1
	andq	$31, %rax
	movq	table(,%rax,8), %r12
	movq	$4, %rcx
	movq	-216(%rbp), %rdx        # 8-byte Reload
	shlq	%cl, %rdx
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	%eax, 64(%rcx,%rdx)
	testq	%r12, %r12
	movq	%r14, %rcx
	movq	%r15, %r9
	movq	%r13, %r15
	je	.LBB12_238
	.align	16, 0x90
.LBB12_230:                             # %for.body.i5302
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%r12), %eax
	cmpq	%rcx, %rax
	jne	.LBB12_237
# BB#231:                               # %land.lhs.true.i5309
                                        #   in Loop: Header=BB12_230 Depth=2
	movq	(%r12), %rsi
	movzbl	(%r9), %eax
	cmpq	%r9, %rsi
	jne	.LBB12_234
# BB#232:                               # %land.lhs.true.i5309
                                        #   in Loop: Header=BB12_230 Depth=2
	cmpq	$61, %rax
	je	.LBB12_233
.LBB12_234:                             # %lor.lhs.false.i5315
                                        #   in Loop: Header=BB12_230 Depth=2
	movq	%r15, %r13
	movq	%rcx, %r14
	movq	%r8, %r15
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_236
# BB#235:                               # %lor.lhs.false.i5315
                                        #   in Loop: Header=BB12_230 Depth=2
	movabsq	$1, %rdx
.LBB12_236:                             # %lor.lhs.false.i5315
                                        #   in Loop: Header=BB12_230 Depth=2
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	exp_equiv_p
	movq	%rbx, %r9
	movq	%r15, %r8
	testq	%r8, %rax
	movq	%r14, %rcx
	movq	%r13, %r15
	jne	.LBB12_233
.LBB12_237:                             # %for.inc.i5319
                                        #   in Loop: Header=BB12_230 Depth=2
	movq	16(%r12), %r12
	testq	%r12, %r12
	jne	.LBB12_230
.LBB12_238:                             # %if.end866.thread
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	$4, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	shlq	%cl, %rax
	xorq	%r12, %r12
	testq	%r9, %r9
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%r9, 48(%rcx,%rax)
	movq	$0, 72(%rcx,%rax)
	movabsq	$0, %rax
	movabsq	$0, %rcx
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	movabsq	$0, %rdx
	movabsq	$0, %r14
	jmp	.LBB12_239
.LBB12_233:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	-128(%rbp), %r9         # 8-byte Reload
	.align	16, 0x90
.LBB12_241:                             # %if.end866
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$4, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	shlq	%cl, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	%rdx, 48(%rcx,%rax)
	testq	%r12, %r12
	movq	%r12, 72(%rcx,%rax)
	movabsq	$0, %rax
	je	.LBB12_243
# BB#242:                               # %if.end866
                                        #   in Loop: Header=BB12_81 Depth=1
	movabsq	$1, %rax
.LBB12_243:                             # %if.end866
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdx, %rbx
	movq	%r15, %r14
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movq	%r8, %r13
	je	.LBB12_244
# BB#255:                               # %if.end866
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%r9, %r9
	je	.LBB12_244
# BB#256:                               # %land.lhs.true876
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	48(%r12), %rsi
	movq	48(%rcx), %rdi
	cmpq	%rdi, %rsi
	movq	$1, %rax
	jne	.LBB12_257
.LBB12_244:                             # %if.end889
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rcx, %rcx
	movq	%rcx, %rsi
	movabsq	$0, %rcx
	movq	%r13, %r8
	jne	.LBB12_246
# BB#245:                               # %if.end889
                                        #   in Loop: Header=BB12_81 Depth=1
	movabsq	$1, %rcx
.LBB12_246:                             # %if.end889
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rcx, %rax
	movq	%r12, %rcx
	movq	%r14, %r15
	movq	%rbx, %rdx
	jne	.LBB12_248
# BB#247:                               # %if.end889
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rsi, %rcx
.LBB12_248:                             # %if.end889
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$0, -240(%rbp)          # 8-byte Folded Spill
	cmpq	$0, -120(%rbp)          # 8-byte Folded Reload
	movq	%rdx, %r9
	movabsq	$0, %r14
	je	.LBB12_335
	jmp	.LBB12_249
.LBB12_257:                             # %if.then881
                                        #   in Loop: Header=BB12_81 Depth=1
	callq	merge_equiv_classes
	movq	$0, -240(%rbp)          # 8-byte Folded Spill
	movq	$1, %rax
	cmpq	$0, -120(%rbp)          # 8-byte Folded Reload
	movq	%rbx, %r9
	movabsq	$0, %rcx
	movq	%r13, %r8
	movq	%rbx, %rdx
	movq	%r14, %r15
	movq	%rcx, %r14
.LBB12_239:                             # %if.end866.thread
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rcx         # 8-byte Reload
	je	.LBB12_335
.LBB12_249:                             # %land.lhs.true891
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	movzbl	(%r9), %ecx
	cmpq	$58, %rcx
	je	.LBB12_259
# BB#250:                               # %lor.lhs.false896
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	je	.LBB12_251
# BB#258:                               # %land.lhs.true898
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$0, 56(%r12)
	je	.LBB12_251
.LBB12_259:                             # %if.then901
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%r12, %r12
	jne	.LBB12_260
# BB#262:                               # %land.lhs.true3.i
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$58, %rcx
	jne	.LBB12_251
# BB#263:                               # %if.then5.i5328
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, %rbx
	movq	%r8, %r13
	movq	%r9, %rdi
	movq	%r9, %r14
	callq	get_related_value
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB12_265
# BB#264:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%r13, %r8
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %r9
	movq	%rbx, %r15
	jmp	.LBB12_252
.LBB12_251:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-200(%rbp), %rcx        # 8-byte Reload
	jmp	.LBB12_252
.LBB12_260:                             # %land.lhs.true.i5323
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$0, 56(%r12)
	movq	-200(%rbp), %rcx        # 8-byte Reload
	jne	.LBB12_278
# BB#261:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	jmp	.LBB12_252
.LBB12_265:                             # %if.then7.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, -224(%rbp)        # 8-byte Spill
	movzbl	do_not_record(%rip), %eax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movzbl	hash_arg_in_memory(%rip), %ebx
	movzbl	2(%r15), %esi
	movq	%r15, %rdi
	callq	canon_hash
	andq	$31, %rax
	movq	table(,%rax,8), %r12
	movb	%bl, hash_arg_in_memory(%rip)
	movq	-120(%rbp), %rax        # 8-byte Reload
	movb	%al, do_not_record(%rip)
	testq	%r12, %r12
	jne	.LBB12_267
# BB#266:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%r13, %r8
	movq	-224(%rbp), %r15        # 8-byte Reload
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %r9
	jmp	.LBB12_252
.LBB12_267:                             #   in Loop: Header=BB12_81 Depth=1
	movzbl	2(%r15), %edx
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	movq	%r13, %r8
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %r9
.LBB12_268:                             # %for.body.i.i
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%r12), %eax
	cmpq	%rdx, %rax
	jne	.LBB12_274
# BB#269:                               # %land.lhs.true.i.i
                                        #   in Loop: Header=BB12_268 Depth=2
	movq	(%r12), %rsi
	movzbl	(%r15), %eax
	cmpq	%r15, %rsi
	jne	.LBB12_271
# BB#270:                               # %land.lhs.true.i.i
                                        #   in Loop: Header=BB12_268 Depth=2
	cmpq	$61, %rax
	je	.LBB12_276
.LBB12_271:                             # %lor.lhs.false.i.i
                                        #   in Loop: Header=BB12_268 Depth=2
	movq	%r9, %r13
	movq	%rcx, %r14
	movq	%r8, %rbx
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_273
# BB#272:                               # %lor.lhs.false.i.i
                                        #   in Loop: Header=BB12_268 Depth=2
	movabsq	$1, %rdx
.LBB12_273:                             # %lor.lhs.false.i.i
                                        #   in Loop: Header=BB12_268 Depth=2
	movq	%r15, %rdi
	callq	exp_equiv_p
	movq	%rbx, %r8
	testq	%r8, %rax
	movq	%r14, %rcx
	movq	%r13, %r9
	movq	-120(%rbp), %rdx        # 8-byte Reload
	jne	.LBB12_276
.LBB12_274:                             # %for.inc.i.i
                                        #   in Loop: Header=BB12_268 Depth=2
	movq	16(%r12), %r12
	testq	%r12, %r12
	jne	.LBB12_268
# BB#275:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-224(%rbp), %r15        # 8-byte Reload
	jmp	.LBB12_252
.LBB12_276:                             # %if.end16.i
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%r12, %r12
	movq	-224(%rbp), %r15        # 8-byte Reload
	jne	.LBB12_278
# BB#277:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	jmp	.LBB12_252
.LBB12_278:                             # %while.body.preheader.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, -224(%rbp)        # 8-byte Spill
	movq	%rcx, %r14
	movq	%r8, %rbx
	movq	%r12, %r15
.LBB12_279:                             # %while.body.i
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_282 Depth 3
	movq	(%r15), %rsi
	movq	%r9, %rdi
	movq	%r9, %r13
	callq	rtx_equal_p
	movq	%rbx, %r8
	testq	%r8, %rax
	jne	.LBB12_286
# BB#280:                               # %if.else22.i
                                        #   in Loop: Header=BB12_279 Depth=2
	movq	48(%r15), %rbx
	jmp	.LBB12_282
	.align	16, 0x90
.LBB12_281:                             # %for.cond.i5333
                                        #   in Loop: Header=BB12_282 Depth=3
	movq	32(%rbx), %rbx
.LBB12_282:                             # %for.cond.i5333
                                        #   Parent Loop BB12_81 Depth=1
                                        #     Parent Loop BB12_279 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rbx, %rbx
	je	.LBB12_286
# BB#283:                               # %for.body.i5334
                                        #   in Loop: Header=BB12_282 Depth=3
	movq	(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB12_281
	jmp	.LBB12_284
.LBB12_286:                             # %if.end33.i
                                        #   in Loop: Header=BB12_279 Depth=2
	movq	56(%r15), %r15
	cmpq	%r12, %r15
	je	.LBB12_287
# BB#289:                               # %if.end33.i
                                        #   in Loop: Header=BB12_279 Depth=2
	movq	%r8, %rbx
	testq	%r15, %r15
	movq	%r13, %r9
	jne	.LBB12_279
# BB#290:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%rbx, %r8
	movq	-224(%rbp), %r15        # 8-byte Reload
	movq	%r14, %rcx
	jmp	.LBB12_252
.LBB12_284:                             # %use_related_value.exit
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r8, %r12
	movq	%r13, %rdi
	callq	get_integer_term
	movq	(%r15), %rdi
	movq	%rax, %r15
	callq	get_integer_term
	movq	(%rbx), %rdi
	subq	%rax, %r15
	movq	%r15, %rsi
	callq	plus_constant_wide
	testq	%rax, %rax
	jne	.LBB12_291
# BB#285:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%r12, %r8
.LBB12_288:                             # %land.lhs.true963
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-224(%rbp), %r15        # 8-byte Reload
	movq	%r14, %rcx
	movq	%r13, %r9
	jmp	.LBB12_252
.LBB12_291:                             # %if.then904
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	movq	%r14, %rsi
	movq	%rax, %r14
	jne	.LBB12_305
# BB#292:                               # %land.lhs.true909
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%r14), %r15d
	cmpq	$53, %r15
	jb	.LBB12_305
# BB#293:                               # %cond.true915
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB12_295
# BB#294:                               # %cond.true915
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_304
.LBB12_295:                             # %cond.false924
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_296
.LBB12_299:                             # %for.body.i5351
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB12_303
# BB#298:                               # %for.cond.i5347
                                        #   in Loop: Header=BB12_299 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_299
.LBB12_296:                             # %if.then4.i5353
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_297
# BB#300:                               # %if.else.i5358
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_301
.LBB12_305:                             # %cond.false933
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r14, %rdi
	callq	canon_hash
	jmp	.LBB12_306
.LBB12_287:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
	jmp	.LBB12_288
.LBB12_297:                             # %if.then5.i5355
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_301:                             # %if.end6.i5367
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_303
# BB#302:                               # %if.then11.i5368
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_303:                             # %get_cse_reg_info.exit5370
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_304:                             # %cond.end929
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_306:                             # %cond.end935
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, %r9
	andq	$31, %rax
	movq	table(,%rax,8), %rbx
	xorq	%rax, %rax
	testq	%rbx, %rbx
	movabsq	$0, %rdi
	movq	-200(%rbp), %rcx        # 8-byte Reload
	je	.LBB12_314
.LBB12_307:                             # %for.body.i5378
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%rbx), %eax
	cmpq	%rcx, %rax
	jne	.LBB12_313
# BB#308:                               # %land.lhs.true.i5385
                                        #   in Loop: Header=BB12_307 Depth=2
	movq	(%rbx), %rsi
	movzbl	(%r14), %eax
	cmpq	%r14, %rsi
	jne	.LBB12_310
# BB#309:                               # %land.lhs.true.i5385
                                        #   in Loop: Header=BB12_307 Depth=2
	cmpq	$61, %rax
	je	.LBB12_320
.LBB12_310:                             # %lor.lhs.false.i5391
                                        #   in Loop: Header=BB12_307 Depth=2
	movq	%r9, %r15
	movq	%r14, %rdi
	movq	%rcx, %r14
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_312
# BB#311:                               # %lor.lhs.false.i5391
                                        #   in Loop: Header=BB12_307 Depth=2
	movabsq	$1, %rdx
.LBB12_312:                             # %lor.lhs.false.i5391
                                        #   in Loop: Header=BB12_307 Depth=2
	movq	%rdi, %r13
                                        # kill: RDI<def> R13<kill>
	callq	exp_equiv_p
	testq	%r12, %rax
	movq	%r14, %rcx
	movq	%r13, %r14
	movq	%r15, %r9
	jne	.LBB12_320
.LBB12_313:                             # %for.inc.i5395
                                        #   in Loop: Header=BB12_307 Depth=2
	movq	16(%rbx), %rbx
	xorq	%rax, %rax
	testq	%rbx, %rbx
	movabsq	$0, %rdi
	jne	.LBB12_307
	jmp	.LBB12_314
.LBB12_320:                             # %lookup.exit5397
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rbx, %rbx
	movabsq	$0, %rax
	movq	-224(%rbp), %r15        # 8-byte Reload
	je	.LBB12_322
# BB#321:                               # %lookup.exit5397
                                        #   in Loop: Header=BB12_81 Depth=1
	movabsq	$1, %rax
.LBB12_322:                             # %lookup.exit5397
                                        #   in Loop: Header=BB12_81 Depth=1
	je	.LBB12_323
# BB#324:                               # %lookup.exit5397
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %r13         # 8-byte Reload
	testq	%r13, %r13
	je	.LBB12_325
# BB#326:                               # %if.then942
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	48(%r13), %rdi
	movq	48(%rbx), %rsi
	cmpq	%rsi, %rdi
	je	.LBB12_327
# BB#328:                               # %if.then947
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, %r14
	movq	%r9, %rbx
	callq	merge_equiv_classes
	movq	%rbx, %r9
	movq	%r14, %rcx
.LBB12_327:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, %rdi
	movq	%r12, %r8
	jmp	.LBB12_252
.LBB12_323:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	jmp	.LBB12_314
.LBB12_325:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
.LBB12_314:                             # %if.end958
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, %rdx
	cmpq	$0, -72(%rbp)           # 8-byte Folded Reload
	movabsq	$0, %rcx
	jne	.LBB12_316
# BB#315:                               # %if.end958
                                        #   in Loop: Header=BB12_81 Depth=1
	movabsq	$1, %rcx
.LBB12_316:                             # %if.end958
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rcx, %rax
	movq	%r12, %r8
	movq	-224(%rbp), %r15        # 8-byte Reload
	jne	.LBB12_318
# BB#317:                               # %if.end958
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rdi         # 8-byte Reload
.LBB12_318:                             # %if.end958
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$1, -240(%rbp)          # 8-byte Folded Spill
	testq	%r14, %r14
	movq	%rdx, %rcx
	jne	.LBB12_319
.LBB12_252:                             # %land.lhs.true963
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	(%r9), %eax
	xorq	%r14, %r14
	cmpq	$54, %rax
	movq	$1, -240(%rbp)          # 8-byte Folded Spill
	jne	.LBB12_253
# BB#329:                               # %land.lhs.true968
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	mode_class(,%rcx,4), %eax
	cmpq	$1, %rax
	jne	.LBB12_253
# BB#330:                               # %land.lhs.true973
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	target_flags(%rip), %eax
	movzbl	mode_bitsize(%rcx,%rcx), %edx
	movq	%rcx, %rbx
	movq	$20, %rcx
	shrq	%cl, %rax
	andq	$32, %rax
	addq	$32, %rax
	movq	%rax, %rcx
	movabsq	$4294967264, %rsi       # imm = 0xFFFFFFE0
	andq	%rsi, %rcx
	cmpq	%rcx, %rdx
	jae	.LBB12_331
# BB#332:                               # %for.cond986.preheader
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%r15, -224(%rbp)        # 8-byte Spill
	movzbl	mode_wider_mode(%rbx), %r13d
	movq	%rbx, -200(%rbp)        # 8-byte Spill
	movzbl	mode_bitsize(%r13,%r13), %ecx
	andq	%r8, %rax
	cmpq	%rax, %rcx
	ja	.LBB12_333
	.align	16, 0x90
.LBB12_338:                             # %for.body997
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_346 Depth 3
                                        #       Child Loop BB12_354 Depth 3
                                        #       Child Loop BB12_364 Depth 3
	movzbl	(%r9), %eax
	movq	%r13, %r12
	andq	$255, %r12
	cmpq	$61, %rax
	jne	.LBB12_352
# BB#339:                               # %land.lhs.true1002
                                        #   in Loop: Header=BB12_338 Depth=2
	movl	8(%r9), %esi
	cmpq	$53, %rsi
	jb	.LBB12_352
# BB#340:                               # %cond.true1008
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	%r9, %r15
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rsi
	jne	.LBB12_342
# BB#341:                               # %cond.true1008
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_351
.LBB12_342:                             # %cond.false1017
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	$7, %rcx
	movq	%rsi, %rbx
	shrq	%cl, %rbx
	xorq	%rsi, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_343
	.align	16, 0x90
.LBB12_346:                             # %for.body.i5412
                                        #   Parent Loop BB12_81 Depth=1
                                        #     Parent Loop BB12_338 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	16(%rax), %edx
	cmpq	%rsi, %rdx
	je	.LBB12_350
# BB#345:                               # %for.cond.i5408
                                        #   in Loop: Header=BB12_346 Depth=3
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_346
.LBB12_343:                             # %if.then4.i5414
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	%rsi, %r14
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_344
# BB#347:                               # %if.else.i5419
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	$32, %rdi
	callq	xmalloc
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_348
	.align	16, 0x90
.LBB12_352:                             # %cond.false1026
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	%r9, %rdi
	movq	%r9, %r15
	movq	%r12, %rsi
	movq	%r8, %rbx
	callq	canon_hash
	movq	%rbx, %r8
	jmp	.LBB12_353
.LBB12_344:                             # %if.then5.i5416
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_348:                             # %if.end6.i5428
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	%r14, %rsi
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r8d, 28(%rax)
	movl	%esi, 20(%rax)
	movl	%esi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	movabsq	$0, %r14
	jne	.LBB12_350
# BB#349:                               # %if.then11.i5429
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_350:                             # %get_cse_reg_info.exit5431
                                        #   in Loop: Header=BB12_338 Depth=2
	movl	%esi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_351:                             # %cond.end1022
                                        #   in Loop: Header=BB12_338 Depth=2
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_353:                             # %cond.end1028
                                        #   in Loop: Header=BB12_338 Depth=2
	andq	$31, %rax
	movq	table(,%rax,8), %rbx
	testq	%rbx, %rbx
	movq	%r15, %r9
	je	.LBB12_362
	.align	16, 0x90
.LBB12_354:                             # %for.body.i5439
                                        #   Parent Loop BB12_81 Depth=1
                                        #     Parent Loop BB12_338 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	72(%rbx), %eax
	cmpq	%r12, %rax
	jne	.LBB12_360
# BB#355:                               # %land.lhs.true.i5446
                                        #   in Loop: Header=BB12_354 Depth=3
	movq	(%rbx), %rsi
	movzbl	(%r9), %eax
	cmpq	%r9, %rsi
	jne	.LBB12_357
# BB#356:                               # %land.lhs.true.i5446
                                        #   in Loop: Header=BB12_354 Depth=3
	cmpq	$61, %rax
	je	.LBB12_361
.LBB12_357:                             # %lor.lhs.false.i5452
                                        #   in Loop: Header=BB12_354 Depth=3
	movq	%r8, %r14
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_359
# BB#358:                               # %lor.lhs.false.i5452
                                        #   in Loop: Header=BB12_354 Depth=3
	movabsq	$1, %rdx
.LBB12_359:                             # %lor.lhs.false.i5452
                                        #   in Loop: Header=BB12_354 Depth=3
	movq	%r9, %rdi
	movq	%r9, %r15
	callq	exp_equiv_p
	movq	%r15, %r9
	movq	%r14, %r8
	testq	%r8, %rax
	movabsq	$0, %r14
	jne	.LBB12_361
.LBB12_360:                             # %for.inc.i5456
                                        #   in Loop: Header=BB12_354 Depth=3
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB12_354
	jmp	.LBB12_362
.LBB12_361:                             # %lookup.exit5458
                                        #   in Loop: Header=BB12_338 Depth=2
	testq	%rbx, %rbx
	je	.LBB12_362
# BB#363:                               # %if.end1035
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	48(%rbx), %rax
	jmp	.LBB12_364
.LBB12_1325:                            # %for.cond1037
                                        #   in Loop: Header=BB12_364 Depth=3
	movq	32(%rax), %rax
.LBB12_364:                             # %if.end1035
                                        #   Parent Loop BB12_81 Depth=1
                                        #     Parent Loop BB12_338 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rax, %rax
	je	.LBB12_362
# BB#365:                               # %for.body1039
                                        #   in Loop: Header=BB12_364 Depth=3
	movq	(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$61, %rcx
	jne	.LBB12_1325
# BB#366:                               # %if.then1045
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	%r9, %r15
	movq	%r8, %r12
	movq	-200(%rbp), %rdi        # 8-byte Reload
	movq	%rbx, %rsi
	callq	gen_lowpart_common
	testq	%rax, %rax
	jne	.LBB12_367
# BB#371:                               # %if.else.i5464
                                        #   in Loop: Header=BB12_338 Depth=2
	movzbl	(%rbx), %ecx
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jne	.LBB12_367
# BB#372:                               # %if.then1.i
                                        #   in Loop: Header=BB12_338 Depth=2
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%rbx, %rdi
	movq	-200(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, %rsi
	callq	adjust_address_1
	movq	%rax, %r14
	movq	8(%r14), %rsi
	movq	%rbx, %rdi
	callq	memory_address_p
	andq	%r12, %rax
	je	.LBB12_374
# BB#373:                               # %if.then1.i
                                        #   in Loop: Header=BB12_338 Depth=2
	movq	%r14, %rax
.LBB12_374:                             # %if.then1.i
                                        #   in Loop: Header=BB12_338 Depth=2
	xorq	%r14, %r14
.LBB12_367:                             # %for.cond986.outer.backedge
                                        #   in Loop: Header=BB12_338 Depth=2
	movzbl	mode_wider_mode(%r13), %r13d
	movl	target_flags(%rip), %edx
	movzbl	mode_bitsize(%r13,%r13), %esi
	movq	$20, %rcx
	shrq	%cl, %rdx
	andq	$32, %rdx
	addq	$32, %rdx
	movabsq	$4294967264, %rcx       # imm = 0xFFFFFFE0
	andq	%rcx, %rdx
	cmpq	%rdx, %rsi
	ja	.LBB12_368
# BB#369:                               # %for.cond986.outer.backedge
                                        #   in Loop: Header=BB12_338 Depth=2
	testq	%rax, %rax
	movq	%r12, %r8
	movq	%r15, %r9
	je	.LBB12_338
	jmp	.LBB12_370
	.align	16, 0x90
.LBB12_362:                             # %for.cond986.backedge
                                        #   in Loop: Header=BB12_338 Depth=2
	movzbl	mode_wider_mode(%r13), %r13d
	movl	target_flags(%rip), %eax
	movzbl	mode_bitsize(%r13,%r13), %edx
	movq	$20, %rcx
	shrq	%cl, %rax
	andq	$32, %rax
	addq	$32, %rax
	movabsq	$4294967264, %rcx       # imm = 0xFFFFFFE0
	andq	%rcx, %rax
	cmpq	%rax, %rdx
	jbe	.LBB12_338
.LBB12_333:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %rdx
	movq	-72(%rbp), %rcx         # 8-byte Reload
.LBB12_334:                             # %if.end1057
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-224(%rbp), %r15        # 8-byte Reload
	jmp	.LBB12_335
.LBB12_253:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
.LBB12_254:                             # %if.end1057
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %rdx
	movq	%rdi, %rcx
.LBB12_335:                             # %if.end1057
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdx, -248(%rbp)        # 8-byte Spill
	movl	flag_expensive_optimizations(%rip), %eax
	testq	%rax, %rax
	je	.LBB12_336
# BB#375:                               # %if.end1057
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%r14, %r14
	movq	-48(%rbp), %r12         # 8-byte Reload
	movq	-104(%rbp), %rdx        # 8-byte Reload
	jne	.LBB12_376
# BB#377:                               # %land.lhs.true1061
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	movq	%r15, -224(%rbp)        # 8-byte Spill
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movzbl	(%rcx), %eax
	xorq	%r14, %r14
	cmpq	$83, %rax
	jne	.LBB12_425
# BB#378:                               # %land.lhs.true1066
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	16(%rcx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_425
# BB#379:                               # %land.lhs.true1074
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	target_flags(%rip), %edx
	movq	-200(%rbp), %r14        # 8-byte Reload
	movzbl	mode_size(%r14), %esi
	movq	$23, %rcx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	movabsq	$4294967292, %rbx       # imm = 0xFFFFFFFC
	andq	%rbx, %rdx
	cmpq	%rdx, %rsi
	jae	.LBB12_423
# BB#380:                               # %if.then1083
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r8, %r12
	movq	$83, %rdi
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movzbl	mode_wider_mode(%r14), %esi
	movl	target_flags(%rip), %edx
	movq	%rax, %r14
	movzbl	mode_size(%rsi), %eax
	movq	$23, %rcx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	andq	%rbx, %rdx
	cmpq	%rdx, %rax
	ja	.LBB12_422
	.align	16, 0x90
.LBB12_381:                             # %for.body1100
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_393 Depth 3
                                        #       Child Loop BB12_401 Depth 3
                                        #       Child Loop BB12_412 Depth 3
	movq	%rsi, -120(%rbp)        # 8-byte Spill
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rbx
	movq	%rsi, %r13
	andq	$255, %r13
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	gen_lowpart_common
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB12_385
# BB#382:                               # %if.else.i5472
                                        #   in Loop: Header=BB12_381 Depth=2
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB12_421
# BB#383:                               # %if.then1.i5479
                                        #   in Loop: Header=BB12_381 Depth=2
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	adjust_address_1
	movq	%rax, %r15
	movq	8(%r15), %rsi
	movq	%r13, %rdi
	callq	memory_address_p
	testq	%r12, %rax
	je	.LBB12_421
# BB#384:                               # %if.then1.i5479
                                        #   in Loop: Header=BB12_381 Depth=2
	testq	%r15, %r15
	je	.LBB12_421
	.align	16, 0x90
.LBB12_385:                             # %if.then1106
                                        #   in Loop: Header=BB12_381 Depth=2
	movzbl	(%r14), %eax
	cmpq	$61, %rax
	movb	%r13b, 2(%r14)
	movq	%r15, 8(%r14)
	jne	.LBB12_399
# BB#386:                               # %if.then1106
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	%r15, %rdx
	andq	%r12, %rdx
	cmpq	$53, %rdx
	jb	.LBB12_399
# BB#387:                               # %cond.true1122
                                        #   in Loop: Header=BB12_381 Depth=2
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rdx
	jne	.LBB12_389
# BB#388:                               # %cond.true1122
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_398
.LBB12_389:                             # %cond.false1131
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_390
	.align	16, 0x90
.LBB12_393:                             # %for.body.i5496
                                        #   Parent Loop BB12_81 Depth=1
                                        #     Parent Loop BB12_381 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB12_397
# BB#392:                               # %for.cond.i5492
                                        #   in Loop: Header=BB12_393 Depth=3
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_393
.LBB12_390:                             # %if.then4.i5498
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_391
# BB#394:                               # %if.else.i5503
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_395
.LBB12_399:                             # %cond.false1140
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	%r14, %rdi
	movq	%r13, %rsi
	callq	canon_hash
	jmp	.LBB12_400
.LBB12_391:                             # %if.then5.i5500
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_395:                             # %if.end6.i5512
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_397
# BB#396:                               # %if.then11.i5513
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_397:                             # %get_cse_reg_info.exit5515
                                        #   in Loop: Header=BB12_381 Depth=2
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_398:                             # %cond.end1136
                                        #   in Loop: Header=BB12_381 Depth=2
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_400:                             # %cond.end1142
                                        #   in Loop: Header=BB12_381 Depth=2
	andq	$31, %rax
	movq	table(,%rax,8), %rbx
	jmp	.LBB12_401
	.align	16, 0x90
.LBB12_408:                             # %for.inc.i5540
                                        #   in Loop: Header=BB12_401 Depth=3
	movq	16(%rbx), %rbx
.LBB12_401:                             # %cond.end1142
                                        #   Parent Loop BB12_81 Depth=1
                                        #     Parent Loop BB12_381 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rbx, %rbx
	je	.LBB12_421
# BB#402:                               # %for.body.i5523
                                        #   in Loop: Header=BB12_401 Depth=3
	movl	72(%rbx), %eax
	cmpq	%r13, %rax
	jne	.LBB12_408
# BB#403:                               # %land.lhs.true.i5530
                                        #   in Loop: Header=BB12_401 Depth=3
	movq	(%rbx), %rsi
	movzbl	(%r14), %eax
	cmpq	%r14, %rsi
	jne	.LBB12_405
# BB#404:                               # %land.lhs.true.i5530
                                        #   in Loop: Header=BB12_401 Depth=3
	cmpq	$61, %rax
	je	.LBB12_409
.LBB12_405:                             # %lor.lhs.false.i5536
                                        #   in Loop: Header=BB12_401 Depth=3
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_407
# BB#406:                               # %lor.lhs.false.i5536
                                        #   in Loop: Header=BB12_401 Depth=3
	movabsq	$1, %rdx
.LBB12_407:                             # %lor.lhs.false.i5536
                                        #   in Loop: Header=BB12_401 Depth=3
	movq	%r14, %rdi
	callq	exp_equiv_p
	testq	%r12, %rax
	je	.LBB12_408
.LBB12_409:                             # %lookup.exit5542
                                        #   in Loop: Header=BB12_381 Depth=2
	testq	%rbx, %rbx
	je	.LBB12_421
# BB#410:                               # %if.end1149
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	48(%rbx), %rax
	jmp	.LBB12_412
.LBB12_411:                             # %for.cond1151
                                        #   in Loop: Header=BB12_412 Depth=3
	movq	32(%rax), %rax
.LBB12_412:                             # %for.cond1151
                                        #   Parent Loop BB12_81 Depth=1
                                        #     Parent Loop BB12_381 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rax, %rax
	je	.LBB12_421
# BB#413:                               # %for.body1153
                                        #   in Loop: Header=BB12_412 Depth=3
	movq	(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$61, %rcx
	jne	.LBB12_411
# BB#414:                               # %if.then1159
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	-200(%rbp), %rdi        # 8-byte Reload
	movq	%rbx, %rsi
	callq	gen_lowpart_common
	testq	%rax, %rax
	jne	.LBB12_415
# BB#417:                               # %if.else.i5548
                                        #   in Loop: Header=BB12_381 Depth=2
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB12_421
# BB#418:                               # %if.then1.i5555
                                        #   in Loop: Header=BB12_381 Depth=2
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%rbx, %rdi
	movq	-200(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, %rsi
	callq	adjust_address_1
	movq	%rax, %r15
	movq	8(%r15), %rsi
	movq	%rbx, %rdi
	callq	memory_address_p
	testq	%r12, %rax
	je	.LBB12_421
# BB#419:                               # %if.then1.i5555
                                        #   in Loop: Header=BB12_381 Depth=2
	testq	%r15, %r15
	jne	.LBB12_420
	.align	16, 0x90
.LBB12_421:                             # %for.cond1091.backedge
                                        #   in Loop: Header=BB12_381 Depth=2
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movzbl	mode_wider_mode(%rsi), %esi
	movl	target_flags(%rip), %eax
	movzbl	mode_size(%rsi), %edx
	movq	$23, %rcx
	shrq	%cl, %rax
	andq	$4, %rax
	addq	$4, %rax
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rcx, %rax
	cmpq	%rax, %rdx
	jbe	.LBB12_381
.LBB12_422:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-48(%rbp), %r12         # 8-byte Reload
.LBB12_423:                             # %if.end1175
                                        #   in Loop: Header=BB12_81 Depth=1
	xorq	%r14, %r14
.LBB12_424:                             # %if.end1175
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-104(%rbp), %rdx        # 8-byte Reload
.LBB12_425:                             # %if.end1175
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rcx         # 8-byte Reload
	jmp	.LBB12_426
.LBB12_336:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, -224(%rbp)        # 8-byte Spill
.LBB12_337:                             # %if.end1175
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-48(%rbp), %r12         # 8-byte Reload
	movq	-104(%rbp), %rdx        # 8-byte Reload
	jmp	.LBB12_426
.LBB12_376:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, -224(%rbp)        # 8-byte Spill
.LBB12_426:                             # %if.end1175
                                        #   in Loop: Header=BB12_81 Depth=1
	xorq	%r13, %r13
	cmpq	%rdx, -64(%rbp)         # 8-byte Folded Reload
	movabsq	$0, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	je	.LBB12_428
# BB#427:                               # %if.end1175
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdx, -72(%rbp)         # 8-byte Spill
.LBB12_428:                             # %if.end1175
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rcx, %rcx
	je	.LBB12_464
# BB#429:                               # %if.end1183
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	48(%rcx), %rbx
	movq	%rbx, -104(%rbp)        # 8-byte Spill
	testq	%rbx, %rbx
	je	.LBB12_464
	jmp	.LBB12_430
.LBB12_436:                             # %land.lhs.true1224
                                        #   in Loop: Header=BB12_430 Depth=2
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB12_462
# BB#437:                               # %land.lhs.true1229
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	$16, %rcx
	movq	%rdx, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	cmpq	%rsi, %rdi
	jne	.LBB12_462
# BB#438:                               # %land.lhs.true1239
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rcx
	movzbl	2(%rcx), %ecx
	movzbl	mode_size(%rcx), %ecx
	cmpq	%rax, %rcx
	jb	.LBB12_441
	jmp	.LBB12_462
	.align	16, 0x90
.LBB12_430:                             # %for.body1186
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rdi
	movzbl	(%rdi), %r15d
	cmpq	$61, %r15
	je	.LBB12_439
# BB#431:                               # %land.lhs.true1192
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	$1, %rdx
	movq	%rdi, %rsi
	callq	exp_equiv_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB12_462
# BB#432:                               # %if.end1198
                                        #   in Loop: Header=BB12_430 Depth=2
	cmpq	$63, %r15
	jne	.LBB12_439
# BB#433:                               # %land.lhs.true1201
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	(%rbx), %rax
	movq	8(%rax), %rcx
	movzbl	2(%rax), %esi
	movzbl	2(%rcx), %eax
	movzbl	mode_size(%rsi), %ecx
	movzbl	mode_size(%rax), %eax
	cmpq	%rax, %rcx
	jbe	.LBB12_439
# BB#434:                               # %land.lhs.true1221
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	-64(%rbp), %rcx         # 8-byte Reload
	testq	%rcx, %rcx
	jne	.LBB12_436
# BB#435:                               #   in Loop: Header=BB12_430 Depth=2
	movq	$0, -64(%rbp)           # 8-byte Folded Spill
	jmp	.LBB12_462
	.align	16, 0x90
.LBB12_439:                             # %if.end1262
                                        #   in Loop: Header=BB12_430 Depth=2
	cmpq	$0, -64(%rbp)           # 8-byte Folded Reload
	je	.LBB12_444
# BB#440:                               # %if.end1262.land.lhs.true1264_crit_edge
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	movl	(%rax), %edx
.LBB12_441:                             # %land.lhs.true1264
                                        #   in Loop: Header=BB12_430 Depth=2
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	%r15, %rdx
	jne	.LBB12_444
# BB#442:                               # %land.lhs.true1269
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	(%rbx), %rsi
	movq	-64(%rbp), %rdi         # 8-byte Reload
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB12_443
	.align	16, 0x90
.LBB12_444:                             # %if.else1274
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	-72(%rbp), %rdx         # 8-byte Reload
	testq	%rdx, %rdx
	je	.LBB12_448
# BB#445:                               # %land.lhs.true1276
                                        #   in Loop: Header=BB12_430 Depth=2
	movzbl	(%rdx), %eax
	cmpq	%r15, %rax
	jne	.LBB12_448
# BB#446:                               # %land.lhs.true1281
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	(%rbx), %rsi
	movq	%rdx, %rdi
	movq	%rdx, %r13
	callq	rtx_equal_p
	movq	%r13, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB12_447
	.align	16, 0x90
.LBB12_448:                             # %if.else1286
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	-56(%rbp), %rdi         # 8-byte Reload
	testq	%rdi, %rdi
	je	.LBB12_452
# BB#449:                               # %land.lhs.true1288
                                        #   in Loop: Header=BB12_430 Depth=2
	movzbl	(%rdi), %eax
	cmpq	%r15, %rax
	jne	.LBB12_452
# BB#450:                               # %land.lhs.true1293
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	(%rbx), %rsi
	movq	%rdx, %r13
	movq	%r14, %r12
	movq	%rdi, %r14
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%r14, %rdi
	movq	%r12, %r14
	movq	%r13, %rdx
	movq	-48(%rbp), %r12         # 8-byte Reload
	jne	.LBB12_451
	.align	16, 0x90
.LBB12_452:                             # %if.else1298
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	testq	%r14, %r14
	jne	.LBB12_454
# BB#453:                               #   in Loop: Header=BB12_430 Depth=2
	xorq	%r14, %r14
	jmp	.LBB12_458
	.align	16, 0x90
.LBB12_454:                             # %land.lhs.true1300
                                        #   in Loop: Header=BB12_430 Depth=2
	movzbl	(%r14), %eax
	cmpq	%r15, %rax
	jne	.LBB12_458
# BB#455:                               # %land.lhs.true1305
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	%rdx, %r13
	movq	(%rbx), %rsi
	movq	%r14, %rdi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB12_457
# BB#456:                               # %land.lhs.true1305
                                        #   in Loop: Header=BB12_430 Depth=2
	xorq	%r14, %r14
.LBB12_457:                             # %land.lhs.true1305
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	%r13, %rdx
	jmp	.LBB12_458
.LBB12_443:                             #   in Loop: Header=BB12_430 Depth=2
	movq	$0, -64(%rbp)           # 8-byte Folded Spill
	movq	-72(%rbp), %rdx         # 8-byte Reload
	jmp	.LBB12_458
.LBB12_447:                             #   in Loop: Header=BB12_430 Depth=2
	xorq	%rdx, %rdx
	jmp	.LBB12_458
.LBB12_451:                             #   in Loop: Header=BB12_430 Depth=2
	movq	$0, -56(%rbp)           # 8-byte Folded Spill
	.align	16, 0x90
.LBB12_458:                             # %if.end1313
                                        #   in Loop: Header=BB12_430 Depth=2
	movzbl	(%r12), %eax
	cmpq	%r15, %rax
	jne	.LBB12_459
# BB#460:                               # %land.lhs.true1318
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	(%rbx), %rdi
	movq	%r12, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB12_462
# BB#461:                               # %land.lhs.true1318
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	%r12, %r14
	jmp	.LBB12_462
	.align	16, 0x90
.LBB12_459:                             #   in Loop: Header=BB12_430 Depth=2
	movq	%rdx, -72(%rbp)         # 8-byte Spill
.LBB12_462:                             # %for.inc1324
                                        #   in Loop: Header=BB12_430 Depth=2
	movq	32(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB12_430
# BB#463:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-104(%rbp), %r13        # 8-byte Reload
.LBB12_464:                             # %for.end1326
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$2147483647, -144(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	movq	-64(%rbp), %rbx         # 8-byte Reload
	testq	%rbx, %rbx
	movq	$2147483647, -176(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	movq	$2147483647, -120(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	je	.LBB12_475
# BB#465:                               # %if.then1328
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	jne	.LBB12_475
# BB#466:                               # %if.else1332
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	$0, -120(%rbp)          # 8-byte Folded Spill
	cmpq	$61, %rcx
	je	.LBB12_474
# BB#467:                               # %if.else1332
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$63, %rcx
	jne	.LBB12_473
# BB#468:                               # %land.lhs.true.i5563
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB12_473
# BB#469:                               # %land.lhs.true4.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_473
# BB#470:                               # %land.lhs.true9.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_473
# BB#471:                               # %land.lhs.true19.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB12_473
# BB#472:                               # %land.lhs.true36.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB12_474
.LBB12_473:                             # %cond.false.i
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$47, %rsi
	movq	%rbx, %rdi
	callq	rtx_cost
	addq	%rax, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB12_474:                             # %cond.end1340
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	callq	approx_reg_cost
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB12_475:                             # %if.end1344
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r14, -128(%rbp)        # 8-byte Spill
	movq	%rbx, %r14
	movq	-56(%rbp), %rdi         # 8-byte Reload
	testq	%rdi, %rdi
	movq	$2147483647, -104(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	je	.LBB12_486
# BB#476:                               # %if.then1346
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %rsi
	movq	%rdi, %rbx
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rbx, %rdi
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	jne	.LBB12_486
# BB#477:                               # %if.else1350
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	(%rdi), %eax
	movq	%rdi, %rbx
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	$0, -104(%rbp)          # 8-byte Folded Spill
	cmpq	$61, %rcx
	je	.LBB12_485
# BB#478:                               # %if.else1350
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$63, %rcx
	jne	.LBB12_484
# BB#479:                               # %land.lhs.true.i5577
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB12_484
# BB#480:                               # %land.lhs.true4.i5583
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_484
# BB#481:                               # %land.lhs.true9.i5589
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_484
# BB#482:                               # %land.lhs.true19.i5593
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB12_484
# BB#483:                               # %land.lhs.true36.i5596
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB12_485
.LBB12_484:                             # %cond.false.i5599
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$47, %rsi
	movq	%rbx, %rdi
	callq	rtx_cost
	addq	%rax, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB12_485:                             # %cond.end1358
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	callq	approx_reg_cost
	movq	%rax, -144(%rbp)        # 8-byte Spill
	movq	%rbx, %rdi
.LBB12_486:                             # %if.end1362
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%r12, -48(%rbp)         # 8-byte Spill
	movq	$2147483647, -168(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	movq	-72(%rbp), %rax         # 8-byte Reload
	testq	%rax, %rax
	movq	%rax, %rbx
	movq	$2147483647, %r12       # imm = 0x7FFFFFFF
	movq	$2147483647, %r15       # imm = 0x7FFFFFFF
	je	.LBB12_497
# BB#487:                               # %if.then1364
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	movq	-48(%rbp), %rsi         # 8-byte Reload
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rcx, %r12
	movq	%rcx, %r15
	jne	.LBB12_497
# BB#488:                               # %if.else1368
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	xorq	%r15, %r15
	cmpq	$61, %rcx
	je	.LBB12_496
# BB#489:                               # %if.else1368
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$63, %rcx
	jne	.LBB12_495
# BB#490:                               # %land.lhs.true.i5610
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB12_495
# BB#491:                               # %land.lhs.true4.i5616
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_495
# BB#492:                               # %land.lhs.true9.i5622
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_495
# BB#493:                               # %land.lhs.true19.i5626
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB12_495
# BB#494:                               # %land.lhs.true36.i5629
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB12_496
.LBB12_495:                             # %cond.false.i5632
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$47, %rsi
	movq	%rbx, %rdi
	callq	rtx_cost
	movq	%rax, %r15
	addq	%r15, %r15
.LBB12_496:                             # %cond.end1376
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	callq	approx_reg_cost
	movq	%rax, %r12
.LBB12_497:                             # %if.end1380
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, -72(%rbp)         # 8-byte Spill
	movq	%rbx, %r15
	movq	-128(%rbp), %rbx        # 8-byte Reload
	testq	%rbx, %rbx
	movq	$2147483647, -64(%rbp)  # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	je	.LBB12_508
# BB#498:                               # %if.then1382
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	movq	-48(%rbp), %rsi         # 8-byte Reload
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	jne	.LBB12_508
# BB#499:                               # %if.else1386
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	$0, -64(%rbp)           # 8-byte Folded Spill
	cmpq	$61, %rcx
	je	.LBB12_507
# BB#500:                               # %if.else1386
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$63, %rcx
	jne	.LBB12_506
# BB#501:                               # %land.lhs.true.i5643
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB12_506
# BB#502:                               # %land.lhs.true4.i5649
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_506
# BB#503:                               # %land.lhs.true9.i5655
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB12_506
# BB#504:                               # %land.lhs.true19.i5659
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB12_506
# BB#505:                               # %land.lhs.true36.i5662
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB12_507
.LBB12_506:                             # %cond.false.i5665
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$47, %rsi
	movq	%rbx, %rdi
	callq	rtx_cost
	addq	%rax, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB12_507:                             # %cond.end1394
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %rdi
	callq	approx_reg_cost
	movq	%rax, -168(%rbp)        # 8-byte Spill
.LBB12_508:                             # %if.end1398
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, -128(%rbp)        # 8-byte Spill
	movq	global_rtl(%rip), %rax
	cmpq	%rax, -48(%rbp)         # 8-byte Folded Reload
	movabsq	$0, %rax
	jne	.LBB12_510
# BB#509:                               # %if.end1398
                                        #   in Loop: Header=BB12_81 Depth=1
	movabsq	$1, %rax
.LBB12_510:                             # %if.end1398
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-240(%rbp), %rcx        # 8-byte Reload
	andq	%rcx, %rax
	cmpq	$1, %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	jne	.LBB12_511
# BB#512:                               # %land.lhs.true1403
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-248(%rbp), %rcx        # 8-byte Reload
	movzbl	(%rcx), %eax
	cmpq	$67, %rax
	movq	$-1, -184(%rbp)         # 8-byte Folded Spill
	movq	$-1, %rsi
	je	.LBB12_514
# BB#513:                               # %land.lhs.true1403
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %rsi
.LBB12_514:                             # %land.lhs.true1403
                                        #   in Loop: Header=BB12_81 Depth=1
	je	.LBB12_516
# BB#515:                               # %land.lhs.true1403
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
.LBB12_516:                             # %land.lhs.true1403
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, %rax
	je	.LBB12_518
# BB#517:                               # %land.lhs.true1403
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r15, %rax
.LBB12_518:                             # %land.lhs.true1403
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, %r15
	jmp	.LBB12_519
.LBB12_511:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %rsi
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
.LBB12_519:                             # %while.cond1412.preheader
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rsi, -192(%rbp)        # 8-byte Spill
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, %rax
	movq	-168(%rbp), %rdx        # 8-byte Reload
	subq	%rdx, %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-144(%rbp), %rax        # 8-byte Reload
	subq	%rax, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	subq	%rdx, %rdi
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movq	%rsi, %rdi
	subq	%rdx, %rdi
	movq	%rdi, -352(%rbp)        # 8-byte Spill
	movq	%rsi, %rdx
	subq	%rax, %rdx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	subq	%rcx, %rsi
	movq	%rsi, -264(%rbp)        # 8-byte Spill
	movq	$2147483647, -152(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	movq	$0, -232(%rbp)          # 8-byte Folded Spill
	movq	$2147483647, -72(%rbp)  # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	jmp	.LBB12_520
.LBB12_1326:                            # %while.body1426
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	32(%r13), %r13
	.align	16, 0x90
.LBB12_520:                             # %while.cond1412
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testq	%r13, %r13
	jne	.LBB12_522
# BB#521:                               #   in Loop: Header=BB12_520 Depth=2
	movq	%r15, %r8
	movq	-72(%rbp), %rdi         # 8-byte Reload
	jmp	.LBB12_533
	.align	16, 0x90
.LBB12_522:                             # %land.lhs.true1414
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	(%r13), %rdi
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	je	.LBB12_525
# BB#523:                               # %land.rhs1420
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$1, %rdx
	movq	%rdi, %rsi
	callq	exp_equiv_p
	testq	%rbx, %rax
	je	.LBB12_1326
# BB#524:                               # %land.rhs1420.land.lhs.true1431_crit_edge
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	(%r13), %rdi
	movl	(%rdi), %eax
.LBB12_525:                             # %land.lhs.true1431
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	movq	%r15, %r8
	jne	.LBB12_532
# BB#526:                               # %land.lhs.true1437
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	8(%rdi), %rdx
	movq	$16, %rcx
	movzbl	2(%rdx), %edx
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %ecx
	movzbl	mode_size(%rdx), %edx
	cmpq	%rdx, %rcx
	jbe	.LBB12_532
# BB#527:                               # %land.lhs.true1457
                                        #   in Loop: Header=BB12_520 Depth=2
	testq	%r14, %r14
	je	.LBB12_531
# BB#528:                               # %land.lhs.true1460
                                        #   in Loop: Header=BB12_520 Depth=2
	movl	(%r14), %esi
	movq	%rsi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB12_531
# BB#529:                               # %land.lhs.true1465
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	cmpq	%rax, %rsi
	jne	.LBB12_531
# BB#530:                               # %land.lhs.true1475
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	8(%r14), %rax
	movzbl	2(%rax), %eax
	movzbl	mode_size(%rax), %eax
	cmpq	%rdx, %rax
	jae	.LBB12_531
	.align	16, 0x90
.LBB12_532:                             # %if.then1501
                                        #   in Loop: Header=BB12_520 Depth=2
	movl	64(%r13), %edi
	movl	68(%r13), %eax
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB12_533:                             # %if.end1502
                                        #   in Loop: Header=BB12_520 Depth=2
	testq	%r8, %r8
	je	.LBB12_577
# BB#534:                               # %land.lhs.true1504
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-120(%rbp), %rcx        # 8-byte Reload
	andq	%rbx, %rcx
	movq	-184(%rbp), %rax        # 8-byte Reload
	andq	%rbx, %rax
	cmpq	%rcx, %rax
	je	.LBB12_537
# BB#535:                               # %if.then.i
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_577
# BB#536:                               # %if.end.i
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_544
	.align	16, 0x90
.LBB12_537:                             # %if.end6.i5671
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-176(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-192(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_540
# BB#538:                               # %if.then8.i
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_577
# BB#539:                               # %if.end11.i
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_544
.LBB12_540:                             # %if.end15.i
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_541
# BB#542:                               # %if.end15.i
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-264(%rbp), %rdx        # 8-byte Reload
	jmp	.LBB12_543
.LBB12_531:                             # %if.then1497
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%r8, %r15
	movq	32(%r13), %r13
	jmp	.LBB12_520
.LBB12_541:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rdx
.LBB12_543:                             # %if.end15.i
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jg	.LBB12_577
.LBB12_544:                             # %land.lhs.true1508
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-104(%rbp), %rcx        # 8-byte Reload
	andq	%rbx, %rcx
	cmpq	%rcx, %rax
	je	.LBB12_547
# BB#545:                               # %if.then.i5677
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_577
# BB#546:                               # %if.end.i5679
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_554
.LBB12_547:                             # %if.end6.i5681
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-144(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-192(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_550
# BB#548:                               # %if.then8.i5683
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_577
# BB#549:                               # %if.end11.i5685
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_554
.LBB12_550:                             # %if.end15.i5686
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_551
# BB#552:                               # %if.end15.i5686
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-328(%rbp), %rdx        # 8-byte Reload
	jmp	.LBB12_553
.LBB12_551:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-104(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rdx
.LBB12_553:                             # %if.end15.i5686
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jg	.LBB12_577
.LBB12_554:                             # %land.lhs.true1512
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-64(%rbp), %rcx         # 8-byte Reload
	andq	%rbx, %rcx
	cmpq	%rcx, %rax
	je	.LBB12_557
# BB#555:                               # %if.then.i5697
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_577
# BB#556:                               # %if.end.i5699
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_564
.LBB12_557:                             # %if.end6.i5701
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-168(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-192(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_560
# BB#558:                               # %if.then8.i5703
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_577
# BB#559:                               # %if.end11.i5705
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_564
.LBB12_560:                             # %if.end15.i5706
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_561
# BB#562:                               # %if.end15.i5706
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-352(%rbp), %rdx        # 8-byte Reload
	jmp	.LBB12_563
.LBB12_561:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	subq	%rcx, %rdx
.LBB12_563:                             # %if.end15.i5706
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jg	.LBB12_577
.LBB12_564:                             # %land.lhs.true1516
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rdi, %rcx
	andq	%rbx, %rcx
	cmpq	%rcx, %rax
	je	.LBB12_567
# BB#565:                               # %if.then.i5717
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_577
# BB#566:                               # %if.end.i5719
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_574
.LBB12_567:                             # %if.end6.i5721
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-152(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-192(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_570
# BB#568:                               # %if.then8.i5723
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_577
# BB#569:                               # %if.end11.i5725
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_574
.LBB12_570:                             # %if.end15.i5726
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_571
# BB#572:                               # %if.end15.i5726
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	jmp	.LBB12_573
.LBB12_571:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-184(%rbp), %rax        # 8-byte Reload
	subq	%rdi, %rax
.LBB12_573:                             # %if.end15.i5726
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB12_577
.LBB12_574:                             # %if.then1520
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	$2147483647, -184(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	movq	-232(%rbp), %rax        # 8-byte Reload
	testq	%rbx, %rax
	jne	.LBB12_576
# BB#575:                               #   in Loop: Header=BB12_520 Depth=2
	movq	%r8, %r12
	movq	%r8, %r15
	jmp	.LBB12_645
	.align	16, 0x90
.LBB12_577:                             # %if.else1525
                                        #   in Loop: Header=BB12_520 Depth=2
	testq	%r14, %r14
	je	.LBB12_610
# BB#578:                               # %land.lhs.true1527
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-104(%rbp), %rcx        # 8-byte Reload
	andq	%rbx, %rcx
	movq	-120(%rbp), %rax        # 8-byte Reload
	andq	%rbx, %rax
	cmpq	%rcx, %rax
	je	.LBB12_581
# BB#579:                               # %if.then.i5737
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_610
# BB#580:                               # %if.end.i5739
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_588
	.align	16, 0x90
.LBB12_581:                             # %if.end6.i5741
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-144(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-176(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_584
# BB#582:                               # %if.then8.i5743
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_610
# BB#583:                               # %if.end11.i5745
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_588
.LBB12_584:                             # %if.end15.i5746
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_585
# BB#586:                               # %if.end15.i5746
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-272(%rbp), %rdx        # 8-byte Reload
	jmp	.LBB12_587
.LBB12_585:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-104(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rdx
.LBB12_587:                             # %if.end15.i5746
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jg	.LBB12_610
.LBB12_588:                             # %land.lhs.true1531
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-64(%rbp), %rcx         # 8-byte Reload
	andq	%rbx, %rcx
	cmpq	%rcx, %rax
	je	.LBB12_591
# BB#589:                               # %if.then.i5757
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_610
# BB#590:                               # %if.end.i5759
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_598
.LBB12_591:                             # %if.end6.i5761
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-168(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-176(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_594
# BB#592:                               # %if.then8.i5763
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_610
# BB#593:                               # %if.end11.i5765
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_598
.LBB12_594:                             # %if.end15.i5766
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_595
# BB#596:                               # %if.end15.i5766
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-336(%rbp), %rdx        # 8-byte Reload
	jmp	.LBB12_597
.LBB12_595:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	subq	%rcx, %rdx
.LBB12_597:                             # %if.end15.i5766
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jg	.LBB12_610
.LBB12_598:                             # %land.lhs.true1535
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rdi, %rcx
	andq	%rbx, %rcx
	cmpq	%rcx, %rax
	je	.LBB12_602
# BB#599:                               # %if.then.i5777
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_610
# BB#600:                               # %if.end.i5779
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	jne	.LBB12_602
# BB#601:                               #   in Loop: Header=BB12_520 Depth=2
	movq	%r8, %r15
	movq	%r14, %r12
	movq	$2147483647, -72(%rbp)  # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	movq	$2147483647, -120(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	jmp	.LBB12_645
.LBB12_602:                             # %if.end6.i5781
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-152(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-176(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_606
# BB#603:                               # %if.then8.i5783
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_610
# BB#604:                               # %if.end11.i5785
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_605
.LBB12_606:                             # %if.end15.i5786
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_607
# BB#608:                               # %if.end15.i5786
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	jmp	.LBB12_609
.LBB12_607:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-120(%rbp), %rax        # 8-byte Reload
	subq	%rdi, %rax
.LBB12_609:                             # %if.end15.i5786
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB12_610
.LBB12_605:                             #   in Loop: Header=BB12_520 Depth=2
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%r8, %r15
	movq	%r14, %r12
	movq	$2147483647, -120(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	jmp	.LBB12_645
	.align	16, 0x90
.LBB12_610:                             # %if.else1540
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$0, -56(%rbp)           # 8-byte Folded Reload
	je	.LBB12_632
# BB#611:                               # %land.lhs.true1542
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-64(%rbp), %rcx         # 8-byte Reload
	andq	%rbx, %rcx
	movq	-104(%rbp), %rax        # 8-byte Reload
	andq	%rbx, %rax
	cmpq	%rcx, %rax
	je	.LBB12_614
# BB#612:                               # %if.then.i5797
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_632
# BB#613:                               # %if.end.i5799
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_621
	.align	16, 0x90
.LBB12_614:                             # %if.end6.i5801
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-168(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-144(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_617
# BB#615:                               # %if.then8.i5803
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_632
# BB#616:                               # %if.end11.i5805
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_621
.LBB12_617:                             # %if.end15.i5806
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_618
# BB#619:                               # %if.end15.i5806
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-280(%rbp), %rdx        # 8-byte Reload
	jmp	.LBB12_620
.LBB12_618:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	subq	%rcx, %rdx
.LBB12_620:                             # %if.end15.i5806
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jg	.LBB12_632
.LBB12_621:                             # %land.lhs.true1546
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rdi, %rcx
	andq	%rbx, %rcx
	cmpq	%rcx, %rax
	je	.LBB12_624
# BB#622:                               # %if.then.i5817
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_632
# BB#623:                               # %if.end.i5819
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_631
.LBB12_624:                             # %if.end6.i5821
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-152(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-144(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_627
# BB#625:                               # %if.then8.i5823
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_632
# BB#626:                               # %if.end11.i5825
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_631
.LBB12_627:                             # %if.end15.i5826
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rcx, %rax
	jne	.LBB12_628
# BB#629:                               # %if.end15.i5826
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	jmp	.LBB12_630
.LBB12_628:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-104(%rbp), %rax        # 8-byte Reload
	subq	%rdi, %rax
.LBB12_630:                             # %if.end15.i5826
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB12_632
.LBB12_631:                             # %if.then1550
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%r8, %r15
	movq	-56(%rbp), %rdi         # 8-byte Reload
	callq	copy_rtx
	movq	%rax, %r12
	movq	$2147483647, -104(%rbp) # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	jmp	.LBB12_645
	.align	16, 0x90
.LBB12_632:                             # %if.else1552
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%r8, %r15
	cmpq	$0, -128(%rbp)          # 8-byte Folded Reload
	je	.LBB12_644
# BB#633:                               # %land.lhs.true1554
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rdi, %rax
	andq	%rbx, %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	andq	%rbx, %rcx
	cmpq	%rax, %rcx
	je	.LBB12_636
# BB#634:                               # %if.then.i5837
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB12_644
# BB#635:                               # %if.end.i5839
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	je	.LBB12_643
	.align	16, 0x90
.LBB12_636:                             # %if.end6.i5841
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-152(%rbp), %rdx        # 8-byte Reload
	andq	%rbx, %rdx
	movq	-168(%rbp), %rsi        # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	je	.LBB12_639
# BB#637:                               # %if.then8.i5843
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB12_644
# BB#638:                               # %if.end11.i5845
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB12_643
.LBB12_639:                             # %if.end15.i5846
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	%rax, %rcx
	jne	.LBB12_640
# BB#641:                               # %if.end15.i5846
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	jmp	.LBB12_642
.LBB12_640:                             #   in Loop: Header=BB12_520 Depth=2
	movq	-64(%rbp), %rax         # 8-byte Reload
	subq	%rdi, %rax
.LBB12_642:                             # %if.end15.i5846
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB12_644
.LBB12_643:                             # %if.then1558
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	-128(%rbp), %rdi        # 8-byte Reload
	callq	copy_rtx
	movq	%rax, %r12
	movq	$2147483647, -64(%rbp)  # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
	jmp	.LBB12_645
	.align	16, 0x90
.LBB12_644:                             # %if.else1560
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	(%r13), %rdi
	callq	copy_rtx
	movq	32(%r13), %r13
	movq	%rax, %r12
	movq	$2147483647, -72(%rbp)  # 8-byte Folded Spill
                                        # imm = 0x7FFFFFFF
.LBB12_645:                             # %if.end1567
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	global_rtl(%rip), %rax
	cmpq	%rax, -48(%rbp)         # 8-byte Folded Reload
	movabsq	$0, %rax
	jne	.LBB12_647
# BB#646:                               # %if.end1567
                                        #   in Loop: Header=BB12_520 Depth=2
	movabsq	$1, %rax
.LBB12_647:                             # %if.end1567
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-112(%rbp), %rcx        # 8-byte Reload
	andq	%rcx, %rax
	cmpq	$1, %rax
	jne	.LBB12_653
# BB#648:                               # %land.lhs.true1573
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-48(%rbp), %rax         # 8-byte Reload
	cmpq	%rax, %r12
	je	.LBB12_649
# BB#650:                               # %lor.lhs.false1576
                                        #   in Loop: Header=BB12_520 Depth=2
	movzbl	(%r12), %eax
	cmpq	$67, %rax
	jne	.LBB12_653
# BB#651:                               # %land.lhs.true1581
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	condjump_p
	testq	%rbx, %rax
	je	.LBB12_652
.LBB12_653:                             # %if.else1591
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rsi
	addq	$16, %rsi
	xorq	%rcx, %rcx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%r12, %rdx
	callq	validate_change
	testq	%rbx, %rax
	jne	.LBB12_654
# BB#661:                               # %if.else1657
                                        #   in Loop: Header=BB12_520 Depth=2
	movl	constant_pool_entries_cost(%rip), %eax
	testq	%rax, %rax
	je	.LBB12_520
# BB#662:                               # %land.lhs.true1659
                                        #   in Loop: Header=BB12_520 Depth=2
	movzbl	(%r12), %ecx
	cmpq	$133, %rcx
	jg	.LBB12_670
# BB#663:                               # %land.lhs.true1659
                                        #   in Loop: Header=BB12_520 Depth=2
	addq	$-54, %rcx
	andq	%rbx, %rcx
	cmpq	$14, %rcx
	ja	.LBB12_520
# BB#664:                               # %land.lhs.true1659
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$24583, %rdx            # imm = 0x6007
	jne	.LBB12_672
# BB#665:                               # %land.lhs.true1659
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$4, %rcx
	jne	.LBB12_520
# BB#666:                               # %land.lhs.true1704
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	8(%r12), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$122, %rcx
	je	.LBB12_520
# BB#667:                               # %land.lhs.true1717
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	8(%r12), %rcx
	movzbl	(%rcx), %edx
	cmpq	$76, %rdx
	jne	.LBB12_672
# BB#668:                               # %land.lhs.true1725
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	8(%rcx), %rdx
	movzbl	(%rdx), %edx
	cmpq	$67, %rdx
	jne	.LBB12_672
# BB#669:                               # %land.lhs.true1736
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$67, %rcx
	je	.LBB12_520
	jmp	.LBB12_672
.LBB12_670:                             # %land.lhs.true1659
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$134, %rcx
	je	.LBB12_672
# BB#671:                               # %land.lhs.true1659
                                        #   in Loop: Header=BB12_520 Depth=2
	cmpq	$140, %rcx
	jne	.LBB12_520
.LBB12_672:                             # %land.lhs.true1747
                                        #   in Loop: Header=BB12_520 Depth=2
	testq	%r15, %r15
	je	.LBB12_675
# BB#673:                               # %lor.lhs.false1750
                                        #   in Loop: Header=BB12_520 Depth=2
	movzbl	(%r15), %ecx
	cmpq	$66, %rcx
	je	.LBB12_520
# BB#674:                               # %lor.lhs.false1750
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-232(%rbp), %rcx        # 8-byte Reload
	testq	%rbx, %rcx
	jne	.LBB12_520
.LBB12_675:                             # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-200(%rbp), %rcx        # 8-byte Reload
	testq	%rcx, %rcx
	movabsq	$0, %rdx
	je	.LBB12_677
# BB#676:                               # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	movabsq	$1, %rdx
.LBB12_677:                             # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	movl	mode_class(,%rcx,4), %ecx
	cmpq	$4, %rcx
	movabsq	$0, %rcx
	je	.LBB12_679
# BB#678:                               # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	movabsq	$1, %rcx
.LBB12_679:                             # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	andq	%rdx, %rcx
	movq	$1, %rdx
	jne	.LBB12_681
# BB#680:                               # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-232(%rbp), %rdx        # 8-byte Reload
.LBB12_681:                             # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	jne	.LBB12_683
# BB#682:                               # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-184(%rbp), %rax        # 8-byte Reload
.LBB12_683:                             # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	testq	%rcx, %rcx
	jne	.LBB12_685
# BB#684:                               # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%r15, %r12
.LBB12_685:                             # %land.lhs.true1757
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	movq	%rax, -184(%rbp)        # 8-byte Spill
	movq	%r12, %r15
	jmp	.LBB12_520
.LBB12_576:                             # %if.then1522
                                        #   in Loop: Header=BB12_520 Depth=2
	movq	-200(%rbp), %rdi        # 8-byte Reload
	movq	%r8, %rsi
	movq	%r8, %r15
	callq	force_const_mem
	movq	%rax, %r12
	jmp	.LBB12_645
.LBB12_654:                             # %if.then1600
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$0, -208(%rbp)          # 8-byte Folded Reload
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	-136(%rbp), %r13        # 8-byte Reload
	je	.LBB12_658
# BB#655:                               # %land.lhs.true1602
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$4, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	shlq	%cl, %rax
	movq	56(%r15,%rax), %r12
	movzbl	(%r12), %ecx
	addq	$-61, %rcx
	andq	%rbx, %rcx
	cmpq	$5, %rcx
	ja	.LBB12_658
# BB#656:                               # %land.lhs.true1602
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$37, %rax
	je	.LBB12_658
# BB#657:                               # %if.then1626
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	(%r13), %rax
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	56(%rcx), %r14
	movq	16(%rax), %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	callq	canon_reg
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	replace_rtx
.LBB12_658:                             # %if.end1641
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	(%r13), %r14
	movq	16(%r14), %rdi
	addq	$16, %r14
	movq	-96(%rbp), %r12         # 8-byte Reload
	movq	%r12, %rsi
	callq	canon_reg
	movq	$1, %rcx
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	validate_change
	callq	apply_change_group
	jmp	.LBB12_659
.LBB12_649:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-48(%rbp), %r12         # 8-byte Reload
.LBB12_652:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	-136(%rbp), %r13        # 8-byte Reload
	movq	(%r13), %rax
	movq	%r12, 16(%rax)
	movq	$1, %rax
	movl	%eax, cse_jumps_altered(%rip)
.LBB12_659:                             # %while.end1769
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	(%r13), %rax
	movq	-48(%rbp), %r12         # 8-byte Reload
	movzbl	(%r12), %ecx
	movq	16(%rax), %rdi
	cmpq	$61, %rcx
	movq	%rbx, %r9
	jne	.LBB12_660
# BB#686:                               # %land.lhs.true1780
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%r12), %r15d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB12_688
# BB#687:                               # %land.lhs.true1780
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r15, %r14
	jne	.LBB12_697
.LBB12_688:                             # %cond.false1789
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_689
	.align	16, 0x90
.LBB12_692:                             # %for.body.i5869
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB12_696
# BB#691:                               # %for.cond.i5865
                                        #   in Loop: Header=BB12_692 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_692
.LBB12_689:                             # %if.then4.i5871
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_690
# BB#693:                               # %if.else.i5876
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %r13
	movq	$32, %rdi
	movq	%r9, %r14
	callq	xmalloc
	movq	%r13, %rdi
	movq	%r14, %r9
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_694
.LBB12_690:                             # %if.then5.i5873
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_694:                             # %if.end6.i5885
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_696
# BB#695:                               # %if.then11.i5886
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_696:                             # %get_cse_reg_info.exit5888
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r12), %r14d
.LBB12_697:                             # %cond.end1794
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	20(%rax), %esi
	movq	%r14, %rdx
	andq	%r9, %rdx
	cmpq	%rdx, %rsi
	jne	.LBB12_699
# BB#698:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-80(%rbp), %r15         # 8-byte Reload
.LBB12_660:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %r13        # 8-byte Reload
	jmp	.LBB12_761
.LBB12_699:                             # %if.then1802
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	%r15, %rdx
	movq	-312(%rbp), %r13        # 8-byte Reload
	jne	.LBB12_701
# BB#700:                               # %if.then1802
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	jne	.LBB12_710
.LBB12_701:                             # %cond.false1811
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_702
	.align	16, 0x90
.LBB12_705:                             # %for.body.i5903
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB12_709
# BB#704:                               # %for.cond.i5899
                                        #   in Loop: Header=BB12_705 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_705
.LBB12_702:                             # %if.then4.i5905
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_703
# BB#706:                               # %if.else.i5910
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	$32, %rdi
	movq	%r9, %r15
	callq	xmalloc
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%r15, %r9
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_707
.LBB12_331:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, -200(%rbp)        # 8-byte Spill
	jmp	.LBB12_254
.LBB12_703:                             # %if.then5.i5907
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_707:                             # %if.end6.i5919
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_709
# BB#708:                               # %if.then11.i5920
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_709:                             # %get_cse_reg_info.exit5922
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %esi
	movq	%r14, %r15
.LBB12_710:                             # %cond.end1816
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %r10
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	qty_table(%rip), %rdi
	leaq	(%rsi,%rsi,2), %rbx
	movl	(%r12), %r8d
	movq	$4, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movl	36(%rdi,%rsi), %esi
	movq	$16, %rcx
	movq	%r8, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	%rdx, %rsi
	jne	.LBB12_711
# BB#712:                               # %land.lhs.true1827
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$4, %rcx
	shlq	%cl, %rbx
	movl	28(%rdi,%rbx), %esi
	movl	8(%r12), %r14d
	cmpq	%r14, %rsi
	jne	.LBB12_713
.LBB12_711:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-80(%rbp), %r15         # 8-byte Reload
	movq	-200(%rbp), %rcx        # 8-byte Reload
	movq	%r10, %rdi
	jmp	.LBB12_761
.LBB12_713:                             # %land.lhs.true1833
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r10, %rdi
	movzbl	(%rdi), %ecx
	cmpq	$61, %rcx
	jne	.LBB12_714
# BB#715:                               # %land.lhs.true1838
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%rdi), %ecx
	cmpq	%r14, %rcx
	jne	.LBB12_714
# BB#716:                               # %land.lhs.true1847
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	(%r13), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB12_718
# BB#717:                               # %lor.lhs.false1855
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%rcx), %ecx
	cmpq	$53, %rcx
	jb	.LBB12_714
.LBB12_718:                             # %land.lhs.true1864
                                        #   in Loop: Header=BB12_81 Depth=1
	andq	$65535, %r8             # imm = 0xFFFF
	cmpq	$61, %r8
	jne	.LBB12_720
# BB#719:                               # %land.lhs.true1864
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$53, %r14
	jae	.LBB12_720
.LBB12_714:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-80(%rbp), %r15         # 8-byte Reload
.LBB12_760:                             # %if.end1951
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-200(%rbp), %rcx        # 8-byte Reload
	.align	16, 0x90
.LBB12_761:                             # %if.end1951
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	(%r13), %rax
	cmpq	%rax, %rdi
	je	.LBB12_787
# BB#762:                               # %if.then1957
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$1, %rax
	movb	%al, cse_altered(%rip)
	xorq	%rax, %rax
	movb	%al, do_not_record(%rip)
	movb	%al, hash_arg_in_memory(%rip)
	movq	%rdi, (%r13)
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB12_776
# BB#763:                               # %land.lhs.true1965
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%rdi), %r14d
	cmpq	$53, %r14
	jb	.LBB12_776
# BB#764:                               # %cond.true1971
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, %r13
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	jne	.LBB12_766
# BB#765:                               # %cond.true1971
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_775
.LBB12_766:                             # %cond.false1980
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_767
.LBB12_770:                             # %for.body.i6037
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB12_774
# BB#769:                               # %for.cond.i6033
                                        #   in Loop: Header=BB12_770 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_770
.LBB12_767:                             # %if.then4.i6039
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_768
# BB#771:                               # %if.else.i6044
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	$32, %rdi
	movq	%r9, %r12
	callq	xmalloc
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%r12, %r9
	movq	-48(%rbp), %r12         # 8-byte Reload
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_772
.LBB12_776:                             # %cond.false1989
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %r14
	movq	%rcx, %rsi
	movq	%rcx, %r13
	movq	%r9, %rbx
	callq	canon_hash
	movq	%rbx, %r9
	jmp	.LBB12_777
.LBB12_768:                             # %if.then5.i6041
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_772:                             # %if.end6.i6053
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_774
# BB#773:                               # %if.then11.i6054
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_774:                             # %get_cse_reg_info.exit6056
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_775:                             # %cond.end1985
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %r14
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_777:                             # %cond.end1991
                                        #   in Loop: Header=BB12_81 Depth=1
	andq	$31, %rax
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movl	%eax, (%rcx)
	movzbl	do_not_record(%rip), %ecx
	movzbl	hash_arg_in_memory(%rip), %edx
	movq	table(,%rax,8), %rbx
	movq	-256(%rbp), %rax        # 8-byte Reload
	movb	%cl, (%rax)
	movq	-344(%rbp), %rax        # 8-byte Reload
	movb	%dl, (%rax)
	testq	%rbx, %rbx
	movq	%r13, %rcx
	movq	%r14, %rdi
	je	.LBB12_785
	.align	16, 0x90
.LBB12_778:                             # %for.body.i6064
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%rbx), %eax
	cmpq	%rcx, %rax
	jne	.LBB12_784
# BB#779:                               # %land.lhs.true.i6071
                                        #   in Loop: Header=BB12_778 Depth=2
	movq	(%rbx), %rsi
	movzbl	(%rdi), %eax
	cmpq	%rdi, %rsi
	jne	.LBB12_781
# BB#780:                               # %land.lhs.true.i6071
                                        #   in Loop: Header=BB12_778 Depth=2
	cmpq	$61, %rax
	je	.LBB12_786
.LBB12_781:                             # %lor.lhs.false.i6077
                                        #   in Loop: Header=BB12_778 Depth=2
	movq	%rcx, %r15
	movq	%r12, %r13
	movq	%r9, %r12
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB12_783
# BB#782:                               # %lor.lhs.false.i6077
                                        #   in Loop: Header=BB12_778 Depth=2
	movabsq	$1, %rdx
.LBB12_783:                             # %lor.lhs.false.i6077
                                        #   in Loop: Header=BB12_778 Depth=2
	movq	%rdi, %r14
                                        # kill: RDI<def> R14<kill>
	callq	exp_equiv_p
	movq	%r14, %rdi
	movq	%r12, %r9
	testq	%r9, %rax
	movq	%r13, %r12
	movq	%r15, %rcx
	movq	-80(%rbp), %r15         # 8-byte Reload
	jne	.LBB12_786
.LBB12_784:                             # %for.inc.i6081
                                        #   in Loop: Header=BB12_778 Depth=2
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB12_778
.LBB12_785:                             #   in Loop: Header=BB12_81 Depth=1
	xorq	%rbx, %rbx
.LBB12_786:                             # %lookup.exit6084
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rbx, (%rax)
.LBB12_787:                             # %if.end2012
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-240(%rbp), %rdx        # 8-byte Reload
	andq	%rax, %rdx
	cmpq	$1, %rdx
	jne	.LBB12_788
# BB#789:                               # %land.lhs.true2017
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	(%r12), %eax
	movq	%rcx, %r13
	cmpq	$61, %rax
	jne	.LBB12_833
# BB#790:                               # %land.lhs.true2022
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-248(%rbp), %rax        # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	je	.LBB12_833
# BB#791:                               # %land.lhs.true2022
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %rbx
	cmpq	$58, %rax
	jne	.LBB12_796
# BB#792:                               # %land.lhs.true2032
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$76, %rcx
	jne	.LBB12_796
# BB#793:                               # %land.lhs.true2040
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$67, %rcx
	jne	.LBB12_796
# BB#794:                               # %land.lhs.true2051
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	16(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$67, %rax
	jne	.LBB12_796
# BB#795:                               #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %r9
	jmp	.LBB12_833
.LBB12_788:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, %r13
.LBB12_833:                             # %if.end2167
                                        #   in Loop: Header=BB12_81 Depth=1
	xorq	%rax, %rax
	movb	%al, do_not_record(%rip)
	jmp	.LBB12_834
	.align	16, 0x90
.LBB12_838:                             # %while.body2189
                                        #   in Loop: Header=BB12_834 Depth=2
	movq	8(%r12), %r12
.LBB12_834:                             # %while.cond2168
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r12), %eax
	leaq	-63(%rax), %rcx
	andq	%r9, %rcx
	cmpq	$2, %rcx
	jb	.LBB12_838
# BB#835:                               # %while.cond2168
                                        #   in Loop: Header=BB12_834 Depth=2
	addq	$-132, %rax
	andq	%r9, %rax
	cmpq	$2, %rax
	jb	.LBB12_838
# BB#836:                               # %lor.rhs2183
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$4, %rcx
	movq	-216(%rbp), %rax        # 8-byte Reload
	shlq	%cl, %rax
	movq	%r12, 32(%r15,%rax)
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB12_837
# BB#839:                               # %if.then2200
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%r9, %rbx
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$97, %rcx
	jne	.LBB12_842
# BB#840:                               # %land.lhs.true2211
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdi
	movq	global_rtl+16(%rip), %rax
	cmpq	%rax, %rdi
	jne	.LBB12_842
# BB#841:                               # %if.then2217
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	callq	invalidate
.LBB12_842:                             # %if.end2221
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %rdi
	movq	-96(%rbp), %rsi         # 8-byte Reload
	callq	fold_rtx
	movq	%rax, %r12
	movl	(%r12), %eax
	movq	%rbx, %r9
	jmp	.LBB12_843
.LBB12_837:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, -56(%rbp)         # 8-byte Spill
.LBB12_843:                             # %if.end2223
                                        #   in Loop: Header=BB12_81 Depth=1
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	movq	%r13, %rsi
	jne	.LBB12_858
# BB#844:                               # %land.lhs.true2228
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%r12), %r14d
	cmpq	$53, %r14
	jb	.LBB12_858
# BB#845:                               # %cond.true2234
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	movq	-248(%rbp), %rdi        # 8-byte Reload
	jne	.LBB12_847
# BB#846:                               # %cond.true2234
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_857
.LBB12_847:                             # %cond.false2243
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_848
	.align	16, 0x90
.LBB12_851:                             # %for.body.i6167
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB12_856
# BB#850:                               # %for.cond.i6163
                                        #   in Loop: Header=BB12_851 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_851
.LBB12_848:                             # %if.then4.i6169
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_849
# BB#852:                               # %if.else.i6174
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	movq	%r12, %r13
	movq	%r9, %r12
	callq	xmalloc
	movq	%r12, %r9
	movq	%r13, %r12
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_853
	.align	16, 0x90
.LBB12_858:                             # %cond.false2252
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %rdi
	movq	%r9, %rbx
	callq	canon_hash
	movq	%rbx, %r9
	movq	-248(%rbp), %rdi        # 8-byte Reload
	jmp	.LBB12_859
.LBB12_796:                             # %if.then2062
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	-248(%rbp), %rdi        # 8-byte Reload
	callq	copy_rtx
	movq	%rax, -248(%rbp)        # 8-byte Spill
	movq	$4, %rsi
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rdx
	callq	set_unique_reg_note
	movl	8(%r12), %r15d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	movq	%rbx, %r9
	jne	.LBB12_798
# BB#797:                               # %if.then2062
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r15, %r14
	jne	.LBB12_807
.LBB12_798:                             # %cond.false2073
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_799
.LBB12_802:                             # %for.body.i6099
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB12_806
# BB#801:                               # %for.cond.i6095
                                        #   in Loop: Header=BB12_802 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_802
.LBB12_799:                             # %if.then4.i6101
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %r14
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_800
# BB#803:                               # %if.else.i6106
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_804
.LBB12_849:                             # %if.then5.i6171
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_853:                             # %if.end6.i6183
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_855
# BB#854:                               # %if.then11.i6184
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_855:                             # %get_cse_reg_info.exit6186
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-248(%rbp), %rdi        # 8-byte Reload
.LBB12_856:                             # %get_cse_reg_info.exit6186
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_857:                             # %cond.end2248
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_859:                             # %cond.end2254
                                        #   in Loop: Header=BB12_81 Depth=1
	andq	$31, %rax
	movq	$4, %rcx
	movq	-216(%rbp), %rsi        # 8-byte Reload
	shlq	%cl, %rsi
	movl	%eax, 28(%r15,%rsi)
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	leaq	28(%r15,%rsi), %rsi
	movq	%r15, %r14
	andq	$65534, %rdx            # imm = 0xFFFE
	cmpq	$132, %rdx
	jne	.LBB12_875
# BB#860:                               # %if.then2280
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %r8
	testq	%rdi, %rdi
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	-224(%rbp), %r13        # 8-byte Reload
	movq	-296(%rbp), %rbx        # 8-byte Reload
	movq	%r14, %r15
	je	.LBB12_865
# BB#861:                               # %land.lhs.true2292
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	(%rdi), %edx
	cmpq	$54, %rdx
	jne	.LBB12_865
# BB#862:                               # %land.lhs.true2297
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB12_865
# BB#863:                               # %land.lhs.true2302
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rcx), %rcx
	cmpq	$63, %rcx
	jg	.LBB12_865
# BB#864:                               # %land.lhs.true2307
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rdi), %rdx
	movq	$-1, %rdi
	shlq	%cl, %rdi
	testq	%rdi, %rdx
	je	.LBB12_866
.LBB12_865:                             # %if.else2317
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-320(%rbp), %rcx        # 8-byte Reload
	movq	$0, (%rcx)
	movq	$1, %rcx
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movb	%cl, (%rdx)
	xorq	%r13, %r13
	movq	$0, -288(%rbp)          # 8-byte Folded Spill
	jmp	.LBB12_866
.LBB12_875:                             # %if.else2325
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %rbx
	movq	global_rtl(%rip), %rcx
	cmpq	$0, -112(%rbp)          # 8-byte Folded Reload
	movq	-96(%rbp), %r13         # 8-byte Reload
	movq	-56(%rbp), %r15         # 8-byte Reload
	je	.LBB12_879
# BB#876:                               # %land.lhs.true2328
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	%rcx, %r12
	jne	.LBB12_879
# BB#877:                               # %land.lhs.true2328
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	%rcx, %r15
	jne	.LBB12_879
# BB#878:                               # %if.then2334
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, %rdi
	callq	delete_insn
	movq	$1, %rax
	movl	%eax, cse_jumps_altered(%rip)
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	$0, (%rax)
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%rbx, %r9
	movq	-224(%rbp), %r13        # 8-byte Reload
	movq	-296(%rbp), %rbx        # 8-byte Reload
	movq	%r14, %r15
	jmp	.LBB12_911
.LBB12_879:                             # %if.else2339
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	%rcx, %r12
	movq	%rbx, %r9
	jne	.LBB12_890
# BB#880:                               # %land.lhs.true2342
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	(%r15), %ecx
	cmpq	$67, %rcx
	jne	.LBB12_890
# BB#881:                               # %if.then2347
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	24(%r13), %rax
	testq	%rax, %rax
	movq	-296(%rbp), %rbx        # 8-byte Reload
	je	.LBB12_883
# BB#882:                               # %lor.lhs.false2353
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	(%rax), %eax
	cmpq	$35, %rax
	je	.LBB12_884
.LBB12_883:                             # %if.then2361
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, %rdi
	callq	emit_barrier_after
.LBB12_884:                             # %if.end2363
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$0, -112(%rbp)          # 8-byte Folded Reload
	je	.LBB12_888
# BB#885:                               # %if.then2366
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%r15), %rdi
	callq	gen_jump
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	emit_jump_insn_before
	movq	8(%r15), %rcx
	movq	%rax, %r13
	movq	%rcx, 64(%r13)
	movq	8(%r15), %rax
	movl	32(%rax), %ecx
	incq	%rcx
	movl	%ecx, 32(%rax)
	movq	24(%r13), %rax
	testq	%rax, %rax
	je	.LBB12_887
# BB#886:                               # %lor.lhs.false2391
                                        #   in Loop: Header=BB12_81 Depth=1
	movzbl	(%rax), %eax
	cmpq	$35, %rax
	je	.LBB12_889
.LBB12_887:                             # %if.then2399
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r13, %rdi
	callq	emit_barrier_after
	jmp	.LBB12_889
.LBB12_890:                             # %if.else2410
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %r8
	movzbl	do_not_record(%rip), %ecx
	cmpq	$1, %rcx
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	-296(%rbp), %rbx        # 8-byte Reload
	movq	%r14, %r15
	jne	.LBB12_891
# BB#892:                               # %if.then2412
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	(%r8), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	movq	-224(%rbp), %r13        # 8-byte Reload
	jg	.LBB12_898
# BB#893:                               # %if.then2412
                                        #   in Loop: Header=BB12_81 Depth=1
	addq	$-61, %rax
	andq	%r9, %rax
	cmpq	$5, %rax
	ja	.LBB12_901
# BB#894:                               # %if.then2412
                                        #   in Loop: Header=BB12_81 Depth=1
	jmpq	*.LJTI12_2(,%rax,8)
.LBB12_895:                             # %if.then2428
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$0, -208(%rbp)          # 8-byte Folded Reload
	je	.LBB12_897
# BB#896:                               # %if.then2428
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-208(%rbp), %rax        # 8-byte Reload
	cmpq	%rax, -96(%rbp)         # 8-byte Folded Reload
	jne	.LBB12_901
.LBB12_897:                             # %if.then2422
                                        #   in Loop: Header=BB12_81 Depth=1
	xorq	%rsi, %rsi
	movq	%r8, %rdi
	jmp	.LBB12_900
.LBB12_891:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-224(%rbp), %r13        # 8-byte Reload
.LBB12_866:                             # %if.end2461
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	je	.LBB12_911
# BB#867:                               # %land.lhs.true2467
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdi
	cmpq	%rdi, %r8
	je	.LBB12_911
# BB#868:                               # %if.then2476
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rsi, %r14
	movq	%rbx, %r12
	movq	%r13, -224(%rbp)        # 8-byte Spill
	movq	%r15, %r13
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB12_909
# BB#869:                               # %land.lhs.true2487
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	8(%rdi), %r15d
	cmpq	$53, %r15
	jb	.LBB12_909
# BB#870:                               # %cond.true2499
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	movq	%r12, %rbx
	movq	%r14, %rsi
	jne	.LBB12_872
# BB#871:                               # %cond.true2499
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_908
.LBB12_872:                             # %cond.false2514
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, -296(%rbp)        # 8-byte Spill
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_873
.LBB12_903:                             # %for.body.i6201
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB12_907
# BB#902:                               # %for.cond.i6197
                                        #   in Loop: Header=BB12_903 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_903
.LBB12_873:                             # %if.then4.i6203
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r9, %r12
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%rsi, %r14
	testq	%rax, %rax
	jne	.LBB12_874
# BB#904:                               # %if.else.i6208
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_905
.LBB12_909:                             # %cond.false2529
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	%r9, %rbx
	callq	canon_hash
	movq	%rbx, %r9
	movq	%r12, %rbx
	movq	%r14, %rsi
	jmp	.LBB12_910
.LBB12_898:                             # %if.then2412
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	$133, %rax
	jne	.LBB12_901
.LBB12_899:                             # %if.then2445
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%r8), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
.LBB12_900:                             # %if.end2454
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rbx, %r14
	movq	%r9, %rbx
	callq	invalidate
	movq	%rbx, %r9
	movq	%r14, %rbx
.LBB12_901:                             # %if.end2454
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	$0, (%rax)
	jmp	.LBB12_911
.LBB12_888:                             # %if.else2402
                                        #   in Loop: Header=BB12_81 Depth=1
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movl	%eax, 40(%r13)
.LBB12_889:                             # %if.end2406
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	%r13, %rdi
	movq	-224(%rbp), %r13        # 8-byte Reload
	movq	%r14, %r15
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	xorq	%rsi, %rsi
	callq	never_reached_warning
	movq	$1, %rax
	movl	%eax, cse_jumps_altered(%rip)
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	$0, (%rax)
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	jmp	.LBB12_911
.LBB12_800:                             # %if.then5.i6103
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_804:                             # %if.end6.i6115
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r14, %r9
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_806
# BB#805:                               # %if.then11.i6116
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_806:                             # %get_cse_reg_info.exit6118
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r12), %r14d
.LBB12_807:                             # %cond.end2078
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	20(%rax), %esi
	movq	%r14, %rdx
	andq	%r9, %rdx
	cmpq	%rdx, %rsi
	movq	-56(%rbp), %rdi         # 8-byte Reload
	jne	.LBB12_809
# BB#808:                               #   in Loop: Header=BB12_81 Depth=1
	movq	-80(%rbp), %r15         # 8-byte Reload
	jmp	.LBB12_833
.LBB12_809:                             # %if.then2086
                                        #   in Loop: Header=BB12_81 Depth=1
	cmpq	%r15, %rdx
	jne	.LBB12_811
# BB#810:                               # %if.then2086
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	jne	.LBB12_820
.LBB12_811:                             # %cond.false2096
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_812
.LBB12_815:                             # %for.body.i6133
                                        #   Parent Loop BB12_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB12_819
# BB#814:                               # %for.cond.i6129
                                        #   in Loop: Header=BB12_815 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_815
.LBB12_812:                             # %if.then4.i6135
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_813
# BB#816:                               # %if.else.i6140
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rdi
	movq	%r9, %r15
	callq	xmalloc
	movq	%r15, %r9
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB12_817
.LBB12_319:                             #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	movq	%rdi, %rcx
	movq	%r9, -248(%rbp)         # 8-byte Spill
	jmp	.LBB12_337
.LBB12_813:                             # %if.then5.i6137
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_817:                             # %if.end6.i6149
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	movq	-56(%rbp), %rdi         # 8-byte Reload
	jne	.LBB12_819
# BB#818:                               # %if.then11.i6150
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_819:                             # %get_cse_reg_info.exit6152
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %esi
.LBB12_820:                             # %cond.end2101
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	qty_table(%rip), %r14
	leaq	(%rsi,%rsi,2), %rbx
	movq	$4, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	(%r14,%rax), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB12_821
# BB#822:                               # %if.then2109
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rdi, %r15
	movq	%r9, %r12
	movq	$5, %rsi
	xorq	%rdx, %rdx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	find_reg_note
	movq	$4, %rcx
	shlq	%cl, %rbx
	movq	8(%r14,%rbx), %r14
	movzbl	(%r14), %ecx
	movzbl	rtx_class(%rcx), %ecx
	movq	%rax, %rbx
	cmpq	$105, %rcx
	jne	.LBB12_823
# BB#824:                               # %cond.true2119
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB12_826
# BB#825:                               # %cond.false2131
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	single_set_2
.LBB12_826:                             # %cond.end2139
                                        #   in Loop: Header=BB12_81 Depth=1
	testq	%rax, %rax
	jne	.LBB12_827
.LBB12_823:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%r12, %r9
	jmp	.LBB12_832
.LBB12_821:                             #   in Loop: Header=BB12_81 Depth=1
	movq	-80(%rbp), %r15         # 8-byte Reload
	jmp	.LBB12_833
.LBB12_874:                             # %if.then5.i6205
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_905:                             # %if.end6.i6217
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%r12, %r9
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r9d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	movq	%r14, %rsi
	jne	.LBB12_907
# BB#906:                               # %if.then11.i6218
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_907:                             # %get_cse_reg_info.exit6220
                                        #   in Loop: Header=BB12_81 Depth=1
	movq	-296(%rbp), %rbx        # 8-byte Reload
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_908:                             # %cond.end2525
                                        #   in Loop: Header=BB12_81 Depth=1
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB12_910:                             # %cond.end2537
                                        #   in Loop: Header=BB12_81 Depth=1
	andq	$31, %rax
	movl	%eax, (%rsi)
	movq	%r13, %r15
	movq	-88(%rbp), %r12         # 8-byte Reload
	movq	-224(%rbp), %r13        # 8-byte Reload
	.align	16, 0x90
.LBB12_911:                             # %for.inc2544
                                        #   in Loop: Header=BB12_81 Depth=1
	incq	%rbx
	movq	%rbx, %rax
	andq	%r9, %rax
	movq	-368(%rbp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB12_81
# BB#912:                               # %for.end2546
	cmpq	$0, -288(%rbp)          # 8-byte Folded Reload
	je	.LBB12_913
# BB#914:                               # %for.end2546
	testq	%r13, %r13
	jne	.LBB12_913
# BB#915:                               # %land.lhs.true2551
	movq	%r12, -88(%rbp)         # 8-byte Spill
	movq	(%r15), %rax
	movq	$0, -224(%rbp)          # 8-byte Folded Spill
	testq	%rax, %rax
	je	.LBB12_945
# BB#916:                               # %land.lhs.true2551
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	-376(%rbp), %rcx        # 8-byte Reload
	testq	%r13, %rcx
	jne	.LBB12_945
# BB#917:                               # %land.lhs.true2558
	movq	8(%rax), %rsi
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdi
	callq	rtx_equal_p
	testq	%r13, %rax
	jne	.LBB12_945
# BB#918:                               # %if.then2566
	movq	(%r15), %rax
	movq	8(%rax), %rax
	movq	%r15, %rdx
	movl	(%rax), %r15d
	movq	%r15, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$64, %rcx
	jne	.LBB12_919
# BB#920:                               # %if.then2584
	movq	%rdx, %rbx
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %r15d
	xorq	%r14, %r14
	jmp	.LBB12_921
.LBB12_913:
	movq	%r13, -224(%rbp)        # 8-byte Spill
	movq	%r12, -88(%rbp)         # 8-byte Spill
.LBB12_945:
	movq	%r15, -80(%rbp)         # 8-byte Spill
	xorq	%r13, %r13
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	-88(%rbp), %r14         # 8-byte Reload
	andq	%r8, %r14
	movq	%r14, -48(%rbp)         # 8-byte Spill
	jmp	.LBB12_946
.LBB12_951:                             # %if.else2712
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	8(%r12,%rax), %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	movl	(%rcx), %ecx
	testq	$16711680, %rcx         # imm = 0xFF0000
	je	.LBB12_953
# BB#952:                               # %if.else2712
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%rcx, %rdx
.LBB12_953:                             # %if.else2712
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%r12, %rbx
	cmpq	$0, 16(%rbx,%rax)
	leaq	16(%rbx,%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	-224(%rbp), %rdx        # 8-byte Reload
	jne	.LBB12_976
# BB#954:                               # %if.then2746
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	$6, %rsi
	xorq	%rdx, %rdx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB12_974
# BB#955:                               # %if.then2749
                                        #   in Loop: Header=BB12_946 Depth=1
	xorq	%rdx, %rdx
	movq	-56(%rbp), %r12         # 8-byte Reload
	movq	%r12, %rdi
	movq	-224(%rbp), %rsi        # 8-byte Reload
	callq	insert_regs
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB12_957
# BB#956:                               # %if.then2749.if.end2790_crit_edge
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	$4, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movl	24(%rbx,%rax), %edx
	jmp	.LBB12_973
.LBB12_974:                             # %if.else2802
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%rax, %rdx
	jmp	.LBB12_975
.LBB12_957:                             # %if.then2753
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%r12, %rdi
	callq	rehash_using_reg
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB12_971
# BB#958:                               # %land.lhs.true2758
                                        #   in Loop: Header=BB12_946 Depth=1
	movl	8(%r12), %esi
	cmpq	$53, %rsi
	jb	.LBB12_971
# BB#959:                               # %cond.true2764
                                        #   in Loop: Header=BB12_946 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rsi
	jne	.LBB12_961
# BB#960:                               # %cond.true2764
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_970
.LBB12_961:                             # %cond.false2773
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	$7, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	xorq	%rsi, %rdi
	andq	$127, %rdi
	movq	reg_hash(,%rdi,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB12_962
.LBB12_965:                             # %for.body.i6269
                                        #   Parent Loop BB12_946 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%rsi, %rdx
	je	.LBB12_969
# BB#964:                               # %for.cond.i6265
                                        #   in Loop: Header=BB12_965 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_965
.LBB12_962:                             # %if.then4.i6271
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%rsi, %r12
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_963
# BB#966:                               # %if.else.i6276
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	movq	$32, %rdi
	callq	xmalloc
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	reg_hash(,%rdi,8), %rcx
	jmp	.LBB12_967
.LBB12_971:                             # %cond.false2782
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%r12, %rdi
	movq	-72(%rbp), %rsi         # 8-byte Reload
	callq	canon_hash
	movq	%rax, %rdx
	jmp	.LBB12_972
.LBB12_963:                             # %if.then5.i6273
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB12_967:                             # %if.end6.i6285
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rdi,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movq	%r12, %rsi
	movl	%esi, 20(%rax)
	movl	%esi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_969
# BB#968:                               # %if.then11.i6286
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_969:                             # %get_cse_reg_info.exit6288
                                        #   in Loop: Header=BB12_946 Depth=1
	movl	%esi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_970:                             # %cond.end2778
                                        #   in Loop: Header=BB12_946 Depth=1
	movl	20(%rax), %edx
	addq	$7808, %rdx             # imm = 0x1E80
.LBB12_972:                             # %cond.end2784
                                        #   in Loop: Header=BB12_946 Depth=1
	andq	$31, %rdx
	movq	$4, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movl	%edx, 24(%rbx,%rax)
.LBB12_973:                             # %if.end2790
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-224(%rbp), %rsi        # 8-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	callq	insert
	movq	$4, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movzbl	40(%rbx,%rdx), %ecx
	movq	%rax, %rdx
	movb	%cl, 76(%rdx)
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rdx, (%rax)
.LBB12_975:                             # %if.end2807
                                        #   in Loop: Header=BB12_946 Depth=1
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	movq	%rsi, %r8
.LBB12_976:                             # %if.end2807
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%rbx, -80(%rbp)         # 8-byte Spill
	movq	$4, %rcx
	movq	%r15, %r12
	shlq	%cl, %r12
	movq	48(%rbx,%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB12_983
# BB#977:                               # %land.lhs.true2812
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	$4, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	$0, 72(%rcx,%rax)
	jne	.LBB12_983
# BB#978:                               # %land.lhs.true2812
                                        #   in Loop: Header=BB12_946 Depth=1
	cmpq	%rdi, -56(%rbp)         # 8-byte Folded Reload
	je	.LBB12_983
# BB#979:                               # %land.lhs.true2824
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rsi
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	testq	%r8, %rax
	jne	.LBB12_983
# BB#980:                               # %if.then2830
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	-80(%rbp), %rdx         # 8-byte Reload
	leaq	48(%rdx,%r12), %rax
	movq	(%rax), %rdi
	movq	$4, %rcx
	shlq	%cl, %r15
	movl	64(%rdx,%r15), %edx
	movq	%r8, %rbx
	movq	-72(%rbp), %rcx         # 8-byte Reload
	callq	insert
	movq	%rbx, %r8
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	jmp	.LBB12_983
	.align	16, 0x90
.LBB12_946:                             # %for.body2669
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_965 Depth 2
	leaq	(%r13,%r13,4), %r15
	movq	$4, %rcx
	movq	%r15, %rbx
	shlq	%cl, %rbx
	movq	-80(%rbp), %r12         # 8-byte Reload
	movq	(%r12,%rbx), %rax
	testq	%rax, %rax
	je	.LBB12_981
# BB#947:                               # %land.lhs.true2674
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	$4, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movzbl	41(%r12,%rdx), %ecx
	testq	%rcx, %rcx
	jne	.LBB12_981
# BB#948:                               # %land.lhs.true2679
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	%r8, %r14
	movq	8(%rax), %rsi
	movq	16(%rax), %rdi
	callq	rtx_equal_p
	movq	%r14, %r8
	movq	-48(%rbp), %r14         # 8-byte Reload
	testq	%r8, %rax
	jne	.LBB12_981
# BB#949:                               # %if.then2694
                                        #   in Loop: Header=BB12_946 Depth=1
	addq	%r12, %rbx
	movq	(%rbx), %rax
	movq	8(%rax), %rax
	movl	(%rax), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movq	$4, %rcx
	cmpq	$64, %rax
	jne	.LBB12_951
# BB#950:                               # %if.then2705
                                        #   in Loop: Header=BB12_946 Depth=1
	shlq	%cl, %r15
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, 16(%r12,%r15)
	movq	-360(%rbp), %rax        # 8-byte Reload
	movl	%eax, 24(%r12,%r15)
	jmp	.LBB12_983
	.align	16, 0x90
.LBB12_981:                             # %if.else2843
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	$4, %rcx
	shlq	%cl, %r15
	cmpq	$0, 16(%r12,%r15)
	jne	.LBB12_983
# BB#982:                               # %if.then2849
                                        #   in Loop: Header=BB12_946 Depth=1
	movq	-80(%rbp), %rax         # 8-byte Reload
	leaq	16(%rax,%r15), %rax
	movq	-224(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
.LBB12_983:                             # %for.inc2855
                                        #   in Loop: Header=BB12_946 Depth=1
	incq	%r13
	movq	%r13, %rax
	andq	%r8, %rax
	cmpq	%r14, %rax
	jne	.LBB12_946
# BB#984:
	movq	$1, -104(%rbp)          # 8-byte Folded Spill
	movq	-96(%rbp), %r14         # 8-byte Reload
	movq	-88(%rbp), %r13         # 8-byte Reload
	jmp	.LBB12_985
.LBB12_1285:
	movq	-80(%rbp), %rdx         # 8-byte Reload
	jmp	.LBB12_1291
.LBB12_1288:                            # %if.else.i6697
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB12_1289:                            # %if.end6.i6706
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_1291
# BB#1290:                              # %if.then11.i6707
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_1291:                            # %get_cse_reg_info.exit6709
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	(%rdx), %rdx
	movq	16(%rdx), %rcx
	movl	8(%rcx), %r14d
.LBB12_1292:                            # %cond.end3811
	movl	20(%rax), %edi
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movq	%r14, %rsi
	andq	%r15, %rsi
	cmpq	%rsi, %rdi
	je	.LBB12_1320
# BB#1293:                              # %if.then3824
	cmpq	%r12, %rsi
	jne	.LBB12_1295
# BB#1294:                              # %if.then3824
	testq	%rax, %rax
	jne	.LBB12_1305
.LBB12_1295:                            # %cond.false3839
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB12_1299
# BB#1296:
	movq	%rcx, %rax
.LBB12_1298:                            # %for.body.i6724
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rsi, %rdx
	je	.LBB12_1304
# BB#1297:                              # %for.cond.i6720
                                        #   in Loop: Header=BB12_1298 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_1298
.LBB12_1299:                            # %if.then4.i6726
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB12_1301
# BB#1300:                              # %if.then5.i6728
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB12_1302
.LBB12_1301:                            # %if.else.i6731
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB12_1302:                            # %if.end6.i6740
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_1304
# BB#1303:                              # %if.then11.i6741
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_1304:                            # %get_cse_reg_info.exit6743
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %edi
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rdx
.LBB12_1305:                            # %cond.end3849
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	qty_table(%rip), %rax
	leaq	(%rdi,%rdi,2), %rsi
	movq	8(%rdx), %rdx
	movq	$4, %rcx
	shlq	%cl, %rsi
	movl	28(%rax,%rsi), %eax
	movl	8(%rdx), %ecx
	cmpq	%rcx, %rax
	jne	.LBB12_1320
# BB#1306:                              # %land.lhs.true3866
	movq	$6, %rsi
	xorq	%rdx, %rdx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB12_1320
# BB#1307:                              # %if.then3869
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	prev_nonnote_insn
	movq	%rax, %r14
	testq	%r14, %r14
	je	.LBB12_1320
# BB#1308:                              # %land.lhs.true3873
	movzbl	(%r14), %eax
	cmpq	$32, %rax
	jne	.LBB12_1320
# BB#1309:                              # %land.lhs.true3878
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB12_1320
# BB#1310:                              # %land.lhs.true3886
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	(%rcx), %rcx
	movq	8(%rax), %rax
	movq	16(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB12_1320
# BB#1311:                              # %land.lhs.true3900
	movq	$3, %rsi
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB12_1320
# BB#1312:                              # %if.then3903
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	8(%rax), %r12
	movq	32(%r14), %rdx
	movq	16(%rax), %rbx
	addq	$8, %rdx
	movq	$1, %rcx
	movq	%r14, %rdi
	movq	%rdx, %rsi
	movq	%r12, %rdx
	callq	validate_change
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	addq	$8, %rax
	movq	$1, %rcx
	movq	-96(%rbp), %r13         # 8-byte Reload
	movq	%r13, %rdi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	callq	validate_change
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	addq	$16, %rax
	movq	$1, %rcx
	movq	%r13, %rdi
	movq	%rax, %rsi
	movq	%r12, %rdx
	callq	validate_change
	callq	apply_change_group
	movq	$5, %rsi
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB12_1314
# BB#1313:                              # %if.then3939
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	remove_note
.LBB12_1314:                            # %if.end3940
	movq	$5, %rsi
	xorq	%rdx, %rdx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	find_reg_note
	movq	%rax, %r13
	testq	%r13, %r13
	je	.LBB12_1316
# BB#1315:                              # %if.then3943
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%r13, %rsi
	callq	remove_note
	movq	56(%r14), %rax
	movq	%rax, 16(%r13)
	movq	%r13, 56(%r14)
.LBB12_1316:                            # %if.end3953
	movq	$4, %rsi
	xorq	%rdx, %rdx
	movq	-96(%rbp), %rdi         # 8-byte Reload
	callq	find_reg_note
	movq	%rax, %r14
	testq	%r14, %r14
	je	.LBB12_1320
# BB#1317:                              # %land.lhs.true3957
	movq	8(%r14), %rax
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	reg_mentioned_p
	testq	%r15, %rax
	jne	.LBB12_1319
# BB#1318:                              # %lor.lhs.false3963
	movq	8(%r14), %rax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB12_1320
.LBB12_1319:                            # %if.then3969
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%r14, %rsi
	callq	remove_note
.LBB12_1320:                            # %if.end3973
	movq	$0, last_jump_equiv_class(%rip)
	movq	-96(%rbp), %rbx         # 8-byte Reload
	movzbl	(%rbx), %eax
	cmpq	$33, %rax
	jne	.LBB12_1324
# BB#1321:                              # %land.lhs.true3981
	movq	-160(%rbp), %rax        # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$47, %rax
	jne	.LBB12_1324
# BB#1322:                              # %land.lhs.true3986
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$72, %rax
	jne	.LBB12_1324
# BB#1323:                              # %if.then3994
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	record_jump_equiv
.LBB12_1324:                            # %if.end3995
	movq	%rbx, prev_insn(%rip)
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB12_919:
	movq	16(%rdx), %r14
	movq	%rdx, %rbx
.LBB12_921:                             # %if.end2594
	movq	$16, %rcx
	shrq	%cl, %r15
	andq	$255, %r15
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	insert_regs
	testq	%r13, %rax
	movq	-360(%rbp), %rdx        # 8-byte Reload
	je	.LBB12_939
# BB#922:                               # %if.then2597
	movq	%r12, %rdi
	callq	rehash_using_reg
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB12_937
# BB#923:                               # %land.lhs.true2602
	movl	8(%r12), %ecx
	cmpq	$53, %rcx
	jb	.LBB12_937
# BB#924:                               # %cond.true2608
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rcx
	jne	.LBB12_926
# BB#925:                               # %cond.true2608
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB12_936
.LBB12_926:                             # %cond.false2617
	movq	%rcx, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	movq	$7, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	xorq	%rax, %rdx
	andq	$127, %rdx
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	reg_hash(,%rdx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB12_930
# BB#927:
	movq	%rcx, %rax
	movq	-48(%rbp), %rsi         # 8-byte Reload
.LBB12_929:                             # %for.body.i6235
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rsi, %rdx
	je	.LBB12_935
# BB#928:                               # %for.cond.i6231
                                        #   in Loop: Header=BB12_929 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB12_929
.LBB12_930:                             # %if.then4.i6237
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB12_932
# BB#931:                               # %if.then5.i6239
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB12_933
.LBB12_937:                             # %cond.false2626
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	canon_hash
	movq	%rax, %rdx
.LBB12_938:                             # %cond.end2628
	andq	$31, %rdx
.LBB12_939:                             # %if.end2631
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r15, %rcx
	callq	insert
	movq	%rax, -224(%rbp)        # 8-byte Spill
	movq	-384(%rbp), %rcx        # 8-byte Reload
	movb	%cl, 76(%rax)
	movq	%rbx, %r15
	leaq	16(%r15), %rbx
	movq	$1, %r14
.LBB12_940:                             # %for.body2637
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbx), %rax
	testq	%rax, %rax
	je	.LBB12_944
# BB#941:                               # %land.lhs.true2642
                                        #   in Loop: Header=BB12_940 Depth=1
	cmpq	$0, (%rbx)
	jne	.LBB12_944
# BB#942:                               # %land.lhs.true2648
                                        #   in Loop: Header=BB12_940 Depth=1
	movq	16(%rax), %rdi
	movq	%r12, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB12_944
# BB#943:                               # %if.then2657
                                        #   in Loop: Header=BB12_940 Depth=1
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rbx)
.LBB12_944:                             # %for.inc2662
                                        #   in Loop: Header=BB12_940 Depth=1
	movq	%r14, %rax
	andq	%r13, %rax
	movq	-88(%rbp), %rcx         # 8-byte Reload
	andq	%r13, %rcx
	incq	%r14
	addq	$80, %rbx
	cmpq	%rcx, %rax
	jne	.LBB12_940
	jmp	.LBB12_945
.LBB12_932:                             # %if.else.i6242
	movq	$32, %rdi
	callq	xmalloc
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	reg_hash(,%rcx,8), %rcx
.LBB12_933:                             # %if.end6.i6251
	movq	%rcx, (%rax)
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, reg_hash(,%rcx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%ecx, 20(%rax)
	movl	%ecx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB12_935
# BB#934:                               # %if.then11.i6252
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB12_935:                             # %get_cse_reg_info.exit6254
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movl	%ecx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB12_936:                             # %cond.end2622
	movl	20(%rax), %edx
	addq	$7808, %rdx             # imm = 0x1E80
	jmp	.LBB12_938
.Ltmp193:
	.size	cse_insn, .Ltmp193-cse_insn
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI12_0:
	.quad	.LBB12_13
	.quad	.LBB12_55
	.quad	.LBB12_55
	.quad	.LBB12_55
	.quad	.LBB12_55
	.quad	.LBB12_55
	.quad	.LBB12_55
	.quad	.LBB12_55
	.quad	.LBB12_8
	.quad	.LBB12_50
	.quad	.LBB12_48
	.quad	.LBB12_53
.LJTI12_1:
	.quad	.LBB12_30
	.quad	.LBB12_38
	.quad	.LBB12_35
	.quad	.LBB12_42
.LJTI12_2:
	.quad	.LBB12_897
	.quad	.LBB12_901
	.quad	.LBB12_897
	.quad	.LBB12_899
	.quad	.LBB12_901
	.quad	.LBB12_895
.LJTI12_3:
	.quad	.LBB12_1025
	.quad	.LBB12_1029
	.quad	.LBB12_1025
	.quad	.LBB12_1027
	.quad	.LBB12_1029
	.quad	.LBB12_1024

	.text
	.align	16, 0x90
	.type	check_for_label_ref,@function
check_for_label_ref:                    # @check_for_label_ref
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp195:
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rdx
	movl	(%rdx), %edi
	movq	%rsi, %rcx
	andq	$134283263, %rdi        # imm = 0x800FFFF
	xorq	%rax, %rax
	cmpq	$67, %rdi
	jne	.LBB13_6
# BB#1:                                 # %land.lhs.true3
	movq	8(%rdx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$36, %rsi
	jne	.LBB13_6
# BB#2:                                 # %land.lhs.true7
	movl	8(%rdx), %esi
	testq	%rsi, %rsi
	je	.LBB13_6
# BB#3:                                 # %land.rhs
	movq	$13, %rsi
	movq	%rcx, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB13_4
# BB#5:                                 # %land.rhs
	movabsq	$1, %rax
.LBB13_6:                               # %land.end
	popq	%rdx
	retq
.LBB13_4:
	movabsq	$0, %rax
	popq	%rdx
	retq
.Ltmp196:
	.size	check_for_label_ref, .Ltmp196-check_for_label_ref
	.cfi_endproc

	.align	16, 0x90
	.type	invalidate,@function
invalidate:                             # @invalidate
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp203:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp204:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp205:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp206:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp207:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp208:
	.cfi_def_cfa_offset 80
.Ltmp209:
	.cfi_offset %rbx, -48
.Ltmp210:
	.cfi_offset %r12, -40
.Ltmp211:
	.cfi_offset %r13, -32
.Ltmp212:
	.cfi_offset %r14, -24
.Ltmp213:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movl	(%r12), %eax
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$38, %rcx
	jg	.LBB14_3
# BB#1:                                 # %entry
	cmpq	$3, %rcx
	jne	.LBB14_238
.LBB14_2:                               # %sw.bb258
	movq	8(%r12), %rdi
	xorq	%rsi, %rsi
	callq	invalidate
	jmp	.LBB14_240
.LBB14_3:                               # %entry
	cmpq	$60, %rcx
	jg	.LBB14_8
# BB#4:                                 # %entry
	cmpq	$39, %rcx
	jne	.LBB14_238
# BB#5:                                 # %sw.bb261
	movq	8(%r12), %rax
	movslq	(%rax), %rbx
	testq	%rbx, %rbx
	jg	.LBB14_6
	jmp	.LBB14_240
	.align	16, 0x90
.LBB14_7:                               # %for.body268.for.body268_crit_edge
                                        #   in Loop: Header=BB14_6 Depth=1
	movq	8(%r12), %rax
.LBB14_6:                               # %for.body268.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	decq	%rbx
	movq	8(%rax,%rbx,8), %rdi
	xorq	%rsi, %rsi
	callq	invalidate
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB14_7
	jmp	.LBB14_240
.LBB14_8:                               # %entry
	cmpq	$66, %rcx
	je	.LBB14_208
# BB#9:                                 # %entry
	cmpq	$63, %rcx
	je	.LBB14_2
# BB#10:                                # %entry
	cmpq	$61, %rcx
	jne	.LBB14_238
# BB#11:                                # %sw.bb
	movl	8(%r12), %r14d
	cmpq	$53, %r14
	jb	.LBB14_25
# BB#12:                                # %cond.true
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	jne	.LBB14_14
# BB#13:                                # %cond.true
	movq	cached_cse_reg_info(%rip), %rdx
	testq	%rdx, %rdx
	jne	.LBB14_24
.LBB14_14:                              # %cond.false
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB14_18
# BB#15:
	movq	%rcx, %rdx
	.align	16, 0x90
.LBB14_17:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rdx), %eax
	cmpq	%r14, %rax
	je	.LBB14_23
# BB#16:                                # %for.cond.i
                                        #   in Loop: Header=BB14_17 Depth=1
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.LBB14_17
.LBB14_18:                              # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rdx
	testq	%rdx, %rdx
	je	.LBB14_20
# BB#19:                                # %if.then5.i
	movq	8(%rdx), %rax
	movq	%rax, cse_reg_info_free_list(%rip)
	jmp	.LBB14_21
.LBB14_208:                             # %sw.bb280
	movq	%r12, %rdi
	callq	canon_rtx
	movq	%rax, (%rsp)            # 8-byte Spill
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	8(%rsp), %rax           # 8-byte Reload
	testq	%r13, %rax
	jne	.LBB14_210
# BB#209:                               # %if.then284
	movq	(%rsp), %rax            # 8-byte Reload
	movzbl	2(%rax), %eax
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB14_210:                             # %if.end288
	xorq	%r15, %r15
	.align	16, 0x90
.LBB14_211:                             # %for.body292
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_212 Depth 2
                                        #       Child Loop BB14_221 Depth 3
                                        #       Child Loop BB14_228 Depth 3
                                        #       Child Loop BB14_233 Depth 3
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	table(,%rax,8), %r14
	jmp	.LBB14_212
.LBB14_237:                             # %if.end54.i812
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%r12)
	movq	%r12, free_element_chain(%rip)
	.align	16, 0x90
.LBB14_212:                             # %for.body292
                                        #   Parent Loop BB14_211 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_221 Depth 3
                                        #       Child Loop BB14_228 Depth 3
                                        #       Child Loop BB14_233 Depth 3
	testq	%r14, %r14
	je	.LBB14_245
# BB#213:                               # %for.body298
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	%r14, %r12
	movzbl	76(%r12), %eax
	movq	16(%r12), %r14
	testq	%rax, %rax
	je	.LBB14_212
# BB#214:                               # %if.then301
                                        #   in Loop: Header=BB14_212 Depth=2
	cmpq	$0, 8(%r12)
	leaq	8(%r12), %rbx
	jne	.LBB14_216
# BB#215:                               # %if.then303
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	(%r12), %rdi
	callq	canon_rtx
	movq	%rax, 8(%r12)
.LBB14_216:                             # %if.end307
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, 24(%rsp)
	movq	8(%rsp), %rax           # 8-byte Reload
	movl	%eax, 16(%rsp)
	movq	%rbx, %rdi
	movabsq	$check_dependence, %rsi
	leaq	16(%rsp), %rdx
	callq	for_each_rtx
	testq	%r13, %rax
	je	.LBB14_212
# BB#217:                               # %if.end.i764
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	$0, 48(%r12)
	movq	32(%r12), %rax
	movq	40(%r12), %rcx
	testq	%rax, %rax
	je	.LBB14_219
# BB#218:                               # %if.then1.i766
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	%rcx, 40(%rax)
.LBB14_219:                             # %if.end3.i768
                                        #   in Loop: Header=BB14_212 Depth=2
	testq	%rcx, %rcx
	jne	.LBB14_244
# BB#220:                               # %while.cond.preheader.i769
                                        #   in Loop: Header=BB14_212 Depth=2
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB14_222
	.align	16, 0x90
.LBB14_221:                             # %while.body.i776
                                        #   Parent Loop BB14_211 Depth=1
                                        #     Parent Loop BB14_212 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB14_221
	jmp	.LBB14_222
.LBB14_244:                             # %if.then5.i771
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	%rax, 32(%rcx)
.LBB14_222:                             # %if.end10.i780
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	16(%r12), %rax
	movq	24(%r12), %rcx
	testq	%rax, %rax
	je	.LBB14_224
# BB#223:                               # %if.then14.i782
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	%rcx, 24(%rax)
.LBB14_224:                             # %if.end16.i784
                                        #   in Loop: Header=BB14_212 Depth=2
	testq	%rcx, %rcx
	jne	.LBB14_225
# BB#226:                               # %if.else20.i790
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	table(,%r15,8), %rcx
	cmpq	%r12, %rcx
	movq	$-256, %rcx
	jne	.LBB14_228
# BB#227:                               # %if.then22.i791
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	%rax, table(,%r15,8)
	jmp	.LBB14_231
	.align	16, 0x90
.LBB14_228:                             # %for.body.i795
                                        #   Parent Loop BB14_211 Depth=1
                                        #     Parent Loop BB14_212 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	table+256(%rcx), %rdx
	cmpq	%r12, %rdx
	jne	.LBB14_230
# BB#229:                               # %if.then30.i796
                                        #   in Loop: Header=BB14_228 Depth=3
	movq	%rax, table+256(%rcx)
.LBB14_230:                             # %for.inc.i799
                                        #   in Loop: Header=BB14_228 Depth=3
	addq	$8, %rcx
	jne	.LBB14_228
	jmp	.LBB14_231
.LBB14_225:                             # %if.then18.i786
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	%rax, 16(%rcx)
.LBB14_231:                             # %if.end35.i804
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	56(%r12), %rax
	testq	%rax, %rax
	je	.LBB14_237
# BB#232:                               # %if.end35.i804
                                        #   in Loop: Header=BB14_212 Depth=2
	cmpq	%r12, %rax
	movq	%rax, %rdx
	je	.LBB14_237
	.align	16, 0x90
.LBB14_233:                             # %while.cond41.i808
                                        #   Parent Loop BB14_211 Depth=1
                                        #     Parent Loop BB14_212 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%r12, %rdx
	jne	.LBB14_233
# BB#234:                               # %while.end46.i811
                                        #   in Loop: Header=BB14_212 Depth=2
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB14_236
# BB#235:                               # %while.end46.i811
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	%rax, %rdx
.LBB14_236:                             # %while.end46.i811
                                        #   in Loop: Header=BB14_212 Depth=2
	movq	%rdx, 56(%rcx)
	jmp	.LBB14_237
	.align	16, 0x90
.LBB14_245:                             # %for.inc317
                                        #   in Loop: Header=BB14_211 Depth=1
	incq	%r15
	cmpq	$32, %r15
	jne	.LBB14_211
	jmp	.LBB14_240
.LBB14_25:                              # %cond.false16
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	canon_hash
	movl	cached_regno(%rip), %ecx
	movq	cached_cse_reg_info(%rip), %rdx
	movq	%rax, %r15
	jmp	.LBB14_26
.LBB14_20:                              # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	movq	%rax, %rdx
.LBB14_21:                              # %if.end6.i
	movq	%rcx, (%rdx)
	movq	%rdx, reg_hash(,%rbx,8)
	movq	$1, %rax
	movl	%eax, 24(%rdx)
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movl	%eax, 28(%rdx)
	movl	%r14d, 20(%rdx)
	movl	%r14d, 16(%rdx)
	movq	cse_reg_info_used_list(%rip), %rax
	movq	%rax, 8(%rdx)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rdx, cse_reg_info_used_list(%rip)
	jne	.LBB14_23
# BB#22:                                # %if.then11.i
	movq	%rdx, cse_reg_info_used_list_end(%rip)
.LBB14_23:                              # %get_cse_reg_info.exit
	movl	%r14d, cached_regno(%rip)
	movq	%rdx, cached_cse_reg_info(%rip)
.LBB14_24:                              # %cond.end
	movl	20(%rdx), %r15d
	addq	$7808, %r15             # imm = 0x1E80
	movq	%r14, %rcx
.LBB14_26:                              # %cond.end20
	andq	$31, %r15
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	%r14, %rcx
	jne	.LBB14_28
# BB#27:                                # %cond.end20
	testq	%rdx, %rdx
	jne	.LBB14_38
.LBB14_28:                              # %cond.false.i
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB14_32
# BB#29:
	movq	%rcx, %rdx
	.align	16, 0x90
.LBB14_31:                              # %for.body.i546
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rdx), %eax
	cmpq	%r14, %rax
	je	.LBB14_37
# BB#30:                                # %for.cond.i542
                                        #   in Loop: Header=BB14_31 Depth=1
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.LBB14_31
.LBB14_32:                              # %if.then4.i548
	movq	cse_reg_info_free_list(%rip), %rdx
	testq	%rdx, %rdx
	je	.LBB14_34
# BB#33:                                # %if.then5.i550
	movq	8(%rdx), %rax
	movq	%rax, cse_reg_info_free_list(%rip)
	jmp	.LBB14_35
.LBB14_34:                              # %if.else.i553
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	movq	%rax, %rdx
.LBB14_35:                              # %if.end6.i562
	movq	%rcx, (%rdx)
	movq	%rdx, reg_hash(,%rbx,8)
	movq	$1, %rax
	movl	%eax, 24(%rdx)
	movl	%r13d, 28(%rdx)
	movl	%r14d, 20(%rdx)
	movl	%r14d, 16(%rdx)
	movq	cse_reg_info_used_list(%rip), %rax
	movq	%rax, 8(%rdx)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rdx, cse_reg_info_used_list(%rip)
	jne	.LBB14_37
# BB#36:                                # %if.then11.i563
	movq	%rdx, cse_reg_info_used_list_end(%rip)
.LBB14_37:                              # %get_cse_reg_info.exit565
	movl	%r14d, cached_regno(%rip)
	movq	%rdx, cached_cse_reg_info(%rip)
.LBB14_38:                              # %cond.end.i
	movl	20(%rdx), %esi
	movq	$32, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%r14, %rsi
	movq	%r14, %rcx
	je	.LBB14_58
# BB#39:                                # %if.end.i
	movq	reg_eqv_table(%rip), %rdi
	movl	(%rdi,%r14,8), %esi
	movq	qty_table(%rip), %r8
	movslq	4(%rdi,%r14,8), %rbx
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%r13, %rsi
	je	.LBB14_41
# BB#40:                                # %if.then7.i
	movl	%ebx, 4(%rdi,%rdx,8)
	jmp	.LBB14_42
.LBB14_41:                              # %if.else.i443
	leaq	(%rax,%rax,2), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	movl	%ebx, 32(%r8,%rdx)
.LBB14_42:                              # %if.end11.i
	movq	%rbx, %rcx
	andq	%r13, %rcx
	cmpq	%r13, %rcx
	je	.LBB14_44
# BB#43:                                # %if.then13.i
	movl	%esi, (%rdi,%rbx,8)
	jmp	.LBB14_45
.LBB14_44:                              # %if.else17.i
	leaq	(%rax,%rax,2), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movl	%esi, 28(%r8,%rax)
.LBB14_45:                              # %if.end18.i
	movl	cached_regno(%rip), %eax
	cmpq	%r14, %rax
	jne	.LBB14_47
# BB#46:                                # %if.end18.i
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB14_57
.LBB14_47:                              # %cond.false23.i
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB14_51
# BB#48:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB14_50:                              # %for.body.i458
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB14_56
# BB#49:                                # %for.cond.i454
                                        #   in Loop: Header=BB14_50 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB14_50
.LBB14_51:                              # %if.then4.i460
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB14_53
# BB#52:                                # %if.then5.i462
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB14_54
.LBB14_53:                              # %if.else.i465
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB14_54:                              # %if.end6.i474
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB14_56
# BB#55:                                # %if.then11.i475
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB14_56:                              # %get_cse_reg_info.exit477
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB14_57:                              # %cond.end25.i
	movl	%r14d, 20(%rax)
	movl	cached_regno(%rip), %ecx
	movq	cached_cse_reg_info(%rip), %rdx
.LBB14_58:                              # %delete_reg_equiv.exit
	andq	%r13, %rcx
	cmpq	%rcx, %r14
	jne	.LBB14_60
# BB#59:                                # %delete_reg_equiv.exit
	testq	%rdx, %rdx
	jne	.LBB14_70
.LBB14_60:                              # %cond.false26
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB14_64
# BB#61:
	movq	%rcx, %rdx
	.align	16, 0x90
.LBB14_63:                              # %for.body.i492
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rdx), %eax
	cmpq	%r14, %rax
	je	.LBB14_69
# BB#62:                                # %for.cond.i488
                                        #   in Loop: Header=BB14_63 Depth=1
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	jne	.LBB14_63
.LBB14_64:                              # %if.then4.i494
	movq	cse_reg_info_free_list(%rip), %rdx
	testq	%rdx, %rdx
	je	.LBB14_66
# BB#65:                                # %if.then5.i496
	movq	8(%rdx), %rax
	movq	%rax, cse_reg_info_free_list(%rip)
	jmp	.LBB14_67
.LBB14_66:                              # %if.else.i499
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	movq	%rax, %rdx
.LBB14_67:                              # %if.end6.i508
	movq	%rcx, (%rdx)
	movq	%rdx, reg_hash(,%rbx,8)
	movq	$1, %rax
	movl	%eax, 24(%rdx)
	movl	%r13d, 28(%rdx)
	movl	%r14d, 20(%rdx)
	movl	%r14d, 16(%rdx)
	movq	cse_reg_info_used_list(%rip), %rax
	movq	%rax, 8(%rdx)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rdx, cse_reg_info_used_list(%rip)
	jne	.LBB14_69
# BB#68:                                # %if.then11.i509
	movq	%rdx, cse_reg_info_used_list_end(%rip)
.LBB14_69:                              # %get_cse_reg_info.exit511
	movl	%r14d, cached_regno(%rip)
	movq	%rdx, cached_cse_reg_info(%rip)
.LBB14_70:                              # %cond.end28
	movl	24(%rdx), %eax
	incq	%rax
	cmpq	$53, %r14
	movl	%eax, 24(%rdx)
	jb	.LBB14_106
# BB#71:                                # %while.cond.preheader
	andq	%r13, %r15
	jmp	.LBB14_72
.LBB14_106:                             # %if.else
	movq	hard_regs_in_table(%rip), %rsi
	movq	$1, %rdi
	movq	%r14, %rcx
	shlq	%cl, %rdi
	movq	%rsi, %r9
	andq	%rdi, %r9
	movzbl	2(%r12), %eax
	movabsq	$4294967288, %r15       # imm = 0xFFFFFFF8
	movq	%r14, %rcx
	andq	%r15, %rcx
	cmpq	$8, %rcx
	je	.LBB14_110
# BB#107:                               # %if.else
	leaq	-21(%r14), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB14_110
# BB#108:                               # %if.else
	leaq	-45(%r14), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB14_110
# BB#109:                               # %if.else
	leaq	-29(%r14), %rcx
	andq	%r13, %rcx
	cmpq	$7, %rcx
	jbe	.LBB14_110
# BB#115:                               # %cond.false64
	cmpq	$24, %rax
	jne	.LBB14_116
# BB#118:                               # %cond.true78
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB14_120
.LBB14_105:                             # %remove_from_table.exit
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%rbx)
	movq	%rbx, free_element_chain(%rip)
.LBB14_72:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_80 Depth 2
                                        #     Child Loop BB14_75 Depth 2
                                        #     Child Loop BB14_89 Depth 2
                                        #     Child Loop BB14_96 Depth 2
                                        #     Child Loop BB14_101 Depth 2
	movl	(%r12), %eax
	movq	$16, %rcx
	movq	%rax, %r14
	shrq	%cl, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB14_78
# BB#73:                                # %if.then.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	table(,%r15,8), %rbx
	testq	%rbx, %rbx
	je	.LBB14_240
# BB#74:                                #   in Loop: Header=BB14_72 Depth=1
	movl	8(%r12), %eax
	.align	16, 0x90
.LBB14_75:                              # %for.body.i515
                                        #   Parent Loop BB14_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB14_77
# BB#76:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB14_75 Depth=2
	movl	8(%rcx), %ecx
	movq	%rax, %rdx
	andq	%r13, %rdx
	cmpq	%rdx, %rcx
	je	.LBB14_84
.LBB14_77:                              # %for.inc.i
                                        #   in Loop: Header=BB14_75 Depth=2
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB14_75
	jmp	.LBB14_240
.LBB14_78:                              # %if.else.i518
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	table(,%r15,8), %rbx
	testq	%rbx, %rbx
	je	.LBB14_240
# BB#79:                                #   in Loop: Header=BB14_72 Depth=1
	andq	$255, %r14
	.align	16, 0x90
.LBB14_80:                              # %for.body15.i
                                        #   Parent Loop BB14_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%rbx), %eax
	cmpq	%r14, %rax
	jne	.LBB14_83
# BB#81:                                # %land.lhs.true18.i
                                        #   in Loop: Header=BB14_80 Depth=2
	movq	(%rbx), %rsi
	cmpq	%r12, %rsi
	je	.LBB14_84
# BB#82:                                # %lor.lhs.false.i
                                        #   in Loop: Header=BB14_80 Depth=2
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	callq	exp_equiv_p
	testq	%r13, %rax
	jne	.LBB14_84
.LBB14_83:                              # %for.inc25.i
                                        #   in Loop: Header=BB14_80 Depth=2
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB14_80
	jmp	.LBB14_240
.LBB14_84:                              # %lookup_for_remove.exit
                                        #   in Loop: Header=BB14_72 Depth=1
	testq	%rbx, %rbx
	je	.LBB14_240
# BB#85:                                # %if.end.i523
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	$0, 48(%rbx)
	movq	32(%rbx), %rax
	movq	40(%rbx), %rcx
	testq	%rax, %rax
	je	.LBB14_87
# BB#86:                                # %if.then1.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	%rcx, 40(%rax)
.LBB14_87:                              # %if.end3.i
                                        #   in Loop: Header=BB14_72 Depth=1
	testq	%rcx, %rcx
	jne	.LBB14_241
# BB#88:                                # %while.cond.preheader.i
                                        #   in Loop: Header=BB14_72 Depth=1
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB14_90
	.align	16, 0x90
.LBB14_89:                              # %while.body.i
                                        #   Parent Loop BB14_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB14_89
	jmp	.LBB14_90
.LBB14_241:                             # %if.then5.i524
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	%rax, 32(%rcx)
.LBB14_90:                              # %if.end10.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	16(%rbx), %rax
	movq	24(%rbx), %rcx
	testq	%rax, %rax
	je	.LBB14_92
# BB#91:                                # %if.then14.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	%rcx, 24(%rax)
.LBB14_92:                              # %if.end16.i
                                        #   in Loop: Header=BB14_72 Depth=1
	testq	%rcx, %rcx
	jne	.LBB14_93
# BB#94:                                # %if.else20.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	table(,%r15,8), %rcx
	cmpq	%rbx, %rcx
	movq	$-256, %rcx
	jne	.LBB14_96
# BB#95:                                # %if.then22.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	%rax, table(,%r15,8)
	jmp	.LBB14_99
	.align	16, 0x90
.LBB14_96:                              # %for.body.i528
                                        #   Parent Loop BB14_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	table+256(%rcx), %rdx
	cmpq	%rbx, %rdx
	jne	.LBB14_98
# BB#97:                                # %if.then30.i
                                        #   in Loop: Header=BB14_96 Depth=2
	movq	%rax, table+256(%rcx)
.LBB14_98:                              # %for.inc.i529
                                        #   in Loop: Header=BB14_96 Depth=2
	addq	$8, %rcx
	jne	.LBB14_96
	jmp	.LBB14_99
.LBB14_93:                              # %if.then18.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	%rax, 16(%rcx)
.LBB14_99:                              # %if.end35.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	56(%rbx), %rax
	testq	%rax, %rax
	je	.LBB14_105
# BB#100:                               # %if.end35.i
                                        #   in Loop: Header=BB14_72 Depth=1
	cmpq	%rbx, %rax
	movq	%rax, %rdx
	je	.LBB14_105
	.align	16, 0x90
.LBB14_101:                             # %while.cond41.i
                                        #   Parent Loop BB14_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%rbx, %rdx
	jne	.LBB14_101
# BB#102:                               # %while.end46.i
                                        #   in Loop: Header=BB14_72 Depth=1
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB14_104
# BB#103:                               # %while.end46.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	%rax, %rdx
.LBB14_104:                             # %while.end46.i
                                        #   in Loop: Header=BB14_72 Depth=1
	movq	%rdx, 56(%rcx)
	jmp	.LBB14_105
.LBB14_110:                             # %cond.true51
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB14_120
# BB#111:                               # %lor.rhs
	cmpq	$6, %rcx
	jne	.LBB14_112
# BB#113:                               # %lor.rhs
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB14_120
.LBB14_116:                             # %cond.false64
	cmpq	$18, %rax
	jne	.LBB14_119
# BB#117:                               # %cond.true69
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB14_120
.LBB14_112:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB14_120
.LBB14_119:                             # %cond.false82
	movl	target_flags(%rip), %ebx
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	leaq	3(%rax,%rbx), %rax
	addq	$4, %rbx
	cqto
	idivq	%rbx
.LBB14_120:                             # %cond.end99
	addq	%r14, %rax
	andq	%r13, %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	notq	%rdi
	andq	%rdi, %rsi
	leaq	1(%r14), %r12
	movq	%r14, (%rsp)            # 8-byte Spill
	movq	%rsi, hard_regs_in_table(%rip)
	movq	%r12, %r14
	andq	%r13, %r14
	cmpq	%rax, %r14
	jae	.LBB14_166
	jmp	.LBB14_121
	.align	16, 0x90
.LBB14_242:                             # %cond.end123.for.body_crit_edge
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	hard_regs_in_table(%rip), %rsi
	incq	%r14
.LBB14_121:                             # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_127 Depth 2
                                        #     Child Loop BB14_146 Depth 2
                                        #     Child Loop BB14_159 Depth 2
	movq	%r9, %rax
	movq	$1, %rdx
	movq	%r14, %rcx
	shlq	%cl, %rdx
	movq	%rsi, %r9
	andq	%rdx, %r9
	orq	%rax, %r9
	notq	%rdx
	movl	cached_regno(%rip), %edi
	andq	%rsi, %rdx
	movq	%rdx, hard_regs_in_table(%rip)
	movq	%r14, %r15
	andq	%r13, %r15
	cmpq	%r15, %rdi
	jne	.LBB14_123
# BB#122:                               # %for.body
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB14_133
.LBB14_123:                             # %cond.false.i570
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	$7, %rcx
	movq	%r14, %r13
	shrq	%cl, %r13
	xorq	%r14, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB14_124
	.align	16, 0x90
.LBB14_127:                             # %for.body.i739
                                        #   Parent Loop BB14_121 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB14_128
# BB#126:                               # %for.cond.i735
                                        #   in Loop: Header=BB14_127 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB14_127
.LBB14_124:                             # %if.then4.i741
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB14_125
# BB#129:                               # %if.else.i746
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	$32, %rdi
	movq	%r9, %rbx
	callq	xmalloc
	movq	%rbx, %r9
	movq	reg_hash(,%r13,8), %rcx
	jmp	.LBB14_130
.LBB14_125:                             # %if.then5.i743
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB14_130:                             # %if.end6.i755
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movl	%r13d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB14_132
# BB#131:                               # %if.then11.i756
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
	jmp	.LBB14_132
.LBB14_128:                             #   in Loop: Header=BB14_121 Depth=1
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
.LBB14_132:                             # %get_cse_reg_info.exit758
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	%r14, %rdi
.LBB14_133:                             # %cond.end.i574
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	20(%rax), %esi
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%r15, %rsi
	je	.LBB14_153
# BB#134:                               # %if.end.i580
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	reg_eqv_table(%rip), %rdi
	movl	(%rdi,%r14,8), %r8d
	movq	qty_table(%rip), %rsi
	movslq	4(%rdi,%r14,8), %rbx
	movq	$32, %rcx
	movq	%r8, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%r13, %r8
	jne	.LBB14_135
# BB#136:                               # %if.else.i585
                                        #   in Loop: Header=BB14_121 Depth=1
	leaq	(%rdx,%rdx,2), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movl	%ebx, 32(%rsi,%rax)
	jmp	.LBB14_137
.LBB14_135:                             # %if.then7.i583
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	%ebx, 4(%rdi,%rax,8)
.LBB14_137:                             # %if.end11.i587
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	%rbx, %rax
	andq	%r13, %rax
	cmpq	%r13, %rax
	jne	.LBB14_138
# BB#139:                               # %if.else17.i592
                                        #   in Loop: Header=BB14_121 Depth=1
	leaq	(%rdx,%rdx,2), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movl	%r8d, 28(%rsi,%rax)
	jmp	.LBB14_140
.LBB14_138:                             # %if.then13.i590
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	%r8d, (%rdi,%rbx,8)
.LBB14_140:                             # %if.end18.i596
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%r15, %rax
	jne	.LBB14_142
# BB#141:                               # %if.end18.i596
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB14_152
.LBB14_142:                             # %cond.false23.i597
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	$7, %rcx
	movq	%r14, %r13
	shrq	%cl, %r13
	xorq	%r14, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB14_143
	.align	16, 0x90
.LBB14_146:                             # %for.body.i616
                                        #   Parent Loop BB14_121 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB14_147
# BB#145:                               # %for.cond.i612
                                        #   in Loop: Header=BB14_146 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB14_146
.LBB14_143:                             # %if.then4.i618
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%r9, %rbx
	testq	%rax, %rax
	jne	.LBB14_144
# BB#148:                               # %if.else.i623
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r13,8), %rcx
	jmp	.LBB14_149
.LBB14_144:                             # %if.then5.i620
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB14_149:                             # %if.end6.i632
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movl	%r13d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	movq	%rbx, %r9
	jne	.LBB14_151
# BB#150:                               # %if.then11.i633
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
	jmp	.LBB14_151
.LBB14_147:                             #   in Loop: Header=BB14_121 Depth=1
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
.LBB14_151:                             # %get_cse_reg_info.exit635
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB14_152:                             # %cond.end25.i600
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	%r14d, 20(%rax)
	movl	cached_regno(%rip), %edi
	movq	cached_cse_reg_info(%rip), %rax
.LBB14_153:                             # %delete_reg_equiv.exit601
                                        #   in Loop: Header=BB14_121 Depth=1
	andq	%r13, %rdi
	cmpq	%rdi, %r15
	jne	.LBB14_155
# BB#154:                               # %delete_reg_equiv.exit601
                                        #   in Loop: Header=BB14_121 Depth=1
	testq	%rax, %rax
	jne	.LBB14_164
.LBB14_155:                             # %cond.false121
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB14_156
	.align	16, 0x90
.LBB14_159:                             # %for.body.i650
                                        #   Parent Loop BB14_121 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB14_163
# BB#158:                               # %for.cond.i646
                                        #   in Loop: Header=BB14_159 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB14_159
.LBB14_156:                             # %if.then4.i652
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%r9, %r15
	testq	%rax, %rax
	jne	.LBB14_157
# BB#160:                               # %if.else.i657
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB14_161
.LBB14_157:                             # %if.then5.i654
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB14_161:                             # %if.end6.i666
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	movq	%r15, %r9
	jne	.LBB14_163
# BB#162:                               # %if.then11.i667
                                        #   in Loop: Header=BB14_121 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB14_163:                             # %get_cse_reg_info.exit669
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB14_164:                             # %cond.end123
                                        #   in Loop: Header=BB14_121 Depth=1
	movl	24(%rax), %ecx
	incq	%rcx
	incq	%r12
	movl	%ecx, 24(%rax)
	movq	%r12, %rax
	andq	%r13, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB14_242
# BB#165:
	movabsq	$4294967288, %r15       # imm = 0xFFFFFFF8
.LBB14_166:                             # %for.end
	testq	%r9, %r9
	movq	(%rsp), %r14            # 8-byte Reload
	movq	8(%rsp), %r12           # 8-byte Reload
	je	.LBB14_240
# BB#167:
	xorq	%r10, %r10
	movabsq	$0, %r9
	movabsq	$1, %r8
	.align	16, 0x90
.LBB14_168:                             # %for.body133
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_169 Depth 2
                                        #       Child Loop BB14_191 Depth 3
                                        #       Child Loop BB14_198 Depth 3
                                        #       Child Loop BB14_203 Depth 3
	movq	table(,%r10,8), %rdi
	jmp	.LBB14_169
.LBB14_207:                             # %if.end54.i723
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%rbx)
	movq	%rbx, free_element_chain(%rip)
	.align	16, 0x90
.LBB14_169:                             # %for.body133
                                        #   Parent Loop BB14_168 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_191 Depth 3
                                        #       Child Loop BB14_198 Depth 3
                                        #       Child Loop BB14_203 Depth 3
	testq	%rdi, %rdi
	je	.LBB14_239
# BB#170:                               # %for.body138
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rdi, %rbx
	movq	(%rbx), %rcx
	movl	(%rcx), %eax
	movq	16(%rbx), %rdi
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB14_169
# BB#171:                               # %lor.lhs.false143
                                        #   in Loop: Header=BB14_169 Depth=2
	movl	8(%rcx), %esi
	cmpq	$52, %rsi
	ja	.LBB14_169
# BB#172:                               # %if.end
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rsi, %rdx
	andq	%r15, %rdx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$8, %rdx
	je	.LBB14_176
# BB#173:                               # %if.end
                                        #   in Loop: Header=BB14_169 Depth=2
	leaq	-21(%rsi), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB14_176
# BB#174:                               # %if.end
                                        #   in Loop: Header=BB14_169 Depth=2
	leaq	-45(%rsi), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB14_176
# BB#175:                               # %if.end
                                        #   in Loop: Header=BB14_169 Depth=2
	leaq	-29(%rsi), %rcx
	andq	%r13, %rcx
	cmpq	$7, %rcx
	jbe	.LBB14_176
# BB#180:                               # %cond.false198
                                        #   in Loop: Header=BB14_169 Depth=2
	cmpq	$24, %rax
	jne	.LBB14_181
# BB#183:                               # %cond.true216
                                        #   in Loop: Header=BB14_169 Depth=2
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB14_185
.LBB14_176:                             # %cond.true178
                                        #   in Loop: Header=BB14_169 Depth=2
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB14_185
# BB#177:                               # %lor.rhs187
                                        #   in Loop: Header=BB14_169 Depth=2
	cmpq	$6, %rcx
	movq	%r9, %rax
	jne	.LBB14_179
# BB#178:                               # %lor.rhs187
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%r8, %rax
.LBB14_179:                             # %lor.rhs187
                                        #   in Loop: Header=BB14_169 Depth=2
	incq	%rax
	jmp	.LBB14_185
.LBB14_181:                             # %cond.false198
                                        #   in Loop: Header=BB14_169 Depth=2
	cmpq	$18, %rax
	jne	.LBB14_184
# BB#182:                               # %cond.true205
                                        #   in Loop: Header=BB14_169 Depth=2
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB14_185
.LBB14_184:                             # %cond.false220
                                        #   in Loop: Header=BB14_169 Depth=2
	movl	target_flags(%rip), %r11d
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %r11
	andq	$4, %r11
	leaq	3(%rax,%r11), %rax
	addq	$4, %r11
	cqto
	idivq	%r11
.LBB14_185:                             # %cond.end241
                                        #   in Loop: Header=BB14_169 Depth=2
	cmpq	%r12, %rsi
	jae	.LBB14_169
# BB#186:                               # %cond.end241
                                        #   in Loop: Header=BB14_169 Depth=2
	addq	%rsi, %rax
	andq	%r13, %rax
	cmpq	%r14, %rax
	jbe	.LBB14_169
# BB#187:                               # %if.end.i675
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	$0, 48(%rbx)
	movq	32(%rbx), %rax
	movq	40(%rbx), %rcx
	testq	%rax, %rax
	je	.LBB14_189
# BB#188:                               # %if.then1.i677
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rcx, 40(%rax)
.LBB14_189:                             # %if.end3.i679
                                        #   in Loop: Header=BB14_169 Depth=2
	testq	%rcx, %rcx
	jne	.LBB14_243
# BB#190:                               # %while.cond.preheader.i680
                                        #   in Loop: Header=BB14_169 Depth=2
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB14_192
	.align	16, 0x90
.LBB14_191:                             # %while.body.i687
                                        #   Parent Loop BB14_168 Depth=1
                                        #     Parent Loop BB14_169 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB14_191
	jmp	.LBB14_192
.LBB14_243:                             # %if.then5.i682
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rax, 32(%rcx)
.LBB14_192:                             # %if.end10.i691
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	24(%rbx), %rax
	testq	%rdi, %rdi
	je	.LBB14_194
# BB#193:                               # %if.then14.i693
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rax, 24(%rdi)
.LBB14_194:                             # %if.end16.i695
                                        #   in Loop: Header=BB14_169 Depth=2
	testq	%rax, %rax
	jne	.LBB14_195
# BB#196:                               # %if.else20.i701
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	table(,%r10,8), %rax
	cmpq	%rbx, %rax
	movq	$-256, %rax
	jne	.LBB14_198
# BB#197:                               # %if.then22.i702
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rdi, table(,%r10,8)
	jmp	.LBB14_201
	.align	16, 0x90
.LBB14_198:                             # %for.body.i706
                                        #   Parent Loop BB14_168 Depth=1
                                        #     Parent Loop BB14_169 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	table+256(%rax), %rcx
	cmpq	%rbx, %rcx
	jne	.LBB14_200
# BB#199:                               # %if.then30.i707
                                        #   in Loop: Header=BB14_198 Depth=3
	movq	%rdi, table+256(%rax)
.LBB14_200:                             # %for.inc.i710
                                        #   in Loop: Header=BB14_198 Depth=3
	addq	$8, %rax
	jne	.LBB14_198
	jmp	.LBB14_201
.LBB14_195:                             # %if.then18.i697
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rdi, 16(%rax)
.LBB14_201:                             # %if.end35.i715
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	56(%rbx), %rax
	testq	%rax, %rax
	je	.LBB14_207
# BB#202:                               # %if.end35.i715
                                        #   in Loop: Header=BB14_169 Depth=2
	cmpq	%rbx, %rax
	movq	%rax, %rdx
	je	.LBB14_207
	.align	16, 0x90
.LBB14_203:                             # %while.cond41.i719
                                        #   Parent Loop BB14_168 Depth=1
                                        #     Parent Loop BB14_169 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%rbx, %rdx
	jne	.LBB14_203
# BB#204:                               # %while.end46.i722
                                        #   in Loop: Header=BB14_169 Depth=2
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB14_206
# BB#205:                               # %while.end46.i722
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rax, %rdx
.LBB14_206:                             # %while.end46.i722
                                        #   in Loop: Header=BB14_169 Depth=2
	movq	%rdx, 56(%rcx)
	jmp	.LBB14_207
	.align	16, 0x90
.LBB14_239:                             # %for.inc253
                                        #   in Loop: Header=BB14_168 Depth=1
	incq	%r10
	cmpq	$32, %r10
	jne	.LBB14_168
.LBB14_240:                             # %return
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB14_238:                             # %sw.default
	movabsq	$.L.str4, %rax
	movabsq	$.L__FUNCTION__.invalidate, %rcx
	movq	$1971, %rsi             # imm = 0x7B3
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp214:
	.size	invalidate, .Ltmp214-invalidate
	.cfi_endproc

	.align	16, 0x90
	.type	cse_set_around_loop,@function
cse_set_around_loop:                    # @cse_set_around_loop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp221:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp222:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp223:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp224:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp225:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp226:
	.cfi_def_cfa_offset 96
.Ltmp227:
	.cfi_offset %rbx, -48
.Ltmp228:
	.cfi_offset %r12, -40
.Ltmp229:
	.cfi_offset %r13, -32
.Ltmp230:
	.cfi_offset %r14, -24
.Ltmp231:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movzbl	(%r14), %eax
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	cmpq	$47, %rax
	jne	.LBB15_13
# BB#1:                                 # %land.lhs.true
	movq	8(%r14), %rax
	movl	(%rax), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$59, %rax
	je	.LBB15_13
# BB#2:                                 # %land.lhs.true
	cmpq	$69, %rax
	je	.LBB15_13
# BB#3:                                 # %land.lhs.true11
	movq	16(%r14), %r15
	movzbl	(%r15), %eax
	cmpq	$61, %rax
	je	.LBB15_13
# BB#4:                                 # %cond.false49
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%r15, %rdi
	callq	canon_hash
	andq	$31, %rax
	movq	table(,%rax,8), %rbx
	testq	%rbx, %rbx
	je	.LBB15_13
# BB#5:
	movq	8(%r14), %rax
	leaq	16(%r14), %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movzbl	2(%rax), %r12d
	movabsq	$0, %r13
	.align	16, 0x90
.LBB15_6:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%rbx), %eax
	cmpq	%r12, %rax
	jne	.LBB15_12
# BB#7:                                 # %land.lhs.true.i
                                        #   in Loop: Header=BB15_6 Depth=1
	movq	(%rbx), %rsi
	movzbl	(%r15), %eax
	cmpq	%r15, %rsi
	jne	.LBB15_9
# BB#8:                                 # %land.lhs.true.i
                                        #   in Loop: Header=BB15_6 Depth=1
	cmpq	$61, %rax
	je	.LBB15_16
.LBB15_9:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB15_6 Depth=1
	cmpq	$61, %rax
	movq	%r13, %rdx
	je	.LBB15_11
# BB#10:                                # %lor.lhs.false.i
                                        #   in Loop: Header=BB15_6 Depth=1
	movabsq	$1, %rdx
.LBB15_11:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB15_6 Depth=1
	movq	%r15, %rdi
	callq	exp_equiv_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB15_16
.LBB15_12:                              # %for.inc.i
                                        #   in Loop: Header=BB15_6 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB15_6
	jmp	.LBB15_13
.LBB15_16:                              # %lookup.exit
	testq	%rbx, %rbx
	je	.LBB15_13
# BB#17:                                # %if.then69
	movq	48(%rbx), %rbx
	jmp	.LBB15_18
.LBB15_63:                              # %for.inc232
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	32(%rbx), %rbx
.LBB15_18:                              # %if.then69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_41 Depth 2
                                        #     Child Loop BB15_52 Depth 2
	testq	%rbx, %rbx
	je	.LBB15_13
# BB#19:                                # %for.body
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	(%rbx), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	movabsq	$0, %rdx
	je	.LBB15_21
# BB#20:                                # %for.body
                                        #   in Loop: Header=BB15_18 Depth=1
	movabsq	$1, %rdx
.LBB15_21:                              # %for.body
                                        #   in Loop: Header=BB15_18 Depth=1
	testq	$268435456, %rax        # imm = 0x10000000
	je	.LBB15_63
# BB#22:                                # %for.body
                                        #   in Loop: Header=BB15_18 Depth=1
	testq	%rdx, %rdx
	jne	.LBB15_63
# BB#23:                                # %land.lhs.true80
                                        #   in Loop: Header=BB15_18 Depth=1
	xorq	%r12, %r12
	cmpq	$61, %rcx
	movabsq	$0, %r13
	je	.LBB15_31
# BB#24:                                # %cond.false86
                                        #   in Loop: Header=BB15_18 Depth=1
	cmpq	$63, %rcx
	jne	.LBB15_30
# BB#25:                                # %land.lhs.true.i358
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	8(%r15), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB15_30
# BB#26:                                # %land.lhs.true4.i
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB15_30
# BB#27:                                # %land.lhs.true9.i
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB15_30
# BB#28:                                # %land.lhs.true19.i
                                        #   in Loop: Header=BB15_18 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB15_30
# BB#29:                                # %land.lhs.true36.i
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	%r15, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movabsq	$0, %r13
	jne	.LBB15_31
.LBB15_30:                              # %cond.false.i
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	rtx_cost
	movq	%rax, %r13
	addq	%r13, %r13
.LBB15_31:                              # %cond.end89
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	je	.LBB15_39
# BB#32:                                # %cond.end89
                                        #   in Loop: Header=BB15_18 Depth=1
	cmpq	$63, %rcx
	jne	.LBB15_38
# BB#33:                                # %land.lhs.true.i370
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	8(%r15), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB15_38
# BB#34:                                # %land.lhs.true4.i376
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB15_38
# BB#35:                                # %land.lhs.true9.i382
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB15_38
# BB#36:                                # %land.lhs.true19.i386
                                        #   in Loop: Header=BB15_18 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB15_38
# BB#37:                                # %land.lhs.true36.i389
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	%r15, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB15_39
.LBB15_38:                              # %cond.false.i392
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	rtx_cost
	movq	%rax, %r12
	addq	%r12, %r12
.LBB15_39:                              # %cond.end103
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	movq	$32, %rcx
	shlq	%cl, %r13
	movq	$32, %rcx
	sarq	%cl, %r13
	cmpq	%r12, %r13
	jge	.LBB15_63
# BB#40:                                # %if.then106
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	32(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB15_41
.LBB15_61:                              # %for.inc228
                                        #   in Loop: Header=BB15_41 Depth=2
	movq	%r12, %rdi
.LBB15_41:                              # %if.then106
                                        #   Parent Loop BB15_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	prev_nonnote_insn
	movq	%rax, %r12
	testq	%r12, %r12
	je	.LBB15_63
# BB#42:                                # %land.lhs.true110
                                        #   in Loop: Header=BB15_41 Depth=2
	movzbl	(%r12), %eax
	cmpq	$34, %rax
	je	.LBB15_63
# BB#43:                                # %land.lhs.true110
                                        #   in Loop: Header=BB15_41 Depth=2
	cmpq	$36, %rax
	je	.LBB15_63
# BB#44:                                # %for.body117
                                        #   in Loop: Header=BB15_41 Depth=2
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB15_61
# BB#45:                                # %cond.true123
                                        #   in Loop: Header=BB15_41 Depth=2
	movq	32(%r12), %r13
	movzbl	(%r13), %eax
	cmpq	$47, %rax
	je	.LBB15_47
# BB#46:                                # %cond.false135
                                        #   in Loop: Header=BB15_41 Depth=2
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	single_set_2
	movq	%rax, %r13
.LBB15_47:                              # %cond.end143
                                        #   in Loop: Header=BB15_41 Depth=2
	testq	%r13, %r13
	je	.LBB15_61
# BB#48:                                # %land.lhs.true147
                                        #   in Loop: Header=BB15_41 Depth=2
	movq	8(%r13), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB15_61
# BB#49:                                # %land.lhs.true155
                                        #   in Loop: Header=BB15_41 Depth=2
	movl	72(%rbx), %edx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	%rdx, %rax
	jne	.LBB15_61
# BB#50:                                # %land.lhs.true164
                                        #   in Loop: Header=BB15_41 Depth=2
	movq	16(%r13), %rdi
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB15_61
# BB#51:                                # %if.then173
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, 40(%rsp)
	movq	32(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %r12
	movq	%r12, %r15
	je	.LBB15_56
.LBB15_52:                              # %for.body180
                                        #   Parent Loop BB15_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r15), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB15_54
# BB#53:                                # %if.then188
                                        #   in Loop: Header=BB15_52 Depth=2
	movq	32(%r15), %rax
	movq	%rax, %rdi
	movabsq	$cse_check_loop_start, %rax
	movq	%rax, %rsi
	leaq	40(%rsp), %rax
	movq	%rax, %rdx
	callq	note_stores
.LBB15_54:                              # %for.inc
                                        #   in Loop: Header=BB15_52 Depth=2
	movq	24(%r15), %r15
	movq	32(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %r15
	jne	.LBB15_52
# BB#55:                                # %for.cond177.for.end_crit_edge
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	40(%rsp), %rax
.LBB15_56:                              # %for.end
                                        #   in Loop: Header=BB15_18 Depth=1
	testq	%rax, %rax
	je	.LBB15_63
# BB#57:                                # %land.lhs.true196
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	(%rbx), %rax
	xorq	%rcx, %rcx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rdx
	callq	validate_change
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB15_63
# BB#58:                                # %if.then203
                                        #   in Loop: Header=BB15_18 Depth=1
	callq	max_reg_num
	movq	(%rbx), %rcx
	movq	8(%r13), %rdx
	movq	%rax, (%rsp)            # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, (%rsp)            # 8-byte Folded Spill
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	callq	gen_move_insn
	movq	%rax, %r15
	callq	max_reg_num
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rax, (%rsp)            # 8-byte Folded Reload
	jne	.LBB15_59
# BB#62:                                # %if.else
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	emit_insn_after
	jmp	.LBB15_63
.LBB15_59:                              # %if.then213
                                        #   in Loop: Header=BB15_18 Depth=1
	movq	16(%r13), %rax
	xorq	%rcx, %rcx
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rdx
	callq	validate_change
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB15_63
# BB#60:                                # %if.then222
	movabsq	$.L.str4, %rax
	movabsq	$.L__FUNCTION__.cse_set_around_loop, %rcx
	movq	$6786, %rsi             # imm = 0x1A82
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB15_13:                              # %if.end235
	movq	8(%r14), %rdi
	callq	addr_affects_sp_p
	movq	8(%r14), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB15_65
# BB#14:                                # %if.end235
	addq	$-61, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$5, %rcx
	ja	.LBB15_68
# BB#15:                                # %if.end235
	jmpq	*.LJTI15_0(,%rcx,8)
.LBB15_64:                              # %if.then262
	xorq	%rsi, %rsi
	jmp	.LBB15_67
.LBB15_65:                              # %if.end235
	cmpq	$133, %rax
	jne	.LBB15_68
.LBB15_66:                              # %if.then282
	movq	8(%rdi), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
.LBB15_67:                              # %if.end296
	callq	invalidate
.LBB15_68:                              # %if.end296
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp232:
	.size	cse_set_around_loop, .Ltmp232-cse_set_around_loop
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI15_0:
	.quad	.LBB15_64
	.quad	.LBB15_68
	.quad	.LBB15_64
	.quad	.LBB15_66
	.quad	.LBB15_68
	.quad	.LBB15_64

	.text
	.align	16, 0x90
	.type	canon_hash,@function
canon_hash:                             # @canon_hash
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp239:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp240:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp241:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp242:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp243:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp244:
	.cfi_def_cfa_offset 64
.Ltmp245:
	.cfi_offset %rbx, -48
.Ltmp246:
	.cfi_offset %r12, -40
.Ltmp247:
	.cfi_offset %r13, -32
.Ltmp248:
	.cfi_offset %r14, -24
.Ltmp249:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	xorq	%r12, %r12
	testq	%r14, %r14
	je	.LBB16_129
# BB#1:
	movq	%rsi, (%rsp)            # 8-byte Spill
.LBB16_2:                               # %if.end
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_90 Depth 2
                                        #     Child Loop BB16_94 Depth 2
                                        #     Child Loop BB16_99 Depth 2
                                        #       Child Loop BB16_102 Depth 3
                                        #     Child Loop BB16_107 Depth 2
                                        #     Child Loop BB16_82 Depth 2
                                        #       Child Loop BB16_83 Depth 3
                                        #       Child Loop BB16_127 Depth 3
                                        #       Child Loop BB16_112 Depth 3
	movl	(%r14), %eax
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$95, %rdx
	jg	.LBB16_79
# BB#3:                                 # %if.end
                                        #   in Loop: Header=BB16_2 Depth=1
	leaq	-41(%rdx), %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	$28, %rcx
	ja	.LBB16_80
# BB#4:                                 # %if.end
                                        #   in Loop: Header=BB16_2 Depth=1
	jmpq	*.LJTI16_0(,%rcx,8)
.LBB16_61:                              # %sw.bb267
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	8(%r14), %rcx
	movl	(%rcx), %esi
	movq	%rsi, %rdi
	andq	$134283263, %rdi        # imm = 0x800FFFF
	cmpq	$66, %rdi
	jne	.LBB16_80
# BB#62:                                # %if.then283
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	8(%rcx), %rdi
	testq	$67108864, %rsi         # imm = 0x4000000
	je	.LBB16_77
# BB#63:                                # %lor.lhs.false292
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+24(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB16_77
# BB#64:                                # %lor.lhs.false292
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+32(%rip), %rcx
	cmpq	%rcx, %rdi
	je	.LBB16_77
# BB#65:                                # %lor.lhs.false304
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+40(%rip), %rdx
	cmpq	%rdx, %rdi
	jne	.LBB16_67
# BB#66:                                # %lor.lhs.false304
                                        #   in Loop: Header=BB16_2 Depth=1
	movzbl	fixed_regs+16(%rip), %edx
	testq	$255, %rdx
	jne	.LBB16_77
.LBB16_67:                              # %lor.lhs.false313
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+56(%rip), %rdx
	cmpq	%rdx, %rdi
	je	.LBB16_77
# BB#68:                                # %lor.lhs.false313
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+48(%rip), %rsi
	cmpq	%rsi, %rdi
	je	.LBB16_77
# BB#69:                                # %lor.lhs.false325
                                        #   in Loop: Header=BB16_2 Depth=1
	movzbl	(%rdi), %r8d
	cmpq	$70, %r8
	je	.LBB16_77
# BB#70:                                # %lor.lhs.false325
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	$75, %r8
	jne	.LBB16_78
# BB#71:                                # %land.lhs.true333
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	16(%rdi), %rbx
	movzbl	(%rbx), %ebx
	cmpq	$54, %rbx
	jne	.LBB16_78
# BB#72:                                # %land.lhs.true344
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	8(%rdi), %rbx
	cmpq	%rax, %rbx
	je	.LBB16_77
# BB#73:                                # %land.lhs.true344
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	%rcx, %rbx
	je	.LBB16_77
# BB#74:                                # %lor.lhs.false371
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	%rdx, %rbx
	je	.LBB16_77
# BB#75:                                # %lor.lhs.false371
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	%rsi, %rbx
	je	.LBB16_77
# BB#76:                                # %lor.lhs.false371
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	$70, %r8
	jne	.LBB16_78
.LBB16_77:                              # %if.then397
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	$1, %rax
	movb	%al, hash_arg_in_memory(%rip)
.LBB16_78:                              # %if.end398
                                        #   in Loop: Header=BB16_2 Depth=1
	addq	$114, %r12
	jmp	.LBB16_60
	.align	16, 0x90
.LBB16_79:                              # %if.end
                                        #   in Loop: Header=BB16_2 Depth=1
	leaq	-96(%rdx), %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	$6, %rcx
	jb	.LBB16_14
.LBB16_80:                              # %sw.epilog
                                        #   in Loop: Header=BB16_2 Depth=1
	movzbl	rtx_length(%rdx), %r13d
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	addq	%rdx, %r12
	addq	%rax, %r12
	testq	%r13, %r13
	je	.LBB16_129
# BB#81:                                # %for.body507.lr.ph.lr.ph
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	rtx_format(,%rdx,8), %rdx
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	.align	16, 0x90
.LBB16_82:                              # %for.body507.lr.ph
                                        #   Parent Loop BB16_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_83 Depth 3
                                        #       Child Loop BB16_127 Depth 3
                                        #       Child Loop BB16_112 Depth 3
	movq	$32, %rcx
	shlq	%cl, %r13
	movq	$32, %rcx
	sarq	%cl, %r13
	decq	%r13
.LBB16_83:                              # %for.body507
                                        #   Parent Loop BB16_2 Depth=1
                                        #     Parent Loop BB16_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movsbq	(%rdx,%r13), %rax
	cmpq	$68, %rax
	jg	.LBB16_109
# BB#84:                                # %for.body507
                                        #   in Loop: Header=BB16_83 Depth=3
	andq	$255, %rax
	cmpq	$48, %rax
	jne	.LBB16_85
.LBB16_119:                             # %for.cond504.backedge
                                        #   in Loop: Header=BB16_83 Depth=3
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	decq	%r13
	testq	%rax, %rax
	jg	.LBB16_83
	jmp	.LBB16_129
	.align	16, 0x90
.LBB16_109:                             # %for.body507
                                        #   in Loop: Header=BB16_83 Depth=3
	cmpq	$100, %rax
	jle	.LBB16_110
# BB#113:                               # %for.body507
                                        #   in Loop: Header=BB16_83 Depth=3
	cmpq	$114, %rax
	jle	.LBB16_114
# BB#117:                               # %for.body507
                                        #   in Loop: Header=BB16_83 Depth=3
	andq	$255, %rax
	cmpq	$115, %rax
	je	.LBB16_124
# BB#118:                               # %for.body507
                                        #   in Loop: Header=BB16_83 Depth=3
	cmpq	$116, %rax
	je	.LBB16_119
	jmp	.LBB16_85
	.align	16, 0x90
.LBB16_110:                             # %for.body507
                                        #   in Loop: Header=BB16_82 Depth=2
	andq	$255, %rax
	cmpq	$69, %rax
	jne	.LBB16_85
# BB#111:                               # %for.cond532.preheader
                                        #   in Loop: Header=BB16_82 Depth=2
	movq	8(%r14,%r13,8), %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	movq	$1, %r15
	movq	%r12, %rbx
	jle	.LBB16_123
	.align	16, 0x90
.LBB16_112:                             # %for.body540
                                        #   Parent Loop BB16_2 Depth=1
                                        #     Parent Loop BB16_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rax,%r15,8), %rdi
	xorq	%rsi, %rsi
	callq	canon_hash
	movq	%rax, %r12
	movq	8(%r14,%r13,8), %rax
	addq	%rbx, %r12
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%r15, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%r15
	cmpq	%rdx, %rsi
	movq	%r12, %rbx
	jl	.LBB16_112
	jmp	.LBB16_123
	.align	16, 0x90
.LBB16_114:                             # %for.body507
                                        #   in Loop: Header=BB16_82 Depth=2
	andq	$255, %rax
	cmpq	$101, %rax
	jne	.LBB16_115
# BB#120:                               # %if.then513
                                        #   in Loop: Header=BB16_82 Depth=2
	movq	8(%r14,%r13,8), %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r13
	je	.LBB16_60
# BB#121:                               # %if.end522
                                        #   in Loop: Header=BB16_82 Depth=2
	xorq	%rsi, %rsi
	callq	canon_hash
	jmp	.LBB16_122
.LBB16_124:                             # %if.then559
                                        #   in Loop: Header=BB16_82 Depth=2
	movq	8(%r14,%r13,8), %rcx
	xorq	%rax, %rax
	testq	%rcx, %rcx
	je	.LBB16_122
# BB#125:                               # %while.cond.preheader.i
                                        #   in Loop: Header=BB16_82 Depth=2
	movzbl	(%rcx), %edx
	testq	%rdx, %rdx
	je	.LBB16_122
# BB#126:                               # %while.body.i.preheader
                                        #   in Loop: Header=BB16_82 Depth=2
	incq	%rcx
	xorq	%rax, %rax
	.align	16, 0x90
.LBB16_127:                             # %while.body.i
                                        #   Parent Loop BB16_2 Depth=1
                                        #     Parent Loop BB16_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andq	$255, %rdx
	addq	%rdx, %rax
	movzbl	(%rcx), %edx
	incq	%rcx
	testq	%rdx, %rdx
	jne	.LBB16_127
	jmp	.LBB16_122
.LBB16_115:                             # %for.body507
                                        #   in Loop: Header=BB16_82 Depth=2
	cmpq	$105, %rax
	jne	.LBB16_85
# BB#116:                               # %if.then572
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	8(%r14,%r13,8), %eax
.LBB16_122:                             # %for.cond504.outer.backedge
                                        #   in Loop: Header=BB16_82 Depth=2
	addq	%rax, %r12
.LBB16_123:                             # %for.cond504.outer.backedge
                                        #   in Loop: Header=BB16_82 Depth=2
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	8(%rsp), %rdx           # 8-byte Reload
	jg	.LBB16_82
	jmp	.LBB16_129
.LBB16_28:                              # %sw.bb39
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	8(%r14), %rcx
	movzbl	(%rcx), %esi
	cmpq	$61, %rsi
	jne	.LBB16_80
	jmp	.LBB16_29
.LBB16_41:                              # %sw.bb139
                                        #   in Loop: Header=BB16_2 Depth=1
	testq	$134217728, %rax        # imm = 0x8000000
	jne	.LBB16_14
# BB#42:                                # %sw.bb139
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$3342336, %rcx          # imm = 0x330000
	je	.LBB16_14
# BB#43:                                # %if.end151
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	8(%r14), %rdi
	testq	$67108864, %rax         # imm = 0x4000000
	je	.LBB16_58
# BB#44:                                # %lor.lhs.false156
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+24(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB16_58
# BB#45:                                # %lor.lhs.false156
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+32(%rip), %rcx
	cmpq	%rcx, %rdi
	je	.LBB16_58
# BB#46:                                # %lor.lhs.false168
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+40(%rip), %rdx
	cmpq	%rdx, %rdi
	jne	.LBB16_48
# BB#47:                                # %lor.lhs.false168
                                        #   in Loop: Header=BB16_2 Depth=1
	movzbl	fixed_regs+16(%rip), %edx
	testq	$255, %rdx
	jne	.LBB16_58
.LBB16_48:                              # %lor.lhs.false177
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+56(%rip), %rdx
	cmpq	%rdx, %rdi
	je	.LBB16_58
# BB#49:                                # %lor.lhs.false177
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	global_rtl+48(%rip), %rsi
	cmpq	%rsi, %rdi
	je	.LBB16_58
# BB#50:                                # %lor.lhs.false189
                                        #   in Loop: Header=BB16_2 Depth=1
	movzbl	(%rdi), %r8d
	cmpq	$70, %r8
	je	.LBB16_58
# BB#51:                                # %lor.lhs.false189
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	$75, %r8
	jne	.LBB16_59
# BB#52:                                # %land.lhs.true197
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	16(%rdi), %rbx
	movzbl	(%rbx), %ebx
	cmpq	$54, %rbx
	jne	.LBB16_59
# BB#53:                                # %land.lhs.true208
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	8(%rdi), %rbx
	cmpq	%rax, %rbx
	je	.LBB16_58
# BB#54:                                # %land.lhs.true208
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	%rcx, %rbx
	je	.LBB16_58
# BB#55:                                # %lor.lhs.false235
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	%rdx, %rbx
	je	.LBB16_58
# BB#56:                                # %lor.lhs.false235
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	%rsi, %rbx
	je	.LBB16_58
# BB#57:                                # %lor.lhs.false235
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	$70, %r8
	jne	.LBB16_59
.LBB16_58:                              # %if.then261
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	$1, %rax
	movb	%al, hash_arg_in_memory(%rip)
.LBB16_59:                              # %if.end262
                                        #   in Loop: Header=BB16_2 Depth=1
	addq	$66, %r12
.LBB16_60:                              # %repeat.backedge
                                        #   in Loop: Header=BB16_2 Depth=1
	testq	%rdi, %rdi
	movq	%rdi, %r14
	jne	.LBB16_2
	jmp	.LBB16_129
.LBB16_86:                              # %sw.bb405
                                        #   in Loop: Header=BB16_2 Depth=1
	testq	$134217728, %rax        # imm = 0x8000000
	jne	.LBB16_14
# BB#87:                                # %if.else411
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	$16, %rcx
	movq	8(%r14), %rdx
	shrq	%cl, %rax
	xorq	%rcx, %rcx
	testq	%rdx, %rdx
	movabsq	$0, %rsi
	je	.LBB16_91
# BB#88:                                # %while.cond.preheader.i767
                                        #   in Loop: Header=BB16_2 Depth=1
	movzbl	(%rdx), %edi
	testq	%rdi, %rdi
	movabsq	$0, %rsi
	je	.LBB16_91
# BB#89:                                # %while.body.i774.preheader
                                        #   in Loop: Header=BB16_2 Depth=1
	incq	%rdx
	xorq	%rsi, %rsi
.LBB16_90:                              # %while.body.i774
                                        #   Parent Loop BB16_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andq	$255, %rdi
	addq	%rdi, %rsi
	movzbl	(%rdx), %edi
	incq	%rdx
	testq	%rdi, %rdi
	jne	.LBB16_90
.LBB16_91:                              # %canon_hash_string.exit776
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	16(%r14), %rdx
	testq	%rdx, %rdx
	je	.LBB16_95
# BB#92:                                # %while.cond.preheader.i779
                                        #   in Loop: Header=BB16_2 Depth=1
	movzbl	(%rdx), %edi
	testq	%rdi, %rdi
	je	.LBB16_95
# BB#93:                                # %while.body.i786.preheader
                                        #   in Loop: Header=BB16_2 Depth=1
	incq	%rdx
	xorq	%rcx, %rcx
.LBB16_94:                              # %while.body.i786
                                        #   Parent Loop BB16_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andq	$255, %rdi
	addq	%rdi, %rcx
	movzbl	(%rdx), %edi
	incq	%rdx
	testq	%rdi, %rdi
	jne	.LBB16_94
.LBB16_95:                              # %canon_hash_string.exit788
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	32(%r14), %rdx
	andq	$255, %rax
	movl	24(%r14), %ebx
	addq	%rax, %r12
	movl	(%rdx), %edi
	addq	%rsi, %r12
	addq	%rcx, %r12
	leaq	41(%rbx,%r12), %rax
	testq	%rdi, %rdi
	je	.LBB16_96
# BB#97:                                # %for.cond436.preheader
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	$1, %r12
	cmpq	$1, %rdi
	jle	.LBB16_130
# BB#98:                                #   in Loop: Header=BB16_2 Depth=1
	movq	%rax, %r15
.LBB16_99:                              # %for.body443
                                        #   Parent Loop BB16_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_102 Depth 3
	movq	8(%rdx,%r12,8), %rdi
	movzbl	2(%rdi), %esi
	callq	canon_hash
	movq	40(%r14), %rsi
	movq	8(%rsi,%r12,8), %rcx
	movq	8(%rcx), %rdx
	xorq	%rcx, %rcx
	testq	%rdx, %rdx
	je	.LBB16_103
# BB#100:                               # %while.cond.preheader.i803
                                        #   in Loop: Header=BB16_99 Depth=2
	movzbl	(%rdx), %edi
	testq	%rdi, %rdi
	je	.LBB16_103
# BB#101:                               # %while.body.i810.preheader
                                        #   in Loop: Header=BB16_99 Depth=2
	incq	%rdx
	xorq	%rcx, %rcx
.LBB16_102:                             # %while.body.i810
                                        #   Parent Loop BB16_2 Depth=1
                                        #     Parent Loop BB16_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	andq	$255, %rdi
	addq	%rdi, %rcx
	movzbl	(%rdx), %edi
	incq	%rdx
	testq	%rdi, %rdi
	jne	.LBB16_102
.LBB16_103:                             # %canon_hash_string.exit812
                                        #   in Loop: Header=BB16_99 Depth=2
	addq	%r15, %rax
	movq	32(%r14), %rdx
	addq	%rcx, %rax
	incq	%r12
	movslq	(%rdx), %rdi
	movq	$32, %rcx
	movq	%r12, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rdi, %rbx
	movq	%rax, %r15
	jl	.LBB16_99
	jmp	.LBB16_104
.LBB16_130:                             # %for.cond436.preheader.for.end474_crit_edge
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	40(%r14), %rsi
.LBB16_104:                             # %for.end474
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	8(%rsi), %rcx
	movq	8(%rcx), %rcx
	xorq	%r12, %r12
	testq	%rcx, %rcx
	je	.LBB16_108
# BB#105:                               # %while.cond.preheader.i791
                                        #   in Loop: Header=BB16_2 Depth=1
	movzbl	(%rcx), %esi
	testq	%rsi, %rsi
	je	.LBB16_108
# BB#106:                               # %while.body.i798.preheader
                                        #   in Loop: Header=BB16_2 Depth=1
	incq	%rcx
	xorq	%r12, %r12
.LBB16_107:                             # %while.body.i798
                                        #   Parent Loop BB16_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	andq	$255, %rsi
	addq	%rsi, %r12
	movzbl	(%rcx), %esi
	incq	%rcx
	testq	%rsi, %rsi
	jne	.LBB16_107
.LBB16_108:                             # %canon_hash_string.exit800
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	8(%rdx), %r14
	movzbl	2(%r14), %ecx
	movq	%rcx, (%rsp)            # 8-byte Spill
	addq	%rax, %r12
	testq	%r14, %r14
	jne	.LBB16_2
	jmp	.LBB16_129
.LBB16_128:                             # %sw.bb61
	movq	8(%r14), %rax
	movq	(%rsp), %rdx            # 8-byte Reload
	addq	$6912, %rdx             # imm = 0x1B00
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	andq	%rcx, %r12
	addq	%rdx, %r12
	addq	%rax, %r12
	jmp	.LBB16_129
.LBB16_30:                              # %sw.bb69
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	leaq	55(%r12,%rax), %r12
	je	.LBB16_34
# BB#31:                                # %for.cond.preheader
	movzbl	rtx_length+55(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB16_129
# BB#32:                                # %for.body.lr.ph
	movq	$3, %rdx
.LBB16_33:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r14,%rdx,8), %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %r12
	addq	%rcx, %r12
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%rdx
	cmpq	%rax, %rsi
	jl	.LBB16_33
	jmp	.LBB16_129
.LBB16_35:                              # %sw.bb104
	movq	8(%r14), %rax
	movslq	(%rax), %r15
	testq	%r15, %r15
	jle	.LBB16_129
# BB#36:
	movq	$1, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %r15
	jmp	.LBB16_37
.LBB16_38:                              # %for.body110.for.body110_crit_edge
                                        #   in Loop: Header=BB16_37 Depth=1
	movq	8(%r14), %rax
	incq	%rbx
.LBB16_37:                              # %for.body110
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax,%rbx,8), %rdi
	movzbl	2(%rdi), %esi
	movq	%r12, %r13
	callq	canon_hash
	movq	%rax, %r12
	addq	%r13, %r12
	movq	%rbx, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%r15, %rax
	jne	.LBB16_38
	jmp	.LBB16_129
.LBB16_5:                               # %sw.bb
	movl	8(%r14), %r15d
	cmpq	$52, %r15
	ja	.LBB16_15
# BB#6:                                 # %if.else
	movq	global_rtl+24(%rip), %rcx
	cmpq	%rcx, %r14
	je	.LBB16_15
# BB#7:                                 # %if.else
	movq	global_rtl+32(%rip), %rcx
	cmpq	%rcx, %r14
	je	.LBB16_15
# BB#8:                                 # %if.else
	movq	global_rtl+40(%rip), %rcx
	cmpq	%rcx, %r14
	je	.LBB16_15
# BB#9:                                 # %if.else
	movq	global_rtl+16(%rip), %rcx
	cmpq	%rcx, %r14
	je	.LBB16_15
# BB#10:                                # %if.else
	movq	pic_offset_table_rtx(%rip), %rcx
	cmpq	%rcx, %r14
	je	.LBB16_15
# BB#11:                                # %if.else12
	movzbl	global_regs(%r15), %ecx
	testq	%rcx, %rcx
	jne	.LBB16_14
# BB#12:                                # %if.else15
	movzbl	fixed_regs(%r15), %ecx
	testq	%rcx, %rcx
	jne	.LBB16_15
# BB#13:                                # %if.else20
	movq	$14, %rcx
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %eax
	cmpq	$4, %rax
	jne	.LBB16_14
.LBB16_15:                              # %if.end35
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB16_17
# BB#16:                                # %if.end35
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB16_27
.LBB16_17:                              # %cond.false
	movq	$7, %rcx
	movq	%r15, %r14
	shrq	%cl, %r14
	xorq	%r15, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB16_21
# BB#18:
	movq	%rcx, %rax
.LBB16_20:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB16_26
# BB#19:                                # %for.cond.i
                                        #   in Loop: Header=BB16_20 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB16_20
.LBB16_21:                              # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB16_23
# BB#22:                                # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB16_24
.LBB16_14:                              # %if.then34
	movq	$1, %rax
	movb	%al, do_not_record(%rip)
	xorq	%r12, %r12
.LBB16_129:                             # %return
	movq	%r12, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB16_39:                              # %sw.bb124
	movq	8(%r14), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %r12
	leaq	8576(%r12,%rax), %r12
	jmp	.LBB16_129
.LBB16_40:                              # %sw.bb132
	movq	8(%r14), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %r12
	leaq	8704(%r12,%rax), %r12
	jmp	.LBB16_129
.LBB16_29:                              # %if.then45
	movl	8(%rcx), %esi
	movl	16(%r14), %eax
	movl	target_flags(%rip), %edx
	movq	$23, %rcx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rdx, %rcx
	xorq	%rdx, %rdx
	divq	%rcx
	addq	%rsi, %r12
	leaq	8064(%rax,%r12), %r12
	jmp	.LBB16_129
.LBB16_34:                              # %if.else92
	movl	16(%r14), %eax
	movl	24(%r14), %ecx
	addq	%r12, %rax
	addq	%rcx, %rax
	movq	%rax, %r12
	jmp	.LBB16_129
.LBB16_85:                              # %if.else592
	movabsq	$.L.str4, %rax
	movabsq	$.L__FUNCTION__.canon_hash, %rcx
	movq	$2488, %rsi             # imm = 0x9B8
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB16_96:
	movq	%rax, %r12
	jmp	.LBB16_129
.LBB16_23:                              # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
.LBB16_24:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB16_26
# BB#25:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB16_26:                              # %get_cse_reg_info.exit
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB16_27:                              # %cond.end
	movl	20(%rax), %eax
	leaq	7808(%r12,%rax), %r12
	jmp	.LBB16_129
.Ltmp250:
	.size	canon_hash, .Ltmp250-canon_hash
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI16_0:
	.quad	.LBB16_86
	.quad	.LBB16_80
	.quad	.LBB16_14
	.quad	.LBB16_80
	.quad	.LBB16_80
	.quad	.LBB16_80
	.quad	.LBB16_80
	.quad	.LBB16_61
	.quad	.LBB16_80
	.quad	.LBB16_14
	.quad	.LBB16_80
	.quad	.LBB16_80
	.quad	.LBB16_80
	.quad	.LBB16_128
	.quad	.LBB16_30
	.quad	.LBB16_35
	.quad	.LBB16_80
	.quad	.LBB16_80
	.quad	.LBB16_14
	.quad	.LBB16_80
	.quad	.LBB16_5
	.quad	.LBB16_80
	.quad	.LBB16_28
	.quad	.LBB16_80
	.quad	.LBB16_80
	.quad	.LBB16_41
	.quad	.LBB16_39
	.quad	.LBB16_40
	.quad	.LBB16_14

	.text
	.align	16, 0x90
	.type	cse_check_loop_start,@function
cse_check_loop_start:                   # @cse_check_loop_start
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp253:
	.cfi_def_cfa_offset 16
.Ltmp254:
	.cfi_offset %rbx, -16
	movq	%rdx, %rbx
	movq	(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB17_7
# BB#1:                                 # %lor.lhs.false
	movzbl	(%rdi), %eax
	cmpq	$59, %rax
	je	.LBB17_7
# BB#2:                                 # %lor.lhs.false
	cmpq	$69, %rax
	je	.LBB17_7
# BB#3:                                 # %lor.lhs.false
	cmpq	$66, %rax
	jne	.LBB17_5
# BB#4:                                 # %land.lhs.true
	movzbl	(%rsi), %eax
	cmpq	$66, %rax
	je	.LBB17_6
.LBB17_5:                               # %lor.lhs.false12
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB17_7
.LBB17_6:                               # %if.then13
	movq	$0, (%rbx)
.LBB17_7:                               # %if.end14
	popq	%rbx
	retq
.Ltmp255:
	.size	cse_check_loop_start, .Ltmp255-cse_check_loop_start
	.cfi_endproc

	.align	16, 0x90
	.type	addr_affects_sp_p,@function
addr_affects_sp_p:                      # @addr_affects_sp_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp258:
	.cfi_def_cfa_offset 16
.Ltmp259:
	.cfi_offset %rbx, -16
	movzbl	(%rdi), %eax
	movzbl	rtx_class(%rax), %eax
	xorq	%rbx, %rbx
	cmpq	$97, %rax
	jne	.LBB18_30
# BB#1:                                 # %land.lhs.true
	movq	8(%rdi), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB18_30
# BB#2:                                 # %land.lhs.true7
	movl	8(%rax), %eax
	cmpq	$7, %rax
	jne	.LBB18_30
# BB#3:                                 # %if.then
	movl	cached_regno(%rip), %eax
	cmpq	$7, %rax
	jne	.LBB18_5
# BB#4:                                 # %if.then
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB18_15
.LBB18_5:                               # %cond.false
	movq	reg_hash+56(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB18_9
# BB#6:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB18_8:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	$7, %rdx
	je	.LBB18_14
# BB#7:                                 # %for.cond.i
                                        #   in Loop: Header=BB18_8 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB18_8
.LBB18_9:                               # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB18_11
# BB#10:                                # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB18_12
.LBB18_11:                              # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash+56(%rip), %rcx
.LBB18_12:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash+56(%rip)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movabsq	$30064771079, %rcx      # imm = 0x700000007
	movq	%rcx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB18_14
# BB#13:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB18_14:                              # %get_cse_reg_info.exit
	movq	$7, %rcx
	movl	%ecx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB18_15:                              # %cond.end
	movslq	24(%rax), %rcx
	testq	%rcx, %rcx
	js	.LBB18_28
# BB#16:                                # %if.then20
	testq	%rax, %rax
	jne	.LBB18_27
# BB#17:                                # %cond.false26
	movq	reg_hash+56(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB18_21
# BB#18:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB18_20:                              # %for.body.i48
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	$7, %rdx
	je	.LBB18_26
# BB#19:                                # %for.cond.i44
                                        #   in Loop: Header=BB18_20 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB18_20
.LBB18_21:                              # %if.then4.i50
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB18_23
# BB#22:                                # %if.then5.i52
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB18_24
.LBB18_23:                              # %if.else.i55
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash+56(%rip), %rcx
.LBB18_24:                              # %if.end6.i64
	movq	%rcx, (%rax)
	movq	%rax, reg_hash+56(%rip)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movabsq	$30064771079, %rcx      # imm = 0x700000007
	movq	%rcx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB18_26
# BB#25:                                # %if.then11.i65
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB18_26:                              # %get_cse_reg_info.exit67
	movq	$7, %rcx
	movl	%ecx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	24(%rax), %ecx
.LBB18_27:                              # %cond.end28
	incq	%rcx
	movl	%ecx, 24(%rax)
.LBB18_28:                              # %if.end
	movzbl	hard_regs_in_table(%rip), %eax
	movq	$1, %rbx
	testq	$128, %rax
	je	.LBB18_30
# BB#29:                                # %if.then32
	movq	global_rtl+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	invalidate
.LBB18_30:                              # %return
	movq	%rbx, %rax
	popq	%rbx
	retq
.Ltmp260:
	.size	addr_affects_sp_p, .Ltmp260-addr_affects_sp_p
	.cfi_endproc

	.align	16, 0x90
	.type	exp_equiv_p,@function
exp_equiv_p:                            # @exp_equiv_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp267:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp268:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp269:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp270:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp271:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp272:
	.cfi_def_cfa_offset 80
.Ltmp273:
	.cfi_offset %rbx, -48
.Ltmp274:
	.cfi_offset %r12, -40
.Ltmp275:
	.cfi_offset %r13, -32
.Ltmp276:
	.cfi_offset %r14, -24
.Ltmp277:
	.cfi_offset %r15, -16
	movq	%rdx, %rbx
	movq	%rsi, %r15
	movq	%rdi, %r12
	cmpq	%r15, %r12
	movq	$1, %rcx
	jne	.LBB19_2
# BB#1:                                 # %entry
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rbx
	je	.LBB19_150
.LBB19_2:                               # %if.end
	testq	%r12, %r12
	je	.LBB19_4
# BB#3:                                 # %if.end
	testq	%r15, %r15
	je	.LBB19_4
# BB#7:                                 # %if.end5
	movl	(%r12), %r8d
	movl	(%r15), %esi
	movq	%r8, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	%rax, %rdx
	jne	.LBB19_149
# BB#8:                                 # %if.end230
	movq	$16, %rcx
	movq	%r8, %rax
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$16, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	cmpq	%rdi, %rax
	jne	.LBB19_149
# BB#9:                                 # %if.end240
	cmpq	$101, %rdx
	jg	.LBB19_29
# BB#10:                                # %if.end240
	cmpq	$53, %rdx
	jg	.LBB19_19
# BB#11:                                # %if.end240
	cmpq	$41, %rdx
	jne	.LBB19_124
# BB#12:                                # %sw.bb443
	orq	%r8, %rsi
	testq	$134217728, %rsi        # imm = 0x8000000
	jne	.LBB19_149
# BB#13:                                # %lor.lhs.false463
	movq	8(%r12), %rdi
	movq	8(%r15), %rsi
	callq	strcmp
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	jne	.LBB19_149
# BB#14:                                # %lor.lhs.false472
	movq	16(%r12), %rdi
	movq	16(%r15), %rsi
	callq	strcmp
	testq	%r13, %rax
	jne	.LBB19_149
# BB#15:                                # %lor.lhs.false481
	movl	24(%r12), %eax
	movl	24(%r15), %ecx
	cmpq	%rcx, %rax
	jne	.LBB19_149
# BB#16:                                # %lor.lhs.false489
	movq	32(%r12), %rax
	movq	32(%r15), %rdx
	movl	(%rax), %eax
	movq	$32, %rcx
	movq	%rax, %r14
	movl	(%rdx), %edx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	cmpq	%rdx, %rax
	jne	.LBB19_149
# BB#17:                                # %if.end499
	testq	%rax, %rax
	je	.LBB19_18
.LBB19_119:                             # %for.cond511
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB19_120
# BB#121:                               # %for.body514
                                        #   in Loop: Header=BB19_119 Depth=1
	movq	32(%r12), %rax
	movq	32(%r15), %rcx
	movq	(%rax,%r14,8), %rax
	movq	(%rcx,%r14,8), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rbx, %rdx
	callq	exp_equiv_p
	testq	%r13, %rax
	je	.LBB19_149
# BB#122:                               # %lor.lhs.false528
                                        #   in Loop: Header=BB19_119 Depth=1
	movq	40(%r12), %rax
	movq	40(%r15), %rcx
	movq	(%rax,%r14,8), %rax
	movq	(%rcx,%r14,8), %rcx
	movq	8(%rax), %rax
	movq	8(%rcx), %rcx
	leaq	-1(%r14), %r14
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	strcmp
	testq	%r13, %rax
	je	.LBB19_119
	jmp	.LBB19_149
.LBB19_4:                               # %if.then3
	cmpq	%r15, %r12
	jne	.LBB19_5
# BB#6:                                 # %if.then3
	movabsq	$1, %rcx
	jmp	.LBB19_150
.LBB19_5:
	movabsq	$0, %rcx
	jmp	.LBB19_150
.LBB19_29:                              # %if.end240
	leaq	-102(%rdx), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB19_113
	jmp	.LBB19_124
.LBB19_19:                              # %if.end240
	cmpq	$58, %rdx
	jg	.LBB19_23
# BB#20:                                # %if.end240
	cmpq	$54, %rdx
	jne	.LBB19_124
	jmp	.LBB19_21
.LBB19_23:                              # %if.end240
	cmpq	$82, %rdx
	jg	.LBB19_28
# BB#24:                                # %if.end240
	cmpq	$77, %rdx
	jg	.LBB19_123
# BB#25:                                # %if.end240
	cmpq	$74, %rdx
	jg	.LBB19_112
# BB#26:                                # %if.end240
	leaq	-59(%rdx), %rcx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	$10, %rcx
	ja	.LBB19_124
# BB#27:                                # %if.end240
	jmpq	*.LJTI19_0(,%rcx,8)
.LBB19_21:                              # %sw.bb
	cmpq	%r15, %r12
	jne	.LBB19_22
# BB#30:                                # %sw.bb
	movabsq	$1, %rcx
	jmp	.LBB19_150
.LBB19_28:                              # %if.end240
	leaq	-83(%rdx), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jb	.LBB19_113
	jmp	.LBB19_124
.LBB19_22:
	movabsq	$0, %rcx
	jmp	.LBB19_150
.LBB19_123:                             # %if.end240
	cmpq	$78, %rdx
	je	.LBB19_113
	jmp	.LBB19_124
.LBB19_112:                             # %if.end240
	cmpq	$75, %rdx
	jne	.LBB19_124
.LBB19_113:                             # %sw.bb407
	movq	8(%r12), %rdi
	movq	8(%r15), %rsi
	movq	%rbx, %rdx
	callq	exp_equiv_p
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB19_115
# BB#114:                               # %land.lhs.true416
	movq	16(%r12), %rdi
	movq	16(%r15), %rsi
	movq	%rbx, %rdx
	callq	exp_equiv_p
	testq	%r13, %rax
	movq	$1, %rcx
	jne	.LBB19_150
.LBB19_115:
	leaq	16(%r15), %rax
	movq	8(%r12), %rdi
	movq	(%rax), %rsi
	movq	%rbx, %rdx
	callq	exp_equiv_p
	xorq	%rcx, %rcx
	testq	%r13, %rax
	je	.LBB19_150
# BB#116:                               # %land.rhs
	movq	16(%r12), %rdi
	movq	8(%r15), %rsi
	movq	%rbx, %rdx
	callq	exp_equiv_p
	testq	%r13, %rax
	je	.LBB19_117
# BB#118:                               # %land.rhs
	movabsq	$1, %rcx
	jmp	.LBB19_150
.LBB19_124:                             # %sw.epilog
	movzbl	rtx_length(%rdx), %esi
	testq	%rsi, %rsi
	je	.LBB19_125
# BB#126:                               # %for.body563.lr.ph
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	rtx_format(,%rdx,8), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
.LBB19_127:                             # %for.body563
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_147 Depth 2
	movq	%rsi, %r13
	movq	8(%rsp), %rax           # 8-byte Reload
	movsbq	-1(%rax,%r13), %rax
	leaq	-1(%r13), %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	cmpq	$68, %rax
	jg	.LBB19_131
# BB#128:                               # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	andq	%rbx, %rax
	cmpq	$48, %rax
	je	.LBB19_129
	jmp	.LBB19_151
.LBB19_131:                             # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	cmpq	$100, %rax
	jg	.LBB19_135
# BB#132:                               # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	andq	%rbx, %rax
	cmpq	$69, %rax
	jne	.LBB19_151
# BB#133:                               # %sw.bb580
                                        #   in Loop: Header=BB19_127 Depth=1
	movq	(%r12,%r13,8), %rax
	movq	(%r15,%r13,8), %rdx
	movl	(%rax), %esi
	movl	(%rdx), %ecx
	cmpq	%rcx, %rsi
	jne	.LBB19_149
# BB#134:                               # %for.cond595.preheader
                                        #   in Loop: Header=BB19_127 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$1, %r14
	testq	%rsi, %rsi
	jle	.LBB19_129
	jmp	.LBB19_147
	.align	16, 0x90
.LBB19_146:                             # %for.cond595.for.body603_crit_edge
                                        #   in Loop: Header=BB19_147 Depth=2
	movq	(%r15,%r13,8), %rdx
	incq	%r14
.LBB19_147:                             # %for.body603
                                        #   Parent Loop BB19_127 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%r14,8), %rdi
	movq	(%rdx,%r14,8), %rsi
	movq	24(%rsp), %rdx          # 8-byte Reload
	callq	exp_equiv_p
	testq	%rbx, %rax
	je	.LBB19_149
# BB#145:                               # %for.cond595
                                        #   in Loop: Header=BB19_147 Depth=2
	movq	(%r12,%r13,8), %rax
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%r14, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jl	.LBB19_146
	jmp	.LBB19_129
.LBB19_135:                             # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	cmpq	$114, %rax
	jg	.LBB19_140
# BB#136:                               # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	andq	%rbx, %rax
	cmpq	$101, %rax
	jne	.LBB19_137
# BB#144:                               # %sw.bb567
                                        #   in Loop: Header=BB19_127 Depth=1
	movq	(%r12,%r13,8), %rdi
	movq	(%r15,%r13,8), %rsi
	movq	24(%rsp), %rdx          # 8-byte Reload
	callq	exp_equiv_p
	testq	%rbx, %rax
	jne	.LBB19_129
	jmp	.LBB19_149
.LBB19_140:                             # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	andq	%rbx, %rax
	cmpq	$115, %rax
	je	.LBB19_148
# BB#141:                               # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	cmpq	$116, %rax
	je	.LBB19_129
# BB#142:                               # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	cmpq	$119, %rax
	jne	.LBB19_151
# BB#143:                               # %sw.bb651
                                        #   in Loop: Header=BB19_127 Depth=1
	movq	(%r12,%r13,8), %rax
	movq	(%r15,%r13,8), %rcx
	jmp	.LBB19_139
.LBB19_137:                             # %for.body563
                                        #   in Loop: Header=BB19_127 Depth=1
	cmpq	$105, %rax
	jne	.LBB19_151
# BB#138:                               # %sw.bb638
                                        #   in Loop: Header=BB19_127 Depth=1
	movl	(%r12,%r13,8), %eax
	movl	(%r15,%r13,8), %ecx
.LBB19_139:                             # %sw.bb638
                                        #   in Loop: Header=BB19_127 Depth=1
	cmpq	%rcx, %rax
	je	.LBB19_129
	jmp	.LBB19_149
.LBB19_148:                             # %sw.bb625
                                        #   in Loop: Header=BB19_127 Depth=1
	movq	(%r12,%r13,8), %rdi
	movq	(%r15,%r13,8), %rsi
	callq	strcmp
	testq	%rbx, %rax
	jne	.LBB19_149
.LBB19_129:                             # %for.cond560.backedge
                                        #   in Loop: Header=BB19_127 Depth=1
	movq	$32, %rcx
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB19_127
# BB#130:
	movq	$1, %rcx
	jmp	.LBB19_150
.LBB19_125:
	movq	$1, %rcx
	jmp	.LBB19_150
.LBB19_117:
	movabsq	$0, %rcx
	jmp	.LBB19_150
.LBB19_39:                              # %sw.bb259
	movq	%rbx, %r14
	movl	8(%r15), %ebx
	cmpq	$52, %rbx
	movq	$1, %r15
	ja	.LBB19_55
# BB#40:                                # %cond.false266
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rbx, %rcx
	cmpq	$8, %rcx
	je	.LBB19_44
# BB#41:                                # %cond.false266
	leaq	-21(%rbx), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB19_44
# BB#42:                                # %cond.false266
	leaq	-45(%rbx), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB19_44
# BB#43:                                # %cond.false266
	leaq	-29(%rbx), %rcx
	andq	%r13, %rcx
	cmpq	$7, %rcx
	jbe	.LBB19_44
# BB#49:                                # %cond.false306
	cmpq	$24, %rax
	jne	.LBB19_50
# BB#52:                                # %cond.true321
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB19_54
.LBB19_31:                              # %sw.bb243
	movq	8(%r12), %rax
	movq	8(%r15), %rcx
	cmpq	%rcx, %rax
	jne	.LBB19_32
# BB#33:                                # %sw.bb243
	movabsq	$1, %rax
	movq	%rax, %rcx
	jmp	.LBB19_150
.LBB19_35:                              # %sw.bb251
	movq	8(%r12), %rax
	movq	8(%r15), %rcx
	cmpq	%rcx, %rax
	jne	.LBB19_36
# BB#37:                                # %sw.bb251
	movabsq	$1, %rax
	movq	%rax, %rcx
	jmp	.LBB19_150
.LBB19_18:
	movq	$1, %rcx
	jmp	.LBB19_150
.LBB19_120:
	movq	$1, %rcx
	jmp	.LBB19_150
.LBB19_151:                             # %sw.default664
	movabsq	$.L.str4, %rax
	movabsq	$.L__FUNCTION__.exp_equiv_p, %rcx
	movq	$2707, %rsi             # imm = 0xA93
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB19_44:                              # %cond.true290
	movl	mode_class(,%rax,4), %eax
	cmpq	$5, %rax
	movq	$2, %r15
	je	.LBB19_55
# BB#45:                                # %lor.rhs
	cmpq	$6, %rax
	jne	.LBB19_46
# BB#47:                                # %lor.rhs
	movabsq	$1, %r15
	incq	%r15
	jmp	.LBB19_55
.LBB19_50:                              # %cond.false306
	cmpq	$18, %rax
	jne	.LBB19_53
# BB#51:                                # %cond.true312
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB19_54
.LBB19_32:
	movabsq	$0, %rax
	movq	%rax, %rcx
	jmp	.LBB19_150
.LBB19_36:
	movabsq	$0, %rax
	movq	%rax, %rcx
	jmp	.LBB19_150
.LBB19_46:
	movabsq	$0, %r15
	incq	%r15
	jmp	.LBB19_55
.LBB19_53:                              # %cond.false325
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
.LBB19_54:                              # %cond.end344
	movq	%rax, %r15
.LBB19_55:                              # %cond.end344
	movl	8(%r12), %ecx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movl	cached_regno(%rip), %eax
	addq	%rbx, %r15
	cmpq	%rax, %rcx
	jne	.LBB19_57
# BB#56:                                # %cond.end344
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB19_67
.LBB19_57:                              # %cond.false356
	movq	$7, %rcx
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, %r12
	shrq	%cl, %r12
	xorq	%rax, %r12
	andq	$127, %r12
	movq	reg_hash(,%r12,8), %rcx
	testq	%rcx, %rcx
	je	.LBB19_61
# BB#58:
	movq	%rcx, %rax
	movq	24(%rsp), %rsi          # 8-byte Reload
.LBB19_60:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rsi, %rdx
	je	.LBB19_66
# BB#59:                                # %for.cond.i
                                        #   in Loop: Header=BB19_60 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB19_60
.LBB19_61:                              # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB19_63
# BB#62:                                # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB19_64
.LBB19_63:                              # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r12,8), %rcx
.LBB19_64:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, 20(%rax)
	movl	%ecx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB19_66
# BB#65:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB19_66:                              # %get_cse_reg_info.exit
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB19_67:                              # %cond.end361
	movl	20(%rax), %r12d
	movq	24(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rbx
	jne	.LBB19_69
# BB#68:                                # %cond.end361
	testq	%rax, %rax
	movq	%r12, %rcx
	jne	.LBB19_79
.LBB19_69:                              # %cond.false369
	movq	$7, %rcx
	movq	%rbx, %rax
	shrq	%cl, %rax
	xorq	%rbx, %rax
	andq	$127, %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	reg_hash(,%rax,8), %rcx
	testq	%rcx, %rcx
	je	.LBB19_73
# BB#70:
	movq	%rcx, %rax
.LBB19_72:                              # %for.body.i28
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB19_78
# BB#71:                                # %for.cond.i24
                                        #   in Loop: Header=BB19_72 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB19_72
.LBB19_73:                              # %if.then4.i30
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB19_75
# BB#74:                                # %if.then5.i32
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB19_76
.LBB19_75:                              # %if.else.i35
	movq	$32, %rdi
	callq	xmalloc
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	reg_hash(,%rcx,8), %rcx
.LBB19_76:                              # %if.end6.i44
	movq	%rcx, (%rax)
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rax, reg_hash(,%rcx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB19_78
# BB#77:                                # %if.then11.i45
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB19_78:                              # %get_cse_reg_info.exit47
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %ecx
.LBB19_79:                              # %cond.end371
	andq	%r13, %r12
	andq	%r13, %rcx
	testq	%r13, %r14
	movabsq	$0, %rdi
	movabsq	$1, %rsi
	movq	%rdi, %rdx
	jne	.LBB19_81
# BB#80:                                # %cond.end371
	movq	%rsi, %rdx
.LBB19_81:                              # %cond.end371
	cmpq	%rcx, %r12
	jne	.LBB19_83
# BB#82:                                # %cond.end371
	movq	%rsi, %rdi
.LBB19_83:                              # %cond.end371
	jne	.LBB19_84
# BB#85:                                # %cond.end371
	testq	%rdx, %rdx
	movq	%rdi, %rcx
	jne	.LBB19_150
# BB#86:                                # %for.cond.preheader
	movq	%r15, %rdx
	andq	%r13, %rdx
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movq	$1, %rcx
	cmpq	%rdx, %rbx
	jae	.LBB19_150
# BB#87:
	movq	$1, %r14
	movq	%rbx, %r12
.LBB19_89:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_95 Depth 2
                                        #     Child Loop BB19_106 Depth 2
	movq	%rbx, %rcx
	andq	%r13, %rcx
	movq	%r12, %r15
	andq	%r13, %r15
	cmpq	%rcx, %r15
	jne	.LBB19_91
# BB#90:                                # %for.body
                                        #   in Loop: Header=BB19_89 Depth=1
	testq	%rax, %rax
	jne	.LBB19_100
.LBB19_91:                              # %cond.false388
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB19_92
.LBB19_95:                              # %for.body.i62
                                        #   Parent Loop BB19_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB19_99
# BB#94:                                # %for.cond.i58
                                        #   in Loop: Header=BB19_95 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB19_95
.LBB19_92:                              # %if.then4.i64
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB19_93
# BB#96:                                # %if.else.i69
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB19_97
.LBB19_93:                              # %if.then5.i66
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB19_97:                              # %if.end6.i78
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movl	%r14d, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB19_99
# BB#98:                                # %if.then11.i79
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB19_99:                              # %get_cse_reg_info.exit81
                                        #   in Loop: Header=BB19_89 Depth=1
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	%r12, %rbx
.LBB19_100:                             # %cond.end390
                                        #   in Loop: Header=BB19_89 Depth=1
	movl	28(%rax), %ecx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	andq	%r13, %rbx
	cmpq	%rbx, %r15
	jne	.LBB19_102
# BB#101:                               # %cond.end390
                                        #   in Loop: Header=BB19_89 Depth=1
	testq	%rax, %rax
	jne	.LBB19_111
.LBB19_102:                             # %cond.false398
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB19_103
.LBB19_106:                             # %for.body.i96
                                        #   Parent Loop BB19_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB19_110
# BB#105:                               # %for.cond.i92
                                        #   in Loop: Header=BB19_106 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB19_106
.LBB19_103:                             # %if.then4.i98
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB19_104
# BB#107:                               # %if.else.i103
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB19_108
.LBB19_104:                             # %if.then5.i100
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB19_108:                             # %if.end6.i112
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movl	%r14d, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB19_110
# BB#109:                               # %if.then11.i113
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB19_110:                             # %get_cse_reg_info.exit115
                                        #   in Loop: Header=BB19_89 Depth=1
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB19_111:                             # %cond.end400
                                        #   in Loop: Header=BB19_89 Depth=1
	movl	24(%rax), %ecx
	movq	16(%rsp), %rdx          # 8-byte Reload
	andq	%r13, %rdx
	cmpq	%rcx, %rdx
	jne	.LBB19_149
# BB#88:                                # %for.cond
                                        #   in Loop: Header=BB19_89 Depth=1
	movq	%r12, %rbx
	leaq	1(%r12), %rcx
	movq	%rcx, %rdx
	andq	%r13, %rdx
	movq	24(%rsp), %rsi          # 8-byte Reload
	cmpq	%rsi, %rdx
	movq	%rcx, %r12
	movq	$1, %rcx
	jb	.LBB19_89
	jmp	.LBB19_150
.LBB19_149:
	xorq	%rcx, %rcx
.LBB19_150:                             # %return
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB19_84:
	movq	%rdi, %rcx
	jmp	.LBB19_150
.Ltmp278:
	.size	exp_equiv_p, .Ltmp278-exp_equiv_p
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI19_0:
	.quad	.LBB19_21
	.quad	.LBB19_124
	.quad	.LBB19_39
	.quad	.LBB19_124
	.quad	.LBB19_124
	.quad	.LBB19_124
	.quad	.LBB19_124
	.quad	.LBB19_124
	.quad	.LBB19_31
	.quad	.LBB19_35
	.quad	.LBB19_21

	.text
	.align	16, 0x90
	.type	check_dependence,@function
check_dependence:                       # @check_dependence
	.cfi_startproc
# BB#0:                                 # %entry
	movq	(%rdi), %rdx
	testq	%rdx, %rdx
	je	.LBB20_2
# BB#1:                                 # %land.lhs.true
	movzbl	(%rdx), %eax
	cmpq	$66, %rax
	jne	.LBB20_2
# BB#3:                                 # %if.then
	movq	8(%rsi), %rdi
	movl	(%rsi), %esi
	movabsq	$cse_rtx_varies_p, %rcx
	jmp	true_dependence  # TAILCALL
.LBB20_2:                               # %return
	xorq	%rax, %rax
	retq
.Ltmp279:
	.size	check_dependence, .Ltmp279-check_dependence
	.cfi_endproc

	.align	16, 0x90
	.type	cse_rtx_varies_p,@function
cse_rtx_varies_p:                       # @cse_rtx_varies_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp286:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp287:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp288:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp289:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp290:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp291:
	.cfi_def_cfa_offset 64
.Ltmp292:
	.cfi_offset %rbx, -48
.Ltmp293:
	.cfi_offset %r12, -40
.Ltmp294:
	.cfi_offset %r13, -32
.Ltmp295:
	.cfi_offset %r14, -24
.Ltmp296:
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB21_29
# BB#1:                                 # %land.lhs.true
	movl	8(%r13), %r15d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB21_3
# BB#2:                                 # %land.lhs.true
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r15, %r14
	jne	.LBB21_13
.LBB21_3:                               # %cond.false
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB21_7
# BB#4:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB21_6:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB21_12
# BB#5:                                 # %for.cond.i
                                        #   in Loop: Header=BB21_6 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB21_6
.LBB21_7:                               # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB21_9
# BB#8:                                 # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB21_10
.LBB21_9:                               # %if.else.i
	movq	$32, %rdi
	movq	%rsi, %r14
	callq	xmalloc
	movq	%r14, %rsi
	movq	reg_hash(,%rbx,8), %rcx
.LBB21_10:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB21_12
# BB#11:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB21_12:                              # %get_cse_reg_info.exit
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r13), %r14d
.LBB21_13:                              # %cond.end
	movl	20(%rax), %ebx
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	movq	%r14, %rdx
	andq	%r12, %rdx
	cmpq	%rdx, %rbx
	jne	.LBB21_15
# BB#14:                                # %cond.end.if.end32_crit_edge
	movl	(%r13), %eax
	jmp	.LBB21_29
.LBB21_15:                              # %if.then
	cmpq	%r15, %rdx
	jne	.LBB21_17
# BB#16:                                # %if.then
	testq	%rax, %rax
	jne	.LBB21_27
.LBB21_17:                              # %cond.false17
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB21_21
# BB#18:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB21_20:                              # %for.body.i323
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edi
	cmpq	%rdx, %rdi
	je	.LBB21_26
# BB#19:                                # %for.cond.i319
                                        #   in Loop: Header=BB21_20 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB21_20
.LBB21_21:                              # %if.then4.i325
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%rsi, %r15
	testq	%rax, %rax
	je	.LBB21_23
# BB#22:                                # %if.then5.i327
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB21_24
.LBB21_23:                              # %if.else.i330
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB21_24:                              # %if.end6.i339
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	movq	%r15, %rsi
	jne	.LBB21_26
# BB#25:                                # %if.then11.i340
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB21_26:                              # %get_cse_reg_info.exit342
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %ebx
.LBB21_27:                              # %cond.end22
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movl	(%r13), %eax
	movq	qty_table(%rip), %r8
	movq	$16, %rcx
	movq	%rax, %rdi
	shrq	%cl, %rdi
	leaq	(%rbx,%rbx,2), %rdx
	movq	$4, %rcx
	movq	%rdx, %rbx
	shlq	%cl, %rbx
	movl	36(%r8,%rbx), %ecx
	andq	$255, %rdi
	cmpq	%rcx, %rdi
	jne	.LBB21_29
# BB#28:                                # %land.lhs.true29
	movq	$4, %rcx
	shlq	%cl, %rdx
	cmpq	$0, (%r8,%rdx)
	jne	.LBB21_117
.LBB21_29:                              # %if.end32
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB21_59
# BB#30:                                # %land.lhs.true36
	movq	16(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB21_59
# BB#31:                                # %land.lhs.true42
	movq	8(%r13), %rdx
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB21_59
# BB#32:                                # %land.lhs.true49
	movl	8(%rdx), %r14d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	jne	.LBB21_34
# BB#33:                                # %land.lhs.true49
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r14, %r15
	jne	.LBB21_44
.LBB21_34:                              # %cond.false60
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB21_38
# BB#35:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB21_37:                              # %for.body.i357
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB21_43
# BB#36:                                # %for.cond.i353
                                        #   in Loop: Header=BB21_37 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB21_37
.LBB21_38:                              # %if.then4.i359
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB21_40
# BB#39:                                # %if.then5.i361
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB21_41
.LBB21_40:                              # %if.else.i364
	movq	$32, %rdi
	movq	%rsi, %r15
	callq	xmalloc
	movq	%r15, %rsi
	movq	reg_hash(,%rbx,8), %rcx
.LBB21_41:                              # %if.end6.i373
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB21_43
# BB#42:                                # %if.then11.i374
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB21_43:                              # %get_cse_reg_info.exit376
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	8(%r13), %rdx
	movl	8(%rdx), %r15d
.LBB21_44:                              # %cond.end68
	movl	20(%rax), %edi
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	movq	%r15, %rbx
	andq	%r12, %rbx
	cmpq	%rbx, %rdi
	je	.LBB21_59
# BB#45:                                # %if.then78
	cmpq	%r14, %rbx
	jne	.LBB21_47
# BB#46:                                # %if.then78
	testq	%rax, %rax
	jne	.LBB21_57
.LBB21_47:                              # %cond.false89
	movq	$7, %rcx
	movq	%r15, %r14
	shrq	%cl, %r14
	xorq	%r15, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB21_51
# BB#48:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB21_50:                              # %for.body.i391
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB21_56
# BB#49:                                # %for.cond.i387
                                        #   in Loop: Header=BB21_50 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB21_50
.LBB21_51:                              # %if.then4.i393
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB21_53
# BB#52:                                # %if.then5.i395
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB21_54
.LBB21_53:                              # %if.else.i398
	movq	$32, %rdi
	movq	%rsi, %rbx
	callq	xmalloc
	movq	%rbx, %rsi
	movq	reg_hash(,%r14,8), %rcx
.LBB21_54:                              # %if.end6.i407
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB21_56
# BB#55:                                # %if.then11.i408
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB21_56:                              # %get_cse_reg_info.exit410
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %edi
	movq	8(%r13), %rdx
.LBB21_57:                              # %cond.end97
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	qty_table(%rip), %rax
	movzbl	2(%rdx), %ebx
	leaq	(%rdi,%rdi,2), %rdx
	movq	$4, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movl	36(%rax,%rdi), %ecx
	cmpq	%rcx, %rbx
	jne	.LBB21_59
# BB#58:                                # %land.lhs.true110
	movq	$4, %rcx
	shlq	%cl, %rdx
	cmpq	$0, (%rax,%rdx)
	jne	.LBB21_117
.LBB21_59:                              # %if.end115
	movzbl	(%r13), %eax
	cmpq	$75, %rax
	jne	.LBB21_118
# BB#60:                                # %land.lhs.true119
	movq	8(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB21_118
# BB#61:                                # %land.lhs.true126
	movq	16(%r13), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$61, %rcx
	jne	.LBB21_118
# BB#62:                                # %land.lhs.true133
	movl	8(%rax), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB21_64
# BB#63:                                # %land.lhs.true133
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%rbx, %rcx
	jne	.LBB21_74
.LBB21_64:                              # %cond.false144
	movq	$7, %rcx
	movq	%rbx, %r14
	shrq	%cl, %r14
	xorq	%rbx, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB21_68
# BB#65:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB21_67:                              # %for.body.i425
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB21_73
# BB#66:                                # %for.cond.i421
                                        #   in Loop: Header=BB21_67 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB21_67
.LBB21_68:                              # %if.then4.i427
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB21_70
# BB#69:                                # %if.then5.i429
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB21_71
.LBB21_70:                              # %if.else.i432
	movq	$32, %rdi
	movq	%rsi, %r15
	callq	xmalloc
	movq	%r15, %rsi
	movq	reg_hash(,%r14,8), %rcx
.LBB21_71:                              # %if.end6.i441
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB21_73
# BB#72:                                # %if.then11.i442
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB21_73:                              # %get_cse_reg_info.exit444
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	8(%r13), %rcx
	movl	8(%rcx), %ecx
.LBB21_74:                              # %cond.end152
	movl	20(%rax), %r12d
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rcx
	cmpq	%rcx, %r12
	je	.LBB21_118
# BB#75:                                # %land.lhs.true162
	movq	16(%r13), %rcx
	movl	8(%rcx), %r15d
	cmpq	%rbx, %r15
	jne	.LBB21_77
# BB#76:                                # %land.lhs.true162
	testq	%rax, %rax
	movq	%rbx, %r9
	jne	.LBB21_87
.LBB21_77:                              # %cond.false173
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB21_81
# BB#78:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB21_80:                              # %for.body.i459
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB21_86
# BB#79:                                # %for.cond.i455
                                        #   in Loop: Header=BB21_80 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB21_80
.LBB21_81:                              # %if.then4.i461
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB21_83
# BB#82:                                # %if.then5.i463
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB21_84
.LBB21_83:                              # %if.else.i466
	movq	$32, %rdi
	movq	%r8, %r12
	movq	%rsi, %r14
	callq	xmalloc
	movq	%r14, %rsi
	movq	%r12, %r8
	movq	reg_hash(,%rbx,8), %rcx
.LBB21_84:                              # %if.end6.i475
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r8d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB21_86
# BB#85:                                # %if.then11.i476
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB21_86:                              # %get_cse_reg_info.exit478
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	16(%r13), %rcx
	movl	20(%rax), %r12d
	movl	8(%rcx), %r9d
	movq	%r15, %rbx
.LBB21_87:                              # %cond.end181
	movq	%r9, %rcx
	andq	%r8, %rcx
	movq	%r12, %rdx
	andq	%r8, %rdx
	cmpq	%rcx, %rdx
	je	.LBB21_118
# BB#88:                                # %if.then191
	movq	8(%r13), %rcx
	movl	8(%rcx), %r15d
	cmpq	%rbx, %r15
	jne	.LBB21_90
# BB#89:                                # %if.then191
	testq	%rax, %rax
	jne	.LBB21_100
.LBB21_90:                              # %cond.false203
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB21_94
# BB#91:
	movq	%rcx, %rax
.LBB21_93:                              # %for.body.i493
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB21_99
# BB#92:                                # %for.cond.i489
                                        #   in Loop: Header=BB21_93 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB21_93
.LBB21_94:                              # %if.then4.i495
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB21_96
# BB#95:                                # %if.then5.i497
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB21_97
.LBB21_96:                              # %if.else.i500
	movq	$32, %rdi
	movq	%r8, %r12
	movq	%rsi, %r14
	callq	xmalloc
	movq	%r14, %rsi
	movq	%r12, %r8
	movq	reg_hash(,%rbx,8), %rcx
.LBB21_97:                              # %if.end6.i509
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r8d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB21_99
# BB#98:                                # %if.then11.i510
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB21_99:                              # %get_cse_reg_info.exit512
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	16(%r13), %rcx
	movl	20(%rax), %r12d
	movl	8(%rcx), %r9d
	movq	%r15, %rbx
.LBB21_100:                             # %cond.end211
	movq	%r9, %rdi
	andq	%r8, %rdi
	cmpq	%rbx, %rdi
	jne	.LBB21_102
# BB#101:                               # %cond.end211
	testq	%rax, %rax
	movq	%r12, %rdx
	jne	.LBB21_113
.LBB21_102:                             # %cond.false224
	movq	$7, %rcx
	movq	%r9, %rbx
	shrq	%cl, %rbx
	xorq	%r9, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB21_106
# BB#103:
	movq	%rcx, %rax
.LBB21_105:                             # %for.body.i527
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB21_112
# BB#104:                               # %for.cond.i523
                                        #   in Loop: Header=BB21_105 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB21_105
.LBB21_106:                             # %if.then4.i529
	movq	%r8, %r15
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%rsi, %r14
	testq	%rax, %rax
	je	.LBB21_108
# BB#107:                               # %if.then5.i531
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB21_109
.LBB21_108:                             # %if.else.i534
	movq	$32, %rdi
	movq	%r9, 8(%rsp)            # 8-byte Spill
	callq	xmalloc
	movq	8(%rsp), %r9            # 8-byte Reload
	movq	reg_hash(,%rbx,8), %rcx
.LBB21_109:                             # %if.end6.i543
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r9d, 20(%rax)
	movl	%r9d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB21_111
# BB#110:                               # %if.then11.i544
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB21_111:                             # %get_cse_reg_info.exit546
	movq	%r14, %rsi
.LBB21_112:                             # %get_cse_reg_info.exit546
	movl	%r9d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %edx
.LBB21_113:                             # %cond.end232
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	movq	qty_table(%rip), %r8
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %edi
	leaq	(%r12,%r12,2), %rax
	movq	$4, %rcx
	movq	%rax, %rbx
	shlq	%cl, %rbx
	movl	36(%r8,%rbx), %ecx
	cmpq	%rcx, %rdi
	jne	.LBB21_118
# BB#114:                               # %land.lhs.true248
	movq	$4, %rcx
	shlq	%cl, %rax
	cmpq	$0, (%r8,%rax)
	je	.LBB21_118
# BB#115:                               # %land.lhs.true251
	movq	16(%r13), %rcx
	movzbl	2(%rcx), %eax
	leaq	(%rdx,%rdx,2), %rdx
	movq	$4, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movl	36(%r8,%rdi), %ecx
	cmpq	%rcx, %rax
	jne	.LBB21_118
# BB#116:                               # %land.lhs.true260
	movq	$4, %rcx
	shlq	%cl, %rdx
	cmpq	$0, (%r8,%rdx)
	je	.LBB21_118
.LBB21_117:                             # %return
	xorq	%rax, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB21_118:                             # %if.end265
	movq	%r13, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	rtx_varies_p  # TAILCALL
.Ltmp297:
	.size	cse_rtx_varies_p, .Ltmp297-cse_rtx_varies_p
	.cfi_endproc

	.align	16, 0x90
	.type	canon_reg,@function
canon_reg:                              # @canon_reg
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp304:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp305:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp306:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp307:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp308:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp309:
	.cfi_def_cfa_offset 64
.Ltmp310:
	.cfi_offset %rbx, -48
.Ltmp311:
	.cfi_offset %r12, -40
.Ltmp312:
	.cfi_offset %r13, -32
.Ltmp313:
	.cfi_offset %r14, -24
.Ltmp314:
	.cfi_offset %r15, -16
	movq	%rsi, %r14
	movq	%rdi, %r13
	xorq	%rax, %rax
	testq	%r13, %r13
	je	.LBB22_35
# BB#1:                                 # %if.end
	movzbl	(%r13), %eax
	leaq	-44(%rax), %rcx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rcx
	cmpq	$25, %rcx
	ja	.LBB22_38
# BB#2:                                 # %if.end
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$58776579, %rdx         # imm = 0x380DC03
	je	.LBB22_4
# BB#3:
	movq	%r13, %rax
	jmp	.LBB22_35
.LBB22_4:                               # %if.end
	cmpq	$17, %rcx
	jne	.LBB22_38
# BB#5:                                 # %sw.bb1
	movl	8(%r13), %r14d
	cmpq	$53, %r14
	jae	.LBB22_7
# BB#6:
	movq	%r13, %rax
	jmp	.LBB22_35
.LBB22_38:                              # %sw.epilog
	movzbl	rtx_length(%rax), %r15d
	testq	%r15, %r15
	je	.LBB22_39
# BB#40:                                # %for.body.lr.ph
	movq	rtx_format(,%rax,8), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	testq	%r14, %r14
	je	.LBB22_55
	.align	16, 0x90
.LBB22_41:                              # %for.body.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_62 Depth 2
	movq	%r15, %r12
	movq	8(%rsp), %rax           # 8-byte Reload
	movzbl	-1(%rax,%r12), %eax
	leaq	-1(%r12), %r15
	cmpq	$69, %rax
	jne	.LBB22_42
# BB#52:                                # %for.cond138.preheader.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	(%r13,%r12,8), %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	movq	$1, %rbx
	jle	.LBB22_53
	.align	16, 0x90
.LBB22_62:                              # %for.body144.us
                                        #   Parent Loop BB22_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%rbx,8), %rdi
	movq	%r14, %rsi
	callq	canon_reg
	movq	(%r13,%r12,8), %rcx
	movq	%rax, (%rcx,%rbx,8)
	movq	(%r13,%r12,8), %rax
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%rbx
	cmpq	%rdx, %rsi
	jl	.LBB22_62
	jmp	.LBB22_53
	.align	16, 0x90
.LBB22_42:                              # %for.body.us
                                        #   in Loop: Header=BB22_41 Depth=1
	cmpq	$101, %rax
	jne	.LBB22_53
# BB#43:                                # %if.then58.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	8(%r13,%r15,8), %rdi
	leaq	8(%r13,%r15,8), %rbx
	movq	%r14, %rsi
	callq	canon_reg
	movq	%rax, %r12
	testq	%r12, %r12
	je	.LBB22_50
# BB#44:                                # %land.lhs.true68.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB22_50
# BB#45:                                # %land.lhs.true73.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB22_50
# BB#46:                                # %land.lhs.true82.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	8(%r12), %ecx
	movl	8(%rax), %eax
	cmpq	$53, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	cmpq	$53, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	xorq	%rcx, %rax
	jne	.LBB22_51
# BB#47:                                # %lor.lhs.false99.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB22_49
# BB#48:                                # %cond.end110.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	%r14, %rdi
	callq	recog_memoized_1
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	js	.LBB22_51
.LBB22_49:                              # %lor.lhs.false114.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	leaq	(%rax,%rax,4), %rax
	movsbq	insn_data+33(,%rax,8), %rax
	testq	%rax, %rax
	jle	.LBB22_50
.LBB22_51:                              # %if.then120.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	$1, %rcx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	validate_change
	jmp	.LBB22_53
	.align	16, 0x90
.LBB22_50:                              # %if.else.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	%r12, (%rbx)
.LBB22_53:                              # %for.cond.backedge.us
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB22_41
# BB#54:
	movq	%r13, %rax
	jmp	.LBB22_35
	.align	16, 0x90
.LBB22_55:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_61 Depth 2
	movq	%r15, %r14
	movq	8(%rsp), %rax           # 8-byte Reload
	movzbl	-1(%rax,%r14), %eax
	leaq	-1(%r14), %r15
	cmpq	$69, %rax
	jne	.LBB22_56
# BB#60:                                # %for.cond138.preheader
                                        #   in Loop: Header=BB22_55 Depth=1
	movq	(%r13,%r14,8), %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	movq	$1, %rbx
	jle	.LBB22_57
	.align	16, 0x90
.LBB22_61:                              # %for.body144
                                        #   Parent Loop BB22_55 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%rbx,8), %rdi
	xorq	%rsi, %rsi
	callq	canon_reg
	movq	(%r13,%r14,8), %rcx
	movq	%rax, (%rcx,%rbx,8)
	movq	(%r13,%r14,8), %rax
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%rbx
	cmpq	%rdx, %rsi
	jl	.LBB22_61
	jmp	.LBB22_57
	.align	16, 0x90
.LBB22_56:                              # %for.body
                                        #   in Loop: Header=BB22_55 Depth=1
	cmpq	$101, %rax
	jne	.LBB22_57
# BB#59:                                # %if.else
                                        #   in Loop: Header=BB22_55 Depth=1
	movq	(%r13,%r14,8), %rdi
	xorq	%rsi, %rsi
	callq	canon_reg
	movq	%rax, (%r13,%r14,8)
.LBB22_57:                              # %for.cond.backedge
                                        #   in Loop: Header=BB22_55 Depth=1
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB22_55
# BB#58:
	movq	%r13, %rax
	jmp	.LBB22_35
.LBB22_39:
	movq	%r13, %rax
.LBB22_35:                              # %return
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB22_7:                               # %lor.lhs.false
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	jne	.LBB22_9
# BB#8:                                 # %lor.lhs.false
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r14, %r12
	jne	.LBB22_19
.LBB22_9:                               # %cond.false
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB22_13
# BB#10:
	movq	%rcx, %rax
.LBB22_12:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB22_18
# BB#11:                                # %for.cond.i
                                        #   in Loop: Header=BB22_12 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB22_12
.LBB22_13:                              # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB22_15
# BB#14:                                # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB22_16
.LBB22_15:                              # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB22_16:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB22_18
# BB#17:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB22_18:                              # %get_cse_reg_info.exit
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r13), %r12d
.LBB22_19:                              # %cond.end
	movl	20(%rax), %esi
	movq	%r12, %rdx
	andq	%r15, %rdx
	cmpq	%rdx, %rsi
	jne	.LBB22_21
# BB#20:
	movq	%r13, %rax
	jmp	.LBB22_35
.LBB22_21:                              # %if.end15
	cmpq	%r14, %rdx
	jne	.LBB22_23
# BB#22:                                # %if.end15
	testq	%rax, %rax
	jne	.LBB22_33
.LBB22_23:                              # %cond.false23
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB22_27
# BB#24:
	movq	%rcx, %rax
.LBB22_26:                              # %for.body.i227
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB22_32
# BB#25:                                # %for.cond.i223
                                        #   in Loop: Header=BB22_26 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB22_26
.LBB22_27:                              # %if.then4.i229
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB22_29
# BB#28:                                # %if.then5.i231
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB22_30
.LBB22_29:                              # %if.else.i234
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB22_30:                              # %if.end6.i243
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB22_32
# BB#31:                                # %if.then11.i244
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB22_32:                              # %get_cse_reg_info.exit246
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %esi
.LBB22_33:                              # %cond.end28
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	qty_table(%rip), %rdx
	leaq	(%rsi,%rsi,2), %rdi
	movq	$4, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movslq	28(%rdx,%rax), %rsi
	cmpq	$53, %rsi
	jl	.LBB22_36
# BB#34:                                # %cond.true33
	movq	cfun(%rip), %rax
	movq	24(%rax), %rax
	movq	80(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	jmp	.LBB22_35
.LBB22_36:                              # %cond.false36
	movl	regclass_map(,%rsi,4), %eax
	testq	%rax, %rax
	movq	%r13, %rax
	je	.LBB22_35
# BB#37:                                # %cond.false41
	movq	$4, %rcx
	shlq	%cl, %rdi
	movl	36(%rdx,%rdi), %edi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_REG  # TAILCALL
.Ltmp315:
	.size	canon_reg, .Ltmp315-canon_reg
	.cfi_endproc

	.align	16, 0x90
	.type	fold_rtx,@function
fold_rtx:                               # @fold_rtx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp322:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp323:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp324:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp325:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp326:
	.cfi_def_cfa_offset 48
	subq	$192, %rsp
.Ltmp327:
	.cfi_def_cfa_offset 240
.Ltmp328:
	.cfi_offset %rbx, -48
.Ltmp329:
	.cfi_offset %r12, -40
.Ltmp330:
	.cfi_offset %r13, -32
.Ltmp331:
	.cfi_offset %r14, -24
.Ltmp332:
	.cfi_offset %r15, -16
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	xorq	%r12, %r12
	testq	%rdi, %rdi
	je	.LBB23_933
# BB#1:                                 # %if.end
	movl	(%rdi), %edx
	movq	%rdx, 104(%rsp)         # 8-byte Spill
	movq	$16, %rcx
	movq	%rdx, %rax
	shrq	%cl, %rax
	andq	$255, %rax
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$40, %rcx
	jg	.LBB23_4
# BB#2:                                 # %if.end
	movq	%rax, 56(%rsp)          # 8-byte Spill
	cmpq	$3, %rcx
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	jne	.LBB23_461
# BB#3:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_4:                               # %if.end
	cmpq	$49, %rcx
	jg	.LBB23_10
# BB#5:                                 # %if.end
	movq	%rax, 56(%rsp)          # 8-byte Spill
	cmpq	$41, %rcx
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	jne	.LBB23_461
# BB#6:                                 # %sw.bb1438
	movq	32(%rdi), %r13
	movslq	(%r13), %r14
	testq	%r14, %r14
	jle	.LBB23_461
# BB#7:                                 # %for.body1446.lr.ph
	movq	%rdi, %r12
	movq	$3, %rcx
	leaq	-1(%r14), %r15
	shlq	%cl, %r14
	movq	128(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB23_8
	.align	16, 0x90
.LBB23_9:                               # %for.body1446.for.body1446_crit_edge
                                        #   in Loop: Header=BB23_8 Depth=1
	movq	32(%rdi), %r13
	movq	%rdi, %r12
	decq	%r15
	addq	$-8, %r14
.LBB23_8:                               # %for.body1446
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13,%r14), %rdi
	addq	%r14, %r13
	movq	%rbx, %rsi
	callq	fold_rtx
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	validate_change
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	%r12, %rdi
	jg	.LBB23_9
	jmp	.LBB23_461
.LBB23_10:                              # %if.end
	movq	%rax, 56(%rsp)          # 8-byte Spill
	cmpq	$85, %rcx
	jg	.LBB23_179
# BB#11:                                # %if.end
	leaq	-50(%rcx), %rax
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$27, %rax
	ja	.LBB23_461
# BB#12:                                # %if.end
	movq	%rdi, %r12
	jmpq	*.LJTI23_0(,%rax,8)
.LBB23_453:                             # %sw.bb1348
	movq	8(%rdi), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$133, %rax
	jg	.LBB23_457
# BB#454:                               # %sw.bb1348
	addq	$-54, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	ja	.LBB23_461
# BB#455:                               # %sw.bb1348
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	je	.LBB23_461
# BB#456:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_179:                             # %if.end
	cmpq	$86, %rcx
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	jne	.LBB23_461
.LBB23_180:                             # %sw.bb889
	movq	%rdi, %rbx
	movq	8(%rbx), %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	lookup_as_function
	movq	%rbx, %rdi
	testq	%rax, %rax
	je	.LBB23_461
# BB#181:                               # %if.then895
	movq	8(%rax), %rdi
	callq	copy_rtx
	movq	%rax, %rdi
	movq	128(%rsp), %rsi         # 8-byte Reload
.LBB23_182:                             # %return
	callq	fold_rtx
	movq	%rax, %r12
	jmp	.LBB23_933
.LBB23_13:                              # %sw.bb3
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	je	.LBB23_461
# BB#14:                                # %land.lhs.true
	movq	128(%rsp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$33, %rax
	jne	.LBB23_461
# BB#15:                                # %if.then7
	movq	%rdi, %rbx
	movq	128(%rsp), %rdi         # 8-byte Reload
	callq	next_nonnote_insn
	movq	%rbx, %rdi
	testq	%rax, %rax
	je	.LBB23_461
# BB#16:                                # %land.lhs.true9
	movzbl	(%rax), %ecx
	cmpq	$36, %rcx
	jne	.LBB23_461
# BB#17:                                # %land.lhs.true13
	movq	24(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB23_461
# BB#18:                                # %land.lhs.true15
	movzbl	(%rcx), %edx
	cmpq	$33, %rdx
	jne	.LBB23_461
# BB#19:                                # %land.lhs.true22
	movq	32(%rcx), %rcx
	movl	(%rcx), %ecx
	andq	$65534, %rcx            # imm = 0xFFFE
	cmpq	$44, %rcx
	jne	.LBB23_461
# BB#20:                                # %if.then41
	movl	target_flags(%rip), %edx
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$4, %rdx
	movq	$67, %rdi
	movq	%rdx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_u00
	movq	%rax, %r12
	jmp	.LBB23_933
.LBB23_21:                              # %sw.bb46
	movq	$54, %rsi
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	callq	lookup_as_function
	movq	%rax, %r12
	testq	%r12, %r12
	jne	.LBB23_933
# BB#22:                                # %lor.lhs.false49
	movq	$55, %rsi
	movq	%rbx, %rdi
	callq	lookup_as_function
	movq	%rbx, %rdi
	movq	%rax, %r12
	testq	%r12, %r12
	jne	.LBB23_933
# BB#23:                                # %if.end53
	movq	8(%rdi), %r15
	movl	(%r15), %eax
	movq	56(%rsp), %r12          # 8-byte Reload
	movzbl	mode_size(%r12), %r14d
	movq	$16, %rcx
	movq	%rax, %rbx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movzbl	mode_size(%rbx), %edx
	cmpq	%rdx, %r14
	jbe	.LBB23_72
# BB#24:                                # %if.then66
	movl	target_flags(%rip), %esi
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	addq	$4, %rsi
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rsi, %rcx
	cmpq	%rcx, %r14
	ja	.LBB23_25
# BB#26:                                # %if.then66
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rsi
	cmpq	%rsi, %rdx
	ja	.LBB23_27
# BB#28:                                # %land.lhs.true90
	movq	%r12, %r13
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB23_43
# BB#29:                                # %land.lhs.true101
	movl	8(%r15), %eax
	cmpq	$53, %rax
	movq	%rax, %rdx
	jb	.LBB23_43
# BB#30:                                # %cond.true
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rdx
	jne	.LBB23_32
# BB#31:                                # %cond.true
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_42
.LBB23_32:                              # %cond.false
	movq	$7, %rcx
	movq	%rdx, %rax
	movq	%rax, %r12
	shrq	%cl, %r12
	xorq	%rax, %r12
	andq	$127, %r12
	movq	reg_hash(,%r12,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_36
# BB#33:
	movq	%rcx, %rax
.LBB23_35:                              # %for.body.i3639
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	movl	8(%r15), %esi
	cmpq	%rsi, %rdx
	je	.LBB23_41
# BB#34:                                # %for.cond.i
                                        #   in Loop: Header=BB23_35 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_35
.LBB23_36:                              # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_38
# BB#37:                                # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_39
.LBB23_183:                             # %sw.bb902
	leaq	8(%rdi), %rsi
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	je	.LBB23_353
# BB#184:                               # %if.then905
	movq	(%rsi), %r13
	movzbl	(%r13), %eax
	movzbl	do_not_record(%rip), %ebx
	movzbl	hash_arg_in_memory(%rip), %r8d
	addq	$-54, %rax
	andq	%r14, %rax
	cmpq	$21, %rax
	ja	.LBB23_198
# BB#185:                               # %if.then905
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$90131, %rdx            # imm = 0x16013
	jne	.LBB23_353
# BB#186:                               # %if.then905
	cmpq	$7, %rax
	je	.LBB23_195
# BB#187:                               # %if.then905
	cmpq	$21, %rax
	jne	.LBB23_198
# BB#188:                               # %land.lhs.true.i4270
	movq	8(%r13), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB23_198
# BB#189:                               # %land.lhs.true4.i4271
	movq	16(%r13), %rdx
	movzbl	(%rdx), %edx
	cmpq	$54, %rdx
	jne	.LBB23_192
# BB#190:                               # %land.lhs.true11.i
	movl	8(%rcx), %ecx
	cmpq	$20, %rcx
	ja	.LBB23_192
# BB#191:                               # %land.lhs.true11.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$1114176, %rdx          # imm = 0x110040
	jne	.LBB23_353
.LBB23_192:                             # %lor.lhs.false20.i
	cmpq	$16, %rax
	ja	.LBB23_198
# BB#193:                               # %lor.lhs.false20.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$90131, %rdx            # imm = 0x16013
	jne	.LBB23_353
# BB#194:                               # %lor.lhs.false20.i
	cmpq	$7, %rax
	jne	.LBB23_198
.LBB23_195:                             # %land.lhs.true24.i
	movq	%rbx, %rdx
	movq	%r8, %rbx
	movl	8(%r13), %eax
	cmpq	$20, %rax
	jbe	.LBB23_197
# BB#196:
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, %rdx
	jmp	.LBB23_215
.LBB23_457:                             # %sw.bb1348
	cmpq	$134, %rax
	jne	.LBB23_459
# BB#458:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_198:                             # %if.then61.i
	movq	%rbx, 104(%rsp)         # 8-byte Spill
	movq	%r8, 112(%rsp)          # 8-byte Spill
	movq	%rsi, %r12
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	callq	copy_rtx
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	fold_rtx
	movq	%rax, %r15
	movzbl	(%r15), %eax
	cmpq	$70, %rax
	jne	.LBB23_201
# BB#199:                               # %land.lhs.true.i.i
	movq	8(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB23_201
# BB#200:
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	jmp	.LBB23_203
.LBB23_459:                             # %sw.bb1348
	cmpq	$140, %rax
	jne	.LBB23_461
# BB#460:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_461:                             # %sw.epilog
	xorq	%rax, %rax
	movl	%eax, 172(%rsp)
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	rtx_format(,%r9,8), %rdx
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movzbl	rtx_length(%r9), %r14d
	andq	$65534, 104(%rsp)       # 8-byte Folded Spill
                                        # imm = 0xFFFE
	movabsq	$4294967296, %rsi       # imm = 0x100000000
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	movabsq	$0, %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	$0, 88(%rsp)            # 8-byte Folded Spill
	movq	$0, 72(%rsp)            # 8-byte Folded Spill
	movq	$0, 64(%rsp)            # 8-byte Folded Spill
	movq	$0, 48(%rsp)            # 8-byte Folded Spill
	jmp	.LBB23_462
.LBB23_567:                             #   in Loop: Header=BB23_462 Depth=1
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	.align	16, 0x90
.LBB23_462:                             # %for.cond1469.outer.outer4324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_463 Depth 2
                                        #       Child Loop BB23_464 Depth 3
                                        #       Child Loop BB23_476 Depth 3
                                        #       Child Loop BB23_489 Depth 3
                                        #     Child Loop BB23_544 Depth 2
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	jmp	.LBB23_463
.LBB23_474:                             # %if.then5.i3994
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	movl	8(%r8), %edi
.LBB23_478:                             # %if.end6.i4006
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r10d, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_480
# BB#479:                               # %if.then11.i4007
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_480:                             # %get_cse_reg_info.exit4009
                                        #   in Loop: Header=BB23_463 Depth=2
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r8), %r9d
.LBB23_481:                             # %cond.end1502
                                        #   in Loop: Header=BB23_463 Depth=2
	movl	20(%rax), %esi
	movq	%r9, %rdx
	andq	%r10, %rdx
	xorq	%r11, %r11
	cmpq	%rdx, %rsi
	jne	.LBB23_483
# BB#482:                               #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, 80(%rsp)           # 8-byte Spill
	jmp	.LBB23_508
.LBB23_483:                             # %if.then1510
                                        #   in Loop: Header=BB23_463 Depth=2
	cmpq	%rdi, %rdx
	jne	.LBB23_485
# BB#484:                               # %if.then1510
                                        #   in Loop: Header=BB23_463 Depth=2
	testq	%rax, %rax
	jne	.LBB23_495
.LBB23_485:                             # %cond.false1519
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$7, %rcx
	movq	%r9, %rdi
	shrq	%cl, %rdi
	xorq	%r9, %rdi
	andq	$127, %rdi
	movq	reg_hash(,%rdi,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB23_486
.LBB23_489:                             # %for.body.i4024
                                        #   Parent Loop BB23_462 Depth=1
                                        #     Parent Loop BB23_463 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB23_494
# BB#488:                               # %for.cond.i4020
                                        #   in Loop: Header=BB23_489 Depth=3
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_489
.LBB23_486:                             # %if.then4.i4026
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rdi, %r12
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_487
# BB#490:                               # %if.else.i4031
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, 80(%rsp)           # 8-byte Spill
	movq	$32, %rdi
	movq	%r9, 40(%rsp)           # 8-byte Spill
	callq	xmalloc
	movq	40(%rsp), %r9           # 8-byte Reload
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	movq	reg_hash(,%r12,8), %rcx
	jmp	.LBB23_491
.LBB23_487:                             # %if.then5.i4028
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, 80(%rsp)           # 8-byte Spill
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB23_491:                             # %if.end6.i4040
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r10d, 28(%rax)
	movl	%r9d, 20(%rax)
	movl	%r9d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	movq	80(%rsp), %r8           # 8-byte Reload
	jne	.LBB23_493
# BB#492:                               # %if.then11.i4041
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_493:                             # %get_cse_reg_info.exit4043
                                        #   in Loop: Header=BB23_463 Depth=2
	xorq	%r11, %r11
.LBB23_494:                             # %get_cse_reg_info.exit4043
                                        #   in Loop: Header=BB23_463 Depth=2
	movl	%r9d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %esi
.LBB23_495:                             # %cond.end1524
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	qty_table(%rip), %rax
	leaq	(%rsi,%rsi,2), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	movq	(%rax,%rdx), %r12
	testq	%r12, %r12
	jne	.LBB23_497
# BB#496:                               #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, 80(%rsp)           # 8-byte Spill
	jmp	.LBB23_508
.LBB23_497:                             # %land.lhs.true1532
                                        #   in Loop: Header=BB23_463 Depth=2
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB23_499
# BB#498:                               #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, 80(%rsp)           # 8-byte Spill
	jmp	.LBB23_508
.LBB23_499:                             # %land.lhs.true1532
                                        #   in Loop: Header=BB23_463 Depth=2
	cmpq	$75, %rax
	jne	.LBB23_501
# BB#500:                               #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, 80(%rsp)           # 8-byte Spill
	jmp	.LBB23_508
.LBB23_501:                             # %if.then1544
                                        #   in Loop: Header=BB23_463 Depth=2
	movzbl	2(%r8), %edi
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	movq	%r8, 80(%rsp)           # 8-byte Spill
	movq	%r12, %rsi
	callq	gen_lowpart_common
	testq	%rax, %rax
	jne	.LBB23_502
# BB#503:                               # %if.else.i4049
                                        #   in Loop: Header=BB23_463 Depth=2
	movzbl	(%r12), %eax
	cmpq	$66, %rax
	movabsq	$0, %r11
	jne	.LBB23_504
# BB#505:                               # %if.then1.i4056
                                        #   in Loop: Header=BB23_463 Depth=2
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%r12, %rdi
	movq	40(%rsp), %r12          # 8-byte Reload
	movq	%r12, %rsi
	callq	adjust_address_1
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	8(%rax), %rsi
	movq	%r12, %rdi
	callq	memory_address_p
	movq	%rax, %r11
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	andq	%r10, %r11
	je	.LBB23_508
# BB#506:                               # %if.then1.i4056
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	8(%rsp), %r11           # 8-byte Reload
	jmp	.LBB23_508
.LBB23_502:                             #   in Loop: Header=BB23_463 Depth=2
	movq	%rax, %r11
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	jmp	.LBB23_508
.LBB23_504:                             #   in Loop: Header=BB23_463 Depth=2
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	jmp	.LBB23_508
	.align	16, 0x90
.LBB23_463:                             # %for.cond1469.outer
                                        #   Parent Loop BB23_462 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_464 Depth 3
                                        #       Child Loop BB23_476 Depth 3
                                        #       Child Loop BB23_489 Depth 3
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	%r14, %rax
	imulq	%rsi, %rax
	movq	%rsi, %r15
	subq	%rax, %r15
	leaq	8(,%r14,8), %r13
	.align	16, 0x90
.LBB23_464:                             # %for.cond1469
                                        #   Parent Loop BB23_462 Depth=1
                                        #     Parent Loop BB23_463 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%r14, %rbx
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB23_583
# BB#465:                               # %for.body1472
                                        #   in Loop: Header=BB23_464 Depth=3
	movzbl	-1(%rdx,%rbx), %eax
	leaq	-1(%rbx), %r14
	addq	%rsi, %r15
	addq	$-8, %r13
	cmpq	$101, %rax
	jne	.LBB23_464
# BB#466:                               # %if.then1478
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	(%rdi,%rbx,8), %r8
	movl	(%r8), %eax
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-54, %rax
	andq	%r10, %rax
	cmpq	$14, %rax
	ja	.LBB23_507
# BB#467:                               # %if.then1478
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$24599, %rdx            # imm = 0x6017
	je	.LBB23_469
# BB#468:                               #   in Loop: Header=BB23_463 Depth=2
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	%r8, %r11
	movq	%r8, 80(%rsp)           # 8-byte Spill
	jmp	.LBB23_508
.LBB23_469:                             # %if.then1478
                                        #   in Loop: Header=BB23_463 Depth=2
	cmpq	$7, %rax
	jne	.LBB23_507
# BB#470:                               # %sw.bb1488
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movl	8(%r8), %edi
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rdi
	jne	.LBB23_472
# BB#471:                               # %sw.bb1488
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%rdi, %r9
	jne	.LBB23_481
.LBB23_472:                             # %cond.false1497
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$7, %rcx
	movq	%rdi, %rsi
	shrq	%cl, %rsi
	xorq	%rdi, %rsi
	andq	$127, %rsi
	movq	reg_hash(,%rsi,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB23_473
.LBB23_476:                             # %for.body.i3990
                                        #   Parent Loop BB23_462 Depth=1
                                        #     Parent Loop BB23_463 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB23_480
# BB#475:                               # %for.cond.i3986
                                        #   in Loop: Header=BB23_476 Depth=3
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_476
.LBB23_473:                             # %if.then4.i3992
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rsi, %r12
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_474
# BB#477:                               # %if.else.i3997
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$32, %rdi
	movq	%r8, 80(%rsp)           # 8-byte Spill
	callq	xmalloc
	movq	80(%rsp), %r8           # 8-byte Reload
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	movq	reg_hash(,%r12,8), %rcx
	movq	40(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB23_478
	.align	16, 0x90
.LBB23_507:                             # %sw.default1553
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rdi
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	%r10, %r12
	callq	fold_rtx
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	equiv_constant
	movq	%r12, %r10
	movq	%rax, %r11
.LBB23_508:                             # %sw.epilog1556
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rbx, %rax
	andq	%r10, %rax
	cmpq	$3, %rax
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movabsq	$4294967296, %rsi       # imm = 0x100000000
	je	.LBB23_513
# BB#509:                               # %sw.epilog1556
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rbx, %rax
	andq	%r10, %rax
	cmpq	$2, %rax
	movq	80(%rsp), %r8           # 8-byte Reload
	jne	.LBB23_510
# BB#512:                               # %sw.bb1558
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, 176(%rsp)
	movq	%r11, 88(%rsp)          # 8-byte Spill
	jmp	.LBB23_514
.LBB23_513:                             # %sw.bb1559
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r11, 32(%rsp)          # 8-byte Spill
	movq	80(%rsp), %r8           # 8-byte Reload
	jmp	.LBB23_514
.LBB23_510:                             # %sw.epilog1556
                                        #   in Loop: Header=BB23_463 Depth=2
	cmpq	$1, %rax
	jne	.LBB23_514
# BB#511:                               # %sw.bb1557
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, 184(%rsp)
	movq	16(%rsp), %rax          # 8-byte Reload
	movl	%eax, 172(%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	.align	16, 0x90
.LBB23_514:                             # %sw.epilog1560
                                        #   in Loop: Header=BB23_463 Depth=2
	testq	%r11, %r11
	je	.LBB23_515
# BB#516:                               # %sw.epilog1560
                                        #   in Loop: Header=BB23_463 Depth=2
	cmpq	%r8, %r11
	je	.LBB23_517
# BB#518:                               # %lor.lhs.false1566
                                        #   in Loop: Header=BB23_463 Depth=2
	movl	(%r11), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	movabsq	$0, %r12
	je	.LBB23_526
# BB#519:                               # %lor.lhs.false1566
                                        #   in Loop: Header=BB23_463 Depth=2
	cmpq	$63, %rcx
	jne	.LBB23_525
# BB#520:                               # %land.lhs.true.i4104
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	8(%r11), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_525
# BB#521:                               # %land.lhs.true4.i4110
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_525
# BB#522:                               # %land.lhs.true9.i4116
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_525
# BB#523:                               # %land.lhs.true19.i4120
                                        #   in Loop: Header=BB23_463 Depth=2
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB23_525
# BB#524:                               # %land.lhs.true36.i4123
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r11, %rdi
	movq	%r10, %r12
	movq	%r11, 40(%rsp)          # 8-byte Spill
	callq	subreg_lowpart_p
	movq	40(%rsp), %r11          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	testq	%r12, %rax
	movabsq	$0, %r12
	jne	.LBB23_526
.LBB23_525:                             # %cond.false.i4126
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r11, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rdi
	movq	%r9, %rsi
	movq	%r9, %r12
	callq	rtx_cost
	movq	40(%rsp), %r11          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	%r12, %r9
	movq	%rax, %r12
	addq	%r12, %r12
.LBB23_526:                             # %cond.end1574
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r11, 40(%rsp)          # 8-byte Spill
	movl	(%r8), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_528
# BB#527:                               #   in Loop: Header=BB23_463 Depth=2
	xorq	%rdx, %rdx
	jmp	.LBB23_535
.LBB23_515:                             #   in Loop: Header=BB23_463 Depth=2
	movq	%r11, %r12
	jmp	.LBB23_539
.LBB23_517:                             #   in Loop: Header=BB23_463 Depth=2
	movq	%r11, %r12
	jmp	.LBB23_539
.LBB23_528:                             # %cond.end1574
                                        #   in Loop: Header=BB23_463 Depth=2
	cmpq	$63, %rcx
	jne	.LBB23_534
# BB#529:                               # %land.lhs.true.i4137
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	8(%r8), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_534
# BB#530:                               # %land.lhs.true4.i4143
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_534
# BB#531:                               # %land.lhs.true9.i4149
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_534
# BB#532:                               # %land.lhs.true19.i4153
                                        #   in Loop: Header=BB23_463 Depth=2
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB23_534
# BB#533:                               # %land.lhs.true36.i4156
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, %rdi
	callq	subreg_lowpart_p
	xorq	%rdx, %rdx
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB23_535
.LBB23_534:                             # %cond.false.i4159
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, %rdi
	movq	%r9, %rsi
	callq	rtx_cost
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	%rax, %rdx
	addq	%rdx, %rdx
.LBB23_535:                             # %cond.end1583
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	cmpq	%rdx, %r12
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, %r12
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	jg	.LBB23_537
# BB#536:                               # %cond.end1583
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%r8, %r12
.LBB23_537:                             # %cond.end1583
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movabsq	$4294967296, %rsi       # imm = 0x100000000
	jg	.LBB23_539
# BB#538:                               # %cond.end1583
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	%rax, %r8
.LBB23_539:                             # %if.end1589
                                        #   in Loop: Header=BB23_463 Depth=2
	movq	(%rdi,%rbx,8), %rax
	cmpq	%rax, %r8
	je	.LBB23_463
# BB#540:                               # %if.end1597
                                        #   in Loop: Header=BB23_462 Depth=1
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	jne	.LBB23_543
# BB#541:                               # %if.end1597
                                        #   in Loop: Header=BB23_462 Depth=1
	movq	48(%rsp), %rax          # 8-byte Reload
	testq	%r10, %rax
	jne	.LBB23_543
# BB#542:                               # %if.then1602
                                        #   in Loop: Header=BB23_462 Depth=1
	movq	%r10, %rbx
	movq	%r8, 80(%rsp)           # 8-byte Spill
	callq	copy_rtx
	movq	80(%rsp), %r8           # 8-byte Reload
	movabsq	$4294967296, %rsi       # imm = 0x100000000
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	%rbx, %r10
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	%rax, %rdi
	movq	$1, 48(%rsp)            # 8-byte Folded Spill
.LBB23_543:                             # %if.end1604
                                        #   in Loop: Header=BB23_462 Depth=1
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	movq	%r8, 144(%rsp)
	movq	%r12, 152(%rsp)
	leaq	(%rdi,%r13), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	$32, %rcx
	sarq	%cl, %r15
	leaq	8(%rdi,%r15,8), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$1, %rbx
	jmp	.LBB23_544
.LBB23_582:                             # %for.inc1792.land.rhs_crit_edge
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	144(%rsp,%rbx,8), %r8
	incq	%rbx
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movabsq	$4294967296, %rsi       # imm = 0x100000000
.LBB23_544:                             # %land.rhs
                                        #   Parent Loop BB23_462 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testq	%r8, %r8
	je	.LBB23_462
# BB#545:                               # %for.body1613
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	(%rdi,%r13), %rdi
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	xorq	%r15, %r15
	cmpq	$61, %rcx
	movabsq	$0, %r12
	je	.LBB23_553
# BB#546:                               # %for.body1613
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$63, %rcx
	jne	.LBB23_552
# BB#547:                               # %land.lhs.true.i4170
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	8(%rdi), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_552
# BB#548:                               # %land.lhs.true4.i4176
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_552
# BB#549:                               # %land.lhs.true9.i4182
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_552
# BB#550:                               # %land.lhs.true19.i4186
                                        #   in Loop: Header=BB23_544 Depth=2
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB23_552
# BB#551:                               # %land.lhs.true36.i4189
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	%rdi, %r12
                                        # kill: RDI<def> R12<kill>
	movq	%r10, %rbx
	movq	%r8, 80(%rsp)           # 8-byte Spill
	callq	subreg_lowpart_p
	movq	%r12, %rdi
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	%rbx, %r10
	movq	112(%rsp), %r9          # 8-byte Reload
	testq	%r10, %rax
	movabsq	$0, %r12
	jne	.LBB23_553
.LBB23_552:                             # %cond.false.i4192
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	%r9, %rsi
	movq	%r10, %rbx
	movq	%r8, %r12
	callq	rtx_cost
	movq	%r12, %r8
	movq	%rbx, %r10
	movq	%rax, %r12
	addq	%r12, %r12
.LBB23_553:                             # %cond.end1629
                                        #   in Loop: Header=BB23_544 Depth=2
	movl	(%r8), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	je	.LBB23_561
# BB#554:                               # %cond.end1629
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$63, %rcx
	jne	.LBB23_560
# BB#555:                               # %land.lhs.true.i4203
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	8(%r8), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_560
# BB#556:                               # %land.lhs.true4.i4209
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_560
# BB#557:                               # %land.lhs.true9.i4215
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_560
# BB#558:                               # %land.lhs.true19.i4219
                                        #   in Loop: Header=BB23_544 Depth=2
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB23_560
# BB#559:                               # %land.lhs.true36.i4222
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	%r8, %rdi
	movq	%r8, %rbx
	callq	subreg_lowpart_p
	movq	%rbx, %r8
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	testq	%r10, %rax
	jne	.LBB23_561
.LBB23_560:                             # %cond.false.i4225
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	%r8, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%r10, %r15
	movq	%r8, %rbx
	callq	rtx_cost
	movq	%rbx, %r8
	movq	%r15, %r10
	movq	%rax, %r15
	addq	%r15, %r15
.LBB23_561:                             # %cond.end1642
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jg	.LBB23_562
# BB#563:                               # %lor.lhs.false1646
                                        #   in Loop: Header=BB23_544 Depth=2
	andq	%r10, %r12
	andq	%r10, %r15
	cmpq	%r12, %r15
	movq	120(%rsp), %rdi         # 8-byte Reload
	movabsq	$4294967296, %rsi       # imm = 0x100000000
	jne	.LBB23_570
# BB#564:                               # %land.lhs.true1649
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	(%rdi,%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$133, %rcx
	jg	.LBB23_568
# BB#565:                               # %land.lhs.true1649
                                        #   in Loop: Header=BB23_544 Depth=2
	addq	$-54, %rcx
	andq	%r10, %rcx
	cmpq	$14, %rcx
	ja	.LBB23_570
# BB#566:                               # %land.lhs.true1649
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	je	.LBB23_570
	jmp	.LBB23_567
.LBB23_568:                             # %land.lhs.true1649
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$134, %rcx
	je	.LBB23_567
# BB#569:                               # %land.lhs.true1649
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$140, %rcx
	je	.LBB23_567
.LBB23_570:                             # %if.end1722
                                        #   in Loop: Header=BB23_544 Depth=2
	xorq	%rcx, %rcx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%r8, %rdx
	movq	%r8, %r12
	movq	%r10, %rbx
	callq	validate_change
	movq	%rbx, %r10
	testq	%r10, %rax
	jne	.LBB23_562
# BB#571:                               # %if.end1732
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$102, 104(%rsp)         # 8-byte Folded Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	je	.LBB23_577
# BB#572:                               # %lor.lhs.false1738
                                        #   in Loop: Header=BB23_544 Depth=2
	movzbl	rtx_class(%r9), %eax
	cmpq	$99, %rax
	je	.LBB23_577
# BB#573:                               # %lor.lhs.false1738
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$119, %r9
	je	.LBB23_577
# BB#574:                               # %lor.lhs.false1738
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$114, %r9
	je	.LBB23_577
# BB#575:                               # %lor.lhs.false1738
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$113, %r9
	je	.LBB23_577
# BB#576:                               # %lor.lhs.false1738
                                        #   in Loop: Header=BB23_544 Depth=2
	cmpq	$112, %r9
	jne	.LBB23_579
.LBB23_577:                             # %if.then1756
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	8(%rsp), %r15           # 8-byte Reload
	movq	(%r15), %rdx
	movq	$1, %rcx
	movq	128(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	validate_change
	movq	$1, %rcx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	callq	validate_change
	callq	apply_change_group
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	movq	112(%rsp), %r9          # 8-byte Reload
	testq	%r10, %rax
	jne	.LBB23_578
.LBB23_579:                             # %for.inc1792
                                        #   in Loop: Header=BB23_544 Depth=2
	movq	$32, %rcx
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$1, %rax
	jle	.LBB23_582
# BB#580:                               #   in Loop: Header=BB23_462 Depth=1
	movq	120(%rsp), %rdi         # 8-byte Reload
	jmp	.LBB23_581
.LBB23_562:                             #   in Loop: Header=BB23_462 Depth=1
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	jmp	.LBB23_581
.LBB23_578:                             # %if.then1777
                                        #   in Loop: Header=BB23_462 Depth=1
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	8(%rdi), %rax
	movq	16(%rdi), %rcx
	movq	%rcx, 8(%rdi)
	movq	%rax, 16(%rdi)
	movq	$1, 64(%rsp)            # 8-byte Folded Spill
.LBB23_581:                             # %for.cond1469.outer.outer4324
                                        #   in Loop: Header=BB23_462 Depth=1
	movq	96(%rsp), %rdx          # 8-byte Reload
	movabsq	$4294967296, %rsi       # imm = 0x100000000
	jmp	.LBB23_462
.LBB23_583:                             # %for.end1805
	cmpq	$102, 104(%rsp)         # 8-byte Folded Reload
	je	.LBB23_590
# BB#584:                               # %lor.lhs.false1811
	movzbl	rtx_class(%r9), %eax
	cmpq	$99, %rax
	je	.LBB23_590
# BB#585:                               # %lor.lhs.false1811
	cmpq	$119, %r9
	je	.LBB23_590
# BB#586:                               # %lor.lhs.false1811
	cmpq	$114, %r9
	je	.LBB23_590
# BB#587:                               # %lor.lhs.false1811
	cmpq	$113, %r9
	je	.LBB23_590
# BB#588:                               # %lor.lhs.false1811
	cmpq	$112, %r9
	jne	.LBB23_589
.LBB23_590:                             # %if.then1829
	movq	64(%rsp), %rax          # 8-byte Reload
	testq	%r10, %rax
	jne	.LBB23_597
# BB#591:                               # %lor.lhs.false1831
	movq	72(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	je	.LBB23_592
# BB#593:                               # %land.lhs.true1833
	cmpq	$0, 88(%rsp)            # 8-byte Folded Reload
	je	.LBB23_597
# BB#594:                               # %lor.lhs.false1836
	movq	72(%rsp), %rcx          # 8-byte Reload
	movzbl	(%rcx), %eax
	cmpq	$54, %rax
	jne	.LBB23_595
# BB#596:                               # %land.lhs.true1841
	movq	88(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB23_597
.LBB23_589:
	movq	%rdi, %r14
	movq	88(%rsp), %r12          # 8-byte Reload
	movq	72(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB23_604
.LBB23_597:                             # %if.then1846
	movq	8(%rdi), %r15
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	jne	.LBB23_598
# BB#599:                               # %if.then1846
	movq	48(%rsp), %rax          # 8-byte Reload
	testq	%r10, %rax
	movq	%r10, %r13
	jne	.LBB23_601
# BB#600:                               # %if.then1855
	callq	copy_rtx
	movq	%rax, %rdi
	jmp	.LBB23_601
.LBB23_598:
	movq	%r10, %r13
.LBB23_601:                             # %if.end1857
	movq	16(%rdi), %rdx
	leaq	8(%rdi), %rsi
	leaq	16(%rdi), %r12
	movq	%rdi, %r14
	movq	$1, %rcx
	movq	128(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	callq	validate_change
	movq	$1, %rcx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	validate_change
	callq	apply_change_group
	movq	%r13, %r10
	testq	%r10, %rax
	je	.LBB23_602
# BB#603:                               # %if.then1871
	movq	184(%rsp), %rax
	movq	176(%rsp), %rcx
	movq	%rcx, 184(%rsp)
	movq	%rax, 176(%rsp)
	movq	72(%rsp), %r12          # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	88(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB23_604
.LBB23_602:
	movq	88(%rsp), %r12          # 8-byte Reload
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	jmp	.LBB23_604
.LBB23_592:
	movq	%rdi, %r14
	movq	88(%rsp), %r12          # 8-byte Reload
	xorq	%rdi, %rdi
	jmp	.LBB23_604
.LBB23_595:
	movq	%rdi, %r14
	movq	88(%rsp), %r12          # 8-byte Reload
	movq	%rcx, %rdi
.LBB23_604:                             # %if.end1874
	movsbq	rtx_class(%r9), %rax
	xorq	%rbx, %rbx
	cmpq	$119, %rax
	jg	.LBB23_641
# BB#605:                               # %if.end1874
	cmpq	$110, %rax
	jg	.LBB23_633
# BB#606:                               # %if.end1874
	cmpq	$97, %rax
	movq	%r14, %r8
	jg	.LBB23_622
# BB#607:                               # %if.end1874
	cmpq	$59, %rax
	jg	.LBB23_618
# BB#608:                               # %if.end1874
	andq	%r10, %rax
	cmpq	$49, %rax
	je	.LBB23_643
# BB#609:                               # %if.end1874
	cmpq	$50, %rax
	je	.LBB23_624
# BB#610:                               # %if.end1874
	cmpq	$51, %rax
	jne	.LBB23_638
	jmp	.LBB23_611
.LBB23_641:                             # %if.end1874
	andq	%r10, %rax
	cmpq	$120, %rax
	jne	.LBB23_642
# BB#928:                               # %sw.bb2882
	cmpq	$140, %r9
	movq	%r14, %r8
	jne	.LBB23_638
# BB#929:                               # %if.then2885
	testq	%rdi, %rdi
	jne	.LBB23_930
# BB#931:                               # %if.then2885
	movabsq	$const_int_rtx+512, %rax
	jmp	.LBB23_932
.LBB23_633:                             # %if.end1874
	andq	%r10, %rax
	cmpq	$111, %rax
	movq	%r14, %r8
	jne	.LBB23_638
# BB#634:                               # %sw.bb2843
	cmpq	$135, %r9
	jne	.LBB23_638
# BB#635:                               # %sw.bb2843
	testq	%rdi, %rdi
	je	.LBB23_638
# BB#636:                               # %land.lhs.true2849
	movq	%r10, %r15
	movzbl	(%rdi), %eax
	cmpq	$134, %rax
	jne	.LBB23_638
# BB#637:                               # %land.lhs.true2854
	movq	%r8, %r14
	movq	8(%rdi), %rdi
	movq	%r12, %rsi
	callq	rtx_equal_p
	movq	%r14, %r8
	testq	%r15, %rax
	jne	.LBB23_933
	jmp	.LBB23_638
.LBB23_642:
	movq	%r14, %r8
	jmp	.LBB23_638
.LBB23_622:                             # %if.end1874
	andq	%r10, %rax
	cmpq	$98, %rax
	jne	.LBB23_623
.LBB23_611:                             # %sw.bb2862
	testq	%rdi, %rdi
	movq	32(%rsp), %rax          # 8-byte Reload
	jne	.LBB23_613
# BB#612:                               # %sw.bb2862
	movq	184(%rsp), %rdi
.LBB23_613:                             # %sw.bb2862
	movq	%rdi, %rcx
	movq	%r8, %r14
	testq	%r12, %r12
	jne	.LBB23_615
# BB#614:                               # %sw.bb2862
	movq	176(%rsp), %r12
.LBB23_615:                             # %sw.bb2862
	testq	%rax, %rax
	movq	%r9, %rdi
	jne	.LBB23_617
# BB#616:                               # %cond.false2875
	movq	24(%r14), %rax
.LBB23_617:                             # %cond.end2879
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	%r12, %r8
	movq	%rax, %r9
	callq	simplify_ternary_operation
	jmp	.LBB23_844
.LBB23_618:                             # %if.end1874
	andq	%r10, %rax
	cmpq	$60, %rax
	jne	.LBB23_638
# BB#619:                               # %sw.bb1914
	testq	%rdi, %rdi
	je	.LBB23_655
# BB#620:                               # %sw.bb1914
	testq	%r12, %r12
	je	.LBB23_655
# BB#621:
	movq	%r12, 128(%rsp)         # 8-byte Spill
.LBB23_816:                             # %if.end2307
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, 128(%rsp)         # 8-byte Folded Reload
	jne	.LBB23_830
# BB#817:                               # %if.then2310
	movq	%r8, %r14
	movq	%rdi, %r15
	movq	184(%rsp), %rdi
	movq	$84, %rsi
	movq	%r10, %rbx
	callq	lookup_as_function
	movq	%rbx, %r10
	movq	%r15, %rdi
	movq	%r14, %r8
	testq	%rax, %rax
	je	.LBB23_830
# BB#818:                               # %land.lhs.true2314
	movq	%r8, %r14
	movq	%rdi, %r15
	movq	16(%rax), %rdi
	movq	%r10, %rbx
	callq	equiv_constant
	movq	%rbx, %r10
	movq	%r15, %rdi
	movq	%r14, %r8
	testq	%rax, %rax
	je	.LBB23_830
# BB#819:                               # %land.lhs.true2321
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB23_830
# BB#820:                               # %land.lhs.true2326
	movq	8(%rax), %rdx
	testq	%rdx, %rdx
	je	.LBB23_830
# BB#821:                               # %if.then2332
	movq	$32, %rcx
	movq	24(%rsp), %rax          # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_bitsize(%rax,%rax), %ecx
	xorq	%rax, %rax
	cmpq	$65, %rcx
	movq	112(%rsp), %rbx         # 8-byte Reload
	ja	.LBB23_825
# BB#822:                               # %land.rhs2339
	addq	%r10, %rcx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%rdx, %rax
	je	.LBB23_823
# BB#824:                               # %land.rhs2339
	movabsq	$1, %rax
	jmp	.LBB23_825
.LBB23_930:
	movabsq	$const_int_rtx+520, %rax
.LBB23_932:                             # %if.then2885
	movq	(%rax), %r12
	jmp	.LBB23_933
.LBB23_623:                             # %if.end1874
	cmpq	$99, %rax
	jne	.LBB23_638
.LBB23_624:                             # %sw.bb2409
	movq	%rdi, %r14
	movq	%r8, %r13
	movq	%r9, %rbx
	leaq	-75(%rbx), %rcx
	andq	%r10, %rcx
	cmpq	$20, %rcx
	ja	.LBB23_923
# BB#625:                               # %sw.bb2409
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$2021208, %rax          # imm = 0x1ED758
	je	.LBB23_626
.LBB23_889:                             # %sw.bb2694
	movq	184(%rsp), %rdi
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB23_923
# BB#890:                               # %sw.bb2694
	testq	%r12, %r12
	je	.LBB23_923
# BB#891:                               # %land.lhs.true2701
	movzbl	(%r12), %eax
	cmpq	$54, %rax
	jne	.LBB23_923
# BB#892:                               # %if.then2706
	leaq	-87(%rbx), %rcx
	movq	%rcx, %rax
	andq	%r10, %rax
	xorq	%rdx, %rdx
	cmpq	$3, %rax
	ja	.LBB23_894
# BB#893:                               # %switch.lookup
	andq	$15, %rcx
	movq	$13, %rdx
	shrq	%cl, %rdx
	andq	$1, %rdx
.LBB23_894:                             # %lor.end
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	callq	lookup_as_function
	testq	%rax, %rax
	je	.LBB23_923
# BB#895:                               # %lor.lhs.false2720
	movq	16(%rax), %rdi
	movq	%rax, %r15
	xorq	%rsi, %rsi
	callq	fold_rtx
	movq	%rax, %rdi
	callq	equiv_constant
	movq	%r15, %rsi
	testq	%rax, %rax
	je	.LBB23_923
# BB#896:                               # %lor.lhs.false2728
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB23_923
# BB#897:                               # %lor.lhs.false2733
	movq	8(%rsi), %rcx
	movq	184(%rsp), %rdx
	cmpq	%rdx, %rcx
	je	.LBB23_923
# BB#898:                               # %if.end2740
	cmpq	$78, 104(%rsp)          # 8-byte Folded Reload
	movq	$78, %rdi
	je	.LBB23_899
# BB#905:                               # %if.end2740
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	cmpq	$81, %rbx
	je	.LBB23_912
# BB#906:                               # %cond.false2772
	cmpq	$75, %rbx
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	jne	.LBB23_908
# BB#907:                               # %cond.false2772
	movq	%rsi, %rdx
.LBB23_908:                             # %cond.false2772
	movq	120(%rsp), %rdi         # 8-byte Reload
	orq	%rdi, %rdx
	cmpq	$76, %rbx
	jne	.LBB23_910
# BB#909:                               # %cond.false2772
	movq	%rsi, %rcx
.LBB23_910:                             # %cond.false2772
	orq	%rcx, %rdx
	movq	$75, %rdi
	jne	.LBB23_912
# BB#911:                               # %cond.false2772
	movq	%rbx, %rdi
	jmp	.LBB23_912
.LBB23_643:                             # %sw.bb1878
	cmpq	$120, 104(%rsp)         # 8-byte Folded Reload
	jne	.LBB23_645
# BB#644:                               # %sw.bb1878
	movq	24(%rsp), %rax          # 8-byte Reload
	testq	%r10, %rax
	je	.LBB23_638
.LBB23_645:                             # %if.end1888
	xorq	%r14, %r14
	testq	%rdi, %rdi
	movabsq	$0, %rdx
	je	.LBB23_649
# BB#646:                               # %land.lhs.true1891
	movzbl	(%rdi), %eax
	xorq	%r14, %r14
	cmpq	$58, %rax
	jne	.LBB23_647
# BB#648:                               # %if.then1896
	movq	8(%rdi), %rdx
	movq	$1, %r14
	jmp	.LBB23_649
.LBB23_655:                             # %if.then1920
	movq	%r10, %r13
	movq	%r8, %r14
	movq	const_true_rtx(%rip), %r12
	movq	const_int_rtx+512(%rip), %rax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	leaq	184(%rsp), %rsi
	leaq	176(%rsp), %rdx
	leaq	172(%rsp), %rcx
	leaq	140(%rsp), %r8
	movq	%r9, %rdi
	callq	find_comparison_args
	movq	184(%rsp), %rdi
	movq	%rax, 112(%rsp)         # 8-byte Spill
	callq	equiv_constant
	movq	176(%rsp), %rdi
	movq	%rdi, 104(%rsp)         # 8-byte Spill
	movq	%rax, %r15
	callq	equiv_constant
	movl	172(%rsp), %edx
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	testq	%rdx, %rdx
	je	.LBB23_656
# BB#657:                               # %lor.lhs.false1926
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movl	mode_class(,%rsi,4), %ecx
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	cmpq	$4, %rcx
	movq	%r14, %r8
	movq	%r15, %rdi
	movq	%r13, %r10
	je	.LBB23_638
# BB#658:                               # %if.end1932
	testq	%rdi, %rdi
	movq	%rax, %rcx
	je	.LBB23_661
# BB#659:                               # %if.end1932
	testq	%rcx, %rcx
	je	.LBB23_661
# BB#660:
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	jmp	.LBB23_816
.LBB23_656:
	movq	%r14, %r8
	jmp	.LBB23_638
.LBB23_626:                             # %sw.bb2409
	testq	%rcx, %rcx
	jne	.LBB23_627
# BB#845:                               # %sw.bb2410
	testq	%r12, %r12
	movq	%r14, %rsi
	je	.LBB23_860
# BB#846:                               # %land.lhs.true2412
	movzbl	(%r12), %eax
	cmpq	$67, %rax
	jne	.LBB23_860
# BB#847:                               # %if.then2417
	movq	184(%rsp), %rax
	movzbl	(%rax), %ecx
	movq	%r10, %r15
	movq	%rsi, %r14
	cmpq	$76, %rcx
	je	.LBB23_849
# BB#848:                               # %cond.false2424
	movq	$76, %rsi
	movq	%rax, %rdi
	callq	lookup_as_function
.LBB23_849:                             # %cond.end2426
	testq	%rax, %rax
	je	.LBB23_853
# BB#850:                               # %land.lhs.true2430
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB23_853
# BB#851:                               # %land.lhs.true2438
	movq	8(%rcx), %rcx
	movq	8(%r12), %rdx
	cmpq	%rdx, %rcx
	je	.LBB23_852
.LBB23_853:                             # %if.end2454
	movq	184(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$58, %rcx
	je	.LBB23_855
# BB#854:                               # %cond.false2460
	movq	$58, %rsi
	movq	%rax, %rdi
	callq	lookup_as_function
.LBB23_855:                             # %cond.end2462
	testq	%rax, %rax
	movq	%r14, %rsi
	movq	%r15, %r10
	je	.LBB23_860
# BB#856:                               # %land.lhs.true2466
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$76, %rcx
	jne	.LBB23_860
# BB#857:                               # %land.lhs.true2474
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB23_860
# BB#858:                               # %land.lhs.true2485
	movq	8(%rcx), %rcx
	movq	8(%r12), %rdx
	cmpq	%rdx, %rcx
	je	.LBB23_859
.LBB23_860:                             # %if.end2508
	testq	%rsi, %rsi
	je	.LBB23_875
# BB#861:                               # %land.lhs.true2510
	movzbl	(%rsi), %eax
	cmpq	$67, %rax
	jne	.LBB23_875
# BB#862:                               # %if.then2515
	movq	%rsi, %r15
	movq	176(%rsp), %r14
	movzbl	(%r14), %eax
	cmpq	$76, %rax
	movq	%r14, %rax
	je	.LBB23_864
# BB#863:                               # %cond.false2522
	movq	$76, %rsi
	movq	%r14, %rdi
	callq	lookup_as_function
.LBB23_864:                             # %cond.end2524
	testq	%rax, %rax
	je	.LBB23_868
# BB#865:                               # %land.lhs.true2528
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB23_868
# BB#866:                               # %land.lhs.true2536
	movq	8(%rcx), %rcx
	movq	8(%r15), %rdx
	cmpq	%rdx, %rcx
	je	.LBB23_867
.LBB23_868:                             # %if.end2552
	movzbl	(%r14), %eax
	cmpq	$58, %rax
	je	.LBB23_870
# BB#869:                               # %cond.false2558
	movq	$58, %rsi
	movq	%r14, %rdi
	callq	lookup_as_function
	movq	%rax, %r14
.LBB23_870:                             # %cond.end2560
	testq	%r14, %r14
	movq	%r15, %rsi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r10
	je	.LBB23_875
# BB#871:                               # %land.lhs.true2564
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$76, %rcx
	jne	.LBB23_875
# BB#872:                               # %land.lhs.true2572
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB23_875
# BB#873:                               # %land.lhs.true2583
	movq	8(%rcx), %rcx
	movq	8(%rsi), %rdx
	cmpq	%rdx, %rcx
	je	.LBB23_874
.LBB23_875:                             # %if.end2606
	movq	%rsi, %r14
	testq	%r12, %r12
	je	.LBB23_889
# BB#876:                               # %land.lhs.true2609
	movzbl	(%r12), %eax
	cmpq	$54, %rax
	jne	.LBB23_889
# BB#877:                               # %land.lhs.true2614
	movq	8(%r12), %rax
	testq	%rax, %rax
	jns	.LBB23_889
# BB#878:                               # %land.lhs.true2614
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	cmpq	%rcx, %rax
	je	.LBB23_889
# BB#879:                               # %land.lhs.true2626
	movq	176(%rsp), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$61, %rcx
	jne	.LBB23_889
# BB#880:                               # %if.then2631
	negq	%rax
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movzbl	do_not_record(%rip), %r15d
	movzbl	hash_arg_in_memory(%rip), %ecx
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	56(%rsp), %rsi          # 8-byte Reload
	callq	canon_hash
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, %r10
	andq	$31, %rax
	movq	table(,%rax,8), %rax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	88(%rsp), %rcx          # 8-byte Reload
	movb	%cl, hash_arg_in_memory(%rip)
	movb	%r15b, do_not_record(%rip)
	testq	%rax, %rax
	je	.LBB23_889
# BB#881:
	movabsq	$0, %r15
.LBB23_882:                             # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	movl	72(%rax), %eax
	movq	56(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB23_888
# BB#883:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB23_882 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	movq	120(%rsp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %ecx
	cmpq	%rdx, %rax
	jne	.LBB23_885
# BB#884:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB23_882 Depth=1
	cmpq	$61, %rcx
	je	.LBB23_900
.LBB23_885:                             # %lor.lhs.false.i
                                        #   in Loop: Header=BB23_882 Depth=1
	cmpq	$61, %rcx
	movq	%r15, %rcx
	je	.LBB23_887
# BB#886:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB23_882 Depth=1
	movabsq	$1, %rcx
.LBB23_887:                             # %lor.lhs.false.i
                                        #   in Loop: Header=BB23_882 Depth=1
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	exp_equiv_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB23_900
.LBB23_888:                             # %for.inc.i
                                        #   in Loop: Header=BB23_882 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	testq	%rax, %rax
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r10
	jne	.LBB23_882
	jmp	.LBB23_889
.LBB23_647:
	movq	%rdi, %rdx
.LBB23_649:                             # %if.end1900
	movq	%r8, %r15
	testq	%rdx, %rdx
	movq	56(%rsp), %r12          # 8-byte Reload
	movq	%r9, %rdi
	jne	.LBB23_651
# BB#650:                               # %if.end1900
	movq	184(%rsp), %rdx
.LBB23_651:                             # %if.end1900
	movq	%r12, %rsi
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	simplify_unary_operation
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB23_654
# BB#652:                               # %if.end1900
	testq	%r14, %r14
	je	.LBB23_654
# BB#653:                               # %if.then1911
	movq	$58, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %rbx
.LBB23_654:                             # %sw.epilog2892
	movq	%r15, %r8
	jmp	.LBB23_638
.LBB23_661:                             # %if.then1938
	movq	%rdi, 88(%rsp)          # 8-byte Spill
	movq	%r8, 120(%rsp)          # 8-byte Spill
	movq	const_int_rtx+512(%rip), %rax
	movq	184(%rsp), %rdi
	cmpq	%rax, %rcx
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	jne	.LBB23_687
# BB#662:                               # %land.lhs.true1941
	movq	global_rtl+24(%rip), %rsi
	cmpq	%rsi, %rdi
	je	.LBB23_684
# BB#663:                               # %lor.lhs.false1944
	movq	global_rtl+32(%rip), %rbx
	cmpq	%rbx, %rdi
	je	.LBB23_684
# BB#664:                               # %lor.lhs.false1944
	movq	global_rtl+56(%rip), %rcx
	cmpq	%rcx, %rdi
	je	.LBB23_684
# BB#665:                               # %lor.lhs.false1944
	movq	global_rtl+48(%rip), %rdx
	cmpq	%rdx, %rdi
	je	.LBB23_684
# BB#666:                               # %lor.lhs.false1953
	movzbl	(%rdi), %r9d
	cmpq	$75, %r9
	jne	.LBB23_674
# BB#667:                               # %land.lhs.true1958
	movq	16(%rdi), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB23_674
# BB#668:                               # %land.lhs.true1966
	movq	8(%rdi), %r8
	cmpq	%rsi, %r8
	je	.LBB23_684
# BB#669:                               # %land.lhs.true1966
	cmpq	%rbx, %r8
	je	.LBB23_684
# BB#670:                               # %lor.lhs.false1978
	movq	global_rtl+40(%rip), %rax
	cmpq	%rax, %rdi
	jne	.LBB23_672
# BB#671:                               # %lor.lhs.false1978
	movzbl	fixed_regs+16(%rip), %eax
	testq	$255, %rax
	jne	.LBB23_684
.LBB23_672:                             # %lor.lhs.false1984
	cmpq	%rcx, %r8
	je	.LBB23_684
# BB#673:                               # %lor.lhs.false1984
	cmpq	%rdx, %r8
	je	.LBB23_684
.LBB23_674:                             # %lor.lhs.false1996
	movq	global_rtl+16(%rip), %rcx
	cmpq	%rcx, %rdi
	je	.LBB23_684
# BB#675:                               # %lor.lhs.false1999
	movq	global_rtl+64(%rip), %rdx
	cmpq	%rdx, %rdi
	je	.LBB23_684
# BB#676:                               # %lor.lhs.false2002
	movq	global_rtl+72(%rip), %rsi
	cmpq	%rsi, %rdi
	je	.LBB23_684
# BB#677:                               # %lor.lhs.false2005
	cmpq	$75, %r9
	jne	.LBB23_682
# BB#678:                               # %land.lhs.true2010
	movq	16(%rdi), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB23_687
# BB#679:                               # %land.lhs.true2018
	movq	8(%rdi), %rax
	cmpq	%rcx, %rax
	je	.LBB23_684
# BB#680:                               # %land.lhs.true2018
	cmpq	%rdx, %rax
	je	.LBB23_684
# BB#681:                               # %land.lhs.true2018
	cmpq	%rsi, %rax
	je	.LBB23_684
.LBB23_682:                             # %lor.lhs.false2036
	addq	$-58, %r9
	andq	%r10, %r9
	cmpq	$12, %r9
	ja	.LBB23_687
# BB#683:                               # %lor.lhs.false2036
	movq	$1, %rax
	movq	%r9, %rcx
	shlq	%cl, %rax
	testq	$4609, %rax             # imm = 0x1201
	je	.LBB23_687
.LBB23_684:                             # %if.then2051
	movq	112(%rsp), %rax         # 8-byte Reload
	andq	%r10, %rax
	cmpq	$103, %rax
	jne	.LBB23_686
# BB#685:
	movq	96(%rsp), %r12          # 8-byte Reload
	jmp	.LBB23_933
.LBB23_627:                             # %sw.bb2409
	cmpq	$1, %rcx
	jne	.LBB23_923
# BB#628:                               # %sw.bb2661
	testq	%r12, %r12
	je	.LBB23_889
# BB#629:                               # %land.lhs.true2664
	movzbl	(%r12), %eax
	cmpq	$54, %rax
	jne	.LBB23_889
# BB#630:                               # %if.then2669
	movq	8(%r13), %rdi
	movq	$75, %rsi
	movq	%r10, %r15
	callq	lookup_as_function
	movq	%r15, %r10
	testq	%rax, %rax
	je	.LBB23_889
# BB#631:                               # %land.lhs.true2676
	movq	16(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$54, %rcx
	jne	.LBB23_889
# BB#632:                               # %if.then2684
	movq	%rax, %rdi
	callq	copy_rtx
	movq	8(%r12), %rcx
	negq	%rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	plus_constant_wide
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	jmp	.LBB23_182
.LBB23_201:                             # %if.end.i.i
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	callq	memory_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$1000, %rbx             # imm = 0x3E8
	je	.LBB23_203
# BB#202:                               # %if.end5.i.i
	movq	%r15, %rdi
	callq	ix86_address_cost
	movq	%rax, %rbx
.LBB23_203:                             # %address_cost.exit.i
	movzbl	(%r13), %eax
	cmpq	$70, %rax
	jne	.LBB23_206
# BB#204:                               # %land.lhs.true.i503.i
	movq	8(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB23_206
# BB#205:
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	jmp	.LBB23_208
.LBB23_206:                             # %if.end.i506.i
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %rsi
	callq	memory_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$1000, %rax             # imm = 0x3E8
	je	.LBB23_208
# BB#207:                               # %if.end5.i508.i
	movq	%r13, %rdi
	callq	ix86_address_cost
.LBB23_208:                             # %address_cost.exit510.i
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jl	.LBB23_212
# BB#209:                               # %lor.lhs.false66.i
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	andq	%rcx, %rbx
	cmpq	%rax, %rbx
	jne	.LBB23_214
# BB#210:                               # %land.lhs.true68.i
	movq	$66, %rsi
	movq	%r15, %rdi
	callq	rtx_cost
	movq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	$66, %rsi
	movq	%r13, %rdi
	callq	rtx_cost
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rbx
	jg	.LBB23_212
# BB#211:                               # %lor.lhs.false72.i
	movq	%r15, %rdi
	callq	approx_reg_cost
	movq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%r13, %rdi
	callq	approx_reg_cost
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rbx
	jge	.LBB23_214
.LBB23_212:                             # %land.lhs.true76.i
	xorq	%rcx, %rcx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	validate_change
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB23_214
# BB#213:                               # %land.lhs.true76.i
	movq	%r15, %r13
.LBB23_214:                             # %land.lhs.true76.i
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	%r12, %rsi
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
.LBB23_215:                             # %if.end80.i
	xorq	%rax, %rax
	movb	%al, do_not_record(%rip)
	movzbl	(%r13), %eax
	cmpq	$61, %rax
	jne	.LBB23_230
# BB#216:                               # %land.lhs.true84.i
	movl	8(%r13), %ebx
	cmpq	$53, %rbx
	jb	.LBB23_230
# BB#217:                               # %cond.true.i
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB23_219
# BB#218:                               # %cond.true.i
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_229
.LBB23_219:                             # %cond.false.i4274
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%rdi, %r12
	movq	$7, %rcx
	movq	%rbx, %r15
	shrq	%cl, %r15
	xorq	%rbx, %r15
	andq	$127, %r15
	movq	reg_hash(,%r15,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_223
# BB#220:
	movq	%rcx, %rax
.LBB23_222:                             # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB23_228
# BB#221:                               # %for.cond.i.i
                                        #   in Loop: Header=BB23_222 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_222
.LBB23_223:                             # %if.then4.i.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_225
# BB#224:                               # %if.then5.i.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_226
.LBB23_230:                             # %cond.false100.i
	movq	%rdx, %r15
	movq	%rcx, %r12
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%rdi, %rbx
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	%r13, %rdi
	callq	canon_hash
.LBB23_231:                             # %cond.end104.i
	movq	%rbx, 120(%rsp)         # 8-byte Spill
	movzbl	do_not_record(%rip), %ecx
	movq	%r12, %r8
	andq	$1, %r8
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%r15, %rdx
	andq	$1, %rdx
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	testq	%rcx, %rcx
	movb	%r8b, do_not_record(%rip)
	movb	%dl, hash_arg_in_memory(%rip)
	movq	%rbx, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	jne	.LBB23_353
# BB#232:                               # %if.end109.i
	movl	target_flags(%rip), %r15d
	andq	$31, %rax
	movq	table(,%rax,8), %rbx
	movq	$25, %rcx
	shrq	%cl, %r15
	testq	%rbx, %rbx
	je	.LBB23_233
# BB#234:
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rdi, %r12
	andq	$1, %r15
	orq	$4, %r15
	andq	%r14, %r15
.LBB23_235:                             # %for.body.i517.i
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%rbx), %eax
	cmpq	%r15, %rax
	jne	.LBB23_241
# BB#236:                               # %land.lhs.true.i521.i
                                        #   in Loop: Header=BB23_235 Depth=1
	movq	(%rbx), %rsi
	movzbl	(%r13), %eax
	cmpq	%r13, %rsi
	jne	.LBB23_238
# BB#237:                               # %land.lhs.true.i521.i
                                        #   in Loop: Header=BB23_235 Depth=1
	cmpq	$61, %rax
	je	.LBB23_243
.LBB23_238:                             # %lor.lhs.false.i.i
                                        #   in Loop: Header=BB23_235 Depth=1
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB23_240
# BB#239:                               # %lor.lhs.false.i.i
                                        #   in Loop: Header=BB23_235 Depth=1
	movabsq	$1, %rdx
.LBB23_240:                             # %lor.lhs.false.i.i
                                        #   in Loop: Header=BB23_235 Depth=1
	movq	%r13, %rdi
	callq	exp_equiv_p
	testq	%r14, %rax
	jne	.LBB23_243
.LBB23_241:                             # %for.inc.i.i
                                        #   in Loop: Header=BB23_235 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB23_235
# BB#242:
	movq	%r12, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	jmp	.LBB23_272
.LBB23_72:                              # %if.end225
	movq	%rdi, %rbx
	movq	%r15, %rdi
	movq	128(%rsp), %rsi         # 8-byte Reload
	callq	fold_rtx
	movq	%rax, 184(%rsp)
	movq	%rax, %rdi
	callq	equiv_constant
	testq	%rax, %rax
	je	.LBB23_73
# BB#74:                                # %if.then232
	movq	%rax, 184(%rsp)
	jmp	.LBB23_75
.LBB23_823:
	movabsq	$0, %rax
.LBB23_825:                             # %land.end2345
	leaq	-102(%rbx), %rcx
	andq	%r10, %rcx
	cmpq	$5, %rcx
	ja	.LBB23_830
# BB#826:                               # %land.end2345
	movq	const_true_rtx(%rip), %rdx
	movq	const_int_rtx+512(%rip), %r12
	jmpq	*.LJTI23_1(,%rcx,8)
.LBB23_829:                             # %sw.bb2354
	testq	%rax, %rax
	jne	.LBB23_933
	jmp	.LBB23_830
.LBB23_899:
	movq	%rsi, 104(%rsp)         # 8-byte Spill
.LBB23_912:                             # %cond.end2784
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	simplify_binary_operation
	movq	%rax, %rcx
	testq	%rcx, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	104(%rsp), %rdx         # 8-byte Reload
	je	.LBB23_923
# BB#913:                               # %if.end2790
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	cmpq	$0, 120(%rsp)           # 8-byte Folded Reload
	je	.LBB23_914
# BB#915:                               # %land.lhs.true2792
	movq	%rax, %r15
	movq	96(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB23_919
# BB#916:                               # %land.lhs.true2797
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	56(%rsp), %rax          # 8-byte Reload
	movzbl	mode_bitsize(%rax,%rax), %eax
	cmpq	%rax, %rcx
	jl	.LBB23_919
# BB#917:                               # %if.then2806
	movq	112(%rsp), %rbx         # 8-byte Reload
	cmpq	$89, %rbx
	movq	%r15, %rcx
	jne	.LBB23_923
# BB#918:                               # %if.then2809
	movq	%rcx, %r15
	decq	%rax
	xorq	%rdi, %rdi
	movq	%rdx, %rbx
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdx
	movq	%rax, 96(%rsp)          # 8-byte Spill
	jmp	.LBB23_919
.LBB23_923:                             # %sw.epilog2831
	testq	%r14, %r14
	jne	.LBB23_925
# BB#924:                               # %sw.epilog2831
	movq	184(%rsp), %r14
.LBB23_925:                             # %sw.epilog2831
	movq	%r14, %rdx
	testq	%r12, %r12
	jne	.LBB23_927
# BB#926:                               # %sw.epilog2831
	movq	176(%rsp), %r12
.LBB23_927:                             # %sw.epilog2831
	movq	%rbx, %rdi
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	%r12, %rcx
	callq	simplify_binary_operation
	movq	%rax, %rbx
	movq	%r13, %r8
	jmp	.LBB23_638
.LBB23_686:                             # %if.then2051
	cmpq	$102, %rax
	je	.LBB23_933
.LBB23_687:                             # %if.end2061
	movq	104(%rsp), %rax         # 8-byte Reload
	cmpq	%rax, %rdi
	movq	112(%rsp), %rdx         # 8-byte Reload
	movl	172(%rsp), %ebx
	je	.LBB23_738
# BB#688:                               # %lor.lhs.false2064
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB23_716
# BB#689:                               # %land.lhs.true2069
	movq	104(%rsp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB23_716
# BB#690:                               # %land.lhs.true2074
	movq	%r10, %r14
	movq	%rdx, %r15
	movl	8(%rdi), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB23_692
# BB#691:                               # %land.lhs.true2074
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_702
.LBB23_692:                             # %cond.false2083
	movq	$7, %rcx
	movq	%rbx, %r13
	shrq	%cl, %r13
	xorq	%rbx, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_696
# BB#693:
	movq	%rcx, %rax
.LBB23_695:                             # %for.body.i4242
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB23_701
# BB#694:                               # %for.cond.i4238
                                        #   in Loop: Header=BB23_695 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_695
.LBB23_696:                             # %if.then4.i4244
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_698
# BB#697:                               # %if.then5.i4246
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_699
.LBB23_233:
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	jmp	.LBB23_272
.LBB23_73:                              # %if.end225.if.end233_crit_edge
	movq	184(%rsp), %rax
.LBB23_75:                              # %if.end233
	movq	%r12, %r15
	movq	8(%rbx), %rdx
	cmpq	%rdx, %rax
	je	.LBB23_76
# BB#77:                                # %if.then239
	movl	16(%rbx), %ecx
	movzbl	2(%rdx), %edx
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	simplify_subreg
	movq	%rbx, %rcx
	movq	%rax, %r12
	testq	%r12, %r12
	jne	.LBB23_933
# BB#78:                                # %if.then239.if.end253_crit_edge
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	184(%rsp), %rax
	jmp	.LBB23_79
.LBB23_914:
	movq	%rax, %r15
.LBB23_919:                             # %if.end2818
	movq	8(%rdx), %rdi
	callq	copy_rtx
	movq	184(%rsp), %rdi
	movq	%rax, %rbx
	movq	%rbx, %rsi
	callq	reg_mentioned_p
	testq	%r15, %rax
	jne	.LBB23_921
# BB#920:                               # %if.then2825
	movq	%rbx, %rdi
	movq	128(%rsp), %rsi         # 8-byte Reload
	callq	fold_rtx
	movq	%rax, %rbx
.LBB23_921:                             # %if.end2827
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	%rbx, %rdx
	movq	96(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB23_922
.LBB23_25:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_27:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_43:                              # %cond.false128
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	canon_hash
	jmp	.LBB23_44
.LBB23_38:                              # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r12,8), %rcx
.LBB23_39:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	8(%r15), %ecx
	movl	%ecx, 20(%rax)
	movl	%ecx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_41
# BB#40:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_41:                              # %get_cse_reg_info.exit
	movl	8(%r15), %ecx
	movl	%ecx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB23_42:                              # %cond.end
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB23_44:                              # %cond.end133
	andq	$31, %rax
	movq	table(,%rax,8), %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	testq	%rax, %rax
	je	.LBB23_45
# BB#46:
	movabsq	$0, %r12
.LBB23_47:                              # %for.body.i3649
                                        # =>This Inner Loop Header: Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	movl	72(%rax), %eax
	cmpq	%rbx, %rax
	jne	.LBB23_53
# BB#48:                                # %land.lhs.true.i3656
                                        #   in Loop: Header=BB23_47 Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzbl	(%r15), %ecx
	cmpq	%r15, %rax
	jne	.LBB23_50
# BB#49:                                # %land.lhs.true.i3656
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpq	$61, %rcx
	je	.LBB23_55
.LBB23_50:                              # %lor.lhs.false.i3662
                                        #   in Loop: Header=BB23_47 Depth=1
	cmpq	$61, %rcx
	movq	%r12, %rcx
	je	.LBB23_52
# BB#51:                                # %lor.lhs.false.i3662
                                        #   in Loop: Header=BB23_47 Depth=1
	movabsq	$1, %rcx
.LBB23_52:                              # %lor.lhs.false.i3662
                                        #   in Loop: Header=BB23_47 Depth=1
	movq	%r15, %rdi
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	exp_equiv_p
	testq	%r14, %rax
	jne	.LBB23_55
.LBB23_53:                              # %for.inc.i3666
                                        #   in Loop: Header=BB23_47 Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	testq	%rax, %rax
	jne	.LBB23_47
# BB#54:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_197:                             # %land.lhs.true24.i
	movq	$1, %r8
	movq	%rax, %rcx
	shlq	%cl, %r8
	testq	$1114176, %r8           # imm = 0x110040
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, %rdx
	jne	.LBB23_353
	jmp	.LBB23_215
.LBB23_852:                             # %if.then2450
	movq	8(%rax), %r12
	jmp	.LBB23_933
.LBB23_859:                             # %if.then2500
	movq	8(%rax), %r12
	jmp	.LBB23_933
.LBB23_867:                             # %if.then2548
	movq	8(%rax), %r12
	jmp	.LBB23_933
.LBB23_874:                             # %if.then2598
	movq	8(%rax), %r12
	jmp	.LBB23_933
.LBB23_900:                             # %lookup.exit
	cmpq	$0, 96(%rsp)            # 8-byte Folded Reload
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r10
	je	.LBB23_889
# BB#901:                               # %if.then2641
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	48(%rax), %rax
	testq	%rax, %rax
	je	.LBB23_889
.LBB23_903:                             # %for.body2645
                                        # =>This Inner Loop Header: Depth=1
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movq	(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	je	.LBB23_904
# BB#902:                               # %for.cond2643
                                        #   in Loop: Header=BB23_903 Depth=1
	movq	32(%rax), %rax
	testq	%rax, %rax
	movq	%rsi, %rbx
	movq	%rdi, %r10
	jne	.LBB23_903
	jmp	.LBB23_889
.LBB23_225:                             # %if.else.i.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r15,8), %rcx
.LBB23_226:                             # %if.end6.i.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r15,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_228
# BB#227:                               # %if.then11.i.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_228:                             # %get_cse_reg_info.exit.i
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	%r12, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
.LBB23_229:                             # %cond.end.i
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%rdx, %r15
	movq	%rcx, %r12
	movq	%rdi, %rbx
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
	jmp	.LBB23_231
.LBB23_243:                             # %lookup.exit.i
	testq	%rbx, %rbx
	movq	%r12, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	je	.LBB23_272
# BB#244:                               # %if.then115.i
	movq	48(%rbx), %rax
	testq	%rax, %rax
	je	.LBB23_247
# BB#245:
	xorq	%rcx, %rcx
.LBB23_246:                             # %for.body.i4280
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, 78(%rax)
	movq	32(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_246
.LBB23_247:                             # %while.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_255 Depth 2
	movq	%rdi, %r12
	movq	(%rsi), %r15
	movq	%rsi, %r13
	movzbl	(%r15), %eax
	cmpq	$70, %rax
	jne	.LBB23_250
# BB#248:                               # %land.lhs.true.i534.i
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	8(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB23_250
# BB#249:                               #   in Loop: Header=BB23_247 Depth=1
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	jmp	.LBB23_252
.LBB23_250:                             # %if.end.i537.i
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	callq	memory_address_p
	testq	%r14, %rax
	movq	$1000, 72(%rsp)         # 8-byte Folded Spill
                                        # imm = 0x3E8
	je	.LBB23_253
# BB#251:                               # %if.end5.i539.i
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	%r15, %rdi
	callq	ix86_address_cost
.LBB23_252:                             # %address_cost.exit541.i
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	%rax, 72(%rsp)          # 8-byte Spill
.LBB23_253:                             # %address_cost.exit541.i
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	48(%rbx), %rax
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	$0, 88(%rsp)            # 8-byte Folded Spill
	testq	%rax, %rax
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	je	.LBB23_272
# BB#254:                               # %for.body123.i.lr.ph
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	%rsi, %r12
	movl	64(%rbx), %r15d
	incq	%r15
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	$33, %rcx
	sarq	%cl, %r15
	xorq	%r13, %r13
	movq	%rbx, 64(%rsp)          # 8-byte Spill
.LBB23_255:                             # %for.body123.i
                                        #   Parent Loop BB23_247 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	80(%rsp), %rax          # 8-byte Reload
	movzbl	78(%rax), %eax
	testq	%rax, %rax
	jne	.LBB23_268
# BB#256:                               # %if.then126.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, 88(%rsp)          # 8-byte Spill
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	je	.LBB23_259
# BB#257:                               # %lor.lhs.false130.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	$1, %rdx
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, %rsi
	callq	exp_equiv_p
	testq	%r14, %rax
	je	.LBB23_268
# BB#258:                               # %lor.lhs.false130.i.land.lhs.true135.i_crit_edge
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, 88(%rsp)          # 8-byte Spill
	movl	(%rax), %eax
.LBB23_259:                             # %land.lhs.true135.i
                                        #   in Loop: Header=BB23_255 Depth=2
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$70, %rax
	jne	.LBB23_261
# BB#260:                               # %land.lhs.true.i550.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	movq	%r14, %rax
	je	.LBB23_263
.LBB23_261:                             # %if.end.i553.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	callq	memory_address_p
	testq	%r14, %rax
	movq	$1000, %rax             # imm = 0x3E8
	je	.LBB23_263
# BB#262:                               # %if.end5.i555.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	88(%rsp), %rdi          # 8-byte Reload
	callq	ix86_address_cost
.LBB23_263:                             # %address_cost.exit557.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	$32, %rcx
	movq	72(%rsp), %rdx          # 8-byte Reload
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jge	.LBB23_265
# BB#264:                               # %address_cost.exit557.i.if.then146.i_crit_edge
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	80(%rsp), %rcx          # 8-byte Reload
	movl	64(%rcx), %edx
	jmp	.LBB23_267
.LBB23_265:                             # %lor.lhs.false139.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	72(%rsp), %rcx          # 8-byte Reload
	andq	%r14, %rcx
	movq	%rax, %rdx
	andq	%r14, %rdx
	cmpq	%rcx, %rdx
	jne	.LBB23_268
# BB#266:                               # %land.lhs.true141.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	80(%rsp), %rcx          # 8-byte Reload
	movl	64(%rcx), %edx
	leaq	1(%rdx), %rsi
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$33, %rcx
	sarq	%cl, %rsi
	movq	$32, %rcx
	movq	%r15, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rsi
	jle	.LBB23_268
.LBB23_267:                             # %if.then146.i
                                        #   in Loop: Header=BB23_255 Depth=2
	incq	%rdx
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$33, %rcx
	sarq	%cl, %rdx
	movq	$1, %r13
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	%rdx, %r15
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	%rax, 64(%rsp)          # 8-byte Spill
.LBB23_268:                             # %for.inc152.i
                                        #   in Loop: Header=BB23_255 Depth=2
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rax
	movq	%rax, 80(%rsp)          # 8-byte Spill
	testq	%rax, %rax
	jne	.LBB23_255
# BB#269:                               # %for.end154.i
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	$0, 88(%rsp)            # 8-byte Folded Spill
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %r13
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	%r12, %rsi
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	je	.LBB23_272
# BB#270:                               # %if.then156.i
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	movq	%rdi, %r12
	movq	%rax, %rdi
	callq	copy_rtx
	xorq	%rsi, %rsi
	movq	$0, 88(%rsp)            # 8-byte Folded Spill
	movq	%rax, %rdi
	callq	canon_reg
	xorq	%rcx, %rcx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rdx
	callq	validate_change
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	%r12, %rdi
	movq	112(%rsp), %rdx         # 8-byte Reload
	testq	%r15, %rax
	jne	.LBB23_353
# BB#271:                               # %while.cond.i.backedge
                                        #   in Loop: Header=BB23_247 Depth=1
	movq	$1, %rax
	movq	64(%rsp), %rcx          # 8-byte Reload
	movb	%al, 78(%rcx)
	testq	%r15, %r13
	jne	.LBB23_247
.LBB23_272:                             # %if.end166.i
	movl	flag_expensive_optimizations(%rip), %eax
	testq	%rax, %rax
	je	.LBB23_353
# BB#273:                               # %land.lhs.true168.i
	movq	(%rsi), %rcx
	movzbl	(%rcx), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$50, %rax
	je	.LBB23_275
# BB#274:                               # %land.lhs.true168.i
	cmpq	$99, %rax
	jne	.LBB23_353
.LBB23_275:                             # %land.lhs.true182.i
	movq	8(%rcx), %rax
	movq	%rdx, %rbx
	movzbl	(%rax), %edx
	cmpq	$61, %rdx
	movq	%rbx, %rdx
	jne	.LBB23_353
# BB#276:                               # %land.lhs.true190.i
	movq	16(%rcx), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$54, %rcx
	jne	.LBB23_353
# BB#277:                               # %land.lhs.true209.i
	movq	%r8, %r13
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%rdi, %r14
	xorq	%rcx, %rcx
	movb	%cl, do_not_record(%rip)
	movl	8(%rax), %r12d
	cmpq	$53, %r12
	jb	.LBB23_291
# BB#278:                               # %cond.true218.i
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r12
	jne	.LBB23_280
# BB#279:                               # %cond.true218.i
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_290
.LBB23_280:                             # %cond.false230.i
	movq	$7, %rcx
	movq	%r12, %r15
	shrq	%cl, %r15
	xorq	%r12, %r15
	andq	$127, %r15
	movq	reg_hash(,%r15,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_284
# BB#281:
	movq	%rcx, %rax
.LBB23_283:                             # %for.body.i572.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB23_289
# BB#282:                               # %for.cond.i568.i
                                        #   in Loop: Header=BB23_283 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_283
.LBB23_284:                             # %if.then4.i574.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_286
# BB#285:                               # %if.then5.i576.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_287
.LBB23_827:                             # %sw.bb2349
	movq	%rdx, %r12
	jmp	.LBB23_933
.LBB23_828:                             # %sw.bb2350
	testq	%rax, %rax
	movq	%rdx, %r12
	jne	.LBB23_933
.LBB23_830:                             # %if.end2361
	movq	24(%rsp), %rsi          # 8-byte Reload
	testq	%r10, %rsi
	je	.LBB23_832
# BB#831:                               # %if.end2361.cond.end2396_crit_edge
	movq	%rdi, %rdx
	movq	184(%rsp), %rax
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	128(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB23_839
.LBB23_832:                             # %cond.false2365
	movq	184(%rsp), %rax
	testq	%rdi, %rdi
	movq	%rdi, %rcx
	movq	%rdi, %rdx
	movq	128(%rsp), %rbx         # 8-byte Reload
	jne	.LBB23_834
# BB#833:                               # %cond.false2365
	movq	%rax, %rcx
.LBB23_834:                             # %cond.false2365
	movl	(%rcx), %esi
	testq	$16711680, %rsi         # imm = 0xFF0000
	movq	112(%rsp), %rdi         # 8-byte Reload
	jne	.LBB23_838
# BB#835:                               # %cond.false2385
	testq	%rbx, %rbx
	movq	%rbx, %rcx
	jne	.LBB23_837
# BB#836:                               # %cond.false2385
	movq	176(%rsp), %rcx
.LBB23_837:                             # %cond.false2385
	movl	(%rcx), %esi
.LBB23_838:                             # %cond.end2394
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
.LBB23_839:                             # %cond.end2396
	testq	%rdx, %rdx
	jne	.LBB23_841
# BB#840:                               # %cond.end2396
	movq	%rax, %rdx
.LBB23_841:                             # %cond.end2396
	movq	%r8, %r14
	testq	%rbx, %rbx
	jne	.LBB23_843
# BB#842:                               # %cond.end2396
	movq	176(%rsp), %rbx
.LBB23_843:                             # %cond.end2396
	movq	%rbx, %rcx
	callq	simplify_relational_operation
.LBB23_844:                             # %sw.epilog2892
	movq	%rax, %rbx
	movq	%r14, %r8
.LBB23_638:                             # %sw.epilog2892
	testq	%rbx, %rbx
	jne	.LBB23_640
# BB#639:                               # %sw.epilog2892
	movq	%r8, %rbx
.LBB23_640:                             # %sw.epilog2892
	movq	%rbx, %r12
.LBB23_933:                             # %return
	movq	%r12, %rax
	addq	$192, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB23_698:                             # %if.else.i4249
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r13,8), %rcx
.LBB23_699:                             # %if.end6.i4258
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_701
# BB#700:                               # %if.then11.i4259
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_701:                             # %get_cse_reg_info.exit4261
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB23_702:                             # %cond.end2088
	movq	104(%rsp), %rcx         # 8-byte Reload
	movl	8(%rcx), %ecx
	movl	20(%rax), %r13d
	cmpq	%rbx, %rcx
	movq	%rcx, %rdx
	jne	.LBB23_704
# BB#703:                               # %cond.end2088
	testq	%rax, %rax
	movq	%r13, %rax
	jne	.LBB23_714
.LBB23_704:                             # %cond.false2099
	movq	$7, %rcx
	movq	%rdx, %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	%rax, %rbx
	shrq	%cl, %rbx
	xorq	%rax, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_708
# BB#705:
	movq	%rcx, %rax
	movq	72(%rsp), %rsi          # 8-byte Reload
.LBB23_707:                             # %for.body.i4076
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rsi, %rdx
	je	.LBB23_713
# BB#706:                               # %for.cond.i4072
                                        #   in Loop: Header=BB23_707 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_707
.LBB23_708:                             # %if.then4.i4078
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_710
# BB#709:                               # %if.then5.i4080
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_711
.LBB23_76:
	movq	%rbx, 120(%rsp)         # 8-byte Spill
.LBB23_79:                              # %if.end253
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_80
# BB#81:                                # %land.lhs.true258
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %eax
	cmpq	%rax, %r14
	jae	.LBB23_82
# BB#83:                                # %land.lhs.true270
	movq	120(%rsp), %rdi         # 8-byte Reload
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB23_84
# BB#85:                                # %if.then273
	movq	184(%rsp), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_100
# BB#86:                                # %land.lhs.true279
	movl	8(%r14), %r13d
	cmpq	$53, %r13
	jb	.LBB23_100
# BB#87:                                # %cond.true285
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r13
	jne	.LBB23_89
# BB#88:                                # %cond.true285
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_99
.LBB23_89:                              # %cond.false294
	movq	$7, %rcx
	movq	%r13, %r12
	shrq	%cl, %r12
	xorq	%r13, %r12
	andq	$127, %r12
	movq	reg_hash(,%r12,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_93
# BB#90:
	movq	%rcx, %rax
.LBB23_92:                              # %for.body.i3684
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB23_98
# BB#91:                                # %for.cond.i3680
                                        #   in Loop: Header=BB23_92 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_92
.LBB23_93:                              # %if.then4.i3686
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_95
# BB#94:                                # %if.then5.i3688
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_96
.LBB23_45:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_55:                              # %lookup.exit3668
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	je	.LBB23_56
# BB#57:                                # %if.then139
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	48(%rax), %rbx
	testq	%rbx, %rbx
	je	.LBB23_58
.LBB23_59:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %r12
	movl	(%r12), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jg	.LBB23_65
# BB#60:                                # %for.body
                                        #   in Loop: Header=BB23_59 Depth=1
	leaq	-54(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$14, %rcx
	ja	.LBB23_63
# BB#61:                                # %for.body
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$24599, %rsi            # imm = 0x6017
	jne	.LBB23_67
# BB#62:                                # %for.body
                                        #   in Loop: Header=BB23_59 Depth=1
	cmpq	$9, %rcx
	je	.LBB23_69
	jmp	.LBB23_63
.LBB23_65:                              # %for.body
                                        #   in Loop: Header=BB23_59 Depth=1
	cmpq	$134, %rax
	je	.LBB23_67
# BB#66:                                # %for.body
                                        #   in Loop: Header=BB23_59 Depth=1
	cmpq	$140, %rax
	jne	.LBB23_63
.LBB23_67:                              # %land.lhs.true187
                                        #   in Loop: Header=BB23_59 Depth=1
	testq	$16711680, %rdx         # imm = 0xFF0000
	je	.LBB23_933
# BB#68:                                # %if.end196
                                        #   in Loop: Header=BB23_59 Depth=1
	cmpq	$63, %rax
	jne	.LBB23_63
.LBB23_69:                              # %land.lhs.true202
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	8(%r12), %rax
	movzbl	2(%rax), %eax
	cmpq	%r13, %rax
	jne	.LBB23_63
# BB#70:                                # %land.lhs.true212
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	$1, %rdx
	movq	%r12, %rdi
	movq	%r12, %rsi
	callq	exp_equiv_p
	testq	%r14, %rax
	jne	.LBB23_71
.LBB23_63:                              # %for.inc
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	32(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB23_59
# BB#64:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_904:                             # %if.then2651
	movq	184(%rsp), %rbx
	xorq	%rsi, %rsi
	movq	%rcx, %rdi
	callq	canon_reg
	movq	$76, %rdi
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	%rbx, %rdx
	movq	%rax, %rcx
.LBB23_922:                             # %return
	callq	simplify_gen_binary
	movq	%rax, %r12
	jmp	.LBB23_933
.LBB23_291:                             # %cond.false242.i
	movl	target_flags(%rip), %edx
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$4, %rdx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	callq	canon_hash
	jmp	.LBB23_292
.LBB23_286:                             # %if.else.i579.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r15,8), %rcx
.LBB23_287:                             # %if.end6.i588.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r15,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_289
# BB#288:                               # %if.then11.i589.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_289:                             # %get_cse_reg_info.exit591.i
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB23_290:                             # %cond.end238.i
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB23_292:                             # %cond.end250.i
	movb	%r13b, do_not_record(%rip)
	movl	target_flags(%rip), %r13d
	andq	$31, %rax
	movq	table(,%rax,8), %rdx
	movq	%rdx, 104(%rsp)         # 8-byte Spill
	movq	112(%rsp), %rax         # 8-byte Reload
	movb	%al, hash_arg_in_memory(%rip)
	movq	$25, %rcx
	shrq	%cl, %r13
	testq	%rdx, %rdx
	movq	%r14, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	je	.LBB23_353
# BB#293:
	movq	(%rsi), %rax
	movq	8(%rax), %r15
	andq	$1, %r13
	orq	$4, %r13
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	andq	%r12, %r13
.LBB23_294:                             # %for.body.i599.i
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdi, %r14
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	72(%rax), %eax
	cmpq	%r13, %rax
	jne	.LBB23_300
# BB#295:                               # %land.lhs.true.i606.i
                                        #   in Loop: Header=BB23_294 Depth=1
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzbl	(%r15), %ecx
	cmpq	%r15, %rax
	jne	.LBB23_297
# BB#296:                               # %land.lhs.true.i606.i
                                        #   in Loop: Header=BB23_294 Depth=1
	cmpq	$61, %rcx
	je	.LBB23_301
.LBB23_297:                             # %lor.lhs.false.i612.i
                                        #   in Loop: Header=BB23_294 Depth=1
	cmpq	$61, %rcx
	movabsq	$0, %rcx
	je	.LBB23_299
# BB#298:                               # %lor.lhs.false.i612.i
                                        #   in Loop: Header=BB23_294 Depth=1
	movabsq	$1, %rcx
.LBB23_299:                             # %lor.lhs.false.i612.i
                                        #   in Loop: Header=BB23_294 Depth=1
	movq	%r15, %rdi
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	exp_equiv_p
	testq	%r12, %rax
	jne	.LBB23_301
.LBB23_300:                             # %for.inc.i616.i
                                        #   in Loop: Header=BB23_294 Depth=1
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	testq	%rax, %rax
	movq	%r14, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	jne	.LBB23_294
	jmp	.LBB23_353
.LBB23_710:                             # %if.else.i4083
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB23_711:                             # %if.end6.i4092
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movq	72(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, 20(%rax)
	movl	%ecx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_713
# BB#712:                               # %if.then11.i4093
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_713:                             # %get_cse_reg_info.exit4095
	movq	72(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %eax
.LBB23_714:                             # %cond.end2104
	movq	%r14, %r10
	andq	%r10, %rax
	andq	%r10, %r13
	cmpq	%rax, %r13
	movq	%r15, %rdx
	movl	172(%rsp), %eax
	movq	%rax, %rbx
	je	.LBB23_738
# BB#715:                               # %cond.end2104.lor.lhs.false2109_crit_edge
	movq	184(%rsp), %rdi
.LBB23_716:                             # %lor.lhs.false2109
	movzbl	do_not_record(%rip), %r13d
	movzbl	hash_arg_in_memory(%rip), %r15d
	movq	%rbx, %rsi
	movq	%rdi, %r14
	callq	canon_hash
	movq	%r14, %rdi
	andq	$31, %rax
	movq	table(,%rax,8), %r14
	movb	%r15b, hash_arg_in_memory(%rip)
	movb	%r13b, do_not_record(%rip)
	testq	%r14, %r14
	movq	112(%rsp), %rdx         # 8-byte Reload
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	je	.LBB23_724
.LBB23_717:                             # %for.body.i3956
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%r14), %eax
	cmpq	%rbx, %rax
	jne	.LBB23_723
# BB#718:                               # %land.lhs.true.i3963
                                        #   in Loop: Header=BB23_717 Depth=1
	movq	(%r14), %rsi
	movzbl	(%rdi), %eax
	cmpq	%rdi, %rsi
	jne	.LBB23_720
# BB#719:                               # %land.lhs.true.i3963
                                        #   in Loop: Header=BB23_717 Depth=1
	cmpq	$61, %rax
	je	.LBB23_726
.LBB23_720:                             # %lor.lhs.false.i3969
                                        #   in Loop: Header=BB23_717 Depth=1
	movq	%r10, %rbx
	movq	%rdx, %r15
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB23_722
# BB#721:                               # %lor.lhs.false.i3969
                                        #   in Loop: Header=BB23_717 Depth=1
	movabsq	$1, %rdx
.LBB23_722:                             # %lor.lhs.false.i3969
                                        #   in Loop: Header=BB23_717 Depth=1
	movq	%rdi, %r13
	callq	exp_equiv_p
	movq	%r13, %rdi
	movq	%rbx, %r10
	testq	%r10, %rax
	movq	%r15, %rdx
	movl	172(%rsp), %ebx
	jne	.LBB23_726
.LBB23_723:                             # %for.inc.i3973
                                        #   in Loop: Header=BB23_717 Depth=1
	movq	16(%r14), %r14
	testq	%r14, %r14
	jne	.LBB23_717
	jmp	.LBB23_724
.LBB23_80:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_82:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_84:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_100:                             # %cond.false303
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	canon_hash
	jmp	.LBB23_101
.LBB23_95:                              # %if.else.i3691
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r12,8), %rcx
.LBB23_96:                              # %if.end6.i3700
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%ebx, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_98
# BB#97:                                # %if.then11.i3701
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_98:                              # %get_cse_reg_info.exit3703
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB23_99:                              # %cond.end299
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB23_101:                             # %cond.end308
	andq	$31, %rax
	movq	table(,%rax,8), %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	testq	%rax, %rax
	je	.LBB23_102
# BB#103:
	movq	184(%rsp), %rax
	movzbl	2(%rax), %r12d
	movabsq	$0, %r13
.LBB23_104:                             # %for.body.i3711
                                        # =>This Inner Loop Header: Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	movl	72(%rax), %eax
	cmpq	%r12, %rax
	jne	.LBB23_110
# BB#105:                               # %land.lhs.true.i3718
                                        #   in Loop: Header=BB23_104 Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movzbl	(%r14), %ecx
	cmpq	%r14, %rax
	jne	.LBB23_107
# BB#106:                               # %land.lhs.true.i3718
                                        #   in Loop: Header=BB23_104 Depth=1
	cmpq	$61, %rcx
	je	.LBB23_112
.LBB23_107:                             # %lor.lhs.false.i3724
                                        #   in Loop: Header=BB23_104 Depth=1
	cmpq	$61, %rcx
	movq	%r13, %rcx
	je	.LBB23_109
# BB#108:                               # %lor.lhs.false.i3724
                                        #   in Loop: Header=BB23_104 Depth=1
	movabsq	$1, %rcx
.LBB23_109:                             # %lor.lhs.false.i3724
                                        #   in Loop: Header=BB23_104 Depth=1
	movq	%r14, %rdi
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	exp_equiv_p
	testq	%rbx, %rax
	jne	.LBB23_112
.LBB23_110:                             # %for.inc.i3728
                                        #   in Loop: Header=BB23_104 Depth=1
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	testq	%rax, %rax
	jne	.LBB23_104
# BB#111:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_56:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_58:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_71:                              # %if.then217
	movq	(%rbx), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	callq	copy_rtx
	movq	%rax, %r12
	jmp	.LBB23_933
.LBB23_301:                             # %lookup.exit618.i
	cmpq	$0, 104(%rsp)           # 8-byte Folded Reload
	movq	%r14, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	je	.LBB23_353
# BB#302:                               # %if.end263.i
	movq	%rdi, %rdx
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	48(%rax), %rax
	testq	%rax, %rax
	je	.LBB23_305
# BB#303:
	xorq	%rcx, %rcx
.LBB23_304:                             # %for.body267.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, 78(%rax)
	movq	32(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_304
.LBB23_305:                             # %while.cond272.i.preheader
	cmpq	$0, 88(%rsp)            # 8-byte Folded Reload
	movq	%rdx, %rdi
	je	.LBB23_353
# BB#306:
	movq	$1, %r13
.LBB23_307:                             # %while.body274.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_321 Depth 2
	movq	%rdi, %r14
	movq	(%rsi), %r15
	movzbl	(%r15), %eax
	cmpq	$70, %rax
	jne	.LBB23_309
# BB#308:                               # %land.lhs.true.i627.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	8(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	movq	%r12, 88(%rsp)          # 8-byte Spill
	je	.LBB23_311
.LBB23_309:                             # %if.end.i630.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	callq	memory_address_p
	testq	%r12, %rax
	movq	$1000, 88(%rsp)         # 8-byte Folded Spill
                                        # imm = 0x3E8
	je	.LBB23_311
# BB#310:                               # %if.end5.i632.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	%r15, %rdi
	callq	ix86_address_cost
	movq	%rax, 88(%rsp)          # 8-byte Spill
.LBB23_311:                             # %address_cost.exit634.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	$0, 112(%rsp)           # 8-byte Folded Spill
	cmpq	$61, %rcx
	je	.LBB23_319
# BB#312:                               # %address_cost.exit634.i
                                        #   in Loop: Header=BB23_307 Depth=1
	cmpq	$63, %rcx
	jne	.LBB23_318
# BB#313:                               # %land.lhs.true.i643.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	8(%r15), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_318
# BB#314:                               # %land.lhs.true4.i.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_318
# BB#315:                               # %land.lhs.true9.i.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_318
# BB#316:                               # %land.lhs.true19.i.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB23_318
# BB#317:                               # %land.lhs.true36.i.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	%r15, %rdi
	callq	subreg_lowpart_p
	testq	%r12, %rax
	jne	.LBB23_319
.LBB23_318:                             # %cond.false.i.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	rtx_cost
	movq	%rax, 112(%rsp)         # 8-byte Spill
.LBB23_319:                             # %cond.end285.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	48(%rax), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	testq	%rax, %rax
	movq	%r14, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	je	.LBB23_353
# BB#320:                               # %for.body295.i.preheader
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	(%rsi), %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	%rsi, %r14
	movq	$0, 64(%rsp)            # 8-byte Folded Spill
	movq	104(%rsp), %r15         # 8-byte Reload
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
.LBB23_321:                             # %for.body295.i
                                        #   Parent Loop BB23_307 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	72(%rsp), %rax          # 8-byte Reload
	movzbl	78(%rax), %eax
	testq	%rax, %rax
	jne	.LBB23_349
# BB#322:                               # %land.lhs.true298.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	je	.LBB23_325
# BB#323:                               # %lor.lhs.false304.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$1, %rdx
	movq	%rax, %rdi
	movq	%rax, %rsi
	callq	exp_equiv_p
	testq	%r12, %rax
	je	.LBB23_349
# BB#324:                               # %lor.lhs.false304.i.if.then309.i_crit_edge
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
.LBB23_325:                             # %if.then309.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	(%r14), %rdx
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	movzbl	(%rdx), %edx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	%rdx, %rdi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	simplify_gen_binary
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movzbl	(%rax), %eax
	cmpq	$70, %rax
	jne	.LBB23_327
# BB#326:                               # %land.lhs.true.i656.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	movq	%r12, 32(%rsp)          # 8-byte Spill
	je	.LBB23_329
.LBB23_327:                             # %if.end.i659.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	memory_address_p
	testq	%r12, %rax
	movq	$1000, 32(%rsp)         # 8-byte Folded Spill
                                        # imm = 0x3E8
	je	.LBB23_329
# BB#328:                               # %if.end5.i661.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	ix86_address_cost
	movq	%rax, 32(%rsp)          # 8-byte Spill
.LBB23_329:                             # %address_cost.exit663.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$32, %rcx
	movq	88(%rsp), %rax          # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jl	.LBB23_340
# BB#330:                               # %lor.lhs.false320.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	88(%rsp), %rax          # 8-byte Reload
	andq	%r12, %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	andq	%r12, %rcx
	cmpq	%rax, %rcx
	jne	.LBB23_349
# BB#331:                               # %land.lhs.true323.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	40(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
	cmpq	$61, %rcx
	je	.LBB23_339
# BB#332:                               # %land.lhs.true323.i
                                        #   in Loop: Header=BB23_321 Depth=2
	cmpq	$63, %rcx
	jne	.LBB23_338
# BB#333:                               # %land.lhs.true.i672.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_338
# BB#334:                               # %land.lhs.true4.i678.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_338
# BB#335:                               # %land.lhs.true9.i684.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_338
# BB#336:                               # %land.lhs.true19.i688.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB23_338
# BB#337:                               # %land.lhs.true36.i691.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	subreg_lowpart_p
	testq	%r12, %rax
	jne	.LBB23_339
.LBB23_338:                             # %cond.false.i694.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$47, %rsi
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	rtx_cost
	movq	%rax, 24(%rsp)          # 8-byte Spill
.LBB23_339:                             # %cond.end331.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$32, %rcx
	movq	112(%rsp), %rax         # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$32, %rcx
	movq	24(%rsp), %rdx          # 8-byte Reload
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jle	.LBB23_349
.LBB23_340:                             # %if.then337.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	40(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	$0, 112(%rsp)           # 8-byte Folded Spill
	movq	$1, 80(%rsp)            # 8-byte Folded Spill
	cmpq	$61, %rcx
	je	.LBB23_348
# BB#341:                               # %if.then337.i
                                        #   in Loop: Header=BB23_321 Depth=2
	cmpq	$63, %rcx
	jne	.LBB23_347
# BB#342:                               # %land.lhs.true.i705.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB23_347
# BB#343:                               # %land.lhs.true4.i711.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_347
# BB#344:                               # %land.lhs.true9.i717.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB23_347
# BB#345:                               # %land.lhs.true19.i721.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB23_347
# BB#346:                               # %land.lhs.true36.i724.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	subreg_lowpart_p
	testq	%r12, %rax
	jne	.LBB23_348
.LBB23_347:                             # %cond.false.i727.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	$47, %rsi
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	rtx_cost
	movq	%rax, 112(%rsp)         # 8-byte Spill
.LBB23_348:                             # %for.inc351.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	%rax, 88(%rsp)          # 8-byte Spill
	movq	72(%rsp), %r15          # 8-byte Reload
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, 48(%rsp)          # 8-byte Spill
.LBB23_349:                             # %for.inc351.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	testq	%rax, %rax
	je	.LBB23_351
# BB#350:                               # %for.inc351.i
                                        #   in Loop: Header=BB23_321 Depth=2
	movq	64(%rsp), %rax          # 8-byte Reload
	incq	%rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$32, %rax
	jl	.LBB23_321
.LBB23_351:                             # %for.end353.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	80(%rsp), %rax          # 8-byte Reload
	testq	%r12, %rax
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	%r14, %rsi
	je	.LBB23_353
# BB#352:                               # %if.then355.i
                                        #   in Loop: Header=BB23_307 Depth=1
	movq	%rdi, %r14
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	copy_rtx
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	canon_reg
	xorq	%rcx, %rcx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rdx
	callq	validate_change
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	%r14, %rdi
	testq	%r12, %rax
	jne	.LBB23_353
# BB#934:                               # %while.cond272.i.backedge
                                        #   in Loop: Header=BB23_307 Depth=1
	movb	%r13b, 78(%r15)
	movq	80(%rsp), %rax          # 8-byte Reload
	testq	%r12, %rax
	jne	.LBB23_307
.LBB23_353:                             # %if.end912
	movq	%rdi, %rbx
	movq	(%rsi), %rdi
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	callq	fold_rtx
	movq	%rax, %r15
	movzbl	(%r15), %eax
	cmpq	$61, %rax
	jne	.LBB23_354
# BB#355:                               # %land.lhs.true921
	movl	8(%r15), %r14d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	movq	%rbx, %rdi
	jne	.LBB23_357
# BB#356:                               # %land.lhs.true921
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r14, %r12
	jne	.LBB23_368
.LBB23_357:                             # %cond.false930
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_361
# BB#358:
	movq	%rcx, %rax
.LBB23_360:                             # %for.body.i3877
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB23_367
# BB#359:                               # %for.cond.i3873
                                        #   in Loop: Header=BB23_360 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_360
.LBB23_361:                             # %if.then4.i3879
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%rdi, %r12
	testq	%rax, %rax
	je	.LBB23_363
# BB#362:                               # %if.then5.i3881
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_364
.LBB23_354:
	movq	%rbx, %rdi
	jmp	.LBB23_387
.LBB23_363:                             # %if.else.i3884
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB23_364:                             # %if.end6.i3893
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_366
# BB#365:                               # %if.then11.i3894
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_366:                             # %get_cse_reg_info.exit3896
	movq	%r12, %rdi
.LBB23_367:                             # %get_cse_reg_info.exit3896
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r15), %r12d
.LBB23_368:                             # %cond.end935
	movl	20(%rax), %esi
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%r12, %rdx
	andq	%r13, %rdx
	cmpq	%rdx, %rsi
	je	.LBB23_386
# BB#369:                               # %if.then943
	cmpq	%r14, %rdx
	jne	.LBB23_371
# BB#370:                               # %if.then943
	testq	%rax, %rax
	jne	.LBB23_382
.LBB23_371:                             # %cond.false952
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_376
# BB#372:
	movq	%rcx, %rax
.LBB23_374:                             # %for.body.i3911
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB23_375
# BB#373:                               # %for.cond.i3907
                                        #   in Loop: Header=BB23_374 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_374
.LBB23_376:                             # %if.then4.i3913
	movq	%rdi, %r14
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_378
# BB#377:                               # %if.then5.i3915
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_379
.LBB23_726:                             # %lookup.exit3975
	testq	%r14, %r14
	je	.LBB23_724
# BB#727:                               # %land.lhs.true2114
	movzbl	do_not_record(%rip), %r15d
	movzbl	hash_arg_in_memory(%rip), %eax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r10, %r13
	callq	canon_hash
	movq	%r13, %r10
	movq	112(%rsp), %rdx         # 8-byte Reload
	andq	$31, %rax
	movq	table(,%rax,8), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	64(%rsp), %rcx          # 8-byte Reload
	movb	%cl, hash_arg_in_memory(%rip)
	movb	%r15b, do_not_record(%rip)
	testq	%rax, %rax
	je	.LBB23_724
# BB#728:
	movabsq	$0, %r15
.LBB23_729:                             # %for.body.i3840
                                        # =>This Inner Loop Header: Depth=1
	movq	%r10, %r13
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	72(%rax), %eax
	cmpq	%rbx, %rax
	jne	.LBB23_735
# BB#730:                               # %land.lhs.true.i3847
                                        #   in Loop: Header=BB23_729 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	movq	104(%rsp), %rdx         # 8-byte Reload
	movzbl	(%rdx), %ecx
	cmpq	%rdx, %rax
	jne	.LBB23_732
# BB#731:                               # %land.lhs.true.i3847
                                        #   in Loop: Header=BB23_729 Depth=1
	cmpq	$61, %rcx
	je	.LBB23_736
.LBB23_732:                             # %lor.lhs.false.i3853
                                        #   in Loop: Header=BB23_729 Depth=1
	cmpq	$61, %rcx
	movq	%r15, %rcx
	je	.LBB23_734
# BB#733:                               # %lor.lhs.false.i3853
                                        #   in Loop: Header=BB23_729 Depth=1
	movabsq	$1, %rcx
.LBB23_734:                             # %lor.lhs.false.i3853
                                        #   in Loop: Header=BB23_729 Depth=1
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	exp_equiv_p
	testq	%r13, %rax
	jne	.LBB23_736
.LBB23_735:                             # %for.inc.i3857
                                        #   in Loop: Header=BB23_729 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	testq	%rax, %rax
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	%r13, %r10
	jne	.LBB23_729
	jmp	.LBB23_724
.LBB23_102:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_112:                             # %lookup.exit3730
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	je	.LBB23_113
# BB#114:                               # %for.cond319.preheader
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	48(%rax), %r14
	testq	%r14, %r14
	je	.LBB23_115
.LBB23_116:                             # %for.body321
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r14), %r10
	movl	(%r10), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	movzbl	rtx_class(%rdx), %esi
	cmpq	$49, %rsi
	jne	.LBB23_129
# BB#117:                               # %for.body321
                                        #   in Loop: Header=BB23_116 Depth=1
	andq	$65534, %rcx            # imm = 0xFFFE
	cmpq	$120, %rcx
	je	.LBB23_129
# BB#118:                               # %land.lhs.true345
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	8(%r10), %rcx
	movl	(%rcx), %r9d
	movq	%r9, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	cmpq	$63, %rdi
	jne	.LBB23_129
# BB#119:                               # %land.lhs.true354
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	8(%rcx), %rdi
	movl	(%rdi), %r8d
	movq	$16, %rcx
	movq	%r8, %rax
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	%r15, %rax
	jne	.LBB23_129
# BB#120:                               # %land.lhs.true367
                                        #   in Loop: Header=BB23_116 Depth=1
	movl	mode_class(,%r15,4), %eax
	movq	$14, %rcx
	shrq	%cl, %r9
	andq	$1020, %r9              # imm = 0x3FC
	movl	mode_class(%r9), %ecx
	cmpq	%rcx, %rax
	jne	.LBB23_129
# BB#121:                               # %if.then381
                                        #   in Loop: Header=BB23_116 Depth=1
	andq	$65535, %r8             # imm = 0xFFFF
	cmpq	$133, %r8
	jg	.LBB23_124
# BB#122:                               # %if.then381
                                        #   in Loop: Header=BB23_116 Depth=1
	addq	$-54, %r8
	andq	%rbx, %r8
	cmpq	$14, %r8
	ja	.LBB23_126
# BB#123:                               # %if.then381
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	$1, %rax
	movq	%r8, %rcx
	shlq	%cl, %rax
	testq	$24727, %rax            # imm = 0x6097
	jne	.LBB23_127
	jmp	.LBB23_126
.LBB23_129:                             # %if.else
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$50, %rsi
	je	.LBB23_131
# BB#130:                               # %if.else
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$99, %rsi
	jne	.LBB23_138
.LBB23_131:                             # %land.lhs.true461
                                        #   in Loop: Header=BB23_116 Depth=1
	leaq	-79(%rdx), %rcx
	andq	%rbx, %rcx
	cmpq	$12, %rcx
	movq	120(%rsp), %rsi         # 8-byte Reload
	ja	.LBB23_133
# BB#132:                               # %land.lhs.true461
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$7695, %rax             # imm = 0x1E0F
	jne	.LBB23_177
.LBB23_133:                             # %land.lhs.true485
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	8(%r10), %rsi
	movzbl	(%rsi), %ecx
	cmpq	$133, %rcx
	jg	.LBB23_143
# BB#134:                               # %land.lhs.true485
                                        #   in Loop: Header=BB23_116 Depth=1
	addq	$-54, %rcx
	andq	%rbx, %rcx
	cmpq	$14, %rcx
	ja	.LBB23_138
# BB#135:                               # %land.lhs.true485
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB23_145
# BB#136:                               # %land.lhs.true485
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$9, %rcx
	jne	.LBB23_138
# BB#137:                               # %land.lhs.true494
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	8(%rsi), %rax
	movzbl	2(%rax), %eax
	cmpq	%r15, %rax
	je	.LBB23_145
	jmp	.LBB23_138
.LBB23_124:                             # %if.then381
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$134, %r8
	je	.LBB23_127
# BB#125:                               # %if.then381
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$140, %r8
	je	.LBB23_127
.LBB23_126:                             # %if.then433
                                        #   in Loop: Header=BB23_116 Depth=1
	xorq	%rsi, %rsi
	callq	fold_rtx
	movq	%rax, %rdi
.LBB23_127:                             # %if.end435
                                        #   in Loop: Header=BB23_116 Depth=1
	callq	equiv_constant
	testq	%rax, %rax
	movq	120(%rsp), %rsi         # 8-byte Reload
	je	.LBB23_177
# BB#128:                               # %if.then438
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	(%r14), %rcx
	movzbl	(%rcx), %ecx
	movq	%rcx, %rdi
	movq	%r15, %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdx
                                        # kill: R15<def> RCX<kill>
	callq	simplify_unary_operation
	jmp	.LBB23_175
.LBB23_143:                             # %land.lhs.true485
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$134, %rcx
	je	.LBB23_145
# BB#144:                               # %land.lhs.true485
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$140, %rcx
	jne	.LBB23_138
.LBB23_145:                             # %land.lhs.true579
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	16(%r10), %rdi
	movzbl	(%rdi), %ecx
	cmpq	$133, %rcx
	jg	.LBB23_150
# BB#146:                               # %land.lhs.true579
                                        #   in Loop: Header=BB23_116 Depth=1
	addq	$-54, %rcx
	andq	%rbx, %rcx
	cmpq	$14, %rcx
	ja	.LBB23_138
# BB#147:                               # %land.lhs.true579
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB23_152
# BB#148:                               # %land.lhs.true579
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$9, %rcx
	jne	.LBB23_138
# BB#149:                               # %land.lhs.true588
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	8(%rdi), %rax
	movzbl	2(%rax), %eax
	cmpq	%r15, %rax
	jne	.LBB23_138
	jmp	.LBB23_152
.LBB23_150:                             # %land.lhs.true579
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$134, %rcx
	je	.LBB23_152
# BB#151:                               # %land.lhs.true579
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$140, %rcx
	jne	.LBB23_138
.LBB23_152:                             # %if.then673
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	%r15, %rdi
	callq	gen_lowpart_common
	movq	(%r14), %rcx
	movq	16(%rcx), %rcx
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rcx, %rsi
	callq	gen_lowpart_common
	movq	%rax, %r12
	xorq	%r13, %r13
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	movq	128(%rsp), %rdi         # 8-byte Reload
	je	.LBB23_160
# BB#153:                               # %land.lhs.true686
                                        #   in Loop: Header=BB23_116 Depth=1
	movzbl	(%rdi), %eax
	cmpq	$133, %rax
	jg	.LBB23_156
# BB#154:                               # %land.lhs.true686
                                        #   in Loop: Header=BB23_116 Depth=1
	addq	$-54, %rax
	andq	%rbx, %rax
	cmpq	$14, %rax
	ja	.LBB23_158
# BB#155:                               # %land.lhs.true686
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$24727, %rdx            # imm = 0x6097
	jne	.LBB23_159
	jmp	.LBB23_158
.LBB23_138:                             # %if.else840
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$63, %rdx
	movq	120(%rsp), %rsi         # 8-byte Reload
	jne	.LBB23_177
# BB#139:                               # %land.lhs.true846
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	8(%r10), %rax
	movzbl	2(%rax), %eax
	cmpq	%r15, %rax
	jne	.LBB23_177
# BB#140:                               # %land.lhs.true856
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	184(%rsp), %rax
	movzbl	2(%rax), %eax
	movl	target_flags(%rip), %edx
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rcx, %rdx
	cmpq	%rdx, %rax
	ja	.LBB23_177
# BB#141:                               # %land.lhs.true868
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	$1, %rdx
	movq	%rsi, %r12
	movq	%r10, %rdi
	movq	%r10, %rsi
	callq	exp_equiv_p
	movq	%r12, %rsi
	testq	%rbx, %rax
	je	.LBB23_177
# BB#142:                               # %if.then873
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	(%r14), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	callq	copy_rtx
	jmp	.LBB23_175
.LBB23_156:                             # %land.lhs.true686
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$134, %rax
	je	.LBB23_159
# BB#157:                               # %land.lhs.true686
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$140, %rax
	je	.LBB23_159
.LBB23_158:                             # %if.end733
                                        #   in Loop: Header=BB23_116 Depth=1
	xorq	%rsi, %rsi
	xorq	%r13, %r13
	callq	fold_rtx
	testq	%rax, %rax
	movq	%rax, %rdi
	je	.LBB23_160
.LBB23_159:                             # %if.then735
                                        #   in Loop: Header=BB23_116 Depth=1
	callq	equiv_constant
	movq	%rax, %r13
.LBB23_160:                             # %if.end737
                                        #   in Loop: Header=BB23_116 Depth=1
	testq	%r12, %r12
	movq	120(%rsp), %rsi         # 8-byte Reload
	je	.LBB23_177
# BB#161:                               # %land.lhs.true739
                                        #   in Loop: Header=BB23_116 Depth=1
	movzbl	(%r12), %eax
	cmpq	$133, %rax
	jg	.LBB23_164
# BB#162:                               # %land.lhs.true739
                                        #   in Loop: Header=BB23_116 Depth=1
	addq	$-54, %rax
	andq	%rbx, %rax
	cmpq	$14, %rax
	ja	.LBB23_166
# BB#163:                               # %land.lhs.true739
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$24727, %rdx            # imm = 0x6097
	jne	.LBB23_167
	jmp	.LBB23_166
.LBB23_164:                             # %land.lhs.true739
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$134, %rax
	je	.LBB23_167
# BB#165:                               # %land.lhs.true739
                                        #   in Loop: Header=BB23_116 Depth=1
	cmpq	$140, %rax
	je	.LBB23_167
.LBB23_166:                             # %if.end786
                                        #   in Loop: Header=BB23_116 Depth=1
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	fold_rtx
	movq	%rax, %r12
	testq	%r12, %r12
	movq	120(%rsp), %rsi         # 8-byte Reload
	je	.LBB23_177
.LBB23_167:                             # %if.end790
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	%r12, %rdi
	callq	equiv_constant
	movq	120(%rsp), %rsi         # 8-byte Reload
	testq	%r13, %r13
	je	.LBB23_177
# BB#168:                               # %if.end790
                                        #   in Loop: Header=BB23_116 Depth=1
	testq	%rax, %rax
	je	.LBB23_177
# BB#169:                               # %land.lhs.true794
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	(%r14), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$87, %rcx
	jne	.LBB23_174
# BB#170:                               # %land.lhs.true800
                                        #   in Loop: Header=BB23_116 Depth=1
	movzbl	(%rax), %esi
	cmpq	$54, %rsi
	jne	.LBB23_174
# BB#171:                               # %land.lhs.true805
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	8(%rax), %rsi
	movzbl	mode_bitsize(%r15,%r15), %edi
	cmpq	%rdi, %rsi
	jge	.LBB23_172
.LBB23_174:                             # %if.then833
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	%rcx, %rdi
	movq	%r15, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	simplify_binary_operation
.LBB23_175:                             # %if.end881
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	%rax, %r12
	jmp	.LBB23_176
.LBB23_172:                             # %if.then813
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	$15, %rcx
	shrq	%cl, %rdx
	andq	$510, %rdx              # imm = 0x1FE
	movzbl	mode_bitsize(%rdx), %eax
	cmpq	%rax, %rsi
	movq	120(%rsp), %rsi         # 8-byte Reload
	jge	.LBB23_177
# BB#173:                               #   in Loop: Header=BB23_116 Depth=1
	movq	const_int_rtx+512(%rip), %r12
.LBB23_176:                             # %if.end881
                                        #   in Loop: Header=BB23_116 Depth=1
	testq	%r12, %r12
	movq	120(%rsp), %rsi         # 8-byte Reload
	jne	.LBB23_933
.LBB23_177:                             # %for.inc885
                                        #   in Loop: Header=BB23_116 Depth=1
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	32(%r14), %r14
	testq	%r14, %r14
	jne	.LBB23_116
# BB#178:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_375:
	movq	%rdi, %r14
	jmp	.LBB23_381
.LBB23_378:                             # %if.else.i3918
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB23_379:                             # %if.end6.i3927
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_381
# BB#380:                               # %if.then11.i3928
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_381:                             # %get_cse_reg_info.exit3930
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %esi
	movq	%r14, %rdi
.LBB23_382:                             # %cond.end957
	movq	%rdi, %rbx
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	qty_table(%rip), %rax
	movzbl	2(%r15), %edi
	leaq	(%rsi,%rsi,2), %rdx
	movq	$4, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movl	36(%rax,%rsi), %ecx
	cmpq	%rcx, %rdi
	jne	.LBB23_385
# BB#383:                               # %land.lhs.true968
	movq	$4, %rcx
	shlq	%cl, %rdx
	movq	(%rax,%rdx), %rax
	testq	%rax, %rax
	je	.LBB23_385
# BB#384:                               # %land.lhs.true968
	movq	%rax, %r15
.LBB23_385:                             # %land.lhs.true968
	movq	%rbx, %rdi
.LBB23_386:                             # %if.end974
	xorq	%r14, %r14
.LBB23_387:                             # %if.end974
	movzbl	(%r15), %eax
	cmpq	$134, %rax
	jg	.LBB23_392
# BB#388:                               # %if.end974
	leaq	-67(%rax), %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$2, %rdx
	jb	.LBB23_398
# BB#389:                               # %if.end974
	cmpq	$58, %rax
	jne	.LBB23_390
# BB#394:                               # %land.lhs.true990
	movq	8(%r15), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB23_395
# BB#396:                               # %land.lhs.true998
	movq	16(%rcx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$54, %rsi
	jne	.LBB23_400
# BB#397:                               # %if.then1009
	movq	8(%rcx), %r15
	movq	8(%rdx), %r14
	jmp	.LBB23_398
.LBB23_392:                             # %if.end974
	cmpq	$135, %rax
	je	.LBB23_403
# BB#393:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_390:                             # %if.end974
	cmpq	$70, %rax
	je	.LBB23_405
# BB#391:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_395:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_736:                             # %lookup.exit3859
	cmpq	$0, 72(%rsp)            # 8-byte Folded Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	%r13, %r10
	je	.LBB23_724
# BB#737:                               # %land.lhs.true2119
	movq	48(%r14), %rax
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	48(%rcx), %rcx
	cmpq	%rcx, %rax
	je	.LBB23_738
.LBB23_724:                             # %if.else2193
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r10, %rbx
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	184(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB23_725
# BB#766:                               # %if.then2198
	movl	8(%rax), %r13d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r13
	jne	.LBB23_768
# BB#767:                               # %if.then2198
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r13, %rsi
	jne	.LBB23_778
.LBB23_768:                             # %cond.false2207
	movq	$7, %rcx
	movq	%r13, %r14
	shrq	%cl, %r14
	xorq	%r13, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_772
# BB#769:
	movq	%rcx, %rax
.LBB23_771:                             # %for.body.i3813
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB23_777
# BB#770:                               # %for.cond.i3809
                                        #   in Loop: Header=BB23_771 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_771
.LBB23_772:                             # %if.then4.i3815
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_774
# BB#773:                               # %if.then5.i3817
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_775
.LBB23_738:                             # %if.then2124
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, %rax
	orq	$4, %rax
	cmpq	$6, %rax
	jne	.LBB23_739
# BB#745:                               # %lor.lhs.false2139
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%rax, %rax
	jne	.LBB23_746
	jmp	.LBB23_741
.LBB23_739:                             # %lor.lhs.false2134
	cmpq	$8, %rcx
	jne	.LBB23_746
# BB#740:                               # %lor.lhs.false2134
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%r10, %rax
	jne	.LBB23_746
.LBB23_741:                             # %if.end2172
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	leaq	-114(%rdx), %rax
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	andq	%r10, %rax
	cmpq	$3, %rax
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	ja	.LBB23_743
# BB#742:                               # %if.end2172
	cmpq	$2, %rax
	jne	.LBB23_933
.LBB23_743:                             # %if.end2182
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	movq	112(%rsp), %rax         # 8-byte Reload
	leaq	-105(%rax), %rax
	andq	%r10, %rax
	movq	%r10, %rbx
	cmpq	$14, %rax
	jbe	.LBB23_815
# BB#744:
	movq	%rsi, %r8
	movq	%rbx, %r10
	jmp	.LBB23_816
.LBB23_746:                             # %if.then2141
	andq	%r10, %rdx
	cmpq	$103, %rdx
	movq	%rdx, %rdi
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_748
# BB#747:                               # %if.then2141
	movq	%rdx, %rcx
.LBB23_748:                             # %if.then2141
	cmpq	$106, %rdi
	movq	%rax, %rsi
	jne	.LBB23_750
# BB#749:                               # %if.then2141
	movq	%rdx, %rsi
.LBB23_750:                             # %if.then2141
	orq	%rsi, %rcx
	cmpq	$104, %rdi
	movq	%rax, %rsi
	jne	.LBB23_752
# BB#751:                               # %if.then2141
	movq	%rdx, %rsi
.LBB23_752:                             # %if.then2141
	orq	%rsi, %rcx
	cmpq	$110, %rdi
	movq	%rax, %rsi
	jne	.LBB23_754
# BB#753:                               # %if.then2141
	movq	%rdx, %rsi
.LBB23_754:                             # %if.then2141
	orq	%rsi, %rcx
	cmpq	$108, %rdi
	movq	%rax, %rsi
	jne	.LBB23_756
# BB#755:                               # %if.then2141
	movq	%rdx, %rsi
.LBB23_756:                             # %if.then2141
	orq	%rsi, %rcx
	cmpq	$114, %rdi
	movq	%rax, %rsi
	jne	.LBB23_758
# BB#757:                               # %if.then2141
	movq	%rdx, %rsi
.LBB23_758:                             # %if.then2141
	orq	%rsi, %rcx
	cmpq	$117, %rdi
	movq	%rax, %rsi
	jne	.LBB23_760
# BB#759:                               # %if.then2141
	movq	%rdx, %rsi
.LBB23_760:                             # %if.then2141
	orq	%rsi, %rcx
	cmpq	$115, %rdi
	movq	%rax, %rsi
	jne	.LBB23_762
# BB#761:                               # %if.then2141
	movq	%rdx, %rsi
.LBB23_762:                             # %if.then2141
	orq	%rsi, %rcx
	cmpq	$113, %rdi
	jne	.LBB23_764
# BB#763:                               # %if.then2141
	movq	%rdx, %rax
.LBB23_764:                             # %if.then2141
	orq	%rax, %rcx
	testq	$1, %rcx
	jne	.LBB23_933
# BB#765:                               # %if.then2141
	movq	96(%rsp), %r12          # 8-byte Reload
	jmp	.LBB23_933
.LBB23_113:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_115:
	movq	120(%rsp), %r12         # 8-byte Reload
	jmp	.LBB23_933
.LBB23_400:                             # %if.else1025
	cmpq	$70, %rax
	jne	.LBB23_401
.LBB23_405:                             # %if.then1047
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	callq	change_address
	movq	%rax, %r12
	jmp	.LBB23_933
.LBB23_725:
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	%rbx, %r10
	jmp	.LBB23_816
.LBB23_774:                             # %if.else.i3820
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
.LBB23_775:                             # %if.end6.i3829
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%ebx, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_777
# BB#776:                               # %if.then11.i3830
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_777:                             # %get_cse_reg_info.exit3832
	movq	184(%rsp), %rcx
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%rcx), %esi
.LBB23_778:                             # %cond.end2212
	movslq	20(%rax), %r14
	movq	%rsi, %rdx
	andq	%rbx, %rdx
	cmpq	%r13, %rdx
	jne	.LBB23_780
# BB#779:                               # %cond.end2212
	testq	%rax, %rax
	movq	%r14, %rax
	jne	.LBB23_790
.LBB23_780:                             # %cond.false2223
	movq	$7, %rcx
	movq	%rsi, %rax
	movq	%rax, %r15
	shrq	%cl, %r15
	xorq	%rax, %r15
	movq	%rax, %r13
	andq	$127, %r15
	movq	reg_hash(,%r15,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_784
# BB#781:
	movq	%rcx, %rax
.LBB23_783:                             # %for.body.i3779
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB23_789
# BB#782:                               # %for.cond.i3775
                                        #   in Loop: Header=BB23_783 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_783
.LBB23_784:                             # %if.then4.i3781
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_786
# BB#785:                               # %if.then5.i3783
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_787
.LBB23_815:                             # %if.end2182
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$16389, %rdx            # imm = 0x4005
	movq	96(%rsp), %r12          # 8-byte Reload
	movq	%rsi, %r8
	movq	%rbx, %r10
	jne	.LBB23_933
	jmp	.LBB23_816
.LBB23_401:                             # %if.else1025
	cmpq	$135, %rax
	movabsq	$0, %r14
	jne	.LBB23_402
.LBB23_403:                             # %land.lhs.true1030
	movq	16(%r15), %r15
	movzbl	(%r15), %eax
	cmpq	$68, %rax
	jne	.LBB23_404
.LBB23_398:                             # %if.end1052
	testq	%r15, %r15
	je	.LBB23_399
# BB#406:                               # %land.lhs.true1054
	movq	%r14, %rbx
	movl	(%r15), %eax
	andq	$67174399, %rax         # imm = 0x400FFFF
	cmpq	$67108932, %rax         # imm = 0x4000044
	jne	.LBB23_435
# BB#407:                               # %if.then1064
	movq	%rdi, %r13
	movq	%r15, %rdi
	callq	get_pool_constant
	movq	%rax, %r14
	movq	%r15, %rdi
	callq	get_pool_mode
	movzbl	(%r14), %ecx
	movq	%rax, %r12
	cmpq	$133, %rcx
	jg	.LBB23_410
# BB#408:                               # %if.then1064
	addq	$-55, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$13, %rax
	ja	.LBB23_413
# BB#409:                               # %if.then1064
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$12299, %rdx            # imm = 0x300B
	jne	.LBB23_412
	jmp	.LBB23_413
.LBB23_404:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_399:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_786:                             # %if.else.i3786
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r15,8), %rcx
.LBB23_787:                             # %if.end6.i3795
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r15,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%ebx, 28(%rax)
	movq	%r13, %rcx
	movl	%ecx, 20(%rax)
	movl	%ecx, 16(%rax)
                                        # kill: R13<def> RCX<kill>
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_789
# BB#788:                               # %if.then11.i3796
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_789:                             # %get_cse_reg_info.exit3798
	movq	184(%rsp), %rcx
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %eax
	movl	8(%rcx), %r13d
.LBB23_790:                             # %cond.end2228
	movq	%rbx, %rcx
	andq	%rcx, %r13
	andq	%rcx, %rax
	movq	%rcx, %r15
	cmpq	%r13, %rax
	je	.LBB23_791
# BB#792:                               # %if.then2236
	movq	qty_table(%rip), %rbx
	leaq	(%r14,%r14,2), %r13
	movq	$4, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movl	40(%rbx,%rax), %ecx
	leaq	40(%rbx,%rax), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	%rcx, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	comparison_dominates_p
	testq	%r15, %rax
	jne	.LBB23_796
# BB#793:                               # %lor.lhs.false2241
	cmpq	$8, 80(%rsp)            # 8-byte Folded Reload
	ja	.LBB23_795
# BB#794:                               # %lor.lhs.false2241
	movq	$1, %rax
	movq	80(%rsp), %rcx          # 8-byte Reload
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	jne	.LBB23_791
.LBB23_795:                             # %land.lhs.true2256
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %r14d
	movq	112(%rsp), %rdi         # 8-byte Reload
	callq	reverse_condition
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	comparison_dominates_p
	testq	%r15, %rax
	je	.LBB23_791
.LBB23_796:                             # %land.lhs.true2261
	movq	$4, %rcx
	movq	%r13, %r14
	shlq	%cl, %r14
	movq	16(%rbx,%r14), %rax
	movq	%rax, %rdi
	movq	104(%rsp), %rsi         # 8-byte Reload
	callq	rtx_equal_p
	testq	%r15, %rax
	jne	.LBB23_813
# BB#797:                               # %lor.lhs.false2264
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	je	.LBB23_799
# BB#798:                               # %land.lhs.true2266
	leaq	16(%rbx,%r14), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	movq	128(%rsp), %rsi         # 8-byte Reload
	callq	rtx_equal_p
	testq	%r15, %rax
	jne	.LBB23_813
.LBB23_799:                             # %lor.lhs.false2270
	movq	104(%rsp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB23_791
# BB#800:                               # %land.lhs.true2275
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	8(%rax), %r14d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	jne	.LBB23_802
# BB#801:                               # %land.lhs.true2275
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_812
.LBB23_802:                             # %cond.false2284
	movq	$7, %rcx
	movq	%r14, %rax
	shrq	%cl, %rax
	xorq	%r14, %rax
	andq	$127, %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	reg_hash(,%rax,8), %rcx
	testq	%rcx, %rcx
	je	.LBB23_806
# BB#803:
	movq	%rcx, %rax
.LBB23_805:                             # %for.body.i3745
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB23_811
# BB#804:                               # %for.cond.i3741
                                        #   in Loop: Header=BB23_805 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB23_805
.LBB23_806:                             # %if.then4.i3747
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB23_808
# BB#807:                               # %if.then5.i3749
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB23_809
.LBB23_402:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_410:                             # %if.then1064
	cmpq	$134, %rcx
	je	.LBB23_412
# BB#411:                               # %if.then1064
	cmpq	$140, %rcx
	jne	.LBB23_413
.LBB23_412:                             # %cond.false.i
	movq	$47, %rsi
	movq	%r14, %rdi
	callq	rtx_cost
	addq	%rax, %rax
	movl	%eax, constant_pool_entries_cost(%rip)
.LBB23_413:                             # %if.end1122
	testq	%rbx, %rbx
	jne	.LBB23_416
# BB#414:                               # %if.end1122
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r12, %rax
	cmpq	%rax, 56(%rsp)          # 8-byte Folded Reload
	jne	.LBB23_416
# BB#415:
	movq	%r14, %r12
	jmp	.LBB23_933
.LBB23_808:                             # %if.else.i3752
	movq	$32, %rdi
	callq	xmalloc
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	reg_hash(,%rcx,8), %rcx
.LBB23_809:                             # %if.end6.i3761
	movq	%rcx, (%rax)
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	%rax, reg_hash(,%rcx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB23_811
# BB#810:                               # %if.then11.i3762
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB23_811:                             # %get_cse_reg_info.exit3764
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB23_812:                             # %cond.end2289
	movl	20(%rax), %eax
	movq	$4, %rcx
	shlq	%cl, %r13
	movl	24(%rbx,%r13), %ecx
	cmpq	%rcx, %rax
	jne	.LBB23_791
.LBB23_813:                             # %if.then2294
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %eax
	movq	%rax, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	comparison_dominates_p
	testq	%r15, %rax
	jne	.LBB23_933
# BB#814:                               # %if.then2294
	movq	96(%rsp), %r12          # 8-byte Reload
	jmp	.LBB23_933
.LBB23_416:                             # %if.end1129
	movzbl	(%r14), %eax
	cmpq	$133, %rax
	jg	.LBB23_421
# BB#417:                               # %if.end1129
	addq	$-54, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	jbe	.LBB23_419
# BB#418:
	movq	%r13, %r12
	jmp	.LBB23_933
.LBB23_791:
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %r10
	jmp	.LBB23_816
.LBB23_421:                             # %if.end1129
	cmpq	$134, %rax
	je	.LBB23_424
# BB#422:                               # %if.end1129
	cmpq	$140, %rax
	je	.LBB23_424
# BB#423:
	movq	%r13, %r12
	jmp	.LBB23_933
.LBB23_419:                             # %if.end1129
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	je	.LBB23_420
.LBB23_424:                             # %if.end1170
	movq	56(%rsp), %rax          # 8-byte Reload
	movl	mode_class(,%rax,4), %eax
	cmpq	$1, %rax
	movq	%r13, %rdi
	jne	.LBB23_428
# BB#425:                               # %land.lhs.true1175
	movl	target_flags(%rip), %eax
	movq	56(%rsp), %rcx          # 8-byte Reload
	movzbl	mode_size(%rcx), %esi
	movq	$23, %rcx
	shrq	%cl, %rax
	andq	$4, %rax
	addq	$4, %rax
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rax, %rcx
	cmpq	%rcx, %rsi
	jne	.LBB23_428
# BB#426:                               # %land.lhs.true1184
	movq	%rbx, %rax
	cqto
	idivq	%rsi
	movq	%rdx, %rax
	testq	%rax, %rax
	jne	.LBB23_428
# BB#427:                               # %land.lhs.true1191
	movq	%rbx, %rax
	cqto
	idivq	%rsi
	xorq	%rdx, %rdx
	movq	%rdi, %r13
	movq	%r14, %rdi
	movq	%rax, %rsi
	movq	%r12, %rcx
	callq	operand_subword
	movq	%r13, %rdi
	movq	%rax, %r12
	testq	%r12, %r12
	jne	.LBB23_933
.LBB23_428:                             # %if.end1201
	testq	%rbx, %rbx
	jne	.LBB23_435
# BB#429:                               # %land.lhs.true1204
	movq	%rdi, %r12
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r14, %rsi
	callq	gen_lowpart_common
	movq	%r12, %rdi
	movq	%rax, %r12
	testq	%r12, %r12
	jne	.LBB23_933
# BB#430:                               # %if.else.i3945
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB23_435
# BB#431:                               # %if.then1.i
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%rdi, %r13
	movq	%r14, %rdi
	movq	56(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rsi
	callq	adjust_address_1
	movq	%rax, %r12
	movq	8(%r12), %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	memory_address_p
	movq	%r13, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB23_435
# BB#432:                               # %gen_lowpart_if_possible.exit
	movq	%rdi, %rax
	testq	%r12, %r12
	jne	.LBB23_434
# BB#433:                               # %gen_lowpart_if_possible.exit
	movq	%rax, %r12
.LBB23_434:                             # %gen_lowpart_if_possible.exit
	movq	%rax, %rdi
	jne	.LBB23_933
.LBB23_435:                             # %land.lhs.true1212
	movzbl	(%r15), %eax
	cmpq	$67, %rax
	jne	.LBB23_436
# BB#437:                               # %if.then1217
	movq	8(%r15), %rax
	movq	24(%rax), %rsi
	testq	%rsi, %rsi
	je	.LBB23_438
# BB#439:                               # %land.lhs.true1225
	movzbl	(%rsi), %eax
	cmpq	$33, %rax
	jne	.LBB23_440
# BB#441:                               # %land.lhs.true1230
	movq	32(%rsi), %r8
	movl	(%r8), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$44, %rcx
	jne	.LBB23_445
# BB#442:                               # %land.lhs.true1230
	testq	%rbx, %rbx
	js	.LBB23_445
# BB#443:                               # %land.lhs.true1244
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	movq	8(%r8), %rcx
	movslq	(%rcx), %rdx
	cmpq	%rdx, %rax
	jge	.LBB23_445
# BB#444:                               # %if.then1257
	movq	8(%rcx,%rax,8), %r12
	jmp	.LBB23_933
.LBB23_420:
	movq	%r13, %r12
	jmp	.LBB23_933
.LBB23_436:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_438:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_440:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_445:                             # %land.lhs.true1277
	movq	32(%rsi), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$45, %rcx
	jne	.LBB23_446
# BB#447:                               # %land.lhs.true1277
	testq	%rbx, %rbx
	js	.LBB23_448
# BB#449:                               # %land.lhs.true1292
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %ecx
	movq	%rbx, %rax
	cqto
	idivq	%rcx
	movq	16(%r14), %rdx
	movslq	(%rdx), %rcx
	cmpq	%rcx, %rax
	movq	%rdi, %r12
	jge	.LBB23_933
# BB#450:                               # %if.then1307
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	movq	8(%rdx,%rax,8), %rax
	movq	8(%r14), %r8
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	movq	$76, %rdi
	movq	%rax, %rdx
	movq	%r8, %rcx
	callq	gen_rtx_fmt_ee
	movl	target_flags(%rip), %esi
	movzbl	2(%r14), %edx
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	orq	$4, %rsi
	cmpq	%rsi, %rdx
	je	.LBB23_452
# BB#451:                               # %if.then1335
	movq	$122, %rdi
	movq	%rdx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
.LBB23_452:                             # %if.end1340
	movzbl	2(%rax), %ecx
	movq	$58, %rdi
	movq	%rcx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %r12
	jmp	.LBB23_933
.LBB23_446:
	movq	%rdi, %r12
	jmp	.LBB23_933
.LBB23_448:
	movq	%rdi, %r12
	jmp	.LBB23_933
.Ltmp333:
	.size	fold_rtx, .Ltmp333-fold_rtx
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI23_0:
	.quad	.LBB23_453
	.quad	.LBB23_461
	.quad	.LBB23_461
	.quad	.LBB23_461
	.quad	.LBB23_933
	.quad	.LBB23_933
	.quad	.LBB23_933
	.quad	.LBB23_461
	.quad	.LBB23_933
	.quad	.LBB23_13
	.quad	.LBB23_461
	.quad	.LBB23_933
	.quad	.LBB23_461
	.quad	.LBB23_21
	.quad	.LBB23_461
	.quad	.LBB23_461
	.quad	.LBB23_183
	.quad	.LBB23_933
	.quad	.LBB23_933
	.quad	.LBB23_461
	.quad	.LBB23_933
	.quad	.LBB23_461
	.quad	.LBB23_461
	.quad	.LBB23_461
	.quad	.LBB23_461
	.quad	.LBB23_461
	.quad	.LBB23_461
	.quad	.LBB23_180
.LJTI23_1:
	.quad	.LBB23_827
	.quad	.LBB23_933
	.quad	.LBB23_829
	.quad	.LBB23_829
	.quad	.LBB23_828
	.quad	.LBB23_828

	.text
	.align	16, 0x90
	.type	merge_equiv_classes,@function
merge_equiv_classes:                    # @merge_equiv_classes
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp340:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp341:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp342:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp343:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp344:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp345:
	.cfi_def_cfa_offset 80
.Ltmp346:
	.cfi_offset %rbx, -48
.Ltmp347:
	.cfi_offset %r12, -40
.Ltmp348:
	.cfi_offset %r13, -32
.Ltmp349:
	.cfi_offset %r14, -24
.Ltmp350:
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %rsi
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	cmpq	%r15, %rsi
	je	.LBB24_90
# BB#1:                                 # %entry
	testq	%r15, %r15
	je	.LBB24_90
	.align	16, 0x90
.LBB24_2:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_13 Depth 2
                                        #     Child Loop BB24_27 Depth 2
                                        #     Child Loop BB24_45 Depth 2
                                        #     Child Loop BB24_55 Depth 2
                                        #     Child Loop BB24_62 Depth 2
                                        #     Child Loop BB24_67 Depth 2
                                        #     Child Loop BB24_80 Depth 2
	movq	(%r15), %r12
	movl	(%r12), %eax
	movq	32(%r15), %rbx
	movl	72(%r15), %r13d
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	je	.LBB24_5
# BB#3:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$1, %rdx
	movq	%r12, %rdi
	movq	%r12, %rsi
	callq	exp_equiv_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB24_89
# BB#4:                                 # %lor.lhs.false.if.then6_crit_edge
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	(%r12), %eax
.LBB24_5:                               # %if.then6
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	xorq	%rcx, %rcx
	movb	%cl, hash_arg_in_memory(%rip)
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB24_19
# BB#6:                                 # %land.lhs.true
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	8(%r12), %r14d
	cmpq	$53, %r14
	jb	.LBB24_19
# BB#7:                                 # %cond.true
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%r13, 24(%rsp)          # 8-byte Spill
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	jne	.LBB24_9
# BB#8:                                 # %cond.true
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB24_18
.LBB24_9:                               # %cond.false
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$7, %rcx
	movq	%r14, %r13
	shrq	%cl, %r13
	xorq	%r14, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB24_10
	.align	16, 0x90
.LBB24_13:                              # %for.body.i
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB24_17
# BB#12:                                # %for.cond.i
                                        #   in Loop: Header=BB24_13 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB24_13
.LBB24_10:                              # %if.then4.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB24_11
# BB#14:                                # %if.else.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r13,8), %rcx
	jmp	.LBB24_15
	.align	16, 0x90
.LBB24_19:                              # %cond.false22
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%r13, 24(%rsp)          # 8-byte Spill
	callq	canon_hash
	movq	%rax, %r13
	jmp	.LBB24_20
.LBB24_11:                              # %if.then5.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB24_15:                              # %if.end6.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB24_17
# BB#16:                                # %if.then11.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB24_17:                              # %get_cse_reg_info.exit
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB24_18:                              # %cond.end
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	20(%rax), %r13d
	addq	$7808, %r13             # imm = 0x1E80
.LBB24_20:                              # %cond.end24
                                        #   in Loop: Header=BB24_2 Depth=1
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB24_51
# BB#21:                                # %if.then29
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	8(%r12), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rbx, %rax
	jne	.LBB24_23
# BB#22:                                # %if.then29
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB24_32
.LBB24_23:                              # %cond.false.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$7, %rcx
	movq	%rbx, %r14
	shrq	%cl, %r14
	xorq	%rbx, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB24_24
	.align	16, 0x90
.LBB24_27:                              # %for.body.i164
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB24_31
# BB#26:                                # %for.cond.i160
                                        #   in Loop: Header=BB24_27 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB24_27
.LBB24_24:                              # %if.then4.i166
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB24_25
# BB#28:                                # %if.else.i171
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
	jmp	.LBB24_29
.LBB24_25:                              # %if.then5.i168
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB24_29:                              # %if.end6.i180
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB24_31
# BB#30:                                # %if.then11.i181
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB24_31:                              # %get_cse_reg_info.exit183
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB24_32:                              # %cond.end.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	20(%rax), %edx
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rbx, %rdx
	je	.LBB24_51
# BB#33:                                # %if.end.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	reg_eqv_table(%rip), %rdi
	movl	(%rdi,%rbx,8), %r8d
	movq	qty_table(%rip), %r9
	movslq	4(%rdi,%rbx,8), %rdx
	movq	$32, %rcx
	movq	%r8, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	cmpq	%rcx, %r8
	jne	.LBB24_34
# BB#35:                                # %if.else.i106
                                        #   in Loop: Header=BB24_2 Depth=1
	leaq	(%rax,%rax,2), %rsi
	movq	$4, %rcx
	shlq	%cl, %rsi
	movl	%edx, 32(%r9,%rsi)
	jmp	.LBB24_36
.LBB24_34:                              # %if.then7.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	%edx, 4(%rdi,%rsi,8)
.LBB24_36:                              # %if.end11.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rdx, %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	%rsi, %rcx
	jne	.LBB24_37
# BB#38:                                # %if.else17.i
                                        #   in Loop: Header=BB24_2 Depth=1
	leaq	(%rax,%rax,2), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movl	%r8d, 28(%r9,%rax)
	jmp	.LBB24_39
.LBB24_37:                              # %if.then13.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	%r8d, (%rdi,%rdx,8)
.LBB24_39:                              # %if.end18.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rbx, %rax
	jne	.LBB24_41
# BB#40:                                # %if.end18.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB24_50
.LBB24_41:                              # %cond.false23.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$7, %rcx
	movq	%rbx, %r14
	shrq	%cl, %r14
	xorq	%rbx, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB24_42
	.align	16, 0x90
.LBB24_45:                              # %for.body.i121
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB24_49
# BB#44:                                # %for.cond.i117
                                        #   in Loop: Header=BB24_45 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB24_45
.LBB24_42:                              # %if.then4.i123
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB24_43
# BB#46:                                # %if.else.i128
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
	jmp	.LBB24_47
.LBB24_43:                              # %if.then5.i125
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB24_47:                              # %if.end6.i137
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB24_49
# BB#48:                                # %if.then11.i138
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB24_49:                              # %get_cse_reg_info.exit140
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB24_50:                              # %cond.end25.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	%ebx, 20(%rax)
.LBB24_51:                              # %if.end.i143
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$0, 48(%r15)
	movq	32(%r15), %rax
	movq	40(%r15), %rcx
	testq	%rax, %rax
	je	.LBB24_53
# BB#52:                                # %if.then1.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rcx, 40(%rax)
.LBB24_53:                              # %if.end3.i
                                        #   in Loop: Header=BB24_2 Depth=1
	andq	$31, %r13
	testq	%rcx, %rcx
	movq	8(%rsp), %r14           # 8-byte Reload
	jne	.LBB24_91
# BB#54:                                # %while.cond.preheader.i
                                        #   in Loop: Header=BB24_2 Depth=1
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB24_56
	.align	16, 0x90
.LBB24_55:                              # %while.body.i
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB24_55
	jmp	.LBB24_56
	.align	16, 0x90
.LBB24_91:                              # %if.then5.i144
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, 32(%rcx)
.LBB24_56:                              # %if.end10.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	16(%r15), %rax
	movq	24(%r15), %rcx
	testq	%rax, %rax
	je	.LBB24_58
# BB#57:                                # %if.then14.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rcx, 24(%rax)
.LBB24_58:                              # %if.end16.i
                                        #   in Loop: Header=BB24_2 Depth=1
	testq	%rcx, %rcx
	jne	.LBB24_59
# BB#60:                                # %if.else20.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%r13, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	movq	table(,%rdx,8), %rcx
	cmpq	%r15, %rcx
	movq	$-256, %rcx
	jne	.LBB24_62
# BB#61:                                # %if.then22.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, table(,%rdx,8)
	jmp	.LBB24_65
	.align	16, 0x90
.LBB24_62:                              # %for.body.i147
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	table+256(%rcx), %rdx
	cmpq	%r15, %rdx
	jne	.LBB24_64
# BB#63:                                # %if.then30.i
                                        #   in Loop: Header=BB24_62 Depth=2
	movq	%rax, table+256(%rcx)
.LBB24_64:                              # %for.inc.i
                                        #   in Loop: Header=BB24_62 Depth=2
	addq	$8, %rcx
	jne	.LBB24_62
	jmp	.LBB24_65
	.align	16, 0x90
.LBB24_59:                              # %if.then18.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, 16(%rcx)
.LBB24_65:                              # %if.end35.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	56(%r15), %rax
	testq	%rax, %rax
	je	.LBB24_71
# BB#66:                                # %if.end35.i
                                        #   in Loop: Header=BB24_2 Depth=1
	cmpq	%r15, %rax
	movq	%rax, %rdx
	je	.LBB24_71
	.align	16, 0x90
.LBB24_67:                              # %while.cond41.i
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%r15, %rdx
	jne	.LBB24_67
# BB#68:                                # %while.end46.i
                                        #   in Loop: Header=BB24_2 Depth=1
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB24_70
# BB#69:                                # %while.end46.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, %rdx
.LBB24_70:                              # %while.end46.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rdx, 56(%rcx)
.LBB24_71:                              # %remove_from_table.exit
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%r15)
	movq	%r15, free_element_chain(%rip)
	xorq	%rdx, %rdx
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	insert_regs
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB24_88
# BB#72:                                # %if.then36
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%r12, %rdi
	callq	rehash_using_reg
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB24_86
# BB#73:                                # %land.lhs.true40
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	8(%r12), %r15d
	cmpq	$53, %r15
	jb	.LBB24_86
# BB#74:                                # %cond.true45
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB24_76
# BB#75:                                # %cond.true45
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB24_85
.LBB24_76:                              # %cond.false53
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB24_77
	.align	16, 0x90
.LBB24_80:                              # %for.body.i198
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB24_84
# BB#79:                                # %for.cond.i194
                                        #   in Loop: Header=BB24_80 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB24_80
.LBB24_77:                              # %if.then4.i200
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB24_78
# BB#81:                                # %if.else.i205
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB24_82
	.align	16, 0x90
.LBB24_86:                              # %cond.false62
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%r12, %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	canon_hash
	movq	%rax, %r13
	jmp	.LBB24_87
.LBB24_78:                              # %if.then5.i202
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB24_82:                              # %if.end6.i214
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB24_84
# BB#83:                                # %if.then11.i215
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB24_84:                              # %get_cse_reg_info.exit217
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB24_85:                              # %cond.end58
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	20(%rax), %r13d
	addq	$7808, %r13             # imm = 0x1E80
.LBB24_87:                              # %cond.end64
                                        #   in Loop: Header=BB24_2 Depth=1
	andq	$31, %r13
.LBB24_88:                              # %if.end67
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	insert
	movzbl	hash_arg_in_memory(%rip), %ecx
	movb	%cl, 76(%rax)
	movq	16(%rsp), %rbx          # 8-byte Reload
.LBB24_89:                              # %for.cond.backedge
                                        #   in Loop: Header=BB24_2 Depth=1
	testq	%rbx, %rbx
	movq	%rbx, %r15
	jne	.LBB24_2
.LBB24_90:                              # %for.end
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp351:
	.size	merge_equiv_classes, .Ltmp351-merge_equiv_classes
	.cfi_endproc

	.align	16, 0x90
	.type	approx_reg_cost,@function
approx_reg_cost:                        # @approx_reg_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp356:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp357:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp358:
	.cfi_def_cfa_offset 32
	subq	$32, %rsp
.Ltmp359:
	.cfi_def_cfa_offset 64
.Ltmp360:
	.cfi_offset %rbx, -32
.Ltmp361:
	.cfi_offset %r14, -24
.Ltmp362:
	.cfi_offset %r15, -16
	movq	%rdi, 24(%rsp)
	leaq	(%rsp), %rbx
	movq	%rbx, %rdi
	callq	bitmap_initialize
	movabsq	$approx_reg_cost_1, %rsi
	leaq	24(%rsp), %rdi
	movq	%rbx, %rdx
	callq	for_each_rtx
	movq	(%rsp), %r10
	xorq	%r14, %r14
	testq	%r10, %r10
	je	.LBB25_1
# BB#5:
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	movabsq	$0, %r8
	movabsq	$1, %r9
	xorq	%r15, %r15
	.align	16, 0x90
.LBB25_6:                               # %for.cond7.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_7 Depth 2
                                        #     Child Loop BB25_23 Depth 2
	movq	24(%r10), %rbx
	testq	%rbx, %rbx
	movq	$1, %rsi
	je	.LBB25_22
	.align	16, 0x90
.LBB25_7:                               # %for.body14
                                        #   Parent Loop BB25_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	-1(%rsi), %rax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	%rbx, %rdx
	je	.LBB25_21
# BB#8:                                 # %if.then16
                                        #   in Loop: Header=BB25_7 Depth=2
	movl	16(%r10), %edi
	movq	$7, %rcx
	shlq	%cl, %rdi
	notq	%rdx
	addq	%rdi, %rax
	andq	%rdx, %rbx
	movq	%rax, %rdx
	andq	%r11, %rdx
	cmpq	$20, %rdx
	ja	.LBB25_10
# BB#9:                                 # %if.then16
                                        #   in Loop: Header=BB25_7 Depth=2
	movq	$1, %rdi
	movq	%rdx, %rcx
	shlq	%cl, %rdi
	testq	$1114304, %rdi          # imm = 0x1100C0
	jne	.LBB25_20
	.align	16, 0x90
.LBB25_10:                              # %lor.lhs.false27
                                        #   in Loop: Header=BB25_7 Depth=2
	leaq	-53(%rax), %rcx
	andq	%r11, %rcx
	cmpq	$5, %rcx
	jb	.LBB25_20
# BB#11:                                # %lor.lhs.false31
                                        #   in Loop: Header=BB25_7 Depth=2
	movq	$32, %rcx
	movq	%rax, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$52, %rdi
	jg	.LBB25_17
# BB#12:                                # %land.lhs.true33
                                        #   in Loop: Header=BB25_7 Depth=2
	cmpq	$6, %rdx
	je	.LBB25_16
# BB#13:                                # %land.lhs.true33
                                        #   in Loop: Header=BB25_7 Depth=2
	cmpq	$20, %rdx
	je	.LBB25_16
# BB#14:                                # %lor.lhs.false37
                                        #   in Loop: Header=BB25_7 Depth=2
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movzbl	fixed_regs(%rdx), %ecx
	testq	%rcx, %rcx
	jne	.LBB25_16
# BB#15:                                # %lor.lhs.false40
                                        #   in Loop: Header=BB25_7 Depth=2
	movzbl	global_regs(%rdx), %ecx
	testq	%rcx, %rcx
	je	.LBB25_17
.LBB25_16:                              # %land.lhs.true45
                                        #   in Loop: Header=BB25_7 Depth=2
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	regclass_map(,%rdx,4), %ecx
	testq	%rcx, %rcx
	jne	.LBB25_20
.LBB25_17:                              # %if.then50
                                        #   in Loop: Header=BB25_7 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$53, %rax
	movq	%r8, %rax
	jge	.LBB25_19
# BB#18:                                # %if.then50
                                        #   in Loop: Header=BB25_7 Depth=2
	movq	%r9, %rax
.LBB25_19:                              # %if.then50
                                        #   in Loop: Header=BB25_7 Depth=2
	addq	%rax, %r15
	leaq	1(%rax,%r14), %r14
.LBB25_20:                              # %if.end58
                                        #   in Loop: Header=BB25_7 Depth=2
	testq	%rbx, %rbx
	je	.LBB25_22
.LBB25_21:                              # %for.inc
                                        #   in Loop: Header=BB25_7 Depth=2
	movq	%rsi, %rax
	andq	%r11, %rax
	incq	%rsi
	cmpq	$64, %rax
	jb	.LBB25_7
.LBB25_22:                              # %if.end65
                                        #   in Loop: Header=BB25_6 Depth=1
	movq	32(%r10), %rbx
	xorq	%rax, %rax
	testq	%rbx, %rbx
	je	.LBB25_38
	.align	16, 0x90
.LBB25_23:                              # %for.body14.1
                                        #   Parent Loop BB25_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	%rbx, %rdx
	je	.LBB25_37
# BB#24:                                # %if.then16.1
                                        #   in Loop: Header=BB25_23 Depth=2
	movl	16(%r10), %esi
	movq	$7, %rcx
	shlq	%cl, %rsi
	notq	%rdx
	leaq	64(%rax,%rsi), %rsi
	andq	%rdx, %rbx
	movq	%rsi, %rdx
	andq	%r11, %rdx
	cmpq	$20, %rdx
	ja	.LBB25_26
# BB#25:                                # %if.then16.1
                                        #   in Loop: Header=BB25_23 Depth=2
	movq	$1, %rdi
	movq	%rdx, %rcx
	shlq	%cl, %rdi
	testq	$1114304, %rdi          # imm = 0x1100C0
	jne	.LBB25_36
	.align	16, 0x90
.LBB25_26:                              # %lor.lhs.false27.1
                                        #   in Loop: Header=BB25_23 Depth=2
	leaq	-53(%rsi), %rcx
	andq	%r11, %rcx
	cmpq	$5, %rcx
	jb	.LBB25_36
# BB#27:                                # %lor.lhs.false31.1
                                        #   in Loop: Header=BB25_23 Depth=2
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$52, %rdi
	jg	.LBB25_33
# BB#28:                                # %land.lhs.true33.1
                                        #   in Loop: Header=BB25_23 Depth=2
	cmpq	$6, %rdx
	je	.LBB25_32
# BB#29:                                # %land.lhs.true33.1
                                        #   in Loop: Header=BB25_23 Depth=2
	cmpq	$20, %rdx
	je	.LBB25_32
# BB#30:                                # %lor.lhs.false37.1
                                        #   in Loop: Header=BB25_23 Depth=2
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movzbl	fixed_regs(%rdx), %ecx
	testq	%rcx, %rcx
	jne	.LBB25_32
# BB#31:                                # %lor.lhs.false40.1
                                        #   in Loop: Header=BB25_23 Depth=2
	movzbl	global_regs(%rdx), %ecx
	testq	%rcx, %rcx
	je	.LBB25_33
.LBB25_32:                              # %land.lhs.true45.1
                                        #   in Loop: Header=BB25_23 Depth=2
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	regclass_map(,%rdx,4), %ecx
	testq	%rcx, %rcx
	jne	.LBB25_36
.LBB25_33:                              # %if.then50.1
                                        #   in Loop: Header=BB25_23 Depth=2
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$53, %rsi
	movq	%r8, %rcx
	jge	.LBB25_35
# BB#34:                                # %if.then50.1
                                        #   in Loop: Header=BB25_23 Depth=2
	movq	%r9, %rcx
.LBB25_35:                              # %if.then50.1
                                        #   in Loop: Header=BB25_23 Depth=2
	addq	%rcx, %r15
	leaq	1(%rcx,%r14), %r14
.LBB25_36:                              # %if.end58.1
                                        #   in Loop: Header=BB25_23 Depth=2
	testq	%rbx, %rbx
	je	.LBB25_38
.LBB25_37:                              # %for.inc.1
                                        #   in Loop: Header=BB25_23 Depth=2
	incq	%rax
	movq	%rax, %rcx
	andq	%r11, %rcx
	cmpq	$64, %rcx
	jb	.LBB25_23
.LBB25_38:                              # %if.end65.1
                                        #   in Loop: Header=BB25_6 Depth=1
	movq	(%r10), %r10
	testq	%r10, %r10
	jne	.LBB25_6
	jmp	.LBB25_2
.LBB25_1:
	xorq	%r15, %r15
.LBB25_2:                               # %do.end
	leaq	(%rsp), %rdi
	callq	bitmap_clear
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r15
	movq	$2147483647, %rax       # imm = 0x7FFFFFFF
	jne	.LBB25_4
# BB#3:                                 # %do.end
	movq	%r14, %rax
.LBB25_4:                               # %do.end
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp363:
	.size	approx_reg_cost, .Ltmp363-approx_reg_cost
	.cfi_endproc

	.align	16, 0x90
	.type	insert_regs,@function
insert_regs:                            # @insert_regs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp370:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp371:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp372:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp373:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp374:
	.cfi_def_cfa_offset 48
.Ltmp375:
	.cfi_offset %rbx, -48
.Ltmp376:
	.cfi_offset %r12, -40
.Ltmp377:
	.cfi_offset %r13, -32
.Ltmp378:
	.cfi_offset %r14, -24
.Ltmp379:
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movzbl	(%r13), %eax
	movq	%rdx, %r14
	movq	%rsi, %r15
	cmpq	$63, %rax
	jne	.LBB26_1
# BB#187:                               # %land.lhs.true105
	movq	8(%r13), %rdi
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB26_202
# BB#188:                               # %land.lhs.true112
	movl	8(%rdi), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB26_190
# BB#189:                               # %land.lhs.true112
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB26_200
.LBB26_190:                             # %cond.false124
	movq	$7, %rcx
	movq	%rbx, %r14
	shrq	%cl, %r14
	xorq	%rbx, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_194
# BB#191:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB26_193:                             # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB26_199
# BB#192:                               # %for.cond.i
                                        #   in Loop: Header=BB26_193 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_193
.LBB26_194:                             # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_196
# BB#195:                               # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_197
.LBB26_1:                               # %entry
	cmpq	$61, %rax
	jne	.LBB26_202
# BB#2:                                 # %if.then
	movl	8(%r13), %r12d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r12
	jne	.LBB26_4
# BB#3:                                 # %if.then
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB26_14
.LBB26_4:                               # %cond.false
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_8
# BB#5:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB26_7:                               # %for.body.i280
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_13
# BB#6:                                 # %for.cond.i276
                                        #   in Loop: Header=BB26_7 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_7
.LBB26_8:                               # %if.then4.i282
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_10
# BB#9:                                 # %if.then5.i284
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_11
.LBB26_196:                             # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
.LBB26_197:                             # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_199
# BB#198:                               # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_199:                             # %get_cse_reg_info.exit
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	8(%r13), %rdi
	movl	8(%rdi), %ebx
.LBB26_200:                             # %cond.end132
	movl	20(%rax), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rbx, %rcx
	cmpq	%rcx, %rax
	jne	.LBB26_202
# BB#201:                               # %if.then143
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	callq	insert_regs
	movq	%r13, %rdi
	callq	mention_regs
	movq	$1, %rax
	jmp	.LBB26_117
.LBB26_202:                             # %if.else149
	movq	%r13, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	mention_regs  # TAILCALL
.LBB26_10:                              # %if.else.i287
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_11:                              # %if.end6.i296
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_13
# BB#12:                                # %if.then11.i297
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_13:                              # %get_cse_reg_info.exit299
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB26_14:                              # %cond.end
	movl	20(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_28
# BB#15:                                # %if.then4
	testq	%rax, %rax
	jne	.LBB26_26
# BB#16:                                # %cond.false10
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_20
# BB#17:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB26_19:                              # %for.body.i314
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_25
# BB#18:                                # %for.cond.i310
                                        #   in Loop: Header=BB26_19 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_19
.LBB26_20:                              # %if.then4.i316
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_22
# BB#21:                                # %if.then5.i318
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_23
.LBB26_22:                              # %if.else.i321
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_23:                              # %if.end6.i330
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_25
# BB#24:                                # %if.then11.i331
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_25:                              # %get_cse_reg_info.exit333
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %edx
.LBB26_26:                              # %cond.end12
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	qty_table(%rip), %rsi
	leaq	(%rdx,%rdx,2), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	movl	36(%rsi,%rdx), %edx
	movzbl	2(%r13), %esi
	xorq	%rcx, %rcx
	cmpq	%rsi, %rdx
	jne	.LBB26_116
# BB#27:                                # %cond.end12
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %r14
	je	.LBB26_116
.LBB26_28:                              # %if.then24
	testq	%r15, %r15
	je	.LBB26_119
# BB#29:                                # %if.then26
	movq	48(%r15), %rcx
	jmp	.LBB26_30
.LBB26_118:                             # %for.inc
                                        #   in Loop: Header=BB26_30 Depth=1
	movq	32(%rcx), %rcx
.LBB26_30:                              # %if.then26
                                        # =>This Inner Loop Header: Depth=1
	testq	%rcx, %rcx
	je	.LBB26_119
# BB#31:                                # %for.body
                                        #   in Loop: Header=BB26_30 Depth=1
	movq	(%rcx), %rdx
	movl	(%rdx), %esi
	movq	%rsi, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	cmpq	$61, %rdi
	jne	.LBB26_118
# BB#32:                                # %land.lhs.true33
                                        #   in Loop: Header=BB26_30 Depth=1
	movl	(%r13), %edi
	xorq	%rsi, %rdi
	testq	$16711680, %rdi         # imm = 0xFF0000
	jne	.LBB26_118
# BB#33:                                # %if.then43
	movl	8(%rdx), %r14d
	cmpq	%r14, %r12
	jne	.LBB26_35
# BB#34:                                # %if.then43
	testq	%rax, %rax
	jne	.LBB26_45
.LBB26_35:                              # %cond.false.i344
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_39
# BB#36:
	movq	%rcx, %rax
.LBB26_38:                              # %for.body.i.i352
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB26_44
# BB#37:                                # %for.cond.i.i348
                                        #   in Loop: Header=BB26_38 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_38
.LBB26_39:                              # %if.then4.i.i354
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_41
# BB#40:                                # %if.then5.i.i356
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_42
.LBB26_119:                             # %if.end49
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	testq	%rsi, %r14
	jne	.LBB26_171
# BB#120:                               # %land.lhs.true51
	testq	%rax, %rax
	jne	.LBB26_132
# BB#121:                               # %cond.false57
	movq	%rsi, %r14
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_126
# BB#122:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB26_124:                             # %for.body.i395
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_125
# BB#123:                               # %for.cond.i391
                                        #   in Loop: Header=BB26_124 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_124
.LBB26_126:                             # %if.then4.i397
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_128
# BB#127:                               # %if.then5.i399
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_129
.LBB26_125:
	movq	%r14, %rsi
	jmp	.LBB26_131
.LBB26_128:                             # %if.else.i402
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_129:                             # %if.end6.i411
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movq	%r14, %rsi
	movl	%esi, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_131
# BB#130:                               # %if.then11.i412
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_131:                             # %get_cse_reg_info.exit414
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB26_132:                             # %cond.end59
	movslq	28(%rax), %rcx
	testq	%rcx, %rcx
	js	.LBB26_171
# BB#133:                               # %land.lhs.true63
	testq	%rax, %rax
	je	.LBB26_135
# BB#134:                               # %cond.end71.thread
	movl	24(%rax), %r14d
	jmp	.LBB26_157
.LBB26_135:                             # %cond.false69
	movq	%rsi, %r15
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_140
# BB#136:
	movq	%rcx, %rax
.LBB26_138:                             # %for.body.i429
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_139
# BB#137:                               # %for.cond.i425
                                        #   in Loop: Header=BB26_138 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_138
.LBB26_140:                             # %if.then4.i431
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_142
# BB#141:                               # %if.then5.i433
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_143
.LBB26_139:                             # %cond.end71.thread481
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	24(%rax), %r14d
	movq	%r15, %rsi
	jmp	.LBB26_157
.LBB26_142:                             # %if.else.i436
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_143:                             # %if.end6.i445
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movq	%r15, %rsi
	movl	%esi, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_145
# BB#144:                               # %if.then11.i446
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_145:                             # %cond.end71
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	24(%rax), %r14d
	testq	%rax, %rax
	jne	.LBB26_157
# BB#146:                               # %cond.false78
	movq	%rsi, %r15
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_151
# BB#147:
	movq	%rcx, %rax
.LBB26_149:                             # %for.body.i246
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_150
# BB#148:                               # %for.cond.i242
                                        #   in Loop: Header=BB26_149 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_149
.LBB26_151:                             # %if.then4.i248
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_153
# BB#152:                               # %if.then5.i250
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_154
.LBB26_150:
	movq	%r15, %rsi
	jmp	.LBB26_156
.LBB26_153:                             # %if.else.i253
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_154:                             # %if.end6.i262
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movq	%r15, %rsi
	movl	%esi, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_156
# BB#155:                               # %if.then11.i263
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_156:                             # %get_cse_reg_info.exit265
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB26_157:                             # %cond.end80
	movl	28(%rax), %ecx
	incq	%rcx
	andq	%rsi, %rcx
	andq	%rsi, %r14
	cmpq	%rcx, %r14
	jne	.LBB26_171
# BB#158:                               # %if.then85
	testq	%rax, %rax
	jne	.LBB26_170
# BB#159:                               # %cond.false91
	movq	%rsi, %r14
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_164
# BB#160:
	movq	%rcx, %rax
.LBB26_162:                             # %for.body.i212
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_163
# BB#161:                               # %for.cond.i208
                                        #   in Loop: Header=BB26_162 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_162
.LBB26_164:                             # %if.then4.i214
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_166
# BB#165:                               # %if.then5.i216
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_167
.LBB26_163:
	movq	%r14, %rsi
	jmp	.LBB26_169
.LBB26_166:                             # %if.else.i219
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_167:                             # %if.end6.i228
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movq	%r14, %rsi
	movl	%esi, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_169
# BB#168:                               # %if.then11.i229
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_169:                             # %get_cse_reg_info.exit231
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB26_170:                             # %cond.end93
	movl	24(%rax), %ecx
	incq	%rcx
	movl	%ecx, 24(%rax)
.LBB26_171:                             # %if.end96
	movslq	next_qty(%rip), %r15
	movslq	max_qty(%rip), %rax
	cmpq	%rax, %r15
	jge	.LBB26_172
# BB#173:                               # %if.end.i
	movl	cached_regno(%rip), %eax
	movzbl	2(%r13), %r14d
	leaq	1(%r15), %rcx
	movl	%ecx, next_qty(%rip)
	cmpq	%r12, %rax
	jne	.LBB26_175
# BB#174:                               # %if.end.i
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB26_186
.LBB26_175:                             # %cond.false.i
	movq	%rsi, %r13
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_180
# BB#176:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB26_178:                             # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_179
# BB#177:                               # %for.cond.i.i
                                        #   in Loop: Header=BB26_178 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_178
.LBB26_180:                             # %if.then4.i.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_182
# BB#181:                               # %if.then5.i.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_183
.LBB26_179:
	movq	%r13, %rsi
	jmp	.LBB26_185
.LBB26_182:                             # %if.else.i.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_183:                             # %if.end6.i.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movq	%r13, %rsi
	movl	%esi, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_185
# BB#184:                               # %if.then11.i.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_185:                             # %get_cse_reg_info.exit.i
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB26_186:                             # %make_new_qty.exit
	movl	%r15d, 20(%rax)
	movq	qty_table(%rip), %rax
	leaq	(%r15,%r15,2), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	movl	%r12d, 28(%rax,%rdx)
	movl	%r12d, 32(%rax,%rdx)
	movl	%r14d, 36(%rax,%rdx)
	xorq	%rcx, %rcx
	movl	%ecx, 40(%rax,%rdx)
	movq	$0, 8(%rax,%rdx)
	movq	$0, (%rax,%rdx)
	movq	reg_eqv_table(%rip), %rax
	movl	%esi, 4(%rax,%r12,8)
	movl	%esi, (%rax,%r12,8)
.LBB26_115:                             # %return
	movq	$1, %rcx
.LBB26_116:                             # %return
	movq	%rcx, %rax
.LBB26_117:                             # %return
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB26_41:                              # %if.else.i.i359
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_42:                              # %if.end6.i.i368
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_44
# BB#43:                                # %if.then11.i.i369
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_44:                              # %get_cse_reg_info.exit.i371
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB26_45:                              # %cond.end.i
	movslq	20(%rax), %r13
	movq	qty_table(%rip), %rdi
	testq	%rax, %rax
	movq	%r13, %rcx
	jne	.LBB26_56
# BB#46:                                # %cond.false5.i
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_50
# BB#47:
	movq	%rcx, %rax
.LBB26_49:                              # %for.body.i239.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB26_55
# BB#48:                                # %for.cond.i235.i
                                        #   in Loop: Header=BB26_49 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_49
.LBB26_50:                              # %if.then4.i241.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB26_52
# BB#51:                                # %if.then5.i243.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_53
.LBB26_52:                              # %if.else.i246.i
	movq	%rdi, %r15
	movq	$32, %rdi
	callq	xmalloc
	movq	%r15, %rdi
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_53:                              # %if.end6.i255.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_55
# BB#54:                                # %if.then11.i256.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_55:                              # %get_cse_reg_info.exit258.i
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %ecx
.LBB26_56:                              # %cond.end7.i
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rcx
	cmpq	%r14, %rcx
	je	.LBB26_57
# BB#59:                                # %if.end.i376
	cmpq	%r14, %r12
	jne	.LBB26_61
# BB#60:                                # %if.end.i376
	testq	%rax, %rax
	jne	.LBB26_72
.LBB26_61:                              # %cond.false15.i
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB26_65
# BB#62:
	movq	%rcx, %rax
.LBB26_64:                              # %for.body.i273.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB26_71
# BB#63:                                # %for.cond.i269.i
                                        #   in Loop: Header=BB26_64 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB26_64
.LBB26_65:                              # %if.then4.i275.i
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%rdi, %r14
	testq	%rax, %rax
	je	.LBB26_67
# BB#66:                                # %if.then5.i277.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB26_68
.LBB26_67:                              # %if.else.i280.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB26_68:                              # %if.end6.i289.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB26_70
# BB#69:                                # %if.then11.i290.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB26_70:                              # %get_cse_reg_info.exit292.i
	movq	%r14, %rdi
.LBB26_71:                              # %get_cse_reg_info.exit292.i
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB26_72:                              # %cond.end17.i
	movl	%r13d, 20(%rax)
	leaq	(%r13,%r13,2), %rax
	movq	$4, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movl	28(%rdi,%rsi), %ecx
	movl	32(%rdi,%rsi), %ebx
	cmpq	$52, %rcx
	ja	.LBB26_89
# BB#73:                                # %land.lhs.true21.i
	cmpq	$6, %rcx
	je	.LBB26_75
# BB#74:                                # %land.lhs.true21.i
	cmpq	$20, %rcx
	je	.LBB26_75
# BB#87:                                # %lor.lhs.false24.i
	movzbl	fixed_regs(%rcx), %edx
	testq	%rdx, %rdx
	jne	.LBB26_75
# BB#88:                                # %lor.lhs.false28.i
	movzbl	global_regs(%rcx), %edx
	testq	%rdx, %rdx
	jne	.LBB26_75
.LBB26_89:                              # %land.lhs.true33.i
	leaq	28(%rdi,%rsi), %rsi
	cmpq	$52, %r12
	jbe	.LBB26_90
# BB#95:                                # %land.lhs.true63.i
	cmpq	$53, %rcx
	jb	.LBB26_99
# BB#96:                                # %lor.lhs.false66.i
	movq	reg_n_info(%rip), %r8
	movq	32(%r8,%r12,8), %r10
	movslq	4(%r10), %rdx
	movq	uid_cuid(%rip), %rdi
	movslq	(%rdi,%rdx,4), %r9
	movslq	cse_basic_block_end(%rip), %rdx
	cmpq	%rdx, %r9
	jg	.LBB26_98
# BB#97:                                # %lor.lhs.false73.i
	movslq	(%r10), %rdx
	movslq	(%rdi,%rdx,4), %r10
	movslq	cse_basic_block_start(%rip), %rdx
	cmpq	%rdx, %r10
	jge	.LBB26_75
.LBB26_98:                              # %land.lhs.true82.i
	movq	32(%r8,%rcx,8), %rdx
	movslq	4(%rdx), %rdx
	movslq	(%rdi,%rdx,4), %rdx
	cmpq	%rdx, %r9
	jle	.LBB26_75
	jmp	.LBB26_99
.LBB26_90:                              # %lor.lhs.false36.i
	movl	regclass_map(,%r12,4), %edx
	testq	%rdx, %rdx
	je	.LBB26_75
# BB#91:                                # %land.lhs.true44.i
	cmpq	$6, %r12
	je	.LBB26_99
# BB#92:                                # %land.lhs.true44.i
	cmpq	$20, %r12
	je	.LBB26_99
# BB#93:                                # %lor.lhs.false50.i
	movzbl	fixed_regs(%r12), %edx
	testq	%rdx, %rdx
	jne	.LBB26_99
# BB#94:                                # %lor.lhs.false55.i
	movzbl	global_regs(%r12), %edx
	testq	%rdx, %rdx
	je	.LBB26_75
.LBB26_99:                              # %if.then99.i
	movq	reg_eqv_table(%rip), %rax
	movl	%r12d, 4(%rax,%rcx,8)
	movl	%ecx, (%rax,%r12,8)
	movl	%r15d, 4(%rax,%r12,8)
	movl	%r12d, (%rsi)
	jmp	.LBB26_115
.LBB26_75:                              # %while.cond.preheader.i
	movq	reg_eqv_table(%rip), %rsi
	cmpq	$52, %rbx
	ja	.LBB26_76
# BB#77:                                # %land.lhs.true110.lr.ph.i
	cmpq	$53, %r12
	jb	.LBB26_100
.LBB26_78:                              # %land.lhs.true110.us.i
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdx
	andq	%r15, %rdx
	movslq	4(%rsi,%rdx,8), %rdi
	testq	%rdi, %rdi
	js	.LBB26_79
# BB#80:                                # %land.lhs.true116.us.i
                                        #   in Loop: Header=BB26_78 Depth=1
	movl	regclass_map(,%rdx,4), %ecx
	testq	%rcx, %rcx
	je	.LBB26_86
# BB#81:                                # %lor.lhs.false121.us.i
                                        #   in Loop: Header=BB26_78 Depth=1
	cmpq	$6, %rdx
	je	.LBB26_109
# BB#82:                                # %lor.lhs.false121.us.i
                                        #   in Loop: Header=BB26_78 Depth=1
	movq	$20, %rcx
	cmpq	$20, %rdx
	je	.LBB26_110
# BB#83:                                # %lor.lhs.false127.us.i
                                        #   in Loop: Header=BB26_78 Depth=1
	movzbl	fixed_regs(%rdx), %ecx
	testq	%rcx, %rcx
	jne	.LBB26_84
# BB#85:                                # %lor.lhs.false132.us.i
                                        #   in Loop: Header=BB26_78 Depth=1
	movzbl	global_regs(%rdx), %ecx
	testq	%rcx, %rcx
	movq	%rbx, %rcx
	jne	.LBB26_110
.LBB26_86:                              # %while.body.us.i
                                        #   in Loop: Header=BB26_78 Depth=1
	movq	%rdi, %rcx
	andq	%r15, %rcx
	cmpq	$53, %rcx
	movq	%rdi, %rbx
	movq	%rdi, %rcx
	jb	.LBB26_78
	jmp	.LBB26_110
.LBB26_76:
	movq	%rbx, %rcx
	jmp	.LBB26_110
.LBB26_100:                             # %land.lhs.true110.i
	movslq	4(%rsi,%rbx,8), %rcx
	testq	%rcx, %rcx
	js	.LBB26_101
# BB#102:                               # %land.lhs.true116.i
	movl	regclass_map(,%rbx,4), %ecx
	testq	%rcx, %rcx
	je	.LBB26_103
# BB#104:                               # %lor.lhs.false121.i
	cmpq	$6, %rbx
	jne	.LBB26_105
.LBB26_109:                             # %lor.lhs.false121.land.end.thread_crit_edge305.i
	movq	$6, %rcx
	jmp	.LBB26_110
.LBB26_101:
	movq	%rbx, %rcx
	jmp	.LBB26_110
.LBB26_103:
	movq	%rbx, %rdi
	jmp	.LBB26_111
.LBB26_172:                             # %if.then.i
	movabsq	$.L.str4, %rax
	movabsq	$.L__FUNCTION__.make_new_qty, %rcx
	movq	$1051, %rsi             # imm = 0x41B
	jmp	.LBB26_58
.LBB26_57:                              # %if.then.i375
	movabsq	$.L.str4, %rax
	movabsq	$.L__FUNCTION__.make_regs_eqv, %rcx
	movq	$1080, %rsi             # imm = 0x438
.LBB26_58:                              # %if.then.i375
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB26_79:
	movq	%rbx, %rcx
	jmp	.LBB26_110
.LBB26_84:
	movq	%rbx, %rcx
	jmp	.LBB26_110
.LBB26_105:                             # %lor.lhs.false121.i
	movq	$20, %rcx
	cmpq	$20, %rbx
	je	.LBB26_110
# BB#106:                               # %lor.lhs.false127.i
	movzbl	fixed_regs(%rbx), %ecx
	testq	%rcx, %rcx
	je	.LBB26_108
# BB#107:
	movq	%rbx, %rcx
	jmp	.LBB26_110
.LBB26_108:                             # %lor.lhs.false132.i
	movzbl	global_regs(%rbx), %ecx
	testq	%rcx, %rcx
	movq	%rbx, %rcx
	movq	%rbx, %rdi
	je	.LBB26_111
.LBB26_110:                             # %land.end.thread.i
	andq	%rcx, %r15
	movq	%rcx, %rbx
	movq	%r15, %rdi
.LBB26_111:                             # %while.end.i
	movl	(%rsi,%rdi,8), %ecx
	movl	%ecx, (%rsi,%r12,8)
	movslq	(%rsi,%rdi,8), %rcx
	testq	%rcx, %rcx
	js	.LBB26_113
# BB#112:                               # %if.then153.i
	movl	%r12d, 4(%rsi,%rcx,8)
	jmp	.LBB26_114
.LBB26_113:                             # %if.else160.i
	movq	qty_table(%rip), %rdx
	movq	$4, %rcx
	shlq	%cl, %rax
	movl	%r12d, 32(%rdx,%rax)
.LBB26_114:                             # %if.end164.i
	movl	%r12d, (%rsi,%rdi,8)
	movl	%ebx, 4(%rsi,%r12,8)
	jmp	.LBB26_115
.Ltmp380:
	.size	insert_regs, .Ltmp380-insert_regs
	.cfi_endproc

	.align	16, 0x90
	.type	rehash_using_reg,@function
rehash_using_reg:                       # @rehash_using_reg
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp387:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp388:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp389:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp390:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp391:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp392:
	.cfi_def_cfa_offset 64
.Ltmp393:
	.cfi_offset %rbx, -48
.Ltmp394:
	.cfi_offset %r12, -40
.Ltmp395:
	.cfi_offset %r13, -32
.Ltmp396:
	.cfi_offset %r14, -24
.Ltmp397:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB27_2
# BB#1:                                 # %if.then
	movq	8(%r14), %r14
	movl	(%r14), %eax
.LBB27_2:                               # %if.end
	movq	%r14, (%rsp)            # 8-byte Spill
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB27_57
# BB#3:                                 # %lor.lhs.false
	movl	8(%r14), %r12d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r12
	jne	.LBB27_5
# BB#4:                                 # %lor.lhs.false
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB27_15
.LBB27_5:                               # %cond.false
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB27_9
# BB#6:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB27_8:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB27_14
# BB#7:                                 # %for.cond.i
                                        #   in Loop: Header=BB27_8 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB27_8
.LBB27_9:                               # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB27_11
# BB#10:                                # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB27_12
.LBB27_11:                              # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB27_12:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB27_14
# BB#13:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB27_14:                              # %get_cse_reg_info.exit
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB27_15:                              # %cond.end
	movslq	28(%rax), %r15
	testq	%r15, %r15
	js	.LBB27_57
# BB#16:                                # %lor.lhs.false11
	movl	8(%r14), %r13d
	cmpq	%r12, %r13
	jne	.LBB27_18
# BB#17:                                # %lor.lhs.false11
	testq	%rax, %rax
	movq	%r12, %rdi
	jne	.LBB27_28
.LBB27_18:                              # %cond.false19
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB27_22
# BB#19:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB27_21:                              # %for.body.i148
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB27_27
# BB#20:                                # %for.cond.i144
                                        #   in Loop: Header=BB27_21 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB27_21
.LBB27_22:                              # %if.then4.i150
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB27_24
# BB#23:                                # %if.then5.i152
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB27_25
.LBB27_24:                              # %if.else.i155
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB27_25:                              # %if.end6.i164
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB27_27
# BB#26:                                # %if.then11.i165
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB27_27:                              # %get_cse_reg_info.exit167
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	28(%rax), %r15d
	movl	8(%r14), %edi
	movq	%r13, %r12
.LBB27_28:                              # %cond.end24
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%rdi, %rdx
	andq	%r13, %rdx
	cmpq	%r12, %rdx
	jne	.LBB27_30
# BB#29:                                # %cond.end24
	testq	%rax, %rax
	jne	.LBB27_40
.LBB27_30:                              # %cond.false34
	movq	$7, %rcx
	movq	%rdi, %rbx
	shrq	%cl, %rbx
	xorq	%rdi, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB27_34
# BB#31:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB27_33:                              # %for.body.i182
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB27_39
# BB#32:                                # %for.cond.i178
                                        #   in Loop: Header=BB27_33 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB27_33
.LBB27_34:                              # %if.then4.i184
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB27_36
# BB#35:                                # %if.then5.i186
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB27_37
.LBB27_36:                              # %if.else.i189
	movq	%rdi, %r12
	movq	$32, %rdi
	callq	xmalloc
	movq	%r12, %rdi
	movq	reg_hash(,%rbx,8), %rcx
.LBB27_37:                              # %if.end6.i198
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB27_39
# BB#38:                                # %if.then11.i199
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB27_39:                              # %get_cse_reg_info.exit201
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB27_40:                              # %cond.end39
	movl	24(%rax), %eax
	andq	%r13, %r15
	cmpq	%rax, %r15
	jne	.LBB27_57
# BB#41:
	xorq	%r15, %r15
	.align	16, 0x90
.LBB27_42:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_43 Depth 2
	movq	table(,%r15,8), %r12
	jmp	.LBB27_43
.LBB27_55:                              # %if.end93
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	%rbx, table(,%rax,8)
	.align	16, 0x90
.LBB27_43:                              # %for.body
                                        #   Parent Loop BB27_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testq	%r12, %r12
	je	.LBB27_56
# BB#44:                                # %for.body48
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	%r12, %rbx
	movq	(%rbx), %rsi
	movzbl	(%rsi), %eax
	movq	16(%rbx), %r12
	cmpq	$61, %rax
	je	.LBB27_43
# BB#45:                                # %land.lhs.true52
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	%r14, %rdi
	callq	reg_mentioned_p
	testq	%r13, %rax
	je	.LBB27_43
# BB#46:                                # %land.lhs.true56
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	(%rbx), %rdi
	movq	$1, %rdx
	movq	%rdi, %rsi
	callq	exp_equiv_p
	testq	%r13, %rax
	je	.LBB27_43
# BB#47:                                # %land.lhs.true61
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	(%rbx), %rdi
	movzbl	do_not_record(%rip), %eax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	%r15, %r14
	movq	%r13, %r15
	movzbl	hash_arg_in_memory(%rip), %r13d
	movl	72(%rbx), %esi
	callq	canon_hash
	movb	%r13b, hash_arg_in_memory(%rip)
	movq	%r15, %r13
	movq	%r14, %r15
	movq	8(%rsp), %rcx           # 8-byte Reload
	movb	%cl, do_not_record(%rip)
	movq	(%rsp), %r14            # 8-byte Reload
	andq	$31, %rax
	movq	%r15, %rcx
	andq	%r13, %rcx
	cmpq	%rax, %rcx
	je	.LBB27_43
# BB#48:                                # %if.then65
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	16(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB27_50
# BB#49:                                # %if.then68
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	24(%rbx), %rdx
	movq	%rdx, 24(%rcx)
.LBB27_50:                              # %if.end71
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	24(%rbx), %rdx
	testq	%rdx, %rdx
	jne	.LBB27_51
# BB#52:                                # %if.else
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	%rcx, table(,%r15,8)
	jmp	.LBB27_53
.LBB27_51:                              # %if.then74
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	%rcx, 16(%rdx)
.LBB27_53:                              # %if.end81
                                        #   in Loop: Header=BB27_43 Depth=2
	andq	%r13, %rax
	movq	table(,%rax,8), %rcx
	movq	%rcx, 16(%rbx)
	movq	$0, 24(%rbx)
	movq	table(,%rax,8), %rcx
	testq	%rcx, %rcx
	je	.LBB27_55
# BB#54:                                # %if.then89
                                        #   in Loop: Header=BB27_43 Depth=2
	movq	%rbx, 24(%rcx)
	jmp	.LBB27_55
	.align	16, 0x90
.LBB27_56:                              # %for.inc97
                                        #   in Loop: Header=BB27_42 Depth=1
	incq	%r15
	cmpq	$32, %r15
	jne	.LBB27_42
.LBB27_57:                              # %for.end98
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp398:
	.size	rehash_using_reg, .Ltmp398-rehash_using_reg
	.cfi_endproc

	.align	16, 0x90
	.type	insert,@function
insert:                                 # @insert
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp405:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp406:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp407:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp408:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp409:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp410:
	.cfi_def_cfa_offset 80
.Ltmp411:
	.cfi_offset %rbx, -48
.Ltmp412:
	.cfi_offset %r12, -40
.Ltmp413:
	.cfi_offset %r13, -32
.Ltmp414:
	.cfi_offset %r14, -24
.Ltmp415:
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movl	(%r15), %eax
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rdx, %r13
	movq	%rsi, %r12
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB28_15
# BB#1:                                 # %land.lhs.true
	movl	8(%r15), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB28_3
# BB#2:                                 # %land.lhs.true
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB28_13
.LBB28_3:                               # %cond.false
	movq	$7, %rcx
	movq	%rbx, %r14
	shrq	%cl, %r14
	xorq	%rbx, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB28_7
# BB#4:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB28_6:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB28_12
# BB#5:                                 # %for.cond.i
                                        #   in Loop: Header=BB28_6 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB28_6
.LBB28_7:                               # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_9
# BB#8:                                 # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB28_10
.LBB28_9:                               # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
.LBB28_10:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB28_12
# BB#11:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB28_12:                              # %get_cse_reg_info.exit
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r15), %ebx
.LBB28_13:                              # %cond.end
	movl	20(%rax), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rbx, %rcx
	cmpq	%rcx, %rax
	je	.LBB28_226
# BB#14:                                # %cond.end.if.end_crit_edge
	movl	(%r15), %eax
.LBB28_15:                              # %if.end
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB28_35
# BB#16:                                # %land.lhs.true13
	movl	8(%r15), %esi
	cmpq	$52, %rsi
	ja	.LBB28_35
# BB#17:                                # %if.then18
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rsi, %rdx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$8, %rdx
	je	.LBB28_21
# BB#18:                                # %if.then18
	leaq	-21(%rsi), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB28_21
# BB#19:                                # %if.then18
	leaq	-45(%rsi), %rdx
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB28_21
# BB#20:                                # %if.then18
	leaq	-29(%rsi), %rdx
	andq	%rcx, %rdx
	cmpq	$7, %rdx
	jbe	.LBB28_21
# BB#26:                                # %cond.false48
	cmpq	$24, %rax
	jne	.LBB28_27
# BB#29:                                # %cond.true61
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB28_31
.LBB28_21:                              # %cond.true36
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB28_31
# BB#22:                                # %lor.rhs
	cmpq	$6, %rcx
	jne	.LBB28_23
# BB#24:                                # %lor.rhs
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB28_31
.LBB28_27:                              # %cond.false48
	cmpq	$18, %rax
	jne	.LBB28_30
# BB#28:                                # %cond.true53
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB28_31
.LBB28_23:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB28_31
.LBB28_30:                              # %cond.false65
	movl	target_flags(%rip), %edi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
.LBB28_31:                              # %cond.end81
	addq	%rsi, %rax
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rax
	cmpq	%rax, %rsi
	jae	.LBB28_35
# BB#32:                                # %for.body.lr.ph
	movq	hard_regs_in_table(%rip), %rdi
	movq	%rsi, %rbx
	.align	16, 0x90
.LBB28_33:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdi, %rdx
	movq	$1, %rdi
	movq	%rsi, %rcx
	shlq	%cl, %rdi
	orq	%rdx, %rdi
	incq	%rbx
	movq	%rbx, %rcx
	andq	%r8, %rcx
	incq	%rsi
	cmpq	%rax, %rcx
	jne	.LBB28_33
# BB#34:                                # %for.cond.if.end86.loopexit_crit_edge
	movq	%rdi, hard_regs_in_table(%rip)
.LBB28_35:                              # %if.end86
	movq	free_element_chain(%rip), %r14
	testq	%r14, %r14
	je	.LBB28_37
# BB#36:                                # %if.then88
	movq	16(%r14), %rax
	movq	%rax, free_element_chain(%rip)
	jmp	.LBB28_38
.LBB28_37:                              # %if.else
	movl	n_elements_made(%rip), %eax
	incq	%rax
	movl	%eax, n_elements_made(%rip)
	movq	$80, %rdi
	callq	xmalloc
	movq	%rax, %r14
.LBB28_38:                              # %if.end91
	movq	%r15, (%r14)
	movq	$0, 8(%r14)
	movl	(%r15), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	xorq	%rbx, %rbx
	cmpq	$61, %rcx
	movabsq	$0, %rax
	je	.LBB28_46
# BB#39:                                # %if.end91
	cmpq	$63, %rcx
	jne	.LBB28_45
# BB#40:                                # %land.lhs.true.i
	movq	8(%r15), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB28_45
# BB#41:                                # %land.lhs.true4.i
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB28_45
# BB#42:                                # %land.lhs.true9.i
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB28_45
# BB#43:                                # %land.lhs.true19.i
	movzbl	mode_size(%rdx), %ecx
	movzbl	mode_size(%rax), %eax
	cmpq	%rax, %rcx
	jae	.LBB28_45
# BB#44:                                # %land.lhs.true36.i
	movq	%r15, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movabsq	$0, %rax
	jne	.LBB28_46
.LBB28_45:                              # %cond.false.i
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	rtx_cost
	addq	%rax, %rax
.LBB28_46:                              # %cond.end99
	movl	%eax, 64(%r14)
	movq	%r15, %rdi
	callq	approx_reg_cost
	movl	%eax, 68(%r14)
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %r13
	movq	$0, 40(%r14)
	movq	$0, 32(%r14)
	movq	table(,%r13,8), %rcx
	movq	%rcx, 16(%r14)
	movq	$0, 24(%r14)
	movq	$0, 56(%r14)
	movb	%bl, 76(%r14)
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, 72(%r14)
	movl	(%r15), %edx
	leaq	32(%r14), %rbx
	movq	%rdx, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	movq	$1, %r9
	cmpq	$133, %rdi
	jg	.LBB28_50
# BB#47:                                # %cond.end99
	leaq	-54(%rdi), %rcx
	andq	%rsi, %rcx
	cmpq	$14, %rcx
	ja	.LBB28_54
# BB#48:                                # %cond.end99
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$24599, %rsi            # imm = 0x6017
	je	.LBB28_54
# BB#49:
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	jmp	.LBB28_75
.LBB28_50:                              # %cond.end99
	cmpq	$134, %rdi
	jne	.LBB28_52
# BB#51:
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	jmp	.LBB28_75
.LBB28_52:                              # %cond.end99
	cmpq	$140, %rdi
	jne	.LBB28_54
# BB#53:
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	jmp	.LBB28_75
.LBB28_54:                              # %lor.lhs.false145
	andq	$67174399, %rdx         # imm = 0x400FFFF
	cmpq	$67108925, %rdx         # imm = 0x400003D
	jne	.LBB28_57
# BB#55:                                # %land.lhs.true155
	movl	8(%r15), %ecx
	cmpq	$52, %rcx
	ja	.LBB28_56
.LBB28_57:                              # %lor.rhs161
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	movq	global_rtl+24(%rip), %rcx
	cmpq	%r15, %rcx
	je	.LBB28_75
# BB#58:                                # %lor.rhs161
	movq	global_rtl+32(%rip), %r10
	cmpq	%r15, %r10
	je	.LBB28_75
# BB#59:                                # %lor.lhs.false167
	movq	global_rtl+40(%rip), %rdx
	movzbl	fixed_regs+16(%rip), %esi
	cmpq	%r15, %rdx
	movabsq	$0, %rbx
	movabsq	$1, %r11
	movq	%rbx, %rdx
	jne	.LBB28_61
# BB#60:                                # %lor.lhs.false167
	movq	%r11, %rdx
.LBB28_61:                              # %lor.lhs.false167
	testq	%rsi, %rsi
	je	.LBB28_63
# BB#62:                                # %lor.lhs.false167
	movq	%r11, %rbx
.LBB28_63:                              # %lor.lhs.false167
	movq	global_rtl+56(%rip), %rsi
	cmpq	%r15, %rsi
	je	.LBB28_75
# BB#64:                                # %lor.lhs.false167
	andq	%rdx, %rbx
	jne	.LBB28_75
# BB#65:                                # %lor.lhs.false167
	movq	global_rtl+48(%rip), %rbx
	cmpq	%r15, %rbx
	je	.LBB28_75
# BB#66:                                # %lor.lhs.false179
	cmpq	$75, %rdi
	jne	.LBB28_72
# BB#67:                                # %land.lhs.true184
	movq	16(%r15), %rdx
	movzbl	(%rdx), %edx
	cmpq	$54, %rdx
	jne	.LBB28_72
# BB#68:                                # %land.lhs.true191
	movq	8(%r15), %rdx
	cmpq	%rcx, %rdx
	je	.LBB28_75
# BB#69:                                # %land.lhs.true191
	cmpq	%r10, %rdx
	je	.LBB28_75
# BB#70:                                # %lor.lhs.false209
	cmpq	%rsi, %rdx
	je	.LBB28_75
# BB#71:                                # %lor.lhs.false209
	cmpq	%rbx, %rdx
	je	.LBB28_75
.LBB28_72:                              # %lor.rhs221
	cmpq	$70, %rdi
	jne	.LBB28_73
# BB#74:                                # %lor.rhs221
	movabsq	$1, %r9
	jmp	.LBB28_75
.LBB28_73:
	movabsq	$0, %r9
	jmp	.LBB28_75
.LBB28_56:
	movq	%rbx, 16(%rsp)          # 8-byte Spill
.LBB28_75:                              # %lor.end227
	movb	%r9b, 77(%r14)
	movq	table(,%r13,8), %rcx
	testq	%rcx, %rcx
	je	.LBB28_77
# BB#76:                                # %if.then232
	movq	%r14, 24(%rcx)
.LBB28_77:                              # %if.end236
	movq	%r14, table(,%r13,8)
	testq	%r12, %r12
	je	.LBB28_166
# BB#78:                                # %if.then240
	movq	48(%r12), %r10
	movl	64(%r14), %r11d
	movl	64(%r10), %edx
	movl	68(%r10), %ecx
	cmpq	%rdx, %r11
	je	.LBB28_81
# BB#79:                                # %if.then.i
	cmpq	$2147483647, %r11       # imm = 0x7FFFFFFF
	je	.LBB28_83
# BB#80:                                # %if.end.i
	cmpq	$2147483647, %rdx       # imm = 0x7FFFFFFF
	je	.LBB28_101
.LBB28_81:                              # %if.end6.i703
	movq	%rcx, %rsi
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %rbx
	andq	%rbx, %rsi
	movq	%rax, %rdi
	andq	%rbx, %rdi
	cmpq	%rsi, %rdi
	je	.LBB28_98
# BB#82:                                # %if.then8.i
	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
	je	.LBB28_83
# BB#97:                                # %if.end11.i
	cmpq	$2147483647, %rsi       # imm = 0x7FFFFFFF
	je	.LBB28_101
.LBB28_98:                              # %if.end15.i
	movq	%r11, %rsi
	subq	%rdx, %rsi
	jne	.LBB28_100
# BB#99:                                # %if.end15.i
	movq	%rax, %rsi
	subq	%rcx, %rsi
.LBB28_100:                             # %if.end15.i
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	testq	%rsi, %rsi
	js	.LBB28_101
.LBB28_83:                              # %for.cond261.preheader
	movq	32(%r10), %rcx
	leaq	32(%r10), %r13
	movq	%r10, %rdx
	jmp	.LBB28_84
	.align	16, 0x90
.LBB28_94:                              # %for.cond261.backedge
                                        #   in Loop: Header=BB28_84 Depth=1
	movq	32(%rdx), %rcx
	leaq	32(%rdx), %r13
.LBB28_84:                              # %for.cond261.preheader
                                        # =>This Inner Loop Header: Depth=1
	testq	%rcx, %rcx
	je	.LBB28_95
# BB#85:                                # %land.rhs
                                        #   in Loop: Header=BB28_84 Depth=1
	movq	%rdx, %r12
	movq	%rcx, %rdx
	movl	64(%rdx), %ebx
	movl	68(%rdx), %esi
	cmpq	%r11, %rbx
	je	.LBB28_88
# BB#86:                                # %if.then.i707
                                        #   in Loop: Header=BB28_84 Depth=1
	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
	je	.LBB28_227
# BB#87:                                # %if.end.i709
                                        #   in Loop: Header=BB28_84 Depth=1
	cmpq	$2147483647, %r11       # imm = 0x7FFFFFFF
	je	.LBB28_94
.LBB28_88:                              # %if.end6.i711
                                        #   in Loop: Header=BB28_84 Depth=1
	movq	%rax, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, %r8
	andq	%r8, %rdi
	movq	%rsi, %rcx
	andq	%r8, %rcx
	cmpq	%rdi, %rcx
	je	.LBB28_91
# BB#89:                                # %if.then8.i713
                                        #   in Loop: Header=BB28_84 Depth=1
	cmpq	$2147483647, %rcx       # imm = 0x7FFFFFFF
	je	.LBB28_227
# BB#90:                                # %if.end11.i715
                                        #   in Loop: Header=BB28_84 Depth=1
	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
	je	.LBB28_94
.LBB28_91:                              # %if.end15.i716
                                        #   in Loop: Header=BB28_84 Depth=1
	subq	%r11, %rbx
	jne	.LBB28_93
# BB#92:                                # %if.end15.i716
                                        #   in Loop: Header=BB28_84 Depth=1
	subq	%rax, %rsi
	movq	%rsi, %rbx
.LBB28_93:                              # %if.end15.i716
                                        #   in Loop: Header=BB28_84 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	testq	%rbx, %rbx
	js	.LBB28_94
.LBB28_227:                             # %if.then276
	movq	%rdx, 32(%r14)
	movq	%r14, 40(%rdx)
	jmp	.LBB28_96
.LBB28_95:                              # %if.end278.critedge
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	$0, (%rax)
	movq	%rdx, %r12
.LBB28_96:                              # %if.end278
	movq	%r12, 40(%r14)
	movq	%r14, (%r13)
	movq	%r10, 48(%r14)
	jmp	.LBB28_104
.LBB28_166:                             # %if.else325.thread
	movq	%r14, 48(%r14)
	jmp	.LBB28_167
.LBB28_101:                             # %if.then248
	movq	%r10, 32(%r14)
	xorq	%rax, %rax
	testq	%r10, %r10
	movq	%r14, 40(%r10)
	movq	%r14, 48(%r14)
	movabsq	$0, %rbx
	je	.LBB28_110
# BB#102:
	movq	%r10, %rax
	.align	16, 0x90
.LBB28_103:                             # %for.body254
                                        # =>This Inner Loop Header: Depth=1
	movq	%r14, 48(%rax)
	movq	32(%rax), %rax
	testq	%rax, %rax
	jne	.LBB28_103
.LBB28_104:                             # %if.end285
	testq	%r10, %r10
	je	.LBB28_105
# BB#106:                               # %if.end285
	movabsq	$1, %rax
	jmp	.LBB28_107
.LBB28_105:
	movabsq	$0, %rax
.LBB28_107:                             # %if.end285
	andq	%rax, %r9
	cmpq	$1, %r9
	jne	.LBB28_109
# BB#108:                               # %land.lhs.true291
	movq	(%r10), %rcx
	movzbl	(%rcx), %eax
	cmpq	$61, %rax
	movq	$1, %rax
	jne	.LBB28_109
# BB#116:                               # %land.lhs.true297
	movzbl	(%r15), %edx
	cmpq	$61, %rdx
	movq	%r10, %rbx
	je	.LBB28_110
# BB#117:                               # %if.then302
	movl	8(%rcx), %r12d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r12
	jne	.LBB28_119
# BB#118:                               # %if.then302
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB28_129
.LBB28_119:                             # %cond.false312
	movq	$7, %rcx
	movq	%r12, %rbx
	shrq	%cl, %rbx
	xorq	%r12, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	je	.LBB28_123
# BB#120:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB28_122:                             # %for.body.i739
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB28_128
# BB#121:                               # %for.cond.i735
                                        #   in Loop: Header=BB28_122 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB28_122
.LBB28_123:                             # %if.then4.i741
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_125
# BB#124:                               # %if.then5.i743
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB28_126
.LBB28_109:
	movq	%r10, %rbx
.LBB28_110:                             # %if.else325
	movzbl	(%r15), %ecx
	cmpq	$61, %rcx
	jne	.LBB28_167
# BB#111:                               # %if.else325
	testq	%rax, %rax
	je	.LBB28_167
# BB#112:                               # %land.lhs.true332
	movl	8(%r15), %r12d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r12
	jne	.LBB28_114
# BB#113:                               # %land.lhs.true332
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB28_142
.LBB28_114:                             # %cond.false341
	movq	$7, %rcx
	movq	%r12, %r13
	shrq	%cl, %r13
	xorq	%r12, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	je	.LBB28_136
# BB#115:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB28_135:                             # %for.body.i783
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB28_141
# BB#134:                               # %for.cond.i779
                                        #   in Loop: Header=BB28_135 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB28_135
.LBB28_136:                             # %if.then4.i785
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_138
# BB#137:                               # %if.then5.i787
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB28_139
.LBB28_138:                             # %if.else.i790
	movq	$32, %rdi
	callq	xmalloc
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	movq	reg_hash(,%r13,8), %rcx
.LBB28_139:                             # %if.end6.i799
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%esi, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB28_141
# BB#140:                               # %if.then11.i800
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB28_141:                             # %get_cse_reg_info.exit802
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB28_142:                             # %cond.end346
	movslq	20(%rax), %rdi
	movq	qty_table(%rip), %rsi
	leaq	(%rdi,%rdi,2), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	cmpq	$0, (%rsi,%rdx)
	jne	.LBB28_167
# BB#143:                               # %land.lhs.true353
	movzbl	77(%r14), %ecx
	testq	%rcx, %rcx
	je	.LBB28_144
.LBB28_167:                             # %if.else401
	movzbl	(%r15), %eax
	cmpq	$61, %rax
	jne	.LBB28_207
# BB#168:                               # %land.lhs.true406
	movl	8(%r15), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB28_170
# BB#169:                               # %land.lhs.true406
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB28_180
.LBB28_170:                             # %cond.false415
	movq	$7, %rcx
	movq	%rbx, %r12
	shrq	%cl, %r12
	xorq	%rbx, %r12
	andq	$127, %r12
	movq	reg_hash(,%r12,8), %rcx
	testq	%rcx, %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	je	.LBB28_174
# BB#171:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB28_173:                             # %for.body.i867
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB28_179
# BB#172:                               # %for.cond.i863
                                        #   in Loop: Header=BB28_173 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB28_173
.LBB28_174:                             # %if.then4.i869
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_176
# BB#175:                               # %if.then5.i871
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB28_177
.LBB28_176:                             # %if.else.i874
	movq	$32, %rdi
	movq	%rsi, %r13
	callq	xmalloc
	movq	%r13, %rsi
	movq	reg_hash(,%r12,8), %rcx
.LBB28_177:                             # %if.end6.i883
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%esi, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB28_179
# BB#178:                               # %if.then11.i884
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB28_179:                             # %get_cse_reg_info.exit886
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB28_180:                             # %cond.end420
	movslq	20(%rax), %rsi
	movq	qty_table(%rip), %rdx
	leaq	(%rsi,%rsi,2), %rdi
	movq	$4, %rcx
	shlq	%cl, %rdi
	cmpq	$0, (%rdx,%rdi)
	je	.LBB28_207
# BB#181:                               # %land.lhs.true427
	movl	8(%r15), %r13d
	movzbl	2(%r15), %r12d
	cmpq	%rbx, %r13
	jne	.LBB28_183
# BB#182:                               # %land.lhs.true427
	testq	%rax, %rax
	jne	.LBB28_193
.LBB28_183:                             # %cond.false439
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB28_187
# BB#184:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB28_186:                             # %for.body.i901
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB28_192
# BB#185:                               # %for.cond.i897
                                        #   in Loop: Header=BB28_186 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB28_186
.LBB28_187:                             # %if.then4.i903
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_189
# BB#188:                               # %if.then5.i905
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB28_190
.LBB28_144:                             # %for.cond358.preheader
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	jmp	.LBB28_145
.LBB28_165:                             # %for.inc398
                                        #   in Loop: Header=BB28_145 Depth=1
	movq	32(%rbx), %rbx
.LBB28_145:                             # %for.cond358.preheader
                                        # =>This Inner Loop Header: Depth=1
	testq	%rbx, %rbx
	je	.LBB28_207
# BB#146:                               # %for.body361
                                        #   in Loop: Header=BB28_145 Depth=1
	movzbl	77(%rbx), %ecx
	testq	%rcx, %rcx
	je	.LBB28_165
# BB#147:                               # %land.lhs.true365
                                        #   in Loop: Header=BB28_145 Depth=1
	movq	(%rbx), %r13
	movzbl	(%r13), %ecx
	cmpq	$61, %rcx
	je	.LBB28_165
# BB#148:                               # %if.then371
	movl	8(%r15), %r8d
	cmpq	%r12, %r8
	jne	.LBB28_150
# BB#149:                               # %if.then371
	testq	%rax, %rax
	jne	.LBB28_160
.LBB28_150:                             # %cond.false380
	movq	$7, %rcx
	movq	%r8, %r12
	shrq	%cl, %r12
	xorq	%r8, %r12
	andq	$127, %r12
	movq	reg_hash(,%r12,8), %rcx
	testq	%rcx, %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	je	.LBB28_154
# BB#151:
	movq	%rcx, %rax
.LBB28_153:                             # %for.body.i817
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r8, %rdx
	je	.LBB28_159
# BB#152:                               # %for.cond.i813
                                        #   in Loop: Header=BB28_153 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB28_153
.LBB28_154:                             # %if.then4.i819
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_156
# BB#155:                               # %if.then5.i821
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB28_157
.LBB28_189:                             # %if.else.i908
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB28_190:                             # %if.end6.i917
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB28_192
# BB#191:                               # %if.then11.i918
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB28_192:                             # %get_cse_reg_info.exit920
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %esi
	movq	qty_table(%rip), %rdx
	movq	%r13, %rbx
.LBB28_193:                             # %cond.end444
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	leaq	(%rdi,%rdi,2), %rdi
	movq	$4, %rcx
	shlq	%cl, %rdi
	movl	36(%rdx,%rdi), %ecx
	cmpq	%rcx, %r12
	jne	.LBB28_207
# BB#194:                               # %if.then452
	movl	8(%r15), %r13d
	movq	this_insn(%rip), %r12
	cmpq	%rbx, %r13
	jne	.LBB28_196
# BB#195:                               # %if.then452
	testq	%rax, %rax
	jne	.LBB28_206
.LBB28_196:                             # %cond.false461
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB28_200
# BB#197:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB28_199:                             # %for.body.i935
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB28_205
# BB#198:                               # %for.cond.i931
                                        #   in Loop: Header=BB28_199 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB28_199
.LBB28_200:                             # %if.then4.i937
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB28_202
# BB#201:                               # %if.then5.i939
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB28_203
.LBB28_202:                             # %if.else.i942
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB28_203:                             # %if.end6.i951
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%edx, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB28_205
# BB#204:                               # %if.then11.i952
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB28_205:                             # %get_cse_reg_info.exit954
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %esi
	movq	qty_table(%rip), %rdx
.LBB28_206:                             # %cond.end466
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	leaq	(%rsi,%rsi,2), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movq	%r12, 8(%rdx,%rax)
	jmp	.LBB28_207
.LBB28_125:                             # %if.else.i746
	movq	$32, %rdi
	movq	%rsi, %r13
	callq	xmalloc
	movq	%r13, %rsi
	movq	reg_hash(,%rbx,8), %rcx
.LBB28_126:                             # %if.end6.i755
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%esi, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB28_128
# BB#127:                               # %if.then11.i756
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB28_128:                             # %get_cse_reg_info.exit758
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB28_129:                             # %cond.end318
	movslq	20(%rax), %rax
	movq	qty_table(%rip), %rbx
	leaq	(%rax,%rax,2), %r12
	movq	$4, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movl	36(%rbx,%rax), %r13d
	movq	%r13, %rdi
	movq	%r15, %rsi
	callq	gen_lowpart_common
	testq	%rax, %rax
	jne	.LBB28_133
# BB#130:                               # %if.else.i764
	movzbl	(%r15), %ecx
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jne	.LBB28_133
# BB#131:                               # %if.then1.i
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	adjust_address_1
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	8(%rax), %rsi
	movq	%r13, %rdi
	callq	memory_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	je	.LBB28_133
# BB#132:                               # %if.then1.i
	movq	16(%rsp), %rax          # 8-byte Reload
.LBB28_133:                             # %gen_lowpart_if_possible.exit
	movq	$4, %rcx
	shlq	%cl, %r12
	movq	%rax, (%rbx,%r12)
	movq	this_insn(%rip), %rax
	movq	%rax, 8(%rbx,%r12)
.LBB28_207:                             # %if.end474
	movzbl	(%r15), %eax
	cmpq	$58, %rax
	jne	.LBB28_225
# BB#208:                               # %if.then479
	movq	%r15, %rdi
	callq	get_related_value
	movq	%rax, %r15
	testq	%r15, %r15
	je	.LBB28_225
# BB#209:                               # %if.then483
	movzbl	do_not_record(%rip), %eax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movzbl	hash_arg_in_memory(%rip), %r13d
	movq	%r15, %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	canon_hash
	movq	%rax, %r12
	andq	$31, %r12
	movq	table(,%r12,8), %rbx
	movb	%r13b, hash_arg_in_memory(%rip)
	movq	16(%rsp), %rax          # 8-byte Reload
	movb	%al, do_not_record(%rip)
	testq	%rbx, %rbx
	je	.LBB28_219
# BB#210:
	movq	24(%rsp), %r13          # 8-byte Reload
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r13
	.align	16, 0x90
.LBB28_211:                             # %for.body.i959
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%rbx), %eax
	cmpq	%r13, %rax
	jne	.LBB28_217
# BB#212:                               # %land.lhs.true.i963
                                        #   in Loop: Header=BB28_211 Depth=1
	movq	(%rbx), %rsi
	movzbl	(%r15), %eax
	cmpq	%r15, %rsi
	jne	.LBB28_214
# BB#213:                               # %land.lhs.true.i963
                                        #   in Loop: Header=BB28_211 Depth=1
	cmpq	$61, %rax
	je	.LBB28_218
.LBB28_214:                             # %lor.lhs.false.i
                                        #   in Loop: Header=BB28_211 Depth=1
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB28_216
# BB#215:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB28_211 Depth=1
	movabsq	$1, %rdx
.LBB28_216:                             # %lor.lhs.false.i
                                        #   in Loop: Header=BB28_211 Depth=1
	movq	%r15, %rdi
	callq	exp_equiv_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB28_218
.LBB28_217:                             # %for.inc.i
                                        #   in Loop: Header=BB28_211 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB28_211
	jmp	.LBB28_219
.LBB28_218:                             # %lookup.exit
	testq	%rbx, %rbx
	jne	.LBB28_220
.LBB28_219:                             # %if.then489
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	movq	%r12, %rdx
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	insert
	movq	%rax, %rbx
.LBB28_220:                             # %if.end491
	movq	56(%rbx), %rax
	testq	%rax, %rax
	movq	%rbx, %rcx
	jne	.LBB28_222
# BB#221:                               # %if.then495
	movq	%rbx, 56(%rbx)
	movq	%rbx, %rax
	movq	%rbx, %rcx
	jmp	.LBB28_222
	.align	16, 0x90
.LBB28_223:                             # %while.cond.while.cond_crit_edge
                                        #   in Loop: Header=BB28_222 Depth=1
	movq	56(%rdx), %rax
	movq	%rdx, %rcx
.LBB28_222:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdx
	cmpq	%rbx, %rdx
	jne	.LBB28_223
# BB#224:                               # %while.end
	movq	%rbx, 56(%r14)
	movq	%r14, 56(%rcx)
.LBB28_225:                             # %if.end506
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB28_156:                             # %if.else.i824
	movq	$32, %rdi
	movq	%r8, %r13
	callq	xmalloc
	movq	%r13, %r8
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	movq	reg_hash(,%r12,8), %rcx
.LBB28_157:                             # %if.end6.i833
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%esi, 28(%rax)
	movl	%r8d, 20(%rax)
	movl	%r8d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB28_159
# BB#158:                               # %if.then11.i834
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB28_159:                             # %get_cse_reg_info.exit836
	movl	%r8d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %edi
	movq	qty_table(%rip), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	(%rbx), %r13
.LBB28_160:                             # %cond.end385
	movq	$32, %rcx
	movzbl	2(%r15), %r12d
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	%rdi, %rbx
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	gen_lowpart_common
	testq	%rax, %rax
	jne	.LBB28_164
# BB#161:                               # %if.else.i842
	movzbl	(%r13), %ecx
	xorq	%rax, %rax
	cmpq	$66, %rcx
	jne	.LBB28_164
# BB#162:                               # %if.then1.i849
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%r13, %rdi
	movq	%r12, %rsi
	callq	adjust_address_1
	movq	%rax, %r13
	movq	8(%r13), %rsi
	movq	%r12, %rdi
	callq	memory_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	je	.LBB28_164
# BB#163:                               # %if.then1.i849
	movq	%r13, %rax
.LBB28_164:                             # %gen_lowpart_if_possible.exit852
	leaq	(%rbx,%rbx,2), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx,%rdx)
	movq	this_insn(%rip), %rax
	movq	%rax, 8(%rcx,%rdx)
	jmp	.LBB28_207
.LBB28_226:                             # %if.then
	movabsq	$.L.str4, %rax
	movabsq	$.L__FUNCTION__.insert, %rcx
	movq	$1565, %rsi             # imm = 0x61D
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp416:
	.size	insert, .Ltmp416-insert
	.cfi_endproc

	.align	16, 0x90
	.type	invalidate_from_clobbers,@function
invalidate_from_clobbers:               # @invalidate_from_clobbers
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp421:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp422:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp423:
	.cfi_def_cfa_offset 32
.Ltmp424:
	.cfi_offset %rbx, -32
.Ltmp425:
	.cfi_offset %r14, -24
.Ltmp426:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movzbl	(%r14), %eax
	cmpq	$39, %rax
	jne	.LBB29_1
# BB#10:                                # %if.then32
	movq	8(%r14), %rax
	movslq	(%rax), %rbx
	testq	%rbx, %rbx
	jle	.LBB29_21
# BB#11:                                # %for.body.lr.ph
	decq	%rbx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	jmp	.LBB29_12
	.align	16, 0x90
.LBB29_18:                              # %for.cond.backedge.for.body_crit_edge
                                        #   in Loop: Header=BB29_12 Depth=1
	movq	8(%r14), %rax
	decq	%rbx
.LBB29_12:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax,%rbx,8), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB29_17
# BB#13:                                # %if.then43
                                        #   in Loop: Header=BB29_12 Depth=1
	movq	8(%rax), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB29_16
# BB#14:                                # %if.then43
                                        #   in Loop: Header=BB29_12 Depth=1
	addq	$-61, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	ja	.LBB29_17
# BB#15:                                # %if.then43
                                        #   in Loop: Header=BB29_12 Depth=1
	jmpq	*.LJTI29_0(,%rax,8)
.LBB29_19:                              # %if.then59
                                        #   in Loop: Header=BB29_12 Depth=1
	xorq	%rsi, %rsi
	callq	invalidate
	jmp	.LBB29_17
	.align	16, 0x90
.LBB29_16:                              # %if.then43
                                        #   in Loop: Header=BB29_12 Depth=1
	cmpq	$133, %rax
	jne	.LBB29_17
.LBB29_20:                              # %if.then68
                                        #   in Loop: Header=BB29_12 Depth=1
	movq	8(%rdi), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	callq	invalidate
	.align	16, 0x90
.LBB29_17:                              # %for.cond.backedge
                                        #   in Loop: Header=BB29_12 Depth=1
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB29_18
	jmp	.LBB29_21
.LBB29_1:                               # %entry
	cmpq	$49, %rax
	jne	.LBB29_21
# BB#2:                                 # %if.then
	movq	8(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB29_21
# BB#3:                                 # %if.then1
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB29_8
# BB#4:                                 # %if.then1
	addq	$-61, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$5, %rcx
	ja	.LBB29_21
# BB#5:                                 # %if.then1
	jmpq	*.LJTI29_1(,%rcx,8)
.LBB29_6:                               # %if.then12
	xorq	%rsi, %rsi
	jmp	.LBB29_7
.LBB29_8:                               # %if.then1
	cmpq	$133, %rax
	jne	.LBB29_21
.LBB29_9:                               # %if.then20
	movq	8(%rdi), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
.LBB29_7:                               # %if.then12
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	invalidate  # TAILCALL
.LBB29_21:                              # %if.end79
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp427:
	.size	invalidate_from_clobbers, .Ltmp427-invalidate_from_clobbers
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI29_0:
	.quad	.LBB29_19
	.quad	.LBB29_17
	.quad	.LBB29_19
	.quad	.LBB29_20
	.quad	.LBB29_17
	.quad	.LBB29_19
.LJTI29_1:
	.quad	.LBB29_6
	.quad	.LBB29_21
	.quad	.LBB29_6
	.quad	.LBB29_9
	.quad	.LBB29_21
	.quad	.LBB29_6

	.text
	.align	16, 0x90
	.type	invalidate_for_call,@function
invalidate_for_call:                    # @invalidate_for_call
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp434:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp435:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp436:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp437:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp438:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp439:
	.cfi_def_cfa_offset 64
.Ltmp440:
	.cfi_offset %rbx, -48
.Ltmp441:
	.cfi_offset %r12, -40
.Ltmp442:
	.cfi_offset %r13, -32
.Ltmp443:
	.cfi_offset %r14, -24
.Ltmp444:
	.cfi_offset %r15, -16
	xorq	%r13, %r13
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	xorq	%rdx, %rdx
	.align	16, 0x90
.LBB30_1:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_8 Depth 2
                                        #     Child Loop BB30_26 Depth 2
                                        #     Child Loop BB30_38 Depth 2
                                        #     Child Loop BB30_49 Depth 2
	movq	regs_invalidated_by_call(%rip), %rax
	movq	$1, %r12
	movq	%r13, %rcx
	shlq	%cl, %r12
	testq	%r12, %rax
	je	.LBB30_58
# BB#2:                                 # %if.then
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movl	cached_regno(%rip), %esi
	movq	%r13, %r15
	andq	%r14, %r15
	cmpq	%r15, %rsi
	jne	.LBB30_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB30_13
.LBB30_4:                               # %cond.false.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB30_5
	.align	16, 0x90
.LBB30_8:                               # %for.body.i290
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB30_12
# BB#7:                                 # %for.cond.i286
                                        #   in Loop: Header=BB30_8 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB30_8
.LBB30_5:                               # %if.then4.i292
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB30_6
# BB#9:                                 # %if.else.i297
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB30_10
.LBB30_6:                               # %if.then5.i294
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB30_10:                              # %if.end6.i306
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB30_12
# BB#11:                                # %if.then11.i307
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB30_12:                              # %get_cse_reg_info.exit309
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	%r13, %rsi
.LBB30_13:                              # %cond.end.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	20(%rax), %edi
	movq	$32, %rcx
	movq	%rdi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%r15, %rdi
	je	.LBB30_32
# BB#14:                                # %if.end.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	reg_eqv_table(%rip), %rdi
	movl	(%rdi,%r13,8), %r8d
	movq	qty_table(%rip), %rsi
	movslq	4(%rdi,%r13,8), %rbx
	movq	$32, %rcx
	movq	%r8, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%r14, %r8
	jne	.LBB30_15
# BB#16:                                # %if.else.i
                                        #   in Loop: Header=BB30_1 Depth=1
	leaq	(%rdx,%rdx,2), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movl	%ebx, 32(%rsi,%rax)
	jmp	.LBB30_17
.LBB30_15:                              # %if.then7.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%ebx, 4(%rdi,%rax,8)
.LBB30_17:                              # %if.end11.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rbx, %rax
	andq	%r14, %rax
	cmpq	%r14, %rax
	jne	.LBB30_18
# BB#19:                                # %if.else17.i
                                        #   in Loop: Header=BB30_1 Depth=1
	leaq	(%rdx,%rdx,2), %rax
	movq	$4, %rcx
	shlq	%cl, %rax
	movl	%r8d, 28(%rsi,%rax)
	jmp	.LBB30_20
.LBB30_18:                              # %if.then13.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%r8d, (%rdi,%rbx,8)
.LBB30_20:                              # %if.end18.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	cached_regno(%rip), %eax
	cmpq	%r15, %rax
	jne	.LBB30_22
# BB#21:                                # %if.end18.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB30_31
.LBB30_22:                              # %cond.false23.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB30_23
	.align	16, 0x90
.LBB30_26:                              # %for.body.i
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB30_30
# BB#25:                                # %for.cond.i
                                        #   in Loop: Header=BB30_26 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB30_26
.LBB30_23:                              # %if.then4.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB30_24
# BB#27:                                # %if.else.i197
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB30_28
.LBB30_24:                              # %if.then5.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB30_28:                              # %if.end6.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB30_30
# BB#29:                                # %if.then11.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB30_30:                              # %get_cse_reg_info.exit
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB30_31:                              # %cond.end25.i
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%r13d, 20(%rax)
	movl	cached_regno(%rip), %esi
	movq	cached_cse_reg_info(%rip), %rax
.LBB30_32:                              # %delete_reg_equiv.exit
                                        #   in Loop: Header=BB30_1 Depth=1
	andq	%r14, %rsi
	cmpq	%rsi, %r15
	jne	.LBB30_34
# BB#33:                                # %delete_reg_equiv.exit
                                        #   in Loop: Header=BB30_1 Depth=1
	testq	%rax, %rax
	jne	.LBB30_43
.LBB30_34:                              # %cond.false
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB30_35
	.align	16, 0x90
.LBB30_38:                              # %for.body.i213
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB30_42
# BB#37:                                # %for.cond.i209
                                        #   in Loop: Header=BB30_38 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB30_38
.LBB30_35:                              # %if.then4.i215
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB30_36
# BB#39:                                # %if.else.i220
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB30_40
.LBB30_36:                              # %if.then5.i217
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB30_40:                              # %if.end6.i229
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB30_42
# BB#41:                                # %if.then11.i230
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB30_42:                              # %get_cse_reg_info.exit232
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB30_43:                              # %cond.end
                                        #   in Loop: Header=BB30_1 Depth=1
	movslq	24(%rax), %rcx
	testq	%rcx, %rcx
	js	.LBB30_55
# BB#44:                                # %if.then4
                                        #   in Loop: Header=BB30_1 Depth=1
	testq	%rax, %rax
	jne	.LBB30_54
# BB#45:                                # %cond.false9
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$7, %rcx
	movq	%r13, %rbx
	shrq	%cl, %rbx
	xorq	%r13, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB30_46
	.align	16, 0x90
.LBB30_49:                              # %for.body.i247
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB30_53
# BB#48:                                # %for.cond.i243
                                        #   in Loop: Header=BB30_49 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB30_49
.LBB30_46:                              # %if.then4.i249
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB30_47
# BB#50:                                # %if.else.i254
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB30_51
.LBB30_47:                              # %if.then5.i251
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB30_51:                              # %if.end6.i263
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB30_53
# BB#52:                                # %if.then11.i264
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB30_53:                              # %get_cse_reg_info.exit266
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	24(%rax), %ecx
.LBB30_54:                              # %cond.end11
                                        #   in Loop: Header=BB30_1 Depth=1
	incq	%rcx
	movl	%ecx, 24(%rax)
.LBB30_55:                              # %if.end
                                        #   in Loop: Header=BB30_1 Depth=1
	movq	hard_regs_in_table(%rip), %rax
	testq	%r12, %rax
	movabsq	$0, %rax
	movq	8(%rsp), %rdx           # 8-byte Reload
	je	.LBB30_57
# BB#56:                                # %if.end
                                        #   in Loop: Header=BB30_1 Depth=1
	movabsq	$1, %rax
.LBB30_57:                              # %if.end
                                        #   in Loop: Header=BB30_1 Depth=1
	orq	%rax, %rdx
.LBB30_58:                              # %for.inc
                                        #   in Loop: Header=BB30_1 Depth=1
	incq	%r13
	cmpq	$53, %r13
	jne	.LBB30_1
# BB#59:                                # %for.end
	testq	%r14, %rdx
	je	.LBB30_104
# BB#60:
	xorq	%r11, %r11
	movabsq	$4294967288, %r10       # imm = 0xFFFFFFF8
	movabsq	$0, %r8
	movabsq	$1, %r9
	.align	16, 0x90
.LBB30_61:                              # %for.body25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_62 Depth 2
                                        #       Child Loop BB30_81 Depth 3
                                        #       Child Loop BB30_86 Depth 3
                                        #       Child Loop BB30_93 Depth 3
                                        #       Child Loop BB30_98 Depth 3
	movq	table(,%r11,8), %r15
	jmp	.LBB30_62
.LBB30_102:                             # %if.end54.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%r12)
	movq	%r12, free_element_chain(%rip)
	.align	16, 0x90
.LBB30_62:                              # %for.body25
                                        #   Parent Loop BB30_61 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_81 Depth 3
                                        #       Child Loop BB30_86 Depth 3
                                        #       Child Loop BB30_93 Depth 3
                                        #       Child Loop BB30_98 Depth 3
	testq	%r15, %r15
	je	.LBB30_103
# BB#63:                                # %for.body28
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%r15, %r12
	movq	(%r12), %rcx
	movl	(%rcx), %eax
	movq	16(%r12), %r15
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB30_62
# BB#64:                                # %lor.lhs.false
                                        #   in Loop: Header=BB30_62 Depth=2
	movl	8(%rcx), %esi
	cmpq	$52, %rsi
	ja	.LBB30_62
# BB#65:                                # %if.end36
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%rsi, %rdx
	andq	%r10, %rdx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$8, %rdx
	je	.LBB30_69
# BB#66:                                # %if.end36
                                        #   in Loop: Header=BB30_62 Depth=2
	leaq	-21(%rsi), %rcx
	andq	%r14, %rcx
	cmpq	$8, %rcx
	jb	.LBB30_69
# BB#67:                                # %if.end36
                                        #   in Loop: Header=BB30_62 Depth=2
	leaq	-45(%rsi), %rcx
	andq	%r14, %rcx
	cmpq	$8, %rcx
	jb	.LBB30_69
# BB#68:                                # %if.end36
                                        #   in Loop: Header=BB30_62 Depth=2
	leaq	-29(%rsi), %rcx
	andq	%r14, %rcx
	cmpq	$7, %rcx
	jbe	.LBB30_69
# BB#73:                                # %cond.false81
                                        #   in Loop: Header=BB30_62 Depth=2
	cmpq	$24, %rax
	jne	.LBB30_74
# BB#76:                                # %cond.true99
                                        #   in Loop: Header=BB30_62 Depth=2
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB30_78
.LBB30_69:                              # %cond.true64
                                        #   in Loop: Header=BB30_62 Depth=2
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB30_78
# BB#70:                                # %lor.rhs
                                        #   in Loop: Header=BB30_62 Depth=2
	cmpq	$6, %rcx
	movq	%r8, %rax
	jne	.LBB30_72
# BB#71:                                # %lor.rhs
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%r9, %rax
.LBB30_72:                              # %lor.rhs
                                        #   in Loop: Header=BB30_62 Depth=2
	incq	%rax
	jmp	.LBB30_78
.LBB30_74:                              # %cond.false81
                                        #   in Loop: Header=BB30_62 Depth=2
	cmpq	$18, %rax
	jne	.LBB30_77
# BB#75:                                # %cond.true88
                                        #   in Loop: Header=BB30_62 Depth=2
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB30_78
.LBB30_77:                              # %cond.false103
                                        #   in Loop: Header=BB30_62 Depth=2
	movl	target_flags(%rip), %edi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
.LBB30_78:                              # %cond.end121
                                        #   in Loop: Header=BB30_62 Depth=2
	addq	%rsi, %rax
	andq	%r14, %rax
	cmpq	%rax, %rsi
	jae	.LBB30_62
# BB#79:                                # %for.body127.lr.ph
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	regs_invalidated_by_call(%rip), %rdx
	movq	%rsi, %rdi
	.align	16, 0x90
.LBB30_81:                              # %for.body127
                                        #   Parent Loop BB30_61 Depth=1
                                        #     Parent Loop BB30_62 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	$1, %rbx
	movq	%rsi, %rcx
	shlq	%cl, %rbx
	testq	%rbx, %rdx
	jne	.LBB30_82
# BB#80:                                # %for.cond124
                                        #   in Loop: Header=BB30_81 Depth=3
	incq	%rdi
	movq	%rdi, %rcx
	andq	%r14, %rcx
	incq	%rsi
	cmpq	%rax, %rcx
	jb	.LBB30_81
	jmp	.LBB30_62
.LBB30_82:                              # %if.end.i269
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	$0, 48(%r12)
	movq	32(%r12), %rax
	movq	40(%r12), %rcx
	testq	%rax, %rax
	je	.LBB30_84
# BB#83:                                # %if.then1.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%rcx, 40(%rax)
.LBB30_84:                              # %if.end3.i
                                        #   in Loop: Header=BB30_62 Depth=2
	testq	%rcx, %rcx
	jne	.LBB30_105
# BB#85:                                # %while.cond.preheader.i
                                        #   in Loop: Header=BB30_62 Depth=2
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB30_87
	.align	16, 0x90
.LBB30_86:                              # %while.body.i
                                        #   Parent Loop BB30_61 Depth=1
                                        #     Parent Loop BB30_62 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB30_86
	jmp	.LBB30_87
.LBB30_105:                             # %if.then5.i270
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%rax, 32(%rcx)
.LBB30_87:                              # %if.end10.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	24(%r12), %rax
	testq	%r15, %r15
	je	.LBB30_89
# BB#88:                                # %if.then14.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%rax, 24(%r15)
.LBB30_89:                              # %if.end16.i
                                        #   in Loop: Header=BB30_62 Depth=2
	testq	%rax, %rax
	jne	.LBB30_90
# BB#91:                                # %if.else20.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	table(,%r11,8), %rax
	cmpq	%r12, %rax
	movq	$-256, %rax
	jne	.LBB30_93
# BB#92:                                # %if.then22.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%r15, table(,%r11,8)
	jmp	.LBB30_96
	.align	16, 0x90
.LBB30_93:                              # %for.body.i273
                                        #   Parent Loop BB30_61 Depth=1
                                        #     Parent Loop BB30_62 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	table+256(%rax), %rcx
	cmpq	%r12, %rcx
	jne	.LBB30_95
# BB#94:                                # %if.then30.i
                                        #   in Loop: Header=BB30_93 Depth=3
	movq	%r15, table+256(%rax)
.LBB30_95:                              # %for.inc.i
                                        #   in Loop: Header=BB30_93 Depth=3
	addq	$8, %rax
	jne	.LBB30_93
	jmp	.LBB30_96
.LBB30_90:                              # %if.then18.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%r15, 16(%rax)
.LBB30_96:                              # %if.end35.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	56(%r12), %rax
	testq	%rax, %rax
	je	.LBB30_102
# BB#97:                                # %if.end35.i
                                        #   in Loop: Header=BB30_62 Depth=2
	cmpq	%r12, %rax
	movq	%rax, %rdx
	je	.LBB30_102
	.align	16, 0x90
.LBB30_98:                              # %while.cond41.i
                                        #   Parent Loop BB30_61 Depth=1
                                        #     Parent Loop BB30_62 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%r12, %rdx
	jne	.LBB30_98
# BB#99:                                # %while.end46.i
                                        #   in Loop: Header=BB30_62 Depth=2
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB30_101
# BB#100:                               # %while.end46.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%rax, %rdx
.LBB30_101:                             # %while.end46.i
                                        #   in Loop: Header=BB30_62 Depth=2
	movq	%rdx, 56(%rcx)
	jmp	.LBB30_102
	.align	16, 0x90
.LBB30_103:                             # %for.inc139
                                        #   in Loop: Header=BB30_61 Depth=1
	incq	%r11
	cmpq	$32, %r11
	jne	.LBB30_61
.LBB30_104:                             # %if.end142
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp445:
	.size	invalidate_for_call, .Ltmp445-invalidate_for_call
	.cfi_endproc

	.align	16, 0x90
	.type	mention_regs,@function
mention_regs:                           # @mention_regs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp452:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp453:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp454:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp455:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp456:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp457:
	.cfi_def_cfa_offset 80
.Ltmp458:
	.cfi_offset %rbx, -48
.Ltmp459:
	.cfi_offset %r12, -40
.Ltmp460:
	.cfi_offset %r13, -32
.Ltmp461:
	.cfi_offset %r14, -24
.Ltmp462:
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movq	%r15, 24(%rsp)          # 8-byte Spill
	xorq	%r12, %r12
	testq	%r15, %r15
	je	.LBB31_249
# BB#1:                                 # %if.end
	movl	(%r15), %eax
	movq	%rax, %r14
	andq	$65535, %r14            # imm = 0xFFFF
	cmpq	$74, %r14
	je	.LBB31_251
# BB#2:                                 # %if.end
	cmpq	$63, %r14
	jne	.LBB31_3
# BB#104:                               # %land.lhs.true124
	movq	8(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB31_250
# BB#105:                               # %land.lhs.true131
	movl	8(%rax), %edi
	cmpq	$53, %rdi
	jb	.LBB31_250
# BB#106:                               # %if.then140
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rdi
	jne	.LBB31_108
# BB#107:                               # %if.then140
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB31_118
.LBB31_108:                             # %cond.false153
	movq	$7, %rcx
	movq	%rdi, %rbx
	shrq	%cl, %rbx
	xorq	%rdi, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_112
# BB#109:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB31_111:                             # %for.body.i656
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB31_117
# BB#110:                               # %for.cond.i652
                                        #   in Loop: Header=BB31_111 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_111
.LBB31_112:                             # %if.then4.i658
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_114
# BB#113:                               # %if.then5.i660
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_115
.LBB31_3:                               # %if.end
	cmpq	$61, %r14
	jne	.LBB31_250
# BB#4:                                 # %if.then2
	movl	8(%r15), %r15d
	cmpq	$52, %r15
	movq	$1, %r13
	ja	.LBB31_19
# BB#5:                                 # %cond.false
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%r15, %rdx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$8, %rdx
	je	.LBB31_9
# BB#6:                                 # %cond.false
	leaq	-21(%r15), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB31_9
# BB#7:                                 # %cond.false
	leaq	-45(%r15), %rdx
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB31_9
# BB#8:                                 # %cond.false
	leaq	-29(%r15), %rdx
	andq	%rcx, %rdx
	cmpq	$7, %rdx
	jbe	.LBB31_9
# BB#14:                                # %cond.false28
	cmpq	$24, %rax
	jne	.LBB31_15
# BB#17:                                # %cond.true40
	movzbl	target_flags+3(%rip), %r13d
	andq	$2, %r13
	xorq	$6, %r13
	jmp	.LBB31_19
.LBB31_250:                             # %lor.lhs.false239
	movzbl	rtx_class(%r14), %eax
	xorq	%r12, %r12
	cmpq	$60, %rax
	jne	.LBB31_287
.LBB31_251:                             # %if.then245
	movq	8(%r15), %rdi
	movzbl	(%rdi), %eax
	xorq	%r12, %r12
	cmpq	$61, %rax
	jne	.LBB31_252
# BB#253:                               # %land.lhs.true253
	movl	8(%rdi), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB31_256
# BB#254:                               # %land.lhs.true253
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_256
# BB#255:
	movq	%r15, %r13
	jmp	.LBB31_266
.LBB31_252:
	movq	%r15, %r13
	jmp	.LBB31_269
.LBB31_256:                             # %cond.false265
	movq	$7, %rcx
	movq	%rbx, %r13
	shrq	%cl, %r13
	xorq	%rbx, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_260
# BB#257:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB31_259:                             # %for.body.i928
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB31_265
# BB#258:                               # %for.cond.i924
                                        #   in Loop: Header=BB31_259 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_259
.LBB31_260:                             # %if.then4.i930
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_262
# BB#261:                               # %if.then5.i932
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_263
.LBB31_9:                               # %cond.true17
	movl	mode_class(,%rax,4), %eax
	cmpq	$5, %rax
	movq	$2, %r13
	je	.LBB31_19
# BB#10:                                # %lor.rhs
	cmpq	$6, %rax
	jne	.LBB31_11
# BB#12:                                # %lor.rhs
	movabsq	$1, %r13
	incq	%r13
	jmp	.LBB31_19
.LBB31_262:                             # %if.else.i935
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r13,8), %rcx
.LBB31_263:                             # %if.end6.i944
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_265
# BB#264:                               # %if.then11.i945
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_265:                             # %get_cse_reg_info.exit947
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	8(%r15), %rdi
	movq	%r15, %r13
	movl	8(%rdi), %ebx
.LBB31_266:                             # %cond.end273
	movl	20(%rax), %eax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rbx
	cmpq	%rbx, %rax
	jne	.LBB31_269
# BB#267:                               # %if.then283
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	xorq	%r12, %r12
	callq	insert_regs
	testq	%r15, %rax
	je	.LBB31_269
# BB#268:                               # %if.then289
	movq	8(%r13), %rdi
	callq	rehash_using_reg
	movq	$1, %r12
.LBB31_269:                             # %if.end294
	movq	%r13, %r15
	movq	16(%r15), %rdi
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB31_287
# BB#270:                               # %land.lhs.true302
	movl	8(%rdi), %ebx
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rbx
	jne	.LBB31_273
# BB#271:                               # %land.lhs.true302
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_273
# BB#272:
	movq	%r15, %r13
	jmp	.LBB31_283
.LBB31_273:                             # %cond.false314
	movq	$7, %rcx
	movq	%rbx, %r13
	shrq	%cl, %r13
	xorq	%rbx, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_277
# BB#274:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB31_276:                             # %for.body.i962
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rbx, %rdx
	je	.LBB31_282
# BB#275:                               # %for.cond.i958
                                        #   in Loop: Header=BB31_276 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_276
.LBB31_277:                             # %if.then4.i964
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_279
# BB#278:                               # %if.then5.i966
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_280
.LBB31_279:                             # %if.else.i969
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r13,8), %rcx
.LBB31_280:                             # %if.end6.i978
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%ebx, 20(%rax)
	movl	%ebx, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_282
# BB#281:                               # %if.then11.i979
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_282:                             # %get_cse_reg_info.exit981
	movl	%ebx, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	16(%r15), %rdi
	movq	%r15, %r13
	movl	8(%rdi), %ebx
.LBB31_283:                             # %cond.end322
	movl	20(%rax), %eax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rbx
	cmpq	%rbx, %rax
	jne	.LBB31_284
# BB#285:                               # %if.then333
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	callq	insert_regs
	testq	%r15, %rax
	movq	%r13, %r15
	je	.LBB31_287
# BB#286:                               # %if.then339
	movq	16(%r15), %rdi
	callq	rehash_using_reg
	movq	$1, %r12
	jmp	.LBB31_287
.LBB31_284:
	movq	%r13, %r15
.LBB31_287:                             # %if.end345
	movq	rtx_format(,%r14,8), %r13
	movzbl	rtx_length(%r14), %r14d
	jmp	.LBB31_288
	.align	16, 0x90
.LBB31_299:                             # %if.then361
                                        #   in Loop: Header=BB31_288 Depth=1
	movq	(%r15,%rbx,8), %rdi
	callq	mention_regs
	orq	%rax, %r12
.LBB31_288:                             # %for.cond352.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_289 Depth 2
                                        #     Child Loop BB31_294 Depth 2
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
.LBB31_289:                             # %for.cond352
                                        #   Parent Loop BB31_288 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r14, %rbx
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB31_249
# BB#290:                               # %for.body355
                                        #   in Loop: Header=BB31_289 Depth=2
	movzbl	-1(%r13,%rbx), %eax
	leaq	-1(%rbx), %r14
	cmpq	$101, %rax
	je	.LBB31_299
# BB#291:                               # %for.body355
                                        #   in Loop: Header=BB31_289 Depth=2
	cmpq	$69, %rax
	jne	.LBB31_289
# BB#292:                               # %for.cond374.preheader
                                        #   in Loop: Header=BB31_288 Depth=1
	movq	(%r15,%rbx,8), %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	jle	.LBB31_288
# BB#293:                               # %for.body380.preheader
                                        #   in Loop: Header=BB31_288 Depth=1
	movq	$1, %r15
.LBB31_294:                             # %for.body380
                                        #   Parent Loop BB31_288 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%r15,8), %rdi
	movq	%r12, 16(%rsp)          # 8-byte Spill
	callq	mention_regs
	movq	%rax, %r12
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	(%rax,%rbx,8), %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	orq	%rcx, %r12
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%r15, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%r15
	cmpq	%rdx, %rsi
	jl	.LBB31_294
# BB#295:                               #   in Loop: Header=BB31_288 Depth=1
	movq	24(%rsp), %r15          # 8-byte Reload
	jmp	.LBB31_288
.LBB31_15:                              # %cond.false28
	cmpq	$18, %rax
	jne	.LBB31_18
# BB#16:                                # %cond.true33
	movl	target_flags(%rip), %r13d
	movq	$25, %rcx
	shrq	%cl, %r13
	andq	$1, %r13
	xorq	$3, %r13
	jmp	.LBB31_19
.LBB31_114:                             # %if.else.i663
	movq	%rdi, %r14
	movq	$32, %rdi
	callq	xmalloc
	movq	%r14, %rdi
	movq	reg_hash(,%rbx,8), %rcx
.LBB31_115:                             # %if.end6.i672
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_117
# BB#116:                               # %if.then11.i673
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_117:                             # %get_cse_reg_info.exit675
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB31_118:                             # %cond.end155
	movslq	28(%rax), %rbx
	testq	%rbx, %rbx
	js	.LBB31_225
# BB#119:                               # %land.lhs.true160
	testq	%rax, %rax
	jne	.LBB31_141
# BB#120:                               # %cond.false166
	movq	$7, %rcx
	movq	%rdi, %rbx
	shrq	%cl, %rbx
	xorq	%rdi, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_125
# BB#121:
	movq	%rcx, %rax
.LBB31_123:                             # %for.body.i690
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB31_124
# BB#122:                               # %for.cond.i686
                                        #   in Loop: Header=BB31_123 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_123
.LBB31_125:                             # %if.then4.i692
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_127
# BB#126:                               # %if.then5.i694
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_128
.LBB31_11:
	movabsq	$0, %r13
	incq	%r13
	jmp	.LBB31_19
.LBB31_18:                              # %cond.false44
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	movq	%rax, %r13
.LBB31_19:                              # %cond.end61
	addq	%r15, %r13
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %r13
	movq	%r13, 16(%rsp)          # 8-byte Spill
	cmpq	%r13, %r15
	jae	.LBB31_249
	.align	16, 0x90
.LBB31_20:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_26 Depth 2
                                        #     Child Loop BB31_38 Depth 2
                                        #     Child Loop BB31_48 Depth 2
                                        #     Child Loop BB31_55 Depth 2
                                        #       Child Loop BB31_56 Depth 3
                                        #         Child Loop BB31_63 Depth 4
                                        #         Child Loop BB31_70 Depth 4
                                        #         Child Loop BB31_75 Depth 4
                                        #     Child Loop BB31_88 Depth 2
                                        #     Child Loop BB31_98 Depth 2
	movl	cached_regno(%rip), %eax
	movq	%r15, %r14
	andq	%rcx, %r14
	cmpq	%rax, %r14
	movq	%rcx, %r12
	jne	.LBB31_22
# BB#21:                                # %for.body
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB31_31
.LBB31_22:                              # %cond.false72
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB31_23
	.align	16, 0x90
.LBB31_26:                              # %for.body.i
                                        #   Parent Loop BB31_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB31_30
# BB#25:                                # %for.cond.i
                                        #   in Loop: Header=BB31_26 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_26
.LBB31_23:                              # %if.then4.i
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB31_24
# BB#27:                                # %if.else.i
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB31_28
.LBB31_24:                              # %if.then5.i
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB31_28:                              # %if.end6.i
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_30
# BB#29:                                # %if.then11.i
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_30:                              # %get_cse_reg_info.exit
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB31_31:                              # %cond.end73
                                        #   in Loop: Header=BB31_20 Depth=1
	movslq	28(%rax), %rbx
	testq	%rbx, %rbx
	js	.LBB31_32
# BB#33:                                # %land.lhs.true77
                                        #   in Loop: Header=BB31_20 Depth=1
	testq	%rax, %rax
	jne	.LBB31_53
# BB#34:                                # %cond.false83
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB31_35
	.align	16, 0x90
.LBB31_38:                              # %for.body.i516
                                        #   Parent Loop BB31_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB31_39
# BB#37:                                # %for.cond.i512
                                        #   in Loop: Header=BB31_38 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_38
.LBB31_35:                              # %if.then4.i518
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB31_36
# BB#40:                                # %if.else.i523
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB31_41
	.align	16, 0x90
.LBB31_32:                              #   in Loop: Header=BB31_20 Depth=1
	movq	%r15, %rcx
	jmp	.LBB31_82
.LBB31_36:                              # %if.then5.i520
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB31_41:                              # %if.end6.i532
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_43
# BB#42:                                # %if.then11.i533
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_43:                              # %cond.end85
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	28(%rax), %ebx
	testq	%rax, %rax
	jne	.LBB31_53
# BB#44:                                # %cond.false93
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%r14, %r13
	movq	$7, %rcx
	movq	%r15, %r14
	shrq	%cl, %r14
	xorq	%r15, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB31_45
	.align	16, 0x90
.LBB31_48:                              # %for.body.i550
                                        #   Parent Loop BB31_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB31_52
# BB#47:                                # %for.cond.i546
                                        #   in Loop: Header=BB31_48 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_48
.LBB31_45:                              # %if.then4.i552
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB31_46
# BB#49:                                # %if.else.i557
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
	jmp	.LBB31_50
.LBB31_39:                              # %cond.end85.thread1109
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	28(%rax), %ebx
	jmp	.LBB31_53
.LBB31_46:                              # %if.then5.i554
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB31_50:                              # %if.end6.i566
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_52
# BB#51:                                # %if.then11.i567
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_52:                              # %get_cse_reg_info.exit569
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%r13, %r14
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	16(%rsp), %r13          # 8-byte Reload
	.align	16, 0x90
.LBB31_53:                              # %cond.end95
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	24(%rax), %ecx
	andq	%r12, %rbx
	cmpq	%rcx, %rbx
	movq	%r15, %rcx
	je	.LBB31_82
# BB#54:                                # %if.then99
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%r14, 24(%rsp)          # 8-byte Spill
	leaq	1(%r15), %rbx
	xorq	%r14, %r14
	.align	16, 0x90
.LBB31_55:                              # %for.body.i571
                                        #   Parent Loop BB31_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_56 Depth 3
                                        #         Child Loop BB31_63 Depth 4
                                        #         Child Loop BB31_70 Depth 4
                                        #         Child Loop BB31_75 Depth 4
	movq	table(,%r14,8), %r13
	jmp	.LBB31_56
.LBB31_79:                              # %if.end54.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%r12)
	movq	%r12, free_element_chain(%rip)
	.align	16, 0x90
.LBB31_56:                              # %for.body.i571
                                        #   Parent Loop BB31_20 Depth=1
                                        #     Parent Loop BB31_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_63 Depth 4
                                        #         Child Loop BB31_70 Depth 4
                                        #         Child Loop BB31_75 Depth 4
	testq	%r13, %r13
	je	.LBB31_80
# BB#57:                                # %for.body2.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	%r13, %r12
	movq	(%r12), %rdx
	movzbl	(%rdx), %eax
	movq	16(%r12), %r13
	cmpq	$61, %rax
	je	.LBB31_56
# BB#58:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB31_56 Depth=3
	xorq	%rcx, %rcx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	refers_to_regno_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB31_56
# BB#59:                                # %if.end.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	$0, 48(%r12)
	movq	32(%r12), %rax
	movq	40(%r12), %rcx
	testq	%rax, %rax
	je	.LBB31_61
# BB#60:                                # %if.then1.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	%rcx, 40(%rax)
.LBB31_61:                              # %if.end3.i
                                        #   in Loop: Header=BB31_56 Depth=3
	testq	%rcx, %rcx
	jne	.LBB31_296
# BB#62:                                # %while.cond.preheader.i
                                        #   in Loop: Header=BB31_56 Depth=3
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB31_64
	.align	16, 0x90
.LBB31_63:                              # %while.body.i
                                        #   Parent Loop BB31_20 Depth=1
                                        #     Parent Loop BB31_55 Depth=2
                                        #       Parent Loop BB31_56 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB31_63
	jmp	.LBB31_64
.LBB31_296:                             # %if.then5.i983
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	%rax, 32(%rcx)
.LBB31_64:                              # %if.end10.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	16(%r12), %rax
	movq	24(%r12), %rcx
	testq	%rax, %rax
	je	.LBB31_66
# BB#65:                                # %if.then14.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	%rcx, 24(%rax)
.LBB31_66:                              # %if.end16.i
                                        #   in Loop: Header=BB31_56 Depth=3
	testq	%rcx, %rcx
	jne	.LBB31_67
# BB#68:                                # %if.else20.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	table(,%r14,8), %rcx
	cmpq	%r12, %rcx
	movq	$-256, %rcx
	jne	.LBB31_70
# BB#69:                                # %if.then22.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	%rax, table(,%r14,8)
	jmp	.LBB31_73
	.align	16, 0x90
.LBB31_70:                              # %for.body.i989
                                        #   Parent Loop BB31_20 Depth=1
                                        #     Parent Loop BB31_55 Depth=2
                                        #       Parent Loop BB31_56 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	table+256(%rcx), %rdx
	cmpq	%r12, %rdx
	jne	.LBB31_72
# BB#71:                                # %if.then30.i
                                        #   in Loop: Header=BB31_70 Depth=4
	movq	%rax, table+256(%rcx)
.LBB31_72:                              # %for.inc.i
                                        #   in Loop: Header=BB31_70 Depth=4
	addq	$8, %rcx
	jne	.LBB31_70
	jmp	.LBB31_73
.LBB31_67:                              # %if.then18.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	%rax, 16(%rcx)
.LBB31_73:                              # %if.end35.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	56(%r12), %rax
	testq	%rax, %rax
	je	.LBB31_79
# BB#74:                                # %if.end35.i
                                        #   in Loop: Header=BB31_56 Depth=3
	cmpq	%r12, %rax
	movq	%rax, %rdx
	je	.LBB31_79
	.align	16, 0x90
.LBB31_75:                              # %while.cond41.i
                                        #   Parent Loop BB31_20 Depth=1
                                        #     Parent Loop BB31_55 Depth=2
                                        #       Parent Loop BB31_56 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%r12, %rdx
	jne	.LBB31_75
# BB#76:                                # %while.end46.i
                                        #   in Loop: Header=BB31_56 Depth=3
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB31_78
# BB#77:                                # %while.end46.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	%rax, %rdx
.LBB31_78:                              # %while.end46.i
                                        #   in Loop: Header=BB31_56 Depth=3
	movq	%rdx, 56(%rcx)
	jmp	.LBB31_79
	.align	16, 0x90
.LBB31_80:                              # %for.inc6.i
                                        #   in Loop: Header=BB31_55 Depth=2
	incq	%r14
	cmpq	$32, %r14
	jne	.LBB31_55
# BB#81:                                # %if.end100.loopexit
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	cached_regno(%rip), %ecx
	movq	cached_cse_reg_info(%rip), %rax
	movq	16(%rsp), %r13          # 8-byte Reload
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	movq	24(%rsp), %r14          # 8-byte Reload
.LBB31_82:                              # %if.end100
                                        #   in Loop: Header=BB31_20 Depth=1
	andq	%r12, %rcx
	cmpq	%rcx, %r14
	jne	.LBB31_84
# BB#83:                                # %if.end100
                                        #   in Loop: Header=BB31_20 Depth=1
	testq	%rax, %rax
	jne	.LBB31_93
.LBB31_84:                              # %cond.false106
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB31_85
	.align	16, 0x90
.LBB31_88:                              # %for.body.i588
                                        #   Parent Loop BB31_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB31_92
# BB#87:                                # %for.cond.i584
                                        #   in Loop: Header=BB31_88 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_88
.LBB31_85:                              # %if.then4.i590
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB31_86
# BB#89:                                # %if.else.i595
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB31_90
.LBB31_86:                              # %if.then5.i592
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB31_90:                              # %if.end6.i604
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_92
# BB#91:                                # %if.then11.i605
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_92:                              # %get_cse_reg_info.exit607
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB31_93:                              # %cond.end108
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%r14, %rsi
	movl	24(%rax), %r14d
	testq	%rax, %rax
	jne	.LBB31_103
# BB#94:                                # %cond.false116
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rcx, %rax
	je	.LBB31_95
	.align	16, 0x90
.LBB31_98:                              # %for.body.i622
                                        #   Parent Loop BB31_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	16(%rax), %edx
	cmpq	%rsi, %rdx
	je	.LBB31_102
# BB#97:                                # %for.cond.i618
                                        #   in Loop: Header=BB31_98 Depth=2
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_98
.LBB31_95:                              # %if.then4.i624
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	jne	.LBB31_96
# BB#99:                                # %if.else.i629
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
	jmp	.LBB31_100
.LBB31_96:                              # %if.then5.i626
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
.LBB31_100:                             # %if.end6.i638
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r12d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_102
# BB#101:                               # %if.then11.i639
                                        #   in Loop: Header=BB31_20 Depth=1
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_102:                             # %get_cse_reg_info.exit641
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB31_103:                             # %cond.end118
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	%r14d, 28(%rax)
	incq	%r15
	movq	%r15, %rax
	andq	%r12, %rax
	movq	%r12, %rcx
	xorq	%r12, %r12
	cmpq	%r13, %rax
	jne	.LBB31_20
	jmp	.LBB31_249
.LBB31_124:                             # %cond.end168.thread1114
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	28(%rax), %ebx
	jmp	.LBB31_141
.LBB31_127:                             # %if.else.i697
	movq	%rdi, %r14
	movq	$32, %rdi
	callq	xmalloc
	movq	%r14, %rdi
	movq	reg_hash(,%rbx,8), %rcx
.LBB31_128:                             # %if.end6.i706
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	movl	%r14d, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_130
# BB#129:                               # %if.then11.i707
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_130:                             # %cond.end168
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	28(%rax), %ebx
	testq	%rax, %rax
	jne	.LBB31_141
# BB#131:                               # %cond.false176
	movq	$7, %rcx
	movq	%rdi, %r13
	shrq	%cl, %r13
	xorq	%rdi, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_135
# BB#132:
	movq	%rcx, %rax
.LBB31_134:                             # %for.body.i724
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB31_140
# BB#133:                               # %for.cond.i720
                                        #   in Loop: Header=BB31_134 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_134
.LBB31_135:                             # %if.then4.i726
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_137
# BB#136:                               # %if.then5.i728
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_138
.LBB31_137:                             # %if.else.i731
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	$32, %rdi
	callq	xmalloc
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	reg_hash(,%r13,8), %rcx
.LBB31_138:                             # %if.end6.i740
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r14d, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_140
# BB#139:                               # %if.then11.i741
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_140:                             # %get_cse_reg_info.exit743
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB31_141:                             # %cond.end178
	movl	24(%rax), %ecx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rbx
	cmpq	%rcx, %rbx
	je	.LBB31_225
# BB#142:                               # %if.then183
	testq	%rax, %rax
	je	.LBB31_144
# BB#143:                               # %cond.end191.thread
	movl	28(%rax), %ebx
	jmp	.LBB31_165
.LBB31_144:                             # %cond.false189
	movq	$7, %rcx
	movq	%rdi, %rbx
	shrq	%cl, %rbx
	xorq	%rdi, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_149
# BB#145:
	movq	%rcx, %rax
.LBB31_147:                             # %for.body.i758
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB31_148
# BB#146:                               # %for.cond.i754
                                        #   in Loop: Header=BB31_147 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_147
.LBB31_149:                             # %if.then4.i760
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_151
# BB#150:                               # %if.then5.i762
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_152
.LBB31_148:                             # %cond.end191.thread1120
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	28(%rax), %ebx
	jmp	.LBB31_165
.LBB31_151:                             # %if.else.i765
	movq	%rdi, %r14
	movq	$32, %rdi
	callq	xmalloc
	movq	%r14, %rdi
	movq	reg_hash(,%rbx,8), %rcx
.LBB31_152:                             # %if.end6.i774
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_154
# BB#153:                               # %if.then11.i775
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_154:                             # %cond.end191
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	28(%rax), %ebx
	testq	%rax, %rax
	jne	.LBB31_165
# BB#155:                               # %cond.false199
	movq	$7, %rcx
	movq	%rdi, %r14
	shrq	%cl, %r14
	xorq	%rdi, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_159
# BB#156:
	movq	%rcx, %rax
.LBB31_158:                             # %for.body.i792
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB31_164
# BB#157:                               # %for.cond.i788
                                        #   in Loop: Header=BB31_158 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_158
.LBB31_159:                             # %if.then4.i794
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_161
# BB#160:                               # %if.then5.i796
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_162
.LBB31_161:                             # %if.else.i799
	movq	%rdi, %r15
	movq	$32, %rdi
	callq	xmalloc
	movq	%r15, %rdi
	movq	24(%rsp), %r15          # 8-byte Reload
	movq	reg_hash(,%r14,8), %rcx
.LBB31_162:                             # %if.end6.i808
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_164
# BB#163:                               # %if.then11.i809
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_164:                             # %get_cse_reg_info.exit811
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB31_165:                             # %cond.end201
	movl	24(%rax), %eax
	decq	%rax
	andq	%r13, %rax
	andq	%r13, %rbx
	cmpq	%rax, %rbx
	jne	.LBB31_166
# BB#193:                               # %if.else
	movzbl	2(%r15), %eax
	movl	16(%r15), %ecx
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movzbl	mode_size(%rax), %eax
	leaq	-1(%rcx,%rax), %rax
	leaq	1(%rdi), %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	xorq	%rcx, %rcx
	andq	%r13, %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	%r13, %r15
	.align	16, 0x90
.LBB31_194:                             # %for.body.i838
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_195 Depth 2
                                        #       Child Loop BB31_207 Depth 3
                                        #       Child Loop BB31_214 Depth 3
                                        #       Child Loop BB31_219 Depth 3
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	table(,%rcx,8), %r13
	jmp	.LBB31_195
.LBB31_223:                             # %if.end54.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%r14)
	movq	%r14, free_element_chain(%rip)
	.align	16, 0x90
.LBB31_195:                             # %for.body.i838
                                        #   Parent Loop BB31_194 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_207 Depth 3
                                        #       Child Loop BB31_214 Depth 3
                                        #       Child Loop BB31_219 Depth 3
	testq	%r13, %r13
	je	.LBB31_224
# BB#196:                               # %for.body5.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	%r13, %r14
	movq	(%r14), %rdx
	movl	(%rdx), %eax
	movq	16(%r14), %r13
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB31_197
# BB#198:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	8(%rdx), %rcx
	movzbl	(%rcx), %esi
	cmpq	$61, %rsi
	jne	.LBB31_202
# BB#199:                               # %lor.lhs.false18.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movl	8(%rcx), %ecx
	cmpq	%rdi, %rcx
	jne	.LBB31_202
# BB#200:                               # %lor.lhs.false26.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movl	16(%rdx), %esi
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %eax
	leaq	-1(%rsi,%rax), %rax
	andq	%r15, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	andq	%r15, %rcx
	cmpq	%rcx, %rax
	jb	.LBB31_195
# BB#201:                               # %lor.lhs.false26.i
                                        #   in Loop: Header=BB31_195 Depth=2
	andq	%r15, %rsi
	movq	(%rsp), %rax            # 8-byte Reload
	cmpq	%rax, %rsi
	jbe	.LBB31_202
	jmp	.LBB31_195
.LBB31_197:                             # %for.body5.i
                                        #   in Loop: Header=BB31_195 Depth=2
	cmpq	$61, %rcx
	je	.LBB31_195
.LBB31_202:                             # %land.lhs.true45.i
                                        #   in Loop: Header=BB31_195 Depth=2
	xorq	%rcx, %rcx
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	refers_to_regno_p
	movq	%rbx, %rdi
	testq	%r15, %rax
	je	.LBB31_195
# BB#203:                               # %if.end.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	$0, 48(%r14)
	movq	32(%r14), %rax
	movq	40(%r14), %rcx
	testq	%rax, %rax
	je	.LBB31_205
# BB#204:                               # %if.then1.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	%rcx, 40(%rax)
.LBB31_205:                             # %if.end3.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	testq	%rcx, %rcx
	jne	.LBB31_298
# BB#206:                               # %while.cond.preheader.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB31_208
	.align	16, 0x90
.LBB31_207:                             # %while.body.i.i
                                        #   Parent Loop BB31_194 Depth=1
                                        #     Parent Loop BB31_195 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB31_207
	jmp	.LBB31_208
.LBB31_298:                             # %if.then5.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	%rax, 32(%rcx)
.LBB31_208:                             # %if.end10.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	16(%r14), %rax
	movq	24(%r14), %rcx
	testq	%rax, %rax
	je	.LBB31_210
# BB#209:                               # %if.then14.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	%rcx, 24(%rax)
.LBB31_210:                             # %if.end16.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	testq	%rcx, %rcx
	jne	.LBB31_211
# BB#212:                               # %if.else20.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	table(,%rcx,8), %rcx
	cmpq	%r14, %rcx
	movq	$-256, %rcx
	jne	.LBB31_214
# BB#213:                               # %if.then22.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rax, table(,%rcx,8)
	jmp	.LBB31_217
	.align	16, 0x90
.LBB31_214:                             # %for.body.i.i
                                        #   Parent Loop BB31_194 Depth=1
                                        #     Parent Loop BB31_195 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	table+256(%rcx), %rdx
	cmpq	%r14, %rdx
	jne	.LBB31_216
# BB#215:                               # %if.then30.i.i
                                        #   in Loop: Header=BB31_214 Depth=3
	movq	%rax, table+256(%rcx)
.LBB31_216:                             # %for.inc.i.i
                                        #   in Loop: Header=BB31_214 Depth=3
	addq	$8, %rcx
	jne	.LBB31_214
	jmp	.LBB31_217
.LBB31_211:                             # %if.then18.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	%rax, 16(%rcx)
.LBB31_217:                             # %if.end35.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	56(%r14), %rax
	testq	%rax, %rax
	je	.LBB31_223
# BB#218:                               # %if.end35.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	cmpq	%r14, %rax
	movq	%rax, %rdx
	je	.LBB31_223
	.align	16, 0x90
.LBB31_219:                             # %while.cond41.i.i
                                        #   Parent Loop BB31_194 Depth=1
                                        #     Parent Loop BB31_195 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%r14, %rdx
	jne	.LBB31_219
# BB#220:                               # %while.end46.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB31_222
# BB#221:                               # %while.end46.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	%rax, %rdx
.LBB31_222:                             # %while.end46.i.i
                                        #   in Loop: Header=BB31_195 Depth=2
	movq	%rdx, 56(%rcx)
	jmp	.LBB31_223
	.align	16, 0x90
.LBB31_224:                             # %for.inc49.i
                                        #   in Loop: Header=BB31_194 Depth=1
	movq	16(%rsp), %rcx          # 8-byte Reload
	incq	%rcx
	cmpq	$32, %rcx
	jne	.LBB31_194
	jmp	.LBB31_225
.LBB31_166:                             # %if.then207
	leaq	1(%rdi), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	xorq	%r15, %r15
	.align	16, 0x90
.LBB31_167:                             # %for.body.i816
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_168 Depth 2
                                        #       Child Loop BB31_175 Depth 3
                                        #       Child Loop BB31_182 Depth 3
                                        #       Child Loop BB31_187 Depth 3
	movq	table(,%r15,8), %r13
	jmp	.LBB31_168
.LBB31_191:                             # %if.end54.i1048
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	free_element_chain(%rip), %rax
	movq	%rax, 16(%rbx)
	movq	%rbx, free_element_chain(%rip)
	.align	16, 0x90
.LBB31_168:                             # %for.body.i816
                                        #   Parent Loop BB31_167 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_175 Depth 3
                                        #       Child Loop BB31_182 Depth 3
                                        #       Child Loop BB31_187 Depth 3
	testq	%r13, %r13
	je	.LBB31_192
# BB#169:                               # %for.body2.i823
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	%r13, %rbx
	movq	(%rbx), %rdx
	movzbl	(%rdx), %eax
	movq	16(%rbx), %r13
	cmpq	$61, %rax
	je	.LBB31_168
# BB#170:                               # %land.lhs.true.i826
                                        #   in Loop: Header=BB31_168 Depth=2
	xorq	%rcx, %rcx
	movq	%rdi, %r14
                                        # kill: RDI<def> R14<kill>
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	refers_to_regno_p
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB31_168
# BB#171:                               # %if.end.i1000
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	$0, 48(%rbx)
	movq	32(%rbx), %rax
	movq	40(%rbx), %rcx
	testq	%rax, %rax
	je	.LBB31_173
# BB#172:                               # %if.then1.i1002
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	%rcx, 40(%rax)
.LBB31_173:                             # %if.end3.i1004
                                        #   in Loop: Header=BB31_168 Depth=2
	testq	%rcx, %rcx
	jne	.LBB31_297
# BB#174:                               # %while.cond.preheader.i1005
                                        #   in Loop: Header=BB31_168 Depth=2
	testq	%rax, %rax
	movq	%rax, %rcx
	je	.LBB31_176
	.align	16, 0x90
.LBB31_175:                             # %while.body.i1012
                                        #   Parent Loop BB31_167 Depth=1
                                        #     Parent Loop BB31_168 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, 48(%rcx)
	movq	32(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB31_175
	jmp	.LBB31_176
.LBB31_297:                             # %if.then5.i1007
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	%rax, 32(%rcx)
.LBB31_176:                             # %if.end10.i1016
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	16(%rbx), %rax
	movq	24(%rbx), %rcx
	testq	%rax, %rax
	je	.LBB31_178
# BB#177:                               # %if.then14.i1018
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	%rcx, 24(%rax)
.LBB31_178:                             # %if.end16.i1020
                                        #   in Loop: Header=BB31_168 Depth=2
	testq	%rcx, %rcx
	jne	.LBB31_179
# BB#180:                               # %if.else20.i1026
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	table(,%r15,8), %rcx
	cmpq	%rbx, %rcx
	movq	$-256, %rcx
	jne	.LBB31_182
# BB#181:                               # %if.then22.i1027
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	%rax, table(,%r15,8)
	jmp	.LBB31_185
	.align	16, 0x90
.LBB31_182:                             # %for.body.i1031
                                        #   Parent Loop BB31_167 Depth=1
                                        #     Parent Loop BB31_168 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	table+256(%rcx), %rdx
	cmpq	%rbx, %rdx
	jne	.LBB31_184
# BB#183:                               # %if.then30.i1032
                                        #   in Loop: Header=BB31_182 Depth=3
	movq	%rax, table+256(%rcx)
.LBB31_184:                             # %for.inc.i1035
                                        #   in Loop: Header=BB31_182 Depth=3
	addq	$8, %rcx
	jne	.LBB31_182
	jmp	.LBB31_185
.LBB31_179:                             # %if.then18.i1022
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	%rax, 16(%rcx)
.LBB31_185:                             # %if.end35.i1040
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	56(%rbx), %rax
	testq	%rax, %rax
	je	.LBB31_191
# BB#186:                               # %if.end35.i1040
                                        #   in Loop: Header=BB31_168 Depth=2
	cmpq	%rbx, %rax
	movq	%rax, %rdx
	je	.LBB31_191
	.align	16, 0x90
.LBB31_187:                             # %while.cond41.i1044
                                        #   Parent Loop BB31_167 Depth=1
                                        #     Parent Loop BB31_168 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdx, %rcx
	movq	56(%rcx), %rdx
	cmpq	%rbx, %rdx
	jne	.LBB31_187
# BB#188:                               # %while.end46.i1047
                                        #   in Loop: Header=BB31_168 Depth=2
	xorq	%rdx, %rdx
	cmpq	%rcx, %rax
	je	.LBB31_190
# BB#189:                               # %while.end46.i1047
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	%rax, %rdx
.LBB31_190:                             # %while.end46.i1047
                                        #   in Loop: Header=BB31_168 Depth=2
	movq	%rdx, 56(%rcx)
	jmp	.LBB31_191
	.align	16, 0x90
.LBB31_192:                             # %for.inc6.i832
                                        #   in Loop: Header=BB31_167 Depth=1
	incq	%r15
	cmpq	$32, %r15
	jne	.LBB31_167
.LBB31_225:                             # %if.end215
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rdi
	jne	.LBB31_227
# BB#226:                               # %if.end215
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB31_237
.LBB31_227:                             # %cond.false221
	movq	$7, %rcx
	movq	%rdi, %rbx
	shrq	%cl, %rbx
	xorq	%rdi, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_231
# BB#228:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB31_230:                             # %for.body.i860
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB31_236
# BB#229:                               # %for.cond.i856
                                        #   in Loop: Header=BB31_230 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_230
.LBB31_231:                             # %if.then4.i862
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_233
# BB#232:                               # %if.then5.i864
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_234
.LBB31_233:                             # %if.else.i867
	movq	%rdi, %r14
	movq	$32, %rdi
	callq	xmalloc
	movq	%r14, %rdi
	movq	reg_hash(,%rbx,8), %rcx
.LBB31_234:                             # %if.end6.i876
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_236
# BB#235:                               # %if.then11.i877
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_236:                             # %get_cse_reg_info.exit879
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB31_237:                             # %cond.end223
	movl	24(%rax), %r14d
	testq	%rax, %rax
	jne	.LBB31_248
# BB#238:                               # %cond.false231
	movq	$7, %rcx
	movq	%rdi, %rbx
	shrq	%cl, %rbx
	xorq	%rdi, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB31_242
# BB#239:
	movq	%rcx, %rax
.LBB31_241:                             # %for.body.i894
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB31_247
# BB#240:                               # %for.cond.i890
                                        #   in Loop: Header=BB31_241 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB31_241
.LBB31_242:                             # %if.then4.i896
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB31_244
# BB#243:                               # %if.then5.i898
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB31_245
.LBB31_244:                             # %if.else.i901
	movq	%rdi, %r15
	movq	$32, %rdi
	callq	xmalloc
	movq	%r15, %rdi
	movq	reg_hash(,%rbx,8), %rcx
.LBB31_245:                             # %if.end6.i910
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB31_247
# BB#246:                               # %if.then11.i911
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB31_247:                             # %get_cse_reg_info.exit913
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB31_248:                             # %cond.end233
	movl	%r14d, 28(%rax)
.LBB31_249:                             # %return
	movq	%r12, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp463:
	.size	mention_regs, .Ltmp463-mention_regs
	.cfi_endproc

	.align	16, 0x90
	.type	approx_reg_cost_1,@function
approx_reg_cost_1:                      # @approx_reg_cost_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rax
.Ltmp465:
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rax
	testq	%rax, %rax
	je	.LBB32_3
# BB#1:                                 # %land.lhs.true
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB32_3
# BB#2:                                 # %if.then
	movl	8(%rax), %eax
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	bitmap_set_bit
.LBB32_3:                               # %if.end
	xorq	%rax, %rax
	popq	%rdx
	retq
.Ltmp466:
	.size	approx_reg_cost_1, .Ltmp466-approx_reg_cost_1
	.cfi_endproc

	.align	16, 0x90
	.type	lookup_as_function,@function
lookup_as_function:                     # @lookup_as_function
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp473:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp474:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp475:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp476:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp477:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp478:
	.cfi_def_cfa_offset 64
.Ltmp479:
	.cfi_offset %rbx, -48
.Ltmp480:
	.cfi_offset %r12, -40
.Ltmp481:
	.cfi_offset %r13, -32
.Ltmp482:
	.cfi_offset %r14, -24
.Ltmp483:
	.cfi_offset %r15, -16
	movzbl	do_not_record(%rip), %r14d
	movzbl	hash_arg_in_memory(%rip), %r15d
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	%rdi, %r13
	xorq	%rsi, %rsi
	xorq	%r12, %r12
                                        # kill: RDI<def> R13<kill>
	callq	canon_hash
	andq	$31, %rax
	movq	table(,%rax,8), %rbx
	movb	%r15b, hash_arg_in_memory(%rip)
	movb	%r14b, do_not_record(%rip)
	testq	%rbx, %rbx
	je	.LBB33_11
# BB#1:
	movzbl	2(%r13), %r14d
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB33_2:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%rbx), %eax
	cmpq	%r14, %rax
	jne	.LBB33_10
# BB#3:                                 # %land.lhs.true.i
                                        #   in Loop: Header=BB33_2 Depth=1
	movq	(%rbx), %rsi
	movzbl	(%r13), %eax
	cmpq	%r13, %rsi
	jne	.LBB33_6
# BB#4:                                 # %land.lhs.true.i
                                        #   in Loop: Header=BB33_2 Depth=1
	cmpq	$61, %rax
	je	.LBB33_5
.LBB33_6:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB33_2 Depth=1
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB33_8
# BB#7:                                 # %lor.lhs.false.i
                                        #   in Loop: Header=BB33_2 Depth=1
	movabsq	$1, %rdx
.LBB33_8:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB33_2 Depth=1
	movq	%r13, %rdi
	callq	exp_equiv_p
	testq	%r15, %rax
	jne	.LBB33_9
.LBB33_10:                              # %for.inc.i
                                        #   in Loop: Header=BB33_2 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB33_2
	jmp	.LBB33_11
.LBB33_5:
	movq	%rbx, %r12
	jmp	.LBB33_11
.LBB33_9:
	movq	%rbx, %r12
.LBB33_11:                              # %lookup.exit
	testq	%r12, %r12
	jne	.LBB33_23
# BB#12:                                # %lookup.exit
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movq	8(%rsp), %rax           # 8-byte Reload
	andq	%r15, %rax
	cmpq	$54, %rax
	jne	.LBB33_23
# BB#13:                                # %land.lhs.true3
	movzbl	2(%r13), %eax
	movslq	word_mode(%rip), %rcx
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rcx), %ecx
	xorq	%r14, %r14
	cmpq	%rcx, %rax
	jae	.LBB33_30
# BB#14:                                # %if.then
	movq	%r13, %rdi
	callq	copy_rtx
	movl	word_mode(%rip), %ecx
	movq	%rax, %rbx
	movb	%cl, 2(%rbx)
	movzbl	do_not_record(%rip), %eax
	movq	%rax, (%rsp)            # 8-byte Spill
	movzbl	hash_arg_in_memory(%rip), %r13d
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	movq	%rbx, %rdi
	callq	canon_hash
	andq	$31, %rax
	movq	table(,%rax,8), %r12
	movb	%r13b, hash_arg_in_memory(%rip)
	movq	(%rsp), %rax            # 8-byte Reload
	movb	%al, do_not_record(%rip)
	testq	%r12, %r12
	je	.LBB33_30
# BB#15:
	movl	word_mode(%rip), %r13d
	andq	%r15, %r13
	.align	16, 0x90
.LBB33_16:                              # %for.body.i62
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%r12), %eax
	cmpq	%r13, %rax
	jne	.LBB33_22
# BB#17:                                # %land.lhs.true.i69
                                        #   in Loop: Header=BB33_16 Depth=1
	movq	(%r12), %rsi
	movzbl	(%rbx), %eax
	cmpq	%rbx, %rsi
	jne	.LBB33_19
# BB#18:                                # %land.lhs.true.i69
                                        #   in Loop: Header=BB33_16 Depth=1
	cmpq	$61, %rax
	je	.LBB33_23
.LBB33_19:                              # %lor.lhs.false.i75
                                        #   in Loop: Header=BB33_16 Depth=1
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB33_21
# BB#20:                                # %lor.lhs.false.i75
                                        #   in Loop: Header=BB33_16 Depth=1
	movabsq	$1, %rdx
.LBB33_21:                              # %lor.lhs.false.i75
                                        #   in Loop: Header=BB33_16 Depth=1
	movq	%rbx, %rdi
	callq	exp_equiv_p
	testq	%r15, %rax
	jne	.LBB33_23
.LBB33_22:                              # %for.inc.i79
                                        #   in Loop: Header=BB33_16 Depth=1
	movq	16(%r12), %r12
	testq	%r12, %r12
	jne	.LBB33_16
	jmp	.LBB33_30
.LBB33_23:                              # %if.end
	xorq	%r14, %r14
	testq	%r12, %r12
	je	.LBB33_30
# BB#24:                                # %if.end21
	movq	48(%r12), %rbx
	testq	%rbx, %rbx
	je	.LBB33_30
# BB#25:
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movq	8(%rsp), %r12           # 8-byte Reload
	andq	%r15, %r12
	.align	16, 0x90
.LBB33_26:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	%r12, %rax
	jne	.LBB33_29
# BB#27:                                # %land.lhs.true26
                                        #   in Loop: Header=BB33_26 Depth=1
	movq	$1, %rdx
	movq	%rdi, %rsi
	callq	exp_equiv_p
	testq	%r15, %rax
	jne	.LBB33_28
.LBB33_29:                              # %for.inc
                                        #   in Loop: Header=BB33_26 Depth=1
	movq	32(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB33_26
	jmp	.LBB33_30
.LBB33_28:                              # %if.then31
	movq	(%rbx), %r14
.LBB33_30:                              # %return
	movq	%r14, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp484:
	.size	lookup_as_function, .Ltmp484-lookup_as_function
	.cfi_endproc

	.align	16, 0x90
	.type	equiv_constant,@function
equiv_constant:                         # @equiv_constant
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp491:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp492:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp493:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp494:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp495:
	.cfi_def_cfa_offset 48
.Ltmp496:
	.cfi_offset %rbx, -48
.Ltmp497:
	.cfi_offset %r12, -40
.Ltmp498:
	.cfi_offset %r13, -32
.Ltmp499:
	.cfi_offset %r14, -24
.Ltmp500:
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movzbl	(%r13), %eax
	cmpq	$61, %rax
	jne	.LBB34_32
# BB#1:                                 # %land.lhs.true
	movl	8(%r13), %r15d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB34_3
# BB#2:                                 # %land.lhs.true
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	movq	%r15, %r14
	jne	.LBB34_13
.LBB34_3:                               # %cond.false
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB34_7
# BB#4:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB34_6:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB34_12
# BB#5:                                 # %for.cond.i
                                        #   in Loop: Header=BB34_6 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB34_6
.LBB34_7:                               # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB34_9
# BB#8:                                 # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB34_10
.LBB34_9:                               # %if.else.i
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB34_10:                              # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB34_12
# BB#11:                                # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB34_12:                              # %get_cse_reg_info.exit
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	8(%r13), %r14d
.LBB34_13:                              # %cond.end
	movl	20(%rax), %esi
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	%r14, %rdx
	andq	%rbx, %rdx
	cmpq	%rdx, %rsi
	je	.LBB34_31
# BB#14:                                # %if.then
	cmpq	%r15, %rdx
	jne	.LBB34_16
# BB#15:                                # %if.then
	testq	%rax, %rax
	jne	.LBB34_27
.LBB34_16:                              # %cond.false17
	movq	%rbx, %r15
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB34_21
# BB#17:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB34_19:                              # %for.body.i229
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %esi
	cmpq	%rdx, %rsi
	je	.LBB34_20
# BB#18:                                # %for.cond.i225
                                        #   in Loop: Header=BB34_19 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB34_19
.LBB34_21:                              # %if.then4.i231
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB34_23
# BB#22:                                # %if.then5.i233
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB34_24
.LBB34_20:
	movq	%r15, %rbx
	jmp	.LBB34_26
.LBB34_23:                              # %if.else.i236
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB34_24:                              # %if.end6.i245
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movq	%r15, %rbx
	movl	%ebx, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB34_26
# BB#25:                                # %if.then11.i246
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB34_26:                              # %get_cse_reg_info.exit248
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movl	20(%rax), %esi
.LBB34_27:                              # %cond.end22
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	qty_table(%rip), %rax
	leaq	(%rsi,%rsi,2), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	movq	(%rax,%rdx), %r12
	testq	%r12, %r12
	je	.LBB34_31
# BB#28:                                # %if.then27
	movzbl	2(%r13), %r15d
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	gen_lowpart_common
	movq	%rax, %r13
	testq	%r13, %r13
	jne	.LBB34_32
# BB#29:                                # %if.else.i251
	movzbl	(%r12), %eax
	xorq	%r14, %r14
	cmpq	$66, %rax
	jne	.LBB34_68
# BB#30:                                # %if.then1.i
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	xorq	%r14, %r14
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	adjust_address_1
	movq	%rax, %r13
	movq	8(%r13), %rsi
	movq	%r15, %rdi
	callq	memory_address_p
	testq	%rbx, %rax
	je	.LBB34_68
.LBB34_31:                              # %if.end32
	xorq	%r14, %r14
	testq	%r13, %r13
	je	.LBB34_68
.LBB34_32:                              # %lor.lhs.false
	movzbl	(%r13), %ecx
	cmpq	$133, %rcx
	jg	.LBB34_36
# BB#33:                                # %lor.lhs.false
	addq	$-54, %rcx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rcx
	cmpq	$14, %rcx
	ja	.LBB34_67
# BB#34:                                # %lor.lhs.false
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	je	.LBB34_38
# BB#35:
	movq	%r13, %r14
	jmp	.LBB34_68
.LBB34_36:                              # %lor.lhs.false
	cmpq	$134, %rcx
	jne	.LBB34_66
# BB#37:
	movq	%r13, %r14
	jmp	.LBB34_68
.LBB34_66:                              # %lor.lhs.false
	cmpq	$140, %rcx
	movq	%r13, %r14
	je	.LBB34_68
	jmp	.LBB34_67
.LBB34_38:                              # %lor.lhs.false
	cmpq	$12, %rcx
	jne	.LBB34_67
# BB#39:                                # %if.then70
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	fold_rtx
	movq	%rax, %r12
	movl	(%r12), %esi
	movq	%rsi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$133, %rcx
	jg	.LBB34_43
# BB#40:                                # %if.then70
	addq	$-54, %rcx
	andq	%r15, %rcx
	cmpq	$14, %rcx
	ja	.LBB34_47
# BB#41:                                # %if.then70
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	je	.LBB34_47
# BB#42:
	movq	%r12, %r14
	jmp	.LBB34_68
.LBB34_43:                              # %if.then70
	cmpq	$134, %rcx
	jne	.LBB34_45
# BB#44:
	movq	%r12, %r14
	jmp	.LBB34_68
.LBB34_45:                              # %if.then70
	cmpq	$140, %rcx
	jne	.LBB34_47
# BB#46:
	movq	%r12, %r14
	jmp	.LBB34_68
.LBB34_47:                              # %if.end104
	movzbl	do_not_record(%rip), %r14d
	movzbl	hash_arg_in_memory(%rip), %r13d
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%r12, %rdi
	callq	canon_hash
	andq	$31, %rax
	movq	table(,%rax,8), %rbx
	movb	%r13b, hash_arg_in_memory(%rip)
	movb	%r14b, do_not_record(%rip)
	xorq	%r14, %r14
	testq	%rbx, %rbx
	je	.LBB34_68
# BB#48:
	movzbl	2(%r12), %r13d
.LBB34_49:                              # %for.body.i257
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%rbx), %eax
	cmpq	%r13, %rax
	jne	.LBB34_55
# BB#50:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB34_49 Depth=1
	movq	(%rbx), %rsi
	movzbl	(%r12), %eax
	cmpq	%r12, %rsi
	jne	.LBB34_52
# BB#51:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB34_49 Depth=1
	cmpq	$61, %rax
	je	.LBB34_56
.LBB34_52:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB34_49 Depth=1
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB34_54
# BB#53:                                # %lor.lhs.false.i
                                        #   in Loop: Header=BB34_49 Depth=1
	movabsq	$1, %rdx
.LBB34_54:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB34_49 Depth=1
	movq	%r12, %rdi
	callq	exp_equiv_p
	testq	%r15, %rax
	jne	.LBB34_56
.LBB34_55:                              # %for.inc.i
                                        #   in Loop: Header=BB34_49 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB34_49
	jmp	.LBB34_68
.LBB34_56:                              # %lookup.exit
	testq	%rbx, %rbx
	je	.LBB34_68
# BB#57:                                # %if.end115
	movq	48(%rbx), %rax
	jmp	.LBB34_58
.LBB34_65:                              # %for.inc
                                        #   in Loop: Header=BB34_58 Depth=1
	movq	32(%rax), %rax
.LBB34_58:                              # %if.end115
                                        # =>This Inner Loop Header: Depth=1
	testq	%rax, %rax
	je	.LBB34_67
# BB#59:                                # %for.body
                                        #   in Loop: Header=BB34_58 Depth=1
	movzbl	77(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB34_65
# BB#60:                                # %land.lhs.true118
                                        #   in Loop: Header=BB34_58 Depth=1
	movq	(%rax), %r14
	movzbl	(%r14), %ecx
	cmpq	$133, %rcx
	jg	.LBB34_63
# BB#61:                                # %land.lhs.true118
                                        #   in Loop: Header=BB34_58 Depth=1
	addq	$-54, %rcx
	andq	%r15, %rcx
	cmpq	$14, %rcx
	ja	.LBB34_65
# BB#62:                                # %land.lhs.true118
                                        #   in Loop: Header=BB34_58 Depth=1
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$24599, %rdx            # imm = 0x6017
	je	.LBB34_65
	jmp	.LBB34_68
.LBB34_63:                              # %land.lhs.true118
                                        #   in Loop: Header=BB34_58 Depth=1
	cmpq	$134, %rcx
	je	.LBB34_68
# BB#64:                                # %land.lhs.true118
                                        #   in Loop: Header=BB34_58 Depth=1
	cmpq	$140, %rcx
	jne	.LBB34_65
	jmp	.LBB34_68
.LBB34_67:                              # %if.end168
	xorq	%r14, %r14
.LBB34_68:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp501:
	.size	equiv_constant, .Ltmp501-equiv_constant
	.cfi_endproc

	.align	16, 0x90
	.type	find_comparison_args,@function
find_comparison_args:                   # @find_comparison_args
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp508:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp509:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp510:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp511:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp512:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp513:
	.cfi_def_cfa_offset 112
.Ltmp514:
	.cfi_offset %rbx, -48
.Ltmp515:
	.cfi_offset %r12, -40
.Ltmp516:
	.cfi_offset %r13, -32
.Ltmp517:
	.cfi_offset %r14, -24
.Ltmp518:
	.cfi_offset %r15, -16
	movq	%rsi, %r12
	movq	%r12, 16(%rsp)          # 8-byte Spill
	movq	(%r12), %r15
	movl	(%r15), %esi
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	(%rdx), %rdx
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	$13, %rcx
	movq	%rsi, %rax
	shrq	%cl, %rax
	andq	$2040, %rax             # imm = 0x7F8
	movq	const_tiny_rtx(%rax), %rax
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	cmpq	%rax, %rdx
	jne	.LBB35_72
# BB#1:
	movabsq	$0, %r13
.LBB35_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_13 Depth 2
                                        #     Child Loop BB35_27 Depth 2
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jne	.LBB35_4
# BB#3:                                 # %while.body
                                        #   in Loop: Header=BB35_2 Depth=1
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, 48(%rsp)          # 8-byte Folded Reload
	movabsq	$0, %rdx
	je	.LBB35_8
.LBB35_4:                               # %if.else
                                        #   in Loop: Header=BB35_2 Depth=1
	movzbl	rtx_class(%rax), %eax
	xorq	%rdx, %rdx
	cmpq	$60, %rax
	jne	.LBB35_10
# BB#5:                                 # %if.then11
                                        #   in Loop: Header=BB35_2 Depth=1
	xorq	%rdx, %rdx
	movq	56(%rsp), %rax          # 8-byte Reload
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$102, %rax
	je	.LBB35_8
# BB#6:                                 # %if.then11
                                        #   in Loop: Header=BB35_2 Depth=1
	cmpq	$103, %rax
	jne	.LBB35_10
# BB#7:                                 # %if.then41
                                        #   in Loop: Header=BB35_2 Depth=1
	movq	$1, %rdx
	.align	16, 0x90
.LBB35_8:                               # %if.end44
                                        #   in Loop: Header=BB35_2 Depth=1
	testq	%r15, %r15
	jne	.LBB35_9
.LBB35_10:                              # %if.then47
                                        #   in Loop: Header=BB35_2 Depth=1
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movzbl	do_not_record(%rip), %r14d
	movzbl	hash_arg_in_memory(%rip), %r12d
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%r15, %rdi
	callq	canon_hash
	andq	$31, %rax
	movq	table(,%rax,8), %rbx
	movb	%r12b, hash_arg_in_memory(%rip)
	movb	%r14b, do_not_record(%rip)
	testq	%rbx, %rbx
	je	.LBB35_11
# BB#12:                                #   in Loop: Header=BB35_2 Depth=1
	movzbl	2(%r15), %r14d
	movq	%r13, %r12
	movabsq	$1, %r13
	.align	16, 0x90
.LBB35_13:                              # %for.body.i
                                        #   Parent Loop BB35_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	72(%rbx), %eax
	cmpq	%r14, %rax
	jne	.LBB35_19
# BB#14:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB35_13 Depth=2
	movq	(%rbx), %rsi
	movzbl	(%r15), %eax
	cmpq	%r15, %rsi
	jne	.LBB35_16
# BB#15:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB35_13 Depth=2
	cmpq	$61, %rax
	je	.LBB35_21
.LBB35_16:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB35_13 Depth=2
	cmpq	$61, %rax
	movq	%r12, %rdx
	je	.LBB35_18
# BB#17:                                # %lor.lhs.false.i
                                        #   in Loop: Header=BB35_13 Depth=2
	movq	%r13, %rdx
.LBB35_18:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB35_13 Depth=2
	movq	%r15, %rdi
	callq	exp_equiv_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB35_21
.LBB35_19:                              # %for.inc.i
                                        #   in Loop: Header=BB35_13 Depth=2
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB35_13
	jmp	.LBB35_20
	.align	16, 0x90
.LBB35_9:                               #   in Loop: Header=BB35_2 Depth=1
	movq	%r15, %r14
	jmp	.LBB35_31
	.align	16, 0x90
.LBB35_21:                              # %if.end55
                                        #   in Loop: Header=BB35_2 Depth=1
	testq	%rbx, %rbx
	je	.LBB35_22
# BB#23:                                # %if.then56
                                        #   in Loop: Header=BB35_2 Depth=1
	movq	48(%rbx), %r12
	movzbl	77(%r12), %eax
	testq	%rax, %rax
	jne	.LBB35_24
# BB#25:                                # %if.then56
                                        #   in Loop: Header=BB35_2 Depth=1
	testq	%r12, %r12
	je	.LBB35_26
	.align	16, 0x90
.LBB35_27:                              # %for.body
                                        #   Parent Loop BB35_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r12), %rdi
	movzbl	2(%rdi), %r13d
	movq	$1, %rdx
	movq	%rdi, %rsi
	callq	exp_equiv_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB35_67
# BB#28:                                # %if.end70
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	(%r12), %r14
	movzbl	(%r14), %eax
	cmpq	$74, %rax
	je	.LBB35_29
# BB#33:                                # %lor.lhs.false76
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	56(%rsp), %rcx          # 8-byte Reload
	leaq	-102(%rcx), %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$5, %rcx
	ja	.LBB35_45
# BB#34:                                # %lor.lhs.false76
                                        #   in Loop: Header=BB35_27 Depth=2
	jmpq	*.LJTI35_0(,%rcx,8)
.LBB35_35:                              # %land.lhs.true82
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	mode_class(,%r13,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB35_45
# BB#36:                                # %land.lhs.true87
                                        #   in Loop: Header=BB35_27 Depth=2
	movzbl	mode_bitsize(%r13,%r13), %ecx
	cmpq	$64, %rcx
	ja	.LBB35_39
# BB#37:                                # %land.lhs.true93
                                        #   in Loop: Header=BB35_27 Depth=2
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	addq	%rdx, %rcx
	testq	%rdx, %rcx
	jne	.LBB35_39
.LBB35_38:                              # %land.lhs.true99
                                        #   in Loop: Header=BB35_27 Depth=2
	movzbl	rtx_class(%rax), %ecx
	cmpq	$60, %rcx
	je	.LBB35_29
.LBB35_39:                              # %if.else110
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	56(%rsp), %rcx          # 8-byte Reload
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$103, %rcx
	je	.LBB35_44
# BB#40:                                # %if.else110
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	$104, %rcx
	jne	.LBB35_45
.LBB35_41:                              # %land.lhs.true116
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	mode_class(,%r13,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB35_45
# BB#42:                                # %land.lhs.true121
                                        #   in Loop: Header=BB35_27 Depth=2
	movzbl	mode_bitsize(%r13,%r13), %ecx
	cmpq	$64, %rcx
	ja	.LBB35_45
# BB#43:                                # %land.lhs.true127
                                        #   in Loop: Header=BB35_27 Depth=2
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	addq	%rdx, %rcx
	testq	%rdx, %rcx
	jne	.LBB35_45
.LBB35_44:                              # %land.lhs.true136
                                        #   in Loop: Header=BB35_27 Depth=2
	movzbl	rtx_class(%rax), %ecx
	cmpq	$60, %rcx
	movq	$1, %rcx
	je	.LBB35_30
	.align	16, 0x90
.LBB35_45:                              # %if.else147
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	global_rtl+24(%rip), %rsi
	cmpq	%rsi, %r14
	je	.LBB35_66
# BB#46:                                # %lor.lhs.false151
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	global_rtl+32(%rip), %rdi
	cmpq	%rdi, %r14
	je	.LBB35_66
# BB#47:                                # %lor.lhs.false151
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	global_rtl+56(%rip), %rcx
	cmpq	%rcx, %r14
	je	.LBB35_66
# BB#48:                                # %lor.lhs.false151
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	global_rtl+48(%rip), %rdx
	cmpq	%rdx, %r14
	je	.LBB35_66
# BB#49:                                # %lor.lhs.false163
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	$75, %rax
	jne	.LBB35_57
# BB#50:                                # %land.lhs.true169
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	16(%r14), %rbx
	movzbl	(%rbx), %ebx
	cmpq	$54, %rbx
	jne	.LBB35_57
# BB#51:                                # %land.lhs.true176
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	8(%r14), %rbx
	cmpq	%rsi, %rbx
	je	.LBB35_66
# BB#52:                                # %land.lhs.true176
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	%rdi, %rbx
	je	.LBB35_66
# BB#53:                                # %lor.lhs.false190
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	global_rtl+40(%rip), %rsi
	cmpq	%rsi, %r14
	jne	.LBB35_55
# BB#54:                                # %lor.lhs.false190
                                        #   in Loop: Header=BB35_27 Depth=2
	movzbl	fixed_regs+16(%rip), %esi
	testq	$255, %rsi
	jne	.LBB35_66
.LBB35_55:                              # %lor.lhs.false197
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	%rcx, %rbx
	je	.LBB35_66
# BB#56:                                # %lor.lhs.false197
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	%rdx, %rbx
	je	.LBB35_66
.LBB35_57:                              # %lor.lhs.false211
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	global_rtl+16(%rip), %rcx
	cmpq	%rcx, %r14
	je	.LBB35_66
# BB#58:                                # %lor.lhs.false215
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	global_rtl+64(%rip), %rdx
	cmpq	%rdx, %r14
	je	.LBB35_66
# BB#59:                                # %lor.lhs.false219
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	global_rtl+72(%rip), %rsi
	cmpq	%rsi, %r14
	je	.LBB35_66
# BB#60:                                # %lor.lhs.false223
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	$75, %rax
	jne	.LBB35_65
# BB#61:                                # %land.lhs.true229
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	16(%r14), %rdi
	movzbl	(%rdi), %edi
	cmpq	$54, %rdi
	jne	.LBB35_67
# BB#62:                                # %land.lhs.true238
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	8(%r14), %rdi
	cmpq	%rcx, %rdi
	je	.LBB35_66
# BB#63:                                # %land.lhs.true238
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	%rdx, %rdi
	je	.LBB35_66
# BB#64:                                # %land.lhs.true238
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	%rsi, %rdi
	je	.LBB35_66
.LBB35_65:                              # %lor.lhs.false259
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpq	$70, %rax
	jne	.LBB35_67
	.align	16, 0x90
.LBB35_66:                              # %if.then265
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	%r14, %r15
.LBB35_67:                              # %for.inc
                                        #   in Loop: Header=BB35_27 Depth=2
	movq	32(%r12), %r12
	testq	%r12, %r12
	jne	.LBB35_27
	jmp	.LBB35_68
.LBB35_29:                              #   in Loop: Header=BB35_2 Depth=1
	movq	8(%rsp), %rcx           # 8-byte Reload
.LBB35_30:                              # %for.end
                                        #   in Loop: Header=BB35_2 Depth=1
	testq	%r14, %r14
	movq	%rcx, %rdx
	movq	16(%rsp), %r12          # 8-byte Reload
	movabsq	$0, %rbx
	movq	%rbx, %r13
	je	.LBB35_72
.LBB35_31:                              # %if.end273
                                        #   in Loop: Header=BB35_2 Depth=1
	testq	%rdx, %rdx
	jne	.LBB35_32
# BB#69:                                # %if.else282
                                        #   in Loop: Header=BB35_2 Depth=1
	movzbl	(%r14), %eax
	movzbl	rtx_class(%rax), %ecx
	cmpq	$60, %rcx
	je	.LBB35_71
# BB#70:                                # %select.mid
                                        #   in Loop: Header=BB35_2 Depth=1
	movq	56(%rsp), %rax          # 8-byte Reload
	jmp	.LBB35_71
.LBB35_32:                              # %if.then275
                                        #   in Loop: Header=BB35_2 Depth=1
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	reversed_comparison_code
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB35_72
.LBB35_71:                              # %if.end294
                                        #   in Loop: Header=BB35_2 Depth=1
	movq	8(%r14), %r15
	movl	(%r15), %esi
	movq	16(%r14), %rdi
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	$13, %rcx
	movq	%rsi, %rdx
	shrq	%cl, %rdx
	andq	$2040, %rdx             # imm = 0x7F8
	movq	const_tiny_rtx(%rdx), %rcx
	cmpq	%rcx, %rdi
	movq	%rax, 56(%rsp)          # 8-byte Spill
	je	.LBB35_2
	jmp	.LBB35_72
.LBB35_20:
	movq	16(%rsp), %r12          # 8-byte Reload
	jmp	.LBB35_72
.LBB35_68:
	movq	16(%rsp), %r12          # 8-byte Reload
.LBB35_72:                              # %while.end
	movzbl	2(%r15), %eax
	movq	32(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	48(%rsp), %rbx          # 8-byte Reload
	movzbl	2(%rbx), %eax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	fold_rtx
	movq	%rax, (%r12)
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	fold_rtx
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	56(%rsp), %rax          # 8-byte Reload
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB35_11:
	movq	16(%rsp), %r12          # 8-byte Reload
	jmp	.LBB35_72
.LBB35_22:
	movq	16(%rsp), %r12          # 8-byte Reload
	jmp	.LBB35_72
.LBB35_24:
	movq	16(%rsp), %r12          # 8-byte Reload
	jmp	.LBB35_72
.LBB35_26:
	movq	16(%rsp), %r12          # 8-byte Reload
	jmp	.LBB35_72
.Ltmp519:
	.size	find_comparison_args, .Ltmp519-find_comparison_args
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI35_0:
	.quad	.LBB35_38
	.quad	.LBB35_44
	.quad	.LBB35_41
	.quad	.LBB35_45
	.quad	.LBB35_45
	.quad	.LBB35_35

	.text
	.align	16, 0x90
	.type	invalidate_skipped_set,@function
invalidate_skipped_set:                 # @invalidate_skipped_set
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp526:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp527:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp528:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp529:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp530:
	.cfi_def_cfa_offset 48
.Ltmp531:
	.cfi_offset %rbx, -48
.Ltmp532:
	.cfi_offset %r12, -40
.Ltmp533:
	.cfi_offset %r13, -32
.Ltmp534:
	.cfi_offset %r14, -24
.Ltmp535:
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movl	(%r15), %r13d
	movq	%rsi, %r14
	movq	%r13, %r12
	andq	$65535, %r12            # imm = 0xFFFF
	cmpq	$66, %r12
	jne	.LBB36_31
# BB#1:                                 # %land.lhs.true
	movq	%r15, %rdi
	callq	addr_affects_sp_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB36_31
# BB#2:                                 # %land.lhs.true1
	movl	(%r15), %eax
	xorq	%rbx, %rbx
	testq	$268435456, %rax        # imm = 0x10000000
	jne	.LBB36_5
# BB#3:                                 # %land.lhs.true1
	andq	$16711680, %rax         # imm = 0xFF0000
	andq	%rcx, %rax
	cmpq	$3342336, %rax          # imm = 0x330000
	je	.LBB36_5
# BB#4:                                 # %lor.lhs.false9
	movq	8(%r15), %rdi
	xorq	%rsi, %rsi
	xorq	%rbx, %rbx
	callq	cse_rtx_varies_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB36_31
	.align	16, 0x90
.LBB36_5:                               # %for.body.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_6 Depth 2
                                        #       Child Loop BB36_14 Depth 3
                                        #       Child Loop BB36_21 Depth 3
                                        #       Child Loop BB36_26 Depth 3
	movq	table(,%rbx,8), %rax
	testq	%rax, %rax
	je	.LBB36_8
	.align	16, 0x90
.LBB36_6:                               # %for.body2.i
                                        #   Parent Loop BB36_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_14 Depth 3
                                        #       Child Loop BB36_21 Depth 3
                                        #       Child Loop BB36_26 Depth 3
	movzbl	76(%rax), %edx
	movq	16(%rax), %rcx
	testq	%rdx, %rdx
	je	.LBB36_7
# BB#10:                                # %if.end.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	$0, 48(%rax)
	movq	32(%rax), %rdx
	movq	40(%rax), %rsi
	testq	%rdx, %rdx
	je	.LBB36_12
# BB#11:                                # %if.then1.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	%rsi, 40(%rdx)
.LBB36_12:                              # %if.end3.i
                                        #   in Loop: Header=BB36_6 Depth=2
	testq	%rsi, %rsi
	jne	.LBB36_40
# BB#13:                                # %while.cond.preheader.i
                                        #   in Loop: Header=BB36_6 Depth=2
	testq	%rdx, %rdx
	movq	%rdx, %rsi
	je	.LBB36_15
	.align	16, 0x90
.LBB36_14:                              # %while.body.i
                                        #   Parent Loop BB36_5 Depth=1
                                        #     Parent Loop BB36_6 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdx, 48(%rsi)
	movq	32(%rsi), %rsi
	testq	%rsi, %rsi
	jne	.LBB36_14
	jmp	.LBB36_15
	.align	16, 0x90
.LBB36_40:                              # %if.then5.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	%rdx, 32(%rsi)
.LBB36_15:                              # %if.end10.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	24(%rax), %rdx
	testq	%rcx, %rcx
	je	.LBB36_17
# BB#16:                                # %if.then14.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	%rdx, 24(%rcx)
.LBB36_17:                              # %if.end16.i
                                        #   in Loop: Header=BB36_6 Depth=2
	testq	%rdx, %rdx
	jne	.LBB36_18
# BB#19:                                # %if.else20.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	table(,%rbx,8), %rdx
	cmpq	%rax, %rdx
	movq	$-256, %rdx
	jne	.LBB36_21
# BB#20:                                # %if.then22.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	%rcx, table(,%rbx,8)
	jmp	.LBB36_24
	.align	16, 0x90
.LBB36_21:                              # %for.body.i58
                                        #   Parent Loop BB36_5 Depth=1
                                        #     Parent Loop BB36_6 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	table+256(%rdx), %rsi
	cmpq	%rax, %rsi
	jne	.LBB36_23
# BB#22:                                # %if.then30.i
                                        #   in Loop: Header=BB36_21 Depth=3
	movq	%rcx, table+256(%rdx)
.LBB36_23:                              # %for.inc.i
                                        #   in Loop: Header=BB36_21 Depth=3
	addq	$8, %rdx
	jne	.LBB36_21
	jmp	.LBB36_24
	.align	16, 0x90
.LBB36_18:                              # %if.then18.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	%rcx, 16(%rdx)
.LBB36_24:                              # %if.end35.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	56(%rax), %rdx
	testq	%rdx, %rdx
	je	.LBB36_30
# BB#25:                                # %if.end35.i
                                        #   in Loop: Header=BB36_6 Depth=2
	cmpq	%rax, %rdx
	movq	%rdx, %rdi
	je	.LBB36_30
	.align	16, 0x90
.LBB36_26:                              # %while.cond41.i
                                        #   Parent Loop BB36_5 Depth=1
                                        #     Parent Loop BB36_6 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdi, %rsi
	movq	56(%rsi), %rdi
	cmpq	%rax, %rdi
	jne	.LBB36_26
# BB#27:                                # %while.end46.i
                                        #   in Loop: Header=BB36_6 Depth=2
	xorq	%rdi, %rdi
	cmpq	%rsi, %rdx
	je	.LBB36_29
# BB#28:                                # %while.end46.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	%rdx, %rdi
.LBB36_29:                              # %while.end46.i
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	%rdi, 56(%rsi)
.LBB36_30:                              # %remove_from_table.exit
                                        #   in Loop: Header=BB36_6 Depth=2
	movq	free_element_chain(%rip), %rdx
	movq	%rdx, 16(%rax)
	movq	%rax, free_element_chain(%rip)
.LBB36_7:                               # %for.cond1.backedge.i
                                        #   in Loop: Header=BB36_6 Depth=2
	testq	%rcx, %rcx
	movq	%rcx, %rax
	jne	.LBB36_6
.LBB36_8:                               # %for.inc4.i
                                        #   in Loop: Header=BB36_5 Depth=1
	incq	%rbx
	cmpq	$32, %rbx
	jne	.LBB36_5
	jmp	.LBB36_9
.LBB36_31:                              # %if.end
	movzbl	(%r14), %eax
	cmpq	$49, %rax
	je	.LBB36_9
# BB#32:                                # %if.end
	movq	global_rtl(%rip), %rax
	cmpq	%r15, %rax
	je	.LBB36_9
# BB#33:                                # %if.end18
	cmpq	$64, %r12
	je	.LBB36_35
# BB#34:                                # %if.end18
	cmpq	$133, %r12
	jne	.LBB36_36
.LBB36_35:                              # %if.then22
	movq	8(%r15), %rdi
	movzbl	2(%r15), %esi
.LBB36_39:                              # %if.then34
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	invalidate  # TAILCALL
.LBB36_36:                              # %if.else
	andq	$65533, %r13            # imm = 0xFFFD
	cmpq	$61, %r13
	je	.LBB36_38
# BB#37:                                # %if.else
	cmpq	$66, %r12
	je	.LBB36_38
.LBB36_9:                               # %if.end36
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB36_38:                              # %if.then34
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	jmp	.LBB36_39
.Ltmp536:
	.size	invalidate_skipped_set, .Ltmp536-invalidate_skipped_set
	.cfi_endproc

	.align	16, 0x90
	.type	record_jump_cond,@function
record_jump_cond:                       # @record_jump_cond
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp543:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp544:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp545:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp546:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp547:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp548:
	.cfi_def_cfa_offset 128
.Ltmp549:
	.cfi_offset %rbx, -48
.Ltmp550:
	.cfi_offset %r12, -40
.Ltmp551:
	.cfi_offset %r13, -32
.Ltmp552:
	.cfi_offset %r14, -24
.Ltmp553:
	.cfi_offset %r15, -16
	movq	%rcx, %r14
	movq	%rsi, 72(%rsp)          # 8-byte Spill
	movq	%rdi, %rbx
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	movq	%rbx, %rax
	andq	%r12, %rax
	cmpq	$103, %rax
	jne	.LBB37_21
# BB#1:                                 # %land.lhs.true
	movl	(%rdx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB37_11
# BB#2:                                 # %land.lhs.true2
	movq	8(%rdx), %rsi
	movq	$16, %rcx
	movzbl	2(%rsi), %r15d
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%r15), %ecx
	cmpq	%rcx, %rax
	jbe	.LBB37_11
# BB#3:                                 # %if.then
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	gen_lowpart_common
	movq	%r14, %rcx
	movq	%rax, %r14
	testq	%r14, %r14
	je	.LBB37_5
# BB#4:                                 # %gen_lowpart_if_possible.exit.thread398
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movq	%r12, %rbx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r13
	jmp	.LBB37_10
.LBB37_5:                               # %if.else.i
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movzbl	(%rcx), %eax
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	cmpq	$66, %rax
	jne	.LBB37_7
# BB#6:                                 # %if.then1.i
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	callq	adjust_address_1
	movq	%rax, %r14
	movq	8(%r14), %rsi
	movq	%r15, %rdi
	callq	memory_address_p
	testq	%r12, %rax
	je	.LBB37_7
# BB#8:                                 # %gen_lowpart_if_possible.exit
	movq	%r12, %rbx
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r13
	testq	%r14, %r14
	jne	.LBB37_10
	jmp	.LBB37_9
.LBB37_7:                               # %gen_lowpart_if_possible.exit.thread
	movq	%r12, %rbx
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r13
.LBB37_9:                               # %cond.false
	xorq	%rdx, %rdx
	movq	%r15, %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	gen_rtx_SUBREG
	movq	%rax, %r14
.LBB37_10:                              # %cond.end
	movq	$103, %rdi
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %rcx
	callq	record_jump_cond
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	%rbx, %r12
	movq	64(%rsp), %rbx          # 8-byte Reload
.LBB37_11:                              # %land.lhs.true26
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB37_21
# BB#12:                                # %land.lhs.true31
	movq	8(%r14), %rsi
	movq	$16, %rcx
	movzbl	2(%rsi), %r15d
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%r15), %ecx
	cmpq	%rcx, %rax
	jbe	.LBB37_21
# BB#13:                                # %if.then49
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movq	%rdx, %rsi
	movq	%rdx, %r13
	callq	gen_lowpart_common
	movq	%rax, %r14
	testq	%r14, %r14
	je	.LBB37_15
# BB#14:                                # %gen_lowpart_if_possible.exit25.thread402
	movq	%r13, 32(%rsp)          # 8-byte Spill
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r13
	jmp	.LBB37_20
.LBB37_15:                              # %if.else.i16
	movzbl	(%r13), %eax
	movq	%r13, 32(%rsp)          # 8-byte Spill
	cmpq	$66, %rax
	jne	.LBB37_17
# BB#16:                                # %if.then1.i23
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	callq	adjust_address_1
	movq	%rax, %r14
	movq	8(%r14), %rsi
	movq	%r15, %rdi
	callq	memory_address_p
	testq	%r12, %rax
	je	.LBB37_17
# BB#18:                                # %gen_lowpart_if_possible.exit25
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r13
	testq	%r14, %r14
	jne	.LBB37_20
	jmp	.LBB37_19
.LBB37_17:                              # %gen_lowpart_if_possible.exit25.thread
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r13
.LBB37_19:                              # %cond.false64
	xorq	%rdx, %rdx
	movq	%r15, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	gen_rtx_SUBREG
	movq	%rax, %r14
.LBB37_20:                              # %cond.end66
	movq	$103, %rdi
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %rcx
	callq	record_jump_cond
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	32(%rsp), %rdx          # 8-byte Reload
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	%rbx, %r12
	movq	64(%rsp), %rbx          # 8-byte Reload
.LBB37_21:                              # %if.end68
	movq	%rbx, %rax
	andq	%r12, %rax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	cmpq	$102, %rax
	jne	.LBB37_44
# BB#22:                                # %land.lhs.true71
	movzbl	(%rdx), %eax
	cmpq	$63, %rax
	jne	.LBB37_33
# BB#23:                                # %land.lhs.true76
	movq	%rdx, %rdi
	movq	%rdx, %r15
	callq	subreg_lowpart_p
	movq	%r15, %rdx
	testq	%r12, %rax
	je	.LBB37_33
# BB#24:                                # %land.lhs.true79
	movq	8(%rdx), %rax
	movzbl	2(%rdx), %ecx
	movzbl	2(%rax), %r15d
	movzbl	mode_size(%rcx), %eax
	movzbl	mode_size(%r15), %ecx
	cmpq	%rcx, %rax
	jae	.LBB37_33
# BB#25:                                # %if.then97
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movq	%rdx, %r12
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	gen_lowpart_common
	movq	%rax, %r13
	testq	%r13, %r13
	je	.LBB37_27
# BB#26:                                # %gen_lowpart_if_possible.exit40.thread406
	movq	8(%r12), %rdx
	movq	72(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB37_32
.LBB37_27:                              # %if.else.i31
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	72(%rsp), %rbx          # 8-byte Reload
	jne	.LBB37_29
# BB#28:                                # %if.then1.i38
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	adjust_address_1
	movq	%rax, %r13
	movq	8(%r13), %rsi
	movq	%r15, %rdi
	callq	memory_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB37_29
# BB#30:                                # %gen_lowpart_if_possible.exit40
	movq	8(%r12), %rdx
	testq	%r13, %r13
	jne	.LBB37_32
	jmp	.LBB37_31
.LBB37_29:                              # %gen_lowpart_if_possible.exit40.thread
	movq	8(%r12), %rdx
.LBB37_31:                              # %cond.false112
	movq	%rdx, %r13
	xorq	%rdx, %rdx
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_SUBREG
	movq	%r13, %rdx
	movq	%rax, %r13
.LBB37_32:                              # %cond.end114
	movq	%rbx, 72(%rsp)          # 8-byte Spill
	movq	$102, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rcx
	callq	record_jump_cond
	movq	%r12, %rdx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	%rbx, %r12
	movq	64(%rsp), %rbx          # 8-byte Reload
.LBB37_33:                              # %land.lhs.true119
	movzbl	(%r14), %eax
	cmpq	$63, %rax
	jne	.LBB37_44
# BB#34:                                # %land.lhs.true124
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	subreg_lowpart_p
	movq	%r15, %rdx
	testq	%r12, %rax
	je	.LBB37_44
# BB#35:                                # %land.lhs.true127
	movq	8(%r14), %rax
	movzbl	2(%r14), %ecx
	movzbl	2(%rax), %r15d
	movzbl	mode_size(%rcx), %eax
	movzbl	mode_size(%r15), %ecx
	cmpq	%rcx, %rax
	jae	.LBB37_44
# BB#36:                                # %if.then145
	movq	%rbx, %r12
	movq	%r15, %rdi
	movq	%rdx, %rsi
	movq	%rdx, %rbx
	callq	gen_lowpart_common
	movq	%rax, %r13
	testq	%r13, %r13
	je	.LBB37_38
# BB#37:                                # %gen_lowpart_if_possible.exit55.thread410
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	8(%r14), %rbx
	jmp	.LBB37_43
.LBB37_38:                              # %if.else.i46
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	movq	%rbx, %rdi
	jne	.LBB37_40
# BB#39:                                # %if.then1.i53
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%r15, %rsi
	movq	%rdi, %rbx
	callq	adjust_address_1
	movq	%rax, %r13
	movq	8(%r13), %rsi
	movq	%r15, %rdi
	callq	memory_address_p
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB37_40
# BB#41:                                # %gen_lowpart_if_possible.exit55
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	movq	8(%r14), %rbx
	testq	%r13, %r13
	jne	.LBB37_43
	jmp	.LBB37_42
.LBB37_40:                              # %gen_lowpart_if_possible.exit55.thread
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	movq	8(%r14), %rbx
.LBB37_42:                              # %cond.false160
	xorq	%rdx, %rdx
	movq	%r15, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	gen_rtx_SUBREG
	movq	%rax, %r13
.LBB37_43:                              # %cond.end162
	movq	$102, %rdi
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	%rbx, %rdx
	movq	%r13, %rcx
	callq	record_jump_cond
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	%r12, %rbx
.LBB37_44:                              # %if.end164
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	xorq	%rax, %rax
	movb	%al, do_not_record(%rip)
	movb	%al, hash_arg_in_memory(%rip)
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB37_59
# BB#45:                                # %land.lhs.true169
	movl	8(%rdx), %r15d
	cmpq	$53, %r15
	jb	.LBB37_59
# BB#46:                                # %cond.true174
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	movq	72(%rsp), %r12          # 8-byte Reload
	jne	.LBB37_48
# BB#47:                                # %cond.true174
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_58
.LBB37_48:                              # %cond.false183
	movq	$7, %rcx
	movq	%r15, %r13
	shrq	%cl, %r13
	xorq	%r15, %r13
	andq	$127, %r13
	movq	reg_hash(,%r13,8), %rcx
	testq	%rcx, %rcx
	je	.LBB37_52
# BB#49:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB37_51:                              # %for.body.i74
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %esi
	cmpq	%r15, %rsi
	je	.LBB37_57
# BB#50:                                # %for.cond.i70
                                        #   in Loop: Header=BB37_51 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_51
.LBB37_52:                              # %if.then4.i76
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB37_54
# BB#53:                                # %if.then5.i78
	movq	8(%rax), %rsi
	movq	%rsi, cse_reg_info_free_list(%rip)
	jmp	.LBB37_55
.LBB37_59:                              # %cond.false190
	movq	%rdx, %rdi
	movq	%rdx, %r15
	movq	72(%rsp), %r12          # 8-byte Reload
	movq	%r12, %rsi
	callq	canon_hash
	movq	%rax, %rsi
	jmp	.LBB37_60
.LBB37_54:                              # %if.else.i81
	movq	$32, %rdi
	movq	%rdx, %rbx
	callq	xmalloc
	movq	%rbx, %rdx
	movq	reg_hash(,%r13,8), %rcx
.LBB37_55:                              # %if.end6.i90
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r13,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_57
# BB#56:                                # %if.then11.i91
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_57:                              # %get_cse_reg_info.exit93
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB37_58:                              # %cond.end188
	movq	%rdx, %r15
	movl	20(%rax), %esi
	addq	$7808, %rsi             # imm = 0x1E80
.LBB37_60:                              # %cond.end192
	movzbl	do_not_record(%rip), %eax
	testq	%rax, %rax
	jne	.LBB37_260
# BB#61:                                # %if.end196
	movzbl	hash_arg_in_memory(%rip), %r13d
	xorq	%rax, %rax
	movb	%al, do_not_record(%rip)
	movb	%al, hash_arg_in_memory(%rip)
	movzbl	(%r14), %eax
	andq	$31, %rsi
	cmpq	$61, %rax
	jne	.LBB37_77
# BB#62:                                # %land.lhs.true201
	movl	8(%r14), %edi
	cmpq	$53, %rdi
	jb	.LBB37_77
# BB#63:                                # %cond.true207
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %rdi
	jne	.LBB37_65
# BB#64:                                # %cond.true207
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_76
.LBB37_65:                              # %cond.false216
	movq	$7, %rcx
	movq	%rdi, %r12
	shrq	%cl, %r12
	xorq	%rdi, %r12
	andq	$127, %r12
	movq	reg_hash(,%r12,8), %rcx
	testq	%rcx, %rcx
	je	.LBB37_69
# BB#66:
	movq	%rcx, %rax
	.align	16, 0x90
.LBB37_68:                              # %for.body.i108
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%rdi, %rdx
	je	.LBB37_75
# BB#67:                                # %for.cond.i104
                                        #   in Loop: Header=BB37_68 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_68
.LBB37_69:                              # %if.then4.i110
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%rsi, %rbx
	testq	%rax, %rax
	je	.LBB37_71
# BB#70:                                # %if.then5.i112
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB37_72
.LBB37_77:                              # %cond.false225
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movq	%rsi, %rbx
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	canon_hash
	movq	%rbx, %rsi
	jmp	.LBB37_78
.LBB37_71:                              # %if.else.i115
	movq	$32, %rdi
	callq	xmalloc
	movl	8(%r14), %edi
	movq	reg_hash(,%r12,8), %rcx
.LBB37_72:                              # %if.end6.i124
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%edi, 20(%rax)
	movl	%edi, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_74
# BB#73:                                # %if.then11.i125
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_74:                              # %get_cse_reg_info.exit127
	movq	%rbx, %rsi
.LBB37_75:                              # %get_cse_reg_info.exit127
	movl	%edi, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
	movq	72(%rsp), %r12          # 8-byte Reload
.LBB37_76:                              # %cond.end221
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB37_78:                              # %cond.end227
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movzbl	do_not_record(%rip), %eax
	testq	%rax, %rax
	jne	.LBB37_260
# BB#79:                                # %if.end232
	movq	%r12, 72(%rsp)          # 8-byte Spill
	movq	%rsi, %rax
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	movq	table(,%rax,8), %rbx
	movzbl	hash_arg_in_memory(%rip), %eax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	testq	%rbx, %rbx
	movabsq	$0, %rax
	movq	%r15, %rdi
	je	.LBB37_91
# BB#80:
	movq	%r14, 40(%rsp)          # 8-byte Spill
	movq	72(%rsp), %r13          # 8-byte Reload
	andq	%rcx, %r13
	movq	%rcx, %r14
	movabsq	$0, %r15
	.align	16, 0x90
.LBB37_81:                              # %for.body.i131
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%rbx), %eax
	cmpq	%r13, %rax
	jne	.LBB37_88
# BB#82:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB37_81 Depth=1
	movq	(%rbx), %rsi
	movzbl	(%rdi), %eax
	cmpq	%rdi, %rsi
	jne	.LBB37_85
# BB#83:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB37_81 Depth=1
	cmpq	$61, %rax
	je	.LBB37_84
.LBB37_85:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB37_81 Depth=1
	cmpq	$61, %rax
	movq	%r15, %rdx
	je	.LBB37_87
# BB#86:                                # %lor.lhs.false.i
                                        #   in Loop: Header=BB37_81 Depth=1
	movabsq	$1, %rdx
.LBB37_87:                              # %lor.lhs.false.i
                                        #   in Loop: Header=BB37_81 Depth=1
	movq	%rdi, %r12
	callq	exp_equiv_p
	movq	%r12, %rdi
	testq	%r14, %rax
	jne	.LBB37_84
.LBB37_88:                              # %for.inc.i
                                        #   in Loop: Header=BB37_81 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB37_81
# BB#89:
	xorq	%rax, %rax
	jmp	.LBB37_90
.LBB37_84:
	movq	%rbx, %rax
.LBB37_90:                              # %lookup.exit
	movq	%r14, %rcx
	movq	40(%rsp), %r14          # 8-byte Reload
.LBB37_91:                              # %lookup.exit
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	48(%rsp), %rax          # 8-byte Reload
	andq	$31, %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	andq	%rcx, %rax
	movq	table(,%rax,8), %r13
	testq	%r13, %r13
	je	.LBB37_92
# BB#94:
	movq	%r14, %r12
	movq	72(%rsp), %rbx          # 8-byte Reload
	andq	%rcx, %rbx
	movq	%rcx, %r15
	.align	16, 0x90
.LBB37_95:                              # %for.body.i146
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%r13), %eax
	cmpq	%rbx, %rax
	jne	.LBB37_101
# BB#96:                                # %land.lhs.true.i153
                                        #   in Loop: Header=BB37_95 Depth=1
	movq	(%r13), %rsi
	movzbl	(%r12), %eax
	cmpq	%r12, %rsi
	jne	.LBB37_98
# BB#97:                                # %land.lhs.true.i153
                                        #   in Loop: Header=BB37_95 Depth=1
	cmpq	$61, %rax
	je	.LBB37_103
.LBB37_98:                              # %lor.lhs.false.i159
                                        #   in Loop: Header=BB37_95 Depth=1
	movq	%rdi, %r14
	cmpq	$61, %rax
	movabsq	$0, %rdx
	je	.LBB37_100
# BB#99:                                # %lor.lhs.false.i159
                                        #   in Loop: Header=BB37_95 Depth=1
	movabsq	$1, %rdx
.LBB37_100:                             # %lor.lhs.false.i159
                                        #   in Loop: Header=BB37_95 Depth=1
	movq	%r12, %rdi
	callq	exp_equiv_p
	testq	%r15, %rax
	movq	%r14, %rdi
	jne	.LBB37_103
.LBB37_101:                             # %for.inc.i163
                                        #   in Loop: Header=BB37_95 Depth=1
	movq	16(%r13), %r13
	testq	%r13, %r13
	jne	.LBB37_95
# BB#102:
	movq	%r12, %r14
.LBB37_92:
	movq	72(%rsp), %r15          # 8-byte Reload
	xorq	%r13, %r13
.LBB37_93:                              # %lor.lhs.false
	cmpq	%r14, %rdi
	movq	%rdi, %rbx
	movq	24(%rsp), %rax          # 8-byte Reload
	jne	.LBB37_109
	jmp	.LBB37_260
.LBB37_103:                             # %lookup.exit165
	movq	40(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	je	.LBB37_104
# BB#105:                               # %lookup.exit165
	testq	%r13, %r13
	movq	%r12, %r14
	je	.LBB37_106
# BB#107:                               # %land.lhs.true240
	movq	%rdi, %rbx
	movq	48(%rax), %rax
	movq	48(%r13), %rcx
	cmpq	%rcx, %rax
	movq	72(%rsp), %r15          # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	je	.LBB37_260
# BB#108:                               # %land.lhs.true240
	cmpq	%r14, %rbx
	je	.LBB37_260
.LBB37_109:                             # %lor.lhs.false246
	movq	%rax, %r12
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	movq	%r12, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB37_260
# BB#110:                               # %if.end250
	cmpq	$103, 56(%rsp)          # 8-byte Folded Reload
	jne	.LBB37_113
# BB#111:                               # %lor.lhs.false253
	movzbl	2(%rbx), %eax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB37_219
# BB#112:                               # %lor.lhs.false253
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	je	.LBB37_219
.LBB37_113:                             # %if.then277
	movq	%rdx, %r13
	movzbl	(%r14), %eax
	cmpq	$61, %rax
	je	.LBB37_115
# BB#114:                               # %if.then282
	movq	%r14, %rdi
	callq	equiv_constant
	movq	%rax, %r14
.LBB37_115:                             # %lor.lhs.false301
	movq	%r13, %rcx
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB37_260
# BB#116:                               # %lor.lhs.false301
	testq	%r14, %r14
	je	.LBB37_260
# BB#117:                               # %if.end310
	cmpq	$0, 40(%rsp)            # 8-byte Folded Reload
	je	.LBB37_119
# BB#118:
	movq	%r15, 72(%rsp)          # 8-byte Spill
	movq	%r14, %r12
	movq	64(%rsp), %r13          # 8-byte Reload
	jmp	.LBB37_162
.LBB37_104:
	movq	%r12, %r14
	movq	72(%rsp), %r15          # 8-byte Reload
	jmp	.LBB37_93
.LBB37_106:
	movq	72(%rsp), %r15          # 8-byte Reload
	jmp	.LBB37_93
.LBB37_219:                             # %if.end515
	movq	40(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	jne	.LBB37_239
# BB#220:                               # %if.then518
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	movq	%rbx, %rdi
	callq	insert_regs
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB37_238
# BB#221:                               # %if.then521
	movq	%r15, %r12
	movq	%rbx, %rdi
	callq	rehash_using_reg
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	movq	%rbx, %rsi
	jne	.LBB37_236
# BB#222:                               # %land.lhs.true526
	movl	8(%rsi), %r15d
	cmpq	$53, %r15
	jb	.LBB37_236
# BB#223:                               # %cond.true532
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB37_225
# BB#224:                               # %cond.true532
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_235
.LBB37_225:                             # %cond.false541
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB37_229
# BB#226:
	movq	%rcx, %rax
.LBB37_228:                             # %for.body.i377
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB37_234
# BB#227:                               # %for.cond.i373
                                        #   in Loop: Header=BB37_228 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_228
.LBB37_229:                             # %if.then4.i379
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB37_231
# BB#230:                               # %if.then5.i381
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB37_232
.LBB37_119:                             # %if.then313
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	movq	%rbx, %rdi
	callq	insert_regs
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	64(%rsp), %r13          # 8-byte Reload
	je	.LBB37_120
# BB#121:                               # %if.then316
	movq	%r14, %r13
	movq	%rbx, %rdi
	callq	rehash_using_reg
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	movq	%rbx, %rsi
	jne	.LBB37_136
# BB#122:                               # %land.lhs.true321
	movl	8(%rsi), %r14d
	cmpq	$53, %r14
	jb	.LBB37_136
# BB#123:                               # %cond.true327
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	jne	.LBB37_125
# BB#124:                               # %cond.true327
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_135
.LBB37_125:                             # %cond.false336
	movq	%r15, %rbx
	movq	$7, %rcx
	movq	%r14, %r12
	shrq	%cl, %r12
	xorq	%r14, %r12
	andq	$127, %r12
	movq	reg_hash(,%r12,8), %rcx
	testq	%rcx, %rcx
	je	.LBB37_129
# BB#126:
	movq	%rcx, %rax
.LBB37_128:                             # %for.body.i180
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB37_134
# BB#127:                               # %for.cond.i176
                                        #   in Loop: Header=BB37_128 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_128
.LBB37_129:                             # %if.then4.i182
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB37_131
# BB#130:                               # %if.then5.i184
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB37_132
.LBB37_136:                             # %cond.false345
	movq	%rsi, %rdi
	movq	%rsi, %rbx
	movq	%r15, %rsi
	callq	canon_hash
	jmp	.LBB37_137
.LBB37_236:                             # %cond.false550
	movq	%rsi, %rdi
	movq	%rsi, %rbx
	movq	%r12, %rsi
	callq	canon_hash
	jmp	.LBB37_237
.LBB37_120:
	movq	%r15, 72(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	jmp	.LBB37_161
.LBB37_231:                             # %if.else.i384
	movq	$32, %rdi
	movq	%rsi, 32(%rsp)          # 8-byte Spill
	callq	xmalloc
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	reg_hash(,%rbx,8), %rcx
.LBB37_232:                             # %if.end6.i393
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_234
# BB#233:                               # %if.then11.i394
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_234:                             # %get_cse_reg_info.exit396
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB37_235:                             # %cond.end546
	movq	%rsi, %rbx
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB37_237:                             # %cond.end552
	andq	$31, %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r12, %r15
.LBB37_238:                             # %if.end555
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	%r15, %rcx
	callq	insert
	movq	16(%rsp), %rcx          # 8-byte Reload
	andq	$1, %rcx
	movb	%cl, 76(%rax)
.LBB37_239:                             # %if.end559
	testq	%r13, %r13
	jne	.LBB37_259
# BB#240:                               # %if.then562
	movq	%rax, 40(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	movq	%r14, %rdi
	callq	insert_regs
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	movq	48(%rsp), %rdx          # 8-byte Reload
	je	.LBB37_258
# BB#241:                               # %if.then565
	movq	%r14, %rdi
	callq	rehash_using_reg
	movzbl	(%r14), %eax
	cmpq	$61, %rax
	movq	%r14, %r12
	jne	.LBB37_256
# BB#242:                               # %land.lhs.true570
	movl	8(%r12), %r14d
	cmpq	$53, %r14
	jb	.LBB37_256
# BB#243:                               # %cond.true576
	movq	%rbx, %rdx
	movq	%r15, %r13
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	jne	.LBB37_245
# BB#244:                               # %cond.true576
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_255
.LBB37_245:                             # %cond.false585
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	movq	%rdx, %r15
	je	.LBB37_249
# BB#246:
	movq	%rcx, %rax
.LBB37_248:                             # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB37_254
# BB#247:                               # %for.cond.i
                                        #   in Loop: Header=BB37_248 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_248
.LBB37_249:                             # %if.then4.i
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB37_251
# BB#250:                               # %if.then5.i
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB37_252
.LBB37_256:                             # %cond.false594
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	canon_hash
	movq	%rax, %rdx
	movq	%r12, %r14
	jmp	.LBB37_257
.LBB37_131:                             # %if.else.i187
	movq	$32, %rdi
	movq	%rsi, 32(%rsp)          # 8-byte Spill
	callq	xmalloc
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	reg_hash(,%r12,8), %rcx
.LBB37_132:                             # %if.end6.i196
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r12,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_134
# BB#133:                               # %if.then11.i197
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_134:                             # %get_cse_reg_info.exit199
	movq	%rbx, %r15
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB37_135:                             # %cond.end341
	movq	%rsi, %rbx
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
.LBB37_137:                             # %cond.end347
	movq	%r13, %r14
	movzbl	(%r14), %ecx
	andq	$31, %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	cmpq	$133, %rcx
	jg	.LBB37_146
# BB#138:                               # %cond.end347
	addq	$-54, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	movq	%rbx, %rdi
	ja	.LBB37_149
# BB#139:                               # %cond.end347
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB37_147
# BB#140:                               # %cond.end347
	cmpq	$7, %rcx
	jne	.LBB37_149
# BB#141:                               # %land.lhs.true394
	movl	8(%r14), %r13d
	cmpq	$53, %r13
	jb	.LBB37_149
# BB#142:                               # %cond.true400
	movq	%rdi, %rbx
	movq	%r15, 72(%rsp)          # 8-byte Spill
	movq	%r14, %r12
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r15
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r13
	jne	.LBB37_144
# BB#143:                               # %cond.true400
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_158
.LBB37_144:                             # %cond.false409
	movq	$7, %rcx
	movq	%r13, %r14
	shrq	%cl, %r14
	xorq	%r13, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB37_152
# BB#145:
	movq	%rcx, %rax
.LBB37_151:                             # %for.body.i214
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r13, %rdx
	je	.LBB37_157
# BB#150:                               # %for.cond.i210
                                        #   in Loop: Header=BB37_151 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_151
.LBB37_152:                             # %if.then4.i216
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB37_154
# BB#153:                               # %if.then5.i218
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB37_155
.LBB37_146:                             # %cond.end347
	cmpq	$134, %rcx
	movq	%rbx, %rdi
	je	.LBB37_147
# BB#148:                               # %cond.end347
	cmpq	$140, %rcx
	jne	.LBB37_149
.LBB37_147:
	movq	%r15, 72(%rsp)          # 8-byte Spill
	jmp	.LBB37_160
.LBB37_149:                             # %cond.false418
	movq	%rdi, %rbx
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%r15, 72(%rsp)          # 8-byte Spill
	callq	canon_hash
.LBB37_159:                             # %cond.end420
	andq	$31, %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
.LBB37_160:                             # %if.end424
	movq	64(%rsp), %r13          # 8-byte Reload
.LBB37_161:                             # %if.end424
	movq	%r14, %r12
	xorq	%rsi, %rsi
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	%rdi, %rbx
	callq	insert
	movq	16(%rsp), %rcx          # 8-byte Reload
	andq	$1, %rcx
	movb	%cl, 76(%rax)
.LBB37_162:                             # %if.end427
	movl	8(%rbx), %r14d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r14
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	jne	.LBB37_164
# BB#163:                               # %if.end427
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_174
.LBB37_164:                             # %cond.false436
	movq	$7, %rcx
	movq	%r14, %rbx
	shrq	%cl, %rbx
	xorq	%r14, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB37_168
# BB#165:
	movq	%rcx, %rax
.LBB37_167:                             # %for.body.i248
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r14, %rdx
	je	.LBB37_173
# BB#166:                               # %for.cond.i244
                                        #   in Loop: Header=BB37_167 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_167
.LBB37_168:                             # %if.then4.i250
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB37_170
# BB#169:                               # %if.then5.i252
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB37_171
.LBB37_170:                             # %if.else.i255
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB37_171:                             # %if.end6.i264
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_173
# BB#172:                               # %if.then11.i265
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_173:                             # %get_cse_reg_info.exit267
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB37_174:                             # %cond.end441
	movslq	20(%rax), %rax
	movq	qty_table(%rip), %rdx
	leaq	(%rax,%rax,2), %rsi
	movq	$4, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movl	%r13d, 40(%rdx,%rax)
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB37_218
# BB#175:                               # %if.then450
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rdx, 64(%rsp)          # 8-byte Spill
	movq	%r12, %r14
	movq	48(%rsp), %rax          # 8-byte Reload
	andq	%r15, %rax
	movq	%r15, %r13
	movq	table(,%rax,8), %rbx
	testq	%rbx, %rbx
	je	.LBB37_185
# BB#176:
	movq	72(%rsp), %r12          # 8-byte Reload
	andq	%r13, %r12
	movabsq	$0, %r15
.LBB37_177:                             # %for.body.i275
                                        # =>This Inner Loop Header: Depth=1
	movl	72(%rbx), %eax
	cmpq	%r12, %rax
	jne	.LBB37_183
# BB#178:                               # %land.lhs.true.i282
                                        #   in Loop: Header=BB37_177 Depth=1
	movq	(%rbx), %rsi
	movzbl	(%r14), %eax
	cmpq	%r14, %rsi
	jne	.LBB37_180
# BB#179:                               # %land.lhs.true.i282
                                        #   in Loop: Header=BB37_177 Depth=1
	cmpq	$61, %rax
	je	.LBB37_184
.LBB37_180:                             # %lor.lhs.false.i288
                                        #   in Loop: Header=BB37_177 Depth=1
	cmpq	$61, %rax
	movq	%r15, %rdx
	je	.LBB37_182
# BB#181:                               # %lor.lhs.false.i288
                                        #   in Loop: Header=BB37_177 Depth=1
	movabsq	$1, %rdx
.LBB37_182:                             # %lor.lhs.false.i288
                                        #   in Loop: Header=BB37_177 Depth=1
	movq	%r14, %rdi
	callq	exp_equiv_p
	testq	%r13, %rax
	jne	.LBB37_184
.LBB37_183:                             # %for.inc.i292
                                        #   in Loop: Header=BB37_177 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB37_177
	jmp	.LBB37_185
.LBB37_218:                             # %if.else
	movq	$4, %rcx
	shlq	%cl, %rsi
	movq	%r12, 16(%rdx,%rsi)
	movl	%r15d, 24(%rdx,%rsi)
	jmp	.LBB37_260
.LBB37_184:                             # %lookup.exit294
	testq	%rbx, %rbx
	jne	.LBB37_204
.LBB37_185:                             # %if.then454
	xorq	%rsi, %rsi
	xorq	%rdx, %rdx
	movq	%r14, %rbx
	movq	%rbx, %rdi
	callq	insert_regs
	testq	%r13, %rax
	movq	48(%rsp), %rdx          # 8-byte Reload
	je	.LBB37_203
# BB#186:                               # %if.then457
	movq	%rbx, %rdi
	callq	rehash_using_reg
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB37_201
# BB#187:                               # %land.lhs.true462
	movl	8(%rbx), %r12d
	cmpq	$53, %r12
	jb	.LBB37_201
# BB#188:                               # %cond.true468
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r12
	jne	.LBB37_190
# BB#189:                               # %cond.true468
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_200
.LBB37_190:                             # %cond.false477
	movq	$7, %rcx
	movq	%r12, %r14
	shrq	%cl, %r14
	xorq	%r12, %r14
	andq	$127, %r14
	movq	reg_hash(,%r14,8), %rcx
	testq	%rcx, %rcx
	je	.LBB37_194
# BB#191:
	movq	%rcx, %rax
.LBB37_193:                             # %for.body.i309
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r12, %rdx
	je	.LBB37_199
# BB#192:                               # %for.cond.i305
                                        #   in Loop: Header=BB37_193 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_193
.LBB37_194:                             # %if.then4.i311
	movq	cse_reg_info_free_list(%rip), %rax
	testq	%rax, %rax
	je	.LBB37_196
# BB#195:                               # %if.then5.i313
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB37_197
.LBB37_201:                             # %cond.false486
	movq	%rbx, %rdi
	movq	72(%rsp), %rsi          # 8-byte Reload
	callq	canon_hash
	movq	%rax, %rdx
	jmp	.LBB37_202
.LBB37_251:                             # %if.else.i59
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB37_252:                             # %if.end6.i
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r14d, 20(%rax)
	movl	%r14d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_254
# BB#253:                               # %if.then11.i
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_254:                             # %get_cse_reg_info.exit
	movl	%r14d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB37_255:                             # %cond.end590
	movl	20(%rax), %edx
	addq	$7808, %rdx             # imm = 0x1E80
	movq	%r12, %r14
	movq	%r13, %r15
.LBB37_257:                             # %cond.end596
	andq	$31, %rdx
.LBB37_258:                             # %if.end599
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	movq	%r15, %rcx
	callq	insert
	movq	%rax, %r13
	movq	8(%rsp), %rax           # 8-byte Reload
	andq	$1, %rax
	movb	%al, 76(%r13)
	movq	40(%rsp), %rax          # 8-byte Reload
.LBB37_259:                             # %if.end603
	movq	48(%rax), %rdi
	movq	%rax, %rbx
	movq	48(%r13), %rsi
	callq	merge_equiv_classes
	movq	%rbx, last_jump_equiv_class(%rip)
	jmp	.LBB37_260
.LBB37_196:                             # %if.else.i316
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
.LBB37_197:                             # %if.end6.i325
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r12d, 20(%rax)
	movl	%r12d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_199
# BB#198:                               # %if.then11.i326
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_199:                             # %get_cse_reg_info.exit328
	movl	%r12d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB37_200:                             # %cond.end482
	movl	20(%rax), %edx
	addq	$7808, %rdx             # imm = 0x1E80
.LBB37_202:                             # %cond.end488
	andq	$31, %rdx
.LBB37_203:                             # %if.end491
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	movq	%rbx, %r14
	movq	72(%rsp), %rcx          # 8-byte Reload
	callq	insert
	movq	8(%rsp), %rcx           # 8-byte Reload
	andq	$1, %rcx
	movb	%cl, 76(%rax)
.LBB37_204:                             # %if.end495
	movq	$4, %rcx
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	$0, 16(%rsi,%rax)
	movl	8(%r14), %r15d
	movl	cached_regno(%rip), %eax
	cmpq	%rax, %r15
	jne	.LBB37_206
# BB#205:                               # %if.end495
	movq	cached_cse_reg_info(%rip), %rax
	testq	%rax, %rax
	jne	.LBB37_217
.LBB37_206:                             # %cond.false504
	movq	%rdx, %r12
	movq	$7, %rcx
	movq	%r15, %rbx
	shrq	%cl, %rbx
	xorq	%r15, %rbx
	andq	$127, %rbx
	movq	reg_hash(,%rbx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB37_210
# BB#207:
	movq	%rcx, %rax
.LBB37_209:                             # %for.body.i343
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rax), %edx
	cmpq	%r15, %rdx
	je	.LBB37_216
# BB#208:                               # %for.cond.i339
                                        #   in Loop: Header=BB37_209 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB37_209
.LBB37_210:                             # %if.then4.i345
	movq	cse_reg_info_free_list(%rip), %rax
	movq	%rsi, %r14
	testq	%rax, %rax
	je	.LBB37_212
# BB#211:                               # %if.then5.i347
	movq	8(%rax), %rdx
	movq	%rdx, cse_reg_info_free_list(%rip)
	jmp	.LBB37_213
.LBB37_212:                             # %if.else.i350
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%rbx,8), %rcx
.LBB37_213:                             # %if.end6.i359
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%rbx,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r13d, 28(%rax)
	movl	%r15d, 20(%rax)
	movl	%r15d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_215
# BB#214:                               # %if.then11.i360
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_215:                             # %get_cse_reg_info.exit362
	movq	%r14, %rsi
.LBB37_216:                             # %get_cse_reg_info.exit362
	movq	%r12, %rdx
	movl	%r15d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB37_217:                             # %cond.end509
	movl	20(%rax), %eax
	movq	$4, %rcx
	shlq	%cl, %rdx
	movl	%eax, 24(%rsi,%rdx)
.LBB37_260:                             # %return
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB37_154:                             # %if.else.i221
	movq	$32, %rdi
	callq	xmalloc
	movq	reg_hash(,%r14,8), %rcx
.LBB37_155:                             # %if.end6.i230
	movq	%rcx, (%rax)
	movq	%rax, reg_hash(,%r14,8)
	movq	$1, %rcx
	movl	%ecx, 24(%rax)
	movl	%r15d, 28(%rax)
	movl	%r13d, 20(%rax)
	movl	%r13d, 16(%rax)
	movq	cse_reg_info_used_list(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpq	$0, cse_reg_info_used_list_end(%rip)
	movq	%rax, cse_reg_info_used_list(%rip)
	jne	.LBB37_157
# BB#156:                               # %if.then11.i231
	movq	%rax, cse_reg_info_used_list_end(%rip)
.LBB37_157:                             # %get_cse_reg_info.exit233
	movl	%r13d, cached_regno(%rip)
	movq	%rax, cached_cse_reg_info(%rip)
.LBB37_158:                             # %cond.end414
	movl	20(%rax), %eax
	addq	$7808, %rax             # imm = 0x1E80
	movq	%r12, %r14
	jmp	.LBB37_159
.Ltmp554:
	.size	record_jump_cond, .Ltmp554-record_jump_cond
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Equivalence chain for "
	.size	.L.str, 23

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	": \n"
	.size	.L.str1, 4

	.type	uid_cuid,@object        # @uid_cuid
	.local	uid_cuid
	.comm	uid_cuid,8,8
	.type	max_uid,@object         # @max_uid
	.local	max_uid
	.comm	max_uid,4,4
	.type	cse_jumps_altered,@object # @cse_jumps_altered
	.local	cse_jumps_altered
	.comm	cse_jumps_altered,4,4
	.type	recorded_label_ref,@object # @recorded_label_ref
	.local	recorded_label_ref
	.comm	recorded_label_ref,1,1
	.type	constant_pool_entries_cost,@object # @constant_pool_entries_cost
	.local	constant_pool_entries_cost
	.comm	constant_pool_entries_cost,4,4
	.type	max_reg,@object         # @max_reg
	.local	max_reg
	.comm	max_reg,4,4
	.type	max_insn_uid,@object    # @max_insn_uid
	.local	max_insn_uid
	.comm	max_insn_uid,4,4
	.type	reg_eqv_table,@object   # @reg_eqv_table
	.local	reg_eqv_table
	.comm	reg_eqv_table,8,8
	.type	n_elements_made,@object # @n_elements_made
	.local	n_elements_made
	.comm	n_elements_made,4,4
	.type	cse_altered,@object     # @cse_altered
	.local	cse_altered
	.comm	cse_altered,1,1
	.type	cse_basic_block_start,@object # @cse_basic_block_start
	.local	cse_basic_block_start
	.comm	cse_basic_block_start,4,4
	.type	cse_basic_block_end,@object # @cse_basic_block_end
	.local	cse_basic_block_end
	.comm	cse_basic_block_end,4,4
	.type	max_qty,@object         # @max_qty
	.local	max_qty
	.comm	max_qty,4,4
	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	";; Processing block from %d to %d, %d sets.\n"
	.size	.L.str3, 45

	.type	max_elements_made,@object # @max_elements_made
	.local	max_elements_made
	.comm	max_elements_made,4,4
	.type	qty_table,@object       # @qty_table
	.local	qty_table
	.comm	qty_table,8,8
	.type	prev_insn,@object       # @prev_insn
	.local	prev_insn
	.comm	prev_insn,8,8
	.type	next_qty,@object        # @next_qty
	.local	next_qty
	.comm	next_qty,4,4
	.type	.L.str4,@object         # @.str4
.L.str4:
	.asciz	"cse.c"
	.size	.L.str4, 6

	.type	.L__FUNCTION__.cse_basic_block,@object # @__FUNCTION__.cse_basic_block
.L__FUNCTION__.cse_basic_block:
	.asciz	"cse_basic_block"
	.size	.L__FUNCTION__.cse_basic_block, 16

	.type	last_jump_equiv_class,@object # @last_jump_equiv_class
	.local	last_jump_equiv_class
	.comm	last_jump_equiv_class,8,8
	.type	cached_regno,@object    # @cached_regno
	.local	cached_regno
	.comm	cached_regno,4,4
	.type	cached_cse_reg_info,@object # @cached_cse_reg_info
	.local	cached_cse_reg_info
	.comm	cached_cse_reg_info,8,8
	.type	.L__FUNCTION__.cse_set_around_loop,@object # @__FUNCTION__.cse_set_around_loop
.L__FUNCTION__.cse_set_around_loop:
	.asciz	"cse_set_around_loop"
	.size	.L__FUNCTION__.cse_set_around_loop, 20

	.type	hard_regs_in_table,@object # @hard_regs_in_table
	.local	hard_regs_in_table
	.comm	hard_regs_in_table,8,8
	.type	do_not_record,@object   # @do_not_record
	.local	do_not_record
	.comm	do_not_record,1,1
	.type	hash_arg_in_memory,@object # @hash_arg_in_memory
	.local	hash_arg_in_memory
	.comm	hash_arg_in_memory,1,1
	.type	.L__FUNCTION__.canon_hash,@object # @__FUNCTION__.canon_hash
.L__FUNCTION__.canon_hash:
	.asciz	"canon_hash"
	.size	.L__FUNCTION__.canon_hash, 11

	.type	reg_hash,@object        # @reg_hash
	.local	reg_hash
	.comm	reg_hash,1024,16
	.type	cse_reg_info_free_list,@object # @cse_reg_info_free_list
	.local	cse_reg_info_free_list
	.comm	cse_reg_info_free_list,8,8
	.type	cse_reg_info_used_list,@object # @cse_reg_info_used_list
	.local	cse_reg_info_used_list
	.comm	cse_reg_info_used_list,8,8
	.type	cse_reg_info_used_list_end,@object # @cse_reg_info_used_list_end
	.local	cse_reg_info_used_list_end
	.comm	cse_reg_info_used_list_end,8,8
	.type	table,@object           # @table
	.local	table
	.comm	table,256,16
	.type	.L__FUNCTION__.exp_equiv_p,@object # @__FUNCTION__.exp_equiv_p
.L__FUNCTION__.exp_equiv_p:
	.asciz	"exp_equiv_p"
	.size	.L__FUNCTION__.exp_equiv_p, 12

	.type	.L__FUNCTION__.invalidate,@object # @__FUNCTION__.invalidate
.L__FUNCTION__.invalidate:
	.asciz	"invalidate"
	.size	.L__FUNCTION__.invalidate, 11

	.type	free_element_chain,@object # @free_element_chain
	.local	free_element_chain
	.comm	free_element_chain,8,8
	.type	this_insn,@object       # @this_insn
	.local	this_insn
	.comm	this_insn,8,8
	.type	.L__FUNCTION__.insert,@object # @__FUNCTION__.insert
.L__FUNCTION__.insert:
	.asciz	"insert"
	.size	.L__FUNCTION__.insert, 7

	.type	.L__FUNCTION__.make_new_qty,@object # @__FUNCTION__.make_new_qty
.L__FUNCTION__.make_new_qty:
	.asciz	"make_new_qty"
	.size	.L__FUNCTION__.make_new_qty, 13

	.type	.L__FUNCTION__.make_regs_eqv,@object # @__FUNCTION__.make_regs_eqv
.L__FUNCTION__.make_regs_eqv:
	.asciz	"make_regs_eqv"
	.size	.L__FUNCTION__.make_regs_eqv, 14


	.ident	"clang version 3.5 (trunk)"
	.section	".note.GNU-stack","",@progbits
