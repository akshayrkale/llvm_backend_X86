	.file	"combine.c.bc"
	.text
	.globl	combine_instructions
	.align	16, 0x90
	.type	combine_instructions,@function
combine_instructions:                   # @combine_instructions
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp6:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp7:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp8:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp9:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp10:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp11:
	.cfi_def_cfa_offset 64
.Ltmp12:
	.cfi_offset %rbx, -48
.Ltmp13:
	.cfi_offset %r12, -40
.Ltmp14:
	.cfi_offset %r13, -32
.Ltmp15:
	.cfi_offset %r14, -24
.Ltmp16:
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	%r14, (%rsp)            # 8-byte Spill
	xorq	%rax, %rax
	movl	%eax, 12(%rsp)
	movl	%eax, combine_attempts(%rip)
	movl	%eax, combine_merges(%rip)
	movl	%eax, combine_extras(%rip)
	movl	%eax, combine_successes(%rip)
	movl	%r15d, combine_max_regno(%rip)
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r15
	movq	$8, %rsi
	movq	%r15, %rdi
	callq	xcalloc
	movq	%rax, reg_nonzero_bits(%rip)
	movq	$1, %rsi
	movq	$1, %r13
	movq	%r15, %rdi
	callq	xcalloc
	movq	%rax, reg_sign_bit_copies(%rip)
	movq	$3, %rcx
	movq	%r15, %r12
	shlq	%cl, %r12
	movq	%r12, %rdi
	callq	xmalloc
	movq	%rax, reg_last_death(%rip)
	movq	%r12, %rdi
	callq	xmalloc
	movq	%rax, reg_last_set(%rip)
	movq	%r12, %rdi
	callq	xmalloc
	movq	%rax, reg_last_set_value(%rip)
	movq	$2, %rcx
	movq	%r15, %rbx
	shlq	%cl, %rbx
	movq	%rbx, %rdi
	callq	xmalloc
	movq	%rax, reg_last_set_table_tick(%rip)
	movq	%rbx, %rdi
	callq	xmalloc
	movq	%rax, reg_last_set_label(%rip)
	movq	%r15, %rdi
	callq	xmalloc
	movq	%rax, reg_last_set_invalid(%rip)
	movq	%rbx, %rdi
	callq	xmalloc
	movq	%rax, reg_last_set_mode(%rip)
	movq	%r12, %rdi
	callq	xmalloc
	movq	%rax, reg_last_set_nonzero_bits(%rip)
	movq	%r15, %rdi
	callq	xmalloc
	movl	combine_max_regno(%rip), %r15d
	movq	reg_last_death(%rip), %rdi
	movq	%rax, reg_last_set_sign_bit_copies(%rip)
	movq	$3, %rcx
	movq	%r15, %r12
	shlq	%cl, %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	callq	memset
	movq	reg_last_set(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	callq	memset
	movq	reg_last_set_value(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	callq	memset
	movq	reg_last_set_table_tick(%rip), %rdi
	movq	$2, %rcx
	movq	%r15, %rbx
	shlq	%cl, %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	callq	memset
	movq	reg_last_set_label(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	callq	memset
	movq	reg_last_set_invalid(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	callq	memset
	movq	reg_last_set_mode(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	callq	memset
	movq	reg_last_set_nonzero_bits(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	callq	memset
	movq	reg_last_set_sign_bit_copies(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	callq	memset
	callq	init_recog_no_volatile
	testq	%r14, %r14
	movabsq	$0, %rbx
	je	.LBB0_5
# BB#1:
	movq	(%rsp), %rax            # 8-byte Reload
	xorq	%rdx, %rdx
	.align	16, 0x90
.LBB0_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movslq	8(%rax), %rbx
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rsi, %rbx
	jge	.LBB0_4
# BB#3:                                 # %for.body
                                        #   in Loop: Header=BB0_2 Depth=1
	movq	%rdx, %rbx
.LBB0_4:                                # %for.body
                                        #   in Loop: Header=BB0_2 Depth=1
	movq	24(%rax), %rax
	testq	%rax, %rax
	movq	%rbx, %rdx
	jne	.LBB0_2
.LBB0_5:                                # %for.end
	leaq	1(%rbx), %rdi
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	$2, %rcx
	shlq	%cl, %rdi
	callq	xmalloc
	movq	%rax, uid_cuid(%rip)
	movl	%ebx, max_uid_cuid(%rip)
	movq	$64, %rdi
	movq	$1, %rsi
	xorq	%rdx, %rdx
	callq	mode_for_size
	movl	n_basic_blocks(%rip), %edi
	movl	%eax, nonzero_bits_mode(%rip)
	xorq	%rbx, %rbx
	movb	%bl, nonzero_sign_valid(%rip)
	movl	%r13d, label_tick(%rip)
	callq	sbitmap_alloc
	movq	%rax, refresh_blocks(%rip)
	movq	%rax, %rdi
	callq	sbitmap_zero
	cmpq	$0, (%rsp)              # 8-byte Folded Reload
	movb	%bl, need_refresh(%rip)
	je	.LBB0_12
# BB#6:
	movabsq	$set_nonzero_bits_and_sign_copies, %r15
	movq	(%rsp), %rbx            # 8-byte Reload
	.align	16, 0x90
.LBB0_7:                                # %for.body42
                                        # =>This Inner Loop Header: Depth=1
	movslq	8(%rbx), %rax
	movq	uid_cuid(%rip), %rcx
	movl	%r13d, (%rcx,%rax,4)
	movl	%r13d, subst_low_cuid(%rip)
	movq	%rbx, subst_insn(%rip)
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$105, %rcx
	jne	.LBB0_9
# BB#8:                                 # %if.then52
                                        #   in Loop: Header=BB0_7 Depth=1
	movq	32(%rbx), %rdi
	xorq	%rdx, %rdx
	movq	%r15, %rsi
	callq	note_stores
	movq	%rbx, %rdi
	callq	record_dead_and_set_regs
	movl	(%rbx), %eax
.LBB0_9:                                # %if.end56
                                        #   in Loop: Header=BB0_7 Depth=1
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$36, %rax
	jne	.LBB0_11
# BB#10:                                # %if.then61
                                        #   in Loop: Header=BB0_7 Depth=1
	movl	label_tick(%rip), %eax
	incq	%rax
	movl	%eax, label_tick(%rip)
.LBB0_11:                               # %for.inc64
                                        #   in Loop: Header=BB0_7 Depth=1
	movq	24(%rbx), %rbx
	incq	%r13
	testq	%rbx, %rbx
	jne	.LBB0_7
.LBB0_12:                               # %for.end68
	movq	$1, %rax
	movb	%al, nonzero_sign_valid(%rip)
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movl	%ecx, this_basic_block(%rip)
	movl	%eax, label_tick(%rip)
	xorq	%rax, %rax
	movl	combine_max_regno(%rip), %r15d
	movl	%eax, last_call_cuid(%rip)
	movq	reg_last_death(%rip), %rdi
	movl	%eax, mem_last_set(%rip)
	movq	$3, %rcx
	movq	%r15, %r12
	shlq	%cl, %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	callq	memset
	movq	reg_last_set(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	callq	memset
	movq	reg_last_set_value(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	callq	memset
	movq	reg_last_set_table_tick(%rip), %rdi
	movq	$2, %rcx
	movq	%r15, %rbx
	shlq	%cl, %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	callq	memset
	movq	reg_last_set_label(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	callq	memset
	movq	reg_last_set_invalid(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	callq	memset
	movq	reg_last_set_mode(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	callq	memset
	movq	reg_last_set_nonzero_bits(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r12, %rdx
	callq	memset
	movq	reg_last_set_sign_bit_copies(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	callq	memset
	cmpq	$0, (%rsp)              # 8-byte Folded Reload
	je	.LBB0_39
# BB#13:
	leaq	12(%rsp), %r15
	movq	(%rsp), %rax            # 8-byte Reload
	.align	16, 0x90
.LBB0_14:                               # %for.body71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_21 Depth 2
                                        #     Child Loop BB0_24 Depth 2
                                        #       Child Loop BB0_27 Depth 3
                                        #     Child Loop BB0_32 Depth 2
                                        #       Child Loop BB0_34 Depth 3
	movl	this_basic_block(%rip), %edx
	incq	%rdx
	movq	$32, %rcx
	movq	%rdx, %rsi
	movslq	n_basic_blocks(%rip), %rdi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	%rax, %r13
	cmpq	%rdi, %rsi
	jge	.LBB0_17
# BB#15:                                # %land.lhs.true
                                        #   in Loop: Header=BB0_14 Depth=1
	movq	$32, %rcx
	movq	%rdx, %rax
	movq	basic_block_info(%rip), %rsi
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	32(%rsi,%rax,8), %rax
	movq	(%rax), %rax
	cmpq	%r13, %rax
	jne	.LBB0_17
# BB#16:                                # %if.then80
                                        #   in Loop: Header=BB0_14 Depth=1
	movl	%edx, this_basic_block(%rip)
.LBB0_17:                               # %if.end82
                                        #   in Loop: Header=BB0_14 Depth=1
	movzbl	(%r13), %eax
	cmpq	$36, %rax
	jne	.LBB0_19
# BB#18:                                # %if.then87
                                        #   in Loop: Header=BB0_14 Depth=1
	movl	label_tick(%rip), %eax
	incq	%rax
	movl	%eax, label_tick(%rip)
	jmp	.LBB0_38
	.align	16, 0x90
.LBB0_19:                               # %if.else
                                        #   in Loop: Header=BB0_14 Depth=1
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB0_38
# BB#20:                                # %if.then96
                                        #   in Loop: Header=BB0_14 Depth=1
	movq	32(%r13), %rsi
	movq	%r13, %rdi
	callq	check_promoted_subreg
	movq	48(%r13), %rbx
	testq	%rbx, %rbx
	je	.LBB0_36
	.align	16, 0x90
.LBB0_21:                               # %for.body105
                                        #   Parent Loop BB0_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbx), %rsi
	xorq	%rdx, %rdx
	movq	%r13, %rdi
	movq	%r15, %rcx
	callq	try_combine
	testq	%rax, %rax
	jne	.LBB0_14
# BB#22:                                # %for.inc114
                                        #   in Loop: Header=BB0_21 Depth=2
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB0_21
# BB#23:                                # %for.cond122.preheader
                                        #   in Loop: Header=BB0_14 Depth=1
	movq	48(%r13), %r14
	testq	%r14, %r14
	je	.LBB0_36
.LBB0_24:                               # %for.body124
                                        #   Parent Loop BB0_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB0_27 Depth 3
	movq	8(%r14), %r12
	movzbl	(%r12), %eax
	cmpq	$37, %rax
	je	.LBB0_29
# BB#25:                                # %if.end133
                                        #   in Loop: Header=BB0_24 Depth=2
	movq	48(%r12), %rbx
	jmp	.LBB0_27
	.align	16, 0x90
.LBB0_26:                               # %for.cond137
                                        #   in Loop: Header=BB0_27 Depth=3
	movq	16(%rbx), %rbx
.LBB0_27:                               # %for.cond137
                                        #   Parent Loop BB0_14 Depth=1
                                        #     Parent Loop BB0_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rbx, %rbx
	je	.LBB0_29
# BB#28:                                # %for.body139
                                        #   in Loop: Header=BB0_27 Depth=3
	movq	8(%rbx), %rdx
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%r15, %rcx
	callq	try_combine
	testq	%rax, %rax
	je	.LBB0_26
	jmp	.LBB0_14
	.align	16, 0x90
.LBB0_29:                               # %for.inc153
                                        #   in Loop: Header=BB0_24 Depth=2
	movq	16(%r14), %r14
	testq	%r14, %r14
	jne	.LBB0_24
# BB#30:                                # %for.cond161.preheader
                                        #   in Loop: Header=BB0_14 Depth=1
	movq	48(%r13), %r14
	jmp	.LBB0_32
.LBB0_31:                               # %for.cond161.loopexit
                                        #   in Loop: Header=BB0_32 Depth=2
	movq	16(%r14), %r14
.LBB0_32:                               # %for.cond161.loopexit
                                        #   Parent Loop BB0_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB0_34 Depth 3
	testq	%r14, %r14
	je	.LBB0_36
# BB#33:                                # %for.body163
                                        #   in Loop: Header=BB0_32 Depth=2
	movq	16(%r14), %r12
	testq	%r12, %r12
	je	.LBB0_36
	.align	16, 0x90
.LBB0_34:                               # %for.body169
                                        #   Parent Loop BB0_14 Depth=1
                                        #     Parent Loop BB0_32 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	8(%r14), %rsi
	movq	8(%r12), %rdx
	movq	%r13, %rdi
	movq	%r15, %rcx
	callq	try_combine
	testq	%rax, %rax
	jne	.LBB0_14
# BB#35:                                # %for.inc181
                                        #   in Loop: Header=BB0_34 Depth=3
	movq	16(%r12), %r12
	testq	%r12, %r12
	jne	.LBB0_34
	jmp	.LBB0_31
.LBB0_36:                               # %for.end190
                                        #   in Loop: Header=BB0_14 Depth=1
	movzbl	(%r13), %eax
	cmpq	$37, %rax
	je	.LBB0_38
# BB#37:                                # %if.then195
                                        #   in Loop: Header=BB0_14 Depth=1
	movq	%r13, %rdi
	callq	record_dead_and_set_regs
	.align	16, 0x90
.LBB0_38:                               # %for.cond69.backedge
                                        #   in Loop: Header=BB0_14 Depth=1
	movq	24(%r13), %rax
	testq	%rax, %rax
	jne	.LBB0_14
.LBB0_39:                               # %for.end204
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	delete_noop_moves
	movzbl	need_refresh(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB0_41
# BB#40:                                # %if.then206
	movq	refresh_blocks(%rip), %rdi
	movq	$2, %rsi
	movq	$1, %rdx
	callq	update_life_info
.LBB0_41:                               # %if.end207
	movq	refresh_blocks(%rip), %rdi
	callq	free
	movq	reg_nonzero_bits(%rip), %rdi
	callq	free
	movq	reg_sign_bit_copies(%rip), %rdi
	callq	free
	movq	reg_last_death(%rip), %rdi
	callq	free
	movq	reg_last_set(%rip), %rdi
	callq	free
	movq	reg_last_set_value(%rip), %rdi
	callq	free
	movq	reg_last_set_table_tick(%rip), %rdi
	callq	free
	movq	reg_last_set_label(%rip), %rdi
	callq	free
	movq	reg_last_set_invalid(%rip), %rdi
	callq	free
	movq	reg_last_set_mode(%rip), %rdi
	callq	free
	movq	reg_last_set_nonzero_bits(%rip), %rdi
	callq	free
	movq	reg_last_set_sign_bit_copies(%rip), %rdi
	callq	free
	movq	uid_cuid(%rip), %rdi
	callq	free
	movq	undobuf+8(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB0_43
	.align	16, 0x90
.LBB0_42:                               # %for.body211
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	callq	free
	testq	%rbx, %rbx
	movq	%rbx, %rdi
	jne	.LBB0_42
.LBB0_43:                               # %for.end214
	movl	combine_attempts(%rip), %eax
	movl	total_attempts(%rip), %ecx
	addq	%rax, %rcx
	movl	%ecx, total_attempts(%rip)
	movl	combine_merges(%rip), %eax
	movl	total_merges(%rip), %ecx
	addq	%rax, %rcx
	movl	%ecx, total_merges(%rip)
	movl	combine_extras(%rip), %eax
	movl	total_extras(%rip), %ecx
	addq	%rax, %rcx
	movl	%ecx, total_extras(%rip)
	movl	combine_successes(%rip), %eax
	movl	total_successes(%rip), %ecx
	movq	$0, undobuf+8(%rip)
	addq	%rax, %rcx
	movl	%ecx, total_successes(%rip)
	xorq	%rax, %rax
	movb	%al, nonzero_sign_valid(%rip)
	callq	init_recog
	movl	12(%rsp), %eax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp17:
	.size	combine_instructions, .Ltmp17-combine_instructions
	.cfi_endproc

	.align	16, 0x90
	.type	set_nonzero_bits_and_sign_copies,@function
set_nonzero_bits_and_sign_copies:       # @set_nonzero_bits_and_sign_copies
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp22:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp23:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp24:
	.cfi_def_cfa_offset 32
.Ltmp25:
	.cfi_offset %rbx, -32
.Ltmp26:
	.cfi_offset %r14, -24
.Ltmp27:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movzbl	(%rbx), %eax
	movq	%rsi, %r14
	cmpq	$61, %rax
	jne	.LBB1_17
# BB#1:                                 # %land.lhs.true
	movl	8(%rbx), %esi
	cmpq	$53, %rsi
	jb	.LBB1_17
# BB#2:                                 # %land.lhs.true2
	movq	basic_block_info(%rip), %rax
	movq	32(%rax), %rax
	movq	64(%rax), %rdi
	callq	bitmap_bit_p
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	jne	.LBB1_17
# BB#3:                                 # %land.lhs.true8
	movzbl	2(%rbx), %eax
	movzbl	mode_bitsize(%rax,%rax), %ecx
	cmpq	$64, %rcx
	ja	.LBB1_17
# BB#4:                                 # %if.then
	testq	%r14, %r14
	je	.LBB1_16
# BB#5:                                 # %lor.lhs.false
	movzbl	(%r14), %ecx
	cmpq	$49, %rcx
	je	.LBB1_16
# BB#6:                                 # %if.end
	movq	%r14, %rdi
	callq	expand_field_assignment
	movq	%rax, %r14
	movq	8(%r14), %rax
	cmpq	%rbx, %rax
	je	.LBB1_10
# BB#7:                                 # %lor.lhs.false41
	movl	(%rax), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB1_15
# BB#8:                                 # %land.lhs.true49
	movq	8(%rax), %rax
	movq	$16, %rcx
	movzbl	2(%rax), %esi
	shrq	%cl, %rdx
	andq	$255, %rdx
	movzbl	mode_size(%rdx), %ecx
	movzbl	mode_size(%rsi), %edx
	cmpq	%rdx, %rcx
	jbe	.LBB1_15
# BB#9:                                 # %land.lhs.true49
	cmpq	%rbx, %rax
	jne	.LBB1_15
.LBB1_10:                               # %if.then82
	movl	8(%rbx), %eax
	movq	reg_nonzero_bits(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	cmpq	$-1, %rax
	je	.LBB1_12
# BB#11:                                # %if.then93
	movq	16(%r14), %rdi
	movl	nonzero_bits_mode(%rip), %esi
	callq	nonzero_bits
	movl	8(%rbx), %ecx
	movq	reg_nonzero_bits(%rip), %rdx
	orq	%rax, (%rdx,%rcx,8)
.LBB1_12:                               # %if.end100
	movq	16(%r14), %rdi
	movzbl	2(%rbx), %esi
	callq	num_sign_bit_copies
	movl	8(%rbx), %ecx
	movq	reg_sign_bit_copies(%rip), %rdx
	movzbl	(%rdx,%rcx), %esi
	testq	%rsi, %rsi
	je	.LBB1_14
# BB#13:                                # %if.end100
	andq	%rax, %r15
	cmpq	%r15, %rsi
	jbe	.LBB1_17
.LBB1_14:                               # %if.then125
	movb	%al, (%rdx,%rcx)
	jmp	.LBB1_17
.LBB1_15:                               # %if.else
	movzbl	2(%rbx), %eax
.LBB1_16:                               # %if.end149
	movq	mode_mask_array(,%rax,8), %rax
	movl	8(%rbx), %ecx
	movq	reg_nonzero_bits(%rip), %rdx
	movq	%rax, (%rdx,%rcx,8)
	movq	reg_sign_bit_copies(%rip), %rax
	movq	$1, %rdx
	movb	%dl, (%rax,%rcx)
.LBB1_17:                               # %if.end149
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp28:
	.size	set_nonzero_bits_and_sign_copies, .Ltmp28-set_nonzero_bits_and_sign_copies
	.cfi_endproc

	.align	16, 0x90
	.type	record_dead_and_set_regs,@function
record_dead_and_set_regs:               # @record_dead_and_set_regs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp35:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp36:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp37:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp38:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp39:
	.cfi_def_cfa_offset 48
.Ltmp40:
	.cfi_offset %rbx, -48
.Ltmp41:
	.cfi_offset %r12, -40
.Ltmp42:
	.cfi_offset %r13, -32
.Ltmp43:
	.cfi_offset %r14, -24
.Ltmp44:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	56(%r14), %rbx
	testq	%rbx, %rbx
	je	.LBB2_24
# BB#1:
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movabsq	$4294967288, %r12       # imm = 0xFFFFFFF8
	movabsq	$0, %r13
	.align	16, 0x90
.LBB2_2:                                # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_21 Depth 2
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$131072, %rax           # imm = 0x20000
	jne	.LBB2_3
# BB#22:                                # %if.then102
                                        #   in Loop: Header=BB2_2 Depth=1
	movq	8(%rbx), %rdi
	xorq	%rdx, %rdx
	movq	%r14, %rsi
	callq	record_value_for_reg
	jmp	.LBB2_23
	.align	16, 0x90
.LBB2_3:                                # %for.body
                                        #   in Loop: Header=BB2_2 Depth=1
	andq	%r15, %rax
	cmpq	$65536, %rax            # imm = 0x10000
	jne	.LBB2_23
# BB#4:                                 # %land.lhs.true
                                        #   in Loop: Header=BB2_2 Depth=1
	movq	8(%rbx), %rax
	movl	(%rax), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB2_23
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB2_2 Depth=1
	movl	8(%rax), %esi
	cmpq	$52, %rsi
	movq	$1, %rax
	ja	.LBB2_19
# BB#6:                                 # %cond.true
                                        #   in Loop: Header=BB2_2 Depth=1
	movq	%rsi, %rax
	andq	%r12, %rax
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$8, %rax
	je	.LBB2_10
# BB#7:                                 # %cond.true
                                        #   in Loop: Header=BB2_2 Depth=1
	leaq	-21(%rsi), %rax
	andq	%r15, %rax
	cmpq	$8, %rax
	jb	.LBB2_10
# BB#8:                                 # %cond.true
                                        #   in Loop: Header=BB2_2 Depth=1
	leaq	-45(%rsi), %rax
	andq	%r15, %rax
	cmpq	$8, %rax
	jb	.LBB2_10
# BB#9:                                 # %cond.true
                                        #   in Loop: Header=BB2_2 Depth=1
	leaq	-29(%rsi), %rax
	andq	%r15, %rax
	cmpq	$7, %rax
	jbe	.LBB2_10
# BB#14:                                # %cond.false
                                        #   in Loop: Header=BB2_2 Depth=1
	cmpq	$24, %rdx
	jne	.LBB2_15
# BB#17:                                # %cond.true63
                                        #   in Loop: Header=BB2_2 Depth=1
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB2_19
.LBB2_10:                               # %cond.true27
                                        #   in Loop: Header=BB2_2 Depth=1
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB2_19
# BB#11:                                # %lor.rhs
                                        #   in Loop: Header=BB2_2 Depth=1
	cmpq	$6, %rcx
	movq	%r13, %rax
	jne	.LBB2_13
# BB#12:                                # %lor.rhs
                                        #   in Loop: Header=BB2_2 Depth=1
	movabsq	$1, %rax
.LBB2_13:                               # %lor.rhs
                                        #   in Loop: Header=BB2_2 Depth=1
	incq	%rax
	jmp	.LBB2_19
.LBB2_15:                               # %cond.false
                                        #   in Loop: Header=BB2_2 Depth=1
	cmpq	$18, %rdx
	jne	.LBB2_18
# BB#16:                                # %cond.true52
                                        #   in Loop: Header=BB2_2 Depth=1
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB2_19
.LBB2_18:                               # %cond.false67
                                        #   in Loop: Header=BB2_2 Depth=1
	movl	target_flags(%rip), %edi
	movzbl	mode_size(%rdx), %eax
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
.LBB2_19:                               # %cond.end88
                                        #   in Loop: Header=BB2_2 Depth=1
	addq	%rsi, %rax
	andq	%r15, %rax
	cmpq	%rax, %rsi
	jae	.LBB2_23
# BB#20:                                # %for.body94.lr.ph
                                        #   in Loop: Header=BB2_2 Depth=1
	movq	$3, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	.align	16, 0x90
.LBB2_21:                               # %for.body94
                                        #   Parent Loop BB2_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	reg_last_death(%rip), %rcx
	movq	%r14, (%rcx,%rdx)
	incq	%rsi
	movq	%rsi, %rcx
	andq	%r15, %rcx
	addq	$8, %rdx
	cmpq	%rax, %rcx
	jne	.LBB2_21
	.align	16, 0x90
.LBB2_23:                               # %for.inc107
                                        #   in Loop: Header=BB2_2 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB2_2
.LBB2_24:                               # %for.end111
	movzbl	(%r14), %eax
	cmpq	$34, %rax
	jne	.LBB2_36
# BB#25:
	xorq	%rcx, %rcx
	xorq	%rax, %rax
	.align	16, 0x90
.LBB2_26:                               # %for.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	regs_invalidated_by_call(%rip), %rdx
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	%rsi, %rdx
	je	.LBB2_28
# BB#27:                                # %if.then123
                                        #   in Loop: Header=BB2_26 Depth=1
	movq	reg_last_set_value(%rip), %rdx
	movq	$0, (%rdx,%rcx,8)
	movq	reg_last_set_mode(%rip), %rdx
	movl	%eax, (%rdx,%rcx,4)
	movq	reg_last_set_nonzero_bits(%rip), %rdx
	movq	$0, (%rdx,%rcx,8)
	movq	reg_last_set_sign_bit_copies(%rip), %rdx
	movb	%al, (%rdx,%rcx)
	movq	reg_last_death(%rip), %rdx
	movq	$0, (%rdx,%rcx,8)
.LBB2_28:                               # %for.inc135
                                        #   in Loop: Header=BB2_26 Depth=1
	incq	%rcx
	cmpq	$53, %rcx
	jne	.LBB2_26
# BB#29:                                # %for.end137
	movslq	8(%r14), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB2_37
# BB#30:                                # %land.lhs.true2.i.lr.ph
	leaq	8(%r14), %rcx
	.align	16, 0x90
.LBB2_31:                               # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r14), %edx
	cmpq	$32, %rdx
	jne	.LBB2_34
# BB#32:                                # %land.rhs.i
                                        #   in Loop: Header=BB2_31 Depth=1
	movq	32(%r14), %rdx
	movzbl	(%rdx), %edx
	cmpq	$48, %rdx
	jne	.LBB2_34
# BB#33:                                # %while.body.i
                                        #   in Loop: Header=BB2_31 Depth=1
	movq	24(%r14), %r14
	movslq	8(%r14), %rdx
	leaq	8(%r14), %rcx
	cmpq	%rax, %rdx
	jg	.LBB2_31
.LBB2_34:                               # %while.end.i
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB2_35
.LBB2_37:                               # %cond.false143
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %eax
	movl	%eax, mem_last_set(%rip)
	movl	%eax, last_call_cuid(%rip)
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB2_36:                               # %if.end151
	movq	32(%r14), %rdi
	movabsq	$record_dead_and_set_regs_1, %rsi
	movq	%r14, %rdx
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	note_stores  # TAILCALL
.LBB2_35:                               # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp45:
	.size	record_dead_and_set_regs, .Ltmp45-record_dead_and_set_regs
	.cfi_endproc

	.align	16, 0x90
	.type	check_promoted_subreg,@function
check_promoted_subreg:                  # @check_promoted_subreg
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp52:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp53:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp54:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp55:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp56:
	.cfi_def_cfa_offset 48
.Ltmp57:
	.cfi_offset %rbx, -48
.Ltmp58:
	.cfi_offset %r12, -40
.Ltmp59:
	.cfi_offset %r13, -32
.Ltmp60:
	.cfi_offset %r14, -24
.Ltmp61:
	.cfi_offset %r15, -16
	movq	%rsi, %r14
	movl	(%r14), %r15d
	movq	%rdi, %r12
	movq	%r15, %rax
	andq	$268500991, %rax        # imm = 0x1000FFFF
	cmpq	$268435519, %rax        # imm = 0x1000003F
	jne	.LBB3_17
# BB#1:                                 # %land.lhs.true3
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB3_17
# BB#2:                                 # %if.then
	movq	$16, %rcx
	shrq	%cl, %r15
	andq	$255, %r15
	movzbl	mode_bitsize(%r15,%r15), %ecx
	cmpq	$64, %rcx
	ja	.LBB3_27
.LBB3_3:                                # %if.end.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_5 Depth 2
	movq	48(%r12), %rbx
	testq	%rbx, %rbx
	je	.LBB3_27
# BB#4:                                 # %for.body.lr.ph.i
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	8(%rax), %r13d
	.align	16, 0x90
.LBB3_5:                                # %for.body.i
                                        #   Parent Loop BB3_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbx), %r12
	movzbl	(%r12), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB3_12
# BB#6:                                 # %cond.true.i
                                        #   in Loop: Header=BB3_5 Depth=2
	movq	32(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB3_8
# BB#7:                                 # %cond.false.i
                                        #   in Loop: Header=BB3_5 Depth=2
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	single_set_2
.LBB3_8:                                # %cond.end33.i
                                        #   in Loop: Header=BB3_5 Depth=2
	testq	%rax, %rax
	je	.LBB3_12
# BB#9:                                 # %lor.lhs.false.i
                                        #   in Loop: Header=BB3_5 Depth=2
	movq	8(%rax), %rdx
	movl	(%rdx), %ecx
	movq	%rcx, %rsi
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$61, %rsi
	jne	.LBB3_12
# BB#10:                                # %lor.lhs.false43.i
                                        #   in Loop: Header=BB3_5 Depth=2
	movl	8(%rdx), %edx
	cmpq	%r13, %rdx
	jne	.LBB3_12
# BB#11:                                # %lor.lhs.false52.i
                                        #   in Loop: Header=BB3_5 Depth=2
	movq	8(%r14), %rdx
	movl	(%rdx), %edx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	je	.LBB3_13
	.align	16, 0x90
.LBB3_12:                               # %if.then67.i
                                        #   in Loop: Header=BB3_5 Depth=2
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB3_5
	jmp	.LBB3_27
.LBB3_13:                               # %if.end71.i
                                        #   in Loop: Header=BB3_3 Depth=1
	movq	reg_last_set(%rip), %rcx
	movq	(%rcx,%r13,8), %rcx
	cmpq	%r12, %rcx
	jne	.LBB3_16
# BB#14:                                # %if.then76.i
                                        #   in Loop: Header=BB3_3 Depth=1
	movzbl	3(%r14), %ecx
	testq	$4, %rcx
	je	.LBB3_16
# BB#15:                                # %if.then81.i
                                        #   in Loop: Header=BB3_3 Depth=1
	movq	mode_mask_array(,%r15,8), %rcx
	movq	reg_last_set_nonzero_bits(%rip), %rdx
	andq	%rcx, (%rdx,%r13,8)
.LBB3_16:                               # %if.end87.i
                                        #   in Loop: Header=BB3_3 Depth=1
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	je	.LBB3_3
	jmp	.LBB3_27
.LBB3_17:                               # %if.else
	andq	$65535, %r15            # imm = 0xFFFF
	movzbl	rtx_length(%r15), %eax
	testq	%rax, %rax
	je	.LBB3_27
# BB#18:
	movq	rtx_format(,%r15,8), %r15
	xorq	%rbx, %rbx
	.align	16, 0x90
.LBB3_19:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_25 Depth 2
	movsbq	(%r15,%rbx), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$69, %rax
	je	.LBB3_23
# BB#20:                                # %for.body
                                        #   in Loop: Header=BB3_19 Depth=1
	cmpq	$86, %rax
	jne	.LBB3_21
.LBB3_23:                               # %sw.bb23
                                        #   in Loop: Header=BB3_19 Depth=1
	movq	8(%r14,%rbx,8), %rax
	testq	%rax, %rax
	je	.LBB3_26
# BB#24:                                # %for.cond30.preheader
                                        #   in Loop: Header=BB3_19 Depth=1
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	movq	$1, %r13
	jle	.LBB3_26
	.align	16, 0x90
.LBB3_25:                               # %for.body37
                                        #   Parent Loop BB3_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%r13,8), %rsi
	movq	%r12, %rdi
	callq	check_promoted_subreg
	movq	8(%r14,%rbx,8), %rax
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%r13, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%r13
	cmpq	%rdx, %rsi
	jl	.LBB3_25
	jmp	.LBB3_26
	.align	16, 0x90
.LBB3_21:                               # %for.body
                                        #   in Loop: Header=BB3_19 Depth=1
	cmpq	$101, %rax
	jne	.LBB3_26
# BB#22:                                # %sw.bb
                                        #   in Loop: Header=BB3_19 Depth=1
	movq	8(%r14,%rbx,8), %rsi
	movq	%r12, %rdi
	callq	check_promoted_subreg
	.align	16, 0x90
.LBB3_26:                               # %for.inc44
                                        #   in Loop: Header=BB3_19 Depth=1
	movzbl	(%r14), %eax
	incq	%rbx
	movzbl	rtx_length(%rax), %eax
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jl	.LBB3_19
.LBB3_27:                               # %if.end47
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp62:
	.size	check_promoted_subreg, .Ltmp62-check_promoted_subreg
	.cfi_endproc

	.align	16, 0x90
	.type	try_combine,@function
try_combine:                            # @try_combine
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp69:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp70:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp71:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp72:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp73:
	.cfi_def_cfa_offset 48
	subq	$336, %rsp              # imm = 0x150
.Ltmp74:
	.cfi_def_cfa_offset 384
.Ltmp75:
	.cfi_offset %rbx, -48
.Ltmp76:
	.cfi_offset %r12, -40
.Ltmp77:
	.cfi_offset %r13, -32
.Ltmp78:
	.cfi_offset %r14, -24
.Ltmp79:
	.cfi_offset %r15, -16
	movq	%rcx, %rbx
	movq	%rdx, %r15
	movq	%rsi, %r14
	movq	%rdi, %r13
	movq	$0, 320(%rsp)
	movq	$0, 312(%rsp)
	movq	$0, 288(%rsp)
	movq	$0, 280(%rsp)
                                        # kill: RDI<def> R13<kill>
	callq	cant_combine_insn_p
	xorq	%r12, %r12
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_691
# BB#1:                                 # %lor.lhs.false
	movq	%rbx, 216(%rsp)         # 8-byte Spill
	movq	%r14, %rdi
	movq	%rcx, %rbx
	callq	cant_combine_insn_p
	movq	%rbx, %rcx
	testq	%rcx, %rax
	jne	.LBB4_691
# BB#2:                                 # %lor.lhs.false3
	testq	%r15, %r15
	je	.LBB4_692
# BB#3:                                 # %land.lhs.true
	movq	%r15, %rdi
	callq	cant_combine_insn_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_691
# BB#4:                                 # %land.lhs.true8
	movl	combine_attempts(%rip), %eax
	incq	%rax
	movl	%eax, combine_attempts(%rip)
	movq	$0, undobuf+16(%rip)
	movq	$0, newpat_used_regs(%rip)
	movslq	8(%r15), %rdx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rdx
	jle	.LBB4_10
# BB#5:                                 # %land.lhs.true2.i.lr.ph
	leaq	8(%r15), %rcx
	movq	%r15, %rdx
.LBB4_6:                                # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB4_9
# BB#7:                                 # %land.rhs.i
                                        #   in Loop: Header=BB4_6 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB4_9
# BB#8:                                 # %while.body.i
                                        #   in Loop: Header=BB4_6 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rsi
	jg	.LBB4_6
.LBB4_9:                                # %while.end.i
	movslq	(%rcx), %rdx
	cmpq	%rax, %rdx
	jg	.LBB4_168
.LBB4_10:                               # %cond.false
	movq	uid_cuid(%rip), %r8
	leaq	(%r8,%rdx,4), %rdx
	movslq	8(%r14), %rsi
	movl	(%rdx), %edx
	cmpq	%rax, %rsi
	jle	.LBB4_16
# BB#11:                                # %land.lhs.true2.i4179.lr.ph
	leaq	8(%r14), %rsi
	movq	%r14, %rdi
.LBB4_12:                               # %land.lhs.true2.i4179
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdi), %ecx
	cmpq	$32, %rcx
	jne	.LBB4_15
# BB#13:                                # %land.rhs.i4185
                                        #   in Loop: Header=BB4_12 Depth=1
	movq	32(%rdi), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB4_15
# BB#14:                                # %while.body.i4188
                                        #   in Loop: Header=BB4_12 Depth=1
	movq	24(%rdi), %rdi
	movslq	8(%rdi), %rcx
	leaq	8(%rdi), %rsi
	cmpq	%rax, %rcx
	jg	.LBB4_12
.LBB4_15:                               # %while.end.i4192
	movslq	(%rsi), %rsi
	cmpq	%rax, %rsi
	jg	.LBB4_168
.LBB4_16:                               # %if.end30
	movslq	(%r8,%rsi,4), %rax
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	movq	%r14, %rax
                                        # kill: R14<def> RAX<kill>
	jg	.LBB4_18
# BB#17:                                # %if.end30
	movq	%r15, %r14
.LBB4_18:                               # %if.end30
	movq	%r13, %r12
	jg	.LBB4_20
# BB#19:                                # %if.end30
	movq	%rax, %r15
.LBB4_20:                               # %if.end30
	testq	%r14, %r14
	movq	$0, added_links_insn(%rip)
	movq	%r15, %r13
	jne	.LBB4_102
	jmp	.LBB4_21
.LBB4_692:                              # %if.end30.thread
	movq	%r13, %r12
	movq	%r14, %r13
	movl	combine_attempts(%rip), %eax
	incq	%rax
	movl	%eax, combine_attempts(%rip)
	movq	$0, undobuf+16(%rip)
	movq	$0, newpat_used_regs(%rip)
	movq	$0, added_links_insn(%rip)
.LBB4_21:                               # %land.lhs.true32
	movzbl	(%r12), %eax
	cmpq	$32, %rax
	movq	%r12, %r15
	jne	.LBB4_55
# BB#22:                                # %land.lhs.true34
	movq	32(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB4_55
# BB#23:                                # %land.lhs.true40
	movq	16(%rax), %rdx
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB4_55
# BB#24:                                # %land.lhs.true50
	movl	8(%rdx), %eax
	cmpq	$53, %rax
	jb	.LBB4_55
# BB#25:                                # %land.lhs.true60
	movq	$1, %rsi
	movq	%r15, %rdi
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB4_55
# BB#26:                                # %land.lhs.true69
	movq	32(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$39, %rax
	jne	.LBB4_55
# BB#27:                                # %land.lhs.true76
	movq	32(%r15), %rax
	movq	8(%rax), %rdi
	callq	side_effects_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_55
# BB#28:                                # %land.lhs.true85
	movq	32(%r15), %rax
	movq	8(%rax), %rsi
	movzbl	(%rsi), %ecx
	cmpq	$64, %rcx
	je	.LBB4_55
# BB#29:                                # %land.lhs.true85
	cmpq	$133, %rcx
	je	.LBB4_55
# BB#30:                                # %land.lhs.true105
	movq	16(%rax), %rdi
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_55
# BB#31:                                # %land.lhs.true120
	movq	%r13, %rdi
	callq	next_real_insn
	cmpq	%r15, %rax
	jne	.LBB4_55
# BB#32:                                # %if.then123
	movq	%r15, %r12
	movq	32(%r13), %r14
	movq	%r13, %rbx
	movq	8(%r14), %rax
	movslq	(%rax), %rsi
	xorq	%rcx, %rcx
	testq	%rsi, %rsi
	jle	.LBB4_40
# BB#33:
	movq	$1, %r15
.LBB4_34:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax,%r15,8), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	je	.LBB4_36
# BB#35:                                # %for.body
                                        #   in Loop: Header=BB4_34 Depth=1
	cmpq	$49, %rdx
	jne	.LBB4_38
.LBB4_36:                               # %land.lhs.true148
                                        #   in Loop: Header=BB4_34 Depth=1
	movq	32(%r12), %rax
	movq	8(%rax), %rax
	movq	8(%rcx), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_39
# BB#37:                                # %land.lhs.true148.for.inc_crit_edge
                                        #   in Loop: Header=BB4_34 Depth=1
	movq	8(%r14), %rax
.LBB4_38:                               # %for.inc
                                        #   in Loop: Header=BB4_34 Depth=1
	movslq	(%rax), %rsi
	movq	$32, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	%r15, %rcx
	incq	%r15
	cmpq	%rsi, %rdx
	jl	.LBB4_34
	jmp	.LBB4_40
.LBB4_39:                               # %land.lhs.true148.for.end_crit_edge
	movq	8(%r14), %rax
	movl	(%rax), %esi
	decq	%r15
	movq	%r15, %rcx
.LBB4_40:                               # %for.end
	movq	%rsi, %rdx
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rdi, %rdx
	andq	%rdi, %rcx
	cmpq	%rdx, %rcx
	movq	%rbx, %r13
	movq	%r12, %r15
	jne	.LBB4_55
# BB#41:                                # %for.end
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jle	.LBB4_55
# BB#42:
	movq	$1, %rdx
.LBB4_43:                               # %for.body181
                                        # =>This Inner Loop Header: Depth=1
	movq	%r15, %r9
	movq	%r13, %rbx
	movq	(%rax,%rdx,8), %rcx
	movzbl	(%rcx), %edi
	cmpq	$47, %rdi
	je	.LBB4_45
# BB#44:                                # %for.body181
                                        #   in Loop: Header=BB4_43 Depth=1
	cmpq	$49, %rdi
	jne	.LBB4_54
.LBB4_45:                               # %land.lhs.true201
                                        #   in Loop: Header=BB4_43 Depth=1
	movq	32(%r9), %rdi
	movq	8(%rcx), %rcx
	movq	16(%rdi), %rdi
	cmpq	%rdi, %rcx
	je	.LBB4_46
.LBB4_54:                               # %for.inc256
                                        #   in Loop: Header=BB4_43 Depth=1
	movq	$32, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movq	$32, %rcx
	movq	%rsi, %r8
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	incq	%rdx
	cmpq	%r8, %rdi
	movq	%rbx, %r13
	movq	%r9, %r15
	jl	.LBB4_43
.LBB4_55:                               # %land.lhs.true262
	movzbl	(%r13), %eax
	movzbl	rtx_class(%rax), %eax
	leaq	32(%r13), %rbx
	cmpq	$105, %rax
	jne	.LBB4_86
# BB#56:                                # %cond.true269
	movq	(%rbx), %r14
	movzbl	(%r14), %eax
	cmpq	$47, %rax
	je	.LBB4_58
# BB#57:                                # %cond.false281
	movq	%r13, %rdi
	movq	%r14, %rsi
	callq	single_set_2
	movq	%rax, %r14
.LBB4_58:                               # %cond.end289
	testq	%r14, %r14
	je	.LBB4_86
# BB#59:                                # %land.lhs.true293
	movq	16(%r14), %rax
	movl	(%rax), %edx
	movq	%rdx, %rcx
	andq	$65534, %rcx            # imm = 0xFFFE
	cmpq	$54, %rcx
	jne	.LBB4_86
# BB#60:                                # %land.lhs.true309
	movq	8(%r14), %r11
	movl	(%r11), %edi
	movq	%rdi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB4_86
# BB#61:                                # %land.lhs.true317
	movq	$16, %rcx
	shrq	%cl, %rdi
	andq	$255, %rdi
	movl	mode_class(,%rdi,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB4_86
# BB#62:                                # %land.lhs.true327
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rdi), %edi
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	addq	$4, %rsi
	movq	%rsi, %rcx
	andq	$2147483644, %rcx       # imm = 0x7FFFFFFC
	shlq	$1, %rcx
	cmpq	%rcx, %rdi
	jne	.LBB4_86
# BB#63:                                # %land.lhs.true341
	movq	32(%r15), %r9
	movzbl	(%r9), %ecx
	cmpq	$47, %rcx
	jne	.LBB4_86
# BB#64:                                # %land.lhs.true349
	movq	8(%r9), %r8
	movl	(%r8), %r10d
	movq	%r10, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB4_86
# BB#65:                                # %land.lhs.true360
	movq	8(%r8), %rcx
	cmpq	%r11, %rcx
	jne	.LBB4_86
# BB#66:                                # %land.lhs.true375
	movq	$16, %rcx
	shrq	%cl, %r10
	andq	$255, %r10
	movl	mode_class(,%r10,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB4_86
# BB#67:                                # %land.lhs.true389
	movzbl	mode_size(%r10), %ecx
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rdi, %rsi
	cmpq	%rsi, %rcx
	jne	.LBB4_86
# BB#68:                                # %land.lhs.true407
	movq	16(%r9), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_86
# BB#69:                                # %if.then418
	movq	%rbx, 208(%rsp)         # 8-byte Spill
	movq	%r15, %r12
	movq	%r13, %rbx
	leaq	16(%r14), %r15
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$54, %rdx
	jne	.LBB4_71
# BB#70:                                # %if.then426
	movq	8(%rax), %r13
	movq	$63, %rcx
	movq	%r13, %rax
	sarq	%cl, %rax
	jmp	.LBB4_72
.LBB4_86:                               # %land.lhs.true597
	movq	(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB4_87
# BB#88:                                # %land.lhs.true605
	movq	8(%rax), %rax
	movslq	(%rax), %rcx
	cmpq	$2, %rcx
	jl	.LBB4_87
# BB#89:                                # %land.lhs.true615
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB4_87
# BB#90:                                # %land.lhs.true628
	movq	%r15, %r12
	movq	8(%rcx), %rdx
	movzbl	2(%rdx), %edx
	movl	mode_class(,%rdx,4), %edx
	cmpq	$4, %rdx
	jne	.LBB4_91
# BB#92:                                # %land.lhs.true647
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	xorq	%r14, %r14
	cmpq	$74, %rdx
	jne	.LBB4_102
# BB#93:                                # %land.lhs.true663
	movq	16(%rcx), %rdx
	movq	const_int_rtx+512(%rip), %rsi
	cmpq	%rsi, %rdx
	jne	.LBB4_102
# BB#94:                                # %land.lhs.true680
	movq	16(%rax), %rax
	movzbl	(%rax), %edx
	cmpq	$47, %rdx
	jne	.LBB4_102
# BB#95:                                # %land.lhs.true693
	movq	8(%rax), %rdx
	movzbl	(%rdx), %edx
	cmpq	$61, %rdx
	jne	.LBB4_102
# BB#96:                                # %land.lhs.true709
	movq	8(%rcx), %rdi
	movq	16(%rax), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_102
# BB#97:                                # %if.then737
	movq	(%rbx), %rax
	movq	8(%rax), %rax
	movslq	(%rax), %rcx
	decq	%rcx
.LBB4_98:                               # %for.cond746
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rdx
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$2, %rsi
	jl	.LBB4_100
# BB#99:                                # %for.body749
                                        #   in Loop: Header=BB4_98 Depth=1
	movq	8(%rax,%rdx,8), %rcx
	movzbl	(%rcx), %esi
	leaq	-1(%rdx), %rcx
	cmpq	$49, %rsi
	je	.LBB4_98
.LBB4_100:                              # %for.end766
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$1, %rdx
	jne	.LBB4_102
# BB#101:                               # %if.then769
	movq	16(%rax), %rax
	movq	%r13, %r14
	movl	8(%r14), %edx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, (%rsp)
	movq	$0, 16(%rsp)
	movq	$32, %rdi
	xorq	%rsi, %rsi
	xorq	%rcx, %rcx
	movq	$0, 8(%rsp)
	movq	%r14, %r8
	movq	%rax, %r9
	callq	gen_rtx_fmt_iuueiee
	movq	%rax, %r15
	movq	%r15, subst_prev_insn(%rip)
	movq	32(%r14), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	32(%r14), %rax
	movq	%r14, %r13
	movq	32(%r15), %rcx
	movq	%r15, %r14
	movq	16(%rax), %rax
	movq	8(%rcx), %rcx
	addq	$8, %rax
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	do_SUBST
	jmp	.LBB4_102
.LBB4_87:
	movq	%r15, %r12
	xorq	%r14, %r14
.LBB4_102:                              # %if.end809
	leaq	304(%rsp), %rcx
	leaq	296(%rsp), %r8
	xorq	%rdx, %rdx
	movq	%r13, %rdi
	movq	%r12, %rsi
	callq	can_combine_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_105
# BB#103:                               # %lor.lhs.false812
	movq	%rcx, %rbx
	movq	%r14, %r15
	testq	%r15, %r15
	je	.LBB4_111
# BB#104:                               # %land.lhs.true814
	leaq	288(%rsp), %rcx
	leaq	280(%rsp), %r8
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	callq	can_combine_p
	testq	%rbx, %rax
	je	.LBB4_105
# BB#112:                               # %land.rhs830
	movq	304(%rsp), %rdi
	movq	296(%rsp), %rsi
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	callq	reg_overlap_mentioned_p
	movq	288(%rsp), %rdi
	movq	280(%rsp), %rsi
	movq	%rsi, 184(%rsp)         # 8-byte Spill
	movq	%rax, 144(%rsp)         # 8-byte Spill
	callq	reg_overlap_mentioned_p
	testq	%rbx, %rax
	movabsq	$0, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$1, %r14
	movq	%rax, 160(%rsp)         # 8-byte Spill
	je	.LBB4_114
# BB#113:                               # %land.rhs830
	movq	%r14, 160(%rsp)         # 8-byte Spill
.LBB4_114:                              # %land.rhs830
	movq	304(%rsp), %rdi
	movq	184(%rsp), %rsi         # 8-byte Reload
	callq	reg_overlap_mentioned_p
	testq	%rbx, %rax
	movabsq	$0, %rax
	je	.LBB4_116
# BB#115:                               # %land.rhs830
	movq	%r14, %rax
.LBB4_116:                              # %land.rhs830
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movq	288(%rsp), %rdi
	movq	208(%rsp), %rsi         # 8-byte Reload
	callq	reg_overlap_mentioned_p
	testq	%rbx, %rax
	jne	.LBB4_118
# BB#117:                               # %land.rhs830
	movq	%r14, 200(%rsp)         # 8-byte Spill
.LBB4_118:                              # %land.rhs830
	movq	168(%rsp), %rax         # 8-byte Reload
	jmp	.LBB4_119
.LBB4_105:                              # %if.then817
	movq	undobuf(%rip), %rax
	testq	%rax, %rax
	je	.LBB4_110
	.align	16, 0x90
.LBB4_106:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%rax), %edx
	movq	(%rax), %rcx
	testq	%rdx, %rdx
	jne	.LBB4_107
# BB#108:                               # %if.else.i
                                        #   in Loop: Header=BB4_106 Depth=1
	movq	16(%rax), %rdx
	movq	24(%rax), %rsi
	movq	%rdx, (%rsi)
	jmp	.LBB4_109
	.align	16, 0x90
.LBB4_107:                              # %if.then.i4251
                                        #   in Loop: Header=BB4_106 Depth=1
	movl	16(%rax), %edx
	movq	24(%rax), %rsi
	movl	%edx, (%rsi)
.LBB4_109:                              # %if.end.i
                                        #   in Loop: Header=BB4_106 Depth=1
	movq	undobuf+8(%rip), %rdx
	movq	%rdx, (%rax)
	movq	%rax, undobuf+8(%rip)
	testq	%rcx, %rcx
	movq	%rcx, %rax
	jne	.LBB4_106
	jmp	.LBB4_110
.LBB4_111:                              # %land.end827
	movq	304(%rsp), %rdi
	movq	296(%rsp), %rsi
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	callq	reg_overlap_mentioned_p
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movq	$0, 184(%rsp)           # 8-byte Folded Spill
	xorq	%rax, %rax
	movq	$0, 160(%rsp)           # 8-byte Folded Spill
	movq	$0, 200(%rsp)           # 8-byte Folded Spill
.LBB4_119:                              # %land.end833
	testq	%r15, %r15
	je	.LBB4_120
# BB#121:                               # %land.end833
	movabsq	$1, %r8
	jmp	.LBB4_122
.LBB4_120:
	movabsq	$0, %r8
.LBB4_122:                              # %land.end833
	movq	%r12, 192(%rsp)         # 8-byte Spill
	movq	304(%rsp), %rdx
	movq	288(%rsp), %rcx
	movq	%r12, %rdi
	leaq	32(%rdi), %r12
	andq	%rax, %r8
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rax         # 8-byte Reload
	andq	%rax, %r8
	leaq	312(%rsp), %r9
	movq	%r12, %rsi
	callq	combinable_i3pat
	testq	%rbx, %rax
	je	.LBB4_123
# BB#128:                               # %if.end848
	movq	208(%rsp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$78, %rax
	je	.LBB4_133
# BB#129:                               # %lor.lhs.false853
	testq	%r15, %r15
	je	.LBB4_131
# BB#130:                               # %land.lhs.true856
	movq	184(%rsp), %rax         # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$78, %rax
	je	.LBB4_133
.LBB4_131:                              # %lor.lhs.false861
	movq	(%r12), %rax
	movzbl	(%rax), %ecx
	xorq	%rdx, %rdx
	cmpq	$47, %rcx
	jne	.LBB4_134
# BB#132:                               # %land.lhs.true869
	movq	16(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$78, %rax
	jne	.LBB4_134
.LBB4_133:                              # %if.then880
	movq	$1, %rdx
.LBB4_134:                              # %if.end881
	movq	%r12, %r14
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	304(%rsp), %rsi
	movq	192(%rsp), %rdi         # 8-byte Reload
	callq	dead_or_set_p
	movq	%rax, %r12
	testq	%rbx, %r12
	jne	.LBB4_135
# BB#136:                               # %if.end881
	movabsq	$1, %rax
	jmp	.LBB4_137
.LBB4_123:                              # %if.then847
	movq	undobuf(%rip), %rax
	testq	%rax, %rax
	je	.LBB4_110
	.align	16, 0x90
.LBB4_124:                              # %for.body.i4285
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%rax), %edx
	movq	(%rax), %rcx
	testq	%rdx, %rdx
	jne	.LBB4_125
# BB#126:                               # %if.else.i4292
                                        #   in Loop: Header=BB4_124 Depth=1
	movq	16(%rax), %rdx
	movq	24(%rax), %rsi
	movq	%rdx, (%rsi)
	jmp	.LBB4_127
.LBB4_125:                              # %if.then.i4289
                                        #   in Loop: Header=BB4_124 Depth=1
	movl	16(%rax), %edx
	movq	24(%rax), %rsi
	movl	%edx, (%rsi)
.LBB4_127:                              # %if.end.i4294
                                        #   in Loop: Header=BB4_124 Depth=1
	movq	undobuf+8(%rip), %rdx
	movq	%rdx, (%rax)
	movq	%rax, undobuf+8(%rip)
	testq	%rcx, %rcx
	movq	%rcx, %rax
	jne	.LBB4_124
	jmp	.LBB4_110
.LBB4_135:
	movabsq	$0, %rax
.LBB4_137:                              # %if.end881
	movq	%rax, 112(%rsp)         # 8-byte Spill
	xorq	%rax, %rax
	testq	%r15, %r15
	je	.LBB4_147
# BB#138:                               # %land.rhs886
	movq	288(%rsp), %rsi
	movq	192(%rsp), %rdi         # 8-byte Reload
	callq	dead_or_set_p
	cmpq	$0, 200(%rsp)           # 8-byte Folded Reload
	jne	.LBB4_144
# BB#139:                               # %cond.false890
	movq	$1, %rcx
	testq	%rbx, %rax
	jne	.LBB4_143
# BB#140:                               # %lor.rhs
	movq	288(%rsp), %rsi
	movq	%r13, %rdi
	callq	dead_or_set_p
	testq	%rbx, %rax
	je	.LBB4_141
# BB#142:                               # %lor.rhs
	movabsq	$1, %rcx
	jmp	.LBB4_143
.LBB4_91:
	xorq	%r14, %r14
	jmp	.LBB4_102
.LBB4_141:
	movabsq	$0, %rcx
.LBB4_143:                              # %lor.end
	movq	%rcx, %rax
.LBB4_144:                              # %cond.end895
	testq	%rbx, %rax
	jne	.LBB4_145
# BB#146:                               # %cond.end895
	movabsq	$1, %rax
	jmp	.LBB4_147
.LBB4_145:
	movabsq	$0, %rax
.LBB4_147:                              # %land.end900
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	32(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB4_149
# BB#148:                               # %cond.true909
	movq	304(%rsp), %rdx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	208(%rsp), %rcx         # 8-byte Reload
	callq	gen_rtx_fmt_ee
.LBB4_149:                              # %cond.end915
	testq	%rbx, %r12
	je	.LBB4_151
# BB#150:
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	%r15, 176(%rsp)         # 8-byte Spill
	jmp	.LBB4_152
.LBB4_151:                              # %if.then918
	movq	%r15, 176(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	copy_rtx
	movq	%rax, 104(%rsp)         # 8-byte Spill
.LBB4_152:                              # %if.end920
	movl	combine_merges(%rip), %eax
	leaq	8(%r13), %r15
	incq	%rax
	movl	%eax, combine_merges(%rip)
	callq	max_reg_num
	movl	flag_expensive_optimizations(%rip), %ecx
	movq	192(%rsp), %rdx         # 8-byte Reload
	movq	%rdx, subst_insn(%rip)
	testq	%rcx, %rcx
	je	.LBB4_153
# BB#154:                               # %if.then924
	movq	176(%rsp), %rdx         # 8-byte Reload
	testq	%rdx, %rdx
	je	.LBB4_162
# BB#155:                               # %if.then926
	movslq	8(%rdx), %rcx
	movslq	max_uid_cuid(%rip), %rdi
	cmpq	%rdi, %rcx
	jle	.LBB4_161
# BB#156:                               # %land.lhs.true2.i4332.lr.ph
	leaq	8(%rdx), %rcx
.LBB4_157:                              # %land.lhs.true2.i4332
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB4_160
# BB#158:                               # %land.rhs.i4338
                                        #   in Loop: Header=BB4_157 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB4_160
# BB#159:                               # %while.body.i4341
                                        #   in Loop: Header=BB4_157 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rdi, %rsi
	jg	.LBB4_157
.LBB4_160:                              # %while.end.i4345
	movslq	(%rcx), %rcx
	cmpq	%rdi, %rcx
	jg	.LBB4_168
.LBB4_161:                              # %cond.false934
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %eax
	movq	global_rtl(%rip), %rsi
	movl	%eax, subst_low_cuid(%rip)
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	%rsi, %rdx
	callq	subst
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	%rax, 280(%rsp)
	jmp	.LBB4_171
.LBB4_153:
	movq	%rax, 152(%rsp)         # 8-byte Spill
	jmp	.LBB4_171
.LBB4_162:                              # %if.else943
	movslq	(%r15), %rcx
	movslq	max_uid_cuid(%rip), %rdi
	cmpq	%rdi, %rcx
	jle	.LBB4_169
# BB#163:
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movq	%r15, %rcx
	movq	%r13, %rdx
.LBB4_164:                              # %land.lhs.true2.i4359
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB4_167
# BB#165:                               # %land.rhs.i4365
                                        #   in Loop: Header=BB4_164 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB4_167
# BB#166:                               # %while.body.i4368
                                        #   in Loop: Header=BB4_164 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rdi, %rsi
	jg	.LBB4_164
.LBB4_167:                              # %while.end.i4372
	movslq	(%rcx), %rcx
	cmpq	%rdi, %rcx
	jle	.LBB4_170
	jmp	.LBB4_168
.LBB4_169:                              # %cond.false951
	movq	%rax, 152(%rsp)         # 8-byte Spill
.LBB4_170:                              # %cond.end957
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %eax
	movq	global_rtl(%rip), %rsi
	movl	%eax, subst_low_cuid(%rip)
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	%rsi, %rdx
	callq	subst
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movq	%rax, 296(%rsp)
.LBB4_171:                              # %if.end961
	cmpq	$0, 176(%rsp)           # 8-byte Folded Reload
	jne	.LBB4_187
# BB#172:                               # %if.end961
	testq	%rbx, %r12
	jne	.LBB4_187
# BB#173:                               # %land.lhs.true966
	movq	(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB4_187
# BB#174:                               # %land.lhs.true974
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB4_187
# BB#175:                               # %land.lhs.true985
	movq	16(%rax), %rcx
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB4_187
# BB#176:                               # %land.lhs.true997
	movq	8(%rax), %rdi
	movq	304(%rsp), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB4_187
# BB#177:                               # %if.then1009
	movq	%r12, 128(%rsp)         # 8-byte Spill
	movq	(%r14), %rax
	movq	%rax, 328(%rsp)
	movq	16(%rax), %rdi
	addq	$8, %rdi
	movq	208(%rsp), %rsi         # 8-byte Reload
	callq	do_SUBST
	cmpq	$0, undobuf+16(%rip)
	je	.LBB4_179
# BB#178:
	movq	$0, 200(%rsp)           # 8-byte Folded Spill
	movq	176(%rsp), %r15         # 8-byte Reload
	jmp	.LBB4_194
.LBB4_187:                              # %if.else1084
	xorq	%rax, %rax
	movl	%eax, n_occurrences(%rip)
	movslq	(%r15), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB4_193
# BB#188:
	movq	%r13, %rcx
.LBB4_189:                              # %land.lhs.true2.i4386
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rcx), %edx
	cmpq	$32, %rdx
	jne	.LBB4_192
# BB#190:                               # %land.rhs.i4392
                                        #   in Loop: Header=BB4_189 Depth=1
	movq	32(%rcx), %rdx
	movzbl	(%rdx), %edx
	cmpq	$48, %rdx
	jne	.LBB4_192
# BB#191:                               # %while.body.i4395
                                        #   in Loop: Header=BB4_189 Depth=1
	movq	24(%rcx), %rcx
	movslq	8(%rcx), %rdx
	leaq	8(%rcx), %r15
	cmpq	%rax, %rdx
	jg	.LBB4_189
.LBB4_192:                              # %while.end.i4399
	movslq	(%r15), %rcx
	cmpq	%rax, %rcx
	jg	.LBB4_168
.LBB4_193:                              # %cond.false1092
	movq	%r12, 128(%rsp)         # 8-byte Spill
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movq	176(%rsp), %r15         # 8-byte Reload
	movl	(%rax), %eax
	movl	%eax, subst_low_cuid(%rip)
	movq	(%r14), %rdi
	movq	304(%rsp), %rsi
	movq	200(%rsp), %rax         # 8-byte Reload
	xorq	$1, %rax
	movq	160(%rsp), %r8          # 8-byte Reload
	andq	%rax, %r8
	xorq	%rcx, %rcx
	movq	208(%rsp), %rdx         # 8-byte Reload
	callq	subst
	movq	%rax, 328(%rsp)
	movq	$1, 200(%rsp)           # 8-byte Folded Spill
.LBB4_194:                              # %if.end1109
	movq	%r13, %r14
.LBB4_195:                              # %if.end1109
	xorq	%r12, %r12
	testq	%r15, %r15
	je	.LBB4_210
# BB#196:                               # %land.lhs.true1111
	movq	328(%rsp), %rax
	movzbl	(%rax), %eax
	cmpq	$49, %rax
	je	.LBB4_210
# BB#197:                               # %if.then1116
	movq	%r14, %r12
	movq	%r15, %r14
	movq	288(%rsp), %rdx
	leaq	328(%rsp), %rsi
	xorq	%rdi, %rdi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	xorq	%r9, %r9
	xorq	%r15, %r15
	callq	combinable_i3pat
	testq	%rbx, %rax
	je	.LBB4_198
# BB#203:                               # %if.end1120
	movl	%r15d, n_occurrences(%rip)
	movq	%r14, %r15
	movslq	8(%r15), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB4_209
# BB#204:                               # %land.lhs.true2.i4457.lr.ph
	leaq	8(%r15), %rcx
	movq	%r15, %rdx
.LBB4_205:                              # %land.lhs.true2.i4457
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB4_208
# BB#206:                               # %land.rhs.i4463
                                        #   in Loop: Header=BB4_205 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB4_208
# BB#207:                               # %while.body.i4466
                                        #   in Loop: Header=BB4_205 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rsi
	jg	.LBB4_205
.LBB4_208:                              # %while.end.i4470
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB4_168
.LBB4_209:                              # %cond.false1128
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movq	%r12, %r14
	movl	(%rax), %eax
	movq	328(%rsp), %rdi
	movq	288(%rsp), %rsi
	movl	%eax, subst_low_cuid(%rip)
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	184(%rsp), %rdx         # 8-byte Reload
	callq	subst
	movq	%rax, 328(%rsp)
	movq	$1, %r12
.LBB4_210:                              # %if.end1137
	callq	max_reg_num
	movq	%rbx, %rcx
	andq	%rcx, %rax
	movq	152(%rsp), %rdx         # 8-byte Reload
	andq	%rcx, %rdx
	cmpq	%rdx, %rax
	jne	.LBB4_215
# BB#211:                               # %lor.lhs.false1156
	movq	328(%rsp), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	je	.LBB4_215
# BB#212:                               # %lor.lhs.false1156
	cmpq	$47, %rax
	jne	.LBB4_220
# BB#213:                               # %land.lhs.true1166
	movq	16(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$78, %rax
	jne	.LBB4_220
# BB#214:                               # %land.lhs.true1166
	cmpq	$0, 120(%rsp)           # 8-byte Folded Reload
	jne	.LBB4_220
.LBB4_215:                              # %if.then1176
	movq	undobuf(%rip), %rax
	testq	%rax, %rax
	je	.LBB4_110
	.align	16, 0x90
.LBB4_216:                              # %for.body.i4481
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%rax), %edx
	movq	(%rax), %rcx
	testq	%rdx, %rdx
	jne	.LBB4_217
# BB#218:                               # %if.else.i4488
                                        #   in Loop: Header=BB4_216 Depth=1
	movq	16(%rax), %rdx
	movq	24(%rax), %rsi
	movq	%rdx, (%rsi)
	jmp	.LBB4_219
.LBB4_217:                              # %if.then.i4485
                                        #   in Loop: Header=BB4_216 Depth=1
	movl	16(%rax), %edx
	movq	24(%rax), %rsi
	movl	%edx, (%rsi)
.LBB4_219:                              # %if.end.i4490
                                        #   in Loop: Header=BB4_216 Depth=1
	movq	undobuf+8(%rip), %rdx
	movq	%rdx, (%rax)
	movq	%rax, undobuf+8(%rip)
	testq	%rcx, %rcx
	movq	%rcx, %rax
	jne	.LBB4_216
	jmp	.LBB4_110
.LBB4_220:                              # %if.end1177
	movq	%r12, 88(%rsp)          # 8-byte Spill
	movq	128(%rsp), %rax         # 8-byte Reload
	testq	%rcx, %rax
	jne	.LBB4_221
# BB#222:                               # %if.end1177
	movabsq	$1, %rax
	jmp	.LBB4_223
.LBB4_198:                              # %if.then1119
	movq	undobuf(%rip), %rax
	testq	%rax, %rax
	je	.LBB4_110
.LBB4_199:                              # %for.body.i4410
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%rax), %edx
	movq	(%rax), %rcx
	testq	%rdx, %rdx
	jne	.LBB4_200
# BB#201:                               # %if.else.i4417
                                        #   in Loop: Header=BB4_199 Depth=1
	movq	16(%rax), %rdx
	movq	24(%rax), %rsi
	movq	%rdx, (%rsi)
	jmp	.LBB4_202
.LBB4_200:                              # %if.then.i4414
                                        #   in Loop: Header=BB4_199 Depth=1
	movl	16(%rax), %edx
	movq	24(%rax), %rsi
	movl	%edx, (%rsi)
.LBB4_202:                              # %if.end.i4419
                                        #   in Loop: Header=BB4_199 Depth=1
	movq	undobuf+8(%rip), %rdx
	movq	%rdx, (%rax)
	movq	%rax, undobuf+8(%rip)
	testq	%rcx, %rcx
	movq	%rcx, %rax
	jne	.LBB4_199
	jmp	.LBB4_110
.LBB4_221:
	movabsq	$0, %rax
.LBB4_223:                              # %if.end1177
	movq	136(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r12         # 8-byte Reload
	movq	$0, 96(%rsp)            # 8-byte Folded Spill
	orq	%rcx, %rax
	je	.LBB4_224
# BB#225:                               # %if.then1181
	movq	%r12, 192(%rsp)         # 8-byte Spill
	movq	%r14, %r13
	movq	%r15, %r14
	movl	combine_extras(%rip), %eax
	incq	%rax
	movl	%eax, combine_extras(%rip)
	movzbl	(%rbx), %eax
	cmpq	$39, %rax
	jne	.LBB4_227
# BB#226:                               # %if.then1187
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	movq	112(%rsp), %rdx         # 8-byte Reload
	leaq	(%rcx,%rdx), %r12
	addq	%rax, %r12
	movq	%r12, %rdi
	movq	%rcx, %r15
	callq	rtvec_alloc
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movq	%rax, 328(%rsp)
	movq	8(%rax), %rdi
	movslq	(%rbx), %rdx
	addq	$8, %rdi
	addq	$8, %rbx
	movq	$3, %rcx
	shlq	%cl, %rdx
	movq	%rbx, %rsi
	callq	memcpy
	jmp	.LBB4_228
.LBB4_224:
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	jmp	.LBB4_238
.LBB4_227:                              # %if.else1208
	movq	112(%rsp), %rax         # 8-byte Reload
	leaq	1(%rcx,%rax), %r12
	movq	%r12, %rdi
	movq	%rcx, %r15
	callq	rtvec_alloc
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movq	%rax, 328(%rsp)
	movq	8(%rax), %rax
	movq	%rbx, 8(%rax)
.LBB4_228:                              # %if.end1219
	movq	%r15, 136(%rsp)         # 8-byte Spill
	testq	%r15, %r15
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	je	.LBB4_232
# BB#229:                               # %if.then1221
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB4_231
# BB#230:                               # %cond.true1229
	movq	288(%rsp), %rdx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	184(%rsp), %rcx         # 8-byte Reload
	callq	gen_rtx_fmt_ee
.LBB4_231:                              # %cond.end1235
	movq	328(%rsp), %rdx
	decq	%r12
	movq	$32, %rcx
	movq	%r12, %rsi
	movq	8(%rdx), %rdx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	%rax, 8(%rdx,%rsi,8)
.LBB4_232:                              # %if.end1244
	movq	128(%rsp), %rax         # 8-byte Reload
	testq	%r15, %rax
	je	.LBB4_234
# BB#233:
	movq	%r14, %r15
	jmp	.LBB4_237
.LBB4_234:                              # %if.then1246
	movq	%r14, %r15
	testq	%r15, %r15
	je	.LBB4_235
# BB#236:                               # %if.else1257
	movq	288(%rsp), %rsi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	$0, 96(%rsp)            # 8-byte Folded Spill
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	callq	subst
	movq	328(%rsp), %rdx
	decq	%r12
	movq	$32, %rcx
	movq	8(%rdx), %rdx
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	movq	%rax, 8(%rdx,%r12,8)
	jmp	.LBB4_237
.LBB4_179:                              # %land.lhs.true1021
	movq	$0, 200(%rsp)           # 8-byte Folded Spill
	movq	328(%rsp), %rax
	movq	8(%rax), %rdi
	movabsq	$undobuf+16, %rdx
	movq	192(%rsp), %rsi         # 8-byte Reload
	callq	find_single_use
	movq	%rax, %r12
	testq	%r12, %r12
	je	.LBB4_180
# BB#181:                               # %land.lhs.true1027
	movq	(%r12), %rax
	movq	const_int_rtx+512(%rip), %rdx
	movzbl	(%rax), %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	callq	ix86_cc_mode
	movq	328(%rsp), %rcx
	movq	8(%rcx), %rcx
	movzbl	2(%rcx), %edx
	movq	%rax, %rsi
	andq	%rbx, %rsi
	cmpq	%rdx, %rsi
	movq	%r13, %r14
	jne	.LBB4_183
# BB#182:
	movq	176(%rsp), %r15         # 8-byte Reload
	jmp	.LBB4_195
.LBB4_235:                              # %if.then1249
	decq	%r12
	movq	328(%rsp), %rax
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	movq	8(%rax), %rax
	sarq	%cl, %r12
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 8(%rax,%r12,8)
	movq	$0, 96(%rsp)            # 8-byte Folded Spill
	xorq	%r15, %r15
.LBB4_237:                              # %validate_replacement
	movq	%r13, %r14
	movq	192(%rsp), %r12         # 8-byte Reload
.LBB4_238:                              # %validate_replacement
	movq	328(%rsp), %rdi
	callq	mark_used_regs_combine
	leaq	328(%rsp), %rdi
	leaq	272(%rsp), %rdx
	movq	%r12, %rsi
	callq	recog_for_combine
	movq	%rax, %rsi
	movq	$32, %rcx
                                        # kill: RAX<def> RSI<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB4_239
# BB#262:                               # %if.end2633.thread
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	testq	%r15, %r15
	je	.LBB4_263
# BB#264:                               # %if.end2633.thread
	movabsq	$1, %rax
	jmp	.LBB4_265
.LBB4_239:                              # %land.lhs.true1272
	movq	328(%rsp), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$39, %rdx
	jne	.LBB4_250
# BB#240:                               # %land.lhs.true1277
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB4_249
# BB#241:                               # %land.lhs.true1284
	movq	8(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$47, %rcx
	jne	.LBB4_249
# BB#242:                               # %land.lhs.true1294
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB4_249
# BB#243:                               # %land.lhs.true1304
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_249
# BB#244:                               # %land.lhs.true1317
	movq	%rsi, %rbx
	movq	$10, %rsi
	movq	%r12, %rdi
	movq	%rax, %rdx
	callq	find_reg_note
	movq	%rbx, %rsi
	testq	%rax, %rax
	je	.LBB4_249
# BB#245:                               # %land.lhs.true1328
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	movq	%rsi, %rbx
	callq	side_effects_p
	movq	%rbx, %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_249
# BB#246:                               # %land.lhs.true1339
	movq	328(%rsp), %rax
	movq	%rax, %rdi
	movq	%rsi, %rbx
	callq	asm_noperands
	movq	%rbx, %rsi
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB4_247
.LBB4_249:                              # %if.else1350.land.lhs.true1353_crit_edge
	movq	328(%rsp), %rax
	movl	(%rax), %ecx
.LBB4_250:                              # %land.lhs.true1353
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$39, %rcx
	jne	.LBB4_256
# BB#251:                               # %land.lhs.true1358
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB4_256
# BB#252:                               # %land.lhs.true1365
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB4_256
# BB#253:                               # %land.lhs.true1375
	movq	16(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$47, %rax
	jne	.LBB4_256
# BB#254:                               # %land.lhs.true1385
	movq	%rsi, %rbx
	movq	%r12, %r13
	movq	8(%rcx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_255
# BB#258:                               # %land.lhs.true1398
	movq	$10, %rsi
	movq	%r13, %rdi
	movq	%rax, %rdx
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB4_255
# BB#259:                               # %land.lhs.true1409
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	callq	side_effects_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_260
.LBB4_255:
	movq	%r13, %r12
	movq	%rbx, %rsi
	jmp	.LBB4_256
.LBB4_263:
	movabsq	$0, %rax
.LBB4_265:                              # %if.end2633.thread
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
.LBB4_448:                              # %if.end2644
	movq	undobuf+16(%rip), %rsi
	movq	$0, 128(%rsp)           # 8-byte Folded Spill
	testq	%rsi, %rsi
	je	.LBB4_464
# BB#449:                               # %if.then2646
	movq	32(%rsi), %rax
	movq	%rax, 240(%rsp)
	movq	$0, newpat_used_regs(%rip)
	leaq	240(%rsp), %rdi
	leaq	232(%rsp), %rdx
	callq	recog_for_combine
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	240(%rsp), %rbx
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB4_456
# BB#450:                               # %land.lhs.true2653
	movq	%rbx, %rdi
	callq	check_asm_operands
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_451
.LBB4_456:                              # %if.end2657
	movq	%r12, %r13
	movq	%r14, %r12
	movq	%r15, %r14
	movq	undobuf+16(%rip), %rax
	movq	%rbx, 32(%rax)
	movq	undobuf+16(%rip), %rax
	movq	56(%rax), %r15
	jmp	.LBB4_457
.LBB4_470:                              # %if.end2704
                                        #   in Loop: Header=BB4_457 Depth=1
	movq	undobuf+16(%rip), %rdi
	movq	%rbx, %rsi
	callq	remove_note
.LBB4_457:                              # %if.end2657
                                        # =>This Inner Loop Header: Depth=1
	testq	%r15, %r15
	je	.LBB4_458
# BB#466:                               # %for.body2666
                                        #   in Loop: Header=BB4_457 Depth=1
	movq	%r15, %rbx
	movl	(%rbx), %eax
	movq	16(%rbx), %r15
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$655360, %rax           # imm = 0xA0000
	jne	.LBB4_457
# BB#467:                               # %land.lhs.true2675
                                        #   in Loop: Header=BB4_457 Depth=1
	movq	undobuf+16(%rip), %rax
	movq	8(%rbx), %rdi
	movq	32(%rax), %rsi
	callq	reg_set_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_457
# BB#468:                               # %if.then2684
                                        #   in Loop: Header=BB4_457 Depth=1
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_470
# BB#469:                               # %if.then2692
                                        #   in Loop: Header=BB4_457 Depth=1
	movl	8(%rax), %eax
	movq	reg_n_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rax
	movl	24(%rax), %ecx
	decq	%rcx
	movl	%ecx, 24(%rax)
	jmp	.LBB4_470
.LBB4_458:                              # %for.cond2708.preheader
	movq	232(%rsp), %rdi
	testq	%rdi, %rdi
	movq	%r14, %r15
	je	.LBB4_463
# BB#459:
	movq	%rdi, %rax
.LBB4_460:                              # %for.body2710
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB4_462
# BB#461:                               # %if.then2718
                                        #   in Loop: Header=BB4_460 Depth=1
	movl	8(%rcx), %ecx
	movq	reg_n_info(%rip), %rdx
	movq	32(%rdx,%rcx,8), %rcx
	movl	24(%rcx), %edx
	incq	%rdx
	movl	%edx, 24(%rcx)
.LBB4_462:                              # %for.inc2732
                                        #   in Loop: Header=BB4_460 Depth=1
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.LBB4_460
.LBB4_463:                              # %for.end2736
	movq	undobuf+16(%rip), %rsi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	%rsi, %rdx
	callq	distribute_notes
	movq	%r12, %r14
	movq	%r13, %r12
.LBB4_464:                              # %if.end2737
	movq	320(%rsp), %rsi
	movq	$0, 224(%rsp)
	testq	%rsi, %rsi
	je	.LBB4_471
# BB#465:                               # %land.lhs.true2740
	movq	304(%rsp), %rdi
	callq	reg_set_p
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	orq	%rcx, %rdx
	jmp	.LBB4_472
.LBB4_471:                              # %lor.lhs.false2743
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
.LBB4_472:                              # %lor.lhs.false2743
	orq	%rax, %rdx
	xorq	%rbx, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdx
	jne	.LBB4_474
# BB#473:                               # %cond.false2748
	movq	304(%rsp), %rbx
.LBB4_474:                              # %cond.end2749
	movq	$0, 168(%rsp)           # 8-byte Folded Spill
	testq	%r15, %r15
	movabsq	$0, %rax
	je	.LBB4_479
# BB#475:                               # %cond.end2749
	cmpq	$0, 160(%rsp)           # 8-byte Folded Reload
	movabsq	$0, %rax
	jne	.LBB4_479
# BB#476:                               # %lor.lhs.false2755
	movq	320(%rsp), %rsi
	testq	%rsi, %rsi
	je	.LBB4_478
# BB#477:                               # %land.lhs.true2757
	movq	288(%rsp), %rdi
	movq	%r12, %r13
	movq	%rcx, %r12
	callq	reg_set_p
	movq	%r12, %rcx
	movq	%r13, %r12
	testq	%rcx, %rax
	movabsq	$0, %rax
	jne	.LBB4_479
.LBB4_478:                              # %cond.false2761
	movq	288(%rsp), %rax
.LBB4_479:                              # %cond.end2762
	movq	%rax, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movq	%r15, 176(%rsp)         # 8-byte Spill
	movq	%rcx, %r15
	movq	48(%r12), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	56(%r12), %rbx
	movq	%r12, %r13
	movq	48(%r14), %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	56(%r14), %r12
	cmpq	$0, 152(%rsp)           # 8-byte Folded Reload
	movabsq	$0, %rcx
	je	.LBB4_481
# BB#480:                               # %if.then2777
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	48(%rax), %rcx
	movq	56(%rax), %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
.LBB4_481:                              # %if.end2784
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	reset_used_flags
	movq	%r12, %rdi
	callq	reset_used_flags
	movq	168(%rsp), %rdi         # 8-byte Reload
	callq	reset_used_flags
	movq	328(%rsp), %rdi
	callq	reset_used_flags
	movq	320(%rsp), %rdi
	callq	reset_used_flags
	movq	undobuf+16(%rip), %rax
	testq	%rax, %rax
	je	.LBB4_483
# BB#482:                               # %if.then2786
	movq	32(%rax), %rdi
	callq	reset_used_flags
.LBB4_483:                              # %if.end2790
	movq	%rbx, %rdi
	callq	copy_rtx_if_shared
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	%r12, %rdi
	callq	copy_rtx_if_shared
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	168(%rsp), %rdi         # 8-byte Reload
	callq	copy_rtx_if_shared
	movq	328(%rsp), %rdi
	movq	%rax, 168(%rsp)         # 8-byte Spill
	callq	copy_rtx_if_shared
	movq	320(%rsp), %rdi
	movq	%rax, 328(%rsp)
	callq	copy_rtx_if_shared
	movq	undobuf+16(%rip), %rcx
	movq	%rax, 320(%rsp)
	testq	%rcx, %rcx
	je	.LBB4_485
# BB#484:                               # %if.then2797
	movq	32(%rcx), %rdi
	callq	reset_used_flags
.LBB4_485:                              # %if.end2801
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	%eax, 40(%r13)
	movq	328(%rsp), %rax
	movq	%rax, 32(%r13)
	movzbl	(%r13), %eax
	cmpq	$34, %rax
	movq	88(%rsp), %r12          # 8-byte Reload
	jne	.LBB4_492
# BB#486:                               # %land.lhs.true2812
	movq	64(%r13), %rbx
	testq	%rbx, %rbx
	je	.LBB4_492
# BB#487:                               # %if.then2817
	movq	%rbx, %rdi
	callq	reset_used_flags
	movq	%rbx, %rdi
	callq	copy_rtx
	movq	%rax, %rbx
	cmpq	$0, 200(%rsp)           # 8-byte Folded Reload
	je	.LBB4_489
# BB#488:                               # %if.then2823
	movq	304(%rsp), %rsi
	movq	%rbx, %rdi
	movq	208(%rsp), %rdx         # 8-byte Reload
	callq	replace_rtx
.LBB4_489:                              # %if.end2825
	testq	%r12, %r12
	je	.LBB4_491
# BB#490:                               # %if.then2827
	movq	288(%rsp), %rsi
	movq	%rbx, %rdi
	movq	184(%rsp), %rdx         # 8-byte Reload
	callq	replace_rtx
.LBB4_491:                              # %if.end2829
	movq	%rbx, 64(%r13)
.LBB4_492:                              # %if.end2833
	movq	undobuf+16(%rip), %rax
	testq	%rax, %rax
	je	.LBB4_494
# BB#493:                               # %if.then2835
	movq	128(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, 40(%rax)
.LBB4_494:                              # %if.end2839
	cmpq	$0, 96(%rsp)            # 8-byte Folded Reload
	movq	%r15, %r8
	movq	%r13, %r12
	je	.LBB4_495
# BB#496:                               # %for.cond2842.preheader
	movq	32(%r14), %rax
	movq	8(%rax), %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	jle	.LBB4_509
# BB#497:                               # %for.body2852.lr.ph
	xorq	%rbx, %rbx
.LBB4_498:                              # %for.body2852
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_504 Depth 2
                                        #       Child Loop BB4_513 Depth 3
	movq	8(%rax,%rbx,8), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	je	.LBB4_508
# BB#499:                               # %land.lhs.true2866
                                        #   in Loop: Header=BB4_498 Depth=1
	movq	8(%rax), %rdx
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB4_508
# BB#500:                               # %land.lhs.true2866
                                        #   in Loop: Header=BB4_498 Depth=1
	movq	304(%rsp), %rax
	cmpq	%rax, %rdx
	je	.LBB4_508
# BB#501:                               # %land.lhs.true2898
                                        #   in Loop: Header=BB4_498 Depth=1
	movq	$10, %rsi
	movq	%r14, %rdi
	movq	%r8, %r15
	callq	find_reg_note
	movq	%r15, %r8
	testq	%rax, %rax
	jne	.LBB4_508
# BB#502:                               # %for.cond2917.preheader
                                        #   in Loop: Header=BB4_498 Depth=1
	movq	24(%r14), %rax
	testq	%rax, %rax
	je	.LBB4_508
# BB#503:                               # %land.rhs2919.lr.ph
                                        #   in Loop: Header=BB4_498 Depth=1
	movslq	this_basic_block(%rip), %rcx
	movl	n_basic_blocks(%rip), %edx
.LBB4_504:                              # %land.rhs2919
                                        #   Parent Loop BB4_498 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_513 Depth 3
	leaq	-1(%rdx), %rsi
	andq	%r8, %rsi
	movq	%rcx, %rdi
	andq	%r8, %rdi
	cmpq	%rsi, %rdi
	je	.LBB4_506
# BB#505:                               # %lor.rhs2923
                                        #   in Loop: Header=BB4_504 Depth=2
	movq	basic_block_info(%rip), %rsi
	movq	32(%rsi,%rcx,8), %rsi
	movq	(%rsi), %rsi
	cmpq	%rax, %rsi
	je	.LBB4_508
.LBB4_506:                              # %for.body2935
                                        #   in Loop: Header=BB4_504 Depth=2
	cmpq	%r12, %rax
	je	.LBB4_507
# BB#511:                               # %land.lhs.true2938
                                        #   in Loop: Header=BB4_504 Depth=2
	movzbl	(%rax), %esi
	movzbl	rtx_class(%rsi), %esi
	cmpq	$105, %rsi
	jne	.LBB4_507
# BB#512:                               # %if.then2946
                                        #   in Loop: Header=BB4_504 Depth=2
	movq	48(%rax), %rsi
	jmp	.LBB4_513
.LBB4_516:                              # %for.inc2963
                                        #   in Loop: Header=BB4_513 Depth=3
	movq	16(%rsi), %rsi
.LBB4_513:                              # %if.then2946
                                        #   Parent Loop BB4_498 Depth=1
                                        #     Parent Loop BB4_504 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testq	%rsi, %rsi
	je	.LBB4_507
# BB#514:                               # %for.body2952
                                        #   in Loop: Header=BB4_513 Depth=3
	movq	8(%rsi), %rdi
	cmpq	%r14, %rdi
	jne	.LBB4_516
# BB#515:                               # %if.then2958
                                        #   in Loop: Header=BB4_513 Depth=3
	movq	%r12, 8(%rsi)
	jmp	.LBB4_516
.LBB4_507:                              # %for.cond2917.backedge
                                        #   in Loop: Header=BB4_504 Depth=2
	movq	24(%rax), %rax
	testq	%rax, %rax
	jne	.LBB4_504
.LBB4_508:                              # %for.inc2975
                                        #   in Loop: Header=BB4_498 Depth=1
	movq	32(%r14), %rax
	movq	8(%rax), %rax
	incq	%rbx
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jl	.LBB4_498
.LBB4_509:                              # %for.end2977
	xorq	%r15, %r15
	movq	120(%rsp), %rax         # 8-byte Reload
	testq	%rax, %rax
	je	.LBB4_510
# BB#517:
	movq	%rax, %rcx
.LBB4_518:                              # %while.cond2981
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	movq	16(%rax), %rcx
	testq	%rcx, %rcx
	jne	.LBB4_518
# BB#519:                               # %while.end2990
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 16(%rax)
	jmp	.LBB4_520
.LBB4_495:
	movq	72(%rsp), %r15          # 8-byte Reload
	jmp	.LBB4_520
.LBB4_510:
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%rax, 120(%rsp)         # 8-byte Spill
.LBB4_520:                              # %if.end2996
	leaq	48(%r12), %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	48(%r14), %rax
	movq	$0, 8(%rcx)
	movq	$0, (%rcx)
	movq	$0, 8(%rax)
	movq	$0, (%rax)
	movq	320(%rsp), %rax
	leaq	8(%r12), %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	8(%r14), %rbx
	testq	%rax, %rax
	je	.LBB4_522
# BB#521:                               # %if.then3010
	movq	80(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, 40(%r14)
	movq	%rax, 32(%r14)
	jmp	.LBB4_523
.LBB4_522:                              # %if.else3017
	movq	$37, %rax
	movw	%ax, (%r14)
	movabsq	$4294967197, %rax       # imm = 0xFFFFFF9D
	movl	%eax, 40(%r14)
	movq	$0, 32(%r14)
.LBB4_523:                              # %if.end3025
	cmpq	$0, 152(%rsp)           # 8-byte Folded Reload
	je	.LBB4_525
# BB#524:                               # %if.then3027
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	$0, 56(%rcx)
	movq	$0, 48(%rcx)
	movq	$37, %rax
	movw	%ax, (%rcx)
	movabsq	$4294967197, %rax       # imm = 0xFFFFFF9D
	movl	%eax, 40(%rcx)
	movq	$0, 32(%rcx)
.LBB4_525:                              # %if.end3043
	movq	320(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB4_541
# BB#526:                               # %if.then3045
	movq	%r12, %r13
	movq	176(%rsp), %rsi         # 8-byte Reload
	movslq	8(%rsi), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB4_532
# BB#527:                               # %land.lhs.true2.i4673.lr.ph
	leaq	8(%rsi), %rcx
	movq	%rsi, %rdx
	movq	%rsi, %r12
.LBB4_528:                              # %land.lhs.true2.i4673
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB4_531
# BB#529:                               # %land.rhs.i4679
                                        #   in Loop: Header=BB4_528 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB4_531
# BB#530:                               # %while.body.i4682
                                        #   in Loop: Header=BB4_528 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rsi
	jg	.LBB4_528
.LBB4_531:                              # %while.end.i4686
	movq	%rbx, 184(%rsp)         # 8-byte Spill
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jle	.LBB4_533
	jmp	.LBB4_168
.LBB4_541:                              # %if.else3076
	movq	328(%rsp), %rdi
	cmpq	$0, 152(%rsp)           # 8-byte Folded Reload
	je	.LBB4_549
# BB#542:                               # %cond.true3078
	movq	176(%rsp), %rdx         # 8-byte Reload
	movslq	8(%rdx), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB4_554
# BB#543:                               # %land.lhs.true2.i4727.lr.ph
	movq	%rbx, 184(%rsp)         # 8-byte Spill
	movq	%r12, %r13
	leaq	8(%rdx), %rcx
.LBB4_544:                              # %land.lhs.true2.i4727
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB4_547
# BB#545:                               # %land.rhs.i4733
                                        #   in Loop: Header=BB4_544 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB4_547
# BB#546:                               # %while.body.i4736
                                        #   in Loop: Header=BB4_544 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rsi
	jg	.LBB4_544
	jmp	.LBB4_547
.LBB4_532:                              # %cond.false3053
	movq	%rbx, 184(%rsp)         # 8-byte Spill
	movq	%rsi, %r12
.LBB4_533:                              # %cond.end3059
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %edx
	leaq	224(%rsp), %r8
	xorq	%rsi, %rsi
	movq	%r14, %rcx
	callq	move_deaths
	movq	328(%rsp), %rdi
	movq	%r12, %rbx
	movslq	8(%rbx), %rcx
	movslq	max_uid_cuid(%rip), %rax
	movq	320(%rsp), %rsi
	cmpq	%rax, %rcx
	jle	.LBB4_539
# BB#534:                               # %land.lhs.true2.i4700.lr.ph
	leaq	8(%rbx), %rcx
	movq	%rbx, %rdx
	movq	%rbx, 176(%rsp)         # 8-byte Spill
.LBB4_535:                              # %land.lhs.true2.i4700
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %ebx
	cmpq	$32, %rbx
	jne	.LBB4_538
# BB#536:                               # %land.rhs.i4706
                                        #   in Loop: Header=BB4_535 Depth=1
	movq	32(%rdx), %rbx
	movzbl	(%rbx), %ebx
	cmpq	$48, %rbx
	jne	.LBB4_538
# BB#537:                               # %while.body.i4709
                                        #   in Loop: Header=BB4_535 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rbx
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rbx
	jg	.LBB4_535
.LBB4_538:                              # %while.end.i4713
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jle	.LBB4_540
	jmp	.LBB4_168
.LBB4_549:                              # %cond.false3094
	movslq	(%rbx), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB4_554
# BB#550:
	movq	%r12, %r13
	movq	%rbx, %rcx
	movq	%rbx, 184(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
.LBB4_551:                              # %land.lhs.true2.i4754
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB4_547
# BB#552:                               # %land.rhs.i4760
                                        #   in Loop: Header=BB4_551 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB4_547
# BB#553:                               # %while.body.i4763
                                        #   in Loop: Header=BB4_551 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rsi
	jg	.LBB4_551
.LBB4_547:                              # %while.end.i4740
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB4_168
# BB#548:                               # %insn_cuid.exit4744
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movq	%r13, %r12
	jmp	.LBB4_555
.LBB4_539:                              # %cond.false3068
	movq	%rbx, 176(%rsp)         # 8-byte Spill
.LBB4_540:                              # %cond.end3074
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %edx
	leaq	224(%rsp), %r8
	movq	%r13, %r12
	movq	%r12, %rcx
	callq	move_deaths
	movq	64(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB4_556
.LBB4_554:                              # %cond.false3102
	movq	%rbx, 184(%rsp)         # 8-byte Spill
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
.LBB4_555:                              # %cond.end3110
	movq	64(%rsp), %rbx          # 8-byte Reload
	movl	(%rax), %edx
	leaq	224(%rsp), %r8
	xorq	%rsi, %rsi
	movq	%r12, %rcx
	callq	move_deaths
.LBB4_556:                              # %if.end3112
	movq	120(%rsp), %rdi         # 8-byte Reload
	testq	%rdi, %rdi
	je	.LBB4_560
# BB#557:                               # %if.then3114
	cmpq	$0, 320(%rsp)
	movq	%r14, %rcx
	jne	.LBB4_559
# BB#558:                               # %select.mid
	xorq	%rcx, %rcx
.LBB4_559:                              # %select.end
	movq	%r12, %rsi
	movq	%r12, %rdx
	movq	%rbx, %r8
	movq	56(%rsp), %r9           # 8-byte Reload
	callq	distribute_notes
.LBB4_560:                              # %if.end3120
	testq	%r15, %r15
	je	.LBB4_564
# BB#561:                               # %if.then3122
	movq	%r12, %r13
	cmpq	$0, 320(%rsp)
	movq	%r14, %rax
	jne	.LBB4_563
# BB#562:                               # %select.mid150
	xorq	%rax, %rax
.LBB4_563:                              # %select.end149
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%r13, %r12
	movq	%r12, %rdx
	movq	%rax, %rcx
	movq	%rbx, %r8
	movq	56(%rsp), %r9           # 8-byte Reload
	callq	distribute_notes
.LBB4_564:                              # %if.end3128
	movq	%r12, %r13
	cmpq	$0, 168(%rsp)           # 8-byte Folded Reload
	je	.LBB4_568
# BB#565:                               # %if.then3130
	cmpq	$0, 320(%rsp)
	movq	%r14, %rax
	jne	.LBB4_567
# BB#566:                               # %select.mid152
	xorq	%rax, %rax
.LBB4_567:                              # %select.end151
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	%r13, %rdx
	movq	%rax, %rcx
	movq	%rbx, %r8
	movq	56(%rsp), %r9           # 8-byte Reload
	callq	distribute_notes
.LBB4_568:                              # %if.end3136
	movq	224(%rsp), %rax
	testq	%rax, %rax
	je	.LBB4_572
# BB#569:                               # %if.then3138
	cmpq	$0, 320(%rsp)
	movq	%r14, %rcx
	jne	.LBB4_571
# BB#570:                               # %select.mid154
	xorq	%rcx, %rcx
.LBB4_571:                              # %select.end153
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	movq	%r13, %rdx
	movq	%rbx, %r8
	movq	56(%rsp), %r9           # 8-byte Reload
	callq	distribute_notes
.LBB4_572:                              # %if.end3144
	cmpq	$0, 320(%rsp)
	je	.LBB4_579
# BB#573:                               # %if.end3144
	movq	264(%rsp), %rax
	testq	%rax, %rax
	je	.LBB4_579
# BB#574:
	movq	%rax, %rcx
.LBB4_575:                              # %for.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$61, %rsi
	jne	.LBB4_577
# BB#576:                               # %if.then3159
                                        #   in Loop: Header=BB4_575 Depth=1
	movl	8(%rdx), %edx
	movq	reg_n_info(%rip), %rsi
	movq	32(%rsi,%rdx,8), %rdx
	movl	24(%rdx), %esi
	incq	%rsi
	movl	%esi, 24(%rdx)
.LBB4_577:                              # %for.inc3173
                                        #   in Loop: Header=BB4_575 Depth=1
	movq	16(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB4_575
# BB#578:                               # %for.end3177
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	%rax, %rdi
	movq	%r14, %rax
	movq	%rax, %rsi
	movq	%rax, %rdx
                                        # kill: R14<def> RAX<kill>
	callq	distribute_notes
.LBB4_579:                              # %if.end3178
	movq	272(%rsp), %rax
	testq	%rax, %rax
	je	.LBB4_585
# BB#580:
	movq	%rax, %rcx
.LBB4_581:                              # %for.body3183
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$61, %rsi
	jne	.LBB4_583
# BB#582:                               # %if.then3191
                                        #   in Loop: Header=BB4_581 Depth=1
	movl	8(%rdx), %edx
	movq	reg_n_info(%rip), %rsi
	movq	32(%rsi,%rdx,8), %rdx
	movl	24(%rdx), %esi
	incq	%rsi
	movl	%esi, 24(%rdx)
.LBB4_583:                              # %for.inc3205
                                        #   in Loop: Header=BB4_581 Depth=1
	movq	16(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB4_581
# BB#584:                               # %for.end3209
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	%rax, %rdi
	movq	%r13, %rax
	movq	%rax, %rsi
	movq	%rax, %rdx
                                        # kill: R13<def> RAX<kill>
	callq	distribute_notes
.LBB4_585:                              # %if.end3210
	movq	312(%rsp), %rdx
	testq	%rdx, %rdx
	je	.LBB4_595
# BB#586:                               # %if.then3212
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB4_588
# BB#587:                               # %if.then3217
	movl	8(%rdx), %eax
	movq	reg_n_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rax
	movl	24(%rax), %ecx
	incq	%rcx
	movl	%ecx, 24(%rax)
.LBB4_588:                              # %if.end3227
	movq	320(%rsp), %rax
	testq	%rax, %rax
	je	.LBB4_591
# BB#589:                               # %land.lhs.true3229
	movq	%rdx, %rdi
	movq	%rax, %rsi
	callq	reg_set_p
	movq	312(%rsp), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_591
# BB#590:                               # %if.then3232
	movq	$3, %rdi
	movq	$1, %rsi
	xorq	%rcx, %rcx
	callq	gen_rtx_fmt_ee
	xorq	%rsi, %rsi
	xorq	%rcx, %rcx
	movq	%rax, %rdi
	movq	%r14, %rdx
	jmp	.LBB4_594
.LBB4_451:                              # %if.then2656
	movq	undobuf(%rip), %rax
	testq	%rax, %rax
	je	.LBB4_110
.LBB4_452:                              # %for.body.i4653
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%rax), %edx
	movq	(%rax), %rcx
	testq	%rdx, %rdx
	jne	.LBB4_453
# BB#454:                               # %if.else.i4660
                                        #   in Loop: Header=BB4_452 Depth=1
	movq	16(%rax), %rdx
	movq	24(%rax), %rsi
	movq	%rdx, (%rsi)
	jmp	.LBB4_455
.LBB4_453:                              # %if.then.i4657
                                        #   in Loop: Header=BB4_452 Depth=1
	movl	16(%rax), %edx
	movq	24(%rax), %rsi
	movl	%edx, (%rsi)
.LBB4_455:                              # %if.end.i4662
                                        #   in Loop: Header=BB4_452 Depth=1
	movq	undobuf+8(%rip), %rdx
	movq	%rdx, (%rax)
	movq	%rax, undobuf+8(%rip)
	testq	%rcx, %rcx
	movq	%rcx, %rax
	jne	.LBB4_452
	jmp	.LBB4_110
.LBB4_180:
	movq	176(%rsp), %r15         # 8-byte Reload
	jmp	.LBB4_194
.LBB4_183:                              # %if.then1039
	movq	%r14, 96(%rsp)          # 8-byte Spill
	movl	8(%rcx), %esi
	movq	%rax, %rdi
	movq	%rax, %r13
	movq	%rsi, %r14
	callq	gen_rtx_REG
	movq	%rax, %r15
	cmpq	$52, %r14
	ja	.LBB4_185
# BB#184:                               # %if.end1070
	movq	328(%rsp), %rax
	addq	$8, %rax
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	do_SUBST
	movq	(%r12), %rax
	addq	$8, %rax
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	do_SUBST
	movq	328(%rsp), %r15
	movq	const_int_rtx+512(%rip), %rax
	addq	$16, %r15
	movq	$74, %rdi
	movq	%r13, %rsi
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	jmp	.LBB4_186
.LBB4_46:                               # %if.then218
	movl	combine_merges(%rip), %eax
	incq	%rax
	movl	%eax, combine_merges(%rip)
	movq	%r9, subst_insn(%rip)
	movslq	8(%rbx), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB4_52
# BB#47:                                # %land.lhs.true2.i4206.lr.ph
	movq	%rbx, %rdi
	leaq	8(%rdi), %rcx
	movq	%rdi, %rsi
                                        # kill: RBX<def> RDI<kill>
.LBB4_48:                               # %land.lhs.true2.i4206
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %edi
	cmpq	$32, %rdi
	jne	.LBB4_51
# BB#49:                                # %land.rhs.i4212
                                        #   in Loop: Header=BB4_48 Depth=1
	movq	32(%rsi), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB4_51
# BB#50:                                # %while.body.i4215
                                        #   in Loop: Header=BB4_48 Depth=1
	movq	24(%rsi), %rsi
	movslq	8(%rsi), %rdi
	leaq	8(%rsi), %rcx
	cmpq	%rax, %rdi
	jg	.LBB4_48
.LBB4_51:                               # %while.end.i4219
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB4_168
.LBB4_52:                               # %cond.false226
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %eax
	movl	%eax, subst_low_cuid(%rip)
	movq	%r9, %r12
	movq	32(%r12), %rax
	movq	16(%rax), %rcx
	movq	%rcx, 304(%rsp)
	movq	8(%r14), %rcx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rax), %rax
	addq	$8, %rcx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%r14, 328(%rsp)
	movq	$1, 96(%rsp)            # 8-byte Folded Spill
	movq	$0, 184(%rsp)           # 8-byte Folded Spill
                                        # implicit-def: RAX
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movq	$0, 120(%rsp)           # 8-byte Folded Spill
	jmp	.LBB4_53
.LBB4_71:                               # %if.else
	movq	16(%rax), %r13
	movq	24(%rax), %rax
.LBB4_72:                               # %if.end448
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movq	%r8, %rdi
	callq	subreg_lowpart_p
	movl	target_flags(%rip), %edx
	movq	%rax, %rsi
	andq	$33554432, %rdx         # imm = 0x2000000
	movq	$20, %rcx
	movq	%rdx, %rax
	shrq	%cl, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rsi
	je	.LBB4_74
# BB#73:                                # %if.end464
	movq	32(%r12), %rcx
	movq	16(%rcx), %rdx
	orq	$31, %rax
	movq	$2, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movq	8(%rdx), %rax
	leaq	-1(%rsi), %rcx
	negq	%rsi
	andq	%rsi, %r13
	andq	%rcx, %rax
	orq	%rax, %r13
	jmp	.LBB4_79
.LBB4_247:                              # %if.then1343
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	jmp	.LBB4_248
.LBB4_260:                              # %land.lhs.true1420
	movq	328(%rsp), %rax
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	%r13, %r12
	movq	%rbx, %rsi
	jns	.LBB4_256
# BB#261:                               # %if.then1424
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rax
.LBB4_248:                              # %if.end1432
	movq	%rax, 328(%rsp)
	leaq	328(%rsp), %rax
	leaq	272(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, %rsi
.LBB4_256:                              # %if.end1432
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
	testq	%r15, %r15
	je	.LBB4_257
# BB#266:                               # %if.end1432
	movabsq	$1, %rax
	jmp	.LBB4_267
.LBB4_257:
	movabsq	$0, %rax
.LBB4_267:                              # %if.end1432
	movq	%rax, 152(%rsp)         # 8-byte Spill
	je	.LBB4_438
# BB#268:                               # %if.end1432
	movq	$32, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB4_438
# BB#269:                               # %land.lhs.true1437
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rdi
	movzbl	(%rdi), %eax
	cmpq	$47, %rax
	jne	.LBB4_365
# BB#270:                               # %land.lhs.true1442
	movq	%r12, %rbx
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB4_271
# BB#364:                               # %if.else2026.land.lhs.true2031_crit_edge
	movq	328(%rsp), %rdi
	movq	%rbx, %r12
.LBB4_365:                              # %land.lhs.true2031
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB4_412
# BB#366:                               # %land.lhs.true2035
	movq	328(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB4_412
# BB#367:                               # %land.lhs.true2040
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB4_412
# BB#368:                               # %land.lhs.true2047
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB4_412
# BB#369:                               # %land.lhs.true2057
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$120, %rdx
	jne	.LBB4_412
# BB#370:                               # %land.lhs.true2070
	movq	16(%rax), %rax
	movzbl	(%rax), %edx
	cmpq	$47, %rdx
	jne	.LBB4_412
# BB#371:                               # %land.lhs.true2080
	movq	16(%rax), %rax
	movq	8(%rcx), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_412
# BB#372:                               # %land.lhs.true2102
	movq	%r15, %rbx
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movslq	8(%r14), %rdx
	movslq	max_uid_cuid(%rip), %rcx
	movq	16(%rax), %rax
	cmpq	%rcx, %rdx
	jle	.LBB4_378
# BB#373:                               # %land.lhs.true2.i4582.lr.ph
	movq	%r14, %rdi
	leaq	8(%rdi), %rdx
	movq	%rdi, %rsi
                                        # kill: R14<def> RDI<kill>
.LBB4_374:                              # %land.lhs.true2.i4582
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %edi
	cmpq	$32, %rdi
	jne	.LBB4_377
# BB#375:                               # %land.rhs.i4588
                                        #   in Loop: Header=BB4_374 Depth=1
	movq	32(%rsi), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB4_377
# BB#376:                               # %while.body.i4591
                                        #   in Loop: Header=BB4_374 Depth=1
	movq	24(%rsi), %rsi
	movslq	8(%rsi), %rdi
	leaq	8(%rsi), %rdx
	cmpq	%rcx, %rdi
	jg	.LBB4_374
.LBB4_377:                              # %while.end.i4595
	movslq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	jg	.LBB4_168
.LBB4_378:                              # %cond.false2118
	movq	uid_cuid(%rip), %rcx
	leaq	(%rcx,%rdx,4), %rcx
	movl	(%rcx), %ecx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	use_crosses_set_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rbx, %r15
	jne	.LBB4_412
# BB#379:                               # %land.lhs.true2128
	movq	%r12, %r10
	movq	%r14, %r9
	movq	%r15, %r8
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rdx
	movq	8(%rdx), %rax
	movl	(%rax), %ebx
	movq	%rbx, %rsi
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$132, %rsi
	jg	.LBB4_411
# BB#380:                               # %land.lhs.true2128
	cmpq	$61, %rsi
	je	.LBB4_383
# BB#381:                               # %land.lhs.true2128
	cmpq	$63, %rsi
	movq	%r8, %r15
	movq	%r9, %r14
	movq	%r10, %r12
	je	.LBB4_388
# BB#382:                               # %land.lhs.true2128
	cmpq	$64, %rsi
	jne	.LBB4_393
	jmp	.LBB4_412
.LBB4_271:                              # %if.then1446
	movq	%r15, %r12
	movq	304(%rsp), %r15
	movq	328(%rsp), %rdi
	movq	%rbx, %rsi
	movq	%rsi, %r13
	callq	split_insns
	movq	%rax, %rbx
	testq	%rbx, %rbx
	movq	%rbx, 256(%rsp)
	je	.LBB4_273
# BB#272:
	movq	%r15, 152(%rsp)         # 8-byte Spill
	jmp	.LBB4_286
.LBB4_591:                              # %if.else3234
	movq	$3, %rdi
	movq	$1, %rsi
	xorq	%rcx, %rcx
	callq	gen_rtx_fmt_ee
	cmpq	$0, 320(%rsp)
	movq	%r14, %rcx
	jne	.LBB4_593
# BB#592:                               # %select.mid156
	xorq	%rcx, %rcx
.LBB4_593:                              # %select.end155
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	movq	%r13, %rdx
.LBB4_594:                              # %if.end3242
	movq	%rbx, %r8
	movq	56(%rsp), %r9           # 8-byte Reload
	callq	distribute_notes
.LBB4_595:                              # %if.end3242
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	144(%rsp), %rcx         # 8-byte Reload
	testq	%rax, %rcx
	je	.LBB4_605
# BB#596:                               # %if.then3244
	movq	304(%rsp), %rdx
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB4_598
# BB#597:                               # %if.then3249
	movl	8(%rdx), %eax
	movq	reg_n_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rax
	movl	24(%rax), %ecx
	incq	%rcx
	movl	%ecx, 24(%rax)
.LBB4_598:                              # %if.end3259
	movq	320(%rsp), %rax
	testq	%rax, %rax
	je	.LBB4_601
# BB#599:                               # %land.lhs.true3261
	movq	%rdx, %rdi
	movq	%rax, %rsi
	callq	reg_set_p
	movq	304(%rsp), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_601
# BB#600:                               # %if.then3264
	movq	$3, %rdi
	movq	$1, %rsi
	xorq	%rcx, %rcx
	callq	gen_rtx_fmt_ee
	xorq	%rsi, %rsi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	%rax, %rdi
	movq	%r14, %rdx
	jmp	.LBB4_604
.LBB4_185:                              # %if.else1081
	movq	$0, undobuf+16(%rip)
.LBB4_186:                              # %if.end1109
	movq	176(%rsp), %r15         # 8-byte Reload
	movq	96(%rsp), %r14          # 8-byte Reload
	jmp	.LBB4_195
.LBB4_74:                               # %if.else489
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdx
	je	.LBB4_76
# BB#75:                                # %if.then495
	movq	32(%r12), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rax
	jmp	.LBB4_78
.LBB4_411:                              # %land.lhs.true2128
	cmpq	$133, %rsi
	movq	%r8, %r15
	movq	%r9, %r14
	movq	%r10, %r12
	jne	.LBB4_393
	jmp	.LBB4_412
.LBB4_383:                              # %land.lhs.true2167
	movl	8(%rax), %ecx
	movq	reg_nonzero_bits(%rip), %rdi
	movq	(%rdi,%rcx,8), %rdi
	testq	%rdi, %rdi
	movq	%r8, %r15
	movq	%r9, %r14
	movq	%r10, %r12
	je	.LBB4_393
# BB#384:                               # %land.lhs.true2175
	movq	$15, %rcx
	shrq	%cl, %rbx
	andq	$510, %rbx              # imm = 0x1FE
	movl	target_flags(%rip), %r8d
	movzbl	mode_bitsize(%rbx), %ebx
	movq	$20, %rcx
	shrq	%cl, %r8
	andq	$32, %r8
	addq	$32, %r8
	movabsq	$4294967264, %rcx       # imm = 0xFFFFFFE0
	andq	%r8, %rcx
	cmpq	%rcx, %rbx
	jae	.LBB4_387
# BB#385:                               # %land.lhs.true2175
	cmpq	$31, %rbx
	ja	.LBB4_387
# BB#386:                               # %land.rhs2196
	movslq	word_mode(%rip), %rcx
	movq	mode_mask_array(,%rcx,8), %rcx
	cmpq	%rcx, %rdi
	jne	.LBB4_412
.LBB4_387:                              # %land.lhs.true2208
	cmpq	$63, %rsi
	jne	.LBB4_393
.LBB4_388:                              # %land.lhs.true2221
	movq	8(%rax), %rcx
	movl	(%rcx), %edi
	movq	%rdi, %rsi
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$61, %rsi
	jne	.LBB4_393
# BB#389:                               # %land.lhs.true2237
	movl	8(%rcx), %ecx
	movq	reg_nonzero_bits(%rip), %rsi
	movq	(%rsi,%rcx,8), %rsi
	testq	%rsi, %rsi
	je	.LBB4_393
# BB#390:                               # %land.lhs.true2245
	movq	$15, %rcx
	shrq	%cl, %rdi
	andq	$510, %rdi              # imm = 0x1FE
	movl	target_flags(%rip), %ebx
	movzbl	mode_bitsize(%rdi), %edi
	movq	$20, %rcx
	shrq	%cl, %rbx
	andq	$32, %rbx
	addq	$32, %rbx
	movabsq	$4294967264, %rcx       # imm = 0xFFFFFFE0
	andq	%rbx, %rcx
	cmpq	%rcx, %rdi
	jae	.LBB4_393
# BB#391:                               # %land.lhs.true2245
	cmpq	$31, %rdi
	ja	.LBB4_393
# BB#392:                               # %land.rhs2266
	movslq	word_mode(%rip), %rcx
	movq	mode_mask_array(,%rcx,8), %rcx
	cmpq	%rcx, %rsi
	jne	.LBB4_412
.LBB4_393:                              # %land.lhs.true2278
	movq	16(%rdx), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_412
# BB#394:                               # %land.lhs.true2297
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	$10, %rsi
	movq	%r12, %rdi
	movq	%rax, %rdx
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB4_395
.LBB4_412:                              # %land.lhs.true2420
	movq	328(%rsp), %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, 152(%rsp)           # 8-byte Folded Spill
	js	.LBB4_414
# BB#413:
	movq	104(%rsp), %rsi         # 8-byte Reload
	jmp	.LBB4_438
.LBB4_414:                              # %land.lhs.true2424
	movq	%r12, %r13
	movq	328(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB4_415
# BB#416:                               # %land.lhs.true2429
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB4_415
# BB#417:                               # %land.lhs.true2436
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB4_415
# BB#418:                               # %land.lhs.true2446
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$64, %rcx
	je	.LBB4_415
# BB#419:                               # %land.lhs.true2446
	cmpq	$133, %rcx
	je	.LBB4_415
# BB#420:                               # %land.lhs.true2472
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB4_415
# BB#421:                               # %land.lhs.true2482
	movq	8(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$64, %rcx
	je	.LBB4_415
# BB#422:                               # %land.lhs.true2482
	cmpq	$133, %rcx
	je	.LBB4_415
# BB#423:                               # %land.lhs.true2508
	movslq	8(%r14), %rdx
	movslq	max_uid_cuid(%rip), %rcx
	movq	16(%rax), %rax
	cmpq	%rcx, %rdx
	jle	.LBB4_429
# BB#424:                               # %land.lhs.true2.i4609.lr.ph
	movq	%r14, %rdi
	leaq	8(%rdi), %rdx
	movq	%rdi, %rsi
                                        # kill: R14<def> RDI<kill>
.LBB4_425:                              # %land.lhs.true2.i4609
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %edi
	cmpq	$32, %rdi
	jne	.LBB4_428
# BB#426:                               # %land.rhs.i4615
                                        #   in Loop: Header=BB4_425 Depth=1
	movq	32(%rsi), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB4_428
# BB#427:                               # %while.body.i4618
                                        #   in Loop: Header=BB4_425 Depth=1
	movq	24(%rsi), %rsi
	movslq	8(%rsi), %rdi
	leaq	8(%rsi), %rdx
	cmpq	%rcx, %rdi
	jg	.LBB4_425
.LBB4_428:                              # %while.end.i4622
	movslq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	jg	.LBB4_168
.LBB4_429:                              # %cond.false2524
	movq	uid_cuid(%rip), %rcx
	leaq	(%rcx,%rdx,4), %rcx
	movl	(%rcx), %ecx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	use_crosses_set_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_415
# BB#430:                               # %land.lhs.true2534
	movq	328(%rsp), %rax
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	je	.LBB4_415
# BB#431:                               # %land.lhs.true2547
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rdx
	movzbl	(%rdx), %edx
	cmpq	$48, %rdx
	je	.LBB4_415
# BB#432:                               # %land.lhs.true2560
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	reg_referenced_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_415
# BB#433:                               # %land.lhs.true2576
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rcx
	movq	16(%rax), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	reg_referenced_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_415
# BB#434:                               # %land.lhs.true2592
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	callq	contains_muldiv
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_436
# BB#435:                               # %land.lhs.true2603
	movq	328(%rsp), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	callq	contains_muldiv
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_415
.LBB4_436:                              # %if.then2614
	movq	328(%rsp), %rax
	movq	8(%rax), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, 320(%rsp)
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, 328(%rsp)
	leaq	320(%rsp), %rax
	leaq	264(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB4_415
# BB#437:                               # %if.then2628
	leaq	328(%rsp), %rax
	leaq	272(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r13, %r12
	movq	%r12, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, %rsi
	jmp	.LBB4_438
.LBB4_273:                              # %land.lhs.true1450
	movq	328(%rsp), %rax
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	reg_overlap_mentioned_p
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_330
# BB#274:                               # %if.then1453
	movq	328(%rsp), %rbx
	movq	304(%rsp), %rsi
	movq	8(%rbx), %rax
	movl	(%rsi), %edx
	movzbl	2(%rax), %eax
	movq	$16, %rcx
	movq	%rdx, %rdi
	shrq	%cl, %rdi
	testq	%rax, %rax
	je	.LBB4_282
# BB#275:                               # %if.then1453
	andq	$255, %rdi
	cmpq	%rdi, %rax
	je	.LBB4_282
# BB#276:                               # %if.then1453
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB4_282
# BB#277:                               # %land.lhs.true1479
	movl	8(%rsi), %ecx
	cmpq	$53, %rcx
	jb	.LBB4_281
# BB#278:                               # %lor.lhs.false1485
	cmpq	$0, 112(%rsp)           # 8-byte Folded Reload
	jne	.LBB4_282
# BB#279:                               # %lor.lhs.false1485
	movq	reg_n_info(%rip), %rsi
	movq	32(%rsi,%rcx,8), %rsi
	movl	12(%rsi), %esi
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rdi, %rsi
	cmpq	$1, %rsi
	jne	.LBB4_282
# BB#280:                               # %lor.lhs.false1485
	andq	$134217728, %rdx        # imm = 0x8000000
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	testq	%rsi, %rdx
	jne	.LBB4_282
.LBB4_281:                              # %if.then1503
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	gen_rtx_REG
	movq	328(%rsp), %rbx
	movq	%rax, %r15
.LBB4_282:                              # %if.end1514
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
	movq	%r15, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %rcx
	movq	$2, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	movq	%rcx, %rdx
	callq	gen_rtvec
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	split_insns
	movq	%rax, %rbx
	testq	%rbx, %rbx
	movq	%rbx, 256(%rsp)
	je	.LBB4_284
# BB#283:
	movq	%r15, 152(%rsp)         # 8-byte Spill
	jmp	.LBB4_286
.LBB4_601:                              # %if.else3266
	movq	$3, %rdi
	movq	$1, %rsi
	xorq	%rcx, %rcx
	callq	gen_rtx_fmt_ee
	cmpq	$0, 320(%rsp)
	movq	%r14, %rcx
	jne	.LBB4_603
# BB#602:                               # %select.mid158
	xorq	%rcx, %rcx
.LBB4_603:                              # %select.end157
	xorq	%rsi, %rsi
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	%rax, %rdi
	movq	%r13, %rdx
.LBB4_604:                              # %if.end3274
	callq	distribute_notes
.LBB4_605:                              # %if.end3274
	cmpq	$0, 160(%rsp)           # 8-byte Folded Reload
	je	.LBB4_615
# BB#606:                               # %if.then3276
	movq	288(%rsp), %rdx
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB4_608
# BB#607:                               # %if.then3281
	movl	8(%rdx), %eax
	movq	reg_n_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rax
	movl	24(%rax), %ecx
	incq	%rcx
	movl	%ecx, 24(%rax)
.LBB4_608:                              # %if.end3291
	movq	320(%rsp), %rax
	testq	%rax, %rax
	je	.LBB4_611
# BB#609:                               # %land.lhs.true3293
	movq	%rdx, %rdi
	movq	%rax, %rsi
	callq	reg_set_p
	movq	288(%rsp), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_611
# BB#610:                               # %if.then3296
	movq	$3, %rdi
	movq	$1, %rsi
	xorq	%rcx, %rcx
	callq	gen_rtx_fmt_ee
	xorq	%rsi, %rsi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	%rax, %rdi
	movq	%r14, %rdx
	jmp	.LBB4_614
.LBB4_76:                               # %if.then512
	movq	$63, %rcx
	movq	%r13, %rdx
	sarq	%cl, %rdx
	orq	$31, %rax
	movq	$2, %rsi
	movq	32(%r12), %rdi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	decq	%rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movq	16(%rdi), %rcx
	addq	%rsi, %rsi
	notq	%rsi
	andq	%r13, %rsi
	movq	8(%rcx), %r13
	movq	%rax, %rcx
	shlq	%cl, %r13
	addq	%r13, %r13
	orq	%rsi, %r13
	movq	$63, %rcx
	movq	%r13, %rax
	sarq	%cl, %rax
	cmpq	%rdx, 200(%rsp)         # 8-byte Folded Reload
	je	.LBB4_78
# BB#77:                                # %if.then512
	movq	200(%rsp), %rax         # 8-byte Reload
.LBB4_78:                               # %if.then512
	movq	%rax, 200(%rsp)         # 8-byte Spill
.LBB4_79:                               # %if.end561
	movl	combine_merges(%rip), %eax
	incq	%rax
	movl	%eax, combine_merges(%rip)
	movq	%r12, subst_insn(%rip)
	movslq	8(%rbx), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB4_85
# BB#80:
	movq	%rbx, %rsi
	leaq	8(%rsi), %rcx
	movq	%rsi, %rdx
                                        # kill: RBX<def> RSI<kill>
.LBB4_81:                               # %land.lhs.true2.i4233
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB4_84
# BB#82:                                # %land.rhs.i4239
                                        #   in Loop: Header=BB4_81 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB4_84
# BB#83:                                # %while.body.i4242
                                        #   in Loop: Header=BB4_81 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rsi
	jg	.LBB4_81
.LBB4_84:                               # %while.end.i4246
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB4_168
.LBB4_85:                               # %cond.false570
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %eax
	movl	%eax, subst_low_cuid(%rip)
	movq	8(%r14), %rax
	movq	%rax, 304(%rsp)
	movq	8(%r14), %rax
	movzbl	2(%rax), %eax
	movq	%r13, %rdi
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	immed_double_const
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, 328(%rsp)
	movq	$0, 184(%rsp)           # 8-byte Folded Spill
                                        # implicit-def: RAX
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movq	$0, 120(%rsp)           # 8-byte Folded Spill
	movq	$0, 96(%rsp)            # 8-byte Folded Spill
.LBB4_53:                               # %validate_replacement
	movq	$0, 168(%rsp)           # 8-byte Folded Spill
	movq	$0, 160(%rsp)           # 8-byte Folded Spill
	movq	$0, 144(%rsp)           # 8-byte Folded Spill
	movq	$0, 112(%rsp)           # 8-byte Folded Spill
	movq	$0, 136(%rsp)           # 8-byte Folded Spill
	movq	$0, 88(%rsp)            # 8-byte Folded Spill
	movq	$0, 200(%rsp)           # 8-byte Folded Spill
	xorq	%r15, %r15
	movq	%rbx, %r14
	jmp	.LBB4_238
.LBB4_395:                              # %if.then2308
	movq	%r12, %r13
	movq	%r15, %r12
	movq	328(%rsp), %rax
	movq	8(%rax), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, 320(%rsp)
	movq	8(%rax), %rax
	movq	8(%rax), %rcx
	movq	16(%rax), %r15
	movq	8(%rcx), %rbx
	movq	%r15, 328(%rsp)
	movq	16(%r15), %rax
	movzbl	2(%rax), %eax
	addq	$16, %r15
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	gen_lowpart_for_combine
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	leaq	320(%rsp), %rax
	leaq	264(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB4_397
# BB#396:                               # %if.then2341
	leaq	328(%rsp), %rax
	leaq	272(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, 104(%rsp)         # 8-byte Spill
.LBB4_397:                              # %if.end2343
	movq	$32, %rcx
	movq	104(%rsp), %rax         # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$1, 152(%rsp)           # 8-byte Folded Spill
	testq	%rax, %rax
	js	.LBB4_398
# BB#399:                               # %if.then2346
	movq	328(%rsp), %rax
	movq	%rax, 32(%r13)
	movq	$4, %rdi
	xorq	%rsi, %rsi
	xorq	%rcx, %rcx
	movq	%r13, %rdx
	callq	gen_rtx_fmt_ue
	movq	%rax, %rdi
	callq	distribute_links
	movq	24(%r13), %r15
	testq	%r15, %r15
	movq	$1, 152(%rsp)           # 8-byte Folded Spill
	je	.LBB4_400
.LBB4_401:                              # %land.rhs2357
                                        # =>This Inner Loop Header: Depth=1
	movl	n_basic_blocks(%rip), %ecx
	movl	this_basic_block(%rip), %eax
	decq	%rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	%rcx, %rax
	je	.LBB4_403
# BB#402:                               # %lor.rhs2361
                                        #   in Loop: Header=BB4_401 Depth=1
	incq	%rax
	movq	$32, %rcx
	movq	basic_block_info(%rip), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	32(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	cmpq	%rax, %r15
	je	.LBB4_400
.LBB4_403:                              # %for.body2372
                                        #   in Loop: Header=BB4_401 Depth=1
	movzbl	(%r15), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB4_405
# BB#404:                               # %land.lhs.true2380
                                        #   in Loop: Header=BB4_401 Depth=1
	movq	32(%r15), %rax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	reg_referenced_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_406
.LBB4_405:                              # %for.cond2355.backedge
                                        #   in Loop: Header=BB4_401 Depth=1
	movq	24(%r15), %r15
	testq	%r15, %r15
	jne	.LBB4_401
	jmp	.LBB4_400
.LBB4_284:                              # %land.lhs.true1520
	movq	304(%rsp), %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	cmpq	%rax, %r15
	je	.LBB4_330
# BB#285:                               # %if.end1529
	movq	328(%rsp), %rbx
	movq	$49, %rdi
	xorq	%rsi, %rsi
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
	movq	152(%rsp), %rdx         # 8-byte Reload
	callq	gen_rtx_fmt_e
	movq	%rax, %rcx
	movq	$2, %rdi
	xorq	%rax, %rax
	movq	%rbx, %rsi
	movq	%rcx, %rdx
	callq	gen_rtvec
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	split_insns
	movq	%rax, %rbx
	testq	%rbx, %rbx
	movq	%rbx, 256(%rsp)
	je	.LBB4_330
.LBB4_286:                              # %land.lhs.true1531
	movzbl	(%rbx), %eax
	cmpq	$24, %rax
	jne	.LBB4_290
# BB#287:                               # %land.lhs.true1536
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB4_289
# BB#288:                               # %if.then1543
	movq	8(%rax), %rax
	movq	32(%rax), %rbx
	movq	%rbx, 256(%rsp)
.LBB4_289:                              # %if.end1552
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
	testq	%rbx, %rbx
	je	.LBB4_330
.LBB4_290:                              # %land.lhs.true1554
	movzbl	(%rbx), %eax
	cmpq	$24, %rax
	jne	.LBB4_291
# BB#293:                               # %land.lhs.true1567
	movzbl	(%rbx), %eax
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
	cmpq	$24, %rax
	jne	.LBB4_330
# BB#294:                               # %land.lhs.true1572
	movq	8(%rbx), %rax
	movl	(%rax), %eax
	cmpq	$2, %rax
	jne	.LBB4_330
# BB#295:                               # %land.lhs.true1579
	movq	%r14, %rdi
	callq	next_real_insn
	cmpq	%r13, %rax
	je	.LBB4_303
# BB#296:                               # %lor.lhs.false1583
	movq	8(%rbx), %rax
	movq	8(%rax), %rax
	movslq	8(%r14), %rdx
	movslq	max_uid_cuid(%rip), %rcx
	movq	32(%rax), %rax
	cmpq	%rcx, %rdx
	jle	.LBB4_302
# BB#297:                               # %land.lhs.true2.i4528.lr.ph
	movq	%r14, %rdi
	leaq	8(%rdi), %rdx
	movq	%rdi, %rsi
                                        # kill: R14<def> RDI<kill>
.LBB4_298:                              # %land.lhs.true2.i4528
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %edi
	cmpq	$32, %rdi
	jne	.LBB4_301
# BB#299:                               # %land.rhs.i4534
                                        #   in Loop: Header=BB4_298 Depth=1
	movq	32(%rsi), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB4_301
# BB#300:                               # %while.body.i4537
                                        #   in Loop: Header=BB4_298 Depth=1
	movq	24(%rsi), %rsi
	movslq	8(%rsi), %rdi
	leaq	8(%rsi), %rdx
	cmpq	%rcx, %rdi
	jg	.LBB4_298
.LBB4_301:                              # %while.end.i4541
	movslq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	jg	.LBB4_168
.LBB4_302:                              # %cond.false1599
	movq	uid_cuid(%rip), %rcx
	leaq	(%rcx,%rdx,4), %rcx
	movl	(%rcx), %ecx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	use_crosses_set_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_330
.LBB4_303:                              # %if.then1609
	movq	8(%rbx), %rax
	movq	16(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, 248(%rsp)
	movq	8(%rbx), %rax
	movq	8(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, 320(%rsp)
	movq	8(%rbx), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	movzbl	rtx_class(%rdx), %edx
	movq	$0, 128(%rsp)           # 8-byte Folded Spill
	cmpq	$105, %rdx
	jne	.LBB4_304
# BB#305:                               # %cond.true1638
	movq	32(%rax), %r15
	movzbl	(%r15), %edx
	cmpq	$47, %rdx
	je	.LBB4_307
# BB#306:                               # %cond.false1660
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	single_set_2
	movq	8(%rbx), %rcx
	movq	%rax, %r15
	jmp	.LBB4_307
.LBB4_611:                              # %if.else3298
	movq	$3, %rdi
	movq	$1, %rsi
	xorq	%rcx, %rcx
	callq	gen_rtx_fmt_ee
	cmpq	$0, 320(%rsp)
	movq	%r14, %rcx
	jne	.LBB4_613
# BB#612:                               # %select.mid160
	xorq	%rcx, %rcx
.LBB4_613:                              # %select.end159
	xorq	%rsi, %rsi
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	%rax, %rdi
	movq	%r13, %rdx
.LBB4_614:                              # %if.end3306
	callq	distribute_notes
.LBB4_615:                              # %if.end3306
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	distribute_links
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	distribute_links
	movq	32(%rsp), %rdi          # 8-byte Reload
	callq	distribute_links
	movq	304(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_630
# BB#616:                               # %for.cond3316.preheader
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %r12
	xorq	%rbx, %rbx
	xorq	%r15, %r15
	testq	%r12, %r12
	je	.LBB4_625
.LBB4_617:                              # %for.body3318
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$105, %rcx
	jne	.LBB4_623
# BB#618:                               # %cond.true3329
                                        #   in Loop: Header=BB4_617 Depth=1
	movq	32(%rax), %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movzbl	(%rcx), %ecx
	cmpq	$47, %rcx
	je	.LBB4_620
# BB#619:                               # %cond.false3347
                                        #   in Loop: Header=BB4_617 Depth=1
	movq	%rax, %rdi
	movq	176(%rsp), %rsi         # 8-byte Reload
	callq	single_set_2
	movq	%rax, 176(%rsp)         # 8-byte Spill
.LBB4_620:                              # %cond.end3361
                                        #   in Loop: Header=BB4_617 Depth=1
	cmpq	$0, 176(%rsp)           # 8-byte Folded Reload
	je	.LBB4_623
# BB#621:                               # %land.lhs.true3365
                                        #   in Loop: Header=BB4_617 Depth=1
	movq	304(%rsp), %rax
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_623
# BB#622:                               # %if.then3371
                                        #   in Loop: Header=BB4_617 Depth=1
	movq	8(%r12), %r15
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rbx
.LBB4_623:                              # %for.inc3379
                                        #   in Loop: Header=BB4_617 Depth=1
	movq	16(%r12), %r12
	testq	%r12, %r12
	jne	.LBB4_617
# BB#624:                               # %for.cond3316.for.end3383_crit_edge
	movq	304(%rsp), %rax
.LBB4_625:                              # %for.end3383
	movq	%rax, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	callq	record_value_for_reg
	cmpq	$0, 112(%rsp)           # 8-byte Folded Reload
	jne	.LBB4_630
# BB#626:                               # %land.lhs.true3385
	movq	320(%rsp), %rax
	testq	%rax, %rax
	je	.LBB4_628
# BB#627:                               # %lor.lhs.false3388
	movq	304(%rsp), %rcx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	reg_mentioned_p
	movq	144(%rsp), %rcx         # 8-byte Reload
	orq	%rcx, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_630
	jmp	.LBB4_629
.LBB4_398:
	movq	%r12, %r15
	movq	%r13, %r12
	jmp	.LBB4_439
.LBB4_406:                              # %if.then2386
	movq	48(%r15), %rax
	jmp	.LBB4_407
.LBB4_291:                              # %if.then1559
	leaq	256(%rsp), %rax
	leaq	272(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
	testq	%rax, %rax
	js	.LBB4_292
# BB#447:                               # %if.end1853.thread4817
	movq	256(%rsp), %rax
	movq	%rax, 328(%rsp)
	movq	$1, 152(%rsp)           # 8-byte Folded Spill
	movq	$0, 80(%rsp)            # 8-byte Folded Spill
	movq	%r12, %r15
	movq	%r13, %r12
	jmp	.LBB4_448
.LBB4_304:
	xorq	%r15, %r15
.LBB4_307:                              # %cond.end1678
	movq	8(%rcx), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$105, %rcx
	jne	.LBB4_310
# BB#308:                               # %cond.true1692
	movq	32(%rax), %rcx
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	movzbl	(%rcx), %ecx
	cmpq	$47, %rcx
	je	.LBB4_310
# BB#309:                               # %cond.false1714
	movq	%rax, %rdi
	movq	128(%rsp), %rsi         # 8-byte Reload
	callq	single_set_2
	movq	%rax, 128(%rsp)         # 8-byte Spill
.LBB4_310:                              # %cond.end1732
	movq	304(%rsp), %rax
	movl	8(%rax), %eax
	cmpq	$53, %rax
	jb	.LBB4_312
# BB#311:                               # %if.then1739
	movq	cfun(%rip), %rcx
	movq	24(%rcx), %rcx
	movq	80(%rcx), %rcx
	leaq	(%rcx,%rax,8), %rax
	movq	%rax, %rdi
	movq	152(%rsp), %rsi         # 8-byte Reload
	callq	do_SUBST
.LBB4_312:                              # %if.end1747
	leaq	320(%rsp), %rax
	leaq	264(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB4_318
# BB#313:                               # %if.end1747
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	je	.LBB4_318
# BB#314:                               # %if.end1747
	testq	%r15, %r15
	je	.LBB4_318
# BB#315:                               # %land.lhs.true1755
	movq	%r14, %rdi
	callq	next_real_insn
	cmpq	%r13, %rax
	je	.LBB4_317
# BB#316:                               # %lor.lhs.false1759
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	reg_used_between_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_318
.LBB4_317:                              # %if.then1765
	leaq	248(%rsp), %rax
	leaq	272(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, 104(%rsp)         # 8-byte Spill
.LBB4_318:                              # %if.end1767
	movq	$32, %rcx
	movq	104(%rsp), %rax         # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB4_292
# BB#319:                               # %if.then1770
	movq	248(%rsp), %rax
	movq	%rax, 328(%rsp)
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
.LBB4_320:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r15), %r15
	movzbl	(%r15), %ecx
	leaq	-63(%rcx), %rdx
	andq	%rsi, %rdx
	cmpq	$2, %rdx
	jb	.LBB4_320
# BB#321:                               # %while.cond
                                        #   in Loop: Header=BB4_320 Depth=1
	cmpq	$133, %rcx
	je	.LBB4_320
# BB#322:
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	jmp	.LBB4_323
.LBB4_628:                              # %land.lhs.true3391
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	144(%rsp), %rcx         # 8-byte Reload
	testq	%rax, %rcx
	jne	.LBB4_630
.LBB4_629:                              # %if.then3393
	movq	304(%rsp), %rax
	movl	8(%rax), %eax
	movq	reg_n_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rax
	movl	12(%rax), %ecx
	decq	%rcx
	movl	%ecx, 12(%rax)
.LBB4_630:                              # %if.end3404
	cmpq	$0, 152(%rsp)           # 8-byte Folded Reload
	je	.LBB4_643
# BB#631:                               # %land.lhs.true3406
	movq	288(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_643
# BB#632:                               # %for.cond3417.preheader
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	(%rcx), %r12
	xorq	%rbx, %rbx
	xorq	%r15, %r15
	testq	%r12, %r12
	je	.LBB4_641
.LBB4_633:                              # %for.body3419
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$105, %rcx
	jne	.LBB4_639
# BB#634:                               # %cond.true3430
                                        #   in Loop: Header=BB4_633 Depth=1
	movq	32(%rax), %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movzbl	(%rcx), %ecx
	cmpq	$47, %rcx
	je	.LBB4_636
# BB#635:                               # %cond.false3448
                                        #   in Loop: Header=BB4_633 Depth=1
	movq	%rax, %rdi
	movq	200(%rsp), %rsi         # 8-byte Reload
	callq	single_set_2
	movq	%rax, 200(%rsp)         # 8-byte Spill
.LBB4_636:                              # %cond.end3462
                                        #   in Loop: Header=BB4_633 Depth=1
	cmpq	$0, 200(%rsp)           # 8-byte Folded Reload
	je	.LBB4_639
# BB#637:                               # %land.lhs.true3466
                                        #   in Loop: Header=BB4_633 Depth=1
	movq	288(%rsp), %rax
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	8(%rcx), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_639
# BB#638:                               # %if.then3472
                                        #   in Loop: Header=BB4_633 Depth=1
	movq	8(%r12), %r15
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rbx
.LBB4_639:                              # %for.inc3480
                                        #   in Loop: Header=BB4_633 Depth=1
	movq	16(%r12), %r12
	testq	%r12, %r12
	jne	.LBB4_633
# BB#640:                               # %for.cond3417.for.end3484_crit_edge
	movq	288(%rsp), %rax
.LBB4_641:                              # %for.end3484
	movq	%rax, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	callq	record_value_for_reg
	movq	160(%rsp), %rax         # 8-byte Reload
	orq	%rax, 136(%rsp)         # 8-byte Folded Spill
	jne	.LBB4_643
# BB#642:                               # %if.then3491
	movq	288(%rsp), %rax
	movl	8(%rax), %eax
	movq	reg_n_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rax
	movl	12(%rax), %ecx
	decq	%rcx
	movl	%ecx, 12(%rax)
.LBB4_643:                              # %if.end3499
	movq	320(%rsp), %rax
	testq	%rax, %rax
	je	.LBB4_645
# BB#644:                               # %if.then3501
	movabsq	$set_nonzero_bits_and_sign_copies, %rcx
	xorq	%rdx, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	note_stores
.LBB4_645:                              # %if.end3502
	movq	328(%rsp), %rax
	movabsq	$set_nonzero_bits_and_sign_copies, %rcx
	xorq	%rdx, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	note_stores
	movq	328(%rsp), %rax
	movzbl	(%rax), %eax
	cmpq	$51, %rax
	je	.LBB4_647
# BB#646:                               # %lor.lhs.false3507
	movq	%r13, %rdi
	callq	any_uncondjump_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_650
.LBB4_647:                              # %if.then3510
	movq	$1, %rax
	movq	216(%rsp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
	movq	%r13, %rdi
	callq	next_nonnote_insn
	testq	%rax, %rax
	je	.LBB4_649
# BB#648:                               # %lor.lhs.false3514
	movzbl	(%rax), %eax
	cmpq	$35, %rax
	je	.LBB4_650
.LBB4_649:                              # %if.then3519
	movq	%r13, %rdi
	callq	emit_barrier_after
.LBB4_650:                              # %if.end3522
	movq	328(%rsp), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB4_654
# BB#651:                               # %land.lhs.true3527
	movq	16(%rax), %rcx
	movq	global_rtl(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB4_654
# BB#652:                               # %land.lhs.true3533
	movq	8(%rax), %rax
	cmpq	%rcx, %rax
	jne	.LBB4_654
# BB#653:                               # %if.then3539
	movq	$1, %rax
	movq	216(%rsp), %rcx         # 8-byte Reload
	movl	%eax, (%rcx)
.LBB4_654:                              # %if.end3540
	movl	combine_successes(%rip), %ecx
	movq	undobuf(%rip), %rax
	incq	%rcx
	movl	%ecx, combine_successes(%rip)
	testq	%rax, %rax
	je	.LBB4_658
# BB#655:                               # %for.body.lr.ph.i
	movq	undobuf+8(%rip), %rcx
.LBB4_656:                              # %for.body.i4646
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdx
	movq	(%rdx), %rax
	testq	%rax, %rax
	movq	%rcx, (%rdx)
	movq	%rdx, %rcx
	jne	.LBB4_656
# BB#657:                               # %for.cond.for.end_crit_edge.i
	movq	%rdx, undobuf+8(%rip)
.LBB4_658:                              # %undo_commit.exit
	movq	added_links_insn(%rip), %r12
	movq	320(%rsp), %rax
	movq	$0, undobuf(%rip)
	testq	%r12, %r12
	movq	%r14, %rcx
	movq	%r13, %rdi
	je	.LBB4_688
# BB#659:                               # %land.lhs.true3543
	movslq	8(%r12), %rsi
	movl	max_uid_cuid(%rip), %edx
	testq	%rax, %rax
	je	.LBB4_675
# BB#660:                               # %lor.lhs.false3546
	movq	%rdi, %r14
	movq	%rcx, %r11
	movq	$32, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rsi
	jle	.LBB4_667
# BB#661:                               # %land.lhs.true2.i4501.lr.ph
	leaq	8(%r12), %rdi
	movq	%r12, %rbx
.LBB4_662:                              # %land.lhs.true2.i4501
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %ecx
	cmpq	$32, %rcx
	jne	.LBB4_665
# BB#663:                               # %land.rhs.i4507
                                        #   in Loop: Header=BB4_662 Depth=1
	movq	32(%rbx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB4_665
# BB#664:                               # %while.body.i4510
                                        #   in Loop: Header=BB4_662 Depth=1
	movq	24(%rbx), %rbx
	leaq	8(%rbx), %rdi
	movslq	8(%rbx), %r8
	movq	$32, %rcx
	movq	%rdx, %r9
	shlq	%cl, %r9
	movq	$32, %rcx
	sarq	%cl, %r9
	cmpq	%r9, %r8
	jg	.LBB4_662
.LBB4_665:                              # %while.end.i4514
	movslq	(%rdi), %rbx
	movq	$32, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rbx
	jg	.LBB4_168
# BB#666:                               # %insn_cuid.exit4518
	movq	uid_cuid(%rip), %rdi
	leaq	(%rdi,%rbx,4), %rcx
	jmp	.LBB4_668
.LBB4_410:                              # %for.inc2403
                                        #   in Loop: Header=BB4_407 Depth=1
	movq	16(%rax), %rax
.LBB4_407:                              # %if.then2386
                                        # =>This Inner Loop Header: Depth=1
	testq	%rax, %rax
	je	.LBB4_400
# BB#408:                               # %for.body2392
                                        #   in Loop: Header=BB4_407 Depth=1
	movq	8(%rax), %rcx
	cmpq	%r13, %rcx
	jne	.LBB4_410
# BB#409:                               # %if.then2398
                                        #   in Loop: Header=BB4_407 Depth=1
	movq	%r12, 8(%rax)
	jmp	.LBB4_410
.LBB4_292:
	movq	%r12, %r15
	movq	%r13, %r12
	jmp	.LBB4_331
.LBB4_325:                              # %while.body1817
                                        #   in Loop: Header=BB4_323 Depth=1
	movq	8(%rax), %rax
.LBB4_323:                              # %while.cond1800
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rax), %edx
	leaq	-63(%rdx), %rsi
	andq	%rdi, %rsi
	cmpq	$2, %rsi
	jb	.LBB4_325
# BB#324:                               # %while.cond1800
                                        #   in Loop: Header=BB4_323 Depth=1
	cmpq	$133, %rdx
	je	.LBB4_325
# BB#326:                               # %while.end1821
	cmpq	$61, %rcx
	jne	.LBB4_330
# BB#327:                               # %while.end1821
	cmpq	$61, %rdx
	jne	.LBB4_330
# BB#328:                               # %land.lhs.true1831
	movl	8(%r15), %ecx
	movl	8(%rax), %eax
	cmpq	%rax, %rcx
	jne	.LBB4_330
# BB#329:                               # %if.then1840
	movq	reg_n_info(%rip), %rax
	movq	32(%rax,%rcx,8), %rax
	movl	12(%rax), %ecx
	incq	%rcx
	movl	%ecx, 12(%rax)
.LBB4_330:                              # %if.end1853
	movq	$32, %rcx
	movq	104(%rsp), %rax         # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	$1, 152(%rsp)           # 8-byte Folded Spill
	testq	%rax, %rax
	movq	%r12, %r15
	movq	%r13, %r12
	jns	.LBB4_448
.LBB4_331:                              # %land.lhs.true1856
	movq	%r15, 176(%rsp)         # 8-byte Spill
	leaq	328(%rsp), %rax
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r12, %r13
	callq	find_split_point
	movq	%rax, %rbx
	testq	%rbx, %rbx
	movq	$1, 152(%rsp)           # 8-byte Folded Spill
	je	.LBB4_332
# BB#333:                               # %land.lhs.true1860
	movq	304(%rsp), %rdx
	movq	(%rbx), %rcx
	movl	(%rdx), %eax
	movzbl	2(%rcx), %esi
	movq	$16, %rcx
	movq	%rax, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	cmpq	%rdi, %rsi
	je	.LBB4_339
# BB#334:                               # %land.lhs.true1860
	testq	%rsi, %rsi
	je	.LBB4_339
# BB#335:                               # %lor.lhs.false1875
	movl	8(%rdx), %ecx
	cmpq	$53, %rcx
	jb	.LBB4_339
# BB#336:                               # %lor.lhs.false1881
	cmpq	$0, 112(%rsp)           # 8-byte Folded Reload
	jne	.LBB4_332
# BB#337:                               # %lor.lhs.false1881
	movq	reg_n_info(%rip), %rdx
	movq	32(%rdx,%rcx,8), %rcx
	movl	12(%rcx), %ecx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$1, %rcx
	jne	.LBB4_332
# BB#338:                               # %lor.lhs.false1881
	andq	$134217728, %rax        # imm = 0x8000000
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_332
.LBB4_339:                              # %land.lhs.true1899
	movq	%r14, %rdi
	callq	next_real_insn
	cmpq	%r13, %rax
	je	.LBB4_347
# BB#340:                               # %lor.lhs.false1903
	movslq	8(%r14), %rdx
	movslq	max_uid_cuid(%rip), %rcx
	movq	(%rbx), %rax
	cmpq	%rcx, %rdx
	jle	.LBB4_346
# BB#341:                               # %land.lhs.true2.i4555.lr.ph
	movq	%r14, %rdi
	leaq	8(%rdi), %rdx
	movq	%rdi, %rsi
                                        # kill: R14<def> RDI<kill>
.LBB4_342:                              # %land.lhs.true2.i4555
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %edi
	cmpq	$32, %rdi
	jne	.LBB4_345
# BB#343:                               # %land.rhs.i4561
                                        #   in Loop: Header=BB4_342 Depth=1
	movq	32(%rsi), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB4_345
# BB#344:                               # %while.body.i4564
                                        #   in Loop: Header=BB4_342 Depth=1
	movq	24(%rsi), %rsi
	movslq	8(%rsi), %rdi
	leaq	8(%rsi), %rdx
	cmpq	%rcx, %rdi
	jg	.LBB4_342
.LBB4_345:                              # %while.end.i4568
	movslq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	jg	.LBB4_168
.LBB4_346:                              # %cond.false1911
	movq	uid_cuid(%rip), %rcx
	leaq	(%rcx,%rdx,4), %rcx
	movl	(%rcx), %ecx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	use_crosses_set_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_332
.LBB4_347:                              # %land.lhs.true1921
	movq	304(%rsp), %rax
	movq	328(%rsp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	reg_referenced_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB4_332
# BB#348:                               # %if.then1924
	movq	(%rbx), %rax
	movq	304(%rsp), %r15
	movl	(%rax), %r12d
	movzbl	2(%r15), %eax
	movq	$16, %rcx
	movq	%r12, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	cmpq	%rdx, %rax
	je	.LBB4_352
# BB#349:                               # %if.then1924
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	je	.LBB4_352
# BB#350:                               # %if.then1938
	movl	8(%r15), %eax
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_rtx_REG
	movq	304(%rsp), %rcx
	movl	8(%rcx), %ecx
	movq	%rax, %r15
	cmpq	$53, %rcx
	jb	.LBB4_352
# BB#351:                               # %if.then1948
	movq	cfun(%rip), %rax
	movq	24(%rax), %rax
	movq	80(%rax), %rax
	leaq	(%rax,%rcx,8), %rax
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	do_SUBST
.LBB4_352:                              # %if.end1957
	andq	$65535, %r12            # imm = 0xFFFF
	cmpq	$78, %r12
	jne	.LBB4_357
# BB#353:                               # %land.lhs.true1960
	movq	(%rbx), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	$78, %r12
	jne	.LBB4_360
# BB#354:                               # %land.lhs.true1968
	movq	8(%rax), %rax
	testq	%rax, %rax
	jle	.LBB4_360
# BB#355:                               # %land.lhs.true1977
	movq	%rax, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	js	.LBB4_360
# BB#356:                               # %if.then1987
	movq	(%rbx), %rcx
	movq	8(%rcx), %r12
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$87, %rdi
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	(%rbx), %rax
	movzbl	(%rax), %r12d
.LBB4_357:                              # %if.end1996
	cmpq	$63, %r12
	jne	.LBB4_360
# BB#358:                               # %land.lhs.true1999
	movq	(%rbx), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	movq	$63, %r12
	jne	.LBB4_360
# BB#359:                               # %if.then2007
	movq	$121, %rdi
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
.LBB4_360:                              # %if.end2012
	movq	(%rbx), %rax
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, 320(%rsp)
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	do_SUBST
	leaq	320(%rsp), %rax
	leaq	264(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB4_332
# BB#361:                               # %land.lhs.true2017
	cmpq	$78, %r12
	jne	.LBB4_363
# BB#362:                               # %land.lhs.true2017
	cmpq	$0, 120(%rsp)           # 8-byte Folded Reload
	jne	.LBB4_363
.LBB4_332:
	movq	176(%rsp), %r15         # 8-byte Reload
	jmp	.LBB4_415
.LBB4_667:                              # %cond.false3554
	movq	uid_cuid(%rip), %rdi
	leaq	(%rdi,%rsi,4), %rcx
.LBB4_668:                              # %cond.end3560
	movl	(%rcx), %ebx
	movq	184(%rsp), %rcx         # 8-byte Reload
	movslq	(%rcx), %r8
	movq	$32, %rcx
	movq	%rdx, %r9
	shlq	%cl, %r9
	movq	$32, %rcx
	sarq	%cl, %r9
	cmpq	%r9, %r8
	jle	.LBB4_674
# BB#669:
	movq	%r11, %r8
.LBB4_670:                              # %land.lhs.true2.i4430
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r8), %ecx
	cmpq	$32, %rcx
	jne	.LBB4_673
# BB#671:                               # %land.rhs.i4436
                                        #   in Loop: Header=BB4_670 Depth=1
	movq	32(%r8), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB4_673
# BB#672:                               # %while.body.i4439
                                        #   in Loop: Header=BB4_670 Depth=1
	movq	24(%r8), %r8
	leaq	8(%r8), %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	movslq	8(%r8), %r9
	movq	$32, %rcx
	movq	%rdx, %r10
	shlq	%cl, %r10
	movq	$32, %rcx
	sarq	%cl, %r10
	cmpq	%r10, %r9
	jg	.LBB4_670
.LBB4_673:                              # %while.end.i4443
	movq	184(%rsp), %rcx         # 8-byte Reload
	movslq	(%rcx), %r8
	movq	$32, %rcx
	movq	%rdx, %r9
	shlq	%cl, %r9
	movq	$32, %rcx
	sarq	%cl, %r9
	cmpq	%r9, %r8
	jg	.LBB4_168
.LBB4_674:                              # %cond.end3575
	movslq	(%rdi,%r8,4), %rdi
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rdi, %rbx
	movq	%r11, %rcx
	movq	%r14, %rdi
	jge	.LBB4_688
.LBB4_675:                              # %land.lhs.true3579
	movq	%rdi, %r11
	movq	%rcx, %r10
	movq	$32, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rsi
	jle	.LBB4_681
# BB#676:                               # %land.lhs.true2.i4305.lr.ph
	leaq	8(%r12), %rsi
	movq	%r12, %rdi
.LBB4_677:                              # %land.lhs.true2.i4305
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdi), %ecx
	cmpq	$32, %rcx
	jne	.LBB4_680
# BB#678:                               # %land.rhs.i4311
                                        #   in Loop: Header=BB4_677 Depth=1
	movq	32(%rdi), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB4_680
# BB#679:                               # %while.body.i4314
                                        #   in Loop: Header=BB4_677 Depth=1
	movq	24(%rdi), %rdi
	leaq	8(%rdi), %rsi
	movslq	8(%rdi), %rbx
	movq	$32, %rcx
	movq	%rdx, %r8
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	cmpq	%r8, %rbx
	jg	.LBB4_677
.LBB4_680:                              # %while.end.i4318
	movslq	(%rsi), %rsi
	movq	$32, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rsi
	jg	.LBB4_168
.LBB4_681:                              # %cond.false3587
	movq	uid_cuid(%rip), %rdi
	leaq	(%rdi,%rsi,4), %rcx
	movl	(%rcx), %esi
	movq	208(%rsp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rbx
	movq	$32, %rcx
	movq	%rdx, %r8
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	cmpq	%r8, %rbx
	jle	.LBB4_687
# BB#682:
	movq	%r11, %rbx
.LBB4_683:                              # %land.lhs.true2.i4261
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %ecx
	cmpq	$32, %rcx
	jne	.LBB4_686
# BB#684:                               # %land.rhs.i4267
                                        #   in Loop: Header=BB4_683 Depth=1
	movq	32(%rbx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB4_686
# BB#685:                               # %while.body.i4270
                                        #   in Loop: Header=BB4_683 Depth=1
	movq	24(%rbx), %rbx
	leaq	8(%rbx), %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	movslq	8(%rbx), %r8
	movq	$32, %rcx
	movq	%rdx, %r9
	shlq	%cl, %r9
	movq	$32, %rcx
	sarq	%cl, %r9
	cmpq	%r9, %r8
	jg	.LBB4_683
.LBB4_686:                              # %while.end.i4274
	movq	208(%rsp), %rcx         # 8-byte Reload
	movslq	(%rcx), %rbx
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %rbx
	jg	.LBB4_168
.LBB4_687:                              # %cond.end3608
	movslq	(%rdi,%rbx,4), %rdx
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	movq	%r10, %rcx
	movq	%r11, %rdi
	jl	.LBB4_691
.LBB4_688:                              # %if.else3613
	movq	%rdi, %rdx
	testq	%rax, %rax
	jne	.LBB4_690
# BB#689:                               # %if.else3613
	movq	%rdx, %rcx
.LBB4_690:                              # %if.else3613
	movq	%rcx, %r12
	jmp	.LBB4_691
.LBB4_400:
	movq	%r12, %r15
.LBB4_415:
	movq	%r13, %r12
	movq	104(%rsp), %rsi         # 8-byte Reload
	jmp	.LBB4_438
.LBB4_363:                              # %if.then2022
	leaq	328(%rsp), %rax
	leaq	272(%rsp), %rcx
	movq	%rax, %rdi
	movq	%r13, %r12
	movq	%r12, %rsi
	movq	%rcx, %rdx
	callq	recog_for_combine
	movq	%rax, %rsi
	movq	176(%rsp), %r15         # 8-byte Reload
.LBB4_438:                              # %if.end2633
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movq	$32, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB4_448
.LBB4_439:                              # %land.lhs.true2636
	movq	328(%rsp), %rdi
	callq	check_asm_operands
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB4_442
# BB#440:                               # %land.lhs.true2636
	cmpq	$0, 136(%rsp)           # 8-byte Folded Reload
	jne	.LBB4_442
# BB#441:                               # %land.lhs.true2636
	cmpq	$0, 112(%rsp)           # 8-byte Folded Reload
	je	.LBB4_448
.LBB4_442:                              # %if.then2643
	movq	undobuf(%rip), %rax
	testq	%rax, %rax
	je	.LBB4_110
.LBB4_443:                              # %for.body.i4633
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%rax), %edx
	movq	(%rax), %rcx
	testq	%rdx, %rdx
	jne	.LBB4_444
# BB#445:                               # %if.else.i4640
                                        #   in Loop: Header=BB4_443 Depth=1
	movq	16(%rax), %rdx
	movq	24(%rax), %rsi
	movq	%rdx, (%rsi)
	jmp	.LBB4_446
.LBB4_444:                              # %if.then.i4637
                                        #   in Loop: Header=BB4_443 Depth=1
	movl	16(%rax), %edx
	movq	24(%rax), %rsi
	movl	%edx, (%rsi)
.LBB4_446:                              # %if.end.i4642
                                        #   in Loop: Header=BB4_443 Depth=1
	movq	undobuf+8(%rip), %rdx
	movq	%rdx, (%rax)
	movq	%rax, undobuf+8(%rip)
	testq	%rcx, %rcx
	movq	%rcx, %rax
	jne	.LBB4_443
.LBB4_110:                              # %undo_all.exit
	movq	$0, undobuf(%rip)
	xorq	%r12, %r12
.LBB4_691:                              # %return
	movq	%r12, %rax
	addq	$336, %rsp              # imm = 0x150
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB4_168:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp80:
	.size	try_combine, .Ltmp80-try_combine
	.cfi_endproc

	.globl	extended_count
	.align	16, 0x90
	.type	extended_count,@function
extended_count:                         # @extended_count
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp83:
	.cfi_def_cfa_offset 16
.Ltmp84:
	.cfi_offset %rbx, -16
	movzbl	nonzero_sign_valid(%rip), %ecx
	xorq	%rax, %rax
	testq	%rcx, %rcx
	je	.LBB5_5
# BB#1:                                 # %if.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdx
	je	.LBB5_4
# BB#2:                                 # %cond.true
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movzbl	mode_bitsize(%rdx,%rdx), %ebx
	cmpq	$64, %rbx
	ja	.LBB5_5
# BB#3:                                 # %cond.true3
	decq	%rbx
	callq	nonzero_bits
	movq	%rax, %rdi
	callq	floor_log2_wide
	subq	%rax, %rbx
	movq	%rbx, %rax
	popq	%rbx
	retq
.LBB5_4:                                # %cond.false9
	callq	num_sign_bit_copies
	decq	%rax
.LBB5_5:                                # %return
	popq	%rbx
	retq
.Ltmp85:
	.size	extended_count, .Ltmp85-extended_count
	.cfi_endproc

	.align	16, 0x90
	.type	nonzero_bits,@function
nonzero_bits:                           # @nonzero_bits
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp92:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp93:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp94:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp95:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp96:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp97:
	.cfi_def_cfa_offset 80
.Ltmp98:
	.cfi_offset %rbx, -48
.Ltmp99:
	.cfi_offset %r12, -40
.Ltmp100:
	.cfi_offset %r13, -32
.Ltmp101:
	.cfi_offset %r14, -24
.Ltmp102:
	.cfi_offset %r15, -16
	movq	%rsi, %r8
	movq	%rdi, %r11
	movq	$32, %rcx
	movq	%r8, %rdx
	movl	(%r11), %eax
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	movl	mode_class(,%rsi,4), %ecx
	movq	mode_mask_array(,%rdx,8), %rbx
	cmpq	$8, %rcx
	ja	.LBB6_2
# BB#1:                                 # %entry
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$324, %rdi              # imm = 0x144
	jne	.LBB6_58
.LBB6_2:                                # %lor.lhs.false21
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB6_4
# BB#3:                                 # %lor.lhs.false21
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$324, %rdi              # imm = 0x144
	jne	.LBB6_58
.LBB6_4:                                # %if.end
	movzbl	mode_bitsize(%rdx,%rdx), %edi
	movzbl	mode_bitsize(%rsi,%rsi), %r12d
	movq	%rdi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	%rcx, %r12
	jbe	.LBB6_6
# BB#5:                                 # %if.then44
	movq	mode_mask_array(,%rsi,8), %rbx
	movq	%r12, %rdi
	movq	%rsi, %r8
.LBB6_6:                                # %if.end53
	movq	%rdi, %r15
	andq	$65535, %r15            # imm = 0xFFFF
	cmpq	$64, %r15
	ja	.LBB6_58
# BB#7:                                 # %if.end57
	movq	%rbx, %r13
	testq	%rsi, %rsi
	je	.LBB6_13
# BB#8:                                 # %if.end57
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%r8, %rcx
	cmpq	%rcx, %rsi
	je	.LBB6_13
# BB#9:                                 # %land.lhs.true68
	movl	target_flags(%rip), %edx
	movq	$20, %rcx
	shrq	%cl, %rdx
	andq	$32, %rdx
	addq	$32, %rdx
	movabsq	$4294967264, %rcx       # imm = 0xFFFFFFE0
	andq	%rdx, %rcx
	cmpq	%rcx, %r12
	ja	.LBB6_13
# BB#10:                                # %land.lhs.true68
	cmpq	$64, %r12
	ja	.LBB6_13
# BB#11:                                # %land.lhs.true86
	movq	$32, %rcx
	movq	%r8, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movzbl	mode_bitsize(%rbx,%rbx), %ecx
	cmpq	%r12, %rcx
	jbe	.LBB6_13
# BB#12:                                # %if.then98
	movq	%r11, %rdi
	movq	%r11, %r14
	callq	nonzero_bits
	movzbl	2(%r14), %ecx
	movq	mode_mask_array(,%rcx,8), %rcx
	movq	mode_mask_array(,%rbx,8), %rdx
	andq	%r13, %rax
	notq	%rcx
	andq	%rdx, %rcx
	orq	%rax, %rcx
	movq	%rcx, %rax
	jmp	.LBB6_59
.LBB6_13:                               # %if.end111
	movq	%rax, %r14
	andq	$65535, %r14            # imm = 0xFFFF
	leaq	-54(%r14), %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	movq	%r13, %rbx
	cmpq	$79, %rcx
	ja	.LBB6_58
# BB#14:                                # %if.end111
	jmpq	*.LJTI6_0(,%rcx,8)
.LBB6_54:                               # %if.end111.sw.bb304_crit_edge1083
	movq	$32, %rcx
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	leaq	mode_class(,%r8,4), %rax
	movl	(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB6_55
# BB#56:                                # %sw.bb304
	movabsq	$1, %rax
	jmp	.LBB6_57
.LBB6_55:
	movabsq	$0, %rax
.LBB6_57:                               # %sw.bb304
	andq	$65535, %rdi            # imm = 0xFFFF
	cmpq	$65, %rdi
	sbbq	%rcx, %rcx
	testq	%rax, %rcx
	movq	$1, %rax
	jne	.LBB6_59
	jmp	.LBB6_58
.LBB6_72:                               # %sw.bb447
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	movq	8(%r11), %rdi
	movq	%r8, %rsi
	movq	%r8, %r13
	movq	%r11, %rbx
	callq	nonzero_bits
	movq	16(%rbx), %rdi
	movq	%rax, %r12
	movq	%r13, %rsi
	callq	nonzero_bits
	movq	%rax, %r13
	movq	%r12, %rdi
	callq	floor_log2_wide
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r13, %rdi
	callq	floor_log2_wide
	movq	%rax, %rbx
	movq	%r12, %rdi
	negq	%rdi
	andq	%r12, %rdi
	callq	floor_log2_wide
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	%r13, %rdi
	negq	%rdi
	andq	%r13, %rdi
	callq	floor_log2_wide
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%rbx, %r10
	leaq	-1(%r15), %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	addq	$-75, %r14
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rdi, %r14
	cmpq	$7, %r14
	ja	.LBB6_103
# BB#73:                                # %sw.bb447
	incq	%rsi
	incq	%r10
	jmpq	*.LJTI6_1(,%r14,8)
.LBB6_74:                               # %sw.bb473
	movq	$32, %rcx
	movq	%r10, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	movq	%rsi, %rbx
	movq	%rsi, %r9
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rdx, %rbx
	movq	16(%rsp), %rbx          # 8-byte Reload
	jge	.LBB6_76
# BB#75:                                # %sw.bb473
	movq	%r10, %r9
.LBB6_76:                               # %sw.bb473
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	movq	8(%rsp), %r8            # 8-byte Reload
	movq	%r8, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jle	.LBB6_78
# BB#77:                                # %sw.bb473
	movq	%rax, %r8
.LBB6_78:                               # %sw.bb473
	incq	%r9
	movq	%r9, %rdx
	jmp	.LBB6_106
.LBB6_70:                               # %sw.bb431
	movq	8(%r11), %rdi
	movq	%r8, %rsi
	movq	%r8, %r14
	movq	%r11, %r12
	callq	nonzero_bits
	movq	%rax, %r15
                                        # kill: RAX<def> R15<kill>
	andq	%rbx, %rax
	cmpq	%rbx, %rax
	je	.LBB6_58
# BB#71:                                # %if.then439
	movq	16(%r12), %rdi
	movq	%r14, %rsi
	callq	nonzero_bits
	orq	%r15, %rax
	andq	%rbx, %rax
	jmp	.LBB6_59
.LBB6_122:                              # %sw.bb689
	movq	16(%r11), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_58
# BB#123:                               # %land.lhs.true697
	movq	%rdi, %r13
	movq	8(%rax), %rax
	cmpq	$63, %rax
	ja	.LBB6_58
# BB#124:                               # %if.then715
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	mode_mask_array(,%rsi,8), %r15
	movq	8(%r11), %rdi
	movq	%r8, %rsi
	callq	nonzero_bits
	movq	%rax, %rsi
	andq	$65535, %r13            # imm = 0xFFFF
	xorq	%rdi, %rdi
	cmpq	%r12, %r13
	jbe	.LBB6_126
# BB#125:                               # %if.then738
	movq	%r15, %rdi
	notq	%rdi
	andq	%rbx, %rdi
	andq	%rsi, %rdi
.LBB6_126:                              # %if.end742
	andq	%r15, %rsi
	cmpq	$87, %r14
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	je	.LBB6_132
# BB#127:                               # %if.end742
	cmpq	$89, %r14
	jne	.LBB6_128
# BB#130:                               # %if.then750
	movq	24(%rsp), %r9           # 8-byte Reload
	andq	%r9, %r8
	movq	%r8, %rcx
	shrq	%cl, %rsi
	movq	%r9, %rcx
	notq	%rcx
	addq	%r12, %rcx
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	%rdx, %rsi
	je	.LBB6_134
# BB#131:                               # %if.then759
	movq	%r8, %rcx
	shlq	%cl, %rax
	decq	%rax
	subq	%r9, %r12
	movq	%r12, %rcx
	shlq	%cl, %rax
	orq	%rax, %rsi
	jmp	.LBB6_134
.LBB6_137:                              # %sw.bb301
	movq	8(%r11), %rbx
	jmp	.LBB6_58
.LBB6_15:                               # %sw.bb
	movq	global_rtl+16(%rip), %rdx
	movl	8(%r11), %esi
	cmpq	%r11, %rdx
	je	.LBB6_18
# BB#16:                                # %sw.bb
	movq	global_rtl+24(%rip), %rax
	cmpq	%r11, %rax
	je	.LBB6_18
# BB#17:                                # %sw.bb
	movq	global_rtl+40(%rip), %rax
	cmpq	%r11, %rax
	jne	.LBB6_27
.LBB6_18:                               # %land.lhs.true122
	movq	cfun(%rip), %rax
	movq	24(%rax), %rax
	movq	64(%rax), %rax
	movzbl	(%rax,%rsi), %eax
	testq	%rax, %rax
	je	.LBB6_27
# BB#19:                                # %if.then128
	movq	$3, %rcx
	shrq	%cl, %rax
	cmpq	%r11, %rdx
	jne	.LBB6_26
# BB#20:                                # %land.lhs.true140
	movl	target_flags(%rip), %edx
	testq	$6144, %rdx             # imm = 0x1800
	jne	.LBB6_26
# BB#21:                                # %if.then146
	andq	$33554432, %rdx         # imm = 0x2000000
	movq	$25, %rcx
	shrq	%cl, %rdx
	testq	%rdx, %rdx
	movq	$8, %rcx
	jne	.LBB6_23
# BB#22:                                # %if.then146
	movq	$2, %rcx
.LBB6_23:                               # %if.then146
	cmpq	%rax, %rcx
	jb	.LBB6_25
# BB#24:                                # %if.then146
	movq	%rax, %rcx
.LBB6_25:                               # %if.then146
	movq	%rcx, %rax
.LBB6_26:                               # %if.end158
	negq	%rax
	andq	%rax, %rbx
.LBB6_27:                               # %if.end161
	movabsq	$4294967295, %r10       # imm = 0xFFFFFFFF
	movq	reg_last_set_value(%rip), %rax
	cmpq	$0, (%rax,%rsi,8)
	je	.LBB6_46
# BB#28:                                # %land.lhs.true169
	movq	reg_last_set_mode(%rip), %rax
	movl	(%rax,%rsi,4), %edx
	movq	$32, %rcx
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%r8, %rcx
	andq	%r10, %rcx
	cmpq	%rcx, %rdx
	je	.LBB6_31
# BB#29:                                # %lor.lhs.false177
	movl	mode_class(,%rax,4), %eax
	cmpq	$1, %rax
	jne	.LBB6_46
# BB#30:                                # %land.lhs.true187
	movq	$32, %rcx
	movq	%r8, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movl	mode_class(,%rax,4), %eax
	cmpq	$1, %rax
	jne	.LBB6_46
.LBB6_31:                               # %land.lhs.true192
	movq	reg_last_set_label(%rip), %rax
	movl	(%rax,%rsi,4), %eax
	movl	label_tick(%rip), %ecx
	cmpq	%rcx, %rax
	je	.LBB6_36
# BB#32:                                # %lor.lhs.false200
	cmpq	$53, %rsi
	jb	.LBB6_46
# BB#33:                                # %land.lhs.true206
	movq	reg_n_info(%rip), %rax
	movq	32(%rax,%rsi,8), %rax
	movl	12(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB6_46
# BB#34:                                # %land.lhs.true214
	movq	basic_block_info(%rip), %rax
	movq	32(%rax), %rax
	movq	%rdi, %r15
	movq	64(%rax), %rdi
	movq	%r8, %r14
	movq	%r10, %r12
	movq	%r11, %r13
	callq	bitmap_bit_p
	movq	%r13, %r11
	movq	%r12, %r10
	movq	%r15, %rdi
	movq	%r14, %r8
	testq	%r10, %rax
	jne	.LBB6_46
# BB#35:                                # %land.lhs.true214.land.lhs.true222_crit_edge
	movl	8(%r11), %esi
.LBB6_36:                               # %land.lhs.true222
	movq	%rdi, %r9
	movq	reg_last_set(%rip), %rax
	andq	%r10, %rsi
	movq	(%rax,%rsi,8), %rcx
	movslq	8(%rcx), %rdx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rdx
	jle	.LBB6_43
# BB#37:                                # %land.lhs.true2.i.lr.ph
	leaq	8(%rcx), %rdx
.LBB6_38:                               # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rcx), %edi
	cmpq	$32, %rdi
	jne	.LBB6_41
# BB#39:                                # %land.rhs.i
                                        #   in Loop: Header=BB6_38 Depth=1
	movq	32(%rcx), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB6_41
# BB#40:                                # %while.body.i
                                        #   in Loop: Header=BB6_38 Depth=1
	movq	24(%rcx), %rcx
	movslq	8(%rcx), %rdi
	leaq	8(%rcx), %rdx
	cmpq	%rax, %rdi
	jg	.LBB6_38
.LBB6_41:                               # %while.end.i
	movq	%r8, %rdi
	movslq	(%rdx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB6_138
# BB#42:                                # %insn_cuid.exit
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movq	%rdi, %r8
	jmp	.LBB6_44
.LBB6_113:                              # %sw.bb596
	andq	$335544320, %rax        # imm = 0x14000000
	cmpq	$335544320, %rax        # imm = 0x14000000
	jne	.LBB6_114
# BB#115:                               # %if.then606
	movq	mode_mask_array(,%rsi,8), %r14
	movq	8(%r11), %rdi
	leaq	8(%r11), %rbx
	movq	%r11, %r12
	movq	%r8, %r15
	callq	nonzero_bits
	movq	%r15, %r8
	andq	%r14, %rax
	movq	%rax, %rsi
	jmp	.LBB6_116
.LBB6_136:                              # %sw.bb796
	movq	16(%r11), %rdi
	movq	%r8, %rsi
	movq	%r8, %r15
	movq	%r11, %r14
	callq	nonzero_bits
	movq	24(%r14), %rdi
	movq	%rbx, %r14
	movq	%rax, %rbx
	movq	%r15, %rsi
	callq	nonzero_bits
	orq	%rbx, %rax
	andq	%r14, %rax
	jmp	.LBB6_59
.LBB6_60:                               # %sw.bb314
	movzbl	mode_size(%rsi), %eax
	cmpq	%r15, %rax
	jae	.LBB6_58
# BB#61:                                # %if.then323
	movq	$32, %rcx
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	movq	mode_mask_array(,%rsi,8), %rax
	movq	mode_mask_array(,%r8,8), %rcx
	jmp	.LBB6_121
.LBB6_69:                               # %sw.bb420
	movq	8(%r11), %rdi
	movq	%r8, %rsi
	movq	%r8, %r15
	movq	%r11, %r14
	callq	nonzero_bits
	movq	16(%r14), %rdi
	movq	%rbx, %r14
	movq	%rax, %rbx
	movq	%r15, %rsi
	callq	nonzero_bits
	andq	%r14, %rbx
	andq	%rax, %rbx
	jmp	.LBB6_58
.LBB6_65:                               # %sw.bb368
	movq	8(%r11), %rdi
	movq	%r8, %rsi
	movq	%r8, %r14
	movq	%r11, %r15
	callq	nonzero_bits
	movq	8(%r15), %rcx
	movzbl	2(%rcx), %edx
	testq	%rdx, %rdx
	je	.LBB6_68
# BB#66:                                # %if.then381
	movzbl	mode_bitsize(%rdx,%rdx), %ecx
	movq	mode_mask_array(,%rdx,8), %rdx
	andq	%rdx, %rax
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	addq	%rsi, %rcx
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	%rax, %rsi
	je	.LBB6_68
# BB#67:                                # %if.then403
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	mode_mask_array(,%r14,8), %rcx
	notq	%rdx
	andq	%rcx, %rdx
	orq	%rdx, %rax
.LBB6_68:                               # %if.end418
	andq	%rax, %rbx
	jmp	.LBB6_58
.LBB6_63:                               # %sw.bb343
	movq	8(%r11), %rdi
	movq	%r8, %rsi
	movq	%r11, %r14
	callq	nonzero_bits
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %ecx
	andq	%rax, %rbx
	testq	%rcx, %rcx
	je	.LBB6_58
# BB#64:                                # %if.then357
	movq	mode_mask_array(,%rcx,8), %rax
	andq	%rax, %rbx
	jmp	.LBB6_58
.LBB6_62:                               # %sw.bb335
	movq	8(%r11), %rdi
	movq	%r8, %rsi
	movq	%r8, %r14
	callq	nonzero_bits
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	mode_mask_array(,%r14,8), %rcx
	andq	%rbx, %rax
	andq	%rcx, %rax
	jmp	.LBB6_59
.LBB6_135:                              # %sw.bb789
	andq	$65535, %rdi            # imm = 0xFFFF
	callq	floor_log2_wide
	leaq	1(%rax), %rcx
	movq	$1, %rbx
	shlq	%cl, %rbx
	decq	%rbx
	jmp	.LBB6_58
.LBB6_110:                              # %sw.bb568
	movq	16(%r11), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_58
# BB#111:                               # %land.lhs.true576
	movq	8(%rax), %rcx
	cmpq	$63, %rcx
	jg	.LBB6_58
# BB#112:                               # %if.then585
	movq	$1, %rax
	shlq	%cl, %rax
	decq	%rax
	andq	%rax, %rbx
	jmp	.LBB6_58
.LBB6_79:                               # %sw.bb487
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	movq	8(%rsp), %r8            # 8-byte Reload
	movq	%r8, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	movq	16(%rsp), %rbx          # 8-byte Reload
	jle	.LBB6_108
# BB#80:                                # %sw.bb487
	movq	%rax, %r8
	jmp	.LBB6_108
.LBB6_104:                              # %sw.bb494
	addq	%rsi, %r10
	movq	8(%rsp), %r8            # 8-byte Reload
	addq	%rax, %r8
	movq	%r10, %rdx
	jmp	.LBB6_105
.LBB6_81:                               # %sw.bb497
	testq	%rdi, %r10
	je	.LBB6_82
# BB#83:                                # %if.end501
	orq	%r12, %r13
	testq	%rdx, %r13
	je	.LBB6_85
# BB#84:                                # %if.end501
	movq	%r15, %rsi
.LBB6_85:                               # %if.end501
	xorq	%r8, %r8
	movq	%rsi, %rdx
.LBB6_105:                              # %sw.epilog
	movq	16(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB6_106
.LBB6_89:                               # %sw.bb512
	testq	%rdi, %r10
	je	.LBB6_90
# BB#91:                                # %if.end516
	orq	%r12, %r13
	testq	%rdx, %r13
	movq	%r15, %rdx
	movq	8(%rsp), %r8            # 8-byte Reload
	jne	.LBB6_95
# BB#92:                                # %if.then520
	movq	$32, %rcx
	movq	%r10, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	movq	%rsi, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rdx, %rbx
	jle	.LBB6_94
# BB#93:                                # %if.then520
	movq	%r10, %rsi
.LBB6_94:                               # %if.then520
	movq	%rsi, %rdx
.LBB6_95:                               # %if.end527
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$32, %rcx
	movq	%r8, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rsi, %rbx
	movq	16(%rsp), %rbx          # 8-byte Reload
	jle	.LBB6_106
# BB#96:                                # %if.end527
	movq	%rax, %r8
	jmp	.LBB6_106
.LBB6_86:                               # %sw.bb507
	movq	%rsi, %rax
	testq	%rdi, %r10
	movq	%r15, %rdx
	movq	16(%rsp), %rbx          # 8-byte Reload
	je	.LBB6_88
# BB#87:                                # %sw.bb507
	movq	%rax, %rdx
.LBB6_88:                               # %sw.bb507
	xorq	%r8, %r8
	jmp	.LBB6_106
.LBB6_97:                               # %sw.bb534
	movq	%rsi, %r9
	testq	%rdi, %r10
	movq	16(%rsp), %rbx          # 8-byte Reload
	je	.LBB6_58
# BB#98:                                # %if.end538
	movq	$32, %rcx
	movq	%r10, %r8
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	movq	$32, %rcx
	movq	%r9, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%r8, %rdx
	movq	8(%rsp), %r8            # 8-byte Reload
	jle	.LBB6_100
# BB#99:                                # %if.end538
	movq	%r10, %r9
.LBB6_100:                              # %if.end538
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	movq	%r8, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jle	.LBB6_102
# BB#101:                               # %if.end538
	movq	%rax, %r8
.LBB6_102:                              # %if.end538
	movq	%r9, %rdx
.LBB6_106:                              # %sw.epilog
	andq	%rdx, %rdi
	cmpq	%r15, %rdi
	jae	.LBB6_108
# BB#107:                               # %if.then553
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl, %rax
	decq	%rax
	andq	%rax, %rbx
.LBB6_108:                              # %if.end558
	movq	$32, %rcx
	movq	%r8, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB6_58
# BB#109:                               # %if.then561
	movq	$-1, %rax
	movq	%r8, %rcx
	shlq	%cl, %rax
	andq	%rax, %rbx
	jmp	.LBB6_58
.LBB6_114:                              # %sw.bb596.if.end620_crit_edge
	movq	%rbx, %rsi
	leaq	8(%r11), %rbx
	movq	%r11, %r12
.LBB6_116:                              # %if.end620
	movq	(%rbx), %rdi
	movzbl	2(%rdi), %eax
	movl	target_flags(%rip), %edx
	movzbl	mode_bitsize(%rax,%rax), %eax
	movq	$20, %rcx
	shrq	%cl, %rdx
	andq	$32, %rdx
	addq	$32, %rdx
	movabsq	$4294967264, %rcx       # imm = 0xFFFFFFE0
	andq	%rdx, %rcx
	cmpq	%rcx, %rax
	ja	.LBB6_117
# BB#118:                               # %if.end620
	cmpq	$64, %rax
	movq	%rsi, %rbx
	ja	.LBB6_58
# BB#119:                               # %if.then647
	movq	%r8, %rsi
	callq	nonzero_bits
	movq	8(%r12), %rdx
	movzbl	2(%r12), %ecx
	movzbl	2(%rdx), %edx
	movzbl	mode_size(%rcx), %esi
	movzbl	mode_size(%rdx), %edi
	andq	%rax, %rbx
	cmpq	%rdi, %rsi
	jbe	.LBB6_58
# BB#120:                               # %if.then670
	movq	mode_mask_array(,%rdx,8), %rax
	movq	mode_mask_array(,%rcx,8), %rcx
.LBB6_121:                              # %return
	notq	%rax
	andq	%rcx, %rax
	orq	%rax, %rbx
	jmp	.LBB6_58
.LBB6_103:                              # %sw.default
	movabsq	$.L.str2, %rdi
	movabsq	$.L__FUNCTION__.nonzero_bits, %rdx
	movq	$8256, %rsi             # imm = 0x2040
	callq	fancy_abort
.LBB6_82:
	movq	16(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB6_58
.LBB6_90:
	movq	16(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB6_58
.LBB6_132:                              # %if.then771
	movq	24(%rsp), %rcx          # 8-byte Reload
	shlq	%cl, %rsi
	jmp	.LBB6_134
.LBB6_128:                              # %if.end742
	cmpq	$90, %r14
	jne	.LBB6_133
# BB#129:                               # %if.then745
	movq	24(%rsp), %rcx          # 8-byte Reload
	andq	%r8, %rcx
	shrq	%cl, %rsi
	jmp	.LBB6_134
.LBB6_117:
	movq	%rsi, %rbx
	jmp	.LBB6_58
.LBB6_133:                              # %if.else774
	movq	24(%rsp), %rax          # 8-byte Reload
	andq	%r8, %rax
	xorq	%rdx, %rdx
	divq	%r12
	movq	%rsi, %rax
	movq	%rdx, %rcx
	shlq	%cl, %rax
	subq	%rdx, %r12
	andq	%r8, %r12
	movq	%r12, %rcx
	shrq	%cl, %rsi
	orq	%rax, %rsi
	andq	%r15, %rsi
.LBB6_134:                              # %if.end785
	orq	%rdi, %rsi
	andq	%rsi, %rbx
.LBB6_58:                               # %sw.bb304
	movq	%rbx, %rax
.LBB6_59:                               # %sw.bb304
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB6_43:                               # %cond.false239
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rdx,4), %rax
.LBB6_44:                               # %cond.end250
	movq	%r9, %rdi
	movslq	(%rax), %rax
	movslq	subst_low_cuid(%rip), %rcx
	cmpq	%rcx, %rax
	jge	.LBB6_46
# BB#45:                                # %if.then254
	movq	reg_last_set_nonzero_bits(%rip), %rax
	movq	(%rax,%rsi,8), %rax
	andq	%rax, %rbx
	jmp	.LBB6_58
.LBB6_46:                               # %if.end261
	movq	%rdi, %r15
	movq	%r8, %r14
	movq	%r11, %rdi
	movq	%r11, %r12
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB6_49
# BB#47:                                # %if.then264
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	nonzero_bits
	andq	%rbx, %rax
	jmp	.LBB6_59
.LBB6_49:                               # %if.else
	movzbl	nonzero_sign_valid(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB6_58
# BB#50:                                # %land.lhs.true268
	movq	%r12, %rdx
	movl	8(%rdx), %eax
	movq	reg_nonzero_bits(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	testq	%rax, %rax
	je	.LBB6_58
# BB#51:                                # %if.then275
	movzbl	2(%rdx), %edx
	movzbl	mode_bitsize(%rdx,%rdx), %ecx
	andq	$65535, %r15            # imm = 0xFFFF
	cmpq	%r15, %rcx
	jae	.LBB6_53
# BB#52:                                # %if.then289
	movq	$32, %rcx
	movq	%r14, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	mode_mask_array(,%rsi,8), %rcx
	movq	mode_mask_array(,%rdx,8), %rdx
	xorq	%rcx, %rdx
	orq	%rdx, %rax
.LBB6_53:                               # %if.end298
	andq	%rax, %rbx
	jmp	.LBB6_58
.LBB6_138:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp103:
	.size	nonzero_bits, .Ltmp103-nonzero_bits
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI6_0:
	.quad	.LBB6_137
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_15
	.quad	.LBB6_58
	.quad	.LBB6_113
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_136
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_72
	.quad	.LBB6_72
	.quad	.LBB6_60
	.quad	.LBB6_72
	.quad	.LBB6_72
	.quad	.LBB6_72
	.quad	.LBB6_72
	.quad	.LBB6_72
	.quad	.LBB6_69
	.quad	.LBB6_70
	.quad	.LBB6_70
	.quad	.LBB6_58
	.quad	.LBB6_122
	.quad	.LBB6_122
	.quad	.LBB6_122
	.quad	.LBB6_122
	.quad	.LBB6_58
	.quad	.LBB6_70
	.quad	.LBB6_70
	.quad	.LBB6_70
	.quad	.LBB6_70
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_54
	.quad	.LBB6_65
	.quad	.LBB6_63
	.quad	.LBB6_62
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_58
	.quad	.LBB6_135
	.quad	.LBB6_58
	.quad	.LBB6_110
.LJTI6_1:
	.quad	.LBB6_74
	.quad	.LBB6_79
	.quad	.LBB6_103
	.quad	.LBB6_104
	.quad	.LBB6_81
	.quad	.LBB6_89
	.quad	.LBB6_86
	.quad	.LBB6_97

	.text
	.align	16, 0x90
	.type	num_sign_bit_copies,@function
num_sign_bit_copies:                    # @num_sign_bit_copies
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp110:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp111:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp112:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp113:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp114:
	.cfi_def_cfa_offset 48
.Ltmp115:
	.cfi_offset %rbx, -48
.Ltmp116:
	.cfi_offset %r12, -40
.Ltmp117:
	.cfi_offset %r13, -32
.Ltmp118:
	.cfi_offset %r14, -24
.Ltmp119:
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	%rdi, %rax
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	jmp	.LBB7_1
.LBB7_96:                               # %sw.bb660
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	16(%r14), %rax
	.align	16, 0x90
.LBB7_1:                                # %tailrecurse
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_25 Depth 2
	movq	%rax, %r14
	movl	(%r14), %eax
	testq	%r8, %rbx
	jne	.LBB7_3
# BB#2:                                 # %if.end
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$16, %rcx
	movq	%rax, %rbx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movq	$1, %r12
	je	.LBB7_118
.LBB7_3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	mode_class(,%rdx,4), %ecx
	movq	$1, %r12
	cmpq	$8, %rcx
	jbe	.LBB7_4
.LBB7_5:                                # %lor.lhs.false13
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	movl	mode_class(,%rsi,4), %ecx
	cmpq	$8, %rcx
	jbe	.LBB7_6
.LBB7_7:                                # %if.end35
                                        #   in Loop: Header=BB7_1 Depth=1
	movzbl	mode_bitsize(%rdx,%rdx), %r15d
	movzbl	mode_bitsize(%rsi,%rsi), %ecx
	cmpq	%rcx, %r15
	jb	.LBB7_8
# BB#12:                                # %if.end67
                                        #   in Loop: Header=BB7_1 Depth=1
	testq	%rsi, %rsi
	je	.LBB7_14
# BB#13:                                # %if.end67
                                        #   in Loop: Header=BB7_1 Depth=1
	cmpq	%rcx, %r15
	ja	.LBB7_118
.LBB7_14:                               # %if.end82
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	%rax, %r13
	andq	$65535, %r13            # imm = 0xFFFF
	leaq	-54(%r13), %rcx
	andq	%r8, %rcx
	cmpq	$78, %rcx
	ja	.LBB7_37
# BB#15:                                # %if.end82
                                        #   in Loop: Header=BB7_1 Depth=1
	jmpq	*.LJTI7_0(,%rcx,8)
.LBB7_16:                               # %sw.bb
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	8(%r14), %esi
	movq	reg_last_set_value(%rip), %rax
	cmpq	$0, (%rax,%rsi,8)
	je	.LBB7_33
# BB#17:                                # %land.lhs.true88
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	reg_last_set_mode(%rip), %rax
	movl	(%rax,%rsi,4), %eax
	movq	%rbx, %rcx
	andq	%r8, %rcx
	cmpq	%rcx, %rax
	jne	.LBB7_33
# BB#18:                                # %land.lhs.true96
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	reg_last_set_label(%rip), %rax
	movl	(%rax,%rsi,4), %eax
	movl	label_tick(%rip), %ecx
	cmpq	%rcx, %rax
	je	.LBB7_23
# BB#19:                                # %lor.lhs.false104
                                        #   in Loop: Header=BB7_1 Depth=1
	cmpq	$53, %rsi
	jb	.LBB7_33
# BB#20:                                # %land.lhs.true110
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	reg_n_info(%rip), %rax
	movq	32(%rax,%rsi,8), %rax
	movl	12(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB7_33
# BB#21:                                # %land.lhs.true118
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	basic_block_info(%rip), %rax
	movq	32(%rax), %rax
	movq	64(%rax), %rdi
	movq	%r8, %r12
	callq	bitmap_bit_p
	movq	%r12, %r8
	testq	%r8, %rax
	jne	.LBB7_33
# BB#22:                                # %land.lhs.true118.land.lhs.true125_crit_edge
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	8(%r14), %esi
.LBB7_23:                               # %land.lhs.true125
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	reg_last_set(%rip), %rax
	andq	%r8, %rsi
	movq	(%rax,%rsi,8), %rcx
	movslq	8(%rcx), %rdx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rdx
	jle	.LBB7_30
# BB#24:                                # %land.lhs.true2.i.lr.ph
                                        #   in Loop: Header=BB7_1 Depth=1
	leaq	8(%rcx), %rdx
	.align	16, 0x90
.LBB7_25:                               # %land.lhs.true2.i
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rcx), %edi
	cmpq	$32, %rdi
	jne	.LBB7_28
# BB#26:                                # %land.rhs.i
                                        #   in Loop: Header=BB7_25 Depth=2
	movq	32(%rcx), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB7_28
# BB#27:                                # %while.body.i
                                        #   in Loop: Header=BB7_25 Depth=2
	movq	24(%rcx), %rcx
	movslq	8(%rcx), %rdi
	leaq	8(%rcx), %rdx
	cmpq	%rax, %rdi
	jg	.LBB7_25
.LBB7_28:                               # %while.end.i
                                        #   in Loop: Header=BB7_1 Depth=1
	movslq	(%rdx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB7_119
# BB#29:                                # %insn_cuid.exit
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	jmp	.LBB7_31
.LBB7_93:                               # %sw.bb640
                                        #   in Loop: Header=BB7_1 Depth=1
	cmpq	$64, %r15
	movq	$1, %r12
	ja	.LBB7_118
# BB#94:                                # %if.else
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	movq	%r8, %r12
	callq	nonzero_bits
	movq	%r12, %r8
	decq	%r15
	movq	$1, %r12
	movq	$1, %rdx
	movq	%r15, %rcx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	jne	.LBB7_118
# BB#95:                                # %if.else655
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	8(%r14), %rax
	jmp	.LBB7_1
.LBB7_56:                               # %sw.bb387
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	8(%r14), %rax
	jmp	.LBB7_1
.LBB7_4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB7_5
	jmp	.LBB7_118
.LBB7_6:                                # %lor.lhs.false13
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	$1, %rdi
	shlq	%cl, %rdi
	testq	$324, %rdi              # imm = 0x144
	je	.LBB7_7
	jmp	.LBB7_118
.LBB7_30:                               # %cond.false142
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rdx,4), %rax
.LBB7_31:                               # %cond.end153
                                        #   in Loop: Header=BB7_1 Depth=1
	movslq	(%rax), %rax
	movslq	subst_low_cuid(%rip), %rcx
	cmpq	%rcx, %rax
	jl	.LBB7_32
.LBB7_33:                               # %if.end164
                                        #   in Loop: Header=BB7_1 Depth=1
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	get_last_value
	movq	%r12, %r8
	testq	%rax, %rax
	jne	.LBB7_1
# BB#34:                                # %if.end170
	movzbl	nonzero_sign_valid(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB7_37
# BB#35:                                # %land.lhs.true172
	movl	8(%r14), %eax
	movq	reg_sign_bit_copies(%rip), %rcx
	movzbl	(%rcx,%rax), %r12d
	testq	%r12, %r12
	je	.LBB7_37
# BB#36:                                # %land.lhs.true181
	movzbl	2(%r14), %eax
	movzbl	mode_bitsize(%rax,%rax), %eax
	cmpq	%r15, %rax
	je	.LBB7_118
	jmp	.LBB7_37
.LBB7_115:                              # %sw.bb832
	movq	$1, %rdi
	cmpq	$1, %r15
	jne	.LBB7_46
# BB#116:                               # %if.end847
	movq	mode_mask_array(,%rdx,8), %rdi
	andq	$-2, %rdi
	jne	.LBB7_46
	jmp	.LBB7_117
.LBB7_75:                               # %sw.bb510
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	%rax, %r15
	movq	$32, %rcx
	movq	%r15, %r12
	movq	16(%r14), %rdi
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %r12
	jle	.LBB7_10
# BB#76:                                # %sw.bb510
	movq	%rax, %r15
	jmp	.LBB7_10
.LBB7_8:                                # %if.then46
	movq	%r14, %rdi
	callq	num_sign_bit_copies
	movzbl	2(%r14), %ecx
	jmp	.LBB7_9
.LBB7_57:                               # %sw.bb392
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_37
# BB#58:                                # %land.lhs.true400
	movq	8(%rax), %rax
	testq	%rax, %rax
	js	.LBB7_37
# BB#59:                                # %land.lhs.true409
	cmpq	%r15, %rax
	jge	.LBB7_37
# BB#60:                                # %if.then419
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	16(%r14), %rdx
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	8(%rdx), %rdx
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$88, %r13
	je	.LBB7_62
# BB#61:                                # %if.then419
	subq	%rdx, %r15
	movq	%r15, %rdx
	jmp	.LBB7_62
.LBB7_41:                               # %sw.bb198
	movq	8(%r14), %rdi
	movq	mode_mask_array(,%rdx,8), %rax
	andq	%rax, %rdi
	cmpq	$64, %r15
	ja	.LBB7_45
# BB#42:                                # %land.lhs.true205
	leaq	-1(%r15), %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdi, %rdx
	je	.LBB7_44
# BB#43:                                # %land.lhs.true205
	movq	%rax, %rdx
.LBB7_44:                               # %land.lhs.true205
	xorq	%rdx, %rdi
.LBB7_45:                               # %if.end214
	testq	%rdi, %rdi
	je	.LBB7_117
.LBB7_46:                               # %cond.false218
	callq	floor_log2_wide
	decq	%r15
	subq	%rax, %r15
.LBB7_117:                              # %return
	movq	%r15, %r12
	jmp	.LBB7_118
.LBB7_47:                               # %sw.bb224
	movq	8(%r14), %rdi
	andq	$335544320, %rax        # imm = 0x14000000
	cmpq	$268435456, %rax        # imm = 0x10000000
	jne	.LBB7_50
# BB#48:                                # %if.then234
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movzbl	2(%r14), %edx
	movq	$32, %rcx
	movq	%rax, %rsi
	movzbl	mode_bitsize(%rdx,%rdx), %edx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	subq	%rdx, %r15
	cmpq	%rsi, %r15
	jl	.LBB7_11
# BB#49:                                # %if.then234
	incq	%r15
	jmp	.LBB7_10
.LBB7_113:                              # %sw.bb817
	movq	16(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	%rax, %r15
	movq	$32, %rcx
	movq	%r15, %r12
	movq	24(%r14), %rdi
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %r12
	jle	.LBB7_10
# BB#114:                               # %sw.bb817
	movq	%rax, %r15
	jmp	.LBB7_10
.LBB7_77:                               # %land.lhs.true528
	movq	16(%r14), %rax
	movq	const_int_rtx+504(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB7_82
# BB#78:                                # %land.lhs.true528
	cmpq	$64, %r15
	ja	.LBB7_82
# BB#79:                                # %if.then537
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	leaq	-1(%r15), %r13
	movq	$1, %rdx
	movq	%r13, %rcx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	je	.LBB7_80
.LBB7_82:                               # %if.end562
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	%rax, %r15
	movq	$32, %rcx
	movq	%r15, %r12
	movq	16(%r14), %rdi
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %r12
	jle	.LBB7_84
# BB#83:                                # %if.end562
	movq	%rax, %r15
.LBB7_84:                               # %if.end562
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$2, %rax
	movq	$1, %rax
	jl	.LBB7_11
# BB#85:                                # %if.end562
	decq	%r15
	jmp	.LBB7_10
.LBB7_65:                               # %sw.bb476
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	%rax, %r12
	cmpq	$65, %r15
	jb	.LBB7_69
# BB#66:                                # %if.then483
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$1, %rax
	jg	.LBB7_67
# BB#68:                                # %if.then483
	movq	$1, %r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_86:                               # %sw.bb591
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	16(%r14), %rdi
	movq	%rax, %r12
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	%rax, %r13
	subq	%r15, %r13
	addq	%r12, %r13
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB7_91
# BB#87:                                # %land.lhs.true606
	cmpq	$64, %r15
	ja	.LBB7_90
# BB#88:                                # %lor.lhs.false609
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	decq	%r15
	movq	$1, %r12
	movq	%r15, %rcx
	shlq	%cl, %r12
	testq	%r12, %rax
	je	.LBB7_91
# BB#89:                                # %land.lhs.true620
	movq	16(%r14), %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	testq	%r12, %rax
	je	.LBB7_91
.LBB7_90:                               # %if.then631
	decq	%r13
.LBB7_91:                               # %if.end633
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %r12
	jle	.LBB7_118
# BB#92:                                # %if.end633
	movq	%r13, %r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_97:                               # %sw.bb665
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	%rax, %r12
	movq	$32, %rcx
                                        # kill: RAX<def> R12<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$2, %rax
	jl	.LBB7_118
# BB#98:                                # %land.lhs.true672
	cmpq	$64, %r15
	ja	.LBB7_100
# BB#99:                                # %lor.lhs.false675
	movq	16(%r14), %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	decq	%r15
	movq	$1, %rdx
	movq	%r15, %rcx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	je	.LBB7_118
.LBB7_100:                              # %if.then686
	decq	%r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_101:                              # %sw.bb689
	movq	16(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	%rax, %r12
	movq	$32, %rcx
                                        # kill: RAX<def> R12<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$2, %rax
	jl	.LBB7_118
# BB#102:                               # %land.lhs.true696
	cmpq	$64, %r15
	ja	.LBB7_104
# BB#103:                               # %lor.lhs.false699
	movq	16(%r14), %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	decq	%r15
	movq	$1, %rdx
	movq	%r15, %rcx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	je	.LBB7_118
.LBB7_104:                              # %if.then710
	decq	%r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_109:                              # %sw.bb761
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_118
# BB#110:                               # %lor.lhs.false769
	movq	8(%rax), %rax
	testq	%rax, %rax
	js	.LBB7_118
# BB#111:                               # %lor.lhs.false769
	cmpq	%r15, %rax
	jge	.LBB7_118
# BB#112:                               # %if.end789
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	16(%r14), %rdx
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	8(%rdx), %rdx
	movq	$32, %rcx
	sarq	%cl, %rax
.LBB7_62:                               # %if.then419
	subq	%rdx, %rax
	testq	%rax, %rax
	movq	$1, %rcx
	jle	.LBB7_64
# BB#63:                                # %if.then419
	movq	%rax, %rcx
.LBB7_64:                               # %if.then419
	movq	%rcx, %rax
	jmp	.LBB7_11
.LBB7_105:                              # %sw.bb713
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	16(%r14), %rcx
	movzbl	(%rcx), %edx
	movq	%rax, %r12
	cmpq	$54, %rdx
	jne	.LBB7_118
# BB#106:                               # %land.lhs.true725
	movq	8(%rcx), %rax
	testq	%rax, %rax
	jle	.LBB7_118
# BB#107:                               # %if.then734
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	addq	%r12, %rax
	cmpq	%rax, %r15
	jle	.LBB7_117
# BB#108:                               # %if.then734
	movq	%rax, %r15
	jmp	.LBB7_117
.LBB7_54:                               # %sw.bb338
	movq	8(%r14), %rdi
	movzbl	2(%rdi), %eax
	movzbl	mode_bitsize(%rax,%rax), %eax
	subq	%rax, %r15
	xorq	%rsi, %rsi
	callq	num_sign_bit_copies
	addq	%r15, %rax
	jmp	.LBB7_11
.LBB7_55:                               # %sw.bb354
	movq	8(%r14), %rdi
	jmp	.LBB7_51
.LBB7_52:                               # %sw.bb305
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_37
# BB#53:                                # %if.then313
	movq	8(%rax), %rax
	subq	%rax, %r15
	testq	%r15, %r15
	movq	$1, %r12
	jg	.LBB7_117
	jmp	.LBB7_118
.LBB7_50:                               # %if.end259
	movzbl	2(%rdi), %eax
	movzbl	mode_bitsize(%rax,%rax), %eax
	cmpq	%rax, %r15
	jbe	.LBB7_51
.LBB7_37:                               # %sw.epilog
	cmpq	$64, %r15
	movq	$1, %r12
	ja	.LBB7_118
# BB#38:                                # %if.end860
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	decq	%r15
	movq	$1, %r12
	movq	$1, %rdx
	movq	%r15, %rcx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	jne	.LBB7_118
# BB#39:                                # %cond.false868
	movq	%rax, %rdi
	callq	floor_log2_wide
	subq	%rax, %r15
	jmp	.LBB7_117
.LBB7_51:                               # %if.then271
	xorq	%rsi, %rsi
	callq	num_sign_bit_copies
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %ecx
.LBB7_9:                                # %if.then46
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	subq	%rcx, %r15
	addq	%rax, %r15
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rax
	jle	.LBB7_11
.LBB7_10:                               # %if.then46
	movq	%r15, %rax
	jmp	.LBB7_11
.LBB7_69:                               # %if.end491
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	cmpq	$1, %rax
	je	.LBB7_117
# BB#70:                                # %if.end499
	movq	$32, %rcx
	movq	%r12, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$2, %rdx
	jl	.LBB7_118
# BB#71:                                # %land.lhs.true502
	decq	%r15
	movq	$1, %rdx
	movq	%r15, %rcx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	je	.LBB7_72
# BB#73:                                # %land.lhs.true502
	movabsq	$1, %rax
	subq	%rax, %r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_67:
	decq	%r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_80:                               # %if.then548
	cmpq	$2, %rax
	movq	%r15, %r12
	jae	.LBB7_81
.LBB7_118:                              # %return
	movq	%r12, %rax
.LBB7_11:                               # %if.then46
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB7_32:                               # %if.then157
	movq	reg_last_set_sign_bit_copies(%rip), %rax
	movsbq	(%rax,%rsi), %r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_81:                               # %cond.false555
	movq	%rax, %rdi
	callq	floor_log2_wide
	subq	%rax, %r13
	movq	%r13, %r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_72:
	movabsq	$0, %rax
	subq	%rax, %r12
	movq	%r12, %rax
	jmp	.LBB7_11
.LBB7_119:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp120:
	.size	num_sign_bit_copies, .Ltmp120-num_sign_bit_copies
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI7_0:
	.quad	.LBB7_41
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_16
	.quad	.LBB7_37
	.quad	.LBB7_47
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_113
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_77
	.quad	.LBB7_82
	.quad	.LBB7_65
	.quad	.LBB7_86
	.quad	.LBB7_97
	.quad	.LBB7_101
	.quad	.LBB7_93
	.quad	.LBB7_96
	.quad	.LBB7_75
	.quad	.LBB7_75
	.quad	.LBB7_75
	.quad	.LBB7_56
	.quad	.LBB7_109
	.quad	.LBB7_57
	.quad	.LBB7_105
	.quad	.LBB7_37
	.quad	.LBB7_57
	.quad	.LBB7_75
	.quad	.LBB7_75
	.quad	.LBB7_75
	.quad	.LBB7_75
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_115
	.quad	.LBB7_54
	.quad	.LBB7_37
	.quad	.LBB7_55
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_37
	.quad	.LBB7_52

	.text
	.globl	remove_death
	.align	16, 0x90
	.type	remove_death,@function
remove_death:                           # @remove_death
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp125:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp126:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp127:
	.cfi_def_cfa_offset 32
.Ltmp128:
	.cfi_offset %rbx, -32
.Ltmp129:
	.cfi_offset %r14, -24
.Ltmp130:
	.cfi_offset %r15, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	$1, %rsi
	movq	%r14, %rdi
	movq	%rbx, %rdx
	callq	find_regno_note
	movq	%rax, %r15
	testq	%r15, %r15
	je	.LBB8_2
# BB#1:                                 # %if.then
	movq	reg_n_info(%rip), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rbx
	movq	32(%rax,%rbx,8), %rax
	movl	24(%rax), %ecx
	decq	%rcx
	movl	%ecx, 24(%rax)
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	remove_note
.LBB8_2:                                # %if.end
	movq	%r15, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp131:
	.size	remove_death, .Ltmp131-remove_death
	.cfi_endproc

	.globl	dump_combine_stats
	.align	16, 0x90
	.type	dump_combine_stats,@function
dump_combine_stats:                     # @dump_combine_stats
	.cfi_startproc
# BB#0:                                 # %entry
	movl	combine_successes(%rip), %r9d
	movl	combine_extras(%rip), %r8d
	movl	combine_merges(%rip), %ecx
	movl	combine_attempts(%rip), %edx
	movabsq	$.L.str, %rsi
	xorq	%rax, %rax
	jmp	fnotice  # TAILCALL
.Ltmp132:
	.size	dump_combine_stats, .Ltmp132-dump_combine_stats
	.cfi_endproc

	.globl	dump_combine_total_stats
	.align	16, 0x90
	.type	dump_combine_total_stats,@function
dump_combine_total_stats:               # @dump_combine_total_stats
	.cfi_startproc
# BB#0:                                 # %entry
	movl	total_successes(%rip), %r9d
	movl	total_extras(%rip), %r8d
	movl	total_merges(%rip), %ecx
	movl	total_attempts(%rip), %edx
	movabsq	$.L.str1, %rsi
	xorq	%rax, %rax
	jmp	fnotice  # TAILCALL
.Ltmp133:
	.size	dump_combine_total_stats, .Ltmp133-dump_combine_total_stats
	.cfi_endproc

	.align	16, 0x90
	.type	record_value_for_reg,@function
record_value_for_reg:                   # @record_value_for_reg
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp140:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp141:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp142:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp143:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp144:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp145:
	.cfi_def_cfa_offset 64
.Ltmp146:
	.cfi_offset %rbx, -48
.Ltmp147:
	.cfi_offset %r12, -40
.Ltmp148:
	.cfi_offset %r13, -32
.Ltmp149:
	.cfi_offset %r14, -24
.Ltmp150:
	.cfi_offset %r15, -16
	movq	%rdx, %r15
	movq	%rdi, %r13
	movq	%r15, 8(%rsp)
	movl	8(%r13), %r14d
	movq	%rsi, %r12
	cmpq	$52, %r14
	movq	$1, %rbx
	ja	.LBB11_15
# BB#1:                                 # %cond.true
	movzbl	2(%r13), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%r14, %rcx
	cmpq	$8, %rcx
	je	.LBB11_5
# BB#2:                                 # %cond.true
	leaq	-21(%r14), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB11_5
# BB#3:                                 # %cond.true
	leaq	-45(%r14), %rdx
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB11_5
# BB#4:                                 # %cond.true
	leaq	-29(%r14), %rdx
	andq	%rcx, %rdx
	cmpq	$7, %rdx
	jbe	.LBB11_5
# BB#10:                                # %cond.false
	cmpq	$24, %rax
	jne	.LBB11_11
# BB#13:                                # %cond.true34
	movzbl	target_flags+3(%rip), %ebx
	andq	$2, %rbx
	xorq	$6, %rbx
	jmp	.LBB11_15
.LBB11_5:                               # %cond.true14
	movl	mode_class(,%rax,4), %eax
	cmpq	$5, %rax
	movq	$2, %rbx
	je	.LBB11_15
# BB#6:                                 # %lor.rhs
	cmpq	$6, %rax
	jne	.LBB11_7
# BB#8:                                 # %lor.rhs
	movabsq	$1, %rbx
	incq	%rbx
	jmp	.LBB11_15
.LBB11_11:                              # %cond.false
	cmpq	$18, %rax
	jne	.LBB11_14
# BB#12:                                # %cond.true27
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	shrq	%cl, %rbx
	andq	$1, %rbx
	xorq	$3, %rbx
	jmp	.LBB11_15
.LBB11_7:
	movabsq	$0, %rbx
	incq	%rbx
	jmp	.LBB11_15
.LBB11_14:                              # %cond.false38
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	movq	%rax, %rbx
.LBB11_15:                              # %cond.end56
	testq	%r15, %r15
	je	.LBB11_16
# BB#17:                                # %cond.end56
	testq	%r12, %r12
	je	.LBB11_18
# BB#19:                                # %land.lhs.true62
	movq	%r13, %rdi
	movq	%r15, %rsi
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB11_20
# BB#21:                                # %if.then
	movslq	8(%r12), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB11_27
# BB#22:                                # %land.lhs.true2.i.lr.ph
	leaq	8(%r12), %rcx
	movq	%r12, %rdx
	.align	16, 0x90
.LBB11_23:                              # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB11_26
# BB#24:                                # %land.rhs.i
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB11_26
# BB#25:                                # %while.body.i
                                        #   in Loop: Header=BB11_23 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rsi
	jg	.LBB11_23
.LBB11_26:                              # %while.end.i
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB11_65
.LBB11_27:                              # %cond.false70
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movq	%r13, (%rsp)            # 8-byte Spill
	movl	(%rax), %eax
	movl	%eax, subst_low_cuid(%rip)
	movq	%r13, %rdi
	callq	get_last_value
	movq	%rax, %r13
	testq	%r13, %r13
	je	.LBB11_35
# BB#28:                                # %if.then80
	movzbl	(%r13), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$50, %rax
	je	.LBB11_30
# BB#29:                                # %if.then80
	cmpq	$99, %rax
	jne	.LBB11_34
.LBB11_30:                              # %land.lhs.true96
	movq	8(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB11_34
# BB#31:                                # %land.lhs.true103
	movq	16(%r13), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$49, %rcx
	je	.LBB11_33
# BB#32:                                # %land.lhs.true103
	movq	%r13, %rax
.LBB11_33:                              # %land.lhs.true103
	movq	%rax, %r13
.LBB11_34:                              # %if.end
	movq	%r15, %rdi
	callq	copy_rtx
	movq	%rax, %rdi
	movq	(%rsp), %rsi            # 8-byte Reload
	movq	%r13, %rdx
	callq	replace_rtx
	movq	%rax, %r15
	movq	%r15, 8(%rsp)
	jmp	.LBB11_35
.LBB11_16:
	movq	%r13, (%rsp)            # 8-byte Spill
	jmp	.LBB11_35
.LBB11_18:
	movq	%r13, (%rsp)            # 8-byte Spill
	jmp	.LBB11_35
.LBB11_20:
	movq	%r13, (%rsp)            # 8-byte Spill
.LBB11_35:                              # %for.cond.preheader
	addq	%r14, %rbx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rbx
	cmpq	%rbx, %r14
	jae	.LBB11_39
# BB#36:                                # %for.body.lr.ph
	xorq	%rax, %rax
	movq	%r14, %rcx
	movq	%r14, %rdx
	testq	%r12, %r12
	je	.LBB11_38
	.align	16, 0x90
.LBB11_37:                              # %if.end125.us
                                        # =>This Inner Loop Header: Depth=1
	movq	reg_last_set(%rip), %rsi
	movq	%r12, (%rsi,%rcx,8)
	movq	reg_last_set_value(%rip), %rsi
	movq	$0, (%rsi,%rcx,8)
	movq	reg_last_set_mode(%rip), %rsi
	movl	%eax, (%rsi,%rcx,4)
	movq	reg_last_set_nonzero_bits(%rip), %rsi
	movq	$0, (%rsi,%rcx,8)
	movq	reg_last_set_sign_bit_copies(%rip), %rsi
	movb	%al, (%rsi,%rcx)
	movq	reg_last_death(%rip), %rsi
	movq	$0, (%rsi,%rcx,8)
	incq	%rdx
	movq	%rdx, %rsi
	andq	%r13, %rsi
	incq	%rcx
	cmpq	%rbx, %rsi
	jne	.LBB11_37
	jmp	.LBB11_39
	.align	16, 0x90
.LBB11_38:                              # %if.end125
                                        # =>This Inner Loop Header: Depth=1
	movq	reg_last_set_value(%rip), %rsi
	movq	$0, (%rsi,%rcx,8)
	movq	reg_last_set_mode(%rip), %rsi
	movl	%eax, (%rsi,%rcx,4)
	movq	reg_last_set_nonzero_bits(%rip), %rsi
	movq	$0, (%rsi,%rcx,8)
	movq	reg_last_set_sign_bit_copies(%rip), %rsi
	movb	%al, (%rsi,%rcx)
	movq	reg_last_death(%rip), %rsi
	movq	$0, (%rsi,%rcx,8)
	incq	%rdx
	movq	%rdx, %rsi
	andq	%r13, %rsi
	incq	%rcx
	cmpq	%rbx, %rsi
	jne	.LBB11_38
.LBB11_39:                              # %for.end
	testq	%r15, %r15
	je	.LBB11_41
# BB#40:                                # %if.then137
	movq	%r15, %rdi
	callq	update_table_tick
.LBB11_41:                              # %for.cond139.preheader
	cmpq	%rbx, %r14
	jae	.LBB11_49
# BB#42:                                # %for.body142.lr.ph
	testq	%r15, %r15
	je	.LBB11_43
# BB#45:
	movq	%r14, %rax
	movq	%r14, %rcx
	.align	16, 0x90
.LBB11_46:                              # %land.lhs.true146
                                        # =>This Inner Loop Header: Depth=1
	movl	label_tick(%rip), %edx
	movq	reg_last_set_label(%rip), %rsi
	movl	%edx, (%rsi,%rax,4)
	movq	reg_last_set_table_tick(%rip), %rdx
	movl	(%rdx,%rax,4), %esi
	movl	label_tick(%rip), %edi
	movq	reg_last_set_invalid(%rip), %rdx
	cmpq	%rdi, %rsi
	movq	$1, %rsi
	je	.LBB11_48
# BB#47:                                # %select.mid
                                        #   in Loop: Header=BB11_46 Depth=1
	xorq	%rsi, %rsi
.LBB11_48:                              # %select.end
                                        #   in Loop: Header=BB11_46 Depth=1
	movb	%sil, (%rdx,%rax)
	incq	%rcx
	movq	%rcx, %rdx
	andq	%r13, %rdx
	incq	%rax
	cmpq	%rbx, %rdx
	jne	.LBB11_46
	jmp	.LBB11_49
.LBB11_43:
	xorq	%rax, %rax
	movq	%r14, %rcx
	movq	%r14, %rdx
	.align	16, 0x90
.LBB11_44:                              # %for.inc157.us
                                        # =>This Inner Loop Header: Depth=1
	movl	label_tick(%rip), %esi
	movq	reg_last_set_label(%rip), %rdi
	movl	%esi, (%rdi,%rcx,4)
	movq	reg_last_set_invalid(%rip), %rsi
	movb	%al, (%rsi,%rcx)
	incq	%rdx
	movq	%rdx, %rsi
	andq	%r13, %rsi
	incq	%rcx
	cmpq	%rbx, %rsi
	jne	.LBB11_44
.LBB11_49:                              # %for.end159
	testq	%r15, %r15
	je	.LBB11_53
# BB#50:                                # %land.lhs.true161
	movq	reg_last_set_label(%rip), %rax
	movl	(%rax,%r14,4), %edx
	leaq	8(%rsp), %rdi
	xorq	%rcx, %rcx
	movq	%r12, %rsi
	callq	get_last_value_validate
	testq	%r13, %rax
	jne	.LBB11_53
# BB#51:                                # %if.then166
	movq	8(%rsp), %rdi
	callq	copy_rtx
	movq	reg_last_set_label(%rip), %rcx
	movq	%rax, 8(%rsp)
	movl	(%rcx,%r14,4), %edx
	leaq	8(%rsp), %rdi
	movq	$1, %rcx
	movq	%r12, %rsi
	callq	get_last_value_validate
	testq	%r13, %rax
	je	.LBB11_52
.LBB11_53:                              # %if.end174
	movq	8(%rsp), %rbx
	movq	reg_last_set_value(%rip), %rax
	testq	%rbx, %rbx
	movq	%rbx, (%rax,%r14,8)
	je	.LBB11_64
# BB#54:                                # %if.then178
	movslq	8(%r12), %rcx
	movslq	max_uid_cuid(%rip), %rax
	movq	(%rsp), %r15            # 8-byte Reload
	movzbl	2(%r15), %esi
	cmpq	%rax, %rcx
	jle	.LBB11_60
# BB#55:                                # %land.lhs.true2.i304.lr.ph
	leaq	8(%r12), %rcx
	.align	16, 0x90
.LBB11_56:                              # %land.lhs.true2.i304
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r12), %edx
	cmpq	$32, %rdx
	jne	.LBB11_59
# BB#57:                                # %land.rhs.i310
                                        #   in Loop: Header=BB11_56 Depth=1
	movq	32(%r12), %rdx
	movzbl	(%rdx), %edx
	cmpq	$48, %rdx
	jne	.LBB11_59
# BB#58:                                # %while.body.i313
                                        #   in Loop: Header=BB11_56 Depth=1
	movq	24(%r12), %r12
	movslq	8(%r12), %rdx
	leaq	8(%r12), %rcx
	cmpq	%rax, %rdx
	jg	.LBB11_56
.LBB11_59:                              # %while.end.i317
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB11_65
.LBB11_60:                              # %cond.false189
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %eax
	movq	reg_last_set_mode(%rip), %rcx
	movl	mode_class(,%rsi,4), %edx
	movl	%eax, subst_low_cuid(%rip)
	movl	%esi, (%rcx,%r14,4)
	cmpq	$1, %rdx
	jne	.LBB11_63
# BB#61:                                # %land.lhs.true203
	movzbl	mode_bitsize(%rsi,%rsi), %eax
	cmpq	$65, %rax
	jae	.LBB11_63
# BB#62:
	movl	nonzero_bits_mode(%rip), %esi
.LBB11_63:                              # %if.end210
	movq	%rbx, %rdi
	callq	nonzero_bits
	movq	reg_last_set_nonzero_bits(%rip), %rcx
	movq	%rax, (%rcx,%r14,8)
	movzbl	2(%r15), %esi
	movq	%rbx, %rdi
	callq	num_sign_bit_copies
	movq	reg_last_set_sign_bit_copies(%rip), %rcx
	movb	%al, (%rcx,%r14)
.LBB11_64:                              # %if.end221
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB11_52:                              # %if.end174.thread
	movq	reg_last_set_value(%rip), %rax
	movq	$0, 8(%rsp)
	movq	$0, (%rax,%r14,8)
	jmp	.LBB11_64
.LBB11_65:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp151:
	.size	record_value_for_reg, .Ltmp151-record_value_for_reg
	.cfi_endproc

	.align	16, 0x90
	.type	record_dead_and_set_regs_1,@function
record_dead_and_set_regs_1:             # @record_dead_and_set_regs_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp156:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp157:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp158:
	.cfi_def_cfa_offset 32
.Ltmp159:
	.cfi_offset %rbx, -32
.Ltmp160:
	.cfi_offset %r14, -24
.Ltmp161:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	(%r14), %eax
	movq	%rdx, %rbx
	movq	%rsi, %r15
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB12_2
# BB#1:                                 # %if.then
	movq	8(%r14), %r14
	movl	(%r14), %eax
.LBB12_2:                               # %if.end
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB12_3
# BB#15:                                # %land.lhs.true61
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	push_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB12_23
# BB#16:                                # %if.then67
	movslq	8(%rbx), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB12_22
# BB#17:
	movq	%rbx, %rcx
	addq	$8, %rcx
	.align	16, 0x90
.LBB12_18:                              # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %edx
	cmpq	$32, %rdx
	jne	.LBB12_21
# BB#19:                                # %land.rhs.i
                                        #   in Loop: Header=BB12_18 Depth=1
	movq	32(%rbx), %rdx
	movzbl	(%rdx), %edx
	cmpq	$48, %rdx
	jne	.LBB12_21
# BB#20:                                # %while.body.i
                                        #   in Loop: Header=BB12_18 Depth=1
	movq	24(%rbx), %rbx
	movslq	8(%rbx), %rdx
	leaq	8(%rbx), %rcx
	cmpq	%rax, %rdx
	jg	.LBB12_18
.LBB12_21:                              # %while.end.i
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB12_24
.LBB12_22:                              # %cond.false
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %eax
	movl	%eax, mem_last_set(%rip)
	jmp	.LBB12_23
.LBB12_3:                               # %if.end
	cmpq	$61, %rcx
	jne	.LBB12_23
# BB#4:                                 # %if.then4
	movzbl	(%r15), %ecx
	cmpq	$47, %rcx
	jne	.LBB12_12
# BB#5:                                 # %land.lhs.true
	movq	8(%r15), %rcx
	cmpq	%rcx, %r14
	je	.LBB12_6
# BB#7:                                 # %land.lhs.true19
	movq	8(%r15), %rdi
	movzbl	(%rdi), %ecx
	cmpq	$63, %rcx
	jne	.LBB12_12
# BB#8:                                 # %land.lhs.true26
	movq	8(%rdi), %rcx
	cmpq	%r14, %rcx
	jne	.LBB12_12
# BB#9:                                 # %land.lhs.true34
	movq	$15, %rcx
	shrq	%cl, %rax
	andq	$510, %rax              # imm = 0x1FE
	movl	target_flags(%rip), %edx
	movzbl	mode_bitsize(%rax), %eax
	movq	$20, %rcx
	shrq	%cl, %rdx
	andq	$32, %rdx
	addq	$32, %rdx
	movabsq	$4294967264, %rcx       # imm = 0xFFFFFFE0
	andq	%rdx, %rcx
	cmpq	%rcx, %rax
	ja	.LBB12_12
# BB#10:                                # %land.lhs.true40
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB12_12
# BB#11:                                # %if.then45
	movq	16(%r15), %rsi
	movzbl	2(%r14), %edi
	callq	gen_lowpart_for_combine
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	jmp	.LBB12_14
.LBB12_23:                              # %if.end80
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB12_12:                              # %if.else53
	xorq	%rdx, %rdx
	jmp	.LBB12_13
.LBB12_6:                               # %if.then12
	movq	16(%r15), %rdx
.LBB12_13:                              # %if.else53
	movq	%r14, %rdi
	movq	%rbx, %rsi
.LBB12_14:                              # %if.else53
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	record_value_for_reg  # TAILCALL
.LBB12_24:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp162:
	.size	record_dead_and_set_regs_1, .Ltmp162-record_dead_and_set_regs_1
	.cfi_endproc

	.align	16, 0x90
	.type	gen_lowpart_for_combine,@function
gen_lowpart_for_combine:                # @gen_lowpart_for_combine
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp168:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp169:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp170:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp171:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp172:
	.cfi_def_cfa_offset 48
.Ltmp173:
	.cfi_offset %rbx, -40
.Ltmp174:
	.cfi_offset %r12, -32
.Ltmp175:
	.cfi_offset %r14, -24
.Ltmp176:
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movl	(%rbx), %eax
	movq	%rdi, %r14
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	movq	%r14, %rdx
	andq	%r15, %rdx
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	cmpq	%rdx, %rsi
	jne	.LBB13_3
# BB#1:
	movq	%rbx, %rax
	jmp	.LBB13_2
.LBB13_3:                               # %if.end
	movq	$32, %rcx
	movq	%r14, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movl	target_flags(%rip), %edi
	movzbl	mode_size(%rdx), %r12d
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	addq	$4, %rdi
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rdi, %rcx
	cmpq	%rcx, %r12
	jbe	.LBB13_10
# BB#4:                                 # %land.lhs.true
	testq	%rsi, %rsi
	jne	.LBB13_6
# BB#5:                                 # %land.lhs.true
	movq	%rax, %rcx
	andq	$65534, %rcx            # imm = 0xFFFE
	cmpq	$54, %rcx
	je	.LBB13_10
.LBB13_6:                               # %lor.lhs.false17
	movzbl	mode_size(%rsi), %ecx
	cmpq	%r12, %rcx
	jne	.LBB13_7
.LBB13_10:                              # %if.end33
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB13_13
# BB#11:                                # %land.lhs.true38
	movq	8(%rbx), %rax
	movl	(%rax), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB13_13
# BB#12:                                # %if.then44
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movq	%r14, %rcx
	andq	%r15, %rcx
	cmpq	%rcx, %rdx
	movq	%rax, %rbx
	je	.LBB13_2
.LBB13_13:                              # %if.end55
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	gen_lowpart_common
	testq	%rax, %rax
	jne	.LBB13_2
# BB#14:                                # %if.end59
	movl	(%rbx), %esi
	movq	%rsi, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	cmpq	$66, %rdi
	jne	.LBB13_20
# BB#15:                                # %if.then64
	testq	$134217728, %rsi        # imm = 0x8000000
	jne	.LBB13_17
# BB#16:                                # %lor.lhs.false69
	movq	8(%rbx), %rdi
	callq	mode_dependent_address_p
	movl	(%rbx), %esi
	testq	%r15, %rax
	je	.LBB13_18
.LBB13_17:                              # %if.then75
	movq	$16, %rcx
	movq	const_int_rtx+512(%rip), %rdx
	shrq	%cl, %rsi
	andq	$255, %rsi
	jmp	.LBB13_8
.LBB13_20:                              # %if.else
	movzbl	rtx_class(%rdi), %eax
	cmpq	$60, %rax
	jne	.LBB13_21
# BB#26:                                # %if.then104
	movq	8(%rbx), %rdx
	movq	16(%rbx), %rcx
	movq	%r14, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_ee  # TAILCALL
.LBB13_7:                               # %if.then29
	movq	const_int_rtx+512(%rip), %rdx
.LBB13_8:                               # %if.then29
	movq	$49, %rdi
.LBB13_9:                               # %if.then29
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_e  # TAILCALL
.LBB13_21:                              # %if.else114
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	je	.LBB13_22
# BB#23:                                # %if.end126
	movq	%r14, %rdi
	callq	subreg_lowpart_offset
	movzbl	2(%rbx), %edx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rcx
	callq	simplify_gen_subreg
	testq	%rax, %rax
	je	.LBB13_24
.LBB13_2:                               # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB13_22:                              # %if.then121
	movq	const_int_rtx+512(%rip), %rdx
	movq	$49, %rdi
	xorq	%rsi, %rsi
	jmp	.LBB13_9
.LBB13_18:                              # %if.end80
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movzbl	mode_size(%rsi), %eax
	xorq	%rdx, %rdx
	cmpq	%r12, %rax
	jae	.LBB13_19
# BB#25:                                # %if.then92
	movq	%r14, %rdi
	movq	%rbx, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	gen_rtx_SUBREG  # TAILCALL
.LBB13_24:                              # %if.end137
	movq	const_int_rtx+512(%rip), %rdx
	movzbl	2(%rbx), %esi
	jmp	.LBB13_8
.LBB13_19:                              # %if.end94
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%rbx, %rdi
	movq	%r14, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	adjust_address_1  # TAILCALL
.Ltmp177:
	.size	gen_lowpart_for_combine, .Ltmp177-gen_lowpart_for_combine
	.cfi_endproc

	.align	16, 0x90
	.type	get_last_value,@function
get_last_value:                         # @get_last_value
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp182:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp183:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp184:
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
.Ltmp185:
	.cfi_def_cfa_offset 48
.Ltmp186:
	.cfi_offset %rbx, -32
.Ltmp187:
	.cfi_offset %r14, -24
.Ltmp188:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movzbl	(%rbx), %eax
	cmpq	$63, %rax
	jne	.LBB14_4
# BB#1:                                 # %land.lhs.true
	movq	%rbx, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB14_4
# BB#2:                                 # %land.lhs.true1
	movq	8(%rbx), %rdi
	movzbl	2(%rbx), %eax
	movzbl	2(%rdi), %ecx
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rcx), %ecx
	cmpq	%rcx, %rax
	ja	.LBB14_4
# BB#3:                                 # %land.lhs.true13
	callq	get_last_value
	testq	%rax, %rax
	movq	%rax, 8(%rsp)
	je	.LBB14_4
# BB#22:                                # %if.then
	movzbl	2(%rbx), %edi
	movq	%rax, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	gen_lowpart_for_combine  # TAILCALL
.LBB14_4:                               # %if.end
	movzbl	(%rbx), %eax
	xorq	%r15, %r15
	cmpq	$61, %rax
	jne	.LBB14_21
# BB#5:                                 # %if.end29
	movl	8(%rbx), %r14d
	movq	reg_last_set_value(%rip), %rax
	movq	(%rax,%r14,8), %rax
	testq	%rax, %rax
	movq	%rax, 8(%rsp)
	je	.LBB14_21
# BB#6:                                 # %lor.lhs.false
	movq	reg_last_set_label(%rip), %rax
	movl	(%rax,%r14,4), %eax
	movl	label_tick(%rip), %ecx
	cmpq	%rcx, %rax
	je	.LBB14_10
# BB#7:                                 # %land.lhs.true40
	cmpq	$53, %r14
	jb	.LBB14_21
# BB#8:                                 # %lor.lhs.false43
	movq	reg_n_info(%rip), %rax
	movq	32(%rax,%r14,8), %rax
	movl	12(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB14_21
# BB#9:                                 # %lor.lhs.false48
	movq	basic_block_info(%rip), %rax
	movq	32(%rax), %rax
	movq	64(%rax), %rdi
	movq	%r14, %rsi
	callq	bitmap_bit_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB14_21
.LBB14_10:                              # %if.end54
	movq	reg_last_set(%rip), %rax
	movq	(%rax,%r14,8), %rsi
	movslq	8(%rsi), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB14_16
# BB#11:                                # %land.lhs.true2.i.lr.ph
	leaq	8(%rsi), %rcx
	movq	%rsi, %rdx
	.align	16, 0x90
.LBB14_12:                              # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %edi
	cmpq	$32, %rdi
	jne	.LBB14_15
# BB#13:                                # %land.rhs.i
                                        #   in Loop: Header=BB14_12 Depth=1
	movq	32(%rdx), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB14_15
# BB#14:                                # %while.body.i
                                        #   in Loop: Header=BB14_12 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rdi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rdi
	jg	.LBB14_12
.LBB14_15:                              # %while.end.i
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB14_23
.LBB14_16:                              # %cond.false
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movslq	(%rax), %rax
	movslq	subst_low_cuid(%rip), %rcx
	cmpq	%rcx, %rax
	jge	.LBB14_21
# BB#17:                                # %if.end74
	movq	reg_last_set_label(%rip), %rax
	movl	(%rax,%r14,4), %edx
	leaq	8(%rsp), %rdi
	xorq	%rcx, %rcx
	callq	get_last_value_validate
	movq	8(%rsp), %r15
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB14_18
.LBB14_21:                              # %return
	movq	%r15, %rax
.LBB14_20:                              # %if.end82
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB14_18:                              # %if.end82
	movq	%r15, %rdi
	callq	copy_rtx
	movq	reg_last_set(%rip), %rcx
	movq	reg_last_set_label(%rip), %rdx
	movq	%rax, 8(%rsp)
	movq	(%rcx,%r14,8), %rsi
	movl	(%rdx,%r14,4), %edx
	leaq	8(%rsp), %rdi
	movq	$1, %rcx
	callq	get_last_value_validate
	andq	%rbx, %rax
	je	.LBB14_20
# BB#19:                                # %if.end82
	movq	8(%rsp), %rax
	jmp	.LBB14_20
.LBB14_23:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp189:
	.size	get_last_value, .Ltmp189-get_last_value
	.cfi_endproc

	.align	16, 0x90
	.type	update_table_tick,@function
update_table_tick:                      # @update_table_tick
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp194:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp195:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp196:
	.cfi_def_cfa_offset 32
.Ltmp197:
	.cfi_offset %rbx, -32
.Ltmp198:
	.cfi_offset %r14, -24
.Ltmp199:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	(%r14), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB15_19
# BB#1:                                 # %if.then
	movl	8(%r14), %esi
	cmpq	$52, %rsi
	movq	$1, %rax
	ja	.LBB15_16
# BB#2:                                 # %cond.true
	movabsq	$4294967288, %rax       # imm = 0xFFFFFFF8
	andq	%rsi, %rax
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$8, %rax
	je	.LBB15_6
# BB#3:                                 # %cond.true
	leaq	-21(%rsi), %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jb	.LBB15_6
# BB#4:                                 # %cond.true
	leaq	-45(%rsi), %rcx
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jb	.LBB15_6
# BB#5:                                 # %cond.true
	leaq	-29(%rsi), %rcx
	andq	%rax, %rcx
	cmpq	$7, %rcx
	jbe	.LBB15_6
# BB#11:                                # %cond.false
	cmpq	$24, %rdx
	jne	.LBB15_12
# BB#14:                                # %cond.true39
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB15_16
.LBB15_19:                              # %if.end
	movzbl	rtx_length(%rax), %ebx
	testq	%rbx, %rbx
	je	.LBB15_23
# BB#20:                                # %for.body75.lr.ph
	movq	rtx_format(,%rax,8), %r15
	decq	%rbx
	.align	16, 0x90
.LBB15_21:                              # %for.body75
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r15,%rbx), %eax
	cmpq	$101, %rax
	jne	.LBB15_22
# BB#24:                                # %if.then81
                                        #   in Loop: Header=BB15_21 Depth=1
	movq	8(%r14,%rbx,8), %rdi
	callq	update_table_tick
.LBB15_22:                              # %for.cond72.backedge
                                        #   in Loop: Header=BB15_21 Depth=1
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	decq	%rbx
	testq	%rax, %rax
	jg	.LBB15_21
	jmp	.LBB15_23
.LBB15_6:                               # %cond.true16
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB15_16
# BB#7:                                 # %lor.rhs
	cmpq	$6, %rcx
	jne	.LBB15_8
# BB#9:                                 # %lor.rhs
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB15_16
.LBB15_12:                              # %cond.false
	cmpq	$18, %rdx
	jne	.LBB15_15
# BB#13:                                # %cond.true32
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB15_16
.LBB15_8:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB15_16
.LBB15_15:                              # %cond.false43
	movl	target_flags(%rip), %edi
	movzbl	mode_size(%rdx), %eax
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
.LBB15_16:                              # %cond.end61
	addq	%rsi, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rax, %rsi
	jae	.LBB15_23
# BB#17:                                # %for.body.lr.ph
	movq	reg_last_set_table_tick(%rip), %rdx
	leaq	(%rdx,%rsi,4), %rdx
	.align	16, 0x90
.LBB15_18:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	label_tick(%rip), %edi
	movl	%edi, (%rdx)
	incq	%rsi
	movq	%rsi, %rdi
	andq	%rcx, %rdi
	addq	$4, %rdx
	cmpq	%rax, %rdi
	jne	.LBB15_18
.LBB15_23:                              # %for.end87
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp200:
	.size	update_table_tick, .Ltmp200-update_table_tick
	.cfi_endproc

	.align	16, 0x90
	.type	get_last_value_validate,@function
get_last_value_validate:                # @get_last_value_validate
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp207:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp208:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp209:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp210:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp211:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp212:
	.cfi_def_cfa_offset 80
.Ltmp213:
	.cfi_offset %rbx, -48
.Ltmp214:
	.cfi_offset %r12, -40
.Ltmp215:
	.cfi_offset %r13, -32
.Ltmp216:
	.cfi_offset %r14, -24
.Ltmp217:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	(%r14), %r13
	movl	(%r13), %eax
	movq	%rax, %rdi
	andq	$65535, %rdi            # imm = 0xFFFF
	movq	rtx_format(,%rdi,8), %r12
	movzbl	rtx_length(%rdi), %r15d
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	cmpq	$66, %rdi
	jne	.LBB16_1
# BB#32:                                # %land.lhs.true120
	testq	$67108864, %rax         # imm = 0x4000000
	jne	.LBB16_33
# BB#35:                                # %land.lhs.true125
	movslq	8(%rsi), %rdx
	movslq	max_uid_cuid(%rip), %rcx
	cmpq	%rcx, %rdx
	jle	.LBB16_41
# BB#36:                                # %land.lhs.true2.i.lr.ph
	leaq	8(%rsi), %rdx
	movq	%rsi, %rbx
	.align	16, 0x90
.LBB16_37:                              # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %edi
	cmpq	$32, %rdi
	jne	.LBB16_40
# BB#38:                                # %land.rhs.i
                                        #   in Loop: Header=BB16_37 Depth=1
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %edi
	cmpq	$48, %rdi
	jne	.LBB16_40
# BB#39:                                # %while.body.i
                                        #   in Loop: Header=BB16_37 Depth=1
	movq	24(%rbx), %rbx
	movslq	8(%rbx), %rdi
	leaq	8(%rbx), %rdx
	cmpq	%rcx, %rdi
	jg	.LBB16_37
.LBB16_40:                              # %while.end.i
	movslq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	jg	.LBB16_50
.LBB16_41:                              # %cond.false132
	movq	uid_cuid(%rip), %rcx
	leaq	(%rcx,%rdx,4), %rcx
	movslq	(%rcx), %rcx
	movslq	mem_last_set(%rip), %rdx
	cmpq	%rdx, %rcx
	jg	.LBB16_33
# BB#42:                                # %if.then142
	xorq	%rbx, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	16(%rsp), %rdx          # 8-byte Reload
	testq	%rcx, %rdx
	je	.LBB16_49
# BB#43:                                # %if.then144
	movq	const_int_rtx+512(%rip), %rdx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$49, %rdi
	movq	%rax, %rsi
	jmp	.LBB16_30
.LBB16_1:                               # %entry
	cmpq	$61, %rdi
	jne	.LBB16_33
# BB#2:                                 # %if.then
	movl	8(%r13), %r12d
	cmpq	$52, %r12
	movq	$1, %rbx
	movq	$1, %r8
	ja	.LBB16_17
# BB#3:                                 # %cond.true
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%r12, %rdx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$8, %rdx
	je	.LBB16_7
# BB#4:                                 # %cond.true
	leaq	-21(%r12), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB16_7
# BB#5:                                 # %cond.true
	leaq	-45(%r12), %rdx
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB16_7
# BB#6:                                 # %cond.true
	leaq	-29(%r12), %rdx
	andq	%rcx, %rdx
	cmpq	$7, %rdx
	jbe	.LBB16_7
# BB#12:                                # %cond.false
	cmpq	$24, %rax
	jne	.LBB16_13
# BB#15:                                # %cond.true59
	movzbl	target_flags+3(%rip), %r8d
	andq	$2, %r8
	xorq	$6, %r8
	jmp	.LBB16_17
.LBB16_33:                              # %for.cond152.preheader
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	$1, %rbx
	testq	%r15, %r15
	je	.LBB16_49
# BB#34:                                # %for.body155.preheader
	addq	$8, %r13
	movq	$1, %r14
	.align	16, 0x90
.LBB16_45:                              # %for.body155
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-1(%r12,%r14), %eax
	cmpq	$101, %rax
	jne	.LBB16_48
# BB#46:                                # %land.lhs.true161
                                        #   in Loop: Header=BB16_45 Depth=1
	movq	%r13, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	callq	get_last_value_validate
	xorq	%rbx, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB16_49
# BB#47:                                # %lor.lhs.false168thread-pre-split
                                        #   in Loop: Header=BB16_45 Depth=1
	movzbl	-1(%r12,%r14), %eax
.LBB16_48:                              # %lor.lhs.false168
                                        #   in Loop: Header=BB16_45 Depth=1
	andq	$255, %rax
	xorq	%rbx, %rbx
	cmpq	$69, %rax
	je	.LBB16_49
# BB#44:                                # %for.cond152
                                        #   in Loop: Header=BB16_45 Depth=1
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	incq	%r14
	addq	$8, %r13
	cmpq	%r15, %rax
	movq	$1, %rbx
	jl	.LBB16_45
	jmp	.LBB16_49
.LBB16_7:                               # %cond.true32
	movl	mode_class(,%rax,4), %eax
	cmpq	$5, %rax
	movq	$2, %r8
	je	.LBB16_17
# BB#8:                                 # %lor.rhs
	cmpq	$6, %rax
	jne	.LBB16_9
# BB#10:                                # %lor.rhs
	movabsq	$1, %r8
	incq	%r8
	jmp	.LBB16_17
.LBB16_13:                              # %cond.false
	cmpq	$18, %rax
	jne	.LBB16_16
# BB#14:                                # %cond.true51
	movl	target_flags(%rip), %r8d
	movq	$25, %rcx
	shrq	%cl, %r8
	andq	$1, %r8
	xorq	$3, %r8
	jmp	.LBB16_17
.LBB16_9:
	movabsq	$0, %r8
	incq	%r8
	jmp	.LBB16_17
.LBB16_16:                              # %cond.false63
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	movq	%rax, %r8
.LBB16_17:                              # %cond.end82
	addq	%r12, %r8
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rdi, %r8
	movq	%r8, 8(%rsp)            # 8-byte Spill
	cmpq	%r8, %r12
	jae	.LBB16_49
# BB#18:                                # %for.body.lr.ph
	movq	%r14, (%rsp)            # 8-byte Spill
	cmpq	$52, %r12
	jbe	.LBB16_25
# BB#19:
	movq	%r12, %r14
	.align	16, 0x90
.LBB16_20:                              # %for.body.us
                                        # =>This Inner Loop Header: Depth=1
	movq	reg_last_set_invalid(%rip), %rax
	movq	%r14, %r15
	andq	%rdi, %r15
	movzbl	(%rax,%r15), %eax
	testq	%rax, %rax
	jne	.LBB16_28
# BB#21:                                # %land.lhs.true94.us
                                        #   in Loop: Header=BB16_20 Depth=1
	movq	reg_n_info(%rip), %rax
	movq	32(%rax,%r12,8), %rax
	movl	12(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB16_23
# BB#22:                                # %land.lhs.true99.us
                                        #   in Loop: Header=BB16_20 Depth=1
	movq	basic_block_info(%rip), %rax
	movq	32(%rax), %rax
	movq	64(%rax), %rdi
	movq	%r12, %rsi
	callq	bitmap_bit_p
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	8(%rsp), %r8            # 8-byte Reload
	testq	%rdi, %rax
	je	.LBB16_24
.LBB16_23:                              # %land.lhs.true103.us
                                        #   in Loop: Header=BB16_20 Depth=1
	movq	reg_last_set_label(%rip), %rax
	movslq	(%rax,%r15,4), %rax
	movq	$32, %rcx
	movq	24(%rsp), %rdx          # 8-byte Reload
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %rax
	jg	.LBB16_28
.LBB16_24:                              # %for.inc.us
                                        #   in Loop: Header=BB16_20 Depth=1
	incq	%r14
	movq	%r14, %rax
	andq	%rdi, %rax
	cmpq	%r8, %rax
	jb	.LBB16_20
	jmp	.LBB16_49
.LBB16_25:                              # %for.body.lr.ph.for.body.lr.ph.split_crit_edge
	movq	reg_last_set_invalid(%rip), %rax
	.align	16, 0x90
.LBB16_26:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%r12, %rcx
	andq	%rdi, %rcx
	movzbl	(%rax,%rcx), %edx
	testq	%rdx, %rdx
	jne	.LBB16_28
# BB#27:                                # %land.lhs.true103
                                        #   in Loop: Header=BB16_26 Depth=1
	movq	reg_last_set_label(%rip), %rdx
	movslq	(%rdx,%rcx,4), %rdx
	movq	$32, %rcx
	movq	24(%rsp), %rsi          # 8-byte Reload
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rsi, %rdx
	jg	.LBB16_28
# BB#31:                                # %for.inc
                                        #   in Loop: Header=BB16_26 Depth=1
	incq	%r12
	movq	%r12, %rcx
	andq	%rdi, %rcx
	cmpq	%r8, %rcx
	jb	.LBB16_26
	jmp	.LBB16_49
.LBB16_28:                              # %if.then108
	xorq	%rbx, %rbx
	movq	16(%rsp), %rax          # 8-byte Reload
	testq	%rdi, %rax
	movq	(%rsp), %r14            # 8-byte Reload
	je	.LBB16_49
# BB#29:                                # %if.then110
	movq	const_int_rtx+512(%rip), %rdx
	movzbl	2(%r13), %esi
	movq	$49, %rdi
.LBB16_30:                              # %return
	callq	gen_rtx_fmt_e
	movq	%rax, (%r14)
	movq	16(%rsp), %rbx          # 8-byte Reload
.LBB16_49:                              # %return
	movq	%rbx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB16_50:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp218:
	.size	get_last_value_validate, .Ltmp218-get_last_value_validate
	.cfi_endproc

	.align	16, 0x90
	.type	cant_combine_insn_p,@function
cant_combine_insn_p:                    # @cant_combine_insn_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp221:
	.cfi_def_cfa_offset 16
.Ltmp222:
	.cfi_offset %rbx, -16
	movzbl	(%rdi), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	movq	$1, %rbx
	jne	.LBB17_15
# BB#1:                                 # %cond.true
	movq	32(%rdi), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	je	.LBB17_3
# BB#2:                                 # %cond.false
	movq	%rax, %rsi
	callq	single_set_2
.LBB17_3:                               # %cond.end22
	testq	%rax, %rax
	je	.LBB17_14
# BB#4:                                 # %if.end25
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	movq	8(%rax), %rax
	cmpq	$63, %rdx
	jne	.LBB17_6
# BB#5:                                 # %if.then36
	movq	8(%rcx), %rcx
.LBB17_6:                               # %if.end40
	movzbl	(%rax), %edx
	cmpq	$63, %rdx
	jne	.LBB17_8
# BB#7:                                 # %if.then45
	movq	8(%rax), %rax
.LBB17_8:                               # %if.end49
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB17_14
# BB#9:                                 # %land.lhs.true
	movzbl	(%rax), %edx
	cmpq	$61, %rdx
	jne	.LBB17_14
# BB#10:                                # %land.lhs.true58
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB17_12
# BB#11:                                # %land.lhs.true63
	movzbl	fixed_regs(%rcx), %ecx
	testq	%rcx, %rcx
	je	.LBB17_15
.LBB17_12:                              # %lor.lhs.false
	movl	8(%rax), %eax
	cmpq	$52, %rax
	ja	.LBB17_14
# BB#13:                                # %land.lhs.true75
	movzbl	fixed_regs(%rax), %eax
	testq	%rax, %rax
	je	.LBB17_15
.LBB17_14:                              # %if.end83
	xorq	%rbx, %rbx
.LBB17_15:                              # %return
	movq	%rbx, %rax
	popq	%rbx
	retq
.Ltmp223:
	.size	cant_combine_insn_p, .Ltmp223-cant_combine_insn_p
	.cfi_endproc

	.align	16, 0x90
	.type	do_SUBST,@function
do_SUBST:                               # @do_SUBST
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp229:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp230:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp231:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp232:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp233:
	.cfi_def_cfa_offset 48
.Ltmp234:
	.cfi_offset %rbx, -40
.Ltmp235:
	.cfi_offset %r12, -32
.Ltmp236:
	.cfi_offset %r14, -24
.Ltmp237:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movq	(%r12), %rbx
	movq	%rsi, %r14
	cmpq	%r14, %rbx
	je	.LBB18_14
# BB#1:                                 # %if.end
	movzbl	2(%rbx), %esi
	movl	mode_class(,%rsi,4), %eax
	cmpq	$1, %rax
	jne	.LBB18_10
# BB#2:                                 # %land.lhs.true
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	jne	.LBB18_10
# BB#3:                                 # %if.then5
	movq	8(%r14), %r15
	movq	%r15, %rdi
	callq	trunc_int_for_mode
	cmpq	%rax, %r15
	jne	.LBB18_4
# BB#6:                                 # %if.end15
	movzbl	(%rbx), %eax
	cmpq	$121, %rax
	je	.LBB18_8
# BB#7:                                 # %if.end15
	cmpq	$63, %rax
	jne	.LBB18_10
.LBB18_8:                               # %land.lhs.true28
	movq	8(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	je	.LBB18_9
.LBB18_10:                              # %if.end37
	movq	undobuf+8(%rip), %rax
	testq	%rax, %rax
	je	.LBB18_12
# BB#11:                                # %if.then38
	movq	(%rax), %rcx
	movq	%rcx, undobuf+8(%rip)
	jmp	.LBB18_13
.LBB18_12:                              # %if.else
	movq	$32, %rdi
	callq	xmalloc
.LBB18_13:                              # %if.end40
	xorq	%rcx, %rcx
	movl	%ecx, 8(%rax)
	movq	%r12, 24(%rax)
	movq	%rbx, 16(%rax)
	movq	%r14, (%r12)
	movq	undobuf(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%rax, undobuf(%rip)
.LBB18_14:                              # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB18_4:                               # %if.then14
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.do_SUBST, %rcx
	movq	$439, %rsi              # imm = 0x1B7
	jmp	.LBB18_5
.LBB18_9:                               # %if.then35
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.do_SUBST, %rcx
	movq	$451, %rsi              # imm = 0x1C3
.LBB18_5:                               # %if.then14
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp238:
	.size	do_SUBST, .Ltmp238-do_SUBST
	.cfi_endproc

	.align	16, 0x90
	.type	can_combine_p,@function
can_combine_p:                          # @can_combine_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp245:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp246:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp247:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp248:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp249:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp250:
	.cfi_def_cfa_offset 112
.Ltmp251:
	.cfi_offset %rbx, -48
.Ltmp252:
	.cfi_offset %r12, -40
.Ltmp253:
	.cfi_offset %r13, -32
.Ltmp254:
	.cfi_offset %r14, -24
.Ltmp255:
	.cfi_offset %r15, -16
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rdi, %r15
                                        # kill: RDI<def> R15<kill>
	callq	next_active_insn
	testq	%rbx, %rbx
	je	.LBB19_4
# BB#1:                                 # %cond.true
	xorq	%rcx, %rcx
	cmpq	%rbx, %rax
	jne	.LBB19_7
# BB#2:                                 # %land.rhs
	movq	%rbx, %rdi
	callq	next_active_insn
	cmpq	%r14, %rax
	je	.LBB19_6
# BB#3:
	movabsq	$0, %rcx
	jmp	.LBB19_7
.LBB19_4:                               # %cond.false
	cmpq	%r14, %rax
	jne	.LBB19_5
.LBB19_6:                               # %cond.false
	movabsq	$1, %rcx
	jmp	.LBB19_7
.LBB19_5:
	movabsq	$0, %rcx
.LBB19_7:                               # %cond.end
	movq	32(%r15), %r13
	movzbl	(%r13), %eax
	leaq	8(%r15), %rsi
	cmpq	$47, %rax
	jne	.LBB19_8
# BB#38:                                # %if.end145
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	testq	%r13, %r13
	jne	.LBB19_39
	jmp	.LBB19_119
.LBB19_8:                               # %cond.end
	cmpq	$39, %rax
	jne	.LBB19_119
# BB#9:                                 # %land.lhs.true
	movq	%rbx, %rdi
	movq	%r14, %rbx
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	8(%r13), %rcx
	movq	8(%rcx), %r12
	movl	(%r12), %eax
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$47, %rdx
	jne	.LBB19_119
# BB#10:                                # %for.cond.preheader
	movq	%r15, 48(%rsp)          # 8-byte Spill
	movslq	(%rcx), %rcx
	testq	%rcx, %rcx
	movq	%rbx, %r14
	jle	.LBB19_119
# BB#11:                                # %for.body.lr.ph
	movq	%rsi, (%rsp)            # 8-byte Spill
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movq	$1, %rbx
	xorq	%r13, %r13
	jmp	.LBB19_12
	.align	16, 0x90
.LBB19_19:                              # %for.inc.for.body_crit_edge
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	8(%rax,%rbx,8), %r12
	movl	(%r12), %eax
	incq	%rbx
.LBB19_12:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_21 Depth 2
                                        #     Child Loop BB19_28 Depth 2
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$47, %rax
	je	.LBB19_33
# BB#13:                                # %for.body
                                        #   in Loop: Header=BB19_12 Depth=1
	cmpq	$49, %rax
	je	.LBB19_18
# BB#14:                                # %for.body
                                        #   in Loop: Header=BB19_12 Depth=1
	cmpq	$48, %rax
	jne	.LBB19_119
# BB#15:                                # %sw.bb
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	8(%r12), %rcx
	movzbl	(%rcx), %eax
	cmpq	$61, %rax
	jne	.LBB19_18
# BB#16:                                # %land.lhs.true53
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	%r14, %r15
	movq	32(%r15), %r15
	movzbl	(%r15), %eax
	cmpq	$39, %rax
	jne	.LBB19_17
# BB#20:                                # %if.then61
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	8(%r15), %rax
	movl	8(%rcx), %ecx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movslq	(%rax), %r14
	cmpq	$52, %rcx
	ja	.LBB19_28
	jmp	.LBB19_21
	.align	16, 0x90
.LBB19_26:                              # %do.cond.do.body_crit_edge
                                        #   in Loop: Header=BB19_21 Depth=2
	movq	8(%r15), %rax
.LBB19_21:                              # %do.body.preheader
                                        #   Parent Loop BB19_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%r14
	movq	8(%rax,%r14,8), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB19_25
# BB#22:                                # %land.lhs.true85
                                        #   in Loop: Header=BB19_21 Depth=2
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB19_25
# BB#23:                                # %land.lhs.true93
                                        #   in Loop: Header=BB19_21 Depth=2
	movl	8(%rax), %eax
	movq	16(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB19_25
# BB#24:                                # %cond.true102
                                        #   in Loop: Header=BB19_21 Depth=2
	movq	8(%r12), %rdi
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rsi
	movq	56(%rsp), %rdx          # 8-byte Reload
	callq	reg_set_between_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB19_119
	.align	16, 0x90
.LBB19_25:                              # %do.cond
                                        #   in Loop: Header=BB19_21 Depth=2
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB19_26
	jmp	.LBB19_17
	.align	16, 0x90
.LBB19_27:                              # %do.cond.us.do.body.us_crit_edge
                                        #   in Loop: Header=BB19_28 Depth=2
	movq	8(%r15), %rax
.LBB19_28:                              # %do.body.us.preheader
                                        #   Parent Loop BB19_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%r14
	movq	8(%rax,%r14,8), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB19_32
# BB#29:                                # %land.lhs.true85.us
                                        #   in Loop: Header=BB19_28 Depth=2
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB19_32
# BB#30:                                # %land.lhs.true93.us
                                        #   in Loop: Header=BB19_28 Depth=2
	movl	8(%rax), %eax
	movq	16(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB19_119
# BB#31:                                # %cond.true102.us
                                        #   in Loop: Header=BB19_28 Depth=2
	movq	8(%r12), %rdi
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rsi
	movq	56(%rsp), %rdx          # 8-byte Reload
	callq	reg_set_between_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB19_119
.LBB19_32:                              # %do.cond.us
                                        #   in Loop: Header=BB19_28 Depth=2
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB19_27
.LBB19_17:                              #   in Loop: Header=BB19_12 Depth=1
	movq	56(%rsp), %r14          # 8-byte Reload
	jmp	.LBB19_18
	.align	16, 0x90
.LBB19_33:                              # %sw.bb118
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	8(%r12), %rdx
	movq	$10, %rsi
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB19_35
# BB#34:                                # %land.lhs.true124
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	%r12, %rdi
	callq	side_effects_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB19_18
.LBB19_35:                              # %if.end128
                                        #   in Loop: Header=BB19_12 Depth=1
	testq	%r13, %r13
	movq	%r12, %r13
	jne	.LBB19_119
.LBB19_18:                              # %for.inc
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rax
	movq	8(%rax), %rax
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jl	.LBB19_19
# BB#36:                                # %for.end
	testq	%r13, %r13
	movq	8(%rsp), %rcx           # 8-byte Reload
	je	.LBB19_119
# BB#37:                                # %lor.lhs.false
	movq	16(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$41, %rax
	movq	48(%rsp), %r15          # 8-byte Reload
	movq	(%rsp), %rsi            # 8-byte Reload
	movabsq	$0, %rax
	je	.LBB19_120
.LBB19_39:                              # %if.end149
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rcx, %rbx
	movq	%rsi, %r12
	movq	%r13, %rdi
	callq	expand_field_assignment
	movq	8(%rax), %rsi
	movq	global_rtl+16(%rip), %rcx
	cmpq	%rcx, %rsi
	je	.LBB19_119
# BB#40:                                # %lor.lhs.false159
	movzbl	(%rsi), %ecx
	cmpq	$64, %rcx
	je	.LBB19_119
# BB#41:                                # %lor.lhs.false159
	cmpq	$133, %rcx
	je	.LBB19_119
# BB#42:                                # %lor.lhs.false169
	movq	16(%rax), %rdi
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%r12, %rcx
	movq	%rbx, %r12
	movq	56(%rsp), %r13          # 8-byte Reload
	je	.LBB19_44
# BB#43:                                # %land.lhs.true172
	movq	%rcx, %rbx
	movq	$4, %rsi
	xorq	%rdx, %rdx
	movq	%r15, %rdi
	callq	find_reg_note
	movq	%rbx, %rcx
	testq	%rax, %rax
	movabsq	$0, %rax
	jne	.LBB19_120
.LBB19_44:                              # %lor.lhs.false175
	movq	48(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$41, %rax
	je	.LBB19_119
# BB#45:                                # %lor.lhs.false175
	cmpq	$50, %rax
	je	.LBB19_119
# BB#46:                                # %lor.lhs.false185
	movzbl	(%r13), %eax
	cmpq	$34, %rax
	jne	.LBB19_51
# BB#47:                                # %land.lhs.true190
	movq	%r12, 8(%rsp)           # 8-byte Spill
	movq	%rcx, %r12
	movq	$48, %rsi
	movq	%r13, %rdi
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdx
	callq	find_reg_fusage
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB19_119
# BB#48:                                # %lor.lhs.false193
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	movq	%r12, %rcx
	movq	8(%rsp), %r12           # 8-byte Reload
	jne	.LBB19_51
# BB#49:                                # %land.lhs.true198
	movq	16(%rsp), %rax          # 8-byte Reload
	movl	8(%rax), %eax
	cmpq	$52, %rax
	ja	.LBB19_51
# BB#50:                                # %land.lhs.true204
	movzbl	global_regs(%rax), %eax
	testq	%rax, %rax
	jne	.LBB19_119
.LBB19_51:                              # %lor.lhs.false212
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB19_52
# BB#53:                                # %lor.lhs.false212
	movq	%rcx, (%rsp)            # 8-byte Spill
	movabsq	$1, %rax
	jmp	.LBB19_54
.LBB19_52:
	movq	%rcx, (%rsp)            # 8-byte Spill
	movabsq	$0, %rax
.LBB19_54:                              # %lor.lhs.false212
	movq	16(%rsp), %r14          # 8-byte Reload
	orq	%r12, %rax
	jne	.LBB19_56
# BB#55:                                # %land.lhs.true219
	movq	%r14, %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%r13, %rdx
	callq	reg_used_between_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB19_119
.LBB19_56:                              # %lor.lhs.false222
	testq	%r12, %r12
	jne	.LBB19_68
# BB#57:                                # %land.lhs.true224
	movq	48(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx), %eax
	cmpq	$66, %rax
	jne	.LBB19_59
# BB#58:                                # %lor.lhs.false229
	movq	$3, %rsi
	movq	%r15, %rdi
	movq	%rdx, %r12
	callq	find_reg_note
	movq	%r12, %rdx
	testq	%rax, %rax
	jne	.LBB19_66
.LBB19_59:                              # %land.lhs.true232
	movq	%rdx, %rdi
	movq	(%rsp), %rdx            # 8-byte Reload
	movslq	(%rdx), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB19_65
# BB#60:
	movq	%rdx, %rcx
	movq	%r15, %rdx
.LBB19_61:                              # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %esi
	cmpq	$32, %rsi
	jne	.LBB19_64
# BB#62:                                # %land.rhs.i
                                        #   in Loop: Header=BB19_61 Depth=1
	movq	32(%rdx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB19_64
# BB#63:                                # %while.body.i
                                        #   in Loop: Header=BB19_61 Depth=1
	movq	24(%rdx), %rdx
	movslq	8(%rdx), %rsi
	leaq	8(%rdx), %rcx
	cmpq	%rax, %rsi
	jg	.LBB19_61
.LBB19_64:                              # %while.end.i
	movslq	(%rcx), %rcx
	cmpq	%rax, %rcx
	jg	.LBB19_121
.LBB19_65:                              # %cond.false239
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movl	(%rax), %esi
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	callq	use_crosses_set_p
	movq	%rbx, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB19_119
.LBB19_66:                              # %lor.lhs.false249
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movl	(%rdx), %eax
	movq	%rax, %rcx
	andq	$134283263, %rcx        # imm = 0x800FFFF
	cmpq	$134217769, %rcx        # imm = 0x8000029
	je	.LBB19_119
# BB#67:                                # %lor.lhs.false249
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$43, %rax
	je	.LBB19_119
.LBB19_68:                              # %lor.lhs.false263
	movq	$9, %rsi
	movq	%r13, %rdi
	movq	%r14, %rdx
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB19_119
# BB#69:                                # %lor.lhs.false266
	movq	24(%rsp), %rbx          # 8-byte Reload
	testq	%rbx, %rbx
	je	.LBB19_71
# BB#70:                                # %land.lhs.true268
	movq	$9, %rsi
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB19_119
.LBB19_71:                              # %lor.lhs.false271
	movq	(%rsp), %rsi            # 8-byte Reload
	movslq	(%rsi), %rcx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rcx
	jle	.LBB19_78
# BB#72:
	movq	%rbx, %rdi
	movq	%r15, %rcx
.LBB19_73:                              # %land.lhs.true2.i16
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rcx), %edx
	cmpq	$32, %rdx
	jne	.LBB19_76
# BB#74:                                # %land.rhs.i22
                                        #   in Loop: Header=BB19_73 Depth=1
	movq	32(%rcx), %rdx
	movzbl	(%rdx), %edx
	cmpq	$48, %rdx
	jne	.LBB19_76
# BB#75:                                # %while.body.i25
                                        #   in Loop: Header=BB19_73 Depth=1
	movq	24(%rcx), %rcx
	movslq	8(%rcx), %rdx
	leaq	8(%rcx), %rsi
	cmpq	%rax, %rdx
	jg	.LBB19_73
.LBB19_76:                              # %while.end.i29
	movq	%r14, %rbx
	movq	%r15, %r12
	movq	%r13, %r15
	movq	%rdi, %r14
	movslq	(%rsi), %rcx
	cmpq	%rax, %rcx
	jg	.LBB19_121
# BB#77:                                # %insn_cuid.exit33
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
	movq	%r14, %rdx
	movq	%r15, %r13
	movq	%rbx, %r14
	jmp	.LBB19_79
.LBB19_78:                              # %cond.false279
	movq	%rbx, %rdx
	movq	%r15, %r12
	movq	uid_cuid(%rip), %rax
	leaq	(%rax,%rcx,4), %rax
.LBB19_79:                              # %cond.end285
	movq	%r14, %rbx
	movq	%r13, %r15
	movslq	(%rax), %rax
	movslq	last_call_cuid(%rip), %rcx
	cmpq	%rcx, %rax
	jge	.LBB19_85
# BB#80:                                # %land.lhs.true289
	movq	%rdx, %r14
	movq	48(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$133, %rax
	jg	.LBB19_83
# BB#81:                                # %land.lhs.true289
	addq	$-54, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$14, %rax
	ja	.LBB19_119
# BB#82:                                # %land.lhs.true289
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$24599, %rdx            # imm = 0x6017
	movq	%r14, %rdx
	jne	.LBB19_85
	jmp	.LBB19_119
.LBB19_121:                             # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB19_83:                              # %land.lhs.true289
	cmpq	$134, %rax
	movq	%r14, %rdx
	je	.LBB19_85
# BB#84:                                # %land.lhs.true289
	cmpq	$140, %rax
	jne	.LBB19_119
.LBB19_85:                              # %if.end330
	movq	%rdx, %r14
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$69, %rcx
	je	.LBB19_92
# BB#86:                                # %if.end330
	cmpq	$61, %rcx
	jne	.LBB19_119
# BB#87:                                # %if.then335
	movq	48(%rsp), %rcx          # 8-byte Reload
	movzbl	(%rcx), %ecx
	cmpq	$61, %rcx
	jne	.LBB19_92
# BB#88:                                # %land.lhs.true340
	movl	8(%rbx), %edx
	cmpq	$52, %rdx
	ja	.LBB19_90
# BB#89:                                # %land.lhs.true346
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	%rdx, %rdi
	movq	%rax, %rsi
	callq	ix86_hard_regno_mode_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB19_119
.LBB19_90:                              # %lor.lhs.false355
	movq	48(%rsp), %rax          # 8-byte Reload
	movl	8(%rax), %eax
	cmpq	$52, %rax
	ja	.LBB19_92
# BB#91:                                # %land.lhs.true361
	movq	48(%rsp), %rcx          # 8-byte Reload
	movzbl	2(%rcx), %ecx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	ix86_hard_regno_mode_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB19_119
.LBB19_92:                              # %if.end379
	movq	32(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB19_99
# BB#93:                                # %if.then387
	movq	8(%rax), %rax
	movslq	(%rax), %r13
	testq	%r13, %r13
	jg	.LBB19_94
	jmp	.LBB19_99
.LBB19_98:                              # %for.cond396.backedge.for.body399_crit_edge
                                        #   in Loop: Header=BB19_94 Depth=1
	movq	32(%r15), %rax
	movq	8(%rax), %rax
.LBB19_94:                              # %for.body399.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	decq	%r13
	movq	8(%rax,%r13,8), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB19_97
# BB#95:                                # %land.lhs.true413
                                        #   in Loop: Header=BB19_94 Depth=1
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	48(%rsp), %rsi          # 8-byte Reload
	callq	reg_overlap_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB19_119
# BB#96:                                # %lor.lhs.false428
                                        #   in Loop: Header=BB19_94 Depth=1
	movq	32(%r15), %rax
	movq	8(%rax), %rax
	movq	8(%rax,%r13,8), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB19_119
.LBB19_97:                              # %for.cond396.backedge
                                        #   in Loop: Header=BB19_94 Depth=1
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB19_98
.LBB19_99:                              # %if.end448
	movq	48(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$41, %rax
	je	.LBB19_101
# BB#100:                               # %lor.lhs.false453
	movq	48(%rsp), %rdi          # 8-byte Reload
	callq	volatile_refs_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB19_108
.LBB19_101:                             # %if.then456
	testq	%r14, %r14
	je	.LBB19_103
# BB#102:                               # %land.lhs.true459
	movq	32(%r14), %rax
	movq	%rax, %rdi
	callq	volatile_refs_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB19_119
.LBB19_103:                             # %for.cond470.preheader
	movq	24(%r12), %r13
	jmp	.LBB19_104
.LBB19_107:                             # %for.cond470.backedge
                                        #   in Loop: Header=BB19_104 Depth=1
	movq	24(%r13), %r13
.LBB19_104:                             # %for.cond470.preheader
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%r15, %r13
	je	.LBB19_108
# BB#105:                               # %for.body473
                                        #   in Loop: Header=BB19_104 Depth=1
	movzbl	(%r13), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB19_107
# BB#106:                               # %for.body473
                                        #   in Loop: Header=BB19_104 Depth=1
	cmpq	%r14, %r13
	je	.LBB19_107
# BB#116:                               # %land.lhs.true484
                                        #   in Loop: Header=BB19_104 Depth=1
	movq	32(%r13), %rax
	movq	%rax, %rdi
	callq	volatile_refs_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB19_107
	jmp	.LBB19_119
.LBB19_108:                             # %if.end497
	movq	48(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$41, %rax
	jne	.LBB19_111
# BB#109:                               # %land.lhs.true502
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB19_111
# BB#110:                               # %land.lhs.true507
	movl	8(%rbx), %eax
	cmpq	$53, %rax
	jb	.LBB19_119
.LBB19_111:                             # %for.cond518.preheader
	movq	24(%r12), %r13
	jmp	.LBB19_112
.LBB19_115:                             # %for.cond518.backedge
                                        #   in Loop: Header=BB19_112 Depth=1
	movq	24(%r13), %r13
.LBB19_112:                             # %for.cond518.preheader
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%r15, %r13
	je	.LBB19_117
# BB#113:                               # %for.body521
                                        #   in Loop: Header=BB19_112 Depth=1
	movzbl	(%r13), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB19_115
# BB#114:                               # %for.body521
                                        #   in Loop: Header=BB19_112 Depth=1
	cmpq	%r14, %r13
	je	.LBB19_115
# BB#118:                               # %land.lhs.true532
                                        #   in Loop: Header=BB19_112 Depth=1
	movq	32(%r13), %rax
	movq	%rax, %rdi
	callq	volatile_insn_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB19_115
.LBB19_119:
	xorq	%rax, %rax
.LBB19_120:                             # %return
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB19_117:                             # %for.end544
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	%rbx, (%rax)
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, (%rax)
	movq	$1, %rax
	jmp	.LBB19_120
.Ltmp256:
	.size	can_combine_p, .Ltmp256-can_combine_p
	.cfi_endproc

	.align	16, 0x90
	.type	combinable_i3pat,@function
combinable_i3pat:                       # @combinable_i3pat
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp263:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp264:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp265:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp266:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp267:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp268:
	.cfi_def_cfa_offset 96
.Ltmp269:
	.cfi_offset %rbx, -48
.Ltmp270:
	.cfi_offset %r12, -40
.Ltmp271:
	.cfi_offset %r13, -32
.Ltmp272:
	.cfi_offset %r14, -24
.Ltmp273:
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	(%rbx), %r14
	movzbl	(%r14), %eax
	movq	%r9, 24(%rsp)           # 8-byte Spill
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rdx, %r13
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	cmpq	$47, %rax
	jne	.LBB20_1
# BB#4:                                 # %if.then
	movq	%r14, %rdi
	callq	expand_field_assignment
	movq	8(%rax), %r12
	movq	16(%rax), %r15
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	movq	%r12, %rbx
	jmp	.LBB20_5
	.align	16, 0x90
.LBB20_36:                              # %while.body
                                        #   in Loop: Header=BB20_5 Depth=1
	movq	8(%rbx), %rbx
.LBB20_5:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %eax
	leaq	-63(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$2, %rcx
	jb	.LBB20_36
# BB#6:                                 # %while.cond
                                        #   in Loop: Header=BB20_5 Depth=1
	cmpq	$133, %rax
	je	.LBB20_36
# BB#7:                                 # %lor.rhs
	movq	%r15, 8(%rsp)           # 8-byte Spill
	cmpq	%r12, %rbx
	je	.LBB20_11
# BB#8:                                 # %land.lhs.true
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	reg_overlap_mentioned_p
	xorq	%r15, %r15
	testq	%r14, %rax
	jne	.LBB20_35
# BB#9:                                 # %lor.lhs.false18
	cmpq	$0, 40(%rsp)            # 8-byte Folded Reload
	je	.LBB20_11
# BB#10:                                # %land.lhs.true20
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	%rbx, %rsi
	callq	reg_overlap_mentioned_p
	testq	%r14, %rax
	jne	.LBB20_35
.LBB20_11:                              # %lor.lhs.false23
	movl	(%rbx), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB20_14
# BB#12:                                # %land.lhs.true27
	movl	8(%rbx), %edi
	cmpq	$52, %rdi
	ja	.LBB20_14
# BB#13:                                # %land.lhs.true31
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	callq	ix86_hard_regno_mode_ok
	xorq	%r15, %r15
	testq	%r14, %rax
	je	.LBB20_35
.LBB20_14:                              # %lor.lhs.false39
	movq	32(%rsp), %rax          # 8-byte Reload
	testq	%r14, %rax
	je	.LBB20_16
# BB#15:                                # %land.lhs.true41
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	reg_overlap_mentioned_p
	xorq	%r15, %r15
	testq	%r14, %rax
	jne	.LBB20_35
.LBB20_16:                              # %if.end
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB20_17
# BB#18:                                # %land.lhs.true46
	movzbl	(%r12), %eax
	cmpq	$61, %rax
	jne	.LBB20_19
# BB#20:                                # %land.lhs.true50
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rsi
	movq	%r12, %rdi
	callq	reg_referenced_p
	testq	%r14, %rax
	je	.LBB20_21
# BB#22:                                # %land.lhs.true56
	movl	8(%r12), %eax
	leaq	-6(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$2, %rcx
	jae	.LBB20_24
# BB#23:
	movq	$1, %r15
	jmp	.LBB20_35
.LBB20_1:                               # %entry
	cmpq	$39, %rax
	movq	$1, %r15
	jne	.LBB20_35
# BB#2:                                 # %for.cond.preheader
	movq	8(%r14), %rsi
	movslq	(%rsi), %rax
	testq	%rax, %rax
	movq	$1, %rbx
	jle	.LBB20_3
# BB#33:
	movq	$8, %r12
	xorq	%r15, %r15
	.align	16, 0x90
.LBB20_34:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	addq	%r12, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %rdx
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %r9           # 8-byte Reload
	callq	combinable_i3pat
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB20_35
# BB#31:                                # %for.cond
                                        #   in Loop: Header=BB20_34 Depth=1
	movq	8(%r14), %rsi
	movslq	(%rsi), %rax
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	incq	%rbx
	addq	$8, %r12
	cmpq	%rax, %rdx
	jl	.LBB20_34
# BB#32:
	movq	$1, %r15
	jmp	.LBB20_35
.LBB20_3:
	movq	$1, %r15
	jmp	.LBB20_35
.LBB20_17:
	movq	$1, %r15
	jmp	.LBB20_35
.LBB20_19:
	movq	$1, %r15
	jmp	.LBB20_35
.LBB20_21:
	movq	$1, %r15
	jmp	.LBB20_35
.LBB20_24:                              # %land.lhs.true56
	andq	%r14, %rax
	cmpq	$20, %rax
	jne	.LBB20_26
# BB#25:
	movq	$1, %r15
	jmp	.LBB20_35
.LBB20_26:                              # %land.lhs.true56
	cmpq	$16, %rax
	jne	.LBB20_29
# BB#27:                                # %lor.lhs.false71
	movzbl	fixed_regs+16(%rip), %eax
	testq	%rax, %rax
	je	.LBB20_29
# BB#28:
	movq	$1, %r15
	jmp	.LBB20_35
.LBB20_29:                              # %if.then82
	xorq	%r15, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	cmpq	$0, (%rax)
	jne	.LBB20_35
# BB#30:                                # %if.end85
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%r12, (%rax)
	movq	$1, %r15
.LBB20_35:                              # %return
	movq	%r15, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp274:
	.size	combinable_i3pat, .Ltmp274-combinable_i3pat
	.cfi_endproc

	.align	16, 0x90
	.type	subst,@function
subst:                                  # @subst
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp281:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp282:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp283:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp284:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp285:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp286:
	.cfi_def_cfa_offset 128
.Ltmp287:
	.cfi_offset %rbx, -48
.Ltmp288:
	.cfi_offset %r12, -40
.Ltmp289:
	.cfi_offset %r13, -32
.Ltmp290:
	.cfi_offset %r14, -24
.Ltmp291:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movl	(%r12), %eax
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	movq	%rsi, %r8
	movq	%r8, 48(%rsp)           # 8-byte Spill
	movq	%rax, %rbx
	andq	$65535, %rbx            # imm = 0xFFFF
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rcx
	jne	.LBB21_15
# BB#1:                                 # %land.lhs.true
	cmpq	%r8, %r12
	je	.LBB21_8
# BB#2:                                 # %lor.lhs.false
	cmpq	$135, %rbx
	je	.LBB21_21
# BB#3:                                 # %lor.lhs.false
	cmpq	$66, %rbx
	je	.LBB21_21
# BB#4:                                 # %lor.lhs.false
	cmpq	$61, %rbx
	jne	.LBB21_17
# BB#5:                                 # %land.lhs.true4
	movl	(%r8), %ecx
	movq	%rdx, %rsi
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	movq	%rsi, %rdx
	jne	.LBB21_17
# BB#6:                                 # %land.lhs.true8
	movq	%rdx, %rdi
	movl	8(%r12), %edx
	movl	8(%r8), %esi
	cmpq	%rsi, %rdx
	movq	%rdi, %rdx
	jne	.LBB21_13
# BB#7:                                 # %land.lhs.true13
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	je	.LBB21_8
.LBB21_13:                              # %land.lhs.true30
	movl	8(%r12), %ecx
	movq	%rdx, %rsi
	movl	8(%r8), %edx
	cmpq	%rdx, %rcx
	movq	%rsi, %rdx
	jne	.LBB21_15
# BB#14:                                # %if.then38
	movq	$16, %rcx
	movq	const_int_rtx+512(%rip), %rdx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$49, %rdi
	movq	%rax, %rsi
	jmp	.LBB21_119
.LBB21_15:                              # %if.end43
	cmpq	$66, %rbx
	je	.LBB21_21
# BB#16:                                # %if.end43
	cmpq	$135, %rbx
	jne	.LBB21_17
.LBB21_21:                              # %if.end52
	movq	72(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %r12
	jne	.LBB21_23
# BB#22:
	movq	%r12, %rax
	jmp	.LBB21_152
.LBB21_17:                              # %land.lhs.true47
	movzbl	rtx_class(%rbx), %ecx
	cmpq	$111, %rcx
	je	.LBB21_18
# BB#19:                                # %land.lhs.true47
	movq	72(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %r12
	je	.LBB21_20
.LBB21_23:                              # %lor.lhs.false55
	cmpq	$39, %rbx
	je	.LBB21_30
# BB#24:                                # %lor.lhs.false55
	cmpq	$61, %rbx
	jne	.LBB21_48
# BB#25:                                # %land.lhs.true60
	movq	72(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx), %ecx
	movq	%rdx, %rsi
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	movq	%rsi, %rdx
	jne	.LBB21_48
# BB#26:                                # %land.lhs.true65
	movq	%rdx, %rdi
	movl	8(%r12), %edx
	movq	72(%rsp), %rsi          # 8-byte Reload
	movl	8(%rsi), %esi
	cmpq	%rsi, %rdx
	jne	.LBB21_29
# BB#27:                                # %land.lhs.true74
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	je	.LBB21_28
.LBB21_29:                              # %if.end84
	cmpq	$39, %rbx
	movq	%rdi, %rdx
	jne	.LBB21_48
.LBB21_30:                              # %land.lhs.true87
	movq	8(%r12), %rax
	movq	8(%rax), %rdi
	movzbl	(%rdi), %eax
	cmpq	$47, %rax
	jne	.LBB21_48
# BB#31:                                # %land.lhs.true95
	movq	16(%rdi), %rax
	movzbl	(%rax), %eax
	cmpq	$41, %rax
	jne	.LBB21_48
# BB#32:                                # %if.then107
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movq	%rdx, %r13
	xorq	%rcx, %rcx
	xorq	%r15, %r15
	movq	%r8, %rsi
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	callq	subst
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB21_34
# BB#33:                                # %land.lhs.true118
	movq	8(%rax), %rcx
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rcx
	je	.LBB21_152
.LBB21_34:                              # %if.end125
	movq	8(%r12), %rdi
	addq	$8, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	8(%r12), %rax
	movl	(%rax), %edx
	leaq	-1(%rdx), %rbx
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	testq	%rsi, %rsi
	jle	.LBB21_35
# BB#40:                                # %for.body.lr.ph
	decq	%rdx
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	leaq	8(,%rdx,8), %r14
	movq	48(%rsp), %rsi          # 8-byte Reload
	jmp	.LBB21_41
	.align	16, 0x90
.LBB21_44:                              # %for.cond.backedge.for.body_crit_edge
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	8(%r12), %rax
	addq	$-8, %r14
.LBB21_41:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax,%r14), %rax
	movq	8(%rax), %rdi
	movzbl	(%rdi), %ecx
	addq	$-59, %rcx
	andq	%r13, %rcx
	cmpq	$10, %rcx
	ja	.LBB21_45
# BB#42:                                # %for.body
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$1029, %rax             # imm = 0x405
	jne	.LBB21_43
	.align	16, 0x90
.LBB21_45:                              # %if.then159
                                        #   in Loop: Header=BB21_41 Depth=1
	xorq	%rcx, %rcx
	movq	%rsi, %r15
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	callq	subst
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB21_47
# BB#46:                                # %land.lhs.true165
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	8(%rax), %rcx
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rcx
	je	.LBB21_152
.LBB21_47:                              # %if.end172
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	8(%r12), %rcx
	movq	(%rcx,%r14), %rdi
	addq	$8, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%r15, %rsi
.LBB21_43:                              # %for.cond.backedge
                                        #   in Loop: Header=BB21_41 Depth=1
	decq	%rbx
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%r15, %r15
	testq	%rax, %rax
	jg	.LBB21_44
.LBB21_35:
	movq	%r12, %rax
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	jmp	.LBB21_36
.LBB21_48:                              # %if.else
	movq	rtx_format(,%rbx,8), %r13
	cmpq	$47, %rbx
	jne	.LBB21_52
# BB#49:                                # %land.lhs.true190
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	addq	$-59, %rcx
	andq	%rdx, %rcx
	cmpq	$10, %rcx
	ja	.LBB21_52
# BB#50:                                # %land.lhs.true190
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$1029, %rax             # imm = 0x405
	je	.LBB21_52
# BB#51:                                # %if.then214
	movabsq	$.L.str3, %r13
.LBB21_52:                              # %if.end215
	movq	%r13, 8(%rsp)           # 8-byte Spill
	movzbl	(%r13), %eax
	movzbl	rtx_length(%rbx), %ecx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	xorq	%r15, %r15
	cmpq	$101, %rax
	movabsq	$0, %rcx
	jne	.LBB21_54
# BB#53:                                # %if.then220
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %ecx
.LBB21_54:                              # %if.end227
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB21_55
# BB#56:                                # %for.body231.lr.ph
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	leaq	-63(%rbx), %rcx
	andq	%rdx, %rcx
	movq	%rcx, (%rsp)            # 8-byte Spill
	cmpq	$2, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	cmpq	$133, %rbx
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movabsq	$0, %rcx
	jne	.LBB21_58
# BB#57:                                # %for.body231.lr.ph
	movabsq	$1, %rcx
.LBB21_58:                              # %for.body231.lr.ph
	orq	%rcx, 16(%rsp)          # 8-byte Folded Spill
	xorq	%r9, %r9
	jmp	.LBB21_59
	.align	16, 0x90
.LBB21_147:                             # %for.inc716.for.body231_crit_edge
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	(%r13,%r9), %eax
	movq	48(%rsp), %r8           # 8-byte Reload
.LBB21_59:                              # %for.body231
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_63 Depth 2
	andq	$255, %rax
	cmpq	$101, %rax
	jne	.LBB21_60
# BB#79:                                # %if.then354
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	8(%r12,%r9,8), %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	testq	%rdx, %rcx
	leaq	8(%r12,%r9,8), %r15
	je	.LBB21_85
# BB#80:                                # %land.lhs.true360
                                        #   in Loop: Header=BB21_59 Depth=1
	testq	%rdx, %r9
	movabsq	$0, %rcx
	jne	.LBB21_82
# BB#81:                                # %land.lhs.true360
                                        #   in Loop: Header=BB21_59 Depth=1
	movabsq	$1, %rcx
.LBB21_82:                              # %land.lhs.true360
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	16(%rsp), %rsi          # 8-byte Reload
	andq	%rsi, %rcx
	cmpq	$1, %rcx
	jne	.LBB21_85
# BB#83:                                # %land.lhs.true372
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB21_85
# BB#84:                                #   in Loop: Header=BB21_59 Depth=1
	movq	%r9, %r14
	movq	%rdx, %rbx
	jmp	.LBB21_134
	.align	16, 0x90
.LBB21_60:                              # %for.body231
                                        #   in Loop: Header=BB21_59 Depth=1
	cmpq	$69, %rax
	jne	.LBB21_142
# BB#61:                                # %if.then237
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	8(%r12,%r9,8), %rax
	movslq	(%rax), %rbx
	testq	%rbx, %rbx
	jle	.LBB21_142
# BB#62:                                # %for.body247.lr.ph
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%r12, %r13
	movq	%rdx, %r14
	movq	$3, %rcx
	leaq	-1(%rbx), %r15
	shlq	%cl, %rbx
	jmp	.LBB21_63
	.align	16, 0x90
.LBB21_78:                              # %if.end337.for.body247_crit_edge
                                        #   in Loop: Header=BB21_63 Depth=2
	movq	8(%r13,%r12,8), %rax
	decq	%r15
	addq	$-8, %rbx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	%r12, %r9
.LBB21_63:                              # %for.body247
                                        #   Parent Loop BB21_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%rbx), %rdi
	cmpq	%r8, %rdi
	je	.LBB21_68
# BB#64:                                # %lor.lhs.false257
                                        #   in Loop: Header=BB21_63 Depth=2
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB21_73
# BB#65:                                # %land.lhs.true269
                                        #   in Loop: Header=BB21_63 Depth=2
	movl	(%r8), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB21_73
# BB#66:                                # %land.lhs.true274
                                        #   in Loop: Header=BB21_63 Depth=2
	movl	8(%rdi), %edx
	movl	8(%r8), %esi
	cmpq	%rsi, %rdx
	jne	.LBB21_73
# BB#67:                                # %land.lhs.true290
                                        #   in Loop: Header=BB21_63 Depth=2
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB21_73
	.align	16, 0x90
.LBB21_68:                              # %if.then306
                                        #   in Loop: Header=BB21_63 Depth=2
	movl	n_occurrences(%rip), %ecx
	movq	40(%rsp), %rax          # 8-byte Reload
	testq	%r14, %rax
	je	.LBB21_69
# BB#70:                                # %if.then306
                                        #   in Loop: Header=BB21_63 Depth=2
	testq	%r14, %rcx
	movq	72(%rsp), %rax          # 8-byte Reload
	je	.LBB21_72
# BB#71:                                # %cond.true310
                                        #   in Loop: Header=BB21_63 Depth=2
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	%r9, %r12
	callq	copy_rtx
	movq	%r12, %r9
	movl	n_occurrences(%rip), %ecx
	jmp	.LBB21_72
	.align	16, 0x90
.LBB21_73:                              # %if.else316
                                        #   in Loop: Header=BB21_63 Depth=2
	movq	%r9, %r12
	xorq	%rcx, %rcx
	movq	%r8, %rsi
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	callq	subst
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB21_74
# BB#75:                                # %land.lhs.true329
                                        #   in Loop: Header=BB21_63 Depth=2
	movq	8(%rax), %rcx
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rcx
	movq	%r12, %r9
	jne	.LBB21_76
	jmp	.LBB21_152
	.align	16, 0x90
.LBB21_74:                              #   in Loop: Header=BB21_63 Depth=2
	movq	%r12, %r9
	jmp	.LBB21_76
.LBB21_69:                              #   in Loop: Header=BB21_63 Depth=2
	movq	72(%rsp), %rax          # 8-byte Reload
.LBB21_72:                              # %cond.end313
                                        #   in Loop: Header=BB21_63 Depth=2
	incq	%rcx
	movl	%ecx, n_occurrences(%rip)
.LBB21_76:                              # %if.end337
                                        #   in Loop: Header=BB21_63 Depth=2
	movq	8(%r13,%r9,8), %rdi
	addq	%rbx, %rdi
	movq	%rax, %rsi
	movq	%r9, %r12
	callq	do_SUBST
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB21_78
# BB#77:                                #   in Loop: Header=BB21_59 Depth=1
	movq	%r14, %rdx
	movq	%r13, %rax
	movq	8(%rsp), %r13           # 8-byte Reload
	movq	%r12, %r9
	jmp	.LBB21_141
	.align	16, 0x90
.LBB21_85:                              # %if.else378
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%rdx, %rbx
	cmpq	%r8, %rax
	je	.LBB21_90
# BB#86:                                # %lor.lhs.false385
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB21_125
# BB#87:                                # %land.lhs.true394
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	(%r8), %edx
	movq	%rdx, %rsi
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$61, %rsi
	jne	.LBB21_125
# BB#88:                                # %land.lhs.true399
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	8(%rax), %esi
	movl	8(%r8), %edi
	cmpq	%rdi, %rsi
	jne	.LBB21_125
# BB#89:                                # %land.lhs.true412
                                        #   in Loop: Header=BB21_59 Depth=1
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB21_125
	.align	16, 0x90
.LBB21_90:                              # %if.then425
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB21_120
# BB#91:                                # %land.lhs.true430
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	%rdx, %rdi
	je	.LBB21_120
# BB#92:                                # %lor.lhs.false442
                                        #   in Loop: Header=BB21_59 Depth=1
	leaq	-3(%rdi), %rcx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jb	.LBB21_98
# BB#93:                                # %lor.lhs.false442
                                        #   in Loop: Header=BB21_59 Depth=1
	cmpq	$2, %rdi
	jne	.LBB21_96
# BB#94:                                # %land.lhs.true460
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB21_98
# BB#95:                                # %lor.lhs.false462
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rdi
	shlq	%cl, %rdi
	movl	x86_partial_reg_stall(%rip), %ecx
	andq	%rcx, %rdi
	testq	%rbx, %rdi
	je	.LBB21_98
.LBB21_96:                              # %lor.lhs.false465
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%rsi, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB21_104
# BB#97:                                # %land.lhs.true471
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB21_104
.LBB21_98:                              # %land.lhs.true474
                                        #   in Loop: Header=BB21_59 Depth=1
	leaq	-3(%rdx), %rcx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jb	.LBB21_120
# BB#99:                                # %lor.lhs.false492
                                        #   in Loop: Header=BB21_59 Depth=1
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$131072, %rsi           # imm = 0x20000
	jne	.LBB21_102
# BB#100:                               # %land.lhs.true498
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB21_120
# BB#101:                               # %lor.lhs.false501
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	shlq	%cl, %rsi
	movl	x86_partial_reg_stall(%rip), %ecx
	andq	%rcx, %rsi
	testq	%rbx, %rsi
	je	.LBB21_120
.LBB21_102:                             # %lor.lhs.false505
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB21_104
# BB#103:                               # %land.lhs.true514
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB21_120
.LBB21_104:                             # %land.lhs.true517
                                        #   in Loop: Header=BB21_59 Depth=1
	cmpq	$63, 64(%rsp)           # 8-byte Folded Reload
	jne	.LBB21_118
# BB#105:                               # %land.lhs.true520
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	(%r12), %esi
	movq	$16, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	cmpq	%rdx, %rdi
	je	.LBB21_120
# BB#106:                               # %lor.lhs.false532
                                        #   in Loop: Header=BB21_59 Depth=1
	leaq	-3(%rdi), %rcx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jb	.LBB21_112
# BB#107:                               # %lor.lhs.false532
                                        #   in Loop: Header=BB21_59 Depth=1
	cmpq	$2, %rdi
	jne	.LBB21_110
# BB#108:                               # %land.lhs.true550
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB21_112
# BB#109:                               # %lor.lhs.false553
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rdi
	shlq	%cl, %rdi
	movl	x86_partial_reg_stall(%rip), %ecx
	andq	%rcx, %rdi
	testq	%rbx, %rdi
	je	.LBB21_112
.LBB21_110:                             # %lor.lhs.false557
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%rsi, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB21_118
# BB#111:                               # %land.lhs.true563
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB21_118
.LBB21_112:                             # %land.lhs.true566
                                        #   in Loop: Header=BB21_59 Depth=1
	addq	$-3, %rdx
	andq	%rbx, %rdx
	cmpq	$2, %rdx
	jb	.LBB21_120
# BB#113:                               # %lor.lhs.false584
                                        #   in Loop: Header=BB21_59 Depth=1
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$131072, %rsi           # imm = 0x20000
	jne	.LBB21_116
# BB#114:                               # %land.lhs.true590
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB21_120
# BB#115:                               # %lor.lhs.false593
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rdx
	shlq	%cl, %rdx
	movl	x86_partial_reg_stall(%rip), %ecx
	andq	%rcx, %rdx
	testq	%rbx, %rdx
	je	.LBB21_120
.LBB21_116:                             # %lor.lhs.false597
                                        #   in Loop: Header=BB21_59 Depth=1
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB21_118
# BB#117:                               # %land.lhs.true606
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB21_118
	.align	16, 0x90
.LBB21_120:                             # %if.end611
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%r9, %r14
	movl	n_occurrences(%rip), %ecx
	movq	40(%rsp), %rax          # 8-byte Reload
	testq	%rbx, %rax
	je	.LBB21_121
# BB#122:                               # %if.end611
                                        #   in Loop: Header=BB21_59 Depth=1
	testq	%rbx, %rcx
	movq	72(%rsp), %rax          # 8-byte Reload
	je	.LBB21_124
# BB#123:                               # %cond.true615
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	72(%rsp), %rdi          # 8-byte Reload
	callq	copy_rtx
	movl	n_occurrences(%rip), %ecx
	jmp	.LBB21_124
	.align	16, 0x90
.LBB21_125:                             # %if.else621
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	32(%rsp), %rcx          # 8-byte Reload
	testq	%rbx, %rcx
	je	.LBB21_129
# BB#126:                               # %land.lhs.true627
                                        #   in Loop: Header=BB21_59 Depth=1
	cmpq	$2, (%rsp)              # 8-byte Folded Reload
	jb	.LBB21_130
# BB#127:                               # %land.lhs.true627
                                        #   in Loop: Header=BB21_59 Depth=1
	cmpq	$47, 64(%rsp)           # 8-byte Folded Reload
	je	.LBB21_130
# BB#128:                               # %land.lhs.true627
                                        #   in Loop: Header=BB21_59 Depth=1
	xorq	%rcx, %rcx
	cmpq	$133, 64(%rsp)          # 8-byte Folded Reload
	je	.LBB21_130
	jmp	.LBB21_133
.LBB21_129:                             # %lor.lhs.false636
                                        #   in Loop: Header=BB21_59 Depth=1
	xorq	%rcx, %rcx
	cmpq	$47, 64(%rsp)           # 8-byte Folded Reload
	jne	.LBB21_133
.LBB21_130:                             # %land.rhs
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%r12, %r14
	testq	%rbx, %r9
	movabsq	$0, %rcx
	jne	.LBB21_132
# BB#131:                               # %land.rhs
                                        #   in Loop: Header=BB21_59 Depth=1
	movabsq	$1, %rcx
.LBB21_132:                             # %land.rhs
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%r14, %r12
.LBB21_133:                             # %land.end
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%r9, %r14
	movq	%rax, %rdi
	movq	%r8, %rsi
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	callq	subst
	jmp	.LBB21_134
.LBB21_121:                             #   in Loop: Header=BB21_59 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
.LBB21_124:                             # %cond.end618
                                        #   in Loop: Header=BB21_59 Depth=1
	incq	%rcx
	movl	%ecx, n_occurrences(%rip)
.LBB21_134:                             # %if.end643
                                        #   in Loop: Header=BB21_59 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB21_135
# BB#138:                               # %land.lhs.true660
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%r15, %rdx
	movl	(%r12), %r15d
	movq	%r15, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB21_144
# BB#139:                               # %if.then665
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	8(%r12), %rcx
	movl	16(%r12), %r8d
	movzbl	2(%rcx), %edx
	movq	$16, %rcx
	shrq	%cl, %r15
	andq	$255, %r15
	movq	%r15, %rdi
	movq	%rax, %rsi
	movq	%r8, %rcx
	callq	simplify_subreg
	movq	%rax, %r12
	testq	%r12, %r12
	movq	%rbx, %rdx
	movq	%r14, %r9
	jne	.LBB21_142
# BB#140:                               # %if.then680
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%rdx, %r14
	movq	const_int_rtx+512(%rip), %rdx
	movq	$49, %rdi
	movq	%r15, %rsi
	movq	%r9, %rbx
	callq	gen_rtx_fmt_e
	movq	%rbx, %r9
	movq	%r14, %rdx
.LBB21_141:                             # %for.inc716
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%rax, %r12
	jmp	.LBB21_142
	.align	16, 0x90
.LBB21_135:                             # %if.end643
                                        #   in Loop: Header=BB21_59 Depth=1
	cmpq	$49, %rcx
	jne	.LBB21_137
# BB#136:                               # %land.lhs.true648
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	8(%rax), %rcx
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB21_137
	jmp	.LBB21_152
.LBB21_144:                             # %land.lhs.true688
                                        #   in Loop: Header=BB21_59 Depth=1
	movl	(%r12), %esi
	movq	%rsi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$121, %rcx
	movq	%rdx, %r15
	jne	.LBB21_137
# BB#145:                               # %if.then693
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	8(%r12), %rcx
	movzbl	2(%rcx), %r8d
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	$121, %rdi
	movq	%rax, %rdx
	movq	%r8, %rcx
	callq	simplify_unary_operation
	movq	%rax, %r12
	testq	%r12, %r12
	movq	%rbx, %rdx
	movq	%r14, %r9
	jne	.LBB21_142
	jmp	.LBB21_146
	.align	16, 0x90
.LBB21_137:                             # %if.else707
                                        #   in Loop: Header=BB21_59 Depth=1
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%rbx, %rdx
	movq	%r14, %r9
.LBB21_142:                             # %for.inc716
                                        #   in Loop: Header=BB21_59 Depth=1
	incq	%r9
	movq	$32, %rcx
	movq	%r9, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%r15, %r15
	movq	24(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jl	.LBB21_147
	jmp	.LBB21_143
.LBB21_55:
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 64(%rsp)          # 8-byte Spill
.LBB21_143:
	movq	%rdx, %r13
	movq	%r12, %rax
	.align	16, 0x90
.LBB21_36:                              # %for.body723
                                        # =>This Inner Loop Header: Depth=1
	movq	64(%rsp), %rbx          # 8-byte Reload
	andq	%r13, %rbx
	cmpq	$61, %rbx
	ja	.LBB21_38
# BB#37:                                # %for.body723
                                        #   in Loop: Header=BB21_36 Depth=1
	movq	$1, %rdx
	movq	%rbx, %rcx
	shlq	%cl, %rdx
	movabsq	$2324420357676597248, %rcx # imm = 0x2042000000000000
	testq	%rcx, %rdx
	jne	.LBB21_150
	.align	16, 0x90
.LBB21_38:                              # %if.then732
                                        #   in Loop: Header=BB21_36 Depth=1
	movq	%r15, %rcx
	andq	%r13, %rcx
	cmpq	$3, %rcx
	jne	.LBB21_39
# BB#148:                               # %if.then732
                                        #   in Loop: Header=BB21_36 Depth=1
	movabsq	$1, %rdx
	jmp	.LBB21_149
	.align	16, 0x90
.LBB21_39:                              #   in Loop: Header=BB21_36 Depth=1
	movabsq	$0, %rdx
.LBB21_149:                             # %if.then732
                                        #   in Loop: Header=BB21_36 Depth=1
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rdi
	movq	32(%rsp), %rcx          # 8-byte Reload
	callq	combine_simplify_rtx
.LBB21_150:                             # %if.end736
                                        #   in Loop: Header=BB21_36 Depth=1
	movzbl	(%rax), %ecx
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	cmpq	%rbx, %rcx
	je	.LBB21_152
# BB#151:                               # %if.end736
                                        #   in Loop: Header=BB21_36 Depth=1
	incq	%r15
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	movq	$32, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$4, %rdx
	jl	.LBB21_36
	jmp	.LBB21_152
.LBB21_8:                               # %if.then
	movl	n_occurrences(%rip), %eax
	leaq	1(%rax), %rcx
	movl	%ecx, n_occurrences(%rip)
	movq	40(%rsp), %rcx          # 8-byte Reload
	testq	%rdx, %rcx
	je	.LBB21_9
# BB#10:                                # %if.then
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB21_11
# BB#12:                                # %cond.true
	movq	72(%rsp), %rdi          # 8-byte Reload
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	copy_rtx  # TAILCALL
.LBB21_18:
	movq	%r12, %rax
	jmp	.LBB21_152
.LBB21_20:
	movq	%r12, %rax
	jmp	.LBB21_152
.LBB21_9:
	movq	72(%rsp), %rax          # 8-byte Reload
	jmp	.LBB21_152
.LBB21_11:
	movq	72(%rsp), %rax          # 8-byte Reload
	jmp	.LBB21_152
.LBB21_28:
	movq	72(%rsp), %rax          # 8-byte Reload
.LBB21_152:                             # %return
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB21_118:                             # %if.then609
	movq	const_int_rtx+512(%rip), %rdx
	movq	$49, %rdi
	xorq	%rsi, %rsi
.LBB21_119:                             # %if.then609
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_e  # TAILCALL
.LBB21_146:                             # %if.then705
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.subst, %rcx
	movq	$3556, %rsi             # imm = 0xDE4
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp292:
	.size	subst, .Ltmp292-subst
	.cfi_endproc

	.align	16, 0x90
	.type	mark_used_regs_combine,@function
mark_used_regs_combine:                 # @mark_used_regs_combine
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp299:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp300:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp301:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp302:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp303:
	.cfi_def_cfa_offset 48
.Ltmp304:
	.cfi_offset %rbx, -48
.Ltmp305:
	.cfi_offset %r12, -40
.Ltmp306:
	.cfi_offset %r13, -32
.Ltmp307:
	.cfi_offset %r14, -24
.Ltmp308:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	jmp	.LBB22_1
	.align	16, 0x90
.LBB22_35:                              # %if.end136
                                        #   in Loop: Header=BB22_1 Depth=1
	addq	$16, %r12
	movq	(%r12), %r12
.LBB22_1:                               # %tailrecurse
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_30 Depth 2
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	leaq	-40(%rcx), %rdx
	andq	%r14, %rdx
	cmpq	$28, %rdx
	ja	.LBB22_36
# BB#2:                                 # %tailrecurse
                                        #   in Loop: Header=BB22_1 Depth=1
	jmpq	*.LJTI22_0(,%rdx,8)
.LBB22_29:                              # %sw.bb101
                                        #   in Loop: Header=BB22_1 Depth=1
	leaq	8(%r12), %rax
	jmp	.LBB22_30
	.align	16, 0x90
.LBB22_33:                              # %while.body
                                        #   in Loop: Header=BB22_30 Depth=2
	addq	$8, %rax
.LBB22_30:                              # %while.cond
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax), %rax
	movzbl	(%rax), %ecx
	leaq	-63(%rcx), %rdx
	andq	%r14, %rdx
	cmpq	$2, %rdx
	jb	.LBB22_33
# BB#31:                                # %while.cond
                                        #   in Loop: Header=BB22_30 Depth=2
	cmpq	$66, %rcx
	je	.LBB22_34
# BB#32:                                # %while.cond
                                        #   in Loop: Header=BB22_30 Depth=2
	addq	$-132, %rcx
	andq	%r14, %rcx
	cmpq	$1, %rcx
	jbe	.LBB22_33
	jmp	.LBB22_35
	.align	16, 0x90
.LBB22_3:                               # %sw.bb1
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	jne	.LBB22_28
# BB#4:                                 # %if.then
                                        #   in Loop: Header=BB22_1 Depth=1
	addq	$8, %rax
	movq	(%rax), %r12
	jmp	.LBB22_1
	.align	16, 0x90
.LBB22_34:                              # %if.then132
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	8(%rax), %rdi
	callq	mark_used_regs_combine
	jmp	.LBB22_35
.LBB22_36:                              # %sw.epilog
	movzbl	rtx_length(%rcx), %r14d
	testq	%r14, %r14
	je	.LBB22_28
# BB#37:                                # %for.body149.lr.ph
	movq	rtx_format(,%rcx,8), %r15
	.align	16, 0x90
.LBB22_38:                              # %for.body149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_43 Depth 2
	movq	%r14, %r13
	movzbl	-1(%r15,%r13), %eax
	leaq	-1(%r13), %r14
	cmpq	$69, %rax
	jne	.LBB22_39
# BB#42:                                # %for.cond166.preheader
                                        #   in Loop: Header=BB22_38 Depth=1
	movq	(%r12,%r13,8), %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	movq	$1, %rbx
	jle	.LBB22_40
	.align	16, 0x90
.LBB22_43:                              # %for.body172
                                        #   Parent Loop BB22_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%rbx,8), %rdi
	callq	mark_used_regs_combine
	movq	(%r12,%r13,8), %rax
	movslq	(%rax), %rdx
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	incq	%rbx
	cmpq	%rdx, %rsi
	jl	.LBB22_43
	jmp	.LBB22_40
	.align	16, 0x90
.LBB22_39:                              # %for.body149
                                        #   in Loop: Header=BB22_38 Depth=1
	cmpq	$101, %rax
	jne	.LBB22_40
# BB#41:                                # %if.then155
                                        #   in Loop: Header=BB22_38 Depth=1
	movq	(%r12,%r13,8), %rdi
	callq	mark_used_regs_combine
.LBB22_40:                              # %for.cond146.backedge
                                        #   in Loop: Header=BB22_38 Depth=1
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB22_38
	jmp	.LBB22_28
.LBB22_5:                               # %sw.bb10
	movl	8(%r12), %esi
	cmpq	$52, %rsi
	ja	.LBB22_28
# BB#6:                                 # %sw.bb10
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rsi, %rcx
	cmpq	$6, %rcx
	je	.LBB22_28
# BB#7:                                 # %lor.lhs.false17
	cmpq	$20, %rsi
	je	.LBB22_28
# BB#8:                                 # %lor.lhs.false17
	cmpq	$16, %rsi
	jne	.LBB22_10
# BB#9:                                 # %land.lhs.true
	movzbl	fixed_regs+16(%rip), %ecx
	testq	%rcx, %rcx
	jne	.LBB22_28
.LBB22_10:                              # %if.end24
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rsi, %rdx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$8, %rdx
	je	.LBB22_14
# BB#11:                                # %if.end24
	leaq	-21(%rsi), %rcx
	andq	%r14, %rcx
	cmpq	$8, %rcx
	jb	.LBB22_14
# BB#12:                                # %if.end24
	leaq	-45(%rsi), %rcx
	andq	%r14, %rcx
	cmpq	$8, %rcx
	jb	.LBB22_14
# BB#13:                                # %if.end24
	leaq	-29(%rsi), %rcx
	andq	%r14, %rcx
	cmpq	$7, %rcx
	jbe	.LBB22_14
# BB#19:                                # %cond.false
	cmpq	$24, %rax
	jne	.LBB22_20
# BB#22:                                # %cond.true75
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB22_24
.LBB22_14:                              # %cond.true
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB22_24
# BB#15:                                # %lor.rhs
	cmpq	$6, %rcx
	jne	.LBB22_16
# BB#17:                                # %lor.rhs
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB22_24
.LBB22_20:                              # %cond.false
	cmpq	$18, %rax
	jne	.LBB22_23
# BB#21:                                # %cond.true66
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB22_24
.LBB22_23:                              # %cond.false79
	movl	target_flags(%rip), %edi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
	jmp	.LBB22_24
.LBB22_16:
	movabsq	$0, %rax
	incq	%rax
.LBB22_24:                              # %cond.end95
	addq	%rsi, %rax
	andq	%r14, %rax
	cmpq	%rax, %rsi
	jae	.LBB22_28
# BB#25:                                # %for.body.lr.ph
	movq	newpat_used_regs(%rip), %rdx
	movq	%rsi, %rdi
.LBB22_26:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, %rbx
	movq	$1, %rdx
	movq	%rsi, %rcx
	shlq	%cl, %rdx
	orq	%rbx, %rdx
	incq	%rdi
	movq	%rdi, %rcx
	andq	%r14, %rcx
	incq	%rsi
	cmpq	%rax, %rcx
	jne	.LBB22_26
# BB#27:                                # %for.cond.for.end185.loopexit252_crit_edge
	movq	%rdx, newpat_used_regs(%rip)
.LBB22_28:                              # %for.end185
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp309:
	.size	mark_used_regs_combine, .Ltmp309-mark_used_regs_combine
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI22_0:
	.quad	.LBB22_28
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_28
	.quad	.LBB22_28
	.quad	.LBB22_36
	.quad	.LBB22_29
	.quad	.LBB22_36
	.quad	.LBB22_3
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_28
	.quad	.LBB22_28
	.quad	.LBB22_28
	.quad	.LBB22_36
	.quad	.LBB22_28
	.quad	.LBB22_28
	.quad	.LBB22_36
	.quad	.LBB22_5
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_36
	.quad	.LBB22_28
	.quad	.LBB22_28

	.text
	.align	16, 0x90
	.type	recog_for_combine,@function
recog_for_combine:                      # @recog_for_combine
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp316:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp317:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp318:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp319:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp320:
	.cfi_def_cfa_offset 48
	subq	$64, %rsp
.Ltmp321:
	.cfi_def_cfa_offset 112
.Ltmp322:
	.cfi_offset %rbx, -48
.Ltmp323:
	.cfi_offset %r12, -40
.Ltmp324:
	.cfi_offset %r13, -32
.Ltmp325:
	.cfi_offset %r14, -24
.Ltmp326:
	.cfi_offset %r15, -16
	movq	(%rdi), %r14
	xorq	%rax, %rax
	movl	%eax, 60(%rsp)
	movzbl	(%r14), %eax
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	cmpq	$39, %rax
	jne	.LBB23_5
# BB#1:                                 # %if.then
	movq	8(%r14), %rax
	movslq	(%rax), %rsi
	testq	%rsi, %rsi
	jle	.LBB23_5
# BB#2:                                 # %for.body.lr.ph
	movq	const_int_rtx+512(%rip), %r8
	decq	%rsi
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB23_3:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax,%rsi,8), %rcx
	movzbl	(%rcx), %ebx
	cmpq	$49, %rbx
	jne	.LBB23_4
# BB#8:                                 # %land.lhs.true
                                        #   in Loop: Header=BB23_3 Depth=1
	movq	8(%rcx), %rcx
	cmpq	%r8, %rcx
	je	.LBB23_78
.LBB23_4:                               # %for.cond.backedge
                                        #   in Loop: Header=BB23_3 Depth=1
	movq	$32, %rcx
	movq	%rsi, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	decq	%rsi
	testq	%rbx, %rbx
	jg	.LBB23_3
.LBB23_5:                               # %if.end19
	movq	%rdi, %rbx
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	shallow_copy_rtx
	movq	%rax, %r13
	movq	%r14, 32(%r13)
	movq	$0, 56(%r13)
	leaq	60(%rsp), %rdx
	movq	%r14, %rdi
	movq	%r13, %rsi
	callq	recog
	movq	%rax, %r12
	movq	$32, %rcx
                                        # kill: RAX<def> R12<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB23_30
# BB#6:                                 # %land.lhs.true28
	movq	%r14, %rdi
	callq	check_asm_operands
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rax
	je	.LBB23_9
# BB#7:
	movq	%rdx, %r15
	jmp	.LBB23_26
.LBB23_9:                               # %land.lhs.true30
	movzbl	(%r14), %eax
	cmpq	$39, %rax
	jne	.LBB23_10
# BB#11:                                # %for.cond35.preheader
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	movq	8(%r14), %rbx
	movslq	(%rbx), %r12
	xorq	%rdi, %rdi
	testq	%r12, %r12
	jle	.LBB23_18
# BB#12:
	movq	$1, %r15
	.align	16, 0x90
.LBB23_13:                              # %for.body41
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx,%r15,8), %rsi
	movzbl	(%rsi), %eax
	cmpq	$49, %rax
	je	.LBB23_17
# BB#14:                                # %if.then51
                                        #   in Loop: Header=BB23_13 Depth=1
	leaq	-1(%r15), %rax
	andq	%rdx, %rax
	movq	%rdi, %rcx
	andq	%rdx, %rcx
	cmpq	%rcx, %rax
	je	.LBB23_16
# BB#15:                                # %if.then53
                                        #   in Loop: Header=BB23_13 Depth=1
	movq	$32, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%rdi, %r12
	leaq	8(%rbx,%rax,8), %rdi
	movq	%rdx, %rbx
	callq	do_SUBST
	movq	%r12, %rdi
	movq	%rbx, %rdx
	movq	8(%r14), %rbx
.LBB23_16:                              # %if.end66
                                        #   in Loop: Header=BB23_13 Depth=1
	incq	%rdi
.LBB23_17:                              # %for.inc68
                                        #   in Loop: Header=BB23_13 Depth=1
	movslq	(%rbx), %r12
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	incq	%r15
	cmpq	%r12, %rax
	jl	.LBB23_13
.LBB23_18:                              # %for.end70
	movq	%rdi, %rcx
	andq	%rdx, %rcx
	movq	%r12, %rax
	andq	%rdx, %rax
	cmpq	%rcx, %rax
	je	.LBB23_23
# BB#19:                                # %if.end.i
	movq	undobuf+8(%rip), %rax
	movq	%rcx, %r15
	testq	%rax, %rax
	je	.LBB23_21
# BB#20:                                # %if.then1.i
	movq	(%rax), %rcx
	movq	%rcx, undobuf+8(%rip)
	jmp	.LBB23_22
.LBB23_10:
	movq	%rdx, %r15
	jmp	.LBB23_26
.LBB23_21:                              # %if.else.i
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	$32, %rdi
	callq	xmalloc
	movq	48(%rsp), %rdi          # 8-byte Reload
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
.LBB23_22:                              # %if.end2.i
	movq	$1, %rcx
	movl	%ecx, 8(%rax)
	movq	%rbx, 24(%rax)
	movl	%r12d, 16(%rax)
	movl	%edi, (%rbx)
	movq	undobuf(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%rax, undobuf(%rip)
	movq	%r15, %rcx
.LBB23_23:                              # %do_SUBST_INT.exit
	movq	%rdx, %r15
	cmpq	$1, %rcx
	movq	16(%rsp), %rbx          # 8-byte Reload
	jne	.LBB23_25
# BB#24:                                # %if.then76
	movq	8(%r14), %rax
	movq	8(%rax), %r14
.LBB23_25:                              # %if.end87
	movq	%r14, 32(%r13)
	leaq	60(%rsp), %rdx
	movq	%r14, %rdi
	movq	%r13, %rsi
	callq	recog
	movq	%rax, %r12
	movq	$32, %rcx
                                        # kill: RAX<def> R12<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB23_30
.LBB23_26:                              # %land.lhs.true89
	movzbl	(%r14), %eax
	cmpq	$47, %rax
	jne	.LBB23_30
# BB#27:                                # %land.lhs.true93
	movq	%r14, %rdi
	callq	set_noop_p
	testq	%r15, %rax
	je	.LBB23_30
# BB#28:                                # %if.end97.thread
	xorq	%rax, %rax
	movl	%eax, 60(%rsp)
	movq	$2147483647, %r12       # imm = 0x7FFFFFFF
	jmp	.LBB23_29
.LBB23_30:                              # %if.end97
	movl	60(%rsp), %edx
	xorq	%rax, %rax
	testq	%rdx, %rdx
	je	.LBB23_29
# BB#31:                                # %if.then99
	movq	%rbx, %r13
	movzbl	(%r14), %ecx
	movq	%r12, %rbx
	cmpq	$39, %rcx
	jne	.LBB23_33
# BB#32:                                # %cond.true
	movq	8(%r14), %rcx
	movl	(%rcx), %edi
	addq	%rdx, %rdi
	jmp	.LBB23_34
.LBB23_33:                              # %cond.false
	incq	%rdx
	movq	%rdx, %rdi
.LBB23_34:                              # %cond.end
	callq	rtvec_alloc
	movq	$39, %rdi
	xorq	%rsi, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_E
	movzbl	(%r14), %ecx
	movq	%rax, %r15
	cmpq	$39, %rcx
	movq	%rbx, %r12
	jne	.LBB23_38
# BB#35:                                # %for.cond114.preheader
	movq	8(%r14), %rax
	movslq	(%rax), %rcx
	leaq	8(%r15), %rbx
	testq	%rcx, %rcx
	jle	.LBB23_39
# BB#36:
	movq	$1, %rdx
	.align	16, 0x90
.LBB23_37:                              # %for.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax,%rdx,8), %rax
	movq	(%rbx), %rcx
	movq	%rax, (%rcx,%rdx,8)
	movq	8(%r14), %rax
	movslq	(%rax), %rsi
	movq	$32, %rcx
	movq	%rdx, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	incq	%rdx
	cmpq	%rsi, %rdi
	jl	.LBB23_37
	jmp	.LBB23_39
.LBB23_38:                              # %if.else
	movq	8(%r15), %rax
	leaq	8(%r15), %rbx
	movq	%r14, 8(%rax)
.LBB23_39:                              # %if.end141
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	add_clobbers
	movslq	60(%rsp), %rcx
	xorq	%rax, %rax
	testq	%rcx, %rcx
	jle	.LBB23_40
# BB#41:                                # %for.body153.lr.ph
	movq	%r12, 8(%rsp)           # 8-byte Spill
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movq	8(%r15), %rdx
	movq	%r15, (%rsp)            # 8-byte Spill
	movl	(%rdx), %r13d
	subq	%rcx, %r13
	movq	$32, %rcx
	shlq	%cl, %r13
	movq	$32, %rcx
	sarq	%cl, %r13
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	xorq	%rax, %rax
.LBB23_42:                              # %for.body153
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_67 Depth 2
                                        #     Child Loop BB23_46 Depth 2
                                        #     Child Loop BB23_71 Depth 2
                                        #     Child Loop BB23_77 Depth 2
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	8(%rdx,%r13,8), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB23_74
# BB#43:                                # %land.lhs.true166
                                        #   in Loop: Header=BB23_42 Depth=1
	movl	8(%rax), %esi
	cmpq	$53, %rsi
	movl	%esi, reg_dead_regno(%rip)
	jae	.LBB23_44
# BB#51:                                # %cond.true.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movzbl	2(%rax), %eax
	movq	%rsi, %rcx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rdx, %rcx
	cmpq	$8, %rcx
	je	.LBB23_55
# BB#52:                                # %cond.true.i
                                        #   in Loop: Header=BB23_42 Depth=1
	leaq	-21(%rsi), %rcx
	andq	%r15, %rcx
	cmpq	$8, %rcx
	jb	.LBB23_55
# BB#53:                                # %cond.true.i
                                        #   in Loop: Header=BB23_42 Depth=1
	leaq	-45(%rsi), %rcx
	andq	%r15, %rcx
	cmpq	$8, %rcx
	jb	.LBB23_55
# BB#54:                                # %cond.true.i
                                        #   in Loop: Header=BB23_42 Depth=1
	leaq	-29(%rsi), %rcx
	andq	%r15, %rcx
	cmpq	$7, %rcx
	jbe	.LBB23_55
# BB#59:                                # %cond.false.i
                                        #   in Loop: Header=BB23_42 Depth=1
	cmpq	$24, %rax
	jne	.LBB23_60
# BB#62:                                # %cond.true34.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB23_64
	.align	16, 0x90
.LBB23_44:                              # %cond.end56.thread.i
                                        #   in Loop: Header=BB23_42 Depth=1
	leaq	1(%rsi), %rax
	movl	%eax, reg_dead_endregno(%rip)
	xorq	%rax, %rax
	movl	%eax, reg_dead_flag(%rip)
	jmp	.LBB23_45
.LBB23_55:                              # %cond.true14.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB23_64
# BB#56:                                # %lor.rhs.i
                                        #   in Loop: Header=BB23_42 Depth=1
	cmpq	$6, %rcx
	movabsq	$0, %rax
	jne	.LBB23_58
# BB#57:                                # %lor.rhs.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movabsq	$1, %rax
.LBB23_58:                              # %lor.rhs.i
                                        #   in Loop: Header=BB23_42 Depth=1
	incq	%rax
	jmp	.LBB23_64
.LBB23_60:                              # %cond.false.i
                                        #   in Loop: Header=BB23_42 Depth=1
	cmpq	$18, %rax
	jne	.LBB23_63
# BB#61:                                # %cond.true27.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB23_64
.LBB23_63:                              # %cond.false38.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movl	target_flags(%rip), %edi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
	.align	16, 0x90
.LBB23_64:                              # %for.cond.preheader.i
                                        #   in Loop: Header=BB23_42 Depth=1
	addq	%rsi, %rax
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	%rdx, %rsi
	movl	%eax, reg_dead_endregno(%rip)
	movabsq	$0, %rax
	movl	%eax, reg_dead_flag(%rip)
	jae	.LBB23_45
# BB#65:                                # %for.body.lr.ph.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movq	newpat_used_regs(%rip), %rax
	movq	%rsi, %rdi
	.align	16, 0x90
.LBB23_67:                              # %for.body.i
                                        #   Parent Loop BB23_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	$1, %rbx
	movq	%rsi, %rcx
	shlq	%cl, %rbx
	testq	%rax, %rbx
	jne	.LBB23_78
# BB#66:                                # %for.cond.i
                                        #   in Loop: Header=BB23_67 Depth=2
	incq	%rdi
	movq	%rdi, %rcx
	andq	%r15, %rcx
	incq	%rsi
	cmpq	%rdx, %rcx
	jb	.LBB23_67
	.align	16, 0x90
.LBB23_45:                              # %for.cond67.preheader.i
                                        #   in Loop: Header=BB23_42 Depth=1
	xorq	%r12, %r12
	movq	40(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	movq	%rax, %r14
	je	.LBB23_73
	.align	16, 0x90
.LBB23_46:                              # %land.lhs.true69.i
                                        #   Parent Loop BB23_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r14), %eax
	addq	$-35, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB23_68
# BB#47:                                # %for.body78.i
                                        #   in Loop: Header=BB23_46 Depth=2
	movq	32(%r14), %rdi
	xorq	%rdx, %rdx
	movabsq	$reg_dead_at_p_1, %rsi
	callq	note_stores
	movl	reg_dead_flag(%rip), %eax
	cmpq	$1, %rax
	je	.LBB23_74
# BB#48:                                # %for.body78.i
                                        #   in Loop: Header=BB23_46 Depth=2
	testq	%rax, %rax
	jne	.LBB23_78
# BB#49:                                # %if.end86.i
                                        #   in Loop: Header=BB23_46 Depth=2
	movl	reg_dead_regno(%rip), %edx
	movq	$1, %rsi
	movq	%r14, %rdi
	callq	find_regno_note
	testq	%rax, %rax
	jne	.LBB23_74
# BB#50:                                # %for.inc90.i
                                        #   in Loop: Header=BB23_46 Depth=2
	movq	%r14, %rdi
	callq	prev_nonnote_insn
	movq	%rax, %r14
	testq	%r14, %r14
	jne	.LBB23_46
	jmp	.LBB23_73
.LBB23_68:                              # %for.cond96.preheader.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movslq	n_basic_blocks(%rip), %rax
	xorq	%r12, %r12
	testq	%rax, %rax
	jle	.LBB23_72
# BB#69:                                # %for.body99.lr.ph.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movq	basic_block_info(%rip), %rdx
	xorq	%r12, %r12
	.align	16, 0x90
.LBB23_71:                              # %for.body99.i
                                        #   Parent Loop BB23_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	32(%rdx,%r12,8), %rcx
	movq	(%rcx), %rcx
	cmpq	%rcx, %r14
	je	.LBB23_72
# BB#70:                                # %for.cond96.i
                                        #   in Loop: Header=BB23_71 Depth=2
	incq	%r12
	movq	$32, %rcx
	movq	%r12, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rax, %rsi
	jl	.LBB23_71
.LBB23_72:                              # %for.end108.i
                                        #   in Loop: Header=BB23_42 Depth=1
	andq	%r15, %rax
	movq	%r12, %rcx
	andq	%r15, %rcx
	cmpq	%rax, %rcx
	je	.LBB23_78
	.align	16, 0x90
.LBB23_73:                              # %if.end113.i
                                        #   in Loop: Header=BB23_42 Depth=1
	movl	reg_dead_regno(%rip), %ebx
	movq	$32, %rcx
	movl	reg_dead_endregno(%rip), %eax
	shlq	%cl, %r12
	movq	$32, %rcx
	sarq	%cl, %r12
	cmpq	%rax, %rbx
	jae	.LBB23_74
	.align	16, 0x90
.LBB23_77:                              # %for.body117.i
                                        #   Parent Loop BB23_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	basic_block_info(%rip), %rax
	movq	32(%rax,%r12,8), %rax
	movq	64(%rax), %rdi
	movq	%rbx, %rsi
	callq	bitmap_bit_p
	testq	%r15, %rax
	jne	.LBB23_78
# BB#76:                                # %for.cond114.i
                                        #   in Loop: Header=BB23_77 Depth=2
	movl	reg_dead_endregno(%rip), %eax
	incq	%rbx
	movq	%rbx, %rcx
	andq	%r15, %rcx
	cmpq	%rax, %rcx
	jb	.LBB23_77
	.align	16, 0x90
.LBB23_74:                              # %if.end179
                                        #   in Loop: Header=BB23_42 Depth=1
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	(%rbx), %rax
	movq	8(%rax,%r13,8), %rax
	movq	8(%rax), %rdx
	movq	$3, %rdi
	movq	$10, %rsi
	movq	48(%rsp), %rcx          # 8-byte Reload
	callq	gen_rtx_fmt_ee
	movq	(%rbx), %rdx
	incq	%r13
	movslq	(%rdx), %rdi
	movq	$32, %rcx
	movq	%r13, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdi, %rsi
	jl	.LBB23_42
# BB#75:
	movq	(%rsp), %r14            # 8-byte Reload
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	8(%rsp), %r12           # 8-byte Reload
	jmp	.LBB23_29
.LBB23_40:
	movq	%r15, %r14
	movq	%r13, %rbx
.LBB23_29:                              # %if.end193
	movq	%r14, (%rbx)
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%r12, %r15
.LBB23_78:                              # %return
	movq	%r15, %rax
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp327:
	.size	recog_for_combine, .Ltmp327-recog_for_combine
	.cfi_endproc

	.align	16, 0x90
	.type	use_crosses_set_p,@function
use_crosses_set_p:                      # @use_crosses_set_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp334:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp335:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp336:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp337:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp338:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp339:
	.cfi_def_cfa_offset 64
.Ltmp340:
	.cfi_offset %rbx, -48
.Ltmp341:
	.cfi_offset %r12, -40
.Ltmp342:
	.cfi_offset %r13, -32
.Ltmp343:
	.cfi_offset %r14, -24
.Ltmp344:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movl	(%rbx), %eax
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$66, %rdx
	jne	.LBB24_1
# BB#33:                                # %land.lhs.true103
	movslq	mem_last_set(%rip), %rax
	movq	$32, %rcx
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rsi, %rax
	movq	$1, %rcx
	jg	.LBB24_45
	jmp	.LBB24_34
.LBB24_1:                               # %entry
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	cmpq	$61, %rdx
	jne	.LBB24_34
# BB#2:                                 # %if.then
	movl	8(%rbx), %r14d
	cmpq	$53, %r14
	jae	.LBB24_3
# BB#4:                                 # %cond.true
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%r14, %rdx
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$8, %rdx
	je	.LBB24_8
# BB#5:                                 # %cond.true
	leaq	-21(%r14), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB24_8
# BB#6:                                 # %cond.true
	leaq	-45(%r14), %rdx
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jb	.LBB24_8
# BB#7:                                 # %cond.true
	leaq	-29(%r14), %rdx
	andq	%rcx, %rdx
	cmpq	$7, %rdx
	jbe	.LBB24_8
# BB#13:                                # %cond.false
	cmpq	$24, %rax
	jne	.LBB24_14
# BB#16:                                # %cond.true37
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB24_18
.LBB24_34:                              # %if.end107
	movzbl	rtx_length(%rdx), %r12d
	testq	%r12, %r12
	je	.LBB24_35
# BB#36:                                # %for.body117.lr.ph
	movq	rtx_format(,%rdx,8), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
.LBB24_37:                              # %for.body117
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_42 Depth 2
	movq	%r12, %r15
	movq	(%rsp), %rax            # 8-byte Reload
	movzbl	-1(%rax,%r15), %eax
	leaq	-1(%r15), %r12
	cmpq	$69, %rax
	jne	.LBB24_38
# BB#41:                                # %if.then123
                                        #   in Loop: Header=BB24_37 Depth=1
	movq	(%rbx,%r15,8), %rax
	movslq	(%rax), %r14
	.align	16, 0x90
.LBB24_42:                              # %for.cond128
                                        #   Parent Loop BB24_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB24_39
# BB#43:                                # %for.body131
                                        #   in Loop: Header=BB24_42 Depth=2
	movq	(%rbx,%r15,8), %rax
	movq	(%rax,%r14,8), %rdi
	decq	%r14
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	use_crosses_set_p
	testq	%r13, %rax
	movq	$1, %rcx
	je	.LBB24_42
	jmp	.LBB24_45
	.align	16, 0x90
.LBB24_38:                              # %for.body117
                                        #   in Loop: Header=BB24_37 Depth=1
	cmpq	$101, %rax
	jne	.LBB24_39
# BB#44:                                # %land.lhs.true149
                                        #   in Loop: Header=BB24_37 Depth=1
	movq	(%rbx,%r15,8), %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	use_crosses_set_p
	testq	%r13, %rax
	movq	$1, %rcx
	jne	.LBB24_45
.LBB24_39:                              # %for.cond114.backedge
                                        #   in Loop: Header=BB24_37 Depth=1
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB24_37
# BB#40:
	xorq	%rcx, %rcx
	jmp	.LBB24_45
.LBB24_35:
	xorq	%rcx, %rcx
	jmp	.LBB24_45
.LBB24_3:                               # %cond.end59.thread
	leaq	1(%r14), %rax
	jmp	.LBB24_20
.LBB24_8:                               # %cond.true15
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB24_18
# BB#9:                                 # %lor.rhs
	cmpq	$6, %rcx
	jne	.LBB24_10
# BB#11:                                # %lor.rhs
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB24_18
.LBB24_14:                              # %cond.false
	cmpq	$18, %rax
	jne	.LBB24_17
# BB#15:                                # %cond.true30
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB24_18
.LBB24_10:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB24_18
.LBB24_17:                              # %cond.false41
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
.LBB24_18:                              # %cond.end59
	addq	%r14, %rax
	cmpq	$7, %r14
	jne	.LBB24_20
# BB#19:                                # %land.lhs.true64
	movzbl	target_flags+1(%rip), %edx
	movq	$7, %r14
	movq	$1, %rcx
	testq	$24, %rdx
	je	.LBB24_45
.LBB24_20:                              # %for.cond.preheader
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rax
	cmpq	%rax, %r14
	jae	.LBB24_21
# BB#22:                                # %for.body.lr.ph
	movq	reg_last_set(%rip), %r10
	movl	max_uid_cuid(%rip), %r11d
	movq	uid_cuid(%rip), %r9
	movq	%r14, %r15
	.align	16, 0x90
.LBB24_23:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_26 Depth 2
	movq	(%r10,%r15,8), %rdx
	testq	%rdx, %rdx
	je	.LBB24_31
# BB#24:                                # %land.lhs.true76
                                        #   in Loop: Header=BB24_23 Depth=1
	movslq	8(%rdx), %rbx
	movq	$32, %rcx
	movq	%r11, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rbx
	jle	.LBB24_30
# BB#25:                                # %land.lhs.true2.i.lr.ph
                                        #   in Loop: Header=BB24_23 Depth=1
	leaq	8(%rdx), %rbx
	.align	16, 0x90
.LBB24_26:                              # %land.lhs.true2.i
                                        #   Parent Loop BB24_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rdx), %ecx
	cmpq	$32, %rcx
	jne	.LBB24_29
# BB#27:                                # %land.rhs.i
                                        #   in Loop: Header=BB24_26 Depth=2
	movq	32(%rdx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB24_29
# BB#28:                                # %while.body.i
                                        #   in Loop: Header=BB24_26 Depth=2
	movq	24(%rdx), %rdx
	leaq	8(%rdx), %rbx
	movslq	8(%rdx), %rdi
	movq	$32, %rcx
	movq	%r11, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rsi, %rdi
	jg	.LBB24_26
.LBB24_29:                              # %while.end.i
                                        #   in Loop: Header=BB24_23 Depth=1
	movslq	(%rbx), %rbx
	movq	$32, %rcx
	movq	%r11, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rdx, %rbx
	jg	.LBB24_46
.LBB24_30:                              # %cond.end94
                                        #   in Loop: Header=BB24_23 Depth=1
	movslq	(%r9,%rbx,4), %rdx
	movq	$32, %rcx
	movq	8(%rsp), %rsi           # 8-byte Reload
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rsi, %rdx
	movq	$1, %rcx
	jg	.LBB24_45
.LBB24_31:                              # %for.inc
                                        #   in Loop: Header=BB24_23 Depth=1
	incq	%r14
	movq	%r14, %rcx
	andq	%r8, %rcx
	incq	%r15
	cmpq	%rax, %rcx
	jb	.LBB24_23
# BB#32:
	xorq	%rcx, %rcx
	jmp	.LBB24_45
.LBB24_21:
	xorq	%rcx, %rcx
.LBB24_45:                              # %return
	movq	%rcx, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB24_46:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp345:
	.size	use_crosses_set_p, .Ltmp345-use_crosses_set_p
	.cfi_endproc

	.align	16, 0x90
	.type	find_split_point,@function
find_split_point:                       # @find_split_point
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp352:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp353:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp354:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp355:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp356:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp357:
	.cfi_def_cfa_offset 96
.Ltmp358:
	.cfi_offset %rbx, -48
.Ltmp359:
	.cfi_offset %r12, -40
.Ltmp360:
	.cfi_offset %r13, -32
.Ltmp361:
	.cfi_offset %r14, -24
.Ltmp362:
	.cfi_offset %r15, -16
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	%rdi, %r13
.LBB25_1:                               # %tailrecurse.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_2 Depth 2
	movq	%r13, %r15
	jmp	.LBB25_2
	.align	16, 0x90
.LBB25_59:                              # %tailrecurse
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	%rax, %rsi
	callq	do_SUBST
.LBB25_2:                               # %tailrecurse
                                        #   Parent Loop BB25_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r15), %r13
	movl	(%r13), %ebx
	movq	%rbx, %r14
	andq	$65535, %r14            # imm = 0xFFFF
	cmpq	$62, %r14
	jg	.LBB25_17
# BB#3:                                 # %tailrecurse
                                        #   in Loop: Header=BB25_2 Depth=2
	cmpq	$47, %r14
	jne	.LBB25_105
# BB#4:                                 # %sw.bb256
                                        #   in Loop: Header=BB25_2 Depth=2
	leaq	16(%r13), %r12
	movq	%r12, %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	find_split_point
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB25_6
# BB#5:                                 # %sw.bb256
                                        #   in Loop: Header=BB25_2 Depth=2
	cmpq	%r12, %rbx
	jne	.LBB25_97
.LBB25_6:                               # %if.end269
                                        #   in Loop: Header=BB25_2 Depth=2
	addq	$8, %r13
	movq	%r13, %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	find_split_point
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB25_8
# BB#7:                                 # %if.end269
                                        #   in Loop: Header=BB25_2 Depth=2
	cmpq	%r13, %rbx
	jne	.LBB25_97
.LBB25_8:                               # %if.end282
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	(%r13), %rcx
	movzbl	(%rcx), %eax
	cmpq	$133, %rax
	jne	.LBB25_46
# BB#9:                                 # %land.lhs.true290
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	8(%rcx), %rdi
	movzbl	2(%rdi), %eax
	movzbl	mode_bitsize(%rax,%rax), %eax
	cmpq	$64, %rax
	ja	.LBB25_46
# BB#10:                                # %land.lhs.true305
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	16(%rcx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$54, %rsi
	jne	.LBB25_46
# BB#11:                                # %land.lhs.true316
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	24(%rcx), %rcx
	movzbl	(%rcx), %esi
	cmpq	$54, %rsi
	jne	.LBB25_46
# BB#12:                                # %land.lhs.true327
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	(%r12), %rsi
	movzbl	(%rsi), %esi
	cmpq	$54, %rsi
	jne	.LBB25_46
# BB#13:                                # %land.lhs.true335
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	8(%rdx), %rdx
	movq	8(%rcx), %rcx
	addq	%rdx, %rcx
	cmpq	%rax, %rcx
	jg	.LBB25_46
# BB#14:                                # %land.lhs.true367
                                        #   in Loop: Header=BB25_2 Depth=2
	callq	side_effects_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB25_46
# BB#15:                                # %if.then376
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	(%r13), %rax
	movq	24(%rax), %rcx
	movq	16(%rax), %rdx
	movq	8(%rcx), %r8
	movq	(%r12), %rsi
	movq	8(%rax), %r14
	movq	8(%rdx), %rcx
	movq	8(%rsi), %rbx
	movq	$1, %rax
	movzbl	2(%r14), %edx
	shlq	%cl, %rax
	decq	%rax
	cmpq	%rax, %rbx
	jne	.LBB25_43
# BB#16:                                # %if.then414
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	%r8, %rcx
	shlq	%cl, %rbx
	xorq	%rdi, %rdi
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rsi
	callq	gen_rtx_CONST_INT
	movq	$84, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	%r14, %rdx
	jmp	.LBB25_44
	.align	16, 0x90
.LBB25_17:                              # %tailrecurse
                                        #   in Loop: Header=BB25_2 Depth=2
	leaq	-83(%r14), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$2, %rax
	jae	.LBB25_18
# BB#98:                                # %sw.bb953
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	16(%r13), %rsi
	movq	8(%r13), %r12
	movl	(%rsi), %eax
	movzbl	(%r12), %ecx
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rcx
	jne	.LBB25_103
# BB#99:                                # %sw.bb953
                                        #   in Loop: Header=BB25_2 Depth=2
	cmpq	$86, %rax
	jne	.LBB25_103
# BB#100:                               # %if.then969
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	cmpq	$84, %r14
	movabsq	$0, %rdi
	jne	.LBB25_102
# BB#101:                               # %if.then969
                                        #   in Loop: Header=BB25_2 Depth=2
	movabsq	$1, %rdi
.LBB25_102:                             # %if.then969
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	8(%r12), %rdx
	movq	8(%rsi), %rcx
	xorq	$1, %rdi
	addq	$83, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_fmt_ee
	movq	$86, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%r15, %rdi
	jmp	.LBB25_59
.LBB25_43:                              # %if.else421
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	mode_mask_array(,%rdx,8), %rdi
	movq	%r8, %rcx
	shlq	%cl, %rax
	notq	%rax
	andq	%rax, %rdi
	movq	%r14, 32(%rsp)          # 8-byte Spill
	movq	%rdx, %r14
	movq	%r14, %rsi
	movq	%r8, 24(%rsp)           # 8-byte Spill
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$83, %rdi
	movq	%r14, %rsi
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	24(%rsp), %rcx          # 8-byte Reload
	shlq	%cl, %rbx
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_CONST_INT
	movq	$84, %rdi
	movq	%r14, %rsi
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
.LBB25_44:                              # %if.end434
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	%rax, %rcx
	callq	gen_binary
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%r13, %rdi
	movq	%r14, %rsi
	callq	do_SUBST
	movq	%r12, %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	find_split_point
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB25_46
# BB#45:                                # %if.end434
                                        #   in Loop: Header=BB25_2 Depth=2
	cmpq	%r12, %rbx
	jne	.LBB25_97
	.align	16, 0x90
.LBB25_46:                              # %if.end451
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	(%r12), %rax
	movl	(%rax), %ebx
	movq	%rbx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	je	.LBB25_60
# BB#47:                                # %if.end451
                                        #   in Loop: Header=BB25_2 Depth=2
	leaq	-132(%rcx), %rdx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rdx
	cmpq	$2, %rdx
	jb	.LBB25_63
# BB#48:                                # %if.end451
                                        #   in Loop: Header=BB25_2 Depth=2
	cmpq	$83, %rcx
	jne	.LBB25_77
# BB#49:                                # %sw.bb457
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB25_77
# BB#50:                                # %land.lhs.true468
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB25_77
# BB#51:                                # %land.lhs.true479
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	8(%rcx), %rdi
	callq	exact_log2_wide
	movq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	$7, %rbx
	jl	.LBB25_77
# BB#52:                                # %land.lhs.true493
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	(%r13), %rdi
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	jne	.LBB25_77
# BB#53:                                # %land.lhs.true501
                                        #   in Loop: Header=BB25_2 Depth=2
	xorq	%rdx, %rdx
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	find_single_use
	testq	%rax, %rax
	je	.LBB25_77
# BB#54:                                # %land.lhs.true508
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	(%rax), %rax
	movl	(%rax), %ecx
	andq	$65534, %rcx            # imm = 0xFFFE
	cmpq	$102, %rcx
	jne	.LBB25_77
# BB#55:                                # %land.lhs.true517
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	8(%rax), %rcx
	movq	(%r13), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB25_77
# BB#56:                                # %land.lhs.true526
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	16(%rax), %rax
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rax
	jne	.LBB25_77
# BB#57:                                # %if.then532
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	(%r12), %rax
	movq	8(%rax), %rsi
	movzbl	2(%rcx), %edi
	movq	$0, 8(%rsp)
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%rbx, %rdx
	callq	make_extraction
	testq	%rax, %rax
	je	.LBB25_77
# BB#58:                                # %if.then548
                                        #   in Loop: Header=BB25_2 Depth=2
	movq	%r12, %rdi
	jmp	.LBB25_59
.LBB25_18:                              # %tailrecurse
                                        #   in Loop: Header=BB25_1 Depth=1
	cmpq	$66, %r14
	je	.LBB25_21
# BB#19:                                # %tailrecurse
                                        #   in Loop: Header=BB25_1 Depth=1
	cmpq	$63, %r14
	jne	.LBB25_105
# BB#20:                                # %sw.bb
                                        #   in Loop: Header=BB25_1 Depth=1
	movq	8(%r13), %rax
	movzbl	(%rax), %eax
	addq	$8, %r13
	cmpq	$66, %rax
	movq	%r15, %rbx
	jne	.LBB25_1
	jmp	.LBB25_97
.LBB25_103:                             # %if.end994
	cmpq	$86, %rax
	jne	.LBB25_105
# BB#104:                               # %if.then1002
	leaq	8(%r13), %rdi
	leaq	16(%r13), %rbx
	callq	do_SUBST
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	do_SUBST
	jmp	.LBB25_105
.LBB25_63:                              # %sw.bb589
	movq	16(%rax), %rdx
	movzbl	(%rdx), %esi
	cmpq	$54, %rsi
	jne	.LBB25_77
# BB#64:                                # %land.lhs.true600
	movq	24(%rax), %rdi
	movzbl	(%rdi), %esi
	cmpq	$54, %rsi
	jne	.LBB25_77
# BB#65:                                # %if.then611
	movq	8(%rax), %rsi
	movq	8(%rdx), %r15
	movq	8(%rdi), %r13
	cmpq	$133, %rcx
	jne	.LBB25_66
# BB#67:                                # %if.then611
	movabsq	$1, %rdx
	jmp	.LBB25_68
.LBB25_21:                              # %sw.bb6
	movq	8(%r13), %rsi
	movzbl	(%rsi), %eax
	cmpq	$75, %rax
	movq	$66, %r14
	jne	.LBB25_105
# BB#22:                                # %land.lhs.true
	movq	16(%rsi), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB25_105
# BB#23:                                # %land.lhs.true22
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movq	%rbx, %rdi
	callq	memory_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB25_105
# BB#24:                                # %if.then29
	movq	cfun(%rip), %rax
	movq	24(%rax), %rax
	movq	80(%rax), %rax
	leaq	8(%r13), %r12
	movq	424(%rax), %rdx
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	(%r12), %rcx
	movq	$47, %rdi
	xorq	%rsi, %rsi
	callq	gen_rtx_fmt_ee
	movq	subst_insn(%rip), %rsi
	movq	%rax, %rdi
	callq	split_insns
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB25_40
# BB#25:                                # %land.lhs.true37
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB25_40
# BB#26:                                # %land.lhs.true41
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$32, %rcx
	jne	.LBB25_40
# BB#27:                                # %land.lhs.true49
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB25_40
# BB#28:                                # %land.lhs.true61
	movq	8(%rax), %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rcx
	jne	.LBB25_40
# BB#29:                                # %land.lhs.true74
	movq	16(%rax), %rsi
	movq	32(%rsp), %rdi          # 8-byte Reload
	callq	reg_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB25_40
# BB#30:                                # %land.lhs.true88
	movq	8(%rbx), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$32, %rcx
	jne	.LBB25_40
# BB#31:                                # %land.lhs.true97
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB25_40
# BB#32:                                # %land.lhs.true109
	movq	8(%rax), %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rcx
	jne	.LBB25_40
# BB#33:                                # %land.lhs.true122
	movq	16(%rax), %rax
	movzbl	2(%r13), %ecx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	memory_address_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB25_40
# BB#34:                                # %if.then139
	movq	8(%rbx), %rax
	movq	8(%rax), %rcx
	movq	16(%rax), %rax
	movq	32(%rcx), %rcx
	movq	32(%rax), %rax
	movq	16(%rcx), %rcx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	16(%rax), %rax
	movq	%rax, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	callq	replace_rtx
	movq	8(%rax), %rbx
	movq	24(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rbx
	movq	24(%rsp), %rdx          # 8-byte Reload
	je	.LBB25_35
# BB#36:                                # %if.else
	movzbl	(%rbx), %ecx
	movq	rtx_format(,%rcx,8), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$101, %rcx
	jne	.LBB25_105
# BB#37:                                # %land.lhs.true180
	movq	8(%rbx), %rcx
	cmpq	%rdx, %rcx
	jne	.LBB25_105
	jmp	.LBB25_38
.LBB25_60:                              # %sw.bb556
	movq	8(%rax), %rsi
	movzbl	2(%rsi), %eax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$3, %rcx
	je	.LBB25_77
# BB#61:                                # %lor.lhs.false570
	movq	$14, %rcx
	movq	%rbx, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$3, %rcx
	je	.LBB25_77
# BB#62:                                # %if.end582
	movzbl	mode_bitsize(%rax,%rax), %r15d
	xorq	%rdx, %rdx
	xorq	%r13, %r13
	jmp	.LBB25_68
.LBB25_66:
	movabsq	$0, %rdx
.LBB25_68:                              # %sw.epilog
	testq	%r15, %r15
	je	.LBB25_77
# BB#69:                                # %sw.epilog
	testq	%r13, %r13
	js	.LBB25_77
# BB#70:                                # %land.lhs.true643
	movzbl	2(%rsi), %eax
	movzbl	mode_bitsize(%rax,%rax), %eax
	leaq	(%r15,%r13), %r14
	cmpq	%rax, %r14
	ja	.LBB25_77
# BB#71:                                # %if.then653
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	testq	%rdx, %rdx
	je	.LBB25_74
# BB#72:                                # %if.then653
	cmpq	$8, %r15
	ja	.LBB25_74
# BB#73:                                # %if.then665
	movq	%rbx, %rdi
	callq	gen_lowpart_for_combine
	movq	%rax, %r14
	xorq	%rdi, %rdi
	movq	%r13, %rsi
	callq	gen_rtx_CONST_INT
	movq	$90, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %r13
	movq	$1, %rsi
	movq	%r15, %rcx
	shlq	%cl, %rsi
	decq	%rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$83, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	jmp	.LBB25_75
.LBB25_40:                              # %if.else204
	movq	(%r12), %rbx
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %edx
	cmpq	$111, %rdx
	je	.LBB25_105
# BB#41:                                # %land.lhs.true218
	addq	$8, %rbx
	cmpq	$63, %rcx
	jne	.LBB25_97
# BB#42:                                # %land.lhs.true229
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	jne	.LBB25_97
	jmp	.LBB25_105
.LBB25_74:                              # %if.else689
	addq	$89, %rdx
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	gen_lowpart_for_combine
	movzbl	mode_bitsize(%rbx,%rbx), %r13d
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r13, %rsi
	subq	%r14, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$87, %rdi
	movq	%rbx, %rsi
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %r14
	subq	%r15, %r13
	xorq	%rdi, %rdi
	movq	%r13, %rsi
	callq	gen_rtx_CONST_INT
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r14, %rdx
.LBB25_75:                              # %if.else689
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%r12, %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	find_split_point
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB25_77
# BB#76:                                # %if.else689
	cmpq	%r12, %rbx
	jne	.LBB25_97
.LBB25_77:                              # %if.end722
	movq	(%r12), %rdx
	movzbl	(%rdx), %eax
	movsbq	rtx_class(%rax), %rax
	movq	%rax, %rcx
	andq	$255, %rcx
	cmpq	$98, %rax
	jg	.LBB25_82
# BB#78:                                # %if.end722
	cmpq	$49, %rcx
	je	.LBB25_95
# BB#79:                                # %if.end722
	cmpq	$50, %rcx
	je	.LBB25_84
# BB#80:                                # %if.end722
	cmpq	$60, %rcx
	je	.LBB25_84
# BB#81:
	xorq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB25_116
.LBB25_82:                              # %if.end722
	cmpq	$99, %rcx
	jne	.LBB25_83
.LBB25_84:                              # %land.lhs.true755
	movq	16(%rdx), %rcx
	movzbl	(%rcx), %ecx
	leaq	16(%rdx), %rbx
	cmpq	$133, %rcx
	jg	.LBB25_87
# BB#85:                                # %land.lhs.true755
	addq	$-54, %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	$14, %rcx
	ja	.LBB25_92
# BB#86:                                # %land.lhs.true755
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$24599, %rsi            # imm = 0x6017
	jne	.LBB25_89
	jmp	.LBB25_92
.LBB25_83:
	xorq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB25_116
.LBB25_87:                              # %land.lhs.true755
	cmpq	$134, %rcx
	je	.LBB25_89
# BB#88:                                # %land.lhs.true755
	cmpq	$140, %rcx
	jne	.LBB25_92
.LBB25_89:                              # %land.lhs.true843
	movq	8(%rdx), %rcx
	movzbl	(%rcx), %esi
	movzbl	rtx_class(%rsi), %edi
	cmpq	$111, %rdi
	je	.LBB25_97
# BB#90:                                # %lor.lhs.false857
	cmpq	$63, %rsi
	jne	.LBB25_92
# BB#91:                                # %land.lhs.true868
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$111, %rcx
	je	.LBB25_97
.LBB25_92:                              # %if.end892
	addq	$-49, %rax
	andq	$255, %rax
	cmpq	$50, %rax
	jbe	.LBB25_94
# BB#93:
	xorq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB25_116
.LBB25_94:                              # %if.end892
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$1125899906844675, %rax # imm = 0x4000000000803
	testq	%rax, %rsi
	movabsq	$0, %rbx
	je	.LBB25_97
.LBB25_95:                              # %land.lhs.true936
	movq	8(%rdx), %rdi
	xorq	%rsi, %rsi
	xorq	%rbx, %rbx
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB25_97
# BB#96:                                # %if.then945
	movq	(%r12), %rbx
	addq	$8, %rbx
	jmp	.LBB25_97
.LBB25_35:
	movq	%rax, %rbx
.LBB25_38:
	addq	$8, %rbx
	testq	%rbx, %rbx
	je	.LBB25_105
# BB#39:                                # %if.then199
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%rbx, %rax
	jmp	.LBB25_116
.LBB25_105:                             # %sw.epilog1017
	movsbq	rtx_class(%r14), %rcx
	xorq	%rbx, %rbx
	addq	$-49, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$50, %rcx
	ja	.LBB25_97
# BB#106:                               # %sw.epilog1017
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$1125899906844674, %rsi # imm = 0x4000000000802
	testq	%rsi, %rdx
	jne	.LBB25_110
# BB#107:                               # %sw.epilog1017
	shlq	%cl, %rax
	movabsq	$562949953421316, %rdx  # imm = 0x2000000000004
	testq	%rdx, %rax
	je	.LBB25_108
# BB#109:                               # %sw.bb1021
	leaq	24(%r13), %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	find_split_point
	movq	%rax, %rbx
	testq	%rbx, %rbx
	jne	.LBB25_97
.LBB25_110:                             # %sw.bb1029
	leaq	16(%r13), %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	find_split_point
	movq	%rax, %rbx
	testq	%rbx, %rbx
	jne	.LBB25_97
	jmp	.LBB25_111
.LBB25_108:                             # %sw.epilog1017
	testq	%rcx, %rcx
	jne	.LBB25_97
.LBB25_111:                             # %sw.bb1037
	movzbl	(%r13), %eax
	addq	$8, %r13
	cmpq	$83, %rax
	je	.LBB25_113
# BB#112:                               # %land.lhs.true1042
	movq	(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$83, %rax
	movq	%r13, %rbx
	jne	.LBB25_113
.LBB25_97:                              # %return
	movq	%rbx, %rax
.LBB25_116:                             # %if.end1054
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB25_113:                             # %if.end1054
	movq	%r13, %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	find_split_point
	testq	%rax, %rax
	je	.LBB25_115
# BB#114:                               # %if.end1054
	movq	%rax, %r15
.LBB25_115:                             # %if.end1054
	movq	%r15, %rax
	jmp	.LBB25_116
.Ltmp363:
	.size	find_split_point, .Ltmp363-find_split_point
	.cfi_endproc

	.align	16, 0x90
	.type	distribute_links,@function
distribute_links:                       # @distribute_links
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp370:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp371:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp372:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp373:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp374:
	.cfi_def_cfa_offset 48
.Ltmp375:
	.cfi_offset %rbx, -48
.Ltmp376:
	.cfi_offset %r12, -40
.Ltmp377:
	.cfi_offset %r13, -32
.Ltmp378:
	.cfi_offset %r14, -24
.Ltmp379:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	testq	%r14, %r14
	je	.LBB26_22
# BB#1:
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB26_2:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_7 Depth 2
                                        #     Child Loop BB26_10 Depth 2
                                        #     Child Loop BB26_25 Depth 2
                                        #     Child Loop BB26_31 Depth 2
                                        #     Child Loop BB26_37 Depth 2
	movq	%r14, %r13
	movq	8(%r13), %rdi
	movzbl	(%rdi), %eax
	movq	16(%r13), %r14
	cmpq	$37, %rax
	je	.LBB26_21
# BB#3:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB26_2 Depth=1
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB26_21
# BB#4:                                 # %cond.true
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	32(%rdi), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	je	.LBB26_6
# BB#5:                                 # %cond.false
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%rbx, %rsi
	callq	single_set_2
	movq	%rax, %rbx
.LBB26_6:                               # %cond.end39
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%rbx, %rbx
	je	.LBB26_21
	.align	16, 0x90
.LBB26_7:                               # %while.cond
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbx), %rbx
	movzbl	(%rbx), %eax
	leaq	-63(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$2, %rcx
	jb	.LBB26_7
# BB#8:                                 # %while.cond
                                        #   in Loop: Header=BB26_7 Depth=2
	addq	$-132, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jb	.LBB26_7
# BB#9:                                 # %while.end
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	8(%r13), %rax
	movq	24(%rax), %r15
	jmp	.LBB26_10
	.align	16, 0x90
.LBB26_18:                              # %for.cond73.backedge
                                        #   in Loop: Header=BB26_10 Depth=2
	movq	24(%r15), %r15
.LBB26_10:                              # %while.end
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testq	%r15, %r15
	je	.LBB26_21
# BB#11:                                # %land.rhs
                                        #   in Loop: Header=BB26_10 Depth=2
	movl	n_basic_blocks(%rip), %ecx
	movl	this_basic_block(%rip), %eax
	decq	%rcx
	andq	%r12, %rcx
	cmpq	%rcx, %rax
	je	.LBB26_13
# BB#12:                                # %lor.rhs77
                                        #   in Loop: Header=BB26_10 Depth=2
	incq	%rax
	movq	$32, %rcx
	movq	basic_block_info(%rip), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	32(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	cmpq	%r15, %rax
	je	.LBB26_21
.LBB26_13:                              # %for.body83
                                        #   in Loop: Header=BB26_10 Depth=2
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$105, %rcx
	jne	.LBB26_16
# BB#14:                                # %land.lhs.true
                                        #   in Loop: Header=BB26_10 Depth=2
	movq	32(%r15), %rsi
	movq	%rbx, %rdi
	callq	reg_overlap_mentioned_p
	testq	%r12, %rax
	jne	.LBB26_19
# BB#15:                                # %land.lhs.true.if.else_crit_edge
                                        #   in Loop: Header=BB26_10 Depth=2
	movl	(%r15), %eax
.LBB26_16:                              # %if.else
                                        #   in Loop: Header=BB26_10 Depth=2
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$34, %rax
	jne	.LBB26_18
# BB#17:                                # %land.lhs.true108
                                        #   in Loop: Header=BB26_10 Depth=2
	movq	$48, %rsi
	movq	%r15, %rdi
	movq	%rbx, %rdx
	callq	find_reg_fusage
	testq	%r12, %rax
	je	.LBB26_18
	jmp	.LBB26_20
.LBB26_19:                              # %if.then96
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	32(%r15), %rsi
	movq	%rbx, %rdi
	callq	reg_referenced_p
	testq	%r12, %rax
	je	.LBB26_21
.LBB26_20:                              # %for.end
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%r15, %r15
	je	.LBB26_21
# BB#23:                                # %if.then118
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	48(%r15), %rax
	testq	%rax, %rax
	je	.LBB26_28
# BB#24:                                # %for.body124.lr.ph
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	8(%r13), %rdx
	movq	%rax, %rcx
	.align	16, 0x90
.LBB26_25:                              # %for.body124
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rsi
	cmpq	%rdx, %rsi
	je	.LBB26_27
# BB#26:                                # %for.inc135
                                        #   in Loop: Header=BB26_25 Depth=2
	movq	16(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB26_25
	jmp	.LBB26_28
.LBB26_27:                              # %for.end139
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%rcx, %rcx
	jne	.LBB26_21
.LBB26_28:                              # %if.then142
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%rax, 16(%r13)
	movq	%r13, 48(%r15)
	movq	added_links_insn(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB26_42
# BB#29:                                # %lor.lhs.false154
                                        #   in Loop: Header=BB26_2 Depth=1
	movslq	8(%rcx), %rdx
	movslq	max_uid_cuid(%rip), %rax
	cmpq	%rax, %rdx
	jle	.LBB26_35
# BB#30:                                # %land.lhs.true2.i.lr.ph
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	8(%rcx), %rdx
.LBB26_31:                              # %land.lhs.true2.i
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rcx), %esi
	cmpq	$32, %rsi
	jne	.LBB26_34
# BB#32:                                # %land.rhs.i
                                        #   in Loop: Header=BB26_31 Depth=2
	movq	32(%rcx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB26_34
# BB#33:                                # %while.body.i
                                        #   in Loop: Header=BB26_31 Depth=2
	movq	24(%rcx), %rcx
	movslq	8(%rcx), %rsi
	leaq	8(%rcx), %rdx
	cmpq	%rax, %rsi
	jg	.LBB26_31
.LBB26_34:                              # %while.end.i
                                        #   in Loop: Header=BB26_2 Depth=1
	movslq	(%rdx), %rdx
	cmpq	%rax, %rdx
	jg	.LBB26_43
.LBB26_35:                              # %cond.false161
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	uid_cuid(%rip), %rcx
	leaq	(%rcx,%rdx,4), %rdx
	movslq	8(%r15), %rsi
	movl	(%rdx), %edx
	cmpq	%rax, %rsi
	jle	.LBB26_41
# BB#36:                                # %land.lhs.true2.i240.lr.ph
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	8(%r15), %rsi
	movq	%r15, %rdi
.LBB26_37:                              # %land.lhs.true2.i240
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rdi), %ebx
	cmpq	$32, %rbx
	jne	.LBB26_40
# BB#38:                                # %land.rhs.i246
                                        #   in Loop: Header=BB26_37 Depth=2
	movq	32(%rdi), %rbx
	movzbl	(%rbx), %ebx
	cmpq	$48, %rbx
	jne	.LBB26_40
# BB#39:                                # %while.body.i249
                                        #   in Loop: Header=BB26_37 Depth=2
	movq	24(%rdi), %rdi
	movslq	8(%rdi), %rbx
	leaq	8(%rdi), %rsi
	cmpq	%rax, %rbx
	jg	.LBB26_37
.LBB26_40:                              # %while.end.i253
                                        #   in Loop: Header=BB26_2 Depth=1
	movslq	(%rsi), %rsi
	cmpq	%rax, %rsi
	jg	.LBB26_43
.LBB26_41:                              # %cond.end182
                                        #   in Loop: Header=BB26_2 Depth=1
	movslq	(%rcx,%rsi,4), %rax
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jle	.LBB26_21
.LBB26_42:                              # %if.then186
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r15, added_links_insn(%rip)
	.align	16, 0x90
.LBB26_21:                              # %for.cond.backedge
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%r14, %r14
	jne	.LBB26_2
.LBB26_22:                              # %for.end191
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB26_43:                              # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp380:
	.size	distribute_links, .Ltmp380-distribute_links
	.cfi_endproc

	.align	16, 0x90
	.type	contains_muldiv,@function
contains_muldiv:                        # @contains_muldiv
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp384:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp385:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp386:
	.cfi_def_cfa_offset 32
.Ltmp387:
	.cfi_offset %rbx, -24
.Ltmp388:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	jmp	.LBB27_1
.LBB27_16:                              # %sw.bb23
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	8(%rbx), %rbx
	.align	16, 0x90
.LBB27_1:                               # %tailrecurse
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %ecx
	movq	$1, %rax
	leaq	-79(%rcx), %rdx
	andq	%r14, %rdx
	cmpq	$4, %rdx
	jb	.LBB27_15
# BB#2:                                 # %tailrecurse
                                        #   in Loop: Header=BB27_1 Depth=1
	cmpq	$78, %rcx
	je	.LBB27_3
# BB#6:                                 # %sw.default
                                        #   in Loop: Header=BB27_1 Depth=1
	movsbq	rtx_class(%rcx), %rcx
	xorq	%rax, %rax
	cmpq	$98, %rcx
	jg	.LBB27_10
# BB#7:                                 # %sw.default
                                        #   in Loop: Header=BB27_1 Depth=1
	andq	%r14, %rcx
	cmpq	$49, %rcx
	je	.LBB27_16
# BB#8:                                 # %sw.default
	cmpq	$50, %rcx
	je	.LBB27_11
# BB#9:                                 # %sw.default
	cmpq	$60, %rcx
	je	.LBB27_11
	jmp	.LBB27_15
.LBB27_10:                              # %sw.default
	andq	%r14, %rcx
	cmpq	$99, %rcx
	jne	.LBB27_15
.LBB27_11:                              # %sw.bb13
	movq	8(%rbx), %rdi
	callq	contains_muldiv
	testq	%r14, %rax
	movq	$1, %rax
	jne	.LBB27_15
# BB#12:                                # %lor.rhs
	movq	16(%rbx), %rdi
	callq	contains_muldiv
	testq	%r14, %rax
	jne	.LBB27_14
# BB#13:
	movabsq	$0, %rax
	jmp	.LBB27_15
.LBB27_3:                               # %sw.bb1
	movq	16(%rbx), %rcx
	movzbl	(%rcx), %eax
	cmpq	$54, %rax
	movq	$1, %rax
	jne	.LBB27_15
# BB#4:                                 # %land.rhs
	movq	8(%rcx), %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB27_5
.LBB27_14:                              # %lor.rhs
	movabsq	$1, %rax
.LBB27_15:                              # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB27_5:
	movabsq	$0, %rax
	jmp	.LBB27_15
.Ltmp389:
	.size	contains_muldiv, .Ltmp389-contains_muldiv
	.cfi_endproc

	.align	16, 0x90
	.type	distribute_notes,@function
distribute_notes:                       # @distribute_notes
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp396:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp397:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp398:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp399:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp400:
	.cfi_def_cfa_offset 48
	subq	$112, %rsp
.Ltmp401:
	.cfi_def_cfa_offset 160
.Ltmp402:
	.cfi_offset %rbx, -48
.Ltmp403:
	.cfi_offset %r12, -40
.Ltmp404:
	.cfi_offset %r13, -32
.Ltmp405:
	.cfi_offset %r14, -24
.Ltmp406:
	.cfi_offset %r15, -16
	movq	%r9, 64(%rsp)           # 8-byte Spill
	movq	%r8, 72(%rsp)           # 8-byte Spill
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%rdx, %r10
	movq	%r10, 80(%rsp)          # 8-byte Spill
	movq	%rsi, 88(%rsp)          # 8-byte Spill
	movq	%rdi, %r14
	testq	%r14, %r14
	je	.LBB28_259
# BB#1:                                 # %for.body.lr.ph
	movq	%rcx, %rdx
	testq	%rdx, %rdx
	movabsq	$0, %rax
	movabsq	$1, %rcx
	jne	.LBB28_3
# BB#2:                                 # %for.body.lr.ph
	movq	%rcx, %rax
.LBB28_3:                               # %for.body.lr.ph
	movq	%rax, 56(%rsp)          # 8-byte Spill
	leaq	8(%rdx), %rax
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	88(%rsp), %rax          # 8-byte Reload
	leaq	8(%rax), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	jmp	.LBB28_4
	.align	16, 0x90
.LBB28_10:                              # %if.end
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	16(%r14), %r12
	movq	%r12, 104(%rsp)         # 8-byte Spill
	xorq	%r13, %r13
	movq	%r10, %r15
	jmpq	*.LJTI28_0(,%rcx,8)
.LBB28_48:                              # %sw.bb156
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	%r10, 88(%rsp)          # 8-byte Folded Reload
	jne	.LBB28_135
# BB#49:                                # %land.lhs.true158
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%rax, %rax
	jne	.LBB28_51
# BB#50:                                #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %r15
	jmp	.LBB28_255
.LBB28_56:                              # %sw.bb220
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	32(%r10), %rsi
	movq	%r10, %rbx
	movq	%r8, %r12
	movq	%rax, %rdi
	callq	reg_mentioned_p
	movq	%rax, %r15
	andq	%r12, %r15
	je	.LBB28_58
# BB#57:                                # %sw.bb220
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r15
.LBB28_58:                              # %sw.bb220
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	jne	.LBB28_60
# BB#59:                                #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	movq	%r12, %r8
	movq	104(%rsp), %r12         # 8-byte Reload
	jmp	.LBB28_255
.LBB28_29:                              # %sw.bb71
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%r10), %eax
	xorq	%r13, %r13
	cmpq	$34, %rax
	jne	.LBB28_31
# BB#30:                                #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %r15
	jmp	.LBB28_256
.LBB28_111:                             # %sw.bb441
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	88(%rsp), %r15          # 8-byte Reload
	testq	%r15, %r15
	je	.LBB28_115
# BB#112:                               # %land.lhs.true443
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%r15), %ecx
	cmpq	$34, %rcx
	jne	.LBB28_115
# BB#113:                               # %land.lhs.true447
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %rbx
	movq	$48, %rsi
	movq	%r15, %rdi
	movq	%rax, %rdx
	callq	find_reg_fusage
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB28_122
# BB#114:                               # %land.lhs.true447.if.else454_crit_edge
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rax
	movq	%rbx, %r10
.LBB28_115:                             # %if.else454
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	32(%r10), %rsi
	movq	%rax, %rdi
	movq	%r10, %rbx
	callq	reg_referenced_p
	movq	%rbx, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rax
	movq	%rcx, %r15
	jne	.LBB28_117
# BB#116:                               # %if.else454
                                        #   in Loop: Header=BB28_4 Depth=1
	xorq	%r15, %r15
.LBB28_117:                             # %if.else454
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rcx, %rbx
	testq	%rax, %rax
	jne	.LBB28_122
# BB#118:                               # %if.else454
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$0, 96(%rsp)            # 8-byte Folded Reload
	je	.LBB28_122
# BB#119:                               # %land.lhs.true466
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %rdi          # 8-byte Reload
	callq	next_nonnote_insn
	xorq	%r15, %r15
	cmpq	%rbx, %rax
	jne	.LBB28_122
# BB#120:                               # %land.lhs.true469
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rdi
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	32(%rax), %rsi
	callq	reg_referenced_p
	movq	%rax, %r15
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r15
	je	.LBB28_122
# BB#121:                               # %land.lhs.true469
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %r15          # 8-byte Reload
.LBB28_122:                             # %if.end481
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rdi
	movq	72(%rsp), %rsi          # 8-byte Reload
	callq	rtx_equal_p
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	testq	%r8, %rax
	jne	.LBB28_123
# BB#124:                               # %lor.lhs.false487
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r12, 104(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movq	8(%r14), %rdi
	movq	64(%rsp), %rsi          # 8-byte Reload
	callq	rtx_equal_p
	movq	%r12, %r8
	testq	%r8, %rax
	jne	.LBB28_125
# BB#126:                               # %if.end494
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	movq	%rbx, %r10
	movq	104(%rsp), %r12         # 8-byte Reload
	jne	.LBB28_187
# BB#127:                               # %if.then496
                                        #   in Loop: Header=BB28_4 Depth=1
	movslq	this_basic_block(%rip), %rax
	movq	basic_block_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rcx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r10, %rbx
	jmp	.LBB28_128
.LBB28_103:                             # %sw.bb387
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	88(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx), %ecx
	xorq	%r13, %r13
	cmpq	$37, %rcx
	movq	%rdx, %r15
	jne	.LBB28_256
# BB#104:                               # %if.else392
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$7, %rsi
	xorq	%rdx, %rdx
	movq	%rax, %rdi
	callq	find_reg_note
	movq	%rax, %rbx
	movq	88(%rsp), %rdi          # 8-byte Reload
	callq	prev_real_insn
	jmp	.LBB28_105
.LBB28_108:                             # %sw.bb414
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	88(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx), %ecx
	xorq	%r13, %r13
	cmpq	$37, %rcx
	movq	%rdx, %r15
	jne	.LBB28_256
# BB#109:                               # %if.else419
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$6, %rsi
	xorq	%rdx, %rdx
	movq	%rax, %rdi
	callq	find_reg_note
	movq	%rax, %rbx
	movq	88(%rsp), %rdi          # 8-byte Reload
	callq	next_real_insn
.LBB28_105:                             # %if.else392
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rax, %r15
	testq	%rbx, %rbx
	je	.LBB28_110
# BB#106:                               # %if.else392
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	je	.LBB28_110
# BB#107:                               # %if.then401
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r15, 8(%rbx)
	xorq	%r13, %r13
	movq	80(%rsp), %r10          # 8-byte Reload
	jmp	.LBB28_45
.LBB28_34:                              # %sw.bb86
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	32(%r10), %rsi
	movq	%r8, %r15
	movq	%rax, %rdi
	movq	%r10, %rbx
	callq	reg_set_p
	movq	%r15, %r8
	testq	%r8, %rax
	jne	.LBB28_35
# BB#40:                                # %if.else120
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r8, %r15
	movq	8(%r14), %rdi
	movq	32(%rbx), %rsi
	callq	reg_referenced_p
	movq	%r15, %r8
	testq	%r8, %rax
	je	.LBB28_195
# BB#41:                                # %land.lhs.true129
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rdx
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB28_46
# BB#42:                                # %cond.true136
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	8(%rdx), %edx
	movq	$1, %rsi
	movq	%rbx, %rdi
	callq	find_regno_note
	jmp	.LBB28_43
.LBB28_66:                              # %sw.bb247
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	32(%r10), %rsi
	movq	%r8, %r15
	movq	%rax, %rdi
	movq	%r10, %rbx
	callq	reg_mentioned_p
	movq	%rbx, %r10
	testq	%r15, %rax
	jne	.LBB28_72
# BB#67:                                # %lor.lhs.false256
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$4, %rsi
	xorq	%rdx, %rdx
	xorq	%r15, %r15
	movq	%r10, %rdi
	movq	%r10, %rbx
	callq	find_reg_note
	testq	%rax, %rax
	jne	.LBB28_69
# BB#68:                                #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	jmp	.LBB28_73
.LBB28_17:                              # %sw.bb42
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%r10), %eax
	xorq	%r13, %r13
	cmpq	$34, %rax
	jne	.LBB28_19
# BB#18:                                #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %r15
	jmp	.LBB28_256
.LBB28_11:                              # %sw.bb28
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%r10), %eax
	xorq	%r13, %r13
	cmpq	$33, %rax
	jne	.LBB28_13
# BB#12:                                #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %r15
	jmp	.LBB28_256
.LBB28_60:                              # %land.lhs.true232
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rdi
	movq	32(%rax), %rsi
	callq	reg_mentioned_p
	movq	%r12, %r8
	testq	%r8, %rax
	jne	.LBB28_61
.LBB28_125:                             #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	movq	104(%rsp), %r12         # 8-byte Reload
	jmp	.LBB28_255
.LBB28_31:                              # %if.else76
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$0, 96(%rsp)            # 8-byte Folded Reload
	je	.LBB28_33
# BB#32:                                # %land.lhs.true78
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %rcx          # 8-byte Reload
	movzbl	(%rcx), %eax
	cmpq	$34, %rax
	movq	%rcx, %r15
	je	.LBB28_256
	jmp	.LBB28_33
.LBB28_51:                              # %lor.lhs.false
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$133, %rcx
	jg	.LBB28_54
# BB#52:                                # %lor.lhs.false
                                        #   in Loop: Header=BB28_4 Depth=1
	addq	$-54, %rcx
	andq	%r8, %rcx
	cmpq	$14, %rcx
	ja	.LBB28_135
# BB#53:                                # %lor.lhs.false
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	movq	%r10, %r15
	jne	.LBB28_255
	jmp	.LBB28_135
.LBB28_35:                              # %if.then95
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	%rbx, 88(%rsp)          # 8-byte Folded Reload
	movq	%rbx, %r10
	jne	.LBB28_135
# BB#36:                                # %if.end98
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rdx
	movzbl	(%rdx), %eax
	cmpq	$61, %rax
	jne	.LBB28_38
# BB#37:                                # %cond.true
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	8(%rdx), %edx
	movq	$10, %rsi
	movq	%r10, %rdi
	movq	%r10, %rbx
	callq	find_regno_note
	jmp	.LBB28_39
.LBB28_19:                              # %if.else47
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$0, 96(%rsp)            # 8-byte Folded Reload
	je	.LBB28_21
# BB#20:                                # %land.lhs.true49
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %rcx          # 8-byte Reload
	movzbl	(%rcx), %eax
	cmpq	$34, %rax
	movq	%rcx, %r15
	je	.LBB28_256
.LBB28_21:                              # %if.else54
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r12, %r13
	movq	%r8, %r12
	movl	flag_non_call_exceptions(%rip), %eax
	testq	%rax, %rax
	je	.LBB28_28
# BB#22:                                # %if.then56
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %rdi
	movq	%r10, %rbx
	callq	may_trap_p
	movq	%rax, %r15
	movq	%r12, %r8
	andq	%r8, %r15
	movabsq	$0, %rax
	je	.LBB28_24
# BB#23:                                # %if.then56
                                        #   in Loop: Header=BB28_4 Depth=1
	movabsq	$1, %rax
.LBB28_24:                              # %if.then56
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	movq	%rbx, %r10
	movq	%r13, %r12
	je	.LBB28_26
# BB#25:                                # %if.then56
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %r15
.LBB28_26:                              # %if.then56
                                        #   in Loop: Header=BB28_4 Depth=1
	xorq	%r13, %r13
	movq	56(%rsp), %rcx          # 8-byte Reload
	orq	%rcx, %rax
	jne	.LBB28_255
# BB#27:                                # %land.lhs.true61
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r8, %r13
	movq	96(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rdi
	movq	%r10, %rbx
	callq	may_trap_p
	movq	%r13, %r8
	movq	%rbx, %r10
	xorq	%r13, %r13
	testq	%r8, %rax
	je	.LBB28_135
	jmp	.LBB28_255
.LBB28_13:                              # %if.else
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$0, 96(%rsp)            # 8-byte Folded Reload
	je	.LBB28_15
# BB#14:                                # %land.lhs.true34
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %rcx          # 8-byte Reload
	movzbl	(%rcx), %eax
	cmpq	$33, %rax
	movq	%rcx, %r15
	je	.LBB28_256
	jmp	.LBB28_15
.LBB28_61:                              # %if.then241
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	movq	%r15, %r13
	movq	96(%rsp), %rax          # 8-byte Reload
	je	.LBB28_63
# BB#62:                                # %if.then241
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rax, %r13
.LBB28_63:                              # %if.then241
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	movq	104(%rsp), %r12         # 8-byte Reload
	je	.LBB28_65
# BB#64:                                # %if.then241
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r15, %rax
.LBB28_65:                              # %if.then241
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rax, %r15
	jmp	.LBB28_256
.LBB28_110:                             # %if.else405
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rax
	xorq	%r13, %r13
	movq	88(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	movq	80(%rsp), %r10          # 8-byte Reload
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	je	.LBB28_135
	jmp	.LBB28_255
.LBB28_123:                             #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	jmp	.LBB28_255
.LBB28_54:                              # %lor.lhs.false
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$134, %rcx
	jne	.LBB28_254
# BB#55:                                #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %r15
	jmp	.LBB28_255
.LBB28_69:                              # %land.lhs.true259
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB28_70
# BB#71:                                # %land.lhs.true266
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%rax), %rax
	movq	8(%r14), %rcx
	cmpq	%rcx, %rax
	movq	%rbx, %r10
	jne	.LBB28_73
.LBB28_72:                              # %if.then277
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %r15
	jmp	.LBB28_73
.LBB28_254:                             # %lor.lhs.false
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$140, %rcx
	movq	%r10, %r15
	jne	.LBB28_135
	jmp	.LBB28_255
.LBB28_46:                              # %cond.false145
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$1, %rsi
	movq	%rbx, %rdi
	callq	find_reg_note
.LBB28_43:                              # %cond.true136
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%rax, %rax
	jne	.LBB28_47
# BB#44:                                # %if.then151
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$1, %rax
	movb	%al, 2(%r14)
	movq	%rbx, %r15
	movq	%rbx, %r10
.LBB28_45:                              # %sw.epilog
                                        #   in Loop: Header=BB28_4 Depth=1
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	jmp	.LBB28_255
.LBB28_38:                              # %cond.false
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$10, %rsi
	movq	%r10, %rdi
	movq	%r10, %rbx
	callq	find_reg_note
.LBB28_39:                              # %cond.false
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	testq	%rax, %rax
	movq	%r10, %r15
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	jne	.LBB28_135
	jmp	.LBB28_255
.LBB28_70:                              #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
.LBB28_73:                              # %if.end278
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %r13          # 8-byte Reload
	testq	%r13, %r13
	jne	.LBB28_75
# BB#74:                                #   in Loop: Header=BB28_4 Depth=1
	xorq	%rcx, %rcx
	jmp	.LBB28_85
.LBB28_75:                              # %land.lhs.true280
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %rbx
	movq	8(%r14), %rdi
	movq	32(%r13), %rsi
	callq	reg_mentioned_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%r13, %rdi
	jne	.LBB28_80
# BB#76:                                # %lor.lhs.false289
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$4, %rsi
	xorq	%rdx, %rdx
	callq	find_reg_note
	testq	%rax, %rax
	je	.LBB28_77
# BB#78:                                # %land.lhs.true292
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB28_77
# BB#79:                                # %land.lhs.true299
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%rax), %rax
	movq	8(%r14), %rcx
	cmpq	%rcx, %rax
	jne	.LBB28_77
.LBB28_80:                              # %if.then310
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	movq	%r15, %rcx
	movq	%rbx, %r10
	je	.LBB28_82
# BB#81:                                # %if.then310
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %rcx          # 8-byte Reload
.LBB28_82:                              # %if.then310
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	je	.LBB28_84
# BB#83:                                # %if.then310
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r15, %rax
.LBB28_84:                              # %if.then310
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rax, %r15
	jmp	.LBB28_85
.LBB28_77:                              #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	xorq	%rcx, %rcx
.LBB28_85:                              # %if.end315
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	jne	.LBB28_87
# BB#86:                                #   in Loop: Header=BB28_4 Depth=1
	xorq	%r15, %r15
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	jmp	.LBB28_94
.LBB28_87:                              # %land.lhs.true317
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%r15), %eax
	cmpq	$33, %rax
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	jne	.LBB28_94
# BB#88:                                # %land.lhs.true321
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	64(%r15), %rax
	testq	%rax, %rax
	je	.LBB28_94
# BB#89:                                # %if.then326
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rcx, %rdx
	movq	8(%r14), %rcx
	cmpq	%rcx, %rax
	jne	.LBB28_90
# BB#91:                                # %if.end335
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$36, %rcx
	jne	.LBB28_93
# BB#92:                                # %if.then342
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	32(%rax), %ecx
	decq	%rcx
	movl	%ecx, 32(%rax)
.LBB28_93:                              # %if.end349
                                        #   in Loop: Header=BB28_4 Depth=1
	xorq	%r15, %r15
	movq	%rdx, %rcx
.LBB28_94:                              # %if.end349
                                        #   in Loop: Header=BB28_4 Depth=1
	xorq	%r13, %r13
	testq	%rcx, %rcx
	je	.LBB28_255
# BB#95:                                # %land.lhs.true351
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%rcx), %eax
	cmpq	$33, %rax
	jne	.LBB28_96
# BB#97:                                # %land.lhs.true355
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	64(%rcx), %rax
	testq	%rax, %rax
	jne	.LBB28_99
# BB#98:                                #   in Loop: Header=BB28_4 Depth=1
	movq	%rcx, %r13
	jmp	.LBB28_255
.LBB28_96:                              #   in Loop: Header=BB28_4 Depth=1
	movq	%rcx, %r13
	jmp	.LBB28_255
.LBB28_47:                              #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	jmp	.LBB28_135
.LBB28_99:                              # %if.then360
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rcx
	cmpq	%rcx, %rax
	jne	.LBB28_100
# BB#101:                               # %if.end369
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$36, %rcx
	jne	.LBB28_255
# BB#102:                               # %if.then376
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	32(%rax), %ecx
	decq	%rcx
	movl	%ecx, 32(%rax)
	.align	16, 0x90
.LBB28_255:                             # %sw.epilog
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	je	.LBB28_135
	jmp	.LBB28_256
.LBB28_149:                             # %if.then593
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	global_rtl(%rip), %rax
	movq	%rax, 32(%r8)
	movq	56(%r8), %rdi
	xorq	%rcx, %rcx
	movq	%r8, %rbx
	xorq	%r8, %r8
	xorq	%r9, %r9
	xorq	%r15, %r15
	movq	%rbx, %rsi
	movq	%rbx, %rdx
	callq	distribute_notes
	movq	48(%rbx), %rdi
	callq	distribute_links
	movq	$37, %rax
	movw	%ax, (%rbx)
	movabsq	$4294967197, %rax       # imm = 0xFFFFFF9D
	movl	%eax, 40(%rbx)
	movq	$0, 32(%rbx)
	jmp	.LBB28_150
	.align	16, 0x90
.LBB28_128:                             # %for.body505
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_145 Depth 3
	movq	%r8, %r12
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB28_129
# BB#139:                               # %if.end517
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	8(%r14), %rdi
	movq	32(%rbx), %rsi
	callq	reg_set_p
	movq	%r12, %rsi
	testq	%rsi, %rax
	jne	.LBB28_140
# BB#158:                               # %if.else657
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	%rsi, %r15
	movq	8(%r14), %rdi
	movq	32(%rbx), %rsi
	callq	reg_referenced_p
	testq	%r15, %rax
	movq	104(%rsp), %r12         # 8-byte Reload
	jne	.LBB28_161
# BB#159:                               # %lor.lhs.false666
                                        #   in Loop: Header=BB28_128 Depth=2
	movzbl	(%rbx), %eax
	xorq	%r15, %r15
	cmpq	$34, %rax
	jne	.LBB28_150
# BB#160:                               # %land.lhs.true671
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	8(%r14), %rdx
	movq	$48, %rsi
	movq	%rbx, %rdi
	callq	find_reg_fusage
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB28_150
	jmp	.LBB28_161
	.align	16, 0x90
.LBB28_129:                             # %if.then512
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	(%rcx), %rax
	xorq	%r15, %r15
	cmpq	%rax, %rbx
	movq	%r12, %r8
	movq	104(%rsp), %r12         # 8-byte Reload
	jne	.LBB28_128
	jmp	.LBB28_130
.LBB28_140:                             # %if.then526
                                        #   in Loop: Header=BB28_128 Depth=2
	movzbl	(%rbx), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	movq	104(%rsp), %r12         # 8-byte Reload
	movq	%rbx, %r8
	jne	.LBB28_152
# BB#141:                               # %cond.true534
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	32(%r8), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB28_143
# BB#142:                               #   in Loop: Header=BB28_128 Depth=2
	movq	%r8, %r15
	jmp	.LBB28_144
.LBB28_143:                             # %cond.false546
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	%rsi, %rbx
	movq	%r8, %rdi
	movq	%r8, %r15
	movq	%rax, %rsi
	callq	single_set_2
	movq	%rbx, %rsi
.LBB28_144:                             # %cond.end552
                                        #   in Loop: Header=BB28_128 Depth=2
	testq	%rax, %rax
	movq	%rax, %rbx
	movq	%r15, %r8
	je	.LBB28_152
	.align	16, 0x90
.LBB28_145:                             # %for.cond560
                                        #   Parent Loop BB28_4 Depth=1
                                        #     Parent Loop BB28_128 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	8(%rbx), %rbx
	movzbl	(%rbx), %ecx
	leaq	-63(%rcx), %rdx
	andq	%rsi, %rdx
	cmpq	$2, %rdx
	jb	.LBB28_145
# BB#146:                               # %for.cond560
                                        #   in Loop: Header=BB28_145 Depth=3
	cmpq	$133, %rcx
	je	.LBB28_145
# BB#147:                               # %land.lhs.true581
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	16(%rax), %rdi
	movq	%r8, %r15
	callq	side_effects_p
	movq	%r15, %r8
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	testq	%rsi, %rax
	jne	.LBB28_152
# BB#148:                               # %land.lhs.true587
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	%rsi, %r15
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	movq	%r8, %rbx
	callq	rtx_equal_p
	movq	%rbx, %r8
	movq	%r15, %rsi
	testq	%rsi, %rax
	jne	.LBB28_149
.LBB28_152:                             # %if.else611
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	%rsi, %r15
	movq	8(%r14), %rdi
	movq	32(%r8), %rsi
	movq	%r8, %rbx
	callq	reg_referenced_p
	testq	%r15, %rax
	je	.LBB28_155
# BB#153:                               # %if.then620
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	8(%r14), %rax
	movl	8(%rax), %edx
	movq	$10, %rsi
	movq	%rbx, %rdi
	callq	find_regno_note
	testq	%rax, %rax
	movq	%rbx, %r15
	jne	.LBB28_150
# BB#154:                               # %if.then629
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	8(%r14), %rdx
	movq	56(%rbx), %rcx
	movq	$3, %rdi
	movq	$10, %rsi
	callq	gen_rtx_fmt_ee
	movq	%rax, 56(%rbx)
	movq	%rbx, %r15
.LBB28_150:                             # %if.end771
                                        #   in Loop: Header=BB28_128 Depth=2
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	(%rcx), %rax
	cmpq	%rax, %rbx
	je	.LBB28_151
# BB#186:                               # %for.cond503.backedge
                                        #   in Loop: Header=BB28_128 Depth=2
	testq	%r15, %r15
	movq	80(%rsp), %r10          # 8-byte Reload
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	je	.LBB28_128
	jmp	.LBB28_187
.LBB28_151:                             #   in Loop: Header=BB28_4 Depth=1
	movq	80(%rsp), %r10          # 8-byte Reload
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	jmp	.LBB28_130
.LBB28_161:                             # %if.then677
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$0, 96(%rsp)            # 8-byte Folded Reload
	je	.LBB28_157
# BB#162:                               # %land.lhs.true679
                                        #   in Loop: Header=BB28_4 Depth=1
	movslq	8(%rbx), %rcx
	movslq	max_uid_cuid(%rip), %rdx
	cmpq	%rdx, %rcx
	jg	.LBB28_157
# BB#163:                               # %cond.false693
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r15
	movq	uid_cuid(%rip), %r8
	movq	48(%rsp), %rsi          # 8-byte Reload
	movslq	(%rsi), %rax
	movl	(%r8,%rcx,4), %edi
	cmpq	%rdx, %rax
	movq	%rsi, %rcx
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	%rsi, %rbx
	movq	%rsi, %r9
	movq	%rax, %rsi
	jle	.LBB28_169
.LBB28_164:                             # %land.lhs.true2.i1710
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rbx), %esi
	cmpq	$32, %rsi
	jne	.LBB28_167
# BB#165:                               # %land.rhs.i1716
                                        #   in Loop: Header=BB28_164 Depth=2
	movq	32(%rbx), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB28_167
# BB#166:                               # %while.body.i1719
                                        #   in Loop: Header=BB28_164 Depth=2
	movq	24(%rbx), %rbx
	movslq	8(%rbx), %rsi
	leaq	8(%rbx), %rcx
	cmpq	%rdx, %rsi
	jg	.LBB28_164
.LBB28_167:                             # %while.end.i1723
                                        #   in Loop: Header=BB28_4 Depth=1
	movslq	(%rcx), %rsi
	cmpq	%rdx, %rsi
	jg	.LBB28_168
.LBB28_169:                             # %cond.end714
                                        #   in Loop: Header=BB28_4 Depth=1
	movslq	(%r8,%rsi,4), %rsi
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rsi, %rdi
	movq	88(%rsp), %rcx          # 8-byte Reload
	jle	.LBB28_170
# BB#171:                               # %cond.end714
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%rcx, %rcx
	je	.LBB28_170
# BB#172:                               # %land.lhs.true720
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rcx, %rsi
	movslq	8(%rsi), %rbx
	cmpq	%rdx, %rbx
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	%rsi, %rdi
	jle	.LBB28_177
.LBB28_173:                             # %land.lhs.true2.i1737
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rdi), %esi
	cmpq	$32, %rsi
	jne	.LBB28_176
# BB#174:                               # %land.rhs.i1743
                                        #   in Loop: Header=BB28_173 Depth=2
	movq	32(%rdi), %rsi
	movzbl	(%rsi), %esi
	cmpq	$48, %rsi
	jne	.LBB28_176
# BB#175:                               # %while.body.i1746
                                        #   in Loop: Header=BB28_173 Depth=2
	movq	24(%rdi), %rdi
	movslq	8(%rdi), %rsi
	leaq	8(%rdi), %rcx
	cmpq	%rdx, %rsi
	jg	.LBB28_173
.LBB28_176:                             # %while.end.i1750
                                        #   in Loop: Header=BB28_4 Depth=1
	movslq	(%rcx), %rbx
	cmpq	%rdx, %rbx
	jg	.LBB28_168
.LBB28_177:                             # %cond.end734
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	(%r8,%rbx,4), %edi
	cmpq	%rdx, %rax
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%r9, %rbx
	jle	.LBB28_182
.LBB28_178:                             # %land.lhs.true2.i1764
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rbx), %eax
	cmpq	$32, %rax
	jne	.LBB28_181
# BB#179:                               # %land.rhs.i1770
                                        #   in Loop: Header=BB28_178 Depth=2
	movq	32(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$48, %rax
	jne	.LBB28_181
# BB#180:                               # %while.body.i1773
                                        #   in Loop: Header=BB28_178 Depth=2
	movq	24(%rbx), %rbx
	movslq	8(%rbx), %rax
	leaq	8(%rbx), %rcx
	cmpq	%rdx, %rax
	jg	.LBB28_178
.LBB28_181:                             # %while.end.i1777
                                        #   in Loop: Header=BB28_4 Depth=1
	movslq	(%rcx), %rax
	cmpq	%rdx, %rax
	jg	.LBB28_168
.LBB28_182:                             # %cond.end749
                                        #   in Loop: Header=BB28_4 Depth=1
	movslq	(%r8,%rax,4), %rax
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rax, %rdi
	jle	.LBB28_170
# BB#183:                               # %land.lhs.true753
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rdi
	movq	32(%r9), %rsi
	callq	reg_referenced_p
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	testq	%r8, %rax
	je	.LBB28_184
# BB#185:                               # %if.then762
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r8, %rbx
	movq	48(%r15), %rdi
	movq	$0, 48(%r15)
	callq	distribute_links
	movq	%rbx, %r8
.LBB28_184:                             #   in Loop: Header=BB28_4 Depth=1
	movq	80(%rsp), %r10          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB28_130
.LBB28_155:                             # %if.else641
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$10, %rax
	movb	%al, 2(%r14)
	movq	8(%r14), %rax
	movl	8(%rax), %edx
	movq	$10, %rsi
	movq	%rbx, %rdi
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB28_157
# BB#156:                               # %if.else641
                                        #   in Loop: Header=BB28_4 Depth=1
	xorq	%rbx, %rbx
.LBB28_157:                             # %if.else641
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r15
.LBB28_170:                             #   in Loop: Header=BB28_4 Depth=1
	movq	80(%rsp), %r10          # 8-byte Reload
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	movq	32(%rsp), %rcx          # 8-byte Reload
.LBB28_130:                             # %for.end781
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$65536, %rax            # imm = 0x10000
	jne	.LBB28_134
# BB#131:                               # %for.end781
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	jne	.LBB28_134
# BB#132:                               # %land.lhs.true790
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rax
	movq	%r12, 104(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movq	64(%rcx), %rdi
	movl	8(%rax), %esi
	movq	%r10, %rbx
	callq	bitmap_bit_p
	movq	%r12, %r8
	movq	104(%rsp), %r12         # 8-byte Reload
	movq	%rbx, %r10
	testq	%r8, %rax
	je	.LBB28_134
# BB#133:                               # %if.then799
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	this_basic_block(%rip), %ecx
	movq	refresh_blocks(%rip), %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	shrq	$6, %rcx
	orq	%rdx, 16(%rax,%rcx,8)
	movq	$1, %rax
	movb	%al, need_refresh(%rip)
.LBB28_134:                             # %if.end803
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r15, %r15
	je	.LBB28_135
.LBB28_187:                             # %land.lhs.true805
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	xorq	%r13, %r13
	cmpq	$65536, %rax            # imm = 0x10000
	jne	.LBB28_188
# BB#189:                               # %if.then811
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %rbx
	movq	8(%r14), %rax
	movl	8(%rax), %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	callq	noop_move_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB28_191
# BB#190:                               # %if.then820
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	this_basic_block(%rip), %ecx
	movq	refresh_blocks(%rip), %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	shrq	$6, %rcx
	orq	%rdx, 16(%rax,%rcx,8)
	movq	$1, %rax
	movb	%al, need_refresh(%rip)
.LBB28_191:                             # %if.end829
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rsi
	movq	%r15, %rdi
	callq	dead_or_set_p
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	testq	%r8, %rax
	jne	.LBB28_193
# BB#192:                               # %lor.lhs.false835
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r12, %r13
	movq	%r13, 104(%rsp)         # 8-byte Spill
	movq	%r8, %r12
	movq	8(%r14), %rdi
	movq	32(%r15), %rsi
	callq	reg_bitfield_target_p
	movq	%r12, %r8
	movq	%r13, %r12
	testq	%r8, %rax
	jne	.LBB28_193
# BB#196:                               # %if.end856
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	reg_last_death(%rip), %rax
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%r15, (%rax,%rsi,8)
	xorq	%r13, %r13
	testq	%r15, %r15
	je	.LBB28_197
# BB#198:                               # %if.end856
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$52, %rsi
	movq	%rbx, %r10
	ja	.LBB28_255
# BB#199:                               # %land.lhs.true861
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rax
	movzbl	2(%rax), %r9d
	movq	%rsi, %rax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rcx, %rax
	cmpq	$8, %rax
	je	.LBB28_203
# BB#200:                               # %land.lhs.true861
                                        #   in Loop: Header=BB28_4 Depth=1
	leaq	-21(%rsi), %rax
	andq	%r8, %rax
	cmpq	$8, %rax
	jb	.LBB28_203
# BB#201:                               # %land.lhs.true861
                                        #   in Loop: Header=BB28_4 Depth=1
	leaq	-45(%rsi), %rax
	andq	%r8, %rax
	cmpq	$8, %rax
	jb	.LBB28_203
# BB#202:                               # %land.lhs.true861
                                        #   in Loop: Header=BB28_4 Depth=1
	leaq	-29(%rsi), %rax
	andq	%r8, %rax
	cmpq	$7, %rax
	jbe	.LBB28_203
# BB#204:                               # %cond.false909
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$24, %r9
	jne	.LBB28_205
# BB#207:                               # %cond.true930
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	target_flags(%rip), %ebx
	movq	$24, %rcx
	movq	%rbx, %rax
	shrq	%cl, %rax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB28_209
.LBB28_188:                             #   in Loop: Header=BB28_4 Depth=1
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	.align	16, 0x90
.LBB28_256:                             # %if.then1249
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	56(%r15), %rax
	movq	%rax, 16(%r14)
	movq	%r14, 56(%r15)
	jmp	.LBB28_257
.LBB28_193:                             # %if.then844
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	reg_last_death(%rip), %rax
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	(%rax,%rdx,8), %rcx
	xorq	%r13, %r13
	cmpq	%r15, %rcx
	je	.LBB28_195
# BB#194:                               # %if.then849
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$0, (%rax,%rdx,8)
.LBB28_195:                             # %if.else1259
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	.align	16, 0x90
.LBB28_135:                             # %if.else1259
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	2(%r14), %eax
	cmpq	$1, %rax
	je	.LBB28_137
# BB#136:                               # %if.else1259
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$10, %rax
	jne	.LBB28_257
.LBB28_137:                             # %land.lhs.true1271
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB28_257
# BB#138:                               # %if.then1279
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	8(%rax), %eax
	movq	reg_n_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rax
	movl	24(%rax), %ecx
	decq	%rcx
	movl	%ecx, 24(%rax)
	.align	16, 0x90
.LBB28_257:                             # %if.end1291
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r13, %r13
	je	.LBB28_258
# BB#260:                               # %if.then1293
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r8, %r15
	movl	(%r14), %edi
	movq	$16, %rcx
	movq	%rdi, %rax
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$1, %rax
	je	.LBB28_263
# BB#261:                               # %if.then1293
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$10, %rax
	jne	.LBB28_262
.LBB28_263:                             # %land.lhs.true1305
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%r14), %rdx
	movzbl	(%rdx), %eax
	movq	%r10, %rbx
	cmpq	$61, %rax
	jne	.LBB28_265
# BB#264:                               # %if.then1313
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	8(%rdx), %eax
	movq	reg_n_info(%rip), %rcx
	movq	32(%rcx,%rax,8), %rax
	movl	24(%rax), %ecx
	incq	%rcx
	movl	%ecx, 24(%rax)
	movl	(%r14), %edi
	jmp	.LBB28_265
.LBB28_262:                             # %if.then1293.if.end1326_crit_edge
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%r10, %rbx
	movq	8(%r14), %rdx
.LBB28_265:                             # %if.end1326
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	56(%r13), %rax
	movq	$16, %rcx
	movq	%rdi, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	andq	$65535, %rdi            # imm = 0xFFFF
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, 56(%r13)
	movq	%rbx, %r10
	movq	%r15, %r8
.LBB28_258:                             # %for.cond.backedge
                                        #   in Loop: Header=BB28_4 Depth=1
	testq	%r12, %r12
	movq	%r12, %r14
	jne	.LBB28_4
	jmp	.LBB28_259
.LBB28_197:                             #   in Loop: Header=BB28_4 Depth=1
	movq	%rbx, %r10
	jmp	.LBB28_255
.LBB28_203:                             # %cond.true885
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	mode_class(,%r9,4), %eax
	addq	$-5, %rax
	andq	%r8, %rax
	cmpq	$2, %rax
	movq	$2, %rbx
	jb	.LBB28_215
	jmp	.LBB28_255
.LBB28_205:                             # %cond.false909
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$18, %r9
	jne	.LBB28_208
# BB#206:                               # %cond.true918
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	movq	%rbx, %rax
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB28_209
.LBB28_208:                             # %cond.false934
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	target_flags(%rip), %ebx
	movzbl	mode_size(%r9), %eax
	movq	$23, %rcx
	movq	%rbx, %rdi
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
.LBB28_209:                             # %cond.end955
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$2, %rax
	jl	.LBB28_255
# BB#210:                               # %cond.false1007
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$24, %r9
	jne	.LBB28_211
# BB#213:                               # %cond.true1029
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$24, %rcx
	shrq	%cl, %rbx
	andq	$2, %rbx
	xorq	$6, %rbx
	jmp	.LBB28_215
.LBB28_211:                             # %cond.false1007
                                        #   in Loop: Header=BB28_4 Depth=1
	cmpq	$18, %r9
	jne	.LBB28_214
# BB#212:                               # %cond.true1016
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	$25, %rcx
	shrq	%cl, %rbx
	andq	$1, %rbx
	xorq	$3, %rbx
	jmp	.LBB28_215
.LBB28_214:                             # %cond.false1033
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	mode_size(%r9), %eax
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	leaq	3(%rax,%rbx), %rax
	addq	$4, %rbx
	cqto
	idivq	%rbx
	movq	%rax, %rbx
.LBB28_215:                             # %cond.end1056
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	addq	%rsi, %rbx
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	movq	$1, %rcx
	movq	%rsi, %rax
	jmp	.LBB28_216
.LBB28_220:                             #   in Loop: Header=BB28_216 Depth=2
	movq	80(%rsp), %r10          # 8-byte Reload
	movq	104(%rsp), %r12         # 8-byte Reload
	movq	16(%rsp), %rbx          # 8-byte Reload
	movq	32(%rsp), %rax          # 8-byte Reload
.LBB28_216:                             # %for.cond1059.outer
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_217 Depth 3
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%rax, %rdi
.LBB28_217:                             # %for.cond1059
                                        #   Parent Loop BB28_4 Depth=1
                                        #     Parent Loop BB28_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rcx
	andq	%r8, %rcx
	movq	%rdi, %rax
	andq	%r8, %rax
	cmpq	%rcx, %rax
	jae	.LBB28_222
# BB#218:                               # %for.body1062
                                        #   in Loop: Header=BB28_217 Depth=3
	movq	32(%r15), %rdx
	leaq	1(%rdi), %rsi
	movq	%rsi, 32(%rsp)          # 8-byte Spill
	xorq	%rcx, %rcx
	movq	%r8, %r12
	movq	%rdi, %rbx
	callq	refers_to_regno_p
	movq	%r12, %r8
	testq	%r8, %rax
	jne	.LBB28_221
# BB#219:                               # %land.lhs.true1069
                                        #   in Loop: Header=BB28_217 Depth=3
	movq	$48, %rsi
	movq	%r8, %r12
	movq	%r15, %rdi
	movq	%rbx, %rdx
	callq	find_regno_fusage
	movq	%r12, %r8
	xorq	%rcx, %rcx
	testq	%r8, %rax
	je	.LBB28_220
.LBB28_221:                             # %lor.lhs.false1072
                                        #   in Loop: Header=BB28_217 Depth=3
	movq	%r8, %r12
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	dead_or_set_regno_p
	movq	%r12, %r8
	xorq	%rcx, %rcx
	testq	%r8, %rax
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rdi
	movq	80(%rsp), %r10          # 8-byte Reload
	movq	104(%rsp), %r12         # 8-byte Reload
	movq	16(%rsp), %rbx          # 8-byte Reload
	je	.LBB28_217
	jmp	.LBB28_216
.LBB28_222:                             # %for.end1078
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	8(%rsp), %rax           # 8-byte Reload
	testq	%r8, %rax
	jne	.LBB28_255
# BB#223:                               # %for.cond1081.preheader
                                        #   in Loop: Header=BB28_4 Depth=1
	xorq	%r13, %r13
	movq	24(%rsp), %rsi          # 8-byte Reload
	cmpq	%rcx, %rsi
	jae	.LBB28_224
.LBB28_225:                             # %for.body1084
                                        #   Parent Loop BB28_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_231 Depth 3
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movq	%rcx, (%rsp)            # 8-byte Spill
	movq	%rsi, %rax
	andq	%r8, %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	reg_raw_mode(,%rax,4), %edi
	callq	gen_rtx_REG
	movslq	this_basic_block(%rip), %rcx
	movq	basic_block_info(%rip), %rdx
	movq	32(%rdx,%rcx,8), %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rax, %rbx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	dead_or_set_p
	movq	32(%r15), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB28_228
# BB#226:                               # %land.lhs.true1095
                                        #   in Loop: Header=BB28_225 Depth=2
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	callq	reg_bitfield_target_p
	movq	32(%rsp), %rdx          # 8-byte Reload
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB28_228
# BB#227:                               # %if.then1101
                                        #   in Loop: Header=BB28_225 Depth=2
	movq	$3, %rdi
	movq	$1, %rsi
	xorq	%rcx, %rcx
	movq	%rbx, %rdx
	callq	gen_rtx_fmt_ee
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	xorq	%r9, %r9
	movq	%rax, %rdi
	movq	%r15, %rsi
	movq	%r15, %rdx
	callq	distribute_notes
	jmp	.LBB28_237
.LBB28_228:                             # %if.else1103
                                        #   in Loop: Header=BB28_225 Depth=2
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	24(%rsp), %rbx          # 8-byte Reload
	leaq	1(%rbx), %rsi
	xorq	%rcx, %rcx
	movq	%rbx, %rdi
	callq	refers_to_regno_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rcx, %r8
	jne	.LBB28_238
# BB#229:                               # %land.lhs.true1110
                                        #   in Loop: Header=BB28_225 Depth=2
	movq	$48, %rsi
	movq	%r15, %rdi
	movq	%rbx, %rdx
	callq	find_regno_fusage
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	testq	%r8, %rax
	jne	.LBB28_238
# BB#230:                               # %for.cond1117.preheader
                                        #   in Loop: Header=BB28_225 Depth=2
	movq	%r15, %rbx
.LBB28_231:                             # %for.cond1117
                                        #   Parent Loop BB28_4 Depth=1
                                        #     Parent Loop BB28_225 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$105, %rax
	jne	.LBB28_232
# BB#234:                               # %if.end1139
                                        #   in Loop: Header=BB28_231 Depth=3
	movq	%rbx, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	dead_or_set_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB28_236
# BB#235:                               # %lor.lhs.false1142
                                        #   in Loop: Header=BB28_231 Depth=3
	movq	32(%rbx), %rsi
	movq	32(%rsp), %rdi          # 8-byte Reload
	callq	reg_bitfield_target_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB28_231
	jmp	.LBB28_236
.LBB28_232:                             # %if.then1125
                                        #   in Loop: Header=BB28_231 Depth=3
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rax
	cmpq	%rax, %rbx
	jne	.LBB28_231
# BB#233:                               # %if.then1129
                                        #   in Loop: Header=BB28_225 Depth=2
	movl	this_basic_block(%rip), %ecx
	movq	refresh_blocks(%rip), %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	shrq	$6, %rcx
	orq	%rdx, 16(%rax,%rcx,8)
	movq	$1, %rax
	movb	%al, need_refresh(%rip)
	jmp	.LBB28_237
.LBB28_236:                             # %if.then1148
                                        #   in Loop: Header=BB28_225 Depth=2
	movq	56(%rbx), %rcx
	movq	$3, %rdi
	movq	$10, %rsi
	movq	32(%rsp), %rdx          # 8-byte Reload
	callq	gen_rtx_fmt_ee
	movq	%rax, 56(%rbx)
.LBB28_237:                             # %for.inc1164
                                        #   in Loop: Header=BB28_225 Depth=2
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%rdi, %r8
	movq	24(%rsp), %rbx          # 8-byte Reload
.LBB28_238:                             # %for.inc1164
                                        #   in Loop: Header=BB28_225 Depth=2
	movq	8(%rsp), %rax           # 8-byte Reload
	movslq	reg_raw_mode(,%rax,4), %rax
	movq	%rbx, %rcx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rdx, %rcx
	cmpq	$8, %rcx
	movq	%rbx, %rsi
	je	.LBB28_242
# BB#239:                               # %for.inc1164
                                        #   in Loop: Header=BB28_225 Depth=2
	leaq	-21(%rsi), %rcx
	andq	%r8, %rcx
	cmpq	$8, %rcx
	jb	.LBB28_242
# BB#240:                               # %for.inc1164
                                        #   in Loop: Header=BB28_225 Depth=2
	leaq	-45(%rsi), %rcx
	andq	%r8, %rcx
	cmpq	$8, %rcx
	jb	.LBB28_242
# BB#241:                               # %for.inc1164
                                        #   in Loop: Header=BB28_225 Depth=2
	leaq	-29(%rsi), %rcx
	andq	%r8, %rcx
	cmpq	$7, %rcx
	jbe	.LBB28_242
# BB#246:                               # %cond.false1204
                                        #   in Loop: Header=BB28_225 Depth=2
	movq	%rax, %rcx
	andq	%r8, %rcx
	cmpq	$24, %rcx
	jne	.LBB28_247
# BB#249:                               # %cond.true1218
                                        #   in Loop: Header=BB28_225 Depth=2
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB28_251
.LBB28_242:                             # %cond.true1188
                                        #   in Loop: Header=BB28_225 Depth=2
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB28_251
# BB#243:                               # %lor.rhs1195
                                        #   in Loop: Header=BB28_225 Depth=2
	cmpq	$6, %rcx
	movabsq	$0, %rax
	jne	.LBB28_245
# BB#244:                               # %lor.rhs1195
                                        #   in Loop: Header=BB28_225 Depth=2
	movabsq	$1, %rax
.LBB28_245:                             # %lor.rhs1195
                                        #   in Loop: Header=BB28_225 Depth=2
	incq	%rax
	jmp	.LBB28_251
.LBB28_247:                             # %cond.false1204
                                        #   in Loop: Header=BB28_225 Depth=2
	cmpq	$18, %rcx
	jne	.LBB28_250
# BB#248:                               # %cond.true1209
                                        #   in Loop: Header=BB28_225 Depth=2
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB28_251
.LBB28_250:                             # %cond.false1222
                                        #   in Loop: Header=BB28_225 Depth=2
	movl	target_flags(%rip), %ebx
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	leaq	3(%rax,%rbx), %rax
	addq	$4, %rbx
	cqto
	idivq	%rbx
.LBB28_251:                             # %cond.end1241
                                        #   in Loop: Header=BB28_225 Depth=2
	addq	%rax, %rsi
	movq	%rsi, %rax
	andq	%r8, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	cmpq	%rcx, %rax
	jb	.LBB28_225
# BB#252:                               #   in Loop: Header=BB28_4 Depth=1
	movq	80(%rsp), %r10          # 8-byte Reload
	jmp	.LBB28_135
.LBB28_224:                             #   in Loop: Header=BB28_4 Depth=1
	movq	80(%rsp), %r10          # 8-byte Reload
	jmp	.LBB28_135
	.align	16, 0x90
.LBB28_4:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_128 Depth 2
                                        #       Child Loop BB28_145 Depth 3
                                        #     Child Loop BB28_164 Depth 2
                                        #     Child Loop BB28_173 Depth 2
                                        #     Child Loop BB28_178 Depth 2
                                        #     Child Loop BB28_216 Depth 2
                                        #       Child Loop BB28_217 Depth 3
                                        #     Child Loop BB28_225 Depth 2
                                        #       Child Loop BB28_231 Depth 3
	movq	8(%r14), %rcx
	testq	%rcx, %rcx
	movabsq	$0, %rax
	je	.LBB28_9
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	(%rcx), %eax
	cmpq	$61, %rax
	jne	.LBB28_6
# BB#7:                                 # %land.lhs.true5
                                        #   in Loop: Header=BB28_4 Depth=1
	movl	8(%rcx), %edx
	cmpq	$53, %rdx
	movq	%rcx, %rax
	jb	.LBB28_9
# BB#8:                                 # %if.then
                                        #   in Loop: Header=BB28_4 Depth=1
	movq	cfun(%rip), %rax
	movq	24(%rax), %rax
	movq	80(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	%rax, 8(%r14)
	jmp	.LBB28_9
	.align	16, 0x90
.LBB28_6:                               #   in Loop: Header=BB28_4 Depth=1
	movq	%rcx, %rax
.LBB28_9:                               # %if.end
                                        #   in Loop: Header=BB28_4 Depth=1
	movzbl	2(%r14), %ecx
	decq	%rcx
	andq	%r8, %rcx
	cmpq	$29, %rcx
	jbe	.LBB28_10
.LBB28_253:                             # %sw.default
	movabsq	$.L.str2, %rdi
	movabsq	$.L__FUNCTION__.distribute_notes, %rdx
	movq	$12620, %rsi            # imm = 0x314C
	callq	fancy_abort
.LBB28_259:                             # %for.end1344
	addq	$112, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB28_33:                              # %if.else83
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.distribute_notes, %rcx
	movq	$12157, %rsi            # imm = 0x2F7D
	jmp	.LBB28_16
.LBB28_28:                              # %if.else67
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.distribute_notes, %rcx
	movq	$12145, %rsi            # imm = 0x2F71
	jmp	.LBB28_16
.LBB28_15:                              # %if.else39
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.distribute_notes, %rcx
	movq	$12125, %rsi            # imm = 0x2F5D
	jmp	.LBB28_16
.LBB28_90:                              # %if.then334
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.distribute_notes, %rcx
	movq	$12265, %rsi            # imm = 0x2FE9
	jmp	.LBB28_16
.LBB28_100:                             # %if.then368
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.distribute_notes, %rcx
	movq	$12273, %rsi            # imm = 0x2FF1
	jmp	.LBB28_16
.LBB28_168:                             # %if.then.i1724
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
.LBB28_16:                              # %if.else39
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp407:
	.size	distribute_notes, .Ltmp407-distribute_notes
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI28_0:
	.quad	.LBB28_111
	.quad	.LBB28_56
	.quad	.LBB28_48
	.quad	.LBB28_48
	.quad	.LBB28_135
	.quad	.LBB28_103
	.quad	.LBB28_108
	.quad	.LBB28_135
	.quad	.LBB28_56
	.quad	.LBB28_34
	.quad	.LBB28_253
	.quad	.LBB28_253
	.quad	.LBB28_66
	.quad	.LBB28_253
	.quad	.LBB28_253
	.quad	.LBB28_255
	.quad	.LBB28_255
	.quad	.LBB28_48
	.quad	.LBB28_253
	.quad	.LBB28_255
	.quad	.LBB28_253
	.quad	.LBB28_253
	.quad	.LBB28_17
	.quad	.LBB28_253
	.quad	.LBB28_253
	.quad	.LBB28_29
	.quad	.LBB28_11
	.quad	.LBB28_29
	.quad	.LBB28_253
	.quad	.LBB28_255

	.text
	.align	16, 0x90
	.type	move_deaths,@function
move_deaths:                            # @move_deaths
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp414:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp415:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp416:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp417:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp418:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp419:
	.cfi_def_cfa_offset 128
.Ltmp420:
	.cfi_offset %rbx, -48
.Ltmp421:
	.cfi_offset %r12, -40
.Ltmp422:
	.cfi_offset %r13, -32
.Ltmp423:
	.cfi_offset %r14, -24
.Ltmp424:
	.cfi_offset %r15, -16
	movq	%rdi, 64(%rsp)          # 8-byte Spill
	movzbl	(%rdi), %eax
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%rsi, %rbx
	cmpq	$47, %rax
	je	.LBB29_119
# BB#1:                                 # %entry
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movq	%r12, 48(%rsp)          # 8-byte Spill
	movq	%r14, 40(%rsp)          # 8-byte Spill
	cmpq	$49, %rax
	je	.LBB29_137
# BB#2:                                 # %entry
	cmpq	$61, %rax
	jne	.LBB29_128
# BB#3:                                 # %if.then
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	8(%rax), %r12d
	movq	reg_last_death(%rip), %rax
	movq	(%rax,%r12,8), %r13
	cmpq	$0, 56(%rsp)            # 8-byte Folded Reload
	je	.LBB29_6
# BB#4:                                 # %land.lhs.true
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	callq	reg_set_p
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB29_6
# BB#5:                                 # %land.lhs.true3
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	callq	reg_referenced_p
	testq	%rbx, %rax
	je	.LBB29_137
.LBB29_6:                               # %while.cond.preheader
	testq	%r13, %r13
	je	.LBB29_137
# BB#7:                                 # %land.rhs.lr.ph
	movl	max_uid_cuid(%rip), %esi
	movq	%r13, %rdx
	.align	16, 0x90
.LBB29_8:                               # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	movslq	8(%rdx), %rax
	movq	$32, %rcx
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rax
	movq	$1, %rax
	jle	.LBB29_9
# BB#138:                               # %while.body
                                        #   in Loop: Header=BB29_8 Depth=1
	movq	16(%rdx), %rdx
	xorq	%rax, %rax
	testq	%rdx, %rdx
	movabsq	$0, %rdi
	jne	.LBB29_8
	jmp	.LBB29_10
.LBB29_119:                             # %if.then671
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r13
	movq	16(%rax), %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	move_deaths
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$133, %rcx
	je	.LBB29_124
# BB#120:                               # %if.then671
	cmpq	$64, %rcx
	je	.LBB29_124
# BB#121:                               # %if.then671
	cmpq	$63, %rcx
	jne	.LBB29_122
# BB#123:                               # %land.lhs.true692
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	4(%rsi), %rdi
	leaq	3(%rax,%rsi), %rax
	cqto
	idivq	%rdi
	movq	%rax, %rcx
	movq	8(%r13), %rax
	movzbl	2(%rax), %eax
	movzbl	mode_size(%rax), %eax
	leaq	3(%rsi,%rax), %rax
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	cqto
	idivq	%rdi
	andq	%rsi, %rcx
	andq	%rsi, %rax
	cmpq	%rax, %rcx
	jne	.LBB29_125
.LBB29_124:                             # %if.then728
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	move_deaths
	jmp	.LBB29_137
.LBB29_128:                             # %if.end756
	movzbl	rtx_length(%rax), %r14d
	testq	%r14, %r14
	je	.LBB29_137
# BB#129:
	movq	rtx_format(,%rax,8), %r12
	xorq	%r13, %r13
	.align	16, 0x90
.LBB29_130:                             # %for.body765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_133 Depth 2
	movzbl	(%r12,%r13), %eax
	cmpq	$101, %rax
	jne	.LBB29_131
# BB#135:                               # %if.then794
                                        #   in Loop: Header=BB29_130 Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	8(%rax,%r13,8), %rdi
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%r15, %rcx
	movq	40(%rsp), %r8           # 8-byte Reload
	callq	move_deaths
	jmp	.LBB29_136
	.align	16, 0x90
.LBB29_131:                             # %for.body765
                                        #   in Loop: Header=BB29_130 Depth=1
	cmpq	$69, %rax
	jne	.LBB29_136
# BB#132:                               # %if.then771
                                        #   in Loop: Header=BB29_130 Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	8(%rax,%r13,8), %rax
	movslq	(%rax), %rbx
	testq	%rbx, %rbx
	jle	.LBB29_136
	jmp	.LBB29_133
	.align	16, 0x90
.LBB29_134:                             # %for.body779.for.body779_crit_edge
                                        #   in Loop: Header=BB29_133 Depth=2
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	8(%rax,%r13,8), %rax
.LBB29_133:                             # %for.body779.lr.ph
                                        #   Parent Loop BB29_130 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%rbx
	movq	8(%rax,%rbx,8), %rdi
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%r15, %rcx
	movq	40(%rsp), %r8           # 8-byte Reload
	callq	move_deaths
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB29_134
	.align	16, 0x90
.LBB29_136:                             # %for.inc801
                                        #   in Loop: Header=BB29_130 Depth=1
	incq	%r13
	movq	$32, %rcx
	movq	%r13, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%r14, %rax
	jl	.LBB29_130
	jmp	.LBB29_137
.LBB29_122:
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	jmp	.LBB29_126
.LBB29_9:
	movq	%rdx, %rdi
.LBB29_10:                              # %while.cond13.preheader
	testq	%r13, %r13
	je	.LBB29_137
# BB#11:                                # %land.rhs15.lr.ph
	movl	max_uid_cuid(%rip), %r10d
	movq	%r13, %rsi
	.align	16, 0x90
.LBB29_12:                              # %land.rhs15
                                        # =>This Inner Loop Header: Depth=1
	movslq	8(%rsi), %rdx
	movq	$32, %rcx
	movq	%r10, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rbx, %rdx
	jle	.LBB29_14
# BB#13:                                # %while.body21
                                        #   in Loop: Header=BB29_12 Depth=1
	movq	24(%rsi), %rsi
	testq	%rsi, %rsi
	jne	.LBB29_12
	jmp	.LBB29_137
.LBB29_14:                              # %while.end25
	testq	%rax, %rax
	je	.LBB29_137
# BB#15:                                # %land.lhs.true29
	movslq	8(%rdi), %rax
	movq	$32, %rcx
	movq	%r10, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rbx, %rax
	jle	.LBB29_21
# BB#16:                                # %land.lhs.true2.i.lr.ph
	leaq	8(%rdi), %r8
.LBB29_17:                              # %land.lhs.true2.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdi), %ecx
	cmpq	$32, %rcx
	jne	.LBB29_20
# BB#18:                                # %land.rhs.i
                                        #   in Loop: Header=BB29_17 Depth=1
	movq	32(%rdi), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB29_20
# BB#19:                                # %while.body.i
                                        #   in Loop: Header=BB29_17 Depth=1
	movq	24(%rdi), %rdi
	leaq	8(%rdi), %r8
	movslq	8(%rdi), %rbx
	movq	$32, %rcx
	movq	%r10, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rbx
	jg	.LBB29_17
.LBB29_20:                              # %while.end.i
	movslq	(%r8), %rax
	movq	$32, %rcx
	movq	%r10, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rax
	jg	.LBB29_139
.LBB29_21:                              # %cond.false
	movq	uid_cuid(%rip), %r9
	leaq	(%r9,%rax,4), %rax
	movslq	(%rax), %rax
	movq	$32, %rcx
	movq	48(%rsp), %rdi          # 8-byte Reload
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rax
	jl	.LBB29_137
# BB#22:                                # %cond.end54
	movl	(%r9,%rdx,4), %r11d
	movslq	8(%r15), %r8
	movq	$32, %rcx
	movq	%r10, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %r8
	movq	%r8, %rax
	jle	.LBB29_28
# BB#23:                                # %land.lhs.true2.i1115.lr.ph
	leaq	8(%r15), %r14
	movq	%r15, %rbx
.LBB29_24:                              # %land.lhs.true2.i1115
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %ecx
	cmpq	$32, %rcx
	jne	.LBB29_27
# BB#25:                                # %land.rhs.i1121
                                        #   in Loop: Header=BB29_24 Depth=1
	movq	32(%rbx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB29_27
# BB#26:                                # %while.body.i1124
                                        #   in Loop: Header=BB29_24 Depth=1
	movq	24(%rbx), %rbx
	leaq	8(%rbx), %r14
	movslq	8(%rbx), %rdi
	movq	$32, %rcx
	movq	%r10, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rdi
	jg	.LBB29_24
.LBB29_27:                              # %while.end.i1128
	movslq	(%r14), %rax
	movq	$32, %rcx
	movq	%r10, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	%rdi, %rax
	jg	.LBB29_139
.LBB29_28:                              # %cond.end68
	movslq	(%r9,%rax,4), %rax
	movq	$32, %rcx
	shlq	%cl, %r11
	movq	$32, %rcx
	sarq	%cl, %r11
	cmpq	%rax, %r11
	jl	.LBB29_37
# BB#29:                                # %lor.lhs.false
	cmpq	%rsi, %r13
	je	.LBB29_137
# BB#30:                                # %cond.end85
	movq	$32, %rcx
	movq	%r10, %rax
	shlq	%cl, %rax
	movl	(%r9,%rdx,4), %edx
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %r8
	jle	.LBB29_36
# BB#31:                                # %land.lhs.true2.i1169.lr.ph
	movq	%r15, %r14
	leaq	8(%r14), %rax
	movq	%r14, %rsi
.LBB29_32:                              # %land.lhs.true2.i1169
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %ecx
	cmpq	$32, %rcx
	jne	.LBB29_35
# BB#33:                                # %land.rhs.i1175
                                        #   in Loop: Header=BB29_32 Depth=1
	movq	32(%rsi), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$48, %rcx
	jne	.LBB29_35
# BB#34:                                # %while.body.i1178
                                        #   in Loop: Header=BB29_32 Depth=1
	movq	24(%rsi), %rsi
	leaq	8(%rsi), %rax
	movslq	8(%rsi), %rdi
	movq	$32, %rcx
	movq	%r10, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rbx, %rdi
	jg	.LBB29_32
.LBB29_35:                              # %while.end.i1182
	movq	%r14, %r15
	movslq	(%rax), %r8
	movq	$32, %rcx
	shlq	%cl, %r10
	movq	$32, %rcx
	sarq	%cl, %r10
	cmpq	%r10, %r8
	jg	.LBB29_139
.LBB29_36:                              # %cond.end99
	movl	(%r9,%r8,4), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	%rax, %rdx
	jne	.LBB29_137
.LBB29_37:                              # %if.then102
	movq	$1, %rsi
	movq	%r13, %rdi
	movq	%r12, %rdx
	callq	find_regno_note
	movq	%rax, %r10
	testq	%r10, %r10
	je	.LBB29_38
# BB#40:                                # %remove_death.exit
	movq	reg_n_info(%rip), %rax
	movq	32(%rax,%r12,8), %rax
	movl	24(%rax), %ecx
	decq	%rcx
	movl	%ecx, 24(%rax)
	movq	%r13, %rdi
	movq	%r10, %rsi
	movq	%r10, %rbx
	callq	remove_note
	movq	%rbx, %r10
	movq	8(%r10), %rax
	movl	(%rax), %edx
	cmpq	$53, %r12
	jae	.LBB29_41
# BB#46:                                # %land.lhs.true107
	movq	$16, %rcx
	movq	%rdx, %rbx
	movq	64(%rsp), %rsi          # 8-byte Reload
	movl	(%rsi), %esi
	shrq	%cl, %rbx
	andq	$255, %rbx
	movzbl	mode_size(%rbx), %r9d
	movq	$16, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	movzbl	mode_size(%rdi), %r8d
	cmpq	%r8, %r9
	jbe	.LBB29_42
# BB#47:                                # %if.then123
	movl	8(%rax), %r14d
	movabsq	$4294967288, %rsi       # imm = 0xFFFFFFF8
	movq	%r14, %rax
	andq	%rsi, %rax
	cmpq	$8, %rax
	je	.LBB29_51
# BB#48:                                # %if.then123
	leaq	-21(%r14), %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jb	.LBB29_51
# BB#49:                                # %if.then123
	leaq	-45(%r14), %rcx
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jb	.LBB29_51
# BB#50:                                # %if.then123
	leaq	-29(%r14), %rcx
	andq	%rax, %rcx
	cmpq	$7, %rcx
	jbe	.LBB29_51
# BB#56:                                # %cond.false175
	cmpq	$24, %rbx
	jne	.LBB29_57
# BB#59:                                # %cond.true196
	movzbl	target_flags+3(%rip), %r15d
	andq	$2, %r15
	xorq	$6, %r15
	jmp	.LBB29_61
.LBB29_125:                             # %if.then734
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	movq	8(%r13), %r13
	movl	(%r13), %eax
.LBB29_126:                             # %if.end738
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB29_137
# BB#127:                               # %if.then743
	movq	8(%r13), %rdi
	callq	move_deaths
.LBB29_137:                             # %for.end803
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB29_38:                              # %if.else.thread
	cmpq	$52, %r12
	movq	%r12, 32(%rsp)          # 8-byte Spill
	ja	.LBB29_85
# BB#39:                                # %if.else.thread.land.lhs.true353_crit_edge
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %esi
	xorq	%rdx, %rdx
	jmp	.LBB29_44
.LBB29_41:                              # %remove_death.exit.land.lhs.true332_crit_edge
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %esi
.LBB29_42:                              # %land.lhs.true332
	movq	%r12, 32(%rsp)          # 8-byte Spill
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movzbl	mode_size(%rdx), %eax
	movq	$16, %rcx
	movq	%rsi, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB29_116
# BB#43:                                # %land.lhs.true332
	movq	$1, %rdx
	cmpq	$52, 32(%rsp)           # 8-byte Folded Reload
	ja	.LBB29_116
.LBB29_44:                              # %land.lhs.true353
	movabsq	$4294967288, %rax       # imm = 0xFFFFFFF8
	movq	32(%rsp), %rdi          # 8-byte Reload
	andq	%rdi, %rax
	cmpq	$8, %rax
	jne	.LBB29_45
# BB#81:                                # %land.lhs.true353
	movabsq	$1, %rax
	jmp	.LBB29_82
.LBB29_45:
	movabsq	$0, %rax
.LBB29_82:                              # %land.lhs.true353
	leaq	-21(%rdi), %rcx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rcx
	cmpq	$8, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	orq	%rax, %rcx
	leaq	-45(%rdi), %rax
	andq	%r14, %rax
	cmpq	$8, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	orq	%rcx, %rax
	leaq	-29(%rdi), %rcx
	andq	%r14, %rcx
	cmpq	$8, %rcx
	sbbq	%r13, %r13
	andq	$1, %r13
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	orq	%rax, %r13
	je	.LBB29_86
# BB#83:                                # %cond.true377
	movl	mode_class(,%rsi,4), %eax
	addq	$-5, %rax
	andq	%r14, %rax
	cmpq	$2, %rax
	movq	$2, %rbx
	movq	%r15, %r8
	movq	56(%rsp), %r15          # 8-byte Reload
	jb	.LBB29_99
# BB#84:                                # %cond.end435.thread1205
	testq	%rdx, %rdx
	jne	.LBB29_116
	jmp	.LBB29_85
.LBB29_86:                              # %cond.false395
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	cmpq	$24, %rsi
	movq	%r15, %r11
	movq	56(%rsp), %r15          # 8-byte Reload
	jne	.LBB29_87
# BB#89:                                # %cond.true411
	movq	%r14, %rdx
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movl	target_flags(%rip), %ebx
	movq	$24, %rcx
	movq	%rbx, %rax
	shrq	%cl, %rax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB29_92
.LBB29_87:                              # %cond.false395
	movq	%r14, %r8
	movq	%r10, 16(%rsp)          # 8-byte Spill
	cmpq	$18, %rsi
	jne	.LBB29_90
# BB#88:                                # %cond.true401
	movl	target_flags(%rip), %ebx
	movq	$25, %rcx
	movq	%rbx, %rax
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB29_91
.LBB29_51:                              # %cond.true153
	movl	mode_class(,%rbx,4), %eax
	cmpq	$5, %rax
	movq	$2, %r15
	je	.LBB29_61
# BB#52:                                # %lor.rhs
	cmpq	$6, %rax
	jne	.LBB29_53
# BB#54:                                # %lor.rhs
	movabsq	$1, %r15
	incq	%r15
	jmp	.LBB29_61
.LBB29_90:                              # %cond.false415
	movl	target_flags(%rip), %ebx
	movzbl	mode_size(%rsi), %eax
	movq	$23, %rcx
	movq	%rbx, %r9
	shrq	%cl, %r9
	andq	$4, %r9
	leaq	3(%rax,%r9), %rax
	addq	$4, %r9
	cqto
	idivq	%r9
.LBB29_91:                              # %cond.end435
	movq	%r8, %rdx
.LBB29_92:                              # %cond.end435
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$2, %rax
	jl	.LBB29_115
# BB#93:                                # %cond.false482
	movq	%rdx, %r12
	movq	%r11, %rax
	cmpq	$24, %rsi
	jne	.LBB29_94
# BB#96:                                # %cond.true498
	movq	$24, %rcx
	shrq	%cl, %rbx
	andq	$2, %rbx
	xorq	$6, %rbx
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %r10          # 8-byte Reload
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rax, %r8
	movq	%r12, %r14
	jmp	.LBB29_99
.LBB29_94:                              # %cond.false482
	cmpq	$18, %rsi
	movq	%rax, %r8
	movq	%r12, %r14
	jne	.LBB29_97
# BB#95:                                # %cond.true488
	movq	$25, %rcx
	shrq	%cl, %rbx
	andq	$1, %rbx
	xorq	$3, %rbx
	jmp	.LBB29_98
.LBB29_57:                              # %cond.false175
	cmpq	$18, %rbx
	jne	.LBB29_60
# BB#58:                                # %cond.true184
	movl	target_flags(%rip), %r15d
	movq	$25, %rcx
	shrq	%cl, %r15
	andq	$1, %r15
	xorq	$3, %r15
	jmp	.LBB29_61
.LBB29_97:                              # %cond.false502
	movzbl	mode_size(%rsi), %eax
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	leaq	3(%rax,%rbx), %rax
	addq	$4, %rbx
	cqto
	idivq	%rbx
	movq	%rax, %rbx
.LBB29_98:                              # %cond.end522
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %r10          # 8-byte Reload
	movq	8(%rsp), %rdx           # 8-byte Reload
.LBB29_99:                              # %cond.end522
	movq	$0, 72(%rsp)
	movq	$1, %rcx
	testq	%rdx, %rdx
	je	.LBB29_113
# BB#100:                               # %if.then527
	movq	8(%r10), %rax
	movzbl	2(%rax), %eax
	testq	$1, %r13
	je	.LBB29_106
# BB#101:                               # %cond.true551
	movl	mode_class(,%rax,4), %eax
	cmpq	$5, %rax
	movq	$2, %rcx
	je	.LBB29_113
# BB#102:                               # %lor.rhs562
	movq	%rbx, %rcx
	movq	%r14, %rbx
	movq	%r15, %r13
	movq	%r8, %r14
	movq	%rdi, %r12
	cmpq	$6, %rax
	jne	.LBB29_103
# BB#104:                               # %lor.rhs562
	movabsq	$1, %rax
	jmp	.LBB29_105
.LBB29_106:                             # %cond.false575
	movq	%rbx, %rsi
	movq	%r14, %rbx
	cmpq	$24, %rax
	jne	.LBB29_107
# BB#109:                               # %cond.true597
	movzbl	target_flags+3(%rip), %ecx
	andq	$2, %rcx
	xorq	$6, %rcx
	jmp	.LBB29_112
.LBB29_60:                              # %cond.false200
	movl	target_flags(%rip), %ebx
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	leaq	3(%r9,%rbx), %rax
	addq	$4, %rbx
	cqto
	idivq	%rbx
	movq	%rax, %r15
	jmp	.LBB29_61
.LBB29_107:                             # %cond.false575
	movq	%rdx, %r11
	movq	%r15, %r13
	movq	%r8, %r14
	movq	%rdi, %r12
	cmpq	$18, %rax
	jne	.LBB29_110
# BB#108:                               # %cond.true584
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	movq	%rax, %rcx
	andq	$1, %rcx
	xorq	$3, %rcx
	jmp	.LBB29_111
.LBB29_139:                             # %if.then.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.insn_cuid, %rcx
	movq	$12750, %rsi            # imm = 0x31CE
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB29_53:
	movabsq	$0, %r15
	incq	%r15
.LBB29_61:                              # %cond.end220
	addq	%r14, %r15
	andq	%r12, %rsi
	cmpq	$8, %rsi
	je	.LBB29_65
# BB#62:                                # %cond.end220
	leaq	-21(%r12), %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jb	.LBB29_65
# BB#63:                                # %cond.end220
	leaq	-45(%r12), %rcx
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jb	.LBB29_65
# BB#64:                                # %cond.end220
	leaq	-29(%r12), %rcx
	andq	%rax, %rcx
	cmpq	$7, %rcx
	jbe	.LBB29_65
# BB#70:                                # %cond.false264
	movq	%r12, 32(%rsp)          # 8-byte Spill
	cmpq	$24, %rdi
	jne	.LBB29_71
# BB#73:                                # %cond.true280
	movzbl	target_flags+3(%rip), %r12d
	andq	$2, %r12
	xorq	$6, %r12
	jmp	.LBB29_75
.LBB29_103:
	movabsq	$0, %rax
.LBB29_105:                             # %lor.rhs562
	incq	%rax
	movq	%r12, %rdi
	movq	%r14, %r8
	movq	%r13, %r15
	movq	%rbx, %r14
	movq	%rcx, %rbx
	movq	%rax, %rcx
	jmp	.LBB29_113
.LBB29_110:                             # %cond.false601
	movl	target_flags(%rip), %r8d
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %r8
	andq	$4, %r8
	leaq	3(%rax,%r8), %rax
	addq	$4, %r8
	cqto
	idivq	%r8
	movq	%rax, %rcx
.LBB29_111:                             # %if.end627
	movq	%r12, %rdi
	movq	%r14, %r8
	movq	%r13, %r15
	movq	%r11, %rdx
.LBB29_112:                             # %if.end627
	movq	%rbx, %r14
	movq	%rsi, %rbx
.LBB29_113:                             # %if.end627
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	addq	%rdi, %rbx
	addq	%rdi, %rcx
	movq	%rcx, %r13
	andq	%r14, %r13
	andq	%r14, %rbx
	cmpq	%rbx, %r13
	movq	%r14, %rdx
	movq	%r15, %r14
	jae	.LBB29_115
.LBB29_114:                             # %for.body632
                                        # =>This Inner Loop Header: Depth=1
	movl	reg_raw_mode(,%r13,4), %edi
	movq	%r13, %rsi
	movq	%rcx, %r12
	movq	%rdx, %r15
	callq	gen_rtx_REG
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	leaq	72(%rsp), %r8
	callq	move_deaths
	movq	%r15, %rdx
	movq	%r12, %rcx
	incq	%rcx
	movq	%rcx, %rax
	andq	%rdx, %rax
	incq	%r13
	cmpq	%rbx, %rax
	jne	.LBB29_114
.LBB29_115:                             # %if.end640
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	movq	16(%rsp), %r10          # 8-byte Reload
	je	.LBB29_85
	jmp	.LBB29_116
.LBB29_65:                              # %cond.true246
	movq	%r12, 32(%rsp)          # 8-byte Spill
	movl	mode_class(,%rdi,4), %eax
	cmpq	$5, %rax
	movq	$2, %r12
	je	.LBB29_75
# BB#66:                                # %lor.rhs254
	cmpq	$6, %rax
	jne	.LBB29_67
# BB#68:                                # %lor.rhs254
	movabsq	$1, %r12
	incq	%r12
	jmp	.LBB29_75
.LBB29_71:                              # %cond.false264
	cmpq	$18, %rdi
	jne	.LBB29_74
# BB#72:                                # %cond.true270
	movl	target_flags(%rip), %r12d
	movq	$25, %rcx
	shrq	%cl, %r12
	andq	$1, %r12
	xorq	$3, %r12
	jmp	.LBB29_75
.LBB29_67:
	movabsq	$0, %r12
	incq	%r12
	jmp	.LBB29_75
.LBB29_74:                              # %cond.false284
	movl	target_flags(%rip), %esi
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%r8,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	movq	%rax, %r12
.LBB29_75:                              # %cond.end304
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %r15
	cmpq	%r15, %r14
	jae	.LBB29_116
# BB#76:                                # %for.body.lr.ph
	movq	32(%rsp), %rax          # 8-byte Reload
	addq	%rax, %r12
	andq	%rbx, %r12
	movq	%r14, 56(%rsp)          # 8-byte Spill
.LBB29_77:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%r14, %rax
	andq	%rbx, %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jb	.LBB29_79
# BB#78:                                # %for.body
                                        #   in Loop: Header=BB29_77 Depth=1
	cmpq	%r12, %rax
	jb	.LBB29_80
.LBB29_79:                              # %if.then315
                                        #   in Loop: Header=BB29_77 Depth=1
	movl	reg_raw_mode(,%r14,4), %eax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_REG
	movq	56(%r13), %rcx
	movq	$3, %rdi
	movq	$1, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%rax, 56(%r13)
.LBB29_80:                              # %for.inc
                                        #   in Loop: Header=BB29_77 Depth=1
	movq	56(%rsp), %rax          # 8-byte Reload
	incq	%rax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	andq	%rbx, %rax
	incq	%r14
	cmpq	%r15, %rax
	movq	16(%rsp), %r10          # 8-byte Reload
	jne	.LBB29_77
.LBB29_116:                             # %land.lhs.true643
	movq	8(%r10), %rax
	movl	(%rax), %eax
	movq	64(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	je	.LBB29_117
.LBB29_85:                              # %if.else659
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	(%rbx), %rcx
	movq	$3, %rdi
	movq	$1, %rsi
	movq	64(%rsp), %rdx          # 8-byte Reload
	callq	gen_rtx_fmt_ee
	movq	%rax, %r10
	jmp	.LBB29_118
.LBB29_117:                             # %if.then655
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	(%rbx), %rax
	movq	%rax, 16(%r10)
.LBB29_118:                             # %if.end661
	movq	%r10, (%rbx)
	movq	reg_n_info(%rip), %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	32(%rax,%rcx,8), %rax
	movl	24(%rax), %ecx
	incq	%rcx
	movl	%ecx, 24(%rax)
	jmp	.LBB29_137
.Ltmp425:
	.size	move_deaths, .Ltmp425-move_deaths
	.cfi_endproc

	.align	16, 0x90
	.type	reg_bitfield_target_p,@function
reg_bitfield_target_p:                  # @reg_bitfield_target_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp431:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp432:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp433:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp434:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp435:
	.cfi_def_cfa_offset 48
.Ltmp436:
	.cfi_offset %rbx, -40
.Ltmp437:
	.cfi_offset %r12, -32
.Ltmp438:
	.cfi_offset %r14, -24
.Ltmp439:
	.cfi_offset %r15, -16
	movzbl	(%rsi), %ecx
	movq	%rdi, %r14
	xorq	%rax, %rax
	cmpq	$39, %rcx
	jne	.LBB30_1
# BB#43:                                # %if.then206
	movq	8(%rsi), %r15
	movslq	(%r15), %rbx
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	.align	16, 0x90
.LBB30_44:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB30_45
# BB#46:                                # %for.body
                                        #   in Loop: Header=BB30_44 Depth=1
	movq	(%r15,%rbx,8), %rsi
	decq	%rbx
	movq	%r14, %rdi
	callq	reg_bitfield_target_p
	testq	%r12, %rax
	movq	$1, %rax
	je	.LBB30_44
	jmp	.LBB30_47
.LBB30_1:                               # %entry
	cmpq	$47, %rcx
	jne	.LBB30_2
# BB#3:                                 # %if.then
	movq	8(%rsi), %rcx
	movzbl	(%rcx), %edx
	cmpq	$133, %rdx
	je	.LBB30_6
# BB#4:                                 # %if.then
	cmpq	$64, %rdx
	jne	.LBB30_47
# BB#5:                                 # %if.then11
	movq	8(%rcx), %rcx
.LBB30_6:                               # %if.end19
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB30_8
# BB#7:                                 # %if.then23
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
.LBB30_8:                               # %if.end27
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	movabsq	$0, %rax
	jne	.LBB30_47
# BB#9:                                 # %if.end32
	movl	8(%rcx), %r8d
	cmpq	$52, %r8
	ja	.LBB30_11
# BB#10:                                # %if.end32
	movl	8(%r14), %r10d
	movabsq	$4294967295, %r9        # imm = 0xFFFFFFFF
	movq	%r10, %r11
	andq	%r9, %r11
	cmpq	$53, %r11
	jae	.LBB30_11
# BB#14:                                # %if.end42
	movabsq	$4294967288, %rdi       # imm = 0xFFFFFFF8
	movq	%r8, %rax
	andq	%rdi, %rax
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$8, %rax
	je	.LBB30_18
# BB#15:                                # %if.end42
	leaq	-21(%r8), %rax
	andq	%r9, %rax
	cmpq	$8, %rax
	jb	.LBB30_18
# BB#16:                                # %if.end42
	leaq	-45(%r8), %rax
	andq	%r9, %rax
	cmpq	$8, %rax
	jb	.LBB30_18
# BB#17:                                # %if.end42
	leaq	-29(%r8), %rax
	andq	%r9, %rax
	cmpq	$7, %rax
	jbe	.LBB30_18
# BB#23:                                # %cond.false
	cmpq	$24, %rdx
	jne	.LBB30_24
# BB#26:                                # %cond.true90
	movzbl	target_flags+3(%rip), %esi
	andq	$2, %rsi
	xorq	$6, %rsi
	jmp	.LBB30_28
.LBB30_45:
	xorq	%rax, %rax
	jmp	.LBB30_47
.LBB30_2:
	xorq	%rax, %rax
.LBB30_47:                              # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB30_11:                              # %if.then40
	cmpq	%r14, %rcx
	jne	.LBB30_12
# BB#13:                                # %if.then40
	movabsq	$1, %rax
	jmp	.LBB30_47
.LBB30_18:                              # %cond.true
	movl	mode_class(,%rdx,4), %eax
	cmpq	$5, %rax
	movq	$2, %rsi
	je	.LBB30_28
# BB#19:                                # %lor.rhs
	cmpq	$6, %rax
	jne	.LBB30_20
# BB#21:                                # %lor.rhs
	movabsq	$1, %rsi
	incq	%rsi
	jmp	.LBB30_28
.LBB30_12:
	movabsq	$0, %rax
	jmp	.LBB30_47
.LBB30_24:                              # %cond.false
	cmpq	$18, %rdx
	jne	.LBB30_27
# BB#25:                                # %cond.true82
	movl	target_flags(%rip), %esi
	movq	$25, %rcx
	shrq	%cl, %rsi
	andq	$1, %rsi
	xorq	$3, %rsi
	jmp	.LBB30_28
.LBB30_20:
	movabsq	$0, %rsi
	incq	%rsi
	jmp	.LBB30_28
.LBB30_27:                              # %cond.false94
	movl	target_flags(%rip), %esi
	movzbl	mode_size(%rdx), %eax
	movq	$23, %rcx
	shrq	%cl, %rsi
	andq	$4, %rsi
	leaq	3(%rax,%rsi), %rax
	addq	$4, %rsi
	cqto
	idivq	%rsi
	movq	%rax, %rsi
.LBB30_28:                              # %cond.end110
	movzbl	2(%r14), %eax
	addq	%r8, %rsi
	andq	%r10, %rdi
	cmpq	$8, %rdi
	je	.LBB30_32
# BB#29:                                # %cond.end110
	leaq	-21(%r10), %rcx
	andq	%r9, %rcx
	cmpq	$8, %rcx
	jb	.LBB30_32
# BB#30:                                # %cond.end110
	leaq	-45(%r10), %rcx
	andq	%r9, %rcx
	cmpq	$8, %rcx
	jb	.LBB30_32
# BB#31:                                # %cond.end110
	leaq	-29(%r10), %rcx
	andq	%r9, %rcx
	cmpq	$7, %rcx
	jbe	.LBB30_32
# BB#37:                                # %cond.false154
	cmpq	$24, %rax
	jne	.LBB30_38
# BB#40:                                # %cond.true170
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB30_42
.LBB30_32:                              # %cond.true136
	movl	mode_class(,%rax,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB30_42
# BB#33:                                # %lor.rhs144
	cmpq	$6, %rcx
	jne	.LBB30_34
# BB#35:                                # %lor.rhs144
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB30_42
.LBB30_38:                              # %cond.false154
	cmpq	$18, %rax
	jne	.LBB30_41
# BB#39:                                # %cond.true160
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB30_42
.LBB30_34:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB30_42
.LBB30_41:                              # %cond.false174
	movl	target_flags(%rip), %edi
	movzbl	mode_size(%rax), %eax
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rax,%rdi), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
.LBB30_42:                              # %cond.end194
	addq	%r10, %rax
	andq	%r9, %rax
	cmpq	%rax, %r8
	sbbq	%rcx, %rcx
	andq	%r9, %rsi
	cmpq	%rsi, %r11
	sbbq	%rax, %rax
	andq	%rcx, %rax
	andq	$1, %rax
	jmp	.LBB30_47
.Ltmp440:
	.size	reg_bitfield_target_p, .Ltmp440-reg_bitfield_target_p
	.cfi_endproc

	.align	16, 0x90
	.type	gen_binary,@function
gen_binary:                             # @gen_binary
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp447:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp448:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp449:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp450:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp451:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp452:
	.cfi_def_cfa_offset 64
.Ltmp453:
	.cfi_offset %rbx, -48
.Ltmp454:
	.cfi_offset %r12, -40
.Ltmp455:
	.cfi_offset %r13, -32
.Ltmp456:
	.cfi_offset %r14, -24
.Ltmp457:
	.cfi_offset %r15, -16
	movq	%rcx, %r12
	movq	%rdi, %r14
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	rtx_class(%rax), %r15d
	movq	%rdx, %r13
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	cmpq	$99, %r15
	jne	.LBB31_5
# BB#1:                                 # %if.end.thread
	movq	%r13, %rdi
	movq	%r12, %rsi
	callq	swap_commutative_operands_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	movq	%r13, %rbx
	je	.LBB31_3
# BB#2:                                 # %if.end.thread
	movq	%r12, %rbx
.LBB31_3:                               # %if.end.thread
	testq	%rcx, %rcx
	je	.LBB31_7
# BB#4:                                 # %if.end.thread
	movq	%r13, %r12
	jmp	.LBB31_7
.LBB31_5:                               # %if.end
	cmpq	$60, %r15
	jne	.LBB31_6
# BB#8:                                 # %if.then7
	movl	(%r13), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jne	.LBB31_11
# BB#9:                                 # %if.then7
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%r12, %rax
	jne	.LBB31_11
# BB#10:                                # %if.then15
	movq	8(%r13), %rax
	movq	16(%r13), %r12
	movl	(%rax), %esi
	movq	%rax, %r13
.LBB31_11:                              # %if.end23
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	jne	.LBB31_13
# BB#12:                                # %if.then26
	movzbl	2(%r12), %esi
.LBB31_13:                              # %if.end30
	movq	%r14, %rdi
	movq	%r13, %rdx
	movq	%r12, %rcx
	callq	simplify_relational_operation
	jmp	.LBB31_14
.LBB31_6:
	movq	%r13, %rbx
.LBB31_7:                               # %if.else
	movq	%r14, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movq	%rbx, %rdx
	movq	%r12, %rcx
	callq	simplify_binary_operation
	movq	%rbx, %r13
.LBB31_14:                              # %if.end33
	testq	%rax, %rax
	jne	.LBB31_24
# BB#15:                                # %if.end36
	cmpq	$99, %r15
	jne	.LBB31_19
# BB#16:                                # %land.lhs.true42
	movq	%r13, %rdi
	movq	%r12, %rsi
	callq	swap_commutative_operands_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB31_19
# BB#17:                                # %if.then45
	movq	%r14, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movq	%r12, %rdx
	movq	%r13, %rcx
	jmp	.LBB31_18
.LBB31_19:                              # %if.else47
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$83, %rax
	jne	.LBB31_25
# BB#20:                                # %land.lhs.true50
	movzbl	(%r12), %eax
	cmpq	$54, %rax
	jne	.LBB31_25
# BB#21:                                # %land.lhs.true55
	movq	$32, %rcx
	movq	8(%rsp), %rax           # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_bitsize(%rax,%rax), %eax
	cmpq	$64, %rax
	ja	.LBB31_25
# BB#22:                                # %land.lhs.true61
	movq	%r13, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	callq	nonzero_bits
	movq	8(%r12), %rcx
	notq	%rcx
	testq	%rcx, %rax
	je	.LBB31_23
.LBB31_25:                              # %if.end69
	movq	%r14, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movq	%r13, %rdx
	movq	%r12, %rcx
.LBB31_18:                              # %if.then45
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_ee  # TAILCALL
.LBB31_23:
	movq	%r13, %rax
.LBB31_24:                              # %return
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp458:
	.size	gen_binary, .Ltmp458-gen_binary
	.cfi_endproc

	.align	16, 0x90
	.type	make_extraction,@function
make_extraction:                        # @make_extraction
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp465:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp466:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp467:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp468:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp469:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp470:
	.cfi_def_cfa_offset 128
.Ltmp471:
	.cfi_offset %rbx, -48
.Ltmp472:
	.cfi_offset %r12, -40
.Ltmp473:
	.cfi_offset %r13, -32
.Ltmp474:
	.cfi_offset %r14, -24
.Ltmp475:
	.cfi_offset %r15, -16
	movq	%rsi, %rbx
	movq	136(%rsp), %r12
	movzbl	2(%rbx), %eax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	%r9, 56(%rsp)           # 8-byte Spill
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%rcx, %r15
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	$1, %rsi
	movq	$1, %rdx
	movq	%r8, %rdi
	callq	mode_for_size
	movzbl	(%rbx), %ecx
	movq	%rax, %rdx
	xorq	%r14, %r14
	cmpq	$63, %rcx
	jne	.LBB32_1
# BB#3:                                 # %land.lhs.true
	movq	%rdx, %r13
	movq	%rbx, %rdi
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB32_4
# BB#5:                                 # %if.then9
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	movq	%r13, %rdx
	jne	.LBB32_7
# BB#6:                                 # %if.then17
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	jmp	.LBB32_7
.LBB32_1:                               # %entry
	cmpq	$48, %rcx
	jne	.LBB32_7
# BB#2:                                 # %if.then
	movq	8(%rbx), %rbx
	movq	$1, %r14
	jmp	.LBB32_7
.LBB32_4:
	movq	%r13, %rdx
.LBB32_7:                               # %if.end28
	movq	%rbx, 64(%rsp)          # 8-byte Spill
	movl	(%rbx), %esi
	movq	$16, %rcx
	movq	%rsi, %r13
	shrq	%cl, %r13
	xorq	%rbx, %rbx
	testq	%r15, %r15
	je	.LBB32_10
# BB#8:                                 # %land.lhs.true33
	movzbl	(%r15), %eax
	cmpq	$54, %rax
	movq	%r15, %rbx
	jne	.LBB32_10
# BB#9:                                 # %if.then38
	movq	8(%r15), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	xorq	%rbx, %rbx
.LBB32_10:                              # %if.end41
	movq	%r15, 24(%rsp)          # 8-byte Spill
	andq	$255, %r13
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	%rdx, %r15
	andq	%r8, %r15
	cmpq	$51, %r15
	je	.LBB32_57
# BB#11:                                # %land.lhs.true44
	testq	%r14, %r14
	je	.LBB32_13
# BB#12:                                # %land.lhs.true44
	cmpq	%r15, %r13
	jne	.LBB32_57
.LBB32_13:                              # %land.lhs.true49
	testq	%rbx, %rbx
	jne	.LBB32_57
# BB#14:                                # %land.lhs.true52
	movq	%rdx, %r9
	movl	target_flags(%rip), %edi
	movq	$20, %rcx
	shrq	%cl, %rdi
	andq	$32, %rdi
	addq	$32, %rdi
	movabsq	$4294967264, %r10       # imm = 0xFFFFFFE0
	andq	%r10, %rdi
	movq	72(%rsp), %rax          # 8-byte Reload
	cqto
	idivq	%rdi
	testq	%rdx, %rdx
	je	.LBB32_16
# BB#15:
	movq	%r9, %rdi
	jmp	.LBB32_21
.LBB32_16:                              # %land.lhs.true57
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB32_18
# BB#17:
	movq	%r9, %rdi
	jmp	.LBB32_21
.LBB32_18:                              # %land.lhs.true62
	movq	128(%rsp), %rcx
	testq	%r8, %rcx
	movq	%r9, %rdi
	je	.LBB32_28
# BB#19:                                # %lor.lhs.false
	cmpq	$61, %rax
	jne	.LBB32_21
# BB#20:                                # %land.lhs.true68
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	$64, %rdi
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	movq	%r10, %rbx
	callq	have_insn_for
	movq	%rbx, %r10
	movq	16(%rsp), %rdi          # 8-byte Reload
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	8(%rsp), %rbx           # 8-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx), %esi
	testq	%r8, %rax
	jne	.LBB32_28
.LBB32_21:                              # %lor.lhs.false71
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB32_57
# BB#22:                                # %lor.lhs.false71
	testq	%rbx, %rbx
	jne	.LBB32_57
# BB#23:                                # %lor.lhs.false71
	movq	72(%rsp), %rax          # 8-byte Reload
	andq	$7, %rax
	jne	.LBB32_57
# BB#24:                                # %land.lhs.true83
	movzbl	mode_bitsize(%r13,%r13), %eax
	movq	$32, %rcx
	movq	%rdi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movzbl	mode_bitsize(%rdx,%rdx), %ecx
	cmpq	%rcx, %rax
	jb	.LBB32_57
# BB#25:                                # %land.lhs.true91
	cmpq	%r15, %r13
	je	.LBB32_28
# BB#26:                                # %lor.lhs.false94
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	8(%rax), %rdi
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	movq	%r10, %rbx
	callq	mode_dependent_address_p
	movq	%rbx, %r10
	movq	16(%rsp), %rdi          # 8-byte Reload
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	8(%rsp), %rbx           # 8-byte Reload
	testq	%r8, %rax
	jne	.LBB32_57
# BB#27:                                # %land.lhs.true100
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %esi
	testq	$134217728, %rsi        # imm = 0x8000000
	je	.LBB32_28
.LBB32_57:                              # %if.end204
	movq	128(%rsp), %rax
	andq	%r8, %rax
	movq	%rbx, %rcx
	movq	72(%rsp), %rdx          # 8-byte Reload
	orq	%rdx, %rcx
	orq	%rax, %rcx
	andq	%r8, %r12
	orq	%rcx, %r12
	orq	%r14, %r12
	jne	.LBB32_58
# BB#59:                                # %if.end204
	movabsq	$1, %rax
	jmp	.LBB32_60
.LBB32_58:
	movabsq	$0, %rax
.LBB32_60:                              # %if.end204
	movq	56(%rsp), %r12          # 8-byte Reload
	xorq	%r9, %r9
	testq	%r8, %r12
	je	.LBB32_62
# BB#61:                                # %if.end204
	testq	%rax, %rax
	jne	.LBB32_142
.LBB32_62:                              # %if.end219
	testq	%r14, %r14
	jne	.LBB32_67
# BB#63:                                # %land.lhs.true221
	movq	64(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB32_67
# BB#64:                                # %land.lhs.true226
	testq	%rbx, %rbx
	je	.LBB32_65
# BB#66:                                # %lor.lhs.false235
	cmpq	$1, 40(%rsp)            # 8-byte Folded Reload
	jne	.LBB32_142
	jmp	.LBB32_67
.LBB32_65:                              # %land.lhs.true229
	movq	32(%rsp), %rax          # 8-byte Reload
	movzbl	mode_bitsize(%rax,%rax), %eax
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	leaq	(%rdx,%rcx), %rcx
	cmpq	%rax, %rcx
	ja	.LBB32_142
.LBB32_67:                              # %if.end242
	movq	128(%rsp), %rax
	movq	%rbx, %r15
	testq	%r8, %rax
	je	.LBB32_68
# BB#69:                                # %land.lhs.true244
	xorq	%rdi, %rdi
	movq	%r8, %rsi
	movq	%r8, %rbx
	callq	mode_for_extraction
	movq	%rbx, %r8
	andq	%r8, %rax
	cmpq	$59, %rax
	movl	word_mode(%rip), %r14d
	movq	%r14, 16(%rsp)          # 8-byte Spill
	movq	%r14, %rcx
	je	.LBB32_71
# BB#70:                                # %if.then248
	xorq	%rdi, %rdi
	xorq	%rsi, %rsi
	movq	%r8, %r14
	callq	mode_for_extraction
	movq	%rax, %rbx
	xorq	%rdi, %rdi
	movq	$2, %rsi
	callq	mode_for_extraction
	movq	%rax, 16(%rsp)          # 8-byte Spill
	xorq	%rdi, %rdi
	movq	$3, %rsi
	callq	mode_for_extraction
	movq	%rbx, %rcx
	movq	%r14, %r8
	movq	%rax, %r14
	jmp	.LBB32_71
.LBB32_68:
	movl	word_mode(%rip), %r14d
	movq	%r14, 16(%rsp)          # 8-byte Spill
	movq	%r14, %rcx
.LBB32_71:                              # %if.end252
	movq	128(%rsp), %rax
	testq	%r8, %rax
	jne	.LBB32_72
# BB#73:                                # %if.end252
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	testq	%r8, %r12
	je	.LBB32_76
# BB#74:                                # %land.lhs.true256
	movq	$2, %rdi
	movq	%r8, %rsi
	movq	%r8, %rbx
	callq	mode_for_extraction
	movq	%rbx, %r8
	andq	%r8, %rax
	cmpq	$59, %rax
	je	.LBB32_76
# BB#75:                                # %if.then260
	movq	$2, %rdi
	movq	$1, %rsi
	movq	%r8, %r14
	callq	mode_for_extraction
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$2, %rdi
	movq	$3, %rsi
	callq	mode_for_extraction
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	$2, %rdi
	xorq	%rsi, %rsi
	callq	mode_for_extraction
	movq	%r14, %r8
	movq	%rax, %r14
	jmp	.LBB32_76
.LBB32_72:
	movq	%rcx, 8(%rsp)           # 8-byte Spill
.LBB32_76:                              # %if.end264
	movq	128(%rsp), %rax
	orq	%r12, %rax
	testq	%r8, %rax
	je	.LBB32_78
# BB#77:
	movq	48(%rsp), %rbx          # 8-byte Reload
	jmp	.LBB32_80
.LBB32_78:                              # %land.lhs.true268
	movq	$1, %rdi
	movq	%r8, %rsi
	movq	%r8, %rbx
	callq	mode_for_extraction
	movq	%rbx, %r8
	andq	%r8, %rax
	cmpq	$59, %rax
	movq	48(%rsp), %rbx          # 8-byte Reload
	je	.LBB32_80
# BB#79:                                # %if.then272
	movq	$1, %rdi
	movq	$1, %rsi
	movq	%r8, %r14
	callq	mode_for_extraction
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$1, %rdi
	movq	$3, %rsi
	callq	mode_for_extraction
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	$1, %rdi
	xorq	%rsi, %rsi
	callq	mode_for_extraction
	movq	%r14, %r8
	movq	%rax, %r14
.LBB32_80:                              # %if.end276
	testq	%r8, %rbx
	je	.LBB32_84
# BB#81:                                # %land.lhs.true279
	movq	$32, %rcx
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %eax
	movq	$32, %rcx
	movq	%rbx, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	movq	%rbx, %rax
	jb	.LBB32_83
# BB#82:                                # %select.mid
	movq	%r14, %rax
.LBB32_83:                              # %select.end
	movq	%rax, %r14
.LBB32_84:                              # %if.end289
	testq	%r15, %r15
	movq	8(%rsp), %rsi           # 8-byte Reload
	je	.LBB32_89
# BB#85:                                # %land.lhs.true291
	movzbl	2(%r15), %eax
	testq	%rax, %rax
	je	.LBB32_89
# BB#86:                                # %land.lhs.true297
	movq	$32, %rcx
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%rdi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movzbl	mode_size(%rdx), %ecx
	movzbl	mode_size(%rax), %edx
	cmpq	%rdx, %rcx
	jb	.LBB32_88
# BB#87:                                # %select.mid2
	movq	%rdi, %rax
.LBB32_88:                              # %select.end1
	movq	%rax, 16(%rsp)          # 8-byte Spill
.LBB32_89:                              # %if.end313
	movq	64(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB32_95
# BB#90:                                # %if.else319
	movl	byte_mode(%rip), %ecx
	movq	%rcx, %rax
	andq	%r8, %rax
	cmpq	%rax, %r13
	jne	.LBB32_92
# BB#91:
	movq	%rcx, %rsi
	jmp	.LBB32_95
.LBB32_92:                              # %land.lhs.true322
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdi
	movq	%r8, %r12
	callq	mode_dependent_address_p
	movq	%r12, %r8
	testq	%r8, %rax
	jne	.LBB32_94
# BB#93:                                # %lor.lhs.false328
	movq	64(%rsp), %rax          # 8-byte Reload
	movzbl	3(%rax), %eax
	testq	$8, %rax
	movl	byte_mode(%rip), %eax
	movq	%rax, %rsi
	je	.LBB32_95
.LBB32_94:                              # %if.then333
	movq	%r14, %rsi
.LBB32_95:                              # %if.end335
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	testq	%r8, %rsi
	movq	40(%rsp), %r12          # 8-byte Reload
	je	.LBB32_107
# BB#96:                                # %land.lhs.true338
	movq	$32, %rcx
	movq	%rsi, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movzbl	mode_size(%rbx), %eax
	movq	32(%rsp), %rcx          # 8-byte Reload
	movzbl	mode_size(%rcx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB32_107
# BB#97:                                # %land.lhs.true347
	movq	64(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB32_107
# BB#98:                                # %land.lhs.true352
	movq	%rsi, %r14
	andq	%r8, %r14
	cmpq	%r14, %r13
	je	.LBB32_101
# BB#99:                                # %lor.lhs.false355
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdi
	movq	%rsi, %r12
	callq	mode_dependent_address_p
	movq	%r12, %rsi
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	40(%rsp), %r12          # 8-byte Reload
	testq	%r8, %rax
	jne	.LBB32_107
# BB#100:                               # %land.lhs.true361
	movq	64(%rsp), %rax          # 8-byte Reload
	movzbl	3(%rax), %eax
	testq	$8, %rax
	je	.LBB32_101
.LBB32_107:                             # %if.else389
	movq	64(%rsp), %r13          # 8-byte Reload
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB32_109
# BB#108:
	movq	%r15, %rbx
	jmp	.LBB32_117
.LBB32_109:                             # %if.then394
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	%rsi, %rcx
	andq	%r8, %rcx
	cmpq	%rcx, %rax
	jne	.LBB32_111
# BB#110:                               # %if.then394.if.end411_crit_edge
	movq	72(%rsp), %rax          # 8-byte Reload
	leaq	(%rax,%r12), %rax
.LBB32_113:                             # %if.end411
	testq	%r15, %r15
	movq	%r15, %r14
	movq	$-1, %rdx
	movq	%r8, %rbx
	jne	.LBB32_116
# BB#114:                               # %if.end411
	cmpq	$63, %rax
	ja	.LBB32_116
# BB#115:                               # %cond.false418
	movq	$1, %rdx
	movq	%r12, %rcx
	shlq	%cl, %rdx
	decq	%rdx
	movq	72(%rsp), %rcx          # 8-byte Reload
	shlq	%cl, %rdx
.LBB32_116:                             # %cond.end422
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%r13, %rdi
	callq	force_to_mode
	movq	%rax, %r13
	movq	%rbx, %r8
	movq	%r14, %rbx
.LBB32_117:                             # %if.end426
	xorq	%r15, %r15
	testq	%rbx, %rbx
	je	.LBB32_131
# BB#118:                               # %land.lhs.true429
	movq	$32, %rcx
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	%rsi, %rax
	shlq	%cl, %rax
	movzbl	2(%rbx), %edx
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rdx), %ecx
	cmpq	%rcx, %rax
	jbe	.LBB32_128
# BB#119:                               # %if.then441
	movq	$121, %rdi
	movq	%rsi, %r14
	movq	%rbx, %rdx
	callq	gen_rtx_fmt_e
	movl	flag_expensive_optimizations(%rip), %ecx
	movq	%rax, %r15
	testq	%rcx, %rcx
	je	.LBB32_120
# BB#121:                               # %land.lhs.true445
	movzbl	2(%rbx), %esi
	movzbl	mode_bitsize(%rsi,%rsi), %eax
	cmpq	$64, %rax
	ja	.LBB32_122
# BB#123:                               # %land.lhs.true454
	movq	%rbx, %rdi
	callq	nonzero_bits
	movzbl	2(%rbx), %ecx
	movq	mode_mask_array(,%rcx,8), %rdx
	movq	$1, %rcx
	shrq	%cl, %rdx
	notq	%rdx
	testq	%rdx, %rax
	je	.LBB32_125
# BB#124:
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	jmp	.LBB32_131
.LBB32_128:                             # %land.lhs.true482
	jae	.LBB32_129
# BB#130:                               # %if.then494
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movq	%r8, %rbx
	callq	gen_lowpart_for_combine
	movq	%rbx, %r8
	movq	%rax, %r15
	jmp	.LBB32_131
.LBB32_111:                             # %land.lhs.true400
	testq	%r15, %r15
	movabsq	$0, %r9
	jne	.LBB32_142
# BB#112:                               # %lor.lhs.false403
	movq	$32, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_bitsize(%rax,%rax), %ecx
	movq	72(%rsp), %rax          # 8-byte Reload
	leaq	(%rax,%r12), %rax
	cmpq	%rcx, %rax
	ja	.LBB32_142
	jmp	.LBB32_113
.LBB32_129:
	movq	%rbx, %r15
	jmp	.LBB32_138
.LBB32_120:
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	jmp	.LBB32_131
.LBB32_101:                             # %if.then366
	xorq	%r9, %r9
	testq	%r15, %r15
	jne	.LBB32_103
# BB#102:                               # %if.then370
	movq	$63, %rcx
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%rax, %r9
	sarq	%cl, %r9
	movq	$61, %rcx
	shrq	%cl, %r9
	movzbl	mode_bitsize(%rbx,%rbx), %ecx
	addq	%rax, %r9
	cqto
	idivq	%rcx
	movq	$3, %rcx
	sarq	%cl, %r9
	movq	%rdx, 72(%rsp)          # 8-byte Spill
.LBB32_103:                             # %if.end379
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %r9
	movq	%r15, %rbx
	jne	.LBB32_106
# BB#104:                               # %if.end379
	cmpq	%r14, %r13
	jne	.LBB32_106
# BB#105:
	movq	64(%rsp), %r13          # 8-byte Reload
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	jmp	.LBB32_117
.LBB32_122:
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	jmp	.LBB32_131
.LBB32_28:                              # %if.then105
	movq	%rdi, %r14
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$61, %rsi
	movq	56(%rsp), %r12          # 8-byte Reload
	jne	.LBB32_29
# BB#31:                                # %if.then117
	cmpq	%r15, %r13
	jne	.LBB32_33
# BB#32:
	movq	64(%rsp), %r9           # 8-byte Reload
	jmp	.LBB32_38
.LBB32_106:                             # %if.then385
	movq	$32, %rcx
	shlq	%cl, %r9
	movq	$32, %rcx
	sarq	%cl, %r9
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	%r9, %rdx
	callq	adjust_address_1
	movq	%rax, %r13
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	jmp	.LBB32_117
.LBB32_125:                             # %if.then469
	movq	$120, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %r14
	movq	$47, %rsi
	movq	%r14, %rdi
	callq	rtx_cost
	movq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	rtx_cost
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rbx
	jl	.LBB32_127
# BB#126:                               # %if.then469
	movq	%r15, %r14
.LBB32_127:                             # %if.then469
	movq	%r14, %r15
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
.LBB32_131:                             # %if.end497
	testq	%r15, %r15
	jne	.LBB32_136
# BB#132:                               # %if.end497
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB32_136
# BB#133:                               # %land.lhs.true503
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	8(%rdx), %rax
	movq	72(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	je	.LBB32_135
# BB#134:                               # %land.lhs.true503
	movabsq	$0, %rdx
.LBB32_135:                             # %land.lhs.true503
	movq	%rdx, %r15
	jne	.LBB32_137
	jmp	.LBB32_138
.LBB32_136:                             # %if.else510
	testq	%r15, %r15
	jne	.LBB32_138
.LBB32_137:                             # %if.then513
	xorq	%rdi, %rdi
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	%r8, %rbx
	callq	gen_rtx_CONST_INT
	movq	%rbx, %r8
	movq	%rax, %r15
.LBB32_138:                             # %if.end516
	movq	56(%rsp), %rax          # 8-byte Reload
	testq	%r8, %rax
	movq	%r8, %r14
	je	.LBB32_139
# BB#140:                               # %if.end516
	movabsq	$1, %rbx
	jmp	.LBB32_141
.LBB32_139:
	movabsq	$0, %rbx
.LBB32_141:                             # %if.end516
	orq	$132, %rbx
	xorq	%rdi, %rdi
	movq	%r12, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movq	%r13, %rdx
	movq	%rax, %rcx
	movq	%r15, %r8
	callq	gen_rtx_fmt_eee
	movq	%rax, %r9
	movq	128(%rsp), %rax
	testq	%r14, %rax
	jne	.LBB32_142
# BB#144:                               # %if.then522
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	%r9, %rsi
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_lowpart_for_combine  # TAILCALL
.LBB32_29:                              # %if.then105
	movq	%r8, %rbx
	cmpq	$66, %rsi
	jne	.LBB32_34
# BB#30:                                # %if.then110
	movq	$63, %rcx
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rdx
	sarq	%cl, %rdx
	movq	$61, %rcx
	shrq	%cl, %rdx
	addq	%rax, %rdx
	movq	$3, %rcx
	sarq	%cl, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	%r14, %rsi
	callq	adjust_address_1
	jmp	.LBB32_37
.LBB32_33:                              # %if.then120
	movl	target_flags(%rip), %esi
	andq	$33554432, %rsi         # imm = 0x2000000
	movq	$20, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	addq	$32, %rdi
	andq	%r10, %rdi
	movq	72(%rsp), %rax          # 8-byte Reload
	cqto
	idivq	%rdi
	movq	$23, %rcx
	shrq	%cl, %rsi
	addq	$4, %rsi
	movabsq	$4294967292, %rdx       # imm = 0xFFFFFFFC
	andq	%rsi, %rdx
	imulq	%rax, %rdx
	movq	%r14, %rdi
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	%r8, %rbx
	callq	gen_rtx_SUBREG
	movq	%rbx, %r8
	movq	%rax, %r9
	jmp	.LBB32_38
.LBB32_34:                              # %if.else134
	movq	$-1, %rdx
	movq	40(%rsp), %rcx          # 8-byte Reload
	cmpq	$63, %rcx
	movq	64(%rsp), %rdi          # 8-byte Reload
	ja	.LBB32_36
# BB#35:                                # %cond.false
	movq	$1, %rdx
	shlq	%cl, %rdx
	decq	%rdx
.LBB32_36:                              # %cond.end
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%r14, %rsi
	callq	force_to_mode
.LBB32_37:                              # %if.end140
	movq	%rax, %r9
	movq	%rbx, %r8
.LBB32_38:                              # %if.end140
	movq	128(%rsp), %rax
	testq	%r8, %rax
	je	.LBB32_43
# BB#39:                                # %if.then142
	movzbl	(%r9), %eax
	cmpq	$63, %rax
	jne	.LBB32_40
# BB#42:                                # %cond.false155
	movq	$64, %rdi
	xorq	%rsi, %rsi
	jmp	.LBB32_55
.LBB32_43:                              # %if.end161
	movq	48(%rsp), %rax          # 8-byte Reload
	andq	%r8, %rax
	cmpq	%rax, %r15
	je	.LBB32_142
# BB#44:                                # %if.end165
	movzbl	(%r9), %eax
	cmpq	$54, %rax
	jne	.LBB32_45
# BB#143:                               # %if.then170
	movq	8(%r9), %rdi
	movq	48(%rsp), %rsi          # 8-byte Reload
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_CONST_INT  # TAILCALL
.LBB32_40:                              # %if.then142
	cmpq	$66, %rax
	je	.LBB32_142
# BB#41:                                # %cond.true153
	movq	const_int_rtx+512(%rip), %rdx
	movq	$49, %rdi
	movq	%r14, %rsi
	jmp	.LBB32_56
.LBB32_45:                              # %if.end176
	movq	48(%rsp), %r15          # 8-byte Reload
	movl	flag_expensive_optimizations(%rip), %eax
	testq	%rax, %rax
	je	.LBB32_51
# BB#46:                                # %land.lhs.true178
	movq	$32, %rcx
	movq	%r14, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movzbl	mode_bitsize(%rbx,%rbx), %eax
	cmpq	$64, %rax
	ja	.LBB32_51
# BB#47:                                # %land.lhs.true184
	movq	%r9, %rdi
	movq	%r14, %rsi
	movq	%r8, %r14
	movq	%r9, %r13
	callq	nonzero_bits
	movq	%r13, %r9
	movq	%r14, %r8
	movq	mode_mask_array(,%rbx,8), %rdx
	movq	$1, %rcx
	shrq	%cl, %rdx
	notq	%rdx
	testq	%rdx, %rax
	je	.LBB32_48
.LBB32_51:                              # %if.end200
	testq	%r8, %r12
	je	.LBB32_52
# BB#53:                                # %if.end200
	movabsq	$1, %rdi
	jmp	.LBB32_54
.LBB32_52:
	movabsq	$0, %rdi
.LBB32_54:                              # %if.end200
	movq	%r15, %rsi
	orq	$120, %rdi
.LBB32_55:                              # %if.end200
	movq	%r9, %rdx
.LBB32_56:                              # %if.end200
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_e  # TAILCALL
.LBB32_48:                              # %if.then191
	movq	$121, %rdi
	movq	%r15, %rbx
	movq	%rbx, %rsi
	movq	%r9, %rdx
	movq	%r9, %r15
	callq	gen_rtx_fmt_e
	movq	%rax, %r14
	movq	$120, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %r15
	movq	$47, %rsi
	movq	%r14, %rdi
	callq	rtx_cost
	movq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	rtx_cost
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rbx
	jg	.LBB32_50
# BB#49:                                # %if.then191
	movq	%r14, %r15
.LBB32_50:                              # %if.then191
	movq	%r15, %r9
.LBB32_142:                             # %return
	movq	%r9, %rax
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp476:
	.size	make_extraction, .Ltmp476-make_extraction
	.cfi_endproc

	.align	16, 0x90
	.type	force_to_mode,@function
force_to_mode:                          # @force_to_mode
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp483:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp484:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp485:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp486:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp487:
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
.Ltmp488:
	.cfi_def_cfa_offset 128
.Ltmp489:
	.cfi_offset %rbx, -48
.Ltmp490:
	.cfi_offset %r12, -40
.Ltmp491:
	.cfi_offset %r13, -32
.Ltmp492:
	.cfi_offset %r14, -24
.Ltmp493:
	.cfi_offset %r15, -16
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rdx, %r10
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rdi, %rax
	movq	$32, %rcx
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	jmp	.LBB33_1
.LBB33_205:                             # %if.then568
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rbx), %rax
	movq	16(%rbx), %rcx
	movq	16(%rax), %rax
	movq	8(%rcx), %rsi
	movq	8(%rax), %rcx
	andq	%r12, %rsi
	shlq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	8(%rbx), %rdx
	movl	(%rbx), %esi
	movq	%rsi, %rdi
	movq	$16, %rcx
	movq	8(%rdx), %rdx
	shrq	%cl, %rsi
	andq	$65535, %rdi            # imm = 0xFFFF
	andq	$255, %rsi
	movq	%rax, %rcx
	callq	gen_binary
	movq	8(%rbx), %rcx
	movq	16(%rcx), %rcx
	movzbl	2(%rbx), %esi
	movq	$90, %rdi
	movq	%rax, %rdx
	callq	gen_binary
	movq	%r12, %r10
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	%r15, %r14
	.align	16, 0x90
.LBB33_1:                               # %tailrecurse
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %r9
	movl	(%r9), %esi
	movq	%rsi, %r13
	andq	$65535, %r13            # imm = 0xFFFF
	testq	%r14, %r8
	movq	$1, %rdx
	jne	.LBB33_4
# BB#2:                                 # %switch.early.test
                                        #   in Loop: Header=BB33_1 Depth=1
	leaq	-77(%r13), %rcx
	movq	%rcx, %rax
	andq	%r14, %rax
	xorq	%rdx, %rdx
	cmpq	$9, %rax
	ja	.LBB33_4
# BB#3:                                 # %switch.lookup
                                        #   in Loop: Header=BB33_1 Depth=1
	andq	$1023, %rcx             # imm = 0x3FF
	movq	$769, %rdx              # imm = 0x301
	shrq	%cl, %rdx
	andq	$1, %rdx
.LBB33_4:                               # %lor.end
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$50, %r13
	movq	56(%rsp), %rbx          # 8-byte Reload
	jbe	.LBB33_5
.LBB33_6:                               # %if.end
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r8, 72(%rsp)           # 8-byte Spill
	movq	%r14, %r12
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	mode_class(,%rax,4), %eax
	movq	$14, %rcx
	movq	%rsi, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	%rcx, %rax
	jne	.LBB33_9
# BB#7:                                 # %land.lhs.true
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %r15
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	%rbx, %r14
	movq	%r9, %rbx
	callq	have_insn_for
	movq	%rbx, %r9
	movq	%r14, %rbx
	movq	%r12, %rdi
	testq	%rdi, %rax
	movq	%rbx, %rsi
	jne	.LBB33_10
# BB#8:                                 # %land.lhs.true.cond.false_crit_edge
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rdi, %r12
	movl	(%r9), %esi
	movq	%r15, %r10
.LBB33_9:                               # %cond.false
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %r15
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%r12, %rdi
.LBB33_10:                              # %cond.end
                                        #   in Loop: Header=BB33_1 Depth=1
	leaq	-89(%r13), %rax
	andq	%rdi, %rax
	cmpq	$1, %rax
	ja	.LBB33_11
# BB#12:                                # %land.lhs.true21
                                        #   in Loop: Header=BB33_1 Depth=1
	movzbl	2(%r9), %eax
	movq	64(%rsp), %rcx          # 8-byte Reload
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	movzbl	mode_bitsize(%rax,%rax), %edx
	cmpq	%rdx, %rcx
	movq	72(%rsp), %rcx          # 8-byte Reload
	jb	.LBB33_14
# BB#13:                                # %select.mid
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rsi, %rax
.LBB33_14:                              # %select.end
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rax, %rsi
	jmp	.LBB33_15
	.align	16, 0x90
.LBB33_11:                              #   in Loop: Header=BB33_1 Depth=1
	movq	72(%rsp), %rcx          # 8-byte Reload
.LBB33_15:                              # %if.end36
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	testq	%rdi, %rsi
	jne	.LBB33_17
# BB#16:                                #   in Loop: Header=BB33_1 Depth=1
	movq	$-1, 40(%rsp)           # 8-byte Folded Spill
	movq	%rsi, 32(%rsp)          # 8-byte Spill
	movq	%rdi, %r12
	jmp	.LBB33_20
	.align	16, 0x90
.LBB33_17:                              # %if.then43
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rdi, %r12
	movq	$32, %rcx
	movq	%rsi, %rax
	movq	%rsi, 32(%rsp)          # 8-byte Spill
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	mode_mask_array(,%rax,8), %rcx
	movzbl	mode_bitsize(%rax,%rax), %eax
	movq	%r15, %rdi
	andq	%rcx, %rdi
	cmpq	$63, %rax
	jbe	.LBB33_19
# BB#18:                                #   in Loop: Header=BB33_1 Depth=1
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rdi, %r15
	jmp	.LBB33_20
	.align	16, 0x90
.LBB33_19:                              # %cond.false52
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rdi, %r15
	movq	%rbx, %r14
	movq	%r9, %rbx
	callq	floor_log2_wide
	movq	%rbx, %r9
	movq	%r14, %rbx
	leaq	1(%rax), %rcx
	movq	$1, %rax
	shlq	%cl, %rax
	decq	%rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
.LBB33_20:                              # %if.end56
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r9, %rdi
	movq	%r9, %r14
	movq	%rbx, %rsi
	callq	nonzero_bits
	movq	72(%rsp), %rcx          # 8-byte Reload
	testq	%r12, %rcx
	movabsq	$0, %rcx
	jne	.LBB33_22
# BB#21:                                # %if.end56
                                        #   in Loop: Header=BB33_1 Depth=1
	movabsq	$1, %rcx
.LBB33_22:                              # %if.end56
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r15, %r10
	testq	%r10, %rax
	jne	.LBB33_25
# BB#23:                                # %if.end56
                                        #   in Loop: Header=BB33_1 Depth=1
	testq	%rcx, %rcx
	jne	.LBB33_24
.LBB33_25:                              # %if.end64
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r14, %r9
	movl	(%r9), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$54, %rcx
	je	.LBB33_206
# BB#26:                                # %if.end73
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$16, %rcx
	movq	%rdx, %rbx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movzbl	mode_size(%rbx), %ecx
	movq	64(%rsp), %rsi          # 8-byte Reload
	movzbl	mode_size(%rsi), %esi
	cmpq	%rsi, %rcx
	jae	.LBB33_28
# BB#27:                                # %land.lhs.true85
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	mode_mask_array(,%rbx,8), %rcx
	movq	%r10, %rsi
	notq	%rsi
	testq	%rsi, %rcx
	je	.LBB33_203
.LBB33_28:                              # %if.end96
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%r12, %r14
	andq	%r14, %rcx
	cmpq	%rcx, %rbx
	jne	.LBB33_31
# BB#29:                                # %if.end96
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$63, %r13
	je	.LBB33_31
# BB#30:                                # %land.lhs.true105
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %rcx
	notq	%rcx
	testq	%rcx, %rax
	je	.LBB33_34
.LBB33_31:                              # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$60, %r13
	jg	.LBB33_35
# BB#32:                                # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$48, %r13
	movq	48(%rsp), %rdx          # 8-byte Reload
	jne	.LBB33_33
# BB#204:                               # %sw.bb112
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rax
	movzbl	2(%rax), %ecx
	movq	mode_mask_array(,%rcx,8), %rcx
	notq	%rcx
	testq	%rcx, %r10
	movq	%rdx, %r8
	je	.LBB33_1
	jmp	.LBB33_203
	.align	16, 0x90
.LBB33_35:                              # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$131, %r13
	jg	.LBB33_40
# BB#36:                                # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$119, %r13
	jg	.LBB33_39
# BB#37:                                # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	leaq	-61(%r13), %rax
	andq	%r14, %rax
	cmpq	$41, %rax
	ja	.LBB33_203
# BB#38:                                # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$78, %rdi
	movq	72(%rsp), %r8           # 8-byte Reload
	jmpq	*.LJTI33_0(,%rax,8)
.LBB33_90:                              # %sw.bb472
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$90, %rcx
	jne	.LBB33_91
# BB#92:                                # %land.lhs.true480
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_91
# BB#93:                                # %land.lhs.true491
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rax), %rbx
	cmpq	$63, %rbx
	ja	.LBB33_91
# BB#94:                                # %land.lhs.true515
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_91
# BB#95:                                # %land.lhs.true523
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %r12
	movq	%r14, %r15
	movq	8(%rax), %rdi
	movq	%r9, %r14
	callq	floor_log2_wide
	movq	%r14, %r9
	movzbl	2(%r9), %esi
	movq	$32, %rcx
	shlq	%cl, %rax
	movzbl	mode_bitsize(%rsi,%rsi), %edx
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	%rbx, %rax
	cmpq	%rdx, %rax
	jge	.LBB33_96
# BB#97:                                # %land.lhs.true550
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rax
	movq	8(%r9), %rdi
	movq	8(%rax), %r14
	movq	%r9, %rbx
	callq	nonzero_bits
	notq	%rax
	testq	%rax, %r14
	je	.LBB33_205
	jmp	.LBB33_98
	.align	16, 0x90
.LBB33_40:                              # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %rbx
	leaq	-132(%r13), %rax
	jmp	.LBB33_41
.LBB33_5:                               # %lor.end
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$1, %rax
	movq	%r13, %rcx
	shlq	%cl, %rax
	movabsq	$1691048883519488, %rcx # imm = 0x6020000000000
	testq	%rcx, %rax
	je	.LBB33_6
	jmp	.LBB33_34
.LBB33_39:                              # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %rbx
	leaq	-120(%r13), %rax
.LBB33_41:                              # %if.end111
                                        #   in Loop: Header=BB33_1 Depth=1
	andq	%r14, %rax
	cmpq	$2, %rax
	jae	.LBB33_203
# BB#42:                                # %sw.bb130
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r9, %rdi
	callq	expand_compound_operation
	movzbl	(%rax), %ecx
	cmpq	%r13, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	%rax, %r9
	movq	%rbx, %r10
	jne	.LBB33_1
	jmp	.LBB33_203
.LBB33_49:                              # %sw.bb152
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %r15
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	subreg_lowpart_p
	testq	%r14, %rax
	je	.LBB33_50
# BB#51:                                # %land.lhs.true155
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rbx), %rax
	movzbl	2(%rbx), %edx
	movzbl	2(%rax), %ecx
	movzbl	mode_size(%rdx), %esi
	movzbl	mode_size(%rcx), %edi
	cmpq	%rdi, %rsi
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	%rbx, %r9
	movq	%r15, %r10
	jb	.LBB33_1
# BB#52:                                # %lor.lhs.false173
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	mode_mask_array(,%rdx,8), %rdx
	movq	mode_mask_array(,%rcx,8), %rcx
	andq	%r10, %rdx
	notq	%rcx
	testq	%rcx, %rdx
	movq	48(%rsp), %r8           # 8-byte Reload
	je	.LBB33_1
	jmp	.LBB33_203
.LBB33_72:                              # %sw.bb332
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	movzbl	mode_bitsize(%rax,%rax), %eax
	cmpq	$63, %rax
	ja	.LBB33_73
# BB#74:                                # %land.lhs.true339
                                        #   in Loop: Header=BB33_1 Depth=1
	leaq	(%rax,%r14), %rcx
	movq	%r14, %r15
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	%r10, %rdx
	movq	56(%rsp), %r14          # 8-byte Reload
	je	.LBB33_76
# BB#75:                                # %if.then346
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$-1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	orq	%rdx, %r10
	jmp	.LBB33_76
.LBB33_84:                              # %sw.bb398
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	$76, %rdi
	jne	.LBB33_100
# BB#85:                                # %land.lhs.true406
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rax), %rcx
	movq	%rcx, %rdx
	negq	%rdx
	andq	%rcx, %rdx
	cmpq	%r10, %rdx
	jbe	.LBB33_88
# BB#86:                                # %if.then423
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rdx
	movq	$77, %rdi
	jmp	.LBB33_87
.LBB33_179:                             # %sw.bb1241
                                        #   in Loop: Header=BB33_1 Depth=1
	leaq	8(%r9), %r13
	cmpq	$1, %r10
	jne	.LBB33_180
# BB#181:                               # %if.then1244
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	(%r13), %rax
	movq	$1, %r10
	jmp	.LBB33_1
.LBB33_182:                             # %sw.bb1250
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	leaq	8(%r9), %r13
	cmpq	$90, %rcx
	jne	.LBB33_183
# BB#185:                               # %land.lhs.true1258
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r9, %r12
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_186
# BB#191:                               # %land.lhs.true1269
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$86, 72(%rsp)           # 8-byte Folded Spill
	movq	8(%rax), %rbx
	testq	%rbx, %rbx
	js	.LBB33_187
# BB#192:                               # %land.lhs.true1281
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %rdi
	movq	%r10, %r15
	callq	floor_log2_wide
	movzbl	2(%r12), %edx
	movq	$32, %rcx
	shlq	%cl, %rax
	movzbl	mode_bitsize(%rdx,%rdx), %edx
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	%rbx, %rax
	cmpq	%rdx, %rax
	jge	.LBB33_187
# BB#193:                               # %land.lhs.true1302
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	(%r13), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rcx
	cmpq	$63, %rcx
	movq	40(%rsp), %rdx          # 8-byte Reload
	jg	.LBB33_188
# BB#194:                               # %if.then1314
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r15, %rsi
	shlq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	8(%r12), %rcx
	movq	8(%rcx), %rdx
	movzbl	2(%r12), %esi
	movq	$85, %rdi
	movq	%rax, %rcx
	callq	gen_binary
	movq	8(%r12), %rcx
	movq	16(%rcx), %rcx
	movzbl	2(%r12), %esi
	movq	$90, %rdi
	movq	%rax, %rdx
	callq	gen_binary
	movq	%r15, %r10
	movq	48(%rsp), %r8           # 8-byte Reload
	jmp	.LBB33_1
.LBB33_144:                             # %sw.bb930
                                        #   in Loop: Header=BB33_1 Depth=1
	movzbl	mode_bitsize(%rbx,%rbx), %eax
	cmpq	$64, %rax
	ja	.LBB33_147
# BB#145:                               # %land.lhs.true939
                                        #   in Loop: Header=BB33_1 Depth=1
	leaq	(%rax,%r14), %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	cmpq	%rdx, %r10
	jne	.LBB33_147
# BB#146:                               # %if.then951
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rax
	movq	48(%rsp), %r8           # 8-byte Reload
	jmp	.LBB33_1
.LBB33_124:                             # %sw.bb762
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_133
# BB#125:                               # %land.lhs.true770
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rax), %rax
	cmpq	$63, %rax
	jg	.LBB33_133
# BB#126:                               # %land.lhs.true779
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	$32, %rcx
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	%rsi, %rdi
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movzbl	mode_bitsize(%rdi,%rdi), %ecx
	cmpq	$64, %rcx
	ja	.LBB33_133
# BB#127:                               # %lor.lhs.false801
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r14, %r15
	movq	mode_mask_array(,%rdi,8), %r8
	movq	8(%r9), %rdi
	movq	%r9, %r14
	movq	%r10, %rdx
	movq	%r10, %r12
	movq	%rax, %rcx
	shlq	%cl, %rdx
	notq	%r8
	testq	%r8, %rdx
	je	.LBB33_129
# BB#128:                               # %lor.lhs.false801
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rbx, %rsi
.LBB33_129:                             # %lor.lhs.false801
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rsi, %rbx
	andq	%r15, %rbx
	movq	%rsi, %r13
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	callq	force_to_mode
	movq	%r14, %r9
	movl	(%r9), %edx
	movq	$16, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	cmpq	%rbx, %rsi
	jne	.LBB33_131
# BB#130:                               # %lor.lhs.false819
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rcx
	cmpq	%rcx, %rax
	je	.LBB33_132
.LBB33_131:                             # %if.then825
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rcx
	movq	$90, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	gen_binary
	movq	%rax, %r9
	movl	(%r9), %edx
.LBB33_132:                             # %if.end831
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r15, %r14
	movq	%r12, %r10
.LBB33_133:                             # %if.end831
                                        #   in Loop: Header=BB33_1 Depth=1
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$90, %rdx
	jne	.LBB33_161
# BB#134:                               # %land.lhs.true836
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r14, %r13
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_135
# BB#136:                               # %land.lhs.true844
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %r12
	movq	8(%r9), %rdi
	movq	8(%rax), %r14
	movzbl	2(%rdi), %esi
	movq	%r9, %rbx
	callq	num_sign_bit_copies
	movq	%rbx, %r9
	movzbl	2(%r9), %ecx
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	andq	%r13, %rax
	addq	%r14, %rax
	cmpq	%rcx, %rax
	jl	.LBB33_137
# BB#138:                               # %land.lhs.true871
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r9, %rbx
	leaq	1(%r12), %r14
	movq	%r14, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB33_139
# BB#140:                               # %land.lhs.true876
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%rbx), %rax
	movq	8(%rax), %r15
	movq	%r14, %rdi
	callq	exact_log2_wide
	movq	%rbx, %r9
	movzbl	2(%r9), %edx
	movq	$32, %rcx
	shlq	%cl, %rax
	movzbl	mode_bitsize(%rdx,%rdx), %edx
	movq	$32, %rcx
	sarq	%cl, %rax
	addq	%r15, %rax
	cmpq	%rdx, %rax
	jg	.LBB33_137
# BB#141:                               # %land.lhs.true895
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rdi
	movzbl	2(%rdi), %esi
	movq	%r9, %r15
	callq	num_sign_bit_copies
	movq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%r14, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %rbx
	jge	.LBB33_143
# BB#142:                               #   in Loop: Header=BB33_1 Depth=1
	movq	%r15, %r9
	jmp	.LBB33_137
.LBB33_195:                             # %sw.bb1367
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$1, %r10
	ja	.LBB33_203
# BB#196:                               # %land.lhs.true1371
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB33_203
# BB#197:                               # %land.lhs.true1377
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r10, %r12
	movq	%r14, %r15
	movq	8(%r9), %rdi
	movq	56(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r9, %r14
	callq	nonzero_bits
	movq	%rax, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB33_198
# BB#199:                               # %land.lhs.true1385
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	cmpq	$1, %rax
	jne	.LBB33_200
# BB#201:                               # %if.then1392
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r14), %rax
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%r15, %r14
	movq	%r12, %r10
	movq	%rcx, %r8
	jmp	.LBB33_1
.LBB33_147:                             # %if.end956
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB33_159
# BB#148:                               # %land.lhs.true964
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rcx), %r8
	cmpq	$63, %r8
	ja	.LBB33_159
# BB#149:                               # %if.then982
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$65, %rax
	jb	.LBB33_152
# BB#150:                               # %if.then991
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rax, %rcx
	subq	%r8, %rcx
	cmpq	$63, %rcx
	movq	$-1, %rdx
	jg	.LBB33_154
# BB#151:                               # %if.then1007
                                        #   in Loop: Header=BB33_1 Depth=1
	leaq	64(%r8), %rcx
	subq	%rax, %rcx
	movq	$-1, %rdx
	jmp	.LBB33_153
.LBB33_73:                              #   in Loop: Header=BB33_1 Depth=1
	movq	%r14, %r15
	movq	56(%rsp), %r14          # 8-byte Reload
.LBB33_76:                              # %if.end350
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	movq	$75, %rdi
	jne	.LBB33_77
# BB#78:                                # %land.lhs.true358
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r9, %rbx
	movq	%r10, %rdi
	negq	%rdi
	movq	%r10, %r12
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB33_79
# BB#80:                                # %land.lhs.true363
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rbx), %rdi
	movq	%r14, %rsi
	callq	nonzero_bits
	movq	%r12, %rcx
	notq	%rcx
	testq	%rcx, %rax
	jne	.LBB33_81
# BB#82:                                # %land.lhs.true372
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%rbx), %rax
	movq	8(%rax), %rsi
	testq	%rcx, %rsi
	movq	%rbx, %r9
	movq	%r15, %r14
	movq	$75, %rdi
	je	.LBB33_100
# BB#83:                                # %if.then383
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rdi
	andq	%r12, %rsi
	callq	plus_constant_wide
	movq	%r12, %r10
	movq	48(%rsp), %r8           # 8-byte Reload
	jmp	.LBB33_1
.LBB33_88:                              # %land.lhs.true443
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rax), %rax
	movq	%rax, %rcx
	orq	%r10, %rcx
	cmpq	%rax, %rcx
	jne	.LBB33_100
# BB#89:                                # %if.then459
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rdx
	movq	$86, %rdi
.LBB33_87:                              # %tailrecurse
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%rbx, %rsi
	movq	%rbx, %rcx
	movq	%r10, %rbx
	callq	simplify_gen_unary
	movq	%rbx, %r10
	movq	48(%rsp), %r8           # 8-byte Reload
	jmp	.LBB33_1
.LBB33_135:                             #   in Loop: Header=BB33_1 Depth=1
	movq	%r13, %r14
	jmp	.LBB33_161
.LBB33_152:                             # %if.else1024
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	mode_mask_array(,%rbx,8), %rdx
	movq	%r8, %rcx
.LBB33_153:                             # %if.end1037
                                        #   in Loop: Header=BB33_1 Depth=1
	shrq	%cl, %rdx
.LBB33_154:                             # %if.end1037
                                        #   in Loop: Header=BB33_1 Depth=1
	notq	%rdx
	testq	%rdx, %r10
	je	.LBB33_158
# BB#155:                               # %lor.lhs.false1042
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r9, %rbx
	movq	%r10, %rdi
	movq	%r10, %r15
	callq	exact_log2_wide
	movq	%rax, %r8
	movq	$32, %rcx
                                        # kill: RAX<def> R8<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%rbx, %r9
	testq	%rax, %rax
	js	.LBB33_156
# BB#157:                               # %cond.false1062
                                        #   in Loop: Header=BB33_1 Depth=1
	movzbl	2(%r9), %ebx
	movzbl	mode_bitsize(%rbx,%rbx), %eax
	notq	%r8
	addq	%rax, %r8
	movq	$32, %rcx
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	movq	%r15, %r10
.LBB33_158:                             # %cond.end1072
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rcx
	movq	$90, %rsi
	movq	%r9, %rdi
	movq	%rbx, %rdx
	movq	%r10, %rbx
	callq	simplify_shift_const
	movq	%rbx, %r10
	movzbl	(%rax), %ecx
	cmpq	$89, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	%rax, %r9
	jne	.LBB33_1
	jmp	.LBB33_159
.LBB33_139:                             #   in Loop: Header=BB33_1 Depth=1
	movq	%rbx, %r9
	jmp	.LBB33_137
.LBB33_156:                             #   in Loop: Header=BB33_1 Depth=1
	movq	%r15, %r10
.LBB33_159:                             # %if.end1084
                                        #   in Loop: Header=BB33_1 Depth=1
	cmpq	$1, %r10
	jne	.LBB33_161
# BB#160:                               # %if.then1087
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rdx
	movq	16(%r9), %rcx
	movzbl	2(%r9), %esi
	movq	$90, %rdi
	callq	gen_binary
	movq	%rax, %r9
	movq	$1, %r10
	jmp	.LBB33_161
.LBB33_143:                             # %if.then910
                                        #   in Loop: Header=BB33_1 Depth=1
	movzbl	2(%r15), %eax
	movq	8(%r15), %rcx
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movzbl	mode_bitsize(%rax,%rax), %ebx
	movq	%rax, %r15
	movq	%r14, %rdi
	callq	exact_log2_wide
	subq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_CONST_INT
	movq	$90, %rdi
	movq	%r15, %rsi
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %r9
.LBB33_137:                             #   in Loop: Header=BB33_1 Depth=1
	movq	%r13, %r14
	movq	%r12, %r10
.LBB33_161:                             # %shiftrt
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	(%r9), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	addq	$-89, %rcx
	andq	%r14, %rcx
	cmpq	$1, %rcx
	ja	.LBB33_203
# BB#162:                               # %land.lhs.true1108
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB33_203
# BB#163:                               # %land.lhs.true1116
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rcx), %rbx
	testq	%rbx, %rbx
	js	.LBB33_203
# BB#164:                               # %land.lhs.true1125
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	%r14, %r12
	movq	%r9, %r15
	movq	$15, %rcx
	shrq	%cl, %rax
	andq	$510, %rax              # imm = 0x1FE
	movzbl	mode_bitsize(%rax), %r14d
	movq	%r10, %rdi
	movq	%r10, %r13
	callq	floor_log2_wide
	notq	%rax
	addq	%r14, %rax
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%r15, %r9
	cmpq	%rax, %rbx
	jg	.LBB33_203
# BB#165:                               # %land.lhs.true1144
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$87, %rcx
	jne	.LBB33_203
# BB#166:                               # %land.lhs.true1152
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB33_203
# BB#167:                               # %land.lhs.true1163
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	16(%r9), %rdx
	movq	8(%rcx), %rcx
	movq	8(%rdx), %rdx
	cmpq	%rdx, %rcx
	movq	%r12, %r14
	movq	%r13, %r10
	jne	.LBB33_203
# BB#168:                               # %if.then1181
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	8(%rax), %rax
	movq	48(%rsp), %r8           # 8-byte Reload
	jmp	.LBB33_1
.LBB33_24:                              # %if.then63
	movq	const_int_rtx+512(%rip), %r9
	jmp	.LBB33_34
.LBB33_206:                             # %if.then69
	movq	8(%r9), %rdi
	andq	%r10, %rdi
	movq	%rbx, %rsi
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_int_mode  # TAILCALL
.LBB33_33:                              # %if.end111
	cmpq	$49, %r13
	jne	.LBB33_203
.LBB33_34:                              # %return
	movq	%r9, %rax
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB33_91:
	movq	%r13, %rdi
	movq	%r10, 40(%rsp)          # 8-byte Spill
	jmp	.LBB33_100
.LBB33_169:                             # %sw.bb1190
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_203
# BB#170:                               # %land.lhs.true1198
	cmpq	$0, 8(%rax)
	js	.LBB33_203
# BB#171:                               # %if.then1207
	movq	%r9, %r15
	cmpq	$88, %r13
	jne	.LBB33_172
# BB#173:                               # %if.then1207
	movabsq	$1, %rax
	jmp	.LBB33_174
.LBB33_43:                              # %sw.bb139
	movq	%r9, %rbx
	movq	24(%rsp), %rdi          # 8-byte Reload
	testq	%rdi, %rdi
	je	.LBB33_44
# BB#45:                                # %land.lhs.true142
	movq	%rdi, %r15
	callq	get_last_value
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB33_47
# BB#46:
	movq	%r15, %r9
	jmp	.LBB33_203
.LBB33_202:                             # %sw.bb1398
	movq	16(%r9), %rdi
	leaq	16(%r9), %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	56(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rsi
	movq	%r10, %rdx
	movq	24(%rsp), %r13          # 8-byte Reload
	movq	%r13, %rcx
	movq	48(%rsp), %r14          # 8-byte Reload
	movq	%r14, %r8
	movq	%r9, %r12
	movq	%r10, 72(%rsp)          # 8-byte Spill
	callq	force_to_mode
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	do_SUBST
	movq	24(%r12), %rdi
	movzbl	2(%r12), %ebx
	leaq	24(%r12), %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%r15, %rsi
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	%r13, %rcx
	movq	%r14, %r8
	callq	force_to_mode
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%r12, %r9
	jmp	.LBB33_203
.LBB33_53:                              # %sw.bb198
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_54
# BB#55:                                # %if.then206
	movq	8(%rax), %rcx
	movq	8(%r9), %rdx
	andq	%r10, %rcx
	movq	%r10, %rbx
	movq	%r9, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	simplify_and_const_int
	movq	%rax, %r9
	movl	(%r9), %r12d
	movq	%r12, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	jne	.LBB33_56
# BB#57:                                # %land.lhs.true222
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_58
# BB#59:                                # %land.lhs.true230
	movq	8(%rax), %rax
	movq	$13, %rcx
	movq	%r12, %rdx
	shrq	%cl, %rdx
	andq	$2040, %rdx             # imm = 0x7F8
	movq	mode_mask_array(%rdx), %rcx
	andq	%rax, %rcx
	movq	%rbx, %rdi
	cmpq	%rdi, %rcx
	jne	.LBB33_61
# BB#60:                                # %if.then245
	movq	8(%r9), %r9
	movl	(%r9), %r12d
	jmp	.LBB33_61
.LBB33_106:                             # %sw.bb641
	movq	16(%r9), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$54, %rax
	jne	.LBB33_110
# BB#107:                               # %land.lhs.true649
	movq	8(%rdi), %rax
	testq	%rax, %rax
	js	.LBB33_110
# BB#108:                               # %land.lhs.true658
	movq	64(%rsp), %rcx          # 8-byte Reload
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	cmpq	%rcx, %rax
	jge	.LBB33_110
# BB#109:
	movq	%r10, %r15
	jmp	.LBB33_113
.LBB33_96:
	movq	%r13, %rdi
	movq	%r12, 40(%rsp)          # 8-byte Spill
	jmp	.LBB33_99
.LBB33_98:
	movq	%r13, %rdi
	movq	%r12, 40(%rsp)          # 8-byte Spill
	movq	%rbx, %r9
	jmp	.LBB33_99
.LBB33_110:                             # %land.lhs.true670
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	je	.LBB33_203
# BB#111:                               # %land.lhs.true679
	movq	%r10, %r15
	movq	%r9, %rbx
	callq	nonzero_bits
	movq	64(%rsp), %rcx          # 8-byte Reload
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	movq	%rbx, %r9
	cmpq	%rcx, %rax
	jae	.LBB33_203
# BB#112:                               # %land.lhs.true679.if.end696_crit_edge
	movq	16(%r9), %rdi
	movl	(%rdi), %esi
.LBB33_113:                             # %if.end696
	movq	32(%rsp), %rbx          # 8-byte Reload
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$54, %rsi
	movq	40(%rsp), %rdx          # 8-byte Reload
	jne	.LBB33_121
# BB#114:                               # %land.lhs.true704
	movq	8(%rdi), %rax
	testq	%rax, %rax
	js	.LBB33_121
# BB#115:                               # %land.lhs.true713
	movq	$32, %rcx
	movq	%rbx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movzbl	mode_bitsize(%rsi,%rsi), %ecx
	cmpq	$65, %rcx
	sbbq	%r8, %r8
	cmpq	%rcx, %rax
	jge	.LBB33_116
# BB#117:                               # %land.lhs.true713
	movabsq	$1, %rsi
	jmp	.LBB33_118
.LBB33_50:
	movq	%rbx, %r9
	jmp	.LBB33_203
.LBB33_180:
	movq	$77, 72(%rsp)           # 8-byte Folded Spill
	movq	%r9, %r12
	jmp	.LBB33_187
.LBB33_183:
	movq	$86, 72(%rsp)           # 8-byte Folded Spill
	movq	%r9, %r12
	jmp	.LBB33_187
.LBB33_186:
	movq	$86, 72(%rsp)           # 8-byte Folded Spill
.LBB33_187:                             # %unop
	movq	40(%rsp), %rdx          # 8-byte Reload
.LBB33_188:                             # %unop
	movq	8(%r12), %rdi
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	callq	force_to_mode
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	%r12, %r9
	movzbl	2(%r9), %ecx
	andq	%rbx, %r14
	cmpq	%rcx, %r14
	jne	.LBB33_190
# BB#189:                               # %lor.lhs.false1358
	movq	(%r13), %rcx
	cmpq	%rcx, %rax
	je	.LBB33_203
.LBB33_190:                             # %if.then1364
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%rsi, %rcx
	callq	simplify_gen_unary
	movq	%rax, %r9
	jmp	.LBB33_203
.LBB33_77:
	movq	%r14, 56(%rsp)          # 8-byte Spill
.LBB33_99:                              # %binop.loopexit
	movq	%r15, %r14
	jmp	.LBB33_100
.LBB33_79:
	movq	%r14, 56(%rsp)          # 8-byte Spill
.LBB33_81:
	movq	%rbx, %r9
	movq	%r15, %r14
	movq	$75, %rdi
.LBB33_100:                             # %binop.loopexit
	movq	%rdi, 64(%rsp)          # 8-byte Spill
	movq	%r14, %r15
	leaq	16(%r9), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	40(%rsp), %r10          # 8-byte Reload
.LBB33_101:                             # %binop
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r9, 16(%rsp)           # 8-byte Spill
	movq	8(%r9), %rdi
	movq	56(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r10, %rdx
	movq	24(%rsp), %r12          # 8-byte Reload
	movq	%r12, %rcx
	movq	48(%rsp), %r14          # 8-byte Reload
	movq	%r14, %r8
	callq	force_to_mode
	movq	32(%rsp), %r13          # 8-byte Reload
	movq	%r13, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	16(%rcx), %rdi
	movq	%rax, 40(%rsp)          # 8-byte Spill
	andq	%r13, %r15
	movq	%rbx, %rsi
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	%r12, %rcx
	movq	%r14, %r8
	callq	force_to_mode
	movq	%r13, %rdi
	movq	%r13, %rbx
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %r9           # 8-byte Reload
	movzbl	2(%r9), %ecx
	cmpq	%rcx, %r15
	movq	64(%rsp), %rdi          # 8-byte Reload
	jne	.LBB33_104
# BB#102:                               # %lor.lhs.false626
	movq	8(%r9), %rcx
	cmpq	%rcx, %rdx
	jne	.LBB33_104
# BB#103:                               # %lor.lhs.false632
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	(%rcx), %rcx
	cmpq	%rcx, %rax
	je	.LBB33_203
.LBB33_104:                             # %if.then638
	movq	%rbx, %rsi
	movq	%rax, %rcx
.LBB33_105:                             # %sw.epilog
	callq	gen_binary
	movq	%rax, %r9
.LBB33_203:                             # %if.then94
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r9, %rsi
	addq	$80, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_lowpart_for_combine  # TAILCALL
.LBB33_54:
	movq	%r14, %r15
	movq	$83, 64(%rsp)           # 8-byte Folded Spill
	leaq	16(%r9), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jmp	.LBB33_101
.LBB33_198:
	movq	%r14, %r9
	jmp	.LBB33_203
.LBB33_200:
	movq	%r14, %r9
	jmp	.LBB33_203
.LBB33_44:
	movq	%rbx, %r9
	jmp	.LBB33_203
.LBB33_172:
	movabsq	$0, %rax
.LBB33_174:                             # %if.then1207
	leaq	88(%rax,%rax,2), %r14
	xorq	%rdi, %rdi
	movq	%r10, %rsi
	callq	gen_rtx_CONST_INT
	movq	16(%r15), %rcx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	simplify_binary_operation
	testq	%rax, %rax
	je	.LBB33_175
# BB#176:                               # %land.lhs.true1220
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB33_177
# BB#178:                               # %if.then1225
	movq	8(%r15), %rdi
	movq	8(%rax), %rdx
	movzbl	2(%r15), %esi
	leaq	8(%r15), %rbx
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	callq	force_to_mode
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%r15, %r9
	jmp	.LBB33_203
.LBB33_56:
	movq	%rbx, %rdi
	jmp	.LBB33_61
.LBB33_47:                              # %lor.lhs.false146
	movq	%rbx, %rdi
	callq	get_last_value
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	movq	%rbx, %r9
	je	.LBB33_203
# BB#48:                                # %if.then150
	movq	%r15, %r9
	jmp	.LBB33_203
.LBB33_175:
	movq	%r15, %r9
	jmp	.LBB33_203
.LBB33_177:
	movq	%r15, %r9
	jmp	.LBB33_203
.LBB33_58:
	movq	%rbx, %rdi
.LBB33_61:                              # %if.end249
	movq	%r12, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	jne	.LBB33_203
# BB#62:                                # %land.lhs.true254
	movq	16(%r9), %rsi
	movzbl	(%rsi), %eax
	cmpq	$54, %rax
	jne	.LBB33_203
# BB#63:                                # %land.lhs.true262
	movq	$16, %rcx
	shrq	%cl, %r12
	andq	$255, %r12
	movq	mode_mask_array(,%r12,8), %rax
	cmpq	%rdi, %rax
	je	.LBB33_203
# BB#64:                                # %land.lhs.true270
	movzbl	mode_bitsize(%r12,%r12), %edx
	cmpq	$64, %rdx
	ja	.LBB33_203
# BB#65:                                # %if.then279
	movq	8(%rsi), %rcx
	notq	%rdi
	andq	%rdi, %rax
	orq	%rcx, %rax
	testq	%rdx, %rdx
	je	.LBB33_69
# BB#66:                                # %if.then279
	cmpq	$63, %rdx
	ja	.LBB33_69
# BB#67:                                # %land.lhs.true304
	movq	%r14, %rcx
	addq	%rdx, %rcx
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	%rsi, %rax
	je	.LBB33_69
# BB#68:                                # %if.then311
	movq	$-1, %rsi
	movq	%rdx, %rcx
	shlq	%cl, %rsi
	orq	%rsi, %rax
.LBB33_69:                              # %if.end315
	movq	%r9, %r15
	movq	8(%r15), %r14
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$83, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rbx
	movq	$47, %rsi
	movq	%rbx, %rdi
	callq	rtx_cost
	movq	%rax, %r14
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	rtx_cost
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rax, %r14
	jl	.LBB33_71
# BB#70:                                # %if.end315
	movq	%r15, %rbx
.LBB33_71:                              # %if.end315
	movq	%rbx, %r9
	jmp	.LBB33_203
.LBB33_116:
	movabsq	$0, %rsi
.LBB33_118:                             # %land.lhs.true713
	movq	%r15, %rdi
	movq	%rax, %rcx
	shrq	%cl, %rdi
	testq	%rsi, %r8
	jne	.LBB33_120
# BB#119:                               # %land.lhs.true713
	movq	%rdx, %rdi
.LBB33_120:                             # %land.lhs.true713
	movq	%rdi, %rdx
.LBB33_121:                             # %if.end739
	movq	8(%r9), %rdi
	movq	%rbx, %rsi
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	%r9, %r12
	callq	force_to_mode
	andq	%rbx, %r14
	movq	%rbx, %rdi
	movq	%rbx, %r15
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	%r12, %r9
	movzbl	2(%r9), %ecx
	cmpq	%rcx, %r14
	jne	.LBB33_123
# BB#122:                               # %lor.lhs.false750
	movq	8(%r9), %rcx
	cmpq	%rcx, %rax
	je	.LBB33_203
.LBB33_123:                             # %if.then756
	movq	16(%r9), %rcx
	movq	$87, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	jmp	.LBB33_105
.Ltmp494:
	.size	force_to_mode, .Ltmp494-force_to_mode
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI33_0:
	.quad	.LBB33_43
	.quad	.LBB33_203
	.quad	.LBB33_49
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_202
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_72
	.quad	.LBB33_84
	.quad	.LBB33_179
	.quad	.LBB33_100
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_53
	.quad	.LBB33_90
	.quad	.LBB33_90
	.quad	.LBB33_182
	.quad	.LBB33_106
	.quad	.LBB33_169
	.quad	.LBB33_144
	.quad	.LBB33_124
	.quad	.LBB33_169
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_203
	.quad	.LBB33_195

	.text
	.align	16, 0x90
	.type	expand_compound_operation,@function
expand_compound_operation:              # @expand_compound_operation
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp501:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp502:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp503:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp504:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp505:
	.cfi_def_cfa_offset 48
.Ltmp506:
	.cfi_offset %rbx, -48
.Ltmp507:
	.cfi_offset %r12, -40
.Ltmp508:
	.cfi_offset %r13, -32
.Ltmp509:
	.cfi_offset %r14, -24
.Ltmp510:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	jmp	.LBB34_1
	.align	16, 0x90
.LBB34_21:                              # %if.then133
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	$121, %rdi
	callq	gen_rtx_fmt_e
	movq	%rax, %r14
.LBB34_1:                               # %tailrecurse
                                        # =>This Inner Loop Header: Depth=1
	movl	(%r14), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	xorq	%r13, %r13
	cmpq	$131, %rax
	jg	.LBB34_8
# BB#2:                                 # %tailrecurse
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpq	$120, %rax
	je	.LBB34_5
# BB#3:                                 # %tailrecurse
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpq	$121, %rax
	jne	.LBB34_53
# BB#4:                                 # %sw.bb
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$1, %r13
.LBB34_5:                               # %sw.bb1
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	8(%r14), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$54, %rcx
	je	.LBB34_53
# BB#6:                                 # %if.end
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	movl	target_flags(%rip), %edx
	andq	$255, %rax
	movzbl	mode_size(%rax), %edi
	movq	$23, %rcx
	shrq	%cl, %rdx
	andq	$4, %rdx
	addq	$4, %rdx
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rcx, %rdx
	cmpq	%rdx, %rdi
	ja	.LBB34_53
# BB#7:                                 # %if.end13
                                        #   in Loop: Header=BB34_1 Depth=1
	movzbl	mode_bitsize(%rax,%rax), %r15d
	xorq	%r12, %r12
	testq	%r15, %r15
	jne	.LBB34_18
	jmp	.LBB34_53
	.align	16, 0x90
.LBB34_8:                               # %tailrecurse
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpq	$132, %rax
	je	.LBB34_11
# BB#9:                                 # %tailrecurse
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpq	$133, %rax
	jne	.LBB34_53
# BB#10:                                # %sw.bb27
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$1, %r13
.LBB34_11:                              # %sw.bb28
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	8(%r14), %rax
	movl	(%rax), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$49, %rcx
	je	.LBB34_54
# BB#12:                                # %if.end40
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	16(%r14), %rdi
	movzbl	(%rdi), %ecx
	cmpq	$54, %rcx
	jne	.LBB34_53
# BB#13:                                # %lor.lhs.false
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	%r13, %r12
	movq	24(%r14), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$54, %rcx
	jne	.LBB34_53
# BB#14:                                # %lor.lhs.false55
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	je	.LBB34_53
# BB#15:                                # %if.end65
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	8(%rdi), %r15
	movq	8(%rbx), %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	movzbl	mode_bitsize(%rdx,%rdx), %ecx
	leaq	(%rbx,%r15), %rdx
	cmpq	%rcx, %rdx
	jbe	.LBB34_17
# BB#16:                                # %if.then88
                                        #   in Loop: Header=BB34_1 Depth=1
	leaq	8(%r14), %r13
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	$48, %rdi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	%r13, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movl	(%r14), %esi
.LBB34_17:                              # %sw.epilog
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	%r12, %r13
	movq	%rbx, %r12
.LBB34_18:                              # %sw.epilog
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$120, %rax
	jne	.LBB34_22
# BB#19:                                # %land.lhs.true
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	$15, %rcx
	movq	%rsi, %rax
	shrq	%cl, %rax
	andq	$510, %rax              # imm = 0x1FE
	movzbl	mode_bitsize(%rax), %eax
	cmpq	$64, %rax
	ja	.LBB34_22
# BB#20:                                # %land.lhs.true111
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	8(%r14), %rdi
	movzbl	2(%rdi), %esi
	callq	nonzero_bits
	movq	8(%r14), %rdx
	movzbl	2(%rdx), %ecx
	movq	mode_mask_array(,%rcx,8), %rdi
	movq	$1, %rcx
	movl	(%r14), %esi
	shrq	%cl, %rdi
	notq	%rdi
	testq	%rdi, %rax
	je	.LBB34_21
.LBB34_22:                              # %if.end142
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$121, %rax
	jne	.LBB34_46
# BB#23:                                # %if.then147
	movq	8(%r14), %rdi
	movl	(%rdi), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$122, %rax
	jne	.LBB34_28
# BB#24:                                # %land.lhs.true155
	movq	8(%rdi), %r8
	movzbl	2(%r8), %eax
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	cmpq	%rsi, %rax
	jne	.LBB34_28
# BB#25:                                # %land.lhs.true170
	movzbl	mode_bitsize(%rax,%rax), %ecx
	cmpq	$64, %rcx
	ja	.LBB34_28
# BB#26:                                # %land.lhs.true179
	movq	%r8, %rdi
	movq	%rax, %rsi
	callq	nonzero_bits
	movq	8(%r14), %rdi
	movl	(%rdi), %edx
	movq	$13, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$2040, %rsi             # imm = 0x7F8
	movq	mode_mask_array(%rsi), %rcx
	notq	%rcx
	testq	%rcx, %rax
	je	.LBB34_27
.LBB34_28:                              # %if.end209
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$63, %rdx
	jne	.LBB34_34
# BB#29:                                # %land.lhs.true217
	movq	8(%rdi), %rax
	movl	(%rax), %eax
	movl	(%r14), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB34_34
# BB#30:                                # %land.lhs.true232
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB34_34
# BB#31:                                # %land.lhs.true238
	movzbl	2(%r14), %esi
	movzbl	mode_bitsize(%rsi,%rsi), %eax
	cmpq	$64, %rax
	ja	.LBB34_34
# BB#32:                                # %land.lhs.true247
	movq	8(%r14), %rax
	movq	8(%rax), %rdi
	callq	nonzero_bits
	movq	8(%r14), %rcx
	movzbl	2(%rcx), %edx
	movq	mode_mask_array(,%rdx,8), %rdx
	notq	%rdx
	testq	%rdx, %rax
	je	.LBB34_33
.LBB34_34:                              # %if.end277
	movq	8(%r14), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$63, %rdx
	je	.LBB34_41
# BB#35:                                # %if.end277
	cmpq	$122, %rdx
	jne	.LBB34_46
# BB#36:                                # %land.lhs.true285
	movq	8(%rdi), %rax
	movl	(%rax), %ecx
	movq	%r13, %r8
	movl	(%r14), %ebx
	xorq	%rcx, %rbx
	testq	$16711680, %rbx         # imm = 0xFF0000
                                        # kill: R13<def> R8<kill>
	jne	.LBB34_46
# BB#37:                                # %land.lhs.true300
	andq	$65535, %rcx            # imm = 0xFFFF
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$60, %rcx
	jne	.LBB34_40
# BB#38:                                # %land.lhs.true314
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movzbl	mode_bitsize(%rsi,%rsi), %ecx
	cmpq	$64, %rcx
	ja	.LBB34_40
# BB#39:                                # %land.lhs.true326
	movzbl	mode_mask_array(,%rsi,8), %ecx
	testq	$1, %rcx
	jne	.LBB34_54
.LBB34_40:                              # %if.end346
	cmpq	$63, %rdx
	jne	.LBB34_46
.LBB34_41:                              # %land.lhs.true354
	movq	8(%rdi), %rax
	movl	(%rax), %eax
	movl	(%r14), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB34_46
# BB#42:                                # %land.lhs.true369
	callq	subreg_lowpart_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB34_46
# BB#43:                                # %land.lhs.true375
	movq	8(%r14), %rcx
	movq	8(%rcx), %rax
	movzbl	(%rax), %edx
	movzbl	rtx_class(%rdx), %edx
	cmpq	$60, %rdx
	jne	.LBB34_46
# BB#44:                                # %land.lhs.true389
	movzbl	2(%rcx), %ecx
	movzbl	mode_bitsize(%rcx,%rcx), %edx
	cmpq	$64, %rdx
	ja	.LBB34_46
# BB#45:                                # %land.lhs.true401
	movzbl	mode_mask_array(,%rcx,8), %ecx
	testq	$1, %rcx
	jne	.LBB34_54
.LBB34_46:                              # %if.end422
	movzbl	2(%r14), %edx
	movzbl	mode_bitsize(%rdx,%rdx), %ebx
	leaq	(%rbx,%r15), %rax
	cmpq	%r12, %rax
	jae	.LBB34_47
# BB#48:                                # %if.else
	testq	%r13, %r13
	je	.LBB34_53
# BB#49:                                # %if.else
	cmpq	$63, %r15
	ja	.LBB34_53
# BB#50:                                # %if.then457
	movq	8(%r14), %rcx
	xorq	%rdi, %rdi
	movq	$90, %rsi
	movq	%rdx, %rbx
                                        # kill: RDX<def> RBX<kill>
	movq	%r12, %r8
	callq	simplify_shift_const
	movq	$1, %r8
	movq	%r15, %rcx
	shlq	%cl, %r8
	decq	%r8
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%r8, %rcx
	callq	simplify_and_const_int
	jmp	.LBB34_51
.LBB34_47:                              # %if.then433
	movq	8(%r14), %rcx
	addq	$89, %r13
	addq	%r15, %r12
	movq	%rbx, %r8
	subq	%r12, %r8
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	%rdx, %r12
                                        # kill: RDX<def> R12<kill>
	callq	simplify_shift_const
	subq	%r15, %rbx
	xorq	%rdi, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	movq	%rbx, %r8
	callq	simplify_shift_const
.LBB34_51:                              # %if.end473
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	je	.LBB34_53
# BB#52:                                # %if.end473
	movq	%rax, %r14
.LBB34_53:                              # %if.end473
	movq	%r14, %rax
.LBB34_54:                              # %return
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB34_27:                              # %if.then202
	movq	8(%rdi), %rax
	jmp	.LBB34_54
.LBB34_33:                              # %if.then270
	movq	8(%rcx), %rax
	jmp	.LBB34_54
.Ltmp511:
	.size	expand_compound_operation, .Ltmp511-expand_compound_operation
	.cfi_endproc

	.align	16, 0x90
	.type	simplify_and_const_int,@function
simplify_and_const_int:                 # @simplify_and_const_int
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp518:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp519:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp520:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp521:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp522:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp523:
	.cfi_def_cfa_offset 64
.Ltmp524:
	.cfi_offset %rbx, -48
.Ltmp525:
	.cfi_offset %r12, -40
.Ltmp526:
	.cfi_offset %r13, -32
.Ltmp527:
	.cfi_offset %r14, -24
.Ltmp528:
	.cfi_offset %r15, -16
	movq	%rcx, %r12
	movq	%rsi, %r15
	movq	%rdi, %rbx
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%rdx, %rdi
                                        # kill: RSI<def> R15<kill>
	movq	%r12, %rdx
	callq	force_to_mode
	movq	%rax, %r13
	movzbl	(%r13), %eax
	cmpq	$49, %rax
	jne	.LBB35_2
# BB#1:
	movq	%r13, %rbx
.LBB35_31:                              # %return
	movq	%rbx, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB35_2:                               # %entry
	cmpq	$54, %rax
	jne	.LBB35_3
# BB#32:                                # %if.then4
	movq	8(%r13), %rdi
	andq	%r12, %rdi
	movq	%r15, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_CONST_INT  # TAILCALL
.LBB35_3:                               # %if.end7
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	movq	%r13, %rdi
	movq	%r15, %rsi
	callq	nonzero_bits
	movq	$32, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	mode_mask_array(,%rdx,8), %rcx
	andq	%rax, %rcx
	andq	%rcx, %r12
	je	.LBB35_4
# BB#5:                                 # %if.end14
	movq	%rcx, (%rsp)            # 8-byte Spill
	movzbl	(%r13), %eax
	cmpq	$77, %rax
	jne	.LBB35_8
# BB#6:                                 # %land.lhs.true
	movq	8(%r13), %rdi
	movq	%r15, %rsi
	callq	nonzero_bits
	cmpq	$1, %rax
	jne	.LBB35_8
# BB#7:                                 # %land.lhs.true22
	movq	%r12, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	js	.LBB35_8
# BB#33:                                # %if.then25
	movq	8(%r13), %rcx
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	%r15, %rdx
	movq	%rax, %r8
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	simplify_shift_const  # TAILCALL
.LBB35_8:                               # %if.end30
	movl	(%r13), %ebx
	movq	%rbx, %r14
	andq	$65535, %r14            # imm = 0xFFFF
	cmpq	$75, %r14
	je	.LBB35_11
# BB#9:                                 # %if.end30
	leaq	-84(%r14), %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$1, %rcx
	ja	.LBB35_14
# BB#10:                                # %if.then37
	movq	8(%r13), %rdx
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rcx
	callq	simplify_and_const_int
	movq	16(%r13), %rdx
	movzbl	2(%r13), %esi
	movq	%rax, %r13
	xorq	%rdi, %rdi
	movq	%r12, %rcx
	callq	simplify_and_const_int
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rdi
	callq	apply_distributive_law
	movq	%r15, %rdi
	movq	%rax, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_lowpart_for_combine  # TAILCALL
.LBB35_4:                               # %if.then13
	movq	const_int_rtx+512(%rip), %rbx
	jmp	.LBB35_31
.LBB35_11:                              # %land.lhs.true63
	leaq	1(%r12), %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB35_14
# BB#12:                                # %if.then66
	movq	8(%r13), %rdx
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r12, %rcx
	callq	simplify_and_const_int
	movq	16(%r13), %rdx
	movq	%rax, %r14
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r12, %rcx
	callq	simplify_and_const_int
	movq	const_int_rtx+512(%rip), %rcx
	movq	%rax, %rbx
	cmpq	%rcx, %r14
	je	.LBB35_31
# BB#13:                                # %if.end77
	cmpq	%rcx, %rbx
	movq	%r14, %rbx
	je	.LBB35_31
.LBB35_14:                              # %if.end81
	movq	8(%rsp), %r14           # 8-byte Reload
	testq	%r14, %r14
	je	.LBB35_18
# BB#15:                                # %land.lhs.true82
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB35_18
# BB#16:                                # %land.lhs.true89
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%r15, %rcx
	cmpq	%rcx, %rdx
	jne	.LBB35_18
# BB#17:                                # %land.lhs.true97
	movq	8(%rbx), %rcx
	cmpq	%r13, %rcx
	je	.LBB35_19
.LBB35_18:                              # %if.else
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	gen_lowpart_for_combine
	movq	%rax, %rbx
	movl	(%rbx), %eax
.LBB35_19:                              # %if.end110
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$49, %rax
	jne	.LBB35_22
# BB#20:                                # %if.then114
	testq	%r14, %r14
	jne	.LBB35_30
# BB#21:                                # %if.then114
	movq	%rbx, %r14
.LBB35_30:                              # %return
	movq	%r14, %rbx
	jmp	.LBB35_31
.LBB35_22:                              # %if.end116
	movq	(%rsp), %rax            # 8-byte Reload
	cmpq	%rax, %r12
	je	.LBB35_31
# BB#23:                                # %if.else119
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	trunc_int_for_mode
	testq	%r14, %r14
	je	.LBB35_34
# BB#24:                                # %lor.lhs.false122
	movl	(%r14), %edx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$83, %rcx
	jne	.LBB35_34
# BB#25:                                # %lor.lhs.false126
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%r15, %rcx
	cmpq	%rcx, %rdx
	jne	.LBB35_34
# BB#26:                                # %if.else134
	movq	16(%r14), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB35_28
# BB#27:                                # %lor.lhs.false141
	movq	8(%rcx), %rcx
	cmpq	%rax, %rcx
	je	.LBB35_29
.LBB35_28:                              # %if.then149
	leaq	16(%r14), %r15
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
.LBB35_29:                              # %if.end154
	leaq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	do_SUBST
	jmp	.LBB35_30
.LBB35_34:                              # %if.then131
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$83, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_binary  # TAILCALL
.Ltmp529:
	.size	simplify_and_const_int, .Ltmp529-simplify_and_const_int
	.cfi_endproc

	.align	16, 0x90
	.type	simplify_shift_const,@function
simplify_shift_const:                   # @simplify_shift_const
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp536:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp537:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp538:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp539:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp540:
	.cfi_def_cfa_offset 48
	subq	$144, %rsp
.Ltmp541:
	.cfi_def_cfa_offset 192
.Ltmp542:
	.cfi_offset %rbx, -48
.Ltmp543:
	.cfi_offset %r12, -40
.Ltmp544:
	.cfi_offset %r13, -32
.Ltmp545:
	.cfi_offset %r14, -24
.Ltmp546:
	.cfi_offset %r15, -16
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%r12, 136(%rsp)         # 8-byte Spill
	movq	%rsi, %r14
	movq	%rdi, %r9
	movq	$32, %rcx
	movq	%r8, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	movq	$32, %rcx
	movq	%r12, %rbx
	shlq	%cl, %rbx
	movq	$32, %rcx
	movl	target_flags(%rip), %edi
	sarq	%cl, %rbx
	movzbl	mode_size(%rbx), %eax
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rdi,%rax), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
	testq	%rsi, %rsi
	js	.LBB36_4
# BB#1:                                 # %lor.lhs.false
	movzbl	mode_bitsize(%rbx,%rbx), %edx
	movq	$32, %rcx
	movq	%r8, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rsi, %rdx
	jle	.LBB36_4
# BB#2:                                 # %while.cond.preheader
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	testq	%r11, %r8
	je	.LBB36_3
# BB#6:                                 # %while.body.lr.ph
	movq	%r9, 104(%rsp)          # 8-byte Spill
	movq	$1, 32(%rsp)            # 8-byte Folded Spill
	xorq	%r13, %r13
	andq	%r11, %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	$83, 24(%rsp)           # 8-byte Folded Spill
	movq	%r14, %r9
	movq	%r14, 80(%rsp)          # 8-byte Spill
	movq	%r8, %rax
	movq	%r8, 48(%rsp)           # 8-byte Spill
	movq	%r12, 112(%rsp)         # 8-byte Spill
	movq	$0, 64(%rsp)            # 8-byte Folded Spill
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	jmp	.LBB36_7
.LBB36_4:                               # %if.then
	testq	%r9, %r9
	jne	.LBB36_9
# BB#5:                                 # %if.end
	movq	$32, %rcx
	shlq	%cl, %r8
	movq	$32, %rcx
	sarq	%cl, %r8
	xorq	%rdi, %rdi
	movq	%r8, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_ee  # TAILCALL
.LBB36_45:                              # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rsi, %r14
	cmpq	$131, %rbx
	jg	.LBB36_62
# BB#46:                                # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$119, %rbx
	jg	.LBB36_59
# BB#47:                                # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$102, %rbx
	jg	.LBB36_50
# BB#48:                                # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	leaq	-63(%rbx), %rcx
	andq	%r11, %rcx
	cmpq	$27, %rcx
	ja	.LBB36_393
# BB#49:                                # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	jmpq	*.LJTI36_0(,%rcx,8)
.LBB36_203:                             # %sw.bb631.if.end701_crit_edge
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r12
	movq	%r9, 96(%rsp)           # 8-byte Spill
	leaq	8(%r15), %rax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	jmp	.LBB36_204
.LBB36_62:                              # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r12, %r13
	addq	$-132, %rbx
	andq	%r11, %rbx
	cmpq	$1, %rbx
	jbe	.LBB36_73
	jmp	.LBB36_63
.LBB36_59:                              # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r12, %r13
	leaq	-120(%rbx), %rcx
	andq	%r11, %rcx
	cmpq	$2, %rcx
	jae	.LBB36_60
.LBB36_73:                              # %sw.bb
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r15, %rdi
	movq	%r11, %r14
	movq	%r9, %rbx
	movq	%r10, %r12
	callq	expand_compound_operation
	movq	%r12, %r10
	movq	%rbx, %r9
	movq	%r14, %r11
	movq	%rax, %rsi
	cmpq	%r15, %rsi
	movq	%r13, %r12
	movabsq	$0, %r13
	je	.LBB36_393
.LBB36_74:                              # %while.cond.backedge
                                        #   in Loop: Header=BB36_7 Depth=1
	testq	%r11, %r10
	movq	%rsi, %r15
	movq	%r10, %rax
	movabsq	$0, %r10
	jne	.LBB36_7
	jmp	.LBB36_393
.LBB36_81:                              # %sw.bb193
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r12
	movq	%r9, %r14
	movq	%r15, %rdi
	movq	%r11, %rbx
	callq	subreg_lowpart_p
	movq	%rbx, %r11
	testq	%r11, %rax
	je	.LBB36_82
# BB#84:                                # %land.lhs.true196
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rsi
	movzbl	2(%rsi), %r8d
	movzbl	2(%r15), %eax
	movzbl	mode_size(%r8), %ebx
	movzbl	mode_size(%rax), %eax
	cmpq	%rax, %rbx
	jbe	.LBB36_82
# BB#85:                                # %land.lhs.true214
                                        #   in Loop: Header=BB36_7 Depth=1
	movl	target_flags(%rip), %edi
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	leaq	3(%rdi,%rbx), %rax
	addq	$4, %rdi
	cqto
	idivq	%rdi
	andq	%r11, %rax
	movq	40(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	movq	%r14, %r9
	movq	%r12, %r10
	jne	.LBB36_86
# BB#87:                                # %if.then235
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$32, %rcx
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_size(%rax), %eax
	cmpq	%rax, %rbx
	movq	136(%rsp), %r12         # 8-byte Reload
	ja	.LBB36_89
# BB#88:                                # %select.mid
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rdx, %r8
.LBB36_89:                              # %select.end
                                        #   in Loop: Header=BB36_7 Depth=1
	xorq	%r13, %r13
	movq	%r8, 112(%rsp)          # 8-byte Spill
	jmp	.LBB36_74
.LBB36_310:                             # %sw.bb836
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, %r14
	andq	%r11, %r14
	cmpq	$90, %r14
	jne	.LBB36_345
# BB#311:                               # %land.lhs.true839
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
	leaq	-1(%rax), %rax
	andq	%r11, %rax
	movq	%r10, %rcx
	andq	%r11, %rcx
	cmpq	%rax, %rcx
	jne	.LBB36_345
# BB#312:                               # %land.lhs.true846
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%r15), %rax
	movq	const_int_rtx+504(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB36_345
# BB#313:                               # %land.lhs.true852
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rdi
	movq	%r12, %rsi
	movq	%r11, %r15
	movq	%r9, %rbx
	movq	%r12, %r13
	movq	%r10, %r12
	callq	nonzero_bits
	movq	%r12, %r10
	movq	%r13, %rcx
	xorq	%r13, %r13
	movq	%rbx, %r9
	movq	%r15, %r11
	movq	128(%rsp), %r15         # 8-byte Reload
	cmpq	$1, %rax
	jne	.LBB36_345
# BB#314:                               # %land.lhs.true859
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r15, %rbx
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	%rcx, %r15
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	mode_mask_array(,%rax,8), %rdx
	movq	%rdx, %rax
	movq	64(%rsp), %rcx          # 8-byte Reload
	andq	%rcx, %rax
	movq	88(%rsp), %rsi          # 8-byte Reload
	andq	%r11, %rsi
	movq	%r11, %r12
	cmpq	$83, %rsi
	movq	%rax, %rcx
	je	.LBB36_316
# BB#315:                               # %land.lhs.true859
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rdx, %rcx
.LBB36_316:                             # %land.lhs.true859
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	$1, %rcx
	cmpq	$1, %rsi
	je	.LBB36_317
# BB#318:                               # %land.lhs.true859
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$47, %rsi
	je	.LBB36_319
# BB#320:                               # %land.lhs.true859
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$85, %rsi
	je	.LBB36_321
# BB#323:                               # %if.else18.i1749
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	%rcx, %rax
	movq	%r15, %rcx
	movq	%r12, %r11
	movq	%rbx, %r15
	movabsq	$0, %r13
	jne	.LBB36_345
# BB#324:                               # %switch.early.test2010
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r15, %rbx
	movq	%r9, %r8
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	%r11, %r12
	movq	%rcx, %r15
	movq	$32, %rcx
	movq	88(%rsp), %rdi          # 8-byte Reload
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$82, %rdi
	jg	.LBB36_328
# BB#325:                               # %switch.early.test2010
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$75, %rsi
	movq	%r15, %rcx
	movq	%r12, %r11
	movq	%r8, %r9
	movq	%rbx, %r15
	movabsq	$0, %r13
	je	.LBB36_345
# BB#326:                               # %switch.early.test2010
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$77, %rsi
	jne	.LBB36_327
.LBB36_345:                             # %if.end866
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, 96(%rsp)           # 8-byte Spill
	leaq	-89(%r9), %rax
	andq	%r11, %rax
	cmpq	$1, %rax
	ja	.LBB36_354
# BB#346:                               # %if.end866
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %rbx
	andq	%r11, %rbx
	cmpq	$63, %rbx
	ja	.LBB36_354
# BB#347:                               # %land.lhs.true875
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	16(%r15), %rdi
	movq	136(%rsp), %rsi         # 8-byte Reload
	callq	nonzero_bits
	movq	%rbx, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	jne	.LBB36_350
# BB#348:                               # %land.lhs.true883
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%r15), %rdi
	movq	136(%rsp), %r12         # 8-byte Reload
	movq	%r12, %rsi
	callq	nonzero_bits
	movq	8(%r15), %rdi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%r12, %rsi
	callq	nonzero_bits
	movq	16(%rsp), %rcx          # 8-byte Reload
	testq	%rcx, %rax
	jne	.LBB36_350
# BB#349:                               # %if.then895
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rsi
	xorq	%r13, %r13
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	72(%rsp), %r10          # 8-byte Reload
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_74
.LBB36_293:                             # %sw.bb804
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, %rax
	andq	%r11, %rax
	cmpq	$87, %rax
	jne	.LBB36_294
# BB#302:                               # %land.lhs.true828
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	mode_mask_array(,%rax,8), %rax
	movq	88(%rsp), %rcx          # 8-byte Reload
	andq	%r11, %rcx
	cmpq	$1, %rcx
	jne	.LBB36_304
# BB#303:                               #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r13
	movq	%r9, %r15
	movq	%r11, %r14
	movq	$77, %rbx
	xorq	%rdi, %rdi
	jmp	.LBB36_308
.LBB36_90:                              # %sw.bb256
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r14
	movq	%r15, %rcx
	movq	%r9, %r15
	movq	%r11, %r13
	movq	16(%rcx), %rax
	movq	%rcx, %rbx
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB36_95
# BB#91:                                # %land.lhs.true264
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB36_95
# BB#92:                                # %if.then273
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%rbx), %rax
	movq	8(%rbx), %rcx
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	8(%rax), %rdi
	movzbl	2(%rbx), %ebx
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$87, %rdi
	jmp	.LBB36_93
.LBB36_94:                              # %sw.bb291
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r14
	movq	%r15, %rcx
	movq	%r9, %r15
	movq	%r11, %r13
	movq	16(%rcx), %rax
	movq	%rcx, %rbx
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB36_95
# BB#97:                                # %land.lhs.true299
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB36_95
# BB#98:                                # %if.then309
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%rbx), %rax
	movq	8(%rbx), %rcx
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	8(%rax), %rdi
	movzbl	2(%rbx), %ebx
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$90, %rdi
.LBB36_93:                              # %while.cond.backedge
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rbx, %rsi
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rsi
	movq	%r13, %r11
	xorq	%r13, %r13
	movq	%r15, %r9
	movq	%r14, %r10
	jmp	.LBB36_74
.LBB36_193:                             # %land.lhs.true636
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rdx
	movzbl	(%rdx), %ecx
	leaq	8(%r15), %rdi
	cmpq	$75, %rcx
	jne	.LBB36_194
# BB#195:                               # %land.lhs.true644
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%rdx), %rcx
	movq	const_int_rtx+504(%rip), %rsi
	cmpq	%rsi, %rcx
	jne	.LBB36_194
# BB#196:                               # %land.lhs.true653
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	leaq	-89(%r9), %rcx
	andq	%r11, %rcx
	cmpq	$1, %rcx
	ja	.LBB36_197
# BB#198:                               # %land.lhs.true659
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movq	$15, %rcx
	shrq	%cl, %rax
	andq	$510, %rax              # imm = 0x1FE
	movzbl	mode_bitsize(%rax), %eax
	decq	%rax
	andq	%r11, %rax
	movq	%r10, %rcx
	movq	%r10, %r12
	andq	%r11, %rcx
	cmpq	%rax, %rcx
	jne	.LBB36_204
# BB#199:                               # %land.lhs.true669
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%rdx), %rdi
	movq	16(%r15), %rsi
	movq	%r11, %rbx
	callq	rtx_equal_p
	movq	%rbx, %r11
	testq	%r11, %rax
	je	.LBB36_204
	jmp	.LBB36_200
.LBB36_192:                             # %sw.bb623
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movq	$32, %rcx
	movq	112(%rsp), %r14         # 8-byte Reload
	movq	%r14, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	mode_mask_array(,%rax,8), %rsi
	xorq	%rdi, %rdi
	movq	%r11, %r15
	movq	%r12, %r13
	movq	%r9, %r12
	movq	%r10, %rbx
	callq	gen_rtx_CONST_INT
	movq	$85, %rdi
	movq	%r14, %rsi
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rbx, %r10
	movq	%r12, %r9
	movq	%r13, %r12
	xorq	%r13, %r13
	movq	%r15, %r11
	movq	%rax, %rsi
	jmp	.LBB36_74
.LBB36_99:                              # %sw.bb327
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, %rcx
	andq	%r11, %rcx
	cmpq	$90, %rcx
	jne	.LBB36_103
# BB#100:                               # %land.lhs.true330
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	120(%rsp), %rcx         # 8-byte Reload
	leaq	-1(%rcx), %rcx
	andq	%r11, %rcx
	movq	%r10, %rdx
	andq	%r11, %rdx
	cmpq	%rcx, %rdx
	jne	.LBB36_103
# BB#101:                               # %land.lhs.true337
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$15, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$510, %rdx              # imm = 0x1FE
	movzbl	mode_bitsize(%rdx), %ecx
	cmpq	%rcx, 120(%rsp)         # 8-byte Folded Reload
	jae	.LBB36_102
.LBB36_103:                             # %sw.bb354
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%r15), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB36_185
# BB#104:                               # %land.lhs.true362
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%rcx), %r8
	testq	%r8, %r8
	js	.LBB36_185
# BB#105:                               # %land.lhs.true371
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_bitsize(%rax,%rax), %esi
	cmpq	%rsi, %r8
	jge	.LBB36_185
# BB#106:                               # %land.lhs.true386
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$64, 120(%rsp)          # 8-byte Folded Reload
	ja	.LBB36_185
# BB#107:                               # %land.lhs.true392
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$32, %rcx
	movq	112(%rsp), %rdi         # 8-byte Reload
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	movzbl	mode_bitsize(%rdi,%rdi), %r12d
	cmpq	$64, %r12
	ja	.LBB36_185
# BB#108:                               # %if.then398
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, %r13
	andq	%r11, %r13
	cmpq	$87, %r13
	jne	.LBB36_112
# BB#109:                               # %if.then398
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$89, %rbx
	jne	.LBB36_112
# BB#110:                               # %land.lhs.true413
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	120(%rsp), %rcx         # 8-byte Reload
	subq	%rsi, %rcx
	andq	%r11, %rcx
	movq	%r10, %rdx
	andq	%r11, %rdx
	cmpq	%rdx, %rcx
	jne	.LBB36_112
# BB#111:                               # %if.then426
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	mode_mask_array(,%rdi,8), %rsi
	movq	8(%r15), %rdx
	movq	$-1, %rax
	movq	%r8, %rcx
	shlq	%cl, %rax
	andq	%rsi, %rax
	xorq	%rdi, %rdi
	xorq	%r13, %r13
	movq	136(%rsp), %r12         # 8-byte Reload
	movq	%r12, %rsi
	movq	%rax, %rcx
	movq	%r11, %r14
	movq	%r10, %rbx
	movq	%r8, %r15
	callq	simplify_and_const_int
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	movq	%rbx, %r8
	callq	simplify_shift_const
	movq	%r14, %r11
	movq	%rax, %rsi
	movq	$89, %r9
	movq	%r15, %r10
	jmp	.LBB36_74
.LBB36_112:                             # %if.end438
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$89, %r13
	jne	.LBB36_117
# BB#113:                               # %if.end438
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$87, %rbx
	jne	.LBB36_117
# BB#114:                               # %if.end438
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r14, %rcx
	andq	%r11, %rcx
	cmpq	%rcx, %rax
	jne	.LBB36_117
# BB#115:                               # %land.lhs.true450
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rdi
	movq	%r8, %r15
	andq	%r11, %r15
	movq	%r14, %rsi
	movq	%r9, %r14
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movq	%r8, %r13
	callq	num_sign_bit_copies
	movq	%r13, %r8
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	72(%rsp), %r10          # 8-byte Reload
	movq	%r14, %r9
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	andq	%r11, %rax
	cmpq	%r15, %rax
	movq	128(%rsp), %r15         # 8-byte Reload
	jbe	.LBB36_117
# BB#116:                               # %if.then457
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rsi
	subq	%r8, %r10
	movq	$32, %rcx
	movq	%r10, %r9
	shlq	%cl, %r9
	movq	$63, %rcx
	sarq	%cl, %r9
	addq	%r9, %r10
	xorq	%r9, %r10
	andq	$-2, %r9
	addq	$89, %r9
	xorq	%r13, %r13
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_74
.LBB36_117:                             # %if.end468
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	%rbx, %r13
	jne	.LBB36_122
# BB#118:                               # %if.then471
                                        #   in Loop: Header=BB36_7 Depth=1
	movzbl	2(%r15), %eax
	movq	136(%rsp), %r12         # 8-byte Reload
	movq	%r12, %rcx
	andq	%r11, %rcx
	cmpq	%rcx, %rax
	je	.LBB36_121
# BB#119:                               # %if.then471
                                        #   in Loop: Header=BB36_7 Depth=1
	leaq	-88(%r9), %rax
	andq	%r11, %rax
	cmpq	$3, %rax
	jb	.LBB36_120
.LBB36_121:                             # %if.end487
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rsi
	addq	%r8, %r10
	xorq	%r13, %r13
	jmp	.LBB36_74
.LBB36_122:                             # %if.end492
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$89, %r13
	je	.LBB36_123
# BB#125:                               # %lor.lhs.false495
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$88, %r13
	jne	.LBB36_128
# BB#126:                               # %lor.lhs.false495
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$89, %rbx
	je	.LBB36_127
.LBB36_128:                             # %lor.lhs.false501
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r8, 8(%rsp)            # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r9, 96(%rsp)           # 8-byte Spill
	cmpq	$64, %r12
	ja	.LBB36_129
# BB#131:                               # %lor.lhs.false507
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movzbl	2(%r15), %esi
	movq	136(%rsp), %r12         # 8-byte Reload
	movq	%r12, %rax
	andq	%r11, %rax
	cmpq	%rax, %rsi
	je	.LBB36_135
# BB#132:                               # %land.lhs.true513
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	$88, %rax
	je	.LBB36_133
# BB#134:                               # %land.lhs.true513
                                        #   in Loop: Header=BB36_7 Depth=1
	leaq	-88(%rbx), %rax
	andq	%r11, %rax
	cmpq	$3, %rax
	jb	.LBB36_133
.LBB36_135:                             # %if.end526
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r15, %rdi
	movq	%r15, 128(%rsp)         # 8-byte Spill
	movq	%r11, %r15
	callq	nonzero_bits
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, %r14
	movq	72(%rsp), %rsi          # 8-byte Reload
	andq	%r15, %rsi
	movq	%r12, %r13
	movq	%r15, %r12
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	simplify_binary_operation
	testq	%rax, %rax
	je	.LBB36_136
# BB#137:                               # %lor.lhs.false537
                                        #   in Loop: Header=BB36_7 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	64(%rsp), %rsi          # 8-byte Reload
	jne	.LBB36_136
# BB#138:                               # %lor.lhs.false542
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	mode_mask_array(,%rcx,8), %rdx
	movq	8(%rax), %rcx
	movq	%rdx, %rdi
	andq	%rsi, %rdi
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	%r12, %r11
	andq	%r11, %rax
	cmpq	$83, %rax
	movq	%rdi, %rsi
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	128(%rsp), %r15         # 8-byte Reload
	movq	72(%rsp), %r10          # 8-byte Reload
	je	.LBB36_140
# BB#139:                               # %lor.lhs.false542
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rdx, %rsi
.LBB36_140:                             # %lor.lhs.false542
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rcx, %rsi
	xorq	%r13, %r13
	cmpq	$1, %rax
	movq	$83, %r8
	movq	136(%rsp), %r12         # 8-byte Reload
	jne	.LBB36_142
# BB#141:                               #   in Loop: Header=BB36_7 Depth=1
	movq	%rsi, %rdi
	jmp	.LBB36_154
.LBB36_194:                             #   in Loop: Header=BB36_7 Depth=1
	movq	%rdi, 72(%rsp)          # 8-byte Spill
.LBB36_197:                             #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r12
	movq	%r9, 96(%rsp)           # 8-byte Spill
.LBB36_204:                             # %if.end701
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%r15), %rbx
	movq	%r15, %r13
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB36_261
# BB#205:                               # %land.lhs.true709
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r12, %rsi
	andq	%r11, %rsi
	xorq	%rdi, %rdi
	movq	%r11, %r15
	callq	gen_rtx_CONST_INT
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	simplify_binary_operation
	movq	%r15, %r11
	testq	%rax, %rax
	je	.LBB36_261
# BB#206:                               # %land.lhs.true718
                                        #   in Loop: Header=BB36_7 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB36_261
# BB#207:                               # %land.lhs.true723
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	mode_mask_array(,%rcx,8), %rdx
	movzbl	(%r13), %ecx
	movq	8(%rax), %rbx
	movq	%rdx, %rdi
	movq	64(%rsp), %rax          # 8-byte Reload
	andq	%rax, %rdi
	movq	88(%rsp), %rax          # 8-byte Reload
	andq	%r11, %rax
	cmpq	$83, %rax
	movq	%rdi, %rsi
	je	.LBB36_209
# BB#208:                               # %land.lhs.true723
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rdx, %rsi
.LBB36_209:                             # %land.lhs.true723
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$1, %rcx
	movq	96(%rsp), %r9           # 8-byte Reload
	je	.LBB36_210
# BB#211:                               # %land.lhs.true723
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$47, %rax
	movq	%r12, %r10
	je	.LBB36_212
# BB#213:                               # %if.else.i1896
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rbx, %rsi
	cmpq	$1, %rax
	jne	.LBB36_215
# BB#214:                               #   in Loop: Header=BB36_7 Depth=1
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	movq	%rsi, %rdi
	xorq	%r13, %r13
	jmp	.LBB36_247
.LBB36_210:                             #   in Loop: Header=BB36_7 Depth=1
	xorq	%r13, %r13
	jmp	.LBB36_259
.LBB36_212:                             #   in Loop: Header=BB36_7 Depth=1
	xorq	%r13, %r13
	jmp	.LBB36_260
.LBB36_215:                             # %if.else10.i1898
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	%rcx, %rax
	jne	.LBB36_223
# BB#216:                               # %if.then12.i1899
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	88(%rsp), %rax          # 8-byte Reload
	leaq	-75(%rax), %rax
	andq	%r11, %rax
	cmpq	$10, %rax
	movabsq	$0, %r13
	ja	.LBB36_247
# BB#217:                               # %if.then12.i1899
                                        #   in Loop: Header=BB36_7 Depth=1
	jmpq	*.LJTI36_1(,%rax,8)
.LBB36_221:                             # %sw.bb16.i
                                        #   in Loop: Header=BB36_7 Depth=1
	addq	%rsi, %rdi
	movq	$75, 88(%rsp)           # 8-byte Folded Spill
	jmp	.LBB36_247
.LBB36_304:                             # %land.lhs.true828
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$47, %rbx
	cmpq	$47, %rcx
	je	.LBB36_309
# BB#305:                               # %if.else10.i1773
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, %r15
	movq	%r11, %r14
	xorq	%r13, %r13
	cmpq	$77, %rcx
	jne	.LBB36_306
# BB#307:                               #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r13
	movq	$1, %rbx
	movq	64(%rsp), %rdi          # 8-byte Reload
	andq	%rax, %rdi
.LBB36_308:                             # %if.end52.i1784
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rax, %rdi
	movq	%r12, %rsi
	callq	trunc_int_for_mode
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%r14, %r11
	movq	%r15, %r9
	movq	128(%rsp), %r15         # 8-byte Reload
	movq	%r13, %r10
.LBB36_309:                             # %if.then831
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rsi
	xorq	%r13, %r13
	movq	%rbx, 88(%rsp)          # 8-byte Spill
	jmp	.LBB36_74
.LBB36_350:                             # %land.lhs.true908
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$64, 120(%rsp)          # 8-byte Folded Reload
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	movq	72(%rsp), %r10          # 8-byte Reload
	ja	.LBB36_354
# BB#351:                               # %land.lhs.true914
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rdi
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	%r15, 128(%rsp)         # 8-byte Spill
	movq	%r11, %r15
	movq	%r10, %r12
	callq	nonzero_bits
	movq	%r12, %r10
	movq	%r15, %r11
	movq	128(%rsp), %r15         # 8-byte Reload
	movq	%rbx, %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	jne	.LBB36_354
# BB#352:                               # %land.lhs.true923
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rdi
	movq	136(%rsp), %r12         # 8-byte Reload
	movq	%r12, %rsi
	movq	%r15, %rbx
	movq	%r10, %r15
	callq	nonzero_bits
	movq	16(%rbx), %rdi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%r12, %rsi
	callq	nonzero_bits
	movq	%r15, %r10
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	movq	%rbx, %r15
	movq	16(%rsp), %rcx          # 8-byte Reload
	testq	%rcx, %rax
	jne	.LBB36_354
# BB#353:                               # %if.then935
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%r15), %rsi
	xorq	%r13, %r13
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_74
.LBB36_354:                             # %if.end940
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$87, %r14
	jne	.LBB36_355
# BB#356:                               # %land.lhs.true943
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%r15), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	movq	$87, %r9
	jne	.LBB36_357
# BB#358:                               # %land.lhs.true951
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %rsi
	movq	%r10, %r12
	andq	%r11, %rsi
	movq	%r11, %r14
	xorq	%rdi, %rdi
	xorq	%r13, %r13
	callq	gen_rtx_CONST_INT
	movq	$87, %rdi
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	simplify_binary_operation
	testq	%rax, %rax
	je	.LBB36_359
# BB#360:                               # %land.lhs.true960
                                        #   in Loop: Header=BB36_7 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	64(%rsp), %rdx          # 8-byte Reload
	jne	.LBB36_359
# BB#361:                               # %land.lhs.true965
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	mode_mask_array(,%rcx,8), %rcx
	movq	8(%rax), %rsi
	movq	%rcx, %rax
	andq	%rdx, %rax
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	%r14, %r11
	andq	%r11, %rdx
	cmpq	$83, %rdx
	movq	%rax, %rdi
	movq	%r12, %r10
	je	.LBB36_363
# BB#362:                               # %land.lhs.true965
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rcx, %rdi
.LBB36_363:                             # %land.lhs.true965
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rsi, %rdi
	cmpq	$1, %rdx
	je	.LBB36_368
# BB#364:                               # %land.lhs.true965
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$47, %rbx
	cmpq	$47, %rdx
	je	.LBB36_371
# BB#365:                               # %land.lhs.true965
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$75, %rdx
	jne	.LBB36_366
# BB#367:                               # %if.then12.i
                                        #   in Loop: Header=BB36_7 Depth=1
	addq	%rax, %rdi
.LBB36_368:                             # %if.end52.i
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r12
	movq	%r11, %r14
	andq	%rcx, %rdi
	movq	$1, %rbx
	je	.LBB36_370
# BB#369:                               # %if.end52.i
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$75, %rbx
.LBB36_370:                             # %if.end52.i
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	136(%rsp), %rsi         # 8-byte Reload
	callq	trunc_int_for_mode
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%r14, %r11
	movq	%r12, %r10
.LBB36_371:                             # %if.then971
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rsi
	movq	$87, %r9
	xorq	%r13, %r13
	movq	%rbx, 88(%rsp)          # 8-byte Spill
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_74
.LBB36_223:                             # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$75, %rax
	movabsq	$0, %rbx
	je	.LBB36_225
# BB#224:                               # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rbx
.LBB36_225:                             # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r12
	cmpq	$75, %rcx
	movabsq	$0, %r8
	je	.LBB36_227
# BB#226:                               # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %r8
.LBB36_227:                             # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$77, %rax
	movabsq	$0, %r9
	je	.LBB36_229
# BB#228:                               # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %r9
.LBB36_229:                             # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$77, %rcx
	movabsq	$0, %r10
	je	.LBB36_231
# BB#230:                               # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %r10
.LBB36_231:                             # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	%rsi, %rdi
	jne	.LBB36_261
# BB#232:                               # %if.else18.i1909
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%r8, %rbx
	andq	%r9, %rbx
	andq	%r10, %rbx
	je	.LBB36_261
# BB#233:                               # %if.else30.i1910
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$83, %rax
	je	.LBB36_241
# BB#234:                               # %if.else30.i1910
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$85, %rax
	jne	.LBB36_235
# BB#239:                               # %sw.bb36.i1912
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$83, %rcx
	movabsq	$0, %rax
	jne	.LBB36_244
# BB#240:                               # %sw.bb36.i1912
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rax
	jmp	.LBB36_244
.LBB36_142:                             # %lor.lhs.false542
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$47, %rax
	jne	.LBB36_144
# BB#143:                               #   in Loop: Header=BB36_7 Depth=1
	movq	%r12, %r15
	movq	$47, 88(%rsp)           # 8-byte Folded Spill
	jmp	.LBB36_166
.LBB36_102:                             # %if.then349
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r15), %rsi
	movq	$90, %r9
	xorq	%r13, %r13
	jmp	.LBB36_74
.LBB36_144:                             # %if.else10.i1855
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$83, %rax
	jne	.LBB36_146
# BB#145:                               # %if.then12.i1856
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rcx, %rdi
	jmp	.LBB36_153
.LBB36_241:                             # %sw.bb41.i1914
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$84, %rcx
	movabsq	$0, %rax
	je	.LBB36_243
# BB#242:                               # %sw.bb41.i1914
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rax
.LBB36_243:                             # %sw.bb41.i1914
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$47, 88(%rsp)           # 8-byte Folded Spill
	je	.LBB36_245
.LBB36_244:                             # %sw.bb41.i1914
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$83, 88(%rsp)           # 8-byte Folded Spill
.LBB36_245:                             # %sw.bb41.i1914
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	%rax, %r13
	jmp	.LBB36_246
.LBB36_235:                             # %if.else30.i1910
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$84, %rax
	jne	.LBB36_238
# BB#236:                               # %sw.bb31.i1911
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$83, %rcx
	movq	$47, 88(%rsp)           # 8-byte Folded Spill
	je	.LBB36_238
# BB#237:                               # %sw.bb31.i1911
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$84, 88(%rsp)           # 8-byte Folded Spill
.LBB36_238:                             # %sw.bb31.i1911
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	96(%rsp), %r9           # 8-byte Reload
	xorq	%r13, %r13
.LBB36_246:                             # %if.end52.i1919
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r12, %r10
	jmp	.LBB36_247
.LBB36_146:                             # %if.else18.i1863
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r15, %rcx
	movq	%r12, %r15
	cmpq	%rsi, %rdi
	jne	.LBB36_147
# BB#148:                               # %switch.early.test
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	88(%rsp), %rax          # 8-byte Reload
	leaq	-75(%rax), %rax
	andq	%r11, %rax
	cmpq	$10, %rax
	jbe	.LBB36_150
# BB#149:                               #   in Loop: Header=BB36_7 Depth=1
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	%r15, %r12
	movq	%rcx, %r15
	xorq	%r13, %r13
	jmp	.LBB36_154
.LBB36_222:                             # %sw.bb17.i
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	jmp	.LBB36_247
.LBB36_218:                             # %sw.bb.i
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rbx, %rdi
	movq	$83, 88(%rsp)           # 8-byte Folded Spill
	jmp	.LBB36_247
.LBB36_219:                             # %sw.bb14.i
                                        #   in Loop: Header=BB36_7 Depth=1
	orq	%rsi, %rdi
	movq	$84, 88(%rsp)           # 8-byte Folded Spill
	jmp	.LBB36_247
.LBB36_220:                             # %sw.bb15.i
                                        #   in Loop: Header=BB36_7 Depth=1
	xorq	%rsi, %rdi
	movq	$85, 88(%rsp)           # 8-byte Folded Spill
.LBB36_247:                             # %if.end52.i1919
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rdx, %rdi
	jne	.LBB36_248
# BB#251:                               # %land.lhs.true.i1922
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r12
	movq	%r9, %r15
	movq	88(%rsp), %rax          # 8-byte Reload
	leaq	-75(%rax), %rcx
	andq	%r11, %rcx
	cmpq	$10, %rcx
	ja	.LBB36_253
# BB#252:                               # %land.lhs.true.i1922
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$1, %r14
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$1537, %rax             # imm = 0x601
	jne	.LBB36_258
.LBB36_253:                             # %if.else63.i1924
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	88(%rsp), %rcx          # 8-byte Reload
	andq	%r11, %rcx
	xorq	%rax, %rax
	movq	$47, %r14
	cmpq	$83, %rcx
	je	.LBB36_258
	jmp	.LBB36_254
.LBB36_248:                             # %if.else63.thread.i1921
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	88(%rsp), %rax          # 8-byte Reload
	andq	%r11, %rax
	cmpq	$83, %rax
	movabsq	$0, %rax
	jne	.LBB36_250
# BB#249:                               # %if.else63.thread.i1921
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rax
.LBB36_250:                             # %if.else63.thread.i1921
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r12
	movq	%r9, %r15
.LBB36_254:                             # %if.else68.i1929
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	%rdx, %rdi
	movabsq	$0, %rcx
	jne	.LBB36_256
# BB#255:                               # %if.else68.i1929
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rcx
.LBB36_256:                             # %if.else68.i1929
                                        #   in Loop: Header=BB36_7 Depth=1
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB36_258
# BB#257:                               # %if.else68.i1929
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	88(%rsp), %r14          # 8-byte Reload
.LBB36_258:                             # %if.end77.i1932
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	%r11, %rbx
	callq	trunc_int_for_mode
	movq	%rbx, %r11
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%r14, 88(%rsp)          # 8-byte Spill
	movq	%r15, %r9
.LBB36_259:                             # %if.then731
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r12, %r10
.LBB36_260:                             # %if.then731
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rsi
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_74
.LBB36_150:                             # %switch.early.test
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	$77, 88(%rsp)           # 8-byte Folded Spill
	movq	%r15, %r12
	movq	%rcx, %r15
	xorq	%r13, %r13
	jmpq	*.LJTI36_2(,%rax,8)
.LBB36_152:                             # %sw.bb41.i1867
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$1, %r13
.LBB36_153:                             # %if.end52.i1872
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$83, %r8
	jmp	.LBB36_154
.LBB36_151:                             # %sw.bb31.i1865
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$47, %r8
.LBB36_154:                             # %if.end52.i1872
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rdx, %rdi
	jne	.LBB36_155
# BB#158:                               # %land.lhs.true.i1875
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r15, 128(%rsp)         # 8-byte Spill
	movq	%r9, 96(%rsp)           # 8-byte Spill
	leaq	-75(%r8), %rax
	andq	%r11, %rax
	cmpq	$10, %rax
	ja	.LBB36_160
# BB#159:                               # %land.lhs.true.i1875
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$1537, %rsi             # imm = 0x601
	jne	.LBB36_165
.LBB36_160:                             # %if.else63.i1877
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r8, %rax
	andq	%r11, %rax
	xorq	%rcx, %rcx
	movq	$47, 88(%rsp)           # 8-byte Folded Spill
	cmpq	$83, %rax
	je	.LBB36_165
	jmp	.LBB36_161
.LBB36_155:                             # %if.else63.thread.i1874
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r15, 128(%rsp)         # 8-byte Spill
	movq	%r8, %rax
	andq	%r11, %rax
	cmpq	$83, %rax
	movabsq	$0, %rcx
	jne	.LBB36_157
# BB#156:                               # %if.else63.thread.i1874
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rcx
.LBB36_157:                             # %if.else63.thread.i1874
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, 96(%rsp)           # 8-byte Spill
.LBB36_161:                             # %if.else68.i1882
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	%rdx, %rdi
	movabsq	$0, %rax
	jne	.LBB36_163
# BB#162:                               # %if.else68.i1882
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rax
.LBB36_163:                             # %if.else68.i1882
                                        #   in Loop: Header=BB36_7 Depth=1
	testq	%rcx, %rax
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	jne	.LBB36_165
# BB#164:                               # %if.else68.i1882
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r8, 88(%rsp)           # 8-byte Spill
.LBB36_165:                             # %if.end77.i1885
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r12, %rsi
	movq	%r12, %r15
	movq	%r11, %r14
	movq	%r10, %r12
	callq	trunc_int_for_mode
	movq	%r12, %r10
	movq	%r14, %r11
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	96(%rsp), %r9           # 8-byte Reload
.LBB36_166:                             # %if.end549
                                        #   in Loop: Header=BB36_7 Depth=1
	leaq	-89(%r9), %rax
	andq	%r11, %rax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	leaq	-89(%rbx), %rcx
	andq	%r11, %rcx
	cmpq	$2, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	xorq	%rax, %rcx
	movq	8(%rsp), %rdi           # 8-byte Reload
	je	.LBB36_168
# BB#167:                               #   in Loop: Header=BB36_7 Depth=1
	negq	%rdi
.LBB36_168:                             # %if.end549
                                        #   in Loop: Header=BB36_7 Depth=1
	addq	%r10, %rdi
	movq	$32, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB36_181
# BB#169:                               # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r13, %r8
	cmpq	$89, %rbx
	movabsq	$0, %rax
	jne	.LBB36_171
# BB#170:                               # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rax
.LBB36_171:                             # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	16(%rsp), %rdx          # 8-byte Reload
	cmpq	$87, %rdx
	movabsq	$0, %rcx
	jne	.LBB36_173
# BB#172:                               # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rcx
.LBB36_173:                             # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$90, %rdx
	movabsq	$0, %rdx
	jne	.LBB36_175
# BB#174:                               # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rdx
.LBB36_175:                             # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$88, %rbx
	movabsq	$0, %rsi
	jne	.LBB36_177
# BB#176:                               # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rsi
.LBB36_177:                             # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	testq	%rcx, %rsi
	jne	.LBB36_178
# BB#179:                               # %land.lhs.true570
                                        #   in Loop: Header=BB36_7 Depth=1
	andq	%rdx, %rax
	movq	%r8, %r13
	jne	.LBB36_180
.LBB36_181:                             # %if.else583
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$32, %rcx
	movq	%rdi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	sarq	%cl, %rdx
	movq	$63, %rcx
	sarq	%cl, %rax
	addq	%rax, %rdi
	testq	%rdx, %rdx
	movq	128(%rsp), %r12         # 8-byte Reload
	js	.LBB36_183
# BB#182:                               # %if.else583
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, %rbx
.LBB36_183:                             # %if.else583
                                        #   in Loop: Header=BB36_7 Depth=1
	xorq	%rax, %rdi
	jmp	.LBB36_184
.LBB36_178:                             #   in Loop: Header=BB36_7 Depth=1
	movq	128(%rsp), %r12         # 8-byte Reload
	movq	%r8, %r13
	jmp	.LBB36_184
.LBB36_180:                             #   in Loop: Header=BB36_7 Depth=1
	movq	128(%rsp), %r12         # 8-byte Reload
.LBB36_184:                             # %if.end590
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	8(%r12), %rsi
	movq	%rdi, %r10
	movq	%rbx, %r9
	movq	%r15, %r12
	jmp	.LBB36_74
	.align	16, 0x90
.LBB36_7:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r15), %ecx
	cmpq	$49, %rcx
	je	.LBB36_8
# BB#10:                                # %if.end20
                                        #   in Loop: Header=BB36_7 Depth=1
	testq	%r11, %r13
	jne	.LBB36_11
# BB#12:                                # %if.end23
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r9, %rcx
	andq	%r11, %rcx
	cmpq	$91, %rcx
	jne	.LBB36_13
# BB#14:                                # %if.then26
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, %r10
	subq	%rax, %r10
	movq	$88, %r9
	jmp	.LBB36_15
.LBB36_13:                              #   in Loop: Header=BB36_7 Depth=1
	movq	%rax, %r10
	movq	120(%rsp), %rcx         # 8-byte Reload
.LBB36_15:                              # %if.end31
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	%r9, %rdi
	andq	%r11, %rdi
	leaq	-89(%r9), %rax
	andq	%r11, %rax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	cmpq	$88, %rdi
	movabsq	$0, %rcx
	jne	.LBB36_17
# BB#16:                                # %if.end31
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %rcx
.LBB36_17:                              # %if.end31
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r15, 128(%rsp)         # 8-byte Spill
	orq	%rcx, %rax
	movq	%r12, %rsi
	jne	.LBB36_19
# BB#18:                                # %if.end31
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	112(%rsp), %rsi         # 8-byte Reload
.LBB36_19:                              # %if.end31
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$32, %rcx
	movq	%rsi, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_bitsize(%rax,%rax), %r15d
	leaq	-1(%r15), %rdx
	movq	%rdx, %rcx
	andq	%r11, %rcx
	movq	%r10, %rax
	andq	%r11, %rax
	cmpq	%rcx, %rax
	jbe	.LBB36_21
# BB#20:                                # %if.end31
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rdx, %r10
.LBB36_21:                              # %if.end31
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	jbe	.LBB36_26
# BB#22:                                # %if.end31
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$89, %rdi
	je	.LBB36_26
# BB#23:                                # %if.else
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$88, %rdi
	je	.LBB36_25
# BB#24:                                # %if.else
                                        #   in Loop: Header=BB36_7 Depth=1
	cmpq	$91, %rdi
	jne	.LBB36_28
.LBB36_25:                              # %if.then60
                                        #   in Loop: Header=BB36_7 Depth=1
	xorq	%rdx, %rdx
	divq	%r15
	movq	%rdx, %r10
.LBB36_26:                              # %if.end67
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r11, %r13
	cmpq	$89, %rdi
	jne	.LBB36_27
# BB#30:                                # %land.lhs.true
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %r14
	movq	128(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	movq	%rsi, %r12
	callq	num_sign_bit_copies
	movq	%r13, %r11
	andq	%r11, %rax
	cmpq	%r15, %rax
	je	.LBB36_31
# BB#32:                                # %if.end93
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r12, 72(%rsp)          # 8-byte Spill
	movq	%r11, %rbx
	callq	num_sign_bit_copies
	movq	%r14, %r10
	addq	%r10, %rax
	andq	%rbx, %rax
	movq	%rbx, %r13
	cmpq	%r15, %rax
	jb	.LBB36_34
# BB#33:                                # %if.end93
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	96(%rsp), %r10          # 8-byte Reload
.LBB36_34:                              # %if.end93
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	$89, %r9
	cmpq	$64, %r15
	movq	136(%rsp), %r12         # 8-byte Reload
	ja	.LBB36_35
# BB#36:                                # %land.lhs.true102
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	%r10, %rbx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	72(%rsp), %rsi          # 8-byte Reload
	callq	nonzero_bits
	movq	%r13, %r11
	addq	%r11, %r15
	movq	$1, %rdx
	movq	%r15, %rcx
	shlq	%cl, %rdx
	testq	%rax, %rdx
	movabsq	$0, %r9
	jne	.LBB36_38
# BB#37:                                # %land.lhs.true102
                                        #   in Loop: Header=BB36_7 Depth=1
	movabsq	$1, %r9
.LBB36_38:                              # %land.lhs.true102
                                        #   in Loop: Header=BB36_7 Depth=1
	addq	$89, %r9
	movq	%rbx, %r10
	jmp	.LBB36_39
.LBB36_27:                              #   in Loop: Header=BB36_7 Depth=1
	movq	%r13, %r11
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_40
.LBB36_35:                              #   in Loop: Header=BB36_7 Depth=1
	movq	%r13, %r11
.LBB36_39:                              # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	72(%rsp), %rsi          # 8-byte Reload
.LBB36_40:                              # %if.end112
                                        #   in Loop: Header=BB36_7 Depth=1
	movq	128(%rsp), %r15         # 8-byte Reload
	movl	(%r15), %eax
	movq	%rax, %rbx
	andq	$65535, %rbx            # imm = 0xFFFF
	xorq	%r13, %r13
	cmpq	$62, %rbx
	jg	.LBB36_45
# BB#41:                                # %if.end112
	cmpq	$48, %rbx
	jne	.LBB36_393
# BB#42:                                # %sw.bb151
	leaq	-89(%r9), %rax
	andq	%r11, %rax
	cmpq	$1, %rax
	ja	.LBB36_393
# BB#43:                                # %land.lhs.true157
	movq	%r12, %r13
	movq	%r9, %r14
	movq	$32, %rcx
	movq	112(%rsp), %rax         # 8-byte Reload
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_bitsize(%rax,%rax), %edi
	subq	%r10, %rdi
	movq	%r10, %r12
	movq	$1, %rsi
	movq	$1, %rdx
	movq	%r11, %rbx
	callq	mode_for_size
	movq	%rbx, %r11
	andq	%r11, %rax
	cmpq	$51, %rax
	jne	.LBB36_75
# BB#44:
	movq	%r14, %r9
	movq	%r12, %r10
	jmp	.LBB36_63
.LBB36_3:
	movq	%r9, 104(%rsp)          # 8-byte Spill
	movq	%r8, 48(%rsp)           # 8-byte Spill
	xorq	%r13, %r13
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	movq	%r12, 112(%rsp)         # 8-byte Spill
	movq	$0, 64(%rsp)            # 8-byte Folded Spill
	xorq	%r10, %r10
	movq	%r14, %r9
	movq	%r14, 80(%rsp)          # 8-byte Spill
	jmp	.LBB36_393
.LBB36_50:                              # %if.end112
	cmpq	$103, %rbx
	jne	.LBB36_393
# BB#51:                                # %sw.bb748
	movq	%r9, %rax
	andq	%r11, %rax
	cmpq	$90, %rax
	jne	.LBB36_393
# BB#52:                                # %land.lhs.true751
	movq	16(%r15), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rax
	movq	$90, %r9
	jne	.LBB36_393
# BB#53:                                # %land.lhs.true757
	movq	8(%r15), %rdi
	movzbl	2(%rdi), %eax
	movq	%r12, %rcx
	andq	%r11, %rcx
	cmpq	%rcx, %rax
	jne	.LBB36_393
# BB#54:                                # %land.lhs.true766
	movq	120(%rsp), %rsi         # 8-byte Reload
	leaq	-1(%rsi), %rax
	movq	%rax, %rcx
	andq	%r11, %rcx
	movq	%r10, %rdx
	andq	%r11, %rdx
	cmpq	%rcx, %rdx
	jne	.LBB36_393
# BB#55:                                # %land.lhs.true766
	cmpq	$64, %rsi
	ja	.LBB36_393
# BB#56:                                # %land.lhs.true766
	cmpq	$2, %rax
	jl	.LBB36_393
# BB#57:                                # %land.lhs.true789
	movq	%r10, %r14
	movq	%r11, %rbx
	movq	%r12, %rsi
	callq	nonzero_bits
	cmpq	$1, %rax
	jne	.LBB36_58
# BB#262:                               # %land.lhs.true796
	movq	%r12, %rdi
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	mode_mask_array(,%rax,8), %rdx
	movq	%rdx, %rax
	movq	64(%rsp), %rcx          # 8-byte Reload
	andq	%rcx, %rax
	movq	88(%rsp), %rsi          # 8-byte Reload
	andq	%rbx, %rsi
	cmpq	$83, %rsi
	movq	%rax, %rcx
	je	.LBB36_264
# BB#263:                               # %land.lhs.true796
	movq	%rdx, %rcx
.LBB36_264:                             # %land.lhs.true796
	movq	%r15, %r12
	andq	$1, %rcx
	xorq	%r13, %r13
	movq	%rdi, %r15
	cmpq	$1, %rsi
	je	.LBB36_265
# BB#266:                               # %land.lhs.true796
	movq	$47, %rbx
	cmpq	$47, %rsi
	je	.LBB36_292
# BB#267:                               # %land.lhs.true796
	cmpq	$85, %rsi
	jne	.LBB36_269
# BB#268:                               # %if.then12.i1811
	xorq	%rcx, %rax
	movq	$85, 88(%rsp)           # 8-byte Folded Spill
	jmp	.LBB36_279
.LBB36_75:                              # %land.lhs.true165
	movq	8(%r15), %rdi
	movzbl	2(%rdi), %ecx
	cmpq	%rcx, %rax
	movq	%r14, %r9
	jne	.LBB36_76
# BB#77:                                # %if.then174
	movq	%r13, 136(%rsp)         # 8-byte Spill
	movq	%r9, %rbx
	movq	%r9, 96(%rsp)           # 8-byte Spill
	andq	%r11, %rbx
	callq	copy_rtx
	movq	%rax, %r15
	leaq	8(%r15), %r14
	movq	8(%r15), %rdi
	movabsq	$4294967288, %rax       # imm = 0xFFFFFFF8
	movq	%r12, %rsi
	andq	%rax, %rsi
	movq	$3, %rcx
	shrq	%cl, %rsi
	callq	plus_constant_wide
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	cmpq	$89, %rbx
	je	.LBB36_78
# BB#79:                                # %if.then174
	movabsq	$1, %rdi
	jmp	.LBB36_80
.LBB36_11:
	movq	%rax, %r10
	jmp	.LBB36_393
.LBB36_76:
	movq	%r12, %r10
.LBB36_63:
	movq	%r13, %r12
	xorq	%r13, %r13
	jmp	.LBB36_393
.LBB36_31:
	movq	$89, %r9
	xorq	%r13, %r13
	xorq	%r10, %r10
	movq	%rbx, %r15
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_28:                              # %if.else64
	movq	const_int_rtx+512(%rip), %r15
	xorq	%r13, %r13
.LBB36_29:                              # %while.end
	xorq	%r10, %r10
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_78:
	movabsq	$0, %rdi
.LBB36_80:                              # %if.then174
	orq	$120, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%r15, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %r15
	xorq	%r13, %r13
	xorq	%r10, %r10
	movq	136(%rsp), %r12         # 8-byte Reload
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	movq	96(%rsp), %r9           # 8-byte Reload
.LBB36_393:                             # %while.end
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movq	%r9, %r14
	andq	%r11, %r14
	leaq	-89(%r9), %rax
	andq	%r11, %rax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	cmpq	$88, %r14
	movq	104(%rsp), %r9          # 8-byte Reload
	jne	.LBB36_394
# BB#395:                               # %while.end
	movq	%r13, 72(%rsp)          # 8-byte Spill
	movabsq	$1, %rcx
	jmp	.LBB36_396
.LBB36_394:
	movq	%r13, 72(%rsp)          # 8-byte Spill
	movabsq	$0, %rcx
.LBB36_396:                             # %while.end
	movq	%r15, 128(%rsp)         # 8-byte Spill
	orq	%rcx, %rax
	movq	%r12, %rax
                                        # kill: R12<def> RAX<kill>
	movq	%rax, %r13
	jne	.LBB36_398
# BB#397:                               # %while.end
	movq	112(%rsp), %r12         # 8-byte Reload
.LBB36_398:                             # %while.end
	testq	%r9, %r9
	je	.LBB36_402
# BB#399:                               # %land.lhs.true1146
	movzbl	(%r9), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$50, %rax
	jne	.LBB36_402
# BB#400:                               # %land.lhs.true1154
	movq	16(%r9), %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB36_402
# BB#401:                               # %land.lhs.true1162
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%r10, %rcx
	andq	%r11, %rcx
	cmpq	%rcx, %rax
	je	.LBB36_403
.LBB36_402:                             # %if.else1176
	andq	%r11, %r10
	xorq	%rdi, %rdi
	movq	%r10, %rsi
	movq	%r9, %r15
	movq	%r11, %rbx
	callq	gen_rtx_CONST_INT
	movq	%rbx, %r11
	movq	%r15, %r9
	movq	%rax, 112(%rsp)         # 8-byte Spill
.LBB36_403:                             # %if.end1179
	movq	%r13, 136(%rsp)         # 8-byte Spill
	testq	%r9, %r9
	je	.LBB36_407
# BB#404:                               # %land.lhs.true1181
	movq	8(%r9), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB36_407
# BB#405:                               # %land.lhs.true1189
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movq	%r12, %rcx
	andq	%r11, %rcx
	cmpq	%rcx, %rdx
	jne	.LBB36_407
# BB#406:                               # %land.lhs.true1198
	movq	8(%r15), %rcx
	movq	128(%rsp), %rdx         # 8-byte Reload
	cmpq	%rdx, %rcx
	je	.LBB36_410
.LBB36_407:                             # %if.else1211
	movq	128(%rsp), %rsi         # 8-byte Reload
	movl	(%rsi), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movq	%r12, %rcx
	andq	%r11, %rcx
	cmpq	%rcx, %rdx
	jne	.LBB36_409
# BB#408:
	movq	%rsi, %r15
	jmp	.LBB36_410
.LBB36_409:                             # %if.then1217
	movq	%r12, %rdi
	movq	%r9, %r15
	callq	gen_lowpart_for_combine
	movq	%r15, %r9
	movq	%rax, %r15
	movl	(%r15), %eax
.LBB36_410:                             # %if.end1220
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$49, %rax
	jne	.LBB36_412
# BB#411:                               # %if.then1225
	testq	%r9, %r9
	jne	.LBB36_9
.LBB36_8:
	movq	%r15, %r9
	jmp	.LBB36_9
.LBB36_412:                             # %if.end1231
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rcx
	callq	simplify_binary_operation
	testq	%rax, %rax
	jne	.LBB36_414
# BB#413:                               # %if.else1236
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%rbx, %rcx
	callq	gen_rtx_fmt_ee
.LBB36_414:                             # %if.end1238
	movq	88(%rsp), %r13          # 8-byte Reload
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %r13
	cmpq	$1, %r13
	jne	.LBB36_416
# BB#415:
	movq	136(%rsp), %r15         # 8-byte Reload
	movq	80(%rsp), %r14          # 8-byte Reload
	jmp	.LBB36_420
.LBB36_416:                             # %land.lhs.true1241
	movzbl	(%rax), %ecx
	cmpq	%r14, %rcx
	movq	136(%rsp), %r15         # 8-byte Reload
	jne	.LBB36_417
# BB#418:                               # %land.lhs.true1246
	movq	16(%rax), %rdx
	movzbl	(%rdx), %ecx
	cmpq	$54, %rcx
	movq	80(%rsp), %r14          # 8-byte Reload
	jne	.LBB36_420
# BB#419:                               # %if.then1254
	movq	8(%rax), %rcx
	movq	8(%rdx), %r8
	movq	%rax, %rdi
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	%r12, %rdx
	callq	simplify_shift_const
	jmp	.LBB36_420
.LBB36_417:
	movq	80(%rsp), %r14          # 8-byte Reload
.LBB36_420:                             # %if.end1266
	andq	%rbx, %r14
	cmpq	$90, %r14
	jne	.LBB36_423
# BB#421:                               # %if.end1266
	movq	%r15, %rcx
	andq	%rbx, %rcx
	movq	%r12, %rdx
	andq	%rbx, %rdx
	cmpq	%rcx, %rdx
	je	.LBB36_423
# BB#422:                               # %if.then1272
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	mode_mask_array(,%rcx,8), %r8
	movq	48(%rsp), %rcx          # 8-byte Reload
	andq	%rbx, %rcx
	shrq	%cl, %r8
	xorq	%rdi, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	movq	%r8, %rcx
	callq	simplify_and_const_int
.LBB36_423:                             # %if.end1278
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	%rax, %r9
	movq	72(%rsp), %rax          # 8-byte Reload
	testq	%rbx, %rax
	je	.LBB36_425
# BB#424:                               # %if.then1281
	movq	$86, %rdi
	movq	%r15, %rsi
	movq	%r9, %rdx
	movq	%r15, %rcx
	callq	simplify_gen_unary
	movq	%rax, %r9
.LBB36_425:                             # %if.end1283
	cmpq	$1, %r13
	jne	.LBB36_426
.LBB36_9:                               # %return
	movq	%r9, %rax
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB36_426:                             # %if.then1286
	movq	%r9, %rbx
	cmpq	$63, 120(%rsp)          # 8-byte Folded Reload
	ja	.LBB36_427
# BB#428:                               # %if.then1292
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	%r15, %rsi
	callq	trunc_int_for_mode
	movq	%rax, %r8
	movq	%rbx, %rdx
	jmp	.LBB36_429
.LBB36_427:
	movq	%rbx, %rdx
	movq	64(%rsp), %r8           # 8-byte Reload
.LBB36_429:                             # %if.end1294
	cmpq	$47, %r13
	jne	.LBB36_430
# BB#432:                               # %if.then1302
	xorq	%rdi, %rdi
	movq	%r8, %rsi
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_CONST_INT  # TAILCALL
.LBB36_430:                             # %if.end1294
	cmpq	$83, %r13
	jne	.LBB36_433
# BB#431:                               # %if.then1297
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r8, %rcx
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	simplify_and_const_int  # TAILCALL
.LBB36_433:                             # %if.else1304
	movq	$32, %rcx
	movq	88(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	rtx_class(%rax), %eax
	cmpq	$49, %rax
	jne	.LBB36_434
# BB#435:                               # %if.then1310
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r15, %rcx
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	simplify_gen_unary  # TAILCALL
.LBB36_434:                             # %if.else1312
	xorq	%rdi, %rdi
	movq	%r8, %rsi
	movq	%rdx, %r14
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	addq	$144, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_binary  # TAILCALL
.LBB36_60:                              # %if.end112
	cmpq	$122, %rbx
	movq	%r13, %r12
	jne	.LBB36_61
# BB#385:                               # %sw.bb1057
	movq	%r9, %rcx
	andq	%r11, %rcx
	cmpq	$90, %rcx
	movabsq	$0, %r13
	jne	.LBB36_393
# BB#386:                               # %land.lhs.true1060
	movq	8(%r15), %rdx
	movl	(%rdx), %ebx
	movq	%rbx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$90, %rcx
	movq	$90, %r9
	jne	.LBB36_393
# BB#387:                               # %land.lhs.true1068
	movq	16(%rdx), %rsi
	movzbl	(%rsi), %ecx
	cmpq	$54, %rcx
	jne	.LBB36_393
# BB#388:                               # %land.lhs.true1079
	movq	%r12, %r14
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movzbl	mode_bitsize(%rbx,%rbx), %edi
	movq	$15, %rcx
	shrq	%cl, %rax
	andq	$510, %rax              # imm = 0x1FE
	movzbl	mode_bitsize(%rax), %ecx
	movq	8(%rsi), %rax
	subq	%rcx, %rdi
	cmpq	%rdi, %rax
	jge	.LBB36_390
# BB#389:
	movq	%r14, %r12
	movq	$90, %r9
	xorq	%r13, %r13
	jmp	.LBB36_393
.LBB36_185:                             # %if.else594
	movq	%r9, %rax
	andq	%r11, %rax
	cmpq	%rax, %rbx
	jne	.LBB36_186
# BB#187:                               # %land.lhs.true599
	movq	%r9, %rbx
	cmpq	$54, %rdx
	jne	.LBB36_189
# BB#188:
	movq	%rbx, %r9
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_61:
	xorq	%r13, %r13
	jmp	.LBB36_393
.LBB36_186:
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_261:                             # %if.end735
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	(%rax), %rcx
	xorq	%rdi, %rdi
	movq	96(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rsi
	movq	%r14, %rdx
	movq	%r12, %rbx
	movq	%rbx, %r8
	callq	simplify_shift_const
	movq	16(%r13), %rcx
	movq	%rax, %r12
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movq	%rbx, %r8
	callq	simplify_shift_const
	movzbl	(%r13), %edi
	xorq	%r13, %r13
	movq	%r14, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rdi
	callq	apply_distributive_law
	movq	%r15, %r9
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	movq	%rax, %r15
	jmp	.LBB36_29
.LBB36_58:
	movq	%rbx, %r11
	movq	$90, %r9
	movq	%r14, %r10
	jmp	.LBB36_393
.LBB36_189:                             # %land.lhs.true607
	movq	8(%r15), %r12
	movq	%r10, %rsi
	andq	%r11, %rsi
	xorq	%rdi, %rdi
	movq	%r10, %r14
	callq	gen_rtx_CONST_INT
	movq	%r15, %r13
	movq	%rbx, %r15
	movq	%r15, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	simplify_binary_operation
	testq	%rax, %rax
	je	.LBB36_190
# BB#191:                               # %if.then616
	movq	16(%r13), %rcx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	xorq	%r13, %r13
	xorq	%r10, %r10
	movabsq	$4294967295, %r11       # imm = 0xFFFFFFFF
	movq	%r15, %r9
	movq	%rax, %r15
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_64:                              # %sw.bb120
	movq	%r12, %rax
	movq	%r10, %r12
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rax, %r14
	leaq	-89(%r9), %rax
	movq	%r9, 96(%rsp)           # 8-byte Spill
	andq	%r11, %rax
	movq	%r11, %r13
	cmpq	$1, %rax
	ja	.LBB36_65
# BB#66:                                # %land.lhs.true126
	movq	8(%r15), %rax
	movq	%rax, %rdi
	callq	mode_dependent_address_p
	testq	%r13, %rax
	jne	.LBB36_65
# BB#67:                                # %land.lhs.true130
	movzbl	3(%r15), %eax
	testq	$8, %rax
	jne	.LBB36_65
# BB#68:                                # %land.lhs.true134
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movzbl	mode_bitsize(%rax,%rax), %eax
	subq	%r12, %rax
	movq	$1, %rsi
	movq	$1, %rdx
	movq	%rax, %rdi
	callq	mode_for_size
	movq	%rax, %rcx
	andq	%r13, %rcx
	cmpq	$51, %rcx
	jne	.LBB36_69
.LBB36_65:
	movq	%r14, %rax
	movq	%r13, %r11
	movq	96(%rsp), %r9           # 8-byte Reload
	jmp	.LBB36_374
.LBB36_372:                             # %sw.bb976
	movq	%r12, %rdx
	movq	%r10, %r12
	movq	%r9, %r14
	movq	%r15, %rcx
	movq	%rdx, %r15
	movq	8(%rcx), %rdx
	movq	%rcx, %rbx
	movzbl	(%rdx), %ecx
	cmpq	$89, %rcx
	jne	.LBB36_373
# BB#375:                               # %land.lhs.true984
	movq	$15, %rcx
	shrq	%cl, %rax
	andq	$510, %rax              # imm = 0x1FE
	movzbl	mode_bitsize(%rax), %ecx
	decq	%rcx
	movq	%r11, %rsi
	andq	%rsi, %rcx
	movq	%r12, %rax
	andq	%rsi, %rax
	cmpq	%rcx, %rax
	jne	.LBB36_376
# BB#377:                               # %land.lhs.true994
	leaq	-89(%r14), %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	$1, %rcx
	ja	.LBB36_376
# BB#378:                               # %land.lhs.true1000
	movq	16(%rdx), %rcx
	movzbl	(%rcx), %esi
	cmpq	$54, %rsi
	jne	.LBB36_376
# BB#379:                               # %land.lhs.true1011
	movq	8(%rcx), %rcx
	cmpq	%rax, %rcx
	jne	.LBB36_376
# BB#380:                               # %land.lhs.true1024
	movq	8(%rdx), %rax
	movq	16(%rbx), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB36_376
# BB#381:                               # %if.then1036
	movq	%rbx, %rdx
	movq	16(%rdx), %rax
	movq	const_int_rtx+512(%rip), %rcx
	movzbl	2(%rdx), %edx
	movq	%r14, %r12
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %r12
	movq	$105, %rdi
	movq	%rdx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	cmpq	$89, %r12
	jne	.LBB36_382
# BB#384:                               # %if.then1050
	movq	%rax, %rcx
	movzbl	2(%rcx), %eax
	movq	$77, %rdi
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	gen_rtx_fmt_e
	movq	$89, %r9
	xorq	%r10, %r10
	movq	%r15, %r12
	movq	%rax, %r15
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r11
	xorq	%r13, %r13
	jmp	.LBB36_393
.LBB36_82:
	movq	%r14, %r9
	jmp	.LBB36_83
.LBB36_86:
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_317:
	movq	$85, 88(%rsp)           # 8-byte Folded Spill
	movq	%rcx, %rax
	jmp	.LBB36_330
.LBB36_319:
	movq	$47, 88(%rsp)           # 8-byte Folded Spill
	movq	$0, 32(%rsp)            # 8-byte Folded Spill
	jmp	.LBB36_344
.LBB36_321:                             # %if.then12.i1745
	xorq	%rcx, %rax
	movq	$85, 24(%rsp)           # 8-byte Folded Spill
	jmp	.LBB36_322
.LBB36_328:                             # %switch.early.test2010
	cmpq	$83, %rsi
	je	.LBB36_331
# BB#329:                               # %switch.early.test2010
	cmpq	$85, %rsi
	jne	.LBB36_330
.LBB36_322:                             # %if.end52.i1753.loopexit1
	movq	$0, 32(%rsp)            # 8-byte Folded Spill
	jmp	.LBB36_331
.LBB36_327:
	movq	%r15, %rbx
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	%r11, %r12
	movq	%rcx, %r15
.LBB36_330:                             # %if.end52.i1753.loopexit
	movq	$0, 32(%rsp)            # 8-byte Folded Spill
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
.LBB36_331:                             # %if.end52.i1753
	andq	%rdx, %rax
	je	.LBB36_335
# BB#332:                               # %if.else63.thread.i1754
	movq	24(%rsp), %rcx          # 8-byte Reload
	andq	%r12, %rcx
	cmpq	$83, %rcx
	jne	.LBB36_333
# BB#334:                               # %if.else63.thread.i1754
	movabsq	$1, %rcx
	jmp	.LBB36_338
.LBB36_294:                             # %sw.bb804
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r12, %rsi
	movq	%r15, %r12
	movq	%r9, %rdx
	movq	%r11, %rcx
	movq	%rsi, %rbx
	cmpq	$90, %rax
	jne	.LBB36_295
# BB#298:                               # %land.lhs.true807
	movq	120(%rsp), %rax         # 8-byte Reload
	leaq	-1(%rax), %rax
	movq	%rcx, %rdx
	andq	%rdx, %rax
	movq	72(%rsp), %rcx          # 8-byte Reload
	andq	%rdx, %rcx
	movq	%rdx, %r14
	cmpq	%rax, %rcx
	jne	.LBB36_299
# BB#300:                               # %land.lhs.true814
	movq	8(%r12), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	cmpq	$1, %rax
	jne	.LBB36_299
# BB#301:                               # %if.then821
	movq	%r12, %rax
	movq	8(%rax), %rax
	xorq	%r13, %r13
	xorq	%r10, %r10
	movq	%rbx, %r12
	movq	%r14, %r11
	movq	%rax, %r15
	movq	$90, %r9
	jmp	.LBB36_393
.LBB36_95:
	movq	%r13, %r11
	movq	%r15, %r9
	movq	%rbx, %r15
	jmp	.LBB36_96
.LBB36_200:                             # %if.then681
	movq	%r15, %rdx
	movq	136(%rsp), %r13         # 8-byte Reload
	movq	16(%rdx), %rax
	movq	const_int_rtx+512(%rip), %rcx
	movzbl	2(%rdx), %edx
	movq	96(%rsp), %rbx          # 8-byte Reload
	andq	%r11, %rbx
	movq	%r11, %r12
	movq	$106, %rdi
	movq	%rdx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	cmpq	$89, %rbx
	jne	.LBB36_201
# BB#202:                               # %if.then695
	movq	%rax, %rcx
	movzbl	2(%rcx), %eax
	movq	$77, %rdi
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	gen_rtx_fmt_e
	movq	$89, %r9
	xorq	%r10, %r10
	movq	%r13, %rcx
	movq	%r12, %r11
	movq	%rcx, %r12
	jmp	.LBB36_383
.LBB36_120:
	xorq	%r13, %r13
	jmp	.LBB36_393
.LBB36_123:
	movq	$89, %r9
	jmp	.LBB36_124
.LBB36_127:
	movq	$88, %r9
.LBB36_124:                             # %while.end
	xorq	%r13, %r13
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_129:
	movq	96(%rsp), %r9           # 8-byte Reload
	jmp	.LBB36_130
.LBB36_133:
	movq	96(%rsp), %r9           # 8-byte Reload
	jmp	.LBB36_297
.LBB36_136:
	movq	%r12, %r11
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	128(%rsp), %r15         # 8-byte Reload
.LBB36_130:                             # %while.end
	xorq	%r13, %r13
	movq	72(%rsp), %r10          # 8-byte Reload
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_306:
	movq	%r14, %r11
	movq	%r15, %r9
	movq	128(%rsp), %r15         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_355:
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_357:
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_359:
	movq	%r14, %r11
	movq	$87, %r9
.LBB36_83:                              # %while.end
	movq	%r12, %r10
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_366:
	movq	$87, %r9
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_147:
	movq	%r15, %r12
	movq	%rcx, %r15
	xorq	%r13, %r13
	jmp	.LBB36_393
.LBB36_392:                             # %while.end.loopexit2
	movq	$75, 88(%rsp)           # 8-byte Folded Spill
	jmp	.LBB36_393
.LBB36_265:
	movq	$85, 88(%rsp)           # 8-byte Folded Spill
	movq	%rcx, %rax
	jmp	.LBB36_279
.LBB36_269:                             # %if.else18.i1819
	cmpq	%rcx, %rax
	jne	.LBB36_270
# BB#271:                               # %switch.early.test2009
	xorq	%r13, %r13
	movq	$32, %rcx
	movq	88(%rsp), %rdi          # 8-byte Reload
	shlq	%cl, %rdi
	movq	$32, %rcx
	sarq	%cl, %rdi
	cmpq	$82, %rdi
	jg	.LBB36_275
# BB#272:                               # %switch.early.test2009
	cmpq	$75, %rsi
	jne	.LBB36_273
# BB#391:                               # %switch.early.test2009.while.end.loopexit_crit_edge2440
	movq	$75, 88(%rsp)           # 8-byte Folded Spill
	jmp	.LBB36_270
.LBB36_390:                             # %if.then1108
	movq	8(%rdx), %r13
	movq	%r11, %r12
	movq	%r10, %rcx
	andq	%r12, %rcx
	addq	%rcx, %rax
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	$90, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movzbl	2(%r15), %ecx
	movq	$122, %rdi
	movq	%rcx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	movq	$90, %r9
	movq	%r12, %r11
	xorq	%r10, %r10
	movq	%r14, %r12
	jmp	.LBB36_383
.LBB36_190:
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r11
	movq	%r15, %r9
	movq	%r13, %r15
	xorq	%r13, %r13
	movq	%r14, %r10
	movq	136(%rsp), %r12         # 8-byte Reload
	jmp	.LBB36_393
.LBB36_69:                              # %if.then142
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	andq	%r13, 72(%rsp)          # 8-byte Folded Spill
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	movq	%r12, %rdx
	andq	%rcx, %rdx
	movq	$3, %rcx
	shrq	%cl, %rdx
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	adjust_address_1
	cmpq	$89, 72(%rsp)           # 8-byte Folded Reload
	je	.LBB36_70
# BB#71:                                # %if.then142
	movabsq	$1, %rcx
	jmp	.LBB36_72
.LBB36_373:
	movq	%r15, %rax
	movq	%r14, %r9
	movq	%rbx, %r15
.LBB36_374:                             # %while.end
	xorq	%r13, %r13
	movq	%r12, %r10
	movq	%rax, %r12
	jmp	.LBB36_393
.LBB36_376:
	movq	%r15, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r11
	movq	%r14, %r9
	movq	%rbx, %r15
	xorq	%r13, %r13
	movq	%r12, %r10
	movq	%rcx, %r12
	jmp	.LBB36_393
.LBB36_382:
	xorq	%r10, %r10
	movq	%r15, %r12
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, %r11
	movq	%r14, %r9
	jmp	.LBB36_383
.LBB36_335:                             # %land.lhs.true.i1755
	movq	24(%rsp), %rcx          # 8-byte Reload
	leaq	-75(%rcx), %rcx
	andq	%r12, %rcx
	cmpq	$10, %rcx
	ja	.LBB36_337
# BB#336:                               # %land.lhs.true.i1755
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$1537, %rsi             # imm = 0x601
	jne	.LBB36_343
.LBB36_337:                             # %if.else63.i
	movq	24(%rsp), %rsi          # 8-byte Reload
	andq	%r12, %rsi
	xorq	%rcx, %rcx
	movq	$47, 88(%rsp)           # 8-byte Folded Spill
	cmpq	$83, %rsi
	je	.LBB36_343
	jmp	.LBB36_338
.LBB36_333:
	movabsq	$0, %rcx
.LBB36_338:                             # %if.else68.i1758
	cmpq	%rdx, %rax
	jne	.LBB36_339
# BB#340:                               # %if.else68.i1758
	movabsq	$1, %rdx
	jmp	.LBB36_341
.LBB36_295:
	movq	%rbx, %rax
	movq	%rcx, %r11
	movq	%rdx, %r9
	jmp	.LBB36_296
.LBB36_299:
	movq	%rbx, %rax
	movq	%r14, %r11
	movq	$90, %r9
.LBB36_296:                             # %while.end
	movq	%r12, %r15
	movq	%rax, %r12
.LBB36_297:                             # %while.end
	xorq	%r13, %r13
	movq	72(%rsp), %r10          # 8-byte Reload
	jmp	.LBB36_393
.LBB36_201:
	xorq	%r10, %r10
	movq	%r13, %rcx
	movq	%r12, %r11
	movq	%rcx, %r12
	movq	96(%rsp), %r9           # 8-byte Reload
.LBB36_383:                             # %while.end
	movq	%rax, %r15
	xorq	%r13, %r13
	jmp	.LBB36_393
.LBB36_275:                             # %switch.early.test2009
	cmpq	$83, %rsi
	jne	.LBB36_276
# BB#278:                               # %sw.bb41.i1824
	movq	$83, 88(%rsp)           # 8-byte Folded Spill
	movq	$1, %r13
	jmp	.LBB36_279
.LBB36_273:                             # %switch.early.test2009
	cmpq	$77, %rsi
	jne	.LBB36_279
# BB#274:
	movq	$77, 88(%rsp)           # 8-byte Folded Spill
.LBB36_270:
	movq	%r15, %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r11
	movq	$90, %r9
	movq	%r12, %r15
	movq	%rcx, %r12
.LBB36_96:                              # %while.end
	xorq	%r13, %r13
	movq	%r14, %r10
	jmp	.LBB36_393
.LBB36_70:
	movabsq	$0, %rcx
.LBB36_72:                              # %if.then142
	orq	$120, %rcx
	movq	%rcx, %rdi
	movq	%rbx, %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_e
	xorq	%r10, %r10
	movq	%r14, %r12
	movq	%rax, %r15
	movq	%r13, %r11
	movq	96(%rsp), %r9           # 8-byte Reload
	xorq	%r13, %r13
	jmp	.LBB36_393
.LBB36_339:
	movabsq	$0, %rdx
.LBB36_341:                             # %if.else68.i1758
	testq	%rcx, %rdx
	movq	$1, 88(%rsp)            # 8-byte Folded Spill
	jne	.LBB36_343
# BB#342:                               # %if.else68.i1758
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 88(%rsp)          # 8-byte Spill
.LBB36_343:                             # %if.end77.i1761
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	trunc_int_for_mode
	movq	%rax, 64(%rsp)          # 8-byte Spill
.LBB36_344:                             # %if.then862
	movq	%r13, 112(%rsp)         # 8-byte Spill
	movq	%rbx, %rax
	movq	8(%rax), %rax
	movq	$90, %r9
	xorq	%r10, %r10
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	%r15, %rdx
	movq	%rax, %r15
	movq	%r12, %r11
	movq	%rdx, %r12
	movq	%rcx, %r13
	jmp	.LBB36_393
.LBB36_276:                             # %switch.early.test2009
	cmpq	$85, %rsi
	jne	.LBB36_279
# BB#277:                               # %sw.bb36.i1822
	movq	$83, 88(%rsp)           # 8-byte Folded Spill
.LBB36_279:                             # %if.end52.i1829
	andq	%rdx, %rax
	je	.LBB36_283
# BB#280:                               # %if.else63.thread.i1831
	movq	88(%rsp), %rcx          # 8-byte Reload
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	$83, %rcx
	jne	.LBB36_281
# BB#282:                               # %if.else63.thread.i1831
	movabsq	$1, %rcx
	jmp	.LBB36_286
.LBB36_283:                             # %land.lhs.true.i1832
	movq	88(%rsp), %rcx          # 8-byte Reload
	leaq	-75(%rcx), %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	$10, %rcx
	ja	.LBB36_285
# BB#284:                               # %land.lhs.true.i1832
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$1537, %rsi             # imm = 0x601
	jne	.LBB36_291
.LBB36_285:                             # %if.else63.i1834
	movq	88(%rsp), %rsi          # 8-byte Reload
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rsi
	xorq	%rcx, %rcx
	movq	$47, %rbx
	cmpq	$83, %rsi
	je	.LBB36_291
	jmp	.LBB36_286
.LBB36_281:
	movabsq	$0, %rcx
.LBB36_286:                             # %if.else68.i1839
	cmpq	%rdx, %rax
	jne	.LBB36_287
# BB#288:                               # %if.else68.i1839
	movabsq	$1, %rdx
	jmp	.LBB36_289
.LBB36_287:
	movabsq	$0, %rdx
.LBB36_289:                             # %if.else68.i1839
	testq	%rcx, %rdx
	movq	$1, %rbx
	jne	.LBB36_291
# BB#290:                               # %if.else68.i1839
	movq	88(%rsp), %rbx          # 8-byte Reload
.LBB36_291:                             # %if.end77.i1842
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	trunc_int_for_mode
	movq	%rax, 64(%rsp)          # 8-byte Spill
.LBB36_292:                             # %if.then799
	movq	%r12, %rax
	movq	8(%rax), %rax
	xorq	%r10, %r10
	movq	%rbx, 88(%rsp)          # 8-byte Spill
	movq	%r15, %r12
	movq	%rax, %r15
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r11
	movq	$90, %r9
	jmp	.LBB36_393
.Ltmp547:
	.size	simplify_shift_const, .Ltmp547-simplify_shift_const
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI36_0:
	.quad	.LBB36_81
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_64
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_310
	.quad	.LBB36_372
	.quad	.LBB36_293
	.quad	.LBB36_90
	.quad	.LBB36_393
	.quad	.LBB36_393
	.quad	.LBB36_94
	.quad	.LBB36_393
	.quad	.LBB36_203
	.quad	.LBB36_193
	.quad	.LBB36_203
	.quad	.LBB36_192
	.quad	.LBB36_103
	.quad	.LBB36_103
	.quad	.LBB36_99
	.quad	.LBB36_103
.LJTI36_1:
	.quad	.LBB36_221
	.quad	.LBB36_247
	.quad	.LBB36_222
	.quad	.LBB36_247
	.quad	.LBB36_247
	.quad	.LBB36_247
	.quad	.LBB36_247
	.quad	.LBB36_247
	.quad	.LBB36_218
	.quad	.LBB36_219
	.quad	.LBB36_220
.LJTI36_2:
	.quad	.LBB36_392
	.quad	.LBB36_154
	.quad	.LBB36_393
	.quad	.LBB36_154
	.quad	.LBB36_154
	.quad	.LBB36_154
	.quad	.LBB36_154
	.quad	.LBB36_154
	.quad	.LBB36_152
	.quad	.LBB36_151
	.quad	.LBB36_152

	.text
	.align	16, 0x90
	.type	apply_distributive_law,@function
apply_distributive_law:                 # @apply_distributive_law
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp554:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp555:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp556:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp557:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp558:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp559:
	.cfi_def_cfa_offset 80
.Ltmp560:
	.cfi_offset %rbx, -48
.Ltmp561:
	.cfi_offset %r12, -40
.Ltmp562:
	.cfi_offset %r13, -32
.Ltmp563:
	.cfi_offset %r14, -24
.Ltmp564:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	(%r14), %ebx
	movq	$14, %rcx
	movq	%rbx, %rax
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %ecx
	cmpq	$8, %rcx
	ja	.LBB37_2
# BB#1:                                 # %entry
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	jne	.LBB37_36
.LBB37_2:                               # %if.end
	andq	$65535, %rbx            # imm = 0xFFFF
	leaq	-75(%rbx), %r15
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %r15
	cmpq	$10, %r15
	ja	.LBB37_36
# BB#3:                                 # %if.end
	movq	$1, %rax
	movq	%r15, %rcx
	shlq	%cl, %rax
	testq	$1795, %rax             # imm = 0x703
	je	.LBB37_36
# BB#4:                                 # %if.end25
	movq	8(%r14), %rdi
	movzbl	(%rdi), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	je	.LBB37_36
# BB#5:                                 # %lor.lhs.false36
	movq	16(%r14), %r12
	movzbl	(%r12), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	je	.LBB37_36
# BB#6:                                 # %if.end45
	callq	expand_compound_operation
	movq	%rax, %r13
	movq	%r12, %rdi
	callq	expand_compound_operation
	movq	%r13, %rdx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	movq	%rax, %r8
	movzbl	(%rdx), %r12d
	movzbl	(%r8), %eax
	cmpq	%rax, %r12
	jne	.LBB37_36
# BB#7:                                 # %if.end54
	cmpq	$77, %r12
	jg	.LBB37_16
# BB#8:                                 # %if.end54
	cmpq	$63, %r12
	jne	.LBB37_36
# BB#9:                                 # %sw.bb70
	movq	8(%rdx), %rax
	movq	8(%r8), %rcx
	movl	(%rax), %eax
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB37_36
# BB#10:                                # %lor.lhs.false85
	movl	16(%rdx), %eax
	movl	16(%r8), %ecx
	cmpq	%rcx, %rax
	jne	.LBB37_36
# BB#11:                                # %lor.lhs.false93
	movq	%rdx, %rdi
	movq	%r8, %r15
	movq	%rdx, %r12
	callq	subreg_lowpart_p
	movq	%r12, %rcx
	movq	%r15, %r8
	testq	%r13, %rax
	je	.LBB37_36
# BB#12:                                # %lor.lhs.false95
	movq	8(%rcx), %rdx
	movzbl	2(%rcx), %eax
	movzbl	2(%rdx), %esi
	movl	mode_class(,%rax,4), %ecx
	movl	mode_class(,%rsi,4), %edi
	cmpq	%rdi, %rcx
	jne	.LBB37_36
# BB#13:                                # %lor.lhs.false111
	movzbl	mode_size(%rax), %ecx
	movzbl	mode_size(%rsi), %eax
	cmpq	%rax, %rcx
	ja	.LBB37_36
# BB#14:                                # %lor.lhs.false129
	movl	target_flags(%rip), %edi
	movq	$23, %rcx
	shrq	%cl, %rdi
	andq	$4, %rdi
	addq	$4, %rdi
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rdi, %rcx
	cmpq	%rcx, %rax
	ja	.LBB37_36
# BB#15:                                # %if.end143
	movq	8(%r8), %rcx
	movq	%rbx, %rdi
	callq	gen_binary
	movzbl	2(%r14), %edi
	movq	%rax, %rsi
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_lowpart_for_combine  # TAILCALL
.LBB37_16:                              # %if.end54
	leaq	-78(%r12), %rcx
	andq	%r13, %rcx
	cmpq	$12, %rcx
	ja	.LBB37_36
# BB#17:                                # %if.end54
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$6240, %rax             # imm = 0x1860
	je	.LBB37_18
# BB#35:                                # %sw.bb
	cmpq	$2, %r15
	jae	.LBB37_21
	jmp	.LBB37_36
.LBB37_18:                              # %if.end54
	testq	%rcx, %rcx
	jne	.LBB37_19
# BB#20:                                # %sw.bb62
	cmpq	$1, %r15
	ja	.LBB37_36
	jmp	.LBB37_21
.LBB37_19:                              # %if.end54
	cmpq	$9, %rcx
	jne	.LBB37_36
.LBB37_21:                              # %sw.epilog
	movzbl	rtx_class(%r12), %eax
	cmpq	$99, %rax
	jne	.LBB37_29
# BB#22:                                # %land.lhs.true166
	movq	8(%rdx), %rdi
	movq	8(%r8), %rsi
	leaq	8(%rdx), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rdx, %r15
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB37_24
# BB#23:                                # %if.then175
	addq	$16, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	addq	$16, %rax
	movq	%r15, %rdx
	jmp	.LBB37_26
.LBB37_24:                              # %land.lhs.true190
	movq	8(%r15), %rdi
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rsi
	callq	rtx_equal_p
	leaq	16(%r15), %rdx
	testq	%r13, %rax
	movq	%r15, %r13
	je	.LBB37_27
# BB#25:                                # %if.then199
	movq	24(%rsp), %rax          # 8-byte Reload
	addq	$8, %rax
.LBB37_26:                              # %if.end257
	movq	%rax, %r8
	movq	16(%rsp), %rax          # 8-byte Reload
	jmp	.LBB37_31
.LBB37_27:                              # %land.lhs.true215
	movq	(%rdx), %rdi
	movq	24(%rsp), %r15          # 8-byte Reload
	movq	8(%r15), %rsi
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	callq	rtx_equal_p
	movq	%r13, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rcx, %r13
	movq	%r15, %r8
	je	.LBB37_29
# BB#28:                                # %if.then224
	addq	$16, %r8
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	jmp	.LBB37_31
.LBB37_29:                              # %if.else234
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	16(%rdx), %rdi
	movq	16(%r8), %rsi
	movq	%rdx, %r15
	callq	rtx_equal_p
	movq	%r15, %rcx
	movq	24(%rsp), %r8           # 8-byte Reload
	testq	%r13, %rax
	je	.LBB37_36
# BB#30:                                # %if.then243
	leaq	16(%rcx), %rax
	addq	$8, %rcx
	addq	$8, %r8
	movq	%rcx, %rdx
.LBB37_31:                              # %if.end257
	movq	(%rax), %r15
	movq	(%r8), %rcx
	movq	(%rdx), %rdx
	movzbl	2(%r14), %esi
	movq	%rbx, %rdi
	callq	gen_binary
	movq	%rax, %r13
	cmpq	$85, %rbx
	jne	.LBB37_34
# BB#32:                                # %if.end257
	cmpq	$84, %r12
	jne	.LBB37_34
# BB#33:                                # %if.then267
	movzbl	2(%r14), %esi
	movq	$86, %rdi
	movq	%r15, %rdx
	movq	%rsi, %rcx
	callq	simplify_gen_unary
	movq	%rax, %r15
	movq	$83, %r12
.LBB37_34:                              # %if.end275
	movzbl	2(%r14), %ebx
	movq	%r13, %rdi
	callq	apply_distributive_law
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%r15, %rcx
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_binary  # TAILCALL
.LBB37_36:                              # %return
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp565:
	.size	apply_distributive_law, .Ltmp565-apply_distributive_law
	.cfi_endproc

	.align	16, 0x90
	.type	reg_dead_at_p_1,@function
reg_dead_at_p_1:                        # @reg_dead_at_p_1
	.cfi_startproc
# BB#0:                                 # %entry
	movl	(%rdi), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB38_22
# BB#1:                                 # %if.end
	movl	8(%rdi), %edi
	cmpq	$52, %rdi
	movq	$1, %rax
	ja	.LBB38_16
# BB#2:                                 # %cond.true
	movabsq	$4294967288, %rax       # imm = 0xFFFFFFF8
	andq	%rdi, %rax
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$8, %rax
	je	.LBB38_6
# BB#3:                                 # %cond.true
	leaq	-21(%rdi), %rcx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jb	.LBB38_6
# BB#4:                                 # %cond.true
	leaq	-45(%rdi), %rcx
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jb	.LBB38_6
# BB#5:                                 # %cond.true
	leaq	-29(%rdi), %rcx
	andq	%rax, %rcx
	cmpq	$7, %rcx
	jbe	.LBB38_6
# BB#11:                                # %cond.false
	cmpq	$24, %rdx
	jne	.LBB38_12
# BB#14:                                # %cond.true37
	movzbl	target_flags+3(%rip), %eax
	andq	$2, %rax
	xorq	$6, %rax
	jmp	.LBB38_16
.LBB38_6:                               # %cond.true15
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$5, %rcx
	movq	$2, %rax
	je	.LBB38_16
# BB#7:                                 # %lor.rhs
	cmpq	$6, %rcx
	jne	.LBB38_8
# BB#9:                                 # %lor.rhs
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB38_16
.LBB38_12:                              # %cond.false
	cmpq	$18, %rdx
	jne	.LBB38_15
# BB#13:                                # %cond.true30
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	xorq	$3, %rax
	jmp	.LBB38_16
.LBB38_8:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB38_16
.LBB38_15:                              # %cond.false41
	movl	target_flags(%rip), %r8d
	movzbl	mode_size(%rdx), %eax
	movq	$23, %rcx
	shrq	%cl, %r8
	andq	$4, %r8
	leaq	3(%rax,%r8), %rax
	addq	$4, %r8
	cqto
	idivq	%r8
.LBB38_16:                              # %cond.end59
	movl	reg_dead_endregno(%rip), %ecx
	cmpq	%rdi, %rcx
	jbe	.LBB38_22
# BB#17:                                # %land.lhs.true64
	movl	reg_dead_regno(%rip), %ecx
	addq	%rdi, %rax
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB38_22
# BB#18:                                # %if.then67
	movzbl	(%rsi), %eax
	cmpq	$49, %rax
	jne	.LBB38_19
# BB#20:                                # %if.then67
	movabsq	$1, %rax
	jmp	.LBB38_21
.LBB38_19:
	movabsq	$0, %rax
.LBB38_21:                              # %if.then67
	leaq	-1(%rax,%rax), %rax
	movl	%eax, reg_dead_flag(%rip)
.LBB38_22:                              # %if.end73
	retq
.Ltmp566:
	.size	reg_dead_at_p_1, .Ltmp566-reg_dead_at_p_1
	.cfi_endproc

	.align	16, 0x90
	.type	combine_simplify_rtx,@function
combine_simplify_rtx:                   # @combine_simplify_rtx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp573:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp574:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp575:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp576:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp577:
	.cfi_def_cfa_offset 48
	subq	$208, %rsp
.Ltmp578:
	.cfi_def_cfa_offset 256
.Ltmp579:
	.cfi_offset %rbx, -48
.Ltmp580:
	.cfi_offset %r12, -40
.Ltmp581:
	.cfi_offset %r13, -32
.Ltmp582:
	.cfi_offset %r14, -24
.Ltmp583:
	.cfi_offset %r15, -16
	movq	%rdi, %r9
	movl	(%r9), %eax
	movq	%rax, %r15
	andq	$65535, %r15            # imm = 0xFFFF
	movzbl	rtx_class(%r15), %r12d
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movq	$16, %rcx
	shrq	%cl, %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	cmpq	$99, %r12
	jne	.LBB39_3
# BB#1:                                 # %land.lhs.true
	movq	8(%r9), %rdi
	movq	16(%r9), %rsi
	movq	%r9, %rbx
	callq	swap_commutative_operands_p
	movq	%rbx, %r9
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB39_3
# BB#2:                                 # %if.then
	leaq	8(%r9), %rdi
	leaq	16(%r9), %rbx
	movq	(%rdi), %r14
	movq	(%rbx), %rsi
	movq	%r9, %r13
	callq	do_SUBST
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	do_SUBST
	movq	%r13, %r9
.LBB39_3:                               # %if.end
	andq	$255, 112(%rsp)         # 8-byte Folded Spill
	leaq	-75(%r15), %rax
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rax
	cmpq	$3, %rax
	ja	.LBB39_14
# BB#4:                                 # %if.end
	cmpq	$2, %rax
	je	.LBB39_14
# BB#5:                                 # %land.lhs.true27
	movq	8(%r9), %rdx
	movzbl	(%rdx), %eax
	cmpq	$89, %rax
	jne	.LBB39_14
# BB#6:                                 # %land.lhs.true35
	movq	8(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$75, %rcx
	jne	.LBB39_14
# BB#7:                                 # %land.lhs.true46
	movq	8(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$87, %rsi
	jne	.LBB39_14
# BB#8:                                 # %land.lhs.true60
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %esi
	cmpq	$54, %rsi
	jne	.LBB39_14
# BB#9:                                 # %land.lhs.true77
	movq	16(%rdx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$54, %rsi
	jne	.LBB39_14
# BB#10:                                # %land.lhs.true77
	cmpq	%rdx, %rcx
	jne	.LBB39_14
# BB#11:                                # %land.lhs.true109
	movq	16(%rax), %rdx
	movzbl	(%rdx), %eax
	cmpq	$54, %rax
	jne	.LBB39_14
# BB#12:                                # %land.lhs.true123
	movq	$89, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%r9, %rbx
	callq	simplify_binary_operation
	movq	%rbx, %r9
	testq	%rax, %rax
	je	.LBB39_14
# BB#13:                                # %if.then142
	leaq	8(%r9), %rcx
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	(%rcx), %rax
	movq	%rcx, %rbx
	movq	8(%rax), %rcx
	movq	16(%rax), %rax
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rax), %r8
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	112(%rsp), %r14         # 8-byte Reload
	movq	%r14, %rdx
	movq	%r9, 88(%rsp)           # 8-byte Spill
	callq	simplify_shift_const
	movq	(%rbx), %rcx
	movq	16(%rcx), %rcx
	movq	8(%rcx), %r8
	xorq	%rdi, %rdi
	movq	$89, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	simplify_shift_const
	movq	$75, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	movq	72(%rsp), %rcx          # 8-byte Reload
	callq	gen_binary
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	88(%rsp), %r9           # 8-byte Reload
.LBB39_14:                              # %if.end180
	movq	$56, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$56, %rcx
	sarq	%cl, %rax
	cmpq	$98, %rax
	jg	.LBB39_18
# BB#15:                                # %if.end180
	cmpq	$49, %r12
	je	.LBB39_26
# BB#16:                                # %if.end180
	cmpq	$50, %r12
	je	.LBB39_19
# BB#17:                                # %if.end180
	cmpq	$60, %r12
	je	.LBB39_19
	jmp	.LBB39_55
.LBB39_18:                              # %if.end180
	cmpq	$99, %r12
	jne	.LBB39_55
.LBB39_19:                              # %land.lhs.true198
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %edx
	cmpq	$111, %rdx
	je	.LBB39_22
# BB#20:                                # %land.lhs.true209
	cmpq	$63, %rcx
	jne	.LBB39_29
# BB#21:                                # %land.lhs.true217
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	jne	.LBB39_29
.LBB39_22:                              # %lor.lhs.false231
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %edx
	cmpq	$111, %rdx
	je	.LBB39_25
# BB#23:                                # %land.lhs.true242
	cmpq	$63, %rcx
	jne	.LBB39_29
# BB#24:                                # %land.lhs.true250
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	jne	.LBB39_29
.LBB39_25:                              # %lor.lhs.false264
	cmpq	$49, %r12
	jne	.LBB39_55
.LBB39_26:                              # %land.lhs.true270
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %edx
	cmpq	$111, %rdx
	movq	$49, %r12
	je	.LBB39_55
# BB#27:                                # %land.lhs.true281
	movq	$49, %r12
	cmpq	$63, %rcx
	jne	.LBB39_29
# BB#28:                                # %land.lhs.true289
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	movq	$49, %r12
	je	.LBB39_55
.LBB39_29:                              # %if.then303
	leaq	152(%rsp), %rsi
	leaq	144(%rsp), %rdx
	movq	%r9, %rdi
	movq	%r9, 88(%rsp)           # 8-byte Spill
	callq	if_then_else_cond
	testq	%rax, %rax
	movq	%rax, 160(%rsp)
	je	.LBB39_30
# BB#31:                                # %land.lhs.true307
	cmpq	$60, %r12
	jne	.LBB39_35
# BB#32:                                # %land.lhs.true313
	movq	152(%rsp), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	je	.LBB39_33
# BB#34:                                # %lor.lhs.false321
	movq	144(%rsp), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	jne	.LBB39_35
.LBB39_33:
	movq	$60, %r12
	movq	88(%rsp), %r9           # 8-byte Reload
	jmp	.LBB39_55
.LBB39_35:                              # %if.then329
	movq	const_int_rtx+512(%rip), %rax
	movq	%rax, 136(%rsp)
	leaq	160(%rsp), %rsi
	leaq	136(%rsp), %rdx
	movq	$102, %rdi
	callq	simplify_comparison
	movq	%rax, %rcx
	andq	%r13, %rcx
	cmpq	$102, %rcx
	jne	.LBB39_38
# BB#36:                                # %land.lhs.true333
	movq	160(%rsp), %rcx
	movzbl	(%rcx), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$60, %rcx
	jne	.LBB39_38
# BB#37:
	movq	88(%rsp), %r15          # 8-byte Reload
	jmp	.LBB39_67
.LBB39_30:
	movq	88(%rsp), %r9           # 8-byte Reload
	jmp	.LBB39_55
.LBB39_38:                              # %if.end342
	movq	%rax, 72(%rsp)          # 8-byte Spill
	movq	152(%rsp), %rdi
	movq	global_rtl(%rip), %rsi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%rsi, %rdx
	callq	subst
	movq	144(%rsp), %rdi
	movq	global_rtl(%rip), %rsi
	movq	%rax, %rbx
	movq	%rbx, 152(%rsp)
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%rsi, %rdx
	callq	subst
	movq	%rax, %r14
	movq	%r14, 144(%rsp)
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB39_39
# BB#40:                                # %land.lhs.true347
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r13, %rax
	movq	88(%rsp), %r9           # 8-byte Reload
	je	.LBB39_55
# BB#41:                                # %if.then350
	movq	const_true_rtx(%rip), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rax, %rbx
	jne	.LBB39_45
# BB#42:                                # %if.then350
	cmpq	%rcx, %r14
	jne	.LBB39_45
# BB#43:                                # %if.then356
	movq	160(%rsp), %rdx
	movq	136(%rsp), %rcx
	movq	72(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB39_44
.LBB39_39:
	movq	88(%rsp), %r9           # 8-byte Reload
	jmp	.LBB39_55
.LBB39_45:                              # %if.else
	cmpq	%rcx, %rbx
	jne	.LBB39_49
# BB#46:                                # %if.else
	cmpq	%rax, %r14
	jne	.LBB39_49
# BB#47:                                # %land.lhs.true363
	movq	72(%rsp), %rdi          # 8-byte Reload
	callq	reverse_condition
	testq	%r13, %rax
	je	.LBB39_49
# BB#48:                                # %if.then367
	movq	72(%rsp), %rdi          # 8-byte Reload
	callq	reverse_condition
	movq	160(%rsp), %rdx
	movq	136(%rsp), %rcx
	movq	%rax, %rdi
.LBB39_44:                              # %if.end411
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	gen_binary
	jmp	.LBB39_54
.LBB39_49:                              # %if.else370
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	movq	112(%rsp), %r15         # 8-byte Reload
	jne	.LBB39_61
# BB#50:                                # %land.lhs.true375
	movq	8(%rbx), %rax
	cmpq	$-1, %rax
	jne	.LBB39_61
# BB#51:                                # %land.lhs.true375
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, %r14
	jne	.LBB39_61
# BB#52:                                # %if.then384
	movq	160(%rsp), %rdx
	movq	136(%rsp), %rcx
	movq	72(%rsp), %rdi          # 8-byte Reload
	jmp	.LBB39_53
.LBB39_61:                              # %if.else387
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	jne	.LBB39_65
# BB#62:                                # %land.lhs.true392
	movq	8(%r14), %rax
	cmpq	$-1, %rax
	jne	.LBB39_65
# BB#63:                                # %land.lhs.true392
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB39_65
# BB#64:                                # %if.then401
	movq	72(%rsp), %rdi          # 8-byte Reload
	callq	reverse_condition
	movq	160(%rsp), %rdx
	movq	136(%rsp), %rcx
	movq	%rax, %rdi
.LBB39_53:                              # %if.end411
	movq	%r15, %rsi
	callq	gen_binary
	movq	$77, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%r15, %rcx
	callq	simplify_gen_unary
.LBB39_54:                              # %if.end411
	movq	%rax, %r9
	movzbl	(%r9), %r15d
	movzbl	rtx_class(%r15), %r12d
	movq	$0, 104(%rsp)           # 8-byte Folded Spill
.LBB39_55:                              # %if.end416
	movq	$56, %rcx
	shlq	%cl, %r12
	movq	$56, %rcx
	sarq	%cl, %r12
	cmpq	$97, %r12
	jg	.LBB39_70
# BB#56:                                # %if.end416
	cmpq	$59, %r12
	jg	.LBB39_68
# BB#57:                                # %if.end416
	andq	%r13, %r12
	cmpq	$49, %r12
	je	.LBB39_73
# BB#58:                                # %if.end416
	cmpq	$50, %r12
	je	.LBB39_78
# BB#59:                                # %if.end416
	cmpq	$51, %r12
	je	.LBB39_79
# BB#60:
	movq	112(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB39_82
.LBB39_70:                              # %if.end416
	andq	%r13, %r12
	cmpq	$98, %r12
	jne	.LBB39_71
.LBB39_79:                              # %sw.bb460
	movq	8(%r9), %rcx
	movq	16(%r9), %r8
	movq	%r9, %rax
	movq	24(%rax), %r9
	movq	%rax, %r14
	movq	%r15, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	movq	104(%rsp), %rdx         # 8-byte Reload
	callq	simplify_ternary_operation
	jmp	.LBB39_80
.LBB39_68:                              # %if.end416
	andq	%r13, %r12
	cmpq	$60, %r12
	jne	.LBB39_69
# BB#74:                                # %sw.bb424
	movq	8(%r9), %rdx
	movzbl	2(%rdx), %esi
	movq	16(%r9), %rcx
	movq	%r9, %r14
	testq	%rsi, %rsi
	movq	112(%rsp), %rbx         # 8-byte Reload
	jne	.LBB39_77
# BB#75:                                # %if.then433
	movzbl	2(%rcx), %eax
	testq	%rax, %rax
	movq	104(%rsp), %rsi         # 8-byte Reload
	je	.LBB39_77
# BB#76:                                # %if.then433
	movq	%rax, %rsi
.LBB39_77:                              # %if.end444
	movq	%r15, %rdi
	callq	simplify_relational_operation
	jmp	.LBB39_80
.LBB39_71:                              # %if.end416
	cmpq	$99, %r12
	jne	.LBB39_72
.LBB39_78:                              # %sw.bb452
	movq	8(%r9), %rdx
	movq	16(%r9), %rcx
	movq	%r9, %r14
	movq	%r15, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	callq	simplify_binary_operation
	jmp	.LBB39_80
.LBB39_69:
	movq	112(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB39_82
.LBB39_72:
	movq	112(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB39_82
.LBB39_73:                              # %sw.bb
	movq	8(%r9), %rdx
	movq	%r9, %r14
	movq	%r15, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	movq	104(%rsp), %rcx         # 8-byte Reload
	callq	simplify_unary_operation
.LBB39_80:                              # %sw.epilog
	testq	%rax, %rax
	movq	%r14, %r9
	je	.LBB39_82
# BB#81:                                # %if.then472
	movl	(%rax), %ebx
	movq	%rbx, %r15
	andq	$65535, %r15            # imm = 0xFFFF
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movq	$0, 104(%rsp)           # 8-byte Folded Spill
	movq	%rax, %r9
.LBB39_82:                              # %if.end478
	leaq	-75(%r15), %rcx
	andq	%r13, %rcx
	cmpq	$10, %rcx
	ja	.LBB39_85
# BB#83:                                # %if.end478
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$1795, %rax             # imm = 0x703
	je	.LBB39_85
# BB#84:                                # %if.then493
	movq	%r9, %rdi
	callq	apply_distributive_law
	movq	%rax, %r9
	movzbl	(%r9), %r15d
	movq	$0, 104(%rsp)           # 8-byte Folded Spill
.LBB39_85:                              # %if.end497
	leaq	-75(%r15), %rcx
	andq	%r13, %rcx
	cmpq	$20, %rcx
	ja	.LBB39_117
# BB#86:                                # %if.end497
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$1967899, %rax          # imm = 0x1E071B
	je	.LBB39_117
# BB#87:                                # %land.lhs.true530
	movl	mode_class(,%rbx,4), %ecx
	cmpq	$5, %rcx
	ja	.LBB39_89
# BB#88:                                # %land.lhs.true530
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$42, %rax
	jne	.LBB39_90
.LBB39_89:                              # %lor.lhs.false545
	cmpq	$7, %rcx
	jne	.LBB39_91
.LBB39_90:                              # %land.lhs.true550
	cmpq	$79, %r15
	jne	.LBB39_94
.LBB39_91:                              # %lor.lhs.false553
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%rax, %rax
	je	.LBB39_117
# BB#92:                                # %land.lhs.true555
	cmpq	$8, %rcx
	ja	.LBB39_117
# BB#93:                                # %land.lhs.true555
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	je	.LBB39_117
.LBB39_94:                              # %if.then570
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	%r15, %rcx
	jne	.LBB39_117
# BB#95:                                # %if.then578
	movq	16(%rax), %rdx
	movq	8(%rax), %r14
	movzbl	(%rdx), %ecx
	movq	16(%r9), %rax
	cmpq	$133, %rcx
	jg	.LBB39_100
# BB#96:                                # %if.then578
	addq	$-54, %rcx
	andq	%r13, %rcx
	cmpq	$14, %rcx
	jbe	.LBB39_98
# BB#97:
	movq	%rax, %rcx
	jmp	.LBB39_108
.LBB39_100:                             # %if.then578
	cmpq	$134, %rcx
	je	.LBB39_103
# BB#101:                               # %if.then578
	cmpq	$140, %rcx
	je	.LBB39_103
# BB#102:
	movq	%rax, %rcx
	jmp	.LBB39_108
.LBB39_98:                              # %if.then578
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$24599, %rsi            # imm = 0x6017
	je	.LBB39_99
.LBB39_103:                             # %land.lhs.true633
	movzbl	rtx_class(%r15), %ecx
	cmpq	$99, %rcx
	movq	%rdx, %rcx
	je	.LBB39_105
# BB#104:                               # %land.lhs.true633
	movq	%rax, %rcx
.LBB39_105:                             # %land.lhs.true633
	je	.LBB39_107
# BB#106:                               # %land.lhs.true633
	movq	%rdx, %rax
.LBB39_107:                             # %land.lhs.true633
	movq	%rax, %rdx
.LBB39_108:                             # %if.end640
	movq	%r9, %r12
	movq	$75, %rdi
	cmpq	$76, %r15
	je	.LBB39_111
# BB#109:                               # %cond.false
	cmpq	$79, %r15
	movq	$78, %rdi
	je	.LBB39_111
# BB#110:                               # %cond.false
	movq	%r15, %rdi
.LBB39_111:                             # %cond.end648
	movq	%rbx, %rsi
	callq	simplify_binary_operation
	testq	%rax, %rax
	movq	%r12, %r9
	jne	.LBB39_114
# BB#112:                               # %land.lhs.true653
	movzbl	rtx_class(%r15), %eax
	cmpq	$99, %rax
	jne	.LBB39_117
# BB#113:                               # %if.end676
	movq	8(%r9), %rax
	movq	16(%r9), %rcx
	movq	8(%rax), %rdx
	movq	16(%rax), %r14
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r9, %r12
	callq	simplify_binary_operation
	movq	%r12, %r9
	testq	%rax, %rax
	je	.LBB39_117
.LBB39_114:                             # %if.then678
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
.LBB39_115:                             # %return
	movq	%rax, %rcx
	callq	gen_binary
	jmp	.LBB39_66
.LBB39_117:                             # %if.end682
	leaq	-47(%r15), %rax
	andq	%r13, %rax
	cmpq	$96, %rax
	ja	.LBB39_380
# BB#118:                               # %if.end682
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	jmpq	*.LJTI39_0(,%rax,8)
.LBB39_343:                             # %sw.bb2394
	movq	8(%r9), %rax
	movl	(%rax), %edx
	leaq	8(%r9), %rbx
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$74, %rcx
	jne	.LBB39_344
# BB#346:                               # %if.then2424
	movq	16(%rax), %rcx
	movq	%rcx, 120(%rsp)
	movq	8(%rax), %rax
	leaq	16(%r9), %rcx
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movq	%rax, 128(%rsp)
	jmp	.LBB39_347
.LBB39_344:                             # %lor.lhs.false2402
	movq	$14, %rcx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$4, %rcx
	je	.LBB39_380
# BB#345:                               # %if.then2413.thread3902
	movq	%rax, 128(%rsp)
	movq	16(%r9), %rax
	leaq	16(%r9), %rcx
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movq	%rax, 120(%rsp)
.LBB39_347:                             # %if.end2431
	leaq	128(%rsp), %rsi
	leaq	120(%rsp), %rdx
	movq	%r15, %rdi
	callq	simplify_comparison
	movq	%rax, %r14
                                        # kill: RAX<def> R14<kill>
	andq	%r13, %rax
	cmpq	$102, %rax
	jne	.LBB39_357
# BB#348:                               # %land.lhs.true2435
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	mode_class(,%rax,4), %eax
	cmpq	$1, %rax
	jne	.LBB39_377
# BB#349:                               # %land.lhs.true2440
	movq	120(%rsp), %r12
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB39_353
# BB#350:                               # %land.lhs.true2443
	movq	128(%rsp), %rcx
	movzbl	2(%rcx), %eax
	cmpq	%rax, 112(%rsp)         # 8-byte Folded Reload
	jne	.LBB39_353
# BB#351:                               # %land.lhs.true2449
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	nonzero_bits
	movq	96(%rsp), %rdi          # 8-byte Reload
	cmpq	$1, %rax
	jne	.LBB39_353
# BB#352:                               # %if.then2453
	callq	expand_compound_operation
.LBB39_253:                             # %return
	movq	112(%rsp), %rdi         # 8-byte Reload
.LBB39_254:                             # %return
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	jmp	.LBB39_66
.LBB39_888:                             # %sw.bb2775
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB39_380
# BB#889:                               # %if.then2783
	movq	8(%r9), %rcx
	movq	8(%rax), %r8
	movq	%r9, %rdi
	movq	%r15, %rsi
	movq	112(%rsp), %rdx         # 8-byte Reload
	callq	simplify_shift_const
	jmp	.LBB39_66
.LBB39_593:                             # %sw.bb2618
	movq	96(%rsp), %rax          # 8-byte Reload
	testq	%r13, %rax
	jne	.LBB39_380
# BB#594:                               # %if.end2621
	movq	%r9, %rdi
	callq	expand_compound_operation
	jmp	.LBB39_66
.LBB39_353:                             # %land.lhs.true2464
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB39_357
# BB#354:                               # %land.lhs.true2467
	movq	128(%rsp), %r12
	movzbl	2(%r12), %eax
	cmpq	%rax, 112(%rsp)         # 8-byte Folded Reload
	jne	.LBB39_357
# BB#355:                               # %land.lhs.true2473
	movq	%r12, %rdi
	movq	%rbx, 96(%rsp)          # 8-byte Spill
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movzbl	mode_bitsize(%rbx,%rbx), %ecx
	movq	96(%rsp), %rbx          # 8-byte Reload
	andq	%r13, %rax
	cmpq	%rcx, %rax
	jne	.LBB39_357
# BB#356:                               # %if.then2480
	movq	%r12, %rdi
	callq	expand_compound_operation
	movq	%rax, 128(%rsp)
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
.LBB39_506:                             # %return
	movq	$77, %rdi
	jmp	.LBB39_507
.LBB39_357:                             # %if.else2484
	movq	%r14, %r12
	andq	%r13, %r12
	cmpq	$103, %r12
	jne	.LBB39_367
# BB#358:                               # %land.lhs.true2487
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	mode_class(,%rax,4), %eax
	cmpq	$1, %rax
	jne	.LBB39_367
# BB#359:                               # %land.lhs.true2492
	movq	120(%rsp), %rcx
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB39_363
# BB#360:                               # %land.lhs.true2495
	movq	128(%rsp), %rdx
	movzbl	2(%rdx), %eax
	cmpq	%rax, 112(%rsp)         # 8-byte Folded Reload
	jne	.LBB39_363
# BB#361:                               # %land.lhs.true2501
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	callq	nonzero_bits
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	cmpq	$1, %rax
	jne	.LBB39_363
# BB#362:                               # %if.then2505
	callq	expand_compound_operation
	movq	%rax, 128(%rsp)
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	const_int_rtx+520(%rip), %rcx
	movq	$85, %rdi
	jmp	.LBB39_201
.LBB39_739:                             # %sw.bb2625
	movl	(%r9), %eax
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	movq	8(%r9), %r14
	movq	16(%r9), %r12
	andq	$255, %rsi
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$85, %rax
	je	.LBB39_827
# BB#740:                               # %sw.bb2625
	cmpq	$84, %rax
	jne	.LBB39_741
# BB#788:                               # %sw.bb327.i
	movq	%r14, %rbx
	movq	%r9, %r14
	movzbl	(%r12), %eax
	cmpq	$54, %rax
	jne	.LBB39_792
# BB#789:                               # %land.lhs.true332.i
	movzbl	mode_bitsize(%rsi,%rsi), %eax
	cmpq	$64, %rax
	ja	.LBB39_792
# BB#790:                               # %land.lhs.true338.i
	movq	%rbx, %rdi
	movq	%rsi, %r15
	callq	nonzero_bits
	movq	%r15, %rsi
	movq	8(%r12), %rcx
	notq	%rcx
	testq	%rcx, %rax
	je	.LBB39_791
.LBB39_792:                             # %if.end348.i
	movq	%rsi, 112(%rsp)         # 8-byte Spill
	movzbl	(%rbx), %eax
	cmpq	$83, %rax
	jne	.LBB39_798
# BB#793:                               # %land.lhs.true353.i
	movq	8(%rbx), %rdi
	movq	%r12, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	jne	.LBB39_795
# BB#794:                               # %lor.lhs.false359.i
	movq	16(%rbx), %rdi
	movq	%r12, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_798
.LBB39_795:                             # %land.lhs.true365.i
	movq	8(%rbx), %rdi
	callq	side_effects_p
	testq	%r13, %rax
	jne	.LBB39_798
# BB#796:                               # %land.lhs.true371.i
	movq	16(%rbx), %rdi
	callq	side_effects_p
	testq	%r13, %rax
	je	.LBB39_797
.LBB39_798:                             # %if.end378.i
	movzbl	(%rbx), %eax
	movq	%rbx, 104(%rsp)         # 8-byte Spill
	cmpq	$83, %rax
	movq	%r14, %r8
	jne	.LBB39_800
# BB#799:                               # %if.then383.i
	movq	104(%rsp), %r15         # 8-byte Reload
	movq	8(%r15), %rdx
	movq	$84, %rdi
	movq	112(%rsp), %r14         # 8-byte Reload
	movq	%r14, %rsi
	movq	%r12, %rbx
	movq	%rbx, %rcx
	callq	gen_binary
	movq	16(%r15), %r15
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rbx, %r12
	callq	copy_rtx
	movq	$84, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	$83, %rdi
	movq	%r14, %rsi
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rdi
	callq	apply_distributive_law
	movq	%rax, %r8
	movzbl	(%r8), %eax
	cmpq	$84, %rax
	movq	%r8, %r15
	jne	.LBB39_67
.LBB39_800:                             # %if.end401.i
	movq	%r12, %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$83, %rcx
	jne	.LBB39_804
# BB#801:                               # %if.then406.i
	movq	8(%r15), %rdx
	movq	$84, %rdi
	movq	112(%rsp), %r14         # 8-byte Reload
	movq	%r14, %rsi
	movq	104(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rcx
	callq	gen_binary
	movq	%r15, %r12
	movq	16(%r12), %r15
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	copy_rtx
	movq	$84, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	$83, %rdi
	movq	%r14, %rsi
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rdi
	callq	apply_distributive_law
	movq	%rax, %r8
	movzbl	(%r8), %eax
	cmpq	$84, %rax
	jne	.LBB39_802
# BB#803:                               # %if.then406.i.if.end424.i_crit_edge
	movl	(%r12), %eax
	movq	%r12, %r15
.LBB39_804:                             # %if.end424.i
	movq	104(%rsp), %r14         # 8-byte Reload
	movzbl	(%r14), %ecx
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$87, %rcx
	jne	.LBB39_806
# BB#805:                               # %if.end424.i
	cmpq	$90, %rax
	je	.LBB39_808
.LBB39_806:                             # %lor.lhs.false434.i
	cmpq	$87, %rax
	jne	.LBB39_816
# BB#807:                               # %lor.lhs.false434.i
	cmpq	$90, %rcx
	jne	.LBB39_816
.LBB39_808:                             # %land.lhs.true444.i
	movq	8(%r14), %rdi
	movq	8(%r15), %rsi
	movq	%r8, %rbx
	callq	rtx_equal_p
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB39_816
# BB#809:                               # %land.lhs.true453.i
	movq	16(%r14), %rcx
	movzbl	(%rcx), %eax
	cmpq	$54, %rax
	jne	.LBB39_816
# BB#810:                               # %land.lhs.true461.i
	movq	16(%r15), %rax
	movzbl	(%rax), %edx
	cmpq	$54, %rdx
	jne	.LBB39_816
# BB#811:                               # %land.lhs.true469.i
	movq	8(%rcx), %rdx
	movq	8(%rax), %rsi
	movq	112(%rsp), %rdi         # 8-byte Reload
	movzbl	mode_bitsize(%rdi,%rdi), %edi
	addq	%rdx, %rsi
	cmpq	%rdi, %rsi
	jne	.LBB39_816
# BB#812:                               # %if.then487.i
	movzbl	(%r14), %esi
	movq	8(%r14), %rdx
	cmpq	$87, %rsi
	je	.LBB39_814
# BB#813:                               # %if.then487.i
	movq	%rax, %rcx
.LBB39_814:                             # %if.then487.i
	movq	$88, %rdi
	jmp	.LBB39_815
.LBB39_363:                             # %land.lhs.true2517
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB39_367
# BB#364:                               # %land.lhs.true2520
	movq	128(%rsp), %rcx
	movzbl	2(%rcx), %eax
	cmpq	%rax, 112(%rsp)         # 8-byte Folded Reload
	jne	.LBB39_367
# BB#365:                               # %land.lhs.true2526
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	num_sign_bit_copies
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	andq	%r13, %rax
	cmpq	%rcx, %rax
	jne	.LBB39_367
# BB#366:                               # %if.then2533
	callq	expand_compound_operation
	movq	%rax, 128(%rsp)
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	$1, %rsi
	movq	%rax, %rdi
	callq	plus_constant_wide
	jmp	.LBB39_66
.LBB39_367:                             # %if.end2540
	cmpq	$102, %r12
	jne	.LBB39_377
# BB#368:                               # %land.lhs.true2543
	movq	112(%rsp), %rax         # 8-byte Reload
	movl	mode_class(,%rax,4), %eax
	cmpq	$1, %rax
	jne	.LBB39_377
# BB#369:                               # %land.lhs.true2548
	movq	112(%rsp), %rax         # 8-byte Reload
	movzbl	mode_bitsize(%rax,%rax), %r12d
	cmpq	$64, %r12
	ja	.LBB39_377
# BB#370:                               # %land.lhs.true2554
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	mode_mask_array(,%rax,8), %rax
	andq	$1, %rax
	leaq	(%r12,%r13), %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	cmpq	%rdx, %rax
	jne	.LBB39_377
# BB#371:                               # %land.lhs.true2566
	movq	120(%rsp), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB39_377
# BB#372:                               # %land.lhs.true2569
	movq	128(%rsp), %rcx
	movzbl	2(%rcx), %eax
	cmpq	%rax, 112(%rsp)         # 8-byte Folded Reload
	jne	.LBB39_377
# BB#373:                               # %land.lhs.true2575
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	nonzero_bits
	movq	%rax, %rdi
	callq	exact_log2_wide
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	js	.LBB39_377
# BB#374:                               # %if.then2580
	movq	%rax, %rbx
	callq	expand_compound_operation
	notq	%rbx
	addq	%rbx, %r12
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	%r12, %r8
	callq	simplify_shift_const
	movq	%rax, %r15
	movzbl	(%r15), %eax
	cmpq	$83, %rax
	jne	.LBB39_67
# BB#375:                               # %land.lhs.true2592
	movq	16(%r15), %rax
	movq	const_true_rtx(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB39_67
# BB#376:                               # %if.then2598
	movq	8(%r15), %r15
	jmp	.LBB39_67
.LBB39_377:                             # %if.end2603
	movq	128(%rsp), %rdx
	andq	%r14, %r13
	cmpq	%r15, %r13
	jne	.LBB39_378
# BB#379:                               # %if.end2608
	movq	%rbx, %rdi
	movq	%rdx, %rsi
	callq	do_SUBST
	movq	120(%rsp), %rsi
	movq	104(%rsp), %rdi         # 8-byte Reload
	callq	do_SUBST
	movq	88(%rsp), %r9           # 8-byte Reload
.LBB39_380:                             # %sw.epilog2887
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_378:                             # %if.then2606
	movq	120(%rsp), %rcx
	movq	%r14, %rdi
.LBB39_815:                             # %return
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	gen_rtx_fmt_ee
.LBB39_66:                              # %return
	movq	%rax, %r15
.LBB39_67:                              # %return
	movq	%r15, %rax
	addq	$208, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB39_595:                             # %sw.bb2623
	movq	8(%r9), %r14
	movq	16(%r9), %r15
	movl	(%r15), %eax
	movl	(%r14), %edx
	testq	$16711680, %rax         # imm = 0xFF0000
	movq	%rdx, %rsi
	je	.LBB39_597
# BB#596:                               # %sw.bb2623
	movq	%rax, %rsi
.LBB39_597:                             # %sw.bb2623
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$59, %rdx
	jne	.LBB39_599
# BB#598:                               # %sw.bb2623
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$51, %rcx
	je	.LBB39_67
.LBB39_599:                             # %if.end.i
	andq	$255, %rsi
	movl	mode_class(,%rsi,4), %ecx
	leaq	16(%r9), %rbx
	cmpq	$1, %rcx
	jne	.LBB39_600
# BB#601:                               # %if.then18.i
	movq	$-1, %rdx
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%r15, %rdi
	movq	%r9, %r12
	callq	force_to_mode
	movq	%rax, %r15
	movq	%rbx, %rdi
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	%r15, %rsi
	callq	do_SUBST
	movq	%r12, %r9
	movl	(%r15), %eax
	jmp	.LBB39_602
.LBB39_268:                             # %sw.bb1702
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$58, %rcx
	jne	.LBB39_380
	jmp	.LBB39_269
.LBB39_120:                             # %sw.bb691
	movq	104(%rsp), %rax         # 8-byte Reload
	testq	%r13, %rax
	je	.LBB39_122
# BB#121:                               # %sw.bb691.if.end701_crit_edge
	movq	8(%r9), %rsi
	movl	(%rsi), %eax
	leaq	8(%r9), %r14
	jmp	.LBB39_123
.LBB39_119:                             # %sw.bb683
	movq	8(%r9), %rdi
	leaq	8(%r9), %r14
	movq	$66, %rsi
	movq	%r9, %rbx
	callq	make_compound_operation
	movq	%r14, %rdi
	movq	%rax, %rsi
	jmp	.LBB39_270
.LBB39_381:                             # %sw.bb2616
	movq	8(%r9), %rbx
	movzbl	(%rbx), %edi
	movzbl	2(%r9), %esi
	leaq	8(%r9), %rax
	movzbl	rtx_class(%rdi), %r12d
	movq	16(%r9), %rdx
	movq	24(%r9), %r14
	leaq	16(%r9), %r8
	cmpq	$60, %r12
	leaq	24(%r9), %rcx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	jne	.LBB39_382
# BB#383:                               # %sw.bb2616
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movabsq	$1, %r10
	jmp	.LBB39_384
.LBB39_271:                             # %sw.bb1721
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$85, %rcx
	jne	.LBB39_272
# BB#276:                               # %land.lhs.true1810
	movq	16(%r9), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	movq	112(%rsp), %r12         # 8-byte Reload
	jne	.LBB39_291
# BB#277:                               # %land.lhs.true1818
	movq	16(%rax), %rax
	movzbl	(%rax), %edx
	cmpq	$54, %rdx
	jne	.LBB39_291
# BB#278:                               # %land.lhs.true1829
	movq	8(%rcx), %rcx
	movq	8(%rax), %rdi
	addq	%rdi, %rcx
	jne	.LBB39_291
# BB#279:                               # %land.lhs.true1848
	movq	%r9, %rbx
	callq	exact_log2_wide
	movq	%rbx, %r9
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jns	.LBB39_281
# BB#280:                               # %lor.lhs.false1861
	movq	16(%r9), %rax
	movq	8(%rax), %rdi
	movq	%r9, %rbx
	callq	exact_log2_wide
	movq	%rbx, %r9
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	js	.LBB39_291
.LBB39_281:                             # %land.lhs.true1871
	movzbl	mode_bitsize(%r12,%r12), %ebx
	cmpq	$64, %rbx
	ja	.LBB39_291
# BB#282:                               # %land.lhs.true1877
	movq	8(%r9), %rcx
	movq	8(%rcx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$121, %rsi
	je	.LBB39_288
# BB#283:                               # %land.lhs.true1877
	cmpq	$83, %rsi
	jne	.LBB39_291
# BB#284:                               # %land.lhs.true1888
	movq	16(%rdx), %rcx
	movzbl	(%rcx), %edi
	cmpq	$54, %rdi
	jne	.LBB39_291
# BB#285:                               # %land.lhs.true1902
	movq	%r12, %r11
	movq	%r13, %r10
	movq	8(%rcx), %rdi
	leaq	1(%rax), %rcx
	movq	$1, %r8
	shlq	%cl, %r8
	decq	%r8
	cmpq	%r8, %rdi
	jne	.LBB39_287
# BB#286:                               # %land.lhs.true1902.if.then1949_crit_edge
	movq	8(%rdx), %rcx
	movq	%r11, %r12
	jmp	.LBB39_289
.LBB39_312:                             # %sw.bb2100
	movq	8(%r9), %rax
	movq	const_int_rtx+520(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB39_320
# BB#313:                               # %land.lhs.true2106
	movq	16(%r9), %rbx
	movzbl	(%rbx), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	jne	.LBB39_320
# BB#314:                               # %land.lhs.true2117
	movq	8(%rbx), %r15
	movq	16(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	movq	%r9, %r12
	callq	reversed_comparison_code
	movq	%r12, %r9
	testq	%r13, %rax
	jne	.LBB39_319
# BB#315:                               # %lor.lhs.false.i.i3524
	movq	8(%rbx), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB39_320
# BB#316:                               # %if.end.i.i3527
	movq	%r9, %r12
	callq	get_last_value
	movq	%r12, %r9
	testq	%rax, %rax
	je	.LBB39_320
# BB#317:                               # %lor.lhs.false7.i.i3531
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB39_320
# BB#318:                               # %combine_reversed_comparison_code.exit.i3540
	movq	8(%rax), %rsi
	movq	16(%rax), %rdx
	movzbl	(%rbx), %edi
	xorq	%rcx, %rcx
	movq	%r9, %rbx
	callq	reversed_comparison_code_parts
	movq	%rbx, %r9
	testq	%r13, %rax
	je	.LBB39_320
.LBB39_319:                             # %reversed_comparison.exit3545
	movq	%rax, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%r15, %rdx
	movq	%r14, %rcx
	movq	%r9, %rbx
	callq	gen_binary
	movq	%rbx, %r9
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB39_67
.LBB39_320:                             # %if.end2136
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$83, %rcx
	jne	.LBB39_325
# BB#321:                               # %land.lhs.true2144
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB39_325
# BB#322:                               # %land.lhs.true2155
	movq	8(%rax), %rdi
	negq	%rdi
	movq	%r9, %rbx
	callq	exact_log2_wide
	movq	%rbx, %r9
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB39_325
# BB#323:                               # %land.lhs.true2169
	movq	16(%r9), %rax
	movq	8(%r9), %rsi
	movq	8(%rax), %rdi
	movq	%r9, %rbx
	callq	rtx_equal_p
	movq	%rbx, %r9
	testq	%r13, %rax
	je	.LBB39_325
# BB#324:                               # %if.then2181
	movq	16(%r9), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rcx
	movq	8(%r9), %rdx
	notq	%rcx
	xorq	%rdi, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	simplify_and_const_int
	jmp	.LBB39_66
.LBB39_175:                             # %sw.bb1077
	movq	8(%r9), %rdi
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$84, %rcx
	jg	.LBB39_179
# BB#176:                               # %sw.bb1077
	cmpq	$75, %rcx
	jne	.LBB39_177
# BB#182:                               # %land.lhs.true1085
	movq	16(%rdi), %rcx
	movq	const_int_rtx+520(%rip), %rdx
	cmpq	%rdx, %rcx
	je	.LBB39_184
# BB#183:
	movq	%r9, %r12
	jmp	.LBB39_198
.LBB39_329:                             # %sw.bb2244
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$75, %rcx
	jne	.LBB39_331
# BB#330:                               # %if.then2252
	movq	8(%rax), %rdx
	movq	16(%r9), %rcx
	movq	$78, %rdi
	movq	112(%rsp), %r15         # 8-byte Reload
	movq	%r15, %rsi
	movq	%r9, %rbx
	callq	gen_binary
	movq	8(%rbx), %rcx
	movq	16(%rbx), %rdi
	movq	16(%rcx), %rbx
	movq	%rax, %r14
	callq	copy_rtx
	movq	$78, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	$75, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rdi
	callq	apply_distributive_law
	movq	%rax, %r9
	movzbl	(%r9), %eax
	cmpq	$78, %rax
	movq	%r9, %r15
	jne	.LBB39_67
.LBB39_331:                             # %if.end2282
	movq	112(%rsp), %rbx         # 8-byte Reload
	movl	mode_class(,%rbx,4), %eax
	movq	%rax, %rcx
	orq	$4, %rcx
	andq	%r13, %rcx
	cmpq	$6, %rcx
	jne	.LBB39_332
# BB#334:                               # %land.lhs.true2297
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%rax, %rax
	jne	.LBB39_335
	jmp	.LBB39_380
.LBB39_339:                             # %sw.bb2330
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB39_380
# BB#340:                               # %land.lhs.true2338
	movq	%r9, %rbx
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	%rbx, %r9
	testq	%rdx, %rdx
	js	.LBB39_380
# BB#341:                               # %land.lhs.true2348
	movq	8(%r9), %rcx
	movzbl	(%rcx), %edx
	addq	$-87, %rdx
	andq	%r13, %rdx
	cmpq	$4, %rdx
	ja	.LBB39_380
# BB#342:                               # %if.then2388
	xorq	%rdi, %rdi
	movq	$90, %rsi
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %r8
	callq	simplify_shift_const
	jmp	.LBB39_66
.LBB39_139:                             # %sw.bb827
	movq	8(%r9), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$85, %rax
	je	.LBB39_147
# BB#140:                               # %sw.bb827
	cmpq	$77, %rax
	movq	112(%rsp), %r12         # 8-byte Reload
	jne	.LBB39_141
# BB#146:                               # %if.then860
	movq	8(%rdi), %rdx
	movq	const_int_rtx+504(%rip), %rcx
	movq	$75, %rdi
	movq	%r12, %rsi
	callq	gen_rtx_fmt_ee
	jmp	.LBB39_66
.LBB39_221:                             # %sw.bb1320
	movq	112(%rsp), %rcx         # 8-byte Reload
	movl	mode_class(,%rcx,4), %eax
	cmpq	$3, %rax
	je	.LBB39_380
# BB#222:                               # %if.end1326
	movzbl	mode_bitsize(%rcx,%rcx), %r14d
	leaq	8(%r9), %r12
	cmpq	$64, %r14
	ja	.LBB39_224
# BB#223:                               # %if.then1332
	movq	(%r12), %rdi
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	mode_mask_array(,%rax,8), %rdx
	movzbl	2(%rdi), %esi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%r9, %rbx
	callq	force_to_mode
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%rbx, %r9
.LBB39_224:                             # %if.end1348
	movq	(%r12), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65534, %rax            # imm = 0xFFFE
	cmpq	$120, %rax
	jne	.LBB39_226
# BB#225:                               # %land.lhs.true1364
	movq	8(%rdi), %r15
	movzbl	2(%r15), %eax
	movq	112(%rsp), %rcx         # 8-byte Reload
	cmpq	%rcx, %rax
	je	.LBB39_67
.LBB39_226:                             # %if.end1383
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	je	.LBB39_235
# BB#227:                               # %if.end1383
	cmpq	$77, %rax
	je	.LBB39_230
# BB#228:                               # %if.end1383
	cmpq	$129, %rax
	jne	.LBB39_229
.LBB39_230:                             # %land.lhs.true1399
	movq	8(%rdi), %rcx
	movl	(%rcx), %edx
	andq	$65534, %rdx            # imm = 0xFFFE
	cmpq	$120, %rdx
	jne	.LBB39_233
# BB#231:                               # %land.lhs.true1421
	movq	8(%rcx), %rdx
	movzbl	2(%rdx), %ecx
	movq	112(%rsp), %rbx         # 8-byte Reload
	cmpq	%rbx, %rcx
	jne	.LBB39_233
# BB#232:                               # %if.then1436
	movq	%rax, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	jmp	.LBB39_263
.LBB39_255:                             # %sw.bb1584
	movq	8(%r9), %rdi
	movzbl	(%rdi), %eax
	cmpq	$76, %rax
	jle	.LBB39_265
# BB#256:                               # %sw.bb1584
	cmpq	$77, %rax
	je	.LBB39_260
# BB#257:                               # %sw.bb1584
	cmpq	$129, %rax
	jne	.LBB39_258
.LBB39_260:                             # %land.lhs.true1627
	movq	8(%rdi), %rcx
	movzbl	(%rcx), %edx
	cmpq	$123, %rdx
	movq	112(%rsp), %rsi         # 8-byte Reload
	jne	.LBB39_380
# BB#261:                               # %land.lhs.true1638
	movq	8(%rcx), %rdx
	movzbl	2(%rdx), %ecx
	cmpq	%rsi, %rcx
	jne	.LBB39_265
# BB#262:                               # %if.then1653
	movq	%rax, %rdi
.LBB39_263:                             # %return
	movq	%rsi, %rcx
	callq	simplify_gen_unary
	jmp	.LBB39_66
.LBB39_886:                             # %sw.bb2756
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	jmp	.LBB39_887
.LBB39_877:                             # %sw.bb2627
	movq	8(%r9), %r15
	movl	(%r15), %eax
	leaq	8(%r9), %r12
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	%r9, %rbx
	cmpq	$77, %rcx
	jne	.LBB39_879
# BB#878:                               # %if.then2635
	movq	8(%r15), %rsi
	movq	%r12, %rdi
	callq	do_SUBST
	movq	(%r12), %r15
	movl	(%r15), %eax
.LBB39_879:                             # %if.end2645
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%rbx, %r9
	je	.LBB39_380
# BB#880:                               # %if.end2655
	orq	$2, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$131, %rax
	je	.LBB39_67
# BB#881:                               # %lor.lhs.false2671
	movq	%r9, %r14
	movq	%rsi, %rax
	andq	%r13, %rax
	movzbl	mode_bitsize(%rax,%rax), %eax
	cmpq	$64, %rax
	ja	.LBB39_883
# BB#882:                               # %land.lhs.true2683
	movq	%r15, %rdi
	callq	nonzero_bits
	movq	(%r12), %r15
	movzbl	2(%r15), %ecx
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	addq	%r13, %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	%rax, %rdx
	je	.LBB39_67
.LBB39_883:                             # %if.end2713
	movq	%r15, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movq	%r14, %r9
	movzbl	mode_bitsize(%rbx,%rbx), %ecx
	movq	%rbx, %rsi
	andq	%r13, %rax
	cmpq	%rcx, %rax
	jne	.LBB39_380
# BB#884:                               # %if.then2723
	movq	(%r12), %rdx
	movq	$77, %rdi
	callq	gen_rtx_fmt_e
	jmp	.LBB39_66
.LBB39_885:                             # %sw.bb2729
	movq	8(%r9), %rax
	movl	(%rax), %ecx
	andq	$65534, %rcx            # imm = 0xFFFE
.LBB39_887:                             # %sw.bb2756
	cmpq	$120, %rcx
	jne	.LBB39_380
.LBB39_269:                             # %if.then1710
	movq	8(%rax), %rsi
	leaq	8(%r9), %rdi
	movq	%r9, %rbx
.LBB39_270:                             # %sw.epilog2887
	callq	do_SUBST
	movq	%rbx, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_890:                             # %sw.bb2796
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB39_891
# BB#892:                               # %if.end2810
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB39_380
# BB#893:                               # %land.lhs.true2815
	movq	8(%rax), %rcx
	movzbl	(%rcx), %eax
	cmpq	$54, %rax
	jne	.LBB39_380
# BB#894:                               # %land.lhs.true2824
	movq	8(%r9), %rsi
	movl	(%rsi), %eax
	movq	%rax, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$144, %rdx
	jne	.LBB39_380
# BB#895:                               # %if.then2829
	movl	(%r9), %edx
	movq	8(%rcx), %rbx
	movq	$16, %rcx
	movq	%rdx, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	movzbl	mode_size(%rdi), %edi
	imulq	%rbx, %rdi
	jmp	.LBB39_896
.LBB39_827:                             # %sw.bb592.i
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movzbl	mode_bitsize(%rsi,%rsi), %eax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	cmpq	$64, %rax
	ja	.LBB39_830
# BB#828:                               # %land.lhs.true598.i
	movq	%r14, %rdi
	movq	%rsi, %r15
	callq	nonzero_bits
	movq	%rax, %rbx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	nonzero_bits
	movq	%r15, %rsi
	testq	%rbx, %rax
	je	.LBB39_829
.LBB39_830:                             # %if.end606.i
	movzbl	(%r14), %ecx
	xorq	%rax, %rax
	cmpq	$86, %rcx
	jne	.LBB39_831
# BB#832:                               # %if.then611.i
	movq	8(%r14), %r14
	movq	%r14, %r15
	movq	$1, %rax
	jmp	.LBB39_833
.LBB39_741:                             # %sw.bb2625
	movq	%rsi, 112(%rsp)         # 8-byte Spill
	movq	%r9, %r15
	cmpq	$83, %rax
	jne	.LBB39_873
# BB#742:                               # %sw.bb.i
	movzbl	(%r14), %eax
	cmpq	$85, %rax
	movq	%r12, %rbx
	jne	.LBB39_746
# BB#743:                               # %land.lhs.true.i
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_746
# BB#744:                               # %land.lhs.true11.i
	movq	%rbx, %rdi
	callq	side_effects_p
	testq	%r13, %rax
	jne	.LBB39_746
# BB#745:                               # %if.then.i
	movq	16(%r14), %rdx
	movq	$86, %rdi
	movq	112(%rsp), %r15         # 8-byte Reload
	movq	%r15, %rsi
	movq	%r15, %rcx
	callq	simplify_gen_unary
	movq	$83, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	gen_binary
	movq	%rax, %r15
.LBB39_746:                             # %if.end.i3565
	movzbl	(%r14), %eax
	cmpq	$85, %rax
	jne	.LBB39_750
# BB#747:                               # %land.lhs.true22.i
	movq	16(%r14), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_750
# BB#748:                               # %land.lhs.true28.i
	movq	%rbx, %rdi
	callq	side_effects_p
	testq	%r13, %rax
	jne	.LBB39_750
# BB#749:                               # %if.then31.i
	movq	8(%r14), %rdx
	movq	$86, %rdi
	movq	112(%rsp), %r15         # 8-byte Reload
	movq	%r15, %rsi
	movq	%r15, %rcx
	callq	simplify_gen_unary
	movq	$83, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	gen_binary
	movq	%rax, %r15
.LBB39_750:                             # %if.end37.i
	movzbl	(%r14), %eax
	cmpq	$86, %rax
	jne	.LBB39_755
# BB#751:                               # %land.lhs.true41.i
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$85, %rcx
	jne	.LBB39_755
# BB#752:                               # %land.lhs.true48.i
	movq	8(%rax), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_755
# BB#753:                               # %land.lhs.true57.i
	movq	%rbx, %rdi
	callq	side_effects_p
	testq	%r13, %rax
	jne	.LBB39_755
# BB#754:                               # %if.then60.i
	movq	8(%r14), %rax
	movq	16(%rax), %rdx
	movq	$83, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%rbx, %rcx
	callq	gen_binary
	movq	%rax, %r15
.LBB39_755:                             # %if.end68.i
	movzbl	(%r14), %eax
	cmpq	$86, %rax
	jne	.LBB39_760
# BB#756:                               # %land.lhs.true72.i
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$85, %rcx
	jne	.LBB39_760
# BB#757:                               # %land.lhs.true79.i
	movq	16(%rax), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_760
# BB#758:                               # %land.lhs.true88.i
	movq	%rbx, %rdi
	callq	side_effects_p
	testq	%r13, %rax
	jne	.LBB39_760
# BB#759:                               # %if.then91.i
	movq	8(%r14), %rax
	movq	8(%rax), %rdx
	movq	$83, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%rbx, %rcx
	callq	gen_binary
	movq	%rax, %r15
.LBB39_760:                             # %if.end99.i3571
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB39_774
# BB#761:                               # %land.lhs.true103.i
	movq	112(%rsp), %rsi         # 8-byte Reload
	movzbl	mode_bitsize(%rsi,%rsi), %eax
	movq	8(%rbx), %rcx
	cmpq	$65, %rax
	jb	.LBB39_763
# BB#762:                               # %land.lhs.true103.i
	testq	%rcx, %rcx
	jle	.LBB39_774
.LBB39_763:                             # %if.then111.i
	movq	%r15, %rdi
	movq	%r14, %rdx
	callq	simplify_and_const_int
	movzbl	(%rax), %esi
	movq	80(%rsp), %rcx          # 8-byte Reload
	testq	%r13, %rcx
	je	.LBB39_769
# BB#764:                               # %if.then111.i
	cmpq	$84, %rsi
	jne	.LBB39_769
# BB#765:                               # %land.lhs.true122.i
	movzbl	(%r14), %ecx
	cmpq	$83, %rcx
	jne	.LBB39_769
# BB#766:                               # %land.lhs.true127.i
	movq	16(%r14), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB39_769
# BB#767:                               # %land.lhs.true135.i
	movzbl	(%rbx), %edx
	cmpq	$54, %rdx
	jne	.LBB39_769
# BB#768:                               # %if.then140.i3576
	movq	8(%rbx), %rsi
	movq	8(%rcx), %rax
	movq	%rbx, %r15
	movq	8(%r14), %r14
	notq	%rsi
	andq	%rax, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$83, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	$84, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	jmp	.LBB39_544
.LBB39_65:                              # %if.else405
	movq	160(%rsp), %rdx
	movq	136(%rsp), %rcx
	xorq	%rsi, %rsi
	movq	72(%rsp), %rdi          # 8-byte Reload
	callq	gen_binary
	movq	$72, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	movq	%r14, %r8
	callq	gen_rtx_fmt_eee
	jmp	.LBB39_66
.LBB39_325:                             # %if.end2197
	movq	16(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$75, %rcx
	jne	.LBB39_380
# BB#326:                               # %land.lhs.true2205
	movq	112(%rsp), %rbx         # 8-byte Reload
	movl	mode_class(,%rbx,4), %ecx
	cmpq	$7, %rcx
	ja	.LBB39_380
# BB#327:                               # %land.lhs.true2205
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$170, %rdx
	je	.LBB39_380
# BB#328:                               # %if.then2225
	movq	8(%r9), %rdx
	movq	8(%rax), %rcx
	movq	$76, %rdi
	movq	%rbx, %rsi
	movq	%r9, %r14
	callq	gen_binary
	movq	16(%r14), %rcx
	movq	16(%rcx), %rcx
	movq	$76, %rdi
	jmp	.LBB39_201
.LBB39_265:                             # %if.end1669
	cmpq	$63, %rax
	jne	.LBB39_380
# BB#266:                               # %land.lhs.true1677
	movq	%r9, %rbx
	callq	subreg_lowpart_p
	movq	%rbx, %r9
	testq	%r13, %rax
	je	.LBB39_380
# BB#267:                               # %land.lhs.true1683
	movq	8(%r9), %rax
	movq	8(%rax), %r15
	movzbl	(%r15), %eax
	cmpq	$124, %rax
	je	.LBB39_67
	jmp	.LBB39_380
.LBB39_382:
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movabsq	$0, %r10
.LBB39_384:                             # %sw.bb2616
	movq	const_true_rtx(%rip), %rax
	movq	const_int_rtx+512(%rip), %rcx
	jne	.LBB39_388
# BB#385:                               # %sw.bb2616
	cmpq	%rax, %rdx
	jne	.LBB39_388
# BB#386:                               # %sw.bb2616
	cmpq	%rcx, %r14
	jne	.LBB39_388
# BB#387:                               # %if.then.i3603
	movq	8(%rbx), %rdx
	movq	16(%rbx), %rcx
	callq	gen_binary
	jmp	.LBB39_66
.LBB39_272:                             # %sw.bb1721
	cmpq	$75, %rcx
	movq	112(%rsp), %r12         # 8-byte Reload
	jne	.LBB39_291
# BB#273:                               # %land.lhs.true1729
	movq	16(%rax), %rcx
	movzbl	(%rcx), %ecx
	addq	$-54, %rcx
	andq	%r13, %rcx
	cmpq	$14, %rcx
	ja	.LBB39_291
# BB#274:                               # %land.lhs.true1729
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$24595, %rdx            # imm = 0x6013
	je	.LBB39_291
# BB#275:                               # %if.then1784
	movq	8(%rax), %rdx
	movq	16(%r9), %rcx
	movq	$75, %rdi
	movq	%r12, %rsi
	movq	%r9, %rbx
	callq	gen_binary
	movq	8(%rbx), %rcx
	movq	16(%rcx), %rcx
	movq	$75, %rdi
	movq	%r12, %rsi
	jmp	.LBB39_202
.LBB39_179:                             # %sw.bb1077
	cmpq	$85, %rcx
	je	.LBB39_195
# BB#180:                               # %sw.bb1077
	cmpq	$86, %rcx
	jne	.LBB39_181
# BB#185:                               # %if.then1110
	movq	8(%rdi), %rdi
	movq	$1, %rsi
	callq	plus_constant_wide
	jmp	.LBB39_66
.LBB39_388:                             # %if.end.i3604
	movq	%rdx, 104(%rsp)         # 8-byte Spill
	movq	%r8, 56(%rsp)           # 8-byte Spill
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	cmpq	$60, %r12
	jne	.LBB39_397
# BB#389:                               # %if.end.i3604
	cmpq	%rcx, 104(%rsp)         # 8-byte Folded Reload
	jne	.LBB39_397
# BB#390:                               # %if.end.i3604
	cmpq	%rax, %r14
	jne	.LBB39_397
# BB#391:                               # %land.lhs.true29.i3607
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	8(%rdi), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	16(%rdi), %r15
	xorq	%rsi, %rsi
	movq	%r9, %rbx
	callq	reversed_comparison_code
	movq	%rbx, %r9
	testq	%r13, %rax
	jne	.LBB39_396
# BB#392:                               # %lor.lhs.false.i.i.i3616
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB39_397
# BB#393:                               # %if.end.i.i.i3619
	movq	%r9, %rbx
	callq	get_last_value
	movq	%rbx, %r9
	testq	%rax, %rax
	je	.LBB39_397
# BB#394:                               # %lor.lhs.false7.i.i.i3623
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB39_397
# BB#395:                               # %combine_reversed_comparison_code.exit.i.i3632
	movq	8(%rax), %rsi
	movq	16(%rax), %rdx
	movq	112(%rsp), %rax         # 8-byte Reload
	movzbl	(%rax), %edi
	xorq	%rcx, %rcx
	movq	%r9, %rbx
	callq	reversed_comparison_code_parts
	movq	%rbx, %r9
	testq	%r13, %rax
	je	.LBB39_397
.LBB39_396:                             # %reversed_comparison.exit.i3636
	movq	%rax, %rdi
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	%r15, %rcx
	movq	%r9, %rbx
	callq	gen_binary
	movq	%rbx, %r9
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB39_67
.LBB39_397:                             # %if.end39.i
	movq	%r9, 88(%rsp)           # 8-byte Spill
	cmpq	$60, %r12
	jne	.LBB39_398
# BB#399:                               # %land.lhs.true41.i3638
	xorq	%rsi, %rsi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	callq	reversed_comparison_code
	testq	%r13, %rax
	movq	56(%rsp), %r15          # 8-byte Reload
	jne	.LBB39_404
# BB#400:                               # %lor.lhs.false.i.i3647
	movq	8(%rbx), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB39_434
# BB#401:                               # %if.end.i.i3650
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB39_434
# BB#402:                               # %lor.lhs.false7.i.i3654
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB39_434
# BB#403:                               # %combine_reversed_comparison_code.exit.i3662
	movq	8(%rax), %rsi
	movq	16(%rax), %rdx
	movzbl	(%rbx), %edi
	xorq	%rcx, %rcx
	callq	reversed_comparison_code_parts
	testq	%r13, %rax
	je	.LBB39_434
.LBB39_404:                             # %land.lhs.true45.i
	movq	8(%rbx), %r12
	movl	(%r12), %esi
	movq	%rsi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB39_434
# BB#405:                               # %if.then53.i
	movq	16(%rbx), %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rax, %r15
	andq	%r13, %r15
	cmpq	$103, %r15
	movq	$102, %rcx
	je	.LBB39_407
# BB#406:                               # %if.then53.i
	movq	%rax, %rcx
.LBB39_407:                             # %if.then53.i
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r14, %rcx
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	je	.LBB39_409
# BB#408:                               # %if.then53.i
	movq	%rax, %r15
.LBB39_409:                             # %if.then53.i
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	je	.LBB39_411
# BB#410:                               # %if.then53.i
	movq	%rcx, 72(%rsp)          # 8-byte Spill
.LBB39_411:                             # %if.then53.i
	je	.LBB39_413
# BB#412:                               # %if.then53.i
	movq	%rdx, %rcx
.LBB39_413:                             # %if.then53.i
	movq	const_int_rtx+512(%rip), %rax
	cmpq	$103, %r15
	jne	.LBB39_417
# BB#414:                               # %if.then53.i
	cmpq	%rax, 40(%rsp)          # 8-byte Folded Reload
	jne	.LBB39_417
# BB#415:                               # %land.lhs.true69.i
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%r12, %rdi
	callq	nonzero_bits
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB39_416
# BB#905:                               # %if.then77.i
	movq	%r13, %r14
	xorq	%rdi, %rdi
	movq	%rbx, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	$103, %r13
	jmp	.LBB39_424
.LBB39_99:
	movq	%rax, %rcx
	jmp	.LBB39_108
.LBB39_816:                             # %if.end502.i
	movzbl	(%r15), %eax
	cmpq	$54, %rax
	jne	.LBB39_876
# BB#817:                               # %land.lhs.true507.i
	movzbl	(%r14), %eax
	cmpq	$89, %rax
	jne	.LBB39_876
# BB#818:                               # %land.lhs.true512.i
	movq	%r15, %rsi
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$75, %rcx
	jne	.LBB39_876
# BB#819:                               # %land.lhs.true520.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$54, %rcx
	jne	.LBB39_876
# BB#820:                               # %land.lhs.true531.i
	movq	16(%r14), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB39_876
# BB#821:                               # %land.lhs.true539.i
	movq	%r8, %rbx
	movq	8(%rcx), %rcx
	cmpq	$63, %rcx
	jg	.LBB39_822
# BB#823:                               # %if.then548.i
	movq	8(%rsi), %rdx
	movq	%rdx, %r12
	shlq	%cl, %r12
	movq	%r13, %rdi
	andq	%rcx, %rdi
	movq	%r12, %rsi
	movq	%rdi, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jne	.LBB39_824
# BB#825:                               # %land.lhs.true565.i
	movq	%rax, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	nonzero_bits
	testq	%r12, %rax
	movq	%rbx, %r8
	jne	.LBB39_876
# BB#826:                               # %if.then573.i
	movq	%r14, %rbx
	movq	8(%rbx), %r15
	movq	16(%r15), %rax
	movq	8(%rax), %rax
	addq	$16, %r15
	orq	%r12, %rax
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	%rbx, %r15
	jmp	.LBB39_67
.LBB39_831:
	movq	%r14, %r15
.LBB39_833:                             # %if.end615.i
	movq	%r12, %r14
	movzbl	(%r14), %ecx
	cmpq	$86, %rcx
	jne	.LBB39_835
# BB#834:                               # %if.then620.i
	movq	8(%r14), %r14
	incq	%rax
.LBB39_835:                             # %if.end625.i
	andq	%r13, %rax
	cmpq	$1, %rax
	jne	.LBB39_836
# BB#907:                               # %if.then638.i
	movq	$85, %rdi
	movq	%rsi, %rbx
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	gen_binary
	movq	$86, %rdi
.LBB39_507:                             # %return
	movq	%rbx, %rsi
	movq	%rax, %rdx
.LBB39_508:                             # %return
	movq	%rbx, %rcx
	callq	simplify_gen_unary
	jmp	.LBB39_66
.LBB39_836:                             # %if.end625.i
	movq	%rsi, 112(%rsp)         # 8-byte Spill
	cmpq	$2, %rax
	jne	.LBB39_838
# BB#837:                               # %if.then628.i
	movq	88(%rsp), %rax          # 8-byte Reload
	leaq	8(%rax), %rdi
	movq	%r14, %r12
	leaq	16(%rax), %rbx
	movq	%r15, %rsi
	callq	do_SUBST
	movq	%rbx, %rdi
	movq	%r12, %r14
	movq	%r14, %rsi
	callq	do_SUBST
.LBB39_838:                             # %if.end642.i
	movzbl	(%r15), %eax
	cmpq	$83, %rax
	jne	.LBB39_843
# BB#839:                               # %land.lhs.true647.i
	movq	16(%r15), %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_843
# BB#840:                               # %land.lhs.true653.i
	movq	%r14, %rdi
	callq	side_effects_p
	testq	%r13, %rax
	je	.LBB39_841
.LBB39_843:                             # %if.else662.i
	movzbl	(%r15), %eax
	movq	%r15, %r12
	cmpq	$83, %rax
	jne	.LBB39_847
# BB#844:                               # %land.lhs.true667.i
	movq	8(%r12), %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_847
# BB#845:                               # %land.lhs.true673.i
	movq	%r14, %rdi
	callq	side_effects_p
	testq	%r13, %rax
	je	.LBB39_846
.LBB39_847:                             # %if.end683.i
	movq	const_int_rtx+520(%rip), %rax
	cmpq	%rax, %r14
	movq	%r14, %rbx
	movq	88(%rsp), %r8           # 8-byte Reload
	jne	.LBB39_855
# BB#848:                               # %land.lhs.true686.i
	movzbl	(%r12), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	jne	.LBB39_855
# BB#849:                               # %land.lhs.true694.i
	movq	%r12, %rdi
	movq	8(%rdi), %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	16(%rdi), %r15
	xorq	%rsi, %rsi
                                        # kill: R12<def> RDI<kill>
	movq	%r8, %r14
	callq	reversed_comparison_code
	movq	%r14, %r8
	testq	%r13, %rax
	jne	.LBB39_854
# BB#850:                               # %lor.lhs.false.i.i.i
	movq	8(%r12), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB39_855
# BB#851:                               # %if.end.i.i.i3589
	callq	get_last_value
	movq	88(%rsp), %r8           # 8-byte Reload
	testq	%rax, %rax
	je	.LBB39_855
# BB#852:                               # %lor.lhs.false7.i.i.i
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB39_855
# BB#853:                               # %combine_reversed_comparison_code.exit.i.i
	movq	8(%rax), %rdx
	movq	16(%rax), %rax
	movzbl	(%r12), %esi
	xorq	%rcx, %rcx
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	movq	%rax, %rdx
	movq	%r8, %r14
	callq	reversed_comparison_code_parts
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB39_855
.LBB39_854:                             # %reversed_comparison.exit.i
	movq	%rax, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	%r15, %rcx
	movq	%r8, %r15
	callq	gen_binary
	movq	%r15, %r8
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB39_67
.LBB39_855:                             # %if.end704.i
	movq	const_int_rtx+520(%rip), %rax
	cmpq	%rax, %rbx
	movq	%r12, %r14
	movq	96(%rsp), %rcx          # 8-byte Reload
	jne	.LBB39_860
# BB#856:                               # %land.lhs.true707.i
	movzbl	(%r14), %eax
	cmpq	$90, %rax
	jne	.LBB39_860
# BB#857:                               # %land.lhs.true712.i
	movq	16(%r14), %rax
	movzbl	(%rax), %edx
	cmpq	$54, %rdx
	jne	.LBB39_860
# BB#858:                               # %land.lhs.true720.i
	movq	8(%rax), %rax
	leaq	-1(%rcx), %rdx
	cmpq	%rdx, %rax
	jne	.LBB39_860
# BB#859:                               # %if.then733.i
	movq	8(%r14), %rdx
	movq	const_int_rtx+512(%rip), %rcx
	movq	$104, %rdi
	jmp	.LBB39_815
.LBB39_122:                             # %if.then694
	movq	8(%r9), %rsi
	movl	(%rsi), %eax
	leaq	8(%r9), %r14
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movq	%rdx, 104(%rsp)         # 8-byte Spill
.LBB39_123:                             # %if.end701
	movq	112(%rsp), %r15         # 8-byte Reload
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	%r9, %rbx
	cmpq	$133, %rcx
	jg	.LBB39_126
# BB#124:                               # %if.end701
	addq	$-54, %rcx
	andq	%r13, %rcx
	cmpq	$14, %rcx
	ja	.LBB39_130
# BB#125:                               # %if.end701
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$24599, %rdx            # imm = 0x6017
	jne	.LBB39_128
	jmp	.LBB39_130
.LBB39_126:                             # %if.end701
	cmpq	$134, %rcx
	je	.LBB39_128
# BB#127:                               # %if.end701
	cmpq	$140, %rcx
	jne	.LBB39_130
.LBB39_128:                             # %land.lhs.true765
	movq	%r15, %rdi
	movq	104(%rsp), %rsi         # 8-byte Reload
	callq	subreg_lowpart_offset
	movl	16(%rbx), %ecx
	movq	8(%rbx), %rsi
	andq	%r13, %rax
	cmpq	%rcx, %rax
	jne	.LBB39_129
# BB#901:                               # %if.then771
	movq	%r15, %rdi
	callq	gen_lowpart_for_combine
	jmp	.LBB39_66
.LBB39_147:                             # %land.lhs.true876
	movq	%r9, %r15
	movq	16(%rdi), %rdx
	movzbl	(%rdx), %eax
	cmpq	$54, %rax
	movq	112(%rsp), %r12         # 8-byte Reload
	jne	.LBB39_150
# BB#148:                               # %land.lhs.true887
	movq	$86, %rdi
	movq	%r12, %rsi
	movq	%r12, %rcx
	callq	simplify_unary_operation
	movq	8(%r15), %rdi
	testq	%rax, %rax
	je	.LBB39_149
# BB#902:                               # %if.then897
	movq	8(%rdi), %rdx
	movq	$85, %rdi
	movq	%r12, %rsi
	jmp	.LBB39_115
.LBB39_141:                             # %sw.bb827
	cmpq	$75, %rax
	jne	.LBB39_142
# BB#143:                               # %land.lhs.true835
	movq	16(%rdi), %rax
	movq	const_int_rtx+504(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB39_145
# BB#144:
	movq	%r9, %r15
	jmp	.LBB39_150
.LBB39_129:                             # %land.lhs.true765.if.end776_crit_edge
	movl	(%rsi), %eax
.LBB39_130:                             # %if.end776
	movq	$14, %rcx
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %eax
	cmpq	$4, %rax
	jne	.LBB39_132
# BB#131:
	movq	%rbx, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_132:                             # %if.end788
	movl	16(%rbx), %ecx
	movq	%r15, %rdi
	movq	%r15, %r12
	movq	104(%rsp), %rdx         # 8-byte Reload
	callq	simplify_subreg
	movq	%rbx, %r9
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB39_67
# BB#133:                               # %if.end799
	movq	(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$66, %rdx
	jne	.LBB39_380
# BB#134:                               # %land.lhs.true807
	testq	$134217728, %rcx        # imm = 0x8000000
	jne	.LBB39_136
# BB#135:                               # %lor.lhs.false815
	movq	8(%rax), %rdi
	movq	%r9, %rbx
	callq	mode_dependent_address_p
	movq	%rbx, %r9
	testq	%r13, %rax
	je	.LBB39_380
.LBB39_136:                             # %if.then824
	movq	const_int_rtx+512(%rip), %rdx
	movq	$49, %rdi
	jmp	.LBB39_137
.LBB39_600:
	movq	%rbx, 112(%rsp)         # 8-byte Spill
.LBB39_602:                             # %if.end22.i
	leaq	8(%r9), %rcx
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r9, %r12
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jne	.LBB39_643
# BB#603:                               # %land.lhs.true26.i
	movq	subst_insn(%rip), %rsi
	leaq	200(%rsp), %rdx
	movq	%r14, %rdi
	callq	find_single_use
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB39_643
# BB#604:                               # %land.lhs.true29.i
	movq	undobuf+16(%rip), %rax
	testq	%rax, %rax
	je	.LBB39_606
# BB#605:                               # %land.lhs.true29.i
	movq	200(%rsp), %rcx
	cmpq	%rax, %rcx
	jne	.LBB39_643
.LBB39_606:                             # %land.lhs.true32.i
	movq	(%rbx), %rax
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$60, %rcx
	jne	.LBB39_643
# BB#607:                               # %land.lhs.true39.i
	movq	8(%rax), %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_643
# BB#608:                               # %if.then44.i
	movq	(%rbx), %rax
	movzbl	(%r15), %ecx
	movzbl	(%rax), %edi
	cmpq	$74, %rcx
	jne	.LBB39_610
# BB#609:                               # %if.then54.i
	movq	8(%r15), %rax
	movq	%rax, 192(%rsp)
	leaq	16(%r15), %rax
	jmp	.LBB39_611
.LBB39_643:                             # %if.else190.i
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	make_compound_operation
	movq	%rax, %r15
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	%r15, %rsi
.LBB39_644:                             # %if.end195.i
	callq	do_SUBST
.LBB39_645:                             # %if.end195.i
	movzbl	(%r15), %eax
	cmpq	$63, %rax
	jne	.LBB39_646
# BB#647:                               # %land.lhs.true200.i
	movq	%r15, %rdi
	callq	subreg_lowpart_p
	testq	%r13, %rax
	je	.LBB39_648
# BB#649:                               # %land.lhs.true203.i
	movq	8(%r15), %rax
	movl	(%rax), %edi
	movq	%rdi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	jne	.LBB39_651
# BB#650:
	movq	%r12, %rbx
	jmp	.LBB39_658
.LBB39_177:                             # %sw.bb1077
	cmpq	$76, %rcx
	jne	.LBB39_178
# BB#187:                               # %land.lhs.true1126
	movq	112(%rsp), %rsi         # 8-byte Reload
	movl	mode_class(,%rsi,4), %ebx
	movq	%rbx, %rdx
	orq	$4, %rdx
	andq	%r13, %rdx
	cmpq	$6, %rdx
	jne	.LBB39_188
# BB#191:                               # %lor.lhs.false1141
	movl	flag_unsafe_math_optimizations(%rip), %edx
	testq	%rdx, %rdx
	jne	.LBB39_192
# BB#193:                               # %if.end1157
	cmpq	$85, %rcx
	jne	.LBB39_194
.LBB39_195:                             # %land.lhs.true1165
	movq	%r9, %r12
	movq	16(%rdi), %rcx
	movq	const_int_rtx+520(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB39_198
# BB#196:                               # %land.lhs.true1174
	movq	8(%rdi), %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	callq	nonzero_bits
	movq	8(%r12), %rdi
	cmpq	$1, %rax
	jne	.LBB39_197
# BB#903:                               # %if.then1184
	movq	8(%rdi), %rdx
	movq	const_int_rtx+504(%rip), %rcx
	movq	$75, %rdi
	movq	%rbx, %rsi
	callq	gen_binary
	jmp	.LBB39_66
.LBB39_332:                             # %lor.lhs.false2292
	andq	%r13, %rax
	cmpq	$8, %rax
	jne	.LBB39_380
# BB#333:                               # %lor.lhs.false2292
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%r13, %rax
	je	.LBB39_380
.LBB39_335:                             # %land.lhs.true2299
	movq	8(%r9), %rax
	movzbl	(%rax), %ecx
	cmpq	$79, %rcx
	jne	.LBB39_380
# BB#336:                               # %if.then2307
	movq	8(%rax), %rdx
	movq	16(%r9), %rcx
	movq	$78, %rdi
	movq	%rbx, %rsi
	movq	%r9, %r14
	callq	simplify_binary_operation
	testq	%rax, %rax
	je	.LBB39_337
# BB#338:                               # %if.then2320
	movq	8(%r14), %rcx
	movq	16(%rcx), %rcx
	movq	$79, %rdi
	jmp	.LBB39_201
.LBB39_860:                             # %if.end738.i
	cmpq	$64, %rcx
	ja	.LBB39_876
# BB#861:                               # %land.lhs.true744.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	mode_mask_array(,%rax,8), %rax
	andq	$1, %rax
	addq	%r13, %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	cmpq	%rdx, %rax
	jne	.LBB39_876
# BB#862:                               # %land.lhs.true744.i
	movq	const_true_rtx(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB39_876
# BB#863:                               # %land.lhs.true759.i
	movzbl	(%r14), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	jne	.LBB39_876
# BB#864:                               # %land.lhs.true767.i
	movq	%r8, 88(%rsp)           # 8-byte Spill
	movq	8(%r14), %rbx
	movq	16(%r14), %r15
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	reversed_comparison_code
	testq	%r13, %rax
	jne	.LBB39_875
# BB#865:                               # %lor.lhs.false.i.i1032.i
	movq	8(%r14), %rax
	movzbl	2(%rax), %ecx
	movl	mode_class(,%rcx,4), %ecx
	cmpq	$4, %rcx
	jne	.LBB39_866
# BB#867:                               # %if.end.i.i1035.i
	movq	%rax, %rdi
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB39_868
# BB#869:                               # %lor.lhs.false7.i.i1039.i
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB39_870
# BB#871:                               # %combine_reversed_comparison_code.exit.i1048.i
	movq	8(%rax), %rdx
	movq	16(%rax), %rax
	movzbl	(%r14), %esi
	xorq	%rcx, %rcx
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	movq	%rax, %rdx
	callq	reversed_comparison_code_parts
	testq	%r13, %rax
	je	.LBB39_872
.LBB39_875:                             # %reversed_comparison.exit1053.i
	movq	%rax, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%rbx, %rdx
	movq	%r15, %rcx
	callq	gen_binary
	movq	%rax, %r15
	testq	%r15, %r15
	movq	88(%rsp), %r8           # 8-byte Reload
	jne	.LBB39_67
	jmp	.LBB39_876
.LBB39_646:
	movq	%r12, %rbx
	jmp	.LBB39_658
.LBB39_769:                             # %if.end156.i
	cmpq	$83, %rsi
	jne	.LBB39_66
# BB#770:                               # %if.end162.i
	movzbl	rtx_class+83(%rip), %ecx
	cmpq	$50, %rcx
	je	.LBB39_772
# BB#771:                               # %if.end162.i
	cmpq	$99, %rcx
	jne	.LBB39_773
.LBB39_772:                             # %if.then178.i
	movq	8(%rax), %r14
	movq	16(%rax), %rbx
.LBB39_773:                             # %if.end186.i
	movq	%rax, %r15
.LBB39_774:                             # %if.end186.i
	movzbl	(%r14), %eax
	cmpq	$84, %rax
	jne	.LBB39_780
# BB#775:                               # %land.lhs.true191.i
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	jne	.LBB39_777
# BB#776:                               # %lor.lhs.false197.i
	movq	16(%r14), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_780
.LBB39_777:                             # %land.lhs.true203.i3579
	movq	8(%r14), %rdi
	callq	side_effects_p
	testq	%r13, %rax
	jne	.LBB39_780
# BB#778:                               # %land.lhs.true209.i
	movq	16(%r14), %rdi
	callq	side_effects_p
	testq	%r13, %rax
	je	.LBB39_779
.LBB39_780:                             # %if.end216.i
	movl	(%r14), %r12d
	movq	%r12, %rax
	andq	$65534, %rax            # imm = 0xFFFE
	cmpq	$84, %rax
	movq	%r15, %r8
	jne	.LBB39_782
# BB#781:                               # %if.then226.i
	movq	8(%r14), %rdx
	movq	$83, %rdi
	movq	112(%rsp), %r13         # 8-byte Reload
	movq	%r13, %rsi
	movq	%rbx, %rcx
	callq	gen_binary
	movq	16(%r14), %r15
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	%rbx, %rdi
	callq	copy_rtx
	movq	$83, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	andq	$65535, %r12            # imm = 0xFFFF
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rdi
	callq	apply_distributive_law
	movq	%rax, %r8
	movzbl	(%r8), %eax
	cmpq	$83, %rax
	movq	%r8, %r15
	jne	.LBB39_67
.LBB39_782:                             # %if.end246.i
	movq	%rbx, %r15
	movl	(%r15), %ebx
	movq	%rbx, %rax
	andq	$65534, %rax            # imm = 0xFFFE
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$84, %rax
	jne	.LBB39_785
# BB#783:                               # %if.then256.i
	movq	8(%r15), %rdx
	movq	$83, %rdi
	movq	112(%rsp), %r12         # 8-byte Reload
	movq	%r12, %rsi
	movq	%r14, %rcx
	callq	gen_binary
	movq	16(%r15), %r15
	movq	%rax, %r13
	movq	%r14, %rdi
	callq	copy_rtx
	movq	$83, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r13, %rdx
	jmp	.LBB39_784
.LBB39_785:                             # %if.else.i3581
	cmpq	$86, %rbx
	jne	.LBB39_876
# BB#786:                               # %if.else.i3581
	movzbl	(%r14), %eax
	movq	%r14, %rcx
	cmpq	$85, %rax
	jne	.LBB39_876
# BB#787:                               # %if.then307.i
	movq	8(%r15), %rdx
	movq	%rcx, %r14
	movq	8(%r14), %rcx
	movq	$84, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	callq	gen_binary
	movq	8(%r15), %rdi
	movq	%rax, %r15
	callq	copy_rtx
	movq	16(%r14), %rcx
	movq	$84, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_binary
	movq	$85, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
.LBB39_784:                             # %return
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %rdi
	callq	apply_distributive_law
	jmp	.LBB39_66
.LBB39_876:                             # %sw.epilog.i
	movq	%r8, %r15
	jmp	.LBB39_67
.LBB39_829:                             # %if.then604.i
	movq	$84, %rdi
	movq	%r14, %rdx
	movq	%r12, %rcx
	callq	gen_binary
	jmp	.LBB39_66
.LBB39_258:                             # %sw.bb1584
	cmpq	$123, %rax
	movq	112(%rsp), %rcx         # 8-byte Reload
	jne	.LBB39_380
# BB#259:                               # %land.lhs.true1592
	movq	8(%rdi), %r15
	movzbl	2(%r15), %eax
	cmpq	%rcx, %rax
	je	.LBB39_67
	jmp	.LBB39_380
.LBB39_142:
	movq	%r9, %r15
	jmp	.LBB39_150
.LBB39_802:
	movq	%r8, %r15
	jmp	.LBB39_67
.LBB39_233:                             # %if.end1452
	cmpq	$63, %rax
	jne	.LBB39_234
.LBB39_235:                             # %land.lhs.true1460
	movq	%r9, %r15
	movq	8(%rdi), %rax
	movzbl	(%rax), %eax
	cmpq	$122, %rax
	jne	.LBB39_238
# BB#236:                               # %land.lhs.true1471
	callq	subreg_lowpart_p
	movq	(%r12), %rdi
	testq	%r13, %rax
	je	.LBB39_237
# BB#904:                               # %if.then1477
	movq	8(%rdi), %r15
	jmp	.LBB39_67
.LBB39_181:
	movq	%r9, %r12
	jmp	.LBB39_198
.LBB39_178:
	movq	%r9, %r12
	jmp	.LBB39_198
.LBB39_791:
	movq	%r12, %r15
	jmp	.LBB39_67
.LBB39_184:                             # %if.then1094
	movq	8(%rdi), %rdx
	movq	$86, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	gen_rtx_fmt_e
	jmp	.LBB39_66
.LBB39_648:
	movq	%r12, %rbx
	jmp	.LBB39_658
.LBB39_337:
	movq	%r14, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_651:                             # %land.lhs.true214.i
	movzbl	2(%r15), %eax
	movzbl	mode_size(%rax), %r8d
	movl	target_flags(%rip), %ebx
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	leaq	4(%rbx), %r9
	movq	$16, %rcx
	shrq	%cl, %rdi
	andq	$255, %rdi
	movzbl	mode_size(%rdi), %esi
	leaq	3(%rbx,%r8), %rax
	cqto
	idivq	%r9
	movq	%rax, %rcx
	leaq	3(%rsi,%rbx), %rax
	cqto
	idivq	%r9
	andq	%r13, %rcx
	andq	%r13, %rax
	cmpq	%rax, %rcx
	jne	.LBB39_652
# BB#653:                               # %land.lhs.true214.i
	cmpq	%rsi, %r8
	movq	%r12, %rbx
	jae	.LBB39_658
# BB#654:                               # %land.lhs.true264.i
	movzbl	(%r14), %eax
	cmpq	$61, %rax
	je	.LBB39_657
# BB#655:                               # %land.lhs.true264.i
	cmpq	$63, %rax
	jne	.LBB39_658
# BB#656:                               # %land.lhs.true274.i
	movq	8(%r14), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB39_658
.LBB39_657:                             # %if.then282.i
	movq	%r14, %rsi
	callq	gen_lowpart_for_combine
	movq	104(%rsp), %r12         # 8-byte Reload
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	8(%r15), %rsi
	movq	112(%rsp), %r14         # 8-byte Reload
	movq	%r14, %rdi
	callq	do_SUBST
	movq	(%r14), %r15
	movq	(%r12), %r14
	jmp	.LBB39_658
.LBB39_229:
	movq	%r9, %r15
	jmp	.LBB39_238
.LBB39_149:                             # %land.lhs.true887.if.end905_crit_edge
	movl	(%rdi), %esi
.LBB39_150:                             # %if.end905
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB39_151
# BB#154:                               # %land.lhs.true939
	callq	subreg_lowpart_p
	movq	8(%r15), %rdi
	movl	(%rdi), %esi
	testq	%r13, %rax
	je	.LBB39_159
# BB#155:                               # %land.lhs.true945
	movq	8(%rdi), %r8
	movq	$16, %rcx
	movq	%rsi, %rbx
	movl	(%r8), %edx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movzbl	mode_size(%rbx), %eax
	movq	$16, %rcx
	movq	%rdx, %rbx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movzbl	mode_size(%rbx), %ecx
	cmpq	%rcx, %rax
	jae	.LBB39_159
# BB#156:                               # %land.lhs.true945
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$87, %rdx
	jne	.LBB39_159
# BB#157:                               # %land.lhs.true980
	movq	8(%r8), %rdx
	movq	const_int_rtx+520(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB39_159
# BB#158:                               # %if.then992
	movq	$86, %rdi
	movq	%rbx, %rsi
	movq	%rbx, %rcx
	callq	simplify_gen_unary
	movq	8(%r15), %rcx
	movq	8(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	$88, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%r12, %rdi
	jmp	.LBB39_254
.LBB39_151:                             # %if.end905
	cmpq	$87, %rax
	jne	.LBB39_159
# BB#152:                               # %land.lhs.true913
	movq	8(%rdi), %rdx
	movq	const_int_rtx+520(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB39_153
.LBB39_159:                             # %if.end1014
	andq	$65535, %rsi            # imm = 0xFFFF
	addq	$-83, %rsi
	andq	%r13, %rsi
	cmpq	$1, %rsi
	ja	.LBB39_160
# BB#161:                               # %if.then1030
	movq	8(%rdi), %rdx
	movq	16(%rdi), %rbx
	movzbl	2(%rdx), %esi
	movq	$86, %rdi
	movq	%rsi, %rcx
	callq	simplify_gen_unary
	movzbl	2(%rbx), %ecx
	movq	%rax, %r14
	testq	%rcx, %rcx
	movq	%r12, %rsi
	je	.LBB39_163
# BB#162:                               # %if.then1030
	movq	%rcx, %rsi
.LBB39_163:                             # %if.then1030
	movq	$86, %rdi
	movq	%rbx, %rdx
	movq	%rsi, %rcx
	callq	simplify_gen_unary
	movzbl	(%rax), %ecx
	cmpq	$86, %rcx
	jne	.LBB39_164
# BB#165:                               # %land.lhs.true1059
	movzbl	(%r14), %ecx
	cmpq	$86, %rcx
	movq	%r14, %rdx
	je	.LBB39_167
# BB#166:                               # %land.lhs.true1059
	movq	%rax, %rdx
.LBB39_167:                             # %land.lhs.true1059
	je	.LBB39_169
# BB#168:                               # %land.lhs.true1059
	movq	%r14, %rax
	jmp	.LBB39_169
.LBB39_160:
	movq	%r15, %r9
                                        # kill: R15<def> R9<kill>
	jmp	.LBB39_67
.LBB39_164:
	movq	%r14, %rdx
.LBB39_169:                             # %if.end1066
	movq	8(%r15), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$84, %rcx
	jne	.LBB39_170
# BB#171:                               # %if.end1066
	movabsq	$1, %rdi
	jmp	.LBB39_172
.LBB39_170:
	movabsq	$0, %rdi
.LBB39_172:                             # %if.end1066
	xorq	$1, %rdi
	addq	$83, %rdi
	movq	%r12, %rsi
.LBB39_173:                             # %return
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	jmp	.LBB39_66
.LBB39_145:                             # %if.then844
	movq	8(%rdi), %rdx
	movq	$77, %rdi
.LBB39_137:                             # %return
	movq	%r12, %rsi
	callq	gen_rtx_fmt_e
	jmp	.LBB39_66
.LBB39_234:
	movq	%r9, %r15
	jmp	.LBB39_238
.LBB39_900:                             # %if.else2876
                                        #   in Loop: Header=BB39_896 Depth=1
	movq	16(%r15), %rsi
	movl	(%rsi), %eax
.LBB39_896:                             # %for.cond.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_897 Depth 2
	movq	$32, %rcx
	shlq	%cl, %rdi
	movq	$32, %rcx
	movq	%rdi, %rbx
	sarq	%cl, %rbx
.LBB39_897:                             # %for.cond
                                        #   Parent Loop BB39_896 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %r15
	movq	%rdx, %rcx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	je	.LBB39_67
# BB#898:                               # %if.end2854
                                        #   in Loop: Header=BB39_897 Depth=2
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$144, %rax
	jne	.LBB39_380
# BB#899:                               # %if.then2859
                                        #   in Loop: Header=BB39_897 Depth=2
	movq	8(%r15), %rsi
	movl	(%rsi), %eax
	movq	$16, %rcx
	movq	%rax, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	movzbl	mode_size(%rdi), %ecx
	movq	%rbx, %rdi
	subq	%rcx, %rdi
	jg	.LBB39_897
	jmp	.LBB39_900
.LBB39_797:
	movq	%r12, %r15
	jmp	.LBB39_67
.LBB39_197:                             # %land.lhs.true1174.if.end1192_crit_edge
	movl	(%rdi), %eax
	jmp	.LBB39_198
.LBB39_841:                             # %if.then656.i
	movq	8(%r15), %rdx
	jmp	.LBB39_842
.LBB39_188:                             # %lor.lhs.false1136
	andq	%r13, %rbx
	cmpq	$8, %rbx
	jne	.LBB39_192
# BB#189:                               # %lor.lhs.false1136
	movl	flag_unsafe_math_optimizations(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB39_192
# BB#190:
	movq	%r9, %r12
	jmp	.LBB39_198
.LBB39_192:                             # %if.then1143
	movq	8(%rdi), %rcx
	movq	16(%rdi), %rdx
	movq	$76, %rdi
	callq	gen_binary
	jmp	.LBB39_66
.LBB39_779:
	movq	%rbx, %r15
	jmp	.LBB39_67
.LBB39_153:                             # %if.then922
	movq	$86, %rdi
	movq	%r12, %rsi
	movq	%r12, %rcx
	callq	simplify_gen_unary
	movq	8(%r15), %rcx
	movq	16(%rcx), %rcx
	movq	$88, %rdi
	movq	%r12, %rsi
.LBB39_711:                             # %return
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	jmp	.LBB39_66
.LBB39_846:                             # %if.then676.i
	movq	16(%r12), %rdx
.LBB39_842:                             # %return
	movq	$86, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	movq	%rbx, %rcx
	callq	simplify_gen_unary
	movq	$83, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	gen_binary
	jmp	.LBB39_66
.LBB39_237:                             # %land.lhs.true1471.if.end1484_crit_edge
	movl	(%rdi), %esi
.LBB39_238:                             # %if.end1484
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	callq	num_sign_bit_copies
	andq	%r13, %rax
	leaq	1(%r14), %rcx
	andq	%r13, %rcx
	cmpq	%rcx, %rax
	jb	.LBB39_242
# BB#239:                               # %land.lhs.true1500
	movq	(%r12), %rsi
	movzbl	(%rsi), %eax
	cmpq	$90, %rax
	jne	.LBB39_241
# BB#240:                               # %land.lhs.true1508
	movq	8(%rsi), %rax
	movzbl	(%rax), %eax
	cmpq	$78, %rax
	jne	.LBB39_241
.LBB39_242:                             # %if.end1524
	cmpq	$64, %r14
	ja	.LBB39_243
# BB#244:                               # %land.lhs.true1530
	movq	(%r12), %rsi
	movzbl	(%rsi), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	movq	%r15, %r9
	jne	.LBB39_248
# BB#245:                               # %land.lhs.true1541
	movq	112(%rsp), %rdi         # 8-byte Reload
	movzbl	mode_mask_array(,%rdi,8), %eax
	testq	$1, %rax
	je	.LBB39_247
# BB#246:                               # %if.then1546
	callq	gen_lowpart_for_combine
	jmp	.LBB39_66
.LBB39_241:                             # %if.then1519
	movq	112(%rsp), %rdi         # 8-byte Reload
	callq	gen_lowpart_for_combine
	jmp	.LBB39_66
.LBB39_243:
	movq	%r15, %r9
                                        # kill: R15<def> R9<kill>
	jmp	.LBB39_67
.LBB39_194:
	movq	%r9, %r12
.LBB39_198:                             # %if.end1192
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$87, %rax
	jne	.LBB39_203
# BB#199:                               # %if.then1200
	movq	8(%rdi), %rdx
	movq	$77, %rdi
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rsi
	movq	%rbx, %rcx
	callq	simplify_unary_operation
	movq	8(%r12), %rdi
	testq	%rax, %rax
	je	.LBB39_203
# BB#200:                               # %if.then1209
	movq	16(%rdi), %rcx
	movq	$87, %rdi
.LBB39_201:                             # %return
	movq	%rbx, %rsi
.LBB39_202:                             # %return
	movq	%rax, %rdx
	callq	gen_binary
	jmp	.LBB39_66
.LBB39_203:                             # %if.end1218
	callq	expand_compound_operation
	movq	%rax, %r14
	movzbl	(%r14), %eax
	cmpq	$61, %rax
	je	.LBB39_204
# BB#205:                               # %if.end1218
	cmpq	$63, %rax
	je	.LBB39_214
# BB#206:                               # %if.end1218
	cmpq	$89, %rax
	jne	.LBB39_216
# BB#207:                               # %land.lhs.true1227
	movq	16(%r14), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB39_216
# BB#208:                               # %land.lhs.true1235
	movq	112(%rsp), %rdx         # 8-byte Reload
	movzbl	mode_bitsize(%rdx,%rdx), %esi
	movq	8(%rcx), %r8
	decq	%rsi
	cmpq	%rsi, %r8
	jne	.LBB39_211
# BB#209:                               # %if.then1248
	movq	8(%r14), %rcx
	movq	$90, %rsi
	movq	%r14, %rdi
	callq	simplify_shift_const
	jmp	.LBB39_66
.LBB39_204:
	movq	%r12, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_652:
	movq	%r12, %rbx
.LBB39_658:                             # %if.end305.i
	movzbl	(%r14), %eax
	cmpq	$59, %rax
	jne	.LBB39_660
# BB#659:
	movq	%r13, %r12
	jmp	.LBB39_689
.LBB39_660:                             # %land.lhs.true310.i
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	%r13, %r12
	cmpq	$72, %rcx
	jne	.LBB39_689
# BB#661:                               # %land.lhs.true315.i
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB39_689
# BB#662:                               # %land.lhs.true323.i
	movq	8(%r15), %rcx
	movl	(%rcx), %edx
	andq	$65534, %rdx            # imm = 0xFFFE
	cmpq	$102, %rdx
	jne	.LBB39_689
# BB#663:                               # %land.lhs.true339.i
	movq	16(%rcx), %rdx
	movq	const_int_rtx+512(%rip), %rsi
	cmpq	%rsi, %rdx
	jne	.LBB39_689
# BB#664:                               # %land.lhs.true348.i
	movq	8(%rcx), %rcx
	movzbl	2(%rcx), %ecx
	cmpq	%rcx, %rax
	jne	.LBB39_689
# BB#665:                               # %land.lhs.true363.i
	movq	%rax, %rdi
	callq	can_conditionally_move_p
	testq	%r12, %rax
	jne	.LBB39_689
# BB#666:                               # %land.lhs.true369.i
	movq	8(%r15), %rax
	movq	8(%rax), %rax
	movzbl	2(%rax), %ecx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	num_sign_bit_copies
	movq	8(%r15), %rcx
	movq	8(%rcx), %rcx
	movzbl	2(%rcx), %ecx
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	andq	%r12, %rax
	cmpq	%rcx, %rax
	jne	.LBB39_689
# BB#667:                               # %land.lhs.true400.i
	movq	%r15, %rdi
	callq	side_effects_p
	testq	%r12, %rax
	jne	.LBB39_689
# BB#668:                               # %if.then403.i
	movq	8(%r15), %rax
	movzbl	(%rax), %eax
	leaq	16(%r15), %rcx
	cmpq	$102, %rax
	leaq	24(%r15), %rax
	movq	%rcx, %rdx
	je	.LBB39_670
# BB#669:                               # %if.then403.i
	movq	%rax, %rdx
.LBB39_670:                             # %if.then403.i
	movq	(%rdx), %r13
	je	.LBB39_672
# BB#671:                               # %if.then403.i
	movq	%rcx, %rax
.LBB39_672:                             # %if.then403.i
	movl	(%r13), %ecx
	movq	(%rax), %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	const_int_rtx+512(%rip), %rax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	%rcx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$84, %rax
	jne	.LBB39_675
# BB#673:                               # %land.lhs.true442.i
	movq	8(%r13), %rax
	movq	%rax, %rdi
	movq	104(%rsp), %rsi         # 8-byte Reload
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB39_674
# BB#678:                               # %if.then448.i
	movq	16(%r13), %rax
	jmp	.LBB39_679
.LBB39_211:                             # %if.end1260
	cmpq	$61, %rax
	jne	.LBB39_213
# BB#212:
	movq	%r12, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_416:                             # %land.lhs.true69.i.if.else.i3665_crit_edge
	movq	const_int_rtx+512(%rip), %rax
	movq	32(%rsp), %rcx          # 8-byte Reload
.LBB39_417:                             # %if.else.i3665
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r15, %rcx
	andq	%r13, %rcx
	cmpq	$103, %rcx
	jne	.LBB39_418
# BB#419:                               # %if.else.i3665
	cmpq	%rax, 40(%rsp)          # 8-byte Folded Reload
	jne	.LBB39_418
# BB#420:                               # %land.lhs.true84.i
	movq	%r12, %rbx
	movzbl	2(%rbx), %esi
	movq	%rbx, %rdi
	callq	num_sign_bit_copies
	movzbl	2(%rbx), %ecx
	movq	%rbx, %r12
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	movq	const_int_rtx+504(%rip), %rdx
	movq	%rdx, 104(%rsp)         # 8-byte Spill
	andq	%r13, %rax
	movq	%r13, %r14
	cmpq	%rcx, %rax
	movq	$103, %r13
	je	.LBB39_422
# BB#421:                               # %land.lhs.true84.i
	movq	16(%rsp), %r13          # 8-byte Reload
.LBB39_422:                             # %land.lhs.true84.i
	je	.LBB39_424
	jmp	.LBB39_423
.LBB39_418:
	movq	%r13, %r14
	movq	16(%rsp), %r13          # 8-byte Reload
.LBB39_423:                             # %land.lhs.true84.i
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, 104(%rsp)         # 8-byte Spill
.LBB39_424:                             # %if.end99.i3666
	movq	%r12, %rdi
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	callq	reg_mentioned_p
	testq	%r14, %rax
	je	.LBB39_425
# BB#426:                               # %if.then102.i3667
	movq	%rbx, %rdi
	callq	copy_rtx
	movq	%rax, %rdi
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	40(%rsp), %rcx          # 8-byte Reload
	callq	known_cond
	movq	global_rtl(%rip), %rsi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%rax, %rdi
	movq	%rsi, %rdx
	callq	subst
	movq	%rax, %r15
	jmp	.LBB39_427
.LBB39_425:
	movq	%rbx, %r15
.LBB39_427:                             # %if.end106.i
	movq	%r12, %rdi
	movq	72(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	callq	reg_mentioned_p
	testq	%r14, %rax
	je	.LBB39_429
# BB#428:                               # %if.then109.i
	movq	%rbx, %rdi
	callq	copy_rtx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	104(%rsp), %rcx         # 8-byte Reload
	callq	known_cond
	movq	global_rtl(%rip), %rsi
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%rax, %rdi
	movq	%rsi, %rdx
	callq	subst
	movq	%rax, %rbx
.LBB39_429:                             # %if.end113.i
	movq	24(%rsp), %rax          # 8-byte Reload
	andq	%r14, %rax
	cmpq	$103, %rax
	movq	%rbx, %rsi
	je	.LBB39_431
# BB#430:                               # %if.end113.i
	movq	%r15, %rsi
.LBB39_431:                             # %if.end113.i
	movq	%r14, %r13
	je	.LBB39_433
# BB#432:                               # %if.end113.i
	movq	%rbx, %r15
.LBB39_433:                             # %if.end113.i
	movq	56(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdi
	callq	do_SUBST
	movq	96(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %r15
	callq	do_SUBST
	movq	(%r15), %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	(%rbx), %r14
	movq	112(%rsp), %rbx         # 8-byte Reload
	movzbl	(%rbx), %eax
	movq	%rax, 72(%rsp)          # 8-byte Spill
.LBB39_434:                             # %land.lhs.true137.i
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	reversed_comparison_code
	testq	%r13, %rax
	jne	.LBB39_440
# BB#435:                               # %lor.lhs.false.i1409.i
	movq	8(%rbx), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB39_436
# BB#437:                               # %if.end.i1412.i
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB39_436
# BB#438:                               # %lor.lhs.false7.i1416.i
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB39_398
# BB#439:                               # %combine_reversed_comparison_code.exit1426.i
	movq	8(%rax), %rdx
	movq	16(%rax), %rax
	movq	112(%rsp), %rbx         # 8-byte Reload
	movzbl	(%rbx), %esi
	xorq	%rcx, %rcx
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	movq	%rax, %rdx
	callq	reversed_comparison_code_parts
	testq	%r13, %rax
	je	.LBB39_398
.LBB39_440:                             # %land.lhs.true141.i
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	global_rtl(%rip), %rdx
	movq	104(%rsp), %rbx         # 8-byte Reload
	cmpq	%rdx, %rbx
	je	.LBB39_460
# BB#441:                               # %lor.lhs.false.i
	movzbl	(%rbx), %eax
	cmpq	$133, %rax
	jg	.LBB39_444
# BB#442:                               # %lor.lhs.false.i
	leaq	-54(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$14, %rcx
	ja	.LBB39_451
# BB#443:                               # %lor.lhs.false.i
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$24599, %rsi            # imm = 0x6017
	jne	.LBB39_446
	jmp	.LBB39_451
.LBB39_436:
	movq	%rbx, 112(%rsp)         # 8-byte Spill
.LBB39_398:
	movq	%r14, %r15
	movq	104(%rsp), %rbx         # 8-byte Reload
.LBB39_472:                             # %if.end274.i
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_475
# BB#473:                               # %land.lhs.true277.i
	movq	112(%rsp), %rdi         # 8-byte Reload
	callq	side_effects_p
	testq	%r13, %rax
	je	.LBB39_474
.LBB39_475:                             # %if.end281.i
	movq	72(%rsp), %rsi          # 8-byte Reload
	cmpq	$102, %rsi
	je	.LBB39_497
# BB#476:                               # %if.end281.i
	xorq	%r12, %r12
	cmpq	$103, %rsi
	jne	.LBB39_479
# BB#477:                               # %land.lhs.true284.i
	movq	%rsi, %r14
	movq	112(%rsp), %rdi         # 8-byte Reload
	callq	side_effects_p
	testq	%r13, %rax
	jne	.LBB39_478
# BB#490:                               # %land.lhs.true287.i
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	mode_class(,%rax,4), %eax
	movq	%rax, %rcx
	orq	$4, %rcx
	andq	%r13, %rcx
	cmpq	$6, %rcx
	jne	.LBB39_491
# BB#493:                               # %lor.lhs.false302.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%rax, %rax
	jne	.LBB39_494
	jmp	.LBB39_496
.LBB39_474:
	movq	%rbx, %r15
	jmp	.LBB39_67
.LBB39_444:                             # %lor.lhs.false.i
	cmpq	$134, %rax
	je	.LBB39_446
# BB#445:                               # %lor.lhs.false.i
	cmpq	$140, %rax
	jne	.LBB39_451
.LBB39_446:                             # %land.lhs.true183.i
	movzbl	(%r14), %ecx
	cmpq	$54, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %rdi
	movq	%rcx, %rsi
	je	.LBB39_448
# BB#447:                               # %land.lhs.true183.i
	movq	%rdi, %rsi
.LBB39_448:                             # %land.lhs.true183.i
	cmpq	%rdx, %r14
	je	.LBB39_450
# BB#449:                               # %land.lhs.true183.i
	movq	%rdi, %rcx
.LBB39_450:                             # %land.lhs.true183.i
	testq	%rsi, %rcx
	jne	.LBB39_460
.LBB39_451:                             # %lor.lhs.false191.i
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rbx
	je	.LBB39_460
# BB#452:                               # %lor.lhs.false194.i
	movzbl	rtx_class(%rax), %ecx
	cmpq	$111, %rcx
	jne	.LBB39_454
# BB#453:                               # %land.lhs.true202.i
	movzbl	(%r14), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$111, %rcx
	jne	.LBB39_460
.LBB39_454:                             # %lor.lhs.false210.i
	cmpq	$63, %rax
	jne	.LBB39_457
# BB#455:                               # %land.lhs.true215.i
	movq	8(%rbx), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	jne	.LBB39_457
# BB#456:                               # %land.lhs.true226.i
	movzbl	(%r14), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$111, %rax
	jne	.LBB39_460
.LBB39_457:                             # %lor.lhs.false234.i
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	reg_mentioned_p
	testq	%r13, %rax
	jne	.LBB39_460
# BB#458:                               # %lor.lhs.false237.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_459
.LBB39_460:                             # %if.then243.i
	movq	%rbx, 104(%rsp)         # 8-byte Spill
	movq	%r14, 32(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	movq	112(%rsp), %r15         # 8-byte Reload
	movq	%r15, %rdi
	callq	reversed_comparison_code
	movzbl	2(%r15), %r12d
	movq	8(%r15), %rbx
	movq	16(%r15), %r14
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	reversed_comparison_code
	testq	%r13, %rax
	jne	.LBB39_467
# BB#461:                               # %lor.lhs.false.i.i1437.i
	movq	8(%r15), %rax
	movzbl	2(%rax), %ecx
	movl	mode_class(,%rcx,4), %ecx
	cmpq	$4, %rcx
	jne	.LBB39_462
# BB#463:                               # %if.end.i.i1440.i
	movq	%rax, %rdi
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB39_464
# BB#465:                               # %lor.lhs.false7.i.i1444.i
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	movq	%r15, %rcx
	movabsq	$0, %r15
	jne	.LBB39_468
# BB#466:                               # %combine_reversed_comparison_code.exit.i1453.i
	movq	8(%rax), %rdx
	movq	16(%rax), %rax
	movzbl	(%rcx), %esi
	xorq	%rcx, %rcx
	xorq	%r15, %r15
	movq	%rsi, %rdi
	movq	%rdx, %rsi
	movq	%rax, %rdx
	callq	reversed_comparison_code_parts
	testq	%r13, %rax
	je	.LBB39_468
.LBB39_467:                             # %if.else.i1456.i
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%r14, %rcx
	callq	gen_binary
	movq	%rax, %r15
	jmp	.LBB39_468
.LBB39_610:                             # %if.else.i3547
	movq	%r15, 192(%rsp)
	movabsq	$const_int_rtx+512, %rax
.LBB39_611:                             # %if.end61.i
	movq	(%rax), %rax
	movq	%rax, 184(%rsp)
	leaq	192(%rsp), %rsi
	leaq	184(%rsp), %rdx
	movq	%rdi, 96(%rsp)          # 8-byte Spill
	callq	simplify_comparison
	movq	192(%rsp), %rsi
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	184(%rsp), %rdx
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	ix86_cc_mode
	movzbl	2(%r14), %ecx
	movq	%rax, %rdx
	andq	%r13, %rdx
	movq	$0, 48(%rsp)            # 8-byte Folded Spill
	cmpq	%rcx, %rdx
	jne	.LBB39_613
# BB#612:
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jmp	.LBB39_619
.LBB39_247:                             # %if.end1551
	cmpq	$64, %r14
	ja	.LBB39_380
.LBB39_248:                             # %land.lhs.true1557
	movq	112(%rsp), %rax         # 8-byte Reload
	movzbl	mode_mask_array(,%rax,8), %eax
	testq	$1, %rax
	je	.LBB39_380
# BB#249:                               # %land.lhs.true1564
	movq	%r9, %r14
	movq	(%r12), %rdi
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB39_250
# BB#251:                               # %land.lhs.true1570
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	movq	%r14, %r9
	jne	.LBB39_380
# BB#252:                               # %if.then1578
	movq	(%r12), %rax
	jmp	.LBB39_253
.LBB39_213:                             # %if.end1260
	cmpq	$63, %rax
	jne	.LBB39_216
.LBB39_214:                             # %land.lhs.true1270
	movq	8(%r14), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	jne	.LBB39_216
# BB#215:
	movq	%r12, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_216:                             # %land.lhs.true1278
	movq	%r14, %rdi
	movq	112(%rsp), %r15         # 8-byte Reload
	movq	%r15, %rsi
	callq	nonzero_bits
	movq	%rax, %rdi
	callq	exact_log2_wide
	movq	%rax, %rbx
	movq	$32, %rcx
                                        # kill: RAX<def> RBX<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB39_217
# BB#218:                               # %if.then1283
	movzbl	mode_bitsize(%r15,%r15), %eax
	notq	%rbx
	addq	%rax, %rbx
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	movq	%rbx, %r8
	callq	simplify_shift_const
	xorq	%rdi, %rdi
	movq	$89, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	movq	%rbx, %r8
	callq	simplify_shift_const
	movq	%rax, %r15
	movzbl	(%r15), %eax
	cmpq	$89, %rax
	jne	.LBB39_67
# BB#219:                               # %lor.lhs.false1300
	movq	8(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$87, %rcx
	movq	%r12, %r9
	jne	.LBB39_67
# BB#220:                               # %lor.lhs.false1308
	movq	8(%rax), %rax
	cmpq	%r14, %rax
	jne	.LBB39_67
	jmp	.LBB39_380
.LBB39_217:
	movq	%r12, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_613:                             # %if.then69.i
	movl	8(%r14), %esi
	movq	%rax, %rdi
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	gen_rtx_REG
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	8(%r14), %eax
	cmpq	$53, %rax
	movq	%rax, %rcx
	jb	.LBB39_618
# BB#614:                               # %lor.lhs.false75.i
	movq	reg_n_info(%rip), %rax
	movq	32(%rax,%rcx,8), %rax
	movl	12(%rax), %eax
	cmpq	$1, %rax
	jne	.LBB39_619
# BB#615:                               # %land.lhs.true80.i
	movzbl	3(%r14), %eax
	testq	$8, %rax
	jne	.LBB39_619
# BB#616:                               # %if.then85.i
	cmpq	$53, %rcx
	jb	.LBB39_618
# BB#617:                               # %if.then88.i
	movq	cfun(%rip), %rax
	movq	24(%rax), %rax
	movq	80(%rax), %rax
	leaq	(%rax,%rcx,8), %rax
	movq	%rax, %rdi
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	do_SUBST
.LBB39_618:                             # %if.end91.i
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rsi
	callq	do_SUBST
	movq	(%rbx), %rax
	addq	$8, %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	do_SUBST
	movq	$1, 48(%rsp)            # 8-byte Folded Spill
.LBB39_619:                             # %if.end99.i
	movq	80(%rsp), %rcx          # 8-byte Reload
	andq	%r13, %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rax          # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB39_620
# BB#637:                               # %if.end160.i
	cmpq	$0, 48(%rsp)            # 8-byte Folded Reload
	jne	.LBB39_638
	jmp	.LBB39_639
.LBB39_250:
	movq	%r14, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_287:                             # %lor.lhs.false1919
	cmpq	$121, %rsi
	movq	%r10, %r13
	movq	%r11, %r12
	jne	.LBB39_291
.LBB39_288:                             # %land.lhs.true1930
	movq	8(%rdx), %rcx
	movzbl	2(%rcx), %edx
	movzbl	mode_bitsize(%rdx,%rdx), %edx
	leaq	1(%rax), %rsi
	andq	%r13, %rsi
	cmpq	%rsi, %rdx
	jne	.LBB39_291
.LBB39_289:                             # %if.then1949
	incq	%rax
	subq	%rax, %rbx
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	%r12, %rdx
	jmp	.LBB39_290
.LBB39_291:                             # %if.end1971
	movq	8(%r9), %rbx
	movzbl	(%rbx), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	jne	.LBB39_300
# BB#292:                               # %land.lhs.true1982
	movq	16(%r9), %rax
	movq	const_int_rtx+504(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB39_300
# BB#293:                               # %land.lhs.true1988
	movq	8(%rbx), %r15
	movq	16(%rbx), %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	movq	%r12, %r14
	movq	%r9, %r12
	callq	reversed_comparison_code
	movq	%r12, %r9
	movq	%r14, %r12
	testq	%r13, %rax
	jne	.LBB39_298
# BB#294:                               # %lor.lhs.false.i.i
	movq	8(%rbx), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB39_300
# BB#295:                               # %if.end.i.i
	movq	%r12, %r14
	movq	%r9, %r12
	callq	get_last_value
	movq	%r12, %r9
	movq	%r14, %r12
	testq	%rax, %rax
	je	.LBB39_300
# BB#296:                               # %lor.lhs.false7.i.i
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB39_300
# BB#297:                               # %combine_reversed_comparison_code.exit.i
	movq	8(%rax), %rsi
	movq	16(%rax), %rdx
	movzbl	(%rbx), %edi
	xorq	%rcx, %rcx
	movq	%r9, %rbx
	callq	reversed_comparison_code_parts
	movq	%rbx, %r9
	testq	%r13, %rax
	je	.LBB39_300
.LBB39_298:                             # %reversed_comparison.exit
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	%r9, %rbx
	callq	gen_binary
	movq	%rbx, %r9
	testq	%rax, %rax
	je	.LBB39_300
# BB#299:                               # %if.then2006
	movq	$77, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	movq	%r12, %rcx
	callq	simplify_gen_unary
	jmp	.LBB39_66
.LBB39_300:                             # %if.end2008
	movq	16(%r9), %rax
	movq	const_int_rtx+504(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB39_306
# BB#301:                               # %land.lhs.true2014
	movq	8(%r9), %rdi
	movzbl	(%rdi), %eax
	cmpq	$61, %rax
	je	.LBB39_306
# BB#302:                               # %land.lhs.true2014
	cmpq	$63, %rax
	jne	.LBB39_304
# BB#303:                               # %land.lhs.true2030
	movq	8(%rdi), %rax
	movzbl	(%rax), %eax
	cmpq	$61, %rax
	je	.LBB39_306
.LBB39_304:                             # %land.lhs.true2041
	movq	%r12, %rsi
	movq	%r9, %rbx
	callq	nonzero_bits
	movq	%rbx, %r9
	cmpq	$1, %rax
	jne	.LBB39_306
# BB#305:                               # %if.then2048
	movq	8(%r9), %rdx
	movq	const_int_rtx+520(%rip), %rcx
	movq	$85, %rdi
	movq	%r12, %rsi
	callq	gen_rtx_fmt_ee
	movzbl	mode_bitsize(%r12,%r12), %ebx
	decq	%rbx
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
.LBB39_290:                             # %return
	movq	%rbx, %r8
	callq	simplify_shift_const
	xorq	%rdi, %rdi
	movq	$89, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	movq	%rbx, %r8
	callq	simplify_shift_const
	jmp	.LBB39_66
.LBB39_306:                             # %if.end2063
	movzbl	mode_bitsize(%r12,%r12), %eax
	cmpq	$64, %rax
	ja	.LBB39_380
# BB#307:                               # %land.lhs.true2069
	movq	8(%r9), %rdi
	movq	%r12, %rsi
	movq	%r9, %rbx
	callq	nonzero_bits
	movq	16(%rbx), %rdi
	movq	%rax, %r14
	movq	%r12, %rsi
	callq	nonzero_bits
	testq	%r14, %rax
	je	.LBB39_309
# BB#308:
	movq	%rbx, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_309:                             # %if.then2081
	movq	8(%rbx), %rdx
	movq	16(%rbx), %rcx
	movq	%rbx, %r14
	movq	$84, %rdi
	movq	%r12, %rsi
	callq	gen_binary
	movq	%rax, %rbx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	callq	combine_simplify_rtx
	movq	%rax, %r15
	movzbl	(%r15), %eax
	cmpq	$49, %rax
	je	.LBB39_310
# BB#311:                               # %if.then2081
	cmpq	%rbx, %r15
	movq	%r14, %r9
	jne	.LBB39_67
	jmp	.LBB39_380
.LBB39_310:
	movq	%r14, %r9
	movq	%r9, %r15
	jmp	.LBB39_67
.LBB39_891:                             # %if.then2809
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.combine_simplify_rtx, %rcx
	movq	$4599, %rsi             # imm = 0x11F7
	jmp	.LBB39_874
.LBB39_873:                             # %sw.default.i
	movabsq	$.L.str2, %rax
	movabsq	$.L__FUNCTION__.simplify_logical, %rcx
	movq	$5542, %rsi             # imm = 0x15A6
.LBB39_874:                             # %sw.default.i
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB39_822:
	movq	%rbx, %r8
	movq	%r8, %r15
	jmp	.LBB39_67
.LBB39_824:
	movq	%rbx, %r8
	movq	%r8, %r15
	jmp	.LBB39_67
.LBB39_866:
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	%r8, %r15
	jmp	.LBB39_67
.LBB39_868:
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	%r8, %r15
	jmp	.LBB39_67
.LBB39_870:
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	%r8, %r15
	jmp	.LBB39_67
.LBB39_872:
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	%r8, %r15
	jmp	.LBB39_67
.LBB39_674:                             # %land.lhs.true442.if.else452_crit_edge.i
	movl	(%r13), %ecx
.LBB39_675:                             # %if.else452.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$84, %rcx
	jne	.LBB39_680
# BB#676:                               # %land.lhs.true457.i
	movq	16(%r13), %rax
	movq	%rax, %rdi
	movq	104(%rsp), %rsi         # 8-byte Reload
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB39_680
# BB#677:                               # %if.then463.i
	movq	8(%r13), %rax
.LBB39_679:                             # %if.end500.i
	movq	const_int_rtx+512(%rip), %rcx
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	jmp	.LBB39_688
.LBB39_491:                             # %lor.lhs.false297.i
	andq	%r13, %rax
	cmpq	$8, %rax
	jne	.LBB39_494
# BB#492:                               # %lor.lhs.false297.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%r13, %rax
	je	.LBB39_496
.LBB39_494:                             # %land.lhs.true304.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_496
# BB#495:                               # %land.lhs.true310.i3674
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	jne	.LBB39_67
.LBB39_496:                             # %if.else317.i
	movq	%r14, %rsi
	cmpq	$102, %rsi
	jne	.LBB39_479
.LBB39_497:                             # %land.lhs.true320.i
	movq	%rsi, %r14
	movq	112(%rsp), %rdi         # 8-byte Reload
	callq	side_effects_p
	testq	%r13, %rax
	movq	$1, %r12
	jne	.LBB39_478
# BB#498:                               # %land.lhs.true323.i3675
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	mode_class(,%rax,4), %eax
	movq	%rax, %rcx
	orq	$4, %rcx
	andq	%r13, %rcx
	cmpq	$6, %rcx
	jne	.LBB39_499
# BB#501:                               # %lor.lhs.false338.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%rax, %rax
	jne	.LBB39_502
	jmp	.LBB39_478
.LBB39_499:                             # %lor.lhs.false333.i
	andq	%r13, %rax
	cmpq	$8, %rax
	jne	.LBB39_502
# BB#500:                               # %lor.lhs.false333.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%r13, %rax
	je	.LBB39_478
.LBB39_502:                             # %land.lhs.true340.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_478
# BB#503:                               # %land.lhs.true346.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	%r14, %rsi
	je	.LBB39_479
# BB#504:
	movq	%rbx, %r15
	jmp	.LBB39_67
.LBB39_478:
	movq	%r14, %rsi
.LBB39_479:                             # %if.end354.i
	movq	%rbx, %r14
	movq	64(%rsp), %rdx          # 8-byte Reload
	movl	mode_class(,%rdx,4), %ebx
	cmpq	$6, %rbx
	je	.LBB39_535
# BB#480:                               # %if.end354.i
	cmpq	$2, %rbx
	je	.LBB39_535
# BB#481:                               # %if.end354.i
	cmpq	$1, %rbx
	jne	.LBB39_510
# BB#482:                               # %land.lhs.true359.i
	movzbl	(%r15), %eax
	cmpq	$77, %rax
	jne	.LBB39_510
# BB#483:                               # %land.lhs.true364.i
	movq	8(%r15), %rsi
	movq	%r14, %rdi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_509
# BB#484:                               # %land.lhs.true364.i
	cmpq	$0, 48(%rsp)            # 8-byte Folded Reload
	je	.LBB39_509
# BB#485:                               # %land.lhs.true372.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_509
# BB#486:                               # %land.lhs.true378.i
	movq	%r14, %rdi
	callq	side_effects_p
	testq	%r13, %rax
	jne	.LBB39_509
# BB#487:                               # %if.then381.i
	movq	72(%rsp), %rax          # 8-byte Reload
	leaq	-106(%rax), %rax
	andq	%r13, %rax
	cmpq	$2, %rax
	jae	.LBB39_488
# BB#505:                               # %sw.bb383.i
	movq	$129, %rdi
	movq	64(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movq	%rbx, %rcx
	callq	simplify_gen_unary
	jmp	.LBB39_506
.LBB39_459:
	movq	%r14, %r15
	jmp	.LBB39_472
.LBB39_462:
	xorq	%r15, %r15
	jmp	.LBB39_468
.LBB39_464:
	xorq	%r15, %r15
.LBB39_468:                             # %reversed_comparison.exit1458.i
	movq	80(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	do_SUBST
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	callq	do_SUBST
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	callq	do_SUBST
	movq	(%r14), %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movzbl	(%rax), %ecx
	movzbl	rtx_class(%rcx), %eax
	cmpq	$60, %rax
	jne	.LBB39_469
# BB#470:                               # %reversed_comparison.exit1458.i
	movabsq	$1, %rax
	jmp	.LBB39_471
.LBB39_469:
	movabsq	$0, %rax
.LBB39_471:                             # %reversed_comparison.exit1458.i
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	104(%rsp), %r15         # 8-byte Reload
	jmp	.LBB39_472
.LBB39_620:                             # %if.then102.i
	movq	(%rbx), %rax
	movq	const_int_rtx+512(%rip), %rcx
	movzbl	2(%rax), %eax
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	movq	%r14, %rdx
	callq	gen_rtx_fmt_ee
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	cmpq	$102, 96(%rsp)          # 8-byte Folded Reload
	jne	.LBB39_622
# BB#621:                               # %if.then102.i
	cmpq	$103, 40(%rsp)          # 8-byte Folded Reload
	jne	.LBB39_622
# BB#630:                               # %land.lhs.true118.i
	cmpq	$0, 48(%rsp)            # 8-byte Folded Reload
	jne	.LBB39_638
# BB#631:                               # %land.lhs.true118.i
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, 72(%rsp)          # 8-byte Folded Reload
	je	.LBB39_632
	jmp	.LBB39_638
.LBB39_680:                             # %if.else467.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$84, %rcx
	jne	.LBB39_683
# BB#681:                               # %land.lhs.true472.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB39_682
# BB#906:                               # %if.then478.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rax
	jmp	.LBB39_687
.LBB39_488:                             # %if.then381.i
	movq	72(%rsp), %rax          # 8-byte Reload
	leaq	-104(%rax), %rax
	andq	%r13, %rax
	cmpq	$1, %rax
	ja	.LBB39_509
# BB#489:                               # %sw.bb.i3680
	movq	$129, %rdi
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	simplify_gen_unary
	jmp	.LBB39_66
.LBB39_622:                             # %lor.lhs.false112.i
	cmpq	$103, 96(%rsp)          # 8-byte Folded Reload
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB39_624
# BB#623:                               # %lor.lhs.false112.i
	movq	%rdx, %rcx
.LBB39_624:                             # %lor.lhs.false112.i
	cmpq	$102, 40(%rsp)          # 8-byte Folded Reload
	movq	%rax, %rsi
	jne	.LBB39_626
# BB#625:                               # %lor.lhs.false112.i
	movq	%rdx, %rsi
.LBB39_626:                             # %lor.lhs.false112.i
	cmpq	$0, 48(%rsp)            # 8-byte Folded Reload
	jne	.LBB39_628
# BB#627:                               # %lor.lhs.false112.i
	movq	%rdx, %rax
.LBB39_628:                             # %lor.lhs.false112.i
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, 72(%rsp)          # 8-byte Folded Reload
	jne	.LBB39_638
# BB#629:                               # %lor.lhs.false112.i
	andq	%rcx, %rsi
	andq	%rax, %rsi
	je	.LBB39_638
.LBB39_632:                             # %land.lhs.true123.i
	movq	64(%rsp), %rax          # 8-byte Reload
	movzbl	2(%rax), %eax
	movzbl	mode_bitsize(%rax,%rax), %ecx
	cmpq	$64, %rcx
	ja	.LBB39_638
# BB#633:                               # %land.lhs.true132.i
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	nonzero_bits
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	%rax, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB39_638
# BB#634:                               # %if.then140.i
	movq	200(%rsp), %rax
	movq	32(%rax), %rcx
	movq	%rcx, 176(%rsp)
	movq	$0, 168(%rsp)
	leaq	176(%rsp), %rcx
	leaq	168(%rsp), %rdx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	recog_for_combine
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB39_638
# BB#635:                               # %land.lhs.true147.i
	movq	176(%rsp), %rax
	movq	%rax, %rdi
	callq	check_asm_operands
	testq	%r13, %rax
	jne	.LBB39_638
# BB#636:                               # %if.then150.i
	movq	(%rbx), %rax
	movq	96(%rsp), %rcx          # 8-byte Reload
	movw	%cx, (%rax)
	movq	$0, 200(%rsp)
	movq	64(%rsp), %rax          # 8-byte Reload
	movzbl	2(%rax), %ebx
	xorq	%rdi, %rdi
	movq	80(%rsp), %rsi          # 8-byte Reload
	callq	gen_rtx_CONST_INT
	movq	$85, %rdi
	movq	%rbx, %rsi
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	%rax, 192(%rsp)
.LBB39_638:                             # %if.then162.i
	movq	200(%rsp), %rax
	movq	%rax, undobuf+16(%rip)
.LBB39_639:                             # %if.end163.i
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$74, %rcx
	jne	.LBB39_641
# BB#640:                               # %lor.lhs.false168.i
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	56(%rsp), %rcx          # 8-byte Reload
	andq	%r13, %rcx
	cmpq	%rcx, %rax
	jne	.LBB39_641
# BB#642:                               # %if.else182.i
	leaq	8(%r15), %rax
	movq	%rax, %rdi
	movq	64(%rsp), %rsi          # 8-byte Reload
	callq	do_SUBST
	leaq	16(%r15), %rax
	movq	%rax, %rdi
	movq	72(%rsp), %rsi          # 8-byte Reload
	jmp	.LBB39_644
.LBB39_682:                             # %land.lhs.true472.if.else482_crit_edge.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movl	(%rax), %eax
.LBB39_683:                             # %if.else482.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$84, %rax
	jne	.LBB39_684
# BB#685:                               # %land.lhs.true487.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB39_684
# BB#686:                               # %if.then493.i
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
.LBB39_687:                             # %if.end500.i
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	const_int_rtx+512(%rip), %rax
	movq	%r13, 104(%rsp)         # 8-byte Spill
	jmp	.LBB39_688
.LBB39_509:                             # %if.end386.i
	movq	%rbx, %rax
	orq	$4, %rax
	cmpq	$6, %rax
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rsi          # 8-byte Reload
	jne	.LBB39_510
.LBB39_535:                             # %lor.lhs.false401.i
	movq	%rsi, 72(%rsp)          # 8-byte Spill
	movl	flag_unsafe_math_optimizations(%rip), %eax
	testq	%rax, %rax
	jne	.LBB39_536
	jmp	.LBB39_515
.LBB39_510:                             # %lor.lhs.false396.i
	cmpq	$8, %rbx
	movabsq	$0, %rax
	movabsq	$1, %rdi
	movq	%rax, %rcx
	je	.LBB39_512
# BB#511:                               # %lor.lhs.false396.i
	movq	%rdi, %rcx
.LBB39_512:                             # %lor.lhs.false396.i
	movq	%rsi, 72(%rsp)          # 8-byte Spill
	movl	flag_unsafe_math_optimizations(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB39_514
# BB#513:                               # %lor.lhs.false396.i
	movq	%rdi, %rax
.LBB39_514:                             # %lor.lhs.false396.i
	orq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB39_515
.LBB39_536:                             # %lor.lhs.false401.i
	cmpq	$0, 48(%rsp)            # 8-byte Folded Reload
	je	.LBB39_515
# BB#537:                               # %land.lhs.true405.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rdi
	movq	%r14, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%r13, %rax
	je	.LBB39_515
# BB#538:                               # %land.lhs.true411.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rdi
	movq	%r15, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%r13, %rax
	je	.LBB39_515
# BB#539:                               # %land.lhs.true417.i
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	%rdx, %rbx
	callq	side_effects_p
	movq	%rbx, %rdx
	testq	%r13, %rax
	jne	.LBB39_515
# BB#540:                               # %if.then420.i
	movq	72(%rsp), %rax          # 8-byte Reload
	leaq	-104(%rax), %rax
	andq	%r13, %rax
	cmpq	$7, %rax
	jbe	.LBB39_541
.LBB39_515:                             # %if.end431.i
	cmpq	$0, 48(%rsp)            # 8-byte Folded Reload
	je	.LBB39_580
# BB#516:                               # %if.end431.i
	testq	%rdx, %rdx
	je	.LBB39_580
# BB#517:                               # %land.lhs.true436.i
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	%rdx, %rbx
	callq	side_effects_p
	movq	%rbx, %rdx
	testq	%r13, %rax
	jne	.LBB39_580
# BB#518:                               # %if.then439.i
	movq	$47, %rsi
	movq	%r14, %rdi
	callq	make_compound_operation
	movq	%rax, %rbx
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	$47, %rsi
	movq	%r15, %rdi
	callq	make_compound_operation
	movl	(%rbx), %edx
	movq	%rax, %rbx
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rcx
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	16(%rax), %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-75, %rax
	andq	%r13, %rax
	cmpq	$15, %rax
	ja	.LBB39_522
# BB#519:                               # %if.then439.i
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$54787, %rsi            # imm = 0xD603
	je	.LBB39_522
# BB#520:                               # %land.lhs.true482.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_521
# BB#548:                               # %if.then488.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	leaq	16(%rax), %r8
	jmp	.LBB39_549
.LBB39_641:                             # %if.then174.i
	movq	$74, %rdi
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	callq	gen_rtx_fmt_ee
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	(%rbx), %r15
	jmp	.LBB39_645
.LBB39_684:
	movq	%r13, %rax
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
.LBB39_688:                             # %if.end500.i
	movq	8(%r15), %rcx
	movq	8(%rcx), %rcx
	movzbl	2(%r15), %edx
	movq	$83, %rdi
	movq	%rdx, %rsi
	movq	%rcx, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	8(%r15), %rcx
	movq	8(%rcx), %rcx
	movzbl	2(%r15), %r13d
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	$86, %rdi
	movq	%r13, %rsi
	movq	%rcx, %rdx
	movq	%r13, %rcx
	callq	simplify_gen_unary
	movq	$83, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	movq	80(%rsp), %rcx          # 8-byte Reload
	callq	gen_binary
	movzbl	2(%r15), %r15d
	movq	%rax, %r13
	movq	$84, %rdi
	movq	%r15, %rsi
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	callq	gen_binary
	movq	$84, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%r13, %rcx
	callq	gen_binary
	movq	112(%rsp), %r15         # 8-byte Reload
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	(%r15), %r15
.LBB39_689:                             # %if.end542.i
	movzbl	(%r15), %eax
	cmpq	$49, %rax
	jne	.LBB39_691
# BB#690:                               # %land.lhs.true547.i
	movq	8(%r15), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB39_67
.LBB39_691:                             # %if.else554.i
	movzbl	(%r14), %eax
	cmpq	$49, %rax
	jne	.LBB39_693
# BB#692:                               # %land.lhs.true559.i
	movq	8(%r14), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rax
	movq	%r14, %r15
	je	.LBB39_67
.LBB39_693:                             # %if.else566.i
	movq	16(%rbx), %r13
	movl	(%r13), %eax
	movq	8(%rbx), %r14
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$83, %rcx
	jne	.LBB39_699
# BB#694:                               # %land.lhs.true.i.i
	movq	8(%r13), %rcx
	movzbl	(%rcx), %edx
	cmpq	$88, %rdx
	jne	.LBB39_699
# BB#695:                               # %land.lhs.true10.i.i
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB39_699
# BB#696:                               # %land.lhs.true20.i.i
	movq	8(%rcx), %rcx
	cmpq	$-2, %rcx
	jne	.LBB39_699
# BB#697:                               # %land.lhs.true30.i.i
	movq	16(%r13), %rsi
	movq	%r14, %rdi
	callq	rtx_equal_for_field_assignment_p
	testq	%r12, %rax
	je	.LBB39_698
# BB#707:                               # %if.then.i.i
	movq	8(%r13), %rax
	movq	16(%rax), %rcx
	movq	$0, 8(%rsp)
	xorq	%rdi, %rdi
	xorq	%rdx, %rdx
	movq	$1, %r8
	movq	$1, %r9
	movq	$1, (%rsp)
	movq	%r14, %rsi
	jmp	.LBB39_708
.LBB39_541:                             # %if.then420.i
	movq	%rdx, %rcx
	jmpq	*.LJTI39_1(,%rax,8)
.LBB39_542:                             # %sw.bb421.i
	movq	$93, %rdi
	jmp	.LBB39_543
.LBB39_521:                             # %land.lhs.true482.i.if.else494.i_crit_edge
	movq	80(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %edx
.LBB39_522:                             # %if.else494.i
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-75, %rax
	andq	%r13, %rax
	cmpq	$10, %rax
	ja	.LBB39_526
# BB#523:                               # %if.else494.i
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$1537, %rsi             # imm = 0x601
	je	.LBB39_526
# BB#524:                               # %land.lhs.true509.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_525
# BB#550:                               # %if.then515.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %ecx
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	leaq	8(%rax), %r8
.LBB39_549:                             # %if.end1001.i
	movq	$1, 80(%rsp)            # 8-byte Folded Spill
	movq	64(%rsp), %rax          # 8-byte Reload
	jmp	.LBB39_577
.LBB39_698:                             # %land.lhs.true30.if.else_crit_edge.i.i
	movl	(%r13), %eax
.LBB39_699:                             # %if.else.i.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	jne	.LBB39_712
# BB#700:                               # %land.lhs.true47.i.i
	movq	8(%r13), %rdi
	movzbl	(%rdi), %eax
	cmpq	$63, %rax
	jne	.LBB39_712
# BB#701:                               # %land.lhs.true54.i.i
	callq	subreg_lowpart_p
	testq	%r12, %rax
	je	.LBB39_712
# BB#702:                               # %land.lhs.true60.i.i
	movq	8(%r13), %rcx
	movq	8(%rcx), %rax
	movl	(%rax), %edx
	movzbl	2(%rcx), %ecx
	movzbl	mode_size(%rcx), %esi
	movq	$16, %rcx
	movq	%rdx, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	movzbl	mode_size(%rdi), %ecx
	cmpq	%rcx, %rsi
	jae	.LBB39_712
# BB#703:                               # %land.lhs.true60.i.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$88, %rdx
	jne	.LBB39_712
# BB#704:                               # %land.lhs.true92.i.i
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	cmpq	$-2, %rax
	jne	.LBB39_712
# BB#705:                               # %land.lhs.true107.i.i
	movq	16(%r13), %rsi
	movq	%r14, %rdi
	callq	rtx_equal_for_field_assignment_p
	testq	%r12, %rax
	je	.LBB39_712
# BB#706:                               # %if.then113.i.i
	movq	8(%r13), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	$0, 8(%rsp)
	xorq	%rdi, %rdi
	xorq	%rdx, %rdx
	movq	$1, %r8
	movq	$1, %r9
	movq	$1, (%rsp)
	movq	%r14, %rsi
	movq	%rax, %rcx
.LBB39_708:                             # %if.then.i.i
	callq	make_extraction
	testq	%rax, %rax
	movq	%rbx, %r15
	je	.LBB39_67
# BB#709:                               # %if.then42.i.i
	movq	const_int_rtx+512(%rip), %rcx
	jmp	.LBB39_710
.LBB39_712:                             # %if.else129.i.i
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$84, %rcx
	jne	.LBB39_717
# BB#713:                               # %land.lhs.true134.i.i
	movq	8(%r13), %rcx
	movzbl	(%rcx), %edx
	cmpq	$87, %rdx
	jne	.LBB39_717
# BB#714:                               # %land.lhs.true142.i.i
	movq	8(%rcx), %rcx
	movq	const_int_rtx+520(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB39_717
# BB#715:                               # %land.lhs.true151.i.i
	movq	16(%r13), %rsi
	movq	%r14, %rdi
	callq	rtx_equal_for_field_assignment_p
	testq	%r12, %rax
	je	.LBB39_716
# BB#722:                               # %if.then157.i.i
	movq	8(%r13), %rax
	movq	16(%rax), %rcx
	movq	$0, 8(%rsp)
	xorq	%rdi, %rdi
	xorq	%rdx, %rdx
	movq	$1, %r8
	movq	$1, %r9
	movq	$1, (%rsp)
	movq	%r14, %rsi
	callq	make_extraction
	testq	%rax, %rax
	movq	%rbx, %r15
	je	.LBB39_67
# BB#723:                               # %if.then167.i.i
	movq	const_int_rtx+520(%rip), %rcx
.LBB39_710:                             # %return
	movq	$47, %rdi
	xorq	%rsi, %rsi
	jmp	.LBB39_711
.LBB39_545:                             # %sw.bb423.i
	movq	$92, %rdi
	jmp	.LBB39_543
.LBB39_546:                             # %sw.bb425.i
	movq	$95, %rdi
	jmp	.LBB39_543
.LBB39_547:                             # %sw.bb427.i
	movq	$94, %rdi
.LBB39_543:                             # %return
	movq	%rcx, %rsi
	movq	%r14, %rdx
.LBB39_544:                             # %return
	movq	%r15, %rcx
	callq	gen_binary
	jmp	.LBB39_66
.LBB39_525:                             # %land.lhs.true509.i.if.else521.i_crit_edge
	movq	80(%rsp), %rax          # 8-byte Reload
	movl	(%rax), %edx
.LBB39_526:                             # %if.else521.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$120, %rdx
	jne	.LBB39_551
# BB#527:                               # %land.lhs.true526.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	addq	$-75, %rcx
	andq	%r13, %rcx
	cmpq	$15, %rcx
	ja	.LBB39_551
# BB#528:                               # %land.lhs.true526.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$54787, %rdx            # imm = 0xD603
	je	.LBB39_551
# BB#529:                               # %land.lhs.true582.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$63, %rcx
	jne	.LBB39_551
# BB#530:                               # %land.lhs.true593.i
	movq	%rax, %rdi
	callq	subreg_lowpart_p
	testq	%r13, %rax
	je	.LBB39_551
# BB#531:                               # %land.lhs.true602.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_551
# BB#532:                               # %land.lhs.true614.i
	movzbl	2(%rbx), %eax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	num_sign_bit_copies
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %r8
	movq	8(%r8), %rcx
	movzbl	2(%rcx), %ecx
	movq	64(%rsp), %rdx          # 8-byte Reload
	movzbl	mode_bitsize(%rdx,%rdx), %esi
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	movq	%r13, %rdi
	andq	%rdi, %rax
	subq	%rcx, %rsi
	andq	%rdi, %rsi
                                        # kill: R13<def> RDI<kill>
	cmpq	%rsi, %rax
	jbe	.LBB39_551
# BB#533:                               # %if.then636.i
	movl	(%r8), %eax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	addq	$16, %r8
	jmp	.LBB39_534
.LBB39_716:                             # %land.lhs.true151.if.end172_crit_edge.i.i
	movl	(%r13), %eax
.LBB39_717:                             # %if.end172.i.i
	movq	%r14, 112(%rsp)         # 8-byte Spill
	andq	$65534, %rax            # imm = 0xFFFE
	movq	%rbx, %r15
	cmpq	$84, %rax
	jne	.LBB39_67
# BB#718:                               # %if.end183.i.i
	movq	8(%r13), %rdi
	callq	expand_compound_operation
	movq	16(%r13), %rdi
	movq	%rax, %rbx
	callq	expand_compound_operation
	movzbl	(%rbx), %ecx
	movq	%rax, %r14
	cmpq	$83, %rcx
	jne	.LBB39_724
# BB#719:                               # %land.lhs.true196.i.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB39_724
# BB#720:                               # %land.lhs.true204.i.i
	movq	8(%rbx), %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	rtx_equal_for_field_assignment_p
	testq	%r12, %rax
	je	.LBB39_724
# BB#721:
	leaq	16(%rbx), %rax
	jmp	.LBB39_728
.LBB39_724:                             # %if.else217.i.i
	movzbl	(%r14), %eax
	cmpq	$83, %rax
	jne	.LBB39_67
# BB#725:                               # %land.lhs.true222.i.i
	movq	16(%r14), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB39_67
# BB#726:                               # %land.lhs.true230.i.i
	movq	8(%r14), %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	callq	rtx_equal_for_field_assignment_p
	testq	%r12, %rax
	je	.LBB39_67
# BB#727:
	addq	$16, %r14
	movq	%r14, %rax
	movq	%rbx, %r14
.LBB39_728:                             # %if.end245.i.i
	movq	(%rax), %rax
	movq	112(%rsp), %rcx         # 8-byte Reload
	movzbl	2(%rcx), %ecx
	movq	8(%rax), %rax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	mode_mask_array(,%rcx,8), %rbx
	notq	%rax
	andq	%rax, %rbx
	movq	%rbx, %rdi
	negq	%rdi
	andq	%rbx, %rdi
	callq	exact_log2_wide
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB39_67
# BB#729:                               # %if.end.i.i.i
	movq	%r12, %rax
	movq	104(%rsp), %rcx         # 8-byte Reload
	andq	%rcx, %rax
	movq	%rax, %rcx
	shrq	%cl, %rbx
	incq	%rbx
	movq	%rbx, %rdi
	callq	exact_log2_wide
	movq	%rax, %r12
	movq	$32, %rcx
                                        # kill: RAX<def> R12<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jle	.LBB39_67
# BB#730:                               # %lor.lhs.false.i.i3555
	movq	$32, %rcx
	shlq	%cl, %r12
	movq	$32, %rcx
	movq	112(%rsp), %rax         # 8-byte Reload
	movzbl	2(%rax), %eax
	sarq	%cl, %r12
	movq	$32, %rcx
	movq	104(%rsp), %rbx         # 8-byte Reload
	shlq	%cl, %rbx
	movzbl	mode_bitsize(%rax,%rax), %edx
	movq	$32, %rcx
	sarq	%cl, %rbx
	leaq	(%r12,%rbx), %rcx
	cmpq	%rdx, %rcx
	ja	.LBB39_67
# BB#731:                               # %lor.lhs.false.i.i3555
	cmpq	$64, %rdx
	ja	.LBB39_67
# BB#732:                               # %lor.lhs.false272.i.i
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	nonzero_bits
	movq	96(%rsp), %rcx          # 8-byte Reload
	testq	%rcx, %rax
	jne	.LBB39_67
# BB#733:                               # %if.end281.i.i
	movq	$0, 8(%rsp)
	xorq	%rdi, %rdi
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	$1, (%rsp)
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%rbx, %rdx
	movq	%r12, %r8
	callq	make_extraction
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB39_67
# BB#734:                               # %if.end286.i.i
	movl	(%rbx), %r15d
	movq	%r15, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$64, %rax
	jne	.LBB39_736
# BB#735:                               # %cond.true.i.i
	movq	8(%rbx), %rax
	movl	(%rax), %r15d
.LBB39_736:                             # %cond.end.i.i
	movzbl	2(%r13), %eax
	movq	$16, %rcx
	shrq	%cl, %r15
	andq	$255, %r15
	xorq	%rdi, %rdi
	movq	$90, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	movq	104(%rsp), %r8          # 8-byte Reload
	callq	simplify_shift_const
	movzbl	mode_bitsize(%r15,%r15), %ecx
	cmpq	$63, %rcx
	movq	$-1, %rdx
	ja	.LBB39_738
# BB#737:                               # %cond.false311.i.i
	movq	$1, %rdx
	movq	%r12, %rcx
	shlq	%cl, %rdx
	decq	%rdx
.LBB39_738:                             # %cond.end312.i.i
	xorq	%r8, %r8
	movq	%rax, %rdi
	movq	%r15, %rsi
	movq	112(%rsp), %rcx         # 8-byte Reload
	callq	force_to_mode
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%rbx, %rdx
	jmp	.LBB39_173
.LBB39_551:                             # %if.else654.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$120, %rax
	jne	.LBB39_559
# BB#552:                               # %land.lhs.true659.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	addq	$-75, %rcx
	andq	%r13, %rcx
	cmpq	$10, %rcx
	ja	.LBB39_559
# BB#553:                               # %land.lhs.true659.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$1537, %rdx             # imm = 0x601
	je	.LBB39_559
# BB#554:                               # %land.lhs.true683.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$63, %rcx
	jne	.LBB39_559
# BB#555:                               # %land.lhs.true694.i3693
	movq	%rax, %rdi
	callq	subreg_lowpart_p
	testq	%r13, %rax
	je	.LBB39_559
# BB#556:                               # %land.lhs.true703.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_559
# BB#557:                               # %land.lhs.true715.i
	movzbl	2(%rbx), %eax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	num_sign_bit_copies
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %r8
	movq	16(%r8), %rcx
	movzbl	2(%rcx), %ecx
	movq	64(%rsp), %rdx          # 8-byte Reload
	movzbl	mode_bitsize(%rdx,%rdx), %esi
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	movq	%r13, %rdi
	andq	%rdi, %rax
	subq	%rcx, %rsi
	andq	%rdi, %rsi
                                        # kill: R13<def> RDI<kill>
	cmpq	%rsi, %rax
	jbe	.LBB39_559
# BB#558:                               # %if.then738.i
	movl	(%r8), %eax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	addq	$8, %r8
.LBB39_534:                             # %if.then1003.i
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$120, 80(%rsp)          # 8-byte Folded Spill
	movq	64(%rsp), %rdx          # 8-byte Reload
	jmp	.LBB39_578
.LBB39_559:                             # %if.else756.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$121, %rax
	jne	.LBB39_568
# BB#560:                               # %land.lhs.true761.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	addq	$-75, %rcx
	andq	%r13, %rcx
	cmpq	$15, %rcx
	ja	.LBB39_568
# BB#561:                               # %land.lhs.true761.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$54787, %rdx            # imm = 0xD603
	je	.LBB39_568
# BB#562:                               # %land.lhs.true817.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$63, %rcx
	jne	.LBB39_568
# BB#563:                               # %land.lhs.true828.i
	movq	64(%rsp), %rcx          # 8-byte Reload
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	cmpq	$64, %rcx
	ja	.LBB39_568
# BB#564:                               # %land.lhs.true834.i
	movq	%rax, %rdi
	callq	subreg_lowpart_p
	testq	%r13, %rax
	je	.LBB39_568
# BB#565:                               # %land.lhs.true843.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB39_568
# BB#566:                               # %land.lhs.true855.i
	movzbl	2(%rbx), %eax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	nonzero_bits
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %r8
	movq	8(%r8), %rcx
	movzbl	2(%rcx), %ecx
	movq	mode_mask_array(,%rcx,8), %rcx
	notq	%rcx
	testq	%rcx, %rax
	je	.LBB39_567
.LBB39_568:                             # %if.else891.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %eax
	cmpq	$121, %rax
	movq	64(%rsp), %rdx          # 8-byte Reload
	jne	.LBB39_580
# BB#569:                               # %land.lhs.true896.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	addq	$-75, %rcx
	andq	%r13, %rcx
	cmpq	$10, %rcx
	ja	.LBB39_580
# BB#570:                               # %land.lhs.true896.i
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$1537, %rsi             # imm = 0x601
	je	.LBB39_580
# BB#571:                               # %land.lhs.true920.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$63, %rcx
	jne	.LBB39_580
# BB#572:                               # %land.lhs.true931.i
	movzbl	mode_bitsize(%rdx,%rdx), %ecx
	cmpq	$64, %rcx
	ja	.LBB39_580
# BB#573:                               # %land.lhs.true937.i
	movq	%rax, %rdi
	callq	subreg_lowpart_p
	movq	64(%rsp), %rdx          # 8-byte Reload
	testq	%r13, %rax
	je	.LBB39_580
# BB#574:                               # %land.lhs.true946.i
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	movq	64(%rsp), %rdx          # 8-byte Reload
	testq	%r13, %rax
	je	.LBB39_580
# BB#575:                               # %land.lhs.true958.i
	movzbl	2(%rbx), %eax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	nonzero_bits
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %r8
	movq	16(%r8), %rcx
	movzbl	2(%rcx), %ecx
	movq	mode_mask_array(,%rcx,8), %rcx
	notq	%rcx
	testq	%rcx, %rax
	jne	.LBB39_580
# BB#576:                               # %if.then978.i
	movl	(%r8), %eax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	addq	$8, %r8
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$121, 80(%rsp)          # 8-byte Folded Spill
.LBB39_577:                             # %if.end1001.i
	testq	%rbx, %rbx
	movq	64(%rsp), %rdx          # 8-byte Reload
	jne	.LBB39_578
.LBB39_580:                             # %if.end1017.i
	testq	%r12, %r12
	je	.LBB39_581
# BB#582:                               # %land.lhs.true1020.i
	movq	%rdx, %r12
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	16(%rax), %rcx
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB39_583
# BB#584:                               # %land.lhs.true1020.i
	cmpq	%rax, %r15
	jne	.LBB39_585
# BB#586:                               # %land.lhs.true1029.i
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	jne	.LBB39_587
# BB#588:                               # %land.lhs.true1034.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	nonzero_bits
	cmpq	$1, %rax
	movq	88(%rsp), %rdx          # 8-byte Reload
	jne	.LBB39_590
# BB#589:                               # %land.lhs.true1041.i
	movq	8(%r14), %rax
	movq	%rax, %rdi
	movq	%rdx, %rbx
	callq	exact_log2_wide
	movq	%rbx, %rdx
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB39_592
.LBB39_590:                             # %lor.lhs.false1047.i
	movq	%rdx, %r15
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%r12, %rbx
	movq	%rbx, %rsi
	callq	num_sign_bit_copies
	movzbl	mode_bitsize(%rbx,%rbx), %ecx
	movq	%rbx, %r12
	andq	%r13, %rax
	cmpq	%rcx, %rax
	jne	.LBB39_67
# BB#591:                               # %land.lhs.true1057.i
	movq	8(%r14), %rax
	negq	%rax
	movq	%rax, %rdi
	callq	exact_log2_wide
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB39_67
.LBB39_592:                             # %if.then1065.i
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	%r12, %rbx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	movq	104(%rsp), %r8          # 8-byte Reload
	callq	simplify_shift_const
	jmp	.LBB39_66
.LBB39_581:
	movq	88(%rsp), %r15          # 8-byte Reload
	jmp	.LBB39_67
.LBB39_567:                             # %if.then873.i
	movl	(%r8), %eax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	addq	$16, %r8
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movq	$121, 80(%rsp)          # 8-byte Folded Spill
	movq	64(%rsp), %rdx          # 8-byte Reload
.LBB39_578:                             # %if.then1003.i
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	%rdx, %r12
	movq	(%r8), %r15
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	callq	gen_binary
	movq	global_rtl(%rip), %rdx
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%rax, %rdi
	movq	%rdx, %rsi
	callq	subst
	movq	const_true_rtx(%rip), %rcx
	movq	%rax, %r14
	movq	$78, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%r15, %rdx
	callq	gen_binary
	movq	$78, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	global_rtl(%rip), %rdx
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%rax, %rdi
	movq	%rdx, %rsi
	callq	subst
	movq	%rax, %r14
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	%rbx, %rsi
	callq	gen_lowpart_for_combine
	movq	56(%rsp), %rcx          # 8-byte Reload
	andq	$65535, %rcx            # imm = 0xFFFF
	movq	%rcx, %rdi
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rbx         # 8-byte Reload
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	gen_binary
	movq	%rax, %r15
	movq	%r13, %rax
	movq	80(%rsp), %rcx          # 8-byte Reload
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB39_67
# BB#579:                               # %if.then1013.i
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	%r12, %rsi
	movq	%r15, %rdx
	jmp	.LBB39_508
.LBB39_583:
	movq	88(%rsp), %r15          # 8-byte Reload
	jmp	.LBB39_67
.LBB39_585:
	movq	88(%rsp), %r15          # 8-byte Reload
	jmp	.LBB39_67
.LBB39_587:
	movq	88(%rsp), %r15          # 8-byte Reload
	jmp	.LBB39_67
.Ltmp584:
	.size	combine_simplify_rtx, .Ltmp584-combine_simplify_rtx
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI39_0:
	.quad	.LBB39_595
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_268
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_120
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_119
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_381
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_271
	.quad	.LBB39_312
	.quad	.LBB39_175
	.quad	.LBB39_329
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_339
	.quad	.LBB39_380
	.quad	.LBB39_739
	.quad	.LBB39_739
	.quad	.LBB39_739
	.quad	.LBB39_139
	.quad	.LBB39_888
	.quad	.LBB39_888
	.quad	.LBB39_888
	.quad	.LBB39_888
	.quad	.LBB39_888
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_343
	.quad	.LBB39_593
	.quad	.LBB39_593
	.quad	.LBB39_221
	.quad	.LBB39_380
	.quad	.LBB39_255
	.quad	.LBB39_886
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_877
	.quad	.LBB39_380
	.quad	.LBB39_885
	.quad	.LBB39_593
	.quad	.LBB39_593
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_380
	.quad	.LBB39_890
.LJTI39_1:
	.quad	.LBB39_542
	.quad	.LBB39_542
	.quad	.LBB39_545
	.quad	.LBB39_545
	.quad	.LBB39_546
	.quad	.LBB39_546
	.quad	.LBB39_547
	.quad	.LBB39_547

	.text
	.align	16, 0x90
	.type	if_then_else_cond,@function
if_then_else_cond:                      # @if_then_else_cond
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp591:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp592:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp593:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp594:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp595:
	.cfi_def_cfa_offset 48
	subq	$96, %rsp
.Ltmp596:
	.cfi_def_cfa_offset 144
.Ltmp597:
	.cfi_offset %rbx, -48
.Ltmp598:
	.cfi_offset %r12, -40
.Ltmp599:
	.cfi_offset %r13, -32
.Ltmp600:
	.cfi_offset %r14, -24
.Ltmp601:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movl	(%r12), %eax
	movq	$16, %rcx
	movq	%rax, %r13
	shrq	%cl, %r13
	movq	%rax, %r15
	andq	$65535, %r15            # imm = 0xFFFF
	andq	$65534, %rax            # imm = 0xFFFE
	cmpq	$102, %rax
	jne	.LBB40_8
# BB#1:                                 # %land.lhs.true
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB40_8
# BB#2:                                 # %land.lhs.true7
	cmpq	$0, 8(%rax)
	je	.LBB40_3
.LBB40_8:                               # %if.else
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movzbl	rtx_class(%r15), %ebx
	andq	$255, %r13
	cmpq	$49, %rbx
	jne	.LBB40_13
# BB#9:                                 # %land.lhs.true26
	movq	8(%r12), %rdi
	leaq	88(%rsp), %rsi
	leaq	72(%rsp), %rdx
	callq	if_then_else_cond
	movq	%rax, %r14
	testq	%r14, %r14
	je	.LBB40_13
# BB#10:                                # %if.then32
	movq	8(%r12), %rax
	movq	88(%rsp), %rdx
	movzbl	2(%rax), %ecx
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	simplify_gen_unary
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	8(%r12), %rax
	movq	72(%rsp), %rdx
	movzbl	2(%rax), %ecx
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	simplify_gen_unary
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
.LBB40_11:                              # %return
	movq	%r14, %r12
	jmp	.LBB40_12
.LBB40_13:                              # %if.else47
	cmpq	$74, %r15
	je	.LBB40_29
# BB#14:                                # %if.else51
	addq	$-50, %rbx
	andq	$255, %rbx
	cmpq	$49, %rbx
	ja	.LBB40_87
# BB#15:                                # %if.else51
	movq	$1, %rax
	movq	%rbx, %rcx
	shlq	%cl, %rax
	movabsq	$562949953422337, %rcx  # imm = 0x2000000000401
	testq	%rcx, %rax
	je	.LBB40_87
# BB#16:                                # %if.then69
	movq	8(%r12), %rdi
	leaq	88(%rsp), %rsi
	leaq	72(%rsp), %rdx
	callq	if_then_else_cond
	movq	16(%r12), %rdi
	movq	%rax, %r14
	leaq	80(%rsp), %rsi
	leaq	64(%rsp), %rdx
	callq	if_then_else_cond
	movq	%rax, %rbx
	movq	%r14, %rax
	orq	%rbx, %rax
	je	.LBB40_26
# BB#17:                                # %land.lhs.true83
	testq	%r14, %r14
	je	.LBB40_20
# BB#18:                                # %land.lhs.true83
	testq	%rbx, %rbx
	je	.LBB40_20
# BB#19:                                # %land.lhs.true89
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB40_26
.LBB40_20:                              # %if.then91
	testq	%r14, %r14
	je	.LBB40_21
# BB#22:                                # %if.else96
	testq	%rbx, %rbx
	jne	.LBB40_24
# BB#23:                                # %if.then99
	movq	80(%rsp), %rdi
	callq	copy_rtx
	movq	%rax, 80(%rsp)
	jmp	.LBB40_24
.LBB40_87:                              # %if.else351
	cmpq	$63, %r15
	jne	.LBB40_88
# BB#98:                                # %land.lhs.true403
	movq	8(%r12), %rdi
	leaq	88(%rsp), %rsi
	leaq	72(%rsp), %rdx
	callq	if_then_else_cond
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB40_100
# BB#99:                                # %if.then410
	movq	8(%r12), %rax
	movq	88(%rsp), %rsi
	movl	16(%r12), %ecx
	movzbl	2(%rax), %edx
	movq	%r13, %rdi
	callq	simplify_gen_subreg
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	8(%r12), %rax
	movq	72(%rsp), %rsi
	movl	16(%r12), %ecx
	movzbl	2(%rax), %edx
	movq	%r13, %rdi
	callq	simplify_gen_subreg
.LBB40_58:                              # %return
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%rbx, %r12
	jmp	.LBB40_12
.LBB40_88:                              # %if.else351
	cmpq	$72, %r15
	jne	.LBB40_100
# BB#89:                                # %if.then354
	movq	16(%r12), %rcx
	movq	8(%r12), %rax
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, (%rdi)
	movq	24(%r12), %rcx
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	%rcx, (%rsi)
	movzbl	(%rax), %ecx
	cmpq	$103, %rcx
	jne	.LBB40_90
# BB#95:                                # %land.lhs.true383
	movq	16(%rax), %rcx
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rcx
	je	.LBB40_97
# BB#96:
	movq	%rax, %r12
	jmp	.LBB40_12
.LBB40_3:                               # %if.then
	cmpq	$102, %r15
	movabsq	$const_true_rtx, %rcx
	movabsq	$const_int_rtx+512, %rax
	movq	%rcx, %rdi
	je	.LBB40_5
# BB#4:                                 # %if.then
	movq	%rax, %rdi
.LBB40_5:                               # %if.then
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	je	.LBB40_7
# BB#6:                                 # %if.then
	movq	%rcx, %rax
.LBB40_7:                               # %if.then
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	movq	8(%r12), %r12
	jmp	.LBB40_12
.LBB40_100:                             # %if.else430
	movzbl	(%r12), %eax
	cmpq	$133, %rax
	jg	.LBB40_103
# BB#101:                               # %if.else430
	addq	$-54, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	ja	.LBB40_105
# BB#102:                               # %if.else430
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB40_29
	jmp	.LBB40_105
.LBB40_26:                              # %if.end109
	leaq	-75(%r15), %rcx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rcx
	cmpq	$20, %rcx
	ja	.LBB40_29
# BB#27:                                # %if.end109
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$1050115, %rdx          # imm = 0x100603
	je	.LBB40_28
# BB#30:                                # %land.lhs.true124
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$78, %rcx
	jne	.LBB40_59
# BB#31:                                # %land.lhs.true132
	movq	16(%r12), %rcx
	movzbl	(%rcx), %edx
	cmpq	$78, %rdx
	jne	.LBB40_59
# BB#32:                                # %if.then140
	movq	8(%rax), %rsi
	movzbl	(%rsi), %ebx
	movzbl	rtx_class(%rbx), %edx
	cmpq	$60, %rdx
	jne	.LBB40_59
# BB#33:                                # %land.lhs.true172
	movq	8(%rcx), %rdi
	movzbl	(%rdi), %edx
	movzbl	rtx_class(%rdx), %edx
	cmpq	$60, %rdx
	jne	.LBB40_59
# BB#34:                                # %land.lhs.true180
	movq	%rsi, 32(%rsp)          # 8-byte Spill
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	16(%rcx), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	callq	reversed_comparison_code
	testq	%r14, %rax
	jne	.LBB40_41
# BB#35:                                # %lor.lhs.false.i
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB40_36
# BB#37:                                # %if.end.i
	callq	get_last_value
	movq	%rax, %rcx
	testq	%rcx, %rcx
	je	.LBB40_38
# BB#39:                                # %lor.lhs.false7.i
	movzbl	(%rcx), %eax
	cmpq	$74, %rax
	movabsq	$0, %rax
	jne	.LBB40_41
# BB#40:                                # %if.end12.i
	movq	8(%rcx), %rsi
	movq	16(%rcx), %rdx
	movq	40(%rsp), %rax          # 8-byte Reload
	movzbl	(%rax), %edi
	xorq	%rcx, %rcx
	callq	reversed_comparison_code_parts
	jmp	.LBB40_41
.LBB40_103:                             # %if.else430
	cmpq	$134, %rax
	je	.LBB40_29
# BB#104:                               # %if.else430
	cmpq	$140, %rax
	je	.LBB40_29
.LBB40_105:                             # %lor.lhs.false470
	movq	%r12, %rdi
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB40_111
# BB#106:                               # %land.lhs.true474
	movzbl	(%rax), %eax
	cmpq	$133, %rax
	jg	.LBB40_109
# BB#107:                               # %land.lhs.true474
	addq	$-54, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	ja	.LBB40_111
# BB#108:                               # %land.lhs.true474
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$24599, %rax            # imm = 0x6017
	jne	.LBB40_29
	jmp	.LBB40_111
.LBB40_90:                              # %if.then354
	cmpq	$102, %rcx
	jne	.LBB40_91
# BB#92:                                # %land.lhs.true368
	movq	16(%rax), %rcx
	movq	const_int_rtx+512(%rip), %rdx
	cmpq	%rdx, %rcx
	je	.LBB40_94
# BB#93:
	movq	%rax, %r12
	jmp	.LBB40_12
.LBB40_21:                              # %if.then94
	movq	88(%rsp), %rdi
	callq	copy_rtx
	movq	%rax, 88(%rsp)
.LBB40_24:                              # %if.end101
	movq	88(%rsp), %rdx
	movq	80(%rsp), %rcx
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	gen_binary
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	72(%rsp), %rdx
	movq	64(%rsp), %rcx
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	gen_binary
	testq	%r14, %r14
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	jne	.LBB40_11
# BB#25:                                # %if.end101
	movq	%rbx, %r14
	jmp	.LBB40_11
.LBB40_28:                              # %if.end109
	shlq	%cl, %rax
	testq	$524552, %rax           # imm = 0x80108
	jne	.LBB40_61
	jmp	.LBB40_29
.LBB40_91:
	movq	%rax, %r12
	jmp	.LBB40_12
.LBB40_109:                             # %land.lhs.true474
	cmpq	$134, %rax
	je	.LBB40_29
# BB#110:                               # %land.lhs.true474
	cmpq	$140, %rax
	je	.LBB40_29
.LBB40_111:                             # %if.else515
	cmpq	$1, %r13
	jne	.LBB40_114
# BB#112:                               # %if.then518
	xorq	%rdi, %rdi
	movq	$1, %rsi
	callq	gen_rtx_CONST_INT
	jmp	.LBB40_119
.LBB40_114:                             # %if.else520
	movq	const_int_rtx+504(%rip), %rax
	cmpq	%r12, %rax
	je	.LBB40_119
# BB#115:                               # %if.else520
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%r12, %rcx
	je	.LBB40_119
# BB#116:                               # %lor.lhs.false526
	testq	%r13, %r13
	je	.LBB40_29
# BB#117:                               # %land.lhs.true529
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	num_sign_bit_copies
	movzbl	mode_bitsize(%r13,%r13), %ecx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	%rcx, %rdx
	jne	.LBB40_120
# BB#118:                               # %land.lhs.true529.if.then536_crit_edge
	movq	const_int_rtx+504(%rip), %rax
	jmp	.LBB40_119
.LBB40_97:                              # %if.then389
	movq	24(%r12), %rcx
	movq	%rcx, (%rdi)
	movq	16(%r12), %rcx
	movq	%rcx, (%rsi)
	movq	8(%rax), %r12
	jmp	.LBB40_12
.LBB40_94:                              # %if.then374
	movq	8(%rax), %r12
	jmp	.LBB40_12
.LBB40_120:                             # %land.lhs.true540
	cmpq	$64, %rcx
	ja	.LBB40_29
# BB#121:                               # %land.lhs.true546
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	nonzero_bits
	movq	%rax, %rbx
	movq	%rbx, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB40_29
# BB#122:                               # %if.then551
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
.LBB40_119:                             # %if.then536
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	const_int_rtx+512(%rip), %rax
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	jmp	.LBB40_12
.LBB40_36:
	xorq	%rax, %rax
	jmp	.LBB40_41
.LBB40_38:
	xorq	%rax, %rax
.LBB40_41:                              # %combine_reversed_comparison_code.exit
	andq	%r14, %rax
	cmpq	%rax, %rbx
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	jne	.LBB40_44
# BB#42:                                # %land.lhs.true186
	movq	8(%rdx), %rdi
	movq	8(%rcx), %rsi
	movq	%rcx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	testq	%r14, %rax
	je	.LBB40_44
# BB#43:                                # %land.lhs.true195
	movq	16(%rdx), %rdi
	movq	16(%rcx), %rsi
	movq	%rcx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rcx
	movq	32(%rsp), %rdx          # 8-byte Reload
	testq	%r14, %rax
	jne	.LBB40_54
.LBB40_44:                              # %lor.lhs.false204
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movzbl	(%rdx), %edi
	movq	%rcx, %rbx
	callq	swap_condition
	movq	%rax, 24(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	reversed_comparison_code
	movq	24(%rsp), %rdx          # 8-byte Reload
	testq	%r14, %rax
	jne	.LBB40_51
# BB#45:                                # %lor.lhs.false.i756
	movq	%rdx, %rbx
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB40_46
# BB#47:                                # %if.end.i759
	callq	get_last_value
	movq	%rax, %rcx
	testq	%rcx, %rcx
	je	.LBB40_46
# BB#48:                                # %lor.lhs.false7.i763
	movzbl	(%rcx), %eax
	cmpq	$74, %rax
	movabsq	$0, %rax
	movq	%rbx, %rdx
	jne	.LBB40_51
# BB#49:                                # %if.end12.i771
	movq	8(%rcx), %rax
	movq	%rdx, %rbx
	movq	16(%rcx), %rdx
	movq	40(%rsp), %rcx          # 8-byte Reload
	movzbl	(%rcx), %esi
	xorq	%rcx, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	reversed_comparison_code_parts
	jmp	.LBB40_50
.LBB40_46:
	xorq	%rax, %rax
.LBB40_50:                              # %combine_reversed_comparison_code.exit773
	movq	%rbx, %rdx
.LBB40_51:                              # %combine_reversed_comparison_code.exit773
	andq	%r14, %rax
	andq	%r14, %rdx
	cmpq	%rax, %rdx
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %rax          # 8-byte Reload
	jne	.LBB40_59
# BB#52:                                # %land.lhs.true211
	movq	8(%rcx), %rdi
	movq	16(%rax), %rsi
	movq	%rax, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	movq	32(%rsp), %rcx          # 8-byte Reload
	testq	%r14, %rax
	je	.LBB40_59
# BB#53:                                # %land.lhs.true220
	movq	16(%rcx), %rdi
	movq	%rcx, %rbx
	movq	8(%rdx), %rsi
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%r14, %rax
	je	.LBB40_59
.LBB40_54:                              # %land.lhs.true229
	movq	%r12, %rdi
	movq	%rdx, %rbx
	callq	side_effects_p
	movq	%rbx, %rcx
	testq	%r14, %rax
	je	.LBB40_55
.LBB40_59:                              # %if.end243
	addq	$-78, %r15
	andq	%r14, %r15
	cmpq	$16, %r15
	ja	.LBB40_29
# BB#60:                                # %if.end243
	movq	$1, %rax
	movq	%r15, %rcx
	shlq	%cl, %rax
	testq	$65569, %rax            # imm = 0x10021
	je	.LBB40_29
.LBB40_61:                              # %land.lhs.true252
	movq	8(%r12), %rcx
	movzbl	(%rcx), %eax
	cmpq	$78, %rax
	jne	.LBB40_29
# BB#62:                                # %land.lhs.true260
	movq	16(%r12), %rax
	movzbl	(%rax), %edx
	cmpq	$78, %rdx
	jne	.LBB40_29
# BB#63:                                # %if.then268
	movq	8(%rcx), %r15
	movzbl	(%r15), %ebx
	movzbl	rtx_class(%rbx), %ecx
	cmpq	$60, %rcx
	jne	.LBB40_29
# BB#64:                                # %land.lhs.true288
	movq	8(%rax), %r13
	movzbl	(%r13), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	jne	.LBB40_29
# BB#65:                                # %land.lhs.true296
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	reversed_comparison_code
	testq	%r14, %rax
	jne	.LBB40_72
# BB#66:                                # %lor.lhs.false.i784
	movq	8(%r13), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB40_67
# BB#68:                                # %if.end.i787
	callq	get_last_value
	movq	%rax, %rcx
	testq	%rcx, %rcx
	je	.LBB40_69
# BB#70:                                # %lor.lhs.false7.i791
	movzbl	(%rcx), %eax
	cmpq	$74, %rax
	movabsq	$0, %rax
	jne	.LBB40_72
# BB#71:                                # %if.end12.i799
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movzbl	(%r13), %esi
	xorq	%rcx, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	reversed_comparison_code_parts
	jmp	.LBB40_72
.LBB40_67:
	xorq	%rax, %rax
	jmp	.LBB40_72
.LBB40_55:                              # %if.then232
	movq	%rcx, %rbx
	movq	const_true_rtx(%rip), %rcx
	movq	$78, %rdi
	movq	%r13, %rsi
	movq	16(%rsp), %rdx          # 8-byte Reload
	callq	gen_binary
	cmpq	$76, %r15
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	jne	.LBB40_57
# BB#56:                                # %cond.true236
	movq	$77, %rdi
	movq	%r13, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%r13, %rcx
	callq	simplify_gen_unary
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB40_57:                              # %cond.end239
	movq	const_true_rtx(%rip), %rax
	movq	$78, %rdi
	movq	%r13, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rax, %rcx
	callq	gen_binary
	jmp	.LBB40_58
.LBB40_69:
	xorq	%rax, %rax
.LBB40_72:                              # %combine_reversed_comparison_code.exit801
	andq	%r14, %rax
	cmpq	%rax, %rbx
	jne	.LBB40_75
# BB#73:                                # %land.lhs.true302
	movq	8(%r15), %rdi
	movq	8(%r13), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB40_75
# BB#74:                                # %land.lhs.true311
	movq	16(%r15), %rdi
	movq	16(%r13), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	jne	.LBB40_85
.LBB40_75:                              # %lor.lhs.false320
	movzbl	(%r15), %edi
	callq	swap_condition
	movq	%rax, %rbx
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	reversed_comparison_code
	testq	%r14, %rax
	jne	.LBB40_82
# BB#76:                                # %lor.lhs.false.i812
	movq	8(%r13), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB40_77
# BB#78:                                # %if.end.i815
	callq	get_last_value
	movq	%rax, %rcx
	testq	%rcx, %rcx
	je	.LBB40_79
# BB#80:                                # %lor.lhs.false7.i819
	movzbl	(%rcx), %eax
	cmpq	$74, %rax
	movabsq	$0, %rax
	jne	.LBB40_82
# BB#81:                                # %if.end12.i827
	movq	8(%rcx), %rax
	movq	16(%rcx), %rdx
	movzbl	(%r13), %esi
	xorq	%rcx, %rcx
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	reversed_comparison_code_parts
	jmp	.LBB40_82
.LBB40_77:
	xorq	%rax, %rax
	jmp	.LBB40_82
.LBB40_79:
	xorq	%rax, %rax
.LBB40_82:                              # %combine_reversed_comparison_code.exit829
	andq	%r14, %rax
	andq	%r14, %rbx
	cmpq	%rax, %rbx
	jne	.LBB40_29
# BB#83:                                # %land.lhs.true327
	movq	8(%r15), %rdi
	movq	16(%r13), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB40_29
# BB#84:                                # %land.lhs.true336
	movq	16(%r15), %rdi
	movq	8(%r13), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB40_29
.LBB40_85:                              # %land.lhs.true345
	movq	%r12, %rdi
	callq	side_effects_p
	testq	%r14, %rax
	je	.LBB40_86
.LBB40_29:                              # %if.end563
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%r12, (%rax)
	movq	56(%rsp), %rax          # 8-byte Reload
	movq	%r12, (%rax)
	xorq	%r12, %r12
.LBB40_12:                              # %return
	movq	%r12, %rax
	addq	$96, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB40_86:                              # %if.then348
	movq	const_int_rtx+512(%rip), %rax
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rcx)
	movq	%r15, %r12
	jmp	.LBB40_12
.Ltmp602:
	.size	if_then_else_cond, .Ltmp602-if_then_else_cond
	.cfi_endproc

	.align	16, 0x90
	.type	simplify_comparison,@function
simplify_comparison:                    # @simplify_comparison
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp609:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp610:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp611:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp612:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp613:
	.cfi_def_cfa_offset 48
	subq	$128, %rsp
.Ltmp614:
	.cfi_def_cfa_offset 176
.Ltmp615:
	.cfi_offset %rbx, -48
.Ltmp616:
	.cfi_offset %r12, -40
.Ltmp617:
	.cfi_offset %r13, -32
.Ltmp618:
	.cfi_offset %r14, -24
.Ltmp619:
	.cfi_offset %r15, -16
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movq	%rsi, 72(%rsp)          # 8-byte Spill
	movq	(%rsi), %r14
	movq	(%rdx), %rbx
	jmp	.LBB41_1
	.align	16, 0x90
.LBB41_85:                              # %if.then551
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	8(%r14), %r14
	movq	8(%r11), %rbx
	movq	112(%rsp), %rdi         # 8-byte Reload
	callq	swap_condition
	movq	%rax, %rdi
.LBB41_1:                               # %while.body.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_2 Depth 2
                                        #     Child Loop BB41_76 Depth 2
	movabsq	$4294967292, %rax       # imm = 0xFFFFFFFC
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	movq	%rdi, 112(%rsp)         # 8-byte Spill
	movq	%rdi, %r12
	andq	%rax, %r12
	andq	%rcx, %rdi
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	jmp	.LBB41_2
	.align	16, 0x90
.LBB41_57:                              # %if.then347
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%r14), %r14
	movq	8(%r11), %rbx
.LBB41_2:                               # %while.body
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	$108, %r12
	jne	.LBB41_4
# BB#3:                                 #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
	.align	16, 0x90
.LBB41_4:                               # %land.lhs.true6
                                        #   in Loop: Header=BB41_2 Depth=2
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$89, %rcx
	jne	.LBB41_5
# BB#6:                                 # %land.lhs.true8
                                        #   in Loop: Header=BB41_2 Depth=2
	movzbl	(%rbx), %ecx
	cmpq	$89, %rcx
	jne	.LBB41_7
# BB#8:                                 # %land.lhs.true12
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%r14), %rcx
	movzbl	(%rcx), %edx
	cmpq	$87, %rdx
	jne	.LBB41_9
# BB#10:                                # %land.lhs.true16
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%rbx), %rdi
	movzbl	(%rdi), %edx
	cmpq	$87, %rdx
	jne	.LBB41_11
# BB#12:                                # %land.lhs.true23
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%rcx), %rdx
	movzbl	(%rdx), %esi
	cmpq	$63, %rsi
	jne	.LBB41_13
# BB#14:                                # %land.lhs.true33
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%rdi), %r8
	movzbl	(%r8), %esi
	cmpq	$63, %rsi
	jne	.LBB41_15
# BB#16:                                # %land.lhs.true43
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%rdx), %r10
	movq	8(%r8), %r11
	movzbl	2(%r10), %esi
	movzbl	2(%r11), %edx
	cmpq	%rdx, %rsi
	jne	.LBB41_17
# BB#18:                                # %land.lhs.true68
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	16(%r14), %r8
	movzbl	(%r8), %edx
	cmpq	$54, %rdx
	jne	.LBB41_19
# BB#20:                                # %land.lhs.true75
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	16(%rbx), %r9
	movzbl	(%r9), %edx
	cmpq	$54, %rdx
	jne	.LBB41_21
# BB#22:                                # %land.lhs.true82
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB41_23
# BB#24:                                # %land.lhs.true92
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	16(%rdi), %rdi
	movzbl	(%rdi), %edx
	cmpq	$54, %rdx
	jne	.LBB41_25
# BB#26:                                # %land.lhs.true102
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%r8), %r8
	movq	8(%r9), %rdx
	cmpq	%rdx, %r8
	jne	.LBB41_27
# BB#28:                                # %land.lhs.true115
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%rcx), %rcx
	cmpq	%rcx, %r8
	jne	.LBB41_29
# BB#30:                                # %land.lhs.true132
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%rdi), %rcx
	cmpq	%rcx, %r8
	jne	.LBB41_31
# BB#32:                                # %land.lhs.true149
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	$15, %rcx
	shrq	%cl, %rax
	andq	$510, %rax              # imm = 0x1FE
	movzbl	mode_bitsize(%rax), %eax
	movzbl	mode_bitsize(%rsi,%rsi), %ecx
	subq	%rcx, %rax
	cmpq	%rax, %r8
	je	.LBB41_34
# BB#33:                                # %land.lhs.true149
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
.LBB41_34:                              # %land.lhs.true149
                                        #   in Loop: Header=BB41_2 Depth=2
	je	.LBB41_36
# BB#35:                                # %land.lhs.true149
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	%r14, %r10
.LBB41_36:                              # %land.lhs.true149
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	%r10, %r14
	jmp	.LBB41_37
	.align	16, 0x90
.LBB41_5:                               #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_7:                               #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_9:                               #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_11:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_13:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_15:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_17:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_19:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_21:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_23:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_25:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_27:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_29:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	jmp	.LBB41_37
.LBB41_31:                              #   in Loop: Header=BB41_2 Depth=2
	movq	%rbx, %r11
	.align	16, 0x90
.LBB41_37:                              # %if.end
                                        #   in Loop: Header=BB41_2 Depth=2
	movl	(%r14), %ebx
	movzbl	(%r11), %esi
	movq	%rbx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	%rsi, %rdx
	jne	.LBB41_58
# BB#38:                                # %land.lhs.true202
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movzbl	mode_bitsize(%rbx,%rbx), %eax
	cmpq	$64, %rax
	ja	.LBB41_58
# BB#39:                                # %land.lhs.true211
                                        #   in Loop: Header=BB41_2 Depth=2
	cmpq	$88, %rdx
	jne	.LBB41_41
# BB#40:                                # %land.lhs.true211
                                        #   in Loop: Header=BB41_2 Depth=2
	cmpq	$102, 120(%rsp)         # 8-byte Folded Reload
	je	.LBB41_48
.LBB41_41:                              # %lor.lhs.false221
                                        #   in Loop: Header=BB41_2 Depth=2
	cmpq	$90, %rdx
	je	.LBB41_43
# BB#42:                                # %lor.lhs.false221
                                        #   in Loop: Header=BB41_2 Depth=2
	cmpq	$87, %rdx
	jne	.LBB41_46
.LBB41_43:                              # %land.lhs.true231
                                        #   in Loop: Header=BB41_2 Depth=2
	cmpq	$104, %r12
	jne	.LBB41_48
	jmp	.LBB41_44
.LBB41_46:                              # %lor.lhs.false243
                                        #   in Loop: Header=BB41_2 Depth=2
	cmpq	$89, %rdx
	jne	.LBB41_58
# BB#47:                                # %lor.lhs.false243
                                        #   in Loop: Header=BB41_2 Depth=2
	cmpq	$108, %r12
	je	.LBB41_58
	.align	16, 0x90
.LBB41_48:                              # %land.lhs.true260
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	16(%r14), %rcx
	movzbl	(%rcx), %eax
	cmpq	$54, %rax
	jne	.LBB41_58
# BB#49:                                # %land.lhs.true268
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%rcx), %rax
	cmpq	$63, %rax
	ja	.LBB41_58
# BB#50:                                # %land.lhs.true286
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	16(%r11), %rdi
	cmpq	%rdi, %rcx
	jne	.LBB41_58
# BB#51:                                # %if.then295
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	mode_mask_array(,%rbx,8), %r13
	cmpq	$87, %rdx
	je	.LBB41_54
# BB#52:                                # %if.then295
                                        #   in Loop: Header=BB41_2 Depth=2
	addq	$-89, %rdx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rdx
	movq	%r11, %r15
	cmpq	$1, %rdx
	ja	.LBB41_55
# BB#53:                                # %if.then318
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	%rax, %rcx
	andq	%rsi, %rcx
	movq	%r13, %rdx
	shrq	%cl, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rdx, %r13
	jmp	.LBB41_55
	.align	16, 0x90
.LBB41_54:                              # %if.then324
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	%r11, %r15
	movq	%rax, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	movq	%r13, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%r13, %rsi
	movq	%rdx, %rcx
	shrq	%cl, %rsi
	movq	%rsi, %r13
.LBB41_55:                              # %if.end331
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	nonzero_bits
	notq	%r13
	testq	%r13, %rax
	movq	%r15, %r11
	jne	.LBB41_44
# BB#56:                                # %land.lhs.true338
                                        #   in Loop: Header=BB41_2 Depth=2
	movq	8(%r11), %rdi
	movq	%rbx, %rsi
	movq	%r11, %rbx
	callq	nonzero_bits
	movq	%rbx, %r11
	testq	%r13, %rax
	je	.LBB41_57
	jmp	.LBB41_44
	.align	16, 0x90
.LBB41_58:                              # %if.else356
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$77, %rdx
	je	.LBB41_83
# BB#59:                                # %if.else356
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$86, %rdx
	je	.LBB41_82
# BB#60:                                # %if.else356
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$83, %rdx
	jne	.LBB41_44
# BB#61:                                # %land.lhs.true361
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$83, %rsi
	jne	.LBB41_44
# BB#62:                                # %land.lhs.true366
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	16(%r14), %rcx
	movzbl	(%rcx), %eax
	cmpq	$54, %rax
	jne	.LBB41_80
# BB#63:                                # %land.lhs.true374
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	16(%r11), %rdi
	movzbl	(%rdi), %eax
	cmpq	$54, %rax
	jne	.LBB41_80
# BB#64:                                # %if.then382
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	8(%r14), %r12
	movl	(%r12), %eax
	movq	8(%r11), %r13
	movq	8(%rcx), %rbx
	movq	8(%rdi), %r15
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB41_74
# BB#65:                                # %land.lhs.true405
                                        #   in Loop: Header=BB41_1 Depth=1
	movzbl	(%r13), %ecx
	cmpq	$63, %rcx
	jne	.LBB41_74
# BB#66:                                # %land.lhs.true410
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	8(%r12), %rdi
	movq	$16, %rcx
	movzbl	2(%rdi), %esi
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_size(%rax), %eax
	movzbl	mode_size(%rsi), %ecx
	cmpq	%rcx, %rax
	jbe	.LBB41_74
# BB#67:                                # %land.lhs.true428
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	8(%r13), %rax
	movzbl	2(%rax), %eax
	cmpq	%rax, %rsi
	jne	.LBB41_74
# BB#68:                                # %land.lhs.true443
                                        #   in Loop: Header=BB41_1 Depth=1
	movzbl	mode_bitsize(%rsi,%rsi), %eax
	cmpq	$64, %rax
	ja	.LBB41_74
# BB#69:                                # %land.lhs.true455
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	%r13, 120(%rsp)         # 8-byte Spill
	movq	%rbx, %r13
	notq	%r13
	movq	%r11, 104(%rsp)         # 8-byte Spill
	callq	nonzero_bits
	movq	104(%rsp), %r11         # 8-byte Reload
	testq	%r13, %rax
	movq	120(%rsp), %r13         # 8-byte Reload
	jne	.LBB41_74
# BB#70:                                # %land.lhs.true470
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	8(%r13), %rdi
	movzbl	2(%rdi), %esi
	movq	%r15, %r13
	notq	%r13
	callq	nonzero_bits
	movq	104(%rsp), %r11         # 8-byte Reload
	testq	%r13, %rax
	movq	120(%rsp), %r13         # 8-byte Reload
	jne	.LBB41_74
# BB#71:                                # %if.then485
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	8(%r12), %r14
	movq	8(%r13), %rbx
	jmp	.LBB41_72
.LBB41_80:                              # %if.else525
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$77, %rdx
	jne	.LBB41_81
.LBB41_83:                              # %land.lhs.true540
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$77, %rsi
	jne	.LBB41_44
# BB#84:                                # %land.lhs.true540
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$102, 120(%rsp)         # 8-byte Folded Reload
	je	.LBB41_85
	jmp	.LBB41_44
.LBB41_81:                              # %if.else525
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$86, %rdx
	jne	.LBB41_44
.LBB41_82:                              # %land.lhs.true530
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	$86, %rsi
	je	.LBB41_85
	jmp	.LBB41_44
.LBB41_74:                              # %if.else493
                                        #   in Loop: Header=BB41_1 Depth=1
	cmpq	%r15, %rbx
	jne	.LBB41_44
# BB#75:                                # %if.then496
                                        #   in Loop: Header=BB41_1 Depth=1
	movzbl	2(%r14), %eax
	movslq	mode_class(,%rax,4), %rcx
	movl	class_narrowest_mode(,%rcx,4), %r15d
	jmp	.LBB41_76
	.align	16, 0x90
.LBB41_79:                              # %for.inc
                                        #   in Loop: Header=BB41_76 Depth=2
	movzbl	mode_wider_mode(%rdx), %r15d
.LBB41_76:                              # %if.then496
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%rax, %r15
	je	.LBB41_44
# BB#77:                                # %for.body
                                        #   in Loop: Header=BB41_76 Depth=2
	movq	$32, %rcx
	movq	%r15, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	mode_mask_array(,%rdx,8), %rcx
	cmpq	%rcx, %rbx
	jne	.LBB41_79
# BB#78:                                # %if.then513
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	gen_lowpart_for_combine
	movq	%rax, %r14
	movq	%r15, %rdi
	movq	%r13, %rsi
	callq	gen_lowpart_for_combine
	movq	%rax, %rbx
.LBB41_72:                              # %while.body.outer
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	112(%rsp), %rdi         # 8-byte Reload
	callq	unsigned_condition
	movq	%rax, %rdi
	jmp	.LBB41_1
.LBB41_44:                              # %while.end
	movq	%r14, %rdi
	movq	%r11, %rsi
	movq	%r11, %rbx
	callq	swap_commutative_operands_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB41_45
# BB#86:                                # %if.then565
	movq	112(%rsp), %rdi         # 8-byte Reload
	callq	swap_condition
	movq	%rax, %r9
	movq	%r14, %r15
	jmp	.LBB41_87
.LBB41_45:
	movq	%rbx, %r15
	movq	%r14, %rbx
	movq	112(%rsp), %r9          # 8-byte Reload
.LBB41_87:                              # %while.cond.preheader
	movzbl	(%r15), %eax
	cmpq	$54, %rax
	jne	.LBB41_88
# BB#89:
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	%rbx, %r10
	jmp	.LBB41_90
	.align	16, 0x90
.LBB41_231:                             # %if.end856
                                        #   in Loop: Header=BB41_90 Depth=1
	jmpq	*.LJTI41_1(,%rcx,8)
.LBB41_321:                             # %sw.bb1377
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	jne	.LBB41_469
# BB#322:                               # %lor.lhs.false1380
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	movl	(%r13), %esi
	movq	$14, %rcx
	movq	%rsi, %rdi
	shrq	%cl, %rdi
	andq	$1020, %rdi             # imm = 0x3FC
	movl	mode_class(%rdi), %ecx
	cmpq	$4, %rcx
	je	.LBB41_469
# BB#323:                               # %if.end1392
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$74, %rsi
	jne	.LBB41_324
# BB#325:                               # %if.then1400
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r13), %rsi
	movq	%r13, %rcx
	movq	%rsi, %r13
	jmp	.LBB41_326
.LBB41_324:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rcx
.LBB41_326:                             # %if.end1420
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rcx), %r15
	movq	%r9, %rcx
	movabsq	$4294967294, %rsi       # imm = 0xFFFFFFFE
	andq	%rsi, %rcx
	cmpq	$102, %rcx
	jne	.LBB41_327
# BB#332:                               # %if.then1461
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %rcx
	andq	%r8, %rcx
	cmpq	$102, %rcx
	je	.LBB41_342
# BB#333:                               # %if.then1461
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$107, %rcx
	je	.LBB41_342
	jmp	.LBB41_334
.LBB41_327:                             # %lor.lhs.false1426
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movzbl	mode_bitsize(%rdx,%rdx), %ecx
	cmpq	$64, %rcx
	ja	.LBB41_469
# BB#328:                               # %land.lhs.true1435
                                        #   in Loop: Header=BB41_90 Depth=1
	movl	mode_class(,%rdx,4), %edx
	cmpq	$1, %rdx
	jne	.LBB41_469
# BB#329:                               # %land.lhs.true1443
                                        #   in Loop: Header=BB41_90 Depth=1
	addq	%r8, %rcx
	testq	%r8, %rcx
	jne	.LBB41_469
# BB#330:                               # %land.lhs.true1455
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %rcx
	andq	%r8, %rcx
	cmpq	$104, %rcx
	jne	.LBB41_331
.LBB41_334:                             # %if.else1470
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %r12
	xorq	%rsi, %rsi
	movq	%r10, %rdi
	movq	%r8, %rbx
	movq	%r10, %r14
	callq	reversed_comparison_code
	movq	%rbx, %r8
	testq	%r8, %rax
	jne	.LBB41_240
# BB#335:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r14), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	movq	%r14, %r10
	jne	.LBB41_336
# BB#337:                               # %if.end.i
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rbx
	movq	%r8, %r14
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB41_338
# BB#339:                               # %lor.lhs.false7.i
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	movq	%rbx, %r10
	jne	.LBB41_340
# BB#341:                               # %if.end12.i
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %rsi
	movq	16(%rax), %rdx
	movzbl	(%r10), %edi
	xorq	%rcx, %rcx
	movq	%r10, %rbx
	callq	reversed_comparison_code_parts
	movq	%rbx, %r10
	movq	%r14, %r8
	movq	%r12, %r9
	jmp	.LBB41_342
.LBB41_331:                             # %land.lhs.true1455
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$107, %rcx
	jne	.LBB41_469
.LBB41_342:                             # %if.end1472
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r8, %rax
	jne	.LBB41_240
	jmp	.LBB41_469
.LBB41_278:                             # %sw.bb1078
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, %r12
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%r9, 112(%rsp)          # 8-byte Spill
	movq	%r8, %r14
	cmpq	$64, 96(%rsp)           # 8-byte Folded Reload
	ja	.LBB41_287
# BB#279:                               # %land.lhs.true1081
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rdi
	movq	%r10, %rbx
	callq	subreg_lowpart_p
	movq	%rbx, %r10
	testq	%r14, %rax
	je	.LBB41_287
# BB#280:                               # %land.lhs.true1084
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rax
	movl	(%rax), %esi
	movq	%rsi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$75, %rcx
	jne	.LBB41_287
# BB#281:                               # %land.lhs.true1092
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB41_287
# BB#282:                               # %land.lhs.true1103
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rcx), %rdx
	testq	%rdx, %rdx
	jns	.LBB41_287
# BB#283:                               # %land.lhs.true1115
                                        #   in Loop: Header=BB41_90 Depth=1
	negq	%rdx
	movq	$1, %rcx
	movq	32(%rsp), %rdi          # 8-byte Reload
	shrq	%cl, %rdi
	cmpq	%rdx, %rdi
	jle	.LBB41_287
# BB#284:                               # %land.lhs.true1115
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	%rdi, 56(%rsp)          # 8-byte Folded Reload
	jae	.LBB41_287
# BB#285:                               # %land.lhs.true1136
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	%r10, %rbx
	callq	nonzero_bits
	movq	%rbx, %rcx
	movq	8(%rcx), %r13
	movq	32(%rsp), %rdx          # 8-byte Reload
	notq	%rdx
	testq	%rdx, %rax
	je	.LBB41_374
# BB#286:                               # %lor.lhs.false1156
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r13), %rdi
	movzbl	2(%r13), %esi
	movq	%rcx, %rbx
	callq	num_sign_bit_copies
	movq	%rbx, %r10
	movq	8(%r10), %r13
	movzbl	2(%r13), %ecx
	movzbl	mode_bitsize(%rcx,%rcx), %ecx
	andq	%r14, %rax
	movq	96(%rsp), %rdx          # 8-byte Reload
	subq	%rdx, %rcx
	andq	%r14, %rcx
	cmpq	%rcx, %rax
	ja	.LBB41_374
.LBB41_287:                             # %if.end1189
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rdi
	movq	%r10, %rbx
	callq	subreg_lowpart_p
	movq	%r14, %r8
	testq	%r8, %rax
	je	.LBB41_288
# BB#289:                               # %land.lhs.true1192
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rbx), %r13
	movl	(%r13), %eax
	movq	$15, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$510, %rdx              # imm = 0x1FE
	movzbl	mode_bitsize(%rdx), %ecx
	movq	96(%rsp), %rdx          # 8-byte Reload
	cmpq	%rdx, %rcx
	movq	%rbx, %r10
	jae	.LBB41_290
# BB#291:                               # %land.lhs.true1192
                                        #   in Loop: Header=BB41_90 Depth=1
	orq	%r12, %r15
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	56(%rsp), %rdi          # 8-byte Reload
	jne	.LBB41_294
	jmp	.LBB41_469
.LBB41_297:                             # %sw.bb1239
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r13, %r13
	je	.LBB41_299
# BB#298:                               # %land.lhs.true1241
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rcx
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	$76, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	%r8, %r15
	movq	%r9, %rbx
	movq	%r10, %r12
	movq	%r11, %r13
	callq	simplify_binary_operation
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %r11
	movq	%r12, %r10
	movq	%rbx, %r9
	movq	%r15, %r8
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB41_243
.LBB41_299:                             # %if.end1252
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	jne	.LBB41_469
# BB#300:                               # %land.lhs.true1255
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rax
	movq	const_int_rtx+504(%rip), %rcx
	cmpq	%rcx, %rax
	movq	40(%rsp), %rdx          # 8-byte Reload
	jne	.LBB41_469
# BB#301:                               # %land.lhs.true1261
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$129, %rcx
	movq	%r11, %rcx
	jne	.LBB41_303
# BB#302:                               # %land.lhs.true1261
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
.LBB41_303:                             # %land.lhs.true1261
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	64(%rsp), %rsi          # 8-byte Reload
	andq	%rsi, %rcx
	cmpq	$1, %rcx
	movq	120(%rsp), %rcx         # 8-byte Reload
	jne	.LBB41_469
# BB#304:                               # %if.then1271
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %r13
	orq	$102, %rdx
	movq	%rcx, %r15
	movq	%rdx, %rax
	jmp	.LBB41_240
.LBB41_305:                             # %sw.bb1282
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r13, %r13
	je	.LBB41_310
# BB#306:                               # %land.lhs.true1284
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, 112(%rsp)          # 8-byte Spill
	movq	16(%r10), %rdx
	movq	$75, %rdi
	movq	88(%rsp), %r12          # 8-byte Reload
	movq	%r12, %rsi
	movq	120(%rsp), %rbx         # 8-byte Reload
	movq	%rbx, %rcx
	movq	%r10, %r13
	callq	simplify_binary_operation
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB41_307
# BB#308:                               # %land.lhs.true1297
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r13), %rdx
	movq	$76, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rcx
	callq	simplify_binary_operation
	movq	%rax, %r15
	testq	%r15, %r15
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	%r13, %r10
	jne	.LBB41_309
.LBB41_310:                             # %if.end1308
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$0, 64(%rsp)            # 8-byte Folded Reload
	je	.LBB41_469
# BB#311:                               # %land.lhs.true1310
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$89, %rcx
	jne	.LBB41_469
# BB#312:                               # %land.lhs.true1318
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB41_469
# BB#313:                               # %land.lhs.true1329
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rcx), %rcx
	movq	96(%rsp), %rdx          # 8-byte Reload
	decq	%rdx
	andq	%r8, %rdx
	cmpq	%rdx, %rcx
	jne	.LBB41_469
# BB#314:                               # %land.lhs.true1343
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %r15
	movq	8(%rax), %rdi
	movq	16(%r10), %rsi
	movq	%r8, %r14
	movq	%r10, %rbx
	callq	rtx_equal_p
	movq	%r14, %r8
	testq	%r8, %rax
	je	.LBB41_315
# BB#316:                               # %if.then1355
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rbx), %r13
	movq	56(%rsp), %rax          # 8-byte Reload
	jmp	.LBB41_351
.LBB41_246:                             # %sw.bb923
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r13, %r13
	je	.LBB41_248
# BB#247:                               # %land.lhs.true925
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	$77, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	%rsi, %rcx
	movq	%r8, %r15
	movq	%r9, %rbx
	movq	%r10, %r12
	movq	%r11, %r13
	callq	simplify_unary_operation
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %r11
	movq	%r12, %r10
	movq	%rbx, %r9
	movq	%r15, %r8
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB41_243
.LBB41_248:                             # %if.end933
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	jne	.LBB41_469
# BB#249:                               # %if.end937
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r11, %rbx
	movq	%r9, %r12
	movq	%r8, %r15
	cmpq	$0, 64(%rsp)            # 8-byte Folded Reload
	je	.LBB41_257
# BB#250:                               # %land.lhs.true939
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	movzbl	(%r13), %eax
	cmpq	$129, %rax
	je	.LBB41_254
# BB#251:                               # %lor.lhs.false947
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$64, 96(%rsp)           # 8-byte Folded Reload
	ja	.LBB41_257
# BB#252:                               # %land.lhs.true950
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	%r10, %r14
	callq	nonzero_bits
	movq	%r14, %r10
	movq	96(%rsp), %rcx          # 8-byte Reload
	decq	%rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	jne	.LBB41_257
# BB#253:                               # %land.lhs.true950.if.then961_crit_edge
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
.LBB41_254:                             # %if.then961
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %r8
	cmpq	$0, 40(%rsp)            # 8-byte Folded Reload
	movq	%rbx, %rax
	movq	120(%rsp), %rcx         # 8-byte Reload
	jne	.LBB41_256
# BB#255:                               # %if.then961
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_256:                             # %if.then961
                                        #   in Loop: Header=BB41_90 Depth=1
	orq	$102, %rax
	movq	%rcx, %r15
	jmp	.LBB41_240
.LBB41_352:                             # %sw.bb1517
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	movq	%r11, %r12
	jne	.LBB41_354
# BB#353:                               # %sw.bb1517
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %r12
.LBB41_354:                             # %sw.bb1517
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	%r13, %r12
	je	.LBB41_355
# BB#364:                               # %land.lhs.true1522
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, 112(%rsp)          # 8-byte Spill
	movq	%r8, %r14
	movq	8(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$87, %rcx
	jne	.LBB41_367
# BB#365:                               # %land.lhs.true1530
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %rdx
	movq	const_int_rtx+520(%rip), %rsi
	cmpq	%rsi, %rdx
	jne	.LBB41_367
# BB#366:                               # %if.then1539
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rdx
	movq	16(%rax), %rcx
	movq	$90, %rdi
	movq	88(%rsp), %rbx          # 8-byte Reload
	movq	%rbx, %rsi
	movq	%r10, %r15
	callq	gen_rtx_fmt_ee
	movq	$1, %rcx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	simplify_and_const_int
	movq	%rax, %r13
.LBB41_374:                             #   in Loop: Header=BB41_90 Depth=1
	movq	120(%rsp), %r15         # 8-byte Reload
	movq	112(%rsp), %rax         # 8-byte Reload
	jmp	.LBB41_239
.LBB41_343:                             # %sw.bb1478
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$0, 64(%rsp)            # 8-byte Folded Reload
	je	.LBB41_469
# BB#344:                               # %land.lhs.true1480
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$75, %rcx
	jne	.LBB41_469
# BB#345:                               # %land.lhs.true1488
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r11, %r12
	movq	%r8, %r15
	movq	16(%rax), %rcx
	movq	const_int_rtx+504(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB41_346
# BB#347:                               # %land.lhs.true1497
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %r14
	movq	8(%rax), %rdi
	movq	16(%r10), %rsi
	movq	%r10, %rbx
	callq	rtx_equal_p
	movq	%r15, %r8
	testq	%r8, %rax
	je	.LBB41_348
# BB#349:                               # %if.then1509
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rbx), %r13
	cmpq	$0, 56(%rsp)            # 8-byte Folded Reload
	movq	%r12, %rax
	jne	.LBB41_351
# BB#350:                               # %if.then1509
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_351:                             # %if.then1509
                                        #   in Loop: Header=BB41_90 Depth=1
	addq	$105, %rax
	movq	120(%rsp), %r15         # 8-byte Reload
	jmp	.LBB41_240
.LBB41_317:                             # %sw.bb1363
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r13, %r13
	je	.LBB41_469
# BB#318:                               # %land.lhs.true1365
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %r12
	movq	%r8, %r14
	movq	16(%r10), %rdx
	movq	$85, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	%r10, %rbx
	callq	simplify_binary_operation
	movq	%rax, %r15
	testq	%r15, %r15
	je	.LBB41_338
# BB#319:                               # %if.then1372
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rbx), %r13
	movq	%r12, %rax
.LBB41_239:                             # %while.cond.backedge
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r14, %r8
	jmp	.LBB41_240
.LBB41_241:                             # %sw.bb903
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r13, %r13
	je	.LBB41_244
# BB#242:                               # %land.lhs.true905
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$86, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	%rsi, %rcx
	movq	%r8, %r15
	movq	%r9, %rbx
	movq	%r10, %r12
	callq	simplify_unary_operation
	movq	%r12, %r10
	movq	%rbx, %r9
	movq	%r15, %r8
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB41_243
.LBB41_244:                             # %if.end913
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$0, 64(%rsp)            # 8-byte Folded Reload
	movq	56(%rsp), %rax          # 8-byte Reload
	je	.LBB41_469
# BB#245:                               # %if.then915
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	leaq	104(%rax,%rax,2), %rax
	movq	120(%rsp), %r15         # 8-byte Reload
	jmp	.LBB41_240
.LBB41_405:                             # %sw.bb1965
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	16(%r10), %rdi
	movzbl	(%rdi), %eax
	cmpq	$54, %rax
	jne	.LBB41_406
# BB#411:                               # %land.lhs.true1973
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rdi), %rcx
	testq	%rcx, %rcx
	js	.LBB41_406
# BB#412:                               # %land.lhs.true1982
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, %r15
	xorq	$1, %r15
	leaq	(%rcx,%r15), %rax
	cmpq	$63, %rax
	jg	.LBB41_406
# BB#413:                               # %land.lhs.true1994
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, %rbx
	movq	%r9, 112(%rsp)          # 8-byte Spill
	movq	$1, %rax
	shlq	%cl, %rax
	decq	%rax
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	%r11, %r13
	movq	%r8, %r12
	testq	%rcx, %rax
	jne	.LBB41_407
# BB#414:                               # %land.lhs.true1994
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$64, 96(%rsp)           # 8-byte Folded Reload
	ja	.LBB41_407
# BB#415:                               # %land.lhs.true2009
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	%r10, 104(%rsp)         # 8-byte Spill
	callq	nonzero_bits
	movq	104(%rsp), %r10         # 8-byte Reload
	movq	16(%r10), %rdi
	movq	8(%rdi), %rdx
	addq	%rdx, %r15
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	%r15, %rcx
	shrq	%cl, %rsi
	notq	%rsi
	testq	%rsi, %rax
	jne	.LBB41_407
# BB#416:                               # %if.then2030
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rax          # 8-byte Reload
	andq	%rax, %rdi
	movq	%rdx, %rcx
	shrq	%cl, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	%r10, %r14
	callq	trunc_int_for_mode
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	8(%r14), %r13
	movq	%rax, %r15
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	%r12, %r8
	jmp	.LBB41_240
.LBB41_260:                             # %sw.bb978
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r13, %r13
	je	.LBB41_263
# BB#261:                               # %land.lhs.true980
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rcx
	movzbl	(%rcx), %eax
	cmpq	$54, %rax
	jne	.LBB41_263
# BB#262:                               # %land.lhs.true988
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	$91, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	%r8, %r15
	movq	%r9, %rbx
	movq	%r10, %r12
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movq	%r11, %r13
	callq	simplify_binary_operation
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %r11
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	%r12, %r10
	movq	%rbx, %r9
	movq	%r15, %r8
	movq	%rax, %r15
	testq	%r15, %r15
	jne	.LBB41_243
.LBB41_263:                             # %if.end999
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	movq	%r11, %rax
	jne	.LBB41_265
# BB#264:                               # %if.end999
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_265:                             # %if.end999
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	64(%rsp), %rcx          # 8-byte Reload
	andq	%rcx, %rax
	cmpq	$1, %rax
	jne	.LBB41_271
# BB#266:                               # %land.lhs.true1004
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB41_271
# BB#267:                               # %land.lhs.true1004
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$64, 96(%rsp)           # 8-byte Folded Reload
	ja	.LBB41_271
# BB#268:                               # %if.then1015
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rdx
	movq	8(%rax), %rax
	movq	96(%rsp), %rcx          # 8-byte Reload
	decq	%rcx
	andq	%r8, %rcx
	movq	%r8, %r12
	subq	%rax, %rcx
	movq	$1, %rax
	shlq	%cl, %rax
	xorq	%rdi, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rcx
	movq	%r11, %rbx
	callq	simplify_and_const_int
	movq	%rax, %r13
	cmpq	$0, 40(%rsp)            # 8-byte Folded Reload
	movq	%rbx, %rax
	jne	.LBB41_270
	jmp	.LBB41_269
.LBB41_271:                             # %sw.bb1034
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	movq	%r11, %rax
	jne	.LBB41_273
# BB#272:                               # %sw.bb1034
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_273:                             # %sw.bb1034
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	%r13, %rax
	cmpq	$1, %rax
	movq	120(%rsp), %rax         # 8-byte Reload
	jne	.LBB41_469
# BB#274:                               # %if.then1039
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	movq	%rax, %r15
	movq	%r9, %rax
	jmp	.LBB41_240
.LBB41_424:                             # %sw.bb2107
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %rbx
	testq	%rdi, %rdi
	movq	%r11, %rax
	jne	.LBB41_426
# BB#425:                               # %sw.bb2107
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_426:                             # %sw.bb2107
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r8, %r12
	andq	%r13, %rax
	cmpq	$1, %rax
	jne	.LBB41_429
# BB#427:                               # %land.lhs.true2112
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB41_429
# BB#428:                               # %if.then2120
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rcx
	movq	8(%rax), %r8
	xorq	%rdi, %rdi
	movq	$90, %rsi
	movq	88(%rsp), %rdx          # 8-byte Reload
	callq	simplify_shift_const
	jmp	.LBB41_436
.LBB41_275:                             # %sw.bb1044
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r15, %r15
	jne	.LBB41_469
# BB#276:                               # %land.lhs.true1046
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	movzbl	2(%r13), %eax
	movzbl	mode_bitsize(%rax,%rax), %ecx
	cmpq	$64, %rcx
	ja	.LBB41_469
# BB#277:                               # %land.lhs.true1058
                                        #   in Loop: Header=BB41_90 Depth=1
	addq	%r8, %rcx
	movq	$1, %rax
	shlq	%cl, %rax
	jmp	.LBB41_296
.LBB41_292:                             # %sw.bb1207
                                        #   in Loop: Header=BB41_90 Depth=1
	orq	%r13, %r15
	cmpq	$1, %r15
	jne	.LBB41_469
# BB#293:                               # %sw.bb1207.land.lhs.true1211_crit_edge
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	movl	(%r13), %eax
.LBB41_294:                             # %land.lhs.true1211
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movzbl	mode_bitsize(%rax,%rax), %ecx
	cmpq	$64, %rcx
	ja	.LBB41_469
# BB#295:                               # %land.lhs.true1223
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	mode_mask_array(,%rax,8), %rax
.LBB41_296:                             # %land.lhs.true1223
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	%rax, %rdi
	movq	120(%rsp), %r15         # 8-byte Reload
	movq	%r9, %rax
	jb	.LBB41_240
	jmp	.LBB41_469
.LBB41_232:                             # %sw.bb859
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB41_468
# BB#233:                               # %land.lhs.true867
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rcx
	movq	const_int_rtx+520(%rip), %rdx
	cmpq	%rdx, %rcx
	movq	%r11, %rcx
	jne	.LBB41_235
# BB#234:                               # %land.lhs.true867
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
.LBB41_235:                             # %land.lhs.true867
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	%r13, %rcx
	cmpq	$1, %rcx
	jne	.LBB41_468
# BB#236:                               # %land.lhs.true867
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	jne	.LBB41_468
# BB#237:                               # %land.lhs.true878
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %rdi
	movq	%r8, %r14
	movq	%r9, %rbx
	movq	%r10, %r15
	callq	exact_log2_wide
	movq	%r15, %r10
	movq	%rbx, %r9
	movq	%r14, %r8
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	js	.LBB41_468
# BB#238:                               # %if.then888
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	24(%r10), %r13
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	movq	%r8, %r14
	movq	%r9, %rbx
	callq	gen_rtx_CONST_INT
	movq	%rax, %r15
	movq	%rbx, %rdi
	callq	reverse_condition
	jmp	.LBB41_239
.LBB41_468:                             # %sw.bb897
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rdi
	movq	%r8, %r14
	movq	%r9, %rbx
	movq	%r10, %r15
	callq	expand_compound_operation
	movq	%r15, %r10
	movq	%rbx, %r9
	movq	%r14, %r8
	movq	%rax, %r13
	cmpq	%r10, %r13
	movq	120(%rsp), %r15         # 8-byte Reload
	movq	%r9, %rax
	jne	.LBB41_240
	jmp	.LBB41_469
.LBB41_406:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, %rbx
	movq	%r11, %r13
	movq	%r9, 112(%rsp)          # 8-byte Spill
	movq	%r8, %r12
.LBB41_407:                             # %if.end2046
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$0, 64(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	movq	88(%rsp), %rsi          # 8-byte Reload
	je	.LBB41_417
# BB#408:                               # %land.lhs.true2048
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	(%rdi), %eax
	cmpq	$54, %rax
	jne	.LBB41_417
# BB#409:                               # %land.lhs.true2048
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$64, 96(%rsp)           # 8-byte Folded Reload
	ja	.LBB41_417
# BB#410:                               # %if.then2059
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rdx
	movq	8(%rdi), %rax
	movq	96(%rsp), %rcx          # 8-byte Reload
	decq	%rcx
	andq	%r8, %rcx
	movq	%r8, %r12
	subq	%rax, %rcx
	movq	$1, %rax
	shlq	%cl, %rax
	xorq	%rdi, %rdi
	movq	%rax, %rcx
	callq	simplify_and_const_int
	movq	%r13, %rcx
	movq	%rax, %r13
	cmpq	$0, 40(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %rax
	jne	.LBB41_270
.LBB41_269:                             # %if.then1015
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_270:                             # %if.then1015
                                        #   in Loop: Header=BB41_90 Depth=1
	orq	$102, %rax
	movq	120(%rsp), %r15         # 8-byte Reload
	movq	%r12, %r8
	jmp	.LBB41_240
.LBB41_243:                             # %if.then909
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	movq	%r9, %rax
	jmp	.LBB41_240
.LBB41_429:                             # %if.end2132
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r15, %r15
	movq	%r12, %r8
	movq	%rbx, %r9
	jne	.LBB41_446
# BB#430:                               # %land.lhs.true2134
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$54, %rdx
	jne	.LBB41_438
# BB#431:                               # %land.lhs.true2142
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r11, %r15
	movq	%r9, %rbx
	movq	%r8, %r12
	movq	8(%r10), %rcx
	movzbl	(%rcx), %edx
	cmpq	$87, %rdx
	jne	.LBB41_437
# BB#432:                               # %land.lhs.true2150
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB41_437
# BB#433:                               # %land.lhs.true2162
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %rax
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rdi          # 8-byte Reload
	subq	%rax, %rdi
	movq	$1, %rsi
	movq	$1, %rdx
	movq	%r10, 104(%rsp)         # 8-byte Spill
	callq	mode_for_size
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %r10         # 8-byte Reload
	movq	%rax, %rcx
	andq	%r12, %rcx
	cmpq	$51, %rcx
	je	.LBB41_437
# BB#434:                               # %land.lhs.true2175
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	mode_mask_array(,%rdx,8), %rdx
	movq	$1, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	leaq	1(%rdi,%rsi), %rcx
	cmpq	%rdx, %rcx
	jbe	.LBB41_435
.LBB41_437:                             # %if.end2193.land.lhs.true2195_crit_edge
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rax
	movl	(%rax), %ecx
	movq	%r12, %r8
	movq	%rbx, %r9
	movq	%r15, %r11
.LBB41_438:                             # %land.lhs.true2195
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$54, %rcx
	jne	.LBB41_446
# BB#439:                               # %land.lhs.true2203
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rcx
	movzbl	(%rcx), %edx
	cmpq	$75, %rdx
	jne	.LBB41_446
# BB#440:                               # %land.lhs.true2211
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rcx), %rdx
	movzbl	(%rdx), %edx
	cmpq	$54, %rdx
	jne	.LBB41_446
# BB#441:                               # %land.lhs.true2222
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$87, %rdx
	jne	.LBB41_446
# BB#442:                               # %land.lhs.true2233
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB41_446
# BB#443:                               # %land.lhs.true2248
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %rax
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rdi          # 8-byte Reload
	subq	%rax, %rdi
	movq	$1, %rsi
	movq	$1, %rdx
	movq	%r8, %r12
	movq	%r9, %r15
	movq	%r10, %rbx
	movq	%r13, %r14
	movq	%r11, %r13
	callq	mode_for_size
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	%r13, %r11
	movq	%r14, %r13
	movq	%rbx, %r10
	movq	%r15, %r9
	movq	%r12, %r8
	movq	%rax, %r15
                                        # kill: RAX<def> R15<kill>
	andq	%r8, %rax
	cmpq	$51, %rax
	je	.LBB41_446
# BB#444:                               # %land.lhs.true2261
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	mode_mask_array(,%rax,8), %rax
	movq	$1, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	leaq	1(%rdi,%rdx), %rcx
	cmpq	%rax, %rcx
	jbe	.LBB41_445
.LBB41_446:                             # %sw.bb2297
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rsi
	movzbl	(%rsi), %eax
	cmpq	$54, %rax
	jne	.LBB41_452
# BB#447:                               # %land.lhs.true2305
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rsi), %rax
	testq	%rax, %rax
	js	.LBB41_452
# BB#448:                               # %land.lhs.true2314
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$63, %rax
	jg	.LBB41_452
# BB#449:                               # %land.lhs.true2314
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$64, 96(%rsp)           # 8-byte Folded Reload
	ja	.LBB41_452
# BB#450:                               # %land.lhs.true2326
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movq	%rdi, %r13
	movq	%r9, %r12
	movq	%r8, %r15
	movq	8(%r10), %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	%r10, %rbx
	callq	nonzero_bits
	movq	%rbx, %r10
	movq	16(%r10), %rsi
	movq	8(%rsi), %rdx
	movq	$1, %rdi
	movq	%rdx, %rcx
	shlq	%cl, %rdi
	decq	%rdi
	testq	%rax, %rdi
	jne	.LBB41_451
# BB#458:                               # %land.lhs.true2342
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	(%r10), %eax
	movq	%rdx, %rcx
	movq	32(%rsp), %rbx          # 8-byte Reload
	shrq	%cl, %rbx
	xorq	%rdi, %rdi
	cmpq	$90, %rax
	movq	%r12, %r9
	je	.LBB41_460
# BB#459:                               # %cond.true
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$1, %rcx
	movq	%rbx, %rdi
	shrq	%cl, %rdi
	incq	%rdi
.LBB41_460:                             # %cond.end
                                        #   in Loop: Header=BB41_90 Depth=1
	addq	%r13, %rdi
	cmpq	%rbx, %rdi
	movq	%r13, %rdi
	movq	%r15, %r8
	movabsq	$0, %r11
	movq	16(%rsp), %r13          # 8-byte Reload
	ja	.LBB41_452
# BB#461:                               # %if.then2371
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rbx
	movq	%r8, %r14
	cmpq	$90, %rax
	jne	.LBB41_462
# BB#463:                               # %if.then2376
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdi, %r15
	movq	%r9, %rdi
	callq	unsigned_condition
	movq	%r15, %rdi
	movq	16(%rbx), %rcx
	movq	8(%rcx), %rdx
	movq	%rax, %r12
	jmp	.LBB41_464
.LBB41_417:                             # %if.end2077
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$0, 56(%rsp)            # 8-byte Folded Reload
	movq	%r13, %rax
	jne	.LBB41_419
# BB#418:                               # %if.end2077
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_419:                             # %if.end2077
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	%rbx, %rax
	cmpq	$1, %rax
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	120(%rsp), %rbx         # 8-byte Reload
	jne	.LBB41_469
# BB#420:                               # %land.lhs.true2082
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	(%rdi), %eax
	cmpq	$54, %rax
	jne	.LBB41_469
# BB#421:                               # %land.lhs.true2090
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %r12
	movq	8(%rdi), %rax
	movq	96(%rsp), %rcx          # 8-byte Reload
	decq	%rcx
	andq	%r8, %rcx
	cmpq	%rcx, %rax
	jne	.LBB41_422
# BB#423:                               # %if.then2101
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rdx
	xorq	%rdi, %rdi
	movq	$1, %rcx
	movq	%r8, %r14
	callq	simplify_and_const_int
	movq	%r14, %r8
	movq	%rax, %r13
	movq	%rbx, %r15
	movq	%r12, %rax
	jmp	.LBB41_240
.LBB41_117:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%r14, %r8
	jmp	.LBB41_126
.LBB41_355:                             # %if.end1673.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, %rsi
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%r9, 112(%rsp)          # 8-byte Spill
	movq	%r8, %r14
	cmpq	$65, 96(%rsp)           # 8-byte Folded Reload
	sbbq	%r8, %r8
	andq	$1, %r8
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	%rdi, %rbx
.LBB41_356:                             # %if.end1711
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rbx, 104(%rsp)         # 8-byte Spill
	movq	%r11, %r13
	orq	%r15, %rsi
	cmpq	$1, %rsi
	jne	.LBB41_385
# BB#357:                               # %land.lhs.true1715
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB41_385
# BB#358:                               # %land.lhs.true1723
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %rax
	andq	%rax, %rdi
	incq	%rdi
	movq	%r10, %r15
	movq	%r8, %rbx
	callq	exact_log2_wide
	movq	%rbx, %r8
	movq	%r15, %r10
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	js	.LBB41_385
# BB#359:                               # %land.lhs.true1737
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rax, %rcx
	andq	%r14, %rcx
	movq	56(%rsp), %rdx          # 8-byte Reload
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jne	.LBB41_385
# BB#360:                               # %land.lhs.true1742
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$1, %rsi
	movq	$1, %rdx
	movq	%rax, %rdi
	movq	%r10, %rbx
	movq	%r8, %r15
	callq	mode_for_size
	movq	%r15, %r8
	movq	%rbx, %r10
	movq	%rax, %rcx
	andq	%r14, %rcx
	cmpq	$51, %rcx
	jne	.LBB41_361
.LBB41_385:                             # %if.end1751
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rdi
	movzbl	(%rdi), %eax
	cmpq	$63, %rax
	jne	.LBB41_398
# BB#386:                               # %land.lhs.true1759
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rdi), %rax
	movzbl	2(%rax), %eax
	movzbl	mode_bitsize(%rax,%rax), %eax
	cmpq	%rax, 96(%rsp)          # 8-byte Folded Reload
	ja	.LBB41_398
# BB#387:                               # %land.lhs.true1774
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %r15
	movq	%r8, %rbx
	callq	subreg_lowpart_p
	movq	%rbx, %rdi
	movq	%r15, %r10
	testq	%r14, %rax
	je	.LBB41_398
# BB#388:                               # %land.lhs.true1780
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rcx
	movq	8(%rcx), %rax
	movzbl	2(%rcx), %edx
	movzbl	2(%rax), %ecx
	movzbl	mode_size(%rdx), %edx
	movzbl	mode_size(%rcx), %esi
	cmpq	%rsi, %rdx
	ja	.LBB41_398
# BB#389:                               # %land.lhs.true1804
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %r8
	movzbl	(%r8), %edx
	cmpq	$54, %rdx
	movq	%r13, %rdx
	jne	.LBB41_391
# BB#390:                               # %land.lhs.true1804
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rdx
.LBB41_391:                             # %land.lhs.true1804
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	%rdi, %rdx
	cmpq	$1, %rdx
	jne	.LBB41_398
# BB#392:                               # %land.lhs.true1815
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	mode_bitsize(%rcx,%rcx), %edx
	cmpq	$64, %rdx
	ja	.LBB41_398
# BB#393:                               # %land.lhs.true1830
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r8), %rdx
	movq	104(%rsp), %rsi         # 8-byte Reload
	notq	%rsi
	testq	%rsi, %rdx
	jne	.LBB41_398
# BB#394:                               # %land.lhs.true1841
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	mode_mask_array(,%rcx,8), %rsi
	movq	%rsi, %rdi
	notq	%rdi
	testq	%rdi, %rdx
	jne	.LBB41_398
# BB#395:                               # %land.lhs.true1841
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	104(%rsp), %rdi         # 8-byte Reload
	cmpq	%rdi, %rdx
	je	.LBB41_398
# BB#396:                               # %land.lhs.true1841
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	%rsi, %rdx
	je	.LBB41_398
# BB#397:                               # %if.then1892
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$83, %rdi
	movq	%rcx, %rsi
	movq	%rax, %rdx
	movq	%r8, %rcx
	callq	gen_binary
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	jmp	.LBB41_362
.LBB41_398:                             # %if.end1913
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	$1, %r12
	je	.LBB41_399
# BB#400:                               # %land.lhs.true1918
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rax
	movq	const_int_rtx+520(%rip), %rcx
	cmpq	%rcx, %rax
	movq	%r14, %r8
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	jne	.LBB41_469
# BB#401:                               # %land.lhs.true1924
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rax
	movzbl	(%rax), %ecx
	cmpq	$90, %rcx
	movq	48(%rsp), %rbx          # 8-byte Reload
	jne	.LBB41_469
# BB#402:                               # %land.lhs.true1932
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %r15
	movq	%r8, %r12
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$86, %rdx
	jne	.LBB41_403
# BB#404:                               # %if.then1943
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rcx), %rdx
	movq	16(%rax), %rcx
	movq	$90, %rdi
	movq	%rsi, %r14
	callq	gen_rtx_fmt_ee
	movq	$1, %rcx
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	simplify_and_const_int
	orq	$102, %rbx
.LBB41_436:                             # %while.cond.backedge
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rax, %r13
	movq	120(%rsp), %r15         # 8-byte Reload
	movq	%rbx, %rax
	movq	%r12, %r8
	jmp	.LBB41_240
.LBB41_257:                             # %if.end968
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	%r10, %rbx
	callq	num_sign_bit_copies
	movq	%r15, %r8
	andq	%r8, %rax
	cmpq	$2, %rax
	jb	.LBB41_258
# BB#259:                               # %if.then972
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rbx), %r13
	movq	%r12, %rdi
	movq	%r8, %r14
	callq	swap_condition
	movq	%r14, %r8
	movq	120(%rsp), %r15         # 8-byte Reload
	jmp	.LBB41_240
.LBB41_367:                             # %if.end1551
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rdx          # 8-byte Reload
	cmpq	$65, %rdx
	sbbq	%r8, %r8
	cmpq	$64, %rdx
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	%rdi, %rbx
	ja	.LBB41_377
# BB#368:                               # %land.lhs.true1559
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %rdx
	movzbl	(%rdx), %esi
	cmpq	$54, %rsi
	movq	%rdi, %rbx
	jne	.LBB41_377
# BB#369:                               # %land.lhs.true1567
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$90, %rcx
	movq	%rdi, %rbx
	jne	.LBB41_377
# BB#370:                               # %land.lhs.true1575
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$54, %rsi
	movq	%rdi, %rbx
	jne	.LBB41_377
# BB#371:                               # %land.lhs.true1586
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rcx), %rcx
	cmpq	$63, %rcx
	movq	%rdi, %rbx
	ja	.LBB41_377
# BB#372:                               # %if.then1610
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rdx), %rbx
	andq	%rdi, %rbx
	shlq	%cl, %rbx
	cmpq	$1, %rbx
	ja	.LBB41_377
# BB#373:                               # %land.lhs.true1633
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r8, 64(%rsp)           # 8-byte Spill
	movq	%r13, 16(%rsp)          # 8-byte Spill
	movq	8(%rax), %r13
	movzbl	(%r13), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	je	.LBB41_374
# BB#375:                               # %lor.lhs.false1647
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, 104(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	callq	get_last_value
	testq	%rax, %rax
	jne	.LBB41_383
# BB#376:                               #   in Loop: Header=BB41_90 Depth=1
	movq	104(%rsp), %r10         # 8-byte Reload
	movabsq	$0, %rax
	movq	%rax, %r11
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	jmp	.LBB41_377
.LBB41_307:                             # %if.then1291
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r13), %r13
	movq	112(%rsp), %rax         # 8-byte Reload
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	jmp	.LBB41_240
.LBB41_309:                             # %if.then1304
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	16(%r10), %r13
	movq	%r9, %rax
	jmp	.LBB41_240
.LBB41_451:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %r8
	movq	%r12, %r9
	movabsq	$0, %r11
	movq	%r13, %rdi
	movq	16(%rsp), %r13          # 8-byte Reload
.LBB41_452:                             # %if.end2390
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	jne	.LBB41_469
# BB#453:                               # %if.end2390
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	64(%rsp), %rax          # 8-byte Reload
	orq	%rax, %r13
	movq	120(%rsp), %rcx         # 8-byte Reload
	je	.LBB41_469
# BB#454:                               # %land.lhs.true2397
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	(%rsi), %eax
	cmpq	$54, %rax
	jne	.LBB41_469
# BB#455:                               # %land.lhs.true2405
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rsi), %rax
	movq	96(%rsp), %rdx          # 8-byte Reload
	decq	%rdx
	andq	%r8, %rdx
	cmpq	%rdx, %rax
	jne	.LBB41_469
# BB#456:                               # %if.then2416
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	movq	$107, %rax
	cmpq	$0, 48(%rsp)            # 8-byte Folded Reload
	je	.LBB41_465
# BB#457:                               #   in Loop: Header=BB41_90 Depth=1
	movq	%rcx, %r15
	jmp	.LBB41_240
.LBB41_465:                             # %lor.rhs2422
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	%r8, %r9
	cmpq	$105, %r9
	movq	%r11, %rax
	jne	.LBB41_467
# BB#466:                               # %lor.rhs2422
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_467:                             # %lor.rhs2422
                                        #   in Loop: Header=BB41_90 Depth=1
	leaq	104(%rax,%rax,2), %rax
	movq	%rcx, %r15
	.align	16, 0x90
.LBB41_240:                             # %while.cond.backedge
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	(%r15), %ecx
	cmpq	$54, %rcx
	movq	%rax, %r9
	movq	%r13, %r10
	movq	%r15, 120(%rsp)         # 8-byte Spill
	je	.LBB41_90
	jmp	.LBB41_469
.LBB41_462:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %r12
.LBB41_464:                             # %if.end2378
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, %rcx
	shlq	%cl, %rdi
	movq	%rdi, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	8(%rbx), %r13
	movq	%rax, %r15
	movq	%r12, %rax
	jmp	.LBB41_239
.LBB41_361:                             # %if.then1746
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rsi
	movq	%rax, %rdi
.LBB41_362:                             # %while.cond.backedge
                                        #   in Loop: Header=BB41_90 Depth=1
	callq	gen_lowpart_for_combine
	movq	%rax, %r13
	jmp	.LBB41_374
.LBB41_435:                             # %if.then2185
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rcx
	movq	8(%rcx), %rsi
	movq	%rax, %rdi
	callq	gen_lowpart_for_combine
	jmp	.LBB41_436
.LBB41_445:                             # %if.then2271
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rax
	movq	8(%rax), %rsi
	movq	16(%r10), %rcx
	movq	16(%rax), %rdx
	movq	8(%rsi), %r14
	movzbl	2(%r10), %esi
	movq	$89, %rdi
	movq	%r8, %r12
	movq	%r9, 112(%rsp)          # 8-byte Spill
	callq	gen_binary
	movq	%rax, %rbx
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	gen_lowpart_for_combine
	movq	$75, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	gen_binary
	movq	%r12, %r8
	movq	%rax, %r13
	movq	120(%rsp), %r15         # 8-byte Reload
	movq	112(%rsp), %rax         # 8-byte Reload
	jmp	.LBB41_240
.LBB41_383:                             # %land.lhs.true1657
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	movq	104(%rsp), %r10         # 8-byte Reload
	movabsq	$0, %rax
	movq	%rax, %r11
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	jne	.LBB41_377
# BB#384:                               # %land.lhs.true1657.if.then1665_crit_edge
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %rax
	movq	8(%rax), %r13
	jmp	.LBB41_374
.LBB41_377:                             # %land.lhs.true1678
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, %rsi
	movq	16(%r10), %rax
	movzbl	(%rax), %ecx
	andq	$1, %r8
	cmpq	$54, %rcx
	jne	.LBB41_356
# BB#378:                               # %land.lhs.true1678
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	96(%rsp), %rcx          # 8-byte Reload
	cmpq	$64, %rcx
	ja	.LBB41_356
# BB#379:                               # %land.lhs.true1689
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%rax), %rax
	andq	%rdi, %rax
	decq	%rcx
	movq	$1, %r8
	movq	$1, %rdx
	shlq	%cl, %rdx
	cmpq	%rdx, %rax
	jne	.LBB41_356
# BB#380:                               # %if.then1704
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	8(%r10), %r13
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r11, %rax
	jne	.LBB41_382
# BB#381:                               # %if.then1704
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_382:                             # %if.then1704
                                        #   in Loop: Header=BB41_90 Depth=1
	leaq	104(%rax,%rax,2), %rax
	movq	120(%rsp), %r15         # 8-byte Reload
	jmp	.LBB41_239
	.align	16, 0x90
.LBB41_90:                              # %while.body572
                                        # =>This Inner Loop Header: Depth=1
	movl	(%r10), %eax
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	movl	mode_class(,%rsi,4), %ecx
	cmpq	$1, %rcx
	je	.LBB41_96
# BB#91:                                # %land.lhs.true587
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rsi, %rsi
	jne	.LBB41_92
# BB#93:                                # %land.lhs.true590
                                        #   in Loop: Header=BB41_90 Depth=1
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	je	.LBB41_96
# BB#94:                                # %lor.lhs.false595
                                        #   in Loop: Header=BB41_90 Depth=1
	movzbl	rtx_class(%rax), %eax
	cmpq	$60, %rax
	jne	.LBB41_95
.LBB41_96:                              # %if.end604
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, 104(%rsp)         # 8-byte Spill
	movq	%r9, %rbx
	movq	%r8, %r13
	movzbl	mode_bitsize(%rsi,%rsi), %eax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	8(%r15), %rdi
	movq	%rsi, %r15
	callq	trunc_int_for_mode
	movq	%rax, %r14
	xorq	%rdi, %rdi
	movq	%r14, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, 120(%rsp)         # 8-byte Spill
	testq	%r14, %r14
	jne	.LBB41_98
# BB#97:                                #   in Loop: Header=BB41_90 Depth=1
	movq	%r13, %r8
	movq	%rbx, %r9
	movq	%r15, %rdx
	jmp	.LBB41_125
	.align	16, 0x90
.LBB41_98:                              # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rbx, %rsi
	movq	%rsi, %r12
	movq	%r13, %rdx
	andq	%rdx, %r12
	movq	%rsi, %rax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rcx, %rax
	cmpq	$102, %rax
	movabsq	$0, %rdi
	movq	%rdi, %rax
	jne	.LBB41_100
# BB#99:                                # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_100:                             # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$104, %r12
	movq	%rdi, %rcx
	jne	.LBB41_102
# BB#101:                               # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
.LBB41_102:                             # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	orq	%rcx, %rax
	cmpq	$108, %r12
	movq	%rdi, %rcx
	jne	.LBB41_104
# BB#103:                               # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
.LBB41_104:                             # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rsi, %rbx
	movq	%rdx, %r13
	orq	%rcx, %rax
	cmpq	$107, %r12
	movq	%rdi, %rcx
	jne	.LBB41_106
# BB#105:                               # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
.LBB41_106:                             # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	orq	%rcx, %rax
	cmpq	$111, %r12
	movq	%rdi, %rcx
	jne	.LBB41_108
# BB#107:                               # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
.LBB41_108:                             # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	orq	%rcx, %rax
	cmpq	$1, %rax
	jne	.LBB41_113
# BB#109:                               # %land.lhs.true611
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$64, 96(%rsp)           # 8-byte Folded Reload
	ja	.LBB41_113
# BB#110:                               # %land.lhs.true632
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r14, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB41_113
# BB#111:                               # %land.lhs.true636
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	%r15, %rsi
	callq	nonzero_bits
	cmpq	%r14, %rax
	jne	.LBB41_113
# BB#112:                               # %if.then640
                                        #   in Loop: Header=BB41_90 Depth=1
	addq	$-103, %rbx
	movq	%r13, %r8
	andq	%r8, %rbx
	cmpq	$2, %rbx
	movq	$102, %r9
	movq	%r15, %rdx
	jae	.LBB41_121
	jmp	.LBB41_124
	.align	16, 0x90
.LBB41_113:                             # %if.end648
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$-1, %r14
	movq	%r15, %rdx
	jne	.LBB41_114
# BB#115:                               # %land.lhs.true651
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$-1, %r15
	movq	%rbx, %r9
	leaq	-102(%r9), %rcx
	movq	%r13, %r8
	andq	%r8, %rcx
	cmpq	$9, %rcx
	ja	.LBB41_126
# BB#116:                               # %land.lhs.true651
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r8, %r14
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$603, %rax              # imm = 0x25B
	je	.LBB41_117
# BB#118:                               # %land.lhs.true669
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	%rdx, %rsi
	movq	%r9, %r15
	movq	%rdx, %rbx
	callq	num_sign_bit_copies
	movq	%rbx, %rdx
	movq	%r15, %r9
	movq	$-1, %r15
	movq	%r14, %r8
	andq	%r8, %rax
	movq	96(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jne	.LBB41_126
# BB#119:                               # %if.then673
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$102, %r9
	cmpq	$103, %r12
	je	.LBB41_124
# BB#120:                               # %if.then673
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$106, %r12
	je	.LBB41_124
.LBB41_121:                             # %lor.rhs679
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$108, %r12
	movabsq	$0, %r9
	je	.LBB41_123
# BB#122:                               # %lor.rhs679
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %r9
.LBB41_123:                             # %lor.rhs679
                                        #   in Loop: Header=BB41_90 Depth=1
	orq	$102, %r9
.LBB41_124:                             # %lor.end682
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	const_int_rtx+512(%rip), %rax
	movq	%rax, 120(%rsp)         # 8-byte Spill
	.align	16, 0x90
.LBB41_125:                             # %if.end684
                                        #   in Loop: Header=BB41_90 Depth=1
	xorq	%r15, %r15
	jmp	.LBB41_126
	.align	16, 0x90
.LBB41_114:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%r14, %r15
	movq	%r13, %r8
	movq	%rbx, %r9
.LBB41_126:                             # %if.end684
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	mode_mask_array(,%rdx,8), %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	leaq	-104(%r9), %rax
	andq	%r8, %rax
	cmpq	$7, %rax
	jbe	.LBB41_128
# BB#127:                               #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	movq	104(%rsp), %r10         # 8-byte Reload
	movabsq	$0, %r11
.LBB41_212:                             # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %rax
	andq	%r8, %rax
	cmpq	$103, %rax
	movq	%r11, %rcx
	jne	.LBB41_214
# BB#213:                               # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
.LBB41_214:                             # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	cmpq	$102, %rax
	movq	%r11, %rcx
	jne	.LBB41_216
# BB#215:                               # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
.LBB41_216:                             # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	andq	%rdx, %rcx
	cmpq	$102, %rcx
	movq	%r11, %r13
	jne	.LBB41_218
# BB#217:                               # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rcx
	movq	%rcx, %r13
.LBB41_218:                             # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$107, %rax
	movq	%r11, %rdx
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	jne	.LBB41_220
# BB#219:                               # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rdx
.LBB41_220:                             # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	cmpq	$104, %rax
	movq	%r11, %rdx
	jne	.LBB41_222
# BB#221:                               # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rdx
.LBB41_222:                             # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	je	.LBB41_147
# BB#223:                               # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$107, %rax
	je	.LBB41_147
	jmp	.LBB41_224
	.align	16, 0x90
.LBB41_128:                             # %if.end684
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	104(%rsp), %r10         # 8-byte Reload
	jmpq	*.LJTI41_0(,%rax,8)
.LBB41_140:                             # %sw.bb714
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r10, %rbx
	movq	$104, %r9
	testq	%r15, %r15
	jle	.LBB41_141
# BB#151:                               # %if.then717
                                        #   in Loop: Header=BB41_90 Depth=1
	decq	%r15
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r8, %r14
	callq	gen_rtx_CONST_INT
	movq	%r14, %r8
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	%rbx, %r10
	movq	88(%rsp), %rdx          # 8-byte Reload
.LBB41_152:                             # %sw.bb722
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r8, %r14
	testq	%r15, %r15
	jns	.LBB41_154
# BB#153:                               # %if.then725
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r10, %rbx
	incq	%r15
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	$104, %r9
	jmp	.LBB41_133
.LBB41_129:                             # %sw.bb
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r10, %rbx
	movq	$107, %r9
	testq	%r15, %r15
	jle	.LBB41_141
# BB#130:                               # %if.then687
                                        #   in Loop: Header=BB41_90 Depth=1
	decq	%r15
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r8, %r14
	callq	gen_rtx_CONST_INT
	movq	%r14, %r8
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	%rbx, %r10
	movq	88(%rsp), %rdx          # 8-byte Reload
.LBB41_131:                             # %sw.bb692
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r8, %r14
	testq	%r15, %r15
	jns	.LBB41_134
# BB#132:                               # %if.then695
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r10, %rbx
	incq	%r15
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	$107, %r9
.LBB41_133:                             # %sw.epilog.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %rdi
	movq	%r14, %r8
	jmp	.LBB41_142
.LBB41_185:                             # %sw.bb780
                                        #   in Loop: Header=BB41_90 Depth=1
	cmpq	$2, %r15
	jl	.LBB41_193
# BB#186:                               # %if.then783
                                        #   in Loop: Header=BB41_90 Depth=1
	decq	%r15
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r8, %r14
	movq	%r10, %rbx
	movq	%r15, %r12
	movq	%rdx, %r15
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdx
	movq	%r12, %r15
	movq	%rbx, %r10
	movq	%r14, %r8
	movq	%rax, 120(%rsp)         # 8-byte Spill
.LBB41_187:                             # %sw.bb798
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	$102, %r9
	testq	%r15, %r15
	je	.LBB41_188
# BB#202:                               # %if.else802
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	cmpq	$64, %rax
	movabsq	$0, %r11
	ja	.LBB41_203
# BB#204:                               # %land.lhs.true805
                                        #   in Loop: Header=BB41_90 Depth=1
	leaq	-1(%rax), %rcx
	movq	$1, %rax
	shlq	%cl, %rax
	decq	%rax
	xorq	%rdi, %rdi
	cmpq	%rax, %r15
	movq	%r11, %rax
	jne	.LBB41_206
# BB#205:                               # %land.lhs.true805
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_206:                             # %land.lhs.true805
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	const_int_rtx+512(%rip), %rcx
	je	.LBB41_208
# BB#207:                               # %land.lhs.true805
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %rdi
.LBB41_208:                             # %land.lhs.true805
                                        #   in Loop: Header=BB41_90 Depth=1
	je	.LBB41_210
# BB#209:                               # %land.lhs.true805
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	120(%rsp), %rcx         # 8-byte Reload
.LBB41_210:                             # %land.lhs.true805
                                        #   in Loop: Header=BB41_90 Depth=1
	xorq	$1, %rax
	leaq	107(%rax,%rax), %r9
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	jmp	.LBB41_211
.LBB41_163:                             # %sw.bb745
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%r15, %r15
	jle	.LBB41_169
# BB#164:                               # %if.then748
                                        #   in Loop: Header=BB41_90 Depth=1
	decq	%r15
	xorq	%rdi, %rdi
	movq	%r15, %rsi
	movq	%r8, %r14
	movq	%r10, %rbx
	movq	%r15, %r12
	movq	%rdx, %r15
	callq	gen_rtx_CONST_INT
	movq	%r15, %rdx
	movq	%r12, %r15
	movq	%rbx, %r10
	movq	%r14, %r8
	movq	%rax, 120(%rsp)         # 8-byte Spill
.LBB41_165:                             # %sw.bb763
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	$103, %r9
	testq	%r15, %r15
	jne	.LBB41_166
.LBB41_188:                             #   in Loop: Header=BB41_90 Depth=1
	movabsq	$0, %r11
	movq	%r9, %rax
	andq	%r8, %rax
	cmpq	$103, %rax
	movq	%r11, %rdx
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	jne	.LBB41_190
# BB#189:                               # %sw.epilog.thread3561
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rdx
.LBB41_190:                             # %sw.epilog.thread3561
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	cmpq	$102, %rax
	movq	%r11, %rax
	jne	.LBB41_192
# BB#191:                               # %sw.epilog.thread3561
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_192:                             # %sw.epilog.thread3561
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	movq	$1, %r13
	movq	$0, 40(%rsp)            # 8-byte Folded Spill
	xorq	%rdi, %rdi
	jmp	.LBB41_224
.LBB41_141:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %rdi
.LBB41_142:                             # %sw.epilog.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %rax
	andq	%r8, %rax
	cmpq	$107, %rax
	movabsq	$0, %r11
	movq	%r11, %rdx
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	movq	%rbx, %r10
	jne	.LBB41_144
# BB#143:                               # %sw.epilog.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rdx
.LBB41_144:                             # %sw.epilog.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	cmpq	$104, %rax
	movq	%r11, %rax
	jne	.LBB41_146
# BB#145:                               # %sw.epilog.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_146:                             # %sw.epilog.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rax, 56(%rsp)          # 8-byte Spill
	xorq	%r13, %r13
	movq	$0, 48(%rsp)            # 8-byte Folded Spill
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
.LBB41_147:                             # %land.end
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %rax
	andq	%rcx, %rax
	cmpq	$108, %rax
	movq	%r11, %r15
	jne	.LBB41_149
# BB#148:                               # %land.end
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %r15
.LBB41_149:                             # %land.end
                                        #   in Loop: Header=BB41_90 Depth=1
	testq	%rdi, %rdi
	jne	.LBB41_150
# BB#227:                               # %land.lhs.true842
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	cmpq	$64, %rax
	ja	.LBB41_228
# BB#229:                               # %if.then848
                                        #   in Loop: Header=BB41_90 Depth=1
	leaq	(%rax,%r8), %rcx
	movq	$1, 64(%rsp)            # 8-byte Folded Spill
	movq	$1, %rdx
	shlq	%cl, %rdx
	xorq	%rcx, %rcx
	movq	%r8, %r12
	xorq	%r8, %r8
	movq	%r10, %rdi
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	%r9, %rbx
	movq	%r13, %r14
	movq	%r11, %r13
	callq	force_to_mode
	xorq	%rdi, %rdi
	movq	%r13, %r11
	movq	%r14, %r13
	movq	%rbx, %r9
	movq	%r12, %r8
	movq	%rax, %r10
	jmp	.LBB41_230
	.align	16, 0x90
.LBB41_150:                             #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 64(%rsp)            # 8-byte Folded Spill
	jmp	.LBB41_230
.LBB41_228:                             #   in Loop: Header=BB41_90 Depth=1
	movq	$1, 64(%rsp)            # 8-byte Folded Spill
	xorq	%rdi, %rdi
	jmp	.LBB41_230
.LBB41_154:                             # %if.else728
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	testq	%r15, %r15
	movq	$105, %r9
	movq	%r14, %r8
	jne	.LBB41_155
# BB#158:                               # %if.else728
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %rax
	movq	%r8, %r15
	movq	96(%rsp), %rbx          # 8-byte Reload
	cmpq	$64, %rbx
	ja	.LBB41_159
# BB#160:                               # %land.lhs.true734
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rdi
	movq	%r10, %r14
	movq	%rdx, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	callq	nonzero_bits
	leaq	-1(%rbx), %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	movabsq	$0, %r11
	movq	%r11, %rax
	jne	.LBB41_162
# BB#161:                               # %land.lhs.true734
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_162:                             # %land.lhs.true734
                                        #   in Loop: Header=BB41_90 Depth=1
	xorq	$1, %rax
	leaq	102(%rax,%rax,2), %r9
	jmp	.LBB41_139
.LBB41_134:                             # %if.else697
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	testq	%r15, %r15
	movq	$106, %r9
	movq	%r14, %r8
	jne	.LBB41_155
# BB#135:                               # %if.else697
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %rax
	movq	%r8, %r15
	movq	96(%rsp), %rbx          # 8-byte Reload
	cmpq	$64, %rbx
	ja	.LBB41_159
# BB#136:                               # %land.lhs.true703
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r10, %rdi
	movq	%r10, %r14
	movq	%rdx, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	callq	nonzero_bits
	leaq	-1(%rbx), %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	%rdx, %rax
	movabsq	$0, %r11
	movq	%r11, %rax
	jne	.LBB41_138
# BB#137:                               # %land.lhs.true703
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %rax
.LBB41_138:                             # %land.lhs.true703
                                        #   in Loop: Header=BB41_90 Depth=1
	xorq	$1, %rax
	leaq	103(%rax,%rax,2), %r9
.LBB41_139:                             # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	xorq	%rdi, %rdi
	movq	%r15, %r8
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	movq	%r14, %r10
	jmp	.LBB41_212
.LBB41_166:                             # %if.else767
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	96(%rsp), %rax          # 8-byte Reload
	cmpq	$64, %rax
	movabsq	$0, %r11
	ja	.LBB41_167
# BB#178:                               # %land.lhs.true770
                                        #   in Loop: Header=BB41_90 Depth=1
	leaq	-1(%rax), %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	decq	%rdx
	movq	const_int_rtx+512(%rip), %rax
	xorq	%rdi, %rdi
	cmpq	%rdx, %r15
	je	.LBB41_180
# BB#179:                               # %land.lhs.true770
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %rdi
.LBB41_180:                             # %land.lhs.true770
                                        #   in Loop: Header=BB41_90 Depth=1
	je	.LBB41_182
# BB#181:                               # %land.lhs.true770
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
.LBB41_182:                             # %land.lhs.true770
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$104, %r9
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	je	.LBB41_184
# BB#183:                               # %land.lhs.true770
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$110, %r9
.LBB41_184:                             # %land.lhs.true770
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rax, 120(%rsp)         # 8-byte Spill
	jmp	.LBB41_212
.LBB41_193:                             # %if.else786
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rax          # 8-byte Reload
	cmpq	$64, %rax
	ja	.LBB41_194
# BB#195:                               # %land.lhs.true789
                                        #   in Loop: Header=BB41_90 Depth=1
	leaq	-1(%rax), %rcx
	movq	$1, %rax
	shlq	%cl, %rax
	xorq	%rdi, %rdi
	cmpq	%rax, %r15
	movabsq	$0, %r11
	movq	%r11, %r9
	jne	.LBB41_197
# BB#196:                               # %land.lhs.true789
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %r9
.LBB41_197:                             # %land.lhs.true789
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	const_int_rtx+512(%rip), %rax
	je	.LBB41_199
# BB#198:                               # %land.lhs.true789
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %rdi
.LBB41_199:                             # %land.lhs.true789
                                        #   in Loop: Header=BB41_90 Depth=1
	je	.LBB41_201
# BB#200:                               # %land.lhs.true789
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
.LBB41_201:                             # %land.lhs.true789
                                        #   in Loop: Header=BB41_90 Depth=1
	xorq	$1, %r9
	addq	$107, %r9
	movq	%rax, 120(%rsp)         # 8-byte Spill
.LBB41_211:                             # %sw.epilog
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	jmp	.LBB41_212
.LBB41_169:                             # %if.else751
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rax          # 8-byte Reload
	cmpq	$64, %rax
	ja	.LBB41_170
# BB#171:                               # %land.lhs.true754
                                        #   in Loop: Header=BB41_90 Depth=1
	leaq	-1(%rax), %rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	movq	const_int_rtx+512(%rip), %rax
	xorq	%rdi, %rdi
	cmpq	%rdx, %r15
	movabsq	$0, %r11
	je	.LBB41_173
# BB#172:                               # %land.lhs.true754
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r15, %rdi
.LBB41_173:                             # %land.lhs.true754
                                        #   in Loop: Header=BB41_90 Depth=1
	je	.LBB41_175
# BB#174:                               # %land.lhs.true754
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	120(%rsp), %rax         # 8-byte Reload
.LBB41_175:                             # %land.lhs.true754
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$104, %r9
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	je	.LBB41_177
# BB#176:                               # %land.lhs.true754
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$111, %r9
.LBB41_177:                             # %land.lhs.true754
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%rax, 120(%rsp)         # 8-byte Spill
	jmp	.LBB41_212
.LBB41_203:                             #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	movq	$109, %r9
	jmp	.LBB41_168
.LBB41_167:                             #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	movq	$110, %r9
.LBB41_168:                             # %land.end.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 40(%rsp)            # 8-byte Folded Spill
	xorq	%r13, %r13
	movq	$0, 48(%rsp)            # 8-byte Folded Spill
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
	movq	%r15, %rdi
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	jmp	.LBB41_224
.LBB41_155:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	jmp	.LBB41_156
.LBB41_159:                             #   in Loop: Header=BB41_90 Depth=1
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	$0, 40(%rsp)            # 8-byte Folded Spill
	xorq	%r13, %r13
	movq	$0, 48(%rsp)            # 8-byte Folded Spill
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
	movq	%rax, %rdi
	movq	%r15, %r8
	jmp	.LBB41_157
.LBB41_194:                             #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	movq	$108, %r9
	jmp	.LBB41_156
.LBB41_170:                             #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 56(%rsp)            # 8-byte Folded Spill
	movq	$111, %r9
.LBB41_156:                             # %land.end.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 40(%rsp)            # 8-byte Folded Spill
	xorq	%r13, %r13
	movq	$0, 48(%rsp)            # 8-byte Folded Spill
	movq	$0, 24(%rsp)            # 8-byte Folded Spill
	movq	%r15, %rdi
.LBB41_157:                             # %land.end.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	movabsq	$0, %r11
.LBB41_224:                             # %land.end.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	%r9, %rax
	andq	%rcx, %rax
	cmpq	$108, %rax
	movq	%r11, %r15
	jne	.LBB41_226
# BB#225:                               # %land.end.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movabsq	$1, %r15
.LBB41_226:                             # %land.end.thread
                                        #   in Loop: Header=BB41_90 Depth=1
	movq	$0, 64(%rsp)            # 8-byte Folded Spill
.LBB41_230:                             # %if.end856
                                        #   in Loop: Header=BB41_90 Depth=1
	movl	(%r10), %edx
	movq	%rdx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	leaq	-63(%rax), %rcx
	andq	%r8, %rcx
	cmpq	$70, %rcx
	jbe	.LBB41_231
	jmp	.LBB41_469
.LBB41_88:
	movq	%r15, 120(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	%rbx, %r10
.LBB41_469:                             # %while.end2431
	movq	%r9, %r14
	movq	%r8, %r12
	movq	const_int_rtx+512(%rip), %rax
	movq	$74, %rsi
	movq	120(%rsp), %rbx         # 8-byte Reload
	cmpq	%rax, %rbx
	je	.LBB41_471
# BB#470:                               # %select.mid
	movq	$47, %rsi
.LBB41_471:                             # %select.end
	movq	%r10, %rdi
	callq	make_compound_operation
	movq	%rax, %r13
	movq	$47, %rsi
	movq	%rbx, %rdi
	callq	make_compound_operation
	movzbl	(%r13), %ecx
	movq	%rax, %rbx
	cmpq	$63, %rcx
	jne	.LBB41_472
# BB#473:                               # %land.lhs.true2441
	movq	%r13, %rdi
	callq	subreg_lowpart_p
	testq	%r12, %rax
	je	.LBB41_472
# BB#474:                               # %land.lhs.true2444
	movq	8(%r13), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	movq	%r14, %r8
	jne	.LBB41_475
# BB#476:                               # %land.lhs.true2452
	movzbl	2(%r13), %edx
	movl	mode_class(,%rdx,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB41_477
# BB#478:                               # %land.lhs.true2460
	movq	$16, %rcx
	shrq	%cl, %rax
	andq	$255, %rax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$1, %rcx
	jne	.LBB41_479
# BB#480:                               # %land.lhs.true2460
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%r8, %rcx
	cmpq	$102, %rcx
	jne	.LBB41_481
# BB#482:                               # %if.then2477
	movzbl	mode_size(%rdx), %ecx
	movzbl	mode_size(%rax), %edx
	cmpq	%rdx, %rcx
	jbe	.LBB41_484
# BB#483:                               # %if.then2495
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r8, %rbx
	callq	gen_lowpart_for_combine
.LBB41_490:                             # %if.end2566
	movq	%rbx, %r8
	movq	%rax, %rbx
	jmp	.LBB41_491
.LBB41_472:
	movq	%r13, %r15
	movq	%r14, %r8
	jmp	.LBB41_491
.LBB41_475:
	movq	%r13, %r15
	jmp	.LBB41_491
.LBB41_477:
	movq	%r13, %r15
	jmp	.LBB41_491
.LBB41_92:
	movq	%r15, 120(%rsp)         # 8-byte Spill
	jmp	.LBB41_469
.LBB41_479:
	movq	%r13, %r15
	jmp	.LBB41_491
.LBB41_481:
	movq	%r13, %r15
	jmp	.LBB41_491
.LBB41_484:                             # %if.else2503
	movzbl	mode_bitsize(%rax,%rax), %ecx
	cmpq	$64, %rcx
	ja	.LBB41_485
# BB#486:                               # %land.lhs.true2515
	movq	%rbx, %r14
	movq	%r8, %rbx
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	nonzero_bits
	movzbl	2(%r13), %ecx
	movq	mode_mask_array(,%rcx,8), %rcx
	notq	%rcx
	testq	%rcx, %rax
	jne	.LBB41_487
# BB#488:                               # %if.then2535
	movq	8(%r13), %rax
	movzbl	2(%rax), %edi
	movq	%r14, %rsi
	callq	gen_lowpart_for_combine
	movq	8(%r13), %rcx
	movzbl	2(%rcx), %esi
	movq	%rax, %r15
	movq	%r15, %rdi
	callq	nonzero_bits
	movzbl	2(%r13), %ecx
	movq	mode_mask_array(,%rcx,8), %rcx
	notq	%rcx
	testq	%rcx, %rax
	je	.LBB41_489
.LBB41_487:
	movq	%r13, %r15
	movq	%rbx, %r8
	movq	%r14, %rbx
	jmp	.LBB41_491
.LBB41_95:
	movq	%r15, 120(%rsp)         # 8-byte Spill
	jmp	.LBB41_469
.LBB41_485:
	movq	%r13, %r15
.LBB41_491:                             # %if.end2566
	movzbl	2(%r15), %r13d
	testq	%r13, %r13
	je	.LBB41_527
# BB#492:                               # %land.lhs.true2572
	movl	mode_class(,%r13,4), %eax
	cmpq	$1, %rax
	jne	.LBB41_527
# BB#493:                               # %land.lhs.true2577
	movl	target_flags(%rip), %eax
	movzbl	mode_size(%r13), %edx
	movq	$23, %rcx
	shrq	%cl, %rax
	andq	$4, %rax
	addq	$4, %rax
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	andq	%rcx, %rax
	cmpq	%rax, %rdx
	jae	.LBB41_527
# BB#494:                               # %land.lhs.true2586
	movq	%rbx, 120(%rsp)         # 8-byte Spill
	movq	%r8, %rbx
	movq	$74, %rdi
	movq	%r13, %rsi
	callq	have_insn_for
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB41_496
# BB#495:
	movq	%rbx, %r8
	movq	120(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB41_527
.LBB41_496:                             # %for.cond2593.preheader
	movzbl	mode_wider_mode(%r13), %r12d
	testq	%r12, %r12
	movq	%rbx, %r8
	movq	%r8, 112(%rsp)          # 8-byte Spill
	je	.LBB41_497
# BB#498:                               # %land.rhs2596.lr.ph
	leaq	-102(%r8), %rax
	andq	%rdx, %rax
	movq	%rax, 104(%rsp)         # 8-byte Spill
	.align	16, 0x90
.LBB41_499:                             # %land.rhs2596
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, %rbx
	andq	$255, %r12
	movzbl	mode_bitsize(%r12,%r12), %r14d
	cmpq	$64, %r14
	ja	.LBB41_500
# BB#501:                               # %for.body2604
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	$74, %rdi
	movq	%r12, %rsi
	callq	have_insn_for
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB41_520
# BB#502:                               # %if.then2607
                                        #   in Loop: Header=BB41_499 Depth=1
	cmpq	$9, 104(%rsp)           # 8-byte Folded Reload
	ja	.LBB41_508
# BB#503:                               # %if.then2607
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	$1, %rax
	movq	104(%rsp), %rcx         # 8-byte Reload
	shlq	%cl, %rax
	testq	$963, %rax              # imm = 0x3C3
	je	.LBB41_508
# BB#504:                               # %land.lhs.true2625
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	mode_mask_array(,%r13,8), %rbx
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	nonzero_bits
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	notq	%rbx
	testq	%rbx, %rax
	jne	.LBB41_508
# BB#505:                               # %land.rhs2633
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	120(%rsp), %rdi         # 8-byte Reload
	movzbl	(%rdi), %eax
	cmpq	$54, %rax
	movq	$1, %rcx
	je	.LBB41_506
# BB#507:                               # %land.end2648
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	%r12, %rsi
	callq	nonzero_bits
	movq	$1, %rcx
	testq	%rbx, %rax
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	je	.LBB41_510
	.align	16, 0x90
.LBB41_508:                             # %lor.lhs.false2651
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rdx, %rbx
	callq	num_sign_bit_copies
	movq	%rbx, %rdx
	movzbl	mode_bitsize(%r13,%r13), %esi
	andq	%rdx, %rax
	subq	%rsi, %r14
	andq	%rdx, %r14
	cmpq	%r14, %rax
	jbe	.LBB41_517
# BB#509:                               # %land.lhs.true2662
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%r12, %rsi
	movq	%rdx, %rbx
	callq	num_sign_bit_copies
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	%rbx, %rdx
	andq	%rdx, %rax
	xorq	%rcx, %rcx
	cmpq	%r14, %rax
	ja	.LBB41_510
.LBB41_517:                             # %if.end2709
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%rax, 120(%rsp)         # 8-byte Folded Reload
	jne	.LBB41_520
# BB#518:                               # %land.lhs.true2712
                                        #   in Loop: Header=BB41_499 Depth=1
	movq	112(%rsp), %rbx         # 8-byte Reload
	andq	%rdx, %rbx
	cmpq	$104, %rbx
	je	.LBB41_522
# BB#519:                               # %land.lhs.true2712
                                        #   in Loop: Header=BB41_499 Depth=1
	cmpq	$107, %rbx
	jne	.LBB41_520
.LBB41_522:                             # %land.lhs.true2718
                                        #   in Loop: Header=BB41_499 Depth=1
	cmpq	$64, %rsi
	jbe	.LBB41_523
	.align	16, 0x90
.LBB41_520:                             # %for.cond2593.backedge
                                        #   in Loop: Header=BB41_499 Depth=1
	movzbl	mode_wider_mode(%r12), %r12d
	testq	%r12, %r12
	movq	112(%rsp), %r8          # 8-byte Reload
	jne	.LBB41_499
# BB#521:
	movq	120(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB41_527
.LBB41_497:
	movq	120(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB41_527
.LBB41_500:
	movq	120(%rsp), %rbx         # 8-byte Reload
	jmp	.LBB41_527
.LBB41_338:
	movq	%r14, %r8
.LBB41_258:
	movq	%r12, %r9
	movq	%rbx, %r10
	jmp	.LBB41_469
.LBB41_336:
	movq	%r12, %r9
	jmp	.LBB41_469
.LBB41_340:
	movq	%r14, %r8
	movq	%r12, %r9
	jmp	.LBB41_469
.LBB41_523:                             # %if.then2724
	movq	%r12, %rdi
	movq	%rsi, %r13
	movq	%r15, %rsi
	movq	%rdx, %r14
	callq	gen_lowpart_for_combine
	movq	%rax, %r15
	addq	%r14, %r13
	movq	$1, %rsi
	movq	%r13, %rcx
	shlq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$83, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %r15
	cmpq	$107, %rbx
	je	.LBB41_524
# BB#525:                               # %if.then2724
	movabsq	$1, %r8
	jmp	.LBB41_526
.LBB41_506:
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
.LBB41_510:                             # %if.then2673
	movq	%rcx, %r14
	movq	%rdx, %rbx
	movzbl	(%r15), %eax
	cmpq	$83, %rax
	jne	.LBB41_513
# BB#511:                               # %land.lhs.true2678
	movq	$83, %rdi
	movq	%r13, %rsi
	callq	have_insn_for
	testq	%rbx, %rax
	jne	.LBB41_513
# BB#512:                               # %if.then2681
	movq	8(%r15), %rsi
	movq	%r12, %rdi
	callq	gen_lowpart_for_combine
	movq	16(%r15), %rsi
	movq	%rax, %rbx
	movq	%r12, %rdi
	callq	gen_lowpart_for_combine
	movq	$83, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	%rax, %r15
.LBB41_513:                             # %if.end2691
	movq	120(%rsp), %rbx         # 8-byte Reload
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	gen_lowpart_for_combine
	movq	%rax, %r15
	testq	%r14, %r14
	je	.LBB41_516
# BB#514:                               # %land.lhs.true2694
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB41_516
# BB#515:                               # %if.then2699
	movq	8(%rbx), %rax
	movq	mode_mask_array(,%r13,8), %rsi
	andq	%rax, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	%rax, %rbx
.LBB41_516:                             # %if.end2707
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	gen_lowpart_for_combine
	movq	%rax, %rbx
	movq	112(%rsp), %r8          # 8-byte Reload
	jmp	.LBB41_527
.LBB41_489:                             # %if.then2559
	movq	%r15, %rax
	movq	8(%r13), %r15
	jmp	.LBB41_490
.LBB41_524:
	movabsq	$0, %r8
.LBB41_526:                             # %if.then2724
	movq	120(%rsp), %rbx         # 8-byte Reload
	orq	$102, %r8
.LBB41_527:                             # %if.end2744
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%r15, (%rax)
	movq	80(%rsp), %rax          # 8-byte Reload
	movq	%rbx, (%rax)
	movq	%r8, %rax
	addq	$128, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB41_288:
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	%rbx, %r10
	jmp	.LBB41_469
.LBB41_346:
	movq	%r15, %r8
	jmp	.LBB41_469
.LBB41_348:
	movq	%r14, %r9
	movq	%rbx, %r10
	jmp	.LBB41_469
.LBB41_399:
	movq	%r14, %r8
	movq	112(%rsp), %r9          # 8-byte Reload
	jmp	.LBB41_469
.LBB41_422:
	movq	%r12, %r9
	jmp	.LBB41_469
.LBB41_403:
	movq	%r12, %r8
	movq	%r15, %r10
	jmp	.LBB41_469
.LBB41_315:
	movq	%r15, %r9
	movq	%rbx, %r10
	jmp	.LBB41_469
.LBB41_290:
	movq	112(%rsp), %r9          # 8-byte Reload
	jmp	.LBB41_469
.Ltmp620:
	.size	simplify_comparison, .Ltmp620-simplify_comparison
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI41_0:
	.quad	.LBB41_140
	.quad	.LBB41_152
	.quad	.LBB41_131
	.quad	.LBB41_129
	.quad	.LBB41_185
	.quad	.LBB41_187
	.quad	.LBB41_165
	.quad	.LBB41_163
.LJTI41_1:
	.quad	.LBB41_278
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_297
	.quad	.LBB41_305
	.quad	.LBB41_246
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_352
	.quad	.LBB41_343
	.quad	.LBB41_317
	.quad	.LBB41_241
	.quad	.LBB41_405
	.quad	.LBB41_260
	.quad	.LBB41_424
	.quad	.LBB41_446
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_321
	.quad	.LBB41_275
	.quad	.LBB41_292
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_271
	.quad	.LBB41_469
	.quad	.LBB41_469
	.quad	.LBB41_468
	.quad	.LBB41_232

	.text
	.align	16, 0x90
	.type	make_compound_operation,@function
make_compound_operation:                # @make_compound_operation
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp627:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp628:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp629:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp630:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp631:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp632:
	.cfi_def_cfa_offset 96
.Ltmp633:
	.cfi_offset %rbx, -48
.Ltmp634:
	.cfi_offset %r12, -40
.Ltmp635:
	.cfi_offset %r13, -32
.Ltmp636:
	.cfi_offset %r14, -24
.Ltmp637:
	.cfi_offset %r15, -16
	movq	%rdi, %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	movq	%rsi, %rcx
	andq	%rbx, %rcx
	cmpq	$74, %rcx
	movq	$47, %rcx
	je	.LBB42_2
# BB#1:                                 # %entry
	movq	%rsi, %rcx
.LBB42_2:                               # %entry
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movl	(%rax), %r12d
.LBB42_3:                               # %tailrecurse
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	%r12, %r13
	andq	$65535, %r13            # imm = 0xFFFF
	movq	$16, %rcx
	shrq	%cl, %r12
	movq	$66, %rcx
	leaq	-75(%r13), %rax
	andq	%rbx, %rax
	cmpq	$2, %rax
	jb	.LBB42_9
# BB#4:                                 # %tailrecurse
                                        #   in Loop: Header=BB42_3 Depth=1
	cmpq	$66, %r13
	je	.LBB42_9
# BB#5:                                 # %tailrecurse
                                        #   in Loop: Header=BB42_3 Depth=1
	cmpq	$74, %r13
	je	.LBB42_7
# BB#6:                                 # %lor.lhs.false11
                                        #   in Loop: Header=BB42_3 Depth=1
	movzbl	rtx_class(%r13), %eax
	cmpq	$60, %rax
	jne	.LBB42_8
.LBB42_7:                               # %land.lhs.true
                                        #   in Loop: Header=BB42_3 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movq	const_int_rtx+512(%rip), %rcx
	cmpq	%rcx, %rax
	movq	$74, %rcx
	je	.LBB42_9
.LBB42_8:                               # %cond.false21
                                        #   in Loop: Header=BB42_3 Depth=1
	movq	24(%rsp), %rcx          # 8-byte Reload
	.align	16, 0x90
.LBB42_9:                               # %cond.end28
                                        #   in Loop: Header=BB42_3 Depth=1
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	andq	$255, %r12
	cmpq	$82, %r13
	jg	.LBB42_20
# BB#10:                                # %cond.end28
                                        #   in Loop: Header=BB42_3 Depth=1
	cmpq	$63, %r13
	jne	.LBB42_115
# BB#11:                                # %sw.bb609
                                        #   in Loop: Header=BB42_3 Depth=1
	movq	%rbx, %r14
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	8(%rbx), %rdi
	movq	%rsi, %r13
	callq	make_compound_operation
	movq	8(%rbx), %rcx
	movq	%rax, %r15
	movl	(%r15), %eax
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$65535, %rcx            # imm = 0xFFFF
	je	.LBB42_15
# BB#12:                                # %land.lhs.true623
                                        #   in Loop: Header=BB42_3 Depth=1
	movzbl	mode_size(%r12), %edx
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	movzbl	mode_size(%rsi), %ecx
	cmpq	%rcx, %rdx
	jae	.LBB42_15
# BB#13:                                # %land.lhs.true635
                                        #   in Loop: Header=BB42_3 Depth=1
	movq	%rbx, %rdi
	callq	subreg_lowpart_p
	movq	%r14, %rbx
	testq	%rbx, %rax
	je	.LBB42_14
# BB#110:                               # %if.then638
                                        #   in Loop: Header=BB42_3 Depth=1
	movq	$-1, %rdx
	xorq	%rcx, %rcx
	xorq	%r8, %r8
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	force_to_mode
	movl	(%rax), %r12d
	movq	%r12, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	movq	%r13, %rsi
	jne	.LBB42_3
	jmp	.LBB42_121
.LBB42_20:                              # %cond.end28
	leaq	-83(%r13), %rax
	andq	%rbx, %rax
	cmpq	$7, %rax
	ja	.LBB42_115
# BB#21:                                # %cond.end28
	jmpq	*.LJTI42_0(,%rax,8)
.LBB42_26:                              # %sw.bb68
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	$83, %r13
	jne	.LBB42_115
# BB#27:                                # %if.end77
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	%rbx, %r15
	movq	8(%rdx), %rdi
	movl	(%rdi), %ecx
	leaq	8(%rdx), %r14
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$90, %rdx
	jne	.LBB42_30
# BB#28:                                # %land.lhs.true85
	movq	8(%rax), %rdi
	incq	%rdi
	callq	exact_log2_wide
	movq	%rax, %rbx
	movq	$32, %rcx
                                        # kill: RAX<def> RBX<kill>
	shlq	%cl, %rax
	movq	(%r14), %rdi
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB42_29
# BB#36:                                # %if.then95
	movq	%r14, %r13
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r15, %rax
	cmpq	$74, %rax
	jne	.LBB42_37
# BB#38:                                # %if.then95
	movabsq	$1, %r14
	jmp	.LBB42_39
.LBB42_22:                              # %sw.bb
	andq	%rbx, %rsi
	movq	$87, %r13
	cmpq	$66, %rsi
	jne	.LBB42_115
# BB#23:                                # %land.lhs.true32
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB42_115
# BB#24:                                # %land.lhs.true40
	movq	8(%rax), %rax
	cmpq	$63, %rax
	ja	.LBB42_115
# BB#25:                                # %if.then
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	8(%rbx), %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	movq	16(%rbx), %rcx
	movq	8(%rcx), %rcx
	movq	%rax, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	$78, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	$87, %r13
	jmp	.LBB42_113
.LBB42_84:                              # %sw.bb492.loopexit
	movzbl	mode_bitsize(%r12,%r12), %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	$89, %r13
	movq	32(%rsp), %r15          # 8-byte Reload
	jmp	.LBB42_85
.LBB42_77:                              # %sw.bb462
	movq	%rsi, %r14
	movzbl	mode_bitsize(%r12,%r12), %r15d
	movq	$89, %rdi
	movq	%r12, %rsi
	callq	have_insn_for
	testq	%rbx, %rax
	movq	$90, %r13
	je	.LBB42_79
# BB#78:                                # %land.lhs.true465
	movq	$90, %rdi
	movq	$90, %r13
	movq	%r12, %rsi
	callq	have_insn_for
	testq	%rbx, %rax
	jne	.LBB42_79
# BB#80:                                # %land.lhs.true465
	cmpq	$64, %r15
	movq	%r15, %rbx
	movq	32(%rsp), %r15          # 8-byte Reload
	ja	.LBB42_81
# BB#82:                                # %land.lhs.true471
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdi
	movq	%r12, %rsi
	callq	nonzero_bits
	movq	%rbx, %rcx
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	decq	%rcx
	movq	$1, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rax
	movq	%r14, %rsi
	jne	.LBB42_85
# BB#83:                                # %if.then482
	movq	40(%rsp), %rbx          # 8-byte Reload
	movq	8(%rbx), %rdi
	movq	%r15, %rsi
	callq	make_compound_operation
	movq	16(%rbx), %rcx
	movq	$89, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	$90, %r13
	jmp	.LBB42_113
.LBB42_79:
	movq	%r15, 24(%rsp)          # 8-byte Spill
	movq	32(%rsp), %r15          # 8-byte Reload
	movq	%r14, %rsi
	jmp	.LBB42_85
.LBB42_81:
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r14, %rsi
.LBB42_85:                              # %sw.bb492
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rbx
	movq	16(%rax), %r14
	movl	(%rbx), %ecx
	movzbl	(%r14), %eax
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$54, %rax
	jne	.LBB42_94
# BB#86:                                # %sw.bb492
	cmpq	$87, %rcx
	jne	.LBB42_94
# BB#87:                                # %land.lhs.true508
	movq	16(%rbx), %rdx
	movzbl	(%rdx), %edi
	cmpq	$54, %rdi
	jne	.LBB42_94
# BB#88:                                # %land.lhs.true516
	movq	8(%r14), %rdi
	movq	8(%rdx), %rdx
	cmpq	%rdx, %rdi
	jge	.LBB42_89
.LBB42_94:                              # %if.end553
	movzbl	rtx_class(%rcx), %edx
	cmpq	$111, %rdx
	jne	.LBB42_96
# BB#95:
	movq	%r15, 32(%rsp)          # 8-byte Spill
	jmp	.LBB42_115
.LBB42_96:                              # %land.lhs.true561
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	cmpq	$63, %rcx
	jne	.LBB42_102
# BB#97:                                # %land.lhs.true566
	movq	%r15, 32(%rsp)          # 8-byte Spill
	movq	8(%rbx), %rcx
	movzbl	(%rcx), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$54, %rax
	je	.LBB42_98
# BB#99:                                # %land.lhs.true566
	movabsq	$1, %rax
	jmp	.LBB42_100
.LBB42_102:                             # %land.lhs.true577
	movq	%r15, 32(%rsp)          # 8-byte Spill
	cmpq	$54, %rax
	jne	.LBB42_115
	jmp	.LBB42_103
.LBB42_89:                              # %if.then528
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rsi
	cmpq	$74, %rsi
	movabsq	$0, %rax
	movabsq	$1, %rcx
	jne	.LBB42_91
# BB#90:                                # %if.then528
	movq	%rcx, %rax
.LBB42_91:                              # %if.then528
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	8(%rbx), %rdi
	movq	%r15, %rsi
	movq	%r15, 32(%rsp)          # 8-byte Spill
	callq	make_compound_operation
	movq	16(%rbx), %rcx
	movq	8(%r14), %rdx
	movq	8(%rcx), %rcx
	movq	24(%rsp), %r8           # 8-byte Reload
	andq	$65535, %r8             # imm = 0xFFFF
	subq	%rdx, %r8
	subq	%rcx, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	$90, %rcx
	movabsq	$0, %r9
	jne	.LBB42_93
# BB#92:                                # %if.then528
	movabsq	$1, %r9
.LBB42_93:                              # %if.then528
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 8(%rsp)
	xorq	%rcx, %rcx
	movq	$0, (%rsp)
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	make_extraction
	jmp	.LBB42_113
.LBB42_98:
	movabsq	$0, %rax
.LBB42_100:                             # %land.lhs.true566
	cmpq	$111, %rcx
	je	.LBB42_115
# BB#101:                               # %land.lhs.true566
	testq	%rax, %rax
	jne	.LBB42_115
.LBB42_103:                             # %land.lhs.true582
	movq	8(%r14), %rsi
	cmpq	$63, %rsi
	jg	.LBB42_115
# BB#104:                               # %land.lhs.true588
	movq	%rbx, %rdi
	callq	extract_left_shift
	testq	%rax, %rax
	movq	24(%rsp), %rbx          # 8-byte Reload
	je	.LBB42_115
# BB#105:                               # %if.then596
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	16(%rsp), %rdx          # 8-byte Reload
	andq	%rcx, %rdx
	cmpq	$74, %rdx
	movabsq	$0, %r15
	movabsq	$1, %rdx
	movq	%r15, %rcx
	jne	.LBB42_107
# BB#106:                               # %if.then596
	movq	%rdx, %rcx
.LBB42_107:                             # %if.then596
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rax, %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	movq	8(%r14), %rcx
	andq	$65535, %rbx            # imm = 0xFFFF
	subq	%rcx, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	$90, %rcx
	jne	.LBB42_109
# BB#108:                               # %if.then596
	movabsq	$1, %r15
.LBB42_109:                             # %if.then596
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 8(%rsp)
	xorq	%rdx, %rdx
	xorq	%rcx, %rcx
	movq	$0, (%rsp)
	movq	%r12, %rdi
	movq	%rax, %rsi
	movq	%rbx, %r8
	movq	%r15, %r9
	callq	make_extraction
	jmp	.LBB42_113
.LBB42_14:                              # %land.lhs.true635.if.end647_crit_edge
	movq	%rbx, %r14
	movl	(%r15), %eax
.LBB42_15:                              # %if.end647
	andq	$65534, %rax            # imm = 0xFFFE
	cmpq	$120, %rax
	movq	$63, %r13
	jne	.LBB42_115
# BB#16:                                # %land.lhs.true657
	movq	40(%rsp), %rdi          # 8-byte Reload
	callq	subreg_lowpart_p
	testq	%r14, %rax
	je	.LBB42_115
# BB#17:                                # %if.then660
	movl	(%r15), %edi
	movzbl	mode_size(%r12), %eax
	movq	$16, %rcx
	movq	%rdi, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	movzbl	mode_size(%rdx), %ecx
	movq	8(%r15), %rdx
	cmpq	%rcx, %rax
	ja	.LBB42_19
# BB#18:                                # %lor.lhs.false672
	movzbl	2(%rdx), %ecx
	movzbl	mode_size(%rcx), %ecx
	cmpq	%rcx, %rax
	jbe	.LBB42_111
.LBB42_19:                              # %if.then687
	andq	$65535, %rdi            # imm = 0xFFFF
	movq	%r12, %rsi
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_rtx_fmt_e  # TAILCALL
.LBB42_29:                              # %land.lhs.true85.if.else_crit_edge
	movl	(%rdi), %ecx
.LBB42_30:                              # %if.else
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB42_45
# BB#31:                                # %land.lhs.true120
	callq	subreg_lowpart_p
	testq	%r15, %rax
	je	.LBB42_45
# BB#32:                                # %land.lhs.true125
	movq	(%r14), %rax
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$90, %rax
	jne	.LBB42_45
# BB#33:                                # %land.lhs.true136
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movq	8(%rax), %rdi
	incq	%rdi
	callq	exact_log2_wide
	movq	%rax, %rbx
	movq	$32, %rcx
                                        # kill: RAX<def> RBX<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB42_45
# BB#34:                                # %if.then147
	movq	%r14, %rcx
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r15, %rax
	cmpq	$74, %rax
	jne	.LBB42_35
# BB#43:                                # %if.then147
	movabsq	$1, %r14
	jmp	.LBB42_44
.LBB42_45:                              # %if.else180
	movq	(%r14), %rdx
	movl	(%rdx), %ebx
	movq	%rbx, %rax
	andq	$65534, %rax            # imm = 0xFFFE
	cmpq	$84, %rax
	jne	.LBB42_50
# BB#46:                                # %land.lhs.true196
	movq	8(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$90, %rax
	jne	.LBB42_50
# BB#47:                                # %land.lhs.true207
	movq	16(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$90, %rax
	jne	.LBB42_50
# BB#48:                                # %land.lhs.true218
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movq	40(%rsp), %r14          # 8-byte Reload
	movq	16(%r14), %rax
	movq	8(%rax), %rdi
	incq	%rdi
	callq	exact_log2_wide
	movq	8(%r14), %rdx
	movq	$32, %rcx
	shlq	%cl, %rax
	movl	(%rdx), %ebx
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB42_49
# BB#112:                               # %if.then229
	movq	8(%rdx), %rdx
	movq	16(%r14), %rcx
	movq	$83, %rdi
	movq	$83, %r13
	movq	%r12, %rsi
	callq	gen_rtx_fmt_ee
	movq	8(%r14), %rdx
	movq	16(%r14), %rcx
	movq	16(%rdx), %rdx
	movq	%rax, %r14
	movq	$83, %rdi
	movq	%r12, %rsi
	callq	gen_rtx_fmt_ee
	andq	$65535, %rbx            # imm = 0xFFFF
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
	movq	%rax, %rdi
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	jmp	.LBB42_113
.LBB42_37:
	movabsq	$0, %r14
.LBB42_39:                              # %if.then95
	movq	8(%rdi), %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	movq	(%r13), %rcx
	movq	16(%rcx), %r8
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%r14, 8(%rsp)
	xorq	%rdx, %rdx
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%r12, %rdi
	jmp	.LBB42_40
.LBB42_111:                             # %if.else694
	movq	%r12, %rdi
	movq	%rdx, %rsi
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_lowpart_for_combine  # TAILCALL
.LBB42_35:
	movabsq	$0, %r14
.LBB42_44:                              # %if.then147
	movq	%rcx, %r15
	movq	(%r15), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	movq	(%r15), %rcx
	movq	8(%rcx), %rdx
	movq	16(%rdx), %r8
	movq	$32, %rcx
	movzbl	2(%rdx), %edi
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%r14, 8(%rsp)
	xorq	%rdx, %rdx
	movq	$1, %r9
	movq	$0, (%rsp)
.LBB42_40:                              # %sw.epilog
	movq	%rax, %rsi
	movq	%r8, %rcx
	jmp	.LBB42_41
.LBB42_49:
	movq	24(%rsp), %r14          # 8-byte Reload
.LBB42_50:                              # %if.else257
	movzbl	mode_bitsize(%r12,%r12), %eax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$88, %rbx
	jne	.LBB42_54
# BB#51:                                # %land.lhs.true265
	movq	16(%rdx), %rax
	movzbl	(%rax), %eax
	cmpq	$54, %rax
	jne	.LBB42_54
# BB#52:                                # %land.lhs.true276
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movq	8(%rax), %rdi
	incq	%rdi
	callq	exact_log2_wide
	movq	%rax, %rbx
	movq	$32, %rcx
                                        # kill: RAX<def> RBX<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB42_53
# BB#63:                                # %land.lhs.true287
	movq	(%r14), %rdx
	movq	16(%rdx), %rax
	movq	$32, %rcx
	movq	8(%rax), %rax
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	%rax, %rbx
	jg	.LBB42_54
# BB#64:                                # %if.then300
	movq	%r14, %r13
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r15, %rax
	cmpq	$74, %rax
	jne	.LBB42_65
# BB#66:                                # %if.then300
	movabsq	$1, %r14
	jmp	.LBB42_67
.LBB42_53:                              # %land.lhs.true276.if.else324_crit_edge
	movq	(%r14), %rdx
.LBB42_54:                              # %if.else324
	movzbl	(%rdx), %eax
	cmpq	$90, %rax
	jne	.LBB42_68
# BB#55:                                # %land.lhs.true332
	movq	$90, %rdi
	movq	%r12, %rsi
	callq	have_insn_for
	testq	%r15, %rax
	jne	.LBB42_68
# BB#56:                                # %land.lhs.true335
	movq	$89, %rdi
	movq	%r12, %rsi
	callq	have_insn_for
	testq	%r15, %rax
	je	.LBB42_68
# BB#57:                                # %land.lhs.true338
	movq	(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB42_68
# BB#58:                                # %land.lhs.true349
	movq	8(%rcx), %rcx
	testq	%rcx, %rcx
	js	.LBB42_68
# BB#59:                                # %land.lhs.true361
	cmpq	$63, %rcx
	jg	.LBB42_68
# BB#60:                                # %land.lhs.true361
	cmpq	$64, 24(%rsp)           # 8-byte Folded Reload
	ja	.LBB42_68
# BB#61:                                # %if.then376
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	16(%rdx), %rdx
	movq	mode_mask_array(,%r12,8), %rsi
	movq	8(%rdx), %rdx
	shrq	%cl, %rsi
	notq	%rsi
	testq	%rsi, %rdx
	jne	.LBB42_115
# BB#62:                                # %if.then396
	movq	8(%rax), %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	movq	(%r14), %rcx
	movq	16(%rcx), %rcx
	movq	$89, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	gen_rtx_fmt_ee
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	jmp	.LBB42_115
.LBB42_68:                              # %if.else415
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movq	8(%rax), %rdi
	incq	%rdi
	callq	exact_log2_wide
	movq	%rax, %rbx
	movq	$32, %rcx
                                        # kill: RAX<def> RBX<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB42_74
# BB#69:                                # %if.then426
	movq	%r14, %rcx
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r15, %rax
	cmpq	$74, %rax
	jne	.LBB42_70
# BB#71:                                # %if.then426
	movabsq	$1, %r14
	jmp	.LBB42_72
.LBB42_74:                              # %if.else435
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r15, %rax
	cmpq	$74, %rax
	jne	.LBB42_115
# BB#75:                                # %land.lhs.true438
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	%rax, %rbx
	movq	$32, %rcx
                                        # kill: RAX<def> RBX<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB42_115
# BB#76:                                # %if.then448
	movq	(%r14), %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	$1, 8(%rsp)
	xorq	%rcx, %rcx
	movq	$1, %r8
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%r12, %rdi
	movq	%rax, %rsi
	movq	%rbx, %rdx
	jmp	.LBB42_42
.LBB42_70:
	movabsq	$0, %r14
.LBB42_72:                              # %if.then426
	movq	(%rcx), %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	movq	%r14, 8(%rsp)
	xorq	%rdx, %rdx
.LBB42_73:                              # %sw.epilog
	xorq	%rcx, %rcx
	movq	$1, %r9
	movq	$0, (%rsp)
	movq	%r12, %rdi
	movq	%rax, %rsi
.LBB42_41:                              # %sw.epilog
	movq	%rbx, %r8
.LBB42_42:                              # %sw.epilog
	callq	make_extraction
	movq	$83, %r13
.LBB42_113:                             # %sw.epilog
	testq	%rax, %rax
	je	.LBB42_115
# BB#114:                               # %if.then702
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	gen_lowpart_for_combine
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movzbl	(%rax), %r13d
.LBB42_115:                             # %if.end706
	movzbl	rtx_length(%r13), %r14d
	testq	%r14, %r14
	je	.LBB42_120
# BB#116:                               # %for.body.lr.ph
	movq	rtx_format(,%r13,8), %r12
	movq	40(%rsp), %rax          # 8-byte Reload
	leaq	8(%rax), %r13
	movq	$1, %rbx
	movq	32(%rsp), %r15          # 8-byte Reload
	.align	16, 0x90
.LBB42_117:                             # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-1(%r12,%rbx), %eax
	cmpq	$101, %rax
	jne	.LBB42_119
# BB#118:                               # %if.then719
                                        #   in Loop: Header=BB42_117 Depth=1
	movq	(%r13), %rdi
	movq	%r15, %rsi
	callq	make_compound_operation
	movq	%r13, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
.LBB42_119:                             # %for.inc
                                        #   in Loop: Header=BB42_117 Depth=1
	movq	$32, %rcx
	movq	%rbx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	incq	%rbx
	addq	$8, %r13
	cmpq	%r14, %rax
	jl	.LBB42_117
.LBB42_120:
	movq	40(%rsp), %rax          # 8-byte Reload
.LBB42_121:                             # %return
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB42_65:
	movabsq	$0, %r14
.LBB42_67:                              # %if.then300
	movq	8(%rdx), %rdi
	movq	32(%rsp), %rsi          # 8-byte Reload
	callq	make_compound_operation
	movq	(%r13), %rcx
	movq	16(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	24(%rsp), %rdx          # 8-byte Reload
	subq	%rcx, %rdx
	movq	%r14, 8(%rsp)
	jmp	.LBB42_73
.Ltmp638:
	.size	make_compound_operation, .Ltmp638-make_compound_operation
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI42_0:
	.quad	.LBB42_26
	.quad	.LBB42_115
	.quad	.LBB42_115
	.quad	.LBB42_115
	.quad	.LBB42_22
	.quad	.LBB42_115
	.quad	.LBB42_84
	.quad	.LBB42_77

	.text
	.align	16, 0x90
	.type	rtx_equal_for_field_assignment_p,@function
rtx_equal_for_field_assignment_p:       # @rtx_equal_for_field_assignment_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp645:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp646:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp647:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp648:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp649:
	.cfi_def_cfa_offset 48
.Ltmp650:
	.cfi_offset %rbx, -48
.Ltmp651:
	.cfi_offset %r12, -40
.Ltmp652:
	.cfi_offset %r13, -32
.Ltmp653:
	.cfi_offset %r14, -24
.Ltmp654:
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movq	%rdi, %rbx
	cmpq	%r15, %rbx
	movq	$1, %r14
	je	.LBB43_15
# BB#1:                                 # %lor.lhs.false
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	jne	.LBB43_15
# BB#2:                                 # %if.end
	testq	%rbx, %rbx
	je	.LBB43_14
# BB#3:                                 # %if.end
	testq	%r15, %r15
	je	.LBB43_14
# BB#4:                                 # %lor.lhs.false4
	movl	(%r15), %eax
	movl	(%rbx), %ecx
	movq	%rax, %rdx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB43_14
# BB#5:                                 # %if.end10
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB43_10
# BB#6:                                 # %if.end10
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB43_10
# BB#7:                                 # %land.lhs.true17
	movq	8(%r15), %r12
	movl	(%r12), %edi
	movq	%rdi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB43_10
# BB#8:                                 # %land.lhs.true21
	movq	$16, %rcx
	shrq	%cl, %rdi
	andq	$255, %rdi
	movq	%rbx, %rsi
	callq	gen_lowpart_for_combine
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	jne	.LBB43_15
# BB#9:                                 # %land.lhs.true21.if.end35_crit_edge
	movl	(%r15), %eax
.LBB43_10:                              # %if.end35
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB43_14
# BB#11:                                # %land.lhs.true39
	movzbl	(%rbx), %eax
	cmpq	$63, %rax
	jne	.LBB43_14
# BB#12:                                # %land.lhs.true43
	movq	8(%rbx), %rbx
	movl	(%rbx), %edi
	movq	%rdi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB43_14
# BB#13:                                # %land.lhs.true50
	movq	$16, %rcx
	shrq	%cl, %rdi
	andq	$255, %rdi
	movq	%r15, %rsi
	callq	gen_lowpart_for_combine
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	jne	.LBB43_15
.LBB43_14:                              # %if.end64
	xorq	%r14, %r14
.LBB43_15:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp655:
	.size	rtx_equal_for_field_assignment_p, .Ltmp655-rtx_equal_for_field_assignment_p
	.cfi_endproc

	.align	16, 0x90
	.type	known_cond,@function
known_cond:                             # @known_cond
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp662:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp663:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp664:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp665:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp666:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp667:
	.cfi_def_cfa_offset 96
.Ltmp668:
	.cfi_offset %rbx, -48
.Ltmp669:
	.cfi_offset %r12, -40
.Ltmp670:
	.cfi_offset %r13, -32
.Ltmp671:
	.cfi_offset %r14, -24
.Ltmp672:
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movl	(%r13), %r12d
	movq	%rcx, %r14
	movq	%rdx, %rbx
	movq	%rsi, %r15
                                        # kill: RDI<def> R13<kill>
	callq	side_effects_p
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	testq	%rdi, %rax
	je	.LBB44_2
# BB#1:
	movq	%r13, %r14
.LBB44_38:                              # %land.lhs.true121
	movq	%r14, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB44_2:                               # %if.end
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	%r12, %rsi
	andq	$65535, %rsi            # imm = 0xFFFF
	movq	%r15, %rax
	andq	%rdi, %rax
	cmpq	$114, %rax
	jne	.LBB44_3
# BB#9:                                 # %land.lhs.true44
	movq	%r12, (%rsp)            # 8-byte Spill
	movq	%rdi, %rbx
	movq	%r13, %rdi
	movq	%rsi, %r12
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	rtx_equal_p
	movq	%rbx, %rdi
	movq	%r12, %rsi
	testq	%rdi, %rax
	jne	.LBB44_38
	jmp	.LBB44_10
.LBB44_3:                               # %if.end
	movq	%r12, (%rsp)            # 8-byte Spill
	cmpq	$103, %rax
	jne	.LBB44_10
# BB#4:                                 # %land.lhs.true
	movq	%rdi, %rbx
	movq	%r13, %rdi
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	rtx_equal_p
	movq	%rbx, %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	testq	%rdi, %rax
	je	.LBB44_10
# BB#5:                                 # %land.lhs.true3
	movzbl	2(%r13), %eax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB44_7
# BB#6:                                 # %land.lhs.true3
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	jne	.LBB44_10
.LBB44_7:                               # %land.lhs.true20
	movq	%r15, %rdx
	movzbl	2(%r14), %eax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB44_38
# BB#8:                                 # %land.lhs.true20
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	movq	%rdx, %r15
	je	.LBB44_38
.LBB44_10:                              # %if.end48
	cmpq	$129, %rsi
	jne	.LBB44_17
# BB#11:                                # %land.lhs.true50
	movq	%rdi, %rbx
	movq	8(%r13), %rdi
	movq	%rsi, %r12
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	rtx_equal_p
	movq	%rbx, %rdi
	movq	%r12, %rsi
	testq	%rdi, %rax
	je	.LBB44_17
# BB#12:                                # %land.lhs.true50
	movq	const_int_rtx+512(%rip), %rax
	cmpq	%r14, %rax
	jne	.LBB44_17
# BB#13:                                # %if.then56
	leaq	-106(%r15), %rax
	andq	%rdi, %rax
	cmpq	$2, %rax
	jb	.LBB44_16
# BB#14:                                # %if.then56
	movq	%r13, 32(%rsp)          # 8-byte Spill
	movq	$129, %rsi
	leaq	-103(%r15), %rax
	andq	%rdi, %rax
	cmpq	$2, %rax
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movq	40(%rsp), %r13          # 8-byte Reload
	ja	.LBB44_26
# BB#15:                                # %sw.bb
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r14
	jmp	.LBB44_38
.LBB44_17:                              # %if.else
	movq	%r15, 16(%rsp)          # 8-byte Spill
	movq	%rdi, %r15
	movzbl	rtx_class(%rsi), %r12d
	cmpq	$60, %r12
	je	.LBB44_19
# BB#18:                                # %if.else
	cmpq	$99, %r12
	jne	.LBB44_60
.LBB44_19:                              # %if.then87
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	8(%r13), %rdi
	movq	%r13, %rbx
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	40(%rsp), %r13          # 8-byte Reload
	je	.LBB44_20
# BB#21:                                # %if.then93
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	swap_condition
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%r13, 24(%rsp)          # 8-byte Spill
	movq	%r14, %r13
	jmp	.LBB44_22
.LBB44_20:
	movq	%r14, 24(%rsp)          # 8-byte Spill
.LBB44_22:                              # %if.end95
	movq	8(%rbx), %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	movq	%r15, %r14
	testq	%r14, %rax
	je	.LBB44_23
# BB#24:                                # %land.lhs.true101
	movq	16(%rbx), %rdi
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	24(%rsp), %rsi          # 8-byte Reload
	callq	rtx_equal_p
	testq	%r14, %rax
	movq	%r14, %rbx
	je	.LBB44_25
# BB#28:                                # %if.then107
	cmpq	$60, %r12
	movq	8(%rsp), %rsi           # 8-byte Reload
	jne	.LBB44_39
# BB#29:                                # %if.then113
	movq	16(%rsp), %r15          # 8-byte Reload
	movq	%r15, %rdi
	callq	comparison_dominates_p
	testq	%rbx, %rax
	je	.LBB44_31
# BB#30:                                # %if.then116
	movq	const_true_rtx(%rip), %r14
	jmp	.LBB44_38
.LBB44_23:
	movq	%rbx, 32(%rsp)          # 8-byte Spill
.LBB44_25:
	movq	16(%rsp), %r15          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
.LBB44_26:                              # %if.end267
	movzbl	rtx_length(%rsi), %edx
	testq	%rdx, %rdx
	je	.LBB44_27
# BB#71:                                # %for.body.lr.ph
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movq	%r15, %r12
	movq	rtx_format(,%rsi,8), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	.align	16, 0x90
.LBB44_72:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_79 Depth 2
	movq	%rdx, %r14
	movq	8(%rsp), %rax           # 8-byte Reload
	movzbl	-1(%rax,%r14), %eax
	leaq	-1(%r14), %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	cmpq	$69, %rax
	jne	.LBB44_73
# BB#77:                                # %if.then296
                                        #   in Loop: Header=BB44_72 Depth=1
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	(%rax,%r14,8), %rbx
	movslq	(%rbx), %r13
	testq	%r13, %r13
	jle	.LBB44_74
# BB#78:                                # %for.body304.lr.ph
                                        #   in Loop: Header=BB44_72 Depth=1
	movq	$3, %rcx
	leaq	-1(%r13), %r15
	shlq	%cl, %r13
	jmp	.LBB44_79
	.align	16, 0x90
.LBB44_80:                              # %for.body304.for.body304_crit_edge
                                        #   in Loop: Header=BB44_79 Depth=2
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	(%rax,%r14,8), %rbx
	decq	%r15
	addq	$-8, %r13
.LBB44_79:                              # %for.body304
                                        #   Parent Loop BB44_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx,%r13), %rdi
	addq	%r13, %rbx
	movq	%r12, %rsi
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	known_cond
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
	movq	$32, %rcx
	movq	%r15, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB44_80
	jmp	.LBB44_74
	.align	16, 0x90
.LBB44_73:                              # %for.body
                                        #   in Loop: Header=BB44_72 Depth=1
	cmpq	$101, %rax
	jne	.LBB44_74
# BB#76:                                # %if.then280
                                        #   in Loop: Header=BB44_72 Depth=1
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	8(%rax,%rcx,8), %rdi
	leaq	8(%rax,%rcx,8), %rbx
	movq	%r12, %rsi
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	callq	known_cond
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	do_SUBST
.LBB44_74:                              # %for.cond.backedge
                                        #   in Loop: Header=BB44_72 Depth=1
	movq	$32, %rcx
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	%rdx, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jg	.LBB44_72
# BB#75:
	movq	32(%rsp), %r14          # 8-byte Reload
	jmp	.LBB44_38
.LBB44_27:
	movq	32(%rsp), %r14          # 8-byte Reload
	jmp	.LBB44_38
.LBB44_60:                              # %if.else195
	movq	40(%rsp), %rdx          # 8-byte Reload
	cmpq	$121, %rsi
	movq	16(%rsp), %rax          # 8-byte Reload
	jne	.LBB44_61
# BB#67:                                # %if.then232
	movq	8(%r13), %rdi
	movl	(%rdi), %r12d
	movq	%rax, %rsi
	movq	%r14, %rcx
	callq	known_cond
	movq	8(%r13), %rcx
	movq	%rax, %rbx
	cmpq	%rbx, %rcx
	je	.LBB44_68
# BB#69:                                # %if.then251
	movzbl	2(%r13), %esi
	movq	$16, %rcx
	shrq	%cl, %r12
	andq	$255, %r12
	movq	$121, %rdi
	movq	%rbx, %rdx
	movq	%r12, %rcx
	callq	simplify_unary_operation
	movq	%rax, %r14
	testq	%r14, %r14
	jne	.LBB44_38
# BB#70:                                # %if.else258
	leaq	8(%r13), %rdi
	movq	%rbx, %rsi
	callq	do_SUBST
	movq	%r13, %r14
	jmp	.LBB44_38
.LBB44_39:                              # %if.else126
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, %r14
	andq	$65534, %r14            # imm = 0xFFFE
	cmpq	$92, %r14
	je	.LBB44_43
# BB#40:                                # %if.else126
	cmpq	$94, %rsi
	je	.LBB44_43
# BB#41:                                # %if.else126
	cmpq	$95, %rsi
	je	.LBB44_43
# BB#42:
	movq	16(%rsp), %r15          # 8-byte Reload
	jmp	.LBB44_26
.LBB44_16:                              # %sw.bb60
	movq	8(%r13), %rdx
	movzbl	2(%rdx), %esi
	movq	$77, %rdi
	movq	%rsi, %rcx
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	simplify_gen_unary  # TAILCALL
.LBB44_61:                              # %if.else195
	cmpq	$63, %rsi
	jne	.LBB44_62
# BB#63:                                # %if.then198
	movq	8(%r13), %rdi
	movq	%r13, %rbx
	movl	(%rdi), %r12d
	movq	%rax, %rsi
	movq	%r14, %rcx
	callq	known_cond
	movq	8(%rbx), %rcx
	movq	%rax, %r15
	cmpq	%r15, %rcx
	je	.LBB44_64
# BB#65:                                # %if.then214
	movl	16(%rbx), %eax
	movzbl	2(%rbx), %edi
	movq	$16, %rcx
	shrq	%cl, %r12
	andq	$255, %r12
	movq	%r15, %rsi
	movq	%r12, %rdx
	movq	%rax, %rcx
	callq	simplify_subreg
	movq	%rax, %r14
	testq	%r14, %r14
	jne	.LBB44_38
# BB#66:                                # %if.else223
	leaq	8(%rbx), %rdi
	movq	%r15, %rsi
	callq	do_SUBST
	movq	%rbx, %r14
	jmp	.LBB44_38
.LBB44_43:                              # %if.then138
	movq	%rsi, %r15
	movq	%r13, %r12
	andq	$65533, %rax            # imm = 0xFFFD
	cmpq	$93, %rax
	jne	.LBB44_44
# BB#45:                                # %if.then138
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%rax, %rcx
	cmpq	$102, %rcx
	movq	%r12, %r13
	je	.LBB44_47
# BB#46:                                # %if.then154
	movq	%rax, %rdi
	callq	reverse_condition
	jmp	.LBB44_47
.LBB44_62:
	movq	%r13, 32(%rsp)          # 8-byte Spill
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movq	%rdx, %r13
	movq	%rax, %r15
	jmp	.LBB44_26
.LBB44_31:                              # %if.end117
	xorq	%rsi, %rsi
	movq	32(%rsp), %r14          # 8-byte Reload
	movq	%r14, %rdi
	callq	reversed_comparison_code
	testq	%rbx, %rax
	jne	.LBB44_36
# BB#32:                                # %lor.lhs.false.i
	movq	8(%r14), %rdi
	movzbl	2(%rdi), %eax
	movl	mode_class(,%rax,4), %eax
	cmpq	$4, %rax
	jne	.LBB44_38
# BB#33:                                # %if.end.i
	callq	get_last_value
	testq	%rax, %rax
	je	.LBB44_38
# BB#34:                                # %lor.lhs.false7.i
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB44_38
# BB#35:                                # %combine_reversed_comparison_code.exit
	movq	8(%rax), %rsi
	movq	16(%rax), %rdx
	movzbl	(%r14), %edi
	xorq	%rcx, %rcx
	callq	reversed_comparison_code_parts
	testq	%rbx, %rax
	je	.LBB44_38
.LBB44_36:                              # %land.lhs.true121
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	comparison_dominates_p
	testq	%rbx, %rax
	je	.LBB44_38
# BB#37:                                # %land.lhs.true121
	movq	const_int_rtx+512(%rip), %r14
	jmp	.LBB44_38
.LBB44_68:
	movq	%r13, %r14
	jmp	.LBB44_38
.LBB44_64:
	movq	%rbx, %r14
	jmp	.LBB44_38
.LBB44_44:
	movq	%r12, %r13
	movq	16(%rsp), %rax          # 8-byte Reload
.LBB44_47:                              # %if.end156
	movq	%r15, %rsi
	leaq	-104(%rax), %rcx
	andq	%rbx, %rcx
	cmpq	$7, %rcx
	movq	%rax, %r15
	ja	.LBB44_26
# BB#48:                                # %if.end156
	jmpq	*.LJTI44_0(,%rcx,8)
.LBB44_49:                              # %sw.bb157
	cmpq	$94, %r14
	movq	32(%rsp), %r12          # 8-byte Reload
	jne	.LBB44_81
# BB#50:
	movq	%r12, %r14
	jmp	.LBB44_38
.LBB44_51:                              # %sw.bb163
	cmpq	$94, %r14
	movq	32(%rsp), %r12          # 8-byte Reload
	jne	.LBB44_53
# BB#52:
	movq	%r12, %r14
	jmp	.LBB44_38
.LBB44_54:                              # %sw.bb172
	cmpq	$94, %r14
	movq	32(%rsp), %r12          # 8-byte Reload
	jne	.LBB44_55
# BB#56:                                # %cond.true174
	movq	16(%r12), %r14
	jmp	.LBB44_38
.LBB44_57:                              # %sw.bb181
	cmpq	$94, %r14
	movq	32(%rsp), %r12          # 8-byte Reload
	jne	.LBB44_58
# BB#59:                                # %cond.true183
	movq	8(%r12), %r14
	jmp	.LBB44_38
.LBB44_81:                              # %cond.false
	movq	16(%r12), %r14
	jmp	.LBB44_38
.LBB44_53:                              # %cond.false166
	movq	8(%r12), %r14
	jmp	.LBB44_38
.LBB44_55:
	movq	%r12, %r14
	jmp	.LBB44_38
.LBB44_58:
	movq	%r12, %r14
	jmp	.LBB44_38
.Ltmp673:
	.size	known_cond, .Ltmp673-known_cond
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI44_0:
	.quad	.LBB44_49
	.quad	.LBB44_49
	.quad	.LBB44_51
	.quad	.LBB44_51
	.quad	.LBB44_54
	.quad	.LBB44_54
	.quad	.LBB44_57
	.quad	.LBB44_57

	.text
	.align	16, 0x90
	.type	extract_left_shift,@function
extract_left_shift:                     # @extract_left_shift
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp680:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp681:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp682:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp683:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp684:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp685:
	.cfi_def_cfa_offset 64
.Ltmp686:
	.cfi_offset %rbx, -48
.Ltmp687:
	.cfi_offset %r12, -40
.Ltmp688:
	.cfi_offset %r13, -32
.Ltmp689:
	.cfi_offset %r14, -24
.Ltmp690:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movl	(%r14), %r12d
	movq	%rsi, %r15
	movq	%r12, %rbx
	andq	$65535, %rbx            # imm = 0xFFFF
	movq	$16, %rcx
	shrq	%cl, %r12
	leaq	-75(%rbx), %rcx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	$12, %rcx
	ja	.LBB45_12
# BB#1:                                 # %entry
	andq	$255, %r12
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$1793, %rdx             # imm = 0x701
	je	.LBB45_2
# BB#9:                                 # %sw.bb33
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB45_12
# BB#10:                                # %land.lhs.true41
	movq	8(%rax), %rax
	movq	$1, %rdx
	movq	%r15, %rcx
	shlq	%cl, %rdx
	decq	%rdx
	testq	%rdx, %rax
	jne	.LBB45_12
# BB#11:                                # %land.lhs.true51
	movq	8(%r14), %rdi
	movq	%r15, %rsi
	callq	extract_left_shift
	testq	%rax, %rax
	je	.LBB45_12
# BB#13:                                # %if.then58
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	16(%r14), %rax
	movq	8(%rax), %rsi
	andq	%r13, %r15
	movq	%r15, %rcx
	sarq	%cl, %rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	%rax, %rcx
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_binary  # TAILCALL
.LBB45_2:                               # %entry
	shlq	%cl, %rax
	testq	$2052, %rax             # imm = 0x804
	je	.LBB45_3
# BB#7:                                 # %sw.bb23
	movq	8(%r14), %rdi
	movq	%r15, %rsi
	callq	extract_left_shift
	testq	%rax, %rax
	je	.LBB45_12
# BB#8:                                 # %if.then30
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	movq	%r12, %rcx
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	simplify_gen_unary  # TAILCALL
.LBB45_3:                               # %entry
	cmpq	$12, %rcx
	jne	.LBB45_12
# BB#4:                                 # %sw.bb
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB45_12
# BB#5:                                 # %land.lhs.true
	movq	8(%rax), %r8
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	$32, %rcx
	sarq	%cl, %r15
	subq	%r15, %r8
	jge	.LBB45_6
.LBB45_12:                              # %return
	xorq	%rax, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB45_6:                               # %if.then
	movq	8(%r14), %rcx
	xorq	%rdi, %rdi
	movq	$87, %rsi
	movq	%r12, %rdx
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	simplify_shift_const  # TAILCALL
.Ltmp691:
	.size	extract_left_shift, .Ltmp691-extract_left_shift
	.cfi_endproc

	.align	16, 0x90
	.type	expand_field_assignment,@function
expand_field_assignment:                # @expand_field_assignment
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp698:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp699:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp700:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp701:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp702:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp703:
	.cfi_def_cfa_offset 80
.Ltmp704:
	.cfi_offset %rbx, -48
.Ltmp705:
	.cfi_offset %r12, -40
.Ltmp706:
	.cfi_offset %r13, -32
.Ltmp707:
	.cfi_offset %r14, -24
.Ltmp708:
	.cfi_offset %r15, -16
	movq	%rdi, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	jmp	.LBB46_1
	.align	16, 0x90
.LBB46_17:                              # %while.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	%rax, %rcx
	callq	gen_rtx_fmt_ee
.LBB46_1:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_5 Depth 2
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	8(%rax), %rdi
	movl	(%rdi), %esi
	movq	%rsi, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB46_2
# BB#8:                                 # %land.lhs.true43
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	16(%rdi), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB46_26
# BB#9:                                 # %if.then54
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	24(%rdi), %rdx
	movq	8(%rdi), %r13
	movzbl	(%rdx), %ecx
	movq	8(%rax), %r12
	cmpq	$54, %rcx
	jne	.LBB46_10
# BB#11:                                # %land.lhs.true80
                                        #   in Loop: Header=BB46_1 Depth=1
	movzbl	2(%r13), %eax
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	movq	8(%rdx), %rdx
	movq	$32, %rcx
	movq	%r12, %rdi
	shlq	%cl, %rdi
	movzbl	mode_bitsize(%rax,%rax), %eax
	movq	$32, %rcx
	sarq	%cl, %rdi
	addq	%rdx, %rdi
	cmpq	%rax, %rdi
	jle	.LBB46_5
# BB#12:                                # %if.then93
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movq	$48, %rdi
	movq	%r13, %rdx
	callq	gen_rtx_fmt_e
	movq	%rax, %r13
	jmp	.LBB46_5
	.align	16, 0x90
.LBB46_2:                               # %while.body
                                        #   in Loop: Header=BB46_1 Depth=1
	cmpq	$64, %rax
	jne	.LBB46_13
# BB#3:                                 # %land.lhs.true
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	8(%rdi), %rdi
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB46_26
# BB#4:                                 # %if.then
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	8(%rdi), %r13
	movq	$15, %rcx
	shrq	%cl, %rax
	andq	$510, %rax              # imm = 0x1FE
	movzbl	mode_bitsize(%rax), %r12d
	callq	subreg_lsb
	andq	%r15, %rax
	xorq	%rdi, %rdi
	movq	%rax, %rsi
	callq	gen_rtx_CONST_INT
	movq	%rax, 16(%rsp)          # 8-byte Spill
	jmp	.LBB46_5
	.align	16, 0x90
.LBB46_13:                              # %if.else101
                                        #   in Loop: Header=BB46_1 Depth=1
	cmpq	$63, %rax
	jne	.LBB46_26
# BB#14:                                # %if.else101
                                        #   in Loop: Header=BB46_1 Depth=1
	movzbl	nonzero_sign_valid(%rip), %eax
	testq	$1, %rax
	je	.LBB46_26
# BB#15:                                # %land.lhs.true110
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	movl	target_flags(%rip), %ebx
	movzbl	mode_size(%rsi), %eax
	movq	$23, %rcx
	shrq	%cl, %rbx
	andq	$4, %rbx
	leaq	4(%rbx), %rsi
	leaq	3(%rbx,%rax), %rax
	cqto
	idivq	%rsi
	movq	%rax, %rcx
	movq	8(%rdi), %r14
	movzbl	2(%r14), %edi
	movzbl	mode_size(%rdi), %eax
	leaq	3(%rax,%rbx), %rax
	cqto
	idivq	%rsi
	andq	%r15, %rcx
	andq	%r15, %rax
	cmpq	%rax, %rcx
	jne	.LBB46_26
# BB#16:                                # %if.then148
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rsi
	callq	gen_lowpart_for_combine
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	%r14, %rdx
	jmp	.LBB46_17
	.align	16, 0x90
.LBB46_10:                              #   in Loop: Header=BB46_1 Depth=1
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	jmp	.LBB46_5
	.align	16, 0x90
.LBB46_7:                               # %while.body179
                                        #   in Loop: Header=BB46_5 Depth=2
	movq	8(%r13), %r13
.LBB46_5:                               # %while.cond172.preheader
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%r13), %ebx
	movq	%rbx, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB46_19
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB46_5 Depth=2
	movq	%r13, %rdi
	callq	subreg_lowpart_p
	testq	%r15, %rax
	jne	.LBB46_7
# BB#18:                                # %land.rhs.while.end_crit_edge
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	(%r13), %ebx
	.align	16, 0x90
.LBB46_19:                              # %while.end
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$16, %rcx
	shrq	%cl, %rbx
	andq	$255, %rbx
	movl	mode_class(,%rbx,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB46_26
# BB#20:                                # %while.end
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$170, %rax
	jne	.LBB46_24
# BB#21:                                # %while.end
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	je	.LBB46_26
# BB#22:                                # %if.end220
                                        #   in Loop: Header=BB46_1 Depth=1
	movzbl	mode_bitsize(%rbx,%rbx), %edi
	movq	$1, %rsi
	xorq	%rdx, %rdx
	callq	mode_for_size
	movq	%rax, %rbx
                                        # kill: RAX<def> RBX<kill>
	andq	%r15, %rax
	cmpq	$51, %rax
	je	.LBB46_26
# BB#23:                                # %if.end228
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	gen_lowpart_for_combine
	movq	%rax, %r13
.LBB46_24:                              # %if.end230
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$32, %rcx
	movq	%r12, %rax
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	$63, %rax
	jg	.LBB46_26
# BB#25:                                # %if.then233
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	$1, %rsi
	movq	%r12, %rcx
	shlq	%cl, %rsi
	decq	%rsi
	xorq	%rdi, %rdi
	callq	gen_rtx_CONST_INT
	movq	%rax, %r14
	movq	%r13, %rdi
	callq	copy_rtx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$87, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movq	16(%rsp), %r12          # 8-byte Reload
	movq	%r12, %rcx
	callq	gen_binary
	movq	$86, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%rbx, %rcx
	callq	simplify_gen_unary
	movq	$83, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%r13, %rcx
	callq	gen_binary
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	16(%rcx), %rsi
	movq	%rax, %r13
	movq	%rbx, %rdi
	callq	gen_lowpart_for_combine
	movq	$83, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%r14, %rcx
	callq	gen_binary
	movq	$87, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	movq	%r12, %rcx
	callq	gen_binary
	movq	$84, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	movq	%rax, %rcx
	callq	gen_binary
	movq	$47, %rdi
	xorq	%rsi, %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	jmp	.LBB46_17
.LBB46_26:                              # %while.end250
	movq	24(%rsp), %rax          # 8-byte Reload
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp709:
	.size	expand_field_assignment, .Ltmp709-expand_field_assignment
	.cfi_endproc

	.type	combine_attempts,@object # @combine_attempts
	.local	combine_attempts
	.comm	combine_attempts,4,4
	.type	combine_merges,@object  # @combine_merges
	.local	combine_merges
	.comm	combine_merges,4,4
	.type	combine_extras,@object  # @combine_extras
	.local	combine_extras
	.comm	combine_extras,4,4
	.type	combine_successes,@object # @combine_successes
	.local	combine_successes
	.comm	combine_successes,4,4
	.type	combine_max_regno,@object # @combine_max_regno
	.local	combine_max_regno
	.comm	combine_max_regno,4,4
	.type	reg_nonzero_bits,@object # @reg_nonzero_bits
	.local	reg_nonzero_bits
	.comm	reg_nonzero_bits,8,8
	.type	reg_sign_bit_copies,@object # @reg_sign_bit_copies
	.local	reg_sign_bit_copies
	.comm	reg_sign_bit_copies,8,8
	.type	reg_last_death,@object  # @reg_last_death
	.local	reg_last_death
	.comm	reg_last_death,8,8
	.type	reg_last_set,@object    # @reg_last_set
	.local	reg_last_set
	.comm	reg_last_set,8,8
	.type	reg_last_set_value,@object # @reg_last_set_value
	.local	reg_last_set_value
	.comm	reg_last_set_value,8,8
	.type	reg_last_set_table_tick,@object # @reg_last_set_table_tick
	.local	reg_last_set_table_tick
	.comm	reg_last_set_table_tick,8,8
	.type	reg_last_set_label,@object # @reg_last_set_label
	.local	reg_last_set_label
	.comm	reg_last_set_label,8,8
	.type	reg_last_set_invalid,@object # @reg_last_set_invalid
	.local	reg_last_set_invalid
	.comm	reg_last_set_invalid,8,8
	.type	reg_last_set_mode,@object # @reg_last_set_mode
	.local	reg_last_set_mode
	.comm	reg_last_set_mode,8,8
	.type	reg_last_set_nonzero_bits,@object # @reg_last_set_nonzero_bits
	.local	reg_last_set_nonzero_bits
	.comm	reg_last_set_nonzero_bits,8,8
	.type	reg_last_set_sign_bit_copies,@object # @reg_last_set_sign_bit_copies
	.local	reg_last_set_sign_bit_copies
	.comm	reg_last_set_sign_bit_copies,8,8
	.type	uid_cuid,@object        # @uid_cuid
	.local	uid_cuid
	.comm	uid_cuid,8,8
	.type	max_uid_cuid,@object    # @max_uid_cuid
	.local	max_uid_cuid
	.comm	max_uid_cuid,4,4
	.type	nonzero_bits_mode,@object # @nonzero_bits_mode
	.local	nonzero_bits_mode
	.comm	nonzero_bits_mode,4,4
	.type	nonzero_sign_valid,@object # @nonzero_sign_valid
	.local	nonzero_sign_valid
	.comm	nonzero_sign_valid,1,1
	.type	label_tick,@object      # @label_tick
	.local	label_tick
	.comm	label_tick,4,4
	.type	subst_prev_insn,@object # @subst_prev_insn
	.local	subst_prev_insn
	.comm	subst_prev_insn,8,8
	.type	refresh_blocks,@object  # @refresh_blocks
	.local	refresh_blocks
	.comm	refresh_blocks,8,8
	.type	need_refresh,@object    # @need_refresh
	.local	need_refresh
	.comm	need_refresh,1,1
	.type	subst_low_cuid,@object  # @subst_low_cuid
	.local	subst_low_cuid
	.comm	subst_low_cuid,4,4
	.type	subst_insn,@object      # @subst_insn
	.local	subst_insn
	.comm	subst_insn,8,8
	.type	this_basic_block,@object # @this_basic_block
	.local	this_basic_block
	.comm	this_basic_block,4,4
	.type	last_call_cuid,@object  # @last_call_cuid
	.local	last_call_cuid
	.comm	last_call_cuid,4,4
	.type	mem_last_set,@object    # @mem_last_set
	.local	mem_last_set
	.comm	mem_last_set,4,4
	.type	undobuf,@object         # @undobuf
	.local	undobuf
	.comm	undobuf,24,8
	.type	total_attempts,@object  # @total_attempts
	.local	total_attempts
	.comm	total_attempts,4,4
	.type	total_merges,@object    # @total_merges
	.local	total_merges
	.comm	total_merges,4,4
	.type	total_extras,@object    # @total_extras
	.local	total_extras
	.comm	total_extras,4,4
	.type	total_successes,@object # @total_successes
	.local	total_successes
	.comm	total_successes,4,4
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	";; Combiner statistics: %d attempts, %d substitutions (%d requiring new space),\n;; %d successes.\n\n"
	.size	.L.str, 99

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"\n;; Combiner totals: %d attempts, %d substitutions (%d requiring new space),\n;; %d successes.\n"
	.size	.L.str1, 95

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"combine.c"
	.size	.L.str2, 10

	.type	.L__FUNCTION__.insn_cuid,@object # @__FUNCTION__.insn_cuid
.L__FUNCTION__.insn_cuid:
	.asciz	"insn_cuid"
	.size	.L__FUNCTION__.insn_cuid, 10

	.type	.L__FUNCTION__.nonzero_bits,@object # @__FUNCTION__.nonzero_bits
.L__FUNCTION__.nonzero_bits:
	.asciz	"nonzero_bits"
	.size	.L__FUNCTION__.nonzero_bits, 13

	.type	newpat_used_regs,@object # @newpat_used_regs
	.local	newpat_used_regs
	.comm	newpat_used_regs,8,8
	.type	added_links_insn,@object # @added_links_insn
	.local	added_links_insn
	.comm	added_links_insn,8,8
	.type	n_occurrences,@object   # @n_occurrences
	.local	n_occurrences
	.comm	n_occurrences,4,4
	.type	.L__FUNCTION__.distribute_notes,@object # @__FUNCTION__.distribute_notes
.L__FUNCTION__.distribute_notes:
	.asciz	"distribute_notes"
	.size	.L__FUNCTION__.distribute_notes, 17

	.type	reg_dead_regno,@object  # @reg_dead_regno
	.local	reg_dead_regno
	.comm	reg_dead_regno,4,4
	.type	reg_dead_endregno,@object # @reg_dead_endregno
	.local	reg_dead_endregno
	.comm	reg_dead_endregno,4,4
	.type	reg_dead_flag,@object   # @reg_dead_flag
	.local	reg_dead_flag
	.comm	reg_dead_flag,4,4
	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"ie"
	.size	.L.str3, 3

	.type	.L__FUNCTION__.subst,@object # @__FUNCTION__.subst
.L__FUNCTION__.subst:
	.asciz	"subst"
	.size	.L__FUNCTION__.subst, 6

	.type	.L__FUNCTION__.combine_simplify_rtx,@object # @__FUNCTION__.combine_simplify_rtx
.L__FUNCTION__.combine_simplify_rtx:
	.asciz	"combine_simplify_rtx"
	.size	.L__FUNCTION__.combine_simplify_rtx, 21

	.type	.L__FUNCTION__.simplify_logical,@object # @__FUNCTION__.simplify_logical
.L__FUNCTION__.simplify_logical:
	.asciz	"simplify_logical"
	.size	.L__FUNCTION__.simplify_logical, 17

	.type	.L__FUNCTION__.do_SUBST,@object # @__FUNCTION__.do_SUBST
.L__FUNCTION__.do_SUBST:
	.asciz	"do_SUBST"
	.size	.L__FUNCTION__.do_SUBST, 9


	.ident	"clang version 3.5 (trunk)"
	.section	".note.GNU-stack","",@progbits
