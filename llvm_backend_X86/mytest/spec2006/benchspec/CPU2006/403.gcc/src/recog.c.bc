; ModuleID = 'recog.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.change_t = type { %struct.rtx_def*, i32, %struct.rtx_def**, %struct.rtx_def* }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.recog_data = type { [30 x %struct.rtx_def*], [30 x %struct.rtx_def**], [30 x i8*], [30 x i32], [30 x i32], [4 x %struct.rtx_def**], [4 x i8], i8, i8, i8, %struct.rtx_def* }
%struct.insn_data = type { i8*, i8*, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.operand_alternative = type { i8*, i32, i32, i32, i32, i8 }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.peep2_insn_data = type { %struct.rtx_def*, %struct.bitmap_head_def* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.funny_match = type { i32, i32 }
%struct.validate_replace_src_data = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.simple_bitmap_def = type { i32, i32, i32, [1 x i64] }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%union.tree_node = type opaque
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }
%struct._IO_FILE = type opaque
%struct.propagate_block_info = type opaque

@volatile_ok = common global i32 0, align 4
@reload_completed = common global i32 0, align 4
@which_alternative = common global i32 0, align 4
@_sch_istable = external constant [256 x i16]
@num_changes = internal unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"recog.c\00", align 1
@__FUNCTION__.validate_change = private unnamed_addr constant [16 x i8] c"validate_change\00", align 1
@changes_allocated = internal unnamed_addr global i32 0, align 4
@changes = internal unnamed_addr global %struct.change_t* null, align 8
@reload_in_progress = external global i32
@rtx_class = external constant [153 x i8]
@mode_class = external constant [59 x i32]
@flag_pic = external global i32
@mode_size = external constant [59 x i8]
@regclass_map = external constant [53 x i32]
@target_flags = external global i32
@global_rtl = external global [11 x %struct.rtx_def*]
@__FUNCTION__.asm_operand_ok = private unnamed_addr constant [15 x i8] c"asm_operand_ok\00", align 1
@recog_data = common global %struct.recog_data zeroinitializer, align 8
@__FUNCTION__.extract_constrain_insn_cached = private unnamed_addr constant [30 x i8] c"extract_constrain_insn_cached\00", align 1
@__FUNCTION__.extract_insn = private unnamed_addr constant [13 x i8] c"extract_insn\00", align 1
@insn_data = external constant [0 x %struct.insn_data]
@recog_op_alt = common global [30 x [30 x %struct.operand_alternative]] zeroinitializer, align 16
@reg_class_subunion = external global [25 x [25 x i32]]
@reg_class_contents = external global [25 x i64]
@n_basic_blocks = external global i32
@basic_block_info = external global %struct.varray_head_tag*
@__FUNCTION__.split_all_insns = private unnamed_addr constant [16 x i8] c"split_all_insns\00", align 1
@__FUNCTION__.peep2_next_insn = private unnamed_addr constant [16 x i8] c"peep2_next_insn\00", align 1
@peep2_current = internal unnamed_addr global i32 0, align 4
@peep2_insn_data = internal unnamed_addr global [5 x %struct.peep2_insn_data] zeroinitializer, align 16
@__FUNCTION__.peep2_regno_dead_p = private unnamed_addr constant [19 x i8] c"peep2_regno_dead_p\00", align 1
@__FUNCTION__.peep2_reg_dead_p = private unnamed_addr constant [17 x i8] c"peep2_reg_dead_p\00", align 1
@peep2_find_free_register.search_ofs = internal unnamed_addr global i32 0, align 4
@__FUNCTION__.peep2_find_free_register = private unnamed_addr constant [25 x i8] c"peep2_find_free_register\00", align 1
@reg_alloc_order = external global [53 x i32]
@fixed_regs = external global [53 x i8]
@call_used_regs = external global [53 x i8]
@regs_ever_live = external global [53 x i8]
@frame_pointer_needed = external global i32
@__FUNCTION__.peephole2_optimize = private unnamed_addr constant [19 x i8] c"peephole2_optimize\00", align 1
@flag_non_call_exceptions = external global i32
@rtx_format = external constant [153 x i8*]
@rtx_length = external constant [153 x i8]
@const_int_rtx = external global [129 x %struct.rtx_def*]
@mode_bitsize = external constant [59 x i16]

; Function Attrs: nounwind uwtable
define void @init_recog_no_volatile() #0 {
entry:
  store i32 0, i32* @volatile_ok, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_recog() #0 {
entry:
  store i32 1, i32* @volatile_ok, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @recog_memoized_1(%struct.rtx_def* %insn) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtint, align 4, !tbaa !1
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %call = tail call i32 @recog(%struct.rtx_def* %1, %struct.rtx_def* %insn, i32* null) #4
  store i32 %call, i32* %rtint, align 4, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i32 [ %call, %if.then ], [ %0, %entry ]
  ret i32 %2
}

declare i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #1

; Function Attrs: nounwind uwtable
define i32 @check_asm_operands(%struct.rtx_def* %x) #0 {
entry:
  %0 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.rtx_def* @make_insn_raw(%struct.rtx_def* %x) #4
  call void @extract_insn(%struct.rtx_def* %call)
  %call1 = call i32 @constrain_operands(i32 1)
  %1 = load i32* @which_alternative, align 4, !tbaa !1
  %.lobit = lshr i32 %1, 31
  %.lobit.not = xor i32 %.lobit, 1
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @asm_noperands(%struct.rtx_def* %x)
  %cmp3 = icmp slt i32 %call2, 0
  br i1 %cmp3, label %return, label %if.end6

if.end6:                                          ; preds = %if.end
  %cmp7 = icmp eq i32 %call2, 0
  br i1 %cmp7, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end6
  %conv11 = sext i32 %call2 to i64
  %2 = alloca %struct.rtx_def*, i64 %conv11, align 1
  %3 = alloca i8*, i64 %conv11, align 1
  %call14 = call i8* @decode_asm_operands(%struct.rtx_def* %x, %struct.rtx_def** %2, %struct.rtx_def*** null, i8** %3, i32* null)
  br label %for.body

for.cond:                                         ; preds = %if.end39
  %4 = trunc i64 %indvars.iv.next to i32
  %cmp15 = icmp slt i32 %4, %call2
  br i1 %cmp15, label %for.body, label %return

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %arrayidx = getelementptr inbounds i8** %3, i64 %indvars.iv
  %5 = load i8** %arrayidx, align 8, !tbaa !5
  %6 = load i8* %5, align 1, !tbaa !7
  %cmp19 = icmp eq i8 %6, 37
  %incdec.ptr = getelementptr inbounds i8* %5, i64 1
  %incdec.ptr. = select i1 %cmp19, i8* %incdec.ptr, i8* %5
  %7 = load i8* %incdec.ptr., align 1, !tbaa !7
  %idxprom25 = zext i8 %7 to i64
  %arrayidx26 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom25
  %8 = load i16* %arrayidx26, align 2, !tbaa !8
  %and28 = and i16 %8, 4
  %tobool29 = icmp eq i16 %and28, 0
  br i1 %tobool29, label %if.end39, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %arrayidx30 = getelementptr inbounds i8* %incdec.ptr., i64 1
  %9 = load i8* %arrayidx30, align 1, !tbaa !7
  %cmp32 = icmp eq i8 %9, 0
  br i1 %cmp32, label %if.then34, label %if.end39

if.then34:                                        ; preds = %land.lhs.true
  %conv36 = sext i8 %7 to i64
  %sub = add i64 %conv36, -48
  %arrayidx38 = getelementptr inbounds i8** %3, i64 %sub
  %10 = load i8** %arrayidx38, align 8, !tbaa !5
  br label %if.end39

if.end39:                                         ; preds = %for.body, %if.then34, %land.lhs.true
  %c.1 = phi i8* [ %10, %if.then34 ], [ %incdec.ptr., %land.lhs.true ], [ %incdec.ptr., %for.body ]
  %arrayidx41 = getelementptr inbounds %struct.rtx_def** %2, i64 %indvars.iv
  %11 = load %struct.rtx_def** %arrayidx41, align 8, !tbaa !5
  %call42 = call i32 @asm_operand_ok(%struct.rtx_def* %11, i8* %c.1)
  %tobool43 = icmp eq i32 %call42, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool43, label %return, label %for.cond

return:                                           ; preds = %if.end39, %for.cond, %if.end6, %if.end, %if.then
  %retval.0 = phi i32 [ %.lobit.not, %if.then ], [ 0, %if.end ], [ 1, %if.end6 ], [ 0, %if.end39 ], [ 1, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @extract_insn(%struct.rtx_def* %insn) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 10), align 8, !tbaa !10
  store i8 0, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7), align 4, !tbaa !12
  store i8 0, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 9), align 2, !tbaa !13
  store i8 0, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 8), align 1, !tbaa !14
  store i32 -1, i32* @which_alternative, align 4, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %normal_insn [
    i32 48, label %if.end130
    i32 49, label %if.end130
    i32 40, label %if.end130
    i32 44, label %if.end130
    i32 45, label %if.end130
    i32 47, label %sw.bb1
    i32 39, label %sw.bb7
    i32 41, label %asm_insn
  ]

sw.bb1:                                           ; preds = %entry
  %arrayidx3 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx4, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load5 = load i32* %3, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp = icmp eq i32 %bf.clear6, 41
  br i1 %cmp, label %asm_insn, label %normal_insn

sw.bb7:                                           ; preds = %entry
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx10 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 1, i64 0
  %5 = load %struct.rtx_def** %arrayidx10, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load11 = load i32* %6, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  switch i32 %bf.clear12, label %normal_insn [
    i32 47, label %land.lhs.true
    i32 41, label %asm_insn
  ]

land.lhs.true:                                    ; preds = %sw.bb7
  %arrayidx20 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 1
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx21, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load22 = load i32* %8, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 41
  br i1 %cmp24, label %asm_insn, label %normal_insn

asm_insn:                                         ; preds = %sw.bb7, %entry, %land.lhs.true, %sw.bb1
  %call = tail call i32 @asm_noperands(%struct.rtx_def* %0)
  %conv = trunc i32 %call to i8
  store i8 %conv, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7), align 4, !tbaa !12
  %cmp36 = icmp sgt i32 %call, -1
  br i1 %cmp36, label %if.then38, label %if.end52

if.then38:                                        ; preds = %asm_insn
  %cmp39 = icmp sgt i32 %call, 30
  br i1 %cmp39, label %if.then41, label %if.end

if.then41:                                        ; preds = %if.then38
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2123, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.extract_insn, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %if.then38
  %call42 = tail call i8* @decode_asm_operands(%struct.rtx_def* %0, %struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 0, i64 0), %struct.rtx_def*** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 1, i64 0), i8** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 2, i64 0), i32* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 3, i64 0))
  %cmp43 = icmp sgt i32 %call, 0
  br i1 %cmp43, label %if.then45, label %for.end125

if.then45:                                        ; preds = %if.end
  %9 = load i8** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 2, i64 0), align 8, !tbaa !5
  store i8 1, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 9), align 2, !tbaa !13
  %10 = load i8* %9, align 1, !tbaa !7
  %tobool173 = icmp eq i8 %10, 0
  br i1 %tobool173, label %sw.epilog, label %while.body

while.body:                                       ; preds = %if.then45, %while.body
  %11 = phi i8 [ %12, %while.body ], [ %10, %if.then45 ]
  %p.0175 = phi i8* [ %incdec.ptr, %while.body ], [ %9, %if.then45 ]
  %storemerge174 = phi i8 [ %add, %while.body ], [ 1, %if.then45 ]
  %incdec.ptr = getelementptr inbounds i8* %p.0175, i64 1
  %cmp47 = icmp eq i8 %11, 44
  %conv48 = zext i1 %cmp47 to i8
  %add = add i8 %conv48, %storemerge174
  store i8 %add, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 9), align 2, !tbaa !13
  %12 = load i8* %incdec.ptr, align 1, !tbaa !7
  %tobool = icmp eq i8 %12, 0
  br i1 %tobool, label %sw.epilog, label %while.body

if.end52:                                         ; preds = %asm_insn
  tail call void @_fatal_insn_not_found(%struct.rtx_def* %insn, i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2139, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.extract_insn, i64 0, i64 0)) #6
  unreachable

normal_insn:                                      ; preds = %sw.bb7, %land.lhs.true, %entry, %sw.bb1
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx54 to i32*
  %13 = load i32* %rtint, align 4, !tbaa !1
  %cmp55 = icmp sgt i32 %13, -1
  br i1 %cmp55, label %if.end64, label %cond.end

cond.end:                                         ; preds = %normal_insn
  %14 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %call.i = tail call i32 @recog(%struct.rtx_def* %14, %struct.rtx_def* %insn, i32* null) #4
  store i32 %call.i, i32* %rtint, align 4, !tbaa !1
  %cmp61 = icmp slt i32 %call.i, 0
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %cond.end
  tail call void @_fatal_insn_not_found(%struct.rtx_def* %insn, i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2148, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.extract_insn, i64 0, i64 0)) #6
  unreachable

if.end64:                                         ; preds = %normal_insn, %cond.end
  %cond167 = phi i32 [ %call.i, %cond.end ], [ %13, %normal_insn ]
  %idxprom = sext i32 %cond167 to i64
  %n_operands = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 4
  %15 = load i8* %n_operands, align 8, !tbaa !15
  %conv66 = sext i8 %15 to i32
  store i8 %15, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7), align 4, !tbaa !12
  %n_alternatives = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 6
  %16 = load i8* %n_alternatives, align 2, !tbaa !17
  store i8 %16, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 9), align 2, !tbaa !13
  %n_dups = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 5
  %17 = load i8* %n_dups, align 1, !tbaa !18
  store i8 %17, i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 8), align 1, !tbaa !14
  tail call void @insn_extract(%struct.rtx_def* %insn) #4
  %cmp72171 = icmp sgt i8 %15, 0
  br i1 %cmp72171, label %for.body.lr.ph, label %sw.epilog

for.body.lr.ph:                                   ; preds = %if.end64
  %operand = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 3
  %18 = load %struct.insn_operand_data** %operand, align 8, !tbaa !19
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv176 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next177, %for.inc ]
  %constraint = getelementptr inbounds %struct.insn_operand_data* %18, i64 %indvars.iv176, i32 1
  %19 = load i8** %constraint, align 8, !tbaa !20
  %arrayidx79 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 2, i64 %indvars.iv176
  store i8* %19, i8** %arrayidx79, align 8, !tbaa !5
  %mode = getelementptr inbounds %struct.insn_operand_data* %18, i64 %indvars.iv176, i32 2
  %bf.load85 = load i16* %mode, align 8
  %bf.cast = zext i16 %bf.load85 to i32
  %arrayidx87 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 3, i64 %indvars.iv176
  store i32 %bf.cast, i32* %arrayidx87, align 4, !tbaa !7
  %cmp90 = icmp eq i16 %bf.load85, 0
  br i1 %cmp90, label %if.then92, label %for.inc

if.then92:                                        ; preds = %for.body
  %arrayidx94 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %indvars.iv176
  %20 = load %struct.rtx_def** %arrayidx94, align 8, !tbaa !5
  %21 = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 0
  %bf.load95 = load i32* %21, align 8
  %bf.lshr = lshr i32 %bf.load95, 16
  %bf.clear96 = and i32 %bf.lshr, 255
  store i32 %bf.clear96, i32* %arrayidx87, align 4, !tbaa !7
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then92
  %indvars.iv.next177 = add nuw nsw i64 %indvars.iv176, 1
  %lftr.wideiv178 = trunc i64 %indvars.iv.next177 to i32
  %exitcond179 = icmp eq i32 %lftr.wideiv178, %conv66
  br i1 %exitcond179, label %sw.epilog, label %for.body

sw.epilog:                                        ; preds = %while.body, %for.inc, %if.then45, %if.end64
  %noperands.0 = phi i32 [ %conv66, %if.end64 ], [ %call, %if.then45 ], [ %conv66, %for.inc ], [ %call, %while.body ]
  %cmp101169 = icmp sgt i32 %noperands.0, 0
  br i1 %cmp101169, label %for.body103, label %for.end125

for.body103:                                      ; preds = %sw.epilog, %cond.end119
  %indvars.iv = phi i64 [ %indvars.iv.next, %cond.end119 ], [ 0, %sw.epilog ]
  %arrayidx105 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 2, i64 %indvars.iv
  %22 = load i8** %arrayidx105, align 8, !tbaa !5
  %23 = load i8* %22, align 1, !tbaa !7
  %cmp108 = icmp eq i8 %23, 61
  br i1 %cmp108, label %cond.end119, label %cond.false111

cond.false111:                                    ; preds = %for.body103
  %cmp116 = icmp eq i8 %23, 43
  %cond118 = select i1 %cmp116, i32 2, i32 0
  br label %cond.end119

cond.end119:                                      ; preds = %for.body103, %cond.false111
  %cond120 = phi i32 [ %cond118, %cond.false111 ], [ 1, %for.body103 ]
  %arrayidx122 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 4, i64 %indvars.iv
  store i32 %cond120, i32* %arrayidx122, align 4, !tbaa !7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %noperands.0
  br i1 %exitcond, label %for.end125, label %for.body103

for.end125:                                       ; preds = %cond.end119, %if.end, %sw.epilog
  %24 = load i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 9), align 2, !tbaa !13
  %cmp127 = icmp sgt i8 %24, 30
  br i1 %cmp127, label %if.then129, label %if.end130

if.then129:                                       ; preds = %for.end125
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2172, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.extract_insn, i64 0, i64 0)) #6
  unreachable

if.end130:                                        ; preds = %entry, %entry, %entry, %entry, %entry, %for.end125
  ret void
}

declare %struct.rtx_def* @make_insn_raw(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define i32 @constrain_operands(i32 %strict) #0 {
entry:
  %constraints = alloca [30 x i8*], align 16
  %0 = bitcast [30 x i8*]* %constraints to i8*
  %matching_operands = alloca [30 x i32], align 16
  %1 = bitcast [30 x i32]* %matching_operands to i8*
  %earlyclobber = alloca [30 x i32], align 16
  %funny_match = alloca [30 x %struct.funny_match], align 16
  %end = alloca i8*, align 8
  call void @llvm.lifetime.start(i64 240, i8* %0) #4
  call void @llvm.lifetime.start(i64 120, i8* %1) #4
  %2 = bitcast [30 x i32]* %earlyclobber to i8*
  call void @llvm.lifetime.start(i64 120, i8* %2) #4
  %3 = bitcast [30 x %struct.funny_match]* %funny_match to i8*
  call void @llvm.lifetime.start(i64 240, i8* %3) #4
  store i32 0, i32* @which_alternative, align 4, !tbaa !1
  %4 = load i32* bitcast (i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7) to i32*), align 4
  %5 = trunc i32 %4 to i8
  %cmp = icmp eq i8 %5, 0
  %6 = lshr i32 %4, 16
  %7 = trunc i32 %6 to i8
  %cmp3 = icmp eq i8 %7, 0
  %or.cond1161 = or i1 %cmp, %cmp3
  br i1 %or.cond1161, label %cleanup, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %cmp61247 = icmp sgt i8 %5, 0
  br i1 %cmp61247, label %for.body.lr.ph, label %for.cond12.preheader

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sext1293 = shl i32 %4, 24
  %conv5 = ashr exact i32 %sext1293, 24
  %8 = icmp sgt i32 %sext1293, 16777216
  %conv5.op = add i32 %conv5, -1
  %9 = zext i32 %conv5.op to i64
  %10 = select i1 %8, i64 %9, i64 0
  %11 = shl nuw nsw i64 %10, 3
  %12 = add i64 %11, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast (i8** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 2, i64 0) to i8*), i64 %12, i32 8, i1 false)
  %13 = shl nuw nsw i64 %10, 2
  %14 = add i64 %13, 4
  call void @llvm.memset.p0i8.i64(i8* %1, i8 -1, i64 %14, i32 16, i1 false)
  br label %for.cond12.preheader

for.cond12.preheader:                             ; preds = %for.body.lr.ph, %for.cond.preheader
  %cmp795 = icmp slt i32 %strict, 0
  %cmp798 = icmp eq i32 %strict, 0
  %cmp150 = icmp sgt i32 %strict, 0
  %cmp160 = icmp slt i32 %strict, 1
  br label %for.cond12

for.cond12:                                       ; preds = %for.cond12.backedge, %for.cond12.preheader
  %.pre1288 = phi i32 [ %4, %for.cond12.preheader ], [ %.pre, %for.cond12.backedge ]
  %15 = phi i8 [ %7, %for.cond12.preheader ], [ %85, %for.cond12.backedge ]
  %16 = phi i8 [ %5, %for.cond12.preheader ], [ %83, %for.cond12.backedge ]
  %opno.0 = phi i32 [ 0, %for.cond12.preheader ], [ %opno.0.be, %for.cond12.backedge ]
  %lose.0 = phi i32 [ 0, %for.cond12.preheader ], [ %lose.0.be, %for.cond12.backedge ]
  %funny_match_index.0 = phi i32 [ 0, %for.cond12.preheader ], [ %funny_match_index.0.be, %for.cond12.backedge ]
  %sext1291 = shl i32 %.pre1288, 24
  %conv13 = ashr exact i32 %sext1291, 24
  %cmp14 = icmp slt i32 %opno.0, %conv13
  br i1 %cmp14, label %for.body16, label %for.end853

for.body16:                                       ; preds = %for.cond12
  %idxprom17 = sext i32 %opno.0 to i64
  %arrayidx18 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %idxprom17
  %17 = load %struct.rtx_def** %arrayidx18, align 8, !tbaa !5
  %18 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 0
  %bf.load = load i32* %18, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %arrayidx20 = getelementptr inbounds [30 x i8*]* %constraints, i64 0, i64 %idxprom17
  %19 = load i8** %arrayidx20, align 8, !tbaa !5
  %arrayidx22 = getelementptr inbounds [30 x i32]* %earlyclobber, i64 0, i64 %idxprom17
  store i32 0, i32* %arrayidx22, align 4, !tbaa !1
  %bf.clear24 = and i32 %bf.load, 65535
  %idxprom251155 = zext i32 %bf.clear24 to i64
  %arrayidx26 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom251155
  %20 = load i8* %arrayidx26, align 1, !tbaa !7
  %cmp28 = icmp eq i8 %20, 49
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %for.body16
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %21 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 0
  %bf.load33.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %for.body16
  %bf.load33 = phi i32 [ %bf.load33.pre, %if.then30 ], [ %bf.load, %for.body16 ]
  %op.0 = phi %struct.rtx_def* [ %21, %if.then30 ], [ %17, %for.body16 ]
  %bf.clear34 = and i32 %bf.load33, 65535
  %cmp35 = icmp eq i32 %bf.clear34, 63
  br i1 %cmp35, label %if.then37, label %if.end75

if.then37:                                        ; preds = %if.end32
  %fld38 = getelementptr inbounds %struct.rtx_def* %op.0, i64 0, i32 1
  %rtx40 = bitcast [1 x %union.rtunion_def]* %fld38 to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx40, align 8, !tbaa !5
  %23 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 0
  %bf.load41 = load i32* %23, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 61
  br i1 %cmp43, label %land.lhs.true, label %if.end75

land.lhs.true:                                    ; preds = %if.then37
  %arrayidx49 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx49 to i32*
  %24 = load i32* %rtuint, align 4, !tbaa !1
  %cmp50 = icmp ult i32 %24, 53
  br i1 %cmp50, label %if.then52, label %if.end75

if.then52:                                        ; preds = %land.lhs.true
  %bf.lshr63 = lshr i32 %bf.load41, 16
  %bf.clear64 = and i32 %bf.lshr63, 255
  %arrayidx66 = getelementptr inbounds %struct.rtx_def* %op.0, i64 0, i32 1, i64 1
  %rtuint67 = bitcast %union.rtunion_def* %arrayidx66 to i32*
  %25 = load i32* %rtuint67, align 4, !tbaa !1
  %bf.lshr69 = lshr i32 %bf.load33, 16
  %bf.clear70 = and i32 %bf.lshr69, 255
  %call = tail call i32 @subreg_regno_offset(i32 %24, i32 %bf.clear64, i32 %25, i32 %bf.clear70) #4
  %.pre1261 = load %struct.rtx_def** %rtx40, align 8, !tbaa !5
  br label %if.end75

if.end75:                                         ; preds = %if.then37, %land.lhs.true, %if.then52, %if.end32
  %op.1 = phi %struct.rtx_def* [ %op.0, %if.end32 ], [ %.pre1261, %if.then52 ], [ %22, %land.lhs.true ], [ %22, %if.then37 ]
  %offset.1 = phi i32 [ 0, %if.end32 ], [ %call, %if.then52 ], [ 0, %land.lhs.true ], [ 0, %if.then37 ]
  %26 = load i8* %19, align 1, !tbaa !7
  switch i8 %26, label %while.cond.preheader [
    i8 0, label %if.then83
    i8 44, label %if.then83
  ]

if.then83:                                        ; preds = %if.end75, %if.end75
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then83, %if.end75
  %win.0.ph = phi i32 [ 0, %if.end75 ], [ 1, %if.then83 ]
  %tobool1225 = icmp eq i8 %26, 0
  br i1 %tobool1225, label %while.end845, label %land.rhs.lr.ph

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %27 = getelementptr inbounds %struct.rtx_def* %op.1, i64 0, i32 0
  %arrayidx807 = getelementptr inbounds %struct.rtx_def* %op.1, i64 0, i32 1, i64 0
  %rtuint808 = bitcast %union.rtunion_def* %arrayidx807 to i32*
  %arrayidx140 = getelementptr inbounds [30 x i32]* %matching_operands, i64 0, i64 %idxprom17
  %arrayidx164 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 3, i64 %idxprom17
  %rtx262 = bitcast %union.rtunion_def* %arrayidx807 to %struct.rtx_def**
  %rtwint = getelementptr inbounds %struct.rtx_def* %op.1, i64 0, i32 1, i64 0, i32 0
  br label %land.rhs

land.rhs:                                         ; preds = %land.rhs.lr.ph, %while.cond.backedge
  %conv851239.in = phi i8 [ %26, %land.rhs.lr.ph ], [ %82, %while.cond.backedge ]
  %win.01236 = phi i32 [ %win.0.ph, %land.rhs.lr.ph ], [ %win.0.be, %while.cond.backedge ]
  %p.01235 = phi i8* [ %19, %land.rhs.lr.ph ], [ %p.0.be, %while.cond.backedge ]
  %funny_match_index.11226 = phi i32 [ %funny_match_index.0, %land.rhs.lr.ph ], [ %funny_match_index.1.be, %while.cond.backedge ]
  %incdec.ptr = getelementptr inbounds i8* %p.01235, i64 1
  %cmp87 = icmp eq i8 %conv851239.in, 44
  br i1 %cmp87, label %while.end845, label %while.body

while.body:                                       ; preds = %land.rhs
  %conv851239 = sext i8 %conv851239.in to i32
  switch i32 %conv851239, label %sw.default [
    i32 63, label %while.cond.backedge
    i32 33, label %while.cond.backedge
    i32 42, label %while.cond.backedge
    i32 37, label %while.cond.backedge
    i32 61, label %while.cond.backedge
    i32 43, label %while.cond.backedge
    i32 35, label %while.cond90
    i32 38, label %sw.bb100
    i32 48, label %sw.bb103
    i32 49, label %sw.bb103
    i32 50, label %sw.bb103
    i32 51, label %sw.bb103
    i32 52, label %sw.bb103
    i32 53, label %sw.bb103
    i32 54, label %sw.bb103
    i32 55, label %sw.bb103
    i32 56, label %sw.bb103
    i32 57, label %sw.bb103
    i32 112, label %sw.bb159
    i32 103, label %sw.bb169
    i32 88, label %sw.bb190
    i32 109, label %sw.bb191
    i32 60, label %sw.bb254
    i32 62, label %sw.bb277
    i32 69, label %sw.bb300
    i32 70, label %sw.bb307
    i32 71, label %sw.bb314
    i32 72, label %sw.bb314
    i32 115, label %sw.bb332
    i32 105, label %while.body.sw.bb350_crit_edge
    i32 110, label %sw.bb392
    i32 73, label %sw.bb410
    i32 74, label %sw.bb410
    i32 75, label %sw.bb410
    i32 76, label %sw.bb410
    i32 77, label %sw.bb410
    i32 78, label %sw.bb410
    i32 79, label %sw.bb410
    i32 80, label %sw.bb410
    i32 86, label %sw.bb507
    i32 111, label %sw.bb581
  ]

while.body.sw.bb350_crit_edge:                    ; preds = %while.body
  %bf.load351.pre = load i32* %27, align 8
  br label %sw.bb350

while.cond90:                                     ; preds = %while.body, %while.body98
  %p.1 = phi i8* [ %incdec.ptr99, %while.body98 ], [ %incdec.ptr, %while.body ]
  %28 = load i8* %p.1, align 1, !tbaa !7
  switch i8 %28, label %while.body98 [
    i8 0, label %while.cond.backedge
    i8 44, label %while.cond.backedge
  ]

while.body98:                                     ; preds = %while.cond90
  %incdec.ptr99 = getelementptr inbounds i8* %p.1, i64 1
  br label %while.cond90

sw.bb100:                                         ; preds = %while.body
  store i32 1, i32* %arrayidx22, align 4, !tbaa !1
  br label %while.cond.backedge

sw.bb103:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %call104 = call i64 @strtoul(i8* %p.01235, i8** %end, i32 10) #4
  %conv105 = trunc i64 %call104 to i32
  %29 = load i8** %end, align 8, !tbaa !5
  %sext1158.pre = shl i64 %call104, 32
  %idxprom141.pre = ashr exact i64 %sext1158.pre, 32
  br i1 %cmp795, label %if.end138, label %if.else

if.else:                                          ; preds = %sw.bb103
  %arrayidx110 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %idxprom141.pre
  %30 = load %struct.rtx_def** %arrayidx110, align 8, !tbaa !5
  %31 = load %struct.rtx_def** %arrayidx18, align 8, !tbaa !5
  %32 = getelementptr inbounds %struct.rtx_def* %30, i64 0, i32 0
  %bf.load113 = load i32* %32, align 8
  %bf.clear114 = and i32 %bf.load113, 65535
  %idxprom1151156 = zext i32 %bf.clear114 to i64
  %arrayidx116 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom1151156
  %33 = load i8* %arrayidx116, align 1, !tbaa !7
  %cmp118 = icmp eq i8 %33, 49
  br i1 %cmp118, label %if.then120, label %if.end124

if.then120:                                       ; preds = %if.else
  %arrayidx122 = getelementptr inbounds %struct.rtx_def* %30, i64 0, i32 1, i64 0
  %rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**
  %34 = load %struct.rtx_def** %rtx123, align 8, !tbaa !5
  br label %if.end124

if.end124:                                        ; preds = %if.then120, %if.else
  %op1.0 = phi %struct.rtx_def* [ %34, %if.then120 ], [ %30, %if.else ]
  %35 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 0
  %bf.load125 = load i32* %35, align 8
  %bf.clear126 = and i32 %bf.load125, 65535
  %idxprom1271157 = zext i32 %bf.clear126 to i64
  %arrayidx128 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom1271157
  %36 = load i8* %arrayidx128, align 1, !tbaa !7
  %cmp130 = icmp eq i8 %36, 49
  br i1 %cmp130, label %if.then132, label %if.end136

if.then132:                                       ; preds = %if.end124
  %arrayidx134 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 1, i64 0
  %rtx135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtx_def**
  %37 = load %struct.rtx_def** %rtx135, align 8, !tbaa !5
  br label %if.end136

if.end136:                                        ; preds = %if.then132, %if.end124
  %op2.0 = phi %struct.rtx_def* [ %37, %if.then132 ], [ %31, %if.end124 ]
  %call137 = tail call i32 @operands_match_p(%struct.rtx_def* %op1.0, %struct.rtx_def* %op2.0) #4
  br label %if.end138

if.end138:                                        ; preds = %sw.bb103, %if.end136
  %val.0 = phi i32 [ %call137, %if.end136 ], [ 1, %sw.bb103 ]
  store i32 %conv105, i32* %arrayidx140, align 4, !tbaa !1
  %arrayidx142 = getelementptr inbounds [30 x i32]* %matching_operands, i64 0, i64 %idxprom141.pre
  store i32 %opno.0, i32* %arrayidx142, align 4, !tbaa !1
  %cmp143 = icmp eq i32 %val.0, 0
  %win.0. = select i1 %cmp143, i32 %win.01236, i32 1
  %cmp147 = icmp eq i32 %val.0, 2
  %or.cond = and i1 %cmp147, %cmp150
  br i1 %or.cond, label %if.then152, label %while.cond.backedge

if.then152:                                       ; preds = %if.end138
  %idxprom153 = sext i32 %funny_match_index.11226 to i64
  %this = getelementptr inbounds [30 x %struct.funny_match]* %funny_match, i64 0, i64 %idxprom153, i32 0
  store i32 %opno.0, i32* %this, align 8, !tbaa !22
  %inc155 = add nsw i32 %funny_match_index.11226, 1
  %other = getelementptr inbounds [30 x %struct.funny_match]* %funny_match, i64 0, i64 %idxprom153, i32 1
  store i32 %conv105, i32* %other, align 4, !tbaa !24
  br label %while.cond.backedge

sw.bb159:                                         ; preds = %while.body
  br i1 %cmp160, label %if.then167, label %lor.lhs.false162

lor.lhs.false162:                                 ; preds = %sw.bb159
  %38 = load i32* %arrayidx164, align 4, !tbaa !7
  %call165 = tail call i32 @strict_memory_address_p(i32 %38, %struct.rtx_def* %op.1) #4
  %tobool166 = icmp eq i32 %call165, 0
  br i1 %tobool166, label %while.cond.backedge, label %if.then167

if.then167:                                       ; preds = %lor.lhs.false162, %sw.bb159
  br label %while.cond.backedge

sw.bb169:                                         ; preds = %while.body
  br i1 %cmp795, label %if.then188, label %lor.lhs.false172

lor.lhs.false172:                                 ; preds = %sw.bb169
  %bf.load173 = load i32* %27, align 8
  %bf.clear174 = and i32 %bf.load173, 65535
  %cmp175 = icmp eq i32 %bf.clear174, 61
  br i1 %cmp175, label %lor.lhs.false177, label %if.then188

lor.lhs.false177:                                 ; preds = %lor.lhs.false172
  %39 = load i32* @reload_in_progress, align 4, !tbaa !1
  %tobool178 = icmp eq i32 %39, 0
  br i1 %tobool178, label %lor.lhs.false185, label %land.lhs.true179

land.lhs.true179:                                 ; preds = %lor.lhs.false177
  %40 = load i32* %rtuint808, align 4, !tbaa !1
  %cmp183 = icmp ugt i32 %40, 52
  br i1 %cmp183, label %if.then188, label %lor.lhs.false185

lor.lhs.false185:                                 ; preds = %lor.lhs.false177, %land.lhs.true179
  %call186 = tail call i32 @reg_fits_class_p(%struct.rtx_def* %op.1, i32 12, i32 %offset.1, i32 %bf.clear)
  %tobool187 = icmp eq i32 %call186, 0
  br i1 %tobool187, label %while.cond.backedge, label %if.then188

if.then188:                                       ; preds = %lor.lhs.false185, %lor.lhs.false172, %land.lhs.true179, %sw.bb169
  br label %while.cond.backedge

sw.bb190:                                         ; preds = %while.body
  br label %while.cond.backedge

sw.bb191:                                         ; preds = %while.body
  %bf.load192 = load i32* %27, align 8
  %bf.clear193 = and i32 %bf.load192, 65535
  %cmp194 = icmp eq i32 %bf.clear193, 66
  br i1 %cmp194, label %if.then252, label %lor.lhs.false196

lor.lhs.false196:                                 ; preds = %sw.bb191
  br i1 %cmp795, label %land.lhs.true199, label %lor.lhs.false239

land.lhs.true199:                                 ; preds = %lor.lhs.false196
  switch i32 %bf.clear193, label %lor.lhs.false239 [
    i32 67, label %if.then252
    i32 68, label %if.then252
    i32 54, label %if.then252
    i32 55, label %if.then252
    i32 58, label %if.then252
    i32 134, label %if.then252
    i32 56, label %if.then252
    i32 140, label %if.then252
  ]

lor.lhs.false239:                                 ; preds = %land.lhs.true199, %lor.lhs.false196
  %41 = load i32* @reload_in_progress, align 4, !tbaa !1
  %tobool240 = icmp ne i32 %41, 0
  %cmp244 = icmp eq i32 %bf.clear193, 61
  %or.cond1296 = and i1 %tobool240, %cmp244
  br i1 %or.cond1296, label %land.lhs.true246, label %while.cond.backedge

land.lhs.true246:                                 ; preds = %lor.lhs.false239
  %42 = load i32* %rtuint808, align 4, !tbaa !1
  %cmp250 = icmp ugt i32 %42, 52
  br i1 %cmp250, label %if.then252, label %while.cond.backedge

if.then252:                                       ; preds = %land.lhs.true199, %land.lhs.true199, %land.lhs.true199, %land.lhs.true199, %land.lhs.true199, %land.lhs.true199, %land.lhs.true199, %land.lhs.true199, %land.lhs.true246, %sw.bb191
  br label %while.cond.backedge

sw.bb254:                                         ; preds = %while.body
  %bf.load255 = load i32* %27, align 8
  %bf.clear256 = and i32 %bf.load255, 65535
  %cmp257 = icmp eq i32 %bf.clear256, 66
  br i1 %cmp257, label %land.lhs.true259, label %while.cond.backedge

land.lhs.true259:                                 ; preds = %sw.bb254
  %43 = load %struct.rtx_def** %rtx262, align 8, !tbaa !5
  %44 = getelementptr inbounds %struct.rtx_def* %43, i64 0, i32 0
  %bf.load263 = load i32* %44, align 8
  %bf.clear264 = and i32 %bf.load263, 65535
  switch i32 %bf.clear264, label %while.cond.backedge [
    i32 96, label %if.then275
    i32 98, label %if.then275
  ]

if.then275:                                       ; preds = %land.lhs.true259, %land.lhs.true259
  br label %while.cond.backedge

sw.bb277:                                         ; preds = %while.body
  %bf.load278 = load i32* %27, align 8
  %bf.clear279 = and i32 %bf.load278, 65535
  %cmp280 = icmp eq i32 %bf.clear279, 66
  br i1 %cmp280, label %land.lhs.true282, label %while.cond.backedge

land.lhs.true282:                                 ; preds = %sw.bb277
  %45 = load %struct.rtx_def** %rtx262, align 8, !tbaa !5
  %46 = getelementptr inbounds %struct.rtx_def* %45, i64 0, i32 0
  %bf.load286 = load i32* %46, align 8
  %bf.clear287 = and i32 %bf.load286, 65535
  switch i32 %bf.clear287, label %while.cond.backedge [
    i32 97, label %if.then298
    i32 99, label %if.then298
  ]

if.then298:                                       ; preds = %land.lhs.true282, %land.lhs.true282
  br label %while.cond.backedge

sw.bb300:                                         ; preds = %while.body
  %bf.load301 = load i32* %27, align 8
  %bf.clear302 = and i32 %bf.load301, 65535
  %cmp303 = icmp eq i32 %bf.clear302, 55
  %.win.0 = select i1 %cmp303, i32 1, i32 %win.01236
  br label %while.cond.backedge

sw.bb307:                                         ; preds = %while.body
  %bf.load308 = load i32* %27, align 8
  %bf.clear309 = and i32 %bf.load308, 65535
  %cmp310 = icmp eq i32 %bf.clear309, 55
  %.win.01162 = select i1 %cmp310, i32 1, i32 %win.01236
  br label %while.cond.backedge

sw.bb314:                                         ; preds = %while.body, %while.body
  %bf.load315 = load i32* %27, align 8
  %bf.clear316 = and i32 %bf.load315, 65535
  %cmp317 = icmp eq i32 %bf.clear316, 55
  br i1 %cmp317, label %land.lhs.true319, label %while.cond.backedge

land.lhs.true319:                                 ; preds = %sw.bb314
  switch i8 %conv851239.in, label %while.cond.backedge [
    i8 71, label %cond.true
    i8 72, label %cond.true326
  ]

cond.true:                                        ; preds = %land.lhs.true319
  %call322 = tail call i32 @standard_80387_constant_p(%struct.rtx_def* %op.1) #4
  %tobool323 = icmp eq i32 %call322, 0
  br i1 %tobool323, label %while.cond.backedge, label %if.then330

cond.true326:                                     ; preds = %land.lhs.true319
  %call327 = tail call i32 @standard_sse_constant_p(%struct.rtx_def* %op.1) #4
  %tobool328 = icmp eq i32 %call327, 0
  br i1 %tobool328, label %while.cond.backedge, label %if.then330

if.then330:                                       ; preds = %cond.true, %cond.true326
  br label %while.cond.backedge

sw.bb332:                                         ; preds = %while.body
  %bf.load333 = load i32* %27, align 8
  %bf.clear334 = and i32 %bf.load333, 65535
  switch i32 %bf.clear334, label %sw.bb350 [
    i32 54, label %while.cond.backedge
    i32 55, label %land.lhs.true342
  ]

land.lhs.true342:                                 ; preds = %sw.bb332
  %bf.clear345 = and i32 %bf.load333, 16711680
  %cmp346 = icmp eq i32 %bf.clear345, 0
  br i1 %cmp346, label %while.cond.backedge, label %sw.bb350

sw.bb350:                                         ; preds = %while.body.sw.bb350_crit_edge, %sw.bb332, %land.lhs.true342
  %bf.load351 = phi i32 [ %bf.load351.pre, %while.body.sw.bb350_crit_edge ], [ %bf.load333, %sw.bb332 ], [ %bf.load333, %land.lhs.true342 ]
  %bf.clear352 = and i32 %bf.load351, 65535
  switch i32 %bf.clear352, label %while.cond.backedge [
    i32 67, label %if.then390
    i32 68, label %if.then390
    i32 54, label %if.then390
    i32 55, label %if.then390
    i32 58, label %if.then390
    i32 134, label %if.then390
    i32 56, label %if.then390
    i32 140, label %if.then390
  ]

if.then390:                                       ; preds = %sw.bb350, %sw.bb350, %sw.bb350, %sw.bb350, %sw.bb350, %sw.bb350, %sw.bb350, %sw.bb350
  br label %while.cond.backedge

sw.bb392:                                         ; preds = %while.body
  %bf.load393 = load i32* %27, align 8
  %bf.clear394 = and i32 %bf.load393, 65535
  switch i32 %bf.clear394, label %while.cond.backedge [
    i32 54, label %if.then408
    i32 55, label %land.lhs.true402
  ]

land.lhs.true402:                                 ; preds = %sw.bb392
  %bf.clear405 = and i32 %bf.load393, 16711680
  %cmp406 = icmp eq i32 %bf.clear405, 0
  br i1 %cmp406, label %if.then408, label %while.cond.backedge

if.then408:                                       ; preds = %sw.bb392, %land.lhs.true402
  br label %while.cond.backedge

sw.bb410:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %bf.load411 = load i32* %27, align 8
  %bf.clear412 = and i32 %bf.load411, 65535
  %cmp413 = icmp eq i32 %bf.clear412, 54
  br i1 %cmp413, label %land.lhs.true415, label %while.cond.backedge

land.lhs.true415:                                 ; preds = %sw.bb410
  switch i8 %conv851239.in, label %while.cond.backedge [
    i8 73, label %cond.true418
    i8 74, label %cond.true432
    i8 75, label %cond.true447
    i8 76, label %cond.true462
    i8 77, label %cond.true477
    i8 78, label %cond.true492
  ]

cond.true418:                                     ; preds = %land.lhs.true415
  %47 = load i64* %rtwint, align 8, !tbaa !25
  %48 = icmp ult i64 %47, 32
  br i1 %48, label %if.then505, label %while.cond.backedge

cond.true432:                                     ; preds = %land.lhs.true415
  %49 = load i64* %rtwint, align 8, !tbaa !25
  %50 = icmp ult i64 %49, 64
  br i1 %50, label %if.then505, label %while.cond.backedge

cond.true447:                                     ; preds = %land.lhs.true415
  %51 = load i64* %rtwint, align 8, !tbaa !25
  %.off = add i64 %51, 128
  %52 = icmp ult i64 %.off, 256
  br i1 %52, label %if.then505, label %while.cond.backedge

cond.true462:                                     ; preds = %land.lhs.true415
  %53 = load i64* %rtwint, align 8, !tbaa !25
  switch i64 %53, label %while.cond.backedge [
    i64 255, label %if.then505
    i64 65535, label %if.then505
  ]

cond.true477:                                     ; preds = %land.lhs.true415
  %54 = load i64* %rtwint, align 8, !tbaa !25
  %55 = icmp ult i64 %54, 4
  br i1 %55, label %if.then505, label %while.cond.backedge

cond.true492:                                     ; preds = %land.lhs.true415
  %56 = load i64* %rtwint, align 8, !tbaa !25
  %57 = icmp ult i64 %56, 256
  br i1 %57, label %if.then505, label %while.cond.backedge

if.then505:                                       ; preds = %cond.true492, %cond.true477, %cond.true462, %cond.true462, %cond.true447, %cond.true432, %cond.true418
  br label %while.cond.backedge

sw.bb507:                                         ; preds = %while.body
  %bf.load508 = load i32* %27, align 8
  %bf.clear509 = and i32 %bf.load508, 65535
  %cmp510 = icmp eq i32 %bf.clear509, 66
  br i1 %cmp510, label %land.lhs.true512, label %while.cond.backedge

land.lhs.true512:                                 ; preds = %sw.bb507
  br i1 %cmp150, label %offsettable_memref_p.exit, label %lor.lhs.false518

offsettable_memref_p.exit:                        ; preds = %land.lhs.true512
  %bf.lshr.i = lshr i32 %bf.load508, 16
  %bf.clear2.i = and i32 %bf.lshr.i, 255
  %58 = load %struct.rtx_def** %rtx262, align 8, !tbaa !5
  %call.i = tail call i32 @offsettable_address_p(i32 1, i32 %bf.clear2.i, %struct.rtx_def* %58) #4
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %if.then579, label %lor.lhs.false518

lor.lhs.false518:                                 ; preds = %offsettable_memref_p.exit, %land.lhs.true512
  br i1 %cmp795, label %land.lhs.true521, label %lor.lhs.false566

land.lhs.true521:                                 ; preds = %lor.lhs.false518
  %bf.load522 = load i32* %27, align 8
  %bf.clear523 = and i32 %bf.load522, 65535
  switch i32 %bf.clear523, label %if.then579 [
    i32 67, label %lor.lhs.false566
    i32 68, label %lor.lhs.false566
    i32 54, label %lor.lhs.false566
    i32 55, label %lor.lhs.false566
    i32 58, label %lor.lhs.false566
    i32 134, label %lor.lhs.false566
    i32 56, label %lor.lhs.false566
    i32 140, label %lor.lhs.false566
    i32 66, label %lor.lhs.false566
  ]

lor.lhs.false566:                                 ; preds = %land.lhs.true521, %land.lhs.true521, %land.lhs.true521, %land.lhs.true521, %land.lhs.true521, %land.lhs.true521, %land.lhs.true521, %land.lhs.true521, %land.lhs.true521, %lor.lhs.false518
  %59 = load i32* @reload_in_progress, align 4, !tbaa !1
  %tobool567 = icmp eq i32 %59, 0
  br i1 %tobool567, label %while.cond.backedge, label %land.lhs.true568

land.lhs.true568:                                 ; preds = %lor.lhs.false566
  %bf.load569 = load i32* %27, align 8
  %bf.clear570 = and i32 %bf.load569, 65535
  %cmp571 = icmp eq i32 %bf.clear570, 61
  br i1 %cmp571, label %land.lhs.true573, label %if.then579

land.lhs.true573:                                 ; preds = %land.lhs.true568
  %60 = load i32* %rtuint808, align 4, !tbaa !1
  %cmp577 = icmp ugt i32 %60, 52
  br i1 %cmp577, label %while.cond.backedge, label %if.then579

if.then579:                                       ; preds = %offsettable_memref_p.exit, %land.lhs.true521, %land.lhs.true573, %land.lhs.true568
  br label %while.cond.backedge

sw.bb581:                                         ; preds = %while.body
  br i1 %cmp150, label %land.lhs.true584, label %lor.lhs.false587

land.lhs.true584:                                 ; preds = %sw.bb581
  %bf.load.i1169 = load i32* %27, align 8
  %bf.clear.i1170 = and i32 %bf.load.i1169, 65535
  %cmp.i1171 = icmp eq i32 %bf.clear.i1170, 66
  br i1 %cmp.i1171, label %land.rhs.i1178, label %lor.lhs.false587

land.rhs.i1178:                                   ; preds = %land.lhs.true584
  %bf.lshr.i1172 = lshr i32 %bf.load.i1169, 16
  %bf.clear2.i1173 = and i32 %bf.lshr.i1172, 255
  %61 = load %struct.rtx_def** %rtx262, align 8, !tbaa !5
  %call.i1176 = tail call i32 @offsettable_address_p(i32 1, i32 %bf.clear2.i1173, %struct.rtx_def* %61) #4
  %tobool.i1177 = icmp eq i32 %call.i1176, 0
  br i1 %tobool.i1177, label %lor.lhs.false587, label %if.then654

lor.lhs.false587:                                 ; preds = %land.rhs.i1178, %land.lhs.true584, %sw.bb581
  br i1 %cmp798, label %land.lhs.true590, label %lor.lhs.false593

land.lhs.true590:                                 ; preds = %lor.lhs.false587
  %bf.load.i1181 = load i32* %27, align 8
  %bf.clear.i1182 = and i32 %bf.load.i1181, 65535
  %cmp.i1183 = icmp eq i32 %bf.clear.i1182, 66
  br i1 %cmp.i1183, label %land.rhs.i1190, label %lor.lhs.false593

land.rhs.i1190:                                   ; preds = %land.lhs.true590
  %bf.lshr.i1184 = lshr i32 %bf.load.i1181, 16
  %bf.clear2.i1185 = and i32 %bf.lshr.i1184, 255
  %62 = load %struct.rtx_def** %rtx262, align 8, !tbaa !5
  %call.i1188 = tail call i32 @offsettable_address_p(i32 0, i32 %bf.clear2.i1185, %struct.rtx_def* %62) #4
  %tobool.i1189 = icmp eq i32 %call.i1188, 0
  br i1 %tobool.i1189, label %lor.lhs.false593, label %if.then654

lor.lhs.false593:                                 ; preds = %land.rhs.i1190, %land.lhs.true590, %lor.lhs.false587
  br i1 %cmp795, label %land.lhs.true596, label %lor.lhs.false641

land.lhs.true596:                                 ; preds = %lor.lhs.false593
  %bf.load597 = load i32* %27, align 8
  %bf.clear598 = and i32 %bf.load597, 65535
  switch i32 %bf.clear598, label %lor.lhs.false641 [
    i32 67, label %if.then654
    i32 68, label %if.then654
    i32 54, label %if.then654
    i32 55, label %if.then654
    i32 58, label %if.then654
    i32 134, label %if.then654
    i32 56, label %if.then654
    i32 140, label %if.then654
    i32 66, label %if.then654
  ]

lor.lhs.false641:                                 ; preds = %land.lhs.true596, %lor.lhs.false593
  %63 = load i32* @reload_in_progress, align 4, !tbaa !1
  %tobool642 = icmp eq i32 %63, 0
  br i1 %tobool642, label %while.cond.backedge, label %land.lhs.true643

land.lhs.true643:                                 ; preds = %lor.lhs.false641
  %bf.load644 = load i32* %27, align 8
  %bf.clear645 = and i32 %bf.load644, 65535
  %cmp646 = icmp eq i32 %bf.clear645, 61
  br i1 %cmp646, label %land.lhs.true648, label %while.cond.backedge

land.lhs.true648:                                 ; preds = %land.lhs.true643
  %64 = load i32* %rtuint808, align 4, !tbaa !1
  %cmp652 = icmp ugt i32 %64, 52
  br i1 %cmp652, label %if.then654, label %while.cond.backedge

if.then654:                                       ; preds = %land.rhs.i1178, %land.rhs.i1190, %land.lhs.true596, %land.lhs.true596, %land.lhs.true596, %land.lhs.true596, %land.lhs.true596, %land.lhs.true596, %land.lhs.true596, %land.lhs.true596, %land.lhs.true596, %land.lhs.true648
  br label %while.cond.backedge

sw.default:                                       ; preds = %while.body
  %cmp656 = icmp eq i8 %conv851239.in, 114
  br i1 %cmp656, label %if.then794, label %cond.false663

cond.false663:                                    ; preds = %sw.default
  switch i8 %conv851239.in, label %cond.false672 [
    i8 82, label %if.then794
    i8 113, label %cond.true670
  ]

cond.true670:                                     ; preds = %cond.false663
  %65 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %65, 23
  %66 = and i32 %and, 4
  %67 = or i32 %66, 8
  br label %if.then794

cond.false672:                                    ; preds = %cond.false663
  switch i8 %conv851239.in, label %cond.false707 [
    i8 81, label %if.then794
    i8 102, label %cond.true679
    i8 116, label %cond.true688
    i8 117, label %cond.true699
  ]

cond.true679:                                     ; preds = %cond.false672
  %68 = load i32* @target_flags, align 4, !tbaa !1
  %69 = and i32 %68, 33
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %while.cond.backedge, label %if.then794

cond.true688:                                     ; preds = %cond.false672
  %71 = load i32* @target_flags, align 4, !tbaa !1
  %72 = and i32 %71, 33
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %while.cond.backedge, label %if.then794

cond.true699:                                     ; preds = %cond.false672
  %74 = load i32* @target_flags, align 4, !tbaa !1
  %75 = and i32 %74, 33
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %while.cond.backedge, label %if.then794

cond.false707:                                    ; preds = %cond.false672
  %cmp708 = icmp eq i8 %conv851239.in, 97
  br i1 %cmp708, label %if.then794, label %cond.false711

cond.false711:                                    ; preds = %cond.false707
  %cmp712 = icmp eq i8 %conv851239.in, 98
  br i1 %cmp712, label %if.then794, label %cond.false715

cond.false715:                                    ; preds = %cond.false711
  %cmp716 = icmp eq i8 %conv851239.in, 99
  br i1 %cmp716, label %if.then794, label %cond.false719

cond.false719:                                    ; preds = %cond.false715
  switch i8 %conv851239.in, label %cond.false747 [
    i8 100, label %if.then794
    i8 120, label %cond.true726
    i8 89, label %cond.end790
    i8 121, label %cond.true742
  ]

cond.true726:                                     ; preds = %cond.false719
  %77 = load i32* @target_flags, align 4, !tbaa !1
  %and727 = and i32 %77, 327680
  %cmp728 = icmp eq i32 %and727, 0
  br i1 %cmp728, label %while.cond.backedge, label %if.then794

cond.true742:                                     ; preds = %cond.false719
  %78 = load i32* @target_flags, align 4, !tbaa !1
  %and743 = and i32 %78, 16384
  %cmp744 = icmp eq i32 %and743, 0
  br i1 %cmp744, label %while.cond.backedge, label %if.then794

cond.false747:                                    ; preds = %cond.false719
  %cmp748 = icmp eq i8 %conv851239.in, 65
  br i1 %cmp748, label %if.then794, label %cond.false751

cond.false751:                                    ; preds = %cond.false747
  %cmp752 = icmp eq i8 %conv851239.in, 68
  br i1 %cmp752, label %if.then794, label %cond.false755

cond.false755:                                    ; preds = %cond.false751
  switch i8 %conv851239.in, label %while.cond.backedge [
    i8 83, label %if.then794
    i8 101, label %cond.true832
    i8 90, label %cond.true838
  ]

cond.end790:                                      ; preds = %cond.false719
  %79 = load i32* @target_flags, align 4, !tbaa !1
  %and735 = lshr i32 %79, 14
  %80 = and i32 %and735, 16
  %cmp792 = icmp eq i32 %80, 0
  br i1 %cmp792, label %while.cond.backedge, label %if.then794

if.then794:                                       ; preds = %cond.true726, %cond.true742, %cond.true679, %cond.true688, %cond.true699, %cond.false755, %cond.false751, %cond.false747, %cond.false719, %cond.false715, %cond.false711, %cond.false707, %cond.false672, %cond.true670, %cond.false663, %sw.default, %cond.end790
  %cond7911198 = phi i32 [ %80, %cond.end790 ], [ 12, %sw.default ], [ 11, %cond.false663 ], [ %67, %cond.true670 ], [ 8, %cond.false672 ], [ 1, %cond.false707 ], [ 4, %cond.false711 ], [ 3, %cond.false715 ], [ 2, %cond.false719 ], [ 7, %cond.false747 ], [ 6, %cond.false751 ], [ 15, %cond.true679 ], [ 13, %cond.true688 ], [ 14, %cond.true699 ], [ 16, %cond.true726 ], [ 17, %cond.true742 ], [ 5, %cond.false755 ]
  br i1 %cmp795, label %if.then827, label %lor.lhs.false797

lor.lhs.false797:                                 ; preds = %if.then794
  %bf.load801 = load i32* %27, align 8
  br i1 %cmp798, label %land.lhs.true800, label %lor.lhs.false819

land.lhs.true800:                                 ; preds = %lor.lhs.false797
  %bf.clear802 = and i32 %bf.load801, 65535
  switch i32 %bf.clear802, label %lor.lhs.false819 [
    i32 61, label %land.lhs.true805
    i32 62, label %if.then827
  ]

land.lhs.true805:                                 ; preds = %land.lhs.true800
  %81 = load i32* %rtuint808, align 4, !tbaa !1
  %cmp809 = icmp ugt i32 %81, 52
  br i1 %cmp809, label %if.then827, label %lor.lhs.false819

lor.lhs.false819:                                 ; preds = %land.lhs.true800, %lor.lhs.false797, %land.lhs.true805
  %bf.clear821 = and i32 %bf.load801, 65535
  %cmp822 = icmp eq i32 %bf.clear821, 61
  br i1 %cmp822, label %land.lhs.true824, label %while.cond.backedge

land.lhs.true824:                                 ; preds = %lor.lhs.false819
  %call825 = tail call i32 @reg_fits_class_p(%struct.rtx_def* %op.1, i32 %cond7911198, i32 %offset.1, i32 %bf.clear)
  %tobool826 = icmp eq i32 %call825, 0
  br i1 %tobool826, label %while.cond.backedge, label %if.then827

if.then827:                                       ; preds = %land.lhs.true800, %land.lhs.true824, %land.lhs.true805, %if.then794
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %while.cond90, %while.cond90, %lor.lhs.false239, %cond.true699, %cond.true688, %cond.true679, %if.then827, %lor.lhs.false819, %if.then842, %land.lhs.true643, %land.lhs.true648, %if.then654, %sw.bb507, %land.lhs.true573, %if.then579, %sw.bb410, %cond.true418, %cond.true432, %cond.true447, %cond.true477, %cond.true492, %if.then505, %land.lhs.true402, %if.then408, %if.then390, %land.lhs.true342, %sw.bb314, %if.then330, %sw.bb277, %if.then298, %sw.bb254, %if.then275, %land.lhs.true246, %if.then252, %if.then188, %if.then167, %if.end138, %if.then152, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %sw.bb190, %sw.bb100, %lor.lhs.false641, %lor.lhs.false566, %cond.true326, %cond.true, %lor.lhs.false185, %lor.lhs.false162, %cond.true838, %cond.true832, %land.lhs.true824, %land.lhs.true259, %land.lhs.true282, %land.lhs.true319, %sw.bb332, %sw.bb350, %sw.bb392, %cond.true462, %land.lhs.true415, %sw.bb300, %sw.bb307, %cond.end790, %cond.false755, %cond.true742, %cond.true726
  %funny_match_index.1.be = phi i32 [ %funny_match_index.11226, %if.then827 ], [ %funny_match_index.11226, %land.lhs.true824 ], [ %funny_match_index.11226, %lor.lhs.false819 ], [ %funny_match_index.11226, %if.then842 ], [ %funny_match_index.11226, %cond.true832 ], [ %funny_match_index.11226, %cond.true838 ], [ %funny_match_index.11226, %if.then654 ], [ %funny_match_index.11226, %land.lhs.true648 ], [ %funny_match_index.11226, %land.lhs.true643 ], [ %funny_match_index.11226, %lor.lhs.false641 ], [ %funny_match_index.11226, %land.lhs.true573 ], [ %funny_match_index.11226, %if.then579 ], [ %funny_match_index.11226, %lor.lhs.false566 ], [ %funny_match_index.11226, %sw.bb507 ], [ %funny_match_index.11226, %if.then505 ], [ %funny_match_index.11226, %cond.true418 ], [ %funny_match_index.11226, %cond.true432 ], [ %funny_match_index.11226, %cond.true447 ], [ %funny_match_index.11226, %cond.true477 ], [ %funny_match_index.11226, %cond.true492 ], [ %funny_match_index.11226, %sw.bb410 ], [ %funny_match_index.11226, %if.then408 ], [ %funny_match_index.11226, %land.lhs.true402 ], [ %funny_match_index.11226, %if.then390 ], [ %funny_match_index.11226, %sw.bb332 ], [ %funny_match_index.11226, %land.lhs.true342 ], [ %funny_match_index.11226, %if.then330 ], [ %funny_match_index.11226, %cond.true ], [ %funny_match_index.11226, %cond.true326 ], [ %funny_match_index.11226, %sw.bb314 ], [ %funny_match_index.11226, %if.then298 ], [ %funny_match_index.11226, %sw.bb277 ], [ %funny_match_index.11226, %if.then275 ], [ %funny_match_index.11226, %sw.bb254 ], [ %funny_match_index.11226, %if.then252 ], [ %funny_match_index.11226, %land.lhs.true246 ], [ %funny_match_index.11226, %lor.lhs.false239 ], [ %funny_match_index.11226, %sw.bb190 ], [ %funny_match_index.11226, %if.then188 ], [ %funny_match_index.11226, %lor.lhs.false185 ], [ %funny_match_index.11226, %if.then167 ], [ %funny_match_index.11226, %lor.lhs.false162 ], [ %inc155, %if.then152 ], [ %funny_match_index.11226, %if.end138 ], [ %funny_match_index.11226, %sw.bb100 ], [ %funny_match_index.11226, %while.body ], [ %funny_match_index.11226, %while.body ], [ %funny_match_index.11226, %while.body ], [ %funny_match_index.11226, %while.body ], [ %funny_match_index.11226, %while.body ], [ %funny_match_index.11226, %while.body ], [ %funny_match_index.11226, %land.lhs.true259 ], [ %funny_match_index.11226, %land.lhs.true282 ], [ %funny_match_index.11226, %sw.bb300 ], [ %funny_match_index.11226, %sw.bb307 ], [ %funny_match_index.11226, %land.lhs.true319 ], [ %funny_match_index.11226, %sw.bb350 ], [ %funny_match_index.11226, %sw.bb392 ], [ %funny_match_index.11226, %cond.true462 ], [ %funny_match_index.11226, %land.lhs.true415 ], [ %funny_match_index.11226, %cond.end790 ], [ %funny_match_index.11226, %cond.true726 ], [ %funny_match_index.11226, %cond.true742 ], [ %funny_match_index.11226, %cond.false755 ], [ %funny_match_index.11226, %cond.true679 ], [ %funny_match_index.11226, %cond.true688 ], [ %funny_match_index.11226, %cond.true699 ], [ %funny_match_index.11226, %while.cond90 ], [ %funny_match_index.11226, %while.cond90 ]
  %p.0.be = phi i8* [ %incdec.ptr, %if.then827 ], [ %incdec.ptr, %land.lhs.true824 ], [ %incdec.ptr, %lor.lhs.false819 ], [ %incdec.ptr, %if.then842 ], [ %incdec.ptr, %cond.true832 ], [ %incdec.ptr, %cond.true838 ], [ %incdec.ptr, %if.then654 ], [ %incdec.ptr, %land.lhs.true648 ], [ %incdec.ptr, %land.lhs.true643 ], [ %incdec.ptr, %lor.lhs.false641 ], [ %incdec.ptr, %land.lhs.true573 ], [ %incdec.ptr, %if.then579 ], [ %incdec.ptr, %lor.lhs.false566 ], [ %incdec.ptr, %sw.bb507 ], [ %incdec.ptr, %if.then505 ], [ %incdec.ptr, %cond.true418 ], [ %incdec.ptr, %cond.true432 ], [ %incdec.ptr, %cond.true447 ], [ %incdec.ptr, %cond.true477 ], [ %incdec.ptr, %cond.true492 ], [ %incdec.ptr, %sw.bb410 ], [ %incdec.ptr, %if.then408 ], [ %incdec.ptr, %land.lhs.true402 ], [ %incdec.ptr, %if.then390 ], [ %incdec.ptr, %sw.bb332 ], [ %incdec.ptr, %land.lhs.true342 ], [ %incdec.ptr, %if.then330 ], [ %incdec.ptr, %cond.true ], [ %incdec.ptr, %cond.true326 ], [ %incdec.ptr, %sw.bb314 ], [ %incdec.ptr, %if.then298 ], [ %incdec.ptr, %sw.bb277 ], [ %incdec.ptr, %if.then275 ], [ %incdec.ptr, %sw.bb254 ], [ %incdec.ptr, %if.then252 ], [ %incdec.ptr, %land.lhs.true246 ], [ %incdec.ptr, %lor.lhs.false239 ], [ %incdec.ptr, %sw.bb190 ], [ %incdec.ptr, %if.then188 ], [ %incdec.ptr, %lor.lhs.false185 ], [ %incdec.ptr, %if.then167 ], [ %incdec.ptr, %lor.lhs.false162 ], [ %29, %if.then152 ], [ %29, %if.end138 ], [ %incdec.ptr, %sw.bb100 ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %land.lhs.true259 ], [ %incdec.ptr, %land.lhs.true282 ], [ %incdec.ptr, %sw.bb300 ], [ %incdec.ptr, %sw.bb307 ], [ %incdec.ptr, %land.lhs.true319 ], [ %incdec.ptr, %sw.bb350 ], [ %incdec.ptr, %sw.bb392 ], [ %incdec.ptr, %cond.true462 ], [ %incdec.ptr, %land.lhs.true415 ], [ %incdec.ptr, %cond.end790 ], [ %incdec.ptr, %cond.true726 ], [ %incdec.ptr, %cond.true742 ], [ %incdec.ptr, %cond.false755 ], [ %incdec.ptr, %cond.true679 ], [ %incdec.ptr, %cond.true688 ], [ %incdec.ptr, %cond.true699 ], [ %p.1, %while.cond90 ], [ %p.1, %while.cond90 ]
  %win.0.be = phi i32 [ 1, %if.then827 ], [ %win.01236, %land.lhs.true824 ], [ %win.01236, %lor.lhs.false819 ], [ 1, %if.then842 ], [ %win.01236, %cond.true832 ], [ %win.01236, %cond.true838 ], [ 1, %if.then654 ], [ %win.01236, %land.lhs.true648 ], [ %win.01236, %land.lhs.true643 ], [ %win.01236, %lor.lhs.false641 ], [ %win.01236, %land.lhs.true573 ], [ 1, %if.then579 ], [ %win.01236, %lor.lhs.false566 ], [ %win.01236, %sw.bb507 ], [ 1, %if.then505 ], [ %win.01236, %cond.true418 ], [ %win.01236, %cond.true432 ], [ %win.01236, %cond.true447 ], [ %win.01236, %cond.true477 ], [ %win.01236, %cond.true492 ], [ %win.01236, %sw.bb410 ], [ 1, %if.then408 ], [ %win.01236, %land.lhs.true402 ], [ 1, %if.then390 ], [ %win.01236, %sw.bb332 ], [ %win.01236, %land.lhs.true342 ], [ 1, %if.then330 ], [ %win.01236, %cond.true ], [ %win.01236, %cond.true326 ], [ %win.01236, %sw.bb314 ], [ 1, %if.then298 ], [ %win.01236, %sw.bb277 ], [ 1, %if.then275 ], [ %win.01236, %sw.bb254 ], [ 1, %if.then252 ], [ %win.01236, %land.lhs.true246 ], [ %win.01236, %lor.lhs.false239 ], [ 1, %sw.bb190 ], [ 1, %if.then188 ], [ %win.01236, %lor.lhs.false185 ], [ 1, %if.then167 ], [ %win.01236, %lor.lhs.false162 ], [ %win.0., %if.then152 ], [ %win.0., %if.end138 ], [ %win.01236, %sw.bb100 ], [ %win.01236, %while.body ], [ %win.01236, %while.body ], [ %win.01236, %while.body ], [ %win.01236, %while.body ], [ %win.01236, %while.body ], [ %win.01236, %while.body ], [ %win.01236, %land.lhs.true259 ], [ %win.01236, %land.lhs.true282 ], [ %.win.0, %sw.bb300 ], [ %.win.01162, %sw.bb307 ], [ %win.01236, %land.lhs.true319 ], [ %win.01236, %sw.bb350 ], [ %win.01236, %sw.bb392 ], [ %win.01236, %cond.true462 ], [ %win.01236, %land.lhs.true415 ], [ %win.01236, %cond.end790 ], [ %win.01236, %cond.true726 ], [ %win.01236, %cond.true742 ], [ %win.01236, %cond.false755 ], [ %win.01236, %cond.true679 ], [ %win.01236, %cond.true688 ], [ %win.01236, %cond.true699 ], [ %win.01236, %while.cond90 ], [ %win.01236, %while.cond90 ]
  %82 = load i8* %p.0.be, align 1, !tbaa !7
  %tobool = icmp eq i8 %82, 0
  br i1 %tobool, label %while.end845, label %land.rhs

cond.true832:                                     ; preds = %cond.false755
  %call833 = tail call i32 @x86_64_sign_extended_value(%struct.rtx_def* %op.1) #4
  %tobool834 = icmp eq i32 %call833, 0
  br i1 %tobool834, label %while.cond.backedge, label %if.then842

cond.true838:                                     ; preds = %cond.false755
  %call839 = tail call i32 @x86_64_zero_extended_value(%struct.rtx_def* %op.1) #4
  %tobool840 = icmp eq i32 %call839, 0
  br i1 %tobool840, label %while.cond.backedge, label %if.then842

if.then842:                                       ; preds = %cond.true832, %cond.true838
  br label %while.cond.backedge

while.end845:                                     ; preds = %while.cond.backedge, %land.rhs, %while.cond.preheader
  %win.0.lcssa = phi i32 [ %win.0.ph, %while.cond.preheader ], [ %win.0.be, %while.cond.backedge ], [ %win.01236, %land.rhs ]
  %funny_match_index.1.lcssa = phi i32 [ %funny_match_index.0, %while.cond.preheader ], [ %funny_match_index.1.be, %while.cond.backedge ], [ %funny_match_index.11226, %land.rhs ]
  %p.2 = phi i8* [ %19, %while.cond.preheader ], [ %p.0.be, %while.cond.backedge ], [ %incdec.ptr, %land.rhs ]
  store i8* %p.2, i8** %arrayidx20, align 8, !tbaa !5
  %tobool848 = icmp eq i32 %win.0.lcssa, 0
  %.lose.0 = select i1 %tobool848, i32 1, i32 %lose.0
  %inc852 = add nsw i32 %opno.0, 1
  %.pre.pre = load i32* bitcast (i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7) to i32*), align 4
  br label %for.cond12.backedge

for.cond12.backedge:                              ; preds = %while.end845, %if.end948
  %.pre = phi i32 [ %.pre.pre, %while.end845 ], [ %.pre1283, %if.end948 ]
  %opno.0.be = phi i32 [ %inc852, %while.end845 ], [ 0, %if.end948 ]
  %lose.0.be = phi i32 [ %.lose.0, %while.end845 ], [ 0, %if.end948 ]
  %funny_match_index.0.be = phi i32 [ %funny_match_index.1.lcssa, %while.end845 ], [ 0, %if.end948 ]
  %83 = trunc i32 %.pre to i8
  %84 = lshr i32 %.pre, 16
  %85 = trunc i32 %84 to i8
  br label %for.cond12

for.end853:                                       ; preds = %for.cond12
  %tobool854 = icmp eq i32 %lose.0, 0
  br i1 %tobool854, label %if.then855, label %if.end948

if.then855:                                       ; preds = %for.end853
  %cmp8621218 = icmp sgt i8 %16, 0
  %or.cond1297 = and i1 %cmp150, %cmp8621218
  br i1 %or.cond1297, label %for.body864, label %while.cond932.preheader

for.body864:                                      ; preds = %if.then855, %for.inc926
  %.pre1287 = phi i32 [ %.pre1286, %for.inc926 ], [ %.pre1288, %if.then855 ]
  %86 = phi i8 [ %111, %for.inc926 ], [ %15, %if.then855 ]
  %87 = phi i8 [ %112, %for.inc926 ], [ %16, %if.then855 ]
  %88 = phi i8 [ %113, %for.inc926 ], [ %16, %if.then855 ]
  %indvars.iv1255 = phi i64 [ %indvars.iv.next1256, %for.inc926 ], [ 0, %if.then855 ]
  %lose.21219 = phi i32 [ %lose.5, %for.inc926 ], [ 0, %if.then855 ]
  %arrayidx866 = getelementptr inbounds [30 x i32]* %earlyclobber, i64 0, i64 %indvars.iv1255
  %89 = load i32* %arrayidx866, align 4, !tbaa !1
  %tobool867 = icmp eq i32 %89, 0
  br i1 %tobool867, label %for.inc926, label %land.lhs.true868

land.lhs.true868:                                 ; preds = %for.body864
  %arrayidx870 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %indvars.iv1255
  %90 = load %struct.rtx_def** %arrayidx870, align 8, !tbaa !5
  %91 = getelementptr inbounds %struct.rtx_def* %90, i64 0, i32 0
  %bf.load871 = load i32* %91, align 8
  %bf.clear872 = and i32 %bf.load871, 65535
  %cmp873 = icmp eq i32 %bf.clear872, 61
  br i1 %cmp873, label %for.cond876.preheader, label %for.inc926

for.cond876.preheader:                            ; preds = %land.lhs.true868
  %cmp8781214 = icmp sgt i8 %87, 0
  br i1 %cmp8781214, label %for.body880, label %for.inc926

for.body880:                                      ; preds = %for.cond876.preheader, %for.inc922
  %indvars.iv1253 = phi i64 [ %indvars.iv.next1254, %for.inc922 ], [ 0, %for.cond876.preheader ]
  %lose.31215 = phi i32 [ %lose.4, %for.inc922 ], [ %lose.21219, %for.cond876.preheader ]
  %arrayidx882 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %indvars.iv1253
  %92 = load %struct.rtx_def** %arrayidx882, align 8, !tbaa !5
  %93 = getelementptr inbounds %struct.rtx_def* %92, i64 0, i32 0
  %bf.load883 = load i32* %93, align 8
  %bf.clear884 = and i32 %bf.load883, 65535
  %cmp885 = icmp eq i32 %bf.clear884, 66
  br i1 %cmp885, label %land.lhs.true892, label %lor.lhs.false887

lor.lhs.false887:                                 ; preds = %for.body880
  %arrayidx889 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 4, i64 %indvars.iv1253
  %94 = load i32* %arrayidx889, align 4, !tbaa !7
  %cmp890 = icmp eq i32 %94, 1
  %95 = trunc i64 %indvars.iv1253 to i32
  %96 = trunc i64 %indvars.iv1255 to i32
  %cmp893 = icmp eq i32 %95, %96
  %or.cond1168 = or i1 %cmp890, %cmp893
  br i1 %or.cond1168, label %for.inc922, label %land.lhs.true895

land.lhs.true892:                                 ; preds = %for.body880
  %97 = trunc i64 %indvars.iv1253 to i32
  %98 = trunc i64 %indvars.iv1255 to i32
  %cmp893.old = icmp eq i32 %97, %98
  br i1 %cmp893.old, label %for.inc922, label %land.lhs.true895

land.lhs.true895:                                 ; preds = %lor.lhs.false887, %land.lhs.true892
  %arrayidx897 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 2, i64 %indvars.iv1253
  %99 = load i8** %arrayidx897, align 8, !tbaa !5
  %100 = load i8* %99, align 1, !tbaa !7
  %cmp899 = icmp eq i8 %100, 0
  br i1 %cmp899, label %for.inc922, label %land.lhs.true901

land.lhs.true901:                                 ; preds = %land.lhs.true895
  %arrayidx903 = getelementptr inbounds [30 x i32]* %matching_operands, i64 0, i64 %indvars.iv1253
  %101 = load i32* %arrayidx903, align 4, !tbaa !1
  %102 = trunc i64 %indvars.iv1255 to i32
  %cmp904 = icmp eq i32 %101, %102
  br i1 %cmp904, label %land.lhs.true906, label %land.lhs.true913

land.lhs.true906:                                 ; preds = %land.lhs.true901
  %103 = load %struct.rtx_def** %arrayidx870, align 8, !tbaa !5
  %call911 = tail call i32 @operands_match_p(%struct.rtx_def* %92, %struct.rtx_def* %103) #4
  %tobool912 = icmp eq i32 %call911, 0
  br i1 %tobool912, label %land.lhs.true906.land.lhs.true913_crit_edge, label %for.inc922

land.lhs.true906.land.lhs.true913_crit_edge:      ; preds = %land.lhs.true906
  %.pre1282 = load %struct.rtx_def** %arrayidx882, align 8, !tbaa !5
  br label %land.lhs.true913

land.lhs.true913:                                 ; preds = %land.lhs.true906.land.lhs.true913_crit_edge, %land.lhs.true901
  %104 = phi %struct.rtx_def* [ %.pre1282, %land.lhs.true906.land.lhs.true913_crit_edge ], [ %92, %land.lhs.true901 ]
  %105 = load %struct.rtx_def** %arrayidx870, align 8, !tbaa !5
  %call918 = tail call i32 @safe_from_earlyclobber(%struct.rtx_def* %104, %struct.rtx_def* %105) #4
  %tobool919 = icmp eq i32 %call918, 0
  %.lose.3 = select i1 %tobool919, i32 1, i32 %lose.31215
  br label %for.inc922

for.inc922:                                       ; preds = %land.lhs.true913, %land.lhs.true906, %land.lhs.true895, %land.lhs.true892, %lor.lhs.false887
  %lose.4 = phi i32 [ %lose.31215, %land.lhs.true906 ], [ %lose.31215, %land.lhs.true895 ], [ %lose.31215, %land.lhs.true892 ], [ %lose.31215, %lor.lhs.false887 ], [ %.lose.3, %land.lhs.true913 ]
  %indvars.iv.next1254 = add nuw nsw i64 %indvars.iv1253, 1
  %106 = load i32* bitcast (i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7) to i32*), align 4
  %sext1292 = shl i32 %106, 24
  %conv877 = ashr exact i32 %sext1292, 24
  %107 = trunc i64 %indvars.iv.next1254 to i32
  %cmp878 = icmp slt i32 %107, %conv877
  br i1 %cmp878, label %for.body880, label %for.cond876.for.inc926.loopexit_crit_edge

for.cond876.for.inc926.loopexit_crit_edge:        ; preds = %for.inc922
  %108 = lshr i32 %106, 16
  %109 = trunc i32 %108 to i8
  %110 = trunc i32 %106 to i8
  br label %for.inc926

for.inc926:                                       ; preds = %for.cond876.preheader, %for.cond876.for.inc926.loopexit_crit_edge, %for.body864, %land.lhs.true868
  %.pre1286 = phi i32 [ %.pre1287, %land.lhs.true868 ], [ %.pre1287, %for.body864 ], [ %106, %for.cond876.for.inc926.loopexit_crit_edge ], [ %.pre1287, %for.cond876.preheader ]
  %111 = phi i8 [ %86, %land.lhs.true868 ], [ %86, %for.body864 ], [ %109, %for.cond876.for.inc926.loopexit_crit_edge ], [ %86, %for.cond876.preheader ]
  %112 = phi i8 [ %87, %land.lhs.true868 ], [ %87, %for.body864 ], [ %110, %for.cond876.for.inc926.loopexit_crit_edge ], [ %87, %for.cond876.preheader ]
  %113 = phi i8 [ %88, %land.lhs.true868 ], [ %88, %for.body864 ], [ %110, %for.cond876.for.inc926.loopexit_crit_edge ], [ %87, %for.cond876.preheader ]
  %lose.5 = phi i32 [ %lose.21219, %land.lhs.true868 ], [ %lose.21219, %for.body864 ], [ %lose.4, %for.cond876.for.inc926.loopexit_crit_edge ], [ %lose.21219, %for.cond876.preheader ]
  %indvars.iv.next1256 = add nuw nsw i64 %indvars.iv1255, 1
  %conv861 = sext i8 %113 to i32
  %114 = trunc i64 %indvars.iv.next1256 to i32
  %cmp862 = icmp slt i32 %114, %conv861
  br i1 %cmp862, label %for.body864, label %if.end929

if.end929:                                        ; preds = %for.inc926
  %tobool930 = icmp eq i32 %lose.5, 0
  br i1 %tobool930, label %while.cond932.preheader, label %if.end948

while.cond932.preheader:                          ; preds = %if.end929, %if.then855
  %cmp9331211 = icmp sgt i32 %funny_match_index.0, 0
  br i1 %cmp9331211, label %while.body935.lr.ph, label %cleanup

while.body935.lr.ph:                              ; preds = %while.cond932.preheader
  %115 = sext i32 %funny_match_index.0 to i64
  br label %while.body935

while.body935:                                    ; preds = %while.body935.lr.ph, %while.body935
  %indvars.iv = phi i64 [ %115, %while.body935.lr.ph ], [ %indvars.iv.next, %while.body935 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %this938 = getelementptr inbounds [30 x %struct.funny_match]* %funny_match, i64 0, i64 %indvars.iv.next, i32 0
  %116 = load i32* %this938, align 8, !tbaa !22
  %idxprom939 = sext i32 %116 to i64
  %arrayidx940 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %idxprom939
  %117 = load %struct.rtx_def** %arrayidx940, align 8, !tbaa !5
  %other943 = getelementptr inbounds [30 x %struct.funny_match]* %funny_match, i64 0, i64 %indvars.iv.next, i32 1
  %118 = load i32* %other943, align 4, !tbaa !24
  %idxprom944 = sext i32 %118 to i64
  %arrayidx945 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %idxprom944
  store %struct.rtx_def* %117, %struct.rtx_def** %arrayidx945, align 8, !tbaa !5
  %119 = trunc i64 %indvars.iv.next to i32
  %cmp933 = icmp sgt i32 %119, 0
  br i1 %cmp933, label %while.body935, label %cleanup

if.end948:                                        ; preds = %if.end929, %for.end853
  %.pre1283 = phi i32 [ %.pre1286, %if.end929 ], [ %.pre1288, %for.end853 ]
  %120 = phi i8 [ %111, %if.end929 ], [ %15, %for.end853 ]
  %121 = load i32* @which_alternative, align 4, !tbaa !1
  %inc949 = add nsw i32 %121, 1
  store i32 %inc949, i32* @which_alternative, align 4, !tbaa !1
  %conv950 = sext i8 %120 to i32
  %cmp951 = icmp slt i32 %inc949, %conv950
  br i1 %cmp951, label %for.cond12.backedge, label %do.end

do.end:                                           ; preds = %if.end948
  store i32 -1, i32* @which_alternative, align 4, !tbaa !1
  br i1 %cmp798, label %if.then955, label %cleanup

if.then955:                                       ; preds = %do.end
  %call956 = tail call i32 @constrain_operands(i32 -1)
  br label %cleanup

cleanup:                                          ; preds = %while.body935, %while.cond932.preheader, %do.end, %entry, %if.then955
  %retval.0 = phi i32 [ %call956, %if.then955 ], [ 1, %entry ], [ 0, %do.end ], [ 1, %while.cond932.preheader ], [ 1, %while.body935 ]
  call void @llvm.lifetime.end(i64 240, i8* %3) #4
  call void @llvm.lifetime.end(i64 120, i8* %2) #4
  call void @llvm.lifetime.end(i64 120, i8* %1) #4
  call void @llvm.lifetime.end(i64 240, i8* %0) #4
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @asm_noperands(%struct.rtx_def* nocapture readonly %body) #2 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %return [
    i32 41, label %sw.bb
    i32 47, label %sw.bb1
    i32 39, label %sw.bb13
  ]

sw.bb:                                            ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1, i64 3
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %1 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %num_elem = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 0
  %2 = load i32* %num_elem, align 4, !tbaa !27
  br label %return

sw.bb1:                                           ; preds = %entry
  %arrayidx3 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load4 = load i32* %4, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp = icmp eq i32 %bf.clear5, 41
  br i1 %cmp, label %if.then, label %return

if.then:                                          ; preds = %sw.bb1
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 3
  %rtvec11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtvec_def**
  %5 = load %struct.rtvec_def** %rtvec11, align 8, !tbaa !5
  %num_elem12 = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem12, align 4, !tbaa !27
  %add = add nsw i32 %6, 1
  br label %return

sw.bb13:                                          ; preds = %entry
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1, i64 0
  %rtvec16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec16, align 8, !tbaa !5
  %arrayidx17 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 0
  %8 = load %struct.rtx_def** %arrayidx17, align 8, !tbaa !5
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load18 = load i32* %9, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  switch i32 %bf.clear19, label %return [
    i32 47, label %land.lhs.true
    i32 41, label %if.then125
  ]

land.lhs.true:                                    ; preds = %sw.bb13
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 1
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx28, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load29 = load i32* %11, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 41
  br i1 %cmp31, label %if.then32, label %return

if.then32:                                        ; preds = %land.lhs.true
  %num_elem36 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %12 = load i32* %num_elem36, align 4, !tbaa !27
  %13 = sext i32 %12 to i64
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.then32
  %indvars.iv192 = phi i64 [ %indvars.iv.next193, %for.body ], [ %13, %if.then32 ]
  %14 = trunc i64 %indvars.iv192 to i32
  %cmp37 = icmp sgt i32 %14, 0
  br i1 %cmp37, label %for.body, label %for.cond59.preheader.for.end102_crit_edge

for.body:                                         ; preds = %for.cond
  %indvars.iv.next193 = add nsw i64 %indvars.iv192, -1
  %arrayidx42 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 %indvars.iv.next193
  %15 = load %struct.rtx_def** %arrayidx42, align 8, !tbaa !5
  %16 = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 0
  %bf.load43 = load i32* %16, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  switch i32 %bf.clear44, label %return [
    i32 47, label %for.body61
    i32 49, label %for.cond
  ]

for.cond59.preheader.for.end102_crit_edge:        ; preds = %for.cond
  %arrayidx112.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 3
  %rtvec113.phi.trans.insert = bitcast %union.rtunion_def* %arrayidx112.phi.trans.insert to %struct.rtvec_def**
  %.pre = load %struct.rtvec_def** %rtvec113.phi.trans.insert, align 8, !tbaa !5
  br label %for.end102

for.cond59:                                       ; preds = %if.end80
  %17 = trunc i64 %indvars.iv to i32
  %cmp60 = icmp slt i32 %17, %14
  br i1 %cmp60, label %for.cond59.for.body61_crit_edge, label %for.end102

for.cond59.for.body61_crit_edge:                  ; preds = %for.cond59
  %arrayidx67.phi.trans.insert = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 %indvars.iv
  %.pre196 = load %struct.rtx_def** %arrayidx67.phi.trans.insert, align 8, !tbaa !5
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %.pre196, i64 0, i32 0
  %bf.load68.pre = load i32* %.phi.trans.insert, align 8
  %phitmp = add i64 %indvars.iv, 1
  br label %for.body61

for.body61:                                       ; preds = %for.body, %for.cond59.for.body61_crit_edge
  %bf.load68 = phi i32 [ %bf.load68.pre, %for.cond59.for.body61_crit_edge ], [ %bf.load18, %for.body ]
  %18 = phi %struct.rtx_def* [ %.pre196, %for.cond59.for.body61_crit_edge ], [ %8, %for.body ]
  %indvars.iv = phi i64 [ %phitmp, %for.cond59.for.body61_crit_edge ], [ 1, %for.body ]
  %bf.clear69 = and i32 %bf.load68, 65535
  %cmp70 = icmp eq i32 %bf.clear69, 47
  br i1 %cmp70, label %if.end72, label %return

if.end72:                                         ; preds = %for.body61
  %arrayidx74 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 1
  %rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx75, align 8, !tbaa !5
  %20 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 0
  %bf.load76 = load i32* %20, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %cmp78 = icmp eq i32 %bf.clear77, 41
  br i1 %cmp78, label %if.end80, label %return

if.end80:                                         ; preds = %if.end72
  %arrayidx85 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 3
  %rtvec86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtvec_def**
  %21 = load %struct.rtvec_def** %rtvec86, align 8, !tbaa !5
  %arrayidx96 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 3
  %rtvec97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtvec_def**
  %22 = load %struct.rtvec_def** %rtvec97, align 8, !tbaa !5
  %cmp98 = icmp eq %struct.rtvec_def* %21, %22
  br i1 %cmp98, label %for.cond59, label %return

for.end102:                                       ; preds = %for.cond59, %for.cond59.preheader.for.end102_crit_edge
  %23 = phi %struct.rtvec_def* [ %.pre, %for.cond59.preheader.for.end102_crit_edge ], [ %21, %for.cond59 ]
  %num_elem114 = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 0
  %24 = load i32* %num_elem114, align 4, !tbaa !27
  %add115 = add nsw i32 %24, %14
  br label %return

if.then125:                                       ; preds = %sw.bb13
  %num_elem130 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %25 = load i32* %num_elem130, align 4, !tbaa !27
  %26 = sext i32 %25 to i64
  br label %for.cond132

for.cond132:                                      ; preds = %for.body134, %if.then125
  %indvars.iv194 = phi i64 [ %indvars.iv.next195, %for.body134 ], [ %26, %if.then125 ]
  %indvars.iv.next195 = add nsw i64 %indvars.iv194, -1
  %27 = trunc i64 %indvars.iv.next195 to i32
  %cmp133 = icmp sgt i32 %27, 0
  br i1 %cmp133, label %for.body134, label %for.end148

for.body134:                                      ; preds = %for.cond132
  %arrayidx140 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 %indvars.iv.next195
  %28 = load %struct.rtx_def** %arrayidx140, align 8, !tbaa !5
  %29 = getelementptr inbounds %struct.rtx_def* %28, i64 0, i32 0
  %bf.load141 = load i32* %29, align 8
  %bf.clear142 = and i32 %bf.load141, 65535
  %cmp143 = icmp eq i32 %bf.clear142, 49
  br i1 %cmp143, label %for.cond132, label %return

for.end148:                                       ; preds = %for.cond132
  %arrayidx155 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 3
  %rtvec156 = bitcast %union.rtunion_def* %arrayidx155 to %struct.rtvec_def**
  %30 = load %struct.rtvec_def** %rtvec156, align 8, !tbaa !5
  %num_elem157 = getelementptr inbounds %struct.rtvec_def* %30, i64 0, i32 0
  %31 = load i32* %num_elem157, align 4, !tbaa !27
  br label %return

return:                                           ; preds = %for.body134, %for.body, %if.end80, %if.end72, %for.body61, %sw.bb13, %land.lhs.true, %entry, %sw.bb1, %for.end148, %for.end102, %if.then, %sw.bb
  %retval.0 = phi i32 [ %add115, %for.end102 ], [ %31, %for.end148 ], [ %add, %if.then ], [ %2, %sw.bb ], [ -1, %sw.bb1 ], [ -1, %entry ], [ -1, %land.lhs.true ], [ -1, %sw.bb13 ], [ -1, %for.body61 ], [ -1, %if.end72 ], [ -1, %if.end80 ], [ -1, %for.body ], [ -1, %for.body134 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i8* @decode_asm_operands(%struct.rtx_def* %body, %struct.rtx_def** %operands, %struct.rtx_def*** %operand_locs, i8** %constraints, i32* %modes) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.end432 [
    i32 47, label %land.lhs.true
    i32 41, label %if.then94
    i32 39, label %land.lhs.true163
  ]

land.lhs.true:                                    ; preds = %entry
  %fld = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1
  %arrayidx = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load1 = load i32* %2, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 41
  br i1 %cmp3, label %if.then, label %if.end432

if.then:                                          ; preds = %land.lhs.true
  %fld7 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 3
  %rtvec = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtvec_def**
  %3 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %num_elem = getelementptr inbounds %struct.rtvec_def* %3, i64 0, i32 0
  %4 = load i32* %num_elem, align 4, !tbaa !27
  %add = add nsw i32 %4, 1
  %cmp9572 = icmp sgt i32 %4, 0
  br i1 %cmp9572, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.then
  %tobool = icmp eq %struct.rtx_def*** %operand_locs, null
  %tobool17 = icmp eq %struct.rtx_def** %operands, null
  %tobool29 = icmp eq i8** %constraints, null
  %tobool43 = icmp eq i32* %modes, null
  %arrayidx48 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 4
  %rtvec49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtvec_def**
  br i1 %tobool, label %if.end.us, label %for.body.lr.ph.for.body.lr.ph.split_crit_edge

for.body.lr.ph.for.body.lr.ph.split_crit_edge:    ; preds = %for.body.lr.ph
  br i1 %tobool17, label %if.end28.us589, label %if.end28

if.end.us:                                        ; preds = %for.body.lr.ph, %for.inc.us
  %indvars.iv642 = phi i64 [ %indvars.iv.next643, %for.inc.us ], [ 1, %for.body.lr.ph ]
  br i1 %tobool17, label %if.end28.us, label %if.then18.us

if.then18.us:                                     ; preds = %if.end.us
  %5 = add nsw i64 %indvars.iv642, -1
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx25.us = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 1, i64 %5
  %7 = load %struct.rtx_def** %arrayidx25.us, align 8, !tbaa !5
  %arrayidx27.us = getelementptr inbounds %struct.rtx_def** %operands, i64 %indvars.iv642
  store %struct.rtx_def* %7, %struct.rtx_def** %arrayidx27.us, align 8, !tbaa !5
  br label %if.end28.us

if.end28.us:                                      ; preds = %if.then18.us, %if.end.us
  br i1 %tobool29, label %if.end42.us, label %if.then30.us

if.then30.us:                                     ; preds = %if.end28.us
  %8 = add nsw i64 %indvars.iv642, -1
  %9 = load %struct.rtvec_def** %rtvec49, align 8, !tbaa !5
  %arrayidx37.us = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %8
  %10 = load %struct.rtx_def** %arrayidx37.us, align 8, !tbaa !5
  %arrayidx39.us = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0
  %rtstr.us = bitcast %union.rtunion_def* %arrayidx39.us to i8**
  %11 = load i8** %rtstr.us, align 8, !tbaa !5
  %arrayidx41.us = getelementptr inbounds i8** %constraints, i64 %indvars.iv642
  store i8* %11, i8** %arrayidx41.us, align 8, !tbaa !5
  br label %if.end42.us

if.end42.us:                                      ; preds = %if.then30.us, %if.end28.us
  br i1 %tobool43, label %for.inc.us, label %if.then44.us

if.then44.us:                                     ; preds = %if.end42.us
  %12 = add nsw i64 %indvars.iv642, -1
  %13 = load %struct.rtvec_def** %rtvec49, align 8, !tbaa !5
  %arrayidx51.us = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 1, i64 %12
  %14 = load %struct.rtx_def** %arrayidx51.us, align 8, !tbaa !5
  %15 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 0
  %bf.load52.us = load i32* %15, align 8
  %bf.lshr.us = lshr i32 %bf.load52.us, 16
  %bf.clear53.us = and i32 %bf.lshr.us, 255
  %arrayidx55.us = getelementptr inbounds i32* %modes, i64 %indvars.iv642
  store i32 %bf.clear53.us, i32* %arrayidx55.us, align 4, !tbaa !7
  br label %for.inc.us

for.inc.us:                                       ; preds = %if.then44.us, %if.end42.us
  %indvars.iv.next643 = add nuw nsw i64 %indvars.iv642, 1
  %16 = trunc i64 %indvars.iv.next643 to i32
  %cmp9.us = icmp slt i32 %16, %add
  br i1 %cmp9.us, label %if.end.us, label %for.end

if.end28.us589:                                   ; preds = %for.body.lr.ph.for.body.lr.ph.split_crit_edge, %for.inc.us608
  %indvars.iv647 = phi i64 [ %indvars.iv.next648, %for.inc.us608 ], [ 1, %for.body.lr.ph.for.body.lr.ph.split_crit_edge ]
  %17 = add nsw i64 %indvars.iv647, -1
  %18 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx14.us579 = getelementptr inbounds %struct.rtvec_def* %18, i64 0, i32 1, i64 %17
  %arrayidx16.us581 = getelementptr inbounds %struct.rtx_def*** %operand_locs, i64 %indvars.iv647
  store %struct.rtx_def** %arrayidx14.us579, %struct.rtx_def*** %arrayidx16.us581, align 8, !tbaa !5
  br i1 %tobool29, label %if.end42.us598, label %if.then30.us590

if.then30.us590:                                  ; preds = %if.end28.us589
  %19 = load %struct.rtvec_def** %rtvec49, align 8, !tbaa !5
  %arrayidx37.us593 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 1, i64 %17
  %20 = load %struct.rtx_def** %arrayidx37.us593, align 8, !tbaa !5
  %arrayidx39.us594 = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 1, i64 0
  %rtstr.us595 = bitcast %union.rtunion_def* %arrayidx39.us594 to i8**
  %21 = load i8** %rtstr.us595, align 8, !tbaa !5
  %arrayidx41.us597 = getelementptr inbounds i8** %constraints, i64 %indvars.iv647
  store i8* %21, i8** %arrayidx41.us597, align 8, !tbaa !5
  br label %if.end42.us598

if.end42.us598:                                   ; preds = %if.then30.us590, %if.end28.us589
  br i1 %tobool43, label %for.inc.us608, label %if.then44.us599

if.then44.us599:                                  ; preds = %if.end42.us598
  %22 = add nsw i64 %indvars.iv647, -1
  %23 = load %struct.rtvec_def** %rtvec49, align 8, !tbaa !5
  %arrayidx51.us602 = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 1, i64 %22
  %24 = load %struct.rtx_def** %arrayidx51.us602, align 8, !tbaa !5
  %25 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 0
  %bf.load52.us603 = load i32* %25, align 8
  %bf.lshr.us604 = lshr i32 %bf.load52.us603, 16
  %bf.clear53.us605 = and i32 %bf.lshr.us604, 255
  %arrayidx55.us607 = getelementptr inbounds i32* %modes, i64 %indvars.iv647
  store i32 %bf.clear53.us605, i32* %arrayidx55.us607, align 4, !tbaa !7
  br label %for.inc.us608

for.inc.us608:                                    ; preds = %if.then44.us599, %if.end42.us598
  %indvars.iv.next648 = add nuw nsw i64 %indvars.iv647, 1
  %26 = trunc i64 %indvars.iv.next648 to i32
  %cmp9.us610 = icmp slt i32 %26, %add
  br i1 %cmp9.us610, label %if.end28.us589, label %for.end

if.end28:                                         ; preds = %for.body.lr.ph.for.body.lr.ph.split_crit_edge, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 1, %for.body.lr.ph.for.body.lr.ph.split_crit_edge ]
  %27 = add nsw i64 %indvars.iv, -1
  %28 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx14 = getelementptr inbounds %struct.rtvec_def* %28, i64 0, i32 1, i64 %27
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*** %operand_locs, i64 %indvars.iv
  store %struct.rtx_def** %arrayidx14, %struct.rtx_def*** %arrayidx16, align 8, !tbaa !5
  %29 = add nsw i64 %indvars.iv, -1
  %30 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx25 = getelementptr inbounds %struct.rtvec_def* %30, i64 0, i32 1, i64 %29
  %31 = load %struct.rtx_def** %arrayidx25, align 8, !tbaa !5
  %arrayidx27 = getelementptr inbounds %struct.rtx_def** %operands, i64 %indvars.iv
  store %struct.rtx_def* %31, %struct.rtx_def** %arrayidx27, align 8, !tbaa !5
  br i1 %tobool29, label %if.end42, label %if.then30

if.then30:                                        ; preds = %if.end28
  %32 = load %struct.rtvec_def** %rtvec49, align 8, !tbaa !5
  %arrayidx37 = getelementptr inbounds %struct.rtvec_def* %32, i64 0, i32 1, i64 %27
  %33 = load %struct.rtx_def** %arrayidx37, align 8, !tbaa !5
  %arrayidx39 = getelementptr inbounds %struct.rtx_def* %33, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx39 to i8**
  %34 = load i8** %rtstr, align 8, !tbaa !5
  %arrayidx41 = getelementptr inbounds i8** %constraints, i64 %indvars.iv
  store i8* %34, i8** %arrayidx41, align 8, !tbaa !5
  br label %if.end42

if.end42:                                         ; preds = %if.end28, %if.then30
  br i1 %tobool43, label %for.inc, label %if.then44

if.then44:                                        ; preds = %if.end42
  %35 = add nsw i64 %indvars.iv, -1
  %36 = load %struct.rtvec_def** %rtvec49, align 8, !tbaa !5
  %arrayidx51 = getelementptr inbounds %struct.rtvec_def* %36, i64 0, i32 1, i64 %35
  %37 = load %struct.rtx_def** %arrayidx51, align 8, !tbaa !5
  %38 = getelementptr inbounds %struct.rtx_def* %37, i64 0, i32 0
  %bf.load52 = load i32* %38, align 8
  %bf.lshr = lshr i32 %bf.load52, 16
  %bf.clear53 = and i32 %bf.lshr, 255
  %arrayidx55 = getelementptr inbounds i32* %modes, i64 %indvars.iv
  store i32 %bf.clear53, i32* %arrayidx55, align 4, !tbaa !7
  br label %for.inc

for.inc:                                          ; preds = %if.end42, %if.then44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %39 = trunc i64 %indvars.iv.next to i32
  %cmp9 = icmp slt i32 %39, %add
  br i1 %cmp9, label %if.end28, label %for.end

for.end:                                          ; preds = %for.inc, %for.inc.us608, %for.inc.us, %if.then
  %tobool57 = icmp eq %struct.rtx_def** %operands, null
  br i1 %tobool57, label %if.end63, label %if.then58

if.then58:                                        ; preds = %for.end
  %rtx61 = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %40 = load %struct.rtx_def** %rtx61, align 8, !tbaa !5
  store %struct.rtx_def* %40, %struct.rtx_def** %operands, align 8, !tbaa !5
  br label %if.end63

if.end63:                                         ; preds = %for.end, %if.then58
  %tobool64 = icmp eq %struct.rtx_def*** %operand_locs, null
  br i1 %tobool64, label %if.end70, label %if.then65

if.then65:                                        ; preds = %if.end63
  %rtx68 = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  store %struct.rtx_def** %rtx68, %struct.rtx_def*** %operand_locs, align 8, !tbaa !5
  br label %if.end70

if.end70:                                         ; preds = %if.end63, %if.then65
  %tobool71 = icmp eq i8** %constraints, null
  br i1 %tobool71, label %if.end77, label %if.then72

if.then72:                                        ; preds = %if.end70
  %arrayidx74 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtstr75 = bitcast %union.rtunion_def* %arrayidx74 to i8**
  %41 = load i8** %rtstr75, align 8, !tbaa !5
  store i8* %41, i8** %constraints, align 8, !tbaa !5
  br label %if.end77

if.end77:                                         ; preds = %if.end70, %if.then72
  %tobool78 = icmp eq i32* %modes, null
  br i1 %tobool78, label %if.end87, label %if.then79

if.then79:                                        ; preds = %if.end77
  %rtx82 = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %42 = load %struct.rtx_def** %rtx82, align 8, !tbaa !5
  %43 = getelementptr inbounds %struct.rtx_def* %42, i64 0, i32 0
  %bf.load83 = load i32* %43, align 8
  %bf.lshr84 = lshr i32 %bf.load83, 16
  %bf.clear85 = and i32 %bf.lshr84, 255
  store i32 %bf.clear85, i32* %modes, align 4, !tbaa !7
  br label %if.end87

if.end87:                                         ; preds = %if.end77, %if.then79
  %rtstr90 = bitcast [1 x %union.rtunion_def]* %fld7 to i8**
  %44 = load i8** %rtstr90, align 8, !tbaa !5
  br label %if.end432

if.then94:                                        ; preds = %entry
  %fld96 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1
  %arrayidx97 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1, i64 3
  %rtvec98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtvec_def**
  %45 = load %struct.rtvec_def** %rtvec98, align 8, !tbaa !5
  %num_elem99 = getelementptr inbounds %struct.rtvec_def* %45, i64 0, i32 0
  %46 = load i32* %num_elem99, align 4, !tbaa !27
  %cmp101613 = icmp sgt i32 %46, 0
  br i1 %cmp101613, label %for.body102.lr.ph, label %for.end155

for.body102.lr.ph:                                ; preds = %if.then94
  %tobool103 = icmp eq %struct.rtx_def*** %operand_locs, null
  %tobool114 = icmp eq %struct.rtx_def** %operands, null
  %tobool125 = icmp eq i8** %constraints, null
  %tobool139 = icmp eq i32* %modes, null
  %arrayidx143 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1, i64 4
  %rtvec144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtvec_def**
  br label %for.body102

for.body102:                                      ; preds = %for.inc153, %for.body102.lr.ph
  %indvars.iv628 = phi i64 [ 0, %for.body102.lr.ph ], [ %indvars.iv.next629, %for.inc153 ]
  br i1 %tobool103, label %if.end113, label %if.then104

if.then104:                                       ; preds = %for.body102
  %47 = load %struct.rtvec_def** %rtvec98, align 8, !tbaa !5
  %arrayidx110 = getelementptr inbounds %struct.rtvec_def* %47, i64 0, i32 1, i64 %indvars.iv628
  %arrayidx112 = getelementptr inbounds %struct.rtx_def*** %operand_locs, i64 %indvars.iv628
  store %struct.rtx_def** %arrayidx110, %struct.rtx_def*** %arrayidx112, align 8, !tbaa !5
  br label %if.end113

if.end113:                                        ; preds = %for.body102, %if.then104
  br i1 %tobool114, label %if.end124, label %if.then115

if.then115:                                       ; preds = %if.end113
  %48 = load %struct.rtvec_def** %rtvec98, align 8, !tbaa !5
  %arrayidx121 = getelementptr inbounds %struct.rtvec_def* %48, i64 0, i32 1, i64 %indvars.iv628
  %49 = load %struct.rtx_def** %arrayidx121, align 8, !tbaa !5
  %arrayidx123 = getelementptr inbounds %struct.rtx_def** %operands, i64 %indvars.iv628
  store %struct.rtx_def* %49, %struct.rtx_def** %arrayidx123, align 8, !tbaa !5
  br label %if.end124

if.end124:                                        ; preds = %if.end113, %if.then115
  br i1 %tobool125, label %if.end138, label %if.then126

if.then126:                                       ; preds = %if.end124
  %50 = load %struct.rtvec_def** %rtvec144, align 8, !tbaa !5
  %arrayidx132 = getelementptr inbounds %struct.rtvec_def* %50, i64 0, i32 1, i64 %indvars.iv628
  %51 = load %struct.rtx_def** %arrayidx132, align 8, !tbaa !5
  %arrayidx134 = getelementptr inbounds %struct.rtx_def* %51, i64 0, i32 1, i64 0
  %rtstr135 = bitcast %union.rtunion_def* %arrayidx134 to i8**
  %52 = load i8** %rtstr135, align 8, !tbaa !5
  %arrayidx137 = getelementptr inbounds i8** %constraints, i64 %indvars.iv628
  store i8* %52, i8** %arrayidx137, align 8, !tbaa !5
  br label %if.end138

if.end138:                                        ; preds = %if.end124, %if.then126
  br i1 %tobool139, label %for.inc153, label %if.then140

if.then140:                                       ; preds = %if.end138
  %53 = load %struct.rtvec_def** %rtvec144, align 8, !tbaa !5
  %arrayidx146 = getelementptr inbounds %struct.rtvec_def* %53, i64 0, i32 1, i64 %indvars.iv628
  %54 = load %struct.rtx_def** %arrayidx146, align 8, !tbaa !5
  %55 = getelementptr inbounds %struct.rtx_def* %54, i64 0, i32 0
  %bf.load147 = load i32* %55, align 8
  %bf.lshr148 = lshr i32 %bf.load147, 16
  %bf.clear149 = and i32 %bf.lshr148, 255
  %arrayidx151 = getelementptr inbounds i32* %modes, i64 %indvars.iv628
  store i32 %bf.clear149, i32* %arrayidx151, align 4, !tbaa !7
  br label %for.inc153

for.inc153:                                       ; preds = %if.end138, %if.then140
  %indvars.iv.next629 = add nuw nsw i64 %indvars.iv628, 1
  %lftr.wideiv630 = trunc i64 %indvars.iv.next629 to i32
  %exitcond631 = icmp eq i32 %lftr.wideiv630, %46
  br i1 %exitcond631, label %for.end155, label %for.body102

for.end155:                                       ; preds = %for.inc153, %if.then94
  %rtstr158 = bitcast [1 x %union.rtunion_def]* %fld96 to i8**
  %56 = load i8** %rtstr158, align 8, !tbaa !5
  br label %if.end432

land.lhs.true163:                                 ; preds = %entry
  %arrayidx165 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1, i64 0
  %rtvec166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtvec_def**
  %57 = load %struct.rtvec_def** %rtvec166, align 8, !tbaa !5
  %arrayidx168 = getelementptr inbounds %struct.rtvec_def* %57, i64 0, i32 1, i64 0
  %58 = load %struct.rtx_def** %arrayidx168, align 8, !tbaa !5
  %59 = getelementptr inbounds %struct.rtx_def* %58, i64 0, i32 0
  %bf.load169 = load i32* %59, align 8
  %bf.clear170 = and i32 %bf.load169, 65535
  %cmp171 = icmp eq i32 %bf.clear170, 47
  br i1 %cmp171, label %land.lhs.true172, label %land.lhs.true349

land.lhs.true172:                                 ; preds = %land.lhs.true163
  %arrayidx179 = getelementptr inbounds %struct.rtx_def* %58, i64 0, i32 1, i64 1
  %rtx180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtx_def**
  %60 = load %struct.rtx_def** %rtx180, align 8, !tbaa !5
  %61 = getelementptr inbounds %struct.rtx_def* %60, i64 0, i32 0
  %bf.load181 = load i32* %61, align 8
  %bf.clear182 = and i32 %bf.load181, 65535
  %cmp183 = icmp eq i32 %bf.clear182, 41
  br i1 %cmp183, label %if.then184, label %if.else345

if.then184:                                       ; preds = %land.lhs.true172
  %num_elem197 = getelementptr inbounds %struct.rtvec_def* %57, i64 0, i32 0
  %62 = load i32* %num_elem197, align 4, !tbaa !27
  %fld198 = getelementptr inbounds %struct.rtx_def* %60, i64 0, i32 1
  %arrayidx199 = getelementptr inbounds %struct.rtx_def* %60, i64 0, i32 1, i64 3
  %rtvec200 = bitcast %union.rtunion_def* %arrayidx199 to %struct.rtvec_def**
  %63 = load %struct.rtvec_def** %rtvec200, align 8, !tbaa !5
  %num_elem201 = getelementptr inbounds %struct.rtvec_def* %63, i64 0, i32 0
  %64 = load i32* %num_elem201, align 4, !tbaa !27
  %cmp203617 = icmp sgt i32 %62, 0
  br i1 %cmp203617, label %for.body204.lr.ph, label %for.cond282.preheader

for.body204.lr.ph:                                ; preds = %if.then184
  %tobool216 = icmp eq %struct.rtx_def** %operands, null
  %tobool230 = icmp eq %struct.rtx_def*** %operand_locs, null
  %tobool244 = icmp eq i8** %constraints, null
  %tobool261 = icmp eq i32* %modes, null
  br label %for.body204

for.cond282.preheader:                            ; preds = %if.end277, %for.body204, %if.then184
  %nout.0.lcssa = phi i32 [ 0, %if.then184 ], [ %inc280, %if.end277 ], [ %i.2619, %for.body204 ]
  %cmp283615 = icmp sgt i32 %64, 0
  br i1 %cmp283615, label %for.body284.lr.ph, label %for.end341

for.body284.lr.ph:                                ; preds = %for.cond282.preheader
  %tobool285 = icmp eq %struct.rtx_def*** %operand_locs, null
  %tobool297 = icmp eq %struct.rtx_def** %operands, null
  %tobool309 = icmp eq i8** %constraints, null
  %tobool324 = icmp eq i32* %modes, null
  %arrayidx328 = getelementptr inbounds %struct.rtx_def* %60, i64 0, i32 1, i64 4
  %rtvec329 = bitcast %union.rtunion_def* %arrayidx328 to %struct.rtvec_def**
  %65 = sext i32 %nout.0.lcssa to i64
  br label %for.body284

for.body204:                                      ; preds = %if.end277.for.body204_crit_edge, %for.body204.lr.ph
  %bf.load211 = phi i32 [ %bf.load169, %for.body204.lr.ph ], [ %bf.load211.pre, %if.end277.for.body204_crit_edge ]
  %66 = phi %struct.rtx_def* [ %58, %for.body204.lr.ph ], [ %.pre652, %if.end277.for.body204_crit_edge ]
  %indvars.iv640 = phi i64 [ 0, %for.body204.lr.ph ], [ %indvars.iv.next641, %if.end277.for.body204_crit_edge ]
  %i.2619 = phi i32 [ 0, %for.body204.lr.ph ], [ %inc280, %if.end277.for.body204_crit_edge ]
  %bf.clear212 = and i32 %bf.load211, 65535
  %cmp213 = icmp eq i32 %bf.clear212, 49
  br i1 %cmp213, label %for.cond282.preheader, label %if.end215

if.end215:                                        ; preds = %for.body204
  br i1 %tobool216, label %if.end229, label %if.then217

if.then217:                                       ; preds = %if.end215
  %arrayidx225 = getelementptr inbounds %struct.rtx_def* %66, i64 0, i32 1, i64 0
  %rtx226 = bitcast %union.rtunion_def* %arrayidx225 to %struct.rtx_def**
  %67 = load %struct.rtx_def** %rtx226, align 8, !tbaa !5
  %arrayidx228 = getelementptr inbounds %struct.rtx_def** %operands, i64 %indvars.iv640
  store %struct.rtx_def* %67, %struct.rtx_def** %arrayidx228, align 8, !tbaa !5
  br label %if.end229

if.end229:                                        ; preds = %if.end215, %if.then217
  br i1 %tobool230, label %if.end243, label %if.then231

if.then231:                                       ; preds = %if.end229
  %68 = load %struct.rtvec_def** %rtvec166, align 8, !tbaa !5
  %arrayidx237 = getelementptr inbounds %struct.rtvec_def* %68, i64 0, i32 1, i64 %indvars.iv640
  %69 = load %struct.rtx_def** %arrayidx237, align 8, !tbaa !5
  %arrayidx239 = getelementptr inbounds %struct.rtx_def* %69, i64 0, i32 1, i64 0
  %rtx240 = bitcast %union.rtunion_def* %arrayidx239 to %struct.rtx_def**
  %arrayidx242 = getelementptr inbounds %struct.rtx_def*** %operand_locs, i64 %indvars.iv640
  store %struct.rtx_def** %rtx240, %struct.rtx_def*** %arrayidx242, align 8, !tbaa !5
  br label %if.end243

if.end243:                                        ; preds = %if.end229, %if.then231
  br i1 %tobool244, label %if.end260, label %if.then245

if.then245:                                       ; preds = %if.end243
  %70 = load %struct.rtvec_def** %rtvec166, align 8, !tbaa !5
  %arrayidx251 = getelementptr inbounds %struct.rtvec_def* %70, i64 0, i32 1, i64 %indvars.iv640
  %71 = load %struct.rtx_def** %arrayidx251, align 8, !tbaa !5
  %arrayidx253 = getelementptr inbounds %struct.rtx_def* %71, i64 0, i32 1, i64 1
  %rtx254 = bitcast %union.rtunion_def* %arrayidx253 to %struct.rtx_def**
  %72 = load %struct.rtx_def** %rtx254, align 8, !tbaa !5
  %arrayidx256 = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 1, i64 1
  %rtstr257 = bitcast %union.rtunion_def* %arrayidx256 to i8**
  %73 = load i8** %rtstr257, align 8, !tbaa !5
  %arrayidx259 = getelementptr inbounds i8** %constraints, i64 %indvars.iv640
  store i8* %73, i8** %arrayidx259, align 8, !tbaa !5
  br label %if.end260

if.end260:                                        ; preds = %if.end243, %if.then245
  br i1 %tobool261, label %if.end277, label %if.then262

if.then262:                                       ; preds = %if.end260
  %74 = load %struct.rtvec_def** %rtvec166, align 8, !tbaa !5
  %arrayidx268 = getelementptr inbounds %struct.rtvec_def* %74, i64 0, i32 1, i64 %indvars.iv640
  %75 = load %struct.rtx_def** %arrayidx268, align 8, !tbaa !5
  %arrayidx270 = getelementptr inbounds %struct.rtx_def* %75, i64 0, i32 1, i64 0
  %rtx271 = bitcast %union.rtunion_def* %arrayidx270 to %struct.rtx_def**
  %76 = load %struct.rtx_def** %rtx271, align 8, !tbaa !5
  %77 = getelementptr inbounds %struct.rtx_def* %76, i64 0, i32 0
  %bf.load272 = load i32* %77, align 8
  %bf.lshr273 = lshr i32 %bf.load272, 16
  %bf.clear274 = and i32 %bf.lshr273, 255
  %arrayidx276 = getelementptr inbounds i32* %modes, i64 %indvars.iv640
  store i32 %bf.clear274, i32* %arrayidx276, align 4, !tbaa !7
  br label %if.end277

if.end277:                                        ; preds = %if.end260, %if.then262
  %inc280 = add nsw i32 %i.2619, 1
  %indvars.iv.next641 = add nuw nsw i64 %indvars.iv640, 1
  %78 = trunc i64 %indvars.iv.next641 to i32
  %cmp203 = icmp slt i32 %78, %62
  br i1 %cmp203, label %if.end277.for.body204_crit_edge, label %for.cond282.preheader

if.end277.for.body204_crit_edge:                  ; preds = %if.end277
  %.pre = load %struct.rtvec_def** %rtvec166, align 8, !tbaa !5
  %arrayidx210.phi.trans.insert = getelementptr inbounds %struct.rtvec_def* %.pre, i64 0, i32 1, i64 %indvars.iv.next641
  %.pre652 = load %struct.rtx_def** %arrayidx210.phi.trans.insert, align 8, !tbaa !5
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %.pre652, i64 0, i32 0
  %bf.load211.pre = load i32* %.phi.trans.insert, align 8
  br label %for.body204

for.body284:                                      ; preds = %for.inc339, %for.body284.lr.ph
  %indvars.iv632 = phi i64 [ 0, %for.body284.lr.ph ], [ %indvars.iv.next633, %for.inc339 ]
  br i1 %tobool285, label %if.end296, label %if.then286

if.then286:                                       ; preds = %for.body284
  %79 = load %struct.rtvec_def** %rtvec200, align 8, !tbaa !5
  %arrayidx292 = getelementptr inbounds %struct.rtvec_def* %79, i64 0, i32 1, i64 %indvars.iv632
  %80 = add nsw i64 %indvars.iv632, %65
  %arrayidx295 = getelementptr inbounds %struct.rtx_def*** %operand_locs, i64 %80
  store %struct.rtx_def** %arrayidx292, %struct.rtx_def*** %arrayidx295, align 8, !tbaa !5
  br label %if.end296

if.end296:                                        ; preds = %for.body284, %if.then286
  br i1 %tobool297, label %if.end308, label %if.then298

if.then298:                                       ; preds = %if.end296
  %81 = load %struct.rtvec_def** %rtvec200, align 8, !tbaa !5
  %arrayidx304 = getelementptr inbounds %struct.rtvec_def* %81, i64 0, i32 1, i64 %indvars.iv632
  %82 = load %struct.rtx_def** %arrayidx304, align 8, !tbaa !5
  %83 = add nsw i64 %indvars.iv632, %65
  %arrayidx307 = getelementptr inbounds %struct.rtx_def** %operands, i64 %83
  store %struct.rtx_def* %82, %struct.rtx_def** %arrayidx307, align 8, !tbaa !5
  br label %if.end308

if.end308:                                        ; preds = %if.end296, %if.then298
  br i1 %tobool309, label %if.end323, label %if.then310

if.then310:                                       ; preds = %if.end308
  %84 = load %struct.rtvec_def** %rtvec329, align 8, !tbaa !5
  %arrayidx316 = getelementptr inbounds %struct.rtvec_def* %84, i64 0, i32 1, i64 %indvars.iv632
  %85 = load %struct.rtx_def** %arrayidx316, align 8, !tbaa !5
  %arrayidx318 = getelementptr inbounds %struct.rtx_def* %85, i64 0, i32 1, i64 0
  %rtstr319 = bitcast %union.rtunion_def* %arrayidx318 to i8**
  %86 = load i8** %rtstr319, align 8, !tbaa !5
  %87 = add nsw i64 %indvars.iv632, %65
  %arrayidx322 = getelementptr inbounds i8** %constraints, i64 %87
  store i8* %86, i8** %arrayidx322, align 8, !tbaa !5
  br label %if.end323

if.end323:                                        ; preds = %if.end308, %if.then310
  br i1 %tobool324, label %for.inc339, label %if.then325

if.then325:                                       ; preds = %if.end323
  %88 = load %struct.rtvec_def** %rtvec329, align 8, !tbaa !5
  %arrayidx331 = getelementptr inbounds %struct.rtvec_def* %88, i64 0, i32 1, i64 %indvars.iv632
  %89 = load %struct.rtx_def** %arrayidx331, align 8, !tbaa !5
  %90 = getelementptr inbounds %struct.rtx_def* %89, i64 0, i32 0
  %bf.load332 = load i32* %90, align 8
  %bf.lshr333 = lshr i32 %bf.load332, 16
  %bf.clear334 = and i32 %bf.lshr333, 255
  %91 = add nsw i64 %indvars.iv632, %65
  %arrayidx337 = getelementptr inbounds i32* %modes, i64 %91
  store i32 %bf.clear334, i32* %arrayidx337, align 4, !tbaa !7
  br label %for.inc339

for.inc339:                                       ; preds = %if.end323, %if.then325
  %indvars.iv.next633 = add nuw nsw i64 %indvars.iv632, 1
  %lftr.wideiv638 = trunc i64 %indvars.iv.next633 to i32
  %exitcond639 = icmp eq i32 %lftr.wideiv638, %64
  br i1 %exitcond639, label %for.end341, label %for.body284

for.end341:                                       ; preds = %for.inc339, %for.cond282.preheader
  %rtstr344 = bitcast [1 x %union.rtunion_def]* %fld198 to i8**
  %92 = load i8** %rtstr344, align 8, !tbaa !5
  br label %if.end432

if.else345:                                       ; preds = %land.lhs.true172
  %cmp348 = icmp eq i32 %bf.clear, 39
  br i1 %cmp348, label %land.lhs.true349, label %if.end432

land.lhs.true349:                                 ; preds = %land.lhs.true163, %if.else345
  %arrayidx351 = getelementptr inbounds %struct.rtx_def* %body, i64 0, i32 1, i64 0
  %rtvec352 = bitcast %union.rtunion_def* %arrayidx351 to %struct.rtvec_def**
  %93 = load %struct.rtvec_def** %rtvec352, align 8, !tbaa !5
  %arrayidx354 = getelementptr inbounds %struct.rtvec_def* %93, i64 0, i32 1, i64 0
  %94 = load %struct.rtx_def** %arrayidx354, align 8, !tbaa !5
  %95 = getelementptr inbounds %struct.rtx_def* %94, i64 0, i32 0
  %bf.load355 = load i32* %95, align 8
  %bf.clear356 = and i32 %bf.load355, 65535
  %cmp357 = icmp eq i32 %bf.clear356, 41
  br i1 %cmp357, label %if.then358, label %if.end432

if.then358:                                       ; preds = %land.lhs.true349
  %fld366 = getelementptr inbounds %struct.rtx_def* %94, i64 0, i32 1
  %arrayidx367 = getelementptr inbounds %struct.rtx_def* %94, i64 0, i32 1, i64 3
  %rtvec368 = bitcast %union.rtunion_def* %arrayidx367 to %struct.rtvec_def**
  %96 = load %struct.rtvec_def** %rtvec368, align 8, !tbaa !5
  %num_elem369 = getelementptr inbounds %struct.rtvec_def* %96, i64 0, i32 0
  %97 = load i32* %num_elem369, align 4, !tbaa !27
  %cmp371611 = icmp sgt i32 %97, 0
  br i1 %cmp371611, label %for.body372.lr.ph, label %for.end425

for.body372.lr.ph:                                ; preds = %if.then358
  %tobool373 = icmp eq %struct.rtx_def*** %operand_locs, null
  %tobool384 = icmp eq %struct.rtx_def** %operands, null
  %tobool395 = icmp eq i8** %constraints, null
  %tobool409 = icmp eq i32* %modes, null
  %arrayidx413 = getelementptr inbounds %struct.rtx_def* %94, i64 0, i32 1, i64 4
  %rtvec414 = bitcast %union.rtunion_def* %arrayidx413 to %struct.rtvec_def**
  br label %for.body372

for.body372:                                      ; preds = %for.inc423, %for.body372.lr.ph
  %indvars.iv626 = phi i64 [ 0, %for.body372.lr.ph ], [ %indvars.iv.next627, %for.inc423 ]
  br i1 %tobool373, label %if.end383, label %if.then374

if.then374:                                       ; preds = %for.body372
  %98 = load %struct.rtvec_def** %rtvec368, align 8, !tbaa !5
  %arrayidx380 = getelementptr inbounds %struct.rtvec_def* %98, i64 0, i32 1, i64 %indvars.iv626
  %arrayidx382 = getelementptr inbounds %struct.rtx_def*** %operand_locs, i64 %indvars.iv626
  store %struct.rtx_def** %arrayidx380, %struct.rtx_def*** %arrayidx382, align 8, !tbaa !5
  br label %if.end383

if.end383:                                        ; preds = %for.body372, %if.then374
  br i1 %tobool384, label %if.end394, label %if.then385

if.then385:                                       ; preds = %if.end383
  %99 = load %struct.rtvec_def** %rtvec368, align 8, !tbaa !5
  %arrayidx391 = getelementptr inbounds %struct.rtvec_def* %99, i64 0, i32 1, i64 %indvars.iv626
  %100 = load %struct.rtx_def** %arrayidx391, align 8, !tbaa !5
  %arrayidx393 = getelementptr inbounds %struct.rtx_def** %operands, i64 %indvars.iv626
  store %struct.rtx_def* %100, %struct.rtx_def** %arrayidx393, align 8, !tbaa !5
  br label %if.end394

if.end394:                                        ; preds = %if.end383, %if.then385
  br i1 %tobool395, label %if.end408, label %if.then396

if.then396:                                       ; preds = %if.end394
  %101 = load %struct.rtvec_def** %rtvec414, align 8, !tbaa !5
  %arrayidx402 = getelementptr inbounds %struct.rtvec_def* %101, i64 0, i32 1, i64 %indvars.iv626
  %102 = load %struct.rtx_def** %arrayidx402, align 8, !tbaa !5
  %arrayidx404 = getelementptr inbounds %struct.rtx_def* %102, i64 0, i32 1, i64 0
  %rtstr405 = bitcast %union.rtunion_def* %arrayidx404 to i8**
  %103 = load i8** %rtstr405, align 8, !tbaa !5
  %arrayidx407 = getelementptr inbounds i8** %constraints, i64 %indvars.iv626
  store i8* %103, i8** %arrayidx407, align 8, !tbaa !5
  br label %if.end408

if.end408:                                        ; preds = %if.end394, %if.then396
  br i1 %tobool409, label %for.inc423, label %if.then410

if.then410:                                       ; preds = %if.end408
  %104 = load %struct.rtvec_def** %rtvec414, align 8, !tbaa !5
  %arrayidx416 = getelementptr inbounds %struct.rtvec_def* %104, i64 0, i32 1, i64 %indvars.iv626
  %105 = load %struct.rtx_def** %arrayidx416, align 8, !tbaa !5
  %106 = getelementptr inbounds %struct.rtx_def* %105, i64 0, i32 0
  %bf.load417 = load i32* %106, align 8
  %bf.lshr418 = lshr i32 %bf.load417, 16
  %bf.clear419 = and i32 %bf.lshr418, 255
  %arrayidx421 = getelementptr inbounds i32* %modes, i64 %indvars.iv626
  store i32 %bf.clear419, i32* %arrayidx421, align 4, !tbaa !7
  br label %for.inc423

for.inc423:                                       ; preds = %if.end408, %if.then410
  %indvars.iv.next627 = add nuw nsw i64 %indvars.iv626, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next627 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %97
  br i1 %exitcond, label %for.end425, label %for.body372

for.end425:                                       ; preds = %for.inc423, %if.then358
  %rtstr428 = bitcast [1 x %union.rtunion_def]* %fld366 to i8**
  %107 = load i8** %rtstr428, align 8, !tbaa !5
  br label %if.end432

if.end432:                                        ; preds = %entry, %land.lhs.true, %for.end155, %if.else345, %land.lhs.true349, %for.end425, %for.end341, %if.end87
  %template.0 = phi i8* [ %44, %if.end87 ], [ %56, %for.end155 ], [ %92, %for.end341 ], [ %107, %for.end425 ], [ null, %land.lhs.true349 ], [ null, %if.else345 ], [ null, %land.lhs.true ], [ null, %entry ]
  ret i8* %template.0
}

; Function Attrs: nounwind uwtable
define i32 @asm_operand_ok(%struct.rtx_def* %op, i8* readonly %constraint) #0 {
entry:
  %0 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %while.cond.preheader, label %if.then

while.cond.preheader:                             ; preds = %entry
  %rtwint672 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0, i32 0
  %1 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %2 = load i8* %constraint, align 1, !tbaa !7
  %tobool11169 = icmp eq i8 %2, 0
  br i1 %tobool11169, label %return, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %arrayidx.i1140 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx.i1141 = bitcast %union.rtunion_def* %arrayidx.i1140 to %struct.rtx_def**
  br label %while.body

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 1655, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.asm_operand_ok, i64 0, i64 0)) #6
  unreachable

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %3 = phi i8 [ %2, %while.body.lr.ph ], [ %34, %while.cond.backedge ]
  %result.01171 = phi i32 [ 0, %while.body.lr.ph ], [ %result.0.be, %while.cond.backedge ]
  %constraint.addr.01170 = phi i8* [ %constraint, %while.body.lr.ph ], [ %constraint.addr.0.be, %while.cond.backedge ]
  %incdec.ptr = getelementptr inbounds i8* %constraint.addr.01170, i64 1
  %conv = sext i8 %3 to i32
  switch i32 %conv, label %sw.default [
    i32 61, label %while.cond.backedge
    i32 43, label %while.cond.backedge
    i32 42, label %while.cond.backedge
    i32 37, label %while.cond.backedge
    i32 63, label %while.cond.backedge
    i32 33, label %while.cond.backedge
    i32 35, label %while.cond.backedge
    i32 38, label %while.cond.backedge
    i32 44, label %while.cond.backedge
    i32 48, label %while.cond3
    i32 49, label %while.cond3
    i32 50, label %while.cond3
    i32 51, label %while.cond3
    i32 52, label %while.cond3
    i32 53, label %while.cond3
    i32 54, label %while.cond3
    i32 55, label %while.cond3
    i32 56, label %while.cond3
    i32 57, label %while.cond3
    i32 112, label %sw.bb10
    i32 109, label %sw.bb14
    i32 86, label %sw.bb14
    i32 111, label %sw.bb19
    i32 60, label %sw.bb24
    i32 62, label %sw.bb28
    i32 69, label %sw.bb35
    i32 70, label %sw.bb35
    i32 71, label %sw.bb42
    i32 72, label %sw.bb55
    i32 115, label %sw.bb71
    i32 105, label %while.body.sw.bb87_crit_edge
    i32 110, label %sw.bb152
    i32 73, label %sw.bb170
    i32 74, label %sw.bb254
    i32 75, label %sw.bb340
    i32 76, label %sw.bb426
    i32 77, label %sw.bb512
    i32 78, label %sw.bb598
    i32 79, label %while.cond.backedge
    i32 80, label %while.cond.backedge
    i32 88, label %return
    i32 103, label %sw.bb857
    i32 114, label %sw.bb1013
  ]

while.body.sw.bb87_crit_edge:                     ; preds = %while.body
  %bf.load88.pre = load i32* %1, align 8
  br label %sw.bb87

while.cond3:                                      ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.cond3
  %constraint.addr.1 = phi i8* [ %incdec.ptr9, %while.cond3 ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ]
  %4 = load i8* %constraint.addr.1, align 1, !tbaa !7
  %idxprom = zext i8 %4 to i64
  %arrayidx = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom
  %5 = load i16* %arrayidx, align 2, !tbaa !8
  %and6 = and i16 %5, 4
  %tobool7 = icmp eq i16 %and6, 0
  %incdec.ptr9 = getelementptr inbounds i8* %constraint.addr.1, i64 1
  br i1 %tobool7, label %while.cond.backedge, label %while.cond3

sw.bb10:                                          ; preds = %while.body
  %bf.load.i.i = load i32* %1, align 8
  %bf.clear.i.i = and i32 %bf.load.i.i, 65535
  %cmp.i.i = icmp eq i32 %bf.clear.i.i, 70
  br i1 %cmp.i.i, label %return, label %address_operand.exit

address_operand.exit:                             ; preds = %sw.bb10
  %call.i.i = tail call i32 @legitimate_address_p(i32 0, %struct.rtx_def* %op, i32 0) #4
  %not.tobool.i.i = icmp eq i32 %call.i.i, 0
  br i1 %not.tobool.i.i, label %while.cond.backedge, label %return

sw.bb14:                                          ; preds = %while.body, %while.body
  %6 = load i32* @reload_completed, align 4
  %tobool.i = icmp eq i32 %6, 0
  %bf.load.i = load i32* %1, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %sw.bb14
  %cmp.i = icmp eq i32 %bf.clear.i, 66
  br i1 %cmp.i, label %land.rhs.i, label %while.cond.backedge

land.rhs.i:                                       ; preds = %if.then.i
  %call.i = tail call i32 @general_operand(%struct.rtx_def* %op, i32 0) #4
  br label %memory_operand.exit

if.end.i:                                         ; preds = %sw.bb14
  %cmp10.i = icmp eq i32 %bf.clear.i, 63
  br i1 %cmp10.i, label %if.then11.i, label %if.end12.i

if.then11.i:                                      ; preds = %if.end.i
  %7 = load %struct.rtx_def** %rtx.i1141, align 8, !tbaa !5
  %.phi.trans.insert31.i = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load13.pre.i = load i32* %.phi.trans.insert31.i, align 8
  br label %if.end12.i

if.end12.i:                                       ; preds = %if.then11.i, %if.end.i
  %bf.load13.i = phi i32 [ %bf.load13.pre.i, %if.then11.i ], [ %bf.load.i, %if.end.i ]
  %bf.clear14.i = and i32 %bf.load13.i, 65535
  %cmp15.i = icmp eq i32 %bf.clear14.i, 66
  br i1 %cmp15.i, label %land.rhs16.i, label %while.cond.backedge

land.rhs16.i:                                     ; preds = %if.end12.i
  %call17.i = tail call i32 @general_operand(%struct.rtx_def* %op, i32 0) #4
  br label %memory_operand.exit

memory_operand.exit:                              ; preds = %land.rhs.i, %land.rhs16.i
  %call.i.sink = phi i32 [ %call.i, %land.rhs.i ], [ %call17.i, %land.rhs16.i ]
  %tobool1.i = icmp eq i32 %call.i.sink, 0
  br i1 %tobool1.i, label %while.cond.backedge, label %return

sw.bb19:                                          ; preds = %while.body
  %bf.load.i1125 = load i32* %1, align 8
  %bf.clear.i1126 = and i32 %bf.load.i1125, 65535
  %cmp.i1127 = icmp eq i32 %bf.clear.i1126, 66
  br i1 %cmp.i1127, label %land.rhs.i1132, label %while.cond.backedge

land.rhs.i1132:                                   ; preds = %sw.bb19
  %bf.lshr.i = lshr i32 %bf.load.i1125, 16
  %bf.clear2.i = and i32 %bf.lshr.i, 255
  %8 = load %struct.rtx_def** %rtx.i1141, align 8, !tbaa !5
  %call.i1130 = tail call i32 @offsettable_address_p(i32 0, i32 %bf.clear2.i, %struct.rtx_def* %8) #4
  %tobool.i1131 = icmp eq i32 %call.i1130, 0
  br i1 %tobool.i1131, label %while.cond.backedge, label %return

sw.bb24:                                          ; preds = %while.body
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %return, label %while.cond.backedge

sw.bb28:                                          ; preds = %while.body
  %bf.load29 = load i32* %1, align 8
  %bf.clear30 = and i32 %bf.load29, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 66
  br i1 %cmp31, label %return, label %while.cond.backedge

sw.bb35:                                          ; preds = %while.body, %while.body
  %bf.load36 = load i32* %1, align 8
  %bf.clear37 = and i32 %bf.load36, 65535
  %cmp38 = icmp eq i32 %bf.clear37, 55
  br i1 %cmp38, label %return, label %while.cond.backedge

sw.bb42:                                          ; preds = %while.body
  %bf.load43 = load i32* %1, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 55
  br i1 %cmp45, label %cond.true, label %while.cond.backedge

cond.true:                                        ; preds = %sw.bb42
  %call47 = tail call i32 @standard_80387_constant_p(%struct.rtx_def* %op) #4
  %tobool48 = icmp eq i32 %call47, 0
  br i1 %tobool48, label %while.cond.backedge, label %return

sw.bb55:                                          ; preds = %while.body
  %bf.load56 = load i32* %1, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 55
  br i1 %cmp58, label %cond.true65, label %while.cond.backedge

cond.true65:                                      ; preds = %sw.bb55
  %call66 = tail call i32 @standard_sse_constant_p(%struct.rtx_def* %op) #4
  %tobool67 = icmp eq i32 %call66, 0
  br i1 %tobool67, label %while.cond.backedge, label %return

sw.bb71:                                          ; preds = %while.body
  %bf.load72 = load i32* %1, align 8
  %bf.clear73 = and i32 %bf.load72, 65535
  switch i32 %bf.clear73, label %sw.bb87 [
    i32 54, label %while.cond.backedge
    i32 55, label %land.lhs.true80
  ]

land.lhs.true80:                                  ; preds = %sw.bb71
  %bf.clear82 = and i32 %bf.load72, 16711680
  %cmp83 = icmp eq i32 %bf.clear82, 0
  br i1 %cmp83, label %while.cond.backedge, label %sw.bb87

sw.bb87:                                          ; preds = %while.body.sw.bb87_crit_edge, %sw.bb71, %land.lhs.true80
  %bf.load130 = phi i32 [ %bf.load88.pre, %while.body.sw.bb87_crit_edge ], [ %bf.load72, %sw.bb71 ], [ %bf.load72, %land.lhs.true80 ]
  %bf.clear89 = and i32 %bf.load130, 65535
  switch i32 %bf.clear89, label %while.cond.backedge [
    i32 67, label %land.lhs.true127
    i32 68, label %land.lhs.true127
    i32 54, label %land.lhs.true127
    i32 55, label %land.lhs.true127
    i32 58, label %land.lhs.true127
    i32 134, label %land.lhs.true127
    i32 56, label %land.lhs.true127
    i32 140, label %land.lhs.true127
  ]

land.lhs.true127:                                 ; preds = %sw.bb87, %sw.bb87, %sw.bb87, %sw.bb87, %sw.bb87, %sw.bb87, %sw.bb87, %sw.bb87
  %9 = load i32* @flag_pic, align 4, !tbaa !1
  %tobool128 = icmp eq i32 %9, 0
  br i1 %tobool128, label %return, label %lor.lhs.false129

lor.lhs.false129:                                 ; preds = %land.lhs.true127
  switch i32 %bf.clear89, label %return [
    i32 68, label %lor.lhs.false147
    i32 67, label %lor.lhs.false147
    i32 58, label %land.lhs.true144
  ]

land.lhs.true144:                                 ; preds = %lor.lhs.false129
  %call145 = tail call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %op) #4
  %tobool146 = icmp eq i32 %call145, 0
  br i1 %tobool146, label %return, label %lor.lhs.false147

lor.lhs.false147:                                 ; preds = %lor.lhs.false129, %lor.lhs.false129, %land.lhs.true144
  %call148 = tail call i32 @legitimate_pic_address_disp_p(%struct.rtx_def* %op) #4
  %tobool149 = icmp eq i32 %call148, 0
  br i1 %tobool149, label %while.cond.backedge, label %return

sw.bb152:                                         ; preds = %while.body
  %bf.load153 = load i32* %1, align 8
  %bf.clear154 = and i32 %bf.load153, 65535
  switch i32 %bf.clear154, label %while.cond.backedge [
    i32 54, label %return
    i32 55, label %land.lhs.true162
  ]

land.lhs.true162:                                 ; preds = %sw.bb152
  %bf.clear165 = and i32 %bf.load153, 16711680
  %cmp166 = icmp eq i32 %bf.clear165, 0
  br i1 %cmp166, label %return, label %while.cond.backedge

sw.bb170:                                         ; preds = %while.body
  %bf.load171 = load i32* %1, align 8
  %bf.clear172 = and i32 %bf.load171, 65535
  %cmp173 = icmp eq i32 %bf.clear172, 54
  br i1 %cmp173, label %cond.true176, label %while.cond.backedge

cond.true176:                                     ; preds = %sw.bb170
  %10 = load i64* %rtwint672, align 8, !tbaa !25
  %11 = icmp ult i64 %10, 32
  br i1 %11, label %return, label %while.cond.backedge

sw.bb254:                                         ; preds = %while.body
  %bf.load255 = load i32* %1, align 8
  %bf.clear256 = and i32 %bf.load255, 65535
  %cmp257 = icmp eq i32 %bf.clear256, 54
  br i1 %cmp257, label %cond.true273, label %while.cond.backedge

cond.true273:                                     ; preds = %sw.bb254
  %12 = load i64* %rtwint672, align 8, !tbaa !25
  %13 = icmp ult i64 %12, 64
  br i1 %13, label %return, label %while.cond.backedge

sw.bb340:                                         ; preds = %while.body
  %bf.load341 = load i32* %1, align 8
  %bf.clear342 = and i32 %bf.load341, 65535
  %cmp343 = icmp eq i32 %bf.clear342, 54
  br i1 %cmp343, label %cond.true372, label %while.cond.backedge

cond.true372:                                     ; preds = %sw.bb340
  %14 = load i64* %rtwint672, align 8, !tbaa !25
  %.off = add i64 %14, 128
  %15 = icmp ult i64 %.off, 256
  br i1 %15, label %return, label %while.cond.backedge

sw.bb426:                                         ; preds = %while.body
  %bf.load427 = load i32* %1, align 8
  %bf.clear428 = and i32 %bf.load427, 65535
  %cmp429 = icmp eq i32 %bf.clear428, 54
  br i1 %cmp429, label %cond.true471, label %while.cond.backedge

cond.true471:                                     ; preds = %sw.bb426
  %16 = load i64* %rtwint672, align 8, !tbaa !25
  switch i64 %16, label %while.cond.backedge [
    i64 255, label %return
    i64 65535, label %return
  ]

sw.bb512:                                         ; preds = %while.body
  %bf.load513 = load i32* %1, align 8
  %bf.clear514 = and i32 %bf.load513, 65535
  %cmp515 = icmp eq i32 %bf.clear514, 54
  br i1 %cmp515, label %cond.true570, label %while.cond.backedge

cond.true570:                                     ; preds = %sw.bb512
  %17 = load i64* %rtwint672, align 8, !tbaa !25
  %18 = icmp ult i64 %17, 4
  br i1 %18, label %return, label %while.cond.backedge

sw.bb598:                                         ; preds = %while.body
  %bf.load599 = load i32* %1, align 8
  %bf.clear600 = and i32 %bf.load599, 65535
  %cmp601 = icmp eq i32 %bf.clear600, 54
  br i1 %cmp601, label %cond.true669, label %while.cond.backedge

cond.true669:                                     ; preds = %sw.bb598
  %19 = load i64* %rtwint672, align 8, !tbaa !25
  %20 = icmp ult i64 %19, 256
  br i1 %20, label %return, label %while.cond.backedge

sw.bb857:                                         ; preds = %while.body
  %call858 = tail call i32 @general_operand(%struct.rtx_def* %op, i32 0)
  %tobool859 = icmp eq i32 %call858, 0
  br i1 %tobool859, label %while.cond.backedge, label %return

sw.default:                                       ; preds = %while.body
  switch i8 %3, label %while.cond.backedge [
    i8 114, label %sw.bb1013
    i8 82, label %sw.bb1013
    i8 113, label %sw.bb1013
    i8 81, label %sw.bb1013
    i8 102, label %cond.true887
    i8 116, label %cond.true897
    i8 117, label %cond.true909
    i8 97, label %sw.bb1013
    i8 98, label %sw.bb1013
    i8 99, label %sw.bb1013
    i8 100, label %sw.bb1013
    i8 120, label %cond.true941
    i8 89, label %cond.end1008
    i8 121, label %cond.true959
    i8 65, label %sw.bb1013
    i8 68, label %sw.bb1013
    i8 83, label %sw.bb1013
    i8 101, label %cond.true1029
    i8 90, label %cond.true1036
  ]

cond.true887:                                     ; preds = %sw.default
  %21 = load i32* @target_flags, align 4, !tbaa !1
  %22 = and i32 %21, 33
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %while.cond.backedge, label %sw.bb1013

cond.true897:                                     ; preds = %sw.default
  %24 = load i32* @target_flags, align 4, !tbaa !1
  %25 = and i32 %24, 33
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %while.cond.backedge, label %sw.bb1013

cond.true909:                                     ; preds = %sw.default
  %27 = load i32* @target_flags, align 4, !tbaa !1
  %28 = and i32 %27, 33
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %while.cond.backedge, label %sw.bb1013

cond.true941:                                     ; preds = %sw.default
  %30 = load i32* @target_flags, align 4, !tbaa !1
  %and942 = and i32 %30, 327680
  %cmp943 = icmp eq i32 %and942, 0
  br i1 %cmp943, label %while.cond.backedge, label %sw.bb1013

cond.true959:                                     ; preds = %sw.default
  %31 = load i32* @target_flags, align 4, !tbaa !1
  %and960 = and i32 %31, 16384
  %cmp961 = icmp eq i32 %and960, 0
  br i1 %cmp961, label %while.cond.backedge, label %sw.bb1013

cond.end1008:                                     ; preds = %sw.default
  %32 = load i32* @target_flags, align 4, !tbaa !1
  %33 = and i32 %32, 262144
  %cmp1010 = icmp eq i32 %33, 0
  br i1 %cmp1010, label %while.cond.backedge, label %sw.bb1013

sw.bb1013:                                        ; preds = %sw.default, %cond.true887, %cond.true897, %cond.true909, %cond.true941, %cond.true959, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %cond.end1008, %while.body
  %bf.load1014 = load i32* %1, align 8
  %bf.clear1016 = and i32 %bf.load1014, 16711680
  %cmp1017 = icmp eq i32 %bf.clear1016, 3342336
  br i1 %cmp1017, label %while.cond.backedge, label %if.end1020

while.cond.backedge:                              ; preds = %while.cond3, %memory_operand.exit, %land.rhs.i1132, %sw.bb1013, %sw.bb598, %cond.true669, %sw.bb512, %cond.true570, %sw.bb426, %sw.bb340, %cond.true372, %sw.bb254, %cond.true273, %sw.bb170, %cond.true176, %land.lhs.true162, %land.lhs.true80, %sw.bb55, %sw.bb42, %sw.bb35, %sw.bb28, %sw.bb24, %cond.true1036, %cond.true1029, %sw.bb857, %lor.lhs.false147, %cond.true65, %cond.true, %sw.bb71, %sw.bb87, %sw.bb152, %cond.true471, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %if.end1025, %cond.end1008, %sw.default, %cond.true959, %cond.true941, %cond.true909, %cond.true897, %cond.true887, %address_operand.exit, %if.end12.i, %if.then.i, %sw.bb19
  %constraint.addr.0.be = phi i8* [ %incdec.ptr, %sw.bb1013 ], [ %incdec.ptr, %cond.true1029 ], [ %incdec.ptr, %cond.true1036 ], [ %incdec.ptr, %sw.bb857 ], [ %incdec.ptr, %cond.true669 ], [ %incdec.ptr, %sw.bb598 ], [ %incdec.ptr, %cond.true570 ], [ %incdec.ptr, %sw.bb512 ], [ %incdec.ptr, %sw.bb426 ], [ %incdec.ptr, %cond.true372 ], [ %incdec.ptr, %sw.bb340 ], [ %incdec.ptr, %cond.true273 ], [ %incdec.ptr, %sw.bb254 ], [ %incdec.ptr, %cond.true176 ], [ %incdec.ptr, %sw.bb170 ], [ %incdec.ptr, %land.lhs.true162 ], [ %incdec.ptr, %lor.lhs.false147 ], [ %incdec.ptr, %sw.bb71 ], [ %incdec.ptr, %land.lhs.true80 ], [ %incdec.ptr, %cond.true65 ], [ %incdec.ptr, %sw.bb55 ], [ %incdec.ptr, %cond.true ], [ %incdec.ptr, %sw.bb42 ], [ %incdec.ptr, %sw.bb35 ], [ %incdec.ptr, %sw.bb28 ], [ %incdec.ptr, %sw.bb24 ], [ %incdec.ptr, %land.rhs.i1132 ], [ %incdec.ptr, %memory_operand.exit ], [ %incdec.ptr, %address_operand.exit ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %sw.bb87 ], [ %incdec.ptr, %sw.bb152 ], [ %incdec.ptr, %cond.true471 ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %while.body ], [ %incdec.ptr, %if.end1025 ], [ %incdec.ptr, %cond.end1008 ], [ %incdec.ptr, %cond.true959 ], [ %incdec.ptr, %cond.true941 ], [ %incdec.ptr, %cond.true887 ], [ %incdec.ptr, %cond.true897 ], [ %incdec.ptr, %cond.true909 ], [ %incdec.ptr, %sw.default ], [ %incdec.ptr, %if.end12.i ], [ %incdec.ptr, %if.then.i ], [ %incdec.ptr, %sw.bb19 ], [ %constraint.addr.1, %while.cond3 ]
  %result.0.be = phi i32 [ %result.01171, %sw.bb1013 ], [ %result.01171, %cond.true1029 ], [ %result.01171, %cond.true1036 ], [ %result.01171, %sw.bb857 ], [ %result.01171, %cond.true669 ], [ %result.01171, %sw.bb598 ], [ %result.01171, %cond.true570 ], [ %result.01171, %sw.bb512 ], [ %result.01171, %sw.bb426 ], [ %result.01171, %cond.true372 ], [ %result.01171, %sw.bb340 ], [ %result.01171, %cond.true273 ], [ %result.01171, %sw.bb254 ], [ %result.01171, %cond.true176 ], [ %result.01171, %sw.bb170 ], [ %result.01171, %land.lhs.true162 ], [ %result.01171, %lor.lhs.false147 ], [ %result.01171, %sw.bb71 ], [ %result.01171, %land.lhs.true80 ], [ %result.01171, %cond.true65 ], [ %result.01171, %sw.bb55 ], [ %result.01171, %cond.true ], [ %result.01171, %sw.bb42 ], [ %result.01171, %sw.bb35 ], [ %result.01171, %sw.bb28 ], [ %result.01171, %sw.bb24 ], [ %result.01171, %land.rhs.i1132 ], [ %result.01171, %memory_operand.exit ], [ %result.01171, %address_operand.exit ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %sw.bb87 ], [ %result.01171, %sw.bb152 ], [ %result.01171, %cond.true471 ], [ %result.01171, %while.body ], [ %result.01171, %while.body ], [ %result.01171, %if.end1025 ], [ %result.01171, %cond.end1008 ], [ %result.01171, %cond.true959 ], [ %result.01171, %cond.true941 ], [ %result.01171, %cond.true887 ], [ %result.01171, %cond.true897 ], [ %result.01171, %cond.true909 ], [ %result.01171, %sw.default ], [ %result.01171, %if.end12.i ], [ %result.01171, %if.then.i ], [ %result.01171, %sw.bb19 ], [ -1, %while.cond3 ]
  %34 = load i8* %constraint.addr.0.be, align 1, !tbaa !7
  %tobool1 = icmp eq i8 %34, 0
  br i1 %tobool1, label %return, label %while.body

if.end1020:                                       ; preds = %sw.bb1013
  %bf.lshr.i1136 = lshr i32 %bf.load1014, 16
  %bf.clear.i1137 = and i32 %bf.lshr.i1136, 255
  %bf.clear3.i = and i32 %bf.load1014, 65535
  %cmp4.i = icmp eq i32 %bf.clear3.i, 63
  br i1 %cmp4.i, label %if.then5.i, label %if.end33.i

if.then5.i:                                       ; preds = %if.end1020
  %35 = load %struct.rtx_def** %rtx.i1141, align 8, !tbaa !5
  %36 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool.i1142 = icmp eq i32 %36, 0
  br i1 %tobool.i1142, label %land.lhs.true6.i, label %if.end11.i

land.lhs.true6.i:                                 ; preds = %if.then5.i
  %37 = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 0
  %bf.load7.i = load i32* %37, align 8
  %bf.clear8.i = and i32 %bf.load7.i, 65535
  %cmp9.i = icmp eq i32 %bf.clear8.i, 66
  br i1 %cmp9.i, label %if.then10.i, label %if.end11.i

if.then10.i:                                      ; preds = %land.lhs.true6.i
  %call.i1143 = tail call i32 @general_operand(%struct.rtx_def* %op, i32 0) #4
  br label %register_operand.exit

if.end11.i:                                       ; preds = %land.lhs.true6.i, %if.then5.i
  %idxprom68.i = zext i32 %bf.clear.i1137 to i64
  %arrayidx15.i = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom68.i
  %38 = load i32* %arrayidx15.i, align 4, !tbaa !7
  %cmp16.i = icmp eq i32 %38, 2
  br i1 %cmp16.i, label %land.lhs.true17.i, label %if.end11.if.end33_crit_edge.i

if.end11.if.end33_crit_edge.i:                    ; preds = %if.end11.i
  %.phi.trans.insert.i1144 = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 0
  %bf.load34.pre.i = load i32* %.phi.trans.insert.i1144, align 8
  br label %if.end33.i

land.lhs.true17.i:                                ; preds = %if.end11.i
  %arrayidx22.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom68.i
  %39 = load i8* %arrayidx22.i, align 1, !tbaa !7
  %40 = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 0
  %bf.load23.i = load i32* %40, align 8
  %bf.lshr24.i = lshr i32 %bf.load23.i, 16
  %bf.clear25.i = and i32 %bf.lshr24.i, 255
  %idxprom2669.i = zext i32 %bf.clear25.i to i64
  %arrayidx27.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom2669.i
  %41 = load i8* %arrayidx27.i, align 1, !tbaa !7
  %cmp29.i = icmp ugt i8 %39, %41
  br i1 %cmp29.i, label %if.end1025, label %if.end33.i

if.end33.i:                                       ; preds = %land.lhs.true17.i, %if.end11.if.end33_crit_edge.i, %if.end1020
  %bf.load34.i = phi i32 [ %bf.load1014, %if.end1020 ], [ %bf.load23.i, %land.lhs.true17.i ], [ %bf.load34.pre.i, %if.end11.if.end33_crit_edge.i ]
  %op.addr.0.i = phi %struct.rtx_def* [ %op, %if.end1020 ], [ %35, %land.lhs.true17.i ], [ %35, %if.end11.if.end33_crit_edge.i ]
  %bf.clear35.i = and i32 %bf.load34.i, 65535
  switch i32 %bf.clear35.i, label %land.end.i1147 [
    i32 70, label %return
    i32 61, label %land.rhs.i1145
  ]

land.rhs.i1145:                                   ; preds = %if.end33.i
  %arrayidx45.i = getelementptr inbounds %struct.rtx_def* %op.addr.0.i, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx45.i to i32*
  %42 = load i32* %rtuint.i, align 4, !tbaa !1
  %cmp46.i = icmp ugt i32 %42, 52
  br i1 %cmp46.i, label %land.end.i1147, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %land.rhs.i1145
  %idxprom51.i = zext i32 %42 to i64
  %arrayidx52.i = getelementptr inbounds [53 x i32]* @regclass_map, i64 0, i64 %idxprom51.i
  %43 = load i32* %arrayidx52.i, align 4, !tbaa !7
  %cmp53.i = icmp ne i32 %43, 0
  br label %land.end.i1147

land.end.i1147:                                   ; preds = %lor.rhs.i, %land.rhs.i1145, %if.end33.i
  %44 = phi i1 [ true, %land.rhs.i1145 ], [ %cmp53.i, %lor.rhs.i ], [ false, %if.end33.i ]
  %land.ext.i1146 = zext i1 %44 to i32
  br label %register_operand.exit

register_operand.exit:                            ; preds = %if.then10.i, %land.end.i1147
  %retval.0.i1148 = phi i32 [ %land.ext.i1146, %land.end.i1147 ], [ %call.i1143, %if.then10.i ]
  %tobool1022 = icmp eq i32 %retval.0.i1148, 0
  br i1 %tobool1022, label %if.end1025, label %return

if.end1025:                                       ; preds = %land.lhs.true17.i, %register_operand.exit
  switch i8 %3, label %while.cond.backedge [
    i8 101, label %cond.true1029
    i8 90, label %cond.true1036
  ]

cond.true1029:                                    ; preds = %sw.default, %if.end1025
  %call1030 = tail call i32 @x86_64_sign_extended_value(%struct.rtx_def* %op) #4
  %tobool1031 = icmp eq i32 %call1030, 0
  br i1 %tobool1031, label %while.cond.backedge, label %return

cond.true1036:                                    ; preds = %sw.default, %if.end1025
  %call1037 = tail call i32 @x86_64_zero_extended_value(%struct.rtx_def* %op) #4
  %tobool1038 = icmp eq i32 %call1037, 0
  br i1 %tobool1038, label %while.cond.backedge, label %return

return:                                           ; preds = %sw.bb24, %sw.bb28, %sw.bb35, %cond.true, %cond.true65, %lor.lhs.false129, %lor.lhs.false147, %land.lhs.true144, %land.lhs.true127, %sw.bb152, %land.lhs.true162, %cond.true176, %cond.true273, %cond.true372, %cond.true471, %cond.true471, %cond.true570, %cond.true669, %while.body, %sw.bb857, %register_operand.exit, %cond.true1029, %cond.true1036, %while.cond.backedge, %sw.bb10, %if.end33.i, %land.rhs.i1132, %memory_operand.exit, %address_operand.exit, %while.cond.preheader
  %retval.0 = phi i32 [ 0, %while.cond.preheader ], [ 1, %sw.bb24 ], [ 1, %sw.bb28 ], [ 1, %sw.bb35 ], [ 1, %cond.true ], [ 1, %cond.true65 ], [ 1, %lor.lhs.false129 ], [ 1, %lor.lhs.false147 ], [ 1, %land.lhs.true144 ], [ 1, %land.lhs.true127 ], [ 1, %sw.bb152 ], [ 1, %land.lhs.true162 ], [ 1, %cond.true176 ], [ 1, %cond.true273 ], [ 1, %cond.true372 ], [ 1, %cond.true471 ], [ 1, %cond.true471 ], [ 1, %cond.true570 ], [ 1, %cond.true669 ], [ 1, %while.body ], [ 1, %sw.bb857 ], [ 1, %register_operand.exit ], [ 1, %cond.true1029 ], [ 1, %cond.true1036 ], [ %result.0.be, %while.cond.backedge ], [ 1, %sw.bb10 ], [ 1, %if.end33.i ], [ 1, %land.rhs.i1132 ], [ 1, %memory_operand.exit ], [ 1, %address_operand.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %loc, %struct.rtx_def* %new, i32 %in_group) #0 {
entry:
  %0 = load %struct.rtx_def** %loc, align 8, !tbaa !5
  %cmp = icmp eq %struct.rtx_def* %0, %new
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %call = tail call i32 @rtx_equal_p(%struct.rtx_def* %0, %struct.rtx_def* %new) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %cmp1 = icmp eq i32 %in_group, 0
  %1 = load i32* @num_changes, align 4
  %cmp2 = icmp ne i32 %1, 0
  %or.cond = and i1 %cmp1, %cmp2
  br i1 %or.cond, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 216, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.validate_change, i64 0, i64 0)) #6
  unreachable

if.end4:                                          ; preds = %if.end
  store %struct.rtx_def* %new, %struct.rtx_def** %loc, align 8, !tbaa !5
  %2 = load i32* @changes_allocated, align 4, !tbaa !1
  %cmp5 = icmp slt i32 %1, %2
  br i1 %cmp5, label %if.end4.if.end12_crit_edge, label %if.then6

if.end4.if.end12_crit_edge:                       ; preds = %if.end4
  %.pre47 = load %struct.change_t** @changes, align 8, !tbaa !5
  br label %if.end12

if.then6:                                         ; preds = %if.end4
  %cmp7 = icmp eq i32 %2, 0
  %mul = shl nsw i32 %2, 1
  %storemerge = select i1 %cmp7, i32 150, i32 %mul
  store i32 %storemerge, i32* @changes_allocated, align 4, !tbaa !1
  %3 = load %struct.change_t** @changes, align 8, !tbaa !5
  %4 = bitcast %struct.change_t* %3 to i8*
  %conv = sext i32 %storemerge to i64
  %mul10 = shl nsw i64 %conv, 5
  %call11 = tail call i8* @xrealloc(i8* %4, i64 %mul10) #4
  %5 = bitcast i8* %call11 to %struct.change_t*
  store %struct.change_t* %5, %struct.change_t** @changes, align 8, !tbaa !5
  %.pre = load i32* @num_changes, align 4, !tbaa !1
  br label %if.end12

if.end12:                                         ; preds = %if.end4.if.end12_crit_edge, %if.then6
  %6 = phi %struct.change_t* [ %.pre47, %if.end4.if.end12_crit_edge ], [ %5, %if.then6 ]
  %7 = phi i32 [ %1, %if.end4.if.end12_crit_edge ], [ %.pre, %if.then6 ]
  %idxprom = sext i32 %7 to i64
  %object13 = getelementptr inbounds %struct.change_t* %6, i64 %idxprom, i32 0
  store %struct.rtx_def* %object, %struct.rtx_def** %object13, align 8, !tbaa !29
  %8 = load %struct.change_t** @changes, align 8, !tbaa !5
  %loc16 = getelementptr inbounds %struct.change_t* %8, i64 %idxprom, i32 2
  store %struct.rtx_def** %loc, %struct.rtx_def*** %loc16, align 8, !tbaa !31
  %9 = load %struct.change_t** @changes, align 8, !tbaa !5
  %old19 = getelementptr inbounds %struct.change_t* %9, i64 %idxprom, i32 3
  store %struct.rtx_def* %0, %struct.rtx_def** %old19, align 8, !tbaa !32
  %tobool20 = icmp eq %struct.rtx_def* %object, null
  br i1 %tobool20, label %if.end31, label %land.lhs.true21

land.lhs.true21:                                  ; preds = %if.end12
  %10 = getelementptr inbounds %struct.rtx_def* %object, i64 0, i32 0
  %bf.load = load i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp22 = icmp eq i32 %bf.clear, 66
  br i1 %cmp22, label %if.end31, label %if.then24

if.then24:                                        ; preds = %land.lhs.true21
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %object, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx25 to i32*
  %11 = load i32* %rtint, align 4, !tbaa !1
  %12 = load %struct.change_t** @changes, align 8, !tbaa !5
  %old_code = getelementptr inbounds %struct.change_t* %12, i64 %idxprom, i32 1
  store i32 %11, i32* %old_code, align 4, !tbaa !33
  store i32 -1, i32* %rtint, align 4, !tbaa !1
  %.pre48 = load i32* @num_changes, align 4, !tbaa !1
  br label %if.end31

if.end31:                                         ; preds = %land.lhs.true21, %if.end12, %if.then24
  %13 = phi i32 [ %7, %land.lhs.true21 ], [ %7, %if.end12 ], [ %.pre48, %if.then24 ]
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* @num_changes, align 4, !tbaa !1
  br i1 %cmp1, label %if.else34, label %return

if.else34:                                        ; preds = %if.end31
  %call35 = tail call i32 @apply_change_group()
  br label %return

return:                                           ; preds = %if.end31, %entry, %lor.lhs.false, %if.else34
  %retval.0 = phi i32 [ %call35, %if.else34 ], [ 1, %lor.lhs.false ], [ 1, %entry ], [ 1, %if.end31 ]
  ret i32 %retval.0
}

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #3

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define i32 @apply_change_group() #0 {
entry:
  %0 = load i32* @num_changes, align 4, !tbaa !1
  %cmp132 = icmp sgt i32 %0, 0
  br i1 %cmp132, label %for.body, label %for.end94

for.body:                                         ; preds = %entry, %for.inc92
  %indvars.iv139 = phi i64 [ %indvars.iv.next140, %for.inc92 ], [ 0, %entry ]
  %last_validated.0133 = phi %struct.rtx_def* [ %last_validated.1, %for.inc92 ], [ null, %entry ]
  %1 = load %struct.change_t** @changes, align 8, !tbaa !5
  %object1 = getelementptr inbounds %struct.change_t* %1, i64 %indvars.iv139, i32 0
  %2 = load %struct.rtx_def** %object1, align 8, !tbaa !29
  %cmp2 = icmp eq %struct.rtx_def* %2, null
  %cmp3 = icmp eq %struct.rtx_def* %2, %last_validated.0133
  %or.cond = or i1 %cmp2, %cmp3
  br i1 %or.cond, label %for.inc92, label %if.end

if.end:                                           ; preds = %for.body
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp4 = icmp eq i32 %bf.clear, 66
  %4 = trunc i64 %indvars.iv139 to i32
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load.i = load i32* %6, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 70
  br i1 %cmp.i, label %for.inc92, label %memory_address_p.exit

memory_address_p.exit:                            ; preds = %if.then5
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear7 = and i32 %bf.lshr, 255
  %call.i = tail call i32 @legitimate_address_p(i32 %bf.clear7, %struct.rtx_def* %5, i32 0) #4
  %not.tobool.i = icmp eq i32 %call.i, 0
  br i1 %not.tobool.i, label %for.end94thread-pre-split, label %for.inc92

if.else:                                          ; preds = %if.end
  %call11 = tail call i32 @insn_invalid_p(%struct.rtx_def* %2)
  %tobool12 = icmp eq i32 %call11, 0
  br i1 %tobool12, label %for.inc92, label %if.then13

if.then13:                                        ; preds = %if.else
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 3
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx16, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load17 = load i32* %8, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 39
  br i1 %cmp19, label %land.lhs.true, label %if.else80

land.lhs.true:                                    ; preds = %if.then13
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtvec_def**
  %9 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %num_elem = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 0
  %10 = load i32* %num_elem, align 4, !tbaa !27
  %sub = add nsw i32 %10, -1
  %idxprom22 = sext i32 %sub to i64
  %arrayidx26 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %idxprom22
  %11 = load %struct.rtx_def** %arrayidx26, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load27 = load i32* %12, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 49
  br i1 %cmp29, label %land.lhs.true30, label %if.else80

land.lhs.true30:                                  ; preds = %land.lhs.true
  %call34 = tail call i32 @asm_noperands(%struct.rtx_def* %7)
  %cmp35 = icmp slt i32 %call34, 0
  br i1 %cmp35, label %if.then36, label %if.else80

if.then36:                                        ; preds = %land.lhs.true30
  %cmp41 = icmp eq i32 %10, 2
  br i1 %cmp41, label %if.then42, label %if.else48

if.then42:                                        ; preds = %if.then36
  %arrayidx47 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 0
  %13 = load %struct.rtx_def** %arrayidx47, align 8, !tbaa !5
  br label %if.end75

if.else48:                                        ; preds = %if.then36
  %call54 = tail call %struct.rtvec_def* @rtvec_alloc(i32 %sub) #4
  %call55 = tail call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call54) #4
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %call55, i64 0, i32 1, i64 0
  %rtvec59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtvec_def**
  %14 = load %struct.rtvec_def** %rtvec59, align 8, !tbaa !5
  %num_elem60129 = getelementptr inbounds %struct.rtvec_def* %14, i64 0, i32 0
  %15 = load i32* %num_elem60129, align 4, !tbaa !27
  %cmp61130 = icmp sgt i32 %15, 0
  br i1 %cmp61130, label %for.body62, label %if.end75

for.body62:                                       ; preds = %if.else48, %for.body62
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body62 ], [ 0, %if.else48 ]
  %16 = phi %struct.rtvec_def* [ %19, %for.body62 ], [ %14, %if.else48 ]
  %17 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx68 = getelementptr inbounds %struct.rtvec_def* %17, i64 0, i32 1, i64 %indvars.iv
  %18 = load %struct.rtx_def** %arrayidx68, align 8, !tbaa !5
  %arrayidx74 = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %18, %struct.rtx_def** %arrayidx74, align 8, !tbaa !5
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %19 = load %struct.rtvec_def** %rtvec59, align 8, !tbaa !5
  %num_elem60 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 0
  %20 = load i32* %num_elem60, align 4, !tbaa !27
  %21 = trunc i64 %indvars.iv.next to i32
  %cmp61 = icmp slt i32 %21, %20
  br i1 %cmp61, label %for.body62, label %if.end75

if.end75:                                         ; preds = %for.body62, %if.else48, %if.then42
  %newpat.0 = phi %struct.rtx_def* [ %13, %if.then42 ], [ %call55, %if.else48 ], [ %call55, %for.body62 ]
  %call79 = tail call i32 @validate_change(%struct.rtx_def* %2, %struct.rtx_def** %rtx16, %struct.rtx_def* %newpat.0, i32 1)
  br label %for.inc92

if.else80:                                        ; preds = %land.lhs.true30, %land.lhs.true, %if.then13
  %22 = and i32 %bf.load17, 65534
  %switch = icmp eq i32 %22, 48
  br i1 %switch, label %for.inc92, label %for.end94thread-pre-split

for.inc92:                                        ; preds = %memory_address_p.exit, %if.then5, %if.else80, %if.else, %for.body, %if.end75
  %last_validated.1 = phi %struct.rtx_def* [ %last_validated.0133, %for.body ], [ %last_validated.0133, %if.end75 ], [ %last_validated.0133, %if.else80 ], [ %2, %memory_address_p.exit ], [ %2, %if.else ], [ %2, %if.then5 ]
  %indvars.iv.next140 = add nuw nsw i64 %indvars.iv139, 1
  %23 = load i32* @num_changes, align 4, !tbaa !1
  %24 = trunc i64 %indvars.iv.next140 to i32
  %cmp = icmp slt i32 %24, %23
  br i1 %cmp, label %for.body, label %for.end94

for.end94thread-pre-split:                        ; preds = %memory_address_p.exit, %if.else80
  %.pr = load i32* @num_changes, align 4, !tbaa !1
  br label %for.end94

for.end94:                                        ; preds = %for.inc92, %entry, %for.end94thread-pre-split
  %i.0127 = phi i32 [ %4, %for.end94thread-pre-split ], [ 0, %entry ], [ %24, %for.inc92 ]
  %25 = phi i32 [ %.pr, %for.end94thread-pre-split ], [ %0, %entry ], [ %23, %for.inc92 ]
  %cmp95 = icmp eq i32 %i.0127, %25
  br i1 %cmp95, label %return, label %if.else97

if.else97:                                        ; preds = %for.end94
  %cmp24.i = icmp sgt i32 %25, 0
  br i1 %cmp24.i, label %for.body.lr.ph.i, label %return

for.body.lr.ph.i:                                 ; preds = %if.else97
  %26 = sext i32 %25 to i64
  %.pre.i = load %struct.change_t** @changes, align 8, !tbaa !5
  br label %for.body.i

for.body.i:                                       ; preds = %for.cond.backedge.i, %for.body.lr.ph.i
  %27 = phi %struct.change_t* [ %.pre.i, %for.body.lr.ph.i ], [ %30, %for.cond.backedge.i ]
  %indvars.iv.i = phi i64 [ %26, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.cond.backedge.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -1
  %old.i = getelementptr inbounds %struct.change_t* %27, i64 %indvars.iv.next.i, i32 3
  %28 = load %struct.rtx_def** %old.i, align 8, !tbaa !32
  %loc.i = getelementptr inbounds %struct.change_t* %27, i64 %indvars.iv.next.i, i32 2
  %29 = load %struct.rtx_def*** %loc.i, align 8, !tbaa !31
  store %struct.rtx_def* %28, %struct.rtx_def** %29, align 8, !tbaa !5
  %30 = load %struct.change_t** @changes, align 8, !tbaa !5
  %object.i = getelementptr inbounds %struct.change_t* %30, i64 %indvars.iv.next.i, i32 0
  %31 = load %struct.rtx_def** %object.i, align 8, !tbaa !29
  %tobool.i = icmp eq %struct.rtx_def* %31, null
  br i1 %tobool.i, label %for.cond.backedge.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %32 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 0
  %bf.load.i122 = load i32* %32, align 8
  %bf.clear.i123 = and i32 %bf.load.i122, 65535
  %cmp8.i = icmp eq i32 %bf.clear.i123, 66
  br i1 %cmp8.i, label %for.cond.backedge.i, label %if.then.i

for.cond.backedge.i:                              ; preds = %if.then.i, %land.lhs.true.i, %for.body.i
  %33 = trunc i64 %indvars.iv.next.i to i32
  %cmp.i124 = icmp sgt i32 %33, 0
  br i1 %cmp.i124, label %for.body.i, label %return

if.then.i:                                        ; preds = %land.lhs.true.i
  %old_code.i = getelementptr inbounds %struct.change_t* %30, i64 %indvars.iv.next.i, i32 1
  %34 = load i32* %old_code.i, align 4, !tbaa !33
  %arrayidx14.i = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx14.i to i32*
  store i32 %34, i32* %rtint.i, align 4, !tbaa !1
  br label %for.cond.backedge.i

return:                                           ; preds = %for.cond.backedge.i, %if.else97, %for.end94
  %retval.0 = phi i32 [ 1, %for.end94 ], [ 0, %if.else97 ], [ 0, %for.cond.backedge.i ]
  store i32 0, i32* @num_changes, align 4, !tbaa !1
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @insn_invalid_p(%struct.rtx_def* %insn) #0 {
entry:
  %num_clobbers = alloca i32, align 4
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  store i32 0, i32* %num_clobbers, align 4, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp ne i32 %bf.clear, 47
  %2 = load i32* @reload_completed, align 4
  %tobool = icmp ne i32 %2, 0
  %or.cond = or i1 %cmp, %tobool
  %3 = load i32* @reload_in_progress, align 4
  %tobool2 = icmp ne i32 %3, 0
  %or.cond43 = or i1 %or.cond, %tobool2
  %cond = select i1 %or.cond43, i32* null, i32* %num_clobbers
  %call = call i32 @recog(%struct.rtx_def* %0, %struct.rtx_def* %insn, i32* %cond) #4
  %cmp3 = icmp slt i32 %call, 0
  br i1 %cmp3, label %land.end, label %if.end

land.end:                                         ; preds = %entry
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %call7 = call i32 @asm_noperands(%struct.rtx_def* %4)
  %cmp8 = icmp sgt i32 %call7, -1
  br i1 %cmp8, label %land.lhs.true10, label %return

land.lhs.true10:                                  ; preds = %land.end
  %call14 = call i32 @check_asm_operands(%struct.rtx_def* %4)
  %tobool15 = icmp eq i32 %call14, 0
  br i1 %tobool15, label %return, label %if.end

if.end:                                           ; preds = %entry, %land.lhs.true10
  %5 = load i32* %num_clobbers, align 4, !tbaa !1
  %cmp19 = icmp sgt i32 %5, 0
  br i1 %cmp19, label %if.then20, label %if.end33

if.then20:                                        ; preds = %if.end
  %call21 = call i32 @added_clobbers_hard_reg_p(i32 %call) #4
  %tobool22 = icmp eq i32 %call21, 0
  br i1 %tobool22, label %if.end24, label %return

if.end24:                                         ; preds = %if.then20
  %6 = load i32* %num_clobbers, align 4, !tbaa !1
  %add = add nsw i32 %6, 1
  %call25 = call %struct.rtvec_def* @rtvec_alloc(i32 %add) #4
  %call26 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call25) #4
  %arrayidx28 = getelementptr inbounds %struct.rtx_def* %call26, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx29 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 0
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx29, align 8, !tbaa !5
  call void @add_clobbers(%struct.rtx_def* %call26, i32 %call) #4
  %8 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %call26.c = ptrtoint %struct.rtx_def* %call26 to i64
  store i64 %call26.c, i64* %8, align 8, !tbaa !5
  br label %if.end33

if.end33:                                         ; preds = %if.end24, %if.end
  %9 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool34 = icmp eq i32 %9, 0
  br i1 %tobool34, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  call void @extract_insn(%struct.rtx_def* %insn)
  %call36 = call i32 @constrain_operands(i32 1)
  %tobool37 = icmp eq i32 %call36, 0
  br i1 %tobool37, label %return, label %if.end40

if.end40:                                         ; preds = %if.then35, %if.end33
  %arrayidx42 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx42 to i32*
  store i32 %call, i32* %rtint, align 4, !tbaa !1
  br label %return

return:                                           ; preds = %land.end, %if.then35, %if.then20, %land.lhs.true10, %if.end40
  %retval.0 = phi i32 [ 0, %if.end40 ], [ 1, %land.lhs.true10 ], [ 1, %if.then20 ], [ 1, %if.then35 ], [ 1, %land.end ]
  ret i32 %retval.0
}

declare i32 @added_clobbers_hard_reg_p(i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_E(i32, i32, %struct.rtvec_def*) #1

declare %struct.rtvec_def* @rtvec_alloc(i32) #1

declare void @add_clobbers(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define i32 @memory_address_p(i32 %mode, %struct.rtx_def* %addr) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %addr, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 70
  br i1 %cmp, label %return, label %do.body

do.body:                                          ; preds = %entry
  %call = tail call i32 @legitimate_address_p(i32 %mode, %struct.rtx_def* %addr, i32 0) #4
  %not.tobool = icmp ne i32 %call, 0
  %. = zext i1 %not.tobool to i32
  br label %return

return:                                           ; preds = %do.body, %entry
  %retval.0 = phi i32 [ 1, %entry ], [ %., %do.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @cancel_changes(i32 %num) #0 {
entry:
  %0 = load i32* @num_changes, align 4, !tbaa !1
  %cmp24 = icmp sgt i32 %0, %num
  br i1 %cmp24, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = sext i32 %0 to i64
  %.pre = load %struct.change_t** @changes, align 8, !tbaa !5
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %2 = phi %struct.change_t* [ %.pre, %for.body.lr.ph ], [ %5, %for.cond.backedge ]
  %indvars.iv = phi i64 [ %1, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.backedge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %old = getelementptr inbounds %struct.change_t* %2, i64 %indvars.iv.next, i32 3
  %3 = load %struct.rtx_def** %old, align 8, !tbaa !32
  %loc = getelementptr inbounds %struct.change_t* %2, i64 %indvars.iv.next, i32 2
  %4 = load %struct.rtx_def*** %loc, align 8, !tbaa !31
  store %struct.rtx_def* %3, %struct.rtx_def** %4, align 8, !tbaa !5
  %5 = load %struct.change_t** @changes, align 8, !tbaa !5
  %object = getelementptr inbounds %struct.change_t* %5, i64 %indvars.iv.next, i32 0
  %6 = load %struct.rtx_def** %object, align 8, !tbaa !29
  %tobool = icmp eq %struct.rtx_def* %6, null
  br i1 %tobool, label %for.cond.backedge, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load = load i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp8 = icmp eq i32 %bf.clear, 66
  br i1 %cmp8, label %for.cond.backedge, label %if.then

for.cond.backedge:                                ; preds = %land.lhs.true, %for.body, %if.then
  %8 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp sgt i32 %8, %num
  br i1 %cmp, label %for.body, label %for.end

if.then:                                          ; preds = %land.lhs.true
  %old_code = getelementptr inbounds %struct.change_t* %5, i64 %indvars.iv.next, i32 1
  %9 = load i32* %old_code, align 4, !tbaa !33
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx14 to i32*
  store i32 %9, i32* %rtint, align 4, !tbaa !1
  br label %for.cond.backedge

for.end:                                          ; preds = %for.cond.backedge, %entry
  store i32 %num, i32* @num_changes, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @num_validated_changes() #2 {
entry:
  %0 = load i32* @num_changes, align 4, !tbaa !1
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define i32 @validate_replace_rtx_subexp(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn, %struct.rtx_def** %loc) #0 {
entry:
  tail call fastcc void @validate_replace_rtx_1(%struct.rtx_def** %loc, %struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn)
  %call = tail call i32 @apply_change_group()
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal fastcc void @validate_replace_rtx_1(%struct.rtx_def** %loc, %struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %object) #0 {
entry:
  %0 = load %struct.rtx_def** %loc, align 8, !tbaa !5
  %1 = load i32* @num_changes, align 4, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %sw.epilog, label %if.end

if.end:                                           ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom492 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom492
  %3 = load i8** %arrayidx, align 8, !tbaa !5
  %4 = load i8* %3, align 1, !tbaa !7
  %cmp = icmp eq i8 %4, 101
  br i1 %cmp, label %if.then3, label %if.end7

if.then3:                                         ; preds = %if.end
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load5 = load i32* %6, align 8
  %bf.lshr = lshr i32 %bf.load5, 16
  %bf.clear6 = and i32 %bf.lshr, 255
  br label %if.end7

if.end7:                                          ; preds = %if.then3, %if.end
  %op0_mode.0 = phi i32 [ %bf.clear6, %if.then3 ], [ 0, %if.end ]
  %cmp8 = icmp eq %struct.rtx_def* %0, %from
  br i1 %cmp8, label %if.then53, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end7
  %cmp12 = icmp eq i32 %bf.clear, 61
  %7 = getelementptr inbounds %struct.rtx_def* %from, i64 0, i32 0
  %bf.load14 = load i32* %7, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 61
  %or.cond = and i1 %cmp12, %cmp16
  br i1 %or.cond, label %land.lhs.true18, label %lor.lhs.false35

land.lhs.true18:                                  ; preds = %lor.lhs.false
  %bf.lshr20495 = xor i32 %bf.load14, %bf.load
  %8 = and i32 %bf.lshr20495, 16711680
  %cmp25 = icmp eq i32 %8, 0
  br i1 %cmp25, label %land.lhs.true27, label %lor.lhs.false35

land.lhs.true27:                                  ; preds = %land.lhs.true18
  %arrayidx29 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx29 to i32*
  %9 = load i32* %rtuint, align 4, !tbaa !1
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %from, i64 0, i32 1, i64 0
  %rtuint32 = bitcast %union.rtunion_def* %arrayidx31 to i32*
  %10 = load i32* %rtuint32, align 4, !tbaa !1
  %cmp33 = icmp eq i32 %9, %10
  br i1 %cmp33, label %if.then53, label %lor.lhs.false35

lor.lhs.false35:                                  ; preds = %lor.lhs.false, %land.lhs.true27, %land.lhs.true18
  %11 = xor i32 %bf.load14, %bf.load
  %12 = and i32 %11, 16777215
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %land.lhs.true51, label %if.end55

land.lhs.true51:                                  ; preds = %lor.lhs.false35
  %call = tail call i32 @rtx_equal_p(%struct.rtx_def* %0, %struct.rtx_def* %from) #4
  %tobool52 = icmp eq i32 %call, 0
  br i1 %tobool52, label %if.end55, label %if.then53

if.then53:                                        ; preds = %land.lhs.true51, %land.lhs.true27, %if.end7
  %call54 = tail call i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %loc, %struct.rtx_def* %to, i32 1)
  br label %sw.epilog

if.end55:                                         ; preds = %land.lhs.true51, %lor.lhs.false35
  %arrayidx57 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom492
  %14 = load i8* %arrayidx57, align 1, !tbaa !7
  %cmp59507 = icmp eq i8 %14, 0
  br i1 %cmp59507, label %for.end95, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end55
  %15 = zext i8 %14 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv509 = phi i64 [ %15, %for.body.lr.ph ], [ %indvars.iv.next510, %for.cond.backedge ]
  %indvars.iv.next510 = add nsw i64 %indvars.iv509, -1
  %arrayidx62 = getelementptr inbounds i8* %3, i64 %indvars.iv.next510
  %16 = load i8* %arrayidx62, align 1, !tbaa !7
  switch i8 %16, label %for.cond.backedge [
    i8 101, label %if.then66
    i8 69, label %if.then76
  ]

for.cond.backedge:                                ; preds = %for.body84, %if.then76, %for.body, %if.then66
  %17 = trunc i64 %indvars.iv.next510 to i32
  %cmp59 = icmp sgt i32 %17, 0
  br i1 %cmp59, label %for.body, label %for.end95

if.then66:                                        ; preds = %for.body
  %arrayidx69 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 %indvars.iv.next510
  %rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**
  tail call fastcc void @validate_replace_rtx_1(%struct.rtx_def** %rtx70, %struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %object)
  br label %for.cond.backedge

if.then76:                                        ; preds = %for.body
  %arrayidx79 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 %indvars.iv.next510
  %rtvec = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtvec_def**
  %18 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %num_elem = getelementptr inbounds %struct.rtvec_def* %18, i64 0, i32 0
  %19 = load i32* %num_elem, align 4, !tbaa !27
  %cmp82504 = icmp sgt i32 %19, 0
  br i1 %cmp82504, label %for.body84.lr.ph, label %for.cond.backedge

for.body84.lr.ph:                                 ; preds = %if.then76
  %20 = sext i32 %19 to i64
  br label %for.body84

for.body84:                                       ; preds = %for.body84.for.body84_crit_edge, %for.body84.lr.ph
  %21 = phi %struct.rtvec_def* [ %18, %for.body84.lr.ph ], [ %.pre526, %for.body84.for.body84_crit_edge ]
  %indvars.iv = phi i64 [ %20, %for.body84.lr.ph ], [ %indvars.iv.next, %for.body84.for.body84_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx90 = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 1, i64 %indvars.iv.next
  tail call fastcc void @validate_replace_rtx_1(%struct.rtx_def** %arrayidx90, %struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %object)
  %22 = trunc i64 %indvars.iv.next to i32
  %cmp82 = icmp sgt i32 %22, 0
  br i1 %cmp82, label %for.body84.for.body84_crit_edge, label %for.cond.backedge

for.body84.for.body84_crit_edge:                  ; preds = %for.body84
  %.pre526 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  br label %for.body84

for.end95:                                        ; preds = %for.cond.backedge, %if.end55
  %23 = load i32* @num_changes, align 4, !tbaa !1
  %cmp96 = icmp eq i32 %23, %1
  br i1 %cmp96, label %sw.epilog, label %if.end99

if.end99:                                         ; preds = %for.end95
  %24 = load i8* %3, align 1, !tbaa !7
  %cmp102 = icmp eq i8 %24, 101
  br i1 %cmp102, label %land.lhs.true104, label %if.end120

land.lhs.true104:                                 ; preds = %if.end99
  %arrayidx106 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**
  %25 = load %struct.rtx_def** %rtx107, align 8, !tbaa !5
  %26 = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 0
  %bf.load108 = load i32* %26, align 8
  %bf.lshr109 = lshr i32 %bf.load108, 16
  %bf.clear110 = and i32 %bf.lshr109, 255
  %cmp111 = icmp eq i32 %bf.clear110, 0
  %op0_mode.0.bf.clear110 = select i1 %cmp111, i32 %op0_mode.0, i32 %bf.clear110
  br label %if.end120

if.end120:                                        ; preds = %land.lhs.true104, %if.end99
  %op0_mode.1 = phi i32 [ %op0_mode.0, %if.end99 ], [ %op0_mode.0.bf.clear110, %land.lhs.true104 ]
  %arrayidx122 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom492
  %27 = load i8* %arrayidx122, align 1, !tbaa !7
  switch i8 %27, label %if.end161 [
    i8 60, label %land.lhs.true132
    i8 99, label %land.lhs.true132
  ]

land.lhs.true132:                                 ; preds = %if.end120, %if.end120
  %.in.in = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %.in = bitcast [1 x %union.rtunion_def]* %.in.in to %struct.rtx_def**
  %28 = load %struct.rtx_def** %.in, align 8
  %fld133 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx135 = bitcast [1 x %union.rtunion_def]* %fld133 to %struct.rtx_def**
  %arrayidx137 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**
  %29 = load %struct.rtx_def** %rtx138, align 8, !tbaa !5
  %call139 = tail call i32 @swap_commutative_operands_p(%struct.rtx_def* %28, %struct.rtx_def* %29) #4
  %tobool140 = icmp eq i32 %call139, 0
  br i1 %tobool140, label %if.end161, label %if.then141

if.then141:                                       ; preds = %land.lhs.true132
  %cmp145 = icmp eq i8 %27, 99
  br i1 %cmp145, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.then141
  %call147 = tail call i32 @swap_condition(i32 %bf.clear) #4
  br label %cond.end

cond.end:                                         ; preds = %if.then141, %cond.false
  %cond = phi i32 [ %call147, %cond.false ], [ %bf.clear, %if.then141 ]
  %bf.load148 = load i32* %2, align 8
  %bf.lshr149 = lshr i32 %bf.load148, 16
  %bf.clear150 = and i32 %bf.lshr149, 255
  %30 = load %struct.rtx_def** %rtx138, align 8, !tbaa !5
  %31 = load %struct.rtx_def** %rtx135, align 8, !tbaa !5
  %call157 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %cond, i32 %bf.clear150, %struct.rtx_def* %30, %struct.rtx_def* %31) #4
  %call158 = tail call i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %loc, %struct.rtx_def* %call157, i32 1)
  %32 = load %struct.rtx_def** %loc, align 8, !tbaa !5
  %33 = getelementptr inbounds %struct.rtx_def* %32, i64 0, i32 0
  %bf.load159 = load i32* %33, align 8
  %bf.clear160 = and i32 %bf.load159, 65535
  br label %if.end161

if.end161:                                        ; preds = %if.end120, %land.lhs.true132, %cond.end
  %code.0 = phi i32 [ %bf.clear160, %cond.end ], [ %bf.clear, %land.lhs.true132 ], [ %bf.clear, %if.end120 ]
  %x.0 = phi %struct.rtx_def* [ %32, %cond.end ], [ %0, %land.lhs.true132 ], [ %0, %if.end120 ]
  switch i32 %code.0, label %sw.epilog [
    i32 75, label %sw.bb
    i32 76, label %sw.bb182
    i32 121, label %sw.bb218
    i32 120, label %sw.bb218
    i32 63, label %sw.bb244
    i32 133, label %sw.bb275
    i32 132, label %sw.bb275
  ]

sw.bb:                                            ; preds = %if.end161
  %arrayidx163 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 1
  %rtx164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtx_def**
  %34 = load %struct.rtx_def** %rtx164, align 8, !tbaa !5
  %35 = getelementptr inbounds %struct.rtx_def* %34, i64 0, i32 0
  %bf.load165 = load i32* %35, align 8
  %bf.clear166 = and i32 %bf.load165, 65535
  %cmp167 = icmp eq i32 %bf.clear166, 54
  br i1 %cmp167, label %if.then169, label %sw.epilog

if.then169:                                       ; preds = %sw.bb
  %36 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 0
  %bf.load170 = load i32* %36, align 8
  %bf.lshr171 = lshr i32 %bf.load170, 16
  %bf.clear172 = and i32 %bf.lshr171, 255
  %arrayidx174 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 0
  %rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**
  %37 = load %struct.rtx_def** %rtx175, align 8, !tbaa !5
  %call179 = tail call %struct.rtx_def* @simplify_gen_binary(i32 75, i32 %bf.clear172, %struct.rtx_def* %37, %struct.rtx_def* %34) #4
  %call180 = tail call i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %loc, %struct.rtx_def* %call179, i32 1)
  br label %sw.epilog

sw.bb182:                                         ; preds = %if.end161
  %arrayidx184 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 1
  %rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**
  %38 = load %struct.rtx_def** %rtx185, align 8, !tbaa !5
  %39 = getelementptr inbounds %struct.rtx_def* %38, i64 0, i32 0
  %bf.load186 = load i32* %39, align 8
  %40 = and i32 %bf.load186, 65534
  %switch = icmp eq i32 %40, 54
  br i1 %switch, label %if.then198, label %sw.epilog

if.then198:                                       ; preds = %sw.bb182
  %41 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 0
  %bf.load199 = load i32* %41, align 8
  %bf.lshr200 = lshr i32 %bf.load199, 16
  %bf.clear201 = and i32 %bf.lshr200, 255
  %arrayidx203 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 0
  %rtx204 = bitcast %union.rtunion_def* %arrayidx203 to %struct.rtx_def**
  %42 = load %struct.rtx_def** %rtx204, align 8, !tbaa !5
  %call214 = tail call %struct.rtx_def* @simplify_gen_unary(i32 77, i32 %bf.clear201, %struct.rtx_def* %38, i32 %bf.clear201) #4
  %call215 = tail call %struct.rtx_def* @simplify_gen_binary(i32 75, i32 %bf.clear201, %struct.rtx_def* %42, %struct.rtx_def* %call214) #4
  %call216 = tail call i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %loc, %struct.rtx_def* %call215, i32 1)
  br label %sw.epilog

sw.bb218:                                         ; preds = %if.end161, %if.end161
  %.in528.in = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 0
  %.in528 = bitcast %union.rtunion_def* %.in528.in to %struct.rtx_def**
  %43 = load %struct.rtx_def** %.in528, align 8
  %44 = getelementptr inbounds %struct.rtx_def* %43, i64 0, i32 0
  %bf.load222 = load i32* %44, align 8
  %bf.clear224 = and i32 %bf.load222, 16711680
  %cmp225 = icmp eq i32 %bf.clear224, 0
  br i1 %cmp225, label %if.then227, label %sw.epilog

if.then227:                                       ; preds = %sw.bb218
  %45 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 0
  %bf.load228 = load i32* %45, align 8
  %bf.lshr229 = lshr i32 %bf.load228, 16
  %bf.clear230 = and i32 %bf.lshr229, 255
  %call234 = tail call %struct.rtx_def* @simplify_gen_unary(i32 %code.0, i32 %bf.clear230, %struct.rtx_def* %43, i32 %op0_mode.1) #4
  %tobool235 = icmp eq %struct.rtx_def* %call234, null
  br i1 %tobool235, label %if.then236, label %if.end241

if.then236:                                       ; preds = %if.then227
  %bf.load237 = load i32* %45, align 8
  %bf.lshr238 = lshr i32 %bf.load237, 16
  %bf.clear239 = and i32 %bf.lshr238, 255
  %46 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !5
  %call240 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 %bf.clear239, %struct.rtx_def* %46) #4
  br label %if.end241

if.end241:                                        ; preds = %if.then227, %if.then236
  %new.0 = phi %struct.rtx_def* [ %call234, %if.then227 ], [ %call240, %if.then236 ]
  %call242 = tail call i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %loc, %struct.rtx_def* %new.0, i32 1)
  br label %sw.epilog

sw.bb244:                                         ; preds = %if.end161
  %47 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 0
  %bf.load245 = load i32* %47, align 8
  %bf.lshr246 = lshr i32 %bf.load245, 16
  %bf.clear247 = and i32 %bf.lshr246, 255
  %fld248 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1
  %rtx250 = bitcast [1 x %union.rtunion_def]* %fld248 to %struct.rtx_def**
  %48 = load %struct.rtx_def** %rtx250, align 8, !tbaa !5
  %arrayidx252 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 1
  %rtuint253 = bitcast %union.rtunion_def* %arrayidx252 to i32*
  %49 = load i32* %rtuint253, align 4, !tbaa !1
  %call254 = tail call %struct.rtx_def* @simplify_subreg(i32 %bf.clear247, %struct.rtx_def* %48, i32 %op0_mode.1, i32 %49) #4
  %tobool255 = icmp eq %struct.rtx_def* %call254, null
  br i1 %tobool255, label %land.lhs.true256, label %if.then272

land.lhs.true256:                                 ; preds = %sw.bb244
  %50 = load %struct.rtx_def** %rtx250, align 8, !tbaa !5
  %51 = getelementptr inbounds %struct.rtx_def* %50, i64 0, i32 0
  %bf.load260 = load i32* %51, align 8
  %bf.clear262 = and i32 %bf.load260, 16711680
  %cmp263 = icmp eq i32 %bf.clear262, 0
  br i1 %cmp263, label %if.end270, label %sw.epilog

if.end270:                                        ; preds = %land.lhs.true256
  %bf.load266 = load i32* %47, align 8
  %bf.lshr267 = lshr i32 %bf.load266, 16
  %bf.clear268 = and i32 %bf.lshr267, 255
  %52 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !5
  %call269 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 %bf.clear268, %struct.rtx_def* %52) #4
  %tobool271 = icmp eq %struct.rtx_def* %call269, null
  br i1 %tobool271, label %sw.epilog, label %if.then272

if.then272:                                       ; preds = %sw.bb244, %if.end270
  %new.1499 = phi %struct.rtx_def* [ %call269, %if.end270 ], [ %call254, %sw.bb244 ]
  %call273 = tail call i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %loc, %struct.rtx_def* %new.1499, i32 1)
  br label %sw.epilog

sw.bb275:                                         ; preds = %if.end161, %if.end161
  %.in527.in = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1
  %.in527 = bitcast [1 x %union.rtunion_def]* %.in527.in to %struct.rtx_def**
  %53 = load %struct.rtx_def** %.in527, align 8
  %fld276 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1
  %rtx278 = bitcast [1 x %union.rtunion_def]* %fld276 to %struct.rtx_def**
  %54 = getelementptr inbounds %struct.rtx_def* %53, i64 0, i32 0
  %bf.load279 = load i32* %54, align 8
  %bf.clear280 = and i32 %bf.load279, 65535
  %cmp281 = icmp eq i32 %bf.clear280, 66
  br i1 %cmp281, label %land.lhs.true283, label %sw.epilog

land.lhs.true283:                                 ; preds = %sw.bb275
  %arrayidx285 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 1
  %rtx286 = bitcast %union.rtunion_def* %arrayidx285 to %struct.rtx_def**
  %55 = load %struct.rtx_def** %rtx286, align 8, !tbaa !5
  %56 = getelementptr inbounds %struct.rtx_def* %55, i64 0, i32 0
  %bf.load287 = load i32* %56, align 8
  %bf.clear288 = and i32 %bf.load287, 65535
  %cmp289 = icmp eq i32 %bf.clear288, 54
  br i1 %cmp289, label %land.lhs.true291, label %sw.epilog

land.lhs.true291:                                 ; preds = %land.lhs.true283
  %arrayidx293 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 2
  %rtx294 = bitcast %union.rtunion_def* %arrayidx293 to %struct.rtx_def**
  %57 = load %struct.rtx_def** %rtx294, align 8, !tbaa !5
  %58 = getelementptr inbounds %struct.rtx_def* %57, i64 0, i32 0
  %bf.load295 = load i32* %58, align 8
  %bf.clear296 = and i32 %bf.load295, 65535
  %cmp297 = icmp eq i32 %bf.clear296, 54
  br i1 %cmp297, label %land.lhs.true299, label %sw.epilog

land.lhs.true299:                                 ; preds = %land.lhs.true291
  %arrayidx304 = getelementptr inbounds %struct.rtx_def* %53, i64 0, i32 1, i64 0
  %rtx305 = bitcast %union.rtunion_def* %arrayidx304 to %struct.rtx_def**
  %59 = load %struct.rtx_def** %rtx305, align 8, !tbaa !5
  %60 = getelementptr inbounds %struct.rtx_def* %59, i64 0, i32 0
  %bf.load.i = load i32* %60, align 8
  %61 = and i32 %bf.load.i, 65534
  %tobool307 = icmp ne i32 %61, 98
  %bf.clear314 = and i32 %bf.load279, 134217728
  %tobool315 = icmp eq i32 %bf.clear314, 0
  %or.cond502 = and i1 %tobool315, %tobool307
  br i1 %or.cond502, label %if.then316, label %sw.epilog

if.then316:                                       ; preds = %land.lhs.true299
  %bf.lshr321 = lshr i32 %bf.load279, 16
  %bf.clear322 = and i32 %bf.lshr321, 255
  %rtwint = getelementptr inbounds %struct.rtx_def* %57, i64 0, i32 1, i64 0, i32 0
  %62 = load i64* %rtwint, align 8, !tbaa !25
  %conv328 = trunc i64 %62 to i32
  %63 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 0
  %bf.load329 = load i32* %63, align 8
  %bf.clear330 = and i32 %bf.load329, 65535
  switch i32 %bf.clear330, label %sw.epilog [
    i32 133, label %if.then333
    i32 132, label %if.then344
  ]

if.then333:                                       ; preds = %if.then316
  %call334 = tail call i32 @mode_for_extraction(i32 2, i32 1) #4
  %cmp335 = icmp eq i32 %call334, 59
  br i1 %cmp335, label %sw.epilog, label %if.end352

if.then344:                                       ; preds = %if.then316
  %call346 = tail call i32 @mode_for_extraction(i32 1, i32 1) #4
  %cmp347 = icmp eq i32 %call346, 59
  br i1 %cmp347, label %sw.epilog, label %if.end352

if.end352:                                        ; preds = %if.then344, %if.then333
  %wanted_mode.0 = phi i32 [ %call334, %if.then333 ], [ %call346, %if.then344 ]
  %cmp353 = icmp eq i32 %wanted_mode.0, 0
  br i1 %cmp353, label %sw.epilog, label %land.lhs.true355

land.lhs.true355:                                 ; preds = %if.end352
  %idxprom356 = sext i32 %wanted_mode.0 to i64
  %arrayidx357 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom356
  %64 = load i8* %arrayidx357, align 1, !tbaa !7
  %idxprom359493 = zext i32 %bf.clear322 to i64
  %arrayidx360 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom359493
  %65 = load i8* %arrayidx360, align 1, !tbaa !7
  %cmp362 = icmp ult i8 %64, %65
  br i1 %cmp362, label %if.then364, label %sw.epilog

if.then364:                                       ; preds = %land.lhs.true355
  %div = sdiv i32 %conv328, 8
  %arrayidx366 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom356
  %66 = load i16* %arrayidx366, align 2, !tbaa !8
  %conv367 = zext i16 %66 to i32
  %rem = srem i32 %conv328, %conv367
  %67 = load %struct.rtx_def** %rtx278, align 8, !tbaa !5
  %conv371 = sext i32 %div to i64
  %call372 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %67, i32 %wanted_mode.0, i64 %conv371, i32 0, i32 1) #4
  %conv376 = sext i32 %rem to i64
  %call377 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv376) #4
  %call378 = tail call i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %rtx294, %struct.rtx_def* %call377, i32 1)
  %call382 = tail call i32 @validate_change(%struct.rtx_def* %object, %struct.rtx_def** %rtx278, %struct.rtx_def* %call372, i32 1)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then344, %if.then333, %if.then316, %land.lhs.true256, %sw.bb182, %if.end270, %if.end352, %land.lhs.true299, %entry, %if.end161, %sw.bb275, %land.lhs.true283, %land.lhs.true291, %if.then364, %land.lhs.true355, %if.then272, %sw.bb218, %if.end241, %if.then198, %sw.bb, %if.then169, %for.end95, %if.then53
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @validate_replace_rtx(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  tail call fastcc void @validate_replace_rtx_1(%struct.rtx_def** %rtx, %struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn)
  %call = tail call i32 @apply_change_group()
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define void @validate_replace_rtx_group(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  tail call fastcc void @validate_replace_rtx_1(%struct.rtx_def** %rtx, %struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @validate_replace_src(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn) #0 {
entry:
  %d = alloca %struct.validate_replace_src_data, align 8
  %from1 = getelementptr inbounds %struct.validate_replace_src_data* %d, i64 0, i32 0
  store %struct.rtx_def* %from, %struct.rtx_def** %from1, align 8, !tbaa !34
  %to2 = getelementptr inbounds %struct.validate_replace_src_data* %d, i64 0, i32 1
  store %struct.rtx_def* %to, %struct.rtx_def** %to2, align 8, !tbaa !36
  %insn3 = getelementptr inbounds %struct.validate_replace_src_data* %d, i64 0, i32 2
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn3, align 8, !tbaa !37
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = bitcast %struct.validate_replace_src_data* %d to i8*
  call void @note_uses(%struct.rtx_def** %rtx, void (%struct.rtx_def**, i8*)* @validate_replace_src_1, i8* %0) #4
  %call = call i32 @apply_change_group()
  ret i32 %call
}

declare void @note_uses(%struct.rtx_def**, void (%struct.rtx_def**, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @validate_replace_src_1(%struct.rtx_def** %x, i8* nocapture readonly %data) #0 {
entry:
  %from = bitcast i8* %data to %struct.rtx_def**
  %0 = load %struct.rtx_def** %from, align 8, !tbaa !34
  %to = getelementptr inbounds i8* %data, i64 8
  %1 = bitcast i8* %to to %struct.rtx_def**
  %2 = load %struct.rtx_def** %1, align 8, !tbaa !36
  %insn = getelementptr inbounds i8* %data, i64 16
  %3 = bitcast i8* %insn to %struct.rtx_def**
  %4 = load %struct.rtx_def** %3, align 8, !tbaa !37
  tail call fastcc void @validate_replace_rtx_1(%struct.rtx_def** %x, %struct.rtx_def* %0, %struct.rtx_def* %2, %struct.rtx_def* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def** @find_single_use(%struct.rtx_def* %dest, %struct.rtx_def* %insn, %struct.rtx_def** %ploc) #0 {
entry:
  %0 = load i32* @reload_completed, align 4, !tbaa !1
  %1 = load i32* @reload_in_progress, align 4
  %2 = or i32 %1, %0
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %lor.lhs.false2, label %return

lor.lhs.false2:                                   ; preds = %entry
  %4 = getelementptr inbounds %struct.rtx_def* %dest, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false2
  %call = tail call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %insn) #4
  %cmp362 = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp362, label %return, label %land.rhs

land.rhs:                                         ; preds = %if.end, %for.inc39
  %next.063 = phi %struct.rtx_def* [ %call40, %for.inc39 ], [ %call, %if.end ]
  %5 = getelementptr inbounds %struct.rtx_def* %next.063, i64 0, i32 0
  %bf.load4 = load i32* %5, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 36
  br i1 %cmp6, label %return, label %for.body

for.body:                                         ; preds = %land.rhs
  %idxprom56 = zext i32 %bf.clear5 to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom56
  %6 = load i8* %arrayidx, align 1, !tbaa !7
  %cmp9 = icmp eq i8 %6, 105
  br i1 %cmp9, label %land.lhs.true, label %for.inc39

land.lhs.true:                                    ; preds = %for.body
  %call11 = tail call i32 @dead_or_set_p(%struct.rtx_def* %next.063, %struct.rtx_def* %dest) #4
  %tobool12 = icmp eq i32 %call11, 0
  br i1 %tobool12, label %for.inc39, label %if.then13

if.then13:                                        ; preds = %land.lhs.true
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %next.063, i64 0, i32 1, i64 5
  %link.0.in58 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %link.059 = load %struct.rtx_def** %link.0.in58, align 8
  %tobool1660 = icmp eq %struct.rtx_def* %link.059, null
  br i1 %tobool1660, label %for.inc39, label %for.body17

for.cond15:                                       ; preds = %for.body17
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %link.061, i64 0, i32 1, i64 1
  %link.0.in = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %link.0.in, align 8
  %tobool16 = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool16, label %for.inc39, label %for.body17

for.body17:                                       ; preds = %if.then13, %for.cond15
  %link.061 = phi %struct.rtx_def* [ %link.0, %for.cond15 ], [ %link.059, %if.then13 ]
  %fld18 = getelementptr inbounds %struct.rtx_def* %link.061, i64 0, i32 1
  %rtx20 = bitcast [1 x %union.rtunion_def]* %fld18 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx20, align 8, !tbaa !5
  %cmp21 = icmp eq %struct.rtx_def* %7, %insn
  br i1 %cmp21, label %if.then29, label %for.cond15

if.then29:                                        ; preds = %for.body17
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %next.063, i64 0, i32 1, i64 3
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %call33 = tail call fastcc %struct.rtx_def** @find_single_use_1(%struct.rtx_def* %dest, %struct.rtx_def** %rtx32)
  %tobool34 = icmp eq %struct.rtx_def** %ploc, null
  br i1 %tobool34, label %return, label %if.then35

if.then35:                                        ; preds = %if.then29
  store %struct.rtx_def* %next.063, %struct.rtx_def** %ploc, align 8, !tbaa !5
  br label %return

for.inc39:                                        ; preds = %for.cond15, %if.then13, %land.lhs.true, %for.body
  %call40 = tail call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %next.063) #4
  %cmp3 = icmp eq %struct.rtx_def* %call40, null
  br i1 %cmp3, label %return, label %land.rhs

return:                                           ; preds = %land.rhs, %for.inc39, %if.end, %if.then35, %if.then29, %entry, %lor.lhs.false2
  %retval.0 = phi %struct.rtx_def** [ null, %lor.lhs.false2 ], [ null, %entry ], [ %call33, %if.then29 ], [ %call33, %if.then35 ], [ null, %if.end ], [ null, %for.inc39 ], [ null, %land.rhs ]
  ret %struct.rtx_def** %retval.0
}

declare %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #1

declare i32 @dead_or_set_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define internal fastcc %struct.rtx_def** @find_single_use_1(%struct.rtx_def* readonly %dest, %struct.rtx_def** readonly %loc) #2 {
entry:
  %0 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %0, 23
  %1 = and i32 %and, 4
  %2 = add i32 %1, 4
  %sub269 = or i32 %1, 3
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.backedge, %entry
  %loc.tr = phi %struct.rtx_def** [ %loc, %entry ], [ %loc.tr.be, %tailrecurse.backedge ]
  %3 = load %struct.rtx_def** %loc.tr, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 54, label %return
    i32 58, label %return
    i32 67, label %return
    i32 68, label %return
    i32 55, label %return
    i32 56, label %return
    i32 49, label %return
    i32 47, label %sw.bb1
    i32 66, label %sw.bb70
    i32 63, label %sw.bb70
  ]

sw.bb1:                                           ; preds = %tailrecurse
  %fld = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load2 = load i32* %6, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  switch i32 %bf.clear3, label %sw.epilog [
    i32 69, label %if.end
    i32 59, label %if.end
    i32 61, label %if.end
    i32 63, label %land.lhs.true24
  ]

land.lhs.true24:                                  ; preds = %sw.bb1
  %arrayidx29 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx30, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load31 = load i32* %8, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 61
  br i1 %cmp33, label %land.lhs.true34, label %sw.epilog

land.lhs.true34:                                  ; preds = %land.lhs.true24
  %bf.lshr = lshr i32 %bf.load31, 16
  %bf.clear42 = and i32 %bf.lshr, 255
  %idxprom268 = zext i32 %bf.clear42 to i64
  %arrayidx43 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom268
  %9 = load i8* %arrayidx43, align 1, !tbaa !7
  %conv = zext i8 %9 to i32
  %add = add nsw i32 %sub269, %conv
  %div = sdiv i32 %add, %2
  %bf.lshr51 = lshr i32 %bf.load2, 16
  %bf.clear52 = and i32 %bf.lshr51, 255
  %idxprom53270 = zext i32 %bf.clear52 to i64
  %arrayidx54 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom53270
  %10 = load i8* %arrayidx54, align 1, !tbaa !7
  %conv55 = zext i8 %10 to i32
  %add60 = add nsw i32 %conv55, %sub269
  %div64 = sdiv i32 %add60, %2
  %cmp65 = icmp eq i32 %div, %div64
  br i1 %cmp65, label %if.end, label %sw.epilog

if.end:                                           ; preds = %sw.bb1, %sw.bb1, %sw.bb1, %land.lhs.true34
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 1
  br label %tailrecurse.backedge

tailrecurse.backedge:                             ; preds = %if.end, %sw.bb70
  %loc.tr.be.in = phi %union.rtunion_def* [ %arrayidx68, %if.end ], [ %arrayidx72, %sw.bb70 ]
  %loc.tr.be = bitcast %union.rtunion_def* %loc.tr.be.in to %struct.rtx_def**
  br label %tailrecurse

sw.bb70:                                          ; preds = %tailrecurse, %tailrecurse
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  br label %tailrecurse.backedge

sw.epilog:                                        ; preds = %sw.bb1, %tailrecurse, %land.lhs.true24, %land.lhs.true34
  %bf.clear.lcssa = phi i32 [ 47, %sw.bb1 ], [ %bf.clear, %tailrecurse ], [ 47, %land.lhs.true24 ], [ 47, %land.lhs.true34 ]
  %idxprom75267 = zext i32 %bf.clear.lcssa to i64
  %arrayidx76 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom75267
  %11 = load i8** %arrayidx76, align 8, !tbaa !5
  %arrayidx78 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom75267
  %12 = load i8* %arrayidx78, align 1, !tbaa !7
  %cmp81285290 = icmp eq i8 %12, 0
  br i1 %cmp81285290, label %return, label %for.body.lr.ph.lr.ph

for.body.lr.ph.lr.ph:                             ; preds = %sw.epilog
  %conv79 = zext i8 %12 to i64
  %13 = getelementptr inbounds %struct.rtx_def* %dest, i64 0, i32 0
  %arrayidx110 = getelementptr inbounds %struct.rtx_def* %dest, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx110 to i32*
  br label %for.body.lr.ph

for.cond.outer.backedge:                          ; preds = %if.end126, %for.cond146
  %result.0.ph.be = phi %struct.rtx_def** [ %result.1.ph, %for.cond146 ], [ %this_result.0, %if.end126 ]
  %i.0286297 = trunc i64 %indvars.iv.next to i32
  %cmp81285 = icmp sgt i32 %i.0286297, 0
  br i1 %cmp81285, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %for.body.lr.ph.lr.ph, %for.cond.outer.backedge
  %i.0284292.in = phi i64 [ %conv79, %for.body.lr.ph.lr.ph ], [ %indvars.iv.next, %for.cond.outer.backedge ]
  %result.0.ph291 = phi %struct.rtx_def** [ null, %for.body.lr.ph.lr.ph ], [ %result.0.ph.be, %for.cond.outer.backedge ]
  %cmp127 = icmp eq %struct.rtx_def** %result.0.ph291, null
  %sext = shl i64 %i.0284292.in, 32
  %14 = ashr exact i64 %sext, 32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv = phi i64 [ %14, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.backedge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx84 = getelementptr inbounds i8* %11, i64 %indvars.iv.next
  %15 = load i8* %arrayidx84, align 1, !tbaa !7
  switch i8 %15, label %for.cond.backedge [
    i8 101, label %if.then88
    i8 69, label %if.then141
  ]

for.cond.backedge:                                ; preds = %for.body, %if.else130
  %16 = trunc i64 %indvars.iv.next to i32
  %cmp81 = icmp sgt i32 %16, 0
  br i1 %cmp81, label %for.body, label %return

if.then88:                                        ; preds = %for.body
  %arrayidx91 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 %indvars.iv.next
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx92, align 8, !tbaa !5
  %cmp93 = icmp eq %struct.rtx_def* %17, %dest
  br i1 %cmp93, label %if.end126, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then88
  %bf.load95 = load i32* %13, align 8
  %bf.clear96 = and i32 %bf.load95, 65535
  %cmp97 = icmp eq i32 %bf.clear96, 61
  br i1 %cmp97, label %land.lhs.true99, label %if.else

land.lhs.true99:                                  ; preds = %lor.lhs.false
  %18 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 0
  %bf.load104 = load i32* %18, align 8
  %bf.clear105 = and i32 %bf.load104, 65535
  %cmp106 = icmp eq i32 %bf.clear105, 61
  br i1 %cmp106, label %land.lhs.true108, label %if.else

land.lhs.true108:                                 ; preds = %land.lhs.true99
  %19 = load i32* %rtuint, align 4, !tbaa !1
  %arrayidx116 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 1, i64 0
  %rtuint117 = bitcast %union.rtunion_def* %arrayidx116 to i32*
  %20 = load i32* %rtuint117, align 4, !tbaa !1
  %cmp118 = icmp eq i32 %19, %20
  br i1 %cmp118, label %if.end126, label %if.else

if.else:                                          ; preds = %land.lhs.true108, %land.lhs.true99, %lor.lhs.false
  %call125 = tail call fastcc %struct.rtx_def** @find_single_use_1(%struct.rtx_def* %dest, %struct.rtx_def** %rtx92)
  br label %if.end126

if.end126:                                        ; preds = %if.then88, %land.lhs.true108, %if.else
  %this_result.0 = phi %struct.rtx_def** [ %call125, %if.else ], [ %loc.tr, %land.lhs.true108 ], [ %loc.tr, %if.then88 ]
  br i1 %cmp127, label %for.cond.outer.backedge, label %if.else130

if.else130:                                       ; preds = %if.end126
  %tobool131 = icmp eq %struct.rtx_def** %this_result.0, null
  br i1 %tobool131, label %for.cond.backedge, label %return

if.then141:                                       ; preds = %for.body
  %arrayidx144 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 %indvars.iv.next
  %rtvec = bitcast %union.rtunion_def* %arrayidx144 to %struct.rtvec_def**
  %21 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %num_elem = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 0
  %22 = load i32* %num_elem, align 4, !tbaa !27
  br label %for.cond146.outer

for.cond146.outer.loopexit:                       ; preds = %if.end201
  %23 = trunc i64 %indvars.iv.next313 to i32
  br label %for.cond146.outer

for.cond146.outer:                                ; preds = %for.cond146.outer.loopexit, %if.then141
  %result.1.ph = phi %struct.rtx_def** [ %result.0.ph291, %if.then141 ], [ %this_result.1, %for.cond146.outer.loopexit ]
  %j.0.in.ph = phi i32 [ %22, %if.then141 ], [ %23, %for.cond146.outer.loopexit ]
  %cmp202 = icmp eq %struct.rtx_def** %result.1.ph, null
  %24 = sext i32 %j.0.in.ph to i64
  br label %for.cond146

for.cond146:                                      ; preds = %for.cond146.outer, %if.else205
  %indvars.iv312 = phi i64 [ %24, %for.cond146.outer ], [ %indvars.iv.next313, %if.else205 ]
  %indvars.iv.next313 = add nsw i64 %indvars.iv312, -1
  %25 = trunc i64 %indvars.iv312 to i32
  %cmp147 = icmp sgt i32 %25, 0
  br i1 %cmp147, label %for.body149, label %for.cond.outer.backedge

for.body149:                                      ; preds = %for.cond146
  %arrayidx155 = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 1, i64 %indvars.iv.next313
  %26 = load %struct.rtx_def** %arrayidx155, align 8, !tbaa !5
  %cmp156 = icmp eq %struct.rtx_def* %26, %dest
  br i1 %cmp156, label %if.end201, label %lor.lhs.false158

lor.lhs.false158:                                 ; preds = %for.body149
  %bf.load159 = load i32* %13, align 8
  %bf.clear160 = and i32 %bf.load159, 65535
  %cmp161 = icmp eq i32 %bf.clear160, 61
  br i1 %cmp161, label %land.lhs.true163, label %if.else192

land.lhs.true163:                                 ; preds = %lor.lhs.false158
  %27 = getelementptr inbounds %struct.rtx_def* %26, i64 0, i32 0
  %bf.load171 = load i32* %27, align 8
  %bf.clear172 = and i32 %bf.load171, 65535
  %cmp173 = icmp eq i32 %bf.clear172, 61
  br i1 %cmp173, label %land.lhs.true175, label %if.else192

land.lhs.true175:                                 ; preds = %land.lhs.true163
  %arrayidx184 = getelementptr inbounds %struct.rtx_def* %26, i64 0, i32 1, i64 0
  %rtuint185 = bitcast %union.rtunion_def* %arrayidx184 to i32*
  %28 = load i32* %rtuint185, align 4, !tbaa !1
  %29 = load i32* %rtuint, align 4, !tbaa !1
  %cmp189 = icmp eq i32 %28, %29
  br i1 %cmp189, label %if.end201, label %if.else192

if.else192:                                       ; preds = %land.lhs.true175, %land.lhs.true163, %lor.lhs.false158
  %call200 = tail call fastcc %struct.rtx_def** @find_single_use_1(%struct.rtx_def* %dest, %struct.rtx_def** %arrayidx155)
  br label %if.end201

if.end201:                                        ; preds = %for.body149, %land.lhs.true175, %if.else192
  %this_result.1 = phi %struct.rtx_def** [ %call200, %if.else192 ], [ %loc.tr, %land.lhs.true175 ], [ %loc.tr, %for.body149 ]
  br i1 %cmp202, label %for.cond146.outer.loopexit, label %if.else205

if.else205:                                       ; preds = %if.end201
  %tobool206 = icmp eq %struct.rtx_def** %this_result.1, null
  br i1 %tobool206, label %for.cond146, label %return

return:                                           ; preds = %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %for.cond.outer.backedge, %if.else130, %for.cond.backedge, %if.else205, %sw.epilog
  %retval.0 = phi %struct.rtx_def** [ null, %sw.epilog ], [ null, %if.else205 ], [ null, %if.else130 ], [ %result.0.ph291, %for.cond.backedge ], [ %result.0.ph.be, %for.cond.outer.backedge ], [ null, %tailrecurse ], [ null, %tailrecurse ], [ null, %tailrecurse ], [ null, %tailrecurse ], [ null, %tailrecurse ], [ null, %tailrecurse ], [ null, %tailrecurse ]
  ret %struct.rtx_def** %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @general_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %mode, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %mode.addr.0 = phi i32 [ %bf.clear2, %if.then ], [ %mode, %entry ]
  %bf.clear5 = and i32 %bf.load, 16711680
  %cmp6 = icmp eq i32 %bf.clear5, 0
  %cmp7 = icmp ne i32 %mode.addr.0, 0
  %or.cond = and i1 %cmp6, %cmp7
  br i1 %or.cond, label %land.lhs.true8, label %if.end15

land.lhs.true8:                                   ; preds = %if.end
  %idxprom = sext i32 %mode.addr.0 to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %1 = load i32* %arrayidx, align 4, !tbaa !7
  switch i32 %1, label %return [
    i32 1, label %if.end15
    i32 3, label %if.end15
  ]

if.end15:                                         ; preds = %land.lhs.true8, %land.lhs.true8, %if.end
  %cmp18 = icmp eq i32 %bf.clear, 54
  br i1 %cmp18, label %land.lhs.true19, label %if.end26

land.lhs.true19:                                  ; preds = %if.end15
  %rtwint = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0, i32 0
  %2 = load i64* %rtwint, align 8, !tbaa !25
  %call = tail call i64 @trunc_int_for_mode(i64 %2, i32 %mode.addr.0) #4
  %3 = load i64* %rtwint, align 8, !tbaa !25
  %cmp24 = icmp eq i64 %call, %3
  br i1 %cmp24, label %land.lhs.true19.if.end26_crit_edge, label %return

land.lhs.true19.if.end26_crit_edge:               ; preds = %land.lhs.true19
  %bf.load27.pre = load i32* %0, align 8
  br label %if.end26

if.end26:                                         ; preds = %land.lhs.true19.if.end26_crit_edge, %if.end15
  %bf.load71 = phi i32 [ %bf.load27.pre, %land.lhs.true19.if.end26_crit_edge ], [ %bf.load, %if.end15 ]
  %bf.clear28 = and i32 %bf.load71, 65535
  switch i32 %bf.clear28, label %if.end88 [
    i32 67, label %if.then57
    i32 68, label %if.then57
    i32 54, label %if.then57
    i32 55, label %if.then57
    i32 58, label %if.then57
    i32 134, label %if.then57
    i32 56, label %if.then57
    i32 140, label %if.then57
  ]

if.then57:                                        ; preds = %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26
  %bf.lshr59 = lshr i32 %bf.load71, 16
  %bf.clear60 = and i32 %bf.lshr59, 255
  %cmp61 = icmp eq i32 %bf.clear60, 0
  br i1 %cmp61, label %land.lhs.true69, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %if.then57
  %cmp66 = icmp eq i32 %bf.clear60, %mode.addr.0
  %cmp68 = icmp eq i32 %mode.addr.0, 0
  %or.cond203 = or i1 %cmp66, %cmp68
  br i1 %or.cond203, label %land.lhs.true69, label %return

land.lhs.true69:                                  ; preds = %lor.lhs.false62, %if.then57
  %4 = load i32* @flag_pic, align 4, !tbaa !1
  %tobool = icmp eq i32 %4, 0
  br i1 %tobool, label %land.rhs, label %lor.lhs.false70

lor.lhs.false70:                                  ; preds = %land.lhs.true69
  switch i32 %bf.clear28, label %land.rhs [
    i32 68, label %lor.lhs.false85
    i32 67, label %lor.lhs.false85
    i32 58, label %land.lhs.true82
  ]

land.lhs.true82:                                  ; preds = %lor.lhs.false70
  %call83 = tail call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %op) #4
  %tobool84 = icmp eq i32 %call83, 0
  br i1 %tobool84, label %land.rhs, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %lor.lhs.false70, %lor.lhs.false70, %land.lhs.true82
  %call86 = tail call i32 @legitimate_pic_address_disp_p(%struct.rtx_def* %op) #4
  %tobool87 = icmp eq i32 %call86, 0
  br i1 %tobool87, label %return, label %land.rhs

land.rhs:                                         ; preds = %lor.lhs.false70, %lor.lhs.false85, %land.lhs.true82, %land.lhs.true69
  br label %return

if.end88:                                         ; preds = %if.end26
  %bf.lshr90 = lshr i32 %bf.load71, 16
  %bf.clear91 = and i32 %bf.lshr90, 255
  %cmp92 = icmp eq i32 %bf.clear91, %mode.addr.0
  br i1 %cmp92, label %if.end94, label %return

if.end94:                                         ; preds = %if.end88
  %cmp95 = icmp eq i32 %bf.clear, 63
  br i1 %cmp95, label %if.then96, label %if.end154

if.then96:                                        ; preds = %if.end94
  %fld97 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld97 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load99 = load i32* %6, align 8
  %bf.clear100 = and i32 %bf.load99, 65535
  %cmp101 = icmp eq i32 %bf.clear100, 66
  br i1 %cmp101, label %land.lhs.true102, label %if.end114

land.lhs.true102:                                 ; preds = %if.then96
  %idxprom103 = sext i32 %mode.addr.0 to i64
  %arrayidx104 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom103
  %7 = load i8* %arrayidx104, align 1, !tbaa !7
  %bf.lshr106 = lshr i32 %bf.load99, 16
  %bf.clear107 = and i32 %bf.lshr106, 255
  %idxprom108254 = zext i32 %bf.clear107 to i64
  %arrayidx109 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom108254
  %8 = load i8* %arrayidx109, align 1, !tbaa !7
  %cmp111 = icmp ugt i8 %7, %8
  br i1 %cmp111, label %return, label %if.end114

if.end114:                                        ; preds = %land.lhs.true102, %if.then96
  %9 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool115 = icmp eq i32 %9, 0
  br i1 %tobool115, label %land.lhs.true116, label %if.end127

land.lhs.true116:                                 ; preds = %if.end114
  %arrayidx118 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx118 to i32*
  %10 = load i32* %rtuint, align 4, !tbaa !1
  %cmp119 = icmp eq i32 %10, 0
  %cmp101.not = xor i1 %cmp101, true
  %brmerge = or i1 %cmp119, %cmp101.not
  br i1 %brmerge, label %if.end127, label %return

if.end127:                                        ; preds = %land.lhs.true116, %if.end114
  %idxprom131252 = zext i32 %mode.addr.0 to i64
  %arrayidx132 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom131252
  %11 = load i32* %arrayidx132, align 4, !tbaa !7
  %cmp133 = icmp eq i32 %11, 2
  br i1 %cmp133, label %land.lhs.true135, label %if.end154

land.lhs.true135:                                 ; preds = %if.end127
  %arrayidx140 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom131252
  %12 = load i8* %arrayidx140, align 1, !tbaa !7
  %bf.lshr143 = lshr i32 %bf.load99, 16
  %bf.clear144 = and i32 %bf.lshr143, 255
  %idxprom145253 = zext i32 %bf.clear144 to i64
  %arrayidx146 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom145253
  %13 = load i8* %arrayidx146, align 1, !tbaa !7
  %cmp148 = icmp ugt i8 %12, %13
  br i1 %cmp148, label %return, label %if.end154

if.end154:                                        ; preds = %if.end127, %land.lhs.true135, %if.end94
  %bf.load191 = phi i32 [ %bf.load71, %if.end94 ], [ %bf.load99, %land.lhs.true135 ], [ %bf.load99, %if.end127 ]
  %code.0 = phi i32 [ %bf.clear, %if.end94 ], [ %bf.clear100, %land.lhs.true135 ], [ %bf.clear100, %if.end127 ]
  %op.addr.0 = phi %struct.rtx_def* [ %op, %if.end94 ], [ %5, %land.lhs.true135 ], [ %5, %if.end127 ]
  switch i32 %code.0, label %if.end202 [
    i32 61, label %if.then157
    i32 66, label %if.then173
    i32 70, label %return
  ]

if.then157:                                       ; preds = %if.end154
  %arrayidx159 = getelementptr inbounds %struct.rtx_def* %op.addr.0, i64 0, i32 1, i64 0
  %rtuint160 = bitcast %union.rtunion_def* %arrayidx159 to i32*
  %14 = load i32* %rtuint160, align 4, !tbaa !1
  %cmp161 = icmp ugt i32 %14, 52
  br i1 %cmp161, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then157
  %idxprom166 = zext i32 %14 to i64
  %arrayidx167 = getelementptr inbounds [53 x i32]* @regclass_map, i64 0, i64 %idxprom166
  %15 = load i32* %arrayidx167, align 4, !tbaa !7
  %cmp168 = icmp ne i32 %15, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then157
  %16 = phi i1 [ true, %if.then157 ], [ %cmp168, %lor.rhs ]
  %lor.ext = zext i1 %16 to i32
  br label %return

if.then173:                                       ; preds = %if.end154
  %arrayidx175 = getelementptr inbounds %struct.rtx_def* %op.addr.0, i64 0, i32 1, i64 0
  %rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx176, align 8, !tbaa !5
  %18 = load i32* @volatile_ok, align 4, !tbaa !1
  %tobool177 = icmp ne i32 %18, 0
  %bf.clear181 = and i32 %bf.load191, 134217728
  %tobool182 = icmp eq i32 %bf.clear181, 0
  %or.cond258 = or i1 %tobool177, %tobool182
  br i1 %or.cond258, label %if.end184, label %return

if.end184:                                        ; preds = %if.then173
  %19 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 0
  %bf.load185 = load i32* %19, align 8
  %bf.clear186 = and i32 %bf.load185, 65535
  %cmp187 = icmp eq i32 %bf.clear186, 70
  br i1 %cmp187, label %return, label %if.end190

if.end190:                                        ; preds = %if.end184
  %bf.lshr192 = lshr i32 %bf.load191, 16
  %bf.clear193 = and i32 %bf.lshr192, 255
  %call194 = tail call i32 @legitimate_address_p(i32 %bf.clear193, %struct.rtx_def* %17, i32 0) #4
  %tobool195 = icmp eq i32 %call194, 0
  br i1 %tobool195, label %if.end202, label %return

if.end202:                                        ; preds = %if.end190, %if.end154
  br label %return

return:                                           ; preds = %if.then173, %land.lhs.true116, %if.end190, %if.end154, %if.end184, %land.lhs.true135, %land.lhs.true102, %if.end88, %land.rhs, %lor.lhs.false62, %lor.lhs.false85, %land.lhs.true19, %land.lhs.true8, %if.end202, %lor.end
  %retval.0 = phi i32 [ %lor.ext, %lor.end ], [ 0, %if.end202 ], [ 0, %land.lhs.true8 ], [ 0, %land.lhs.true19 ], [ 0, %lor.lhs.false85 ], [ 1, %land.rhs ], [ 0, %lor.lhs.false62 ], [ 0, %if.end88 ], [ 0, %land.lhs.true102 ], [ 0, %land.lhs.true135 ], [ 1, %if.end184 ], [ 1, %if.end154 ], [ 1, %if.end190 ], [ 0, %land.lhs.true116 ], [ 0, %if.then173 ]
  ret i32 %retval.0
}

declare i64 @trunc_int_for_mode(i64, i32) #1

declare i32 @symbolic_reference_mentioned_p(%struct.rtx_def*) #1

declare i32 @legitimate_pic_address_disp_p(%struct.rtx_def*) #1

declare i32 @legitimate_address_p(i32, %struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define i32 @address_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load.i = load i32* %0, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 70
  br i1 %cmp.i, label %memory_address_p.exit, label %do.body.i

do.body.i:                                        ; preds = %entry
  %call.i = tail call i32 @legitimate_address_p(i32 %mode, %struct.rtx_def* %op, i32 0) #4
  %not.tobool.i = icmp ne i32 %call.i, 0
  %..i = zext i1 %not.tobool.i to i32
  br label %memory_address_p.exit

memory_address_p.exit:                            ; preds = %entry, %do.body.i
  %retval.0.i = phi i32 [ 1, %entry ], [ %..i, %do.body.i ]
  ret i32 %retval.0.i
}

; Function Attrs: nounwind uwtable
define i32 @register_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp ne i32 %bf.clear, %mode
  %cmp1 = icmp ne i32 %mode, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %bf.clear3 = and i32 %bf.load, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 63
  br i1 %cmp4, label %if.then5, label %if.end33

if.then5:                                         ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %2 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %land.lhs.true6, label %if.end11

land.lhs.true6:                                   ; preds = %if.then5
  %3 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load7 = load i32* %3, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 66
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %land.lhs.true6
  %call = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode)
  br label %return

if.end11:                                         ; preds = %if.then5, %land.lhs.true6
  %idxprom68 = zext i32 %bf.clear to i64
  %arrayidx15 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom68
  %4 = load i32* %arrayidx15, align 4, !tbaa !7
  %cmp16 = icmp eq i32 %4, 2
  br i1 %cmp16, label %land.lhs.true17, label %if.end11.if.end33_crit_edge

if.end11.if.end33_crit_edge:                      ; preds = %if.end11
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load34.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end33

land.lhs.true17:                                  ; preds = %if.end11
  %arrayidx22 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom68
  %5 = load i8* %arrayidx22, align 1, !tbaa !7
  %6 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load23 = load i32* %6, align 8
  %bf.lshr24 = lshr i32 %bf.load23, 16
  %bf.clear25 = and i32 %bf.lshr24, 255
  %idxprom2669 = zext i32 %bf.clear25 to i64
  %arrayidx27 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom2669
  %7 = load i8* %arrayidx27, align 1, !tbaa !7
  %cmp29 = icmp ugt i8 %5, %7
  br i1 %cmp29, label %return, label %if.end33

if.end33:                                         ; preds = %if.end11.if.end33_crit_edge, %land.lhs.true17, %if.end
  %bf.load34 = phi i32 [ %bf.load, %if.end ], [ %bf.load23, %land.lhs.true17 ], [ %bf.load34.pre, %if.end11.if.end33_crit_edge ]
  %op.addr.0 = phi %struct.rtx_def* [ %op, %if.end ], [ %1, %land.lhs.true17 ], [ %1, %if.end11.if.end33_crit_edge ]
  %bf.clear35 = and i32 %bf.load34, 65535
  switch i32 %bf.clear35, label %land.end [
    i32 70, label %return
    i32 61, label %land.rhs
  ]

land.rhs:                                         ; preds = %if.end33
  %arrayidx45 = getelementptr inbounds %struct.rtx_def* %op.addr.0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx45 to i32*
  %8 = load i32* %rtuint, align 4, !tbaa !1
  %cmp46 = icmp ugt i32 %8, 52
  br i1 %cmp46, label %land.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %idxprom51 = zext i32 %8 to i64
  %arrayidx52 = getelementptr inbounds [53 x i32]* @regclass_map, i64 0, i64 %idxprom51
  %9 = load i32* %arrayidx52, align 4, !tbaa !7
  %cmp53 = icmp ne i32 %9, 0
  br label %land.end

land.end:                                         ; preds = %if.end33, %land.rhs, %lor.rhs
  %10 = phi i1 [ true, %land.rhs ], [ %cmp53, %lor.rhs ], [ false, %if.end33 ]
  %land.ext = zext i1 %10 to i32
  br label %return

return:                                           ; preds = %if.end33, %land.lhs.true17, %entry, %land.end, %if.then10
  %retval.0 = phi i32 [ %land.ext, %land.end ], [ %call, %if.then10 ], [ 0, %entry ], [ 0, %land.lhs.true17 ], [ 1, %if.end33 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @pmode_register_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %0 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %0, 25
  %1 = and i32 %and, 1
  %2 = or i32 %1, 4
  %3 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load.i = load i32* %3, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, %2
  br i1 %cmp.i, label %if.end.i, label %register_operand.exit

if.end.i:                                         ; preds = %entry
  %bf.clear3.i = and i32 %bf.load.i, 65535
  %cmp4.i = icmp eq i32 %bf.clear3.i, 63
  br i1 %cmp4.i, label %if.then5.i, label %if.end33.i

if.then5.i:                                       ; preds = %if.end.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !5
  %5 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %5, 0
  br i1 %tobool.i, label %land.lhs.true6.i, label %if.end11.i

land.lhs.true6.i:                                 ; preds = %if.then5.i
  %6 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load7.i = load i32* %6, align 8
  %bf.clear8.i = and i32 %bf.load7.i, 65535
  %cmp9.i = icmp eq i32 %bf.clear8.i, 66
  br i1 %cmp9.i, label %if.then10.i, label %if.end11.i

if.then10.i:                                      ; preds = %land.lhs.true6.i
  %call.i = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %2) #4
  br label %register_operand.exit

if.end11.i:                                       ; preds = %land.lhs.true6.i, %if.then5.i
  %idxprom68.i = zext i32 %2 to i64
  %arrayidx15.i = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom68.i
  %7 = load i32* %arrayidx15.i, align 4, !tbaa !7
  %cmp16.i = icmp eq i32 %7, 2
  br i1 %cmp16.i, label %land.lhs.true17.i, label %if.end11.if.end33_crit_edge.i

if.end11.if.end33_crit_edge.i:                    ; preds = %if.end11.i
  %.phi.trans.insert.i = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load34.pre.i = load i32* %.phi.trans.insert.i, align 8
  br label %if.end33.i

land.lhs.true17.i:                                ; preds = %if.end11.i
  %arrayidx22.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom68.i
  %8 = load i8* %arrayidx22.i, align 1, !tbaa !7
  %9 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load23.i = load i32* %9, align 8
  %bf.lshr24.i = lshr i32 %bf.load23.i, 16
  %bf.clear25.i = and i32 %bf.lshr24.i, 255
  %idxprom2669.i = zext i32 %bf.clear25.i to i64
  %arrayidx27.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom2669.i
  %10 = load i8* %arrayidx27.i, align 1, !tbaa !7
  %cmp29.i = icmp ugt i8 %8, %10
  br i1 %cmp29.i, label %register_operand.exit, label %if.end33.i

if.end33.i:                                       ; preds = %land.lhs.true17.i, %if.end11.if.end33_crit_edge.i, %if.end.i
  %bf.load34.i = phi i32 [ %bf.load.i, %if.end.i ], [ %bf.load23.i, %land.lhs.true17.i ], [ %bf.load34.pre.i, %if.end11.if.end33_crit_edge.i ]
  %op.addr.0.i = phi %struct.rtx_def* [ %op, %if.end.i ], [ %4, %land.lhs.true17.i ], [ %4, %if.end11.if.end33_crit_edge.i ]
  %bf.clear35.i = and i32 %bf.load34.i, 65535
  switch i32 %bf.clear35.i, label %land.end.i [
    i32 70, label %register_operand.exit
    i32 61, label %land.rhs.i
  ]

land.rhs.i:                                       ; preds = %if.end33.i
  %arrayidx45.i = getelementptr inbounds %struct.rtx_def* %op.addr.0.i, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx45.i to i32*
  %11 = load i32* %rtuint.i, align 4, !tbaa !1
  %cmp46.i = icmp ugt i32 %11, 52
  br i1 %cmp46.i, label %land.end.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %land.rhs.i
  %idxprom51.i = zext i32 %11 to i64
  %arrayidx52.i = getelementptr inbounds [53 x i32]* @regclass_map, i64 0, i64 %idxprom51.i
  %12 = load i32* %arrayidx52.i, align 4, !tbaa !7
  %cmp53.i = icmp ne i32 %12, 0
  br label %land.end.i

land.end.i:                                       ; preds = %lor.rhs.i, %land.rhs.i, %if.end33.i
  %13 = phi i1 [ true, %land.rhs.i ], [ %cmp53.i, %lor.rhs.i ], [ false, %if.end33.i ]
  %land.ext.i = zext i1 %13 to i32
  br label %register_operand.exit

register_operand.exit:                            ; preds = %entry, %if.then10.i, %land.lhs.true17.i, %if.end33.i, %land.end.i
  %retval.0.i = phi i32 [ %land.ext.i, %land.end.i ], [ %call.i, %if.then10.i ], [ 0, %entry ], [ 0, %land.lhs.true17.i ], [ 1, %if.end33.i ]
  ret i32 %retval.0.i
}

; Function Attrs: nounwind readonly uwtable
define i32 @scratch_operand(%struct.rtx_def* nocapture readonly %op, i32 %mode) #2 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp ne i32 %bf.clear, %mode
  %cmp1 = icmp ne i32 %mode, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %bf.clear3 = and i32 %bf.load, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 62
  br i1 %cmp4, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %cmp7 = icmp eq i32 %bf.clear3, 61
  br i1 %cmp7, label %land.rhs, label %lor.end

land.rhs:                                         ; preds = %lor.rhs
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !1
  %cmp8 = icmp ult i32 %1, 53
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %if.end
  %2 = phi i1 [ true, %if.end ], [ false, %lor.rhs ], [ %cmp8, %land.rhs ]
  %lor.ext = zext i1 %2 to i32
  br label %return

return:                                           ; preds = %entry, %lor.end
  %retval.0 = phi i32 [ %lor.ext, %lor.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @immediate_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 16711680
  %cmp = icmp eq i32 %bf.clear, 0
  %cmp1 = icmp ne i32 %mode, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %entry
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %1 = load i32* %arrayidx, align 4, !tbaa !7
  switch i32 %1, label %return [
    i32 1, label %if.end
    i32 3, label %if.end
  ]

if.end:                                           ; preds = %land.lhs.true2, %land.lhs.true2, %entry
  %bf.clear9 = and i32 %bf.load, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 54
  br i1 %cmp10, label %land.lhs.true11, label %if.end18

land.lhs.true11:                                  ; preds = %if.end
  %rtwint = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0, i32 0
  %2 = load i64* %rtwint, align 8, !tbaa !25
  %call = tail call i64 @trunc_int_for_mode(i64 %2, i32 %mode) #4
  %3 = load i64* %rtwint, align 8, !tbaa !25
  %cmp16 = icmp eq i64 %call, %3
  br i1 %cmp16, label %land.lhs.true11.if.end18_crit_edge, label %return

land.lhs.true11.if.end18_crit_edge:               ; preds = %land.lhs.true11
  %bf.load19.pre = load i32* %0, align 8
  br label %if.end18

if.end18:                                         ; preds = %land.lhs.true11.if.end18_crit_edge, %if.end
  %bf.load55 = phi i32 [ %bf.load19.pre, %land.lhs.true11.if.end18_crit_edge ], [ %bf.load, %if.end ]
  %bf.clear20 = and i32 %bf.load55, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 140
  br i1 %cmp21, label %return, label %if.end23

if.end23:                                         ; preds = %if.end18
  switch i32 %bf.clear20, label %return [
    i32 67, label %land.lhs.true54
    i32 68, label %land.lhs.true54
    i32 54, label %land.lhs.true54
    i32 55, label %land.lhs.true54
    i32 58, label %land.lhs.true54
    i32 134, label %land.lhs.true54
    i32 56, label %land.lhs.true54
  ]

land.lhs.true54:                                  ; preds = %if.end23, %if.end23, %if.end23, %if.end23, %if.end23, %if.end23, %if.end23
  %bf.lshr56 = lshr i32 %bf.load55, 16
  %bf.clear57 = and i32 %bf.lshr56, 255
  %cmp58 = icmp eq i32 %bf.clear57, %mode
  %cmp60 = icmp eq i32 %mode, 0
  %or.cond85 = or i1 %cmp58, %cmp60
  %cmp65 = icmp eq i32 %bf.clear57, 0
  %or.cond110 = or i1 %or.cond85, %cmp65
  br i1 %or.cond110, label %land.lhs.true66, label %return

land.lhs.true66:                                  ; preds = %land.lhs.true54
  %4 = load i32* @flag_pic, align 4, !tbaa !1
  %tobool = icmp eq i32 %4, 0
  br i1 %tobool, label %land.rhs, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %land.lhs.true66
  switch i32 %bf.clear20, label %land.rhs [
    i32 68, label %lor.lhs.false82
    i32 67, label %lor.lhs.false82
    i32 58, label %land.lhs.true79
  ]

land.lhs.true79:                                  ; preds = %lor.lhs.false67
  %call80 = tail call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %op) #4
  %tobool81 = icmp eq i32 %call80, 0
  br i1 %tobool81, label %land.rhs, label %lor.lhs.false82

lor.lhs.false82:                                  ; preds = %lor.lhs.false67, %lor.lhs.false67, %land.lhs.true79
  %call83 = tail call i32 @legitimate_pic_address_disp_p(%struct.rtx_def* %op) #4
  %tobool84 = icmp eq i32 %call83, 0
  br i1 %tobool84, label %return, label %land.rhs

land.rhs:                                         ; preds = %lor.lhs.false67, %lor.lhs.false82, %land.lhs.true79, %land.lhs.true66
  br label %return

return:                                           ; preds = %if.end23, %land.rhs, %lor.lhs.false82, %land.lhs.true54, %if.end18, %land.lhs.true11, %land.lhs.true2
  %retval.0 = phi i32 [ 0, %land.lhs.true2 ], [ 0, %land.lhs.true11 ], [ 1, %if.end18 ], [ 0, %lor.lhs.false82 ], [ 1, %land.rhs ], [ 0, %land.lhs.true54 ], [ 0, %if.end23 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @const_int_operand(%struct.rtx_def* nocapture readonly %op, i32 %mode) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %mode, 0
  br i1 %cmp1, label %if.end7, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %rtwint = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0, i32 0
  %1 = load i64* %rtwint, align 8, !tbaa !25
  %call = tail call i64 @trunc_int_for_mode(i64 %1, i32 %mode) #4
  %2 = load i64* %rtwint, align 8, !tbaa !25
  %cmp5 = icmp eq i64 %call, %2
  br i1 %cmp5, label %if.end7, label %return

if.end7:                                          ; preds = %land.lhs.true, %if.end
  br label %return

return:                                           ; preds = %land.lhs.true, %entry, %if.end7
  %retval.0 = phi i32 [ 1, %if.end7 ], [ 0, %entry ], [ 0, %land.lhs.true ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @const_double_operand(%struct.rtx_def* nocapture readonly %op, i32 %mode) #2 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 16711680
  %cmp = icmp eq i32 %bf.clear, 0
  %cmp1 = icmp ne i32 %mode, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %entry
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %1 = load i32* %arrayidx, align 4, !tbaa !7
  switch i32 %1, label %return [
    i32 1, label %if.end
    i32 3, label %if.end
  ]

if.end:                                           ; preds = %land.lhs.true2, %land.lhs.true2, %entry
  %2 = and i32 %bf.load, 65534
  %switch = icmp eq i32 %2, 54
  br i1 %switch, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %cmp14 = icmp eq i32 %mode, 0
  br i1 %cmp14, label %land.end, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %land.rhs
  %bf.lshr17 = lshr i32 %bf.load, 16
  %bf.clear18 = and i32 %bf.lshr17, 255
  %cmp19 = icmp eq i32 %bf.clear18, %mode
  %cmp23 = icmp eq i32 %bf.clear18, 0
  %.cmp23 = or i1 %cmp19, %cmp23
  br label %land.end

land.end:                                         ; preds = %lor.lhs.false15, %if.end, %land.rhs
  %3 = phi i1 [ true, %land.rhs ], [ false, %if.end ], [ %.cmp23, %lor.lhs.false15 ]
  %land.ext = zext i1 %3 to i32
  br label %return

return:                                           ; preds = %land.lhs.true2, %land.end
  %retval.0 = phi i32 [ %land.ext, %land.end ], [ 0, %land.lhs.true2 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @nonimmediate_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %call = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %lor.rhs [
    i32 67, label %land.end
    i32 68, label %land.end
    i32 54, label %land.end
    i32 55, label %land.end
    i32 58, label %land.end
    i32 134, label %land.end
    i32 56, label %land.end
    i32 140, label %land.end
  ]

lor.rhs:                                          ; preds = %land.rhs
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %entry
  %1 = phi i32 [ 0, %entry ], [ 0, %land.rhs ], [ 1, %lor.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ]
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define i32 @nonmemory_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.end80 [
    i32 67, label %if.then
    i32 68, label %if.then
    i32 54, label %if.then
    i32 55, label %if.then
    i32 58, label %if.then
    i32 134, label %if.then
    i32 56, label %if.then
    i32 140, label %if.then
  ]

if.then:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %bf.clear29 = and i32 %bf.load, 16711680
  %cmp30 = icmp eq i32 %bf.clear29, 0
  %cmp31 = icmp ne i32 %mode, 0
  %or.cond = and i1 %cmp30, %cmp31
  br i1 %or.cond, label %land.lhs.true32, label %if.end

land.lhs.true32:                                  ; preds = %if.then
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %1 = load i32* %arrayidx, align 4, !tbaa !7
  switch i32 %1, label %return [
    i32 1, label %if.end
    i32 3, label %if.end
  ]

if.end:                                           ; preds = %land.lhs.true32, %land.lhs.true32, %if.then
  %cmp41 = icmp eq i32 %bf.clear, 54
  br i1 %cmp41, label %land.lhs.true42, label %if.end49

land.lhs.true42:                                  ; preds = %if.end
  %rtwint = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0, i32 0
  %2 = load i64* %rtwint, align 8, !tbaa !25
  %call = tail call i64 @trunc_int_for_mode(i64 %2, i32 %mode) #4
  %3 = load i64* %rtwint, align 8, !tbaa !25
  %cmp47 = icmp eq i64 %call, %3
  br i1 %cmp47, label %land.lhs.true42.if.end49_crit_edge, label %return

land.lhs.true42.if.end49_crit_edge:               ; preds = %land.lhs.true42
  %bf.load50.pre = load i32* %0, align 8
  br label %if.end49

if.end49:                                         ; preds = %land.lhs.true42.if.end49_crit_edge, %if.end
  %bf.load63 = phi i32 [ %bf.load50.pre, %land.lhs.true42.if.end49_crit_edge ], [ %bf.load, %if.end ]
  %bf.lshr51 = lshr i32 %bf.load63, 16
  %bf.clear52 = and i32 %bf.lshr51, 255
  %cmp53 = icmp eq i32 %bf.clear52, 0
  br i1 %cmp53, label %land.lhs.true61, label %lor.lhs.false54

lor.lhs.false54:                                  ; preds = %if.end49
  %cmp58 = icmp eq i32 %bf.clear52, %mode
  %cmp60 = icmp eq i32 %mode, 0
  %or.cond122 = or i1 %cmp58, %cmp60
  br i1 %or.cond122, label %land.lhs.true61, label %return

land.lhs.true61:                                  ; preds = %lor.lhs.false54, %if.end49
  %4 = load i32* @flag_pic, align 4, !tbaa !1
  %tobool = icmp eq i32 %4, 0
  br i1 %tobool, label %land.rhs, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %land.lhs.true61
  %bf.clear64 = and i32 %bf.load63, 65535
  switch i32 %bf.clear64, label %land.rhs [
    i32 68, label %lor.lhs.false77
    i32 67, label %lor.lhs.false77
    i32 58, label %land.lhs.true74
  ]

land.lhs.true74:                                  ; preds = %lor.lhs.false62
  %call75 = tail call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %op) #4
  %tobool76 = icmp eq i32 %call75, 0
  br i1 %tobool76, label %land.rhs, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %lor.lhs.false62, %lor.lhs.false62, %land.lhs.true74
  %call78 = tail call i32 @legitimate_pic_address_disp_p(%struct.rtx_def* %op) #4
  %tobool79 = icmp eq i32 %call78, 0
  br i1 %tobool79, label %return, label %land.rhs

land.rhs:                                         ; preds = %lor.lhs.false62, %lor.lhs.false77, %land.lhs.true74, %land.lhs.true61
  br label %return

if.end80:                                         ; preds = %entry
  %bf.lshr82 = lshr i32 %bf.load, 16
  %bf.clear83 = and i32 %bf.lshr82, 255
  %cmp84 = icmp ne i32 %bf.clear83, %mode
  %cmp86 = icmp ne i32 %mode, 0
  %or.cond123 = and i1 %cmp84, %cmp86
  br i1 %or.cond123, label %return, label %if.end88

if.end88:                                         ; preds = %if.end80
  %cmp91 = icmp eq i32 %bf.clear, 63
  br i1 %cmp91, label %if.then92, label %if.end106

if.then92:                                        ; preds = %if.end88
  %5 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool93 = icmp eq i32 %5, 0
  %arrayidx96 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load97 = load i32* %7, align 8
  %bf.clear98 = and i32 %bf.load97, 65535
  %cmp99 = icmp eq i32 %bf.clear98, 66
  %or.cond161 = and i1 %tobool93, %cmp99
  br i1 %or.cond161, label %if.then100, label %if.end106

if.then100:                                       ; preds = %if.then92
  %call101 = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode)
  br label %return

if.end106:                                        ; preds = %if.then92, %if.end88
  %bf.load107 = phi i32 [ %bf.load, %if.end88 ], [ %bf.load97, %if.then92 ]
  %op.addr.0 = phi %struct.rtx_def* [ %op, %if.end88 ], [ %6, %if.then92 ]
  %bf.clear108 = and i32 %bf.load107, 65535
  %cmp109 = icmp eq i32 %bf.clear108, 61
  br i1 %cmp109, label %land.rhs110, label %land.end120

land.rhs110:                                      ; preds = %if.end106
  %arrayidx112 = getelementptr inbounds %struct.rtx_def* %op.addr.0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx112 to i32*
  %8 = load i32* %rtuint, align 4, !tbaa !1
  %cmp113 = icmp ugt i32 %8, 52
  br i1 %cmp113, label %land.end120, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs110
  %idxprom117 = zext i32 %8 to i64
  %arrayidx118 = getelementptr inbounds [53 x i32]* @regclass_map, i64 0, i64 %idxprom117
  %9 = load i32* %arrayidx118, align 4, !tbaa !7
  %cmp119 = icmp ne i32 %9, 0
  br label %land.end120

land.end120:                                      ; preds = %land.rhs110, %lor.rhs, %if.end106
  %10 = phi i1 [ false, %if.end106 ], [ true, %land.rhs110 ], [ %cmp119, %lor.rhs ]
  %land.ext121 = zext i1 %10 to i32
  br label %return

return:                                           ; preds = %if.end80, %land.rhs, %lor.lhs.false54, %lor.lhs.false77, %land.lhs.true42, %land.lhs.true32, %land.end120, %if.then100
  %retval.0 = phi i32 [ %land.ext121, %land.end120 ], [ %call101, %if.then100 ], [ 0, %land.lhs.true32 ], [ 0, %land.lhs.true42 ], [ 0, %lor.lhs.false77 ], [ 1, %land.rhs ], [ 0, %lor.lhs.false54 ], [ 0, %if.end80 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @push_operand(%struct.rtx_def* nocapture readonly %op, i32 %mode) #2 {
entry:
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %0 = load i8* %arrayidx, align 1, !tbaa !7
  %conv = zext i8 %0 to i32
  %1 = load i32* @target_flags, align 4, !tbaa !1
  %and = and i32 %1, 33554432
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %add = add i32 %conv, 7
  %and1 = and i32 %add, 504
  br label %cond.end

cond.false:                                       ; preds = %entry
  %add2 = add i32 %conv, 1
  %and3 = and i32 %add2, 510
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and1, %cond.true ], [ %and3, %cond.false ]
  %2 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %cond.end
  %cmp5 = icmp eq i32 %mode, 0
  br i1 %cmp5, label %if.end12, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear8 = and i32 %bf.lshr, 255
  %cmp9 = icmp eq i32 %bf.clear8, %mode
  br i1 %cmp9, label %if.end12, label %return

if.end12:                                         ; preds = %land.lhs.true, %if.end
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %cmp17 = icmp eq i32 %cond, %conv
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load20 = load i32* %4, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  br i1 %cmp17, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.end12
  %cmp22 = icmp eq i32 %bf.clear21, 96
  br i1 %cmp22, label %if.then19.if.end74_crit_edge, label %return

if.then19.if.end74_crit_edge:                     ; preds = %if.then19
  %arrayidx76.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtx77.phi.trans.insert = bitcast %union.rtunion_def* %arrayidx76.phi.trans.insert to %struct.rtx_def**
  %.pre = load %struct.rtx_def** %rtx77.phi.trans.insert, align 8, !tbaa !5
  br label %if.end74

if.else:                                          ; preds = %if.end12
  %cmp28 = icmp eq i32 %bf.clear21, 100
  br i1 %cmp28, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %if.else
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 1
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx32, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load33 = load i32* %6, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  %cmp35 = icmp eq i32 %bf.clear34, 75
  br i1 %cmp35, label %lor.lhs.false37, label %return

lor.lhs.false37:                                  ; preds = %lor.lhs.false
  %fld41 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1
  %rtx43 = bitcast [1 x %union.rtunion_def]* %fld41 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx43, align 8, !tbaa !5
  %arrayidx45 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx46, align 8, !tbaa !5
  %cmp47 = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp47, label %lor.lhs.false49, label %return

lor.lhs.false49:                                  ; preds = %lor.lhs.false37
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 1
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx55, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load56 = load i32* %10, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  %cmp58 = icmp eq i32 %bf.clear57, 54
  br i1 %cmp58, label %lor.lhs.false60, label %return

lor.lhs.false60:                                  ; preds = %lor.lhs.false49
  %rtwint = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0, i32 0
  %11 = load i64* %rtwint, align 8, !tbaa !25
  %sub = sub nsw i32 0, %cond
  %conv69 = sext i32 %sub to i64
  %cmp70 = icmp eq i64 %11, %conv69
  br i1 %cmp70, label %if.end74, label %return

if.end74:                                         ; preds = %if.then19.if.end74_crit_edge, %lor.lhs.false60
  %12 = phi %struct.rtx_def* [ %.pre, %if.then19.if.end74_crit_edge ], [ %7, %lor.lhs.false60 ]
  %13 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !5
  %cmp78 = icmp eq %struct.rtx_def* %12, %13
  %conv79 = zext i1 %cmp78 to i32
  br label %return

return:                                           ; preds = %if.else, %lor.lhs.false, %lor.lhs.false37, %lor.lhs.false49, %lor.lhs.false60, %if.then19, %land.lhs.true, %cond.end, %if.end74
  %retval.0 = phi i32 [ %conv79, %if.end74 ], [ 0, %cond.end ], [ 0, %land.lhs.true ], [ 0, %if.then19 ], [ 0, %lor.lhs.false60 ], [ 0, %lor.lhs.false49 ], [ 0, %lor.lhs.false37 ], [ 0, %lor.lhs.false ], [ 0, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @pop_operand(%struct.rtx_def* nocapture readonly %op, i32 %mode) #2 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %mode, 0
  br i1 %cmp1, label %if.end6, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear3 = and i32 %bf.lshr, 255
  %cmp4 = icmp eq i32 %bf.clear3, %mode
  br i1 %cmp4, label %if.end6, label %return

if.end6:                                          ; preds = %land.lhs.true, %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load7 = load i32* %2, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 99
  br i1 %cmp9, label %if.end11, label %return

if.end11:                                         ; preds = %if.end6
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx14, align 8, !tbaa !5
  %4 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !5
  %cmp15 = icmp eq %struct.rtx_def* %3, %4
  %conv = zext i1 %cmp15 to i32
  br label %return

return:                                           ; preds = %if.end6, %land.lhs.true, %entry, %if.end11
  %retval.0 = phi i32 [ %conv, %if.end11 ], [ 0, %entry ], [ 0, %land.lhs.true ], [ 0, %if.end6 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @memory_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %0 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then
  %call = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %2 = phi i1 [ false, %if.then ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  br label %return

if.end:                                           ; preds = %entry
  %cmp2 = icmp eq i32 %mode, 0
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load8.pre = load i32* %.phi.trans.insert, align 8
  br i1 %cmp2, label %if.end7, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %bf.lshr = lshr i32 %bf.load8.pre, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  %cmp5 = icmp eq i32 %bf.clear4, %mode
  br i1 %cmp5, label %if.end7, label %return

if.end7:                                          ; preds = %if.end, %land.lhs.true
  %bf.clear9 = and i32 %bf.load8.pre, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 63
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end7
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %.phi.trans.insert31 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load13.pre = load i32* %.phi.trans.insert31, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end7
  %bf.load13 = phi i32 [ %bf.load13.pre, %if.then11 ], [ %bf.load8.pre, %if.end7 ]
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 66
  br i1 %cmp15, label %land.rhs16, label %land.end19

land.rhs16:                                       ; preds = %if.end12
  %call17 = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode)
  %tobool18 = icmp ne i32 %call17, 0
  br label %land.end19

land.end19:                                       ; preds = %land.rhs16, %if.end12
  %4 = phi i1 [ false, %if.end12 ], [ %tobool18, %land.rhs16 ]
  %land.ext20 = zext i1 %4 to i32
  br label %return

return:                                           ; preds = %land.lhs.true, %land.end19, %land.end
  %retval.0 = phi i32 [ %land.ext20, %land.end19 ], [ %land.ext, %land.end ], [ 0, %land.lhs.true ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @indirect_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %0 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool = icmp eq i32 %0, 0
  %1 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 63
  %or.cond = and i1 %tobool, %cmp
  br i1 %or.cond, label %land.lhs.true1, label %if.end61

land.lhs.true1:                                   ; preds = %entry
  %fld = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load2 = load i32* %3, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 66
  br i1 %cmp4, label %if.then, label %if.end61

if.then:                                          ; preds = %land.lhs.true1
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx6 to i32*
  %4 = load i32* %rtuint, align 4, !tbaa !1
  %cmp10 = icmp eq i32 %mode, 0
  br i1 %cmp10, label %if.end, label %land.lhs.true11

land.lhs.true11:                                  ; preds = %if.then
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear13 = and i32 %bf.lshr, 255
  %cmp14 = icmp eq i32 %bf.clear13, %mode
  br i1 %cmp14, label %if.end, label %return

if.end:                                           ; preds = %land.lhs.true11, %if.then
  %cmp16 = icmp eq i32 %4, 0
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  br i1 %cmp16, label %land.lhs.true17, label %lor.rhs

land.lhs.true17:                                  ; preds = %if.end
  %5 = load %struct.rtx_def** %rtx20, align 8, !tbaa !5
  %6 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %6, 25
  %7 = and i32 %and, 1
  %8 = or i32 %7, 4
  %call = tail call i32 @general_operand(%struct.rtx_def* %5, i32 %8)
  %tobool22 = icmp eq i32 %call, 0
  br i1 %tobool22, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end, %land.lhs.true17
  %9 = load %struct.rtx_def** %rtx20, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load26 = load i32* %10, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 75
  br i1 %cmp28, label %land.lhs.true29, label %lor.end

land.lhs.true29:                                  ; preds = %lor.rhs
  %arrayidx34 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 1
  %rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx35, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load36 = load i32* %12, align 8
  %bf.clear37 = and i32 %bf.load36, 65535
  %cmp38 = icmp eq i32 %bf.clear37, 54
  br i1 %cmp38, label %land.lhs.true39, label %lor.end

land.lhs.true39:                                  ; preds = %land.lhs.true29
  %rtwint = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 0, i32 0
  %13 = load i64* %rtwint, align 8, !tbaa !25
  %sub = sub nsw i32 0, %4
  %conv = sext i32 %sub to i64
  %cmp48 = icmp eq i64 %13, %conv
  br i1 %cmp48, label %land.rhs, label %lor.end

land.rhs:                                         ; preds = %land.lhs.true39
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx55, align 8, !tbaa !5
  %15 = load i32* @target_flags, align 4, !tbaa !1
  %and56 = lshr i32 %15, 25
  %16 = and i32 %and56, 1
  %17 = or i32 %16, 4
  %call59 = tail call i32 @general_operand(%struct.rtx_def* %14, i32 %17)
  %tobool60 = icmp ne i32 %call59, 0
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true17, %lor.rhs, %land.lhs.true29, %land.lhs.true39, %land.rhs
  %18 = phi i1 [ true, %land.lhs.true17 ], [ false, %land.lhs.true39 ], [ false, %land.lhs.true29 ], [ false, %lor.rhs ], [ %tobool60, %land.rhs ]
  %lor.ext = zext i1 %18 to i32
  br label %return

if.end61:                                         ; preds = %entry, %land.lhs.true1
  %bf.clear63 = and i32 %bf.load, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 66
  br i1 %cmp64, label %land.lhs.true66, label %land.end78

land.lhs.true66:                                  ; preds = %if.end61
  br i1 %tobool, label %land.end.i, label %if.end.i

land.end.i:                                       ; preds = %land.lhs.true66
  %call.i = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode) #4
  br label %memory_operand.exit

if.end.i:                                         ; preds = %land.lhs.true66
  %cmp2.i = icmp eq i32 %mode, 0
  br i1 %cmp2.i, label %land.rhs16.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.end.i
  %bf.lshr.i = lshr i32 %bf.load, 16
  %bf.clear4.i = and i32 %bf.lshr.i, 255
  %cmp5.i = icmp eq i32 %bf.clear4.i, %mode
  br i1 %cmp5.i, label %land.rhs16.i, label %land.end78

land.rhs16.i:                                     ; preds = %if.end.i, %land.lhs.true.i
  %call17.i = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode) #4
  br label %memory_operand.exit

memory_operand.exit:                              ; preds = %land.rhs16.i, %land.end.i
  %call.i.sink = phi i32 [ %call.i, %land.end.i ], [ %call17.i, %land.rhs16.i ]
  %tobool1.i = icmp eq i32 %call.i.sink, 0
  br i1 %tobool1.i, label %land.end78, label %land.rhs69

land.rhs69:                                       ; preds = %memory_operand.exit
  %arrayidx71 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx72, align 8, !tbaa !5
  %20 = load i32* @target_flags, align 4, !tbaa !1
  %and73 = lshr i32 %20, 25
  %21 = and i32 %and73, 1
  %22 = or i32 %21, 4
  %call76 = tail call i32 @general_operand(%struct.rtx_def* %19, i32 %22)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %memory_operand.exit, %land.lhs.true.i, %land.rhs69, %if.end61
  %23 = phi i1 [ false, %memory_operand.exit ], [ false, %if.end61 ], [ %tobool77, %land.rhs69 ], [ false, %land.lhs.true.i ]
  %land.ext = zext i1 %23 to i32
  br label %return

return:                                           ; preds = %land.lhs.true11, %land.end78, %lor.end
  %retval.0 = phi i32 [ %land.ext, %land.end78 ], [ %lor.ext, %lor.end ], [ 0, %land.lhs.true11 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @comparison_operator(%struct.rtx_def* nocapture readonly %op, i32 %mode) #2 {
entry:
  %cmp = icmp eq i32 %mode, 0
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load2.pre = load i32* %.phi.trans.insert, align 8
  br i1 %cmp, label %land.rhs, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %bf.lshr = lshr i32 %bf.load2.pre, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp1 = icmp eq i32 %bf.clear, %mode
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry, %lor.lhs.false
  %bf.clear3 = and i32 %bf.load2.pre, 65535
  %idxprom8 = zext i32 %bf.clear3 to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom8
  %0 = load i8* %arrayidx, align 1, !tbaa !7
  %cmp4 = icmp eq i8 %0, 60
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false
  %1 = phi i1 [ false, %lor.lhs.false ], [ %cmp4, %land.rhs ]
  %land.ext = zext i1 %1 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @offsettable_nonstrict_memref_p(%struct.rtx_def* nocapture readonly %op) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %call = tail call i32 @offsettable_address_p(i32 0, i32 %bf.clear2, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

declare i32 @standard_80387_constant_p(%struct.rtx_def*) #1

declare i32 @standard_sse_constant_p(%struct.rtx_def*) #1

declare i32 @x86_64_sign_extended_value(%struct.rtx_def*) #1

declare i32 @x86_64_zero_extended_value(%struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def** @find_constant_term_loc(%struct.rtx_def** readonly %p) #2 {
entry:
  %0 = load %struct.rtx_def** %p, align 8, !tbaa !5
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.then9 [
    i32 68, label %return
    i32 67, label %return
    i32 58, label %return
    i32 54, label %return
    i32 75, label %if.end10
  ]

if.then9:                                         ; preds = %entry
  br label %return

if.end10:                                         ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %tobool = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool, label %if.end140, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end10
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load14 = load i32* %3, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  switch i32 %bf.clear15, label %if.then133 [
    i32 67, label %land.lhs.true66
    i32 68, label %land.lhs.true66
    i32 54, label %land.lhs.true66
    i32 55, label %land.lhs.true66
    i32 58, label %land.lhs.true66
    i32 134, label %land.lhs.true66
    i32 56, label %land.lhs.true66
    i32 140, label %land.lhs.true66
  ]

land.lhs.true66:                                  ; preds = %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx69, align 8, !tbaa !5
  %tobool70 = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool70, label %if.end128, label %land.lhs.true71

land.lhs.true71:                                  ; preds = %land.lhs.true66
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load75 = load i32* %5, align 8
  %bf.clear76 = and i32 %bf.load75, 65535
  switch i32 %bf.clear76, label %if.end128 [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 55, label %return
    i32 58, label %return
    i32 134, label %return
    i32 56, label %return
    i32 140, label %return
  ]

if.end128:                                        ; preds = %land.lhs.true71, %land.lhs.true66
  br i1 %tobool, label %if.end140, label %if.then133

if.then133:                                       ; preds = %land.lhs.true, %if.end128
  %call = tail call %struct.rtx_def** @find_constant_term_loc(%struct.rtx_def** %rtx)
  %cmp137 = icmp eq %struct.rtx_def** %call, null
  br i1 %cmp137, label %if.end140, label %return

if.end140:                                        ; preds = %if.end10, %if.then133, %if.end128
  %arrayidx142 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx143 = bitcast %union.rtunion_def* %arrayidx142 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx143, align 8, !tbaa !5
  %cmp144 = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp144, label %if.end153, label %if.then145

if.then145:                                       ; preds = %if.end140
  %call149 = tail call %struct.rtx_def** @find_constant_term_loc(%struct.rtx_def** %rtx143)
  %cmp150 = icmp eq %struct.rtx_def** %call149, null
  br i1 %cmp150, label %if.end153, label %return

if.end153:                                        ; preds = %if.then145, %if.end140
  br label %return

return:                                           ; preds = %if.then145, %if.then133, %land.lhs.true71, %land.lhs.true71, %land.lhs.true71, %land.lhs.true71, %land.lhs.true71, %land.lhs.true71, %land.lhs.true71, %land.lhs.true71, %entry, %entry, %entry, %entry, %if.end153, %if.then9
  %retval.0 = phi %struct.rtx_def** [ null, %if.then9 ], [ null, %if.end153 ], [ %p, %entry ], [ %p, %entry ], [ %p, %entry ], [ %p, %entry ], [ %p, %land.lhs.true71 ], [ %p, %land.lhs.true71 ], [ %p, %land.lhs.true71 ], [ %p, %land.lhs.true71 ], [ %p, %land.lhs.true71 ], [ %p, %land.lhs.true71 ], [ %p, %land.lhs.true71 ], [ %p, %land.lhs.true71 ], [ %call, %if.then133 ], [ %call149, %if.then145 ]
  ret %struct.rtx_def** %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @offsettable_memref_p(%struct.rtx_def* nocapture readonly %op) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %call = tail call i32 @offsettable_address_p(i32 1, i32 %bf.clear2, %struct.rtx_def* %1)
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @offsettable_address_p(i32 %strictp, i32 %mode, %struct.rtx_def* %y) #0 {
entry:
  %y1 = alloca %struct.rtx_def*, align 8
  %0 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  store %struct.rtx_def* %y, %struct.rtx_def** %y1, align 8, !tbaa !5
  %tobool = icmp ne i32 %strictp, 0
  %cond = select i1 %tobool, i32 (i32, %struct.rtx_def*)* @strict_memory_address_p, i32 (i32, %struct.rtx_def*)* @memory_address_p
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %1 = load i8* %arrayidx, align 1, !tbaa !7
  %conv = zext i8 %1 to i32
  switch i32 %bf.clear, label %if.end [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 58, label %return
    i32 55, label %return
  ]

if.end:                                           ; preds = %entry
  %2 = and i32 %bf.load, 65534
  %switch.i = icmp eq i32 %2, 98
  br i1 %switch.i, label %return, label %if.end25

if.end25:                                         ; preds = %if.end
  %cmp26 = icmp eq i8 %1, 0
  %.conv = select i1 %cmp26, i32 16, i32 %conv
  %cmp30 = icmp eq i32 %bf.clear, 75
  br i1 %cmp30, label %land.lhs.true, label %if.end38

land.lhs.true:                                    ; preds = %if.end25
  %call32 = call %struct.rtx_def** @find_constant_term_loc(%struct.rtx_def** %y1)
  %tobool33 = icmp eq %struct.rtx_def** %call32, null
  br i1 %tobool33, label %if.end38, label %if.then34

if.then34:                                        ; preds = %land.lhs.true
  %3 = load %struct.rtx_def** %call32, align 8, !tbaa !5
  store %struct.rtx_def* %3, %struct.rtx_def** %y1, align 8, !tbaa !5
  %4 = load %struct.rtx_def** %call32, align 8, !tbaa !5
  %sub = add i32 %.conv, -1
  %conv35 = zext i32 %sub to i64
  %call36 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %4, i64 %conv35) #4
  store %struct.rtx_def* %call36, %struct.rtx_def** %call32, align 8, !tbaa !5
  %call37 = call i32 %cond(i32 2, %struct.rtx_def* %y) #4
  %5 = load %struct.rtx_def** %y1, align 8, !tbaa !5
  store %struct.rtx_def* %5, %struct.rtx_def** %call32, align 8, !tbaa !5
  br label %return

if.end38:                                         ; preds = %land.lhs.true, %if.end25
  %idxprom3997 = zext i32 %bf.clear to i64
  %arrayidx40 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom3997
  %6 = load i8* %arrayidx40, align 1, !tbaa !7
  %cmp42 = icmp eq i8 %6, 97
  br i1 %cmp42, label %return, label %if.end45

if.end45:                                         ; preds = %if.end38
  %cmp48 = icmp eq i32 %bf.clear, 135
  %cmp51 = icmp ne i32 %mode, 51
  %or.cond = and i1 %cmp48, %cmp51
  br i1 %or.cond, label %land.lhs.true53, label %if.else

land.lhs.true53:                                  ; preds = %if.end45
  %call54 = call i32 @get_mode_alignment(i32 %mode) #4
  %div = lshr i32 %call54, 3
  %cmp55 = icmp ugt i32 %.conv, %div
  br i1 %cmp55, label %if.else, label %if.then57

if.then57:                                        ; preds = %land.lhs.true53
  %bf.load58 = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load58, 16
  %bf.clear59 = and i32 %bf.lshr, 255
  %fld = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %arrayidx62 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 1
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx63, align 8, !tbaa !5
  %sub64 = add i32 %.conv, -1
  %conv65 = zext i32 %sub64 to i64
  %call66 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %8, i64 %conv65) #4
  %call67 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 135, i32 %bf.clear59, %struct.rtx_def* %7, %struct.rtx_def* %call66) #4
  br label %if.end71

if.else:                                          ; preds = %land.lhs.true53, %if.end45
  %sub68 = add i32 %.conv, -1
  %conv69 = zext i32 %sub68 to i64
  %call70 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %y, i64 %conv69) #4
  br label %if.end71

if.end71:                                         ; preds = %if.else, %if.then57
  %z.0 = phi %struct.rtx_def* [ %call67, %if.then57 ], [ %call70, %if.else ]
  %call72 = call i32 %cond(i32 2, %struct.rtx_def* %z.0) #4
  br label %return

return:                                           ; preds = %if.end, %if.end38, %entry, %entry, %entry, %entry, %entry, %if.end71, %if.then34
  %retval.0 = phi i32 [ %call37, %if.then34 ], [ %call72, %if.end71 ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 0, %if.end ], [ 0, %if.end38 ]
  ret i32 %retval.0
}

declare i32 @strict_memory_address_p(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define i32 @mode_dependent_address_p(%struct.rtx_def* nocapture readonly %addr) #2 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %addr, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %1 = and i32 %bf.load, 65534
  %switch = icmp eq i32 %1, 98
  %. = zext i1 %switch to i32
  ret i32 %.
}

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #1

declare i32 @get_mode_alignment(i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define i32 @mode_independent_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %call = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.end2, label %return

if.end2:                                          ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load3 = load i32* %2, align 8
  %3 = and i32 %bf.load3, 65534
  %not.switch = icmp ne i32 %3, 98
  %. = zext i1 %not.switch to i32
  ret i32 %.

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @extract_insn_cached(%struct.rtx_def* %insn) #0 {
entry:
  %0 = load %struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 10), align 8, !tbaa !10
  %cmp = icmp eq %struct.rtx_def* %0, %insn
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtint, align 4, !tbaa !1
  %cmp1 = icmp sgt i32 %1, -1
  br i1 %cmp1, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true, %entry
  tail call void @extract_insn(%struct.rtx_def* %insn)
  store %struct.rtx_def* %insn, %struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 10), align 8, !tbaa !10
  br label %return

return:                                           ; preds = %land.lhs.true, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @extract_constrain_insn_cached(%struct.rtx_def* %insn) #0 {
entry:
  %0 = load %struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 10), align 8, !tbaa !10
  %cmp.i = icmp eq %struct.rtx_def* %0, %insn
  br i1 %cmp.i, label %land.lhs.true.i, label %if.end.i

land.lhs.true.i:                                  ; preds = %entry
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %1 = load i32* %rtint.i, align 4, !tbaa !1
  %cmp1.i = icmp sgt i32 %1, -1
  br i1 %cmp1.i, label %extract_insn_cached.exit, label %if.end.i

if.end.i:                                         ; preds = %land.lhs.true.i, %entry
  tail call void @extract_insn(%struct.rtx_def* %insn) #4
  store %struct.rtx_def* %insn, %struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 10), align 8, !tbaa !10
  br label %extract_insn_cached.exit

extract_insn_cached.exit:                         ; preds = %land.lhs.true.i, %if.end.i
  %2 = load i32* @which_alternative, align 4, !tbaa !1
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %extract_insn_cached.exit
  %3 = load i32* @reload_completed, align 4, !tbaa !1
  %call = tail call i32 @constrain_operands(i32 %3)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  tail call void @_fatal_insn_not_found(%struct.rtx_def* %insn, i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2063, i8* getelementptr inbounds ([30 x i8]* @__FUNCTION__.extract_constrain_insn_cached, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %land.lhs.true, %extract_insn_cached.exit
  ret void
}

; Function Attrs: noreturn
declare void @_fatal_insn_not_found(%struct.rtx_def*, i8*, i32, i8*) #3

; Function Attrs: nounwind uwtable
define i32 @constrain_operands_cached(i32 %strict) #0 {
entry:
  %0 = load i32* @which_alternative, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, -1
  br i1 %cmp, label %if.then, label %return

if.then:                                          ; preds = %entry
  %call = tail call i32 @constrain_operands(i32 %strict)
  br label %return

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ 1, %entry ]
  ret i32 %retval.0
}

declare void @insn_extract(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @preprocess_constraints() #0 {
entry:
  %end = alloca i8*, align 8
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([30 x [30 x %struct.operand_alternative]]* @recog_op_alt to i8*), i8 0, i64 28800, i32 16, i1 false)
  %0 = load i32* bitcast (i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7) to i32*), align 4
  %1 = trunc i32 %0 to i8
  %cmp381 = icmp sgt i8 %1, 0
  br i1 %cmp381, label %for.body, label %for.end294

for.body:                                         ; preds = %entry, %for.inc292
  %.in.in = phi i32 [ %31, %for.inc292 ], [ %0, %entry ]
  %indvars.iv383 = phi i64 [ %indvars.iv.next384, %for.inc292 ], [ 0, %entry ]
  %.in = lshr i32 %.in.in, 16
  %2 = trunc i32 %.in to i8
  %cmp6377 = icmp sgt i8 %2, 0
  br i1 %cmp6377, label %for.body8.lr.ph, label %for.inc292

for.body8.lr.ph:                                  ; preds = %for.body
  %arrayidx = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 2, i64 %indvars.iv383
  %3 = load i8** %arrayidx, align 8, !tbaa !5
  br label %for.body8

for.body8:                                        ; preds = %for.body8.lr.ph, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body8.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %p.0379 = phi i8* [ %3, %for.body8.lr.ph ], [ %p.4, %for.inc ]
  %class = getelementptr inbounds [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %indvars.iv383, i64 %indvars.iv, i32 1
  store i32 0, i32* %class, align 8, !tbaa !38
  %constraint = getelementptr inbounds [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %indvars.iv383, i64 %indvars.iv, i32 0
  store i8* %p.0379, i8** %constraint, align 16, !tbaa !40
  %matches = getelementptr inbounds [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %indvars.iv383, i64 %indvars.iv, i32 3
  store i32 -1, i32* %matches, align 16, !tbaa !41
  %matched = getelementptr inbounds [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %indvars.iv383, i64 %indvars.iv, i32 4
  store i32 -1, i32* %matched, align 4, !tbaa !42
  %4 = load i8* %p.0379, align 1, !tbaa !7
  switch i8 %4, label %for.cond25.preheader [
    i8 0, label %if.then
    i8 44, label %if.then
  ]

for.cond25.preheader:                             ; preds = %for.body8
  %reject = getelementptr inbounds [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %indvars.iv383, i64 %indvars.iv, i32 2
  %earlyclobber = getelementptr inbounds [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %indvars.iv383, i64 %indvars.iv, i32 5
  br label %for.cond25

if.then:                                          ; preds = %for.body8, %for.body8
  %anything_ok = getelementptr inbounds [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %indvars.iv383, i64 %indvars.iv, i32 5
  %bf.load = load i8* %anything_ok, align 8
  %bf.set = or i8 %bf.load, -128
  store i8 %bf.set, i8* %anything_ok, align 8
  br label %for.inc

for.cond25:                                       ; preds = %for.cond25.backedge, %for.cond25.preheader
  %5 = phi i8 [ %4, %for.cond25.preheader ], [ %.pre, %for.cond25.backedge ]
  %p.1 = phi i8* [ %p.0379, %for.cond25.preheader ], [ %p.1.be, %for.cond25.backedge ]
  %incdec.ptr = getelementptr inbounds i8* %p.1, i64 1
  %cmp27 = icmp eq i8 %5, 35
  br i1 %cmp27, label %do.body, label %if.end37

do.body:                                          ; preds = %for.cond25, %do.body
  %p.2 = phi i8* [ %incdec.ptr30, %do.body ], [ %incdec.ptr, %for.cond25 ]
  %incdec.ptr30 = getelementptr inbounds i8* %p.2, i64 1
  %6 = load i8* %p.2, align 1, !tbaa !7
  switch i8 %6, label %do.body [
    i8 44, label %if.end37
    i8 0, label %if.end37
  ]

if.end37:                                         ; preds = %do.body, %do.body, %for.cond25
  %p.3 = phi i8* [ %incdec.ptr, %for.cond25 ], [ %incdec.ptr30, %do.body ], [ %incdec.ptr30, %do.body ]
  %c.0 = phi i8 [ %5, %for.cond25 ], [ %6, %do.body ], [ %6, %do.body ]
  switch i8 %c.0, label %if.end46 [
    i8 44, label %for.inc
    i8 0, label %for.inc
  ]

if.end46:                                         ; preds = %if.end37
  %conv38 = sext i8 %c.0 to i32
  switch i32 %conv38, label %sw.default [
    i32 61, label %for.cond25.backedge
    i32 43, label %for.cond25.backedge
    i32 42, label %for.cond25.backedge
    i32 37, label %for.cond25.backedge
    i32 69, label %for.cond25.backedge
    i32 70, label %for.cond25.backedge
    i32 71, label %for.cond25.backedge
    i32 72, label %for.cond25.backedge
    i32 115, label %for.cond25.backedge
    i32 105, label %for.cond25.backedge
    i32 110, label %for.cond25.backedge
    i32 73, label %for.cond25.backedge
    i32 74, label %for.cond25.backedge
    i32 75, label %for.cond25.backedge
    i32 76, label %for.cond25.backedge
    i32 77, label %for.cond25.backedge
    i32 78, label %for.cond25.backedge
    i32 79, label %for.cond25.backedge
    i32 80, label %for.cond25.backedge
    i32 63, label %sw.bb48
    i32 33, label %sw.bb51
    i32 38, label %sw.bb56
    i32 48, label %sw.bb62
    i32 49, label %sw.bb62
    i32 50, label %sw.bb62
    i32 51, label %sw.bb62
    i32 52, label %sw.bb62
    i32 53, label %sw.bb62
    i32 54, label %sw.bb62
    i32 55, label %sw.bb62
    i32 56, label %sw.bb62
    i32 57, label %sw.bb62
    i32 109, label %sw.bb75
    i32 60, label %sw.bb81
    i32 62, label %sw.bb87
    i32 86, label %sw.bb93
    i32 111, label %sw.bb99
    i32 88, label %sw.bb105
    i32 112, label %sw.bb112
    i32 103, label %sw.bb127
    i32 114, label %sw.bb127
  ]

for.cond25.backedge:                              ; preds = %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %cond.end279, %sw.bb127, %sw.bb112, %sw.bb105, %sw.bb99, %sw.bb93, %sw.bb87, %sw.bb81, %sw.bb75, %sw.bb62, %sw.bb56, %sw.bb51, %sw.bb48
  %p.1.be = phi i8* [ %p.3, %cond.end279 ], [ %p.3, %sw.bb127 ], [ %p.3, %sw.bb112 ], [ %p.3, %sw.bb105 ], [ %p.3, %sw.bb99 ], [ %p.3, %sw.bb93 ], [ %p.3, %sw.bb87 ], [ %p.3, %sw.bb81 ], [ %p.3, %sw.bb75 ], [ %10, %sw.bb62 ], [ %p.3, %sw.bb56 ], [ %p.3, %sw.bb51 ], [ %p.3, %sw.bb48 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ], [ %p.3, %if.end46 ]
  %.pre = load i8* %p.1.be, align 1, !tbaa !7
  br label %for.cond25

sw.bb48:                                          ; preds = %if.end46
  %7 = load i32* %reject, align 4, !tbaa !43
  %add = add i32 %7, 6
  store i32 %add, i32* %reject, align 4, !tbaa !43
  br label %for.cond25.backedge

sw.bb51:                                          ; preds = %if.end46
  %8 = load i32* %reject, align 4, !tbaa !43
  %add55 = add i32 %8, 600
  store i32 %add55, i32* %reject, align 4, !tbaa !43
  br label %for.cond25.backedge

sw.bb56:                                          ; preds = %if.end46
  %bf.load59 = load i8* %earlyclobber, align 8
  %bf.set61 = or i8 %bf.load59, 1
  store i8 %bf.set61, i8* %earlyclobber, align 8
  br label %for.cond25.backedge

sw.bb62:                                          ; preds = %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46
  %add.ptr = getelementptr inbounds i8* %p.3, i64 -1
  %call = call i64 @strtoul(i8* %add.ptr, i8** %end, i32 10) #4
  %conv63 = trunc i64 %call to i32
  store i32 %conv63, i32* %matches, align 16, !tbaa !41
  %sext = shl i64 %call, 32
  %idxprom71 = ashr exact i64 %sext, 32
  %matched74 = getelementptr inbounds [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %idxprom71, i64 %indvars.iv, i32 4
  %9 = trunc i64 %indvars.iv383 to i32
  store i32 %9, i32* %matched74, align 4, !tbaa !42
  %10 = load i8** %end, align 8, !tbaa !5
  br label %for.cond25.backedge

sw.bb75:                                          ; preds = %if.end46
  %bf.load78 = load i8* %earlyclobber, align 8
  %bf.set80 = or i8 %bf.load78, 2
  store i8 %bf.set80, i8* %earlyclobber, align 8
  br label %for.cond25.backedge

sw.bb81:                                          ; preds = %if.end46
  %bf.load84 = load i8* %earlyclobber, align 8
  %bf.set86 = or i8 %bf.load84, 16
  store i8 %bf.set86, i8* %earlyclobber, align 8
  br label %for.cond25.backedge

sw.bb87:                                          ; preds = %if.end46
  %bf.load90 = load i8* %earlyclobber, align 8
  %bf.set92 = or i8 %bf.load90, 32
  store i8 %bf.set92, i8* %earlyclobber, align 8
  br label %for.cond25.backedge

sw.bb93:                                          ; preds = %if.end46
  %bf.load96 = load i8* %earlyclobber, align 8
  %bf.set98 = or i8 %bf.load96, 8
  store i8 %bf.set98, i8* %earlyclobber, align 8
  br label %for.cond25.backedge

sw.bb99:                                          ; preds = %if.end46
  %bf.load102 = load i8* %earlyclobber, align 8
  %bf.set104 = or i8 %bf.load102, 4
  store i8 %bf.set104, i8* %earlyclobber, align 8
  br label %for.cond25.backedge

sw.bb105:                                         ; preds = %if.end46
  %bf.load109 = load i8* %earlyclobber, align 8
  %bf.set111 = or i8 %bf.load109, -128
  store i8 %bf.set111, i8* %earlyclobber, align 8
  br label %for.cond25.backedge

sw.bb112:                                         ; preds = %if.end46
  %bf.load115 = load i8* %earlyclobber, align 8
  %bf.set117 = or i8 %bf.load115, 64
  store i8 %bf.set117, i8* %earlyclobber, align 8
  %11 = load i32* %class, align 8, !tbaa !38
  %idxprom121 = sext i32 %11 to i64
  %arrayidx123 = getelementptr inbounds [25 x [25 x i32]]* @reg_class_subunion, i64 0, i64 %idxprom121, i64 12
  %12 = load i32* %arrayidx123, align 4, !tbaa !7
  store i32 %12, i32* %class, align 8, !tbaa !38
  br label %for.cond25.backedge

sw.bb127:                                         ; preds = %if.end46, %if.end46
  %13 = load i32* %class, align 8
  %idxprom131 = sext i32 %13 to i64
  %arrayidx133 = getelementptr inbounds [25 x [25 x i32]]* @reg_class_subunion, i64 0, i64 %idxprom131, i64 12
  %14 = load i32* %arrayidx133, align 4, !tbaa !7
  store i32 %14, i32* %class, align 8, !tbaa !38
  br label %for.cond25.backedge

sw.default:                                       ; preds = %if.end46
  %cmp138 = icmp eq i8 %c.0, 114
  br i1 %cmp138, label %cond.end279, label %cond.false

cond.false:                                       ; preds = %sw.default
  switch i8 %c.0, label %cond.false149 [
    i8 82, label %cond.end279
    i8 113, label %cond.true148
  ]

cond.true148:                                     ; preds = %cond.false
  %15 = load i32* @target_flags, align 4, !tbaa !1
  %and = and i32 %15, 33554432
  %16 = zext i32 %and to i64
  %17 = lshr exact i64 %16, 23
  %18 = or i64 %17, 8
  br label %cond.end279

cond.false149:                                    ; preds = %cond.false
  switch i8 %c.0, label %cond.false188 [
    i8 81, label %cond.end279
    i8 102, label %cond.true158
    i8 116, label %cond.true168
    i8 117, label %cond.true180
  ]

cond.true158:                                     ; preds = %cond.false149
  %19 = load i32* @target_flags, align 4, !tbaa !1
  %and159 = and i32 %19, 1
  %tobool160 = icmp eq i32 %and159, 0
  br i1 %tobool160, label %lor.rhs, label %cond.end279

lor.rhs:                                          ; preds = %cond.true158
  %and161 = and i32 %19, 32
  %tobool162 = icmp ne i32 %and161, 0
  %phitmp375 = select i1 %tobool162, i64 15, i64 0
  br label %cond.end279

cond.true168:                                     ; preds = %cond.false149
  %20 = load i32* @target_flags, align 4, !tbaa !1
  %and169 = and i32 %20, 1
  %tobool170 = icmp eq i32 %and169, 0
  br i1 %tobool170, label %lor.rhs171, label %cond.end279

lor.rhs171:                                       ; preds = %cond.true168
  %and172 = and i32 %20, 32
  %tobool173 = icmp ne i32 %and172, 0
  %phitmp374 = select i1 %tobool173, i64 13, i64 0
  br label %cond.end279

cond.true180:                                     ; preds = %cond.false149
  %21 = load i32* @target_flags, align 4, !tbaa !1
  %and181 = and i32 %21, 1
  %tobool182 = icmp eq i32 %and181, 0
  br i1 %tobool182, label %lor.rhs183, label %cond.end279

lor.rhs183:                                       ; preds = %cond.true180
  %and184 = and i32 %21, 32
  %tobool185 = icmp ne i32 %and184, 0
  %phitmp = select i1 %tobool185, i64 14, i64 0
  br label %cond.end279

cond.false188:                                    ; preds = %cond.false149
  %cmp190 = icmp eq i8 %c.0, 97
  br i1 %cmp190, label %cond.end279, label %cond.false193

cond.false193:                                    ; preds = %cond.false188
  %cmp195 = icmp eq i8 %c.0, 98
  br i1 %cmp195, label %cond.end279, label %cond.false198

cond.false198:                                    ; preds = %cond.false193
  %cmp200 = icmp eq i8 %c.0, 99
  br i1 %cmp200, label %cond.end279, label %cond.false203

cond.false203:                                    ; preds = %cond.false198
  switch i8 %c.0, label %cond.false235 [
    i8 100, label %cond.end279
    i8 120, label %cond.true212
    i8 89, label %cond.true221
    i8 121, label %cond.true230
  ]

cond.true212:                                     ; preds = %cond.false203
  %22 = load i32* @target_flags, align 4, !tbaa !1
  %and213 = and i32 %22, 327680
  %cmp214 = icmp ne i32 %and213, 0
  %cond216 = select i1 %cmp214, i64 16, i64 0
  br label %cond.end279

cond.true221:                                     ; preds = %cond.false203
  %23 = load i32* @target_flags, align 4, !tbaa !1
  %and222 = and i32 %23, 262144
  %24 = zext i32 %and222 to i64
  %25 = lshr exact i64 %24, 14
  br label %cond.end279

cond.true230:                                     ; preds = %cond.false203
  %26 = load i32* @target_flags, align 4, !tbaa !1
  %and231 = and i32 %26, 16384
  %cmp232 = icmp ne i32 %and231, 0
  %cond234 = select i1 %cmp232, i64 17, i64 0
  br label %cond.end279

cond.false235:                                    ; preds = %cond.false203
  %cmp237 = icmp eq i8 %c.0, 65
  br i1 %cmp237, label %cond.end279, label %cond.false240

cond.false240:                                    ; preds = %cond.false235
  %cmp242 = icmp eq i8 %c.0, 68
  br i1 %cmp242, label %cond.end279, label %cond.false245

cond.false245:                                    ; preds = %cond.false240
  %cmp247 = icmp eq i8 %c.0, 83
  %cond249 = select i1 %cmp247, i64 5, i64 0
  br label %cond.end279

cond.end279:                                      ; preds = %cond.false203, %lor.rhs183, %cond.true180, %cond.false149, %lor.rhs171, %cond.true168, %lor.rhs, %cond.true158, %cond.false, %cond.false188, %cond.false198, %cond.true212, %cond.true230, %cond.false245, %cond.false240, %cond.false235, %cond.true221, %cond.false193, %cond.true148, %sw.default
  %cond280 = phi i64 [ 12, %sw.default ], [ 11, %cond.false ], [ %18, %cond.true148 ], [ 8, %cond.false149 ], [ 1, %cond.false188 ], [ 4, %cond.false193 ], [ 3, %cond.false198 ], [ 2, %cond.false203 ], [ %cond216, %cond.true212 ], [ %25, %cond.true221 ], [ %cond234, %cond.true230 ], [ 7, %cond.false235 ], [ %cond249, %cond.false245 ], [ 6, %cond.false240 ], [ 15, %cond.true158 ], [ %phitmp375, %lor.rhs ], [ 13, %cond.true168 ], [ %phitmp374, %lor.rhs171 ], [ 14, %cond.true180 ], [ %phitmp, %lor.rhs183 ]
  %27 = load i32* %class, align 8, !tbaa !38
  %idxprom285 = sext i32 %27 to i64
  %arrayidx287 = getelementptr inbounds [25 x [25 x i32]]* @reg_class_subunion, i64 0, i64 %idxprom285, i64 %cond280
  %28 = load i32* %arrayidx287, align 4, !tbaa !7
  store i32 %28, i32* %class, align 8, !tbaa !38
  br label %for.cond25.backedge

for.inc:                                          ; preds = %if.end37, %if.end37, %if.then
  %p.4 = phi i8* [ %p.0379, %if.then ], [ %p.3, %if.end37 ], [ %p.3, %if.end37 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %29 = load i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 9), align 2, !tbaa !13
  %conv5 = sext i8 %29 to i32
  %30 = trunc i64 %indvars.iv.next to i32
  %cmp6 = icmp slt i32 %30, %conv5
  br i1 %cmp6, label %for.body8, label %for.inc292

for.inc292:                                       ; preds = %for.inc, %for.body
  %indvars.iv.next384 = add nuw nsw i64 %indvars.iv383, 1
  %31 = load i32* bitcast (i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7) to i32*), align 4
  %sext388 = shl i32 %31, 24
  %conv = ashr exact i32 %sext388, 24
  %32 = trunc i64 %indvars.iv.next384 to i32
  %cmp = icmp slt i32 %32, %conv
  br i1 %cmp, label %for.body, label %for.end294

for.end294:                                       ; preds = %for.inc292, %entry
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) #5

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

declare i32 @subreg_regno_offset(i32, i32, i32, i32) #1

declare i32 @operands_match_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define i32 @reg_fits_class_p(%struct.rtx_def* nocapture readonly %operand, i32 %class, i32 %offset, i32 %mode) #2 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %operand, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtuint, align 4, !tbaa !1
  %cmp = icmp slt i32 %0, 53
  br i1 %cmp, label %land.lhs.true, label %return

land.lhs.true:                                    ; preds = %entry
  %idxprom = sext i32 %class to i64
  %arrayidx1 = getelementptr inbounds [25 x i64]* @reg_class_contents, i64 0, i64 %idxprom
  %1 = load i64* %arrayidx1, align 8, !tbaa !25
  %add = add nsw i32 %0, %offset
  %sh_prom = zext i32 %add to i64
  %shl = shl i64 1, %sh_prom
  %and = and i64 %1, %shl
  %tobool = icmp eq i64 %and, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %2 = and i32 %add, -8
  %3 = icmp eq i32 %2, 8
  %add.off = add i32 %add, -21
  %4 = icmp ult i32 %add.off, 8
  %or.cond = or i1 %3, %4
  %add.off86 = add i32 %add, -45
  %5 = icmp ult i32 %add.off86, 8
  %or.cond90 = or i1 %or.cond, %5
  %add.off87 = add i32 %add, -29
  %6 = icmp ult i32 %add.off87, 8
  %or.cond92 = or i1 %or.cond90, %6
  br i1 %or.cond92, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %idxprom17 = sext i32 %mode to i64
  %arrayidx18 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom17
  %7 = load i32* %arrayidx18, align 4, !tbaa !7
  %cmp19 = icmp eq i32 %7, 5
  br i1 %cmp19, label %for.cond, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp22 = icmp eq i32 %7, 6
  %phitmp = select i1 %cmp22, i32 2, i32 1
  br label %for.cond

cond.false:                                       ; preds = %if.then
  switch i32 %mode, label %cond.false34 [
    i32 18, label %cond.true24
    i32 24, label %cond.true30
  ]

cond.true24:                                      ; preds = %cond.false
  %8 = load i32* @target_flags, align 4, !tbaa !1
  %and25 = lshr i32 %8, 25
  %9 = and i32 %and25, 1
  %10 = xor i32 %9, 3
  br label %for.cond

cond.true30:                                      ; preds = %cond.false
  %11 = load i32* @target_flags, align 4, !tbaa !1
  %and31 = lshr i32 %11, 24
  %12 = and i32 %and31, 2
  %13 = xor i32 %12, 6
  br label %for.cond

cond.false34:                                     ; preds = %cond.false
  %idxprom35 = sext i32 %mode to i64
  %arrayidx36 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom35
  %14 = load i8* %arrayidx36, align 1, !tbaa !7
  %conv = zext i8 %14 to i32
  %15 = load i32* @target_flags, align 4, !tbaa !1
  %and37 = lshr i32 %15, 23
  %16 = and i32 %and37, 4
  %17 = add i32 %16, 4
  %add40 = add i32 %conv, -1
  %sub = add i32 %add40, %17
  %div = sdiv i32 %sub, %17
  br label %for.cond

for.cond:                                         ; preds = %cond.true30, %cond.false34, %cond.true24, %lor.rhs, %cond.true, %for.body
  %sr.0.in = phi i32 [ %sr.0, %for.body ], [ %13, %cond.true30 ], [ %div, %cond.false34 ], [ %10, %cond.true24 ], [ %phitmp, %lor.rhs ], [ 2, %cond.true ]
  %sr.0 = add nsw i32 %sr.0.in, -1
  %cmp50 = icmp sgt i32 %sr.0, 0
  br i1 %cmp50, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %add54 = add nsw i32 %sr.0, %add
  %sh_prom55 = zext i32 %add54 to i64
  %shl56 = shl i64 1, %sh_prom55
  %and57 = and i64 %1, %shl56
  %tobool58 = icmp eq i64 %and57, 0
  br i1 %tobool58, label %for.end, label %for.cond

for.end:                                          ; preds = %for.body, %for.cond
  %cmp60 = icmp eq i32 %sr.0, 0
  %conv61 = zext i1 %cmp60 to i32
  br label %return

return:                                           ; preds = %entry, %land.lhs.true, %for.end
  %retval.0 = phi i32 [ %conv61, %for.end ], [ 0, %land.lhs.true ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @safe_from_earlyclobber(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

; Function Attrs: nounwind uwtable
define void @split_all_insns(i32 %upd_life) #0 {
entry:
  %0 = load i32* @n_basic_blocks, align 4, !tbaa !1
  %call = tail call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %0) #4
  tail call void @sbitmap_zero(%struct.simple_bitmap_def* %call) #4
  %1 = load i32* @n_basic_blocks, align 4, !tbaa !1
  %2 = sext i32 %1 to i64
  br label %for.cond

for.cond:                                         ; preds = %for.end, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.end ], [ %2, %entry ]
  %changed.0 = phi i32 [ %changed.2, %for.end ], [ 0, %entry ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %3 = trunc i64 %indvars.iv to i32
  %cmp = icmp sgt i32 %3, 0
  br i1 %cmp, label %for.body, label %for.end20

for.body:                                         ; preds = %for.cond
  %4 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !5
  %data = getelementptr inbounds %struct.varray_head_tag* %4, i64 0, i32 4
  %bb1 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb1, i64 0, i64 %indvars.iv.next
  %5 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !5
  %head = getelementptr inbounds %struct.basic_block_def* %5, i64 0, i32 0
  %6 = load %struct.rtx_def** %head, align 8, !tbaa !44
  %end = getelementptr inbounds %struct.basic_block_def* %5, i64 0, i32 1
  %rem = and i64 %indvars.iv.next, 63
  %shl = shl i64 1, %rem
  %div = lshr i64 %indvars.iv.next, 6
  %idxprom11 = and i64 %div, 67108863
  %arrayidx12 = getelementptr inbounds %struct.simple_bitmap_def* %call, i64 0, i32 3, i64 %idxprom11
  br label %for.cond2

for.cond2:                                        ; preds = %if.end, %for.body
  %insn.0 = phi %struct.rtx_def* [ %6, %for.body ], [ %7, %if.end ]
  %changed.1 = phi i32 [ %changed.0, %for.body ], [ %changed.2, %if.end ]
  %tobool = icmp eq %struct.rtx_def* %insn.0, null
  br i1 %tobool, label %if.then17, label %for.body3

for.body3:                                        ; preds = %for.cond2
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %call5 = tail call fastcc %struct.rtx_def* @split_insn(%struct.rtx_def* %insn.0)
  %tobool6 = icmp eq %struct.rtx_def* %call5, null
  br i1 %tobool6, label %if.end, label %while.cond.preheader

while.cond.preheader:                             ; preds = %for.body3
  %8 = getelementptr inbounds %struct.rtx_def* %call5, i64 0, i32 0
  %bf.load53 = load i32* %8, align 8
  %bf.clear54 = and i32 %bf.load53, 65535
  %cmp755 = icmp eq i32 %bf.clear54, 35
  br i1 %cmp755, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %last.056 = phi %struct.rtx_def* [ %9, %while.body ], [ %call5, %while.cond.preheader ]
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %last.056, i64 0, i32 1, i64 1
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx10, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load = load i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp7 = icmp eq i32 %bf.clear, 35
  br i1 %cmp7, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %last.0.lcssa = phi %struct.rtx_def* [ %call5, %while.cond.preheader ], [ %9, %while.body ]
  %11 = load i64* %arrayidx12, align 8, !tbaa !25
  %or = or i64 %11, %shl
  store i64 %or, i64* %arrayidx12, align 8, !tbaa !25
  br label %if.end

if.end:                                           ; preds = %for.body3, %while.end
  %insn.1 = phi %struct.rtx_def* [ %last.0.lcssa, %while.end ], [ %insn.0, %for.body3 ]
  %changed.2 = phi i32 [ 1, %while.end ], [ %changed.1, %for.body3 ]
  %12 = load %struct.rtx_def** %end, align 8, !tbaa !46
  %cmp13 = icmp eq %struct.rtx_def* %insn.1, %12
  br i1 %cmp13, label %for.end, label %for.cond2

for.end:                                          ; preds = %if.end
  %cmp16 = icmp eq %struct.rtx_def* %insn.1, null
  br i1 %cmp16, label %if.then17, label %for.cond

if.then17:                                        ; preds = %for.end, %for.cond2
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2798, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.split_all_insns, i64 0, i64 0)) #6
  unreachable

for.end20:                                        ; preds = %for.cond
  %tobool21 = icmp eq i32 %changed.0, 0
  br i1 %tobool21, label %if.end28, label %if.end23

if.end23:                                         ; preds = %for.end20
  tail call void @find_many_sub_basic_blocks(%struct.simple_bitmap_def* %call) #4
  %tobool25 = icmp eq i32 %upd_life, 0
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end23
  %call27 = tail call i32 @count_or_remove_death_notes(%struct.simple_bitmap_def* %call, i32 1) #4
  tail call void @update_life_info(%struct.simple_bitmap_def* %call, i32 0, i32 1) #4
  br label %if.end28

if.end28:                                         ; preds = %if.end23, %for.end20, %if.then26
  %13 = bitcast %struct.simple_bitmap_def* %call to i8*
  tail call void @free(i8* %13)
  ret void
}

declare %struct.simple_bitmap_def* @sbitmap_alloc(i32) #1

declare void @sbitmap_zero(%struct.simple_bitmap_def*) #1

; Function Attrs: nounwind uwtable
define internal fastcc %struct.rtx_def* @split_insn(%struct.rtx_def* %insn) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom106 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom106
  %1 = load i8* %arrayidx, align 1, !tbaa !7
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %cond.true, label %return

cond.true:                                        ; preds = %entry
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load10 = load i32* %3, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 47
  br i1 %cmp12, label %cond.end22, label %cond.false

cond.false:                                       ; preds = %cond.true
  %call = tail call %struct.rtx_def* @single_set_2(%struct.rtx_def* %insn, %struct.rtx_def* %2) #4
  br label %cond.end22

cond.end22:                                       ; preds = %cond.true, %cond.false
  %cond23 = phi %struct.rtx_def* [ %call, %cond.false ], [ %2, %cond.true ]
  %cmp24 = icmp eq %struct.rtx_def* %cond23, null
  br i1 %cmp24, label %if.else36, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end22
  %call26 = tail call i32 @set_noop_p(%struct.rtx_def* %cond23) #4
  %tobool = icmp eq i32 %call26, 0
  br i1 %tobool, label %if.else36, label %if.then27

if.then27:                                        ; preds = %land.lhs.true
  %4 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool28 = icmp eq i32 %4, 0
  br i1 %tobool28, label %return, label %if.then29

if.then29:                                        ; preds = %if.then27
  %bf.load30 = load i32* %0, align 8
  %bf.clear31 = and i32 %bf.load30, -65536
  %bf.set = or i32 %bf.clear31, 37
  store i32 %bf.set, i32* %0, align 8
  %arrayidx33 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx33 to i32*
  store i32 -99, i32* %rtint, align 4, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3, i32 0
  store i64 0, i64* %5, align 8, !tbaa !5
  br label %return

if.else36:                                        ; preds = %land.lhs.true, %cond.end22
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 1
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx39, align 8, !tbaa !5
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %call43 = tail call %struct.rtx_def* @try_split(%struct.rtx_def* %7, %struct.rtx_def* %insn, i32 1) #4
  %cmp44 = icmp eq %struct.rtx_def* %call43, %insn
  br i1 %cmp44, label %return, label %if.then46

if.then46:                                        ; preds = %if.else36
  %bf.load47 = load i32* %0, align 8
  %bf.clear48 = and i32 %bf.load47, -65536
  %bf.set49 = or i32 %bf.clear48, 37
  store i32 %bf.set49, i32* %0, align 8
  %8 = getelementptr inbounds %union.rtunion_def* %arrayidx9, i64 0, i32 0
  store i64 0, i64* %8, align 8, !tbaa !5
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint55 = bitcast %union.rtunion_def* %arrayidx54 to i32*
  store i32 -99, i32* %rtint55, align 4, !tbaa !1
  %9 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool56 = icmp eq i32 %9, 0
  %cmp58 = icmp eq %struct.rtx_def* %6, %call43
  %or.cond = or i1 %tobool56, %cmp58
  br i1 %or.cond, label %return, label %while.body

while.body:                                       ; preds = %if.then46, %if.end72
  %.pn = phi %struct.rtx_def* [ %first.0, %if.end72 ], [ %6, %if.then46 ]
  %first.0.in.in = getelementptr inbounds %struct.rtx_def* %.pn, i64 0, i32 1, i64 2
  %first.0.in = bitcast %union.rtunion_def* %first.0.in.in to %struct.rtx_def**
  %first.0 = load %struct.rtx_def** %first.0.in, align 8
  %10 = getelementptr inbounds %struct.rtx_def* %first.0, i64 0, i32 0
  %bf.load64 = load i32* %10, align 8
  %bf.clear65 = and i32 %bf.load64, 65535
  %idxprom66107 = zext i32 %bf.clear65 to i64
  %arrayidx67 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom66107
  %11 = load i8* %arrayidx67, align 1, !tbaa !7
  %cmp69 = icmp eq i8 %11, 105
  br i1 %cmp69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %while.body
  tail call void @cleanup_subreg_operands(%struct.rtx_def* %first.0) #4
  br label %if.end72

if.end72:                                         ; preds = %if.then71, %while.body
  %cmp73 = icmp eq %struct.rtx_def* %first.0, %call43
  br i1 %cmp73, label %return, label %while.body

return:                                           ; preds = %if.end72, %entry, %if.then29, %if.else36, %if.then27, %if.then46
  %retval.0 = phi %struct.rtx_def* [ %call43, %if.then46 ], [ null, %if.then27 ], [ null, %if.else36 ], [ null, %if.then29 ], [ null, %entry ], [ %call43, %if.end72 ]
  ret %struct.rtx_def* %retval.0
}

declare void @find_many_sub_basic_blocks(%struct.simple_bitmap_def*) #1

declare i32 @count_or_remove_death_notes(%struct.simple_bitmap_def*, i32) #1

declare void @update_life_info(%struct.simple_bitmap_def*, i32, i32) #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) #5

; Function Attrs: nounwind uwtable
define void @split_all_insns_noflow() #0 {
entry:
  %call = tail call %struct.rtx_def* @get_insns() #4
  %tobool4 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool4, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %insn.05 = phi %struct.rtx_def* [ %0, %for.body ], [ %call, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.05, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %call1 = tail call fastcc %struct.rtx_def* @split_insn(%struct.rtx_def* %insn.05)
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret void
}

declare %struct.rtx_def* @get_insns() #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @peep2_next_insn(i32 %n) #0 {
entry:
  %cmp = icmp sgt i32 %n, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2858, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.peep2_next_insn, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %0 = load i32* @peep2_current, align 4, !tbaa !1
  %add = add nsw i32 %0, %n
  %cmp1 = icmp sgt i32 %add, 4
  %sub = add nsw i32 %add, -5
  %sub.add = select i1 %cmp1, i32 %sub, i32 %add
  %idxprom = sext i32 %sub.add to i64
  %insn = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom, i32 0
  %1 = load %struct.rtx_def** %insn, align 16, !tbaa !47
  %2 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !5
  %cmp4 = icmp eq %struct.rtx_def* %1, %2
  %retval.0 = select i1 %cmp4, %struct.rtx_def* null, %struct.rtx_def* %1
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @peep2_regno_dead_p(i32 %ofs, i32 %regno) #0 {
entry:
  %cmp = icmp sgt i32 %ofs, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2878, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.peep2_regno_dead_p, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %0 = load i32* @peep2_current, align 4, !tbaa !1
  %add = add nsw i32 %0, %ofs
  %cmp1 = icmp sgt i32 %add, 4
  %sub = add nsw i32 %add, -5
  %sub.add = select i1 %cmp1, i32 %sub, i32 %add
  %idxprom = sext i32 %sub.add to i64
  %insn = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom, i32 0
  %1 = load %struct.rtx_def** %insn, align 16, !tbaa !47
  %cmp4 = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2885, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.peep2_regno_dead_p, i64 0, i64 0)) #6
  unreachable

if.end6:                                          ; preds = %if.end
  %live_before = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom, i32 1
  %2 = load %struct.bitmap_head_def** %live_before, align 8, !tbaa !49
  %call = tail call i32 @bitmap_bit_p(%struct.bitmap_head_def* %2, i32 %regno) #4
  %lnot = icmp eq i32 %call, 0
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

declare i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #1

; Function Attrs: nounwind uwtable
define i32 @peep2_reg_dead_p(i32 %ofs, %struct.rtx_def* nocapture readonly %reg) #0 {
entry:
  %cmp = icmp sgt i32 %ofs, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2900, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.peep2_reg_dead_p, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %0 = load i32* @peep2_current, align 4, !tbaa !1
  %add = add nsw i32 %0, %ofs
  %cmp1 = icmp sgt i32 %add, 4
  %sub = add nsw i32 %add, -5
  %sub.add = select i1 %cmp1, i32 %sub, i32 %add
  %idxprom = sext i32 %sub.add to i64
  %insn = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom, i32 0
  %1 = load %struct.rtx_def** %insn, align 16, !tbaa !47
  %cmp4 = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2907, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.peep2_reg_dead_p, i64 0, i64 0)) #6
  unreachable

if.end6:                                          ; preds = %if.end
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !1
  %3 = and i32 %2, -8
  %4 = icmp eq i32 %3, 8
  %.off = add i32 %2, -21
  %5 = icmp ult i32 %.off, 8
  %or.cond = or i1 %4, %5
  %.off94 = add i32 %2, -45
  %6 = icmp ult i32 %.off94, 8
  %or.cond100 = or i1 %or.cond, %6
  %.off95 = add i32 %2, -29
  %7 = icmp ult i32 %.off95, 8
  %or.cond102 = or i1 %or.cond100, %7
  %8 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load = load i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  br i1 %or.cond102, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end6
  %idxprom2197 = zext i32 %bf.clear to i64
  %arrayidx22 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom2197
  %9 = load i32* %arrayidx22, align 4, !tbaa !7
  %cmp23 = icmp eq i32 %9, 5
  br i1 %cmp23, label %while.cond.preheader, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp29 = icmp eq i32 %9, 6
  %phitmp = select i1 %cmp29, i32 2, i32 1
  br label %while.cond.preheader

cond.false:                                       ; preds = %if.end6
  switch i32 %bf.clear, label %cond.false45 [
    i32 18, label %cond.true34
    i32 24, label %cond.true41
  ]

cond.true34:                                      ; preds = %cond.false
  %10 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %10, 25
  %11 = and i32 %and, 1
  %12 = xor i32 %11, 3
  br label %while.cond.preheader

cond.true41:                                      ; preds = %cond.false
  %13 = load i32* @target_flags, align 4, !tbaa !1
  %and42 = lshr i32 %13, 24
  %14 = and i32 %and42, 2
  %15 = xor i32 %14, 6
  br label %while.cond.preheader

cond.false45:                                     ; preds = %cond.false
  %idxprom4996 = zext i32 %bf.clear to i64
  %arrayidx50 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom4996
  %16 = load i8* %arrayidx50, align 1, !tbaa !7
  %conv = zext i8 %16 to i32
  %17 = load i32* @target_flags, align 4, !tbaa !1
  %and51 = lshr i32 %17, 23
  %18 = and i32 %and51, 4
  %19 = add i32 %18, 4
  %add54 = add i32 %conv, -1
  %sub55 = add i32 %add54, %19
  %div = sdiv i32 %sub55, %19
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %cond.true, %lor.rhs, %cond.true34, %cond.false45, %cond.true41
  %n.0.ph = phi i32 [ %15, %cond.true41 ], [ %div, %cond.false45 ], [ %12, %cond.true34 ], [ %phitmp, %lor.rhs ], [ 2, %cond.true ]
  %live_before = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom, i32 1
  br label %while.cond

while.cond:                                       ; preds = %while.cond.preheader, %while.body
  %n.0 = phi i32 [ %dec, %while.body ], [ %n.0.ph, %while.cond.preheader ]
  %dec = add nsw i32 %n.0, -1
  %cmp64 = icmp sgt i32 %n.0, 0
  br i1 %cmp64, label %while.body, label %return

while.body:                                       ; preds = %while.cond
  %20 = load %struct.bitmap_head_def** %live_before, align 8, !tbaa !49
  %add68 = add nsw i32 %dec, %2
  %call = tail call i32 @bitmap_bit_p(%struct.bitmap_head_def* %20, i32 %add68) #4
  %tobool69 = icmp eq i32 %call, 0
  br i1 %tobool69, label %while.cond, label %return

return:                                           ; preds = %while.cond, %while.body
  %retval.0 = phi i32 [ 0, %while.body ], [ 1, %while.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @peep2_find_free_register(i32 %from, i32 %to, i8* nocapture readonly %class_str, i32 %mode, i64* nocapture %reg_set) #0 {
entry:
  %live = alloca i64, align 8
  %this_live = alloca i64, align 8
  %cmp = icmp sgt i32 %from, 4
  %cmp1 = icmp sgt i32 %to, 4
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2941, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.peep2_find_free_register, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %0 = load i32* @peep2_current, align 4, !tbaa !1
  %add = add nsw i32 %0, %from
  %cmp2 = icmp sgt i32 %add, 4
  %sub = add nsw i32 %add, -5
  %sub.add = select i1 %cmp2, i32 %sub, i32 %add
  %add5 = add nsw i32 %0, %to
  %cmp6 = icmp sgt i32 %add5, 4
  %sub8 = add nsw i32 %add5, -5
  %to.addr.0 = select i1 %cmp6, i32 %sub8, i32 %add5
  %idxprom = sext i32 %sub.add to i64
  %insn = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom, i32 0
  %1 = load %struct.rtx_def** %insn, align 16, !tbaa !47
  %cmp10 = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp10, label %if.then11, label %do.body

if.then11:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2951, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.peep2_find_free_register, i64 0, i64 0)) #6
  unreachable

do.body:                                          ; preds = %if.end
  store i64 0, i64* %live, align 8, !tbaa !25
  %live_before = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom, i32 1
  %2 = load %struct.bitmap_head_def** %live_before, align 8, !tbaa !49
  call void @reg_set_to_hard_reg_set(i64* %live, %struct.bitmap_head_def* %2) #4
  %cmp15534 = icmp eq i32 %sub.add, %to.addr.0
  br i1 %cmp15534, label %while.end, label %while.body

while.body:                                       ; preds = %do.body, %do.body25
  %from.addr.1535 = phi i32 [ %.inc, %do.body25 ], [ %sub.add, %do.body ]
  %inc = add nsw i32 %from.addr.1535, 1
  %cmp16 = icmp sgt i32 %from.addr.1535, 3
  %.inc = select i1 %cmp16, i32 0, i32 %inc
  %idxprom19 = sext i32 %.inc to i64
  %insn21 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom19, i32 0
  %3 = load %struct.rtx_def** %insn21, align 16, !tbaa !47
  %cmp22 = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp22, label %if.then23, label %do.body25

if.then23:                                        ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2961, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.peep2_find_free_register, i64 0, i64 0)) #6
  unreachable

do.body25:                                        ; preds = %while.body
  store i64 0, i64* %this_live, align 8, !tbaa !25
  %live_before28 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom19, i32 1
  %4 = load %struct.bitmap_head_def** %live_before28, align 8, !tbaa !49
  call void @reg_set_to_hard_reg_set(i64* %this_live, %struct.bitmap_head_def* %4) #4
  %5 = load i64* %this_live, align 8, !tbaa !25
  %6 = load i64* %live, align 8, !tbaa !25
  %or = or i64 %6, %5
  store i64 %or, i64* %live, align 8, !tbaa !25
  %cmp15 = icmp eq i32 %.inc, %to.addr.0
  br i1 %cmp15, label %while.end, label %while.body

while.end:                                        ; preds = %do.body25, %do.body
  %7 = load i8* %class_str, align 1, !tbaa !7
  %cmp31 = icmp eq i8 %7, 114
  br i1 %cmp31, label %cond.end196, label %cond.false38

cond.false38:                                     ; preds = %while.end
  switch i8 %7, label %cond.false50 [
    i8 82, label %cond.end196
    i8 113, label %cond.true49
  ]

cond.true49:                                      ; preds = %cond.false38
  %8 = load i32* @target_flags, align 4, !tbaa !1
  %and = and i32 %8, 33554432
  %9 = zext i32 %and to i64
  %10 = lshr exact i64 %9, 23
  %11 = or i64 %10, 8
  br label %cond.end196

cond.false50:                                     ; preds = %cond.false38
  switch i8 %7, label %cond.false93 [
    i8 81, label %cond.end196
    i8 102, label %cond.true61
    i8 116, label %cond.true72
    i8 117, label %cond.true85
  ]

cond.true61:                                      ; preds = %cond.false50
  %12 = load i32* @target_flags, align 4, !tbaa !1
  %and62 = and i32 %12, 1
  %tobool63 = icmp eq i32 %and62, 0
  br i1 %tobool63, label %lor.rhs, label %cond.end196

lor.rhs:                                          ; preds = %cond.true61
  %and64 = and i32 %12, 32
  %tobool65 = icmp ne i32 %and64, 0
  %phitmp516 = select i1 %tobool65, i64 15, i64 0
  br label %cond.end196

cond.true72:                                      ; preds = %cond.false50
  %13 = load i32* @target_flags, align 4, !tbaa !1
  %and73 = and i32 %13, 1
  %tobool74 = icmp eq i32 %and73, 0
  br i1 %tobool74, label %lor.rhs75, label %cond.end196

lor.rhs75:                                        ; preds = %cond.true72
  %and76 = and i32 %13, 32
  %tobool77 = icmp ne i32 %and76, 0
  %phitmp515 = select i1 %tobool77, i64 13, i64 0
  br label %cond.end196

cond.true85:                                      ; preds = %cond.false50
  %14 = load i32* @target_flags, align 4, !tbaa !1
  %and86 = and i32 %14, 1
  %tobool87 = icmp eq i32 %and86, 0
  br i1 %tobool87, label %lor.rhs88, label %cond.end196

lor.rhs88:                                        ; preds = %cond.true85
  %and89 = and i32 %14, 32
  %tobool90 = icmp ne i32 %and89, 0
  %phitmp514 = select i1 %tobool90, i64 14, i64 0
  br label %cond.end196

cond.false93:                                     ; preds = %cond.false50
  %cmp96 = icmp eq i8 %7, 97
  br i1 %cmp96, label %cond.end196, label %cond.false99

cond.false99:                                     ; preds = %cond.false93
  %cmp102 = icmp eq i8 %7, 98
  br i1 %cmp102, label %cond.end196, label %cond.false105

cond.false105:                                    ; preds = %cond.false99
  %cmp108 = icmp eq i8 %7, 99
  br i1 %cmp108, label %cond.end196, label %cond.false111

cond.false111:                                    ; preds = %cond.false105
  switch i8 %7, label %cond.false147 [
    i8 100, label %cond.end196
    i8 120, label %cond.true122
    i8 89, label %cond.true132
    i8 121, label %cond.true142
  ]

cond.true122:                                     ; preds = %cond.false111
  %15 = load i32* @target_flags, align 4, !tbaa !1
  %and123 = and i32 %15, 327680
  %cmp124 = icmp ne i32 %and123, 0
  %cond126 = select i1 %cmp124, i64 16, i64 0
  br label %cond.end196

cond.true132:                                     ; preds = %cond.false111
  %16 = load i32* @target_flags, align 4, !tbaa !1
  %and133 = and i32 %16, 262144
  %17 = zext i32 %and133 to i64
  %18 = lshr exact i64 %17, 14
  br label %cond.end196

cond.true142:                                     ; preds = %cond.false111
  %19 = load i32* @target_flags, align 4, !tbaa !1
  %and143 = and i32 %19, 16384
  %cmp144 = icmp ne i32 %and143, 0
  %cond146 = select i1 %cmp144, i64 17, i64 0
  br label %cond.end196

cond.false147:                                    ; preds = %cond.false111
  %cmp150 = icmp eq i8 %7, 65
  br i1 %cmp150, label %cond.end196, label %cond.false153

cond.false153:                                    ; preds = %cond.false147
  %cmp156 = icmp eq i8 %7, 68
  br i1 %cmp156, label %cond.end196, label %cond.false159

cond.false159:                                    ; preds = %cond.false153
  %cmp162 = icmp eq i8 %7, 83
  %cond164 = select i1 %cmp162, i64 5, i64 0
  br label %cond.end196

cond.end196:                                      ; preds = %cond.false111, %lor.rhs88, %cond.true85, %cond.false50, %lor.rhs75, %cond.true72, %lor.rhs, %cond.true61, %cond.false38, %cond.true49, %cond.false99, %cond.true132, %cond.false147, %cond.false153, %cond.false159, %cond.true142, %cond.true122, %cond.false105, %cond.false93, %while.end
  %cond197 = phi i64 [ 12, %while.end ], [ 11, %cond.false38 ], [ %11, %cond.true49 ], [ 8, %cond.false50 ], [ 1, %cond.false93 ], [ 4, %cond.false99 ], [ 3, %cond.false105 ], [ 2, %cond.false111 ], [ %cond126, %cond.true122 ], [ %18, %cond.true132 ], [ %cond146, %cond.true142 ], [ 7, %cond.false147 ], [ %cond164, %cond.false159 ], [ 6, %cond.false153 ], [ 15, %cond.true61 ], [ %phitmp516, %lor.rhs ], [ 13, %cond.true72 ], [ %phitmp515, %lor.rhs75 ], [ 14, %cond.true85 ], [ %phitmp514, %lor.rhs88 ]
  %arrayidx214 = getelementptr inbounds [25 x i64]* @reg_class_contents, i64 0, i64 %cond197
  %idxprom265 = sext i32 %mode to i64
  %arrayidx266 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom265
  %arrayidx292 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom265
  br label %for.body

for.body:                                         ; preds = %cond.end196, %for.inc415
  %i.0533 = phi i32 [ 0, %cond.end196 ], [ %inc416, %for.inc415 ]
  %20 = load i32* @peep2_find_free_register.search_ofs, align 4, !tbaa !1
  %add200 = add nsw i32 %20, %i.0533
  %cmp201 = icmp sgt i32 %add200, 52
  %sub204 = add nsw i32 %add200, -53
  %sub204.add200 = select i1 %cmp201, i32 %sub204, i32 %add200
  %idxprom206 = sext i32 %sub204.add200 to i64
  %arrayidx207 = getelementptr inbounds [53 x i32]* @reg_alloc_order, i64 0, i64 %idxprom206
  %21 = load i32* %arrayidx207, align 4, !tbaa !1
  %idxprom208 = sext i32 %21 to i64
  %arrayidx209 = getelementptr inbounds [53 x i8]* @fixed_regs, i64 0, i64 %idxprom208
  %22 = load i8* %arrayidx209, align 1, !tbaa !7
  %tobool210 = icmp eq i8 %22, 0
  br i1 %tobool210, label %if.end212, label %for.inc415

if.end212:                                        ; preds = %for.body
  %23 = load i64* %arrayidx214, align 8, !tbaa !25
  %sh_prom = zext i32 %21 to i64
  %shl = shl i64 1, %sh_prom
  %and215 = and i64 %23, %shl
  %tobool216 = icmp eq i64 %and215, 0
  br i1 %tobool216, label %for.inc415, label %if.end218

if.end218:                                        ; preds = %if.end212
  %call = call i32 @ix86_hard_regno_mode_ok(i32 %21, i32 %mode) #4
  %tobool219 = icmp eq i32 %call, 0
  br i1 %tobool219, label %for.inc415, label %if.end221

if.end221:                                        ; preds = %if.end218
  %arrayidx223 = getelementptr inbounds [53 x i8]* @call_used_regs, i64 0, i64 %idxprom208
  %24 = load i8* %arrayidx223, align 1, !tbaa !7
  %tobool224 = icmp eq i8 %24, 0
  br i1 %tobool224, label %land.lhs.true, label %if.end229

land.lhs.true:                                    ; preds = %if.end221
  %arrayidx226 = getelementptr inbounds [53 x i8]* @regs_ever_live, i64 0, i64 %idxprom208
  %25 = load i8* %arrayidx226, align 1, !tbaa !7
  %tobool227 = icmp eq i8 %25, 0
  br i1 %tobool227, label %for.inc415, label %if.end229

if.end229:                                        ; preds = %land.lhs.true, %if.end221
  switch i32 %21, label %if.end240 [
    i32 20, label %land.lhs.true235
    i32 6, label %land.lhs.true235
  ]

land.lhs.true235:                                 ; preds = %if.end229, %if.end229
  %26 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool236 = icmp eq i32 %26, 0
  %27 = load i32* @frame_pointer_needed, align 4
  %tobool238 = icmp ne i32 %27, 0
  %or.cond419 = or i1 %tobool236, %tobool238
  br i1 %or.cond419, label %for.inc415, label %if.end240

if.end240:                                        ; preds = %if.end229, %land.lhs.true235
  %28 = and i32 %21, -8
  %29 = icmp eq i32 %28, 8
  %.off = add i32 %21, -21
  %30 = icmp ult i32 %.off, 8
  %or.cond518 = or i1 %29, %30
  %.off508 = add i32 %21, -45
  %31 = icmp ult i32 %.off508, 8
  %or.cond520 = or i1 %or.cond518, %31
  %.off509 = add i32 %21, -29
  %32 = icmp ult i32 %.off509, 8
  %or.cond522 = or i1 %or.cond520, %32
  br i1 %or.cond522, label %cond.true264, label %cond.false276

cond.true264:                                     ; preds = %if.end240
  %33 = load i32* %arrayidx266, align 4, !tbaa !7
  %cmp267 = icmp eq i32 %33, 5
  br i1 %cmp267, label %for.cond309.preheader, label %lor.rhs269

lor.rhs269:                                       ; preds = %cond.true264
  %cmp272 = icmp eq i32 %33, 6
  %phitmp513 = select i1 %cmp272, i32 2, i32 1
  br label %for.cond309.preheader

cond.false276:                                    ; preds = %if.end240
  switch i32 %mode, label %cond.false290 [
    i32 18, label %cond.true279
    i32 24, label %cond.true286
  ]

cond.true279:                                     ; preds = %cond.false276
  %34 = load i32* @target_flags, align 4, !tbaa !1
  %and280 = lshr i32 %34, 25
  %35 = and i32 %and280, 1
  %36 = xor i32 %35, 3
  br label %for.cond309.preheader

cond.true286:                                     ; preds = %cond.false276
  %37 = load i32* @target_flags, align 4, !tbaa !1
  %and287 = lshr i32 %37, 24
  %38 = and i32 %and287, 2
  %39 = xor i32 %38, 6
  br label %for.cond309.preheader

cond.false290:                                    ; preds = %cond.false276
  %40 = load i8* %arrayidx292, align 1, !tbaa !7
  %conv293 = zext i8 %40 to i32
  %41 = load i32* @target_flags, align 4, !tbaa !1
  %and294 = lshr i32 %41, 23
  %42 = and i32 %and294, 4
  %43 = add i32 %42, 4
  %add297 = add i32 %conv293, -1
  %sub298 = add i32 %add297, %43
  %div = sdiv i32 %sub298, %43
  br label %for.cond309.preheader

for.cond309.preheader:                            ; preds = %cond.true264, %lor.rhs269, %cond.true279, %cond.false290, %cond.true286
  %j.0.in.ph = phi i32 [ %39, %cond.true286 ], [ %div, %cond.false290 ], [ %36, %cond.true279 ], [ %phitmp513, %lor.rhs269 ], [ 2, %cond.true264 ]
  %44 = load i64* %live, align 8, !tbaa !25
  br label %for.cond309

for.cond309:                                      ; preds = %for.body312, %for.cond309.preheader
  %j.0.in = phi i32 [ %j.0.in.ph, %for.cond309.preheader ], [ %j.0, %for.body312 ]
  %j.0 = add nsw i32 %j.0.in, -1
  %cmp310 = icmp sgt i32 %j.0.in, 0
  br i1 %cmp310, label %for.body312, label %if.then327.critedge

for.body312:                                      ; preds = %for.cond309
  %45 = load i64* %reg_set, align 8, !tbaa !25
  %add313 = add nsw i32 %j.0, %21
  %sh_prom314 = zext i32 %add313 to i64
  %shl315 = shl i64 1, %sh_prom314
  %46 = or i64 %45, %44
  %47 = and i64 %shl315, %46
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %for.cond309, label %for.inc415

if.then327.critedge:                              ; preds = %for.cond309
  br i1 %or.cond522, label %cond.true351, label %cond.false363

cond.true351:                                     ; preds = %if.then327.critedge
  %49 = load i32* %arrayidx266, align 4, !tbaa !7
  %cmp354 = icmp eq i32 %49, 5
  br i1 %cmp354, label %for.body400.lr.ph, label %lor.rhs356

lor.rhs356:                                       ; preds = %cond.true351
  %cmp359 = icmp eq i32 %49, 6
  %phitmp = select i1 %cmp359, i32 2, i32 1
  br label %for.body400.lr.ph

cond.false363:                                    ; preds = %if.then327.critedge
  switch i32 %mode, label %for.cond397.preheader [
    i32 18, label %cond.true366
    i32 24, label %cond.true373
  ]

cond.true366:                                     ; preds = %cond.false363
  %50 = load i32* @target_flags, align 4, !tbaa !1
  %and367 = lshr i32 %50, 25
  %51 = and i32 %and367, 1
  %52 = xor i32 %51, 3
  br label %for.body400.lr.ph

cond.true373:                                     ; preds = %cond.false363
  %53 = load i32* @target_flags, align 4, !tbaa !1
  %and374 = lshr i32 %53, 24
  %54 = and i32 %and374, 2
  %55 = xor i32 %54, 6
  br label %for.body400.lr.ph

for.cond397.preheader:                            ; preds = %cond.false363
  %56 = load i8* %arrayidx292, align 1, !tbaa !7
  %conv380 = zext i8 %56 to i32
  %57 = load i32* @target_flags, align 4, !tbaa !1
  %and381 = lshr i32 %57, 23
  %58 = and i32 %and381, 4
  %59 = add i32 %58, 4
  %add384 = add i32 %conv380, -1
  %sub385 = add i32 %add384, %59
  %div389 = sdiv i32 %sub385, %59
  %cmp398530 = icmp sgt i32 %div389, 0
  br i1 %cmp398530, label %for.body400.lr.ph, label %for.end407

for.body400.lr.ph:                                ; preds = %cond.true351, %lor.rhs356, %cond.true366, %cond.true373, %for.cond397.preheader
  %j.1.in.ph540 = phi i32 [ %div389, %for.cond397.preheader ], [ %55, %cond.true373 ], [ %52, %cond.true366 ], [ %phitmp, %lor.rhs356 ], [ 2, %cond.true351 ]
  %reg_set.promoted = load i64* %reg_set, align 8, !tbaa !25
  br label %for.body400

for.body400:                                      ; preds = %for.body400.lr.ph, %for.body400
  %or404532 = phi i64 [ %reg_set.promoted, %for.body400.lr.ph ], [ %or404, %for.body400 ]
  %j.1531.in = phi i32 [ %j.1.in.ph540, %for.body400.lr.ph ], [ %j.1531, %for.body400 ]
  %j.1531 = add nsw i32 %j.1531.in, -1
  %add401 = add nsw i32 %j.1531, %21
  %sh_prom402 = zext i32 %add401 to i64
  %shl403 = shl i64 1, %sh_prom402
  %or404 = or i64 %or404532, %shl403
  %cmp398 = icmp sgt i32 %j.1531, 0
  br i1 %cmp398, label %for.body400, label %for.cond397.for.end407_crit_edge

for.cond397.for.end407_crit_edge:                 ; preds = %for.body400
  store i64 %or404, i64* %reg_set, align 8, !tbaa !25
  br label %for.end407

for.end407:                                       ; preds = %for.cond397.for.end407_crit_edge, %for.cond397.preheader
  %inc408 = add nsw i32 %sub204.add200, 1
  %cmp409 = icmp sgt i32 %sub204.add200, 51
  %.inc408 = select i1 %cmp409, i32 0, i32 %inc408
  store i32 %.inc408, i32* @peep2_find_free_register.search_ofs, align 4, !tbaa !1
  %call413 = call %struct.rtx_def* @gen_rtx_REG(i32 %mode, i32 %21) #4
  br label %return

for.inc415:                                       ; preds = %for.body312, %land.lhs.true, %if.end218, %if.end212, %for.body, %land.lhs.true235
  %inc416 = add nsw i32 %i.0533, 1
  %cmp198 = icmp slt i32 %inc416, 53
  br i1 %cmp198, label %for.body, label %for.end417

for.end417:                                       ; preds = %for.inc415
  store i32 0, i32* @peep2_find_free_register.search_ofs, align 4, !tbaa !1
  br label %return

return:                                           ; preds = %for.end417, %for.end407
  %retval.0 = phi %struct.rtx_def* [ %call413, %for.end407 ], [ null, %for.end417 ]
  ret %struct.rtx_def* %retval.0
}

declare void @reg_set_to_hard_reg_set(i64*, %struct.bitmap_head_def*) #1

declare i32 @ix86_hard_regno_mode_ok(i32, i32) #1

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

; Function Attrs: nounwind uwtable
define void @peephole2_optimize(%struct._IO_FILE* nocapture readnone %dump_file) #0 {
entry:
  %rs_heads = alloca [6 x %struct.bitmap_head_def], align 16
  %match_len = alloca i32, align 4
  %0 = bitcast [6 x %struct.bitmap_head_def]* %rs_heads to i8*
  call void @llvm.lifetime.start(i64 144, i8* %0) #4
  %arrayidx506 = getelementptr inbounds [6 x %struct.bitmap_head_def]* %rs_heads, i64 0, i64 0
  %call507 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %arrayidx506) #4
  store %struct.bitmap_head_def* %call507, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 0, i32 1), align 8, !tbaa !49
  %arrayidx = getelementptr inbounds [6 x %struct.bitmap_head_def]* %rs_heads, i64 0, i64 1
  %call = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %arrayidx) #4
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 1, i32 1), align 8, !tbaa !49
  %arrayidx.1 = getelementptr inbounds [6 x %struct.bitmap_head_def]* %rs_heads, i64 0, i64 2
  %call.1 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %arrayidx.1) #4
  store %struct.bitmap_head_def* %call.1, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 2, i32 1), align 8, !tbaa !49
  %arrayidx.2 = getelementptr inbounds [6 x %struct.bitmap_head_def]* %rs_heads, i64 0, i64 3
  %call.2 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %arrayidx.2) #4
  store %struct.bitmap_head_def* %call.2, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 3, i32 1), align 8, !tbaa !49
  %arrayidx.3 = getelementptr inbounds [6 x %struct.bitmap_head_def]* %rs_heads, i64 0, i64 4
  %call.3 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %arrayidx.3) #4
  store %struct.bitmap_head_def* %call.3, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 4, i32 1), align 8, !tbaa !49
  %arrayidx.4 = getelementptr inbounds [6 x %struct.bitmap_head_def]* %rs_heads, i64 0, i64 5
  %call.4 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %arrayidx.4) #4
  %call6 = call i32 @count_or_remove_death_notes(%struct.simple_bitmap_def* null, i32 1) #4
  %1 = load i32* @n_basic_blocks, align 4, !tbaa !1
  %cmp8500 = icmp sgt i32 %1, 0
  br i1 %cmp8500, label %for.body9.lr.ph, label %for.cond314.preheader

for.body9.lr.ph:                                  ; preds = %entry
  %2 = sext i32 %1 to i64
  br label %for.body9

for.cond314.preheader:                            ; preds = %for.end310, %entry
  %do_cleanup_cfg.0.lcssa = phi i8 [ 0, %entry ], [ %do_cleanup_cfg.5, %for.end310 ]
  %do_rebuild_jump_labels.0.lcssa = phi i8 [ 0, %entry ], [ %do_rebuild_jump_labels.2, %for.end310 ]
  %3 = load %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 0, i32 1), align 8, !tbaa !49
  %tobool322 = icmp eq %struct.bitmap_head_def* %3, null
  br i1 %tobool322, label %for.inc333, label %if.then323

for.body9:                                        ; preds = %for.body9.lr.ph, %for.end310
  %indvars.iv515 = phi i64 [ %2, %for.body9.lr.ph ], [ %indvars.iv.next516, %for.end310 ]
  %do_cleanup_cfg.0502 = phi i8 [ 0, %for.body9.lr.ph ], [ %do_cleanup_cfg.5, %for.end310 ]
  %do_rebuild_jump_labels.0501 = phi i8 [ 0, %for.body9.lr.ph ], [ %do_rebuild_jump_labels.2, %for.end310 ]
  %indvars.iv.next516 = add nsw i64 %indvars.iv515, -1
  %4 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !5
  %data = getelementptr inbounds %struct.varray_head_tag* %4, i64 0, i32 4
  %bb11 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx12 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb11, i64 0, i64 %indvars.iv.next516
  %5 = load %struct.basic_block_def** %arrayidx12, align 8, !tbaa !5
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 0, i32 0), align 16, !tbaa !47
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 1, i32 0), align 16, !tbaa !47
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 2, i32 0), align 16, !tbaa !47
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 3, i32 0), align 16, !tbaa !47
  %6 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !5
  store %struct.rtx_def* %6, %struct.rtx_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 4, i32 0), align 16, !tbaa !47
  store i32 4, i32* @peep2_current, align 4, !tbaa !1
  %global_live_at_end = getelementptr inbounds %struct.basic_block_def* %5, i64 0, i32 9
  %7 = load %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !50
  call void @bitmap_copy(%struct.bitmap_head_def* %call.4, %struct.bitmap_head_def* %7) #4
  %8 = load %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 4, i32 1), align 8, !tbaa !49
  call void @bitmap_copy(%struct.bitmap_head_def* %8, %struct.bitmap_head_def* %call.4) #4
  %call22 = call %struct.propagate_block_info* @init_propagate_block_info(%struct.basic_block_def* %5, %struct.bitmap_head_def* %call.4, %struct.bitmap_head_def* null, %struct.bitmap_head_def* null, i32 1) #4
  %end = getelementptr inbounds %struct.basic_block_def* %5, i64 0, i32 1
  %9 = load %struct.rtx_def** %end, align 8, !tbaa !46
  br label %for.cond23

for.cond23:                                       ; preds = %if.end304, %for.body9
  %bb.0 = phi %struct.basic_block_def* [ %5, %for.body9 ], [ %bb.4, %if.end304 ]
  %do_rebuild_jump_labels.1 = phi i8 [ %do_rebuild_jump_labels.0501, %for.body9 ], [ %do_rebuild_jump_labels.2, %if.end304 ]
  %do_cleanup_cfg.1 = phi i8 [ %do_cleanup_cfg.0502, %for.body9 ], [ %do_cleanup_cfg.5, %if.end304 ]
  %insn.0 = phi %struct.rtx_def* [ %9, %for.body9 ], [ %10, %if.end304 ]
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 0
  %bf.load = load i32* %11, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom25462 = zext i32 %bf.clear to i64
  %arrayidx26 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom25462
  %12 = load i8* %arrayidx26, align 1, !tbaa !7
  %cmp27 = icmp eq i8 %12, 105
  br i1 %cmp27, label %if.then, label %if.end304

if.then:                                          ; preds = %for.cond23
  %13 = load i32* @peep2_current, align 4, !tbaa !1
  %dec = add nsw i32 %13, -1
  %cmp29 = icmp slt i32 %13, 1
  %.dec = select i1 %cmp29, i32 4, i32 %dec
  store i32 %.dec, i32* @peep2_current, align 4, !tbaa !1
  %idxprom32 = sext i32 %.dec to i64
  %insn34 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom32, i32 0
  store %struct.rtx_def* %insn.0, %struct.rtx_def** %insn34, align 16, !tbaa !47
  %call35 = call %struct.rtx_def* @propagate_one_insn(%struct.propagate_block_info* %call22, %struct.rtx_def* %insn.0) #4
  %14 = load i32* @peep2_current, align 4, !tbaa !1
  %idxprom36 = sext i32 %14 to i64
  %live_before38 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom36, i32 1
  %15 = load %struct.bitmap_head_def** %live_before38, align 8, !tbaa !49
  call void @bitmap_copy(%struct.bitmap_head_def* %15, %struct.bitmap_head_def* %call.4) #4
  %arrayidx40 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 3
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx41, align 8, !tbaa !5
  %call42 = call %struct.rtx_def* @peephole2_insns(%struct.rtx_def* %16, %struct.rtx_def* %insn.0, i32* %match_len) #4
  %cmp43 = icmp eq %struct.rtx_def* %call42, null
  br i1 %cmp43, label %if.end304, label %for.cond46.preheader

for.cond46.preheader:                             ; preds = %if.then
  %17 = load i32* %match_len, align 4, !tbaa !1
  %cmp47477 = icmp slt i32 %17, 0
  %.pre.pre = load i32* @peep2_current, align 4, !tbaa !1
  br i1 %cmp47477, label %for.end153, label %for.body49

for.cond46:                                       ; preds = %for.body49
  %inc152 = add nsw i32 %i.2478, 1
  %cmp47 = icmp slt i32 %i.2478, %17
  br i1 %cmp47, label %for.body49, label %for.end153

for.body49:                                       ; preds = %for.cond46.preheader, %for.cond46
  %i.2478 = phi i32 [ %inc152, %for.cond46 ], [ 0, %for.cond46.preheader ]
  %add = add nsw i32 %.pre.pre, %i.2478
  %cmp51 = icmp sgt i32 %add, 4
  %sub54 = add nsw i32 %add, -5
  %sub54.add = select i1 %cmp51, i32 %sub54, i32 %add
  %idxprom56 = sext i32 %sub54.add to i64
  %insn58 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom56, i32 0
  %18 = load %struct.rtx_def** %insn58, align 16, !tbaa !47
  %19 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 0
  %bf.load59 = load i32* %19, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %cmp61 = icmp eq i32 %bf.clear60, 34
  br i1 %cmp61, label %if.end64, label %for.cond46

if.end64:                                         ; preds = %for.body49
  %20 = getelementptr inbounds %struct.rtx_def* %call42, i64 0, i32 0
  %bf.load65 = load i32* %20, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  switch i32 %bf.clear66, label %if.then99 [
    i32 24, label %if.then69
    i32 34, label %if.end98
  ]

if.then69:                                        ; preds = %if.end64
  %arrayidx71 = getelementptr inbounds %struct.rtx_def* %call42, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtvec_def**
  %21 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %num_elem = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 0
  %22 = load i32* %num_elem, align 4, !tbaa !27
  %23 = sext i32 %22 to i64
  br label %for.cond73

for.cond73:                                       ; preds = %for.body76, %if.then69
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body76 ], [ %23, %if.then69 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %24 = trunc i64 %indvars.iv to i32
  %cmp74 = icmp sgt i32 %24, 0
  br i1 %cmp74, label %for.body76, label %if.then99

for.body76:                                       ; preds = %for.cond73
  %arrayidx82 = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 1, i64 %indvars.iv.next
  %25 = load %struct.rtx_def** %arrayidx82, align 8, !tbaa !5
  %26 = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 0
  %bf.load83 = load i32* %26, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 34
  br i1 %cmp85, label %if.end98, label %for.cond73

if.end98:                                         ; preds = %for.body76, %if.end64
  %new_insn.0 = phi %struct.rtx_def* [ %call42, %if.end64 ], [ %25, %for.body76 ]
  %tobool = icmp eq %struct.rtx_def* %new_insn.0, null
  br i1 %tobool, label %if.then99, label %if.end100

if.then99:                                        ; preds = %if.end64, %if.end98, %for.cond73
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 3130, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.peephole2_optimize, i64 0, i64 0)) #6
  unreachable

if.end100:                                        ; preds = %if.end98
  %arrayidx102 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 7
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %27 = load %struct.rtx_def** %rtx103, align 8, !tbaa !5
  %28 = getelementptr inbounds %struct.rtx_def* %new_insn.0, i64 0, i32 1, i64 7, i32 0
  %.c = ptrtoint %struct.rtx_def* %27 to i64
  store i64 %.c, i64* %28, align 8, !tbaa !5
  %arrayidx108 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 6
  %note50.0.in479 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**
  %note50.0480 = load %struct.rtx_def** %note50.0.in479, align 8
  %tobool111481 = icmp eq %struct.rtx_def* %note50.0480, null
  br i1 %tobool111481, label %while.cond.preheader, label %for.body112.lr.ph

for.body112.lr.ph:                                ; preds = %if.end100
  %arrayidx122 = getelementptr inbounds %struct.rtx_def* %new_insn.0, i64 0, i32 1, i64 6
  %rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**
  %29 = getelementptr inbounds %union.rtunion_def* %arrayidx122, i64 0, i32 0
  br label %for.body112

for.cond110.while.cond.preheader_crit_edge:       ; preds = %for.inc128
  %.pre519 = load i32* %match_len, align 4, !tbaa !1
  %.pre520 = load i32* @peep2_current, align 4, !tbaa !1
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %for.cond110.while.cond.preheader_crit_edge, %if.end100
  %30 = phi i32 [ %.pre520, %for.cond110.while.cond.preheader_crit_edge ], [ %.pre.pre, %if.end100 ]
  %31 = phi i32 [ %.pre519, %for.cond110.while.cond.preheader_crit_edge ], [ %17, %if.end100 ]
  br label %while.cond

for.body112:                                      ; preds = %for.body112.lr.ph, %for.inc128
  %note50.0482 = phi %struct.rtx_def* [ %note50.0480, %for.body112.lr.ph ], [ %note50.0, %for.inc128 ]
  %32 = getelementptr inbounds %struct.rtx_def* %note50.0482, i64 0, i32 0
  %bf.load113 = load i32* %32, align 8
  %bf.lshr = lshr i32 %bf.load113, 16
  %bf.clear114 = and i32 %bf.lshr, 255
  switch i32 %bf.clear114, label %for.inc128 [
    i32 26, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
  ]

sw.bb:                                            ; preds = %for.body112, %for.body112, %for.body112
  %33 = load %struct.rtx_def** %rtx123, align 8
  %arrayidx119 = getelementptr inbounds %struct.rtx_def* %note50.0482, i64 0, i32 1, i64 0
  %rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**
  %34 = load %struct.rtx_def** %rtx120, align 8, !tbaa !5
  %call124 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 %bf.clear114, %struct.rtx_def* %34, %struct.rtx_def* %33) #4
  %call124.c = ptrtoint %struct.rtx_def* %call124 to i64
  store i64 %call124.c, i64* %29, align 8, !tbaa !5
  br label %for.inc128

for.inc128:                                       ; preds = %for.body112, %sw.bb
  %arrayidx130 = getelementptr inbounds %struct.rtx_def* %note50.0482, i64 0, i32 1, i64 1
  %note50.0.in = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**
  %note50.0 = load %struct.rtx_def** %note50.0.in, align 8
  %tobool111 = icmp eq %struct.rtx_def* %note50.0, null
  br i1 %tobool111, label %for.cond110.while.cond.preheader_crit_edge, label %for.body112

while.cond:                                       ; preds = %while.cond.preheader, %while.body
  %i.3 = phi i32 [ %inc133, %while.body ], [ %i.2478, %while.cond.preheader ]
  %inc133 = add nsw i32 %i.3, 1
  %cmp134 = icmp slt i32 %i.3, %31
  br i1 %cmp134, label %while.body, label %for.end153

while.body:                                       ; preds = %while.cond
  %add136 = add nsw i32 %30, %inc133
  %cmp137 = icmp sgt i32 %add136, 4
  %sub140 = add nsw i32 %add136, -5
  %sub140.add136 = select i1 %cmp137, i32 %sub140, i32 %add136
  %idxprom142 = sext i32 %sub140.add136 to i64
  %insn144 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom142, i32 0
  %35 = load %struct.rtx_def** %insn144, align 16, !tbaa !47
  %36 = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 0
  %bf.load145 = load i32* %36, align 8
  %bf.clear146 = and i32 %bf.load145, 65535
  %cmp147 = icmp eq i32 %bf.clear146, 34
  br i1 %cmp147, label %if.then149, label %while.cond

if.then149:                                       ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 3160, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.peephole2_optimize, i64 0, i64 0)) #6
  unreachable

for.end153:                                       ; preds = %for.cond46, %while.cond, %for.cond46.preheader
  %37 = phi i32 [ %.pre.pre, %for.cond46.preheader ], [ %30, %while.cond ], [ %.pre.pre, %for.cond46 ]
  %38 = phi i32 [ %17, %for.cond46.preheader ], [ %31, %while.cond ], [ %17, %for.cond46 ]
  %add154 = add nsw i32 %37, %38
  %cmp155 = icmp sgt i32 %add154, 4
  %sub158 = add nsw i32 %add154, -5
  %sub158.add154 = select i1 %cmp155, i32 %sub158, i32 %add154
  %idxprom160 = sext i32 %sub158.add154 to i64
  %insn162 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom160, i32 0
  %39 = load %struct.rtx_def** %insn162, align 16, !tbaa !47
  %call163 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %39, i32 23, %struct.rtx_def* null) #4
  %40 = load %struct.rtx_def** %insn162, align 16, !tbaa !47
  %call167 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call42, %struct.rtx_def* %40) #4
  %41 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %42 = load %struct.rtx_def** %insn162, align 16, !tbaa !47
  call void @delete_insn_chain(%struct.rtx_def* %insn.0, %struct.rtx_def* %42) #4
  %tobool174 = icmp eq %struct.rtx_def* %call163, null
  br i1 %tobool174, label %if.end253, label %if.then175

if.then175:                                       ; preds = %for.end153
  %succ = getelementptr inbounds %struct.basic_block_def* %bb.0, i64 0, i32 5
  %eh_edge.0483 = load %struct.edge_def** %succ, align 8
  %tobool177484 = icmp eq %struct.edge_def* %eh_edge.0483, null
  br i1 %tobool177484, label %for.cond184.preheader, label %for.body178

for.cond176:                                      ; preds = %for.body178
  %succ_next = getelementptr inbounds %struct.edge_def* %eh_edge.0485, i64 0, i32 1
  %eh_edge.0 = load %struct.edge_def** %succ_next, align 8
  %tobool177 = icmp eq %struct.edge_def* %eh_edge.0, null
  br i1 %tobool177, label %for.cond184.preheader, label %for.body178

for.cond184.preheader:                            ; preds = %for.cond176, %for.body178, %if.then175
  %eh_edge.1.ph = phi %struct.edge_def* [ null, %if.then175 ], [ null, %for.cond176 ], [ %eh_edge.0485, %for.body178 ]
  %cmp185487 = icmp eq %struct.rtx_def* %call167, %41
  br i1 %cmp185487, label %for.end245, label %for.body187.lr.ph

for.body187.lr.ph:                                ; preds = %for.cond184.preheader
  %arrayidx203 = getelementptr inbounds %struct.rtx_def* %call163, i64 0, i32 1, i64 0
  %rtx204 = bitcast %union.rtunion_def* %arrayidx203 to %struct.rtx_def**
  br label %for.body187

for.body178:                                      ; preds = %if.then175, %for.cond176
  %eh_edge.0485 = phi %struct.edge_def* [ %eh_edge.0, %for.cond176 ], [ %eh_edge.0483, %if.then175 ]
  %flags = getelementptr inbounds %struct.edge_def* %eh_edge.0485, i64 0, i32 6
  %43 = load i32* %flags, align 4, !tbaa !51
  %and = and i32 %43, 8
  %tobool179 = icmp eq i32 %and, 0
  br i1 %tobool179, label %for.cond176, label %for.cond184.preheader

for.body187:                                      ; preds = %for.body187.lr.ph, %for.inc241
  %eh_edge.1492 = phi %struct.edge_def* [ %eh_edge.1.ph, %for.body187.lr.ph ], [ %eh_edge.2, %for.inc241 ]
  %x.0490 = phi %struct.rtx_def* [ %call167, %for.body187.lr.ph ], [ %57, %for.inc241 ]
  %do_cleanup_cfg.2489 = phi i8 [ %do_cleanup_cfg.1, %for.body187.lr.ph ], [ %do_cleanup_cfg.3, %for.inc241 ]
  %bb.1488 = phi %struct.basic_block_def* [ %bb.0, %for.body187.lr.ph ], [ %bb.2, %for.inc241 ]
  %44 = getelementptr inbounds %struct.rtx_def* %x.0490, i64 0, i32 0
  %bf.load188 = load i32* %44, align 8
  %bf.clear189 = and i32 %bf.load188, 65535
  %cmp190 = icmp eq i32 %bf.clear189, 34
  br i1 %cmp190, label %if.then201, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body187
  %45 = load i32* @flag_non_call_exceptions, align 4, !tbaa !1
  %tobool192 = icmp eq i32 %45, 0
  br i1 %tobool192, label %for.inc241, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %arrayidx194 = getelementptr inbounds %struct.rtx_def* %x.0490, i64 0, i32 1, i64 3
  %rtx195 = bitcast %union.rtunion_def* %arrayidx194 to %struct.rtx_def**
  %46 = load %struct.rtx_def** %rtx195, align 8, !tbaa !5
  %call196 = call i32 @may_trap_p(%struct.rtx_def* %46) #4
  %tobool197 = icmp eq i32 %call196, 0
  br i1 %tobool197, label %for.inc241, label %land.lhs.true198

land.lhs.true198:                                 ; preds = %land.lhs.true
  %call199 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %x.0490, i32 23, %struct.rtx_def* null) #4
  %tobool200 = icmp eq %struct.rtx_def* %call199, null
  br i1 %tobool200, label %if.then201, label %for.inc241

if.then201:                                       ; preds = %land.lhs.true198, %for.body187
  %47 = load %struct.rtx_def** %rtx204, align 8, !tbaa !5
  %arrayidx206 = getelementptr inbounds %struct.rtx_def* %x.0490, i64 0, i32 1, i64 6
  %rtx207 = bitcast %union.rtunion_def* %arrayidx206 to %struct.rtx_def**
  %48 = load %struct.rtx_def** %rtx207, align 8, !tbaa !5
  %call208 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 23, %struct.rtx_def* %47, %struct.rtx_def* %48) #4
  %49 = getelementptr inbounds %union.rtunion_def* %arrayidx206, i64 0, i32 0
  %call208.c = ptrtoint %struct.rtx_def* %call208 to i64
  store i64 %call208.c, i64* %49, align 8, !tbaa !5
  %end212 = getelementptr inbounds %struct.basic_block_def* %bb.1488, i64 0, i32 1
  %50 = load %struct.rtx_def** %end212, align 8, !tbaa !46
  %cmp213 = icmp ne %struct.rtx_def* %x.0490, %50
  %tobool216 = icmp ne %struct.edge_def* %eh_edge.1492, null
  %or.cond = and i1 %cmp213, %tobool216
  br i1 %or.cond, label %if.then217, label %for.inc241

if.then217:                                       ; preds = %if.then201
  %call219 = call %struct.edge_def* @split_block(%struct.basic_block_def* %bb.1488, %struct.rtx_def* %x.0490) #4
  %bf.load220 = load i32* %44, align 8
  %bf.clear221 = and i32 %bf.load220, 65535
  %cmp222 = icmp eq i32 %bf.clear221, 34
  %. = select i1 %cmp222, i32 14, i32 10
  %src = getelementptr inbounds %struct.edge_def* %call219, i64 0, i32 2
  %51 = load %struct.basic_block_def** %src, align 8, !tbaa !53
  %dest = getelementptr inbounds %struct.edge_def* %eh_edge.1492, i64 0, i32 3
  %52 = load %struct.basic_block_def** %dest, align 8, !tbaa !54
  %call226 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %51, %struct.basic_block_def* %52, i32 %.) #4
  %probability = getelementptr inbounds %struct.edge_def* %eh_edge.1492, i64 0, i32 7
  %53 = load i32* %probability, align 4, !tbaa !55
  %probability227 = getelementptr inbounds %struct.edge_def* %call226, i64 0, i32 7
  store i32 %53, i32* %probability227, align 4, !tbaa !55
  %sub229 = sub nsw i32 10000, %53
  %probability230 = getelementptr inbounds %struct.edge_def* %call219, i64 0, i32 7
  store i32 %sub229, i32* %probability230, align 4, !tbaa !55
  %dest231 = getelementptr inbounds %struct.edge_def* %call219, i64 0, i32 3
  %54 = load %struct.basic_block_def** %dest231, align 8, !tbaa !54
  %call232 = call zeroext i1 @purge_dead_edges(%struct.basic_block_def* %54) #4
  %conv233 = zext i1 %call232 to i8
  %55 = and i8 %do_cleanup_cfg.2489, 1
  %or236 = or i8 %conv233, %55
  %56 = load %struct.basic_block_def** %src, align 8, !tbaa !53
  br label %for.inc241

for.inc241:                                       ; preds = %land.lhs.true198, %land.lhs.true, %lor.lhs.false, %if.then217, %if.then201
  %bb.2 = phi %struct.basic_block_def* [ %56, %if.then217 ], [ %bb.1488, %if.then201 ], [ %bb.1488, %land.lhs.true198 ], [ %bb.1488, %land.lhs.true ], [ %bb.1488, %lor.lhs.false ]
  %do_cleanup_cfg.3 = phi i8 [ %or236, %if.then217 ], [ %do_cleanup_cfg.2489, %if.then201 ], [ %do_cleanup_cfg.2489, %land.lhs.true198 ], [ %do_cleanup_cfg.2489, %land.lhs.true ], [ %do_cleanup_cfg.2489, %lor.lhs.false ]
  %eh_edge.2 = phi %struct.edge_def* [ %call226, %if.then217 ], [ %eh_edge.1492, %if.then201 ], [ %eh_edge.1492, %land.lhs.true198 ], [ %eh_edge.1492, %land.lhs.true ], [ %eh_edge.1492, %lor.lhs.false ]
  %arrayidx243 = getelementptr inbounds %struct.rtx_def* %x.0490, i64 0, i32 1, i64 1
  %rtx244 = bitcast %union.rtunion_def* %arrayidx243 to %struct.rtx_def**
  %57 = load %struct.rtx_def** %rtx244, align 8, !tbaa !5
  %cmp185 = icmp eq %struct.rtx_def* %57, %41
  br i1 %cmp185, label %for.end245, label %for.body187

for.end245:                                       ; preds = %for.inc241, %for.cond184.preheader
  %do_cleanup_cfg.2.lcssa = phi i8 [ %do_cleanup_cfg.1, %for.cond184.preheader ], [ %do_cleanup_cfg.3, %for.inc241 ]
  %bb.1.lcssa = phi %struct.basic_block_def* [ %bb.0, %for.cond184.preheader ], [ %bb.2, %for.inc241 ]
  %call246 = call zeroext i1 @purge_dead_edges(%struct.basic_block_def* %bb.1.lcssa) #4
  %conv247 = zext i1 %call246 to i8
  %58 = and i8 %do_cleanup_cfg.2.lcssa, 1
  %or250 = or i8 %conv247, %58
  br label %if.end253

if.end253:                                        ; preds = %for.end153, %for.end245
  %bb.3 = phi %struct.basic_block_def* [ %bb.1.lcssa, %for.end245 ], [ %bb.0, %for.end153 ]
  %do_cleanup_cfg.4 = phi i8 [ %or250, %for.end245 ], [ %do_cleanup_cfg.1, %for.end153 ]
  %inc254 = add nsw i32 %sub158.add154, 1
  %cmp255 = icmp sgt i32 %sub158.add154, 3
  %.inc254 = select i1 %cmp255, i32 0, i32 %inc254
  %idxprom259 = sext i32 %.inc254 to i64
  %live_before261 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom259, i32 1
  %59 = load %struct.bitmap_head_def** %live_before261, align 8, !tbaa !49
  call void @bitmap_copy(%struct.bitmap_head_def* %call.4, %struct.bitmap_head_def* %59) #4
  br label %do.body

do.body:                                          ; preds = %if.end282, %if.end253
  %x.1 = phi %struct.rtx_def* [ %call167, %if.end253 ], [ %63, %if.end282 ]
  %i.5 = phi i32 [ %.inc254, %if.end253 ], [ %i.6, %if.end282 ]
  %60 = getelementptr inbounds %struct.rtx_def* %x.1, i64 0, i32 0
  %bf.load262 = load i32* %60, align 8
  %bf.clear263 = and i32 %bf.load262, 65535
  %idxprom264463 = zext i32 %bf.clear263 to i64
  %arrayidx265 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom264463
  %61 = load i8* %arrayidx265, align 1, !tbaa !7
  %cmp267 = icmp eq i8 %61, 105
  br i1 %cmp267, label %if.then269, label %if.end282

if.then269:                                       ; preds = %do.body
  %dec270 = add nsw i32 %i.5, -1
  %cmp271 = icmp slt i32 %i.5, 1
  %.dec270 = select i1 %cmp271, i32 4, i32 %dec270
  %idxprom275 = sext i32 %.dec270 to i64
  %insn277 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom275, i32 0
  store %struct.rtx_def* %x.1, %struct.rtx_def** %insn277, align 16, !tbaa !47
  %call278 = call %struct.rtx_def* @propagate_one_insn(%struct.propagate_block_info* %call22, %struct.rtx_def* %x.1) #4
  %live_before281 = getelementptr inbounds [5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 %idxprom275, i32 1
  %62 = load %struct.bitmap_head_def** %live_before281, align 8, !tbaa !49
  call void @bitmap_copy(%struct.bitmap_head_def* %62, %struct.bitmap_head_def* %call.4) #4
  br label %if.end282

if.end282:                                        ; preds = %if.then269, %do.body
  %i.6 = phi i32 [ %.dec270, %if.then269 ], [ %i.5, %do.body ]
  %arrayidx284 = getelementptr inbounds %struct.rtx_def* %x.1, i64 0, i32 1, i64 1
  %rtx285 = bitcast %union.rtunion_def* %arrayidx284 to %struct.rtx_def**
  %63 = load %struct.rtx_def** %rtx285, align 8, !tbaa !5
  %cmp286 = icmp eq %struct.rtx_def* %63, %10
  br i1 %cmp286, label %do.end, label %do.body

do.end:                                           ; preds = %if.end282
  store i32 %i.6, i32* @peep2_current, align 4, !tbaa !1
  %cmp289495 = icmp eq %struct.rtx_def* %call167, %41
  br i1 %cmp289495, label %if.end304, label %for.body291

for.body291:                                      ; preds = %do.end, %for.inc298
  %x.2496 = phi %struct.rtx_def* [ %65, %for.inc298 ], [ %call167, %do.end ]
  %64 = getelementptr inbounds %struct.rtx_def* %x.2496, i64 0, i32 0
  %bf.load292 = load i32* %64, align 8
  %bf.clear293 = and i32 %bf.load292, 65535
  %cmp294 = icmp eq i32 %bf.clear293, 33
  br i1 %cmp294, label %if.end304, label %for.inc298

for.inc298:                                       ; preds = %for.body291
  %arrayidx300 = getelementptr inbounds %struct.rtx_def* %x.2496, i64 0, i32 1, i64 1
  %rtx301 = bitcast %union.rtunion_def* %arrayidx300 to %struct.rtx_def**
  %65 = load %struct.rtx_def** %rtx301, align 8, !tbaa !5
  %cmp289 = icmp eq %struct.rtx_def* %65, %41
  br i1 %cmp289, label %if.end304, label %for.body291

if.end304:                                        ; preds = %for.inc298, %for.body291, %do.end, %if.then, %for.cond23
  %bb.4 = phi %struct.basic_block_def* [ %bb.0, %if.then ], [ %bb.0, %for.cond23 ], [ %bb.3, %do.end ], [ %bb.3, %for.body291 ], [ %bb.3, %for.inc298 ]
  %do_rebuild_jump_labels.2 = phi i8 [ %do_rebuild_jump_labels.1, %if.then ], [ %do_rebuild_jump_labels.1, %for.cond23 ], [ %do_rebuild_jump_labels.1, %do.end ], [ %do_rebuild_jump_labels.1, %for.inc298 ], [ 1, %for.body291 ]
  %do_cleanup_cfg.5 = phi i8 [ %do_cleanup_cfg.1, %if.then ], [ %do_cleanup_cfg.1, %for.cond23 ], [ %do_cleanup_cfg.4, %do.end ], [ %do_cleanup_cfg.4, %for.body291 ], [ %do_cleanup_cfg.4, %for.inc298 ]
  %head = getelementptr inbounds %struct.basic_block_def* %bb.4, i64 0, i32 0
  %66 = load %struct.rtx_def** %head, align 8, !tbaa !44
  %cmp305 = icmp eq %struct.rtx_def* %insn.0, %66
  br i1 %cmp305, label %for.end310, label %for.cond23

for.end310:                                       ; preds = %if.end304
  call void @free_propagate_block_info(%struct.propagate_block_info* %call22) #4
  %67 = trunc i64 %indvars.iv.next516 to i32
  %cmp8 = icmp sgt i32 %67, 0
  br i1 %cmp8, label %for.body9, label %for.cond314.preheader

if.then323:                                       ; preds = %for.cond314.preheader
  call void @bitmap_clear(%struct.bitmap_head_def* %3) #4
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 0, i32 1), align 8, !tbaa !49
  br label %for.inc333

for.inc333:                                       ; preds = %for.cond314.preheader, %if.then323
  %68 = load %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 1, i32 1), align 8, !tbaa !49
  %tobool322.1 = icmp eq %struct.bitmap_head_def* %68, null
  br i1 %tobool322.1, label %for.inc333.1, label %if.then323.1

if.then338:                                       ; preds = %for.inc333.4
  call void @bitmap_clear(%struct.bitmap_head_def* %call.4) #4
  br label %do.end341

do.end341:                                        ; preds = %for.inc333.4, %if.then338
  %69 = and i8 %do_rebuild_jump_labels.0.lcssa, 1
  %tobool342 = icmp eq i8 %69, 0
  br i1 %tobool342, label %if.end345, label %if.then343

if.then343:                                       ; preds = %do.end341
  %call344 = call %struct.rtx_def* @get_insns() #4
  call void @rebuild_jump_labels(%struct.rtx_def* %call344) #4
  br label %if.end345

if.end345:                                        ; preds = %do.end341, %if.then343
  %70 = and i8 %do_cleanup_cfg.0.lcssa, 1
  %tobool346 = icmp eq i8 %70, 0
  br i1 %tobool346, label %if.end349, label %if.then347

if.then347:                                       ; preds = %if.end345
  %call348 = call zeroext i1 @cleanup_cfg(i32 0) #4
  call void @update_life_info(%struct.simple_bitmap_def* null, i32 2, i32 1) #4
  br label %if.end349

if.end349:                                        ; preds = %if.end345, %if.then347
  call void @llvm.lifetime.end(i64 144, i8* %0) #4
  ret void

if.then323.1:                                     ; preds = %for.inc333
  call void @bitmap_clear(%struct.bitmap_head_def* %68) #4
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 1, i32 1), align 8, !tbaa !49
  br label %for.inc333.1

for.inc333.1:                                     ; preds = %if.then323.1, %for.inc333
  %71 = load %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 2, i32 1), align 8, !tbaa !49
  %tobool322.2 = icmp eq %struct.bitmap_head_def* %71, null
  br i1 %tobool322.2, label %for.inc333.2, label %if.then323.2

if.then323.2:                                     ; preds = %for.inc333.1
  call void @bitmap_clear(%struct.bitmap_head_def* %71) #4
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 2, i32 1), align 8, !tbaa !49
  br label %for.inc333.2

for.inc333.2:                                     ; preds = %if.then323.2, %for.inc333.1
  %72 = load %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 3, i32 1), align 8, !tbaa !49
  %tobool322.3 = icmp eq %struct.bitmap_head_def* %72, null
  br i1 %tobool322.3, label %for.inc333.3, label %if.then323.3

if.then323.3:                                     ; preds = %for.inc333.2
  call void @bitmap_clear(%struct.bitmap_head_def* %72) #4
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 3, i32 1), align 8, !tbaa !49
  br label %for.inc333.3

for.inc333.3:                                     ; preds = %if.then323.3, %for.inc333.2
  %73 = load %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 4, i32 1), align 8, !tbaa !49
  %tobool322.4 = icmp eq %struct.bitmap_head_def* %73, null
  br i1 %tobool322.4, label %for.inc333.4, label %if.then323.4

if.then323.4:                                     ; preds = %for.inc333.3
  call void @bitmap_clear(%struct.bitmap_head_def* %73) #4
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds ([5 x %struct.peep2_insn_data]* @peep2_insn_data, i64 0, i64 4, i32 1), align 8, !tbaa !49
  br label %for.inc333.4

for.inc333.4:                                     ; preds = %if.then323.4, %for.inc333.3
  %tobool337 = icmp eq %struct.bitmap_head_def* %call.4, null
  br i1 %tobool337, label %do.end341, label %if.then338
}

declare %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def*) #1

declare void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #1

declare %struct.propagate_block_info* @init_propagate_block_info(%struct.basic_block_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32) #1

declare %struct.rtx_def* @propagate_one_insn(%struct.propagate_block_info*, %struct.rtx_def*) #1

declare %struct.rtx_def* @peephole2_insns(%struct.rtx_def*, %struct.rtx_def*, i32*) #1

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @delete_insn_chain(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @may_trap_p(%struct.rtx_def*) #1

declare %struct.edge_def* @split_block(%struct.basic_block_def*, %struct.rtx_def*) #1

declare %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #1

declare zeroext i1 @purge_dead_edges(%struct.basic_block_def*) #1

declare void @free_propagate_block_info(%struct.propagate_block_info*) #1

declare void @bitmap_clear(%struct.bitmap_head_def*) #1

declare void @rebuild_jump_labels(%struct.rtx_def*) #1

declare zeroext i1 @cleanup_cfg(i32) #1

declare %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @set_noop_p(%struct.rtx_def*) #1

declare %struct.rtx_def* @try_split(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare void @cleanup_subreg_operands(%struct.rtx_def*) #1

declare i32 @swap_commutative_operands_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @swap_condition(i32) #1

declare %struct.rtx_def* @simplify_gen_binary(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @simplify_gen_unary(i32, i32, %struct.rtx_def*, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @simplify_subreg(i32, %struct.rtx_def*, i32, i32) #1

declare i32 @mode_for_extraction(i32, i32) #1

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #1

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"int", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !6, i64 0}
!6 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!7 = metadata !{metadata !3, metadata !3, i64 0}
!8 = metadata !{metadata !9, metadata !9, i64 0}
!9 = metadata !{metadata !"short", metadata !3, i64 0}
!10 = metadata !{metadata !11, metadata !6, i64 1000}
!11 = metadata !{metadata !"recog_data", metadata !3, i64 0, metadata !3, i64 240, metadata !3, i64 480, metadata !3, i64 720, metadata !3, i64 840, metadata !3, i64 960, metadata !3, i64 992, metadata !3, i64 996, metadata !3, i64 997, metadata !3, i64 998, metadata !6, i64 1000}
!12 = metadata !{metadata !11, metadata !3, i64 996}
!13 = metadata !{metadata !11, metadata !3, i64 998}
!14 = metadata !{metadata !11, metadata !3, i64 997}
!15 = metadata !{metadata !16, metadata !3, i64 32}
!16 = metadata !{metadata !"insn_data", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24, metadata !3, i64 32, metadata !3, i64 33, metadata !3, i64 34, metadata !3, i64 35}
!17 = metadata !{metadata !16, metadata !3, i64 34}
!18 = metadata !{metadata !16, metadata !3, i64 33}
!19 = metadata !{metadata !16, metadata !6, i64 24}
!20 = metadata !{metadata !21, metadata !6, i64 8}
!21 = metadata !{metadata !"insn_operand_data", metadata !6, i64 0, metadata !6, i64 8, metadata !3, i64 16, metadata !3, i64 18, metadata !3, i64 19}
!22 = metadata !{metadata !23, metadata !2, i64 0}
!23 = metadata !{metadata !"funny_match", metadata !2, i64 0, metadata !2, i64 4}
!24 = metadata !{metadata !23, metadata !2, i64 4}
!25 = metadata !{metadata !26, metadata !26, i64 0}
!26 = metadata !{metadata !"long long", metadata !3, i64 0}
!27 = metadata !{metadata !28, metadata !2, i64 0}
!28 = metadata !{metadata !"rtvec_def", metadata !2, i64 0, metadata !3, i64 8}
!29 = metadata !{metadata !30, metadata !6, i64 0}
!30 = metadata !{metadata !"change_t", metadata !6, i64 0, metadata !2, i64 8, metadata !6, i64 16, metadata !6, i64 24}
!31 = metadata !{metadata !30, metadata !6, i64 16}
!32 = metadata !{metadata !30, metadata !6, i64 24}
!33 = metadata !{metadata !30, metadata !2, i64 8}
!34 = metadata !{metadata !35, metadata !6, i64 0}
!35 = metadata !{metadata !"validate_replace_src_data", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16}
!36 = metadata !{metadata !35, metadata !6, i64 8}
!37 = metadata !{metadata !35, metadata !6, i64 16}
!38 = metadata !{metadata !39, metadata !3, i64 8}
!39 = metadata !{metadata !"operand_alternative", metadata !6, i64 0, metadata !3, i64 8, metadata !2, i64 12, metadata !2, i64 16, metadata !2, i64 20, metadata !2, i64 24, metadata !2, i64 24, metadata !2, i64 24, metadata !2, i64 24, metadata !2, i64 24, metadata !2, i64 24, metadata !2, i64 24, metadata !2, i64 24}
!40 = metadata !{metadata !39, metadata !6, i64 0}
!41 = metadata !{metadata !39, metadata !2, i64 16}
!42 = metadata !{metadata !39, metadata !2, i64 20}
!43 = metadata !{metadata !39, metadata !2, i64 12}
!44 = metadata !{metadata !45, metadata !6, i64 0}
!45 = metadata !{metadata !"basic_block_def", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24, metadata !6, i64 32, metadata !6, i64 40, metadata !6, i64 48, metadata !6, i64 56, metadata !6, i64 64, metadata !6, i64 72, metadata !6, i64 80, metadata !2, i64 88, metadata !2, i64 92, metadata !26, i64 96, metadata !2, i64 104, metadata !2, i64 108}
!46 = metadata !{metadata !45, metadata !6, i64 8}
!47 = metadata !{metadata !48, metadata !6, i64 0}
!48 = metadata !{metadata !"peep2_insn_data", metadata !6, i64 0, metadata !6, i64 8}
!49 = metadata !{metadata !48, metadata !6, i64 8}
!50 = metadata !{metadata !45, metadata !6, i64 72}
!51 = metadata !{metadata !52, metadata !2, i64 48}
!52 = metadata !{metadata !"edge_def", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24, metadata !6, i64 32, metadata !6, i64 40, metadata !2, i64 48, metadata !2, i64 52, metadata !26, i64 56}
!53 = metadata !{metadata !52, metadata !6, i64 16}
!54 = metadata !{metadata !52, metadata !6, i64 24}
!55 = metadata !{metadata !52, metadata !2, i64 52}
