	.file	"insn-recog.c.bc"
	.text
	.globl	recog
	.align	16, 0x90
	.type	recog,@function
recog:                                  # @recog
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp4:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp5:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp6:
	.cfi_def_cfa_offset 32
.Ltmp7:
	.cfi_offset %rbx, -32
.Ltmp8:
	.cfi_offset %r14, -24
.Ltmp9:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movq	$0, recog_data+1000(%rip)
	movzbl	(%rbx), %eax
	addq	$-39, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$15, %rax
	ja	.LBB0_64
# BB#1:                                 # %entry
	jmpq	*.LJTI0_0(,%rax,8)
.LBB0_3:                                # %L10828
	movq	%rbx, %rdi
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	recog_32  # TAILCALL
.LBB0_13:                               # %L10832
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB0_64
# BB#14:                                # %L12053
	movslq	16(%rbx), %rcx
	cmpq	$12, %rcx
	jg	.LBB0_18
# BB#15:                                # %L12053
	testq	%r15, %rcx
	jne	.LBB0_64
# BB#16:                                # %L5946
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB0_64
# BB#17:                                # %land.lhs.true78
	cmpq	$0, 8(%rax)
	movq	$513, %rax              # imm = 0x201
	jne	.LBB0_64
	jmp	.LBB0_54
.LBB0_57:                               # %L8952
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	address_operand
	testq	%r15, %rax
	je	.LBB0_64
# BB#58:                                # %if.then247
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r14
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	jne	.LBB0_64
# BB#59:                                # %L12060
	cmpq	$0, 8(%r14)
	jne	.LBB0_60
# BB#65:                                # %L8954
	movq	24(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB0_67
# BB#66:                                # %if.then274
	movl	x86_prefetch_sse(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	testq	%rax, %rax
	movq	$832, %rax              # imm = 0x340
	jne	.LBB0_54
.LBB0_67:                               # %if.end282
	movq	16(%rbx), %r14
.LBB0_60:                               # %L12061
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB0_64
# BB#61:                                # %if.then266
	movq	%r14, recog_data+8(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB0_64
# BB#62:                                # %land.lhs.true292
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB0_64
# BB#63:                                # %land.lhs.true297
	movzbl	target_flags+2(%rip), %ecx
	movq	$833, %rax              # imm = 0x341
	testq	$16, %rcx
	jne	.LBB0_54
	jmp	.LBB0_64
.LBB0_2:                                # %L138
	movq	%rbx, %rdi
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	recog_16  # TAILCALL
.LBB0_4:                                # %L5932
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131138, %rcx           # imm = 0x20042
	jne	.LBB0_64
# BB#5:                                 # %L5933
	movq	8(%rax), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	constant_call_address_operand
	testq	%r15, %rax
	je	.LBB0_7
# BB#6:                                 # %if.then18
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movq	%rax, recog_data+8(%rip)
	movq	$510, %rax              # imm = 0x1FE
	jmp	.LBB0_54
.LBB0_43:                               # %L10833
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	movq	$514, %rax              # imm = 0x202
	jne	.LBB0_54
	jmp	.LBB0_64
.LBB0_45:                               # %L7544
	movq	8(%rbx), %r14
	movzbl	(%r14), %eax
	cmpq	$54, %rax
	jne	.LBB0_47
# BB#46:                                # %land.lhs.true183
	movq	8(%r14), %rax
	cmpq	$1, %rax
	jne	.LBB0_47
# BB#55:                                # %L7545
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB0_64
# BB#56:                                # %land.lhs.true201
	movq	8(%rax), %rax
	cmpq	$5, %rax
	movq	$657, %rax              # imm = 0x291
	je	.LBB0_54
	jmp	.LBB0_64
.LBB0_44:                               # %L10834
	cmpq	$0, 8(%rbx)
	movq	$517, %rax              # imm = 0x205
	jne	.LBB0_64
	jmp	.LBB0_54
.LBB0_47:                               # %if.end189
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	comparison_operator
	testq	%r15, %rax
	je	.LBB0_64
# BB#48:                                # %if.then192
	movq	%r14, recog_data(%rip)
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB0_64
# BB#49:                                # %land.lhs.true214
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB0_64
# BB#50:                                # %L7549
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB0_64
# BB#51:                                # %land.lhs.true227
	cmpq	$0, 8(%rax)
	jne	.LBB0_64
# BB#52:                                # %L7550
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB0_64
# BB#53:                                # %if.then239
	movq	%rbx, recog_data+8(%rip)
	movq	$658, %rax              # imm = 0x292
	jmp	.LBB0_54
.LBB0_18:                               # %L12053
	cmpq	$30, %rcx
	jg	.LBB0_25
# BB#19:                                # %L12053
	andq	%r15, %rcx
	cmpq	$13, %rcx
	jne	.LBB0_64
# BB#20:                                # %L5991
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$5, %rax
	jne	.LBB0_21
# BB#33:                                # %L12059
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB0_64
# BB#34:                                # %if.then107
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data(%rip)
	movq	$521, %rax              # imm = 0x209
	jmp	.LBB0_35
.LBB0_7:                                # %L5937
	movzbl	2(%r14), %eax
	cmpq	$5, %rax
	jne	.LBB0_8
# BB#11:                                # %L12052
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	call_insn_operand
	testq	%r15, %rax
	je	.LBB0_64
# BB#12:                                # %if.then46
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, recog_data+8(%rip)
	movq	$512, %rax              # imm = 0x200
.LBB0_35:                               # %if.then107
	testq	$2, %rcx
	jne	.LBB0_54
	jmp	.LBB0_64
.LBB0_25:                               # %L12053
	andq	%r15, %rcx
	cmpq	$31, %rcx
	je	.LBB0_36
# BB#26:                                # %L12053
	cmpq	$37, %rcx
	jne	.LBB0_27
# BB#41:                                # %L8667
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB0_64
# BB#42:                                # %if.then141
	movzbl	target_flags+1(%rip), %ecx
	movq	%rbx, recog_data(%rip)
	movq	$802, %rax              # imm = 0x322
	testq	$64, %rcx
	jne	.LBB0_54
	jmp	.LBB0_64
.LBB0_8:                                # %L5937
	cmpq	$4, %rax
	jne	.LBB0_64
# BB#9:                                 # %L12051
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	call_insn_operand
	testq	%r15, %rax
	je	.LBB0_64
# BB#10:                                # %if.then34
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, recog_data+8(%rip)
	movq	$511, %rax              # imm = 0x1FF
	jmp	.LBB0_24
.LBB0_36:                               # %L8665
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB0_64
# BB#37:                                # %land.lhs.true122
	cmpq	$0, 8(%rax)
	jne	.LBB0_64
# BB#38:                                # %land.lhs.true127
	movl	target_flags(%rip), %eax
	testq	$16384, %rax            # imm = 0x4000
	je	.LBB0_64
# BB#39:                                # %land.lhs.true127
	testq	%rdx, %rdx
	je	.LBB0_64
# BB#40:                                # %if.then132
	movq	$16, %rax
	movl	%eax, (%rdx)
	movq	$801, %rax              # imm = 0x321
	jmp	.LBB0_54
.LBB0_27:                               # %L12053
	cmpq	$46, %rcx
	jne	.LBB0_64
# BB#28:                                # %L8790
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB0_64
# BB#29:                                # %land.lhs.true156
	cmpq	$0, 8(%rax)
	jne	.LBB0_64
# BB#30:                                # %land.lhs.true161
	movl	target_flags(%rip), %eax
	testq	$1048576, %rax          # imm = 0x100000
	je	.LBB0_64
# BB#31:                                # %land.lhs.true161
	testq	%rdx, %rdx
	je	.LBB0_64
# BB#32:                                # %if.then166
	movq	$16, %rax
	movl	%eax, (%rdx)
	movq	$815, %rax              # imm = 0x32F
	jmp	.LBB0_54
.LBB0_21:                               # %L5991
	cmpq	$4, %rax
	jne	.LBB0_64
# BB#22:                                # %L12058
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB0_64
# BB#23:                                # %if.then98
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data(%rip)
	movq	$520, %rax              # imm = 0x208
.LBB0_24:                               # %if.then98
	testq	$2, %rcx
	je	.LBB0_54
.LBB0_64:                               # %ret0
	movq	%r15, %rax
.LBB0_54:                               # %return
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp10:
	.size	recog, .Ltmp10-recog
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI0_0:
	.quad	.LBB0_3
	.quad	.LBB0_64
	.quad	.LBB0_64
	.quad	.LBB0_64
	.quad	.LBB0_13
	.quad	.LBB0_64
	.quad	.LBB0_64
	.quad	.LBB0_57
	.quad	.LBB0_2
	.quad	.LBB0_64
	.quad	.LBB0_64
	.quad	.LBB0_4
	.quad	.LBB0_43
	.quad	.LBB0_45
	.quad	.LBB0_64
	.quad	.LBB0_44

	.text
	.align	16, 0x90
	.type	recog_16,@function
recog_16:                               # @recog_16
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp17:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp18:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp19:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp20:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp21:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp22:
	.cfi_def_cfa_offset 80
.Ltmp23:
	.cfi_offset %rbx, -48
.Ltmp24:
	.cfi_offset %r12, -40
.Ltmp25:
	.cfi_offset %r13, -32
.Ltmp26:
	.cfi_offset %r14, -24
.Ltmp27:
	.cfi_offset %r15, -16
	movq	%rdi, %r8
	movq	8(%r8), %r15
	movl	(%r15), %eax
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	$16, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	cmpq	$51, %rsi
	jg	.LBB1_3
# BB#1:                                 # %entry
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	addq	$-2, %rsi
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rsi
	cmpq	$16, %rsi
	ja	.LBB1_7
# BB#2:                                 # %entry
	jmpq	*.LJTI1_0(,%rsi,8)
.LBB1_961:                              # %L10855
	movq	%r8, %rbx
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	push_operand
	testq	%r13, %rax
	movq	%r15, %r14
	je	.LBB1_964
# BB#962:                               # %if.then.i11593
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonmemory_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_963
# BB#1151:                              # %recog_3.exit
	movl	target_flags(%rip), %edx
	movq	%r14, recog_data+8(%rip)
	movq	$25, %rcx
	shrq	%cl, %rdx
	andq	$1, %rdx
	orq	$58, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_3:                                # %entry
	cmpq	$52, %rsi
	je	.LBB1_361
# BB#4:                                 # %entry
	cmpq	$57, %rsi
	jne	.LBB1_5
# BB#325:                               # %L10843
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB1_326
# BB#327:                               # %land.lhs.true69
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movl	8(%r15), %eax
	cmpq	$18, %rax
	jne	.LBB1_7
# BB#328:                               # %L146
	movq	16(%r8), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3735626, %rax          # imm = 0x39004A
	jne	.LBB1_7
# BB#329:                               # %L147
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %eax
	addq	$-15, %rax
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$3, %rax
	jbe	.LBB1_4574
# BB#330:
	movq	%r8, %r15
	jmp	.LBB1_331
.LBB1_361:                              # %L10845
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB1_362
# BB#363:                               # %land.lhs.true333
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB1_364
# BB#365:                               # %L222
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movq	16(%r8), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407914, %rcx          # imm = 0x34002A
	jne	.LBB1_7
# BB#366:                               # %land.lhs.true351
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_7
# BB#367:                               # %land.lhs.true355
	movl	16(%rax), %eax
	cmpq	$10, %rax
	jne	.LBB1_7
# BB#368:                               # %L223
	movq	%r8, %r14
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB1_370
# BB#369:                               # %if.then371
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data(%rip)
	movq	$31, %rdx
	testq	$2, %rax
	movq	%r14, %r8
	jne	.LBB1_371
	jmp	.LBB1_4569
.LBB1_5:                                # %entry
	cmpq	$58, %rsi
	jne	.LBB1_6
# BB#350:                               # %L10844
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB1_351
# BB#352:                               # %land.lhs.true246
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	movl	8(%r15), %eax
	cmpq	$18, %rax
	jne	.LBB1_7
# BB#353:                               # %L198
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3801162, %rax          # imm = 0x3A004A
	jne	.LBB1_7
# BB#354:                               # %L199
	movq	%r8, %r12
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB1_4576
# BB#355:                               # %if.then274
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4576
# BB#356:                               # %if.then285
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	movq	%r12, %r8
	je	.LBB1_360
# BB#357:                               # %land.lhs.true293
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_360
# BB#358:                               # %land.lhs.true293
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB1_360
# BB#359:                               # %land.lhs.true315
	movl	(%rbx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	movq	$27, %rdx
	je	.LBB1_4569
.LBB1_360:                              # %if.end326
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_326:
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	jmp	.LBB1_7
.LBB1_362:
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	jmp	.LBB1_7
.LBB1_6:
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	jmp	.LBB1_7
.LBB1_364:
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	jmp	.LBB1_7
.LBB1_351:
	movq	%rdx, 24(%rsp)          # 8-byte Spill
	jmp	.LBB1_7
.LBB1_43:                               # %L10851
	movq	%r8, %rbx
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB1_44
# BB#83:                                # %L10930.i
	movl	8(%r15), %eax
	cmpq	$18, %rax
	movq	%r15, %r14
	jne	.LBB1_45
# BB#84:                                # %L1105.i
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196650, %rcx           # imm = 0x3002A
	movq	%r15, %r14
	jne	.LBB1_45
# BB#85:                                # %land.lhs.true70.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	movq	%r15, %r14
	jne	.LBB1_45
# BB#86:                                # %land.lhs.true74.i
	movl	16(%rax), %eax
	cmpq	$12, %rax
	movq	%r15, %r14
	jne	.LBB1_45
# BB#87:                                # %L1106.i
	movq	8(%rcx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB1_89
# BB#88:                                # %if.then90.i
	movzbl	target_flags(%rip), %eax
	movq	%r14, recog_data(%rip)
	movq	$166, %rdx
	testq	$1, %rax
	jne	.LBB1_4569
.LBB1_89:                               # %if.end99.i
	movq	8(%rbx), %r14
	jmp	.LBB1_45
.LBB1_372:                              # %L10846
	movq	%r8, %r12
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB1_415
# BB#373:                               # %L10846
	cmpq	$61, %rax
	je	.LBB1_382
# BB#374:                               # %L10846
	cmpq	$63, %rax
	jne	.LBB1_375
.LBB1_382:                              # %L10847.i
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r15, %r14
	je	.LBB1_376
# BB#383:                               # %if.then.i11537
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_544
# BB#384:                               # %if.then552.i
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	movq	24(%rsp), %rdi          # 8-byte Reload
	je	.LBB1_543
# BB#385:                               # %land.lhs.true564.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r13, %rdx
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB1_387
# BB#386:                               # %land.lhs.true564.i
	movq	%rdx, %rcx
.LBB1_387:                              # %land.lhs.true564.i
	movl	optimize_size(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB1_389
# BB#388:                               # %land.lhs.true564.i
	movq	%rdx, %rax
.LBB1_389:                              # %land.lhs.true564.i
	orq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_543
# BB#390:                               # %land.lhs.true564.i
	testq	%rdi, %rdi
	je	.LBB1_543
# BB#391:                               # %if.then570.i
	movq	$1, %rax
	movl	%eax, (%rdi)
	movq	$43, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1152:                             # %L10862
	movq	%r8, %rdi
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%r8, %rbx
	callq	recog_5
	movq	%rbx, %r8
	movq	%rax, %rdx
	movq	$32, %rcx
                                        # kill: RAX<def> RDX<kill>
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB1_4569
	jmp	.LBB1_7
.LBB1_2345:                             # %L10885
	movq	%r8, %rbx
	movq	$6, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2346
# BB#2347:                              # %if.then1500
	movq	%r15, recog_data(%rip)
	movq	%rbx, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$393294, %rax           # imm = 0x6004E
	jne	.LBB1_2348
# BB#2349:                              # %L2246
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$393216, %rdx           # imm = 0x60000
	jne	.LBB1_2350
# BB#2351:                              # %L11291
	movq	%r8, %r15
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	jne	.LBB1_2352
# BB#2361:                              # %L2283
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_335
# BB#2362:                              # %if.then1602
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393336, %rcx           # imm = 0x60078
	jne	.LBB1_335
# BB#2363:                              # %L2285
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_335
# BB#2364:                              # %if.then1629
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB1_335
# BB#2365:                              # %land.lhs.true1637
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2367
# BB#2366:                              # %lor.lhs.false1642
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_335
.LBB1_2367:                             # %land.lhs.true1647
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_335
# BB#2368:                              # %if.then1649
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$258, %rdx              # imm = 0x102
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1153:                             # %L10867
	movq	%r8, %r14
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	push_operand
	testq	%r13, %rax
	je	.LBB1_1159
# BB#1154:                              # %if.then398
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	general_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_1157
# BB#1155:                              # %if.then431
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$88, %rdx
	testq	$2, %rax
	je	.LBB1_4569
# BB#1156:                              # %if.end445
	movq	16(%r14), %rbx
.LBB1_1157:                             # %L596
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_1158
# BB#1180:                              # %if.then436
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$89, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
.LBB1_1158:                             # %if.end438
	movq	8(%r14), %r15
.LBB1_1159:                             # %L10868
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1169
# BB#1160:                              # %if.then403
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983164, %rax           # imm = 0xF007C
	jne	.LBB1_1161
# BB#1181:                              # %L908
	movq	8(%rbx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1168
# BB#1182:                              # %if.then482
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$262145, %rax           # imm = 0x40001
	cmpq	$262145, %rax           # imm = 0x40001
	jne	.LBB1_1168
# BB#1183:                              # %land.lhs.true493
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$141, %rdx
	jne	.LBB1_4569
# BB#1184:                              # %lor.lhs.false498
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1168
.LBB1_1469:                             # %L10869
	movq	%r8, %r14
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	push_operand
	testq	%r13, %rax
	je	.LBB1_1476
# BB#1470:                              # %if.then909
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$1048699, %rax          # imm = 0x10007B
	jne	.LBB1_1471
# BB#1503:                              # %L837
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1475
# BB#1504:                              # %if.then963
	movq	%rbx, recog_data+8(%rip)
	jmp	.LBB1_1475
.LBB1_1869:                             # %L10871
	movq	%r8, %r12
	movq	$17, %rsi
	movq	%r15, %rdi
	callq	push_operand
	testq	%r13, %rax
	movq	%r15, %rbx
	je	.LBB1_1876
# BB#1870:                              # %if.then.i11956
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$1114235, %rax          # imm = 0x11007B
	jne	.LBB1_1871
# BB#1904:                              # %L842.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB1_1905
# BB#1907:                              # %L11203.i
	movq	$15, %rsi
	jmp	.LBB1_1908
.LBB1_2109:                             # %L10872
	movq	%r8, %r12
	movq	$18, %rsi
	movq	%r15, %rdi
	callq	push_operand
	testq	%r13, %rax
	movq	%r15, %rbx
	je	.LBB1_2115
# BB#2110:                              # %if.then.i12038
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$1179771, %rax          # imm = 0x12007B
	jne	.LBB1_2111
# BB#2132:                              # %L847.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB1_2133
# BB#2135:                              # %L11247.i
	movq	$15, %rsi
	jmp	.LBB1_2136
.LBB1_44:                               # %L10851
	cmpq	$66, %rax
	movq	%r15, %r14
	jne	.LBB1_45
# BB#77:                                # %L10929.i
	movq	$3, %rsi
	movq	%r15, %rdi
	callq	push_operand
	testq	%r13, %rax
	movq	%r15, %r14
	je	.LBB1_51
# BB#78:                                # %if.then24.i
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	general_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_81
# BB#79:                                # %if.then32.i
	movzbl	target_flags+3(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	movq	$49, %rdx
	testq	$2, %rax
	je	.LBB1_4569
# BB#80:                                # %if.end45.i
	movq	16(%rbx), %r14
.LBB1_81:                               # %L346.i
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonmemory_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_50
# BB#82:                                # %if.then37.i
	movzbl	target_flags+3(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	movq	$50, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
.LBB1_50:                               # %if.end39.i
	movq	8(%rbx), %r14
	jmp	.LBB1_51
.LBB1_45:                               # %L10842.i
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_51
# BB#46:                                # %if.then.i
	movq	%r14, recog_data(%rip)
	movq	%rbx, %rsi
	movq	16(%rsi), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196650, %rcx           # imm = 0x3002A
	jne	.LBB1_49
# BB#47:                                # %land.lhs.true114.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_49
# BB#48:                                # %land.lhs.true120.i
	movl	16(%rax), %eax
	cmpq	$9, %rax
	jne	.LBB1_49
# BB#90:                                # %L140.i
	movq	8(%rcx), %rbx
	movl	(%rbx), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$57, %rdx
	jne	.LBB1_91
# BB#95:                                # %L10931.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jne	.LBB1_92
# BB#96:                                # %L154.i
	movq	8(%rbx), %r14
	movzbl	2(%r14), %eax
	addq	$-15, %rax
	andq	%r13, %rax
	cmpq	$3, %rax
	jbe	.LBB1_4570
# BB#97:
	movq	%rsi, %r12
	jmp	.LBB1_98
.LBB1_415:                              # %L10846
	cmpq	$133, %rax
	movq	%r15, %r14
	jne	.LBB1_376
# BB#416:                               # %L485.i
	movq	8(%r15), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_417
# BB#418:                               # %if.then70.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_419
# BB#420:                               # %land.lhs.true79.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	movq	%r12, %r8
	jne	.LBB1_7
# BB#421:                               # %L487.i
	movq	24(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_7
# BB#422:                               # %land.lhs.true91.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_7
# BB#423:                               # %L502.i
	movq	16(%r8), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_424
# BB#430:                               # %L10964.i
	movq	%r8, %rbx
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	je	.LBB1_482
# BB#431:                               # %L10964.i
	cmpq	$85, %rax
	jne	.LBB1_432
# BB#517:                               # %L3692.i
	movq	8(%r14), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_518
# BB#519:                               # %L3693.i
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_520
# BB#521:                               # %if.then458.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_522
# BB#523:                               # %land.lhs.true467.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_524
# BB#525:                               # %L3695.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_526
# BB#527:                               # %land.lhs.true480.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_528
# BB#529:                               # %L3696.i
	movq	16(%r14), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_530
# BB#531:                               # %L3697.i
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_532
# BB#533:                               # %if.then505.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+16(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_534
# BB#535:                               # %land.lhs.true514.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_536
# BB#537:                               # %L3699.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_538
# BB#539:                               # %land.lhs.true527.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_540
# BB#541:                               # %land.lhs.true527.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rbx, %r8
	je	.LBB1_424
# BB#542:                               # %if.then534.i11563
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$339, %rdx              # imm = 0x153
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_4574:                             # %L147
	jmpq	*.LJTI1_4(,%rax,8)
.LBB1_336:                              # %L10959
	movq	%r8, %r15
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_331
# BB#337:                               # %if.then114
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4575
# BB#338:                               # %if.then122
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$19, %rdx
	jmp	.LBB1_339
.LBB1_2346:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_2348:                             # %if.end1515
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_1471:                             # %if.end949
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	general_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_1475
# BB#1472:                              # %if.then952
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$93, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
# BB#1473:                              # %land.lhs.true974
	movl	x86_integer_DFmode_moves(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rdi
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	testq	%r13, %rsi
	movq	$92, %rdx
	je	.LBB1_4569
# BB#1474:                              # %lor.lhs.false981
	movl	ix86_cpu(%rip), %ecx
	shlq	%cl, %rdi
	andq	%rax, %rdi
	testq	%r13, %rdi
	movq	$93, %rdx
	jne	.LBB1_4569
.LBB1_1475:                             # %if.end954
	movq	8(%r14), %r15
.LBB1_1476:                             # %L10870
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1492
# BB#1477:                              # %if.then914
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$1048699, %rax          # imm = 0x10007B
	jne	.LBB1_1478
# BB#1505:                              # %L862
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1491
# BB#1506:                              # %if.then1016
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$262145, %rax           # imm = 0x40001
	je	.LBB1_1491
# BB#1507:                              # %land.lhs.true1027
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$133, %rdx
	jne	.LBB1_4569
# BB#1508:                              # %lor.lhs.false1032
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1491
.LBB1_1871:                             # %if.end19.i
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	general_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_1875
# BB#1872:                              # %if.then22.i
	movl	target_flags(%rip), %eax
	movl	optimize_size(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	andq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB1_1874
# BB#1873:                              # %if.then22.i
	movq	$97, %rdx
	testq	%r13, %rcx
	jne	.LBB1_4569
.LBB1_1874:                             # %L643.i
	orq	%rcx, %rax
	testq	%r13, %rax
	movq	$99, %rdx
	jne	.LBB1_1875
	jmp	.LBB1_4569
.LBB1_2111:                             # %if.end19.i12051
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	general_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_2114
# BB#2112:                              # %if.then22.i12053
	movl	optimize_size(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	movq	$98, %rdx
	jne	.LBB1_4569
# BB#2113:                              # %select.mid1049
	movq	$100, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1478:                             # %if.end1002
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_1491
# BB#1479:                              # %if.then1005
	movq	%rbx, recog_data+8(%rip)
	movq	recog_data(%rip), %rdi
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB1_1481
# BB#1480:                              # %lor.lhs.false1046
	movzbl	(%rbx), %ecx
	cmpq	$66, %rcx
	je	.LBB1_1488
.LBB1_1481:                             # %land.lhs.true1051
	movl	optimize_size(%rip), %ecx
	testq	%rcx, %rcx
	jne	.LBB1_1483
# BB#1482:                              # %lor.lhs.false1053
	movl	ix86_cpu(%rip), %ecx
	movl	x86_integer_DFmode_moves(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	jne	.LBB1_1488
.LBB1_1483:                             # %land.lhs.true1057
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$94, %rdx
	jne	.LBB1_4569
# BB#1484:                              # %land.lhs.true1057
	movl	ix86_cmodel(%rip), %eax
	addq	$-3, %rax
	andq	%r13, %rax
	cmpq	$2, %rax
	jb	.LBB1_4569
# BB#1485:                              # %lor.lhs.false1065
	movzbl	(%rbx), %eax
	cmpq	$55, %rax
	jne	.LBB1_4569
# BB#1486:                              # %lor.lhs.false1070
	movq	$16, %rsi
	callq	memory_operand
	movq	$94, %rdx
	testq	%r13, %rax
	jne	.LBB1_4569
# BB#1487:                              # %lor.lhs.false1070.L624_crit_edge
	movq	recog_data(%rip), %rdi
	movl	(%rdi), %eax
.LBB1_1488:                             # %L624
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB1_1509
# BB#1489:                              # %lor.lhs.false1080
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_1491
# BB#1490:                              # %lor.lhs.false1080
	movl	optimize_size(%rip), %eax
	testq	%r13, %rax
	je	.LBB1_1510
	jmp	.LBB1_1491
.LBB1_4576:                             # %if.end276
	movq	%r12, %r8
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_963:                              # %if.end31.i
	movq	8(%rbx), %r14
.LBB1_964:                              # %L10856.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_970
# BB#965:                               # %if.then4.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131204, %rax           # imm = 0x20084
	jne	.LBB1_966
# BB#988:                               # %L444.i
	movq	8(%r12), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_969
# BB#989:                               # %if.then69.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_969
# BB#990:                               # %land.lhs.true81.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_969
# BB#991:                               # %L446.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_969
# BB#992:                               # %land.lhs.true96.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_969
# BB#993:                               # %land.lhs.true101.i
	movzbl	target_flags+3(%rip), %eax
	movq	$66, %rdx
	testq	$2, %rax
	jne	.LBB1_969
	jmp	.LBB1_4569
.LBB1_1161:                             # %if.end468
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_1168
# BB#1162:                              # %if.then471
	movq	%rbx, recog_data+8(%rip)
	movq	recog_data(%rip), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB1_1164
# BB#1163:                              # %lor.lhs.false512
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_1168
.LBB1_1164:                             # %land.lhs.true517
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	movq	%r13, %r15
	testq	%r15, %rcx
	movq	$90, %rdx
	jne	.LBB1_4569
# BB#1165:                              # %land.lhs.true517
	movl	ix86_cmodel(%rip), %eax
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB1_4569
# BB#1166:                              # %lor.lhs.false525
	movzbl	(%rbx), %eax
	cmpq	$55, %rax
	jne	.LBB1_4569
# BB#1167:                              # %lor.lhs.false530
	movq	$15, %rsi
	callq	memory_operand
	movq	$90, %rdx
	testq	%r15, %rax
	movq	%r15, %r13
	jne	.LBB1_4569
.LBB1_1168:                             # %if.end473
	movq	8(%r14), %r15
.LBB1_1169:                             # %L10876
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB1_1172
# BB#1170:                              # %if.then408
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB1_1171
# BB#1185:                              # %L11113
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	je	.LBB1_1201
# BB#1186:                              # %L11113
	cmpq	$124, %rcx
	jne	.LBB1_1187
# BB#1192:                              # %L913
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	je	.LBB1_1197
# BB#1193:                              # %L913
	cmpq	$17, %rax
	jne	.LBB1_1194
# BB#1199:                              # %L11117
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1171
# BB#1200:                              # %if.then592
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$145, %rdx
	je	.LBB1_4569
	jmp	.LBB1_1171
.LBB1_966:                              # %if.end55.i
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_969
# BB#967:                               # %if.then58.i
	movq	%r12, recog_data+8(%rip)
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$60, %rdx
	jne	.LBB1_4569
# BB#968:                               # %lor.lhs.false.i
	movzbl	(%r12), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
.LBB1_969:                              # %if.end60.i
	movq	8(%rbx), %r14
.LBB1_970:                              # %L10858.i
	movq	%rbx, %r12
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_971
# BB#994:                               # %L455.i
	movq	8(%r14), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_movabs_operand
	testq	%r13, %rax
	je	.LBB1_976
# BB#995:                               # %if.then127.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_975
# BB#996:                               # %if.then135.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$68, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
	jmp	.LBB1_975
.LBB1_971:                              # %if.end8.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_976
# BB#972:                               # %if.then11.i
	movq	%r14, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB1_975
# BB#973:                               # %L11016.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB1_974
# BB#1003:                              # %L461.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_movabs_operand
	testq	%r13, %rax
	je	.LBB1_975
# BB#1004:                              # %if.then217.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$69, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
	jmp	.LBB1_975
.LBB1_375:                              # %L10846
	cmpq	$66, %rax
	movq	%r15, %r14
	jne	.LBB1_376
# BB#408:                               # %L10963.i
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	push_operand
	testq	%r13, %rax
	movq	%r15, %r14
	je	.LBB1_376
# BB#409:                               # %if.then33.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_412
# BB#410:                               # %if.then41.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$38, %rdx
	testq	$2, %rax
	je	.LBB1_4569
# BB#411:                               # %if.end54.i
	movq	16(%r12), %rbx
.LBB1_412:                              # %L267.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_no_elim_operand
	testq	%r13, %rax
	je	.LBB1_414
# BB#413:                               # %if.then46.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$39, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
.LBB1_414:                              # %if.end48.i
	movq	8(%r12), %r14
	jmp	.LBB1_376
.LBB1_2350:                             # %if.end1527
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_1905:                             # %L842.i
	cmpq	$16, %rax
	jne	.LBB1_1875
# BB#1906:                              # %L11204.i
	movq	$16, %rsi
.LBB1_1908:                             # %L11203.i
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1875
# BB#1909:                              # %if.then40.i
	movq	%rbx, recog_data+8(%rip)
.LBB1_1875:                             # %if.end24.i11967
	movq	8(%r12), %rbx
.LBB1_1876:                             # %L10873.i
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1894
# BB#1877:                              # %if.then4.i11962
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1114112, %rcx          # imm = 0x110000
	jne	.LBB1_1878
# BB#1910:                              # %L11205.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$77, %rax
	je	.LBB1_1926
# BB#1911:                              # %L11205.i
	cmpq	$129, %rax
	jne	.LBB1_1912
# BB#1932:                              # %L4223.i
	movq	8(%r14), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1878
# BB#1933:                              # %if.then185.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	jne	.LBB1_1937
# BB#1934:                              # %land.lhs.true193.i
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$17, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1937
# BB#1935:                              # %land.lhs.true193.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1937
# BB#1936:                              # %if.then198.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$382, %rdx              # imm = 0x17E
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2133:                             # %L847.i
	cmpq	$16, %rax
	jne	.LBB1_2114
# BB#2134:                              # %L11248.i
	movq	$16, %rsi
.LBB1_2136:                             # %L11247.i
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2114
# BB#2137:                              # %if.then40.i12063
	movq	%rbx, recog_data+8(%rip)
.LBB1_2114:                             # %if.end24.i12054
	movq	8(%r12), %rbx
.LBB1_2115:                             # %L10874.i
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2122
# BB#2116:                              # %if.then4.i12042
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1179648, %rcx          # imm = 0x120000
	jne	.LBB1_2117
# BB#2138:                              # %L11249.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$77, %rax
	je	.LBB1_2154
# BB#2139:                              # %L11249.i
	cmpq	$129, %rax
	jne	.LBB1_2140
# BB#2160:                              # %L4235.i
	movq	8(%r14), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2117
# BB#2161:                              # %if.then170.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_2165
# BB#2162:                              # %land.lhs.true175.i
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$18, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_2165
# BB#2163:                              # %land.lhs.true175.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2165
# BB#2164:                              # %if.then180.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$383, %rdx              # imm = 0x17F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_341:                              # %L10960
	movq	%r8, %r15
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_331
# BB#342:                               # %if.then139
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4575
# BB#343:                               # %if.then147
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$21, %rdx
	jmp	.LBB1_339
.LBB1_344:                              # %L10961
	movq	%r8, %r15
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_331
# BB#345:                               # %if.then165
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4575
# BB#346:                               # %if.then173
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$23, %rdx
	jne	.LBB1_340
	jmp	.LBB1_4569
.LBB1_347:                              # %L10962
	movq	%r8, %r15
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_331
# BB#348:                               # %if.then194
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4575
# BB#349:                               # %if.then202
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$24, %rdx
.LBB1_339:                              # %if.then122
	testq	$1, %rax
	jne	.LBB1_4569
.LBB1_340:                              # %if.end130
	movq	16(%r15), %r12
	movq	8(%r12), %rbx
	jmp	.LBB1_331
.LBB1_417:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1926:                             # %L4038.i
	movq	8(%r14), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1878
# BB#1927:                              # %if.then162.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	jne	.LBB1_1931
# BB#1928:                              # %land.lhs.true170.i
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$17, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1931
# BB#1929:                              # %land.lhs.true170.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1931
# BB#1930:                              # %if.then175.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$363, %rdx              # imm = 0x16B
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1912:                             # %L11205.i
	cmpq	$123, %rax
	jne	.LBB1_1878
# BB#1913:                              # %L872.i
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	jne	.LBB1_1914
# BB#1921:                              # %L11209.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1878
# BB#1922:                              # %if.then134.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	jne	.LBB1_1925
# BB#1923:                              # %land.lhs.true142.i
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$137, %rdx
	jne	.LBB1_4569
# BB#1924:                              # %lor.lhs.false147.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
.LBB1_1925:                             # %if.end153.i
	movq	16(%r12), %r14
	jmp	.LBB1_1878
.LBB1_4575:                             # %if.end204
	movq	8(%r12), %rbx
.LBB1_331:                              # %L212
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_335
# BB#332:                               # %if.then106
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$125, %rcx
	jne	.LBB1_335
# BB#333:                               # %L214
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_335
# BB#334:                               # %if.then234
	movq	%rbx, recog_data+8(%rip)
	jmp	.LBB1_335
.LBB1_543:                              # %if.end571.i
	movq	16(%r12), %rbx
.LBB1_544:                              # %L317.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB1_555
# BB#545:                               # %if.then557.i
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB1_555
# BB#546:                               # %land.lhs.true576.i
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB1_555
# BB#547:                               # %land.lhs.true581.i
	movq	8(%rbx), %rax
	cmpq	$-1, %rax
	jne	.LBB1_555
# BB#548:                               # %land.lhs.true587.i
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB1_550
# BB#549:                               # %land.lhs.true587.i
	movq	%rdx, %rcx
.LBB1_550:                              # %land.lhs.true587.i
	movl	optimize_size(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB1_552
# BB#551:                               # %land.lhs.true587.i
	movq	%rdx, %rax
.LBB1_552:                              # %land.lhs.true587.i
	orq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_555
# BB#553:                               # %land.lhs.true587.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_555
# BB#554:                               # %if.then593.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$44, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_555:                              # %if.end594.i
	movq	8(%r12), %r14
.LBB1_376:                              # %L10848.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_394
# BB#377:                               # %if.then6.i
	movq	%r14, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_378
# BB#556:                               # %L10971.i
	andq	$65535, %rax            # imm = 0xFFFF
	movq	%r12, %rbx
	cmpq	$75, %rax
	jne	.LBB1_557
# BB#571:                               # %L1260.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262219, %rcx           # imm = 0x4004B
	jne	.LBB1_379
# BB#572:                               # %L1261.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262255, %rdx           # imm = 0x4006F
	jne	.LBB1_379
# BB#573:                               # %L1262.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB1_379
# BB#574:                               # %land.lhs.true718.i
	movl	8(%rdx), %edx
	cmpq	$17, %rdx
	jne	.LBB1_379
# BB#575:                               # %L1263.i
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_379
# BB#576:                               # %land.lhs.true731.i
	cmpq	$0, 8(%rcx)
	jne	.LBB1_379
# BB#577:                               # %L1264.i
	movq	16(%rax), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_379
# BB#578:                               # %if.then743.i11572
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_379
# BB#579:                               # %if.then751.i
	movq	%r12, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_582
# BB#580:                               # %if.then751.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_582
# BB#581:                               # %if.then758.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$188, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_378:
	movq	%r12, %rbx
	jmp	.LBB1_379
.LBB1_557:                              # %L10971.i
	cmpq	$126, %rax
	jne	.LBB1_379
# BB#558:                               # %L1038.i
	movq	8(%r14), %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_379
# BB#559:                               # %if.then626.i
	movl	target_flags(%rip), %edx
	movq	%r12, recog_data+8(%rip)
	testq	$1, %rdx
	je	.LBB1_570
# BB#560:                               # %land.lhs.true631.i
	movl	(%r12), %eax
	movq	$14, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	movq	%rcx, %rsi
	orq	$4, %rsi
	andq	%r13, %rsi
	cmpq	$6, %rsi
	jne	.LBB1_561
# BB#564:                               # %land.lhs.true654.i
	movl	reload_completed(%rip), %ecx
	movl	reload_in_progress(%rip), %esi
	orq	%rcx, %rsi
	testq	%r13, %rsi
	jne	.LBB1_570
	jmp	.LBB1_565
.LBB1_2154:                             # %L4050.i
	movq	8(%r14), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2117
# BB#2155:                              # %if.then150.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_2159
# BB#2156:                              # %land.lhs.true155.i
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$18, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_2159
# BB#2157:                              # %land.lhs.true155.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2159
# BB#2158:                              # %if.then160.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$364, %rdx              # imm = 0x16C
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2140:                             # %L11249.i
	cmpq	$123, %rax
	jne	.LBB1_2117
# BB#2141:                              # %L877.i
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	jne	.LBB1_2142
# BB#2149:                              # %L11253.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2117
# BB#2150:                              # %if.then125.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_2153
# BB#2151:                              # %land.lhs.true130.i
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$138, %rdx
	jne	.LBB1_4569
# BB#2152:                              # %lor.lhs.false135.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
.LBB1_2153:                             # %if.end141.i
	movq	16(%r12), %r14
	jmp	.LBB1_2117
.LBB1_370:                              # %if.end373
	movq	%r14, %r8
.LBB1_371:                              # %if.end380
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_2352:                             # %L11291
	cmpq	$121, %rcx
	jne	.LBB1_335
# BB#2353:                              # %L2247
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_335
# BB#2354:                              # %if.then1545
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393337, %rcx           # imm = 0x60079
	jne	.LBB1_335
# BB#2355:                              # %L2249
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_335
# BB#2356:                              # %if.then1572
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB1_335
# BB#2357:                              # %land.lhs.true1580
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2359
# BB#2358:                              # %lor.lhs.false1585
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_335
.LBB1_2359:                             # %land.lhs.true1590
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_335
# BB#2360:                              # %if.then1592
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$256, %rdx              # imm = 0x100
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_335:                              # %if.end108
	movq	%r15, %r8
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_419:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1201:                             # %L3927
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB1_1171
# BB#1202:                              # %if.then628
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$15, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_1171
# BB#1203:                              # %if.then628
	testq	%rcx, %rcx
	je	.LBB1_1171
# BB#1204:                              # %if.then638
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$355, %rdx              # imm = 0x163
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1187:                             # %L11113
	cmpq	$129, %rcx
	jne	.LBB1_1171
# BB#1188:                              # %L4112
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB1_1171
# BB#1189:                              # %if.then648
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$15, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_1171
# BB#1190:                              # %if.then648
	testq	%rcx, %rcx
	je	.LBB1_1171
# BB#1191:                              # %if.then658
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$374, %rdx              # imm = 0x176
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_974:                              # %L11016.i
	cmpq	$132, %rax
	jne	.LBB1_975
# BB#997:                               # %L450.i
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_975
# BB#998:                               # %if.then171.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_975
# BB#999:                               # %land.lhs.true183.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_975
# BB#1000:                              # %L452.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_975
# BB#1001:                              # %land.lhs.true199.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_975
# BB#1002:                              # %land.lhs.true204.i
	movzbl	target_flags+3(%rip), %eax
	movq	$67, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
.LBB1_975:                              # %if.end137.i
	movq	8(%r12), %r14
.LBB1_976:                              # %L10859.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_979
# BB#977:                               # %if.then16.i
	movq	%r14, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB1_978
# BB#1005:                              # %L11018.i
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-63, %rax
	andq	%r13, %rax
	cmpq	$56, %rax
	ja	.LBB1_978
# BB#1006:                              # %L11018.i
	jmpq	*.LJTI1_1(,%rax,8)
.LBB1_1007:                             # %L11031.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	ix86_comparison_operator
	testq	%r13, %rax
	je	.LBB1_978
# BB#1008:                              # %if.then264.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_978
# BB#1009:                              # %land.lhs.true805.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_978
# BB#1010:                              # %L5563.i
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_978
# BB#1011:                              # %land.lhs.true821.i
	cmpq	$0, 8(%rax)
	movq	$486, %rdx              # imm = 0x1E6
	jne	.LBB1_978
	jmp	.LBB1_4569
.LBB1_1509:                             # %land.lhs.true1085
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB1_1491
.LBB1_1510:                             # %land.lhs.true1087
	movl	ix86_cpu(%rip), %ecx
	movl	x86_integer_DFmode_moves(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r13, %rdx
	je	.LBB1_1491
# BB#1511:                              # %land.lhs.true1091
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$95, %rdx
	jne	.LBB1_4569
# BB#1512:                              # %land.lhs.true1091
	movl	ix86_cmodel(%rip), %eax
	addq	$-3, %rax
	andq	%r13, %rax
	cmpq	$2, %rax
	jb	.LBB1_4569
# BB#1513:                              # %lor.lhs.false1099
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$55, %rax
	jne	.LBB1_4569
# BB#1514:                              # %lor.lhs.false1104
	movq	$16, %rsi
	callq	memory_operand
	movq	$95, %rdx
	testq	%r13, %rax
	jne	.LBB1_4569
.LBB1_1491:                             # %if.end1007
	movq	8(%r14), %r15
.LBB1_1492:                             # %L10875
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1495
# BB#1493:                              # %if.then919
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB1_1494
# BB#1515:                              # %L11153
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$123, %rcx
	jne	.LBB1_1516
# BB#1526:                              # %L867
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1494
# BB#1527:                              # %if.then1139
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$262145, %rax           # imm = 0x40001
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB1_1494
# BB#1528:                              # %land.lhs.true1150
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$134, %rdx
	jne	.LBB1_4569
# BB#1529:                              # %lor.lhs.false1155
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1494
.LBB1_1516:                             # %L11153
	cmpq	$125, %rcx
	jne	.LBB1_1494
# BB#1517:                              # %L1141
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$3, %rax
	je	.LBB1_1530
# BB#1518:                              # %L1141
	cmpq	$4, %rax
	jne	.LBB1_1519
# BB#1532:                              # %L11156
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1494
# BB#1533:                              # %if.then1199
	movl	target_flags(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	%rcx, %rax
	andq	$262144, %rax           # imm = 0x40000
	testq	$1, %rcx
	je	.LBB1_1537
# BB#1534:                              # %land.lhs.true1207
	testq	%r13, %rax
	je	.LBB1_1535
# BB#1536:                              # %lor.lhs.false1210
	movl	ix86_fpmath(%rip), %ecx
	andq	$3, %rcx
	cmpq	$3, %rcx
	movq	$174, %rdx
	je	.LBB1_4569
.LBB1_1537:                             # %L1152
	movq	$175, %rdx
	testq	%r13, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1494
.LBB1_1937:                             # %if.end199.i11981
	movq	16(%r12), %r14
	jmp	.LBB1_1878
.LBB1_1931:                             # %if.end176.i
	movq	16(%r12), %r14
	jmp	.LBB1_1878
.LBB1_2165:                             # %if.end181.i
	movq	16(%r12), %r14
	jmp	.LBB1_2117
.LBB1_2159:                             # %if.end161.i12076
	movq	16(%r12), %r14
	jmp	.LBB1_2117
.LBB1_91:                               # %L140.i
	cmpq	$58, %rdx
	jne	.LBB1_92
# BB#120:                               # %L10932.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jne	.LBB1_92
# BB#121:                               # %L206.i
	movq	%rsi, %r12
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_122
# BB#123:                               # %if.then369.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r12, %rsi
	je	.LBB1_92
# BB#124:                               # %if.then377.i
	movzbl	target_flags(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_119
# BB#125:                               # %land.lhs.true382.i
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_119
# BB#126:                               # %land.lhs.true382.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB1_119
# BB#127:                               # %land.lhs.true406.i
	movl	(%r14), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	movq	$28, %rdx
	jne	.LBB1_119
	jmp	.LBB1_4569
.LBB1_1914:                             # %L872.i
	cmpq	$15, %rax
	jne	.LBB1_1878
# BB#1915:                              # %L11208.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1878
# BB#1916:                              # %if.then110.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	jne	.LBB1_1920
# BB#1917:                              # %land.lhs.true118.i
	movq	%r12, %rcx
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1918
# BB#1919:                              # %lor.lhs.false.i11976
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	movq	%rcx, %r12
	movq	$135, %rdx
	jne	.LBB1_4569
.LBB1_1920:                             # %if.end128.i
	movq	16(%r12), %r14
.LBB1_1878:                             # %L650.i
	movq	$17, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_1893
# BB#1879:                              # %if.then85.i
	movl	target_flags(%rip), %eax
	movl	optimize_size(%rip), %ecx
	movq	%r14, recog_data+8(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB1_1887
# BB#1880:                              # %if.then85.i
	testq	%r13, %rcx
	je	.LBB1_1887
# BB#1881:                              # %land.lhs.true207.i
	movq	recog_data(%rip), %rdi
	movzbl	(%rdi), %edx
	cmpq	$66, %rdx
	jne	.LBB1_1883
# BB#1882:                              # %lor.lhs.false212.i
	movzbl	(%r14), %edx
	cmpq	$66, %rdx
	je	.LBB1_1887
.LBB1_1883:                             # %land.lhs.true217.i
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$101, %rdx
	jne	.LBB1_4569
# BB#1884:                              # %lor.lhs.false221.i
	movzbl	(%r14), %eax
	cmpq	$55, %rax
	jne	.LBB1_4569
# BB#1885:                              # %lor.lhs.false226.i
	movq	$17, %rsi
	callq	memory_operand
	movq	$101, %rdx
	testq	%r13, %rax
	jne	.LBB1_4569
# BB#1886:                              # %lor.lhs.false226.L659_crit_edge.i
	movl	target_flags(%rip), %eax
	movl	optimize_size(%rip), %ecx
.LBB1_1887:                             # %L659.i
	andq	$33554432, %rax         # imm = 0x2000000
	orq	%rcx, %rax
	testq	%r13, %rax
	jne	.LBB1_1893
# BB#1888:                              # %land.lhs.true236.i
	movq	recog_data(%rip), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB1_1890
# BB#1889:                              # %lor.lhs.false241.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_1893
.LBB1_1890:                             # %land.lhs.true246.i
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$103, %rdx
	jne	.LBB1_4569
# BB#1891:                              # %lor.lhs.false250.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$55, %rax
	jne	.LBB1_4569
# BB#1892:                              # %lor.lhs.false255.i
	movq	$17, %rsi
	callq	memory_operand
	movq	$103, %rdx
	testq	%r13, %rax
	jne	.LBB1_4569
.LBB1_1893:                             # %if.end87.i
	movq	8(%r12), %rbx
.LBB1_1894:                             # %L10881.i
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1895
# BB#1896:                              # %if.then9.i
	movq	%rbx, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %r14
	movl	(%r14), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1114112, %rax          # imm = 0x110000
	jne	.LBB1_7
# BB#1897:                              # %L11210.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$71, %rcx
	jg	.LBB1_1938
# BB#1898:                              # %L11210.i
	cmpq	$42, %rcx
	jne	.LBB1_7
# BB#1899:                              # %L11218.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_7
# BB#1900:                              # %L11235.i
	movl	16(%r14), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_1901
# BB#2026:                              # %L6369.i
	movq	%r8, %r14
	movq	8(%rax), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2027
# BB#2028:                              # %if.then572.i12007
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$64, %rax
	je	.LBB1_2030
# BB#2029:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1895:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1938:                             # %L11210.i
	cmpq	$124, %rcx
	jg	.LBB1_1944
# BB#1939:                              # %L11210.i
	addq	$-72, %rcx
	andq	%r13, %rcx
	cmpq	$7, %rcx
	ja	.LBB1_7
# BB#1940:                              # %L11210.i
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$216, %rax
	je	.LBB1_1941
# BB#1951:                              # %L11213.i
	movq	%r8, %r12
	movq	$17, %rsi
	movq	%r14, %rdi
	callq	binary_fp_operator
	testq	%r13, %rax
	je	.LBB1_1952
# BB#1953:                              # %if.then285.i
	movq	%r14, recog_data+24(%rip)
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1114112, %rcx          # imm = 0x110000
	jne	.LBB1_1954
# BB#2050:                              # %L11238.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$122, %rax
	jg	.LBB1_2054
# BB#2051:                              # %L11238.i
	cmpq	$61, %rax
	je	.LBB1_2057
# BB#2052:                              # %L11238.i
	cmpq	$63, %rax
	jne	.LBB1_2053
.LBB1_2057:                             # %L11237.i
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2058
# BB#2059:                              # %if.then660.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1114112, %rcx          # imm = 0x110000
	jne	.LBB1_2060
# BB#2082:                              # %L11243.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$122, %rax
	jg	.LBB1_2086
# BB#2083:                              # %L11243.i
	cmpq	$61, %rax
	je	.LBB1_2089
# BB#2084:                              # %L11243.i
	cmpq	$63, %rax
	jne	.LBB1_2085
.LBB1_2089:                             # %L11242.i
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2090
# BB#2105:                              # %if.then757.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	%r12, %r8
	jne	.LBB1_7
# BB#2106:                              # %land.lhs.true818.i
	movq	recog_data+24(%rip), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$99, %rax
	movq	$531, %rax              # imm = 0x213
	je	.LBB1_2108
# BB#2107:                              # %select.mid
	movq	$545, %rax              # imm = 0x221
	jmp	.LBB1_2108
.LBB1_1944:                             # %L11210.i
	cmpq	$125, %rcx
	je	.LBB1_1955
# BB#1945:                              # %L11210.i
	cmpq	$129, %rcx
	jne	.LBB1_1946
# BB#1989:                              # %L4256.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1114112, %rcx          # imm = 0x110000
	jne	.LBB1_7
# BB#1990:                              # %L11228.i
	andq	$65535, %rax            # imm = 0xFFFF
	movq	%r8, %r14
	cmpq	$123, %rax
	jne	.LBB1_1991
# BB#1995:                              # %L4262.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB1_1996
# BB#2001:                              # %L11230.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2002
# BB#2003:                              # %if.then440.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$389, %rdx              # imm = 0x185
	jmp	.LBB1_1961
.LBB1_2142:                             # %L877.i
	cmpq	$15, %rax
	jne	.LBB1_2117
# BB#2143:                              # %L11252.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2117
# BB#2144:                              # %if.then105.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_2148
# BB#2145:                              # %land.lhs.true109.i
	movq	%r12, %rcx
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2146
# BB#2147:                              # %lor.lhs.false.i12070
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	movq	%rcx, %r12
	movq	$136, %rdx
	jne	.LBB1_4569
.LBB1_2148:                             # %if.end119.i
	movq	16(%r12), %r14
.LBB1_2117:                             # %L654.i
	movq	$18, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2121
# BB#2118:                              # %if.then80.i
	movq	%r14, recog_data+8(%rip)
	movq	recog_data(%rip), %rdi
	movl	(%rdi), %eax
	movq	%rax, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB1_2166
# BB#2119:                              # %lor.lhs.false189.i
	movzbl	(%r14), %ecx
	cmpq	$66, %rcx
	je	.LBB1_2172
# BB#2120:                              # %lor.lhs.false189.i
	movl	optimize_size(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB1_2167
	jmp	.LBB1_2172
.LBB1_2166:                             # %land.lhs.true194.i
	movl	optimize_size(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB1_2172
.LBB1_2167:                             # %land.lhs.true196.i
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$102, %rdx
	jne	.LBB1_4569
# BB#2168:                              # %lor.lhs.false200.i
	movq	%r13, %rcx
	movzbl	(%r14), %eax
	cmpq	$55, %rax
	jne	.LBB1_4569
# BB#2169:                              # %lor.lhs.false200.i
	movl	ix86_cmodel(%rip), %eax
	addq	$-3, %rax
	movq	%rcx, %rbx
	andq	%rbx, %rax
	cmpq	$2, %rax
	jb	.LBB1_4569
# BB#2170:                              # %lor.lhs.false209.i
	movq	$18, %rsi
	callq	memory_operand
	movq	$102, %rdx
	testq	%rbx, %rax
	movq	%rbx, %r13
	jne	.LBB1_4569
# BB#2171:                              # %lor.lhs.false209.L663_crit_edge.i
	movq	recog_data(%rip), %rdi
	movl	(%rdi), %eax
.LBB1_2172:                             # %L663.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB1_2175
# BB#2173:                              # %lor.lhs.false219.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_2121
# BB#2174:                              # %lor.lhs.false219.i
	movl	optimize_size(%rip), %eax
	testq	%r13, %rax
	je	.LBB1_2176
	jmp	.LBB1_2121
.LBB1_2175:                             # %land.lhs.true224.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB1_2121
.LBB1_2176:                             # %land.lhs.true226.i
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$104, %rdx
	jne	.LBB1_4569
# BB#2177:                              # %lor.lhs.false230.i
	movq	%r13, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$55, %rax
	jne	.LBB1_4569
# BB#2178:                              # %lor.lhs.false230.i
	movl	ix86_cmodel(%rip), %eax
	addq	$-3, %rax
	movq	%rcx, %rbx
	andq	%rbx, %rax
	cmpq	$2, %rax
	jb	.LBB1_4569
# BB#2179:                              # %lor.lhs.false239.i
	movq	$18, %rsi
	callq	memory_operand
	movq	$104, %rdx
	testq	%rbx, %rax
	movq	%rbx, %r13
	jne	.LBB1_4569
.LBB1_2121:                             # %if.end82.i
	movq	8(%r12), %rbx
.LBB1_2122:                             # %L10882.i
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2123
# BB#2124:                              # %if.then9.i12048
	movq	%rbx, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %r14
	movl	(%r14), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1179648, %rax          # imm = 0x120000
	jne	.LBB1_7
# BB#2125:                              # %L11254.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$71, %rcx
	jg	.LBB1_2180
# BB#2126:                              # %L11254.i
	cmpq	$42, %rcx
	jne	.LBB1_7
# BB#2127:                              # %L11262.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_7
# BB#2128:                              # %L11279.i
	movl	16(%r14), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_2129
# BB#2263:                              # %L6374.i
	movq	%r8, %r14
	movq	8(%rax), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2264
# BB#2265:                              # %if.then517.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$64, %rax
	je	.LBB1_2267
# BB#2266:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2123:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2180:                             # %L11254.i
	cmpq	$124, %rcx
	jg	.LBB1_2186
# BB#2181:                              # %L11254.i
	addq	$-72, %rcx
	andq	%r13, %rcx
	cmpq	$7, %rcx
	ja	.LBB1_7
# BB#2182:                              # %L11254.i
	movq	$1, %rax
	shlq	%cl, %rax
	movq	%r8, %r12
	testq	$216, %rax
	je	.LBB1_2183
# BB#2193:                              # %L11257.i
	movq	$18, %rsi
	movq	%r14, %rdi
	callq	binary_fp_operator
	testq	%r13, %rax
	je	.LBB1_2194
# BB#2195:                              # %if.then269.i
	movq	%r14, recog_data+24(%rip)
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1179648, %rcx          # imm = 0x120000
	jne	.LBB1_2196
# BB#2287:                              # %L11282.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$122, %rax
	jg	.LBB1_2291
# BB#2288:                              # %L11282.i
	cmpq	$61, %rax
	je	.LBB1_2294
# BB#2289:                              # %L11282.i
	cmpq	$63, %rax
	jne	.LBB1_2290
.LBB1_2294:                             # %L11281.i
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2295
# BB#2296:                              # %if.then602.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1179648, %rcx          # imm = 0x120000
	jne	.LBB1_2297
# BB#2318:                              # %L11287.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$122, %rax
	jg	.LBB1_2322
# BB#2319:                              # %L11287.i
	cmpq	$61, %rax
	je	.LBB1_2325
# BB#2320:                              # %L11287.i
	cmpq	$63, %rax
	jne	.LBB1_2321
.LBB1_2325:                             # %L11286.i
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2326
# BB#2341:                              # %if.then690.i12141
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	movq	%r12, %r8
	je	.LBB1_7
# BB#2342:                              # %land.lhs.true739.i
	movq	recog_data+24(%rip), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$99, %rax
	movq	$532, %rax              # imm = 0x214
	je	.LBB1_2344
# BB#2343:                              # %select.mid1089
	movq	$546, %rax              # imm = 0x222
.LBB1_2344:                             # %select.end1088
	movq	%rax, %rdx
                                        # kill: RAX<def> RDX<kill>
	jmp	.LBB1_2108
.LBB1_2186:                             # %L11254.i
	cmpq	$125, %rcx
	je	.LBB1_2197
# BB#2187:                              # %L11254.i
	cmpq	$129, %rcx
	jne	.LBB1_2188
# BB#2230:                              # %L4273.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1179648, %rcx          # imm = 0x120000
	jne	.LBB1_7
# BB#2231:                              # %L11272.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_2232
# BB#2237:                              # %L4279.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB1_2238
# BB#2243:                              # %L11274.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2244
# BB#2245:                              # %if.then403.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$392, %rdx              # imm = 0x188
	testq	$1, %rax
	jmp	.LBB1_2008
.LBB1_1197:                             # %L11116
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1171
# BB#1198:                              # %if.then577
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$142, %rdx
	testq	$1, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1171
.LBB1_1194:                             # %L913
	cmpq	$18, %rax
	jne	.LBB1_1171
# BB#1195:                              # %L11118
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1171
# BB#1196:                              # %if.then610
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$147, %rdx
	testq	$1, %rax
	jne	.LBB1_4569
.LBB1_1171:                             # %if.end547
	movq	8(%r14), %r15
.LBB1_1172:                             # %L10877
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1175
# BB#1173:                              # %if.then413
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB1_1174
# BB#1205:                              # %L11119
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$124, %rcx
	jne	.LBB1_1206
# BB#1214:                              # %L918
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1174
# BB#1215:                              # %if.then689
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$262145, %rax           # imm = 0x40001
	cmpq	$262144, %rax           # imm = 0x40000
	movq	$143, %rdx
	je	.LBB1_4569
	jmp	.LBB1_1174
.LBB1_1206:                             # %L11119
	cmpq	$125, %rcx
	jne	.LBB1_1174
# BB#1207:                              # %L1111
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$3, %rax
	je	.LBB1_1216
# BB#1208:                              # %L1111
	cmpq	$4, %rax
	jne	.LBB1_1209
# BB#1218:                              # %L11122
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1174
# BB#1219:                              # %if.then739
	movl	target_flags(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	%rcx, %rax
	andq	$327680, %rax           # imm = 0x50000
	testq	$1, %rcx
	je	.LBB1_1223
# BB#1220:                              # %land.lhs.true747
	testq	%r13, %rax
	je	.LBB1_1221
# BB#1222:                              # %lor.lhs.false750
	movl	ix86_fpmath(%rip), %ecx
	andq	$3, %rcx
	cmpq	$3, %rcx
	movq	$168, %rdx
	je	.LBB1_4569
.LBB1_1223:                             # %L1122
	movq	$169, %rdx
	testq	%r13, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1174
.LBB1_1530:                             # %L11155
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1494
# BB#1531:                              # %if.then1181
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$262145, %rax           # imm = 0x40001
	cmpq	$1, %rax
	movq	$173, %rdx
	je	.LBB1_4569
	jmp	.LBB1_1494
.LBB1_1519:                             # %L1141
	cmpq	$5, %rax
	jne	.LBB1_1494
# BB#1520:                              # %L11157
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1494
# BB#1521:                              # %if.then1227
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_1523
# BB#1522:                              # %if.then1227
	movq	%rax, %rcx
	andq	$33816576, %rcx         # imm = 0x2040000
	movq	$176, %rdx
	andq	%r13, %rcx
	cmpq	$33816576, %rcx         # imm = 0x2040000
	jne	.LBB1_4569
.LBB1_1523:                             # %L1162
	movq	%rax, %rcx
	andq	$33554433, %rcx         # imm = 0x2000001
	andq	$262144, %rax           # imm = 0x40000
	cmpq	$33554433, %rcx         # imm = 0x2000001
	jne	.LBB1_1539
# BB#1524:                              # %land.lhs.true1248
	movq	%r14, %rdx
	testq	%r13, %rax
	je	.LBB1_1525
# BB#1538:                              # %lor.lhs.false1251
	movl	ix86_fpmath(%rip), %ecx
	andq	$3, %rcx
	cmpq	$3, %rcx
	movq	%rdx, %r14
	movq	$177, %rdx
	je	.LBB1_4569
.LBB1_1539:                             # %L1167
	movq	$178, %rdx
	testq	%r13, %rax
	jne	.LBB1_4569
.LBB1_1494:                             # %if.end1121
	movq	8(%r14), %r15
.LBB1_1495:                             # %L10878
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB1_1498
# BB#1496:                              # %if.then924
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB1_1497
# BB#1540:                              # %L11158
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	je	.LBB1_1553
# BB#1541:                              # %L11158
	cmpq	$124, %rcx
	jne	.LBB1_1542
# BB#1547:                              # %L957
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$17, %rax
	jne	.LBB1_1548
# BB#1551:                              # %L11161
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1497
# BB#1552:                              # %if.then1303
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$149, %rdx
	je	.LBB1_4569
	jmp	.LBB1_1497
.LBB1_1553:                             # %L3968
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB1_1497
# BB#1554:                              # %if.then1339
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_1497
# BB#1555:                              # %if.then1339
	testq	%rcx, %rcx
	je	.LBB1_1497
# BB#1556:                              # %if.then1349
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$358, %rdx              # imm = 0x166
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1542:                             # %L11158
	cmpq	$129, %rcx
	jne	.LBB1_1497
# BB#1543:                              # %L4153
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB1_1497
# BB#1544:                              # %if.then1359
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_1497
# BB#1545:                              # %if.then1359
	testq	%rcx, %rcx
	je	.LBB1_1497
# BB#1546:                              # %if.then1369
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$377, %rdx              # imm = 0x179
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1548:                             # %L957
	cmpq	$18, %rax
	jne	.LBB1_1497
# BB#1549:                              # %L11162
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1497
# BB#1550:                              # %if.then1321
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$151, %rdx
	testq	$1, %rax
	jne	.LBB1_4569
.LBB1_1497:                             # %if.end1274
	movq	8(%r14), %r15
.LBB1_1498:                             # %L10887
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1501
# BB#1499:                              # %if.then929
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB1_1500
# BB#1557:                              # %L11163
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB1_1558
# BB#1568:                              # %L4014
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1500
# BB#1569:                              # %if.then1400
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$33554433, %rcx         # imm = 0x2000001
	cmpq	$1, %rcx
	jne	.LBB1_1573
# BB#1570:                              # %land.lhs.true1411
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_1572
# BB#1571:                              # %land.lhs.true1411
	testq	%rcx, %rcx
	je	.LBB1_1572
# BB#4581:                              # %if.then1416
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$361, %rdx              # imm = 0x169
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1558:                             # %L11163
	cmpq	$129, %rcx
	jne	.LBB1_1500
# BB#1559:                              # %L4199
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1500
# BB#1560:                              # %if.then1438
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$33554433, %rcx         # imm = 0x2000001
	cmpq	$1, %rcx
	jne	.LBB1_1564
# BB#1561:                              # %land.lhs.true1449
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_1563
# BB#1562:                              # %land.lhs.true1449
	testq	%rcx, %rcx
	je	.LBB1_1563
# BB#4582:                              # %if.then1454
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$380, %rdx              # imm = 0x17C
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1955:                             # %L1171.i
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$5, %rax
	je	.LBB1_1965
# BB#1956:                              # %L1171.i
	cmpq	$4, %rax
	jne	.LBB1_1957
# BB#1962:                              # %L11221.i
	movq	%r8, %r14
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1963
# BB#1964:                              # %if.then313.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$181, %rdx
	jmp	.LBB1_1961
.LBB1_1946:                             # %L11210.i
	cmpq	$130, %rcx
	jne	.LBB1_7
# BB#1947:                              # %L6293.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1114112, %rcx          # imm = 0x110000
	jne	.LBB1_7
# BB#1948:                              # %L11232.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_1949
# BB#2011:                              # %L6304.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB1_2012
# BB#2017:                              # %L11234.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2018
# BB#2019:                              # %if.then505.i11999
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554497, %rax         # imm = 0x2000041
	cmpq	$1, %rax
	movq	$570, %rdx              # imm = 0x23A
	jmp	.LBB1_1961
.LBB1_1901:                             # %L11235.i
	cmpq	$1, %rcx
	jne	.LBB1_7
# BB#1902:                              # %L6343.i
	movq	%r8, %r14
	movq	8(%rax), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1903
# BB#2021:                              # %if.then550.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$33554433, %rcx         # imm = 0x2000001
	cmpq	$1, %rcx
	jne	.LBB1_2022
# BB#2023:                              # %land.lhs.true558.i
	testq	$64, %rax
	jne	.LBB1_2024
# BB#2025:                              # %land.lhs.true558.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$575, %rdx              # imm = 0x23F
	jmp	.LBB1_2007
.LBB1_2197:                             # %L1176.i
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %eax
	movq	%r8, %r14
	cmpq	$5, %rax
	je	.LBB1_2208
# BB#2198:                              # %L1176.i
	cmpq	$4, %rax
	jne	.LBB1_2199
# BB#2205:                              # %L11265.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2206
# BB#2207:                              # %if.then294.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$182, %rdx
	testq	$1, %rax
	jmp	.LBB1_2008
.LBB1_2188:                             # %L11254.i
	cmpq	$130, %rcx
	jne	.LBB1_7
# BB#2189:                              # %L6298.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1179648, %rcx          # imm = 0x120000
	jne	.LBB1_7
# BB#2190:                              # %L11276.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_2191
# BB#2248:                              # %L6310.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB1_2249
# BB#2254:                              # %L11278.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2255
# BB#2256:                              # %if.then459.i12111
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$65, %rax
	cmpq	$1, %rax
	movq	$571, %rdx              # imm = 0x23B
	jmp	.LBB1_1961
.LBB1_2129:                             # %L11279.i
	cmpq	$1, %rcx
	jne	.LBB1_7
# BB#2130:                              # %L6348.i
	movq	%r8, %r14
	movq	8(%rax), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2131
# BB#2258:                              # %if.then498.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$64, %rax
	je	.LBB1_2260
# BB#2259:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1216:                             # %L11121
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1174
# BB#1217:                              # %if.then721
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$327681, %rax           # imm = 0x50001
	cmpq	$1, %rax
	movq	$167, %rdx
	je	.LBB1_4569
	jmp	.LBB1_1174
.LBB1_1209:                             # %L1111
	cmpq	$5, %rax
	jne	.LBB1_1174
# BB#1210:                              # %L11123
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1174
# BB#1211:                              # %if.then767
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_1227
# BB#1212:                              # %land.lhs.true775
	movq	%r14, %rdx
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1213
# BB#1224:                              # %land.lhs.true775
	movq	%rax, %rcx
	andq	$33554432, %rcx         # imm = 0x2000000
	testq	%r13, %rcx
	je	.LBB1_1225
# BB#1226:                              # %lor.lhs.false781
	movl	ix86_fpmath(%rip), %ecx
	andq	$3, %rcx
	cmpq	$3, %rcx
	movq	%rdx, %r14
	movq	$170, %rdx
	je	.LBB1_4569
.LBB1_1227:                             # %L1132
	movq	%rax, %rdx
	andq	$33554433, %rdx         # imm = 0x2000001
	movq	%rax, %rcx
	andq	$327680, %rcx           # imm = 0x50000
	cmpq	$33554433, %rdx         # imm = 0x2000001
	jne	.LBB1_1231
# BB#1228:                              # %land.lhs.true794
	movq	%r14, %rsi
	testq	%r13, %rcx
	je	.LBB1_1229
# BB#1230:                              # %lor.lhs.false797
	movl	ix86_fpmath(%rip), %edx
	andq	$3, %rdx
	cmpq	$3, %rdx
	movq	%rsi, %r14
	movq	$171, %rdx
	je	.LBB1_4569
.LBB1_1231:                             # %L1137
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_1174
# BB#1232:                              # %L1137
	movq	$172, %rdx
	testq	%r13, %rcx
	jne	.LBB1_4569
.LBB1_1174:                             # %if.end671
	movq	8(%r14), %r15
.LBB1_1175:                             # %L10886
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1178
# BB#1176:                              # %if.then418
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB1_1177
# BB#1233:                              # %L11124
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB1_1234
# BB#1241:                              # %L3956
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1177
# BB#1242:                              # %if.then841
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$327681, %rax           # imm = 0x50001
	cmpq	$1, %rax
	jne	.LBB1_1177
# BB#1243:                              # %land.lhs.true852
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$15, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1177
# BB#1244:                              # %land.lhs.true852
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1177
# BB#1245:                              # %if.then857
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$357, %rdx              # imm = 0x165
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1234:                             # %L11124
	cmpq	$129, %rcx
	jne	.LBB1_1177
# BB#1235:                              # %L4141
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1177
# BB#1236:                              # %if.then867
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_1177
# BB#1237:                              # %land.lhs.true875
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$15, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1177
# BB#1238:                              # %land.lhs.true878
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	jne	.LBB1_1177
# BB#1239:                              # %land.lhs.true878
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1177
# BB#1240:                              # %if.then883
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$376, %rdx              # imm = 0x178
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1177:                             # %if.end823
	movq	8(%r14), %r15
.LBB1_1178:                             # %L10888
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1179
# BB#1247:                              # %if.then423
	movq	%r15, recog_data(%rip)
	movq	%r14, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB1_1246
# BB#1248:                              # %L11126
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$71, %rcx
	jg	.LBB1_1257
# BB#1249:                              # %L11126
	cmpq	$42, %rcx
	jne	.LBB1_1434
# BB#1250:                              # %L11134.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_1434
# BB#1251:                              # %L11138.i
	movl	16(%rbx), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_1252
# BB#1299:                              # %L6358.i
	movq	8(%rax), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	register_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_1434
# BB#1300:                              # %if.then135.i11672
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	testq	$64, %rax
	jne	.LBB1_1434
# BB#1301:                              # %land.lhs.true140.i
	testq	$1, %rax
	je	.LBB1_1434
# BB#1302:                              # %land.lhs.true140.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$578, %rdx              # imm = 0x242
	jmp	.LBB1_1265
.LBB1_1179:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1246:                             # %if.end896
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_1257:                             # %L11126
	cmpq	$101, %rcx
	jg	.LBB1_1266
# BB#1258:                              # %L11126
	addq	$-72, %rcx
	andq	%r13, %rcx
	cmpq	$7, %rcx
	ja	.LBB1_1434
# BB#1259:                              # %L11126
	movq	%r8, %r12
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$216, %rax
	jne	.LBB1_1286
# BB#1260:                              # %L11126
	testq	%rcx, %rcx
	jne	.LBB1_1261
# BB#1303:                              # %L7093.i
	movq	8(%rbx), %r14
	movzbl	(%r14), %eax
	cmpq	$105, %rax
	jne	.LBB1_1304
# BB#1348:                              # %L7186.i
	movq	8(%r14), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB1_1305
# BB#1349:                              # %L11143.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1354
# BB#1350:                              # %if.then350.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1353
# BB#1351:                              # %if.then368.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1352
# BB#1363:                              # %L7189.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1352
# BB#1364:                              # %land.lhs.true394.i
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1352
# BB#1365:                              # %land.lhs.true397.i11716
	testq	$16, %rax
	je	.LBB1_1352
# BB#1366:                              # %land.lhs.true397.i11716
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1352
# BB#1367:                              # %if.then402.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$629, %rdx              # imm = 0x275
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1266:                             # %L11126
	addq	$-102, %rcx
	andq	%r13, %rcx
	cmpq	$28, %rcx
	ja	.LBB1_1434
# BB#1267:                              # %L11126
	movq	%r8, %r12
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$261183, %rax           # imm = 0x3FC3F
	je	.LBB1_1268
# BB#1281:                              # %L11128.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	sse_comparison_operator
	testq	%r13, %rax
	je	.LBB1_1286
# BB#1282:                              # %if.then.i11657
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_1434
# BB#1283:                              # %if.then852.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_1434
# BB#1284:                              # %if.then860.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+24(%rip)
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1434
# BB#1285:                              # %if.then860.i
	movl	reload_completed(%rip), %eax
	movq	$488, %rdx              # imm = 0x1E8
	jmp	.LBB1_1265
.LBB1_1572:                             # %land.lhs.true1411.L4027_crit_edge
	movl	target_flags(%rip), %eax
.LBB1_1573:                             # %L4027
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$33554433, %rax         # imm = 0x2000001
	jne	.LBB1_1500
# BB#1574:                              # %land.lhs.true1423
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1500
# BB#1575:                              # %land.lhs.true1423
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1500
# BB#1576:                              # %if.then1428
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$362, %rdx              # imm = 0x16A
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1286:                             # %L11129.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	binary_fp_operator
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_1434
# BB#1287:                              # %if.then10.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB1_1434
# BB#1288:                              # %L11150.i
	movq	%r8, %r15
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$125, %rax
	jne	.LBB1_1289
# BB#1435:                              # %L6102.i
	movq	8(%r14), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1434
# BB#1436:                              # %if.then898.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_1434
# BB#1437:                              # %if.then906.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_1434
# BB#1438:                              # %land.lhs.true911.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_fiop(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_1434
# BB#1439:                              # %land.lhs.true915.i11757
	movzbl	ix86_fpmath(%rip), %eax
	movq	$536, %rdx              # imm = 0x218
	jmp	.LBB1_1280
.LBB1_1941:                             # %L11210.i
	testq	%rcx, %rcx
	jne	.LBB1_1942
# BB#2033:                              # %L7064.i
	movq	%r8, %r12
	movq	8(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	fcmov_comparison_operator
	testq	%r13, %rax
	je	.LBB1_2034
# BB#2035:                              # %if.then589.i12013
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_2036
# BB#2037:                              # %land.lhs.true598.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_2038
# BB#2039:                              # %L7066.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2040
# BB#2041:                              # %land.lhs.true611.i
	cmpq	$0, 8(%rax)
	je	.LBB1_2043
# BB#2042:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_4570:                             # %L154.i
	jmpq	*.LJTI1_5(,%rax,8)
.LBB1_100:                              # %L10933.i
	movq	%rsi, %r12
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_98
# BB#101:                               # %if.then182.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4571
# BB#102:                               # %if.then190.i
	movzbl	target_flags(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$20, %rdx
	jmp	.LBB1_103
.LBB1_561:                              # %lor.lhs.false646.i
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jne	.LBB1_570
# BB#562:                               # %lor.lhs.false646.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB1_570
# BB#563:                               # %lor.lhs.false646.i
	movl	reload_in_progress(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB1_570
.LBB1_565:                              # %land.lhs.true658.i
	andq	$16711680, %rax         # imm = 0xFF0000
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB1_567
# BB#566:                               # %land.lhs.true658.i
	movq	%rax, %rcx
	andq	%r13, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB1_570
.LBB1_567:                              # %lor.lhs.false667.i
	movq	%rbx, %rcx
	testq	$262144, %rdx           # imm = 0x40000
	je	.LBB1_568
# BB#569:                               # %lor.lhs.false667.i
	andq	%r13, %rax
	cmpq	$1048576, %rax          # imm = 0x100000
	movq	%rcx, %rbx
	movq	$157, %rdx
	jne	.LBB1_4569
.LBB1_570:                              # %if.end677.i
	movq	16(%rbx), %r14
.LBB1_379:                              # %L321.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_392
# BB#380:                               # %if.then609.i
	movq	%r14, recog_data+8(%rip)
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$45, %rdx
	jne	.LBB1_4569
# BB#381:                               # %lor.lhs.false767.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	%rbx, %r12
	jne	.LBB1_4569
	jmp	.LBB1_393
.LBB1_392:                              # %if.end611.i
	movq	%rbx, %r12
.LBB1_393:                              # %L10849.i
	movq	8(%r12), %r14
.LBB1_394:                              # %L10849.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_395
# BB#583:                               # %L325.i
	movq	8(%r14), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_movabs_operand
	testq	%r13, %rax
	je	.LBB1_403
# BB#584:                               # %if.then782.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_586
# BB#585:                               # %if.then790.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$46, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
.LBB1_586:                              # %if.end799.i
	movq	8(%r12), %r14
	jmp	.LBB1_403
.LBB1_395:                              # %if.end12.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_401
# BB#396:                               # %if.then15.i
	movq	%r14, recog_data(%rip)
	movq	%r12, %rdi
	movq	16(%rdi), %r12
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_397
# BB#587:                               # %L10973.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$65, %rax
	jg	.LBB1_593
# BB#588:                               # %L10973.i
	cmpq	$43, %rax
	jne	.LBB1_397
# BB#589:                               # %L10985.i
	movq	8(%r12), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_397
# BB#590:                               # %L10996.i
	movl	16(%r12), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_591
# BB#727:                               # %L5986.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262219, %rcx           # imm = 0x4004B
	jne	.LBB1_397
# BB#728:                               # %L5987.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$59, %rcx
	jne	.LBB1_397
# BB#729:                               # %L5988.i
	movq	16(%rax), %rax
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, recog_data+8(%rip)
	movq	$519, %rdx              # imm = 0x207
	testq	$2, %rcx
	je	.LBB1_4569
# BB#730:                               # %if.end1324.i11584
	movq	16(%rdi), %r12
	jmp	.LBB1_397
.LBB1_593:                              # %L10973.i
	cmpq	$119, %rax
	jg	.LBB1_597
# BB#594:                               # %L10973.i
	movq	%rdi, %r14
	cmpq	$66, %rax
	jne	.LBB1_595
# BB#599:                               # %L331.i
	movq	8(%r12), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_movabs_operand
	testq	%r13, %rax
	movq	%r14, %rdi
	je	.LBB1_397
# BB#600:                               # %if.then844.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$47, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
# BB#601:                               # %if.end850.i
	movq	16(%rdi), %r12
	jmp	.LBB1_397
.LBB1_597:                              # %L10973.i
	addq	$-120, %rax
	andq	%r13, %rax
	cmpq	$13, %rax
	ja	.LBB1_397
# BB#598:                               # %L10973.i
	jmpq	*.LJTI1_2(,%rax,8)
.LBB1_657:                              # %L813.i
	movq	%rdi, %r14
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$2, %rax
	jne	.LBB1_658
# BB#662:                               # %L10991.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %rdi
	je	.LBB1_397
# BB#663:                               # %if.then1019.i
	movq	%rbx, recog_data+8(%rip)
	movq	$126, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_595:                              # %L10973.i
	cmpq	$72, %rax
	jne	.LBB1_596
# BB#731:                               # %L7011.i
	movq	8(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$111, %rax
	jne	.LBB1_732
# BB#736:                               # %L7012.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB1_732
# BB#737:                               # %land.lhs.true1352.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_732
# BB#738:                               # %L7013.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_732
# BB#739:                               # %land.lhs.true1365.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_732
# BB#740:                               # %L7014.i
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_732
# BB#741:                               # %land.lhs.true1378.i
	movq	8(%rax), %rax
	cmpq	$-1, %rax
	jne	.LBB1_732
# BB#742:                               # %L7015.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_732
# BB#743:                               # %land.lhs.true1394.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_732
# BB#744:                               # %land.lhs.true1394.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_732
# BB#745:                               # %if.then1401.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$615, %rdx              # imm = 0x267
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1952:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2183:                             # %L11254.i
	testq	%rcx, %rcx
	jne	.LBB1_2184
# BB#2270:                              # %L7073.i
	movq	8(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	fcmov_comparison_operator
	testq	%r13, %rax
	je	.LBB1_2271
# BB#2272:                              # %if.then534.i12122
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_2273
# BB#2274:                              # %land.lhs.true543.i12123
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_2275
# BB#2276:                              # %L7075.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2277
# BB#2278:                              # %land.lhs.true556.i
	cmpq	$0, 8(%rax)
	je	.LBB1_2280
# BB#2279:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1563:                             # %land.lhs.true1449.L4212_crit_edge
	movl	target_flags(%rip), %eax
.LBB1_1564:                             # %L4212
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$33554433, %rax         # imm = 0x2000001
	jne	.LBB1_1500
# BB#1565:                              # %land.lhs.true1461
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1500
# BB#1566:                              # %land.lhs.true1461
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1500
# BB#1567:                              # %if.then1466
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$381, %rdx              # imm = 0x17D
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1500:                             # %if.end1382
	movq	8(%r14), %r15
.LBB1_1501:                             # %L10889
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1502
# BB#1578:                              # %if.then934
	movq	%r15, recog_data(%rip)
	movq	%r14, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB1_1577
# BB#1579:                              # %L11165
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$71, %rcx
	jg	.LBB1_1590
# BB#1580:                              # %L11165
	cmpq	$42, %rcx
	jne	.LBB1_1868
# BB#1581:                              # %L11173.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_1868
# BB#1582:                              # %L11182.i
	movl	16(%rbx), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_1583
# BB#1656:                              # %L6353.i
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB1_1868
# BB#1657:                              # %L11187.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_1658
# BB#1662:                              # %L6364.i
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1663:                              # %if.then263.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$64, %rax
	jne	.LBB1_1868
# BB#1664:                              # %land.lhs.true268.i
	testq	$1, %rax
	je	.LBB1_1868
# BB#1665:                              # %land.lhs.true268.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$579, %rdx              # imm = 0x243
	jmp	.LBB1_1600
.LBB1_1502:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1577:                             # %if.end1479
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_1590:                             # %L11165
	cmpq	$101, %rcx
	jg	.LBB1_1601
# BB#1591:                              # %L11165
	addq	$-72, %rcx
	andq	%r13, %rcx
	cmpq	$7, %rcx
	ja	.LBB1_1868
# BB#1592:                              # %L11165
	movq	%r8, %r12
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$216, %rax
	jne	.LBB1_1623
# BB#1593:                              # %L11165
	testq	%rcx, %rcx
	jne	.LBB1_1594
# BB#1666:                              # %L7139.i
	movq	8(%rbx), %r14
	movzbl	(%r14), %eax
	cmpq	$105, %rax
	jne	.LBB1_1667
# BB#1713:                              # %L7232.i
	movq	8(%r14), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB1_1668
# BB#1714:                              # %L11191.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1719
# BB#1715:                              # %if.then496.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1718
# BB#1716:                              # %if.then514.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1717
# BB#1728:                              # %L7235.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1717
# BB#1729:                              # %land.lhs.true540.i
	movl	target_flags(%rip), %eax
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1717
# BB#1730:                              # %land.lhs.true543.i
	movzbl	ix86_fpmath(%rip), %ecx
	testq	$2, %rcx
	je	.LBB1_1717
# BB#1731:                              # %land.lhs.true546.i
	testq	$16, %rax
	je	.LBB1_1717
# BB#1732:                              # %land.lhs.true546.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1717
# BB#1733:                              # %if.then551.i11870
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$632, %rdx              # imm = 0x278
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1601:                             # %L11165
	addq	$-102, %rcx
	andq	%r13, %rcx
	cmpq	$28, %rcx
	ja	.LBB1_1868
# BB#1602:                              # %L11165
	movq	%r8, %r12
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$261183, %rax           # imm = 0x3FC3F
	je	.LBB1_1603
# BB#1618:                              # %L11167.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	sse_comparison_operator
	testq	%r13, %rax
	je	.LBB1_1623
# BB#1619:                              # %if.then.i11779
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_1868
# BB#1620:                              # %if.then1031.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_1868
# BB#1621:                              # %if.then1039.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+24(%rip)
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1868
# BB#1622:                              # %if.then1039.i
	movl	reload_completed(%rip), %eax
	movq	$489, %rdx              # imm = 0x1E9
	jmp	.LBB1_1600
.LBB1_1623:                             # %L11168.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	binary_fp_operator
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_1868
# BB#1624:                              # %if.then10.i11782
	movq	%rbx, recog_data+24(%rip)
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB1_1868
# BB#1625:                              # %L11198.i
	movq	%r8, %r15
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$122, %rax
	jg	.LBB1_1799
# BB#1626:                              # %L11198.i
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	ja	.LBB1_1801
# BB#1627:                              # %L11198.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_1801
# BB#1628:                              # %L11196.i
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1801
# BB#1629:                              # %if.then1065.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1825
# BB#1630:                              # %if.then1144.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	%rax, %rcx
	andq	$262144, %rcx           # imm = 0x40000
	movq	%rax, %rbx
	andq	$1, %rbx
	movq	%r15, %rdi
	je	.LBB1_1835
# BB#1631:                              # %land.lhs.true1152.i
	testq	%r13, %rcx
	je	.LBB1_1633
# BB#1632:                              # %lor.lhs.false1155.i
	movl	ix86_fpmath(%rip), %esi
	testq	$2, %rsi
	jne	.LBB1_1828
.LBB1_1633:                             # %land.lhs.true1158.i
	movq	recog_data+24(%rip), %rsi
	movzbl	(%rsi), %esi
	movzbl	rtx_class(%rsi), %esi
	cmpq	$99, %rsi
	movq	%rdi, %rsi
	jne	.LBB1_1827
# BB#1634:                              # %land.lhs.true1165.i
	movq	%rsi, %rdi
	movq	recog_data+8(%rip), %rsi
	movzbl	(%rsi), %esi
	cmpq	$66, %rsi
	jne	.LBB1_1635
# BB#1826:                              # %lor.lhs.false1171.i
	movzbl	(%r14), %esi
	cmpq	$66, %rsi
	movq	%rdi, %rsi
	movq	$528, %rdx              # imm = 0x210
	jne	.LBB1_4569
.LBB1_1827:                             # %L6061.i.land.lhs.true1181.i_crit_edge
	movq	%rsi, %rdi
	movl	ix86_fpmath(%rip), %esi
.LBB1_1828:                             # %land.lhs.true1181.i
	testq	$2, %rsi
	je	.LBB1_1835
# BB#1829:                              # %land.lhs.true1181.i
	testq	%r13, %rcx
	je	.LBB1_1835
# BB#1830:                              # %land.lhs.true1181.i
	andq	$1, %rsi
	je	.LBB1_1835
# BB#1831:                              # %land.lhs.true1195.i
	movq	recog_data+24(%rip), %rsi
	movzbl	(%rsi), %esi
	movzbl	rtx_class(%rsi), %esi
	cmpq	$99, %rsi
	jne	.LBB1_1835
# BB#1832:                              # %land.lhs.true1204.i
	movq	recog_data+8(%rip), %rsi
	movzbl	(%rsi), %esi
	cmpq	$66, %rsi
	jne	.LBB1_1833
# BB#1834:                              # %lor.lhs.false1210.i
	movzbl	(%r14), %esi
	cmpq	$66, %rsi
	movq	$529, %rdx              # imm = 0x211
	jne	.LBB1_4569
.LBB1_1835:                             # %L6067.i
	testq	%r13, %rcx
	je	.LBB1_1841
# BB#1836:                              # %land.lhs.true1221.i
	movzbl	ix86_fpmath(%rip), %esi
	testq	$2, %rsi
	je	.LBB1_1841
# BB#1837:                              # %land.lhs.true1225.i
	movq	recog_data+24(%rip), %rsi
	movzbl	(%rsi), %esi
	movzbl	rtx_class(%rsi), %esi
	cmpq	$99, %rsi
	jne	.LBB1_1841
# BB#1838:                              # %land.lhs.true1234.i
	movq	recog_data+8(%rip), %rsi
	movzbl	(%rsi), %esi
	cmpq	$66, %rsi
	jne	.LBB1_1839
# BB#1840:                              # %lor.lhs.false1240.i
	movzbl	(%r14), %esi
	cmpq	$66, %rsi
	movq	$530, %rdx              # imm = 0x212
	jne	.LBB1_4569
.LBB1_1841:                             # %L6117.i
	testq	%r13, %rbx
	je	.LBB1_1848
# BB#1842:                              # %land.lhs.true1250.i
	testq	%r13, %rcx
	je	.LBB1_1844
# BB#1843:                              # %lor.lhs.false1254.i
	movzbl	ix86_fpmath(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB1_1848
.LBB1_1844:                             # %land.lhs.true1258.i
	movq	recog_data+24(%rip), %rcx
	movzbl	(%rcx), %ecx
	movzbl	rtx_class(%rcx), %ecx
	cmpq	$99, %rcx
	je	.LBB1_1848
# BB#1845:                              # %land.lhs.true1267.i
	movq	%rdi, %rdx
	movq	recog_data+8(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	jne	.LBB1_1846
# BB#1847:                              # %lor.lhs.false1273.i
	movzbl	(%r14), %ecx
	cmpq	$66, %rcx
	movq	%rdx, %rdi
	movq	$538, %rdx              # imm = 0x21A
	jne	.LBB1_4569
.LBB1_1848:                             # %L6123.i
	andq	$262145, %rax           # imm = 0x40001
	cmpq	$262145, %rax           # imm = 0x40001
	jne	.LBB1_1854
# BB#1849:                              # %land.lhs.true1287.i
	movl	ix86_fpmath(%rip), %eax
	andq	$3, %rax
	cmpq	$3, %rax
	jne	.LBB1_1854
# BB#1850:                              # %land.lhs.true1297.i
	movq	recog_data+24(%rip), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$99, %rax
	je	.LBB1_1854
# BB#1851:                              # %land.lhs.true1306.i
	movq	%rdi, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1852
# BB#1853:                              # %lor.lhs.false1312.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	%rcx, %rdi
	movq	$539, %rdx              # imm = 0x21B
	jne	.LBB1_4569
.LBB1_1854:                             # %if.end1319.i
	movq	16(%rdi), %rbx
	movq	%rdi, %r15
	movq	8(%rbx), %r14
	jmp	.LBB1_1801
.LBB1_1583:                             # %L11182.i
	cmpq	$1, %rcx
	jne	.LBB1_1868
# BB#1584:                              # %L6327.i
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB1_1868
# BB#1585:                              # %L11185.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_1586
# BB#1652:                              # %L6338.i
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1653:                              # %if.then216.i11812
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$64, %rax
	jne	.LBB1_1868
# BB#1654:                              # %land.lhs.true221.i
	testq	$1, %rax
	je	.LBB1_1868
# BB#1655:                              # %land.lhs.true221.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$574, %rdx              # imm = 0x23E
	jmp	.LBB1_1600
.LBB1_1965:                             # %L11222.i
	movq	%r8, %r14
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1966
# BB#1967:                              # %if.then325.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$183, %rdx
	jmp	.LBB1_1961
.LBB1_1957:                             # %L1171.i
	cmpq	$3, %rax
	jne	.LBB1_7
# BB#1958:                              # %L11220.i
	movq	%r8, %r14
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1959
# BB#1960:                              # %if.then301.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$179, %rdx
	jmp	.LBB1_1961
.LBB1_1252:                             # %L11138.i
	cmpq	$1, %rcx
	jne	.LBB1_1434
# BB#1253:                              # %L6332.i
	movq	8(%rax), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	register_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_1434
# BB#1254:                              # %if.then116.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	testq	$64, %rax
	jne	.LBB1_1434
# BB#1255:                              # %land.lhs.true121.i
	testq	$1, %rax
	je	.LBB1_1434
# BB#1256:                              # %land.lhs.true121.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$573, %rdx              # imm = 0x23D
	jmp	.LBB1_1265
.LBB1_2027:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2030:                             # %land.lhs.true577.i
	testq	$1, %rax
	je	.LBB1_2031
# BB#2032:                              # %land.lhs.true577.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$580, %rdx              # imm = 0x244
	jmp	.LBB1_2007
.LBB1_1954:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1991:                             # %if.end410.i
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1992
# BB#1993:                              # %if.then413.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_2004
# BB#1994:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2264:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2194:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2196:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2232:                             # %if.end376.i
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2233
# BB#2234:                              # %if.then379.i12099
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_2235
# BB#2236:                              # %if.then379.i12099
	movl	reload_completed(%rip), %eax
	movq	$390, %rdx              # imm = 0x186
	jmp	.LBB1_2007
.LBB1_2208:                             # %L11266.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2209
# BB#2210:                              # %if.then303.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$184, %rdx
	testq	$1, %rax
	jmp	.LBB1_2008
.LBB1_2199:                             # %L1176.i
	cmpq	$3, %rax
	jne	.LBB1_2200
# BB#2201:                              # %L11264.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2202
# BB#2203:                              # %if.then285.i12090
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$180, %rdx
	testq	$1, %rax
	jmp	.LBB1_2008
.LBB1_1942:                             # %L11210.i
	movq	%r8, %rbx
	cmpq	$5, %rcx
	jne	.LBB1_1943
# BB#1968:                              # %L4071.i
	movq	8(%r14), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1114112, %rcx          # imm = 0x110000
	jne	.LBB1_1969
# BB#1970:                              # %L11224.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_1971
# BB#1975:                              # %L4077.i
	movq	8(%r14), %r14
	movzbl	2(%r14), %eax
	cmpq	$15, %rax
	jne	.LBB1_1976
# BB#1982:                              # %L11226.i
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1983
# BB#1984:                              # %if.then378.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$370, %rdx              # imm = 0x172
	jmp	.LBB1_1981
.LBB1_591:                              # %L10996.i
	movq	%rdi, %rbx
	cmpq	$1, %rcx
	jne	.LBB1_592
# BB#712:                               # %L5975.i
	movq	8(%rax), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	(%rax), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB1_713
# BB#714:                               # %L5976.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_715
# BB#716:                               # %L5977.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	(%rax), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB1_717
# BB#718:                               # %L5978.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	symbolic_operand
	testq	%r13, %rax
	je	.LBB1_719
# BB#720:                               # %if.then1257.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	16(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262220, %rcx           # imm = 0x4004C
	jne	.LBB1_721
# BB#722:                               # %L5980.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$59, %rcx
	movq	%rbx, %rdi
	jne	.LBB1_397
# BB#723:                               # %L5981.i
	movq	%rdi, %rdx
	movq	16(%rax), %rax
	movl	target_flags(%rip), %ecx
	movq	%rax, recog_data+16(%rip)
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB1_726
# BB#724:                               # %L5981.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_726
# BB#725:                               # %if.then1289.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$518, %rdx              # imm = 0x206
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_596:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_2184:                             # %L11254.i
	cmpq	$5, %rcx
	jne	.LBB1_2185
# BB#2211:                              # %L4088.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1179648, %rcx          # imm = 0x120000
	jne	.LBB1_2212
# BB#2213:                              # %L11268.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_2214
# BB#2219:                              # %L4094.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB1_2220
# BB#2227:                              # %L11270.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2228
# BB#2229:                              # %if.then350.i12096
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$373, %rdx              # imm = 0x175
	jmp	.LBB1_2225
.LBB1_1594:                             # %L11165
	cmpq	$5, %rcx
	movq	%r12, %r8
	jne	.LBB1_1868
# BB#1595:                              # %L4060.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB1_1868
# BB#1596:                              # %L11176.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_1597
# BB#1636:                              # %L4066.i
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1637:                              # %if.then35.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$367, %rdx              # imm = 0x16F
	jmp	.LBB1_1638
.LBB1_482:                              # %L1786.i
	movq	8(%r14), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_483
# BB#484:                               # %L1787.i
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_485
# BB#486:                               # %if.then331.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_487
# BB#488:                               # %land.lhs.true340.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_489
# BB#490:                               # %L1789.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_491
# BB#492:                               # %land.lhs.true353.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_493
# BB#494:                               # %L1845.i
	movq	16(%r14), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_495
# BB#504:                               # %L1846.i
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_505
# BB#506:                               # %if.then388.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+16(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_507
# BB#508:                               # %land.lhs.true397.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_509
# BB#510:                               # %L1848.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_511
# BB#512:                               # %land.lhs.true410.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_513
# BB#514:                               # %land.lhs.true410.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rbx, %r8
	je	.LBB1_424
# BB#515:                               # %if.then417.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$229, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_432:                              # %L10964.i
	cmpq	$83, %rax
	jne	.LBB1_433
# BB#434:                               # %L503.i
	movq	8(%r14), %r12
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_435
# BB#436:                               # %L10967.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB1_437
# BB#448:                               # %L3076.i
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_449
# BB#450:                               # %if.then176.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_451
# BB#452:                               # %land.lhs.true185.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_453
# BB#454:                               # %L3078.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_455
# BB#456:                               # %land.lhs.true198.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_457
# BB#458:                               # %L3128.i
	movq	16(%r14), %r12
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_459
# BB#463:                               # %L10969.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB1_464
# BB#475:                               # %L3187.i
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_459
# BB#476:                               # %if.then270.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+16(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_459
# BB#477:                               # %land.lhs.true279.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_459
# BB#478:                               # %L3189.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_459
# BB#479:                               # %land.lhs.true292.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_459
# BB#480:                               # %land.lhs.true292.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_459
# BB#481:                               # %if.then299.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$306, %rdx              # imm = 0x132
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_518:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_520:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_522:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_524:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_526:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_528:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_530:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_532:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_534:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_536:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_538:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_540:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_582:                              # %if.end759.i
	movq	16(%rbx), %r14
	jmp	.LBB1_379
.LBB1_1012:                             # %L11032.i
	movl	16(%r14), %eax
	testq	%rax, %rax
	jne	.LBB1_978
# BB#1013:                              # %L472.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_978
# BB#1014:                              # %L473.i
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1015:                              # %if.then299.i11608
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_978
# BB#1016:                              # %land.lhs.true311.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_978
# BB#1017:                              # %L475.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	jne	.LBB1_1020
# BB#1018:                              # %land.lhs.true327.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_1020
# BB#1019:                              # %land.lhs.true332.i
	movzbl	target_flags+3(%rip), %eax
	movq	$71, %rdx
	testq	$2, %rax
	je	.LBB1_4569
.LBB1_1020:                             # %if.end336.i
	movq	8(%rcx), %r14
	movq	%rcx, %r12
	jmp	.LBB1_979
.LBB1_1021:                             # %L1686.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1022:                              # %if.then345.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1023:                              # %if.then356.i
	movq	%rbx, recog_data+16(%rip)
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r14, %rdx
	testq	%r13, %rdx
	jne	.LBB1_1027
# BB#1024:                              # %land.lhs.true364.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1026
# BB#1025:                              # %land.lhs.true364.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1026
# BB#4577:                              # %if.then369.i11613
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$221, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1031:                             # %L2098.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1032:                              # %if.then389.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1033:                              # %if.then400.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1034:                              # %if.then400.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1035:                              # %if.then410.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$246, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1051:                             # %L3904.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1052:                              # %if.then513.i
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1053:                              # %if.then513.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1054:                              # %if.then523.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$353, %rdx              # imm = 0x161
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1036:                             # %L3009.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1037:                              # %if.then420.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1038:                              # %if.then431.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1039:                              # %if.then431.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1040:                              # %if.then441.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$298, %rdx              # imm = 0x12A
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1041:                             # %L3396.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1042:                              # %if.then451.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1043:                              # %if.then462.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1044:                              # %if.then462.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1045:                              # %if.then472.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$320, %rdx              # imm = 0x140
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1046:                             # %L3666.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1047:                              # %if.then482.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1048:                              # %if.then493.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1049:                              # %if.then493.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1050:                              # %if.then503.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$338, %rdx              # imm = 0x152
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1055:                             # %L4356.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1056:                              # %if.then533.i
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rax
	movq	$86, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	$401, %rdx              # imm = 0x191
	movq	%r12, %rax
	jne	.LBB1_4569
# BB#1057:                              # %if.end542.i
	movq	8(%rax), %r14
	movq	%rax, %r12
	jmp	.LBB1_979
.LBB1_1058:                             # %L4560.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1059:                              # %if.then551.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1060:                              # %if.then562.i
	movq	%rbx, recog_data+16(%rip)
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r14, %rdx
	testq	%r13, %rdx
	jne	.LBB1_1064
# BB#1061:                              # %land.lhs.true571.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1063
# BB#1062:                              # %land.lhs.true571.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1063
# BB#4578:                              # %if.then576.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$415, %rdx              # imm = 0x19F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1090:                             # %L5398.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1091:                              # %if.then700.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_1097
# BB#1092:                              # %if.then711.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1096
# BB#1093:                              # %land.lhs.true724.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_1096
# BB#1094:                              # %land.lhs.true724.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1096
# BB#1095:                              # %if.then730.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$474, %rdx              # imm = 0x1DA
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1068:                             # %L4922.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1069:                              # %if.then596.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_1075
# BB#1070:                              # %if.then607.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1074
# BB#1071:                              # %land.lhs.true620.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_1074
# BB#1072:                              # %land.lhs.true620.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1074
# BB#1073:                              # %if.then626.i11625
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$440, %rdx              # imm = 0x1B8
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1079:                             # %L5228.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1080:                              # %if.then648.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_1086
# BB#1081:                              # %if.then659.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1085
# BB#1082:                              # %land.lhs.true672.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_1085
# BB#1083:                              # %land.lhs.true672.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1085
# BB#1084:                              # %if.then678.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$462, %rdx              # imm = 0x1CE
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1101:                             # %L5542.i
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1102:                              # %if.then752.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_1108
# BB#1103:                              # %if.then763.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_1107
# BB#1104:                              # %land.lhs.true776.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_1107
# BB#1105:                              # %land.lhs.true776.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1107
# BB#1106:                              # %if.then782.i11632
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$484, %rdx              # imm = 0x1E4
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1535:
	movq	$174, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_122:
	movq	%r12, %rsi
	jmp	.LBB1_92
.LBB1_1918:
	movq	$135, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2054:                             # %L11238.i
	cmpq	$123, %rax
	jne	.LBB1_2055
# BB#2068:                              # %L6202.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	jne	.LBB1_2069
# BB#2077:                              # %L11241.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2078
# BB#2079:                              # %if.then722.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2080
# BB#2081:                              # %if.then730.i12026
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$555, %rdx              # imm = 0x22B
	jmp	.LBB1_2076
.LBB1_2053:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2058:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2060:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2086:                             # %L11243.i
	cmpq	$123, %rax
	jne	.LBB1_2087
# BB#2096:                              # %L6217.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	jne	.LBB1_2097
# BB#2102:                              # %L11246.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2103
# BB#2104:                              # %if.then803.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$557, %rdx              # imm = 0x22D
	jmp	.LBB1_2076
.LBB1_2085:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2090:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1996:                             # %L4262.i
	cmpq	$16, %rax
	jne	.LBB1_1997
# BB#1998:                              # %L11229.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1999
# BB#2000:                              # %if.then428.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$388, %rdx              # imm = 0x184
	jmp	.LBB1_1961
.LBB1_2002:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2146:
	movq	$136, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2267:                             # %land.lhs.true522.i
	movq	%r13, %rcx
	testq	$1, %rax
	je	.LBB1_2268
# BB#2269:                              # %land.lhs.true522.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$581, %rdx              # imm = 0x245
	testq	%rcx, %rax
	jmp	.LBB1_2008
.LBB1_2291:                             # %L11282.i
	cmpq	$123, %rax
	jne	.LBB1_2292
# BB#2305:                              # %L6209.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	jne	.LBB1_2306
# BB#2313:                              # %L11285.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2314
# BB#2315:                              # %if.then658.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2316
# BB#2317:                              # %if.then666.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$556, %rdx              # imm = 0x22C
	jmp	.LBB1_2225
.LBB1_2290:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2295:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2297:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2322:                             # %L11287.i
	cmpq	$123, %rax
	jne	.LBB1_2323
# BB#2332:                              # %L6224.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	jne	.LBB1_2333
# BB#2338:                              # %L11290.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2339
# BB#2340:                              # %if.then730.i12151
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$558, %rdx              # imm = 0x22E
	jmp	.LBB1_2225
.LBB1_2321:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2326:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2238:                             # %L4279.i
	cmpq	$16, %rax
	jne	.LBB1_2239
# BB#2240:                              # %L11273.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2241
# BB#2242:                              # %if.then394.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$391, %rdx              # imm = 0x187
	testq	$1, %rax
	jmp	.LBB1_2008
.LBB1_2244:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1221:
	movq	$168, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1525:
	movq	$177, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1963:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1949:                             # %if.end472.i
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1950
# BB#2009:                              # %if.then475.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$33554497, %rcx         # imm = 0x2000041
	cmpq	$1, %rcx
	jne	.LBB1_2010
# BB#2020:                              # %land.lhs.true526.i
	movl	flag_unsafe_math_optimizations(%rip), %ecx
	andq	$16, %rax
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$566, %rdx              # imm = 0x236
	jmp	.LBB1_2008
.LBB1_2012:                             # %L6304.i
	cmpq	$16, %rax
	jne	.LBB1_2013
# BB#2014:                              # %L11233.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2015
# BB#2016:                              # %if.then490.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554497, %rax         # imm = 0x2000041
	cmpq	$1, %rax
	movq	$568, %rdx              # imm = 0x238
	jmp	.LBB1_1961
.LBB1_2018:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1903:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2022:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2024:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2206:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2191:                             # %if.end429.i
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2192
# BB#2246:                              # %if.then432.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$65, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_2247
# BB#2257:                              # %land.lhs.true474.i
	movl	flag_unsafe_math_optimizations(%rip), %ecx
	andq	$16, %rax
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$567, %rdx              # imm = 0x237
	jmp	.LBB1_2008
.LBB1_2249:                             # %L6310.i
	cmpq	$16, %rax
	jne	.LBB1_2250
# BB#2251:                              # %L11277.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2252
# BB#2253:                              # %if.then447.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$65, %rax
	cmpq	$1, %rax
	movq	$569, %rdx              # imm = 0x239
.LBB1_1961:                             # %if.then301.i
	movq	%r14, %r8
	jne	.LBB1_7
	jmp	.LBB1_4569
.LBB1_2255:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2131:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2260:                             # %land.lhs.true503.i
	testq	$1, %rax
	je	.LBB1_2261
# BB#2262:                              # %land.lhs.true503.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$576, %rdx              # imm = 0x240
	jmp	.LBB1_2007
.LBB1_1213:
	movq	$170, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1225:
	movq	$170, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1229:
	movq	$171, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1261:                             # %L11126
	cmpq	$5, %rcx
	movq	%r12, %r8
	jne	.LBB1_1434
# BB#1262:                              # %L4055.i
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_1434
# BB#1263:                              # %if.then18.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_1434
# BB#1264:                              # %if.then18.i
	movl	reload_completed(%rip), %eax
	movq	$365, %rdx              # imm = 0x16D
	jmp	.LBB1_1265
.LBB1_1304:                             # %L7093.i
	cmpq	$107, %rax
	jne	.LBB1_1305
# BB#1317:                              # %L7094.i
	movq	8(%r14), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB1_1305
# BB#1318:                              # %L11140.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1323
# BB#1319:                              # %if.then187.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1322
# BB#1320:                              # %if.then205.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1321
# BB#1332:                              # %L7097.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1321
# BB#1333:                              # %land.lhs.true231.i
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1321
# BB#1334:                              # %land.lhs.true234.i
	testq	$16, %rax
	je	.LBB1_1321
# BB#1335:                              # %land.lhs.true234.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1321
# BB#1336:                              # %if.then239.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$623, %rdx              # imm = 0x26F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1352:                             # %if.end381.i
	movq	8(%rbx), %r14
.LBB1_1353:                             # %if.end370.i
	movq	8(%r14), %r15
.LBB1_1354:                             # %L11144.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1359
# BB#1355:                              # %if.then355.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1358
# BB#1356:                              # %if.then415.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1357
# BB#1368:                              # %L7208.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1357
# BB#1369:                              # %land.lhs.true441.i
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1357
# BB#1370:                              # %land.lhs.true441.i
	andq	$16, %rax
	testq	%r13, %rax
	jne	.LBB1_1357
# BB#1371:                              # %land.lhs.true447.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1373
# BB#1372:                              # %lor.lhs.false452.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_1357
.LBB1_1373:                             # %land.lhs.true457.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1357
# BB#1374:                              # %if.then459.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$630, %rdx              # imm = 0x276
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1268:                             # %L11126
	cmpq	$27, %rcx
	jne	.LBB1_1269
# BB#1296:                              # %L4240.i
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_1434
# BB#1297:                              # %if.then30.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_1434
# BB#1298:                              # %if.then30.i
	movl	reload_completed(%rip), %eax
	movq	$384, %rdx              # imm = 0x180
.LBB1_1265:                             # %if.then18.i
	testq	%r13, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1434
.LBB1_1289:                             # %if.end882.i
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1428
# BB#1290:                              # %if.then885.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1427
# BB#1291:                              # %if.then925.i
	movl	target_flags(%rip), %ecx
	movl	ix86_fpmath(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	andq	$1, %rcx
	movq	%r15, %rdi
	je	.LBB1_1446
# BB#1292:                              # %land.lhs.true933.i11759
	testq	$2, %rax
	jne	.LBB1_1441
# BB#1293:                              # %land.lhs.true936.i
	movq	recog_data+24(%rip), %rdx
	movzbl	(%rdx), %edx
	movzbl	rtx_class(%rdx), %edx
	cmpq	$99, %rdx
	jne	.LBB1_1441
# BB#1294:                              # %land.lhs.true943.i
	movq	%rdi, %rsi
	movq	recog_data+8(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB1_1295
# BB#1440:                              # %lor.lhs.false949.i
	movzbl	(%r14), %edx
	cmpq	$66, %rdx
	movq	%rsi, %rdi
	movq	$525, %rdx              # imm = 0x20D
	jne	.LBB1_4569
.LBB1_1441:                             # %land.lhs.true959.i
	movq	%rax, %rdx
	andq	$3, %rdx
	cmpq	$3, %rdx
	jne	.LBB1_1446
# BB#1442:                              # %land.lhs.true969.i
	movq	recog_data+24(%rip), %rdx
	movzbl	(%rdx), %edx
	movzbl	rtx_class(%rdx), %edx
	cmpq	$99, %rdx
	jne	.LBB1_1446
# BB#1443:                              # %land.lhs.true978.i
	movq	%rdi, %rsi
	movq	recog_data+8(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB1_1444
# BB#1445:                              # %lor.lhs.false984.i
	movzbl	(%r14), %edx
	cmpq	$66, %rdx
	movq	%rsi, %rdi
	movq	$526, %rdx              # imm = 0x20E
	jne	.LBB1_4569
.LBB1_1446:                             # %L6049.i
	movq	%rax, %rbx
	andq	$2, %rbx
	je	.LBB1_1451
# BB#1447:                              # %land.lhs.true995.i
	movq	recog_data+24(%rip), %rsi
	movzbl	(%rsi), %esi
	movzbl	rtx_class(%rsi), %esi
	cmpq	$99, %rsi
	jne	.LBB1_1451
# BB#1448:                              # %land.lhs.true1004.i
	movq	recog_data+8(%rip), %rsi
	movzbl	(%rsi), %esi
	cmpq	$66, %rsi
	jne	.LBB1_1449
# BB#1450:                              # %lor.lhs.false1010.i
	movzbl	(%r14), %esi
	cmpq	$66, %rsi
	movq	$527, %rdx              # imm = 0x20F
	jne	.LBB1_4569
.LBB1_1451:                             # %L6085.i
	testq	%r13, %rcx
	je	.LBB1_1464
# BB#1452:                              # %land.lhs.true1020.i
	movq	%rdi, %rsi
	testq	%r13, %rbx
	je	.LBB1_1453
# BB#1458:                              # %land.lhs.true1049.i
	andq	$3, %rax
	cmpq	$3, %rax
	movq	%rsi, %rdi
	jne	.LBB1_1464
# BB#1459:                              # %land.lhs.true1049.i.land.lhs.true1059.i_crit_edge
	movq	recog_data+24(%rip), %rax
	movl	(%rax), %ecx
	jmp	.LBB1_1460
.LBB1_2034:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2036:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2038:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2040:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2043:                             # %L7067.i
	movq	16(%r14), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2044
# BB#2045:                              # %if.then622.i12020
	movq	%rbx, recog_data+16(%rip)
	movq	24(%r14), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2046
# BB#2047:                              # %if.then630.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_2049
# BB#2048:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_105:                              # %L10934.i
	movq	%rsi, %r12
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_98
# BB#106:                               # %if.then213.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4571
# BB#107:                               # %if.then221.i
	movzbl	target_flags(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$22, %rdx
	jmp	.LBB1_103
.LBB1_108:                              # %L10935.i
	movq	%rsi, %r12
	movq	$17, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_98
# BB#109:                               # %if.then244.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$17, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_4571
# BB#110:                               # %if.then252.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$25, %rdx
	movq	%r12, %rcx
	jne	.LBB1_104
	jmp	.LBB1_4569
.LBB1_111:                              # %L10936.i
	movq	%rsi, %r12
	movq	$18, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_98
# BB#112:                               # %if.then278.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$18, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_4571
# BB#113:                               # %if.then286.i
	movzbl	target_flags(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$26, %rdx
.LBB1_103:                              # %if.then190.i
	testq	$1, %rax
	movq	%r12, %rcx
	jne	.LBB1_4569
.LBB1_104:                              # %if.end199.i
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
	movq	8(%rbx), %r14
	jmp	.LBB1_98
.LBB1_568:
	movq	$157, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_621:                              # %L688.i
	movq	%rdi, %r14
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$2, %rax
	jne	.LBB1_622
# BB#635:                               # %L10989.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %rdi
	je	.LBB1_397
# BB#636:                               # %if.then969.i
	movq	%rdi, %r8
	movq	%rbx, recog_data+8(%rip)
	movl	ix86_cpu(%rip), %ecx
	movl	x86_zero_extend_with_and(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rdx, %rax
	andq	%r13, %rax
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	je	.LBB1_638
# BB#637:                               # %if.then969.i
	movq	%rsi, %rdx
.LBB1_638:                              # %if.then969.i
	testq	%rax, %rax
	movq	%rcx, %rax
	jne	.LBB1_640
# BB#639:                               # %if.then969.i
	movq	%rsi, %rax
.LBB1_640:                              # %if.then969.i
	movl	optimize_size(%rip), %edi
	testq	%rdi, %rdi
	movq	%rcx, %rdi
	jne	.LBB1_642
# BB#641:                               # %if.then969.i
	movq	%rsi, %rdi
.LBB1_642:                              # %if.then969.i
	je	.LBB1_644
# BB#643:                               # %if.then969.i
	movq	%rsi, %rcx
.LBB1_644:                              # %if.then969.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_647
# BB#645:                               # %if.then969.i
	andq	%rdi, %rdx
	je	.LBB1_647
# BB#646:                               # %if.then979.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$112, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_673:                              # %L2348.i
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%r12), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB1_674
# BB#675:                               # %L2349.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327758, %rax           # imm = 0x5004E
	jne	.LBB1_676
# BB#677:                               # %L2350.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$327680, %rdx           # imm = 0x50000
	jne	.LBB1_678
# BB#679:                               # %L10994.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	jne	.LBB1_680
# BB#697:                               # %L2428.i
	movq	8(%rax), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_698
# BB#699:                               # %if.then1156.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327800, %rcx           # imm = 0x50078
	jne	.LBB1_700
# BB#701:                               # %L2430.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_702
# BB#703:                               # %if.then1177.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_704
# BB#705:                               # %land.lhs.true1186.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB1_706
# BB#707:                               # %land.lhs.true1191.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_710
# BB#708:                               # %lor.lhs.false1196.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	je	.LBB1_709
.LBB1_710:                              # %land.lhs.true1201.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	8(%rsp), %rdi           # 8-byte Reload
	je	.LBB1_397
# BB#711:                               # %if.then1203.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$264, %rdx              # imm = 0x108
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_664:                              # %L1065.i
	movq	%rdi, %r14
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	jne	.LBB1_665
# BB#670:                               # %L10993.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %rdi
	je	.LBB1_397
# BB#671:                               # %if.then1046.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$161, %rdx
	testq	$4, %rax
	jne	.LBB1_4569
# BB#672:                               # %if.end1052.i
	movq	16(%rdi), %r12
	jmp	.LBB1_397
.LBB1_602:                              # %L432.i
	movq	%rdi, %r14
	movq	8(%r12), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_603
# BB#604:                               # %if.then859.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_605
# BB#606:                               # %land.lhs.true868.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_607
# BB#608:                               # %L434.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_609
# BB#610:                               # %land.lhs.true881.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	movq	$64, %rdx
	jmp	.LBB1_611
.LBB1_612:                              # %L466.i
	movq	%rdi, %r14
	movq	8(%r12), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_613
# BB#614:                               # %if.then893.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_615
# BB#616:                               # %land.lhs.true902.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_617
# BB#618:                               # %L468.i
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_619
# BB#620:                               # %land.lhs.true915.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	movq	$70, %rdx
.LBB1_611:                              # %land.lhs.true881.i
	movq	%r14, %rdi
	jne	.LBB1_397
	jmp	.LBB1_4569
.LBB1_658:                              # %L813.i
	cmpq	$3, %rax
	jne	.LBB1_659
# BB#660:                               # %L10990.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %rdi
	je	.LBB1_397
# BB#661:                               # %if.then1014.i
	movq	%rbx, recog_data+8(%rip)
	movq	$123, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_732:                              # %L7019.i
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	ix86_comparison_operator
	testq	%r13, %rax
	je	.LBB1_733
# BB#734:                               # %if.then1338.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_735
# BB#746:                               # %land.lhs.true1412.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_747
# BB#748:                               # %L7021.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_749
# BB#750:                               # %land.lhs.true1425.i
	cmpq	$0, 8(%rax)
	je	.LBB1_752
# BB#751:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_2271:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2273:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2275:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2277:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2280:                             # %L7076.i
	movq	16(%r14), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2281
# BB#2282:                              # %if.then567.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%r14), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2283
# BB#2284:                              # %if.then575.i
	movq	%rbx, recog_data+24(%rip)
	movl	ix86_arch(%rip), %eax
	movl	x86_cmove(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_2286
# BB#2285:
	movq	$622, %rdx              # imm = 0x26E
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1658:                             # %if.end252.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1659:                              # %if.then255.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$64, %rax
	jne	.LBB1_1868
# BB#1660:                              # %land.lhs.true277.i
	testq	$1, %rax
	je	.LBB1_1868
# BB#1661:                              # %land.lhs.true277.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$577, %rdx              # imm = 0x241
	jmp	.LBB1_1600
.LBB1_1667:                             # %L7139.i
	cmpq	$107, %rax
	jne	.LBB1_1668
# BB#1680:                              # %L7140.i
	movq	8(%r14), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB1_1668
# BB#1681:                              # %L11188.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1686
# BB#1682:                              # %if.then324.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1685
# BB#1683:                              # %if.then342.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1684
# BB#1695:                              # %L7143.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1684
# BB#1696:                              # %land.lhs.true368.i
	movl	target_flags(%rip), %eax
	andq	$262160, %rax           # imm = 0x40010
	cmpq	$262160, %rax           # imm = 0x40010
	jne	.LBB1_1684
# BB#1697:                              # %land.lhs.true374.i11842
	movl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	je	.LBB1_1684
# BB#1698:                              # %land.lhs.true374.i11842
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1684
# BB#1699:                              # %if.then379.i11843
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$626, %rdx              # imm = 0x272
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1717:                             # %if.end527.i
	movq	8(%rbx), %r14
.LBB1_1718:                             # %if.end516.i
	movq	8(%r14), %r15
.LBB1_1719:                             # %L11192.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1724
# BB#1720:                              # %if.then501.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1723
# BB#1721:                              # %if.then564.i11872
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1722
# BB#1734:                              # %L7254.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1722
# BB#1735:                              # %land.lhs.true590.i
	movl	target_flags(%rip), %eax
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1722
# BB#1736:                              # %land.lhs.true593.i
	movl	ix86_fpmath(%rip), %ecx
	testq	$2, %rcx
	je	.LBB1_1722
# BB#1737:                              # %land.lhs.true593.i
	andq	$16, %rax
	testq	%r13, %rax
	jne	.LBB1_1722
# BB#1738:                              # %land.lhs.true599.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1740
# BB#1739:                              # %lor.lhs.false604.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_1722
.LBB1_1740:                             # %land.lhs.true609.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1722
# BB#1741:                              # %if.then611.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$633, %rdx              # imm = 0x279
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1603:                             # %L11165
	cmpq	$27, %rcx
	jne	.LBB1_1604
# BB#1639:                              # %L4245.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	movq	%r12, %r8
	jne	.LBB1_1868
# BB#1640:                              # %L11178.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_1641
# BB#1644:                              # %L4251.i
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1645:                              # %if.then70.i11794
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$386, %rdx              # imm = 0x182
.LBB1_1638:                             # %if.then35.i
	testq	$1, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1868
.LBB1_1799:                             # %L11198.i
	cmpq	$123, %rax
	jne	.LBB1_1800
# BB#1817:                              # %L6148.i
	movq	8(%r14), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1868
# BB#1818:                              # %if.then1108.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_1868
# BB#1819:                              # %if.then1116.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_1868
# BB#1820:                              # %land.lhs.true1121.i
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1822
# BB#1821:                              # %lor.lhs.false1124.i
	movzbl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	jne	.LBB1_1868
.LBB1_1822:                             # %land.lhs.true1127.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1823
# BB#1824:                              # %lor.lhs.false1132.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	movq	$543, %rdx              # imm = 0x21F
	je	.LBB1_1868
	jmp	.LBB1_4569
.LBB1_1825:                             # %if.end1146.i
	movq	8(%rbx), %r14
	jmp	.LBB1_1801
.LBB1_1635:
	movq	$528, %rdx              # imm = 0x210
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1833:
	movq	$529, %rdx              # imm = 0x211
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1839:
	movq	$530, %rdx              # imm = 0x212
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1846:
	movq	$538, %rdx              # imm = 0x21A
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1852:
	movq	$539, %rdx              # imm = 0x21B
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1586:                             # %if.end205.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1587:                              # %if.then208.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$64, %rax
	jne	.LBB1_1868
# BB#1588:                              # %land.lhs.true230.i
	testq	$1, %rax
	je	.LBB1_1868
# BB#1589:                              # %land.lhs.true230.i
	movl	flag_unsafe_math_optimizations(%rip), %eax
	movq	$572, %rdx              # imm = 0x23C
	jmp	.LBB1_1600
.LBB1_1966:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1959:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2031:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1992:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2004:                             # %land.lhs.true452.i
	testq	$1, %rax
	je	.LBB1_2005
# BB#2006:                              # %land.lhs.true452.i
	movl	reload_completed(%rip), %eax
	movq	$387, %rdx              # imm = 0x183
.LBB1_2007:                             # %land.lhs.true452.i
	testq	%r13, %rax
	jmp	.LBB1_2008
.LBB1_2233:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2235:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2209:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2200:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2202:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1943:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_1969:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_1971:                             # %if.end348.i
	movq	$17, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1972
# BB#1973:                              # %if.then351.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_1985
# BB#1974:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_1976:                             # %L4077.i
	cmpq	$16, %rax
	jne	.LBB1_1977
# BB#1978:                              # %L11225.i
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1979
# BB#1980:                              # %if.then366.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$369, %rdx              # imm = 0x171
.LBB1_1981:                             # %if.then366.i
	movq	%rbx, %r8
	jne	.LBB1_7
	jmp	.LBB1_4569
.LBB1_1983:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_592:
	movq	%rbx, %rdi
	jmp	.LBB1_397
.LBB1_713:
	movq	%rbx, %rdi
	jmp	.LBB1_397
.LBB1_715:
	movq	%rbx, %rdi
	jmp	.LBB1_397
.LBB1_717:
	movq	%rbx, %rdi
	jmp	.LBB1_397
.LBB1_719:
	movq	%rbx, %rdi
	jmp	.LBB1_397
.LBB1_721:
	movq	%rbx, %rdi
	jmp	.LBB1_397
.LBB1_726:                              # %if.end1290.i
	movq	%rdx, %rdi
	movq	16(%rdi), %r12
	jmp	.LBB1_397
.LBB1_2185:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2212:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2214:                             # %if.end323.i
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2215
# BB#2216:                              # %if.then326.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_2217
# BB#2218:                              # %if.then326.i
	movl	reload_completed(%rip), %eax
	movq	$371, %rdx              # imm = 0x173
	testq	%r13, %rax
	jmp	.LBB1_2226
.LBB1_2220:                             # %L4094.i
	cmpq	$16, %rax
	jne	.LBB1_2221
# BB#2222:                              # %L11269.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2223
# BB#2224:                              # %if.then341.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$372, %rdx              # imm = 0x174
	jmp	.LBB1_2225
.LBB1_2228:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1597:                             # %if.end24.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1598:                              # %if.then27.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_1868
# BB#1599:                              # %if.then27.i
	movl	reload_completed(%rip), %eax
	movq	$366, %rdx              # imm = 0x16E
	jmp	.LBB1_1600
.LBB1_483:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_485:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_487:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_489:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_491:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_493:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_495:                              # %if.end372.i
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_500
# BB#496:                               # %if.then375.i
	movl	target_flags(%rip), %eax
	movq	%r12, recog_data+16(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB1_499
# BB#497:                               # %if.then375.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_499
# BB#498:                               # %if.then423.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$227, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_505:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_507:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_509:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_511:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_513:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_433:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_435:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_437:                              # %L10967.i
	cmpq	$90, %rax
	jne	.LBB1_438
# BB#439:                               # %L504.i
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_440
# BB#441:                               # %if.then142.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_442
# BB#443:                               # %land.lhs.true151.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_444
# BB#445:                               # %L506.i
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_446
# BB#447:                               # %land.lhs.true164.i
	movq	8(%rax), %rax
	cmpq	$255, %rax
	movq	$75, %rdx
	movq	%rbx, %r8
	jne	.LBB1_424
	jmp	.LBB1_4569
.LBB1_449:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_451:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_453:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_455:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_457:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_464:                              # %L10969.i
	cmpq	$121, %rax
	jne	.LBB1_459
# BB#465:                               # %L3129.i
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_470
# BB#466:                               # %if.then230.i
	movl	target_flags(%rip), %eax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%rcx, recog_data+16(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB1_469
# BB#467:                               # %if.then230.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_469
# BB#468:                               # %if.then242.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$304, %rdx              # imm = 0x130
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1026:                             # %land.lhs.true364.L1702_crit_edge.i
	movl	ix86_cpu(%rip), %eax
.LBB1_1027:                             # %L1702.i
	movq	%rax, %rcx
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r13, %rbx
	je	.LBB1_978
# BB#1028:                              # %land.lhs.true374.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1029:                              # %land.lhs.true374.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1030:                              # %if.then379.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$222, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1063:                             # %land.lhs.true571.L4576_crit_edge.i
	movl	ix86_cpu(%rip), %eax
.LBB1_1064:                             # %L4576.i
	movq	%rax, %rcx
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r13, %rbx
	je	.LBB1_978
# BB#1065:                              # %land.lhs.true581.i11623
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1066:                              # %land.lhs.true581.i11623
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1067:                              # %if.then586.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$416, %rdx              # imm = 0x1A0
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1096:                             # %if.end731.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_1097:                             # %L5413.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1098:                              # %if.then716.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1099:                              # %if.then716.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1100:                              # %if.then742.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$475, %rdx              # imm = 0x1DB
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1074:                             # %if.end627.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_1075:                             # %L4937.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1076:                              # %if.then612.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1077:                              # %if.then612.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1078:                              # %if.then638.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$441, %rdx              # imm = 0x1B9
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1085:                             # %if.end679.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_1086:                             # %L5243.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1087:                              # %if.then664.i11629
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1088:                              # %if.then664.i11629
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1089:                              # %if.then690.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$463, %rdx              # imm = 0x1CF
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1107:                             # %if.end783.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_1108:                             # %L5557.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_978
# BB#1109:                              # %if.then768.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_978
# BB#1110:                              # %if.then768.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_978
# BB#1111:                              # %if.then794.i11633
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$485, %rdx              # imm = 0x1E5
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_978:                              # %if.end238.i
	movq	8(%r12), %r14
.LBB1_979:                              # %L10860.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_980
# BB#981:                               # %if.then21.i
	movq	%r14, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB1_7
# BB#982:                               # %L11033.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$77, %rax
	jg	.LBB1_1112
# BB#983:                               # %L11033.i
	cmpq	$63, %rax
	jne	.LBB1_7
# BB#984:                               # %L11037.i
	movl	16(%rbx), %eax
	testq	%rax, %rax
	jne	.LBB1_7
# BB#985:                               # %L479.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_7
# BB#986:                               # %L480.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_987
# BB#1116:                              # %if.then872.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_1117
# BB#1118:                              # %land.lhs.true881.i11645
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_1119
# BB#1120:                              # %L482.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_1121
# BB#1122:                              # %land.lhs.true894.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_1123
# BB#1124:                              # %land.lhs.true899.i
	movzbl	target_flags+3(%rip), %eax
	movq	$72, %rdx
	testq	$2, %rax
	jmp	.LBB1_2226
.LBB1_980:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1112:                             # %L11033.i
	movq	%r8, %r12
	cmpq	$78, %rax
	je	.LBB1_1125
# BB#1113:                              # %L11033.i
	cmpq	$79, %rax
	jne	.LBB1_1114
# BB#1136:                              # %L2470.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1137
# BB#1138:                              # %if.then942.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1139
# BB#1140:                              # %if.then950.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_qimode_math(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r13, %rdx
	movq	%r12, %r8
	je	.LBB1_7
# BB#1141:                              # %if.then950.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_7
# BB#1142:                              # %if.then958.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$266, %rdx              # imm = 0x10A
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1125:                             # %L2194.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1126
# BB#1127:                              # %if.then909.i11647
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1128
# BB#1129:                              # %if.then917.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_qimode_math(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r13, %rdx
	je	.LBB1_1130
# BB#1131:                              # %land.lhs.true923.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1134
# BB#1132:                              # %lor.lhs.false928.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_1133
.LBB1_1134:                             # %land.lhs.true933.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#1135:                              # %if.then935.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$253, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1114:                             # %L11033.i
	cmpq	$81, %rax
	jne	.LBB1_1115
# BB#1143:                              # %L2484.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1144
# BB#1145:                              # %if.then965.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1146
# BB#1147:                              # %if.then973.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_qimode_math(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r13, %rdx
	je	.LBB1_1148
# BB#1149:                              # %if.then973.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#1150:                              # %if.then981.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$267, %rdx              # imm = 0x10B
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1115:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1137:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1126:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1139:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1128:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1130:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1144:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2055:                             # %L11238.i
	cmpq	$125, %rax
	jne	.LBB1_2056
# BB#2061:                              # %L6174.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2062
# BB#2063:                              # %if.then668.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2064
# BB#2065:                              # %if.then676.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	jne	.LBB1_2066
# BB#2067:                              # %land.lhs.true684.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_fiop(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	movq	$547, %rdx              # imm = 0x223
	jmp	.LBB1_2226
.LBB1_2069:                             # %L6202.i
	cmpq	$15, %rax
	jne	.LBB1_2070
# BB#2071:                              # %L11240.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2072
# BB#2073:                              # %if.then702.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2074
# BB#2075:                              # %if.then710.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$551, %rdx              # imm = 0x227
	jmp	.LBB1_2076
.LBB1_2078:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2080:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2087:                             # %L11243.i
	cmpq	$125, %rax
	jne	.LBB1_2088
# BB#2091:                              # %L6189.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2092
# BB#2093:                              # %if.then765.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	jne	.LBB1_2094
# BB#2095:                              # %land.lhs.true773.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_fiop(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	movq	$549, %rdx              # imm = 0x225
	jmp	.LBB1_2226
.LBB1_2097:                             # %L6217.i
	cmpq	$15, %rax
	jne	.LBB1_2098
# BB#2099:                              # %L11245.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2100
# BB#2101:                              # %if.then791.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$553, %rdx              # imm = 0x229
.LBB1_2076:                             # %if.then710.i
	movq	%r12, %r8
	jne	.LBB1_7
	jmp	.LBB1_4569
.LBB1_2103:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1997:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1999:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2268:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2292:                             # %L11282.i
	cmpq	$125, %rax
	jne	.LBB1_2293
# BB#2298:                              # %L6181.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2299
# BB#2300:                              # %if.then610.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2301
# BB#2302:                              # %if.then618.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_2303
# BB#2304:                              # %land.lhs.true623.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_fiop(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	movq	$548, %rdx              # imm = 0x224
	jmp	.LBB1_2226
.LBB1_2306:                             # %L6209.i
	cmpq	$15, %rax
	jne	.LBB1_2307
# BB#2308:                              # %L11284.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2309
# BB#2310:                              # %if.then641.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2311
# BB#2312:                              # %if.then649.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$552, %rdx              # imm = 0x228
	jmp	.LBB1_2225
.LBB1_2314:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2316:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2323:                             # %L11287.i
	cmpq	$125, %rax
	jne	.LBB1_2324
# BB#2327:                              # %L6196.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2328
# BB#2329:                              # %if.then698.i12146
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_2330
# BB#2331:                              # %land.lhs.true703.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_fiop(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	movq	$550, %rdx              # imm = 0x226
	jmp	.LBB1_2226
.LBB1_2333:                             # %L6224.i
	cmpq	$15, %rax
	jne	.LBB1_2334
# BB#2335:                              # %L11289.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2336
# BB#2337:                              # %if.then721.i
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$554, %rdx              # imm = 0x22A
.LBB1_2225:                             # %if.then341.i
	testq	$1, %rax
	jmp	.LBB1_2226
.LBB1_2339:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2239:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2241:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1950:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2010:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2013:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2015:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2192:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2247:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2250:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2252:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_2261:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1321:                             # %if.end218.i
	movq	8(%rbx), %r14
.LBB1_1322:                             # %if.end207.i
	movq	8(%r14), %r15
.LBB1_1323:                             # %L11141.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1328
# BB#1324:                              # %if.then192.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1327
# BB#1325:                              # %if.then252.i11704
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1326
# BB#1337:                              # %L7116.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1326
# BB#1338:                              # %land.lhs.true278.i
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1326
# BB#1339:                              # %land.lhs.true278.i
	andq	$16, %rax
	testq	%r13, %rax
	jne	.LBB1_1326
# BB#1340:                              # %land.lhs.true284.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1342
# BB#1341:                              # %lor.lhs.false289.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_1326
.LBB1_1342:                             # %land.lhs.true294.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1326
# BB#1343:                              # %if.then296.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$624, %rdx              # imm = 0x270
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1357:                             # %if.end428.i
	movq	8(%rbx), %r14
.LBB1_1358:                             # %if.end417.i11718
	movq	8(%r14), %r15
.LBB1_1359:                             # %L11145.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1305
# BB#1360:                              # %if.then360.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1305
# BB#1361:                              # %if.then472.i11720
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1362
# BB#1375:                              # %L7216.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	%r12, %rcx
	je	.LBB1_1347
# BB#1376:                              # %land.lhs.true492.i
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1347
# BB#1377:                              # %land.lhs.true492.i
	movl	reload_completed(%rip), %eax
	movq	$631, %rdx              # imm = 0x277
	testq	%r13, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1347
.LBB1_1269:                             # %L11126
	cmpq	$28, %rcx
	movq	%r12, %r8
	jne	.LBB1_1434
# BB#1270:                              # %L6257.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB1_1434
# BB#1271:                              # %L11136.i
	movq	%r8, %r14
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1277
# BB#1272:                              # %if.then48.i
	movl	target_flags(%rip), %eax
	movl	ix86_fpmath(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rdx
	andq	$65, %rdx
	cmpq	$1, %rdx
	movq	%r14, %rsi
	jne	.LBB1_1274
# BB#1273:                              # %if.then48.i
	movq	%rcx, %rdi
	andq	$3, %rdi
	movq	$559, %rdx              # imm = 0x22F
	andq	%r13, %rdi
	cmpq	$3, %rdi
	je	.LBB1_4569
.LBB1_1274:                             # %L6263.i
	testq	$2, %rcx
	je	.LBB1_1276
# BB#1275:                              # %land.lhs.true74.i11665
	andq	%rcx, %rax
	testq	$1, %rax
	movq	$560, %rdx              # imm = 0x230
	je	.LBB1_4569
.LBB1_1276:                             # %if.end83.i
	movq	16(%rsi), %rax
	movq	%rsi, %r14
	movq	8(%rax), %rbx
.LBB1_1277:                             # %L11137.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1434
# BB#1278:                              # %if.then53.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$65, %rax
	cmpq	$1, %rax
	jne	.LBB1_1434
# BB#1279:                              # %land.lhs.true95.i
	movzbl	ix86_fpmath(%rip), %eax
	movq	$561, %rdx              # imm = 0x231
	jmp	.LBB1_1280
.LBB1_1295:
	movq	$525, %rdx              # imm = 0x20D
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1444:
	movq	$526, %rdx              # imm = 0x20E
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1449:
	movq	$527, %rdx              # imm = 0x20F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1453:                             # %land.lhs.true1024.i
	movq	recog_data+24(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	movzbl	rtx_class(%rdx), %edx
	cmpq	$99, %rdx
	movq	%rsi, %rdi
	je	.LBB1_1457
# BB#1454:                              # %land.lhs.true1033.i
	movq	%rdi, %rsi
	movq	recog_data+8(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB1_1455
# BB#1456:                              # %lor.lhs.false1039.i
	movzbl	(%r14), %edx
	cmpq	$66, %rdx
	movq	%rsi, %rdi
	movq	$533, %rdx              # imm = 0x215
	jne	.LBB1_4569
.LBB1_1457:                             # %L6091.i
	andq	$3, %rax
	cmpq	$3, %rax
	jne	.LBB1_1464
.LBB1_1460:                             # %land.lhs.true1059.i
	andq	$65535, %rcx            # imm = 0xFFFF
	movzbl	rtx_class(%rcx), %eax
	cmpq	$99, %rax
	je	.LBB1_1464
# BB#1461:                              # %land.lhs.true1068.i
	movq	%rdi, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1462
# BB#1463:                              # %lor.lhs.false1074.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	%rcx, %rdi
	movq	$534, %rdx              # imm = 0x216
	jne	.LBB1_4569
.LBB1_1464:                             # %if.end1081.i
	movq	16(%rdi), %rbx
	movq	%rdi, %r15
.LBB1_1427:                             # %if.end927.i
	movq	8(%rbx), %r14
.LBB1_1428:                             # %L11149.i
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1434
# BB#1429:                              # %if.then890.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB1_1434
# BB#1430:                              # %L11152.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$125, %rax
	jne	.LBB1_1431
# BB#1465:                              # %L6110.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1434
# BB#1466:                              # %if.then1114.i11766
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_1434
# BB#1467:                              # %land.lhs.true1119.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_fiop(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_1434
# BB#1468:                              # %land.lhs.true1123.i
	movzbl	ix86_fpmath(%rip), %eax
	movq	$537, %rdx              # imm = 0x219
.LBB1_1280:                             # %land.lhs.true95.i
	testq	$2, %rax
	jne	.LBB1_1434
	jmp	.LBB1_4569
.LBB1_2044:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2046:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2049:                             # %land.lhs.true635.i
	movl	x86_cmove(%rip), %edx
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	andq	$327680, %rax           # imm = 0x50000
	orq	%rsi, %rax
	testq	%r13, %rax
	movq	$621, %rdx              # imm = 0x26D
.LBB1_2226:                             # %if.then341.i
	movq	%r12, %r8
	jne	.LBB1_4569
	jmp	.LBB1_7
.LBB1_4571:                             # %if.end288.i
	movq	8(%rbx), %r14
.LBB1_98:                               # %L141.i
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_99
# BB#114:                               # %if.then177.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	const0_operand
	testq	%r13, %rax
	movq	%r12, %rsi
	je	.LBB1_92
# BB#115:                               # %if.then312.i
	movzbl	target_flags(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_119
# BB#116:                               # %land.lhs.true317.i
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_119
# BB#117:                               # %land.lhs.true317.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB1_119
# BB#118:                               # %land.lhs.true339.i
	movl	(%r14), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	movq	$18, %rdx
	je	.LBB1_4569
.LBB1_119:                              # %if.end350.i
	movq	16(%rsi), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
	jmp	.LBB1_92
.LBB1_622:                              # %L688.i
	cmpq	$3, %rax
	jne	.LBB1_623
# BB#624:                               # %L10987.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_630
# BB#625:                               # %if.then934.i
	movl	ix86_cpu(%rip), %ecx
	movl	optimize_size(%rip), %edx
	movq	%rbx, recog_data+8(%rip)
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%rdx, %rdx
	jne	.LBB1_629
# BB#626:                               # %if.then934.i
	movl	x86_zero_extend_with_and(%rip), %ecx
	andq	%rcx, %rax
	testq	%r13, %rax
	je	.LBB1_629
# BB#627:                               # %if.then934.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_629
# BB#628:                               # %if.then949.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$107, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_647:                              # %L747.i
	orq	%rcx, %rax
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_648
# BB#649:                               # %L747.i
	movabsq	$1, %rcx
	jmp	.LBB1_650
.LBB1_674:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_676:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_678:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_680:                              # %L10994.i
	cmpq	$121, %rcx
	jne	.LBB1_681
# BB#682:                               # %L2351.i
	movq	8(%rax), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_683
# BB#684:                               # %if.then1102.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB1_685
# BB#686:                               # %L2353.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_687
# BB#688:                               # %if.then1123.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_689
# BB#690:                               # %land.lhs.true1132.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB1_691
# BB#692:                               # %land.lhs.true1137.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_695
# BB#693:                               # %lor.lhs.false1142.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	je	.LBB1_694
.LBB1_695:                              # %land.lhs.true1147.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	8(%rsp), %rdi           # 8-byte Reload
	je	.LBB1_397
# BB#696:                               # %if.then1149.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$261, %rdx              # imm = 0x105
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_698:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_700:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_702:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_704:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_706:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_709:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_665:                              # %L1065.i
	cmpq	$15, %rax
	jne	.LBB1_666
# BB#667:                               # %L10992.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %rdi
	je	.LBB1_397
# BB#668:                               # %if.then1034.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$160, %rdx
	testq	$5, %rax
	jne	.LBB1_4569
# BB#669:                               # %if.end1040.i
	movq	16(%rdi), %r12
	jmp	.LBB1_397
.LBB1_603:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_605:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_607:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_609:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_613:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_615:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_617:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_619:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_659:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_733:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_735:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_747:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_749:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_752:                              # %L7022.i
	movq	16(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_753
# BB#754:                               # %if.then1437.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %rdi
	je	.LBB1_397
# BB#755:                               # %if.then1445.i
	movl	ix86_arch(%rip), %eax
	movl	x86_cmove(%rip), %edx
	movq	%rbx, recog_data+24(%rip)
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	jne	.LBB1_757
# BB#756:                               # %lor.lhs.false1451.i
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB1_760
.LBB1_757:                              # %land.lhs.true1454.i
	movq	%rdi, %rcx
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_758
# BB#759:                               # %lor.lhs.false1459.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	movq	%rcx, %rdi
	movq	$616, %rdx              # imm = 0x268
	jne	.LBB1_4569
.LBB1_760:                              # %if.end1465.i
	movq	16(%rdi), %r12
	jmp	.LBB1_397
.LBB1_2281:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2283:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2286:                             # %lor.lhs.false580.i
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	movq	%r12, %r8
	movq	$622, %rdx              # imm = 0x26E
	jne	.LBB1_4569
	jmp	.LBB1_7
.LBB1_1684:                             # %if.end355.i
	movq	8(%rbx), %r14
.LBB1_1685:                             # %if.end344.i
	movq	8(%r14), %r15
.LBB1_1686:                             # %L11189.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1691
# BB#1687:                              # %if.then329.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1690
# BB#1688:                              # %if.then392.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1689
# BB#1700:                              # %L7162.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1689
# BB#1701:                              # %land.lhs.true418.i
	movl	target_flags(%rip), %eax
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1689
# BB#1702:                              # %land.lhs.true421.i
	movl	ix86_fpmath(%rip), %ecx
	testq	$2, %rcx
	je	.LBB1_1689
# BB#1703:                              # %land.lhs.true421.i
	andq	$16, %rax
	testq	%r13, %rax
	jne	.LBB1_1689
# BB#1704:                              # %land.lhs.true427.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1706
# BB#1705:                              # %lor.lhs.false432.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_1689
.LBB1_1706:                             # %land.lhs.true437.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1689
# BB#1707:                              # %if.then439.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$627, %rdx              # imm = 0x273
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1722:                             # %if.end577.i
	movq	8(%rbx), %r14
.LBB1_1723:                             # %if.end566.i
	movq	8(%r14), %r15
.LBB1_1724:                             # %L11193.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1668
# BB#1725:                              # %if.then506.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1668
# BB#1726:                              # %if.then624.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1727
# BB#1742:                              # %L7262.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	%r12, %rcx
	je	.LBB1_1712
# BB#1743:                              # %land.lhs.true644.i
	movzbl	target_flags+2(%rip), %eax
	testq	$4, %rax
	je	.LBB1_1712
# BB#1744:                              # %land.lhs.true647.i
	movl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	je	.LBB1_1712
# BB#1745:                              # %land.lhs.true647.i
	movl	reload_completed(%rip), %eax
	movq	$634, %rdx              # imm = 0x27A
	testq	%r13, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1712
.LBB1_1604:                             # %L11165
	cmpq	$28, %rcx
	movq	%r12, %r8
	jne	.LBB1_1868
# BB#1605:                              # %L6272.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB1_1868
# BB#1606:                              # %L11181.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB1_1607
# BB#1646:                              # %L6288.i
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1647:                              # %if.then112.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$65, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_1868
# BB#1648:                              # %land.lhs.true120.i11797
	movq	%r8, %rcx
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1649
# BB#1650:                              # %land.lhs.true123.i
	movzbl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	movq	%rcx, %r8
	movq	$565, %rdx              # imm = 0x235
	jne	.LBB1_1868
	jmp	.LBB1_4569
.LBB1_1641:                             # %if.end59.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1642:                              # %if.then62.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB1_1868
# BB#1643:                              # %if.then62.i
	movl	reload_completed(%rip), %eax
	movq	$385, %rdx              # imm = 0x181
.LBB1_1600:                             # %if.then27.i
	testq	%r13, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1868
.LBB1_1800:                             # %L11198.i
	cmpq	$125, %rax
	jne	.LBB1_1801
# BB#1810:                              # %L6134.i
	movq	8(%r14), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1868
# BB#1811:                              # %if.then1078.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_1868
# BB#1812:                              # %if.then1086.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_1868
# BB#1813:                              # %land.lhs.true1091.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_fiop(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_1868
# BB#1814:                              # %land.lhs.true1095.i
	movq	%r8, %rcx
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1815
# BB#1816:                              # %land.lhs.true1098.i
	movzbl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	movq	%rcx, %r8
	movq	$541, %rdx              # imm = 0x21D
	jne	.LBB1_1868
	jmp	.LBB1_4569
.LBB1_1823:
	movq	$543, %rdx              # imm = 0x21F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2005:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_1972:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_1985:                             # %land.lhs.true390.i
	testq	$1, %rax
	je	.LBB1_1986
# BB#1987:                              # %land.lhs.true390.i
	movl	reload_completed(%rip), %eax
	movq	$368, %rdx              # imm = 0x170
	testq	%r13, %rax
	jmp	.LBB1_1988
.LBB1_1977:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_1979:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_2215:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2217:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2221:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2223:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_499:                              # %if.end424.i
	movq	16(%rbx), %rax
	movq	16(%rax), %r12
	movq	%rax, %r14
.LBB1_500:                              # %L1816.i
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	movq	%rbx, %r8
	je	.LBB1_424
# BB#501:                               # %if.then380.i
	movq	%r8, %rcx
	movl	target_flags(%rip), %eax
	movq	%r12, recog_data+16(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_516
# BB#502:                               # %if.then380.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_516
# BB#503:                               # %if.then435.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$228, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_438:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_440:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_442:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_444:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_446:
	movq	%rbx, %r8
	jmp	.LBB1_424
.LBB1_469:                              # %if.end243.i
	movq	16(%rbx), %rax
	movq	16(%rax), %r12
	movq	%rax, %r14
	movq	8(%r12), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
.LBB1_470:                              # %L3157.i
	xorq	%rsi, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_459
# BB#471:                               # %if.then235.i
	movl	target_flags(%rip), %eax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%rcx, recog_data+16(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_474
# BB#472:                               # %if.then235.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_474
# BB#473:                               # %if.then257.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$305, %rdx              # imm = 0x131
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_987:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1117:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1119:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1121:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1123:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1133:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1146:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1148:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2056:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2062:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2064:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2066:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2070:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2072:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2074:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2088:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2092:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2094:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2098:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2100:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2293:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2299:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2301:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2303:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2307:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2309:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2311:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2324:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2328:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2330:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2334:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_2336:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1326:                             # %if.end265.i
	movq	8(%rbx), %r14
.LBB1_1327:                             # %if.end254.i11705
	movq	8(%r14), %r15
.LBB1_1328:                             # %L11142.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1305
# BB#1329:                              # %if.then197.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1305
# BB#1330:                              # %if.then309.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1331
# BB#1344:                              # %L7124.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	%r12, %rcx
	je	.LBB1_1347
# BB#1345:                              # %land.lhs.true329.i
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1347
# BB#1346:                              # %land.lhs.true329.i
	movl	reload_completed(%rip), %eax
	movq	$625, %rdx              # imm = 0x271
	testq	%r13, %rax
	jne	.LBB1_4569
.LBB1_1347:                             # %if.end335.i
	movq	%rcx, %r12
	movq	8(%rbx), %r14
	jmp	.LBB1_1305
.LBB1_1362:                             # %if.end482.i
	movq	8(%rbx), %r14
	jmp	.LBB1_1305
.LBB1_1455:
	movq	$533, %rdx              # imm = 0x215
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1462:
	movq	$534, %rdx              # imm = 0x216
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1431:                             # %if.end1103.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1434
# BB#1432:                              # %if.then1106.i
	movzbl	ix86_fpmath(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB1_1434
# BB#1433:                              # %land.lhs.true1132.i11769
	movq	recog_data+24(%rip), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$99, %rax
	movq	$535, %rdx              # imm = 0x217
	jne	.LBB1_4569
	jmp	.LBB1_1434
.LBB1_99:
	movq	%r12, %rsi
.LBB1_92:                               # %L219.i
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB1_49
# BB#93:                                # %land.lhs.true145.i
	movl	8(%rbx), %eax
	cmpq	$18, %rax
	jne	.LBB1_49
# BB#94:                                # %land.lhs.true150.i
	movzbl	target_flags(%rip), %eax
	movq	$30, %rdx
	testq	$1, %rax
	jne	.LBB1_4569
.LBB1_49:                               # %if.end126.i
	movq	8(%rsi), %r14
	movq	%rsi, %rbx
.LBB1_51:                               # %L10852.i
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_52
# BB#65:                                # %if.then5.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$196608, %rcx           # imm = 0x30000
	jne	.LBB1_66
# BB#129:                               # %L10937.i
	andq	$65535, %rax            # imm = 0xFFFF
	movq	%rbx, %r12
	cmpq	$125, %rax
	jg	.LBB1_132
# BB#130:                               # %L10937.i
	addq	$-75, %rax
	andq	%r13, %rax
	cmpq	$16, %rax
	ja	.LBB1_67
# BB#131:                               # %L10937.i
	jmpq	*.LJTI1_6(,%rax,8)
.LBB1_146:                              # %L1595.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#147:                               # %if.then526.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#148:                               # %if.then534.i
	movq	%rbx, recog_data+16(%rip)
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r14, %rdx
	testq	%r13, %rdx
	jne	.LBB1_152
# BB#149:                               # %land.lhs.true539.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_151
# BB#150:                               # %land.lhs.true539.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_151
# BB#4572:                              # %if.then544.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$215, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_52:
	movq	%rbx, %r12
	jmp	.LBB1_53
.LBB1_66:
	movq	%rbx, %r12
	jmp	.LBB1_67
.LBB1_132:                              # %L10937.i
	cmpq	$126, %rax
	jne	.LBB1_67
# BB#133:                               # %L1075.i
	movq	8(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#134:                               # %if.then465.i
	movl	target_flags(%rip), %edx
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rdx
	je	.LBB1_145
# BB#135:                               # %land.lhs.true470.i
	movl	(%rbx), %eax
	movq	$14, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	movq	%rcx, %rsi
	orq	$4, %rsi
	andq	%r13, %rsi
	cmpq	$6, %rsi
	jne	.LBB1_136
# BB#139:                               # %land.lhs.true494.i
	movl	reload_completed(%rip), %ecx
	movl	reload_in_progress(%rip), %esi
	orq	%rcx, %rsi
	testq	%r13, %rsi
	jne	.LBB1_145
	jmp	.LBB1_140
.LBB1_136:                              # %lor.lhs.false486.i
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jne	.LBB1_145
# BB#137:                               # %lor.lhs.false486.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB1_145
# BB#138:                               # %lor.lhs.false486.i
	movl	reload_in_progress(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB1_145
.LBB1_140:                              # %land.lhs.true498.i
	andq	$16711680, %rax         # imm = 0xFF0000
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB1_142
# BB#141:                               # %land.lhs.true498.i
	movq	%rax, %rcx
	andq	%r13, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB1_145
.LBB1_142:                              # %lor.lhs.false507.i
	movq	%r12, %rcx
	testq	$262144, %rdx           # imm = 0x40000
	je	.LBB1_143
# BB#144:                               # %lor.lhs.false507.i
	andq	%r13, %rax
	cmpq	$1048576, %rax          # imm = 0x100000
	movq	%rcx, %r12
	movq	$162, %rdx
	jne	.LBB1_4569
.LBB1_145:                              # %if.end517.i
	movq	16(%r12), %r14
.LBB1_67:                               # %L350.i
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_128
# BB#68:                                # %if.then437.i
	movq	%r14, recog_data+8(%rip)
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$51, %rdx
	jne	.LBB1_4569
# BB#69:                                # %lor.lhs.false918.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
# BB#70:                                # %if.end924.i
	movq	8(%r12), %r14
	jmp	.LBB1_53
.LBB1_128:                              # %if.end439.i
	movq	8(%r12), %r14
.LBB1_53:                               # %L10853.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_54
# BB#248:                               # %L354.i
	movq	8(%r14), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_movabs_operand
	testq	%r13, %rax
	je	.LBB1_63
# BB#249:                               # %if.then933.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#250:                               # %if.then941.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$52, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
	jmp	.LBB1_62
.LBB1_54:                               # %if.end11.i
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_63
# BB#55:                                # %if.then14.i
	movq	%r14, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$196608, %rcx           # imm = 0x30000
	jne	.LBB1_62
# BB#56:                                # %L10950.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$131, %rax
	jg	.LBB1_265
# BB#57:                                # %L10950.i
	cmpq	$119, %rax
	jg	.LBB1_251
# BB#58:                                # %L10950.i
	cmpq	$66, %rax
	je	.LBB1_271
# BB#59:                                # %L10950.i
	cmpq	$72, %rax
	jne	.LBB1_60
# BB#312:                               # %L7028.i
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ix86_comparison_operator
	testq	%r13, %rax
	je	.LBB1_62
# BB#313:                               # %if.then1268.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_62
# BB#314:                               # %land.lhs.true1280.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_62
# BB#315:                               # %L7030.i
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_62
# BB#316:                               # %land.lhs.true1296.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_62
# BB#317:                               # %L7031.i
	movq	16(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#318:                               # %if.then1311.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#319:                               # %if.then1322.i
	movl	ix86_arch(%rip), %eax
	movl	x86_cmove(%rip), %edx
	movq	%rbx, recog_data+24(%rip)
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	movq	%r12, %rcx
	jne	.LBB1_321
# BB#320:                               # %lor.lhs.false1331.i
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB1_324
.LBB1_321:                              # %land.lhs.true1334.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_322
# BB#323:                               # %lor.lhs.false1339.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	movq	$617, %rdx              # imm = 0x269
	jne	.LBB1_4569
.LBB1_324:                              # %if.end1345.i
	movq	8(%rcx), %r14
	movq	%rcx, %r12
	jmp	.LBB1_63
.LBB1_265:                              # %L10950.i
	cmpq	$132, %rax
	jne	.LBB1_62
# BB#266:                               # %L438.i
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#267:                               # %if.then1002.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_62
# BB#268:                               # %land.lhs.true1014.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_62
# BB#269:                               # %L440.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_62
# BB#270:                               # %land.lhs.true1029.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	movq	$65, %rdx
	je	.LBB1_4569
	jmp	.LBB1_62
.LBB1_251:                              # %L10950.i
	cmpq	$120, %rax
	jne	.LBB1_252
# BB#283:                               # %L823.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#284:                               # %if.then1085.i
	movq	%rbx, recog_data+8(%rip)
	movq	$125, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_252:                              # %L10950.i
	cmpq	$121, %rax
	jne	.LBB1_62
# BB#253:                               # %L705.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#254:                               # %if.then1044.i
	movq	%rbx, recog_data+8(%rip)
	movl	ix86_cpu(%rip), %ecx
	movl	x86_zero_extend_with_and(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rdx, %rax
	andq	%r13, %rax
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	je	.LBB1_256
# BB#255:                               # %if.then1044.i
	movq	%rsi, %rdx
.LBB1_256:                              # %if.then1044.i
	testq	%rax, %rax
	movq	%rcx, %rax
	jne	.LBB1_258
# BB#257:                               # %if.then1044.i
	movq	%rsi, %rax
.LBB1_258:                              # %if.then1044.i
	movl	optimize_size(%rip), %edi
	testq	%rdi, %rdi
	movq	%rcx, %rdi
	jne	.LBB1_260
# BB#259:                               # %if.then1044.i
	movq	%rsi, %rdi
.LBB1_260:                              # %if.then1044.i
	je	.LBB1_262
# BB#261:                               # %if.then1044.i
	movq	%rsi, %rcx
.LBB1_262:                              # %if.then1044.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_273
# BB#263:                               # %if.then1044.i
	andq	%rdi, %rdx
	je	.LBB1_273
# BB#264:                               # %if.then1057.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$109, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_157:                              # %L2060.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#158:                               # %if.then564.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#159:                               # %if.then572.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_162
# BB#160:                               # %if.then572.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_162
# BB#161:                               # %if.then579.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$243, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_181:                              # %L3881.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#182:                               # %if.then664.i
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$3, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_185
# BB#183:                               # %if.then664.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_185
# BB#184:                               # %if.then671.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$351, %rdx              # imm = 0x15F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_163:                              # %L2982.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#164:                               # %if.then589.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#165:                               # %if.then597.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_168
# BB#166:                               # %if.then597.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_168
# BB#167:                               # %if.then604.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$296, %rdx              # imm = 0x128
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_169:                              # %L3351.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#170:                               # %if.then614.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#171:                               # %if.then622.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_174
# BB#172:                               # %if.then622.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_174
# BB#173:                               # %if.then629.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$317, %rdx              # imm = 0x13D
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_175:                              # %L3621.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#176:                               # %if.then639.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#177:                               # %if.then647.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_180
# BB#178:                               # %if.then647.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_180
# BB#179:                               # %if.then654.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$335, %rdx              # imm = 0x14F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_186:                              # %L4340.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#187:                               # %if.then681.i
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rdx
	movq	$86, %rdi
	movq	$3, %rsi
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	$399, %rdx              # imm = 0x18F
	jne	.LBB1_4569
# BB#188:                               # %if.end687.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_189:                              # %L4519.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#190:                               # %if.then696.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#191:                               # %if.then704.i
	movq	%rbx, recog_data+16(%rip)
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r14, %rdx
	testq	%r13, %rdx
	jne	.LBB1_195
# BB#192:                               # %land.lhs.true710.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_194
# BB#193:                               # %land.lhs.true710.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_194
# BB#4573:                              # %if.then715.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$412, %rdx              # imm = 0x19C
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_224:                              # %L5370.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#225:                               # %if.then827.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_231
# BB#226:                               # %if.then835.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_230
# BB#227:                               # %land.lhs.true845.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_230
# BB#228:                               # %land.lhs.true845.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_230
# BB#229:                               # %if.then851.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$472, %rdx              # imm = 0x1D8
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_200:                              # %L4868.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#201:                               # %if.then735.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_207
# BB#202:                               # %if.then743.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_206
# BB#203:                               # %land.lhs.true753.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_206
# BB#204:                               # %land.lhs.true753.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_206
# BB#205:                               # %if.then759.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$436, %rdx              # imm = 0x1B4
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_212:                              # %L5174.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#213:                               # %if.then781.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_219
# BB#214:                               # %if.then789.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_218
# BB#215:                               # %land.lhs.true799.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_218
# BB#216:                               # %land.lhs.true799.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_218
# BB#217:                               # %if.then805.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$458, %rdx              # imm = 0x1CA
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_236:                              # %L5514.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#237:                               # %if.then873.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_243
# BB#238:                               # %if.then881.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_242
# BB#239:                               # %land.lhs.true891.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_242
# BB#240:                               # %land.lhs.true891.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_242
# BB#241:                               # %if.then897.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$482, %rdx              # imm = 0x1E2
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_271:                              # %L360.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_movabs_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#272:                               # %if.then984.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$53, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
	jmp	.LBB1_62
.LBB1_60:                               # %L10950.i
	cmpq	$78, %rax
	jne	.LBB1_62
# BB#61:                                # %L2180.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$196608, %rcx           # imm = 0x30000
	jne	.LBB1_62
# BB#285:                               # %L10957.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$119, %rax
	jg	.LBB1_294
# BB#286:                               # %L10957.i
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	ja	.LBB1_62
# BB#287:                               # %L10957.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_62
# BB#288:                               # %L10956.i
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#289:                               # %if.then1114.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#290:                               # %if.then1241.i
	movq	%rbx, recog_data+16(%rip)
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_292
# BB#291:                               # %lor.lhs.false1251.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_62
.LBB1_292:                              # %land.lhs.true1256.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_62
# BB#293:                               # %if.then1258.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$252, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_623:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_629:                              # %if.end950.i11576
	movq	16(%r14), %rax
	movq	8(%rax), %rbx
	movq	%rax, %r12
.LBB1_630:                              # %L10988.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %rdi
	je	.LBB1_397
# BB#631:                               # %if.then939.i
	movq	%rbx, recog_data+8(%rip)
	movl	ix86_cpu(%rip), %eax
	movl	x86_zero_extend_with_and(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_632
# BB#633:                               # %if.then939.i
	movl	optimize_size(%rip), %eax
	testq	%r13, %rax
	movq	$108, %rdx
	jne	.LBB1_4569
# BB#634:                               # %if.end963.i
	movq	16(%rdi), %r12
	jmp	.LBB1_397
.LBB1_648:
	movabsq	$0, %rcx
.LBB1_650:                              # %L747.i
	andq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_652
# BB#651:                               # %if.then988.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$113, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_681:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_683:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_685:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_687:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_689:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_691:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_694:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB1_397
.LBB1_666:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_753:
	movq	%r14, %rdi
	jmp	.LBB1_397
.LBB1_758:
	movq	$616, %rdx              # imm = 0x268
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1689:                             # %if.end405.i
	movq	8(%rbx), %r14
.LBB1_1690:                             # %if.end394.i
	movq	8(%r14), %r15
.LBB1_1691:                             # %L11190.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1668
# BB#1692:                              # %if.then334.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1668
# BB#1693:                              # %if.then452.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_1694
# BB#1708:                              # %L7170.i
	movq	24(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	%r12, %rcx
	je	.LBB1_1712
# BB#1709:                              # %land.lhs.true472.i
	movzbl	target_flags+2(%rip), %eax
	testq	$4, %rax
	je	.LBB1_1712
# BB#1710:                              # %land.lhs.true475.i
	movl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	je	.LBB1_1712
# BB#1711:                              # %land.lhs.true475.i
	movl	reload_completed(%rip), %eax
	movq	$628, %rdx              # imm = 0x274
	testq	%r13, %rax
	jne	.LBB1_4569
.LBB1_1712:                             # %if.end481.i
	movq	%rcx, %r12
	movq	8(%rbx), %r14
	jmp	.LBB1_1668
.LBB1_1727:                             # %if.end634.i
	movq	8(%rbx), %r14
	jmp	.LBB1_1668
.LBB1_1607:                             # %if.end96.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1614
# BB#1608:                              # %if.then99.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$262209, %rcx           # imm = 0x40041
	cmpq	$262145, %rcx           # imm = 0x40001
	movq	%r14, %rsi
	jne	.LBB1_1610
# BB#1609:                              # %land.lhs.true136.i
	movl	ix86_fpmath(%rip), %ecx
	andq	$3, %rcx
	cmpq	$3, %rcx
	movq	$562, %rdx              # imm = 0x232
	je	.LBB1_4569
.LBB1_1610:                             # %L6278.i
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1613
# BB#1611:                              # %land.lhs.true149.i
	movl	ix86_fpmath(%rip), %ecx
	testq	$2, %rcx
	je	.LBB1_1613
# BB#1612:                              # %land.lhs.true152.i
	andq	%rcx, %rax
	testq	$1, %rax
	movq	$563, %rdx              # imm = 0x233
	je	.LBB1_4569
.LBB1_1613:                             # %if.end161.i
	movq	16(%rsi), %rax
	movq	%rsi, %r14
	movq	8(%rax), %rbx
.LBB1_1614:                             # %L11180.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1615:                              # %if.then104.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$65, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_1868
# BB#1616:                              # %land.lhs.true173.i
	movq	%r8, %rcx
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1617
# BB#1651:                              # %lor.lhs.false176.i
	movzbl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	movq	%rcx, %r8
	movq	$564, %rdx              # imm = 0x234
	jne	.LBB1_1868
	jmp	.LBB1_4569
.LBB1_1649:
	movq	$565, %rdx              # imm = 0x235
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1801:                             # %L11197.i
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1868
# BB#1802:                              # %if.then1070.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB1_1868
# BB#1803:                              # %L11201.i
	movq	%r8, %r14
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$122, %rax
	jg	.LBB1_1855
# BB#1804:                              # %L11201.i
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	movq	%r14, %r8
	ja	.LBB1_1868
# BB#1805:                              # %L11201.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_1868
# BB#1806:                              # %L11200.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_1868
# BB#1807:                              # %if.then1344.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$4, %rax
	je	.LBB1_1868
# BB#1808:                              # %land.lhs.true1394.i11947
	movzbl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	je	.LBB1_1868
# BB#1809:                              # %land.lhs.true1398.i
	movq	recog_data+24(%rip), %rax
	movzbl	(%rax), %eax
	movzbl	rtx_class(%rax), %eax
	cmpq	$99, %rax
	movq	$540, %rdx              # imm = 0x21C
	jne	.LBB1_4569
	jmp	.LBB1_1868
.LBB1_1815:
	movq	$541, %rdx              # imm = 0x21D
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1986:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_474:                              # %if.end258.i
	movq	16(%rbx), %rax
	movq	16(%rax), %r12
	movq	%rax, %r14
.LBB1_459:                              # %L3079.i
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	const_int_operand
	testq	%r13, %rax
	movq	%rbx, %r8
	je	.LBB1_424
# BB#460:                               # %if.then216.i
	movq	%r8, %rcx
	movq	%r12, recog_data+16(%rip)
	movq	8(%r12), %rax
	cmpq	$255, %rax
	ja	.LBB1_516
# BB#461:                               # %if.then216.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_516
# BB#462:                               # %if.then308.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$302, %rdx              # imm = 0x12E
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1331:                             # %if.end319.i
	movq	8(%rbx), %r14
.LBB1_1305:                             # %L7037.i
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	fcmov_comparison_operator
	testq	%r13, %rax
	je	.LBB1_1307
# BB#1306:                              # %if.then158.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_1307
# BB#1378:                              # %land.lhs.true508.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_1307
# BB#1379:                              # %L7039.i
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_1307
# BB#1380:                              # %land.lhs.true521.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_1307
# BB#1381:                              # %L7040.i
	movq	16(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4579
# BB#1382:                              # %if.then532.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4579
# BB#1383:                              # %if.then543.i
	movl	ix86_arch(%rip), %eax
	movl	x86_cmove(%rip), %edx
	movq	%r14, recog_data+24(%rip)
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	movq	%r12, %rcx
	jne	.LBB1_1385
# BB#1384:                              # %lor.lhs.false551.i
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB1_1388
.LBB1_1385:                             # %land.lhs.true554.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1386
# BB#1387:                              # %lor.lhs.false559.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	$618, %rdx              # imm = 0x26A
	jne	.LBB1_4569
.LBB1_1388:                             # %if.end565.i
	movq	16(%rcx), %rbx
	movq	%rcx, %r12
	movq	8(%rbx), %r14
	jmp	.LBB1_1307
.LBB1_151:                              # %land.lhs.true539.L1611_crit_edge.i
	movl	ix86_cpu(%rip), %eax
.LBB1_152:                              # %L1611.i
	movq	%rax, %rcx
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r13, %rbx
	je	.LBB1_156
# BB#153:                               # %land.lhs.true549.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_156
# BB#154:                               # %land.lhs.true549.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_156
# BB#155:                               # %if.then554.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$216, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_143:
	movq	$162, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_322:
	movq	$617, %rdx              # imm = 0x269
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_273:                              # %L718.i
	orq	%rcx, %rax
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_274
# BB#275:                               # %L718.i
	movabsq	$1, %rcx
	jmp	.LBB1_276
.LBB1_162:                              # %if.end580.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_185:                              # %if.end672.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_168:                              # %if.end605.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_174:                              # %if.end630.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_180:                              # %if.end655.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_194:                              # %land.lhs.true710.L4535_crit_edge.i
	movl	ix86_cpu(%rip), %eax
.LBB1_195:                              # %L4535.i
	movq	%rax, %rcx
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r13, %rbx
	je	.LBB1_199
# BB#196:                               # %land.lhs.true720.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_199
# BB#197:                               # %land.lhs.true720.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_199
# BB#198:                               # %if.then725.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$413, %rdx              # imm = 0x19D
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_230:                              # %if.end852.i
	movq	16(%r12), %r14
	movq	16(%r14), %rbx
.LBB1_231:                              # %L5385.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#232:                               # %if.then840.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_235
# BB#233:                               # %if.then840.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_235
# BB#234:                               # %if.then863.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$473, %rdx              # imm = 0x1D9
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_206:                              # %if.end760.i
	movq	16(%r12), %r14
	movq	16(%r14), %rbx
.LBB1_207:                              # %L4883.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#208:                               # %if.then748.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_211
# BB#209:                               # %if.then748.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_211
# BB#210:                               # %if.then771.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$437, %rdx              # imm = 0x1B5
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_218:                              # %if.end806.i
	movq	16(%r12), %r14
	movq	16(%r14), %rbx
.LBB1_219:                              # %L5189.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#220:                               # %if.then794.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_223
# BB#221:                               # %if.then794.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_223
# BB#222:                               # %if.then817.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$459, %rdx              # imm = 0x1CB
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_242:                              # %if.end898.i
	movq	16(%r12), %r14
	movq	16(%r14), %rbx
.LBB1_243:                              # %L5529.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_67
# BB#244:                               # %if.then886.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_247
# BB#245:                               # %if.then886.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_247
# BB#246:                               # %if.then909.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$483, %rdx              # imm = 0x1E3
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_294:                              # %L10957.i
	cmpq	$120, %rax
	jne	.LBB1_295
# BB#304:                               # %L2229.i
	movq	8(%r14), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#305:                               # %if.then1183.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196728, %rcx           # imm = 0x30078
	jne	.LBB1_62
# BB#306:                               # %L2231.i
	movq	8(%rax), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#307:                               # %if.then1210.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_qimode_math(%rip), %edx
	movq	%rbx, recog_data+16(%rip)
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_62
# BB#308:                               # %land.lhs.true1219.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_310
# BB#309:                               # %lor.lhs.false1224.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_62
.LBB1_310:                              # %land.lhs.true1229.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_62
# BB#311:                               # %if.then1231.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$255, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_632:
	movq	$108, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_652:                              # %L752.i
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB1_653
# BB#654:                               # %L752.i
	movabsq	$1, %rcx
	jmp	.LBB1_655
.LBB1_1694:                             # %if.end462.i
	movq	8(%rbx), %r14
.LBB1_1668:                             # %L7046.i
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	fcmov_comparison_operator
	testq	%r13, %rax
	je	.LBB1_1670
# BB#1669:                              # %if.then295.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_1670
# BB#1746:                              # %land.lhs.true663.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_1670
# BB#1747:                              # %L7048.i
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_1670
# BB#1748:                              # %land.lhs.true676.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_1670
# BB#1749:                              # %L7049.i
	movq	16(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4583
# BB#1750:                              # %if.then687.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4583
# BB#1751:                              # %if.then698.i
	movl	target_flags(%rip), %eax
	movl	x86_cmove(%rip), %edx
	movl	ix86_arch(%rip), %ecx
	movq	%r14, recog_data+24(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB1_1752
# BB#1756:                              # %land.lhs.true726.i
	andq	$327680, %rax           # imm = 0x50000
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	orq	%rax, %rsi
	testq	%r13, %rsi
	movq	%r12, %rax
	je	.LBB1_1760
# BB#1757:                              # %land.lhs.true733.i
	movq	%rax, %rcx
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1758
# BB#1759:                              # %lor.lhs.false738.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	%rcx, %rax
	movq	$620, %rdx              # imm = 0x26C
	jne	.LBB1_4569
	jmp	.LBB1_1760
.LBB1_1617:
	movq	$564, %rdx              # imm = 0x234
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1855:                             # %L11201.i
	cmpq	$123, %rax
	jne	.LBB1_1856
# BB#1863:                              # %L6156.i
	movq	8(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r14, %r8
	je	.LBB1_1868
# BB#1864:                              # %if.then1376.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_1868
# BB#1865:                              # %land.lhs.true1381.i
	movq	%r8, %rcx
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1866
# BB#1867:                              # %land.lhs.true1385.i
	movzbl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	movq	%rcx, %r8
	movq	$544, %rdx              # imm = 0x220
	jne	.LBB1_1868
	jmp	.LBB1_4569
.LBB1_516:                              # %if.end309.i
	movq	%rcx, %r8
	movq	16(%r8), %r14
.LBB1_424:                              # %L488.i
	movq	%r8, %rbx
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_427
# BB#425:                               # %if.then108.i
	movzbl	target_flags+3(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	movq	$73, %rdx
	testq	$2, %rax
	movq	%rbx, %rax
	je	.LBB1_4569
# BB#426:                               # %if.end539.i
	movq	16(%rax), %r14
	movq	%rax, %rbx
.LBB1_427:                              # %L495.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_428
# BB#429:                               # %if.then113.i
	movzbl	target_flags+3(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	movq	$74, %rdx
	testq	$2, %rax
.LBB1_1988:                             # %land.lhs.true390.i
	movq	%rbx, %r8
	jne	.LBB1_4569
	jmp	.LBB1_7
.LBB1_4579:                             # %if.end545.i
	movq	8(%rbx), %r14
.LBB1_1307:                             # %L7301.i
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	sse_comparison_operator
	testq	%r13, %rax
	je	.LBB1_1309
# BB#1308:                              # %if.then163.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB1_1309
# BB#1389:                              # %L11146.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1402
# BB#1390:                              # %if.then583.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1401
# BB#1391:                              # %if.then596.i11734
	movq	%r15, recog_data+40(%rip)
	movq	16(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1409
# BB#1392:                              # %if.then607.i11736
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1409
# BB#1393:                              # %if.then621.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+24(%rip)
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_1408
# BB#1394:                              # %land.lhs.true632.i
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	jne	.LBB1_1396
# BB#1395:                              # %lor.lhs.false637.i
	movzbl	(%r14), %ecx
	cmpq	$66, %rcx
	je	.LBB1_1408
.LBB1_1396:                             # %land.lhs.true642.i
	testq	$16, %rax
	je	.LBB1_1399
# BB#1397:                              # %lor.lhs.false645.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$103, %rax
	je	.LBB1_1408
# BB#1398:                              # %land.lhs.true650.i
	cmpq	$102, %rax
	je	.LBB1_1408
.LBB1_1399:                             # %land.lhs.true655.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1408
# BB#1400:                              # %if.then657.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$637, %rdx              # imm = 0x27D
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1386:
	movq	$618, %rdx              # imm = 0x26A
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_156:                              # %if.end555.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_274:
	movabsq	$0, %rcx
.LBB1_276:                              # %L718.i
	andq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_278
# BB#277:                               # %if.then1066.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$110, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_199:                              # %if.end726.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_235:                              # %if.end864.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_211:                              # %if.end772.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_223:                              # %if.end818.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_247:                              # %if.end910.i
	movq	16(%r12), %r14
	jmp	.LBB1_67
.LBB1_295:                              # %L10957.i
	cmpq	$121, %rax
	jne	.LBB1_62
# BB#296:                               # %L2211.i
	movq	8(%r14), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#297:                               # %if.then1125.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196729, %rcx           # imm = 0x30079
	jne	.LBB1_62
# BB#298:                               # %L2213.i
	movq	8(%rax), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_62
# BB#299:                               # %if.then1152.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_qimode_math(%rip), %edx
	movq	%rbx, recog_data+16(%rip)
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_62
# BB#300:                               # %land.lhs.true1161.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_302
# BB#301:                               # %lor.lhs.false1166.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_62
.LBB1_302:                              # %land.lhs.true1171.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_62
# BB#303:                               # %if.then1173.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$254, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_62:                               # %if.end943.i
	movq	8(%r12), %r14
.LBB1_63:                               # %L10879.i
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB1_64
# BB#71:                                # %if.then19.i
	movq	%r14, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196650, %rcx           # imm = 0x3002A
	jne	.LBB1_7
# BB#72:                                # %land.lhs.true1360.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_7
# BB#73:                                # %land.lhs.true1366.i
	movl	16(%rax), %eax
	cmpq	$11, %rax
	jne	.LBB1_7
# BB#74:                                # %L1102.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196669, %rcx           # imm = 0x3003D
	jne	.LBB1_7
# BB#75:                                # %land.lhs.true1386.i
	movl	8(%rax), %eax
	cmpq	$18, %rax
	jne	.LBB1_7
# BB#76:                                # %land.lhs.true1391.i
	movzbl	target_flags(%rip), %eax
	movq	$165, %rdx
	testq	$1, %rax
	jne	.LBB1_4569
	jmp	.LBB1_7
.LBB1_64:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_653:
	movabsq	$0, %rcx
.LBB1_655:                              # %L752.i
	movq	$114, %rdx
	testq	%rcx, %rax
	movq	%r8, %rdi
	jne	.LBB1_4569
# BB#656:                               # %if.end998.i
	movq	16(%rdi), %r12
.LBB1_397:                              # %L1315.i
	movq	%rdi, %r14
	movq	$4, %rsi
	movq	%r12, %rbx
	movq	%rbx, %rdi
	callq	address_operand
	testq	%r13, %rax
	je	.LBB1_398
# BB#761:                               # %if.then814.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$192, %rdx
	testq	$2, %rax
	movq	%r14, %r12
	je	.LBB1_4569
# BB#762:                               # %if.end1472.i
	movq	16(%r12), %rbx
	jmp	.LBB1_399
.LBB1_398:
	movq	%r14, %r12
.LBB1_399:                              # %L1319.i
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_400
# BB#763:                               # %L10983.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB1_764
# BB#771:                               # %L10998.i
	movl	16(%rbx), %eax
	testq	%rax, %rax
	jne	.LBB1_400
# BB#772:                               # %L1320.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	address_operand
	testq	%r13, %rax
	je	.LBB1_400
# BB#773:                               # %if.then1499.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$193, %rdx
	testq	$2, %rax
	jne	.LBB1_4569
	jmp	.LBB1_400
.LBB1_764:                              # %L10983.i
	cmpq	$78, %rax
	jne	.LBB1_400
# BB#765:                               # %L2150.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_400
# BB#766:                               # %if.then1517.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_400
# BB#767:                               # %if.then1528.i
	movq	%rbx, recog_data+16(%rip)
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_769
# BB#768:                               # %lor.lhs.false1538.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_400
.LBB1_769:                              # %land.lhs.true1543.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_400
# BB#770:                               # %if.then1545.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$250, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_400:                              # %if.end822.i
	movq	8(%r12), %r14
.LBB1_401:                              # %L10891.i
	movzbl	(%r14), %eax
	cmpq	$61, %rax
	jne	.LBB1_403
# BB#402:                               # %land.lhs.true.i
	movl	8(%r14), %eax
	cmpq	$19, %rax
	jne	.LBB1_403
# BB#774:                               # %L6378.i
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_776
# BB#775:                               # %land.lhs.true1556.i
	cmpq	$0, 8(%rax)
	movq	$582, %rdx              # imm = 0x246
	je	.LBB1_4569
.LBB1_776:                              # %if.end1562.i
	movq	8(%r12), %r14
.LBB1_403:                              # %L10884.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_404
# BB#405:                               # %if.then28.i
	movq	%r14, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_7
# BB#406:                               # %L10999.i
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-75, %rax
	andq	%r13, %rax
	cmpq	$16, %rax
	ja	.LBB1_7
# BB#407:                               # %L10999.i
	jmpq	*.LJTI1_3(,%rax,8)
.LBB1_777:                              # %L1475.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_778
# BB#779:                               # %if.then1596.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_780
# BB#781:                               # %if.then1604.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_782
# BB#783:                               # %if.then1604.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#784:                               # %if.then1611.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$207, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_404:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_785:                              # %L1938.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_786
# BB#787:                               # %if.then1618.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB1_788
# BB#792:                               # %L1940.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262255, %rcx           # imm = 0x4006F
	jne	.LBB1_793
# BB#794:                               # %L1941.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB1_795
# BB#796:                               # %land.lhs.true1663.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB1_797
# BB#798:                               # %L1942.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_799
# BB#800:                               # %land.lhs.true1676.i
	cmpq	$0, 8(%rax)
	je	.LBB1_802
# BB#801:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_880:                              # %L3820.i
	movq	%r8, %r14
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_881
# BB#882:                               # %if.then1932.i
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	je	.LBB1_883
# BB#884:                               # %if.then1932.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r14, %r8
	je	.LBB1_7
# BB#885:                               # %if.then1939.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$347, %rdx              # imm = 0x15B
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_810:                              # %L2925.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_811
# BB#812:                               # %if.then1708.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_813
# BB#814:                               # %if.then1716.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_815
# BB#816:                               # %if.then1716.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#817:                               # %if.then1723.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$292, %rdx              # imm = 0x124
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_818:                              # %L3246.i
	movq	%r8, 8(%rsp)            # 8-byte Spill
	movq	8(%rbx), %r12
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_819
# BB#820:                               # %L11012.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jg	.LBB1_825
# BB#821:                               # %L11012.i
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	jbe	.LBB1_823
# BB#822:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_872:                              # %L3516.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_873
# BB#874:                               # %if.then1910.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_875
# BB#876:                               # %if.then1918.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_877
# BB#878:                               # %if.then1918.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#879:                               # %if.then1925.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$328, %rdx              # imm = 0x148
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_886:                              # %L4306.i
	movq	%r8, %r14
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_887
# BB#888:                               # %if.then1946.i
	movq	%rbx, recog_data+8(%rip)
	movabsq	$recog_data, %rax
	movq	$86, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	$395, %rdx              # imm = 0x18B
.LBB1_2008:                             # %land.lhs.true452.i
	movq	%r14, %r8
	jne	.LBB1_4569
	jmp	.LBB1_7
.LBB1_889:                              # %L4462.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_890
# BB#891:                               # %if.then1958.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_892
# BB#893:                               # %if.then1966.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_894
# BB#895:                               # %if.then1966.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#896:                               # %if.then1973.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$408, %rdx              # imm = 0x198
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_933:                              # %L5310.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_934
# BB#935:                               # %if.then2100.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_941
# BB#936:                               # %if.then2108.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_940
# BB#937:                               # %land.lhs.true2118.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_940
# BB#938:                               # %land.lhs.true2118.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_940
# BB#939:                               # %if.then2124.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$468, %rdx              # imm = 0x1D4
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_897:                              # %L4724.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_898
# BB#899:                               # %if.then1980.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB1_900
# BB#904:                               # %L11014.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r13, %rax
	je	.LBB1_911
# BB#905:                               # %if.then1998.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rbx), %rax
	cmpq	$31, %rax
	jne	.LBB1_910
# BB#906:                               # %land.lhs.true2011.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_cltd(%rip), %edx
	movl	optimize_size(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rdx, %rdi
	orq	%rdi, %rsi
	testq	%r13, %rsi
	je	.LBB1_910
# BB#907:                               # %land.lhs.true2017.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_910
# BB#908:                               # %land.lhs.true2017.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_910
# BB#909:                               # %if.then2022.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$426, %rdx              # imm = 0x1AA
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_919:                              # %L5060.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_920
# BB#921:                               # %if.then2057.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_927
# BB#922:                               # %if.then2065.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_926
# BB#923:                               # %land.lhs.true2075.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_926
# BB#924:                               # %land.lhs.true2075.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_926
# BB#925:                               # %if.then2081.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$450, %rdx              # imm = 0x1C2
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_947:                              # %L5454.i
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_948
# BB#949:                               # %if.then2143.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_955
# BB#950:                               # %if.then2151.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_954
# BB#951:                               # %land.lhs.true2161.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_954
# BB#952:                               # %land.lhs.true2161.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_954
# BB#953:                               # %if.then2167.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$478, %rdx              # imm = 0x1DE
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_4583:                             # %if.end700.i
	movq	8(%rbx), %r14
	jmp	.LBB1_1670
.LBB1_1752:                             # %land.lhs.true706.i
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	andq	$327680, %rax           # imm = 0x50000
	orq	%rsi, %rax
	testq	%r13, %rax
	movq	%r12, %rax
	je	.LBB1_1760
# BB#1753:                              # %land.lhs.true712.i
	movq	%rax, %rcx
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_1754
# BB#1755:                              # %lor.lhs.false717.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	%rcx, %rax
	movq	$619, %rdx              # imm = 0x26B
	jne	.LBB1_4569
.LBB1_1760:                             # %if.end744.i
	movq	16(%rax), %rbx
	movq	%rax, %r12
	movq	8(%rbx), %r14
.LBB1_1670:                             # %L7345.i
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	sse_comparison_operator
	testq	%r13, %rax
	je	.LBB1_1672
# BB#1671:                              # %if.then300.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB1_1672
# BB#1761:                              # %L11194.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1774
# BB#1762:                              # %if.then762.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1773
# BB#1763:                              # %if.then775.i
	movq	%r15, recog_data+40(%rip)
	movq	16(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1781
# BB#1764:                              # %if.then786.i11897
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1781
# BB#1765:                              # %if.then800.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+24(%rip)
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1780
# BB#1766:                              # %land.lhs.true811.i
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	jne	.LBB1_1768
# BB#1767:                              # %lor.lhs.false816.i
	movzbl	(%r14), %ecx
	cmpq	$66, %rcx
	je	.LBB1_1780
.LBB1_1768:                             # %land.lhs.true821.i11903
	testq	$16, %rax
	je	.LBB1_1771
# BB#1769:                              # %lor.lhs.false824.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$103, %rax
	je	.LBB1_1780
# BB#1770:                              # %land.lhs.true829.i
	cmpq	$102, %rax
	je	.LBB1_1780
.LBB1_1771:                             # %land.lhs.true834.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1780
# BB#1772:                              # %if.then836.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$639, %rdx              # imm = 0x27F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1758:
	movq	$620, %rdx              # imm = 0x26C
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1856:                             # %L11201.i
	cmpq	$125, %rax
	movq	%r14, %r8
	jne	.LBB1_1868
# BB#1857:                              # %L6142.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_1868
# BB#1858:                              # %if.then1352.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB1_1868
# BB#1859:                              # %land.lhs.true1357.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_fiop(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_1868
# BB#1860:                              # %land.lhs.true1361.i
	movq	%r8, %rcx
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_1861
# BB#1862:                              # %land.lhs.true1365.i11946
	movzbl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	movq	%rcx, %r8
	movq	$542, %rdx              # imm = 0x21E
	jne	.LBB1_1868
	jmp	.LBB1_4569
.LBB1_1866:
	movq	$544, %rdx              # imm = 0x220
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_428:
	movq	%rbx, %r8
	jmp	.LBB1_7
.LBB1_1408:                             # %if.end658.i
	movq	16(%r12), %rbx
.LBB1_1409:                             # %if.end609.i
	movq	8(%rbx), %r14
.LBB1_1401:                             # %if.end598.i11735
	movq	8(%r14), %r15
.LBB1_1402:                             # %L11147.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1309
# BB#1403:                              # %if.then588.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1309
# BB#1404:                              # %if.then673.i
	movq	%r15, recog_data+40(%rip)
	movq	16(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1410
# BB#1405:                              # %if.then681.i11742
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_1413
# BB#1406:                              # %if.then697.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+24(%rip)
	movq	$641, %rdx              # imm = 0x281
	testq	$5, %rax
	movq	%r12, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1407
.LBB1_278:                              # %L723.i
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB1_279
# BB#280:                               # %L723.i
	movabsq	$1, %rcx
	jmp	.LBB1_281
.LBB1_778:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_780:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_782:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_786:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_788:                              # %if.end1633.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_789
# BB#790:                               # %if.then1636.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_791
# BB#808:                               # %if.then1636.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#809:                               # %if.then1701.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$237, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_793:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_795:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_797:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_799:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_802:                              # %L1943.i
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_803
# BB#804:                               # %if.then1688.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_805
# BB#806:                               # %if.then1688.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#807:                               # %if.then1695.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$235, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_881:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_883:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_811:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_813:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_815:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_819:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_825:                              # %L11012.i
	cmpq	$87, %rax
	jne	.LBB1_826
# BB#832:                               # %L4444.i
	movq	8(%r12), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_833
# BB#834:                               # %L4445.i
	movq	16(%r12), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_835
# BB#836:                               # %if.then1758.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262234, %rax           # imm = 0x4005A
	jne	.LBB1_837
# BB#838:                               # %L4447.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_839
# BB#840:                               # %if.then1779.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131148, %rcx           # imm = 0x2004C
	jne	.LBB1_841
# BB#842:                               # %L4449.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_843
# BB#844:                               # %land.lhs.true1801.i
	movq	8(%rcx), %rcx
	cmpq	$32, %rcx
	jne	.LBB1_845
# BB#846:                               # %L4450.i
	movq	16(%rax), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_847
# BB#848:                               # %L4450.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	8(%rsp), %r8            # 8-byte Reload
	je	.LBB1_7
# BB#849:                               # %if.then1816.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$407, %rdx              # imm = 0x197
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_823:                              # %L11012.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_824
# BB#828:                               # %L11011.i
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_829
# BB#830:                               # %if.then1742.i
	movq	%r12, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_831
# BB#868:                               # %if.then1896.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_869
# BB#870:                               # %if.then1896.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	8(%rsp), %r8            # 8-byte Reload
	je	.LBB1_7
# BB#871:                               # %if.then1903.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$310, %rdx              # imm = 0x136
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_873:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_875:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_877:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_887:
	movq	%r14, %r8
	jmp	.LBB1_7
.LBB1_890:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_892:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_894:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_934:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_940:                              # %if.end2125.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_941:                              # %L5341.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_942
# BB#943:                               # %if.then2113.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_944
# BB#945:                               # %if.then2113.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#946:                               # %if.then2136.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$470, %rdx              # imm = 0x1D6
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_898:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_910:                              # %if.end2023.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_911:                              # %L11015.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB1_900
# BB#912:                               # %if.then2003.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_916
# BB#913:                               # %land.lhs.true2032.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_916
# BB#914:                               # %land.lhs.true2032.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_916
# BB#915:                               # %if.then2038.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$428, %rdx              # imm = 0x1AC
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_920:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_926:                              # %if.end2082.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_927:                              # %L5091.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_928
# BB#929:                               # %if.then2070.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_930
# BB#931:                               # %if.then2070.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#932:                               # %if.then2093.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$452, %rdx              # imm = 0x1C4
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_948:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_954:                              # %if.end2168.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_955:                              # %L5485.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_956
# BB#957:                               # %if.then2156.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_958
# BB#959:                               # %if.then2156.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#960:                               # %if.then2179.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$480, %rdx              # imm = 0x1E0
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1754:
	movq	$619, %rdx              # imm = 0x26B
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1780:                             # %if.end837.i
	movq	16(%r12), %rbx
.LBB1_1781:                             # %if.end788.i
	movq	8(%rbx), %r14
.LBB1_1773:                             # %if.end777.i
	movq	8(%r14), %r15
.LBB1_1774:                             # %L11195.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1672
# BB#1775:                              # %if.then767.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1672
# BB#1776:                              # %if.then852.i11909
	movq	%r15, recog_data+40(%rip)
	movq	16(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1782
# BB#1777:                              # %if.then860.i11910
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_1785
# BB#1778:                              # %if.then876.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+24(%rip)
	movq	$645, %rdx              # imm = 0x285
	testq	$4, %rax
	movq	%r12, %rax
	jne	.LBB1_4569
	jmp	.LBB1_1779
.LBB1_1861:
	movq	$542, %rdx              # imm = 0x21E
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_1410:                             # %if.end683.i
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_1413
# BB#1411:                              # %if.then686.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1413
# BB#1412:                              # %if.then718.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+24(%rip)
	movq	$642, %rdx              # imm = 0x282
	testq	$5, %rax
	movq	%r12, %rax
	jne	.LBB1_4569
.LBB1_1407:                             # %if.end706.i
	movq	16(%rax), %rbx
	movq	%rax, %r12
	movq	8(%rbx), %r14
	jmp	.LBB1_1309
.LBB1_279:
	movabsq	$0, %rcx
.LBB1_281:                              # %L723.i
	movq	$111, %rdx
	testq	%rcx, %rax
	movq	%r12, %rax
	jne	.LBB1_4569
# BB#282:                               # %if.end1076.i
	movq	8(%rax), %r14
	movq	%rax, %r12
	jmp	.LBB1_63
.LBB1_789:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_791:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_803:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_805:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_826:                              # %L11012.i
	cmpq	$89, %rax
	jne	.LBB1_827
# BB#850:                               # %L4706.i
	movq	8(%r12), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_851
# BB#852:                               # %L4707.i
	movq	16(%r12), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_853
# BB#854:                               # %if.then1831.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262231, %rax           # imm = 0x40057
	jne	.LBB1_855
# BB#856:                               # %L4709.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_857
# BB#858:                               # %if.then1852.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131148, %rcx           # imm = 0x2004C
	jne	.LBB1_859
# BB#860:                               # %L4711.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_861
# BB#862:                               # %land.lhs.true1874.i
	movq	8(%rcx), %rcx
	cmpq	$32, %rcx
	jne	.LBB1_863
# BB#864:                               # %L4712.i
	movq	16(%rax), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_865
# BB#866:                               # %L4712.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	8(%rsp), %r8            # 8-byte Reload
	je	.LBB1_7
# BB#867:                               # %if.then1889.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$425, %rdx              # imm = 0x1A9
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_833:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_835:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_837:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_839:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_841:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_843:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_845:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_847:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_824:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_829:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_831:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_869:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_942:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_944:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_916:                              # %if.end2039.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_900:                              # %L4785.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_901
# BB#902:                               # %if.then1993.i
	movq	%rbx, recog_data+16(%rip)
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB1_903
# BB#917:                               # %if.then1993.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%r12, %r8
	je	.LBB1_7
# BB#918:                               # %if.then2050.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$430, %rdx              # imm = 0x1AE
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_928:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_930:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_956:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_958:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1782:                             # %if.end862.i
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_1785
# BB#1783:                              # %if.then865.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1785
# BB#1784:                              # %if.then897.i11912
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+24(%rip)
	movq	$646, %rdx              # imm = 0x286
	testq	$4, %rax
	movq	%r12, %rax
	jne	.LBB1_4569
.LBB1_1779:                             # %if.end885.i
	movq	16(%rax), %rbx
	movq	%rax, %r12
	movq	8(%rbx), %r14
	jmp	.LBB1_1672
.LBB1_1413:                             # %if.end720.i
	movq	8(%rbx), %r14
.LBB1_1309:                             # %L7323.i
	movzbl	(%r14), %eax
	cmpq	$103, %rax
	jne	.LBB1_1310
# BB#1414:                              # %L7324.i
	movq	8(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1310
# BB#1415:                              # %if.then739.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1310
# BB#1416:                              # %if.then747.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4580
# BB#1417:                              # %if.then755.i
	movq	%r14, recog_data+8(%rip)
	movq	24(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4580
# BB#1418:                              # %if.then766.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	testq	$5, %rax
	je	.LBB1_1423
# BB#1419:                              # %land.lhs.true774.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_1421
# BB#1420:                              # %lor.lhs.false779.i
	movq	recog_data+24(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_1423
.LBB1_1421:                             # %land.lhs.true784.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1423
# BB#1422:                              # %if.then786.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$638, %rdx              # imm = 0x27E
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_827:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_851:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_853:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_855:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_857:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_859:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_861:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_863:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_865:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_7
.LBB1_901:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_903:
	movq	%r12, %r8
	jmp	.LBB1_7
.LBB1_1785:                             # %if.end899.i
	movq	8(%rbx), %r14
.LBB1_1672:                             # %L7367.i
	movzbl	(%r14), %eax
	cmpq	$103, %rax
	jne	.LBB1_1673
# BB#1786:                              # %L7368.i
	movq	8(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1673
# BB#1787:                              # %if.then918.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_1673
# BB#1788:                              # %if.then926.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4584
# BB#1789:                              # %if.then934.i11915
	movq	%r14, recog_data+8(%rip)
	movq	24(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_4584
# BB#1790:                              # %if.then945.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	testq	$5, %rax
	je	.LBB1_1795
# BB#1791:                              # %land.lhs.true953.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_1793
# BB#1792:                              # %lor.lhs.false958.i
	movq	recog_data+24(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	je	.LBB1_1795
.LBB1_1793:                             # %land.lhs.true963.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_1795
# BB#1794:                              # %if.then965.i11919
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$640, %rdx              # imm = 0x280
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_4580:                             # %if.end768.i
	movq	8(%rbx), %r14
	jmp	.LBB1_1310
.LBB1_1423:                             # %if.end787.i
	movq	16(%r12), %rbx
	movq	8(%rbx), %r14
.LBB1_1310:                             # %L7394.i
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	fcmov_comparison_operator
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_1434
# BB#1311:                              # %if.then173.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_1434
# BB#1312:                              # %if.then799.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%r14), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	movq	%r8, %r15
	callq	register_operand
	movq	%r15, %r8
	testq	%r13, %rax
	je	.LBB1_1434
# BB#1313:                              # %if.then807.i
	movq	%r8, %r15
	movq	%r14, recog_data+40(%rip)
	movq	16(%rbx), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1424
# BB#1314:                              # %if.then815.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1434
# BB#1315:                              # %if.then828.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	movq	$643, %rdx              # imm = 0x283
	jmp	.LBB1_1316
.LBB1_4584:                             # %if.end947.i
	movq	8(%rbx), %r14
	jmp	.LBB1_1673
.LBB1_1795:                             # %if.end966.i
	movq	16(%r12), %rbx
	movq	8(%rbx), %r14
.LBB1_1673:                             # %L7430.i
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	fcmov_comparison_operator
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_1868
# BB#1674:                              # %if.then310.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_1868
# BB#1675:                              # %if.then978.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%r14), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	movq	%r8, %r15
	callq	register_operand
	movq	%r15, %r8
	testq	%r13, %rax
	je	.LBB1_1868
# BB#1676:                              # %if.then986.i
	movq	%r8, %r15
	movq	%r14, recog_data+40(%rip)
	movq	16(%rbx), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_1796
# BB#1677:                              # %if.then994.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1868
# BB#1678:                              # %if.then1007.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	movq	$647, %rdx              # imm = 0x287
	jmp	.LBB1_1679
.LBB1_1424:                             # %if.end817.i
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	const0_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1434
# BB#1425:                              # %if.then820.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_1434
# BB#1426:                              # %if.then840.i11752
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	movq	$644, %rdx              # imm = 0x284
.LBB1_1316:                             # %if.then828.i
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_1434:                             # %if.end903
	movq	8(%r8), %r15
	jmp	.LBB1_7
.LBB1_1796:                             # %if.end996.i
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	const0_operand
	testq	%r13, %rax
	movq	%r15, %r8
	je	.LBB1_1868
# BB#1797:                              # %if.then999.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_1868
# BB#1798:                              # %if.then1019.i11924
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	movq	$648, %rdx              # imm = 0x288
.LBB1_1679:                             # %if.then1007.i
	testq	$4, %rax
	jne	.LBB1_4569
.LBB1_1868:                             # %if.end1486
	movq	8(%r8), %r15
.LBB1_7:                                # %L1
	movzbl	(%r15), %eax
	cmpq	$61, %rax
	jne	.LBB1_9
# BB#8:                                 # %land.lhs.true
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB1_9
# BB#2369:                              # %L2
	movq	16(%r8), %r15
	movzbl	(%r15), %eax
	cmpq	$74, %rax
	jne	.LBB1_2370
# BB#2371:                              # %L3
	movq	8(%r15), %rbx
	movl	(%rbx), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-2, %rdx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rdx
	cmpq	$3, %rdx
	jbe	.LBB1_4585
# BB#2372:
	movq	%r8, %r12
.LBB1_2373:                             # %L79
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2374
# BB#2470:                              # %if.then1679
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131135, %rcx           # imm = 0x2003F
	jne	.LBB1_2472
# BB#2471:                              # %land.lhs.true2212
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	jne	.LBB1_2472
# BB#2473:                              # %L81
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_2472
# BB#2474:                              # %L82
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_2472
# BB#2475:                              # %if.then2243
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_2477
# BB#2476:                              # %land.lhs.true2255
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2477
# BB#2478:                              # %L84
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2482
# BB#2479:                              # %land.lhs.true2271
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2482
# BB#2480:                              # %land.lhs.true2276
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB1_2482
# BB#2481:                              # %land.lhs.true2279
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$12, %rdx
	jne	.LBB1_4569
.LBB1_2482:                             # %if.end2283
	movq	8(%r15), %rbx
	jmp	.LBB1_2375
.LBB1_2370:                             # %if.end1661
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_4585:                             # %L3
	jmpq	*.LJTI1_7(,%rdx,8)
.LBB1_2441:                             # %L11300
	movq	%r8, %r12
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$76, %rax
	jne	.LBB1_2442
# BB#2459:                              # %L73
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2373
# BB#2460:                              # %if.then2057
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2373
# BB#2461:                              # %if.then2065
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2464
# BB#2462:                              # %land.lhs.true2074
	cmpq	$0, 8(%rax)
	jne	.LBB1_2464
# BB#2463:                              # %land.lhs.true2079
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r13, %rax
	movq	$11, %rdx
	jne	.LBB1_4569
.LBB1_2464:                             # %if.end2083
	movq	8(%r15), %rbx
	jmp	.LBB1_2373
.LBB1_2472:                             # %if.end2218
	movq	8(%r15), %rbx
.LBB1_2374:
	movq	%r12, %r8
.LBB1_2375:                             # %L88
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$131072, %rax           # imm = 0x20000
	jne	.LBB1_2376
# BB#2483:                              # %L11303
	movq	%r8, %r14
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2484
# BB#2488:                              # %if.then2289
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131135, %rcx           # imm = 0x2003F
	movq	%r14, %r8
	jne	.LBB1_2490
# BB#2489:                              # %land.lhs.true2316
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_2491
.LBB1_2490:                             # %if.end2322
	movq	8(%r15), %rbx
	jmp	.LBB1_2485
.LBB1_2376:                             # %if.end1687
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2425:                             # %L11298
	movq	%r8, %r12
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$76, %rax
	jne	.LBB1_2426
# BB#2435:                              # %L48
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2436:                              # %if.then1953
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2437:                              # %if.then1964
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_2440
# BB#2438:                              # %land.lhs.true1976
	cmpq	$0, 8(%rax)
	jne	.LBB1_2440
# BB#2439:                              # %land.lhs.true1981
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$7, %rdx
	jne	.LBB1_4569
.LBB1_2440:                             # %if.end1985
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2409:                             # %L11296
	movq	%r8, %r12
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$76, %rax
	jne	.LBB1_2410
# BB#2419:                              # %L29
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2420:                              # %if.then1856
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2421:                              # %if.then1867
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_2424
# BB#2422:                              # %land.lhs.true1879
	cmpq	$0, 8(%rax)
	jne	.LBB1_2424
# BB#2423:                              # %land.lhs.true1884
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$4, %rdx
	jne	.LBB1_4569
.LBB1_2424:                             # %if.end1888
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2377:                             # %L11294
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jg	.LBB1_2389
# BB#2378:                              # %L11294
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	ja	.LBB1_2391
# BB#2379:                              # %L11294
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_2391
# BB#2380:                              # %L11293
	movq	%r8, %r14
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2408
# BB#2381:                              # %if.then1702
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_2385
# BB#2382:                              # %if.then1804
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB1_2384
# BB#2383:                              # %land.lhs.true1817
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	xorq	%rdx, %rdx
	testq	%r13, %rax
	jne	.LBB1_4569
.LBB1_2384:                             # %if.end1821
	movq	16(%r14), %rax
	movq	16(%rax), %rbx
.LBB1_2385:                             # %L17
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB1_2408
# BB#2386:                              # %if.then1809
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	movq	%r14, %r8
	je	.LBB1_2388
# BB#2387:                              # %land.lhs.true1830
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$2, %rdx
	jne	.LBB1_4569
.LBB1_2388:                             # %if.end1834
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2484:
	movq	%r14, %r8
.LBB1_2485:                             # %L11304
	movzbl	(%rbx), %eax
	cmpq	$63, %rax
	jne	.LBB1_2487
# BB#2486:                              # %land.lhs.true2295
	movl	16(%rbx), %eax
	testq	%rax, %rax
	je	.LBB1_2502
.LBB1_2487:                             # %if.end2301
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2442:                             # %if.end2036
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2448
# BB#2443:                              # %if.then2039
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_2446
# BB#2444:                              # %if.then2092
	movq	%rbx, recog_data+8(%rip)
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r13, %rax
	movq	$9, %rdx
	jne	.LBB1_4569
# BB#2445:                              # %if.end2106
	movq	16(%r12), %r15
	movq	16(%r15), %rbx
.LBB1_2446:                             # %L67
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2447
# BB#2465:                              # %if.then2097
	movq	%rbx, recog_data+8(%rip)
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2467
# BB#2466:                              # %lor.lhs.false2117
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_2468
.LBB1_2467:                             # %land.lhs.true2122
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r13, %rax
	movq	$10, %rdx
	jne	.LBB1_4569
.LBB1_2468:                             # %if.end2126
	movq	16(%r12), %r15
.LBB1_2447:                             # %if.end2099
	movq	8(%r15), %rbx
.LBB1_2448:                             # %L11301
	movzbl	(%rbx), %eax
	cmpq	$63, %rax
	jne	.LBB1_2373
# BB#2449:                              # %land.lhs.true2045
	movl	16(%rbx), %eax
	testq	%rax, %rax
	jne	.LBB1_2373
# BB#2450:                              # %L98
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_2373
# BB#2451:                              # %L99
	movq	8(%r14), %rdi
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_2373
# BB#2452:                              # %if.then2151
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2373
# BB#2453:                              # %land.lhs.true2160
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2373
# BB#2454:                              # %L101
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2373
# BB#2455:                              # %land.lhs.true2173
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2373
# BB#2456:                              # %L102
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_2469
# BB#2457:                              # %if.then2185
	movq	%rbx, recog_data+8(%rip)
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r13, %rax
	movq	$14, %rdx
	movq	%r12, %rax
	jne	.LBB1_4569
# BB#2458:                              # %if.end2194
	movq	16(%rax), %r15
	movq	%rax, %r12
	movq	8(%r15), %rbx
	jmp	.LBB1_2373
.LBB1_2426:                             # %if.end1939
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2427:                              # %if.then1942
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_2430
# BB#2428:                              # %if.then1994
	movq	%rbx, recog_data+8(%rip)
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r13, %rax
	movq	$6, %rdx
	jne	.LBB1_4569
# BB#2429:                              # %if.end2008
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_2430:                             # %L55
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2431:                              # %if.then1999
	movq	%rbx, recog_data+8(%rip)
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%r12, %r8
	jne	.LBB1_2433
# BB#2432:                              # %lor.lhs.false2019
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_2434
.LBB1_2433:                             # %land.lhs.true2024
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$8, %rdx
	jne	.LBB1_4569
.LBB1_2434:                             # %if.end2028
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2410:                             # %if.end1842
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2411:                              # %if.then1845
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_2414
# BB#2412:                              # %if.then1897
	movq	%rbx, recog_data+8(%rip)
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r13, %rax
	movq	$3, %rdx
	jne	.LBB1_4569
# BB#2413:                              # %if.end1911
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB1_2414:                             # %L36
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2415:                              # %if.then1902
	movq	%rbx, recog_data+8(%rip)
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%r12, %r8
	jne	.LBB1_2417
# BB#2416:                              # %lor.lhs.false1922
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB1_2418
.LBB1_2417:                             # %land.lhs.true1927
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$5, %rdx
	jne	.LBB1_4569
.LBB1_2418:                             # %if.end1931
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2389:                             # %L11294
	movq	%r8, %r12
	cmpq	$76, %rax
	jne	.LBB1_2390
# BB#2392:                              # %L10
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2393:                              # %if.then1713
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2394:                              # %if.then1724
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_2398
# BB#2395:                              # %land.lhs.true1736
	cmpq	$0, 8(%rax)
	jne	.LBB1_2398
# BB#2396:                              # %land.lhs.true1740
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_2398
# BB#2397:                              # %land.lhs.true1743
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$1, %rdx
	jne	.LBB1_4569
.LBB1_2398:                             # %if.end1747
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2502:                             # %L108
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_2503
# BB#2504:                              # %L109
	movq	%r8, %r12
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2505:                              # %if.then2412
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_2507
# BB#2506:                              # %land.lhs.true2424
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2507
# BB#2508:                              # %L111
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2510
# BB#2509:                              # %land.lhs.true2440
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2510
# BB#2511:                              # %L112
	movq	%r8, %r12
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2515
# BB#2512:                              # %if.then2455
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	movq	%r12, %rcx
	jne	.LBB1_2514
# BB#2513:                              # %land.lhs.true2483
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%r13, %rax
	movq	$15, %rdx
	jne	.LBB1_4569
.LBB1_2514:                             # %if.end2487
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	16(%rax), %rbx
.LBB1_2515:                             # %L122
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_2519
# BB#2516:                              # %if.then2460
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	movq	%r12, %rcx
	je	.LBB1_2518
# BB#2517:                              # %land.lhs.true2496
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%r13, %rax
	movq	$16, %rdx
	jne	.LBB1_4569
.LBB1_2518:                             # %if.end2500
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	16(%rax), %rbx
.LBB1_2519:                             # %L132
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131135, %rax           # imm = 0x2003F
	jne	.LBB1_2525
# BB#2520:                              # %land.lhs.true2471
	movl	16(%rbx), %eax
	testq	%rax, %rax
	jne	.LBB1_2525
# BB#2521:                              # %L133
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_2525
# BB#2522:                              # %L134
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_2525
# BB#2523:                              # %if.then2528
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2525
# BB#2524:                              # %land.lhs.true2540
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2525
# BB#2526:                              # %L136
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_2529
# BB#2527:                              # %land.lhs.true2556
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2529
# BB#2528:                              # %land.lhs.true2561
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$17, %rdx
	jne	.LBB1_4569
.LBB1_2529:                             # %if.end2565
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2525:                             # %if.end1715
	movq	%r12, %r8
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2491:                             # %L90
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB1_2492
# BB#2493:                              # %L91
	movq	%r8, %r12
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_4586
# BB#2494:                              # %if.then2347
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_2496
# BB#2495:                              # %land.lhs.true2359
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2496
# BB#2497:                              # %L93
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2501
# BB#2498:                              # %land.lhs.true2375
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2501
# BB#2499:                              # %land.lhs.true2380
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_2501
# BB#2500:                              # %land.lhs.true2383
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$13, %rdx
	jne	.LBB1_4569
.LBB1_2501:                             # %if.end2387
	movq	8(%r15), %rbx
	jmp	.LBB1_2485
.LBB1_2390:                             # %L11294
	cmpq	$77, %rax
	movq	%r12, %r8
	jne	.LBB1_2391
# BB#2399:                              # %L1428
	movq	%r8, %r14
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB1_2408
# BB#2400:                              # %if.then1756
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB1_2408
# BB#2401:                              # %if.then1767
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB1_2408
# BB#2402:                              # %land.lhs.true1775
	movq	$56, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r13, %rax
	je	.LBB1_2408
# BB#2403:                              # %land.lhs.true1778
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	movq	recog_data+16(%rip), %rdi
	cmpq	$66, %rax
	jne	.LBB1_2405
# BB#2404:                              # %lor.lhs.false1783
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	je	.LBB1_2408
.LBB1_2405:                             # %land.lhs.true1788
	xorq	%rsi, %rsi
	callq	pic_symbolic_operand
	testq	%r13, %rax
	jne	.LBB1_2408
# BB#2406:                              # %land.lhs.true1788
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2408
# BB#2407:                              # %if.then1794
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$204, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2391:                             # %sw.default1696
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2503:                             # %if.end2403
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2408:                             # %if.end1704
	movq	%r14, %r8
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2492:                             # %if.end2338
	movq	8(%r15), %rbx
	jmp	.LBB1_2485
.LBB1_2477:                             # %if.end2261
	movq	8(%r15), %rbx
	jmp	.LBB1_2375
.LBB1_2507:                             # %if.end2430
	movq	8(%r8), %r15
	jmp	.LBB1_9
.LBB1_2496:                             # %if.end2365
	movq	8(%r15), %rbx
	jmp	.LBB1_2485
.LBB1_4586:                             # %if.end2349
	movq	8(%r15), %rbx
	movq	%r12, %r8
	jmp	.LBB1_2485
.LBB1_2510:                             # %if.end2446
	movq	8(%r8), %r15
.LBB1_9:                                # %L226
	movl	(%r15), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$57, %rdx
	jne	.LBB1_10
# BB#2530:                              # %L10892
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB1_11
# BB#2531:                              # %land.lhs.true2572
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB1_11
# BB#2532:                              # %L227
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3735626, %rax          # imm = 0x39004A
	jne	.LBB1_2533
# BB#2534:                              # %L228
	movq	%r8, %r12
	movq	8(%rbx), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_2585
# BB#2535:                              # %if.then2600
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_2545
# BB#2536:                              # %if.then2611
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	movq	%r12, %rdi
	je	.LBB1_2544
# BB#2537:                              # %land.lhs.true2624
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	movq	%rax, %rcx
	andq	$327680, %rcx           # imm = 0x50000
	orq	%rcx, %rsi
	testq	%r14, %rsi
	je	.LBB1_2544
# BB#2538:                              # %land.lhs.true2631
	testq	%r14, %rcx
	je	.LBB1_2540
# BB#2539:                              # %land.lhs.true2634
	movq	recog_data(%rip), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB1_2544
.LBB1_2540:                             # %lor.lhs.false2640
	movq	recog_data(%rip), %rcx
	movl	(%rcx), %edx
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_2542
# BB#2541:                              # %lor.lhs.false2640
	movq	%rdx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	andq	%r14, %rax
	cmpq	$1048576, %rax          # imm = 0x100000
	je	.LBB1_2544
.LBB1_2542:                             # %land.lhs.true2649
	movq	$14, %rcx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_2544
# BB#2543:                              # %land.lhs.true2649
	movq	$32, %rdx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	jne	.LBB1_4569
.LBB1_2544:                             # %if.end2684
	movq	16(%rdi), %rax
	movq	%rdi, %r12
	movq	16(%rax), %rbx
.LBB1_2545:                             # %L235
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_2585
# BB#2546:                              # %if.then2616
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$327680, %rcx           # imm = 0x50000
	testq	$1, %rax
	movq	%r12, %r8
	je	.LBB1_2551
# BB#2547:                              # %land.lhs.true2693
	testq	%r14, %rcx
	je	.LBB1_2549
# BB#2548:                              # %land.lhs.true2696
	movq	recog_data(%rip), %rdx
	movl	(%rdx), %edx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	movq	$33, %rdx
	je	.LBB1_4569
.LBB1_2549:                             # %lor.lhs.false2702
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_2551
# BB#2550:                              # %land.lhs.true2705
	movq	recog_data(%rip), %rdx
	movl	(%rdx), %edx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	movq	$33, %rdx
	je	.LBB1_4569
.LBB1_2551:                             # %L242
	testq	%r14, %rcx
	je	.LBB1_2553
# BB#2552:                              # %land.lhs.true2725
	movq	recog_data(%rip), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	movq	$34, %rdx
	je	.LBB1_4569
.LBB1_2553:                             # %lor.lhs.false2731
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_2555
# BB#2554:                              # %land.lhs.true2734
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	movq	$34, %rdx
	je	.LBB1_4569
.LBB1_2555:                             # %if.end2751
	movq	8(%r8), %r15
	jmp	.LBB1_11
.LBB1_10:                               # %L226
	cmpq	$58, %rdx
	jne	.LBB1_11
# BB#2556:                              # %L10893
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB1_11
# BB#2557:                              # %land.lhs.true2758
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB1_11
# BB#2558:                              # %L245
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3801162, %rax          # imm = 0x3A004A
	jne	.LBB1_2559
# BB#2560:                              # %L246
	movq	%r8, %r12
	movq	8(%rbx), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_2585
# BB#2561:                              # %if.then2786
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_2572
# BB#2562:                              # %if.then2797
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	movq	%r12, %rdi
	je	.LBB1_2571
# BB#2563:                              # %land.lhs.true2810
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	movq	%rax, %rcx
	andq	$327680, %rcx           # imm = 0x50000
	orq	%rcx, %rsi
	testq	%r14, %rsi
	je	.LBB1_2571
# BB#2564:                              # %land.lhs.true2817
	testq	%r14, %rcx
	je	.LBB1_2566
# BB#2565:                              # %land.lhs.true2820
	movq	recog_data(%rip), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB1_2571
.LBB1_2566:                             # %lor.lhs.false2826
	movq	recog_data(%rip), %rcx
	movl	(%rcx), %edx
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_2568
# BB#2567:                              # %lor.lhs.false2826
	movq	%rdx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	andq	%r14, %rax
	cmpq	$1048576, %rax          # imm = 0x100000
	je	.LBB1_2571
.LBB1_2568:                             # %land.lhs.true2835
	movq	$14, %rcx
	movq	%rdx, %rax
	shrq	%cl, %rax
	andq	$1020, %rax             # imm = 0x3FC
	movl	mode_class(%rax), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_2571
# BB#2569:                              # %land.lhs.true2835
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	je	.LBB1_2571
# BB#2570:                              # %land.lhs.true2859
	movl	(%rbx), %eax
	xorq	%rdx, %rax
	testq	$16711680, %rax         # imm = 0xFF0000
	movq	$35, %rdx
	je	.LBB1_4569
.LBB1_2571:                             # %if.end2870
	movq	16(%rdi), %rax
	movq	%rdi, %r12
	movq	16(%rax), %rbx
.LBB1_2572:                             # %L253
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_2585
# BB#2573:                              # %if.then2802
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	%rax, %rcx
	andq	$327680, %rcx           # imm = 0x50000
	testq	$1, %rax
	movq	%r12, %r8
	je	.LBB1_2579
# BB#2574:                              # %land.lhs.true2879
	testq	%r14, %rcx
	je	.LBB1_2576
# BB#2575:                              # %land.lhs.true2882
	movq	recog_data(%rip), %rdx
	movl	(%rdx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$983040, %rsi           # imm = 0xF0000
	je	.LBB1_2578
.LBB1_2576:                             # %lor.lhs.false2888
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_2579
# BB#2577:                              # %land.lhs.true2891
	movq	recog_data(%rip), %rdx
	movl	(%rdx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$1048576, %rsi          # imm = 0x100000
	jne	.LBB1_2579
.LBB1_2578:                             # %land.lhs.true2897
	movl	(%rbx), %esi
	xorq	%rdx, %rsi
	testq	$16711680, %rsi         # imm = 0xFF0000
	movq	$36, %rdx
	je	.LBB1_4569
.LBB1_2579:                             # %L260
	testq	%r14, %rcx
	je	.LBB1_2581
# BB#2580:                              # %land.lhs.true2911
	movq	recog_data(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB1_2583
.LBB1_2581:                             # %lor.lhs.false2917
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_2584
# BB#2582:                              # %land.lhs.true2920
	movq	recog_data(%rip), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB1_2584
.LBB1_2583:                             # %land.lhs.true2926
	movl	(%rbx), %eax
	xorq	%rcx, %rax
	testq	$16711680, %rax         # imm = 0xFF0000
	movq	$37, %rdx
	je	.LBB1_4569
.LBB1_2584:                             # %if.end2937
	movq	8(%r8), %r15
	jmp	.LBB1_11
.LBB1_2533:                             # %if.end2591
	movq	8(%r8), %r15
	jmp	.LBB1_11
.LBB1_2585:                             # %if.end2602
	movq	%r12, %r8
	movq	8(%r8), %r15
	jmp	.LBB1_11
.LBB1_2559:                             # %if.end2777
	movq	8(%r8), %r15
.LBB1_11:                               # %L377
	movzbl	(%r15), %eax
	cmpq	$59, %rax
	je	.LBB1_2923
# BB#12:                                # %L377
	movq	%r8, %r12
	cmpq	$61, %rax
	jne	.LBB1_13
# BB#2644:                              # %L10894
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB1_14
# BB#2645:                              # %L1442
	movq	%r12, %r8
	movq	16(%r8), %r15
	movzbl	(%r15), %eax
	cmpq	$74, %rax
	jne	.LBB1_2646
# BB#2647:                              # %L1443
	movq	8(%r15), %rbx
	movl	(%rbx), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-2, %rdx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rdx
	cmpq	$3, %rdx
	ja	.LBB1_2646
# BB#2648:                              # %L1443
	jmpq	*.LJTI1_8(,%rdx,8)
.LBB1_2868:                             # %L11320.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jg	.LBB1_2877
# BB#2869:                              # %L11320.i
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	ja	.LBB1_2646
# BB#2870:                              # %L11320.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_2646
# BB#2871:                              # %L11321.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2872:                              # %if.then1064.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	const_int_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2873:                              # %if.then1268.i12357
	movq	%r14, recog_data+16(%rip)
	movq	$53, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2874:                              # %land.lhs.true1273.i
	movq	recog_data+16(%rip), %rax
	movzbl	8(%rax), %eax
	cmpq	$128, %rax
	je	.LBB1_2646
# BB#2875:                              # %land.lhs.true1273.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2876:                              # %if.then1282.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$225, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2923:                             # %L5853
	movq	16(%r8), %r15
	movzbl	2(%r15), %eax
	cmpq	$4, %rax
	jne	.LBB1_2924
# BB#2928:                              # %L11343
	movq	%r8, %rbx
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB1_2929
# BB#2930:                              # %if.then3229
	movzbl	target_flags+3(%rip), %eax
	movq	%r15, recog_data(%rip)
	movq	$503, %rdx              # imm = 0x1F7
	testq	$2, %rax
	movq	%rbx, %r8
	je	.LBB1_4569
# BB#2931:                              # %if.end3235
	movq	16(%r8), %r15
	jmp	.LBB1_2925
.LBB1_13:                               # %L377
	cmpq	$64, %rax
	jne	.LBB1_14
# BB#2586:                              # %L378
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$2, %rax
	jne	.LBB1_2587
# BB#2608:                              # %L11307
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB1_2615
# BB#2609:                              # %if.then3029
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB1_2610
# BB#2625:                              # %L11309
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$84, %rax
	je	.LBB1_2638
# BB#2626:                              # %L11309
	cmpq	$83, %rax
	je	.LBB1_2633
# BB#2627:                              # %L11309
	addq	$-102, %rax
	andq	%r13, %rax
	cmpq	$17, %rax
	ja	.LBB1_2610
# BB#2628:                              # %L11311
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	ix86_comparison_operator
	testq	%r13, %rax
	je	.LBB1_2610
# BB#2629:                              # %if.then3065
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_2610
# BB#2630:                              # %land.lhs.true3118
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_2610
# BB#2631:                              # %L5569
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2610
# BB#2632:                              # %land.lhs.true3131
	cmpq	$0, 8(%rax)
	movq	$487, %rdx              # imm = 0x1E7
	jne	.LBB1_2610
	jmp	.LBB1_4569
.LBB1_2924:                             # %L5853
	cmpq	$5, %rax
	jne	.LBB1_2925
# BB#2932:                              # %L11344
	movq	%r8, %rbx
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB1_2933
# BB#2934:                              # %if.then3241
	movzbl	target_flags+3(%rip), %eax
	movq	%r15, recog_data(%rip)
	movq	$504, %rdx              # imm = 0x1F8
	testq	$2, %rax
	movq	%rbx, %r8
	jne	.LBB1_4569
# BB#2935:                              # %if.end3247
	movq	16(%r8), %r15
	jmp	.LBB1_2925
.LBB1_2587:                             # %L378
	cmpq	$3, %rax
	jne	.LBB1_15
# BB#2588:                              # %L11305
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_2595
# BB#2589:                              # %if.then2953
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB1_2594
# BB#2590:                              # %if.then2966
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB1_2592
# BB#2591:                              # %if.then2966
	movl	optimize_size(%rip), %eax
	testq	%r14, %rax
	je	.LBB1_2594
.LBB1_2592:                             # %land.lhs.true2980
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$56, %rdx
	jne	.LBB1_4569
# BB#2593:                              # %lor.lhs.false2985
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
.LBB1_2594:                             # %if.end2968
	movq	8(%r12), %r15
	movq	8(%r15), %rbx
.LBB1_2595:                             # %L11306
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	movq	%r12, %r8
	je	.LBB1_16
# BB#2596:                              # %if.then2958
	movq	%rbx, recog_data(%rip)
	movq	16(%r8), %r15
	movq	$3, %rsi
	movq	%r15, %rdi
	movq	%r8, %rbx
	callq	const0_operand
	testq	%r14, %rax
	je	.LBB1_2643
# BB#2597:                              # %if.then3003
	movq	%rbx, %rdi
	movl	reload_completed(%rip), %eax
	movq	%r15, recog_data+8(%rip)
	testq	%rax, %rax
	movq	24(%rsp), %r13          # 8-byte Reload
	je	.LBB1_2604
# BB#2598:                              # %land.lhs.true3010
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB1_2599
# BB#2605:                              # %lor.lhs.false3018
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB1_2606
	jmp	.LBB1_2604
.LBB1_2929:
	movq	%rbx, %r8
	jmp	.LBB1_2925
.LBB1_2933:
	movq	%rbx, %r8
.LBB1_2925:                             # %L5584
	movzbl	(%r15), %eax
	cmpq	$67, %rax
	jne	.LBB1_2926
# BB#3063:                              # %L5850
	movq	8(%r15), %rax
	movq	%rax, recog_data(%rip)
	movq	$502, %rdx              # imm = 0x1F6
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2926:                             # %L5584
	cmpq	$72, %rax
	jne	.LBB1_2927
# BB#2936:                              # %L5585
	movq	%r8, %r12
	movq	8(%r15), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	ix86_comparison_operator
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB1_2938
# BB#2937:                              # %if.then3256
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB1_2938
# BB#2952:                              # %land.lhs.true3273
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB1_2938
# BB#2953:                              # %L5587
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2938
# BB#2954:                              # %land.lhs.true3286
	cmpq	$0, 8(%rax)
	jne	.LBB1_2938
# BB#2955:                              # %L5588
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$59, %rcx
	jne	.LBB1_2956
# BB#2960:                              # %L5598
	movq	24(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB1_2961
# BB#2962:                              # %L5599
	movq	8(%rax), %rax
	movq	%rax, recog_data(%rip)
	movq	$491, %rdx              # imm = 0x1EB
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2927:                             # %sw.epilog3223
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_2814:                             # %L11317.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jg	.LBB1_2823
# BB#2815:                              # %L11317.i
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	ja	.LBB1_2646
# BB#2816:                              # %L11317.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_2646
# BB#2817:                              # %L11318.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2818:                              # %if.then833.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	const_int_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2819:                              # %if.then1037.i
	movq	%r14, recog_data+16(%rip)
	movq	$53, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2820:                              # %land.lhs.true1042.i
	movq	recog_data+16(%rip), %rax
	movzbl	8(%rax), %eax
	cmpq	$32768, %rax            # imm = 0x8000
	je	.LBB1_2646
# BB#2821:                              # %land.lhs.true1042.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2822:                              # %if.then1051.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$219, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2709:                             # %L11314.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB1_2780
# BB#2710:                              # %L11314.i
	cmpq	$74, %rax
	jg	.LBB1_2719
# BB#2711:                              # %L11314.i
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	ja	.LBB1_2646
# BB#2712:                              # %L11314.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_2646
# BB#2713:                              # %L11315.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2714:                              # %if.then312.i12212
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	const_int_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2715:                              # %if.then806.i
	movq	%r14, recog_data+16(%rip)
	movq	$53, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2716:                              # %land.lhs.true811.i12293
	movq	recog_data+16(%rip), %rax
	movl	8(%rax), %eax
	movabsq	$2147483648, %rcx       # imm = 0x80000000
	cmpq	%rcx, %rax
	je	.LBB1_2646
# BB#2717:                              # %land.lhs.true811.i12293
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2718:                              # %if.then820.i12294
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$213, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2649:                             # %L11313.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$132, %rax
	jg	.LBB1_2690
# BB#2650:                              # %L11313.i
	cmpq	$82, %rax
	jg	.LBB1_2660
# BB#2651:                              # %L11313.i
	cmpq	$74, %rax
	jg	.LBB1_2672
# BB#2652:                              # %L11313.i
	addq	$-61, %rax
	andq	%r13, %rax
	cmpq	$5, %rax
	ja	.LBB1_2646
# BB#2653:                              # %L11313.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB1_2646
# BB#2654:                              # %L11312.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2655:                              # %if.then.i12165
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	x86_64_immediate_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2656:                              # %if.then288.i
	movzbl	target_flags+3(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB1_2646
# BB#2657:                              # %land.lhs.true293.i
	movq	$53, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2658:                              # %land.lhs.true293.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2659:                              # %if.then298.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$205, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2877:                             # %L11320.i
	addq	$-75, %rax
	andq	%r13, %rax
	cmpq	$10, %rax
	ja	.LBB1_2646
# BB#2878:                              # %L11320.i
	jmpq	*.LJTI1_9(,%rax,8)
.LBB1_2887:                             # %L1763.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2888:                              # %if.then1104.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2889:                              # %if.then1112.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2890:                              # %land.lhs.true1121.i12341
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2891:                              # %land.lhs.true1126.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2892:                              # %land.lhs.true1129.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2895
# BB#2893:                              # %lor.lhs.false1134.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2894:                              # %lor.lhs.false1134.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2896
	jmp	.LBB1_2646
.LBB1_2823:                             # %L11317.i
	addq	$-75, %rax
	andq	%r13, %rax
	cmpq	$10, %rax
	ja	.LBB1_2646
# BB#2824:                              # %L11317.i
	jmpq	*.LJTI1_10(,%rax,8)
.LBB1_2833:                             # %L1672.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2834:                              # %if.then873.i12307
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2835:                              # %if.then881.i12308
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2836:                              # %land.lhs.true890.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2837:                              # %land.lhs.true895.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2838:                              # %land.lhs.true898.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2841
# BB#2839:                              # %lor.lhs.false903.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2840:                              # %lor.lhs.false903.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2842
	jmp	.LBB1_2646
.LBB1_2780:                             # %L11314.i
	cmpq	$133, %rax
	jne	.LBB1_2646
# BB#2781:                              # %L2875.i
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2782:                              # %if.then651.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	const_int_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2783:                              # %if.then659.i12265
	movq	%r14, recog_data+8(%rip)
	movq	24(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	const_int_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2784:                              # %if.then667.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2785:                              # %land.lhs.true676.i12271
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2786:                              # %land.lhs.true681.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2787:                              # %land.lhs.true684.i12273
	movq	%r8, %rdi
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	shrq	%cl, %rax
	movq	%rax, %rsi
	andq	$255, %rsi
	cmpq	$4, %rsi
	jne	.LBB1_2789
# BB#2788:
	movq	$288, %rdx              # imm = 0x120
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2690:                             # %L11313.i
	cmpq	$133, %rax
	jne	.LBB1_2646
# BB#2691:                              # %L2883.i
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2692:                              # %if.then103.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	const_int_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2693:                              # %if.then111.i
	movq	%r14, recog_data+8(%rip)
	movq	24(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	const_int_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2694:                              # %if.then119.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2695:                              # %land.lhs.true128.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2696:                              # %land.lhs.true133.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_2646
# BB#2697:                              # %land.lhs.true136.i12190
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2698:                              # %land.lhs.true139.i
	movq	recog_data+8(%rip), %rax
	movq	recog_data+16(%rip), %rcx
	movq	8(%rax), %rax
	movq	8(%rcx), %rcx
	addq	%rax, %rcx
	cmpq	$32, %rcx
	jg	.LBB1_2646
# BB#2699:                              # %land.lhs.true177.i
	movq	recog_data(%rip), %rax
	movzbl	2(%rax), %eax
	addq	$-2, %rax
	andq	%r13, %rax
	cmpq	$4, %rax
	movq	$289, %rdx              # imm = 0x121
	jae	.LBB1_2646
	jmp	.LBB1_4569
.LBB1_2599:                             # %land.lhs.true3014
	movl	x86_partial_reg_stall(%rip), %ecx
	andq	%rax, %rcx
	testq	%r14, %rcx
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB1_2601
# BB#2600:                              # %land.lhs.true3014
	movq	%rdx, %rcx
.LBB1_2601:                             # %land.lhs.true3014
	movl	optimize_size(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB1_2603
# BB#2602:                              # %land.lhs.true3014
	movq	%rdx, %rax
.LBB1_2603:                             # %land.lhs.true3014
	orq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_2604
.LBB1_2606:                             # %lor.lhs.false3018
	testq	%r13, %r13
	je	.LBB1_2604
# BB#2607:                              # %if.then3022
	movq	$1, %rax
	movl	%eax, (%r13)
	movq	$57, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2719:                             # %L11314.i
	addq	$-75, %rax
	andq	%r13, %rax
	cmpq	$10, %rax
	ja	.LBB1_2646
# BB#2720:                              # %L11314.i
	jmpq	*.LJTI1_11(,%rax,8)
.LBB1_2729:                             # %L1581.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2730:                              # %if.then356.i12222
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2731:                              # %if.then364.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2732:                              # %land.lhs.true373.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2733:                              # %land.lhs.true378.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2734:                              # %land.lhs.true381.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %ecx
	movq	recog_data+16(%rip), %rax
	cmpq	$66, %rcx
	jne	.LBB1_2736
# BB#2735:                              # %lor.lhs.false386.i
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	je	.LBB1_2646
.LBB1_2736:                             # %land.lhs.true391.i
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	movq	%r8, %rbx
	callq	pic_symbolic_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	jne	.LBB1_2646
# BB#2737:                              # %land.lhs.true391.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2738:                              # %if.then397.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$214, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2660:                             # %L11313.i
	movq	%r8, %r12
	cmpq	$83, %rax
	je	.LBB1_2684
# BB#2661:                              # %L11313.i
	cmpq	$84, %rax
	jne	.LBB1_2662
# BB#2700:                              # %L3232.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_2646
# BB#2701:                              # %if.then208.i12201
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	x86_64_general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2702:                              # %if.then216.i12202
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2703:                              # %land.lhs.true225.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2704:                              # %land.lhs.true230.i12205
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_2646
# BB#2705:                              # %land.lhs.true233.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2706:                              # %land.lhs.true236.i12207
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	movq	%r8, %rbx
	callq	ix86_binary_operator_ok
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2707:                              # %land.lhs.true236.i12207
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2708:                              # %if.then241.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$309, %rdx              # imm = 0x135
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2638:                             # %L3412
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_2610
# BB#2639:                              # %L3413
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2610
# BB#2640:                              # %if.then3103
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rcx          # 8-byte Reload
	testq	%rcx, %rcx
	je	.LBB1_2642
# BB#2641:                              # %if.then3107
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$321, %rdx              # imm = 0x141
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2633:                             # %L3025
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB1_2610
# BB#2634:                              # %L3026
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2610
# BB#2635:                              # %if.then3081
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rcx          # 8-byte Reload
	testq	%rcx, %rcx
	je	.LBB1_2637
# BB#2636:                              # %if.then3085
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$299, %rdx              # imm = 0x12B
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2672:                             # %L11313.i
	cmpq	$75, %rax
	jne	.LBB1_2646
# BB#2673:                              # %L1461.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2674:                              # %if.then22.i12172
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	x86_64_general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2675:                              # %if.then30.i12174
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2676:                              # %land.lhs.true.i12176
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2677:                              # %land.lhs.true41.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_2646
# BB#2678:                              # %land.lhs.true43.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2679:                              # %land.lhs.true46.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %ecx
	movq	recog_data+16(%rip), %rax
	cmpq	$66, %rcx
	jne	.LBB1_2681
# BB#2680:                              # %lor.lhs.false.i12182
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	je	.LBB1_2646
.LBB1_2681:                             # %land.lhs.true55.i
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	movq	%r8, %rbx
	callq	pic_symbolic_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	jne	.LBB1_2646
# BB#2682:                              # %land.lhs.true55.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2683:                              # %if.then61.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$206, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2956:                             # %L5588
	cmpq	$67, %rcx
	jne	.LBB1_2957
# BB#2958:                              # %L5589
	movq	8(%rax), %rax
	movq	%rax, recog_data(%rip)
	movq	24(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	movq	$490, %rdx              # imm = 0x1EA
	je	.LBB1_4569
# BB#2959:                              # %if.end3316
	movq	8(%r15), %rbx
	jmp	.LBB1_2938
.LBB1_2684:                             # %L2802.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_2646
# BB#2685:                              # %if.then68.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	x86_64_szext_nonmemory_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2686:                              # %if.then76.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2687:                              # %land.lhs.true85.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2688:                              # %land.lhs.true90.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_2646
# BB#2689:                              # %land.lhs.true93.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$280, %rdx              # imm = 0x118
	jne	.LBB1_4569
	jmp	.LBB1_2646
.LBB1_2662:                             # %L11313.i
	cmpq	$85, %rax
	movq	%r12, %r8
	jne	.LBB1_2646
# BB#2663:                              # %L3502.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2664:                              # %if.then248.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	x86_64_general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2665:                              # %if.then256.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2666:                              # %land.lhs.true265.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2667:                              # %land.lhs.true270.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_2646
# BB#2668:                              # %land.lhs.true273.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2669:                              # %land.lhs.true276.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	movq	%r8, %rbx
	callq	ix86_binary_operator_ok
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2670:                              # %land.lhs.true276.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2671:                              # %if.then281.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$327, %rdx              # imm = 0x147
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2961:                             # %if.end3327
	movq	8(%r15), %rbx
	jmp	.LBB1_2938
.LBB1_2879:                             # %L1730.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2880:                              # %if.then1072.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2881:                              # %if.then1080.i
	movq	%r14, recog_data+8(%rip)
	movq	$56, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2882:                              # %land.lhs.true1085.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2885
# BB#2883:                              # %lor.lhs.false1090.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2884:                              # %lor.lhs.false1090.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2886
	jmp	.LBB1_2646
.LBB1_2897:                             # %L2823.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2898:                              # %if.then1148.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	nonmemory_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2899:                              # %if.then1156.i12349
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2900:                              # %land.lhs.true1165.i12351
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2901:                              # %land.lhs.true1170.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$283, %rdx              # imm = 0x11B
	jne	.LBB1_4569
	jmp	.LBB1_2646
.LBB1_2902:                             # %L3457.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2903:                              # %if.then1180.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2904:                              # %if.then1188.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2905:                              # %land.lhs.true1197.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2906:                              # %land.lhs.true1202.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2907:                              # %land.lhs.true1205.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2910
# BB#2908:                              # %lor.lhs.false1210.i12355
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2909:                              # %lor.lhs.false1210.i12355
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2911
	jmp	.LBB1_2646
.LBB1_2912:                             # %L3728.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2913:                              # %if.then1224.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2914:                              # %if.then1232.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2915:                              # %land.lhs.true1241.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2916:                              # %land.lhs.true1246.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2917:                              # %land.lhs.true1249.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2920
# BB#2918:                              # %lor.lhs.false1254.i12356
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2919:                              # %lor.lhs.false1254.i12356
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2921
	jmp	.LBB1_2646
.LBB1_2825:                             # %L1639.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2826:                              # %if.then841.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2827:                              # %if.then849.i
	movq	%r14, recog_data+8(%rip)
	movq	$56, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2828:                              # %land.lhs.true854.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2831
# BB#2829:                              # %lor.lhs.false859.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2830:                              # %lor.lhs.false859.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2832
	jmp	.LBB1_2646
.LBB1_2843:                             # %L2816.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2844:                              # %if.then917.i12318
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	nonmemory_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2845:                              # %if.then925.i12321
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2846:                              # %land.lhs.true934.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2847:                              # %land.lhs.true939.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	movq	$282, %rdx              # imm = 0x11A
	jne	.LBB1_4569
	jmp	.LBB1_2646
.LBB1_2848:                             # %L3382.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2849:                              # %if.then949.i12325
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2850:                              # %if.then957.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2851:                              # %land.lhs.true966.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2852:                              # %land.lhs.true971.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2853:                              # %land.lhs.true974.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2856
# BB#2854:                              # %lor.lhs.false979.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2855:                              # %lor.lhs.false979.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2857
	jmp	.LBB1_2646
.LBB1_2858:                             # %L3652.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2859:                              # %if.then993.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2860:                              # %if.then1001.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2861:                              # %land.lhs.true1010.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2862:                              # %land.lhs.true1015.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2863:                              # %land.lhs.true1018.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2866
# BB#2864:                              # %lor.lhs.false1023.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2865:                              # %lor.lhs.false1023.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2867
	jmp	.LBB1_2646
.LBB1_2957:                             # %sw.epilog3301
	movq	8(%r15), %rbx
.LBB1_2938:                             # %L5617
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	comparison_operator
	testq	%r13, %rax
	je	.LBB1_2963
# BB#2939:                              # %if.then3261
	movq	%rbx, recog_data(%rip)
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2963
# BB#2940:                              # %if.then3340
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2944
# BB#2941:                              # %if.then3351
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$59, %rcx
	jne	.LBB1_2942
# BB#2977:                              # %L5690
	movq	24(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB1_2943
# BB#2978:                              # %L5691
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movl	ix86_arch(%rip), %ecx
	movl	target_flags(%rip), %edx
	movl	x86_cmove(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	movq	%rdx, %rax
	andq	$327680, %rax           # imm = 0x50000
	orq	%rsi, %rax
	testq	%r13, %rax
	je	.LBB1_2990
# BB#2979:                              # %L5691
	movq	%rdx, %rax
	andq	$1, %rax
	je	.LBB1_2990
# BB#2980:                              # %land.lhs.true3496
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB1_2982
# BB#2981:                              # %land.lhs.true3499
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	je	.LBB1_2990
.LBB1_2982:                             # %lor.lhs.false3505
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	testq	$262144, %rdx           # imm = 0x40000
	je	.LBB1_2984
# BB#2983:                              # %lor.lhs.false3505
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	andq	%r13, %rcx
	cmpq	$1048576, %rcx          # imm = 0x100000
	je	.LBB1_2990
.LBB1_2984:                             # %land.lhs.true3514
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_2990
# BB#2985:                              # %land.lhs.true3514
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB1_2990
# BB#2986:                              # %land.lhs.true3538
	movl	(%r14), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB1_2990
# BB#2987:                              # %land.lhs.true3548
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	callq	ix86_fp_jump_nontrivial_p
	testq	%rax, %rax
	je	.LBB1_2990
# BB#2988:                              # %land.lhs.true3548
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2990
# BB#2989:                              # %if.then3555
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$495, %rdx              # imm = 0x1EF
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2942:                             # %if.then3351
	cmpq	$67, %rcx
	jne	.LBB1_2943
# BB#2964:                              # %L5621
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB1_2943
# BB#2965:                              # %land.lhs.true3392
	movl	ix86_arch(%rip), %ecx
	movl	target_flags(%rip), %edx
	movl	x86_cmove(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	movq	%rdx, %rax
	andq	$327680, %rax           # imm = 0x50000
	orq	%rsi, %rax
	testq	%r13, %rax
	je	.LBB1_2943
# BB#2966:                              # %land.lhs.true3392
	movq	%rdx, %rax
	andq	$1, %rax
	je	.LBB1_2943
# BB#2967:                              # %land.lhs.true3402
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB1_2969
# BB#2968:                              # %land.lhs.true3405
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	je	.LBB1_2943
.LBB1_2969:                             # %lor.lhs.false3411
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	testq	$262144, %rdx           # imm = 0x40000
	je	.LBB1_2971
# BB#2970:                              # %lor.lhs.false3411
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	andq	%r13, %rcx
	cmpq	$1048576, %rcx          # imm = 0x100000
	je	.LBB1_2943
.LBB1_2971:                             # %land.lhs.true3420
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_2943
# BB#2972:                              # %land.lhs.true3420
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB1_2943
# BB#2973:                              # %land.lhs.true3444
	movl	(%r14), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB1_2943
# BB#2974:                              # %land.lhs.true3454
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	testq	%rax, %rax
	je	.LBB1_2943
# BB#2975:                              # %land.lhs.true3454
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2943
# BB#2976:                              # %if.then3461
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$492, %rdx              # imm = 0x1EC
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2990:                             # %if.end3556
	movq	16(%r12), %r15
.LBB1_2943:                             # %sw.epilog3375
	movq	8(%r15), %rax
	movq	16(%rax), %r14
.LBB1_2944:                             # %L5642
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2948
# BB#2945:                              # %if.then3356
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$59, %rcx
	jne	.LBB1_2946
# BB#3017:                              # %L5714
	movq	24(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB1_2947
# BB#3018:                              # %L5715
	movq	8(%rax), %rcx
	movl	target_flags(%rip), %eax
	movq	%rcx, recog_data+24(%rip)
	testq	$1, %rax
	je	.LBB1_3027
# BB#3019:                              # %land.lhs.true3747
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_3021
# BB#3020:                              # %land.lhs.true3750
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB1_3023
.LBB1_3021:                             # %lor.lhs.false3756
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_3027
# BB#3022:                              # %land.lhs.true3759
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB1_3027
.LBB1_3023:                             # %land.lhs.true3765
	movl	(%r14), %edx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB1_3027
# BB#3024:                              # %land.lhs.true3775
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	callq	ix86_fp_jump_nontrivial_p
	testq	%rax, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_3026
# BB#3025:                              # %land.lhs.true3775
	testq	%rcx, %rcx
	je	.LBB1_3026
# BB#4589:                              # %if.then3782
	movq	$2, %rax
	movl	%eax, (%rcx)
	movq	$496, %rdx              # imm = 0x1F0
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2946:                             # %if.then3356
	cmpq	$67, %rcx
	jne	.LBB1_2947
# BB#2991:                              # %L5644
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB1_2947
# BB#2992:                              # %L11345
	movl	target_flags(%rip), %eax
	testq	$1, %rax
	je	.LBB1_3001
# BB#2993:                              # %land.lhs.true3601
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_2995
# BB#2994:                              # %land.lhs.true3604
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB1_2997
.LBB1_2995:                             # %lor.lhs.false3610
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_3001
# BB#2996:                              # %land.lhs.true3613
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB1_3001
.LBB1_2997:                             # %land.lhs.true3619
	movl	(%r14), %edx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB1_3001
# BB#2998:                              # %land.lhs.true3629
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	callq	ix86_fp_jump_nontrivial_p
	testq	%rax, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_3000
# BB#2999:                              # %land.lhs.true3629
	testq	%rcx, %rcx
	je	.LBB1_3000
# BB#4587:                              # %if.then3636
	movq	$2, %rax
	movl	%eax, (%rcx)
	movq	$493, %rdx              # imm = 0x1ED
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2721:                             # %L1535.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2722:                              # %if.then320.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2723:                              # %if.then328.i
	movq	%r14, recog_data+8(%rip)
	movq	$56, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2724:                              # %land.lhs.true333.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %ecx
	movq	recog_data+16(%rip), %rax
	cmpq	$66, %rcx
	jne	.LBB1_2726
# BB#2725:                              # %lor.lhs.false338.i
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	je	.LBB1_2646
.LBB1_2726:                             # %land.lhs.true343.i
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	movq	%r8, %rbx
	callq	pic_symbolic_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	jne	.LBB1_2646
# BB#2727:                              # %land.lhs.true343.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2646
# BB#2728:                              # %if.then349.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$211, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2739:                             # %L2809.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_2646
# BB#2740:                              # %L11338.i
	movq	%r8, %r12
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB1_2741
# BB#2746:                              # %L2831.i
	movq	8(%r14), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	ext_register_operand
	movq	%r13, %rcx
	testq	%rcx, %rax
	movq	%r12, %r8
	movq	%rcx, %rdx
	je	.LBB1_2646
# BB#2747:                              # %if.then423.i12236
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, recog_data(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2748:                              # %land.lhs.true432.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2646
# BB#2749:                              # %L2833.i
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2750:                              # %land.lhs.true445.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2646
# BB#2751:                              # %L2844.i
	movq	%rdx, %r13
	movq	%r8, %r12
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_2752
# BB#2757:                              # %L11339.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB1_2758
# BB#2772:                              # %L2867.i
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB1_2752
# BB#2773:                              # %if.then549.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2752
# BB#2774:                              # %land.lhs.true558.i12247
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2752
# BB#2775:                              # %L2869.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2752
# BB#2776:                              # %land.lhs.true571.i12249
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB1_2752
# BB#2777:                              # %L2870.i
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	movq	%r13, %r14
	jne	.LBB1_2771
# BB#2778:                              # %land.lhs.true584.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2771
# BB#2779:                              # %land.lhs.true589.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%r14, %rax
	movq	$287, %rdx              # imm = 0x11F
	jne	.LBB1_4569
	jmp	.LBB1_2771
.LBB1_2794:                             # %L3337.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2795:                              # %if.then718.i12279
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2796:                              # %if.then726.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2797:                              # %land.lhs.true735.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2798:                              # %land.lhs.true740.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2799:                              # %land.lhs.true743.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2802
# BB#2800:                              # %lor.lhs.false748.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2801:                              # %lor.lhs.false748.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2803
	jmp	.LBB1_2646
.LBB1_2804:                             # %L3607.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2805:                              # %if.then762.i12286
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	general_operand
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2806:                              # %if.then770.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2807:                              # %land.lhs.true779.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2808:                              # %land.lhs.true784.i12291
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r13, %rax
	je	.LBB1_2646
# BB#2809:                              # %land.lhs.true787.i
	movq	%r8, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_2812
# BB#2810:                              # %lor.lhs.false792.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	je	.LBB1_2646
# BB#2811:                              # %lor.lhs.false792.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB1_2813
	jmp	.LBB1_2646
.LBB1_2642:                             # %if.end3108
	movq	16(%r12), %r14
	jmp	.LBB1_2610
.LBB1_2637:                             # %if.end3086
	movq	16(%r12), %r14
.LBB1_2610:                             # %L415
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB1_2614
# BB#2611:                              # %if.then3048
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r13, %rdx
	jne	.LBB1_2614
# BB#2612:                              # %land.lhs.true3141
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$62, %rdx
	jne	.LBB1_4569
# BB#2613:                              # %lor.lhs.false3146
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
.LBB1_2614:                             # %if.end3050
	movq	8(%r12), %r15
	movq	8(%r15), %rbx
.LBB1_2615:                             # %L11308
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	q_regs_operand
	testq	%r13, %rax
	movq	%r12, %r8
	je	.LBB1_16
# BB#2616:                              # %if.then3034
	movq	%rbx, recog_data(%rip)
	movq	16(%r8), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	movq	%r8, %rbx
	callq	const0_operand
	testq	%r13, %rax
	je	.LBB1_2643
# BB#2617:                              # %if.then3164
	movq	%r13, %rsi
	movq	%rbx, %rdi
	movl	reload_completed(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	testq	%rax, %rax
	movq	24(%rsp), %r13          # 8-byte Reload
	je	.LBB1_2604
# BB#2618:                              # %land.lhs.true3171
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%rsi, %rdx
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB1_2620
# BB#2619:                              # %land.lhs.true3171
	movq	%rdx, %rcx
.LBB1_2620:                             # %land.lhs.true3171
	movl	optimize_size(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB1_2622
# BB#2621:                              # %land.lhs.true3171
	movq	%rdx, %rax
.LBB1_2622:                             # %land.lhs.true3171
	orq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB1_2604
# BB#2623:                              # %land.lhs.true3171
	testq	%r13, %r13
	je	.LBB1_2604
# BB#2624:                              # %if.then3179
	movq	$1, %rax
	movl	%eax, (%r13)
	movq	$63, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2604:                             # %if.end3023
	movq	%rdi, %r8
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_2643:                             # %if.end3005
	movq	8(%rbx), %r15
	movq	%rbx, %r8
	jmp	.LBB1_16
.LBB1_3026:                             # %land.lhs.true3775.L5740_crit_edge
	movl	target_flags(%rip), %eax
.LBB1_3027:                             # %L5740
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_3029
# BB#3028:                              # %land.lhs.true3786
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB1_3031
.LBB1_3029:                             # %lor.lhs.false3792
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_3035
# BB#3030:                              # %land.lhs.true3795
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB1_3035
.LBB1_3031:                             # %land.lhs.true3801
	movq	recog_data+16(%rip), %rdx
	movl	(%rdx), %edx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB1_3035
# BB#3032:                              # %land.lhs.true3811
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	callq	ix86_fp_jump_nontrivial_p
	testq	%rax, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_3034
# BB#3033:                              # %land.lhs.true3811
	testq	%rcx, %rcx
	je	.LBB1_3034
# BB#4590:                              # %if.then3818
	movq	$2, %rax
	movl	%eax, (%rcx)
	movq	$497, %rdx              # imm = 0x1F1
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_3034:                             # %land.lhs.true3811.L5793_crit_edge
	movl	target_flags(%rip), %eax
.LBB1_3035:                             # %L5793
	testq	$1, %rax
	je	.LBB1_3043
# BB#3036:                              # %land.lhs.true3822
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-15, %rdx
	andq	%r13, %rdx
	cmpq	$1, %rdx
	ja	.LBB1_3043
# BB#3037:                              # %land.lhs.true3834
	movq	recog_data+16(%rip), %rcx
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB1_3043
# BB#3038:                              # %land.lhs.true3844
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	callq	ix86_use_fcomi_compare
	testq	%r13, %rax
	jne	.LBB1_3043
# BB#3039:                              # %land.lhs.true3850
	movq	recog_data(%rip), %rax
	movq	recog_data+8(%rip), %rsi
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rax), %edi
	callq	ix86_cc_mode
	andq	%r13, %rax
	cmpq	$57, %rax
	jne	.LBB1_3043
# BB#3040:                              # %land.lhs.true3858
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	movq	%r12, %rbx
	callq	ix86_fp_jump_nontrivial_p
	movq	%rbx, %r12
	testq	%rax, %rax
	je	.LBB1_3043
# BB#3041:                              # %land.lhs.true3858
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_3043
# BB#3042:                              # %if.then3865
	movq	$3, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$499, %rdx              # imm = 0x1F3
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_3043:                             # %if.end3866
	movq	16(%r12), %r15
.LBB1_2947:                             # %sw.epilog3574
	movq	8(%r15), %rax
	movq	16(%rax), %r14
.LBB1_2948:                             # %L5816
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2963
# BB#2949:                              # %if.then3361
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$59, %rcx
	jne	.LBB1_2950
# BB#3053:                              # %L5844
	movq	24(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	movq	%r12, %r8
	jne	.LBB1_3054
# BB#3055:                              # %L5845
	movq	8(%rax), %rax
	movzbl	target_flags(%rip), %ecx
	movq	%rax, recog_data+24(%rip)
	testq	$1, %rcx
	je	.LBB1_3062
# BB#3056:                              # %land.lhs.true3964
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_3062
# BB#3057:                              # %land.lhs.true3964
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB1_3062
# BB#3058:                              # %land.lhs.true3988
	movl	(%r14), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB1_3062
# BB#3059:                              # %land.lhs.true3998
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	movq	%r8, %rbx
	callq	ix86_fp_jump_nontrivial_p
	movq	%rbx, %r8
	testq	%rax, %rax
	je	.LBB1_3062
# BB#3060:                              # %land.lhs.true3998
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_3062
# BB#3061:                              # %if.then4005
	movq	$3, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$501, %rdx              # imm = 0x1F5
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2963:                             # %if.end3263
	movq	%r12, %r8
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_2950:                             # %if.then3361
	cmpq	$67, %rcx
	movq	%r12, %r8
	jne	.LBB1_2951
# BB#3044:                              # %L5818
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%r15), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB1_3052
# BB#3045:                              # %land.lhs.true3898
	movzbl	target_flags(%rip), %eax
	testq	$1, %rax
	je	.LBB1_3052
# BB#3046:                              # %land.lhs.true3901
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB1_3052
# BB#3047:                              # %land.lhs.true3901
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB1_3052
# BB#3048:                              # %land.lhs.true3925
	movl	(%r14), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB1_3052
# BB#3049:                              # %land.lhs.true3935
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	movq	%r8, %rbx
	callq	ix86_fp_jump_nontrivial_p
	movq	%rbx, %r8
	testq	%rax, %rax
	je	.LBB1_3052
# BB#3050:                              # %land.lhs.true3935
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_3052
# BB#3051:                              # %if.then3942
	movq	$3, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$500, %rdx              # imm = 0x1F4
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_3054:                             # %if.end3954
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_2951:                             # %sw.epilog3884
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_3052:                             # %if.end3943
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_3062:                             # %if.end4006
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_2469:                             # %if.end2187
	movq	8(%r15), %rbx
	jmp	.LBB1_2373
.LBB1_2895:                             # %land.lhs.true1139.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2896:                             # %if.then1141.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$226, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2841:                             # %land.lhs.true908.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2842:                             # %if.then910.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$220, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2789:                             # %lor.lhs.false690.i
	movzbl	target_flags+3(%rip), %edx
	movq	$1, %rcx
	shrq	%cl, %rdx
	cmpq	$5, %rsi
	jne	.LBB1_2790
# BB#2791:                              # %lor.lhs.false690.i
	movabsq	$1, %rcx
	jmp	.LBB1_2792
.LBB1_2885:                             # %land.lhs.true1095.i12339
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2886:                             # %if.then1097.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$224, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2910:                             # %land.lhs.true1215.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2911:                             # %if.then1217.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$324, %rdx              # imm = 0x144
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2920:                             # %land.lhs.true1259.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2921:                             # %if.then1261.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$341, %rdx              # imm = 0x155
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2831:                             # %land.lhs.true864.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2832:                             # %if.then866.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$218, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2856:                             # %land.lhs.true984.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2857:                             # %if.then986.i12328
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$319, %rdx              # imm = 0x13F
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2866:                             # %land.lhs.true1028.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2867:                             # %if.then1030.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$337, %rdx              # imm = 0x151
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_3000:                             # %land.lhs.true3629.L11346_crit_edge
	movl	target_flags(%rip), %eax
.LBB1_3001:                             # %L11346
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB1_3003
# BB#3002:                              # %land.lhs.true3640
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB1_3005
.LBB1_3003:                             # %lor.lhs.false3646
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB1_3009
# BB#3004:                              # %land.lhs.true3649
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB1_3009
.LBB1_3005:                             # %land.lhs.true3655
	movq	recog_data+16(%rip), %rdx
	movl	(%rdx), %edx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB1_3009
# BB#3006:                              # %land.lhs.true3665
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	callq	ix86_fp_jump_nontrivial_p
	testq	%rax, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB1_3008
# BB#3007:                              # %land.lhs.true3665
	testq	%rcx, %rcx
	je	.LBB1_3008
# BB#4588:                              # %if.then3672
	movq	$2, %rax
	movl	%eax, (%rcx)
	movq	$494, %rdx              # imm = 0x1EE
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2741:                             # %if.end412.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r13, %rcx
	testq	%rcx, %rax
	movq	%r12, %r8
	movq	%rcx, %r12
	je	.LBB1_2646
# BB#2742:                              # %if.then415.i12229
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonmemory_operand
	movq	%r14, %r8
	testq	%r12, %rax
	je	.LBB1_2646
# BB#2743:                              # %if.then627.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2744:                              # %land.lhs.true636.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2745:                              # %land.lhs.true641.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r12, %rax
	movq	$281, %rdx              # imm = 0x119
	jne	.LBB1_4569
	jmp	.LBB1_2646
.LBB1_2758:                             # %L11339.i
	cmpq	$121, %rax
	jne	.LBB1_2752
# BB#2759:                              # %L2845.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$131072, %rax           # imm = 0x20000
	jne	.LBB1_2752
# BB#2760:                              # %L11341.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB1_2766
# BB#2761:                              # %if.then483.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	movq	%r13, %r14
	jne	.LBB1_2765
# BB#2762:                              # %land.lhs.true497.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2765
# BB#2763:                              # %land.lhs.true502.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB1_2765
# BB#2764:                              # %land.lhs.true505.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%r14, %rax
	movq	$285, %rdx              # imm = 0x11D
	jne	.LBB1_4569
.LBB1_2765:                             # %if.end509.i
	movq	%r14, %r13
	movq	%rcx, %r12
	movq	8(%r15), %rax
	movq	16(%rax), %rbx
	movq	8(%rbx), %r14
.LBB1_2766:                             # %L11342.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_2752
# BB#2767:                              # %if.then488.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	movq	%r13, %r14
	jne	.LBB1_2771
# BB#2768:                              # %land.lhs.true525.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2771
# BB#2769:                              # %land.lhs.true530.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB1_2771
# BB#2770:                              # %land.lhs.true533.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%r14, %rax
	movq	$286, %rdx              # imm = 0x11E
	jne	.LBB1_4569
.LBB1_2771:                             # %if.end537.i
	movq	%r14, %r13
	movq	%rcx, %r12
	movq	8(%r15), %rax
	movq	16(%rax), %rbx
.LBB1_2752:                             # %L2834.i
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	movq	%r13, %r14
	testq	%r14, %rax
	movq	%r12, %r8
	je	.LBB1_2646
# BB#2753:                              # %if.then463.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_2646
# BB#2754:                              # %land.lhs.true606.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_2646
# BB#2755:                              # %land.lhs.true611.i12252
	movq	8(%rbx), %rax
	cmpq	$255, %rax
	ja	.LBB1_2646
# BB#2756:                              # %land.lhs.true617.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	%r8, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %r8
	testq	%r14, %rax
	movq	$284, %rdx              # imm = 0x11C
	jne	.LBB1_4569
	jmp	.LBB1_2646
.LBB1_2802:                             # %land.lhs.true753.i12282
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2803:                             # %if.then755.i12283
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$316, %rdx              # imm = 0x13C
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2812:                             # %land.lhs.true797.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	movq	%rcx, %r8
	je	.LBB1_2646
.LBB1_2813:                             # %if.then799.i12292
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$334, %rdx              # imm = 0x14E
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2790:
	movabsq	$0, %rcx
.LBB1_2792:                             # %lor.lhs.false690.i
	testq	%rcx, %rdx
	jne	.LBB1_2793
# BB#2922:                              # %lor.lhs.false690.i
	andq	$254, %rax
	cmpq	$2, %rax
	movq	%rdi, %r8
	movq	$288, %rdx              # imm = 0x120
	je	.LBB1_4569
.LBB1_2646:                             # %if.end3197
	movq	8(%r8), %r15
	movq	%r8, %r12
.LBB1_14:                               # %L1333
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB1_15
# BB#3065:                              # %if.then31
	movq	%r15, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %rbx
	movzbl	(%rbx), %eax
	cmpq	$75, %rax
	jne	.LBB1_3064
# BB#3066:                              # %L1335
	movq	8(%rbx), %r12
	movzbl	(%r12), %eax
	cmpq	$75, %rax
	jne	.LBB1_3067
# BB#3069:                              # %L1370
	movq	%r8, 8(%rsp)            # 8-byte Spill
	movq	8(%r12), %r15
	movzbl	(%r15), %eax
	cmpq	$78, %rax
	jne	.LBB1_3070
# BB#3083:                              # %L1371
	movq	8(%r15), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_3095
# BB#3084:                              # %if.then4058
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	const248_operand
	testq	%r13, %rax
	je	.LBB1_3095
# BB#3085:                              # %if.then4069
	movq	%r14, recog_data+16(%rip)
	movq	16(%r12), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_3095
# BB#3086:                              # %if.then4080
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB1_3095
# BB#3087:                              # %if.then4091
	movq	%rbx, recog_data+32(%rip)
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	shrq	%cl, %rax
	movq	%rax, %rcx
	andq	$254, %rcx
	cmpq	$2, %rcx
	movq	8(%rsp), %r8            # 8-byte Reload
	je	.LBB1_3090
# BB#3088:                              # %lor.lhs.false4108
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB1_3094
# BB#3089:                              # %lor.lhs.false4108
	movq	%rax, %rcx
	andq	$255, %rcx
	cmpq	$4, %rcx
	jne	.LBB1_3094
.LBB1_3090:                             # %land.lhs.true4117
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_3092
# BB#3091:                              # %land.lhs.true4117
	movl	optimize_size(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB1_3094
.LBB1_3092:                             # %land.lhs.true4123
	movq	recog_data+8(%rip), %rcx
	movzbl	2(%rcx), %ecx
	andq	$255, %rax
	cmpq	%rcx, %rax
	jne	.LBB1_3094
# BB#3093:                              # %land.lhs.true4133
	movq	recog_data+24(%rip), %rcx
	movzbl	2(%rcx), %ecx
	movq	$200, %rdx
	cmpq	%rcx, %rax
	je	.LBB1_4569
.LBB1_3094:                             # %if.end4144
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_15:
	movq	%r12, %r8
	jmp	.LBB1_16
.LBB1_3064:                             # %if.end4021
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_3067:                             # %L1335
	cmpq	$78, %rax
	jne	.LBB1_3068
# BB#3096:                              # %L1353
	movq	%r8, %r15
	movq	8(%r12), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_4591
# BB#3097:                              # %if.then4242
	movq	%r14, recog_data+8(%rip)
	movq	16(%r12), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	const248_operand
	testq	%r13, %rax
	je	.LBB1_4591
# BB#3098:                              # %if.then4253
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB1_4591
# BB#3099:                              # %if.then4264
	movq	%rbx, recog_data+24(%rip)
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	shrq	%cl, %rax
	movq	%rax, %rcx
	andq	$254, %rcx
	cmpq	$2, %rcx
	movq	%r15, %r8
	je	.LBB1_3102
# BB#3100:                              # %lor.lhs.false4281
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB1_3107
# BB#3101:                              # %lor.lhs.false4281
	movq	%rax, %rcx
	andq	$255, %rcx
	cmpq	$4, %rcx
	jne	.LBB1_3107
.LBB1_3102:                             # %land.lhs.true4290
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_3104
# BB#3103:                              # %land.lhs.true4290
	movl	optimize_size(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB1_3107
.LBB1_3104:                             # %land.lhs.true4296
	movq	recog_data+8(%rip), %rcx
	movzbl	2(%rcx), %ecx
	andq	$255, %rax
	cmpq	%rcx, %rax
	jne	.LBB1_3107
# BB#3105:                              # %land.lhs.true4306
	movzbl	2(%rbx), %ecx
	cmpq	%rcx, %rax
	movq	$198, %rdx
	je	.LBB1_4569
# BB#3106:                              # %land.lhs.true4306
	testq	%rcx, %rcx
	je	.LBB1_4569
.LBB1_3107:                             # %if.end4323
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_3070:                             # %if.end4044
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_3095
# BB#3071:                              # %if.then4047
	movq	%r15, recog_data+8(%rip)
	movq	16(%r12), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB1_3095
# BB#3072:                              # %if.then4153
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB1_3095
# BB#3073:                              # %if.then4164
	movq	%rbx, recog_data+24(%rip)
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	shrq	%cl, %rax
	movq	%rax, %rcx
	andq	$254, %rcx
	cmpq	$2, %rcx
	movq	8(%rsp), %r8            # 8-byte Reload
	je	.LBB1_3076
# BB#3074:                              # %lor.lhs.false4181
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB1_3082
# BB#3075:                              # %lor.lhs.false4181
	movq	%rax, %rcx
	andq	$255, %rcx
	cmpq	$4, %rcx
	jne	.LBB1_3082
.LBB1_3076:                             # %land.lhs.true4190
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	je	.LBB1_3078
# BB#3077:                              # %land.lhs.true4190
	movl	optimize_size(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB1_3082
.LBB1_3078:                             # %land.lhs.true4196
	movq	recog_data+8(%rip), %rcx
	movzbl	2(%rcx), %ecx
	andq	$255, %rax
	cmpq	%rcx, %rax
	jne	.LBB1_3082
# BB#3079:                              # %land.lhs.true4206
	movq	recog_data+16(%rip), %rcx
	movzbl	2(%rcx), %ecx
	cmpq	%rcx, %rax
	jne	.LBB1_3082
# BB#3080:                              # %land.lhs.true4216
	movzbl	2(%rbx), %ecx
	cmpq	%rcx, %rax
	movq	$196, %rdx
	je	.LBB1_4569
# BB#3081:                              # %land.lhs.true4216
	testq	%rcx, %rcx
	je	.LBB1_4569
.LBB1_3082:                             # %if.end4233
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_3095:                             # %if.end4049
	movq	8(%rsp), %r8            # 8-byte Reload
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_3068:                             # %sw.epilog4033
	movq	8(%r8), %r15
	jmp	.LBB1_16
.LBB1_4591:                             # %if.end4244
	movq	%r15, %r8
	movq	8(%r8), %r15
.LBB1_16:                               # %L7516
	movq	%r15, recog_data(%rip)
	movq	16(%r8), %rbx
	movzbl	(%rbx), %eax
	cmpq	$50, %rax
	jne	.LBB1_17
# BB#3108:                              # %L7518
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131138, %rcx           # imm = 0x20042
	jne	.LBB1_17
# BB#3109:                              # %L7519
	movq	8(%rax), %r14
	movzbl	2(%r14), %eax
	cmpq	$5, %rax
	jne	.LBB1_3110
# BB#3116:                              # %L11349
	movq	%r8, %r12
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	constant_call_address_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB1_3121
# BB#3117:                              # %if.then4410
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB1_3120
# BB#3118:                              # %if.then4426
	movzbl	target_flags+3(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$654, %rdx              # imm = 0x28E
	testq	$2, %rax
	jne	.LBB1_4569
# BB#3119:                              # %if.end4438
	movq	16(%r12), %rbx
.LBB1_3120:                             # %if.end4428
	movq	8(%rbx), %rax
	movq	8(%rax), %r14
.LBB1_3121:                             # %L11351
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	call_insn_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_17
# BB#3122:                              # %if.then4415
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, recog_data+16(%rip)
	movq	$656, %rdx              # imm = 0x290
	testq	$2, %rcx
	jne	.LBB1_4569
	jmp	.LBB1_17
.LBB1_3110:                             # %L7519
	cmpq	$4, %rax
	jne	.LBB1_17
# BB#3111:                              # %L11348
	movq	%r8, %r12
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	constant_call_address_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB1_3114
# BB#3112:                              # %if.then4369
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, recog_data+16(%rip)
	movq	$653, %rdx              # imm = 0x28D
	testq	$2, %rcx
	je	.LBB1_4569
# BB#3113:                              # %if.end4387
	movq	16(%r12), %rbx
	movq	8(%rbx), %rax
	movq	8(%rax), %r14
.LBB1_3114:                             # %L11350
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	call_insn_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_17
# BB#3115:                              # %if.then4374
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, recog_data+16(%rip)
	movq	$655, %rdx              # imm = 0x28F
	testq	$2, %rcx
	je	.LBB1_4569
.LBB1_17:                               # %L7552
	movq	8(%r8), %r13
	movl	(%r13), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$56, %rdx
	jg	.LBB1_29
# BB#18:                                # %L7552
	cmpq	$14, %rdx
	jg	.LBB1_23
# BB#19:                                # %L7552
	movq	%r8, %r12
	cmpq	$4, %rdx
	je	.LBB1_4200
# BB#20:                                # %L7552
	cmpq	$5, %rdx
	jne	.LBB1_21
# BB#4250:                              # %L10912
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	memory_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_4255
# BB#4251:                              # %if.then7501
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327722, %rcx           # imm = 0x5002A
	jne	.LBB1_4254
# BB#4252:                              # %land.lhs.true7522
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_4254
# BB#4253:                              # %land.lhs.true7529
	movl	16(%rax), %eax
	cmpq	$34, %rax
	jne	.LBB1_4254
# BB#4257:                              # %L7653
	movq	8(%rcx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4254
# BB#4258:                              # %if.then7547
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$681, %rdx              # imm = 0x2A9
	testq	$69, %rax
	jne	.LBB1_4569
.LBB1_4254:                             # %if.end7536
	movq	8(%r12), %r13
.LBB1_4255:                             # %L10923
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4256
# BB#4259:                              # %if.then7506
	movq	%r13, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327722, %rcx           # imm = 0x5002A
	jne	.LBB1_4262
# BB#4260:                              # %land.lhs.true7578
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_4262
# BB#4261:                              # %land.lhs.true7585
	movl	16(%rax), %eax
	cmpq	$45, %rax
	jne	.LBB1_4262
# BB#4263:                              # %L8289
	movq	8(%rcx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB1_4264
# BB#4268:                              # %L11521
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-83, %rax
	andq	%r14, %rax
	cmpq	$7, %rax
	ja	.LBB1_4264
# BB#4269:                              # %L11521
	jmpq	*.LJTI1_13(,%rax,8)
.LBB1_4280:                             # %L8308
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB1_4264
# BB#4281:                              # %L11527
	movq	%r8, %r12
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jne	.LBB1_4282
# BB#4284:                              # %L8316
	movq	8(%r15), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4285
# BB#4286:                              # %if.then7720
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	movq	%r12, %r8
	je	.LBB1_4264
# BB#4287:                              # %if.then7728
	movzbl	target_flags+1(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$767, %rdx              # imm = 0x2FF
	jmp	.LBB1_4274
.LBB1_29:                               # %L7552
	cmpq	$57, %rdx
	jne	.LBB1_30
# BB#4308:                              # %L10918
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB1_31
# BB#4309:                              # %land.lhs.true7904
	movl	8(%r13), %eax
	cmpq	$17, %rax
	jne	.LBB1_31
# BB#4310:                              # %L8017
	movq	16(%r8), %r15
	movq	$57, %rsi
	movq	%r15, %rdi
	movq	%r8, %rbx
	callq	sse_comparison_operator
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_4595
# BB#4311:                              # %if.then7917
	movq	%rbx, %r13
	movq	%r15, recog_data+16(%rip)
	movq	8(%r15), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_3446
# BB#4312:                              # %L8019
	movq	8(%r12), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_3446
# BB#4313:                              # %if.then7946
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	movq	%r13, %r8
	jne	.LBB1_4315
# BB#4314:                              # %land.lhs.true7959
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4315
# BB#4316:                              # %L8021
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4318
# BB#4317:                              # %land.lhs.true7980
	cmpq	$0, 8(%rax)
	je	.LBB1_4319
.LBB1_4318:                             # %if.end7987
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_23:                               # %L7552
	cmpq	$32, %rdx
	jg	.LBB1_27
# BB#24:                                # %L7552
	cmpq	$15, %rdx
	jne	.LBB1_31
# BB#25:                                # %L10914
	movq	%r8, %rbx
	movq	$15, %rsi
	movq	%r13, %rdi
	callq	memory_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB1_26
# BB#4298:                              # %if.then7825
	movq	%r13, recog_data(%rip)
	movq	%rbx, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4299
# BB#4300:                              # %L7708
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#4301:                              # %if.then7851
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	movq	%r12, %r8
	jne	.LBB1_4303
# BB#4302:                              # %land.lhs.true7864
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4303
# BB#4304:                              # %L7710
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4307
# BB#4305:                              # %land.lhs.true7885
	cmpq	$0, 8(%rax)
	jne	.LBB1_4307
# BB#4306:                              # %land.lhs.true7891
	movzbl	target_flags+2(%rip), %eax
	movq	$688, %rdx              # imm = 0x2B0
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_4307:                             # %if.end7896
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_30:                               # %L7552
	cmpq	$58, %rdx
	jne	.LBB1_31
# BB#4328:                              # %L10919
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB1_31
# BB#4329:                              # %land.lhs.true8067
	movl	8(%r13), %eax
	cmpq	$17, %rax
	jne	.LBB1_31
# BB#4330:                              # %L8028
	movq	16(%r8), %r15
	movq	$58, %rsi
	movq	%r15, %rdi
	movq	%r8, %rbx
	callq	sse_comparison_operator
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_4595
# BB#4331:                              # %if.then8080
	movq	%rbx, %r13
	movq	%r15, recog_data+16(%rip)
	movq	8(%r15), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_3446
# BB#4332:                              # %L8030
	movq	8(%r12), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_3446
# BB#4333:                              # %if.then8109
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	movq	%r13, %r8
	jne	.LBB1_4335
# BB#4334:                              # %land.lhs.true8122
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4335
# BB#4336:                              # %L8032
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4338
# BB#4337:                              # %land.lhs.true8143
	cmpq	$0, 8(%rax)
	je	.LBB1_4339
.LBB1_4338:                             # %if.end8150
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_27:                               # %L7552
	addq	$-33, %rdx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rdx
	cmpq	$13, %rdx
	ja	.LBB1_31
# BB#28:                                # %L7552
	jmpq	*.LJTI1_12(,%rdx,8)
.LBB1_3843:                             # %L10899
	movq	%r8, %r14
	movq	$33, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3847
# BB#3844:                              # %if.then5782
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3846
# BB#3845:                              # %if.then5800
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$663, %rdx              # imm = 0x297
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_3846:                             # %if.end5810
	movq	8(%r14), %r13
.LBB1_3847:                             # %L10904
	movq	$33, %rsi
	movq	%r13, %rdi
	callq	push_operand
	testq	%r15, %rax
	je	.LBB1_3851
# BB#3848:                              # %if.then5787
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_4001
# BB#3849:                              # %if.then5819
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$668, %rdx              # imm = 0x29C
	testq	$64, %rax
	movq	%r14, %r8
	jne	.LBB1_4569
	jmp	.LBB1_3850
.LBB1_4200:                             # %L10909
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_4203
# BB#4201:                              # %if.then7123
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB1_4202
# BB#4205:                              # %L11512
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$42, %rax
	je	.LBB1_4219
# BB#4206:                              # %L11512
	cmpq	$121, %rax
	jne	.LBB1_4207
# BB#4236:                              # %L8368
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196751, %rax           # imm = 0x3008F
	jne	.LBB1_4202
# BB#4237:                              # %L8369
	movq	8(%rbx), %r15
	movq	$36, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4202
# BB#4238:                              # %if.then7394
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4202
# BB#4239:                              # %land.lhs.true7407
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4202
# BB#4240:                              # %L8371
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r14, %rax
	je	.LBB1_4202
# BB#4241:                              # %if.then7426
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$772, %rdx              # imm = 0x304
	jmp	.LBB1_4227
.LBB1_21:                               # %L7552
	cmpq	$6, %rdx
	jne	.LBB1_22
# BB#4004:                              # %L10901
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB1_4005
# BB#4029:                              # %L11480.i
	movl	16(%r13), %eax
	testq	%rax, %rax
	movq	%r13, %r14
	jne	.LBB1_4006
# BB#4030:                              # %L7812.i
	movq	8(%r13), %r15
	movzbl	2(%r15), %eax
	cmpq	$15, %rax
	jne	.LBB1_4031
# BB#4094:                              # %L11482.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	movq	%r13, %r14
	je	.LBB1_4006
# BB#4095:                              # %if.then391.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_4096
# BB#4097:                              # %L11495.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	je	.LBB1_4101
# BB#4098:                              # %L11495.i
	cmpq	$84, %rax
	jne	.LBB1_4099
# BB#4126:                              # %L7909.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393279, %rcx           # imm = 0x6003F
	jne	.LBB1_4128
# BB#4127:                              # %land.lhs.true573.i
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_4129
.LBB1_4128:                             # %if.end579.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4262:                             # %if.end7592
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_22:
	movq	%r12, %r8
	jmp	.LBB1_31
.LBB1_4595:                             # %if.end7919
	movq	8(%rbx), %r13
	movq	%rbx, %r8
	jmp	.LBB1_31
.LBB1_4256:
	movq	%r12, %r8
	jmp	.LBB1_31
.LBB1_26:
	movq	%rbx, %r8
	jmp	.LBB1_31
.LBB1_4005:                             # %L10901
	cmpq	$66, %rax
	movq	%r13, %r14
	jne	.LBB1_4006
# BB#4025:                              # %L11479.i
	movq	$6, %rsi
	movq	%r13, %rdi
	callq	push_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	movq	%r13, %r14
	je	.LBB1_4006
# BB#4026:                              # %if.then10.i12900
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_4028
# BB#4027:                              # %if.then18.i12903
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+8(%rip)
	movq	$665, %rdx              # imm = 0x299
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_4028:                             # %if.end25.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4299:                             # %if.end7842
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4315:                             # %if.end7967
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4303:                             # %if.end7872
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3669:                             # %L10898
	movq	%r8, %r14
	movq	$36, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3673
# BB#3670:                              # %if.then5708
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3672
# BB#3671:                              # %if.then5726
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$662, %rdx              # imm = 0x296
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_3672:                             # %if.end5736
	movq	8(%r14), %r13
.LBB1_3673:                             # %L10905
	movq	$36, %rsi
	movq	%r13, %rdi
	callq	push_operand
	testq	%r15, %rax
	je	.LBB1_3677
# BB#3674:                              # %if.then5713
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_4001
# BB#3675:                              # %if.then5745
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$669, %rdx              # imm = 0x29D
	testq	$64, %rax
	movq	%r14, %r8
	jne	.LBB1_4569
	jmp	.LBB1_3676
.LBB1_3419:                             # %L10896
	movq	%r8, %r14
	movq	$37, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3423
# BB#3420:                              # %if.then5138
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$37, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3422
# BB#3421:                              # %if.then5156
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$660, %rdx              # imm = 0x294
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3422:                             # %if.end5166
	movq	8(%r14), %r13
.LBB1_3423:                             # %L10903
	movq	$37, %rsi
	movq	%r13, %rdi
	callq	push_operand
	testq	%r15, %rax
	je	.LBB1_3427
# BB#3424:                              # %if.then5143
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$37, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_4001
# BB#3425:                              # %if.then5175
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$667, %rdx              # imm = 0x29B
	testq	$5, %rax
	movq	%r14, %r8
	jne	.LBB1_4569
	jmp	.LBB1_3426
.LBB1_3466:                             # %L10910
	andq	$65535, %rax            # imm = 0xFFFF
	movq	%r8, %r12
	cmpq	$66, %rax
	jne	.LBB1_3467
# BB#3477:                              # %L7633
	movq	8(%r13), %r14
	movzbl	2(%r14), %eax
	cmpq	$5, %rax
	jne	.LBB1_3478
# BB#3489:                              # %L11417
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3467
# BB#3490:                              # %if.then5572
	movq	%r14, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2555946, %rax          # imm = 0x27002A
	jne	.LBB1_3493
# BB#3491:                              # %land.lhs.true5588
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3493
# BB#3492:                              # %land.lhs.true5595
	movl	16(%rbx), %ecx
	cmpq	$32, %rcx
	jne	.LBB1_3493
# BB#3494:                              # %L7642
	movq	8(%rax), %r14
	movq	$39, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4593
# BB#3495:                              # %if.then5613
	movq	%r14, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4593
# BB#3496:                              # %if.then5626
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$4521984, %rax          # imm = 0x450000
	movq	%r12, %rcx
	je	.LBB1_3488
# BB#3497:                              # %if.then5626
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$679, %rdx              # imm = 0x2A7
	testq	%r15, %rax
	jne	.LBB1_4569
	jmp	.LBB1_3488
.LBB1_3994:                             # %L10900
	movq	%r8, %r14
	movq	$44, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3998
# BB#3995:                              # %if.then7070
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3997
# BB#3996:                              # %if.then7083
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$664, %rdx              # imm = 0x298
	testq	$16, %rax
	jne	.LBB1_4569
.LBB1_3997:                             # %if.end7093
	movq	8(%r14), %r13
.LBB1_3998:                             # %L10907
	movq	$44, %rsi
	movq	%r13, %rdi
	callq	push_operand
	testq	%r15, %rax
	je	.LBB1_3999
# BB#4000:                              # %if.then7075
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_4001
# BB#4002:                              # %if.then7102
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$671, %rdx              # imm = 0x29F
	testq	$16, %rax
	movq	%r14, %r8
	jne	.LBB1_4569
# BB#4003:                              # %if.end7112
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3123:                             # %L10895
	movq	%r8, %r12
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3126
# BB#3124:                              # %if.then4461
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$3014656, %rax          # imm = 0x2E0000
	jne	.LBB1_3125
# BB#3137:                              # %L11353
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$141, %rcx
	jg	.LBB1_3149
# BB#3138:                              # %L11353
	cmpq	$60, %rcx
	jg	.LBB1_3145
# BB#3139:                              # %L11353
	cmpq	$42, %rcx
	jne	.LBB1_3125
# BB#3140:                              # %L11356
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_3125
# BB#3141:                              # %L11358
	movl	16(%rbx), %ecx
	cmpq	$38, %rcx
	jne	.LBB1_3142
# BB#3159:                              # %L7614
	movq	8(%rax), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3125
# BB#3160:                              # %if.then4535
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$674, %rdx              # imm = 0x2A2
	jmp	.LBB1_3161
.LBB1_4219:                             # %L11515
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4202
# BB#4220:                              # %land.lhs.true7160
	movl	16(%rbx), %ecx
	cmpq	$33, %rcx
	jne	.LBB1_4202
# BB#4221:                              # %L7624
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$39, %rax
	jne	.LBB1_4222
# BB#4225:                              # %L11517
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4202
# BB#4226:                              # %if.then7204
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$677, %rdx              # imm = 0x2A5
.LBB1_4227:                             # %if.then7204
	testq	$69, %rax
	jne	.LBB1_4569
	jmp	.LBB1_4202
.LBB1_4207:                             # %L11512
	cmpq	$143, %rax
	jne	.LBB1_4202
# BB#4208:                              # %L8136
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$2424832, %rdx          # imm = 0x250000
	jne	.LBB1_4202
# BB#4209:                              # %L11518
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$42, %rcx
	jne	.LBB1_4210
# BB#4228:                              # %L11520
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_4202
# BB#4229:                              # %land.lhs.true7304
	movl	16(%rax), %eax
	cmpq	$30, %rax
	jne	.LBB1_4202
# BB#4230:                              # %L8144
	movq	8(%rcx), %r15
	movq	$46, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4202
# BB#4231:                              # %if.then7322
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4202
# BB#4232:                              # %land.lhs.true7335
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4202
# BB#4233:                              # %L8146
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	jne	.LBB1_4218
# BB#4234:                              # %land.lhs.true7356
	cmpq	$0, 8(%rax)
	jne	.LBB1_4218
# BB#4235:                              # %land.lhs.true7362
	movzbl	target_flags+2(%rip), %eax
	movq	$744, %rdx              # imm = 0x2E8
	jmp	.LBB1_4217
.LBB1_4001:                             # %if.end5177
	movq	8(%r14), %r13
	movq	%r14, %r8
	jmp	.LBB1_31
.LBB1_4335:                             # %if.end8130
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4031:                             # %L7812.i
	cmpq	$16, %rax
	movq	%r13, %r14
	jne	.LBB1_4006
# BB#4032:                              # %L11481.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	movq	%r13, %r14
	je	.LBB1_4006
# BB#4033:                              # %if.then45.i12911
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_4034
# BB#4035:                              # %L11483.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	je	.LBB1_4039
# BB#4036:                              # %L11483.i
	cmpq	$84, %rax
	jne	.LBB1_4037
# BB#4066:                              # %L7892.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393279, %rcx           # imm = 0x6003F
	jne	.LBB1_4068
# BB#4067:                              # %land.lhs.true226.i12950
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_4069
.LBB1_4068:                             # %if.end232.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3851:                             # %if.end5789
	movq	$33, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3852
# BB#3853:                              # %if.then5792
	movq	%r13, recog_data(%rip)
	movq	%r14, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2162688, %rcx          # imm = 0x210000
	jne	.LBB1_3850
# BB#3854:                              # %L11463
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$141, %rax
	jg	.LBB1_3876
# BB#3855:                              # %L11463
	movq	%r8, %r12
	cmpq	$86, %rax
	jg	.LBB1_3862
# BB#3856:                              # %L11463
	cmpq	$75, %rax
	jne	.LBB1_3857
# BB#3901:                              # %L8162
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2162688, %rcx          # imm = 0x210000
	jne	.LBB1_3417
# BB#3902:                              # %L11476
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$78, %rax
	jne	.LBB1_3903
# BB#3907:                              # %L8261
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2162808, %rcx          # imm = 0x210078
	jne	.LBB1_3417
# BB#3908:                              # %L8262
	movq	8(%rax), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	(%rax), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2097295, %rax          # imm = 0x20008F
	jne	.LBB1_3417
# BB#3909:                              # %L8263
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r13
	movq	$36, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3910:                              # %if.then6119
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3417
# BB#3911:                              # %land.lhs.true6132
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3417
# BB#3912:                              # %L8265
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3417
# BB#3913:                              # %land.lhs.true6153
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3417
# BB#3914:                              # %L8266
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3417
# BB#3915:                              # %land.lhs.true6173
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB1_3417
# BB#3916:                              # %L8267
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2162808, %rcx          # imm = 0x210078
	jne	.LBB1_3417
# BB#3917:                              # %L8268
	movq	8(%rax), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2097295, %rax          # imm = 0x20008F
	jne	.LBB1_3417
# BB#3918:                              # %L8269
	movq	8(%r14), %r13
	movq	$36, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3919:                              # %if.then6225
	movq	%r13, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3417
# BB#3920:                              # %land.lhs.true6238
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3417
# BB#3921:                              # %L8271
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3417
# BB#3922:                              # %land.lhs.true6259
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3417
# BB#3923:                              # %L8272
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3417
# BB#3924:                              # %land.lhs.true6279
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB1_3417
# BB#3925:                              # %L8273
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2162766, %rax          # imm = 0x21004E
	jne	.LBB1_3417
# BB#3926:                              # %L8274
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2162808, %rcx          # imm = 0x210078
	jne	.LBB1_3417
# BB#3927:                              # %L8275
	movq	8(%rax), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2097295, %rax          # imm = 0x20008F
	jne	.LBB1_3417
# BB#3928:                              # %L8276
	movq	8(%r14), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3929:                              # %L8277
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3417
# BB#3930:                              # %land.lhs.true6362
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3417
# BB#3931:                              # %L8278
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3417
# BB#3932:                              # %land.lhs.true6383
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3417
# BB#3933:                              # %L8279
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3417
# BB#3934:                              # %land.lhs.true6403
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB1_3417
# BB#3935:                              # %L8280
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2162808, %rcx          # imm = 0x210078
	jne	.LBB1_3417
# BB#3936:                              # %L8281
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2097295, %rax          # imm = 0x20008F
	jne	.LBB1_3417
# BB#3937:                              # %L8282
	movq	8(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3938:                              # %L8283
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3417
# BB#3939:                              # %land.lhs.true6468
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3417
# BB#3940:                              # %L8284
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3417
# BB#3941:                              # %land.lhs.true6489
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3417
# BB#3942:                              # %L8285
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_3945
# BB#3943:                              # %land.lhs.true6509
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB1_3945
# BB#3944:                              # %land.lhs.true6515
	movzbl	target_flags+1(%rip), %eax
	movq	$762, %rdx              # imm = 0x2FA
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_3945:                             # %if.end6520
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3677:                             # %if.end5715
	movq	$36, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3678
# BB#3679:                              # %if.then5718
	movq	%r13, recog_data(%rip)
	movq	%r14, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2359296, %rcx          # imm = 0x240000
	jne	.LBB1_3676
# BB#3680:                              # %L11436
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jg	.LBB1_3687
# BB#3681:                              # %L11436
	cmpq	$42, %rax
	jne	.LBB1_3842
# BB#3682:                              # %L11454.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3842
# BB#3683:                              # %land.lhs.true922.i
	movl	16(%rbx), %ecx
	cmpq	$41, %rcx
	jne	.LBB1_3842
# BB#3684:                              # %L8376.i
	movq	8(%rax), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3685:                              # %if.then936.i12849
	movq	%r14, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	immediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3686:                              # %if.then946.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$773, %rdx              # imm = 0x305
	jmp	.LBB1_3742
.LBB1_3427:                             # %if.end5145
	movq	$37, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3428
# BB#3429:                              # %if.then5148
	movq	%r13, recog_data(%rip)
	movq	%r14, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$2424832, %rax          # imm = 0x250000
	jne	.LBB1_3426
# BB#3430:                              # %L11412
	andq	$65535, %rcx            # imm = 0xFFFF
	addq	$-86, %rcx
	andq	%r15, %rcx
	cmpq	$56, %rcx
	ja	.LBB1_3434
# BB#3431:                              # %L11412
	movq	%r8, %r12
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$17116889088, %rdx      # imm = 0x3FC3F0000
	testq	%rdx, %rax
	je	.LBB1_3432
# BB#3435:                              # %L11411
	movq	$37, %rsi
	movq	%rbx, %rdi
	callq	sse_comparison_operator
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3436:                              # %if.then5213
	movq	%rbx, recog_data+24(%rip)
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3437:                              # %if.then5437
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3438:                              # %if.then5448
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$727, %rdx              # imm = 0x2D7
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3439:                              # %if.end5458
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3999:
	movq	%r14, %r8
	jmp	.LBB1_31
.LBB1_3478:                             # %L7633
	cmpq	$4, %rax
	jne	.LBB1_3467
# BB#3479:                              # %L11416
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3467
# BB#3480:                              # %if.then5495
	movq	%r14, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2555946, %rax          # imm = 0x27002A
	jne	.LBB1_3483
# BB#3481:                              # %land.lhs.true5511
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3483
# BB#3482:                              # %land.lhs.true5518
	movl	16(%rbx), %ecx
	cmpq	$32, %rcx
	jne	.LBB1_3483
# BB#3484:                              # %L7635
	movq	8(%rax), %r14
	movq	$39, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4593
# BB#3485:                              # %if.then5536
	movq	%r14, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4593
# BB#3486:                              # %if.then5549
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$4521984, %rax          # imm = 0x450000
	movq	%r12, %rcx
	je	.LBB1_3488
# BB#3487:                              # %if.then5549
	andq	$33554432, %rax         # imm = 0x2000000
	movq	$678, %rdx              # imm = 0x2A6
	testq	%r15, %rax
	je	.LBB1_4569
.LBB1_3488:                             # %if.end5566
	movq	8(%rcx), %r13
	movq	%rcx, %r12
	jmp	.LBB1_3467
.LBB1_3850:                             # %if.end5842
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3676:                             # %if.end5768
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3426:                             # %if.end5198
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3149:                             # %L11353
	cmpq	$142, %rcx
	jne	.LBB1_3125
# BB#3150:                              # %L7682
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3125
# BB#3151:                              # %if.then4573
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3125
# BB#3152:                              # %if.then4584
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3125
# BB#3153:                              # %L11360
	movq	8(%rax), %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jne	.LBB1_3125
# BB#3154:                              # %if.then4610
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB1_3155
# BB#3164:                              # %L11363
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	movq	%r12, %rax
	je	.LBB1_3162
# BB#3165:                              # %land.lhs.true4646
	movq	%rax, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_3167
# BB#3166:
	movq	$685, %rdx              # imm = 0x2AD
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_4096:                             # %if.end402.i12986
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3493:                             # %if.end5602
	movq	8(%r12), %r13
	jmp	.LBB1_3467
.LBB1_4222:                             # %L7624
	cmpq	$46, %rax
	jne	.LBB1_4202
# BB#4223:                              # %L11516
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4202
# BB#4224:                              # %if.then7188
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$676, %rdx              # imm = 0x2A4
	testq	$5, %rax
	jne	.LBB1_4569
	jmp	.LBB1_4202
.LBB1_4210:                             # %L11518
	cmpq	$126, %rcx
	jne	.LBB1_4202
# BB#4211:                              # %L8137
	movq	8(%rax), %r15
	movq	$46, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4202
# BB#4212:                              # %if.then7249
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4202
# BB#4213:                              # %land.lhs.true7262
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4202
# BB#4214:                              # %L8139
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	jne	.LBB1_4218
# BB#4215:                              # %land.lhs.true7283
	cmpq	$0, 8(%rax)
	jne	.LBB1_4218
# BB#4216:                              # %land.lhs.true7289
	movzbl	target_flags+2(%rip), %eax
	movq	$743, %rdx              # imm = 0x2E7
.LBB1_4217:                             # %land.lhs.true7289
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_4218:                             # %if.end7294
	movq	8(%rcx), %r13
	movq	%rcx, %r12
	jmp	.LBB1_4203
.LBB1_4202:                             # %if.end7140
	movq	8(%r12), %r13
.LBB1_4203:                             # %L10924
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB1_4204
# BB#4242:                              # %if.then7128
	movq	%r13, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262187, %rcx           # imm = 0x4002B
	jne	.LBB1_4245
# BB#4243:                              # %land.lhs.true7457
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_4245
# BB#4244:                              # %land.lhs.true7464
	movl	16(%rax), %eax
	cmpq	$40, %rax
	jne	.LBB1_4245
# BB#4246:                              # %L8672
	movq	8(%rcx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4249
# BB#4247:                              # %land.lhs.true7484
	cmpq	$0, 8(%rax)
	jne	.LBB1_4249
# BB#4248:                              # %land.lhs.true7490
	movzbl	target_flags+1(%rip), %eax
	movq	$803, %rdx              # imm = 0x323
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_4249:                             # %if.end7495
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4245:                             # %if.end7471
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4204:
	movq	%r12, %r8
	jmp	.LBB1_31
.LBB1_3852:
	movq	%r14, %r8
	jmp	.LBB1_31
.LBB1_3678:
	movq	%r14, %r8
	jmp	.LBB1_31
.LBB1_3428:
	movq	%r14, %r8
	jmp	.LBB1_31
.LBB1_3145:                             # %L11353
	addq	$-61, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	ja	.LBB1_3125
# BB#3146:                              # %L11353
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$37, %rax
	je	.LBB1_3125
# BB#3147:                              # %L11352
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3125
# BB#3148:                              # %if.then4502
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$659, %rdx              # imm = 0x293
	testq	$5, %rax
	jne	.LBB1_4569
	jmp	.LBB1_3125
.LBB1_4319:                             # %L8022
	movq	16(%r15), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4320
# BB#4321:                              # %L8023
	movq	%r8, %r12
	movq	8(%r15), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_3417
# BB#4322:                              # %if.then8014
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3417
# BB#4323:                              # %land.lhs.true8027
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_3417
# BB#4324:                              # %L8025
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_4327
# BB#4325:                              # %land.lhs.true8048
	cmpq	$0, 8(%rax)
	jne	.LBB1_4327
# BB#4326:                              # %land.lhs.true8054
	movzbl	target_flags+2(%rip), %eax
	movq	$731, %rdx              # imm = 0x2DB
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_4327:                             # %if.end8059
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4034:                             # %if.end56.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3483:                             # %if.end5525
	movq	8(%r12), %r13
	jmp	.LBB1_3467
.LBB1_4101:                             # %L7831.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$393216, %rdx           # imm = 0x60000
	jne	.LBB1_4102
# BB#4103:                              # %L11498.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB1_4104
# BB#4106:                              # %L11500.i
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_4108
# BB#4107:                              # %if.end442.i12994
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4099:                             # %L11495.i
	cmpq	$85, %rax
	jne	.LBB1_4100
# BB#4140:                              # %L7955.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393279, %rcx           # imm = 0x6003F
	jne	.LBB1_4142
# BB#4141:                              # %land.lhs.true660.i
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_4143
.LBB1_4142:                             # %if.end666.i13039
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3876:                             # %L11463
	cmpq	$142, %rax
	jne	.LBB1_3877
# BB#3958:                              # %L8560
	movq	%r8, %r13
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2162831, %rax          # imm = 0x21008F
	jne	.LBB1_3446
# BB#3959:                              # %L8561
	movq	8(%r14), %r12
	movq	$33, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3960:                              # %if.then6746
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3446
# BB#3961:                              # %land.lhs.true6759
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3446
# BB#3962:                              # %L8563
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3446
# BB#3963:                              # %L11477
	movq	8(%rcx), %rdx
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jne	.LBB1_3446
# BB#3964:                              # %if.then6795
	testq	%r15, %rdx
	jne	.LBB1_3965
# BB#3980:                              # %L8564
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3446
# BB#3981:                              # %land.lhs.true6817
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3446
# BB#3982:                              # %L8565
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2162831, %rax          # imm = 0x21008F
	jne	.LBB1_3446
# BB#3983:                              # %L8566
	movq	8(%r14), %r12
	movq	$33, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3984:                              # %if.then6851
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3446
# BB#3985:                              # %land.lhs.true6864
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3446
# BB#3986:                              # %L8568
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3446
# BB#3987:                              # %land.lhs.true6885
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3446
# BB#3988:                              # %L8569
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3446
# BB#3989:                              # %land.lhs.true6905
	cmpq	$0, 8(%rax)
	jne	.LBB1_3446
# BB#3990:                              # %L8570
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r13, %r8
	jne	.LBB1_3993
# BB#3991:                              # %land.lhs.true6923
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3993
# BB#3992:                              # %land.lhs.true6929
	movzbl	target_flags+1(%rip), %eax
	movq	$797, %rdx              # imm = 0x31D
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_3993:                             # %if.end6934
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3687:                             # %L11436
	cmpq	$141, %rax
	jg	.LBB1_3704
# BB#3688:                              # %L11436
	movq	%r8, %r12
	cmpq	$121, %rax
	jg	.LBB1_3724
# BB#3689:                              # %L11436
	cmpq	$86, %rax
	jg	.LBB1_3696
# BB#3690:                              # %L11436
	cmpq	$75, %rax
	je	.LBB1_3706
# BB#3691:                              # %L11436
	cmpq	$76, %rax
	jne	.LBB1_3692
# BB#3715:                              # %L8198.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3842
# BB#3716:                              # %if.then77.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3717:                              # %if.then85.i12720
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$753, %rdx              # imm = 0x2F1
	jmp	.LBB1_3841
.LBB1_4270:                             # %L8290
	movq	%r8, %r12
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4271
# BB#4272:                              # %if.then7641
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	movq	%r12, %r8
	je	.LBB1_4264
# BB#4273:                              # %if.then7649
	movzbl	target_flags+1(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$763, %rdx              # imm = 0x2FB
	jmp	.LBB1_4274
.LBB1_4276:                             # %L8297
	movq	%r8, %r12
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4277
# BB#4278:                              # %if.then7670
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	movq	%r12, %r8
	je	.LBB1_4264
# BB#4279:                              # %if.then7678
	movzbl	target_flags+1(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$764, %rdx              # imm = 0x2FC
	jmp	.LBB1_4274
.LBB1_4294:                             # %L8486
	movq	%r8, %r12
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4295
# BB#4296:                              # %if.then7799
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	movq	%r12, %r8
	je	.LBB1_4264
# BB#4297:                              # %if.then7807
	movzbl	target_flags+1(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$791, %rdx              # imm = 0x317
	jmp	.LBB1_4274
.LBB1_4290:                             # %L8467
	movq	%r8, %r12
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4291
# BB#4292:                              # %if.then7770
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	movq	%r12, %r8
	je	.LBB1_4264
# BB#4293:                              # %if.then7778
	movzbl	target_flags+1(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$788, %rdx              # imm = 0x314
	jmp	.LBB1_4274
.LBB1_4339:                             # %L8033
	movq	16(%r15), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4340
# BB#4341:                              # %L8034
	movq	%r8, %r12
	movq	8(%r15), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_3417
# BB#4342:                              # %if.then8177
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3417
# BB#4343:                              # %land.lhs.true8190
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_3417
# BB#4344:                              # %L8036
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_4347
# BB#4345:                              # %land.lhs.true8211
	cmpq	$0, 8(%rax)
	jne	.LBB1_4347
# BB#4346:                              # %land.lhs.true8217
	movzbl	target_flags+2(%rip), %eax
	movq	$732, %rdx              # imm = 0x2DC
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_4347:                             # %if.end8222
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4320:                             # %if.end8005
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4039:                             # %L7814.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$393216, %rdx           # imm = 0x60000
	jne	.LBB1_4040
# BB#4041:                              # %L11486.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB1_4042
# BB#4044:                              # %L11488.i
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_4046
# BB#4045:                              # %if.end96.i12914
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4037:                             # %L11483.i
	cmpq	$85, %rax
	jne	.LBB1_4038
# BB#4080:                              # %L7938.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393279, %rcx           # imm = 0x6003F
	jne	.LBB1_4082
# BB#4081:                              # %land.lhs.true313.i
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_4083
.LBB1_4082:                             # %if.end319.i12964
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3862:                             # %L11463
	cmpq	$102, %rax
	jg	.LBB1_3870
# BB#3863:                              # %L11463
	cmpq	$87, %rax
	je	.LBB1_3954
# BB#3864:                              # %L11463
	cmpq	$89, %rax
	jne	.LBB1_3865
# BB#3950:                              # %L8448
	movq	8(%rbx), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3951:                              # %if.then6638
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3952:                              # %if.then6649
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$785, %rdx              # imm = 0x311
	testq	$64, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3953:                              # %if.end6659
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4102:                             # %if.end424.i12992
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4100:                             # %sw.epilog412.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3877:                             # %L11463
	movq	%r8, %r12
	cmpq	$143, %rax
	jne	.LBB1_3417
# BB#3878:                              # %L8112
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$2424832, %rdx          # imm = 0x250000
	jne	.LBB1_3417
# BB#3879:                              # %L11472
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$42, %rcx
	jne	.LBB1_3880
# BB#3890:                              # %L11474
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_3417
# BB#3891:                              # %land.lhs.true5964
	movl	16(%rax), %eax
	cmpq	$30, %rax
	jne	.LBB1_3417
# BB#3892:                              # %L8121
	movq	8(%rcx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3893:                              # %if.then5982
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3417
# BB#3894:                              # %land.lhs.true5995
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3417
# BB#3895:                              # %L8123
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3417
# BB#3896:                              # %land.lhs.true6016
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3417
# BB#3897:                              # %L8124
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_3900
# BB#3898:                              # %land.lhs.true6036
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3900
# BB#3899:                              # %land.lhs.true6042
	movzbl	target_flags+2(%rip), %eax
	movq	$741, %rdx              # imm = 0x2E5
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3900:                             # %if.end6047
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3704:                             # %L11436
	addq	$-142, %rax
	andq	%r15, %rax
	cmpq	$7, %rax
	ja	.LBB1_3842
# BB#3705:                              # %L11436
	jmpq	*.LJTI1_14(,%rax,8)
.LBB1_3764:                             # %L8359.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2359296, %rcx          # imm = 0x240000
	jne	.LBB1_3842
# BB#3765:                              # %L11460.i
	movq	%r8, %r13
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$143, %rax
	jne	.LBB1_3766
# BB#3772:                              # %L8543.i
	movq	8(%r14), %r12
	movq	$36, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r13, %r8
	je	.LBB1_3842
# BB#3773:                              # %if.then461.i
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3842
# BB#3774:                              # %land.lhs.true470.i12788
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_3842
# BB#3775:                              # %L8545.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3776:                              # %L11461.i
	movq	8(%rcx), %rdx
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jne	.LBB1_3842
# BB#3777:                              # %if.then497.i
	movq	%r8, %rsi
	movq	%rdx, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3778
# BB#3800:                              # %L8604.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	movq	%rsi, %r8
	jne	.LBB1_3842
# BB#3801:                              # %land.lhs.true693.i
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3842
# BB#3802:                              # %L8605.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3803:                              # %land.lhs.true710.i12817
	movq	8(%rcx), %rcx
	cmpq	$3, %rcx
	jne	.LBB1_3842
# BB#3804:                              # %L8606.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3805:                              # %land.lhs.true727.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3842
# BB#3806:                              # %L8607.i
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2359439, %rax          # imm = 0x24008F
	jne	.LBB1_3842
# BB#3807:                              # %L8608.i
	movq	8(%r14), %r12
	movq	$36, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	register_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3808:                              # %if.then755.i12828
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3842
# BB#3809:                              # %land.lhs.true765.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_3842
# BB#3810:                              # %L8610.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3811:                              # %land.lhs.true783.i
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3842
# BB#3812:                              # %L8611.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3813:                              # %land.lhs.true800.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3842
# BB#3814:                              # %L8612.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3815:                              # %land.lhs.true817.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3842
# BB#3816:                              # %L8613.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3817:                              # %land.lhs.true834.i12842
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB1_3842
# BB#3818:                              # %L8614.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3819:                              # %land.lhs.true849.i
	movq	8(%rax), %rax
	cmpq	$5, %rax
	jne	.LBB1_3842
# BB#3820:                              # %land.lhs.true855.i
	movzbl	target_flags+1(%rip), %eax
	movq	$799, %rdx              # imm = 0x31F
	jmp	.LBB1_3841
.LBB1_4340:                             # %if.end8168
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3008:                             # %land.lhs.true3665.L11347_crit_edge
	movl	target_flags(%rip), %eax
.LBB1_3009:                             # %L11347
	testq	$1, %rax
	je	.LBB1_2947
# BB#3010:                              # %land.lhs.true3676
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-15, %rdx
	andq	%r13, %rdx
	cmpq	$1, %rdx
	ja	.LBB1_2947
# BB#3011:                              # %land.lhs.true3688
	movq	recog_data+16(%rip), %rcx
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB1_2947
# BB#3012:                              # %land.lhs.true3698
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %edi
	callq	ix86_use_fcomi_compare
	testq	%r13, %rax
	jne	.LBB1_2947
# BB#3013:                              # %land.lhs.true3704
	movq	recog_data(%rip), %rax
	movq	recog_data+8(%rip), %rcx
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	ix86_cc_mode
	andq	%r13, %rax
	cmpq	$57, %rax
	jne	.LBB1_2947
# BB#3014:                              # %land.lhs.true3712
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	testq	%rax, %rax
	je	.LBB1_2947
# BB#3015:                              # %land.lhs.true3712
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB1_2947
# BB#3016:                              # %if.then3719
	movq	$3, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$498, %rdx              # imm = 0x1F2
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_2793:
	movq	$288, %rdx              # imm = 0x120
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_4282:                             # %if.end7709
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4283
# BB#4288:                              # %if.then7712
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	movq	%r12, %r8
	je	.LBB1_4264
# BB#4289:                              # %if.then7749
	movzbl	target_flags+1(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$766, %rdx              # imm = 0x2FE
.LBB1_4274:                             # %if.then7649
	testq	$64, %rax
	jne	.LBB1_4569
# BB#4275:                              # %if.end7656
	movq	16(%r8), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
	jmp	.LBB1_4264
.LBB1_4285:
	movq	%r12, %r8
	jmp	.LBB1_4264
.LBB1_4129:                             # %L7910.i
	movq	8(%rax), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4131
# BB#4130:                              # %if.then588.i13028
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_4131
# BB#4132:                              # %L11503.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB1_4134
# BB#4133:                              # %land.lhs.true609.i13031
	movl	16(%r14), %eax
	testq	%rax, %rax
	jne	.LBB1_4134
# BB#4137:                              # %L7912.i
	movq	8(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4134
# BB#4138:                              # %if.then629.i13037
	movzbl	target_flags+2(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$716, %rdx              # imm = 0x2CC
	testq	$5, %rax
	movq	%r12, %rcx
	jne	.LBB1_4569
# BB#4139:                              # %if.end635.i
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	16(%rax), %r14
.LBB1_4134:                             # %L11504.i
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB1_4136
# BB#4135:                              # %if.then618.i13035
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$717, %rdx              # imm = 0x2CD
	testq	$5, %rax
	jmp	.LBB1_4054
.LBB1_3142:                             # %L11358
	cmpq	$39, %rcx
	jne	.LBB1_3125
# BB#3143:                              # %L7619
	movq	8(%rax), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3125
# BB#3144:                              # %if.then4555
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$675, %rdx              # imm = 0x2A3
.LBB1_3161:                             # %if.then4535
	testq	$5, %rax
	movq	%r12, %rax
	jne	.LBB1_4569
	jmp	.LBB1_3162
.LBB1_4069:                             # %L7893.i
	movq	8(%rax), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4071
# BB#4070:                              # %if.then241.i12955
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_4071
# BB#4072:                              # %L11491.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB1_4074
# BB#4073:                              # %land.lhs.true262.i
	movl	16(%r14), %eax
	testq	%rax, %rax
	jne	.LBB1_4074
# BB#4077:                              # %L7895.i
	movq	8(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4074
# BB#4078:                              # %if.then282.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$714, %rdx              # imm = 0x2CA
	testq	$4, %rax
	movq	%r12, %rcx
	jne	.LBB1_4569
# BB#4079:                              # %if.end288.i12963
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	16(%rax), %r14
.LBB1_4074:                             # %L11492.i
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB1_4076
# BB#4075:                              # %if.then271.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$715, %rdx              # imm = 0x2CB
	jmp	.LBB1_4053
.LBB1_3857:                             # %L11463
	cmpq	$76, %rax
	jne	.LBB1_3417
# BB#3858:                              # %L8204
	movq	8(%rbx), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3859:                              # %if.then6548
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3860:                              # %if.then6559
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$754, %rdx              # imm = 0x2F2
	testq	$64, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3861:                              # %if.end6569
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3903:                             # %if.end6069
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3904:                              # %if.then6072
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3905:                              # %if.then6529
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$747, %rdx              # imm = 0x2EB
	testq	$64, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3906:                              # %if.end6539
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3432:                             # %L11412
	testq	%rcx, %rcx
	jne	.LBB1_3433
# BB#3440:                              # %L7993
	movq	8(%rbx), %rbx
	movq	$37, %rsi
	movq	%rbx, %rdi
	callq	sse_comparison_operator
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3441:                              # %if.then5224
	movq	%rbx, recog_data+24(%rip)
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3442:                              # %if.then5235
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3443:                              # %if.then5246
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$728, %rdx              # imm = 0x2D8
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3444:                              # %if.end5256
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4593:                             # %if.end5628
	movq	8(%r12), %r13
.LBB1_3467:                             # %L10897
	movq	$39, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3471
# BB#3468:                              # %if.then5470
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3470
# BB#3469:                              # %if.then5652
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$661, %rdx              # imm = 0x295
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_3470:                             # %if.end5662
	movq	8(%r12), %r13
.LBB1_3471:                             # %L10906
	movq	$39, %rsi
	movq	%r13, %rdi
	callq	push_operand
	testq	%r15, %rax
	je	.LBB1_3475
# BB#3472:                              # %if.then5475
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_3498
# BB#3473:                              # %if.then5671
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$670, %rdx              # imm = 0x29E
	testq	$64, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
	jmp	.LBB1_3474
.LBB1_3475:                             # %if.end5477
	movq	$39, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3476
# BB#3499:                              # %if.then5480
	movq	%r13, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2555904, %rcx          # imm = 0x270000
	jne	.LBB1_3474
# BB#3500:                              # %L11418
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$88, %rax
	jg	.LBB1_3506
# BB#3501:                              # %L11418
	cmpq	$75, %rax
	jne	.LBB1_3502
# BB#3522:                              # %L8150.i
	movq	8(%r14), %r12
	movq	$39, %rsi
	movq	%r12, %rdi
	movq	%r8, %rbx
	callq	register_operand
	movq	%rbx, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3523:                              # %if.then.i12534
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3524:                              # %if.then23.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$745, %rdx              # imm = 0x2E9
	jmp	.LBB1_3667
.LBB1_3474:                             # %if.end5694
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3498:                             # %if.end5673
	movq	8(%r12), %r13
	movq	%r12, %r8
	jmp	.LBB1_31
.LBB1_3476:
	movq	%r12, %r8
	jmp	.LBB1_31
.LBB1_3506:                             # %L11418
	cmpq	$141, %rax
	jg	.LBB1_3520
# BB#3507:                              # %L11418
	movq	%r8, %rbx
	cmpq	$128, %rax
	jg	.LBB1_3563
# BB#3508:                              # %L11418
	cmpq	$102, %rax
	jg	.LBB1_3515
# BB#3509:                              # %L11418
	cmpq	$89, %rax
	je	.LBB1_3537
# BB#3510:                              # %L11418
	cmpq	$94, %rax
	jne	.LBB1_3511
# BB#3571:                              # %L8430.i
	movq	8(%r14), %r12
	movq	$39, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%rbx, %r8
	je	.LBB1_3668
# BB#3572:                              # %if.then425.i
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3573:                              # %if.then433.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$782, %rdx              # imm = 0x30E
	jmp	.LBB1_3562
.LBB1_3502:                             # %L11418
	cmpq	$76, %rax
	jne	.LBB1_3668
# BB#3503:                              # %L8192.i
	movq	8(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3504:                              # %if.then73.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3505:                              # %if.then81.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$752, %rdx              # imm = 0x2F0
	jmp	.LBB1_3667
.LBB1_3520:                             # %L11418
	addq	$-142, %rax
	andq	%r15, %rax
	cmpq	$7, %rax
	ja	.LBB1_3668
# BB#3521:                              # %L11418
	jmpq	*.LJTI1_16(,%rax,8)
.LBB1_3585:                             # %L8516.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2556047, %rax          # imm = 0x27008F
	jne	.LBB1_3668
# BB#3586:                              # %L8517.i
	movq	8(%rbx), %r12
	movq	$39, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	register_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3587:                              # %if.then542.i
	movq	%r12, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3668
# BB#3588:                              # %land.lhs.true551.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$8, %rcx
	jne	.LBB1_3668
# BB#3589:                              # %L8519.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3590:                              # %L11434.i
	movq	8(%rcx), %rdx
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jne	.LBB1_3668
# BB#3591:                              # %if.then578.i
	movq	%r8, %rsi
	testq	%r15, %rdx
	jne	.LBB1_3592
# BB#3630:                              # %L8578.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	movq	%rsi, %r8
	jne	.LBB1_3668
# BB#3631:                              # %land.lhs.true910.i
	movq	8(%rcx), %rcx
	cmpq	$4, %rcx
	jne	.LBB1_3668
# BB#3632:                              # %L8579.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3633:                              # %land.lhs.true927.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3634:                              # %L8580.i
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3635:                              # %land.lhs.true944.i
	movq	8(%rcx), %rcx
	cmpq	$5, %rcx
	jne	.LBB1_3668
# BB#3636:                              # %L8581.i
	movq	40(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3637:                              # %land.lhs.true961.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3668
# BB#3638:                              # %L8582.i
	movq	48(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3639:                              # %land.lhs.true978.i12664
	movq	8(%rcx), %rcx
	cmpq	$6, %rcx
	jne	.LBB1_3668
# BB#3640:                              # %L8583.i
	movq	56(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3641:                              # %land.lhs.true995.i12667
	movq	8(%rcx), %rcx
	cmpq	$3, %rcx
	jne	.LBB1_3668
# BB#3642:                              # %L8584.i
	movq	64(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3668
# BB#3643:                              # %land.lhs.true1012.i
	movq	8(%rax), %rax
	cmpq	$7, %rax
	jne	.LBB1_3668
# BB#3644:                              # %L8585.i
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2556047, %rax          # imm = 0x27008F
	jne	.LBB1_3668
# BB#3645:                              # %L8586.i
	movq	8(%rbx), %r12
	movq	$39, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	register_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3646:                              # %if.then1040.i
	movq	%r12, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3668
# BB#3647:                              # %land.lhs.true1050.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$8, %rcx
	jne	.LBB1_3668
# BB#3648:                              # %L8588.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3649:                              # %land.lhs.true1068.i12673
	movq	8(%rcx), %rcx
	cmpq	$4, %rcx
	jne	.LBB1_3668
# BB#3650:                              # %L8589.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3651:                              # %land.lhs.true1085.i12675
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3668
# BB#3652:                              # %L8590.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3653:                              # %land.lhs.true1102.i
	movq	8(%rcx), %rcx
	cmpq	$5, %rcx
	jne	.LBB1_3668
# BB#3654:                              # %L8591.i
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3655:                              # %land.lhs.true1119.i12679
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3656:                              # %L8592.i
	movq	40(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3657:                              # %land.lhs.true1136.i12685
	movq	8(%rcx), %rcx
	cmpq	$6, %rcx
	jne	.LBB1_3668
# BB#3658:                              # %L8593.i
	movq	48(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3659:                              # %land.lhs.true1153.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3668
# BB#3660:                              # %L8594.i
	movq	56(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3661:                              # %land.lhs.true1170.i12688
	movq	8(%rcx), %rcx
	cmpq	$7, %rcx
	jne	.LBB1_3668
# BB#3662:                              # %L8595.i
	movq	64(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3668
# BB#3663:                              # %land.lhs.true1187.i
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB1_3668
# BB#3664:                              # %L8596.i
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3668
# BB#3665:                              # %land.lhs.true1202.i12695
	movq	8(%rax), %rax
	cmpq	$85, %rax
	jne	.LBB1_3668
# BB#3666:                              # %land.lhs.true1208.i
	movzbl	target_flags+1(%rip), %eax
	movq	$798, %rdx              # imm = 0x31E
	jmp	.LBB1_3667
.LBB1_3155:                             # %if.then4610
	cmpq	$12, %rax
	jne	.LBB1_3125
# BB#3156:                              # %L11362
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	movq	%r12, %rax
	je	.LBB1_3162
# BB#3157:                              # %land.lhs.true4626
	movq	%rax, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_3163
# BB#3158:
	movq	$684, %rdx              # imm = 0x2AC
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_3125:                             # %if.end4487
	movq	8(%r12), %r13
.LBB1_3126:                             # %L10902
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	push_operand
	testq	%r15, %rax
	je	.LBB1_3130
# BB#3127:                              # %if.then4466
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_3129
# BB#3128:                              # %if.then4676
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$666, %rdx              # imm = 0x29A
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3129:                             # %if.end4686
	movq	8(%r12), %r13
.LBB1_3130:                             # %L10911
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB1_3135
# BB#3131:                              # %if.then4471
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3014698, %rcx          # imm = 0x2E002A
	jne	.LBB1_3134
# BB#3132:                              # %land.lhs.true4703
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_3134
# BB#3133:                              # %land.lhs.true4710
	movl	16(%rax), %eax
	cmpq	$34, %rax
	jne	.LBB1_3134
# BB#3168:                              # %L7648
	movq	8(%rcx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3134
# BB#3169:                              # %if.then4728
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$680, %rdx              # imm = 0x2A8
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3134:                             # %if.end4717
	movq	8(%r12), %r13
.LBB1_3135:                             # %L10913
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3136
# BB#3171:                              # %if.then4476
	movq	%r13, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$3014656, %rcx          # imm = 0x2E0000
	jne	.LBB1_3170
# BB#3172:                              # %L11364
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jg	.LBB1_3182
# BB#3173:                              # %L11364
	cmpq	$42, %rax
	jne	.LBB1_3194
# BB#3174:                              # %L11376
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_3175
# BB#3380:                              # %L11408
	movq	%r8, %r14
	movl	16(%rbx), %ecx
	cmpq	$42, %rcx
	je	.LBB1_3384
# BB#3381:                              # %L11408
	cmpq	$43, %rcx
	jne	.LBB1_3382
# BB#3387:                              # %L7789
	movq	8(%rax), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3383
# BB#3388:                              # %if.then4899
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$700, %rdx              # imm = 0x2BC
	testq	$5, %rax
	movq	%r14, %r8
	jne	.LBB1_4569
# BB#3389:                              # %if.end4909
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3136:
	movq	%r12, %r8
	jmp	.LBB1_31
.LBB1_3170:                             # %if.end4751
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3182:                             # %L11364
	cmpq	$141, %rax
	jg	.LBB1_3193
# BB#3183:                              # %L11364
	cmpq	$129, %rax
	jg	.LBB1_3410
# BB#3184:                              # %L11364
	movq	%r8, %r12
	cmpq	$91, %rax
	jg	.LBB1_3187
# BB#3185:                              # %L11364
	addq	$-75, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	movq	%r12, %r8
	ja	.LBB1_3194
# BB#3186:                              # %L11364
	jmpq	*.LJTI1_17(,%rax,8)
.LBB1_3394:                             # %L7721
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3395:                              # %if.then4942
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3396:                              # %if.then4953
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$690, %rdx              # imm = 0x2B2
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3397:                              # %if.end4963
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3193:                             # %L11364
	cmpq	$142, %rax
	jne	.LBB1_3194
# BB#3195:                              # %L7658
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$3014656, %rcx          # imm = 0x2E0000
	jne	.LBB1_3196
# BB#3197:                              # %L11382
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$60, %rax
	jg	.LBB1_3207
# BB#3198:                              # %L11382
	cmpq	$42, %rax
	jne	.LBB1_3233
# BB#3199:                              # %L11392.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	movq	%r12, %r8
	jne	.LBB1_3242
# BB#3200:                              # %L11394.i
	movq	%r8, %r12
	movl	16(%r14), %ecx
	cmpq	$43, %rcx
	jne	.LBB1_3201
# BB#3267:                              # %L7795.i
	movq	8(%rax), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3268:                              # %if.then225.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3269:                              # %if.then233.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3270:                              # %land.lhs.true242.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3271:                              # %land.lhs.true247.i
	movzbl	target_flags+2(%rip), %eax
	movq	$701, %rdx              # imm = 0x2BD
	jmp	.LBB1_3241
.LBB1_3175:                             # %L11376
	movq	%r8, %r12
	cmpq	$3, %rcx
	jne	.LBB1_3196
# BB#3176:                              # %L11407
	movl	16(%rbx), %ecx
	cmpq	$41, %rcx
	jne	.LBB1_3196
# BB#3177:                              # %L7714
	movq	8(%rax), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3178:                              # %if.then4820
	movq	%r14, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3179:                              # %if.then4833
	movq	%r14, recog_data+16(%rip)
	movq	8(%rbx), %rax
	movq	24(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3180:                              # %if.then4846
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	movq	$689, %rdx              # imm = 0x2B1
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3181:                              # %if.end4856
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3410:                             # %L11364
	cmpq	$130, %rax
	jne	.LBB1_3194
# BB#3411:                              # %L7801
	movq	%r8, %r14
	movq	8(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3383
# BB#3412:                              # %if.then5062
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$702, %rdx              # imm = 0x2BE
	testq	$5, %rax
	movq	%r14, %r8
	jne	.LBB1_4569
# BB#3413:                              # %if.end5072
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3167:                             # %lor.lhs.false4652
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	%rcx, %rax
	movq	$685, %rdx              # imm = 0x2AD
	jne	.LBB1_3162
	jmp	.LBB1_4569
.LBB1_4104:                             # %L11498.i
	cmpq	$86, %rcx
	jne	.LBB1_4105
# BB#4120:                              # %L7870.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393279, %rcx           # imm = 0x6003F
	jne	.LBB1_4122
# BB#4121:                              # %land.lhs.true523.i
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_4123
.LBB1_4122:                             # %if.end529.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4108:                             # %L7832.i
	movq	8(%rax), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4110
# BB#4109:                              # %if.then451.i13000
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_4110
# BB#4111:                              # %L11501.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB1_4113
# BB#4112:                              # %land.lhs.true472.i13003
	movl	16(%r14), %eax
	testq	%rax, %rax
	jne	.LBB1_4113
# BB#4117:                              # %L7834.i
	movq	8(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4113
# BB#4118:                              # %if.then492.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$706, %rdx              # imm = 0x2C2
	testq	$5, %rax
	movq	%r12, %rcx
	jne	.LBB1_4569
# BB#4119:                              # %if.end498.i13014
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	16(%rax), %r14
.LBB1_4113:                             # %L11502.i
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB1_4116
# BB#4114:                              # %if.then481.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$707, %rdx              # imm = 0x2C3
	testq	$5, %rax
	jmp	.LBB1_4054
.LBB1_4143:                             # %L7956.i
	movq	8(%rax), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4145
# BB#4144:                              # %if.then675.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_4145
# BB#4146:                              # %L11505.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB1_4148
# BB#4147:                              # %land.lhs.true696.i
	movl	16(%r14), %eax
	testq	%rax, %rax
	jne	.LBB1_4148
# BB#4151:                              # %L7958.i
	movq	8(%r14), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4148
# BB#4152:                              # %if.then716.i13050
	movzbl	target_flags+2(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$722, %rdx              # imm = 0x2D2
	testq	$5, %rax
	movq	%r12, %rcx
	jne	.LBB1_4569
# BB#4153:                              # %if.end722.i
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	16(%rax), %r14
.LBB1_4148:                             # %L11506.i
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB1_4150
# BB#4149:                              # %if.then705.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$723, %rdx              # imm = 0x2D3
	testq	$5, %rax
	jmp	.LBB1_4054
.LBB1_3965:                             # %if.then6795
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB1_3446
# BB#3966:                              # %L8622
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3446
# BB#3967:                              # %land.lhs.true6947
	cmpq	$0, 8(%rax)
	jne	.LBB1_3446
# BB#3968:                              # %L8623
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2162831, %rax          # imm = 0x21008F
	jne	.LBB1_3446
# BB#3969:                              # %L8624
	movq	8(%r14), %r12
	movq	$33, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3970:                              # %if.then6981
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3446
# BB#3971:                              # %land.lhs.true6994
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3446
# BB#3972:                              # %L8626
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3446
# BB#3973:                              # %land.lhs.true7015
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3446
# BB#3974:                              # %L8627
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3446
# BB#3975:                              # %land.lhs.true7035
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3446
# BB#3976:                              # %L8628
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r13, %r8
	jne	.LBB1_3979
# BB#3977:                              # %land.lhs.true7053
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3979
# BB#3978:                              # %land.lhs.true7059
	movzbl	target_flags+1(%rip), %eax
	movq	$800, %rdx              # imm = 0x320
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_3979:                             # %if.end7064
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3724:                             # %L11436
	cmpq	$122, %rax
	movq	%r12, %r8
	jne	.LBB1_3842
# BB#3725:                              # %L8240.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2424922, %rax          # imm = 0x25005A
	jne	.LBB1_3842
# BB#3726:                              # %L8241.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2424910, %rax          # imm = 0x25004E
	jne	.LBB1_3842
# BB#3727:                              # %L8242.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$2424832, %rdx          # imm = 0x250000
	jne	.LBB1_3842
# BB#3728:                              # %L11455.i
	movq	%r8, %r13
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$121, %rcx
	jne	.LBB1_3729
# BB#3736:                              # %L8253.i
	movq	8(%rax), %r12
	movq	$36, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r13, %r8
	je	.LBB1_3842
# BB#3737:                              # %if.then240.i
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2424953, %rcx          # imm = 0x250079
	jne	.LBB1_3842
# BB#3738:                              # %L8255.i
	movq	8(%rax), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3739:                              # %if.then261.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3740:                              # %land.lhs.true270.i12764
	movq	8(%rax), %rax
	cmpq	$16, %rax
	jne	.LBB1_3842
# BB#3741:                              # %land.lhs.true275.i
	movzbl	target_flags+2(%rip), %eax
	movq	$761, %rdx              # imm = 0x2F9
	jmp	.LBB1_3742
.LBB1_3696:                             # %L11436
	cmpq	$102, %rax
	jg	.LBB1_3699
# BB#3697:                              # %L11436
	addq	$-87, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	movq	%r12, %r8
	ja	.LBB1_3842
# BB#3698:                              # %L11436
	jmpq	*.LJTI1_15(,%rax,8)
.LBB1_3833:                             # %L8473.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3834:                              # %if.then1076.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonmemory_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3835:                              # %if.then1084.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$789, %rdx              # imm = 0x315
	jmp	.LBB1_3841
.LBB1_3706:                             # %L8156.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3842
# BB#3707:                              # %if.then.i12708
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3708:                              # %if.then27.i12711
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$746, %rdx              # imm = 0x2EA
	jmp	.LBB1_3841
.LBB1_3692:                             # %L11436
	cmpq	$78, %rax
	movq	%r12, %r8
	jne	.LBB1_3842
# BB#3693:                              # %L8234.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3694:                              # %if.then137.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3695:                              # %if.then145.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$759, %rdx              # imm = 0x2F7
	jmp	.LBB1_3841
.LBB1_4271:
	movq	%r12, %r8
	jmp	.LBB1_4264
.LBB1_4277:
	movq	%r12, %r8
	jmp	.LBB1_4264
.LBB1_4295:
	movq	%r12, %r8
	jmp	.LBB1_4264
.LBB1_4291:
	movq	%r12, %r8
	jmp	.LBB1_4264
.LBB1_4040:                             # %if.end78.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4042:                             # %L11486.i
	cmpq	$86, %rcx
	jne	.LBB1_4043
# BB#4060:                              # %L7861.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393279, %rcx           # imm = 0x6003F
	jne	.LBB1_4062
# BB#4061:                              # %land.lhs.true176.i
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	je	.LBB1_4063
.LBB1_4062:                             # %if.end182.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4046:                             # %L7815.i
	movq	8(%rax), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4048
# BB#4047:                              # %if.then105.i12924
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_4048
# BB#4049:                              # %L11489.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB1_4051
# BB#4050:                              # %land.lhs.true.i12928
	movl	16(%r14), %eax
	testq	%rax, %rax
	jne	.LBB1_4051
# BB#4057:                              # %L7817.i
	movq	8(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4051
# BB#4058:                              # %if.then145.i12940
	movzbl	target_flags+2(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$704, %rdx              # imm = 0x2C0
	testq	$4, %rax
	movq	%r12, %rcx
	jne	.LBB1_4569
# BB#4059:                              # %if.end151.i
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	16(%rax), %r14
.LBB1_4051:                             # %L11490.i
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB1_4056
# BB#4052:                              # %if.then134.i12933
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$705, %rdx              # imm = 0x2C1
	jmp	.LBB1_4053
.LBB1_4038:                             # %sw.epilog66.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4083:                             # %L7939.i
	movq	8(%rax), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4085
# BB#4084:                              # %if.then328.i12972
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_4085
# BB#4086:                              # %L11493.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	jne	.LBB1_4088
# BB#4087:                              # %land.lhs.true349.i
	movl	16(%r14), %eax
	testq	%rax, %rax
	jne	.LBB1_4088
# BB#4091:                              # %L7941.i
	movq	8(%r14), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4088
# BB#4092:                              # %if.then369.i12983
	movzbl	target_flags+2(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	movq	$720, %rdx              # imm = 0x2D0
	testq	$4, %rax
	movq	%r12, %rcx
	jne	.LBB1_4569
# BB#4093:                              # %if.end375.i
	movq	16(%rcx), %rax
	movq	%rcx, %r12
	movq	16(%rax), %r14
.LBB1_4088:                             # %L11494.i
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB1_4090
# BB#4089:                              # %if.then358.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$721, %rdx              # imm = 0x2D1
	jmp	.LBB1_4053
.LBB1_3870:                             # %L11463
	cmpq	$103, %rax
	jne	.LBB1_3871
# BB#3946:                              # %L8394
	movq	8(%rbx), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3947:                              # %if.then6578
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3948:                              # %if.then6589
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$776, %rdx              # imm = 0x308
	testq	$64, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3949:                              # %if.end6599
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3954:                             # %L8479
	movq	8(%rbx), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3955:                              # %if.then6698
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3956:                              # %if.then6709
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$790, %rdx              # imm = 0x316
	testq	$64, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3957:                              # %if.end6719
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3865:                             # %L11463
	cmpq	$90, %rax
	jne	.LBB1_3417
# BB#3866:                              # %L8460
	movq	8(%rbx), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3867:                              # %if.then6668
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3868:                              # %if.then6679
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$787, %rdx              # imm = 0x313
	testq	$64, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3869:                              # %if.end6689
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3880:                             # %L11472
	cmpq	$126, %rcx
	jne	.LBB1_3417
# BB#3881:                              # %L8113
	movq	8(%rax), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3882:                              # %if.then5889
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3417
# BB#3883:                              # %land.lhs.true5902
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_3417
# BB#3884:                              # %L8115
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3417
# BB#3885:                              # %land.lhs.true5923
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3417
# BB#3886:                              # %L8116
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %r8
	jne	.LBB1_3889
# BB#3887:                              # %land.lhs.true5943
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3889
# BB#3888:                              # %land.lhs.true5949
	movzbl	target_flags+2(%rip), %eax
	movq	$740, %rdx              # imm = 0x2E4
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3889:                             # %if.end5954
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3836:                             # %L8500.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2097302, %rcx          # imm = 0x200096
	jne	.LBB1_3842
# BB#3837:                              # %L8501.i
	movq	8(%rax), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3838:                              # %if.then1112.i12873
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2097302, %rcx          # imm = 0x200096
	jne	.LBB1_3842
# BB#3839:                              # %L8503.i
	movq	8(%rax), %rbx
	movq	$33, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3840:                              # %if.then1135.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$793, %rdx              # imm = 0x319
	jmp	.LBB1_3841
.LBB1_3709:                             # %L8174.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3710:                              # %if.then37.i12714
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3711:                              # %if.then45.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$749, %rdx              # imm = 0x2ED
	jmp	.LBB1_3841
.LBB1_3712:                             # %L8186.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3713:                              # %if.then57.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3714:                              # %if.then65.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$751, %rdx              # imm = 0x2EF
	jmp	.LBB1_3841
.LBB1_3718:                             # %L8216.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3719:                              # %if.then97.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3720:                              # %if.then105.i12723
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$756, %rdx              # imm = 0x2F4
	jmp	.LBB1_3841
.LBB1_3721:                             # %L8228.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3722:                              # %if.then117.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3723:                              # %if.then125.i12730
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$758, %rdx              # imm = 0x2F6
	jmp	.LBB1_3841
.LBB1_3766:                             # %if.end450.i
	movq	$36, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r13, %r8
	je	.LBB1_3842
# BB#3767:                              # %if.then453.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2359441, %rcx          # imm = 0x240091
	jne	.LBB1_3842
# BB#3768:                              # %L8361.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196730, %rcx           # imm = 0x3007A
	jne	.LBB1_3842
# BB#3769:                              # %L8362.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3770:                              # %if.then896.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	immediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3771:                              # %if.then904.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	movq	$771, %rdx              # imm = 0x303
	jmp	.LBB1_3742
.LBB1_3778:                             # %if.then497.i
	testq	%r15, %rdx
	movq	%rsi, %r8
	jne	.LBB1_3842
# BB#3779:                              # %L8546.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3780:                              # %land.lhs.true516.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3842
# BB#3781:                              # %L8547.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3782:                              # %land.lhs.true533.i12794
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3842
# BB#3783:                              # %L8548.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3784:                              # %land.lhs.true550.i
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB1_3842
# BB#3785:                              # %L8549.i
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2359439, %rax          # imm = 0x24008F
	jne	.LBB1_3842
# BB#3786:                              # %L8550.i
	movq	8(%r14), %r12
	movq	$36, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	register_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3787:                              # %if.then578.i12800
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3842
# BB#3788:                              # %land.lhs.true588.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_3842
# BB#3789:                              # %L8552.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3790:                              # %land.lhs.true606.i12806
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3842
# BB#3791:                              # %L8553.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3792:                              # %land.lhs.true623.i12808
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3842
# BB#3793:                              # %L8554.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3794:                              # %land.lhs.true640.i
	movq	8(%rcx), %rcx
	cmpq	$3, %rcx
	jne	.LBB1_3842
# BB#3795:                              # %L8555.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3796:                              # %land.lhs.true657.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3842
# BB#3797:                              # %L8556.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3798:                              # %land.lhs.true672.i12812
	movq	8(%rax), %rax
	cmpq	$5, %rax
	jne	.LBB1_3842
# BB#3799:                              # %land.lhs.true678.i
	movzbl	target_flags+1(%rip), %eax
	movq	$796, %rdx              # imm = 0x31C
	jmp	.LBB1_3841
.LBB1_4283:
	movq	%r12, %r8
.LBB1_4264:                             # %L8303
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB1_4267
# BB#4265:                              # %land.lhs.true7612
	cmpq	$0, 8(%rbx)
	jne	.LBB1_4267
# BB#4266:                              # %land.lhs.true7618
	movzbl	target_flags+1(%rip), %eax
	movq	$765, %rdx              # imm = 0x2FD
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_4267:                             # %if.end7623
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4131:                             # %if.end602.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4136:                             # %if.end620.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4071:                             # %if.end255.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4076:                             # %if.end273.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3433:                             # %L11412
	cmpq	$56, %rcx
	movq	%r12, %r8
	jne	.LBB1_3434
# BB#3445:                              # %L8000
	movq	%r8, %r13
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2424832, %rcx          # imm = 0x250000
	jne	.LBB1_3446
# BB#3447:                              # %L11415
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jne	.LBB1_3448
# BB#3456:                              # %L8009
	movq	8(%r14), %r14
	movq	$37, %rsi
	movq	%r14, %rdi
	callq	sse_comparison_operator
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3457:                              # %if.then5292
	movq	%r14, recog_data+24(%rip)
	movq	8(%r14), %r12
	movq	$46, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3458:                              # %if.then5303
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3459:                              # %if.then5314
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2424895, %rcx          # imm = 0x25003F
	jne	.LBB1_3446
# BB#3460:                              # %land.lhs.true5333
	movl	16(%rax), %ecx
	testq	%rcx, %rcx
	jne	.LBB1_3446
# BB#3461:                              # %L8013
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3462:                              # %L8014
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r13, %r8
	jne	.LBB1_3465
# BB#3463:                              # %land.lhs.true5362
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3465
# BB#3464:                              # %land.lhs.true5368
	movzbl	target_flags+2(%rip), %eax
	movq	$730, %rdx              # imm = 0x2DA
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3465:                             # %if.end5373
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3434:                             # %sw.default5207
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3563:                             # %L11418
	cmpq	$129, %rax
	movq	%rbx, %r8
	jne	.LBB1_3668
# BB#3564:                              # %L8352.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2555980, %rax          # imm = 0x27004C
	jne	.LBB1_3668
# BB#3565:                              # %L8353.i
	movq	8(%rbx), %r14
	movq	$39, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3566:                              # %if.then339.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3567:                              # %if.then347.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$770, %rdx              # imm = 0x302
	jmp	.LBB1_3562
.LBB1_3515:                             # %L11418
	cmpq	$103, %rax
	jne	.LBB1_3516
# BB#3568:                              # %L8382.i
	movq	8(%r14), %r12
	movq	$39, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%rbx, %r8
	je	.LBB1_3668
# BB#3569:                              # %if.then362.i
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3570:                              # %if.then370.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$774, %rdx              # imm = 0x306
	jmp	.LBB1_3667
.LBB1_3537:                             # %L8322.i
	movq	8(%r14), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	(%rax), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2555979, %rax          # imm = 0x27004B
	movq	%rbx, %r8
	jne	.LBB1_3668
# BB#3538:                              # %L8323.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2555979, %rax          # imm = 0x27004B
	jne	.LBB1_3668
# BB#3539:                              # %L8324.i
	movq	8(%r12), %r13
	movq	$39, %rsi
	movq	%r13, %rdi
	movq	%r8, %rbx
	callq	register_operand
	movq	%rbx, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3540:                              # %if.then157.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r12), %r12
	movq	$39, %rsi
	movq	%r12, %rdi
	movq	%r8, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3541:                              # %if.then165.i
	movq	%r12, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2555960, %rcx          # imm = 0x270038
	jne	.LBB1_3668
# BB#3542:                              # %land.lhs.true179.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$8, %rcx
	jne	.LBB1_3668
# BB#3543:                              # %L8327.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3544:                              # %land.lhs.true192.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3545:                              # %L8328.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3546:                              # %land.lhs.true206.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3547:                              # %L8329.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3548:                              # %land.lhs.true221.i12571
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3549:                              # %L8330.i
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3550:                              # %land.lhs.true236.i12574
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3551:                              # %L8331.i
	movq	40(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3552:                              # %land.lhs.true251.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3553:                              # %L8332.i
	movq	48(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3554:                              # %land.lhs.true266.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3555:                              # %L8333.i
	movq	56(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3556:                              # %land.lhs.true281.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3557:                              # %L8334.i
	movq	64(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3668
# BB#3558:                              # %land.lhs.true296.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3668
# BB#3559:                              # %L8335.i
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3668
# BB#3560:                              # %land.lhs.true309.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3668
# BB#3561:                              # %land.lhs.true314.i
	movzbl	target_flags+2(%rip), %eax
	movq	$768, %rdx              # imm = 0x300
	jmp	.LBB1_3562
.LBB1_3511:                             # %L11418
	cmpq	$95, %rax
	movq	%rbx, %r8
	jne	.LBB1_3668
# BB#3512:                              # %L8418.i
	movq	8(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3513:                              # %if.then402.i12593
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3514:                              # %if.then410.i12594
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$780, %rdx              # imm = 0x30C
.LBB1_3562:                             # %land.lhs.true314.i
	testq	$69, %rax
	jne	.LBB1_4569
	jmp	.LBB1_3668
.LBB1_3574:                             # %L8492.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$2293760, %rdx          # imm = 0x230000
	jne	.LBB1_3668
# BB#3575:                              # %L11432.i
	movq	%r8, %r12
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$151, %rcx
	jne	.LBB1_3576
# BB#3581:                              # %L8509.i
	movq	8(%rax), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3668
# BB#3582:                              # %if.then496.i12610
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2293911, %rcx          # imm = 0x230097
	jne	.LBB1_3668
# BB#3583:                              # %L8511.i
	movq	8(%rax), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3584:                              # %if.then517.i12614
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$794, %rdx              # imm = 0x31A
	jmp	.LBB1_3667
.LBB1_3525:                             # %L8168.i
	movq	8(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3526:                              # %if.then33.i12544
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3527:                              # %if.then41.i12545
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$748, %rdx              # imm = 0x2EC
	jmp	.LBB1_3667
.LBB1_3528:                             # %L8180.i
	movq	8(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3529:                              # %if.then53.i12550
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3530:                              # %if.then61.i12551
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$750, %rdx              # imm = 0x2EE
	jmp	.LBB1_3667
.LBB1_3531:                             # %L8210.i
	movq	8(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3532:                              # %if.then93.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3533:                              # %if.then101.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$755, %rdx              # imm = 0x2F3
	jmp	.LBB1_3667
.LBB1_3534:                             # %L8222.i
	movq	8(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3535:                              # %if.then113.i12557
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3536:                              # %if.then121.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$757, %rdx              # imm = 0x2F5
	jmp	.LBB1_3667
.LBB1_3592:                             # %if.then578.i
	andq	%r15, %rdx
	cmpq	$4, %rdx
	movq	%rsi, %r8
	jne	.LBB1_3668
# BB#3593:                              # %L8520.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3594:                              # %land.lhs.true597.i
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3668
# BB#3595:                              # %L8521.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3596:                              # %land.lhs.true614.i
	movq	8(%rcx), %rcx
	cmpq	$5, %rcx
	jne	.LBB1_3668
# BB#3597:                              # %L8522.i
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3598:                              # %land.lhs.true631.i12628
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3599:                              # %L8523.i
	movq	40(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3600:                              # %land.lhs.true648.i
	movq	8(%rcx), %rcx
	cmpq	$6, %rcx
	jne	.LBB1_3668
# BB#3601:                              # %L8524.i
	movq	48(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3602:                              # %land.lhs.true665.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3668
# BB#3603:                              # %L8525.i
	movq	56(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3604:                              # %land.lhs.true682.i12635
	movq	8(%rcx), %rcx
	cmpq	$7, %rcx
	jne	.LBB1_3668
# BB#3605:                              # %L8526.i
	movq	64(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3668
# BB#3606:                              # %land.lhs.true699.i
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB1_3668
# BB#3607:                              # %L8527.i
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2556047, %rax          # imm = 0x27008F
	jne	.LBB1_3668
# BB#3608:                              # %L8528.i
	movq	8(%rbx), %r12
	movq	$39, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	register_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3609:                              # %if.then727.i
	movq	%r12, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3668
# BB#3610:                              # %land.lhs.true737.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$8, %rcx
	jne	.LBB1_3668
# BB#3611:                              # %L8530.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3612:                              # %land.lhs.true755.i
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3668
# BB#3613:                              # %L8531.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3614:                              # %land.lhs.true772.i
	movq	8(%rcx), %rcx
	cmpq	$4, %rcx
	jne	.LBB1_3668
# BB#3615:                              # %L8532.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3616:                              # %land.lhs.true789.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3668
# BB#3617:                              # %L8533.i
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3618:                              # %land.lhs.true806.i
	movq	8(%rcx), %rcx
	cmpq	$5, %rcx
	jne	.LBB1_3668
# BB#3619:                              # %L8534.i
	movq	40(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3620:                              # %land.lhs.true823.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3668
# BB#3621:                              # %L8535.i
	movq	48(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3622:                              # %land.lhs.true840.i
	movq	8(%rcx), %rcx
	cmpq	$6, %rcx
	jne	.LBB1_3668
# BB#3623:                              # %L8536.i
	movq	56(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3668
# BB#3624:                              # %land.lhs.true857.i
	movq	8(%rcx), %rcx
	cmpq	$3, %rcx
	jne	.LBB1_3668
# BB#3625:                              # %L8537.i
	movq	64(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3668
# BB#3626:                              # %land.lhs.true874.i
	movq	8(%rax), %rax
	cmpq	$7, %rax
	jne	.LBB1_3668
# BB#3627:                              # %L8538.i
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3668
# BB#3628:                              # %land.lhs.true889.i
	movq	8(%rax), %rax
	cmpq	$85, %rax
	jne	.LBB1_3668
# BB#3629:                              # %land.lhs.true895.i12655
	movzbl	target_flags+1(%rip), %eax
	movq	$795, %rdx              # imm = 0x31B
	jmp	.LBB1_3667
.LBB1_3163:                             # %lor.lhs.false4632
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	%rcx, %rax
	movq	$684, %rdx              # imm = 0x2AC
	je	.LBB1_4569
.LBB1_3162:                             # %if.end4544
	movq	8(%rax), %r13
	movq	%rax, %r12
	jmp	.LBB1_3126
.LBB1_3384:                             # %L7777
	movq	8(%rax), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3383
# BB#3385:                              # %if.then4878
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$698, %rdx              # imm = 0x2BA
	testq	$5, %rax
	movq	%r14, %r8
	jne	.LBB1_4569
# BB#3386:                              # %if.end4888
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3382:                             # %L11408
	cmpq	$45, %rcx
	jne	.LBB1_3383
# BB#3390:                              # %L7983
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r14, %r8
	jne	.LBB1_3393
# BB#3391:                              # %land.lhs.true4922
	cmpq	$0, 8(%rax)
	jne	.LBB1_3393
# BB#3392:                              # %land.lhs.true4928
	movzbl	target_flags+2(%rip), %eax
	movq	$726, %rdx              # imm = 0x2D6
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3393:                             # %if.end4933
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3187:                             # %L11364
	cmpq	$92, %rax
	jne	.LBB1_3188
# BB#3414:                              # %L8090
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3415:                              # %if.then5111
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3416:                              # %if.then5122
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$737, %rdx              # imm = 0x2E1
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
	jmp	.LBB1_3418
.LBB1_3398:                             # %L7735
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3399:                              # %if.then4972
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3400:                              # %if.then4983
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$692, %rdx              # imm = 0x2B4
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3401:                              # %if.end4993
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3402:                             # %L7749
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3403:                              # %if.then5002
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3404:                              # %if.then5013
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$694, %rdx              # imm = 0x2B6
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3405:                              # %if.end5023
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3406:                             # %L7763
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3407:                              # %if.then5032
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3408:                              # %if.then5043
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$696, %rdx              # imm = 0x2B8
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3409:                              # %if.end5053
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3207:                             # %L11382
	cmpq	$142, %rax
	jg	.LBB1_3232
# BB#3208:                              # %L11382
	cmpq	$129, %rax
	jg	.LBB1_3226
# BB#3209:                              # %L11382
	cmpq	$91, %rax
	jg	.LBB1_3218
# BB#3210:                              # %L11382
	cmpq	$74, %rax
	jg	.LBB1_3216
# BB#3211:                              # %L11382
	cmpq	$61, %rax
	je	.LBB1_3213
# BB#3212:                              # %L11382
	cmpq	$63, %rax
	jne	.LBB1_3233
.LBB1_3213:                             # %L11380.i
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3233
# BB#3214:                              # %if.then.i12370
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$3014656, %rcx          # imm = 0x2E0000
	jne	.LBB1_3215
# BB#3327:                              # %L11398.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$142, %rax
	jg	.LBB1_3334
# BB#3328:                              # %L11398.i
	cmpq	$61, %rax
	je	.LBB1_3330
# BB#3329:                              # %L11398.i
	cmpq	$63, %rax
	jne	.LBB1_3336
.LBB1_3330:                             # %L11399.i
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3336
# BB#3331:                              # %if.then798.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	jne	.LBB1_3373
# BB#3332:                              # %land.lhs.true1069.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3373
# BB#3333:                              # %land.lhs.true1075.i
	movzbl	target_flags+2(%rip), %eax
	movq	$687, %rdx              # imm = 0x2AF
	jmp	.LBB1_3372
.LBB1_3201:                             # %L11394.i
	cmpq	$42, %rcx
	movq	%r12, %r8
	jne	.LBB1_3242
# BB#3202:                              # %L7783.i
	movq	8(%rax), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3203:                              # %if.then191.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3204:                              # %if.then199.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3205:                              # %land.lhs.true208.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3206:                              # %land.lhs.true213.i
	movzbl	target_flags+2(%rip), %eax
	movq	$699, %rdx              # imm = 0x2BB
	jmp	.LBB1_3241
.LBB1_4105:                             # %sw.epilog433.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4123:                             # %L7871.i
	movq	8(%rax), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4594
# BB#4124:                              # %if.then538.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB1_4594
# BB#4125:                              # %if.then549.i13023
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$711, %rdx              # imm = 0x2C7
	testq	$5, %rax
	jmp	.LBB1_4054
.LBB1_4110:                             # %if.end465.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4116:                             # %if.end483.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4145:                             # %if.end689.i13045
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4150:                             # %if.end707.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3729:                             # %L11455.i
	cmpq	$120, %rcx
	movq	%r13, %r8
	jne	.LBB1_3842
# BB#3730:                              # %L8243.i
	movq	8(%rax), %r12
	movq	$36, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	register_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3731:                              # %if.then196.i
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2424952, %rcx          # imm = 0x250078
	jne	.LBB1_3842
# BB#3732:                              # %L8245.i
	movq	8(%rax), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3733:                              # %if.then217.i12752
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3734:                              # %land.lhs.true226.i12755
	movq	8(%rax), %rax
	cmpq	$16, %rax
	jne	.LBB1_3842
# BB#3735:                              # %land.lhs.true230.i12757
	movzbl	target_flags+1(%rip), %eax
	movq	$760, %rdx              # imm = 0x2F8
	jmp	.LBB1_3841
.LBB1_3699:                             # %L11436
	cmpq	$103, %rax
	jne	.LBB1_3700
# BB#3821:                              # %L8388.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3842
# BB#3822:                              # %if.then963.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3823:                              # %if.then971.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$775, %rdx              # imm = 0x307
	jmp	.LBB1_3841
.LBB1_3743:                             # %L8339.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2359296, %rcx          # imm = 0x240000
	jne	.LBB1_3842
# BB#3744:                              # %L11457.i
	movq	%r8, %r13
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB1_3745
# BB#3748:                              # %L8340.i
	movq	8(%r14), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2359371, %rax          # imm = 0x24004B
	movq	%r13, %r8
	jne	.LBB1_3842
# BB#3749:                              # %L8341.i
	movq	8(%r12), %r13
	movq	$36, %rsi
	movq	%r13, %rdi
	movq	%r8, 8(%rsp)            # 8-byte Spill
	callq	register_operand
	movq	8(%rsp), %r8            # 8-byte Reload
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3750:                              # %if.then319.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r12), %r12
	movq	$36, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	nonimmediate_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3751:                              # %if.then327.i
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2359352, %rcx          # imm = 0x240038
	jne	.LBB1_3842
# BB#3752:                              # %land.lhs.true341.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_3842
# BB#3753:                              # %L8344.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3754:                              # %land.lhs.true354.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3842
# BB#3755:                              # %L8345.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3756:                              # %land.lhs.true369.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3842
# BB#3757:                              # %L8346.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3842
# BB#3758:                              # %land.lhs.true384.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3842
# BB#3759:                              # %L8347.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3760:                              # %land.lhs.true399.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3842
# BB#3761:                              # %L8348.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3842
# BB#3762:                              # %land.lhs.true412.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3842
# BB#3763:                              # %land.lhs.true417.i
	movzbl	target_flags+2(%rip), %eax
	movq	$769, %rdx              # imm = 0x301
	jmp	.LBB1_3742
.LBB1_3830:                             # %L8454.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3831:                              # %if.then1055.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonmemory_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3832:                              # %if.then1063.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$786, %rdx              # imm = 0x312
	jmp	.LBB1_3841
.LBB1_3827:                             # %L8436.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3828:                              # %if.then1030.i12861
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3829:                              # %if.then1038.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$783, %rdx              # imm = 0x30F
	jmp	.LBB1_3742
.LBB1_3824:                             # %L8424.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3825:                              # %if.then1005.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3826:                              # %if.then1013.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$781, %rdx              # imm = 0x30D
.LBB1_3742:                             # %land.lhs.true275.i
	testq	$69, %rax
	jne	.LBB1_4569
	jmp	.LBB1_3842
.LBB1_4043:                             # %sw.epilog87.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4063:                             # %L7862.i
	movq	8(%rax), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB1_4594
# BB#4064:                              # %if.then191.i12948
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB1_4594
# BB#4065:                              # %if.then202.i
	movzbl	target_flags+2(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	movq	$710, %rdx              # imm = 0x2C6
.LBB1_4053:                             # %if.then134.i12933
	testq	$4, %rax
.LBB1_4054:                             # %if.then134.i12933
	movq	%r12, %rax
	jne	.LBB1_4569
# BB#4055:                              # %if.end161.i12941
	movq	8(%rax), %r14
	movq	%rax, %r12
	jmp	.LBB1_4006
.LBB1_4048:                             # %if.end119.i12925
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4056:                             # %if.end136.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4085:                             # %if.end342.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_4090:                             # %if.end360.i
	movq	8(%r12), %r14
	jmp	.LBB1_4006
.LBB1_3871:                             # %L11463
	cmpq	$105, %rax
	jne	.LBB1_3417
# BB#3872:                              # %L8412
	movq	8(%rbx), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3873:                              # %if.then6608
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3417
# BB#3874:                              # %if.then6619
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$779, %rdx              # imm = 0x30B
	testq	$64, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3875:                              # %if.end6629
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3417:                             # %if.end5124
	movq	%r12, %r8
.LBB1_3418:                             # %if.end5132
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3448:                             # %if.end5278
	movq	$37, %rsi
	movq	%r14, %rdi
	callq	sse_comparison_operator
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3449:                              # %if.then5281
	movq	%r14, recog_data+24(%rip)
	movq	8(%r14), %r12
	movq	$46, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3450:                              # %if.then5382
	movq	%r12, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3451:                              # %if.then5393
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_3446
# BB#3452:                              # %L8004
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r13, %r8
	jne	.LBB1_3455
# BB#3453:                              # %land.lhs.true5417
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3455
# BB#3454:                              # %land.lhs.true5423
	movzbl	target_flags+2(%rip), %eax
	movq	$729, %rdx              # imm = 0x2D9
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3455:                             # %if.end5428
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3446:                             # %if.end5269
	movq	%r13, %r8
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3516:                             # %L11418
	cmpq	$105, %rax
	movq	%rbx, %r8
	jne	.LBB1_3668
# BB#3517:                              # %L8400.i
	movq	8(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3518:                              # %if.then382.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3519:                              # %if.then390.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$777, %rdx              # imm = 0x309
	jmp	.LBB1_3667
.LBB1_3576:                             # %L11432.i
	cmpq	$150, %rcx
	movq	%r12, %r8
	jne	.LBB1_3668
# BB#3577:                              # %L8493.i
	movq	8(%rax), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3578:                              # %if.then463.i12604
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2293910, %rcx          # imm = 0x230096
	jne	.LBB1_3668
# BB#3579:                              # %L8495.i
	movq	8(%rax), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3668
# BB#3580:                              # %if.then484.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$792, %rdx              # imm = 0x318
.LBB1_3667:                             # %land.lhs.true1208.i
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_3668:                             # %if.end5702
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3383:                             # %sw.epilog4867
	movq	%r14, %r8
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3188:                             # %L11364
	cmpq	$93, %rax
	movq	%r12, %r8
	jne	.LBB1_3194
# BB#3189:                              # %L8076
	movq	%r8, %r12
	movq	8(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3190:                              # %if.then5081
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_3196
# BB#3191:                              # %if.then5092
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$735, %rdx              # imm = 0x2DF
	testq	$5, %rax
	movq	%r12, %r8
	jne	.LBB1_4569
# BB#3192:                              # %if.end5102
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3194:                             # %sw.epilog4767
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3232:                             # %L11382
	cmpq	$143, %rax
	jne	.LBB1_3233
# BB#3272:                              # %L8041.i
	movq	8(%r14), %r13
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3273:                              # %if.then289.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3242
# BB#3274:                              # %land.lhs.true298.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_3242
# BB#3275:                              # %L8043.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3276:                              # %L11396.i
	movq	8(%rcx), %rdx
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	%rdx, %rsi
	jne	.LBB1_3242
# BB#3277:                              # %if.then325.i12435
	movq	%r8, %rsi
	testq	%r15, %rdx
	jne	.LBB1_3278
# BB#3300:                              # %L8062.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	movq	%rsi, %r8
	jne	.LBB1_3242
# BB#3301:                              # %land.lhs.true520.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3242
# BB#3302:                              # %L8063.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3303:                              # %land.lhs.true537.i
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3242
# BB#3304:                              # %L8064.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3305:                              # %land.lhs.true554.i12464
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB1_3242
# BB#3306:                              # %L8065.i
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3014799, %rax          # imm = 0x2E008F
	jne	.LBB1_3242
# BB#3307:                              # %L8066.i
	movq	8(%r14), %r12
	movq	$46, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	register_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3308:                              # %if.then582.i
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3242
# BB#3309:                              # %land.lhs.true592.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_3242
# BB#3310:                              # %L8068.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3311:                              # %land.lhs.true610.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3242
# BB#3312:                              # %L8069.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3313:                              # %land.lhs.true627.i
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3242
# BB#3314:                              # %L8070.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3315:                              # %land.lhs.true644.i12479
	movq	8(%rcx), %rcx
	cmpq	$3, %rcx
	jne	.LBB1_3242
# BB#3316:                              # %L8071.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3317:                              # %land.lhs.true661.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3318:                              # %L8072.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3319:                              # %land.lhs.true676.i12482
	movq	8(%rax), %rax
	cmpq	$5, %rax
	jne	.LBB1_3242
# BB#3320:                              # %land.lhs.true682.i
	movzbl	target_flags+2(%rip), %eax
	movq	$734, %rdx              # imm = 0x2DE
	jmp	.LBB1_3241
.LBB1_3226:                             # %L11382
	cmpq	$130, %rax
	jne	.LBB1_3233
# BB#3227:                              # %L7807.i
	movq	8(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3228:                              # %if.then257.i12426
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3229:                              # %if.then265.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3230:                              # %land.lhs.true274.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3231:                              # %land.lhs.true279.i12429
	movzbl	target_flags+2(%rip), %eax
	movq	$703, %rdx              # imm = 0x2BF
	jmp	.LBB1_3241
.LBB1_3218:                             # %L11382
	cmpq	$92, %rax
	jne	.LBB1_3219
# BB#3321:                              # %L8097.i
	movq	8(%r14), %r13
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3322:                              # %if.then736.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3323:                              # %if.then744.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%r8, %r14
	callq	rtx_equal_p
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3324:                              # %L8100.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3325:                              # %land.lhs.true762.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3326:                              # %land.lhs.true768.i
	movzbl	target_flags+2(%rip), %eax
	movq	$738, %rdx              # imm = 0x2E2
	jmp	.LBB1_3241
.LBB1_3216:                             # %L11382
	addq	$-75, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	ja	.LBB1_3233
# BB#3217:                              # %L11382
	jmpq	*.LJTI1_18(,%rax,8)
.LBB1_3243:                             # %L7728.i
	movq	8(%r14), %r13
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3244:                              # %if.then24.i12382
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3245:                              # %if.then32.i12385
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%r8, %r14
	callq	rtx_equal_p
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3246:                              # %L7731.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3247:                              # %land.lhs.true.i12389
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3248:                              # %land.lhs.true51.i
	movzbl	target_flags+2(%rip), %eax
	movq	$691, %rdx              # imm = 0x2B3
	jmp	.LBB1_3241
.LBB1_3215:                             # %if.end783.i12492
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3334:                             # %L11398.i
	cmpq	$143, %rax
	jne	.LBB1_3335
# BB#3337:                              # %L7660.i
	movq	8(%r14), %r13
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4592
# BB#3338:                              # %if.then809.i
	movq	%r13, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3340
# BB#3339:                              # %land.lhs.true822.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_3340
# BB#3341:                              # %L7662.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3343
# BB#3342:                              # %land.lhs.true843.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3343
# BB#3344:                              # %L7663.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3346
# BB#3345:                              # %land.lhs.true863.i
	movq	8(%rcx), %rcx
	cmpq	$3, %rcx
	jne	.LBB1_3346
# BB#3347:                              # %L7664.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3349
# BB#3348:                              # %land.lhs.true883.i
	cmpq	$0, 8(%rcx)
	je	.LBB1_3350
.LBB1_3349:                             # %if.end890.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3700:                             # %L11436
	cmpq	$105, %rax
	movq	%r12, %r8
	jne	.LBB1_3842
# BB#3701:                              # %L8406.i
	movq	8(%rbx), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	register_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3702:                              # %if.then984.i12857
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonimmediate_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3703:                              # %if.then992.i12858
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$778, %rdx              # imm = 0x30A
	jmp	.LBB1_3841
.LBB1_3745:                             # %if.end295.i12769
	movq	$36, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r13, %r8
	je	.LBB1_3842
# BB#3746:                              # %if.then298.i12770
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	nonmemory_operand
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3842
# BB#3747:                              # %if.then430.i
	movzbl	target_flags+1(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$784, %rdx              # imm = 0x310
.LBB1_3841:                             # %if.then1135.i
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_3842:                             # %if.end5776
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_4594:                             # %if.end551.i
	movq	8(%r12), %r14
.LBB1_4006:                             # %L10908.i
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB1_4015
# BB#4007:                              # %if.then.i12886
	movq	%r14, recog_data(%rip)
	movq	16(%r12), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB1_4014
# BB#4008:                              # %if.then741.i
	movl	target_flags(%rip), %ecx
	movq	%r14, recog_data+8(%rip)
	movq	%rcx, %rax
	andq	$33554432, %rax         # imm = 0x2000000
	testq	$327680, %rcx           # imm = 0x50000
	movq	%r12, %rcx
	je	.LBB1_4010
# BB#4009:                              # %if.then741.i
	movq	$672, %rdx              # imm = 0x2A0
	testq	%r15, %rax
	je	.LBB1_4569
.LBB1_4010:                             # %L7610.i
	testq	%r15, %rax
	je	.LBB1_4013
# BB#4011:                              # %land.lhs.true756.i
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$673, %rdx              # imm = 0x2A1
	jne	.LBB1_4569
# BB#4012:                              # %lor.lhs.false.i13056
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
.LBB1_4013:                             # %if.end766.i
	movq	8(%rcx), %r14
	movq	%rcx, %r12
	jmp	.LBB1_4015
.LBB1_4014:                             # %if.end743.i13052
	movq	8(%r12), %r14
.LBB1_4015:                             # %L10916.i
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4016
# BB#4017:                              # %if.then5.i12893
	movq	%r14, recog_data(%rip)
	movq	%r12, %r8
	movq	16(%r8), %r12
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_31
# BB#4018:                              # %L11507.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$85, %rax
	je	.LBB1_4190
# BB#4019:                              # %L11507.i
	cmpq	$84, %rax
	jne	.LBB1_4020
# BB#4179:                              # %L7925.i
	movq	%r8, %rbx
	movq	8(%r12), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4180
# BB#4181:                              # %if.then876.i13072
	movq	%r14, recog_data+8(%rip)
	movq	16(%r12), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4182
# BB#4183:                              # %if.then884.i
	movl	target_flags(%rip), %ecx
	movq	%r14, recog_data+16(%rip)
	movq	%rcx, %rax
	andq	$262144, %rax           # imm = 0x40000
	testq	$327680, %rcx           # imm = 0x50000
	movq	%rbx, %r8
	je	.LBB1_4187
# BB#4184:                              # %if.then884.i
	testq	%r15, %rax
	jne	.LBB1_4187
# BB#4185:                              # %land.lhs.true892.i
	movq	recog_data+8(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	movq	$718, %rdx              # imm = 0x2CE
	jne	.LBB1_4569
# BB#4186:                              # %lor.lhs.false897.i
	movzbl	(%r14), %ecx
	cmpq	$66, %rcx
	jne	.LBB1_4569
.LBB1_4187:                             # %L7933.i
	testq	%r15, %rax
	je	.LBB1_31
# BB#4188:                              # %land.lhs.true906.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$719, %rdx              # imm = 0x2CF
	jne	.LBB1_4569
	jmp	.LBB1_4189
.LBB1_4016:
	movq	%r12, %r8
.LBB1_31:                               # %L8674
	movq	%r13, recog_data(%rip)
	movq	16(%r8), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342378, %rcx          # imm = 0x33002A
	jne	.LBB1_32
# BB#4348:                              # %land.lhs.true8239
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB1_32
# BB#4349:                              # %land.lhs.true8246
	movl	16(%rax), %eax
	cmpq	$44, %rax
	jne	.LBB1_32
# BB#4350:                              # %L8676
	movq	8(%rcx), %rdi
	movq	%r13, %rsi
	movq	%r8, %rbx
	callq	rtx_equal_p
	movq	%rbx, %r8
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB1_32
# BB#4351:                              # %land.lhs.true8265
	movzbl	target_flags+2(%rip), %eax
	movq	$804, %rdx              # imm = 0x324
	testq	$69, %rax
	jne	.LBB1_4569
.LBB1_32:                               # %L8701
	movq	8(%r8), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$43, %rax
	jg	.LBB1_4352
# BB#33:                                # %L8701
	movq	%r8, %r12
	cmpq	$33, %rax
	je	.LBB1_4511
# BB#34:                                # %L8701
	cmpq	$36, %rax
	jne	.LBB1_35
# BB#4545:                              # %L10928
	movq	$36, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB1_4568
# BB#4546:                              # %if.then8560
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2359418, %rcx          # imm = 0x24007A
	jne	.LBB1_4568
# BB#4547:                              # %L8924
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2424922, %rax          # imm = 0x25005A
	jne	.LBB1_4568
# BB#4548:                              # %L8925
	movq	8(%rbx), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2424907, %rax          # imm = 0x25004B
	jne	.LBB1_4568
# BB#4549:                              # %L8926
	movq	8(%r12), %r13
	movl	(%r13), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2424910, %rax          # imm = 0x25004E
	jne	.LBB1_4568
# BB#4550:                              # %L8927
	movq	8(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2424952, %rcx          # imm = 0x250078
	jne	.LBB1_4568
# BB#4551:                              # %L8928
	movq	8(%rax), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4568
# BB#4552:                              # %if.then8643
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2424952, %rcx          # imm = 0x250078
	jne	.LBB1_4568
# BB#4553:                              # %L8930
	movq	8(%rax), %r14
	movq	$36, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4568
# BB#4554:                              # %if.then8666
	movq	%r14, recog_data+16(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2424888, %rcx          # imm = 0x250038
	jne	.LBB1_4568
# BB#4555:                              # %land.lhs.true8682
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_4568
# BB#4556:                              # %L8932
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_4568
# BB#4557:                              # %land.lhs.true8700
	movq	8(%rcx), %rcx
	cmpq	$32768, %rcx            # imm = 0x8000
	jne	.LBB1_4568
# BB#4558:                              # %L8933
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_4568
# BB#4559:                              # %land.lhs.true8717
	movq	8(%rcx), %rcx
	cmpq	$32768, %rcx            # imm = 0x8000
	jne	.LBB1_4568
# BB#4560:                              # %L8934
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_4568
# BB#4561:                              # %land.lhs.true8734
	movq	8(%rcx), %rcx
	cmpq	$32768, %rcx            # imm = 0x8000
	jne	.LBB1_4568
# BB#4562:                              # %L8935
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4568
# BB#4563:                              # %land.lhs.true8751
	movq	8(%rax), %rax
	cmpq	$32768, %rax            # imm = 0x8000
	jne	.LBB1_4568
# BB#4564:                              # %L8936
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4568
# BB#4565:                              # %land.lhs.true8766
	movq	8(%rax), %rax
	cmpq	$16, %rax
	jne	.LBB1_4568
# BB#4566:                              # %land.lhs.true8772
	movzbl	target_flags+2(%rip), %eax
	movq	$829, %rdx              # imm = 0x33D
	jmp	.LBB1_4567
.LBB1_4352:                             # %L8701
	cmpq	$44, %rax
	jne	.LBB1_4568
# BB#4353:                              # %L10925
	movq	$44, %rsi
	movq	%rbx, %rdi
	movq	%r8, %r14
	callq	register_operand
	movq	%r14, %rdx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB1_4568
# BB#4354:                              # %if.then8280
	movq	%rbx, recog_data(%rip)
	movq	16(%rdx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2883584, %rcx          # imm = 0x2C0000
	jne	.LBB1_4568
# BB#4355:                              # %L11528
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jg	.LBB1_4363
# BB#4356:                              # %L11528
	cmpq	$42, %rax
	jne	.LBB1_4510
# BB#4357:                              # %L11541.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_4358
# BB#4489:                              # %L11555.i
	movl	16(%r14), %ecx
	cmpq	$54, %rcx
	je	.LBB1_4498
# BB#4490:                              # %L11555.i
	cmpq	$52, %rcx
	jne	.LBB1_4491
# BB#4495:                              # %L8907.i
	movq	8(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB1_4510
# BB#4496:                              # %if.then940.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB1_4510
# BB#4497:                              # %if.then950.i13291
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$826, %rdx              # imm = 0x33A
	jmp	.LBB1_4423
.LBB1_4511:                             # %L10926
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4512:                              # %if.then8296
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2162688, %rcx          # imm = 0x210000
	jne	.LBB1_4568
# BB#4513:                              # %L11559
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$142, %rax
	jg	.LBB1_4535
# BB#4514:                              # %L11559
	cmpq	$119, %rax
	jg	.LBB1_4521
# BB#4515:                              # %L11559
	cmpq	$103, %rax
	je	.LBB1_4528
# BB#4516:                              # %L11559
	cmpq	$104, %rax
	jne	.LBB1_4517
# BB#4525:                              # %L8727
	movq	8(%rbx), %r15
	movq	$44, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4526:                              # %if.then8345
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4527:                              # %if.then8353
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$810, %rdx              # imm = 0x32A
	jmp	.LBB1_4567
.LBB1_35:                               # %L8701
	cmpq	$39, %rax
	jne	.LBB1_4568
# BB#36:                                # %L10927
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r12, %rcx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB1_4568
# BB#37:                                # %if.then8502
	movq	%rbx, recog_data(%rip)
	movq	16(%rcx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$2555946, %rax          # imm = 0x27002A
	jne	.LBB1_4568
# BB#38:                                # %land.lhs.true8518
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_4568
# BB#39:                                # %land.lhs.true8525
	movl	16(%rbx), %ecx
	cmpq	$49, %rcx
	jne	.LBB1_4568
# BB#40:                                # %L8890
	movq	8(%rax), %r15
	movq	$39, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#41:                                # %if.then8540
	movq	%r15, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#42:                                # %if.then8550
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$823, %rdx              # imm = 0x337
	jmp	.LBB1_4567
.LBB1_4363:                             # %L11528
	cmpq	$142, %rax
	jg	.LBB1_4377
# BB#4364:                              # %L11528
	cmpq	$124, %rax
	jg	.LBB1_4465
# BB#4365:                              # %L11528
	cmpq	$91, %rax
	jg	.LBB1_4372
# BB#4366:                              # %L11528
	cmpq	$75, %rax
	je	.LBB1_4408
# BB#4367:                              # %L11528
	cmpq	$76, %rax
	jne	.LBB1_4368
# BB#4411:                              # %L8709.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$2883584, %rax          # imm = 0x2C0000
	jne	.LBB1_4510
# BB#4412:                              # %L11546.i
	movq	%rdx, %r12
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4417
# BB#4413:                              # %if.then33.i13112
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4416
# BB#4414:                              # %if.then46.i13115
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$807, %rdx              # imm = 0x327
	testq	$16, %rax
	jne	.LBB1_4569
# BB#4415:                              # %if.end55.i13117
	movq	16(%r12), %r14
.LBB1_4416:                             # %if.end48.i13116
	movq	8(%r14), %rbx
.LBB1_4417:                             # %L11547.i
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4418:                              # %if.then38.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4419:                              # %if.then67.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$808, %rdx              # imm = 0x328
	jmp	.LBB1_4423
.LBB1_4535:                             # %L11559
	cmpq	$143, %rax
	jne	.LBB1_4568
# BB#4536:                              # %L8940
	movq	8(%rbx), %r15
	movq	$33, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4537:                              # %if.then8443
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4568
# BB#4538:                              # %land.lhs.true8453
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_4568
# BB#4539:                              # %L8942
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_4568
# BB#4540:                              # %land.lhs.true8471
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_4568
# BB#4541:                              # %L8943
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4568
# BB#4542:                              # %land.lhs.true8488
	cmpq	$0, 8(%rax)
	jne	.LBB1_4568
# BB#4543:                              # %land.lhs.true8494
	movzbl	target_flags+2(%rip), %eax
	movq	$830, %rdx              # imm = 0x33E
	jmp	.LBB1_4544
.LBB1_4377:                             # %L11528
	cmpq	$143, %rax
	jne	.LBB1_4378
# BB#4501:                              # %L8947.i
	movq	8(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4502:                              # %if.then986.i13303
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4503:                              # %land.lhs.true995.i13305
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB1_4510
# BB#4504:                              # %L8949.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_4510
# BB#4505:                              # %land.lhs.true1011.i13310
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4506:                              # %L8950.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4507:                              # %land.lhs.true1026.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_4510
# BB#4508:                              # %land.lhs.true1031.i
	movzbl	target_flags+2(%rip), %eax
	movq	$831, %rdx              # imm = 0x33F
	jmp	.LBB1_4509
.LBB1_4521:                             # %L11559
	cmpq	$120, %rax
	jne	.LBB1_4522
# BB#4531:                              # %L8799
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2097302, %rcx          # imm = 0x200096
	jne	.LBB1_4568
# BB#4532:                              # %L8800
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$2162814, %rcx          # imm = 0x21007E
	jne	.LBB1_4568
# BB#4533:                              # %L8801
	movq	8(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4534:                              # %if.then8430
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$817, %rdx              # imm = 0x331
.LBB1_4544:                             # %land.lhs.true8494
	testq	$64, %rax
	jne	.LBB1_4569
	jmp	.LBB1_4568
.LBB1_4358:                             # %L11541.i
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4359:                              # %L11554.i
	movl	16(%r14), %ecx
	cmpq	$53, %rcx
	jne	.LBB1_4360
# BB#4487:                              # %L8913.i
	movq	8(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB1_4510
# BB#4488:                              # %if.then894.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$827, %rdx              # imm = 0x33B
	jmp	.LBB1_4423
.LBB1_4465:                             # %L11528
	cmpq	$125, %rax
	jne	.LBB1_4510
# BB#4466:                              # %L8869.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$2162688, %rcx          # imm = 0x210000
	jne	.LBB1_4510
# BB#4467:                              # %L11552.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$144, %rax
	jne	.LBB1_4468
# BB#4470:                              # %L8870.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262264, %rcx           # imm = 0x40078
	jne	.LBB1_4510
# BB#4471:                              # %L8871.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196730, %rcx           # imm = 0x3007A
	jne	.LBB1_4510
# BB#4472:                              # %L8872.i
	movq	8(%rax), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262287, %rax           # imm = 0x4008F
	jne	.LBB1_4510
# BB#4473:                              # %L8873.i
	movq	8(%r12), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4474:                              # %if.then744.i13257
	movq	%r14, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4475:                              # %land.lhs.true753.i13260
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4476:                              # %L8875.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4477:                              # %land.lhs.true769.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_4510
# BB#4478:                              # %L8876.i
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262264, %rcx           # imm = 0x40078
	jne	.LBB1_4510
# BB#4479:                              # %L8877.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196730, %rcx           # imm = 0x3007A
	jne	.LBB1_4510
# BB#4480:                              # %L8878.i
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262287, %rax           # imm = 0x4008F
	jne	.LBB1_4510
# BB#4481:                              # %L8879.i
	movq	8(%rbx), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4482:                              # %L8880.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4483:                              # %land.lhs.true829.i13275
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4484:                              # %L8881.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4485:                              # %land.lhs.true845.i13278
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_4510
# BB#4486:                              # %land.lhs.true850.i
	movzbl	target_flags+2(%rip), %eax
	movq	$821, %rdx              # imm = 0x335
	jmp	.LBB1_4509
.LBB1_4378:                             # %L11528
	cmpq	$144, %rax
	jne	.LBB1_4510
# BB#4379:                              # %L8806.i
	movq	8(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB1_4510
# BB#4380:                              # %L11548.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$76, %rax
	jne	.LBB1_4381
# BB#4424:                              # %L8828.i
	movq	8(%rbx), %r13
	movl	(%r13), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4425:                              # %L8829.i
	movq	8(%r13), %r12
	movq	$44, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4426:                              # %if.then378.i13174
	movq	%r12, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4427:                              # %land.lhs.true387.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4428:                              # %L8831.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4429:                              # %land.lhs.true403.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_4510
# BB#4430:                              # %L8832.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4431:                              # %L8833.i
	movq	8(%rbx), %rax
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4432:                              # %L8834.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4433:                              # %land.lhs.true437.i13183
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4434:                              # %L8835.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4435:                              # %land.lhs.true453.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_4510
# BB#4436:                              # %L8836.i
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB1_4510
# BB#4437:                              # %L11550.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB1_4438
# BB#4452:                              # %L8858.i
	movq	8(%rbx), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4453:                              # %L8859.i
	movq	8(%r12), %r14
	movq	$44, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4454:                              # %if.then596.i13219
	movq	%r14, recog_data+16(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4455:                              # %land.lhs.true605.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4456:                              # %L8861.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4457:                              # %land.lhs.true621.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_4510
# BB#4458:                              # %L8862.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4459:                              # %L8863.i
	movq	8(%rbx), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4460:                              # %L8864.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4461:                              # %land.lhs.true655.i13230
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4462:                              # %L8865.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4463:                              # %land.lhs.true671.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_4510
# BB#4464:                              # %land.lhs.true676.i13235
	movzbl	target_flags+2(%rip), %eax
	movq	$820, %rdx              # imm = 0x334
	jmp	.LBB1_4509
.LBB1_4522:                             # %L11559
	cmpq	$126, %rax
	jne	.LBB1_4568
# BB#4523:                              # %L8794
	movq	8(%rbx), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4524:                              # %if.then8387
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$816, %rdx              # imm = 0x330
	jmp	.LBB1_4567
.LBB1_4372:                             # %L11528
	cmpq	$92, %rax
	jne	.LBB1_4373
# BB#4420:                              # %L8745.i
	movq	8(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4421:                              # %if.then99.i13122
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4422:                              # %if.then107.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$813, %rdx              # imm = 0x32D
	jmp	.LBB1_4423
.LBB1_4528:                             # %L8733
	movq	8(%rbx), %r15
	movq	$44, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4529:                              # %if.then8366
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4530:                              # %if.then8374
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$811, %rdx              # imm = 0x32B
	jmp	.LBB1_4567
.LBB1_4517:                             # %L11559
	cmpq	$105, %rax
	jne	.LBB1_4568
# BB#4518:                              # %L8721
	movq	8(%rbx), %r15
	movq	$44, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4519:                              # %if.then8324
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB1_4568
# BB#4520:                              # %if.then8332
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$809, %rdx              # imm = 0x329
.LBB1_4567:                             # %land.lhs.true8772
	testq	$16, %rax
	jne	.LBB1_4569
.LBB1_4568:                             # %ret0
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
.LBB1_4569:                             # %return
	movq	%rdx, %rax
.LBB1_2108:                             # %select.end
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB1_4498:                             # %L8918.i
	movq	8(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB1_4510
# BB#4499:                              # %if.then964.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB1_4510
# BB#4500:                              # %if.then974.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$828, %rdx              # imm = 0x33C
	jmp	.LBB1_4423
.LBB1_4491:                             # %L11555.i
	cmpq	$51, %rcx
	jne	.LBB1_4510
# BB#4492:                              # %L8901.i
	movq	8(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB1_4510
# BB#4493:                              # %if.then916.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB1_4510
# BB#4494:                              # %if.then926.i13287
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$825, %rdx              # imm = 0x339
	jmp	.LBB1_4423
.LBB1_4190:                             # %L7971.i
	movq	%r8, %rbx
	movq	8(%r12), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4191
# BB#4192:                              # %if.then923.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r12), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4193
# BB#4194:                              # %if.then931.i
	movl	target_flags(%rip), %ecx
	movq	%r14, recog_data+16(%rip)
	movq	%rcx, %rax
	andq	$262144, %rax           # imm = 0x40000
	testq	$327680, %rcx           # imm = 0x50000
	movq	%rbx, %r8
	je	.LBB1_4198
# BB#4195:                              # %if.then931.i
	testq	%r15, %rax
	jne	.LBB1_4198
# BB#4196:                              # %land.lhs.true939.i13081
	movq	recog_data+8(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	movq	$724, %rdx              # imm = 0x2D4
	jne	.LBB1_4569
# BB#4197:                              # %lor.lhs.false944.i
	movzbl	(%r14), %ecx
	cmpq	$66, %rcx
	jne	.LBB1_4569
.LBB1_4198:                             # %L7979.i
	testq	%r15, %rax
	je	.LBB1_31
# BB#4199:                              # %land.lhs.true953.i13086
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$725, %rdx              # imm = 0x2D5
	jne	.LBB1_4569
.LBB1_4189:                             # %lor.lhs.false911.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	jne	.LBB1_4569
	jmp	.LBB1_31
.LBB1_4020:                             # %L11507.i
	cmpq	$83, %rax
	jne	.LBB1_31
# BB#4021:                              # %L7847.i
	movq	8(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$393216, %rcx           # imm = 0x60000
	jne	.LBB1_31
# BB#4022:                              # %L11511.i
	movq	%r8, 8(%rsp)            # 8-byte Spill
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jne	.LBB1_4023
# BB#4156:                              # %L7878.i
	movq	8(%r14), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4157
# BB#4158:                              # %if.then810.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r12), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4159
# BB#4160:                              # %if.then818.i
	movl	target_flags(%rip), %eax
	movq	%r14, recog_data+16(%rip)
	testq	$327680, %rax           # imm = 0x50000
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	movq	%rcx, %rbx
	je	.LBB1_4162
# BB#4161:                              # %if.then818.i
	movq	%rsi, %rdx
.LBB1_4162:                             # %if.then818.i
	andq	$262144, %rax           # imm = 0x40000
	movq	%rbx, %rdi
	jne	.LBB1_4164
# BB#4163:                              # %if.then818.i
	movq	%rsi, %rdi
.LBB1_4164:                             # %if.then818.i
	movq	$18, %rcx
	shrq	%cl, %rax
	andq	%rdi, %rdx
	jne	.LBB1_4166
# BB#4165:                              # %if.then818.i
	movq	%rsi, %rbx
.LBB1_4166:                             # %if.then818.i
	orq	$712, %rbx              # imm = 0x2C8
	testq	%rdx, %rdx
	jne	.LBB1_4167
# BB#4168:                              # %if.then818.i
	testq	$1, %rax
	movq	8(%rsp), %r8            # 8-byte Reload
	movq	%rbx, %rdx
	je	.LBB1_31
	jmp	.LBB1_4569
.LBB1_4360:                             # %L11554.i
	cmpq	$50, %rcx
	jne	.LBB1_4510
# BB#4361:                              # %L8896.i
	movq	8(%rax), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB1_4510
# BB#4362:                              # %if.then880.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$824, %rdx              # imm = 0x338
	jmp	.LBB1_4423
.LBB1_4373:                             # %L11528
	cmpq	$93, %rax
	jne	.LBB1_4510
# BB#4374:                              # %L8739.i
	movq	8(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4375:                              # %if.then79.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4376:                              # %if.then87.i
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$812, %rdx              # imm = 0x32C
	jmp	.LBB1_4423
.LBB1_4408:                             # %L8703.i
	movq	8(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4409:                              # %if.then.i13104
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4410:                              # %if.then18.i13107
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$806, %rdx              # imm = 0x326
	jmp	.LBB1_4423
.LBB1_4368:                             # %L11528
	cmpq	$78, %rax
	jne	.LBB1_4510
# BB#4369:                              # %L8751.i
	movq	8(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4370:                              # %if.then119.i13130
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4371:                              # %if.then127.i13131
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$814, %rdx              # imm = 0x32E
	jmp	.LBB1_4423
.LBB1_4468:                             # %if.end694.i
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4469:                              # %if.then697.i13243
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	movq	$822, %rdx              # imm = 0x336
.LBB1_4423:                             # %land.lhs.true355.i
	testq	$16, %rax
	jne	.LBB1_4569
	jmp	.LBB1_4510
.LBB1_4381:                             # %L11548.i
	cmpq	$75, %rax
	jne	.LBB1_4510
# BB#4382:                              # %L8807.i
	movq	8(%rbx), %r13
	movl	(%r13), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4383:                              # %L8808.i
	movq	8(%r13), %r12
	movq	$44, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4384:                              # %if.then166.i
	movq	%r12, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4385:                              # %land.lhs.true175.i13137
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4386:                              # %L8810.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4387:                              # %land.lhs.true188.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_4510
# BB#4388:                              # %L8811.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4389:                              # %L8812.i
	movq	8(%rbx), %rax
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4390:                              # %L8813.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4391:                              # %land.lhs.true221.i13151
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4392:                              # %L8814.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4393:                              # %land.lhs.true237.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_4510
# BB#4394:                              # %L8815.i
	movq	16(%r14), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983115, %rax           # imm = 0xF004B
	jne	.LBB1_4510
# BB#4395:                              # %L8816.i
	movq	8(%rbx), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4396:                              # %L8817.i
	movq	8(%r12), %r14
	movq	$44, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4397:                              # %if.then275.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4398:                              # %land.lhs.true284.i13161
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4399:                              # %L8819.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4400:                              # %land.lhs.true300.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_4510
# BB#4401:                              # %L8820.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4402:                              # %L8821.i
	movq	8(%rbx), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4403:                              # %L8822.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4404:                              # %land.lhs.true334.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4405:                              # %L8823.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4406:                              # %land.lhs.true350.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_4510
# BB#4407:                              # %land.lhs.true355.i
	movzbl	target_flags+2(%rip), %eax
	movq	$818, %rdx              # imm = 0x332
	jmp	.LBB1_4423
.LBB1_4180:
	movq	%rbx, %r8
	jmp	.LBB1_31
.LBB1_4191:
	movq	%rbx, %r8
	jmp	.LBB1_31
.LBB1_4182:
	movq	%rbx, %r8
	jmp	.LBB1_31
.LBB1_4193:
	movq	%rbx, %r8
	jmp	.LBB1_31
.LBB1_4023:                             # %if.end799.i13059
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4024
# BB#4154:                              # %if.then802.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r12), %r14
	movq	$6, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4155
# BB#4169:                              # %if.then837.i
	movl	target_flags(%rip), %ecx
	movq	%r14, recog_data+16(%rip)
	movq	%rcx, %rax
	andq	$262144, %rax           # imm = 0x40000
	testq	$327680, %rcx           # imm = 0x50000
	movq	8(%rsp), %rcx           # 8-byte Reload
	je	.LBB1_4174
# BB#4170:                              # %if.then837.i
	testq	%r15, %rax
	jne	.LBB1_4174
# BB#4171:                              # %land.lhs.true845.i13064
	movq	%rcx, %rdx
	movq	recog_data+8(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	jne	.LBB1_4172
# BB#4173:                              # %lor.lhs.false850.i
	movzbl	(%r14), %ecx
	cmpq	$66, %rcx
	movq	%rdx, %rcx
	movq	$708, %rdx              # imm = 0x2C4
	jne	.LBB1_4569
.LBB1_4174:                             # %L7855.i
	testq	%r15, %rax
	je	.LBB1_4175
# BB#4176:                              # %land.lhs.true859.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB1_4177
# BB#4178:                              # %lor.lhs.false864.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	movq	%rcx, %r8
	movq	$709, %rdx              # imm = 0x2C5
	jne	.LBB1_4569
	jmp	.LBB1_31
.LBB1_4157:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_31
.LBB1_4024:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_31
.LBB1_3196:                             # %if.end4780
	movq	%r12, %r8
	movq	8(%r8), %r13
	jmp	.LBB1_31
.LBB1_3278:                             # %if.then325.i12435
	andq	%r15, %rdx
	cmpq	$2, %rdx
	movq	%rsi, %r8
	jne	.LBB1_3242
# BB#3279:                              # %L8044.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3280:                              # %land.lhs.true344.i
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3242
# BB#3281:                              # %L8045.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3282:                              # %land.lhs.true361.i
	movq	8(%rcx), %rcx
	cmpq	$3, %rcx
	jne	.LBB1_3242
# BB#3283:                              # %L8046.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3284:                              # %land.lhs.true378.i12443
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3285:                              # %L8047.i
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3014799, %rax          # imm = 0x2E008F
	jne	.LBB1_3242
# BB#3286:                              # %L8048.i
	movq	8(%r14), %r12
	movq	$46, %rsi
	movq	%r12, %rdi
	movq	%r8, %r13
	callq	register_operand
	movq	%r13, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3287:                              # %if.then405.i
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_3242
# BB#3288:                              # %land.lhs.true415.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB1_3242
# BB#3289:                              # %L8050.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3290:                              # %land.lhs.true433.i
	cmpq	$0, 8(%rcx)
	jne	.LBB1_3242
# BB#3291:                              # %L8051.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3292:                              # %land.lhs.true450.i
	movq	8(%rcx), %rcx
	cmpq	$2, %rcx
	jne	.LBB1_3242
# BB#3293:                              # %L8052.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB1_3242
# BB#3294:                              # %land.lhs.true467.i12455
	movq	8(%rcx), %rcx
	cmpq	$1, %rcx
	jne	.LBB1_3242
# BB#3295:                              # %L8053.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3296:                              # %land.lhs.true484.i
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB1_3242
# BB#3297:                              # %L8054.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3298:                              # %land.lhs.true499.i
	movq	8(%rax), %rax
	cmpq	$5, %rax
	jne	.LBB1_3242
# BB#3299:                              # %land.lhs.true505.i12458
	movzbl	target_flags+2(%rip), %eax
	movq	$733, %rdx              # imm = 0x2DD
	jmp	.LBB1_3241
.LBB1_3219:                             # %L11382
	cmpq	$93, %rax
	jne	.LBB1_3233
# BB#3220:                              # %L8083.i
	movq	8(%r14), %r13
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3221:                              # %if.then693.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3222:                              # %if.then701.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%r8, %r14
	callq	rtx_equal_p
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3223:                              # %L8086.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3224:                              # %land.lhs.true719.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3225:                              # %land.lhs.true725.i
	movzbl	target_flags+2(%rip), %eax
	movq	$736, %rdx              # imm = 0x2E0
	jmp	.LBB1_3241
.LBB1_3249:                             # %L7742.i
	movq	8(%r14), %r13
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3250:                              # %if.then60.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3251:                              # %if.then68.i12398
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%r8, %r14
	callq	rtx_equal_p
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3252:                              # %L7745.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3253:                              # %land.lhs.true85.i12406
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3254:                              # %land.lhs.true90.i12408
	movzbl	target_flags+2(%rip), %eax
	movq	$693, %rdx              # imm = 0x2B5
	jmp	.LBB1_3241
.LBB1_3255:                             # %L7756.i
	movq	8(%r14), %r13
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3256:                              # %if.then100.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3257:                              # %if.then108.i12413
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%r8, %r14
	callq	rtx_equal_p
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3258:                              # %L7759.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3259:                              # %land.lhs.true125.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3260:                              # %land.lhs.true130.i12416
	movzbl	target_flags+2(%rip), %eax
	movq	$695, %rdx              # imm = 0x2B7
	jmp	.LBB1_3241
.LBB1_3261:                             # %L7770.i
	movq	8(%r14), %r13
	movq	$46, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3262:                              # %if.then140.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$46, %rsi
	movq	%r14, %rdi
	movq	%r8, %r12
	callq	nonimmediate_operand
	movq	%r12, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3263:                              # %if.then148.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%r8, %r14
	callq	rtx_equal_p
	movq	%r14, %r8
	testq	%r15, %rax
	je	.LBB1_3242
# BB#3264:                              # %L7773.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3265:                              # %land.lhs.true165.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3266:                              # %land.lhs.true170.i12418
	movzbl	target_flags+2(%rip), %eax
	movq	$697, %rdx              # imm = 0x2B9
	jmp	.LBB1_3241
.LBB1_3335:                             # %L11398.i
	cmpq	$145, %rax
	jne	.LBB1_3336
# BB#3363:                              # %L8106.i
	movq	8(%r14), %rax
	movl	(%rax), %edx
	movq	$16, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	cmpq	$15, %rsi
	jne	.LBB1_3364
# BB#3374:                              # %L11406.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$125, %rdx
	jne	.LBB1_3375
# BB#3376:                              # %L8131.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4592
# BB#3377:                              # %if.then1034.i12518
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	jne	.LBB1_3373
# BB#3378:                              # %land.lhs.true1047.i
	movq	8(%rax), %rax
	cmpq	$14, %rax
	jne	.LBB1_3373
# BB#3379:                              # %land.lhs.true1053.i
	movzbl	target_flags+2(%rip), %eax
	movq	$742, %rdx              # imm = 0x2E6
	jmp	.LBB1_3372
.LBB1_3340:                             # %if.end830.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3343:                             # %if.end850.i12501
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3346:                             # %if.end870.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3350:                             # %L7665.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3352
# BB#3351:                              # %land.lhs.true903.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3352
# BB#3353:                              # %L7666.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3354
# BB#3355:                              # %L11401.i
	movq	8(%rax), %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jne	.LBB1_3358
# BB#3356:                              # %if.then936.i
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB1_3357
# BB#3359:                              # %L11403.i
	movzbl	target_flags+2(%rip), %eax
	movq	$682, %rdx              # imm = 0x2AA
	jmp	.LBB1_3360
.LBB1_4438:                             # %L11550.i
	cmpq	$76, %rax
	jne	.LBB1_4510
# BB#4439:                              # %L8837.i
	movq	8(%rbx), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4440:                              # %L8838.i
	movq	8(%r12), %r14
	movq	$44, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4441:                              # %if.then493.i13195
	movq	%r14, recog_data+16(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4442:                              # %land.lhs.true502.i13197
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4443:                              # %L8840.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4444:                              # %land.lhs.true518.i
	cmpq	$0, 8(%rax)
	jne	.LBB1_4510
# BB#4445:                              # %L8841.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983183, %rax           # imm = 0xF008F
	jne	.LBB1_4510
# BB#4446:                              # %L8842.i
	movq	8(%rbx), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB1_4510
# BB#4447:                              # %L8843.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$39, %rcx
	jne	.LBB1_4510
# BB#4448:                              # %land.lhs.true552.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB1_4510
# BB#4449:                              # %L8844.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_4510
# BB#4450:                              # %land.lhs.true568.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_4510
# BB#4451:                              # %land.lhs.true573.i13208
	movzbl	target_flags+2(%rip), %eax
	movq	$819, %rdx              # imm = 0x333
.LBB1_4509:                             # %land.lhs.true1031.i
	testq	$64, %rax
	jne	.LBB1_4569
.LBB1_4510:                             # %ret0.i13313
	movq	%r15, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_4159:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_31
.LBB1_4167:
	movq	%rbx, %rdx
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_4155:
	movq	8(%rsp), %r8            # 8-byte Reload
	jmp	.LBB1_31
.LBB1_4172:
	movq	$708, %rdx              # imm = 0x2C4
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_4175:
	movq	%rcx, %r8
	jmp	.LBB1_31
.LBB1_4177:
	movq	$709, %rdx              # imm = 0x2C5
	movq	%rdx, %rax
	jmp	.LBB1_2108
.LBB1_3336:                             # %if.end800.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3364:                             # %L8106.i
	cmpq	$44, %rsi
	jne	.LBB1_3365
# BB#3366:                              # %L11405.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$125, %rdx
	jne	.LBB1_3367
# BB#3368:                              # %L8107.i
	movq	8(%rax), %r14
	movq	$33, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB1_4592
# BB#3369:                              # %if.then992.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r12, %rcx
	jne	.LBB1_3373
# BB#3370:                              # %land.lhs.true1005.i
	movq	8(%rax), %rax
	cmpq	$12, %rax
	jne	.LBB1_3373
# BB#3371:                              # %land.lhs.true1011.i
	movzbl	target_flags+2(%rip), %eax
	movq	$739, %rdx              # imm = 0x2E3
.LBB1_3372:                             # %land.lhs.true1011.i
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3373:                             # %if.end1016.i
	movq	%rcx, %r12
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3375:                             # %if.end1025.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3352:                             # %if.end910.i12507
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3354:                             # %if.end922.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3357:                             # %if.then936.i
	cmpq	$12, %rax
	jne	.LBB1_3358
# BB#3362:                              # %L11404.i
	movzbl	target_flags+2(%rip), %eax
	movq	$683, %rdx              # imm = 0x2AB
.LBB1_3360:                             # %L11403.i
	testq	$5, %rax
	movq	%r12, %rax
	jne	.LBB1_4569
# BB#3361:                              # %if.end953.i
	movq	%rax, %r12
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3365:                             # %sw.epilog974.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3367:                             # %if.end983.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_4592:                             # %if.end1036.i
	movq	8(%rbx), %r14
	jmp	.LBB1_3233
.LBB1_3358:                             # %if.end945.i
	movq	8(%rbx), %r14
.LBB1_3233:                             # %L11381.i
	movq	$46, %rsi
	movq	%r14, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	%r12, %r8
	je	.LBB1_3242
# BB#3234:                              # %if.then16.i12375
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3014801, %rcx          # imm = 0x2E0091
	jne	.LBB1_3242
# BB#3235:                              # %L7696.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$983165, %rcx           # imm = 0xF007D
	jne	.LBB1_3242
# BB#3236:                              # %L7697.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3237:                              # %land.lhs.true1121.i12522
	cmpq	$0, 8(%rax)
	jne	.LBB1_3242
# BB#3238:                              # %L7698.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB1_3242
# BB#3239:                              # %land.lhs.true1136.i
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB1_3242
# BB#3240:                              # %land.lhs.true1142.i
	movzbl	target_flags+2(%rip), %eax
	movq	$686, %rdx              # imm = 0x2AE
.LBB1_3241:                             # %land.lhs.true1142.i
	testq	$5, %rax
	jne	.LBB1_4569
.LBB1_3242:                             # %if.end4788
	movq	8(%r8), %r13
	jmp	.LBB1_31
.Ltmp28:
	.size	recog_16, .Ltmp28-recog_16
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI1_0:
	.quad	.LBB1_961
	.quad	.LBB1_43
	.quad	.LBB1_372
	.quad	.LBB1_1152
	.quad	.LBB1_2345
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_1153
	.quad	.LBB1_1469
	.quad	.LBB1_1869
	.quad	.LBB1_2109
.LJTI1_1:
	.quad	.LBB1_1012
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_1021
	.quad	.LBB1_1031
	.quad	.LBB1_1051
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_1036
	.quad	.LBB1_1041
	.quad	.LBB1_1046
	.quad	.LBB1_1055
	.quad	.LBB1_1058
	.quad	.LBB1_1090
	.quad	.LBB1_1068
	.quad	.LBB1_1079
	.quad	.LBB1_1101
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_978
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
	.quad	.LBB1_1007
.LJTI1_2:
	.quad	.LBB1_657
	.quad	.LBB1_621
	.quad	.LBB1_673
	.quad	.LBB1_397
	.quad	.LBB1_397
	.quad	.LBB1_397
	.quad	.LBB1_664
	.quad	.LBB1_397
	.quad	.LBB1_397
	.quad	.LBB1_397
	.quad	.LBB1_397
	.quad	.LBB1_397
	.quad	.LBB1_602
	.quad	.LBB1_612
.LJTI1_3:
	.quad	.LBB1_777
	.quad	.LBB1_785
	.quad	.LBB1_880
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_7
	.quad	.LBB1_810
	.quad	.LBB1_818
	.quad	.LBB1_872
	.quad	.LBB1_886
	.quad	.LBB1_889
	.quad	.LBB1_933
	.quad	.LBB1_897
	.quad	.LBB1_919
	.quad	.LBB1_947
.LJTI1_4:
	.quad	.LBB1_336
	.quad	.LBB1_341
	.quad	.LBB1_344
	.quad	.LBB1_347
.LJTI1_5:
	.quad	.LBB1_100
	.quad	.LBB1_105
	.quad	.LBB1_108
	.quad	.LBB1_111
.LJTI1_6:
	.quad	.LBB1_146
	.quad	.LBB1_157
	.quad	.LBB1_181
	.quad	.LBB1_67
	.quad	.LBB1_67
	.quad	.LBB1_67
	.quad	.LBB1_67
	.quad	.LBB1_67
	.quad	.LBB1_163
	.quad	.LBB1_169
	.quad	.LBB1_175
	.quad	.LBB1_186
	.quad	.LBB1_189
	.quad	.LBB1_224
	.quad	.LBB1_200
	.quad	.LBB1_212
	.quad	.LBB1_236
.LJTI1_7:
	.quad	.LBB1_2441
	.quad	.LBB1_2425
	.quad	.LBB1_2409
	.quad	.LBB1_2377
.LJTI1_8:
	.quad	.LBB1_2868
	.quad	.LBB1_2814
	.quad	.LBB1_2709
	.quad	.LBB1_2649
.LJTI1_9:
	.quad	.LBB1_2887
	.quad	.LBB1_2646
	.quad	.LBB1_2879
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2897
	.quad	.LBB1_2902
	.quad	.LBB1_2912
.LJTI1_10:
	.quad	.LBB1_2833
	.quad	.LBB1_2646
	.quad	.LBB1_2825
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2843
	.quad	.LBB1_2848
	.quad	.LBB1_2858
.LJTI1_11:
	.quad	.LBB1_2729
	.quad	.LBB1_2646
	.quad	.LBB1_2721
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2646
	.quad	.LBB1_2739
	.quad	.LBB1_2794
	.quad	.LBB1_2804
.LJTI1_12:
	.quad	.LBB1_3843
	.quad	.LBB1_31
	.quad	.LBB1_31
	.quad	.LBB1_3669
	.quad	.LBB1_3419
	.quad	.LBB1_31
	.quad	.LBB1_3466
	.quad	.LBB1_31
	.quad	.LBB1_31
	.quad	.LBB1_31
	.quad	.LBB1_31
	.quad	.LBB1_3994
	.quad	.LBB1_31
	.quad	.LBB1_3123
.LJTI1_13:
	.quad	.LBB1_4280
	.quad	.LBB1_4270
	.quad	.LBB1_4276
	.quad	.LBB1_4264
	.quad	.LBB1_4294
	.quad	.LBB1_4264
	.quad	.LBB1_4264
	.quad	.LBB1_4290
.LJTI1_14:
	.quad	.LBB1_3764
	.quad	.LBB1_3842
	.quad	.LBB1_3836
	.quad	.LBB1_3842
	.quad	.LBB1_3709
	.quad	.LBB1_3712
	.quad	.LBB1_3718
	.quad	.LBB1_3721
.LJTI1_15:
	.quad	.LBB1_3833
	.quad	.LBB1_3842
	.quad	.LBB1_3743
	.quad	.LBB1_3830
	.quad	.LBB1_3842
	.quad	.LBB1_3827
	.quad	.LBB1_3824
.LJTI1_16:
	.quad	.LBB1_3585
	.quad	.LBB1_3668
	.quad	.LBB1_3574
	.quad	.LBB1_3668
	.quad	.LBB1_3525
	.quad	.LBB1_3528
	.quad	.LBB1_3531
	.quad	.LBB1_3534
.LJTI1_17:
	.quad	.LBB1_3394
	.quad	.LBB1_3398
	.quad	.LBB1_3194
	.quad	.LBB1_3402
	.quad	.LBB1_3406
.LJTI1_18:
	.quad	.LBB1_3243
	.quad	.LBB1_3249
	.quad	.LBB1_3233
	.quad	.LBB1_3255
	.quad	.LBB1_3261

	.text
	.align	16, 0x90
	.type	recog_32,@function
recog_32:                               # @recog_32
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp35:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp36:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp37:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp38:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp39:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp40:
	.cfi_def_cfa_offset 64
.Ltmp41:
	.cfi_offset %rbx, -48
.Ltmp42:
	.cfi_offset %r12, -40
.Ltmp43:
	.cfi_offset %r13, -32
.Ltmp44:
	.cfi_offset %r14, -24
.Ltmp45:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	movq	%rdx, %r15
	addq	$-2, %rcx
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	andq	%r12, %rcx
	cmpq	$15, %rcx
	ja	.LBB2_594
# BB#1:                                 # %entry
	jmpq	*.LJTI2_0(,%rcx,8)
.LBB2_2:                                # %L270
	movq	8(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$51, %rcx
	je	.LBB2_28
# BB#3:                                 # %L270
	cmpq	$50, %rcx
	jne	.LBB2_4
# BB#6:                                 # %L5911
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131138, %rcx           # imm = 0x20042
	jne	.LBB2_594
# BB#7:                                 # %L5912
	movq	8(%rax), %r13
	movl	(%r13), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB2_594
# BB#8:                                 # %L11903
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	constant_call_address_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB2_11
# BB#9:                                 # %if.then33
	movq	%r13, recog_data(%rip)
	movq	16(%rbx), %rax
	movq	%rax, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB2_10
# BB#20:                                # %L5915
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB2_10
# BB#21:                                # %land.lhs.true77
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_10
# BB#22:                                # %L5916
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262219, %rdx           # imm = 0x4004B
	jne	.LBB2_10
# BB#23:                                # %L5917
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB2_10
# BB#24:                                # %land.lhs.true129
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_10
# BB#25:                                # %L5918
	movq	16(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB2_27
# BB#26:                                # %if.then152
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+16(%rip)
	movq	$508, %rax              # imm = 0x1FC
	testq	$2, %rcx
	je	.LBB2_595
.LBB2_27:                               # %if.end168
	movq	8(%r14), %rax
.LBB2_10:                               # %if.end54
	movq	8(%rax), %rbx
	movq	8(%rbx), %rax
	movq	8(%rax), %r13
.LBB2_11:                               # %L11904
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	call_insn_operand
	testq	%r15, %rax
	je	.LBB2_594
# BB#12:                                # %if.then38
	movq	%r13, recog_data(%rip)
	movq	16(%rbx), %rax
	movq	%rax, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_594
# BB#13:                                # %L5926
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_594
# BB#14:                                # %land.lhs.true205
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB2_594
# BB#15:                                # %L5927
	movq	16(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262219, %rcx           # imm = 0x4004B
	jne	.LBB2_594
# BB#16:                                # %L5928
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_594
# BB#17:                                # %land.lhs.true236
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB2_594
# BB#18:                                # %L5929
	movq	16(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB2_594
# BB#19:                                # %if.then248
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+16(%rip)
	movq	$509, %rax              # imm = 0x1FD
	jmp	.LBB2_391
.LBB2_33:                               # %L7458
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$4, %rdx
	jne	.LBB2_34
# BB#37:                                # %L11905
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$42, %rax
	jne	.LBB2_35
# BB#38:                                # %land.lhs.true304
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB2_35
# BB#39:                                # %land.lhs.true310
	movl	16(%rbx), %ecx
	cmpq	$3, %rcx
	jne	.LBB2_35
# BB#40:                                # %L7459
	movq	8(%rax), %r13
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB2_35
# BB#41:                                # %if.then324
	movq	%rcx, %rbx
	movq	%r13, recog_data(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB2_42
# BB#43:                                # %L7461
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB2_45
# BB#44:                                # %land.lhs.true353
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_45
# BB#46:                                # %L7462
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262220, %rdx           # imm = 0x4004C
	jne	.LBB2_47
# BB#48:                                # %L7463
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB2_50
# BB#49:                                # %land.lhs.true394
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_50
# BB#51:                                # %L7464
	movq	16(%rcx), %rax
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%rbx, %rax
	je	.LBB2_52
# BB#53:                                # %L7465
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB2_54
# BB#55:                                # %L7466
	movq	8(%rax), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB2_83
# BB#56:                                # %land.lhs.true440
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB2_83
# BB#57:                                # %land.lhs.true443
	testq	$256, %rax              # imm = 0x100
	je	.LBB2_83
# BB#58:                                # %land.lhs.true443
	testq	%r15, %r15
	je	.LBB2_83
# BB#59:                                # %if.then448
	movq	$1, %rax
	movl	%eax, (%r15)
	movq	$649, %rax              # imm = 0x289
	jmp	.LBB2_595
.LBB2_105:                              # %L7446
	movq	8(%rax), %r13
	movl	(%r13), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$4, %rdx
	jne	.LBB2_106
# BB#109:                               # %L11997
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$42, %rax
	jne	.LBB2_107
# BB#110:                               # %land.lhs.true788
	movq	8(%r13), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB2_107
# BB#111:                               # %land.lhs.true794
	movl	16(%r13), %ecx
	cmpq	$3, %rcx
	jne	.LBB2_107
# BB#112:                               # %L7447
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB2_107
# BB#113:                               # %if.then808
	movq	%rcx, %r13
	movq	%rbx, recog_data(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB2_114
# BB#115:                               # %L7449
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB2_117
# BB#116:                               # %land.lhs.true837
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_117
# BB#118:                               # %L7450
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262220, %rdx           # imm = 0x4004C
	jne	.LBB2_119
# BB#120:                               # %L7451
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB2_122
# BB#121:                               # %land.lhs.true878
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_122
# BB#123:                               # %L7452
	movq	16(%rcx), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_124
# BB#125:                               # %L7453
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB2_126
# BB#127:                               # %L7454
	movq	8(%rax), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_128
# BB#129:                               # %L7455
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB2_130
# BB#131:                               # %L7456
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB2_134
# BB#132:                               # %land.lhs.true957
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB2_134
# BB#133:                               # %land.lhs.true962
	movl	target_flags(%rip), %eax
	andq	$33554688, %rax         # imm = 0x2000100
	cmpq	$256, %rax              # imm = 0x100
	movq	$649, %rax              # imm = 0x289
	je	.LBB2_595
.LBB2_134:                              # %if.end969
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_84:                               # %L978
	movq	8(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#85:                                # %L979
	movq	8(%rbx), %r13
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB2_594
# BB#86:                                # %if.then625
	movq	%r13, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327806, %rcx           # imm = 0x5007E
	jne	.LBB2_594
# BB#87:                                # %L981
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB2_594
# BB#88:                                # %if.then646
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#89:                                # %L983
	movq	8(%rax), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB2_594
# BB#90:                                # %if.then664
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#91:                                # %L985
	movq	8(%rax), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB2_594
# BB#92:                                # %if.then682
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#93:                                # %L987
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB2_594
# BB#94:                                # %if.then700
	movq	%rbx, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#95:                                # %L989
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB2_594
# BB#96:                                # %if.then718
	movl	target_flags(%rip), %edx
	movq	%rbx, recog_data+40(%rip)
	testq	$1, %rdx
	je	.LBB2_594
# BB#97:                                # %land.lhs.true723
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB2_594
# BB#98:                                # %land.lhs.true723
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB2_594
# BB#99:                                # %land.lhs.true745
	andq	$16711680, %rax         # imm = 0xFF0000
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB2_101
# BB#100:                               # %land.lhs.true745
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB2_101
# BB#104:                               # %lor.lhs.false763
	testq	$33554432, %rdx         # imm = 0x2000000
	movq	$153, %rax
	jne	.LBB2_594
	jmp	.LBB2_595
.LBB2_161:                              # %L6506
	movq	8(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#162:                               # %L6507
	movq	8(%rbx), %r15
	movzbl	2(%r15), %eax
	cmpq	$4, %rax
	jne	.LBB2_163
# BB#297:                               # %L12026
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB2_301
# BB#298:                               # %if.then1189
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_300
# BB#299:                               # %land.lhs.true1203
	cmpq	$0, 8(%rax)
	jne	.LBB2_300
# BB#324:                               # %L6536
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_325
# BB#326:                               # %L6537
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#327:                               # %if.then1235
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB2_341
# BB#328:                               # %L6539
	movq	8(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB2_341
# BB#329:                               # %L12037
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$87, %rax
	jne	.LBB2_330
# BB#342:                               # %L6540
	movq	8(%rbx), %rdi
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	$4, %rsi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#343:                               # %if.then1307
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+40(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_341
# BB#344:                               # %land.lhs.true1324
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB2_341
# BB#345:                               # %L6542
	movq	16(%r15), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#346:                               # %if.then1344
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_325
# BB#347:                               # %L6544
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#348:                               # %if.then1378
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB2_341
# BB#349:                               # %L6546
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262231, %rax           # imm = 0x40057
	jne	.LBB2_341
# BB#350:                               # %L6547
	movq	8(%r15), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB2_341
# BB#351:                               # %L6548
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_341
# BB#352:                               # %land.lhs.true1453
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB2_341
# BB#353:                               # %L6549
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#354:                               # %if.then1473
	movq	%rbx, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_325
# BB#355:                               # %L6551
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB2_325
# BB#356:                               # %L6552
	movq	8(%rcx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB2_341
# BB#357:                               # %L6553
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_341
# BB#358:                               # %L6554
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_359
# BB#360:                               # %L6555
	movq	40(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_359
# BB#361:                               # %L6556
	movq	8(%rax), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_359
# BB#362:                               # %L6557
	movq	48(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_359
# BB#363:                               # %L6558
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_359
# BB#364:                               # %land.lhs.true1639
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_359
# BB#365:                               # %land.lhs.true1644
	movzbl	target_flags+3(%rip), %edx
	movq	$591, %rax              # imm = 0x24F
	jmp	.LBB2_366
.LBB2_392:                              # %L6818
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_594
# BB#393:                               # %L6819
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB2_594
# BB#394:                               # %land.lhs.true2276
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB2_594
# BB#395:                               # %L6820
	movq	16(%rax), %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$3407872, %rcx          # imm = 0x340000
	jne	.LBB2_594
# BB#396:                               # %L12041
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$72, %rax
	jne	.LBB2_397
# BB#435:                               # %L6863
	movq	8(%r13), %rbx
	movzbl	(%rbx), %eax
	cmpq	$102, %rax
	jne	.LBB2_594
# BB#436:                               # %L6864
	movq	8(%rbx), %r15
	movzbl	2(%r15), %eax
	cmpq	$5, %rax
	jne	.LBB2_437
# BB#463:                               # %L12046
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#464:                               # %if.then2855
	movq	%r15, recog_data+48(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#465:                               # %land.lhs.true2864
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#466:                               # %L6892
	movq	16(%r13), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3407946, %rax          # imm = 0x34004A
	jne	.LBB2_594
# BB#467:                               # %L6893
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#468:                               # %L6894
	movq	8(%rax), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#469:                               # %if.then2902
	movq	%r15, recog_data+32(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#470:                               # %L6896
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#471:                               # %if.then2923
	movq	%rbx, recog_data+40(%rip)
	movq	24(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#472:                               # %land.lhs.true2932
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#473:                               # %L6898
	movq	8(%r14), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#474:                               # %L6899
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#475:                               # %if.then2954
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB2_594
# BB#476:                               # %L6901
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB2_594
# BB#477:                               # %land.lhs.true2978
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB2_594
# BB#478:                               # %L6902
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB2_594
# BB#479:                               # %L6903
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_594
# BB#480:                               # %land.lhs.true3006
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB2_594
# BB#481:                               # %L6904
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#482:                               # %L6905
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#483:                               # %if.then3028
	movq	%rbx, recog_data(%rip)
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#484:                               # %L6907
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#485:                               # %if.then3046
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	56(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#486:                               # %L6909
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#487:                               # %if.then3064
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+16(%rip)
	movq	$610, %rax              # imm = 0x262
	testq	$2, %rcx
	jne	.LBB2_595
	jmp	.LBB2_594
.LBB2_488:                              # %L8630
	movq	8(%rax), %rdx
	movzbl	(%rdx), %ecx
	cmpq	$43, %rcx
	jne	.LBB2_594
# BB#489:                               # %L12047
	movq	8(%rdx), %rcx
	movl	(%rcx), %esi
	cmpq	$1, %rsi
	jne	.LBB2_594
# BB#490:                               # %L12049
	movl	16(%rdx), %edx
	cmpq	$46, %rdx
	jne	.LBB2_491
# BB#543:                               # %L8756
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB2_594
# BB#544:                               # %land.lhs.true3569
	cmpq	$0, 8(%rcx)
	jne	.LBB2_594
# BB#545:                               # %L8757
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#546:                               # %L8758
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#547:                               # %land.lhs.true3597
	movl	8(%rcx), %ecx
	cmpq	$8, %rcx
	jne	.LBB2_594
# BB#548:                               # %L8759
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#549:                               # %L8760
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#550:                               # %land.lhs.true3625
	movl	8(%rcx), %ecx
	cmpq	$9, %rcx
	jne	.LBB2_594
# BB#551:                               # %L8761
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#552:                               # %L8762
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#553:                               # %land.lhs.true3653
	movl	8(%rcx), %ecx
	cmpq	$10, %rcx
	jne	.LBB2_594
# BB#554:                               # %L8763
	movq	40(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#555:                               # %L8764
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#556:                               # %land.lhs.true3681
	movl	8(%rcx), %ecx
	cmpq	$11, %rcx
	jne	.LBB2_594
# BB#557:                               # %L8765
	movq	48(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#558:                               # %L8766
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#559:                               # %land.lhs.true3709
	movl	8(%rcx), %ecx
	cmpq	$12, %rcx
	jne	.LBB2_594
# BB#560:                               # %L8767
	movq	56(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#561:                               # %L8768
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#562:                               # %land.lhs.true3737
	movl	8(%rcx), %ecx
	cmpq	$13, %rcx
	jne	.LBB2_594
# BB#563:                               # %L8769
	movq	64(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#564:                               # %L8770
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#565:                               # %land.lhs.true3765
	movl	8(%rcx), %ecx
	cmpq	$14, %rcx
	jne	.LBB2_594
# BB#566:                               # %L8771
	movq	72(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#567:                               # %L8772
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#568:                               # %land.lhs.true3793
	movl	8(%rcx), %ecx
	cmpq	$15, %rcx
	jne	.LBB2_594
# BB#569:                               # %L8773
	movq	80(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#570:                               # %L8774
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#571:                               # %land.lhs.true3821
	movl	8(%rcx), %ecx
	cmpq	$29, %rcx
	jne	.LBB2_594
# BB#572:                               # %L8775
	movq	88(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#573:                               # %L8776
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#574:                               # %land.lhs.true3849
	movl	8(%rcx), %ecx
	cmpq	$30, %rcx
	jne	.LBB2_594
# BB#575:                               # %L8777
	movq	96(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#576:                               # %L8778
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#577:                               # %land.lhs.true3877
	movl	8(%rcx), %ecx
	cmpq	$31, %rcx
	jne	.LBB2_594
# BB#578:                               # %L8779
	movq	104(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#579:                               # %L8780
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#580:                               # %land.lhs.true3905
	movl	8(%rcx), %ecx
	cmpq	$32, %rcx
	jne	.LBB2_594
# BB#581:                               # %L8781
	movq	112(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#582:                               # %L8782
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#583:                               # %land.lhs.true3933
	movl	8(%rcx), %ecx
	cmpq	$33, %rcx
	jne	.LBB2_594
# BB#584:                               # %L8783
	movq	120(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#585:                               # %L8784
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#586:                               # %land.lhs.true3961
	movl	8(%rcx), %ecx
	cmpq	$34, %rcx
	jne	.LBB2_594
# BB#587:                               # %L8785
	movq	128(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#588:                               # %L8786
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#589:                               # %land.lhs.true3989
	movl	8(%rcx), %ecx
	cmpq	$35, %rcx
	jne	.LBB2_594
# BB#590:                               # %L8787
	movq	136(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#591:                               # %L8788
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327741, %rcx           # imm = 0x5003D
	jne	.LBB2_594
# BB#592:                               # %land.lhs.true4017
	movl	8(%rax), %eax
	cmpq	$36, %rax
	jne	.LBB2_594
# BB#593:                               # %land.lhs.true4022
	movzbl	target_flags+2(%rip), %ecx
	movq	$815, %rax              # imm = 0x32F
	testq	$16, %rcx
	jne	.LBB2_595
	jmp	.LBB2_594
.LBB2_34:                               # %L7458
	cmpq	$5, %rdx
	jne	.LBB2_35
# BB#60:                                # %L11906
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$42, %rax
	jne	.LBB2_35
# BB#61:                                # %land.lhs.true458
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB2_35
# BB#62:                                # %land.lhs.true464
	movl	16(%rbx), %ecx
	cmpq	$3, %rcx
	jne	.LBB2_35
# BB#63:                                # %L7481
	movq	8(%rax), %r13
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB2_35
# BB#64:                                # %if.then478
	movq	%rcx, %rbx
	movq	%r13, recog_data(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB2_65
# BB#66:                                # %L7483
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB2_68
# BB#67:                                # %land.lhs.true507
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_68
# BB#69:                                # %L7484
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327756, %rdx           # imm = 0x5004C
	jne	.LBB2_70
# BB#71:                                # %L7485
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB2_73
# BB#72:                                # %land.lhs.true548
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_73
# BB#74:                                # %L7486
	movq	16(%rcx), %rax
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%rbx, %rax
	je	.LBB2_75
# BB#76:                                # %L7487
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB2_77
# BB#78:                                # %L7488
	movq	8(%rax), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB2_83
# BB#79:                                # %land.lhs.true594
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB2_83
# BB#80:                                # %land.lhs.true597
	testq	$256, %rax              # imm = 0x100
	je	.LBB2_83
# BB#81:                                # %land.lhs.true597
	testq	%r15, %r15
	je	.LBB2_83
# BB#82:                                # %if.then602
	movq	$1, %rax
	movl	%eax, (%r15)
	movq	$650, %rax              # imm = 0x28A
	jmp	.LBB2_595
.LBB2_106:                              # %L7446
	cmpq	$5, %rdx
	jne	.LBB2_107
# BB#135:                               # %L11998
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$42, %rax
	jne	.LBB2_107
# BB#136:                               # %land.lhs.true978
	movq	8(%r13), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB2_107
# BB#137:                               # %land.lhs.true984
	movl	16(%r13), %ecx
	cmpq	$3, %rcx
	jne	.LBB2_107
# BB#138:                               # %L7469
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB2_107
# BB#139:                               # %if.then998
	movq	%rcx, %r13
	movq	%rbx, recog_data(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB2_140
# BB#141:                               # %L7471
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB2_143
# BB#142:                               # %land.lhs.true1027
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_143
# BB#144:                               # %L7472
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327756, %rdx           # imm = 0x5004C
	jne	.LBB2_145
# BB#146:                               # %L7473
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB2_148
# BB#147:                               # %land.lhs.true1068
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB2_148
# BB#149:                               # %L7474
	movq	16(%rcx), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_150
# BB#151:                               # %L7475
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB2_152
# BB#153:                               # %L7476
	movq	8(%rax), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_154
# BB#155:                               # %L7477
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB2_156
# BB#157:                               # %L7478
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB2_160
# BB#158:                               # %land.lhs.true1147
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB2_160
# BB#159:                               # %land.lhs.true1152
	movl	target_flags(%rip), %eax
	andq	$33554688, %rax         # imm = 0x2000100
	cmpq	$33554688, %rax         # imm = 0x2000100
	movq	$650, %rax              # imm = 0x28A
	je	.LBB2_595
.LBB2_160:                              # %if.end1159
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_28:                               # %L5950
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#29:                                # %L5956
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB2_31
# BB#30:                                # %if.then270
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	%rax, %rax
	movq	$516, %rax              # imm = 0x204
	jne	.LBB2_595
	jmp	.LBB2_594
.LBB2_4:                                # %L270
	cmpq	$47, %rcx
	jne	.LBB2_594
# BB#5:                                 # %L271
	movq	%r14, %rdi
	movq	%r15, %rdx
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	recog_26  # TAILCALL
.LBB2_163:                              # %L6507
	cmpq	$5, %rax
	jne	.LBB2_594
# BB#164:                               # %L12025
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_168
# BB#165:                               # %if.then.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_167
# BB#166:                               # %land.lhs.true.i
	cmpq	$0, 8(%rax)
	jne	.LBB2_167
# BB#191:                               # %L6509.i
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_192
# BB#193:                               # %L6510.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#194:                               # %if.then44.i
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB2_208
# BB#195:                               # %L6512.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB2_208
# BB#196:                               # %L12029.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$87, %rax
	jne	.LBB2_197
# BB#209:                               # %L6513.i
	movq	8(%r15), %r13
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#210:                               # %if.then115.i
	movq	%r13, recog_data+40(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_208
# BB#211:                               # %L12031.i
	movq	8(%rax), %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jne	.LBB2_208
# BB#212:                               # %if.then151.i
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB2_213
# BB#236:                               # %L6569.i
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#237:                               # %if.then504.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_192
# BB#238:                               # %L6571.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#239:                               # %if.then539.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB2_208
# BB#240:                               # %L6573.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327767, %rax           # imm = 0x50057
	jne	.LBB2_208
# BB#241:                               # %L6574.i
	movq	8(%r15), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_208
# BB#242:                               # %L6575.i
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_208
# BB#243:                               # %land.lhs.true619.i
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB2_208
# BB#244:                               # %L6576.i
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#245:                               # %if.then640.i
	movq	%rbx, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_192
# BB#246:                               # %L6578.i
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB2_192
# BB#247:                               # %L6579.i
	movq	8(%rcx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_208
# BB#248:                               # %L6580.i
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_208
# BB#249:                               # %L6581.i
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r12, %rax
	je	.LBB2_228
# BB#250:                               # %L6582.i
	movq	40(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_228
# BB#251:                               # %L6583.i
	movq	8(%rax), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r12, %rax
	je	.LBB2_228
# BB#252:                               # %L6584.i
	movq	48(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_228
# BB#253:                               # %L6585.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_228
# BB#254:                               # %land.lhs.true815.i
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_228
# BB#255:                               # %land.lhs.true821.i
	movzbl	target_flags+3(%rip), %edx
	movq	$592, %rax              # imm = 0x250
	jmp	.LBB2_235
.LBB2_491:                              # %L12049
	cmpq	$31, %rdx
	jne	.LBB2_594
# BB#492:                               # %L8631
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB2_594
# BB#493:                               # %land.lhs.true3103
	cmpq	$0, 8(%rcx)
	jne	.LBB2_594
# BB#494:                               # %L8632
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#495:                               # %L8633
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#496:                               # %land.lhs.true3131
	movl	8(%rcx), %ecx
	cmpq	$8, %rcx
	jne	.LBB2_594
# BB#497:                               # %L8634
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#498:                               # %L8635
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#499:                               # %land.lhs.true3159
	movl	8(%rcx), %ecx
	cmpq	$9, %rcx
	jne	.LBB2_594
# BB#500:                               # %L8636
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#501:                               # %L8637
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#502:                               # %land.lhs.true3187
	movl	8(%rcx), %ecx
	cmpq	$10, %rcx
	jne	.LBB2_594
# BB#503:                               # %L8638
	movq	40(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#504:                               # %L8639
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#505:                               # %land.lhs.true3215
	movl	8(%rcx), %ecx
	cmpq	$11, %rcx
	jne	.LBB2_594
# BB#506:                               # %L8640
	movq	48(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#507:                               # %L8641
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#508:                               # %land.lhs.true3243
	movl	8(%rcx), %ecx
	cmpq	$12, %rcx
	jne	.LBB2_594
# BB#509:                               # %L8642
	movq	56(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#510:                               # %L8643
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#511:                               # %land.lhs.true3271
	movl	8(%rcx), %ecx
	cmpq	$13, %rcx
	jne	.LBB2_594
# BB#512:                               # %L8644
	movq	64(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#513:                               # %L8645
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#514:                               # %land.lhs.true3299
	movl	8(%rcx), %ecx
	cmpq	$14, %rcx
	jne	.LBB2_594
# BB#515:                               # %L8646
	movq	72(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#516:                               # %L8647
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$1114173, %rdx          # imm = 0x11003D
	jne	.LBB2_594
# BB#517:                               # %land.lhs.true3327
	movl	8(%rcx), %ecx
	cmpq	$15, %rcx
	jne	.LBB2_594
# BB#518:                               # %L8648
	movq	80(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#519:                               # %L8649
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#520:                               # %land.lhs.true3355
	movl	8(%rcx), %ecx
	cmpq	$29, %rcx
	jne	.LBB2_594
# BB#521:                               # %L8650
	movq	88(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#522:                               # %L8651
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#523:                               # %land.lhs.true3383
	movl	8(%rcx), %ecx
	cmpq	$30, %rcx
	jne	.LBB2_594
# BB#524:                               # %L8652
	movq	96(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#525:                               # %L8653
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#526:                               # %land.lhs.true3411
	movl	8(%rcx), %ecx
	cmpq	$31, %rcx
	jne	.LBB2_594
# BB#527:                               # %L8654
	movq	104(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#528:                               # %L8655
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#529:                               # %land.lhs.true3439
	movl	8(%rcx), %ecx
	cmpq	$32, %rcx
	jne	.LBB2_594
# BB#530:                               # %L8656
	movq	112(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#531:                               # %L8657
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#532:                               # %land.lhs.true3467
	movl	8(%rcx), %ecx
	cmpq	$33, %rcx
	jne	.LBB2_594
# BB#533:                               # %L8658
	movq	120(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#534:                               # %L8659
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#535:                               # %land.lhs.true3495
	movl	8(%rcx), %ecx
	cmpq	$34, %rcx
	jne	.LBB2_594
# BB#536:                               # %L8660
	movq	128(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB2_594
# BB#537:                               # %L8661
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB2_594
# BB#538:                               # %land.lhs.true3523
	movl	8(%rcx), %ecx
	cmpq	$35, %rcx
	jne	.LBB2_594
# BB#539:                               # %L8662
	movq	136(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#540:                               # %L8663
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327741, %rcx           # imm = 0x5003D
	jne	.LBB2_594
# BB#541:                               # %land.lhs.true3551
	movl	8(%rax), %eax
	cmpq	$36, %rax
	jne	.LBB2_594
# BB#542:                               # %land.lhs.true3556
	movzbl	target_flags+1(%rip), %ecx
	movq	$801, %rax              # imm = 0x321
	testq	$64, %rcx
	jne	.LBB2_595
	jmp	.LBB2_594
.LBB2_31:                               # %if.end272
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r14, %rax
	je	.LBB2_594
# BB#32:                                # %if.then275
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	%rax, %rax
	movq	$515, %rax              # imm = 0x203
	jne	.LBB2_595
	jmp	.LBB2_594
.LBB2_397:                              # %L12041
	cmpq	$74, %rax
	jne	.LBB2_594
# BB#398:                               # %L6821
	movq	8(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#399:                               # %L6822
	movq	8(%rax), %r15
	movzbl	2(%r15), %eax
	cmpq	$5, %rax
	jne	.LBB2_400
# BB#418:                               # %L12044
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#419:                               # %if.then2471
	movq	%r15, recog_data+32(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#420:                               # %L6845
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#421:                               # %if.then2492
	movq	%rbx, recog_data+40(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#422:                               # %L6847
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#423:                               # %if.then2510
	movq	%rbx, recog_data+48(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#424:                               # %L6849
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#425:                               # %if.then2528
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB2_594
# BB#426:                               # %L6851
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_594
# BB#427:                               # %land.lhs.true2552
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB2_594
# BB#428:                               # %L6852
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#429:                               # %L6853
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#430:                               # %if.then2574
	movq	%rbx, recog_data(%rip)
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#431:                               # %L6855
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#432:                               # %if.then2592
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	56(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#433:                               # %L6857
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#434:                               # %if.then2610
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+16(%rip)
	movq	$608, %rax              # imm = 0x260
	testq	$2, %rcx
	jne	.LBB2_595
	jmp	.LBB2_594
.LBB2_42:                               # %if.end336
	movq	8(%rax), %rbx
	jmp	.LBB2_35
.LBB2_114:                              # %if.end820
	movq	8(%rax), %r13
	jmp	.LBB2_107
.LBB2_45:                               # %if.end359
	movq	8(%rax), %rbx
	jmp	.LBB2_35
.LBB2_117:                              # %if.end843
	movq	8(%rax), %r13
	jmp	.LBB2_107
.LBB2_65:                               # %if.end490
	movq	8(%rax), %rbx
	jmp	.LBB2_35
.LBB2_140:                              # %if.end1010
	movq	8(%rax), %r13
	jmp	.LBB2_107
.LBB2_437:                              # %L6864
	cmpq	$4, %rax
	jne	.LBB2_594
# BB#438:                               # %L12045
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#439:                               # %if.then2637
	movq	%r15, recog_data+48(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#440:                               # %land.lhs.true2646
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#441:                               # %L6866
	movq	16(%r13), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3407946, %rax          # imm = 0x34004A
	jne	.LBB2_594
# BB#442:                               # %L6867
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#443:                               # %L6868
	movq	8(%rax), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#444:                               # %if.then2684
	movq	%r15, recog_data+32(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#445:                               # %L6870
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#446:                               # %if.then2705
	movq	%rbx, recog_data+40(%rip)
	movq	24(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#447:                               # %land.lhs.true2714
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#448:                               # %L6872
	movq	8(%r14), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#449:                               # %L6873
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#450:                               # %if.then2736
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB2_594
# BB#451:                               # %L6875
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB2_594
# BB#452:                               # %land.lhs.true2760
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB2_594
# BB#453:                               # %L6876
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB2_594
# BB#454:                               # %L6877
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_594
# BB#455:                               # %land.lhs.true2788
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB2_594
# BB#456:                               # %L6878
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#457:                               # %L6879
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#458:                               # %if.then2810
	movq	%rbx, recog_data(%rip)
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#459:                               # %L6881
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#460:                               # %if.then2828
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	56(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#461:                               # %L6883
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#462:                               # %if.then2846
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+16(%rip)
	movq	$609, %rax              # imm = 0x261
	jmp	.LBB2_391
.LBB2_68:                               # %if.end513
	movq	8(%rax), %rbx
	jmp	.LBB2_35
.LBB2_143:                              # %if.end1033
	movq	8(%rax), %r13
	jmp	.LBB2_107
.LBB2_400:                              # %L6822
	cmpq	$4, %rax
	jne	.LBB2_594
# BB#401:                               # %L12043
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#402:                               # %if.then2323
	movq	%r15, recog_data+32(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#403:                               # %L6824
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#404:                               # %if.then2344
	movq	%rbx, recog_data+40(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#405:                               # %L6826
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#406:                               # %if.then2362
	movq	%rbx, recog_data+48(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#407:                               # %L6828
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#408:                               # %if.then2380
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB2_594
# BB#409:                               # %L6830
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_594
# BB#410:                               # %land.lhs.true2404
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB2_594
# BB#411:                               # %L6831
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#412:                               # %L6832
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#413:                               # %if.then2426
	movq	%rbx, recog_data(%rip)
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#414:                               # %L6834
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#415:                               # %if.then2444
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	56(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB2_594
# BB#416:                               # %L6836
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#417:                               # %if.then2462
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+16(%rip)
	movq	$607, %rax              # imm = 0x25F
	jmp	.LBB2_391
.LBB2_47:                               # %if.end377
	movq	8(%rax), %rbx
	jmp	.LBB2_35
.LBB2_119:                              # %if.end861
	movq	8(%rax), %r13
	jmp	.LBB2_107
.LBB2_50:                               # %if.end400
	movq	8(%rax), %rbx
	jmp	.LBB2_35
.LBB2_122:                              # %if.end884
	movq	8(%rax), %r13
	jmp	.LBB2_107
.LBB2_330:                              # %if.end1288
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#331:                               # %if.then1291
	movq	%rbx, recog_data+24(%rip)
	movq	16(%r15), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#332:                               # %if.then1662
	movq	%rbx, recog_data+40(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_325
# BB#333:                               # %L6596
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#334:                               # %if.then1696
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB2_341
# BB#335:                               # %L6598
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_341
# BB#336:                               # %if.then1733
	movq	%r15, recog_data+32(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_359
# BB#337:                               # %L6600
	movq	32(%rcx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_359
# BB#338:                               # %L6601
	movq	8(%rbx), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB2_359
# BB#339:                               # %L6602
	movq	8(%rax), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB2_341
# BB#340:                               # %L6603
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_341
# BB#367:                               # %L6604
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_359
# BB#368:                               # %L6605
	movq	40(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_359
# BB#369:                               # %L6606
	movq	8(%rax), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB2_359
# BB#370:                               # %L6607
	movq	48(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_359
# BB#371:                               # %L6608
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_359
# BB#372:                               # %land.lhs.true1915
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_359
# BB#373:                               # %land.lhs.true1920
	movzbl	target_flags+3(%rip), %edx
	movq	$593, %rax              # imm = 0x251
.LBB2_366:                              # %land.lhs.true1644
	testq	$2, %rdx
	je	.LBB2_595
.LBB2_359:                              # %if.end1567
	movq	8(%rcx), %rbx
	jmp	.LBB2_300
.LBB2_325:                              # %if.end1221
	movq	8(%rax), %rbx
	jmp	.LBB2_300
.LBB2_341:                              # %if.end1237
	movq	8(%r14), %rax
	movq	8(%rax), %rbx
.LBB2_300:                              # %if.end1208
	movq	8(%rbx), %r15
.LBB2_301:                              # %L12028
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_594
# BB#302:                               # %if.then1194
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#303:                               # %land.lhs.true1939
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#304:                               # %L6741
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#305:                               # %L6742
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_594
# BB#306:                               # %if.then1961
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB2_594
# BB#307:                               # %L6744
	movq	8(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB2_594
# BB#308:                               # %L12039
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$87, %rax
	jne	.LBB2_309
# BB#374:                               # %L6745
	movq	8(%rbx), %rdi
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	$4, %rsi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_594
# BB#375:                               # %if.then2001
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+32(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#376:                               # %land.lhs.true2010
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB2_594
# BB#377:                               # %L6747
	movq	16(%r15), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_594
# BB#378:                               # %if.then2022
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %r15
	movzbl	(%r15), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#379:                               # %L6749
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#380:                               # %L6750
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB2_594
# BB#381:                               # %L6751
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#382:                               # %land.lhs.true2062
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#383:                               # %L6752
	movq	8(%r14), %rax
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#384:                               # %L6753
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_594
# BB#385:                               # %if.then2084
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#386:                               # %L6755
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB2_594
# BB#387:                               # %L6756
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#388:                               # %L6757
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB2_594
# BB#389:                               # %land.lhs.true2126
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_594
# BB#390:                               # %land.lhs.true2131
	movzbl	target_flags+3(%rip), %ecx
	movq	$603, %rax              # imm = 0x25B
	jmp	.LBB2_391
.LBB2_70:                               # %if.end531
	movq	8(%rax), %rbx
	jmp	.LBB2_35
.LBB2_145:                              # %if.end1051
	movq	8(%rax), %r13
	jmp	.LBB2_107
.LBB2_309:                              # %if.end1990
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_594
# BB#310:                               # %if.then1993
	movq	%rbx, recog_data+24(%rip)
	movq	16(%r15), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_594
# BB#311:                               # %if.then2141
	movq	%rbx, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#312:                               # %L6789
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#313:                               # %L6790
	movq	8(%rax), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB2_594
# BB#314:                               # %L6791
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#315:                               # %land.lhs.true2181
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#316:                               # %L6792
	movq	8(%r14), %rax
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#317:                               # %L6793
	movq	8(%rax), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB2_594
# BB#318:                               # %if.then2203
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#319:                               # %L6795
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB2_594
# BB#320:                               # %L6796
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#321:                               # %L6797
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB2_594
# BB#322:                               # %land.lhs.true2245
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_594
# BB#323:                               # %land.lhs.true2250
	movzbl	target_flags+3(%rip), %ecx
	movq	$605, %rax              # imm = 0x25D
.LBB2_391:                              # %land.lhs.true2131
	testq	$2, %rcx
	jne	.LBB2_594
	jmp	.LBB2_595
.LBB2_52:                               # %if.end413
	movq	8(%rcx), %rbx
	jmp	.LBB2_35
.LBB2_54:                               # %if.end428
	movq	8(%rcx), %rbx
	jmp	.LBB2_35
.LBB2_124:                              # %if.end897
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_126:                              # %if.end912
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_128:                              # %if.end925
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_130:                              # %if.end940
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_101:                              # %lor.lhs.false754
	cmpq	$1048576, %rax          # imm = 0x100000
	movq	$153, %rax
	jne	.LBB2_595
# BB#102:                               # %lor.lhs.false754
	movq	%rdx, %rcx
	andq	$262144, %rcx           # imm = 0x40000
	testq	%r15, %rcx
	je	.LBB2_595
# BB#103:                               # %lor.lhs.false754
	andq	$33554432, %rdx         # imm = 0x2000000
	testq	%r15, %rdx
	jne	.LBB2_594
	jmp	.LBB2_595
.LBB2_73:                               # %if.end554
	movq	8(%rax), %rbx
	jmp	.LBB2_35
.LBB2_75:                               # %if.end567
	movq	8(%rcx), %rbx
	jmp	.LBB2_35
.LBB2_77:                               # %if.end582
	movq	8(%rcx), %rbx
	jmp	.LBB2_35
.LBB2_83:                               # %if.end449
	movq	8(%r14), %rax
	movq	8(%rax), %rbx
.LBB2_35:                               # %L277
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#36:                                # %L278
	movq	%r14, %rdi
	movq	%r15, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	recog_29  # TAILCALL
.LBB2_148:                              # %if.end1074
	movq	8(%rax), %r13
	jmp	.LBB2_107
.LBB2_150:                              # %if.end1087
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_152:                              # %if.end1102
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_154:                              # %if.end1115
	movq	8(%rcx), %r13
	jmp	.LBB2_107
.LBB2_156:                              # %if.end1130
	movq	8(%rcx), %r13
.LBB2_107:                              # %L992
	movzbl	(%r13), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#108:                               # %L993
	movq	%r14, %rdi
	movq	%r15, %rsi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	recog_30  # TAILCALL
.LBB2_197:                              # %if.end96.i
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#198:                               # %if.then99.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#199:                               # %if.then839.i
	movq	%rbx, recog_data+40(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_192
# BB#200:                               # %L6619.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#201:                               # %if.then874.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB2_208
# BB#202:                               # %L6621.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#203:                               # %if.then913.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%rbx), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r12, %rax
	je	.LBB2_228
# BB#204:                               # %L6623.i
	movq	32(%rcx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_228
# BB#205:                               # %L6624.i
	movq	8(%rbx), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB2_228
# BB#206:                               # %L6625.i
	movq	8(%rax), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_208
# BB#207:                               # %L6626.i
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_208
# BB#256:                               # %L6627.i
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r12, %rax
	je	.LBB2_228
# BB#257:                               # %L6628.i
	movq	40(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_228
# BB#258:                               # %L6629.i
	movq	8(%rax), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r12, %rax
	je	.LBB2_228
# BB#259:                               # %L6630.i
	movq	48(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_228
# BB#260:                               # %L6631.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_228
# BB#261:                               # %land.lhs.true1104.i
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_228
# BB#262:                               # %land.lhs.true1110.i
	movzbl	target_flags+3(%rip), %edx
	movq	$594, %rax              # imm = 0x252
	jmp	.LBB2_235
.LBB2_213:                              # %if.then151.i
	cmpq	$3, %rax
	jne	.LBB2_208
# BB#214:                               # %L6515.i
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#215:                               # %if.then171.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_192
# BB#216:                               # %L6517.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#217:                               # %if.then206.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB2_208
# BB#218:                               # %L6519.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327767, %rax           # imm = 0x50057
	jne	.LBB2_208
# BB#219:                               # %L6520.i
	movq	8(%r15), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_208
# BB#220:                               # %L6521.i
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_208
# BB#221:                               # %land.lhs.true286.i
	movq	8(%rax), %rax
	cmpq	$3, %rax
	jne	.LBB2_208
# BB#222:                               # %L6522.i
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_208
# BB#223:                               # %if.then307.i
	movq	%rbx, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB2_192
# BB#224:                               # %L6524.i
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB2_192
# BB#225:                               # %L6525.i
	movq	8(%rcx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_208
# BB#226:                               # %L6526.i
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_208
# BB#227:                               # %L6527.i
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r12, %rax
	je	.LBB2_228
# BB#229:                               # %L6528.i
	movq	40(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_228
# BB#230:                               # %L6529.i
	movq	8(%rax), %rax
	movq	recog_data+40(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r12, %rax
	je	.LBB2_228
# BB#231:                               # %L6530.i
	movq	48(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB2_228
# BB#232:                               # %L6531.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB2_228
# BB#233:                               # %land.lhs.true482.i
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_228
# BB#234:                               # %land.lhs.true487.i
	movzbl	target_flags+3(%rip), %edx
	movq	$590, %rax              # imm = 0x24E
.LBB2_235:                              # %land.lhs.true487.i
	testq	$2, %rdx
	jne	.LBB2_595
.LBB2_228:                              # %if.end406.i
	movq	8(%rcx), %rbx
	jmp	.LBB2_167
.LBB2_192:                              # %if.end30.i
	movq	8(%rax), %rbx
	jmp	.LBB2_167
.LBB2_208:                              # %if.end46.i
	movq	8(%r14), %rax
	movq	8(%rax), %rbx
.LBB2_167:                              # %if.end17.i
	movq	8(%rbx), %r15
.LBB2_168:                              # %L12027.i
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#169:                               # %if.then7.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#170:                               # %land.lhs.true1130.i
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#171:                               # %L6720.i
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#172:                               # %L6721.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#173:                               # %if.then1154.i
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB2_594
# BB#174:                               # %L6723.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB2_594
# BB#175:                               # %L12033.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$87, %rax
	jne	.LBB2_176
# BB#263:                               # %L6724.i
	movq	8(%r15), %r13
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#264:                               # %if.then1198.i
	movq	%r13, recog_data+32(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#265:                               # %L12035.i
	movq	8(%rax), %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jne	.LBB2_594
# BB#266:                               # %if.then1220.i
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB2_267
# BB#282:                               # %L6768.i
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#283:                               # %if.then1365.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %r15
	movzbl	(%r15), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#284:                               # %L6770.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#285:                               # %L6771.i
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_594
# BB#286:                               # %L6772.i
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#287:                               # %land.lhs.true1409.i
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#288:                               # %L6773.i
	movq	8(%r14), %rax
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#289:                               # %L6774.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#290:                               # %if.then1433.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#291:                               # %L6776.i
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_594
# BB#292:                               # %L6777.i
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#293:                               # %L6778.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB2_594
# BB#294:                               # %land.lhs.true1479.i
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_594
# BB#295:                               # %land.lhs.true1485.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$604, %rax              # imm = 0x25C
	jmp	.LBB2_296
.LBB2_176:                              # %if.end1187.i
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#177:                               # %if.then1190.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#178:                               # %if.then1495.i
	movq	%rbx, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#179:                               # %L6808.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#180:                               # %L6809.i
	movq	8(%rax), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_594
# BB#181:                               # %L6810.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#182:                               # %land.lhs.true1539.i
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#183:                               # %L6811.i
	movq	8(%r14), %rax
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#184:                               # %L6812.i
	movq	8(%rax), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#185:                               # %if.then1563.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#186:                               # %L6814.i
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_594
# BB#187:                               # %L6815.i
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#188:                               # %L6816.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327741, %rcx           # imm = 0x5003D
	jne	.LBB2_594
# BB#189:                               # %land.lhs.true1609.i
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_594
# BB#190:                               # %land.lhs.true1615.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$606, %rax              # imm = 0x25E
	jmp	.LBB2_296
.LBB2_267:                              # %if.then1220.i
	cmpq	$3, %rax
	jne	.LBB2_594
# BB#268:                               # %L6726.i
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#269:                               # %if.then1235.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %r15
	movzbl	(%r15), %eax
	cmpq	$47, %rax
	jne	.LBB2_594
# BB#270:                               # %L6728.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB2_594
# BB#271:                               # %L6729.i
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_594
# BB#272:                               # %L6730.i
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB2_594
# BB#273:                               # %land.lhs.true1279.i
	cmpq	$0, 8(%rax)
	jne	.LBB2_594
# BB#274:                               # %L6731.i
	movq	8(%r14), %rax
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#275:                               # %L6732.i
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB2_594
# BB#276:                               # %if.then1303.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#277:                               # %L6734.i
	movq	8(%rax), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB2_594
# BB#278:                               # %L6735.i
	movq	8(%r14), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB2_594
# BB#279:                               # %L6736.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB2_594
# BB#280:                               # %land.lhs.true1349.i
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB2_594
# BB#281:                               # %land.lhs.true1355.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$602, %rax              # imm = 0x25A
.LBB2_296:                              # %land.lhs.true1615.i
	testq	$2, %rcx
	jne	.LBB2_595
.LBB2_594:                              # %ret0
	movq	%r12, %rax
.LBB2_595:                              # %return
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp46:
	.size	recog_32, .Ltmp46-recog_32
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI2_0:
	.quad	.LBB2_2
	.quad	.LBB2_33
	.quad	.LBB2_105
	.quad	.LBB2_84
	.quad	.LBB2_161
	.quad	.LBB2_392
	.quad	.LBB2_594
	.quad	.LBB2_594
	.quad	.LBB2_594
	.quad	.LBB2_594
	.quad	.LBB2_594
	.quad	.LBB2_594
	.quad	.LBB2_594
	.quad	.LBB2_594
	.quad	.LBB2_594
	.quad	.LBB2_488

	.text
	.globl	split_insns
	.align	16, 0x90
	.type	split_insns,@function
split_insns:                            # @split_insns
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp49:
	.cfi_def_cfa_offset 16
.Ltmp50:
	.cfi_offset %rbx, -16
	movq	$0, recog_data+1000(%rip)
	movzbl	(%rdi), %eax
	cmpq	$39, %rax
	je	.LBB3_4
# BB#1:                                 # %entry
	cmpq	$43, %rax
	jne	.LBB3_2
# BB#5:                                 # %L12066
	movq	8(%rdi), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB3_14
# BB#6:                                 # %land.lhs.true
	movl	16(%rdi), %ecx
	cmpq	$13, %rcx
	jne	.LBB3_14
# BB#7:                                 # %L10087
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$5, %rax
	jne	.LBB3_8
# BB#12:                                # %L12269
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB3_14
# BB#13:                                # %if.then27
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	%rax, %rax
	je	.LBB3_14
# BB#15:                                # %if.then31
	movabsq	$recog_data, %rdi
	popq	%rbx
	jmp	gen_split_1179  # TAILCALL
.LBB3_4:                                # %L12062
	popq	%rbx
	jmp	split_4  # TAILCALL
.LBB3_2:                                # %entry
	cmpq	$47, %rax
	jne	.LBB3_14
# BB#3:                                 # %L8961
	popq	%rbx
	jmp	split_1  # TAILCALL
.LBB3_8:                                # %L10087
	cmpq	$4, %rax
	jne	.LBB3_14
# BB#9:                                 # %L12268
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB3_14
# BB#10:                                # %if.then18
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	%rax, %rax
	je	.LBB3_14
# BB#11:                                # %if.then22
	movabsq	$recog_data, %rdi
	popq	%rbx
	jmp	gen_split_1178  # TAILCALL
.LBB3_14:                               # %return
	xorq	%rax, %rax
	popq	%rbx
	retq
.Ltmp51:
	.size	split_insns, .Ltmp51-split_insns
	.cfi_endproc

	.align	16, 0x90
	.type	split_1,@function
split_1:                                # @split_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp58:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp59:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp60:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp61:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp62:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp63:
	.cfi_def_cfa_offset 64
.Ltmp64:
	.cfi_offset %rbx, -48
.Ltmp65:
	.cfi_offset %r12, -40
.Ltmp66:
	.cfi_offset %r13, -32
.Ltmp67:
	.cfi_offset %r14, -24
.Ltmp68:
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movq	8(%r15), %rbx
	movl	(%rbx), %edx
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	$16, %rcx
	movq	%rdx, %rax
	shrq	%cl, %rax
	andq	$255, %rax
	cmpq	$56, %rax
	jg	.LBB4_3
# BB#1:                                 # %entry
	addq	$-2, %rax
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rax
	cmpq	$14, %rax
	ja	.LBB4_4
# BB#2:                                 # %entry
	jmpq	*.LJTI4_0(,%rax,8)
.LBB4_289:                              # %L12077
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB4_4
# BB#290:                               # %if.then1485
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB4_291
# BB#292:                               # %L12097
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$102, %rax
	jne	.LBB4_293
# BB#295:                               # %L9943
	movq	8(%rbx), %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	ix86_comparison_operator
	testq	%r13, %rax
	je	.LBB4_571
# BB#296:                               # %if.then1514
	movq	%r12, recog_data+8(%rip)
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_298
# BB#297:                               # %land.lhs.true1526
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB4_298
# BB#299:                               # %L9945
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_301
# BB#300:                               # %land.lhs.true1542
	cmpq	$0, 8(%rax)
	je	.LBB4_302
.LBB4_301:                              # %if.end1548
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_3:                                # %entry
	cmpq	$57, %rax
	jne	.LBB4_4
# BB#84:                                # %L12067
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB4_4
# BB#85:                                # %land.lhs.true
	movl	8(%rbx), %eax
	cmpq	$18, %rax
	jne	.LBB4_4
# BB#86:                                # %L8962
	movq	16(%r15), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3735626, %rax          # imm = 0x39004A
	jne	.LBB4_4
# BB#87:                                # %L8963
	movq	8(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB4_89
# BB#88:                                # %if.then77
	movq	%rbx, recog_data(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$125, %rcx
	jne	.LBB4_89
# BB#90:                                # %L8965
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_92
# BB#91:                                # %if.then99
	movq	%rbx, recog_data+8(%rip)
.LBB4_92:                               # %if.end101
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_284:                              # %L12075
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB4_4
# BB#285:                               # %if.then1452
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196734, %rcx           # imm = 0x3007E
	jne	.LBB4_286
# BB#287:                               # %L9345
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_288
# BB#570:                               # %if.then1476
	movabsq	$recog_data, %rdi
	movq	%rbx, recog_data+8(%rip)
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_943  # TAILCALL
.LBB4_269:                              # %L12074
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB4_4
# BB#270:                               # %if.then1366
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262270, %rcx           # imm = 0x4007E
	jne	.LBB4_271
# BB#272:                               # %L9316
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_568
# BB#273:                               # %if.then1390
	movl	target_flags(%rip), %edx
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rdx
	je	.LBB4_283
# BB#274:                               # %land.lhs.true1398
	movl	(%rbx), %eax
	movq	$14, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	movq	%rcx, %rsi
	orq	$4, %rsi
	andq	%r13, %rsi
	cmpq	$6, %rsi
	jne	.LBB4_275
# BB#278:                               # %land.lhs.true1422
	movl	reload_completed(%rip), %ecx
	movl	reload_in_progress(%rip), %esi
	orq	%rcx, %rsi
	testq	%r13, %rsi
	jne	.LBB4_283
	jmp	.LBB4_279
.LBB4_93:                               # %L12068
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r13, %rax
	je	.LBB4_103
# BB#94:                                # %if.then110
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB4_131
# BB#95:                                # %if.then133
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB4_130
# BB#96:                                # %land.lhs.true145
	movl	flow2_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB4_99
# BB#97:                                # %lor.lhs.false
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	je	.LBB4_130
# BB#98:                                # %lor.lhs.false
	movl	flag_peephole2(%rip), %eax
	testq	%r13, %rax
	jne	.LBB4_130
.LBB4_99:                               # %land.lhs.true150
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	symbolic_operand
	testq	%r13, %rax
	jne	.LBB4_130
# BB#100:                               # %land.lhs.true154
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	x86_64_immediate_operand
	testq	%r13, %rax
	je	.LBB4_101
.LBB4_130:                              # %if.end160
	movq	16(%r15), %rbx
.LBB4_131:                              # %L8983
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB4_102
# BB#132:                               # %if.then138
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB4_102
# BB#133:                               # %if.then138
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB4_102
# BB#134:                               # %land.lhs.true168
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB4_138
# BB#135:                               # %land.lhs.true173
	movl	8(%rbx), %eax
	addq	$-29, %rax
	andq	%r13, %rax
	cmpq	$8, %rax
	jb	.LBB4_102
# BB#136:                               # %land.lhs.true189
	movl	8(%rbx), %ecx
	cmpq	$52, %rcx
	ja	.LBB4_138
# BB#137:                               # %land.lhs.true189
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rax
	je	.LBB4_138
.LBB4_102:                              # %if.end140
	movq	8(%r15), %rbx
.LBB4_103:                              # %L12069
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB4_117
# BB#104:                               # %if.then115
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327806, %rax           # imm = 0x5007E
	jne	.LBB4_105
# BB#139:                               # %L9283
	movq	8(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_116
# BB#140:                               # %if.then245
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$1, %rax
	je	.LBB4_116
# BB#141:                               # %land.lhs.true253
	movl	(%rbx), %edx
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	movq	%rcx, %rsi
	orq	$4, %rsi
	andq	%r13, %rsi
	cmpq	$6, %rsi
	jne	.LBB4_142
# BB#145:                               # %land.lhs.true276
	movl	reload_completed(%rip), %ecx
	movl	reload_in_progress(%rip), %esi
	orq	%rcx, %rsi
	testq	%r13, %rsi
	jne	.LBB4_116
	jmp	.LBB4_146
.LBB4_186:                              # %L12071
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r13, %rax
	je	.LBB4_4
# BB#187:                               # %if.then676
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB4_188
# BB#189:                               # %L12093
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB4_194
# BB#190:                               # %if.then693
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB4_193
# BB#191:                               # %land.lhs.true705
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB4_193
# BB#192:                               # %land.lhs.true710
	movq	8(%rbx), %rax
	movl	(%rax), %eax
	andq	$67174399, %rax         # imm = 0x400FFFF
	cmpq	$67108932, %rax         # imm = 0x4000044
	jne	.LBB4_193
# BB#597:                               # %if.then727
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_862  # TAILCALL
.LBB4_204:                              # %L12072
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r13, %rax
	je	.LBB4_209
# BB#205:                               # %if.then820
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB4_206
# BB#220:                               # %L12096
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB4_221
# BB#228:                               # %L9155
	movq	8(%rbx), %r12
	movq	$15, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_206
# BB#229:                               # %if.then865
	movq	%r12, recog_data+8(%rip)
	movl	8(%r12), %eax
	movzbl	target_flags+3(%rip), %ecx
	andq	$-8, %rax
	andq	%r13, %rax
	testq	$2, %rcx
	je	.LBB4_230
# BB#232:                               # %land.lhs.true887
	cmpq	$8, %rax
	jne	.LBB4_233
# BB#566:                               # %if.then899
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_897  # TAILCALL
.LBB4_89:                               # %if.end90
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_291:                              # %if.end1496
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_286:                              # %if.end1467
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_271:                              # %if.end1381
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_188:                              # %if.end687
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_105:                              # %if.end231
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB4_116
# BB#106:                               # %if.then234
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB4_116
# BB#107:                               # %if.then234
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB4_116
# BB#108:                               # %land.lhs.true311
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_112
# BB#109:                               # %land.lhs.true316
	movl	8(%rax), %ecx
	addq	$-29, %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_116
# BB#110:                               # %land.lhs.true333
	movl	8(%rax), %ecx
	cmpq	$52, %rcx
	ja	.LBB4_112
# BB#111:                               # %land.lhs.true333
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rax
	jne	.LBB4_116
.LBB4_112:                              # %land.lhs.true357
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB4_600
# BB#113:                               # %land.lhs.true362
	movl	8(%rbx), %eax
	addq	$-29, %rax
	andq	%r13, %rax
	cmpq	$8, %rax
	jb	.LBB4_116
# BB#114:                               # %land.lhs.true379
	movl	8(%rbx), %ecx
	cmpq	$52, %rcx
	ja	.LBB4_600
# BB#115:                               # %land.lhs.true379
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rax
	jne	.LBB4_116
.LBB4_600:                              # %if.then403
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_857  # TAILCALL
.LBB4_193:                              # %if.end729
	movq	16(%r15), %rbx
.LBB4_194:                              # %L12094
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_201
# BB#195:                               # %if.then698
	movq	%rbx, recog_data+8(%rip)
	movl	8(%rbx), %ecx
	movzbl	target_flags+3(%rip), %eax
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jne	.LBB4_196
# BB#197:                               # %if.then698
	movabsq	$1, %rdx
	jmp	.LBB4_198
.LBB4_293:                              # %L12097
	cmpq	$103, %rax
	jne	.LBB4_294
# BB#305:                               # %L9958
	movq	8(%rbx), %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	ix86_comparison_operator
	testq	%r13, %rax
	je	.LBB4_573
# BB#306:                               # %if.then1574
	movq	%r12, recog_data+8(%rip)
	movq	8(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_308
# BB#307:                               # %land.lhs.true1586
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB4_308
# BB#309:                               # %L9960
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_311
# BB#310:                               # %land.lhs.true1602
	cmpq	$0, 8(%rax)
	je	.LBB4_312
.LBB4_311:                              # %if.end1608
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_221:                              # %if.end854
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_206
# BB#222:                               # %if.then857
	movl	target_flags(%rip), %ecx
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB4_234
# BB#223:                               # %if.then857
	testq	%r13, %rax
	je	.LBB4_234
# BB#224:                               # %land.lhs.true909
	movl	8(%rbx), %edx
	movabsq	$4294967288, %rsi       # imm = 0xFFFFFFF8
	andq	%rdx, %rsi
	cmpq	$8, %rsi
	je	.LBB4_227
# BB#225:                               # %land.lhs.true909
	leaq	-21(%rdx), %rsi
	andq	%r13, %rsi
	cmpq	$8, %rsi
	jb	.LBB4_227
# BB#226:                               # %land.lhs.true909
	addq	$-45, %rdx
	andq	%r13, %rdx
	cmpq	$7, %rdx
	jbe	.LBB4_227
.LBB4_234:                              # %L9022
	testq	%r13, %rcx
	je	.LBB4_239
# BB#235:                               # %L9022
	testq	%r13, %rax
	je	.LBB4_239
# BB#236:                               # %land.lhs.true952
	movl	8(%rbx), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB4_567
# BB#237:                               # %land.lhs.true952
	leaq	-21(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_567
# BB#238:                               # %land.lhs.true952
	addq	$-45, %rax
	andq	%r13, %rax
	cmpq	$7, %rax
	jbe	.LBB4_567
.LBB4_239:                              # %if.end990
	movq	16(%r15), %rbx
	jmp	.LBB4_206
.LBB4_288:                              # %if.end1479
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_138:                              # %if.then213
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_856  # TAILCALL
.LBB4_201:                              # %if.end700
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_196:
	movabsq	$0, %rdx
.LBB4_198:                              # %if.then698
	leaq	-21(%rcx), %rsi
	andq	%r13, %rsi
	cmpq	$8, %rsi
	sbbq	%rsi, %rsi
	andq	$1, %rsi
	orq	%rdx, %rsi
	addq	$-45, %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	orq	%rsi, %rcx
	testq	$2, %rax
	je	.LBB4_199
# BB#202:                               # %land.lhs.true776
	testq	%rcx, %rcx
	je	.LBB4_203
# BB#565:                               # %if.then812
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_864  # TAILCALL
.LBB4_294:                              # %sw.epilog1505
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_298:                              # %if.end1532
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_199:                              # %land.lhs.true735
	testq	%rcx, %rcx
	je	.LBB4_203
# BB#200:                               # %if.then771
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_863  # TAILCALL
.LBB4_203:                              # %if.end814
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_571:                              # %if.end1516
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_275:                              # %lor.lhs.false1414
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jne	.LBB4_283
# BB#276:                               # %lor.lhs.false1414
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB4_283
# BB#277:                               # %lor.lhs.false1414
	movl	reload_in_progress(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB4_283
.LBB4_279:                              # %land.lhs.true1426
	andq	$16711680, %rax         # imm = 0xFF0000
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB4_281
# BB#280:                               # %land.lhs.true1426
	movq	%rax, %rcx
	andq	%r13, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB4_283
.LBB4_281:                              # %lor.lhs.false1435
	testq	$262144, %rdx           # imm = 0x40000
	je	.LBB4_569
# BB#282:                               # %lor.lhs.false1435
	andq	%r13, %rax
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB4_569
.LBB4_283:                              # %if.end1446
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_230:                              # %land.lhs.true870
	cmpq	$8, %rax
	jne	.LBB4_233
# BB#231:                               # %if.then882
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_896  # TAILCALL
.LBB4_233:                              # %if.end901
	movq	16(%r15), %rbx
.LBB4_206:                              # %L9025
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB4_208
# BB#207:                               # %if.then844
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB4_208
# BB#602:                               # %if.then995
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_868  # TAILCALL
.LBB4_208:                              # %if.end846
	movq	8(%r15), %rbx
.LBB4_209:                              # %L12073
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB4_217
# BB#210:                               # %if.then825
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB4_216
# BB#211:                               # %if.then1006
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB4_216
# BB#212:                               # %land.lhs.true1013
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	je	.LBB4_241
# BB#213:                               # %land.lhs.true1013
	cmpq	$63, %rcx
	jne	.LBB4_214
# BB#240:                               # %land.lhs.true1069
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_244
.LBB4_241:                              # %land.lhs.true1028
	movl	8(%rax), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB4_216
# BB#242:                               # %land.lhs.true1077
	leaq	-21(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_216
# BB#243:                               # %land.lhs.true1077
	addq	$-45, %rax
	andq	%r13, %rax
	cmpq	$8, %rax
	jae	.LBB4_244
	jmp	.LBB4_216
.LBB4_214:                              # %land.lhs.true1013
	cmpq	$66, %rcx
	jne	.LBB4_244
# BB#215:                               # %lor.lhs.false1018
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB4_216
.LBB4_244:                              # %land.lhs.true1131
	movzbl	(%rbx), %eax
	cmpq	$63, %rax
	jne	.LBB4_245
# BB#251:                               # %land.lhs.true1177
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_250
# BB#252:                               # %land.lhs.true1185
	movl	8(%rax), %eax
	jmp	.LBB4_247
.LBB4_245:                              # %land.lhs.true1131
	cmpq	$61, %rax
	jne	.LBB4_250
# BB#246:                               # %land.lhs.true1136
	movl	8(%rbx), %eax
.LBB4_247:                              # %land.lhs.true1136
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB4_216
# BB#248:                               # %land.lhs.true1185
	leaq	-21(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_216
# BB#249:                               # %land.lhs.true1185
	addq	$-45, %rax
	andq	%r13, %rax
	cmpq	$8, %rax
	jb	.LBB4_216
.LBB4_250:                              # %if.then1239
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_869  # TAILCALL
.LBB4_216:                              # %if.end1008
	movq	8(%r15), %rbx
.LBB4_217:                              # %L12078
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_4
# BB#218:                               # %if.then830
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$1048648, %rax          # imm = 0x100048
	jne	.LBB4_219
# BB#253:                               # %L10186
	movq	8(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	fcmov_comparison_operator
	testq	%r13, %rax
	je	.LBB4_568
# BB#254:                               # %if.then1266
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	%rax, recog_data+32(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_256
# BB#255:                               # %land.lhs.true1282
	cmpq	$0, 8(%rax)
	je	.LBB4_257
.LBB4_256:                              # %if.end1287
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_219:                              # %if.end1257
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_308:                              # %if.end1592
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_142:                              # %lor.lhs.false268
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jne	.LBB4_116
# BB#143:                               # %lor.lhs.false268
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB4_116
# BB#144:                               # %lor.lhs.false268
	movl	reload_in_progress(%rip), %ecx
	testq	%r13, %rcx
	jne	.LBB4_116
.LBB4_146:                              # %land.lhs.true280
	andq	$16711680, %rdx         # imm = 0xFF0000
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB4_148
# BB#147:                               # %land.lhs.true280
	movq	%rdx, %rcx
	andq	%r13, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB4_148
# BB#152:                               # %lor.lhs.false298
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB4_116
	jmp	.LBB4_151
.LBB4_573:                              # %if.end1576
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_101:                              # %if.then158
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_855  # TAILCALL
.LBB4_227:                              # %if.then945
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_866  # TAILCALL
.LBB4_257:                              # %L10189
	movq	16(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB4_568
# BB#258:                               # %if.then1296
	movq	%rbx, recog_data+16(%rip)
	movq	24(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB4_568
# BB#259:                               # %if.then1307
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	testq	$2, %rax
	jne	.LBB4_268
# BB#260:                               # %land.lhs.true1315
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_267
# BB#261:                               # %land.lhs.true1320
	movl	8(%rax), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB4_268
# BB#262:                               # %land.lhs.true1320
	leaq	-21(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_268
# BB#263:                               # %lor.lhs.false1344
	cmpq	$45, %rax
	jb	.LBB4_267
# BB#264:                               # %land.lhs.true1350
	cmpq	$53, %rax
	jb	.LBB4_268
# BB#265:                               # %land.lhs.true1350
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	jne	.LBB4_266
	jmp	.LBB4_268
.LBB4_568:                              # %if.end1392
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_148:                              # %lor.lhs.false289
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB4_151
# BB#149:                               # %lor.lhs.false289
	movq	%rax, %rcx
	andq	$262144, %rcx           # imm = 0x40000
	testq	%r13, %rcx
	je	.LBB4_151
# BB#150:                               # %lor.lhs.false289
	andq	$33554432, %rax         # imm = 0x2000000
	testq	%r13, %rax
	je	.LBB4_151
.LBB4_116:                              # %if.end236
	movq	8(%r15), %rbx
.LBB4_117:                              # %L12070
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB4_127
# BB#118:                               # %if.then120
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327801, %rax           # imm = 0x50079
	jne	.LBB4_119
# BB#153:                               # %L9107
	movq	8(%r12), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB4_126
# BB#154:                               # %land.lhs.true436
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB4_126
# BB#155:                               # %if.then439
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_889  # TAILCALL
.LBB4_119:                              # %if.end421
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB4_126
# BB#120:                               # %if.then424
	movzbl	target_flags+3(%rip), %eax
	movq	%r12, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB4_126
# BB#121:                               # %land.lhs.true447
	movl	flow2_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB4_124
# BB#122:                               # %lor.lhs.false449
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	je	.LBB4_126
# BB#123:                               # %lor.lhs.false449
	movl	flag_peephole2(%rip), %eax
	testq	%r13, %rax
	jne	.LBB4_126
.LBB4_124:                              # %land.lhs.true453
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	symbolic_operand
	testq	%r13, %rax
	jne	.LBB4_126
# BB#125:                               # %land.lhs.true457
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	x86_64_immediate_operand
	testq	%r13, %rax
	je	.LBB4_601
.LBB4_126:                              # %if.end426
	movq	8(%r15), %rbx
.LBB4_127:                              # %L12076
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_4
# BB#128:                               # %if.then125
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB4_129
# BB#156:                               # %L9394
	movq	8(%rax), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB4_157
# BB#158:                               # %L9395
	movq	8(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB4_159
# BB#160:                               # %L12089
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB4_161
# BB#163:                               # %L9396
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB4_164
# BB#165:                               # %L12092
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$78, %rax
	jne	.LBB4_166
# BB#173:                               # %L9433
	movq	8(%r14), %rdi
	movq	%rdi, (%rsp)            # 8-byte Spill
	movq	$4, %rsi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_561
# BB#174:                               # %if.then550
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	const248_operand
	testq	%r13, %rax
	je	.LBB4_561
# BB#175:                               # %if.then561
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_561
# BB#176:                               # %if.then572
	movq	%rbx, recog_data+24(%rip)
	movq	16(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB4_561
# BB#177:                               # %if.then583
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB4_179
# BB#178:                               # %if.then583
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB4_179
# BB#562:                               # %if.then593
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_959  # TAILCALL
.LBB4_129:                              # %if.end479
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_157:                              # %if.end495
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_159:                              # %if.end507
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_161:                              # %L12089
	cmpq	$78, %rax
	jne	.LBB4_162
# BB#180:                               # %L9413
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_563
# BB#181:                               # %if.then636
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const248_operand
	testq	%r13, %rax
	je	.LBB4_563
# BB#182:                               # %if.then647
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB4_563
# BB#183:                               # %if.then658
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB4_185
# BB#184:                               # %if.then658
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB4_185
# BB#564:                               # %if.then668
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_957  # TAILCALL
.LBB4_567:                              # %if.then988
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_867  # TAILCALL
.LBB4_151:                              # %if.then301
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_929  # TAILCALL
.LBB4_164:                              # %if.end528
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_162:                              # %sw.epilog516
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_569:                              # %if.then1444
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_936  # TAILCALL
.LBB4_601:                              # %if.then461
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_860  # TAILCALL
.LBB4_166:                              # %if.end536
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_172
# BB#167:                               # %if.then539
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB4_179
# BB#168:                               # %if.then604
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB4_179
# BB#169:                               # %if.then615
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB4_179
# BB#170:                               # %if.then615
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB4_179
# BB#171:                               # %if.then625
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_955  # TAILCALL
.LBB4_563:                              # %if.end660
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_302:                              # %L9946
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_304
# BB#303:                               # %land.lhs.true1558
	cmpq	$0, 8(%rax)
	je	.LBB4_572
.LBB4_304:                              # %if.end1565
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_312:                              # %L9961
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_314
# BB#313:                               # %land.lhs.true1618
	cmpq	$0, 8(%rax)
	je	.LBB4_574
.LBB4_314:                              # %if.end1625
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_561:                              # %if.end585
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_172:                              # %if.end541
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_267:                              # %land.lhs.true1356
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	je	.LBB4_268
.LBB4_266:                              # %if.then1358
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1214  # TAILCALL
.LBB4_268:                              # %if.end1360
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_185:                              # %if.end670
	movq	8(%r15), %rbx
	jmp	.LBB4_4
.LBB4_179:                              # %if.end627
	movq	8(%r15), %rbx
.LBB4_4:                                # %L9032
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB4_13
# BB#5:                                 # %if.then
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB4_12
# BB#6:                                 # %if.then1634
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB4_12
# BB#7:                                 # %land.lhs.true1641
	movq	recog_data(%rip), %rax
	movzbl	2(%rax), %eax
	addq	$-16, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB4_12
# BB#8:                                 # %land.lhs.true1659
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB4_598
# BB#9:                                 # %lor.lhs.false1664
	movl	8(%rbx), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB4_12
# BB#10:                                # %lor.lhs.false1664
	leaq	-21(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_12
# BB#11:                                # %lor.lhs.false1664
	addq	$-45, %rax
	andq	%r12, %rax
	cmpq	$8, %rax
	jb	.LBB4_12
.LBB4_598:                              # %if.then1700
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_872  # TAILCALL
.LBB4_12:                               # %if.end1636
	movq	8(%r15), %rbx
.LBB4_13:                               # %L9036
	movzbl	2(%rbx), %eax
	cmpq	$17, %rax
	jne	.LBB4_14
# BB#315:                               # %L12079
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_15
# BB#316:                               # %if.then1708
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1114112, %rcx          # imm = 0x110000
	jne	.LBB4_317
# BB#318:                               # %L12100
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB4_319
# BB#326:                               # %L9165
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB4_327
# BB#329:                               # %L12101
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_575
# BB#330:                               # %if.then1751
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	jne	.LBB4_332
# BB#331:                               # %land.lhs.true1759
	movl	8(%rbx), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jne	.LBB4_332
# BB#576:                               # %if.then1771
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_898  # TAILCALL
.LBB4_14:                               # %L9036
	cmpq	$18, %rax
	jne	.LBB4_15
# BB#337:                               # %L12080
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_15
# BB#338:                               # %if.then1851
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1179648, %rcx          # imm = 0x120000
	jne	.LBB4_339
# BB#340:                               # %L12104
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jne	.LBB4_341
# BB#349:                               # %L9170
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$15, %rax
	jne	.LBB4_350
# BB#352:                               # %L12105
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_579
# BB#353:                               # %if.then1894
	movq	%rbx, recog_data+8(%rip)
	movl	8(%rbx), %eax
	movzbl	target_flags+3(%rip), %ecx
	andq	$-8, %rax
	andq	%r12, %rax
	testq	$2, %rcx
	je	.LBB4_354
# BB#356:                               # %land.lhs.true1919
	cmpq	$8, %rax
	jne	.LBB4_357
# BB#580:                               # %if.then1931
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_900  # TAILCALL
.LBB4_317:                              # %if.end1719
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_319:                              # %if.end1727
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_325
# BB#320:                               # %if.then1730
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	jne	.LBB4_336
# BB#321:                               # %land.lhs.true1807
	movl	8(%rbx), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB4_324
# BB#322:                               # %land.lhs.true1807
	leaq	-21(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_324
# BB#323:                               # %land.lhs.true1807
	addq	$-45, %rax
	andq	%r12, %rax
	cmpq	$7, %rax
	ja	.LBB4_336
.LBB4_324:                              # %if.then1843
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_873  # TAILCALL
.LBB4_339:                              # %if.end1862
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_327:                              # %L9165
	cmpq	$16, %rax
	jne	.LBB4_328
# BB#333:                               # %L12102
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_577
# BB#334:                               # %if.then1779
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	jne	.LBB4_336
# BB#335:                               # %land.lhs.true1787
	movl	8(%rbx), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jne	.LBB4_336
# BB#578:                               # %if.then1799
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_901  # TAILCALL
.LBB4_336:                              # %if.end1845
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_341:                              # %if.end1870
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_348
# BB#342:                               # %if.then1873
	movq	%rbx, recog_data+8(%rip)
	movl	8(%rbx), %ecx
	movzbl	target_flags+3(%rip), %eax
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	jne	.LBB4_343
# BB#344:                               # %if.then1873
	movabsq	$1, %rdx
	jmp	.LBB4_345
.LBB4_325:                              # %if.end1732
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_332:                              # %if.end1773
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_350:                              # %L9170
	cmpq	$16, %rax
	jne	.LBB4_351
# BB#358:                               # %L12106
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_581
# BB#359:                               # %if.then1939
	movq	%rbx, recog_data+8(%rip)
	movl	8(%rbx), %eax
	movzbl	target_flags+3(%rip), %ecx
	andq	$-8, %rax
	andq	%r12, %rax
	testq	$2, %rcx
	je	.LBB4_360
# BB#362:                               # %land.lhs.true1964
	cmpq	$8, %rax
	jne	.LBB4_363
# BB#582:                               # %if.then1976
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_903  # TAILCALL
.LBB4_328:                              # %sw.epilog1745
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_575:                              # %if.end1753
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_348:                              # %if.end1875
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_343:
	movabsq	$0, %rdx
.LBB4_345:                              # %if.then1873
	leaq	-21(%rcx), %rsi
	andq	%r12, %rsi
	cmpq	$8, %rsi
	sbbq	%rsi, %rsi
	andq	$1, %rsi
	orq	%rdx, %rsi
	addq	$-45, %rcx
	andq	%r12, %rcx
	cmpq	$8, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	orq	%rsi, %rcx
	testq	$2, %rax
	je	.LBB4_346
# BB#364:                               # %land.lhs.true2025
	testq	%rcx, %rcx
	je	.LBB4_365
# BB#583:                               # %if.then2061
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_875  # TAILCALL
.LBB4_351:                              # %sw.epilog1888
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_346:                              # %land.lhs.true1984
	testq	%rcx, %rcx
	je	.LBB4_365
# BB#347:                               # %if.then2020
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_874  # TAILCALL
.LBB4_365:                              # %if.end2063
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_579:                              # %if.end1896
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_577:                              # %if.end1781
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_354:                              # %land.lhs.true1902
	cmpq	$8, %rax
	jne	.LBB4_357
# BB#355:                               # %if.then1914
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_899  # TAILCALL
.LBB4_357:                              # %if.end1933
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_581:                              # %if.end1941
	movq	8(%r15), %rbx
	jmp	.LBB4_15
.LBB4_360:                              # %land.lhs.true1947
	cmpq	$8, %rax
	jne	.LBB4_363
# BB#361:                               # %if.then1959
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_902  # TAILCALL
.LBB4_363:                              # %if.end1978
	movq	8(%r15), %rbx
.LBB4_15:                               # %L9524
	movzbl	(%rbx), %eax
	cmpq	$59, %rax
	je	.LBB4_410
# BB#16:                                # %L9524
	cmpq	$61, %rax
	jne	.LBB4_17
# BB#366:                               # %L12081
	movl	8(%rbx), %eax
	cmpq	$17, %rax
	jne	.LBB4_18
# BB#367:                               # %L9525
	movq	16(%r15), %rbx
	movzbl	(%rbx), %eax
	cmpq	$74, %rax
	jne	.LBB4_368
# BB#369:                               # %L9526
	movq	8(%rbx), %r14
	movzbl	(%r14), %eax
	cmpq	$83, %rax
	jne	.LBB4_370
# BB#379:                               # %L10340
	movq	8(%r14), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	aligned_operand
	testq	%r12, %rax
	je	.LBB4_586
# BB#380:                               # %if.then2154
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB4_586
# BB#381:                               # %if.then2165
	movq	%r13, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_389
# BB#382:                               # %land.lhs.true2177
	cmpq	$0, 8(%rax)
	jne	.LBB4_389
# BB#383:                               # %land.lhs.true2182
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r12, %rdx
	jne	.LBB4_389
# BB#384:                               # %land.lhs.true2182
	movl	reload_completed(%rip), %eax
	testq	%r12, %rax
	je	.LBB4_389
# BB#385:                               # %land.lhs.true2187
	movq	$55, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r12, %rax
	je	.LBB4_389
# BB#386:                               # %land.lhs.true2190
	movq	recog_data(%rip), %rax
	movzbl	2(%rax), %eax
	cmpq	$3, %rax
	je	.LBB4_587
# BB#387:                               # %land.lhs.true2190
	cmpq	$2, %rax
	jne	.LBB4_389
# BB#388:                               # %land.lhs.true2202
	movl	ix86_cpu(%rip), %ecx
	movl	x86_promote_QImode(%rip), %eax
	movl	optimize_size(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdx
	testq	%r12, %rdx
	je	.LBB4_389
.LBB4_587:                              # %if.then2208
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1238  # TAILCALL
.LBB4_410:                              # %L9972
	movq	16(%r15), %r14
	movzbl	(%r14), %eax
	cmpq	$72, %rax
	jne	.LBB4_27
# BB#411:                               # %L9973
	movq	8(%r14), %r13
	movzbl	(%r13), %eax
	cmpq	$102, %rax
	jne	.LBB4_412
# BB#423:                               # %L9974
	movq	8(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	ix86_comparison_operator
	testq	%r12, %rax
	je	.LBB4_27
# BB#424:                               # %if.then2391
	movq	%rbx, recog_data(%rip)
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_27
# BB#425:                               # %land.lhs.true2403
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB4_27
# BB#426:                               # %L9976
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_27
# BB#427:                               # %land.lhs.true2419
	cmpq	$0, 8(%rax)
	jne	.LBB4_27
# BB#428:                               # %L9977
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_27
# BB#429:                               # %land.lhs.true2435
	cmpq	$0, 8(%rax)
	jne	.LBB4_27
# BB#430:                               # %L9978
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB4_27
# BB#431:                               # %L9979
	movq	8(%rax), %rax
	movq	%rax, recog_data+8(%rip)
	movq	24(%r14), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB4_27
# BB#432:                               # %if.then2466
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1155  # TAILCALL
.LBB4_17:                               # %L9524
	cmpq	$64, %rax
	jne	.LBB4_18
# BB#390:                               # %L9949
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB4_28
# BB#391:                               # %if.then2219
	movq	%r14, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB4_27
# BB#392:                               # %L12107
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$102, %rax
	jne	.LBB4_393
# BB#402:                               # %L9951
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ix86_comparison_operator
	testq	%r12, %rax
	je	.LBB4_27
# BB#403:                               # %if.then2248
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_27
# BB#404:                               # %land.lhs.true2260
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB4_27
# BB#405:                               # %L9953
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_27
# BB#406:                               # %land.lhs.true2276
	cmpq	$0, 8(%rax)
	jne	.LBB4_27
# BB#407:                               # %L9954
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_27
# BB#408:                               # %land.lhs.true2292
	cmpq	$0, 8(%rax)
	jne	.LBB4_27
# BB#409:                               # %if.then2297
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1134  # TAILCALL
.LBB4_368:                              # %if.end2080
	movq	8(%r15), %rbx
	jmp	.LBB4_18
.LBB4_412:                              # %L9973
	cmpq	$103, %rax
	jne	.LBB4_27
# BB#413:                               # %L9985
	movq	8(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	ix86_comparison_operator
	testq	%r12, %rax
	je	.LBB4_27
# BB#414:                               # %if.then2477
	movq	%rbx, recog_data(%rip)
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_27
# BB#415:                               # %land.lhs.true2489
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB4_27
# BB#416:                               # %L9987
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_27
# BB#417:                               # %land.lhs.true2505
	cmpq	$0, 8(%rax)
	jne	.LBB4_27
# BB#418:                               # %L9988
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_27
# BB#419:                               # %land.lhs.true2521
	cmpq	$0, 8(%rax)
	jne	.LBB4_27
# BB#420:                               # %L9989
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB4_27
# BB#421:                               # %L9990
	movq	8(%rax), %rax
	movq	%rax, recog_data+8(%rip)
	movq	24(%r14), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB4_27
# BB#422:                               # %if.then2552
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1156  # TAILCALL
.LBB4_370:                              # %L9526
	cmpq	$133, %rax
	jne	.LBB4_371
# BB#372:                               # %L9527
	movq	8(%r14), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB4_584
# BB#373:                               # %if.then2101
	movq	%r13, recog_data(%rip)
	movq	16(%r14), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB4_584
# BB#374:                               # %if.then2112
	movq	%r13, recog_data+8(%rip)
	movq	24(%r14), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB4_584
# BB#375:                               # %if.then2123
	movq	%r13, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_378
# BB#376:                               # %land.lhs.true2135
	cmpq	$0, 8(%rax)
	jne	.LBB4_378
# BB#377:                               # %land.lhs.true2140
	movq	$55, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r12, %rax
	je	.LBB4_378
# BB#585:                               # %if.then2143
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1010  # TAILCALL
.LBB4_393:                              # %L12107
	cmpq	$103, %rax
	jne	.LBB4_27
# BB#394:                               # %L9966
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ix86_comparison_operator
	testq	%r12, %rax
	je	.LBB4_27
# BB#395:                               # %if.then2308
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_27
# BB#396:                               # %land.lhs.true2320
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB4_27
# BB#397:                               # %L9968
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_27
# BB#398:                               # %land.lhs.true2336
	cmpq	$0, 8(%rax)
	jne	.LBB4_27
# BB#399:                               # %L9969
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_27
# BB#400:                               # %land.lhs.true2352
	cmpq	$0, 8(%rax)
	jne	.LBB4_27
# BB#401:                               # %if.then2357
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1136  # TAILCALL
.LBB4_586:                              # %if.end2167
	movq	8(%r15), %rbx
	jmp	.LBB4_18
.LBB4_371:                              # %sw.epilog2092
	movq	8(%r15), %rbx
	jmp	.LBB4_18
.LBB4_584:                              # %if.end2125
	movq	8(%r15), %rbx
	jmp	.LBB4_18
.LBB4_389:                              # %if.end2210
	movq	8(%r15), %rbx
	jmp	.LBB4_18
.LBB4_378:                              # %if.end2145
	movq	8(%r15), %rbx
.LBB4_18:                               # %L9048
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB4_28
# BB#19:                                # %if.then24
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB4_27
# BB#20:                                # %if.then2563
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB4_27
# BB#21:                                # %land.lhs.true2570
	movq	recog_data(%rip), %rax
	movl	(%rax), %esi
	movq	%rsi, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$66, %rdx
	jne	.LBB4_23
# BB#22:                                # %lor.lhs.false2575
	movzbl	(%rbx), %ecx
	cmpq	$66, %rcx
	je	.LBB4_27
.LBB4_23:                               # %land.lhs.true2580
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	addq	$-17, %rsi
	andq	%r12, %rsi
	cmpq	$1, %rsi
	ja	.LBB4_27
# BB#24:                                # %land.lhs.true2592
	cmpq	$63, %rdx
	jne	.LBB4_25
# BB#433:                               # %land.lhs.true2638
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	je	.LBB4_26
	jmp	.LBB4_436
.LBB4_25:                               # %land.lhs.true2592
	cmpq	$61, %rdx
	jne	.LBB4_436
.LBB4_26:                               # %land.lhs.true2597
	movl	8(%rax), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB4_27
# BB#434:                               # %land.lhs.true2646
	leaq	-21(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_27
# BB#435:                               # %land.lhs.true2646
	addq	$-45, %rax
	andq	%r12, %rax
	cmpq	$8, %rax
	jb	.LBB4_27
.LBB4_436:                              # %land.lhs.true2700
	movzbl	(%rbx), %eax
	cmpq	$63, %rax
	jne	.LBB4_437
# BB#443:                               # %land.lhs.true2746
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_442
# BB#444:                               # %land.lhs.true2754
	movl	8(%rax), %eax
	jmp	.LBB4_439
.LBB4_437:                              # %land.lhs.true2700
	cmpq	$61, %rax
	jne	.LBB4_442
# BB#438:                               # %land.lhs.true2705
	movl	8(%rbx), %eax
.LBB4_439:                              # %land.lhs.true2705
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB4_27
# BB#440:                               # %land.lhs.true2754
	leaq	-21(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$8, %rcx
	jb	.LBB4_27
# BB#441:                               # %land.lhs.true2754
	addq	$-45, %rax
	andq	%r12, %rax
	cmpq	$8, %rax
	jb	.LBB4_27
.LBB4_442:                              # %if.then2808
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_876  # TAILCALL
.LBB4_27:                               # %if.end2250
	movq	8(%r15), %rbx
.LBB4_28:                               # %L10804
	movzbl	2(%rbx), %eax
	cmpq	$32, %rax
	jg	.LBB4_43
# BB#29:                                # %L10804
	cmpq	$6, %rax
	jne	.LBB4_30
# BB#445:                               # %L12082
	movq	$6, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_30
# BB#446:                               # %if.then2816
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$6, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_447
# BB#588:                               # %if.then2824
	movabsq	$recog_data, %rdi
	movq	%rbx, recog_data+8(%rip)
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1306  # TAILCALL
.LBB4_43:                               # %L10804
	addq	$-33, %rax
	andq	%r12, %rax
	cmpq	$13, %rax
	ja	.LBB4_30
# BB#44:                                # %L10804
	jmpq	*.LJTI4_1(,%rax,8)
.LBB4_454:                              # %L12085
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_30
# BB#455:                               # %if.then2867
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$33, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_456
# BB#591:                               # %if.then2875
	movabsq	$recog_data, %rdi
	movq	%rbx, recog_data+8(%rip)
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1309  # TAILCALL
.LBB4_447:                              # %if.end2827
	movq	8(%r15), %rbx
	jmp	.LBB4_30
.LBB4_457:                              # %L12086
	movq	$36, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_30
# BB#458:                               # %if.then2884
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$36, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_459
# BB#592:                               # %if.then2892
	movabsq	$recog_data, %rdi
	movq	%rbx, recog_data+8(%rip)
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1310  # TAILCALL
.LBB4_451:                              # %L12084
	movq	$37, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_30
# BB#452:                               # %if.then2850
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$37, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_453
# BB#590:                               # %if.then2858
	movabsq	$recog_data, %rdi
	movq	%rbx, recog_data+8(%rip)
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1308  # TAILCALL
.LBB4_460:                              # %L12087
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_30
# BB#461:                               # %if.then2901
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$39, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_462
# BB#593:                               # %if.then2909
	movabsq	$recog_data, %rdi
	movq	%rbx, recog_data+8(%rip)
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1311  # TAILCALL
.LBB4_463:                              # %L12088
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_30
# BB#464:                               # %if.then2918
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$44, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_465
# BB#594:                               # %if.then2926
	movabsq	$recog_data, %rdi
	movq	%rbx, recog_data+8(%rip)
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1312  # TAILCALL
.LBB4_448:                              # %L12083
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r12, %rax
	je	.LBB4_30
# BB#449:                               # %if.then2833
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$46, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_450
# BB#589:                               # %if.then2841
	movabsq	$recog_data, %rdi
	movq	%rbx, recog_data+8(%rip)
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1307  # TAILCALL
.LBB4_456:                              # %if.end2878
	movq	8(%r15), %rbx
	jmp	.LBB4_30
.LBB4_459:                              # %if.end2895
	movq	8(%r15), %rbx
	jmp	.LBB4_30
.LBB4_453:                              # %if.end2861
	movq	8(%r15), %rbx
	jmp	.LBB4_30
.LBB4_462:                              # %if.end2912
	movq	8(%r15), %rbx
	jmp	.LBB4_30
.LBB4_465:                              # %if.end2929
	movq	8(%r15), %rbx
	jmp	.LBB4_30
.LBB4_450:                              # %if.end2844
	movq	8(%r15), %rbx
.LBB4_30:                               # %L9052
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_74
# BB#31:                                # %if.then41
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %r13
	movzbl	(%r13), %eax
	cmpq	$124, %rax
	jg	.LBB4_66
# BB#32:                                # %if.then41
	cmpq	$85, %rax
	jg	.LBB4_58
# BB#33:                                # %if.then41
	cmpq	$65, %rax
	jg	.LBB4_45
# BB#34:                                # %if.then41
	cmpq	$63, %rax
	jne	.LBB4_48
	jmp	.LBB4_35
.LBB4_66:                               # %if.then41
	cmpq	$125, %rax
	jne	.LBB4_48
# BB#67:                                # %L9373
	movq	8(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#68:                                # %if.then2962
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB4_73
# BB#69:                                # %land.lhs.true2969
	movq	recog_data(%rip), %rax
	movl	(%rax), %edx
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB4_73
# BB#70:                                # %land.lhs.true2969
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB4_73
# BB#71:                                # %land.lhs.true2993
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB4_73
# BB#72:                                # %land.lhs.true2998
	movl	8(%rax), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jne	.LBB4_73
# BB#599:                               # %if.then3010
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_950  # TAILCALL
.LBB4_58:                               # %if.then41
	cmpq	$86, %rax
	jne	.LBB4_48
# BB#59:                                # %L10353
	movq	8(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#60:                                # %if.then3500
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	%rbx, recog_data+8(%rip)
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	jne	.LBB4_73
# BB#61:                                # %if.then3500
	movl	reload_completed(%rip), %ecx
	testq	%r12, %rcx
	je	.LBB4_73
# BB#62:                                # %land.lhs.true3511
	movq	recog_data(%rip), %rcx
	movzbl	2(%rcx), %ecx
	cmpq	$3, %rcx
	je	.LBB4_65
# BB#63:                                # %land.lhs.true3511
	cmpq	$2, %rcx
	jne	.LBB4_73
# BB#64:                                # %land.lhs.true3523
	movl	x86_promote_QImode(%rip), %ecx
	movl	optimize_size(%rip), %edx
	andq	%rax, %rcx
	orq	%rcx, %rdx
	testq	%r12, %rdx
	je	.LBB4_73
.LBB4_65:                               # %if.then3529
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1240  # TAILCALL
.LBB4_45:                               # %if.then41
	cmpq	$66, %rax
	je	.LBB4_35
# BB#46:                                # %if.then41
	cmpq	$72, %rax
	jne	.LBB4_47
# BB#513:                               # %L10309
	movq	8(%r13), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	comparison_operator
	testq	%r12, %rax
	je	.LBB4_73
# BB#514:                               # %if.then3299
	movq	%r14, recog_data+8(%rip)
	movq	8(%r14), %rbx
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB4_516
# BB#515:                               # %land.lhs.true3311
	movl	8(%rbx), %eax
	cmpq	$17, %rax
	jne	.LBB4_516
# BB#525:                               # %L10360
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB4_516
# BB#526:                               # %land.lhs.true3332
	cmpq	$0, 8(%rax)
	jne	.LBB4_516
# BB#527:                               # %L10361
	movq	16(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_536
# BB#528:                               # %if.then3347
	movq	%rbx, recog_data+16(%rip)
	movq	24(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_536
# BB#529:                               # %if.then3361
	movq	%rbx, recog_data+24(%rip)
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rsi
	testq	%r12, %rsi
	jne	.LBB4_535
# BB#530:                               # %land.lhs.true3373
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %esi
	shlq	%cl, %rdx
	andq	%rsi, %rdx
	testq	%r12, %rdx
	jne	.LBB4_532
# BB#531:                               # %lor.lhs.false3377
	movzbl	target_flags+2(%rip), %ecx
	testq	$5, %rcx
	je	.LBB4_535
.LBB4_532:                              # %land.lhs.true3380
	movq	recog_data(%rip), %rcx
	movzbl	2(%rcx), %ecx
	cmpq	$3, %rcx
	je	.LBB4_596
# BB#533:                               # %land.lhs.true3380
	cmpq	$2, %rcx
	jne	.LBB4_535
# BB#534:                               # %land.lhs.true3392
	movl	x86_promote_QImode(%rip), %ecx
	movl	optimize_size(%rip), %edx
	andq	%rcx, %rax
	orq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB4_535
.LBB4_596:                              # %if.then3398
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1241  # TAILCALL
.LBB4_35:                               # %L9053
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#36:                                # %if.then2946
	movl	reload_completed(%rip), %eax
	movq	%r13, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB4_73
# BB#37:                                # %land.lhs.true3536
	movzbl	(%r13), %eax
	cmpq	$66, %rax
	jne	.LBB4_73
# BB#38:                                # %land.lhs.true3541
	movq	recog_data(%rip), %rax
	movl	(%rax), %edx
	movq	$16, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	addq	$-15, %rsi
	andq	%r12, %rsi
	cmpq	$3, %rsi
	ja	.LBB4_73
# BB#39:                                # %land.lhs.true3565
	movq	8(%r13), %rdi
	movl	(%rdi), %ecx
	andq	$67174399, %rcx         # imm = 0x400FFFF
	cmpq	$67108932, %rcx         # imm = 0x4000044
	jne	.LBB4_73
# BB#40:                                # %land.lhs.true3582
	movq	%rdx, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$63, %rcx
	jne	.LBB4_41
# BB#541:                               # %land.lhs.true3616
	movq	8(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$61, %rsi
	jne	.LBB4_547
# BB#542:                               # %land.lhs.true3624
	movl	8(%rcx), %ecx
	jmp	.LBB4_543
.LBB4_47:                               # %if.then41
	cmpq	$75, %rax
	jne	.LBB4_48
# BB#466:                               # %L9386
	movq	8(%r13), %r14
	movzbl	(%r14), %eax
	cmpq	$78, %rax
	jne	.LBB4_467
# BB#498:                               # %L9404
	movq	8(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#499:                               # %if.then3215
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	const248_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#500:                               # %if.then3223
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#501:                               # %if.then3231
	movq	%r14, recog_data+24(%rip)
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	shrq	%cl, %rax
	movq	%rax, %rcx
	andq	$254, %rcx
	cmpq	$2, %rcx
	je	.LBB4_504
# BB#502:                               # %lor.lhs.false3245
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB4_512
# BB#503:                               # %lor.lhs.false3245
	movq	%rax, %rcx
	andq	$255, %rcx
	cmpq	$4, %rcx
	jne	.LBB4_512
.LBB4_504:                              # %land.lhs.true3254
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB4_506
# BB#505:                               # %land.lhs.true3254
	movl	optimize_size(%rip), %ecx
	testq	%r12, %rcx
	je	.LBB4_512
.LBB4_506:                              # %land.lhs.true3260
	movq	recog_data+8(%rip), %rcx
	movzbl	2(%rcx), %ecx
	andq	$255, %rax
	cmpq	%rcx, %rax
	jne	.LBB4_512
# BB#507:                               # %land.lhs.true3270
	movzbl	2(%r14), %ecx
	cmpq	%rcx, %rax
	jne	.LBB4_508
# BB#511:                               # %land.lhs.true3286
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB4_510
	jmp	.LBB4_512
.LBB4_467:                              # %L9386
	cmpq	$75, %rax
	jne	.LBB4_48
# BB#468:                               # %L9421
	movq	8(%r14), %rbx
	movzbl	(%rbx), %eax
	cmpq	$78, %rax
	jne	.LBB4_469
# BB#483:                               # %L9422
	movq	8(%rbx), %rdi
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#484:                               # %if.then3043
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	const248_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#485:                               # %if.then3051
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#486:                               # %if.then3059
	movq	%rbx, recog_data+24(%rip)
	movq	16(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#487:                               # %if.then3067
	movq	%rbx, recog_data+32(%rip)
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	shrq	%cl, %rax
	movq	%rax, %rcx
	andq	$254, %rcx
	cmpq	$2, %rcx
	je	.LBB4_490
# BB#488:                               # %lor.lhs.false3081
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB4_495
# BB#489:                               # %lor.lhs.false3081
	movq	%rax, %rcx
	andq	$255, %rcx
	cmpq	$4, %rcx
	jne	.LBB4_495
.LBB4_490:                              # %land.lhs.true3090
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB4_492
# BB#491:                               # %land.lhs.true3090
	movl	optimize_size(%rip), %ecx
	testq	%r12, %rcx
	je	.LBB4_495
.LBB4_492:                              # %land.lhs.true3096
	movq	recog_data+8(%rip), %rcx
	movzbl	2(%rcx), %ecx
	andq	$255, %rax
	cmpq	%rcx, %rax
	jne	.LBB4_495
# BB#493:                               # %land.lhs.true3106
	movq	recog_data+24(%rip), %rcx
	movzbl	2(%rcx), %ecx
	cmpq	%rcx, %rax
	jne	.LBB4_495
# BB#494:                               # %land.lhs.true3106
	movl	reload_completed(%rip), %eax
	testq	%r12, %rax
	je	.LBB4_495
# BB#595:                               # %if.then3118
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_958  # TAILCALL
.LBB4_41:                               # %land.lhs.true3582
	cmpq	$61, %rcx
	jne	.LBB4_547
# BB#42:                                # %land.lhs.true3587
	movl	8(%rax), %ecx
.LBB4_543:                              # %land.lhs.true3624
	cmpq	$52, %rcx
	ja	.LBB4_547
# BB#544:                               # %land.lhs.true3624
	movq	$1, %rsi
	shlq	%cl, %rsi
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rsi
	je	.LBB4_547
# BB#545:                               # %lor.lhs.false3660
	callq	get_pool_constant
	movq	%rax, %rdi
	callq	standard_sse_constant_p
	testq	%r12, %rax
	je	.LBB4_73
# BB#546:                               # %lor.lhs.false3660.land.lhs.true3668_crit_edge
	movq	recog_data(%rip), %rax
	movl	(%rax), %edx
.LBB4_547:                              # %land.lhs.true3668
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$63, %rdx
	jne	.LBB4_548
# BB#550:                               # %land.lhs.true3690
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_549
	jmp	.LBB4_551
.LBB4_469:                              # %if.end3032
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#470:                               # %if.then3035
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#471:                               # %if.then3129
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB4_48
# BB#472:                               # %if.then3137
	movq	%r14, recog_data+24(%rip)
	movq	recog_data(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	shrq	%cl, %rax
	movq	%rax, %rcx
	andq	$254, %rcx
	cmpq	$2, %rcx
	je	.LBB4_475
# BB#473:                               # %lor.lhs.false3151
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB4_497
# BB#474:                               # %lor.lhs.false3151
	movq	%rax, %rcx
	andq	$255, %rcx
	cmpq	$4, %rcx
	jne	.LBB4_497
.LBB4_475:                              # %land.lhs.true3160
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB4_477
# BB#476:                               # %land.lhs.true3160
	movl	optimize_size(%rip), %ecx
	testq	%r12, %rcx
	je	.LBB4_497
.LBB4_477:                              # %land.lhs.true3166
	movq	recog_data+8(%rip), %rcx
	movzbl	2(%rcx), %ecx
	andq	$255, %rax
	cmpq	%rcx, %rax
	jne	.LBB4_497
# BB#478:                               # %land.lhs.true3176
	movq	recog_data+16(%rip), %rcx
	movzbl	2(%rcx), %ecx
	cmpq	%rcx, %rax
	jne	.LBB4_497
# BB#479:                               # %land.lhs.true3186
	movzbl	2(%r14), %ecx
	cmpq	%rcx, %rax
	jne	.LBB4_480
# BB#496:                               # %land.lhs.true3202
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB4_482
	jmp	.LBB4_497
.LBB4_548:                              # %land.lhs.true3668
	cmpq	$61, %rdx
	jne	.LBB4_549
.LBB4_551:                              # %land.lhs.true3698
	movl	8(%rax), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jne	.LBB4_549
# BB#552:                               # %lor.lhs.false3716
	movq	recog_data+8(%rip), %rax
	movq	8(%rax), %rdi
	callq	get_pool_constant
	movq	%rax, %rdi
	callq	standard_80387_constant_p
	testq	%r12, %rax
	je	.LBB4_73
.LBB4_549:                              # %if.then3724
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_877  # TAILCALL
.LBB4_535:                              # %if.end3400
	movq	16(%r15), %r13
.LBB4_536:                              # %if.end3349
	movq	8(%r13), %r14
	movq	8(%r14), %rbx
.LBB4_516:                              # %L10310
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#517:                               # %if.then3320
	movq	%rbx, recog_data+32(%rip)
	movq	16(%r14), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#518:                               # %if.then3415
	movq	%rbx, recog_data+40(%rip)
	movq	16(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#519:                               # %if.then3426
	movq	%rbx, recog_data+16(%rip)
	movq	24(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#520:                               # %if.then3437
	movq	%rbx, recog_data+24(%rip)
	movq	recog_data(%rip), %rax
	movl	(%rax), %esi
	movq	%rsi, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB4_73
# BB#521:                               # %land.lhs.true3447
	movl	8(%rax), %eax
	leaq	-21(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$8, %rcx
	jae	.LBB4_522
# BB#537:                               # %land.lhs.true3471
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB4_538
	jmp	.LBB4_73
.LBB4_522:                              # %lor.lhs.false3459
	andq	%r12, %rax
	cmpq	$45, %rax
	jb	.LBB4_73
# BB#523:                               # %land.lhs.true3465
	cmpq	$52, %rax
	ja	.LBB4_73
# BB#524:                               # %land.lhs.true3465
	movl	reload_completed(%rip), %eax
	testq	%r12, %rax
	je	.LBB4_73
.LBB4_538:                              # %land.lhs.true3473
	movq	recog_data+16(%rip), %rdi
	movq	$16, %rcx
	shrq	%cl, %rsi
	andq	$255, %rsi
	callq	const0_operand
	testq	%r12, %rax
	jne	.LBB4_540
# BB#539:                               # %lor.lhs.false3481
	movq	recog_data(%rip), %rax
	movq	recog_data+24(%rip), %rdi
	movzbl	2(%rax), %esi
	callq	const0_operand
	testq	%r12, %rax
	je	.LBB4_73
.LBB4_540:                              # %if.then3489
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1232  # TAILCALL
.LBB4_508:                              # %lor.lhs.false3280
	testq	%rcx, %rcx
	jne	.LBB4_512
# BB#509:                               # %lor.lhs.false3280
	movl	reload_completed(%rip), %eax
	testq	%r12, %rax
	je	.LBB4_512
.LBB4_510:                              # %if.then3288
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_956  # TAILCALL
.LBB4_512:                              # %if.end3290
	movq	16(%r15), %r13
.LBB4_48:                               # %L10094
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	binary_fp_operator
	testq	%r12, %rax
	je	.LBB4_73
# BB#49:                                # %if.then2951
	movq	%r13, recog_data+24(%rip)
	movq	8(%r13), %rbx
	movzbl	(%rbx), %eax
	cmpq	$125, %rax
	jne	.LBB4_50
# BB#553:                               # %L10096
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#554:                               # %if.then3751
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#555:                               # %if.then3762
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB4_73
# BB#556:                               # %if.then3762
	movl	reload_completed(%rip), %eax
	testq	%r12, %rax
	je	.LBB4_73
# BB#557:                               # %land.lhs.true3772
	movq	recog_data(%rip), %rax
	movzbl	2(%rax), %eax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB4_73
# BB#558:                               # %land.lhs.true3772
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	je	.LBB4_73
# BB#559:                               # %if.then3796
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1181  # TAILCALL
.LBB4_50:                               # %if.end3737
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#51:                                # %if.then3740
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$125, %rcx
	jne	.LBB4_73
# BB#52:                                # %L10104
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB4_73
# BB#53:                                # %if.then3818
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB4_73
# BB#54:                                # %if.then3818
	movl	reload_completed(%rip), %eax
	testq	%r12, %rax
	je	.LBB4_73
# BB#55:                                # %land.lhs.true3828
	movq	recog_data(%rip), %rax
	movzbl	2(%rax), %eax
	movl	mode_class(,%rax,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB4_73
# BB#56:                                # %land.lhs.true3828
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$324, %rax              # imm = 0x144
	je	.LBB4_73
# BB#57:                                # %if.then3852
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1182  # TAILCALL
.LBB4_73:                               # %if.end2953
	movq	8(%r15), %rbx
.LBB4_74:                               # %L10825
	movq	$6, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB4_560
# BB#75:                                # %if.then46
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$6, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB4_560
# BB#76:                                # %if.then3863
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	%rax, %rax
	je	.LBB4_560
# BB#77:                                # %land.lhs.true3867
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB4_80
# BB#78:                                # %land.lhs.true3872
	movl	8(%rax), %ecx
	cmpq	$52, %rcx
	ja	.LBB4_80
# BB#79:                                # %land.lhs.true3872
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rax
	jne	.LBB4_560
.LBB4_80:                               # %land.lhs.true3896
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB4_83
# BB#81:                                # %land.lhs.true3901
	movl	8(%rbx), %ecx
	cmpq	$52, %rcx
	ja	.LBB4_83
# BB#82:                                # %land.lhs.true3901
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rax
	je	.LBB4_83
.LBB4_560:                              # %return
	xorq	%rax, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB4_83:                               # %if.then3925
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1313  # TAILCALL
.LBB4_572:                              # %if.then1563
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1133  # TAILCALL
.LBB4_574:                              # %if.then1623
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1135  # TAILCALL
.LBB4_495:                              # %if.end3120
	movq	16(%r15), %r13
	jmp	.LBB4_48
.LBB4_480:                              # %lor.lhs.false3196
	testq	%rcx, %rcx
	jne	.LBB4_497
# BB#481:                               # %lor.lhs.false3196
	movl	reload_completed(%rip), %eax
	testq	%r12, %rax
	je	.LBB4_497
.LBB4_482:                              # %if.then3204
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_954  # TAILCALL
.LBB4_497:                              # %if.end3206
	movq	16(%r15), %r13
	jmp	.LBB4_48
.Ltmp69:
	.size	split_1, .Ltmp69-split_1
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI4_0:
	.quad	.LBB4_289
	.quad	.LBB4_284
	.quad	.LBB4_269
	.quad	.LBB4_93
	.quad	.LBB4_4
	.quad	.LBB4_4
	.quad	.LBB4_4
	.quad	.LBB4_4
	.quad	.LBB4_4
	.quad	.LBB4_4
	.quad	.LBB4_4
	.quad	.LBB4_4
	.quad	.LBB4_4
	.quad	.LBB4_186
	.quad	.LBB4_204
.LJTI4_1:
	.quad	.LBB4_454
	.quad	.LBB4_30
	.quad	.LBB4_30
	.quad	.LBB4_457
	.quad	.LBB4_451
	.quad	.LBB4_30
	.quad	.LBB4_460
	.quad	.LBB4_30
	.quad	.LBB4_30
	.quad	.LBB4_30
	.quad	.LBB4_30
	.quad	.LBB4_463
	.quad	.LBB4_30
	.quad	.LBB4_448

	.text
	.align	16, 0x90
	.type	split_4,@function
split_4:                                # @split_4
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp76:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp77:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp78:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp79:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp80:
	.cfi_def_cfa_offset 48
.Ltmp81:
	.cfi_offset %rbx, -48
.Ltmp82:
	.cfi_offset %r12, -40
.Ltmp83:
	.cfi_offset %r13, -32
.Ltmp84:
	.cfi_offset %r14, -24
.Ltmp85:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	movq	%rsi, %rbx
	addq	$-2, %rcx
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	andq	%r13, %rcx
	cmpq	$3, %rcx
	ja	.LBB5_35
# BB#1:                                 # %entry
	jmpq	*.LJTI5_0(,%rcx,8)
.LBB5_2:                                # %L9056
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$47, %rax
	jne	.LBB5_35
# BB#3:                                 # %L9057
	movq	%r14, %rdi
	movq	%rbx, %rsi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	split_2  # TAILCALL
.LBB5_4:                                # %L9123
	movq	8(%rax), %r12
	movzbl	(%r12), %eax
	cmpq	$47, %rax
	jne	.LBB5_35
# BB#5:                                 # %L9124
	movq	8(%r12), %r15
	movzbl	2(%r15), %eax
	cmpq	$14, %rax
	jg	.LBB5_14
# BB#6:                                 # %L9124
	cmpq	$4, %rax
	jne	.LBB5_7
# BB#128:                               # %L12235.i
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_16
# BB#129:                               # %if.then932.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB5_130
# BB#131:                               # %L12246.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$79, %rax
	jne	.LBB5_132
# BB#134:                               # %L9488.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#135:                               # %if.then961.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#136:                               # %if.then972.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB5_57
# BB#137:                               # %L9491.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#138:                               # %if.then1001.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262224, %rax           # imm = 0x40050
	jne	.LBB5_259
# BB#139:                               # %L9493.i
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB5_259
# BB#140:                               # %L9494.i
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB5_69
# BB#141:                               # %L9495.i
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB5_69
# BB#142:                               # %L9496.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_69
# BB#143:                               # %land.lhs.true1094.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB5_69
# BB#144:                               # %land.lhs.true1094.i
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB5_69
# BB#145:                               # %if.then1101.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1003  # TAILCALL
.LBB5_362:                              # %L9319
	movq	8(%rax), %r15
	movzbl	(%r15), %eax
	cmpq	$47, %rax
	jne	.LBB5_35
# BB#363:                               # %L9320
	movq	%r13, %r12
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$3, %rax
	jne	.LBB5_364
# BB#407:                               # %L12266
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_410
# BB#408:                               # %if.then635
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196734, %rcx           # imm = 0x3007E
	jne	.LBB5_409
# BB#413:                               # %L9350
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB5_409
# BB#414:                               # %if.then664
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_415
# BB#416:                               # %L9352
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_422
# BB#417:                               # %if.then693
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_415
# BB#418:                               # %L9354
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_422
# BB#419:                               # %if.then727
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_415
# BB#420:                               # %L9356
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_422
# BB#421:                               # %if.then761
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	%rax, %rax
	je	.LBB5_422
# BB#489:                               # %if.then773
	movabsq	$recog_data, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_944  # TAILCALL
.LBB5_332:                              # %L9286
	movq	8(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB5_35
# BB#333:                               # %L9287
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB5_35
# BB#334:                               # %L12262
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	movq	%r13, %r12
	je	.LBB5_337
# BB#335:                               # %if.then37
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327806, %rcx           # imm = 0x5007E
	jne	.LBB5_336
# BB#350:                               # %L9289
	movq	8(%rax), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB5_336
# BB#351:                               # %if.then65
	movq	%r15, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_352
# BB#353:                               # %L9291
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_361
# BB#354:                               # %if.then94
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_352
# BB#355:                               # %L9293
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_361
# BB#356:                               # %if.then128
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_352
# BB#357:                               # %L9295
	movq	8(%rcx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_361
# BB#358:                               # %if.then162
	movq	%rbx, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	40(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_352
# BB#359:                               # %L9297
	movq	8(%rcx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r12, %rax
	je	.LBB5_361
# BB#360:                               # %if.then196
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+40(%rip)
	testq	%rax, %rax
	je	.LBB5_361
# BB#486:                               # %if.then208
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_930  # TAILCALL
.LBB5_14:                               # %L9124
	cmpq	$15, %rax
	jne	.LBB5_15
# BB#158:                               # %L12236.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	movq	%r13, %rbx
	testq	%r13, %rax
	je	.LBB5_159
# BB#165:                               # %if.then1270.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB5_164
# BB#166:                               # %L12248.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB5_167
# BB#169:                               # %L9566.i
	movq	8(%rax), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%rbx, %rax
	je	.LBB5_480
# BB#170:                               # %if.then1304.i
	movq	%r15, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_171
# BB#172:                               # %L9568.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_171
# BB#173:                               # %L9570.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_171
# BB#174:                               # %land.lhs.true1361.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_171
# BB#175:                               # %if.then1366.i
	movabsq	$recog_data, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1033  # TAILCALL
.LBB5_364:                              # %L9320
	cmpq	$4, %rax
	jne	.LBB5_365
# BB#381:                               # %L12264
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB5_384
# BB#382:                               # %if.then343
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262270, %rcx           # imm = 0x4007E
	jne	.LBB5_383
# BB#387:                               # %L9322
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB5_383
# BB#388:                               # %if.then372
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_389
# BB#390:                               # %L9324
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_396
# BB#391:                               # %if.then401
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_389
# BB#392:                               # %L9326
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_396
# BB#393:                               # %if.then435
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_389
# BB#394:                               # %L9328
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_396
# BB#395:                               # %if.then469
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	%rax, %rax
	je	.LBB5_396
# BB#487:                               # %if.then481
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_937  # TAILCALL
.LBB5_7:                                # %L9124
	cmpq	$5, %rax
	jne	.LBB5_16
# BB#8:                                 # %L12233.i
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB5_11
# BB#9:                                 # %if.then14.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327800, %rcx           # imm = 0x50078
	jne	.LBB5_10
# BB#36:                                # %L9126.i
	movq	8(%rax), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_10
# BB#37:                                # %if.then42.i
	movq	%r15, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_38
# BB#39:                                # %L9128.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_38
# BB#40:                                # %land.lhs.true77.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_38
# BB#41:                                # %L9129.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_38
# BB#42:                                # %L9130.i
	movq	8(%rcx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_47
# BB#43:                                # %if.then114.i
	movl	reload_completed(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	testq	%rax, %rax
	je	.LBB5_47
# BB#44:                                # %land.lhs.true126.i
	movq	recog_data+8(%rip), %rax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	dead_or_set_p
	testq	%r13, %rax
	je	.LBB5_46
# BB#45:                                # %land.lhs.true130.i
	movq	recog_data+8(%rip), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	reg_mentioned_p
	testq	%r13, %rax
	je	.LBB5_476
.LBB5_46:                               # %L9141.i
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	je	.LBB5_47
# BB#477:                               # %if.then139.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_894  # TAILCALL
.LBB5_15:                               # %L9124
	cmpq	$16, %rax
	jne	.LBB5_16
# BB#221:                               # %L12238.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	movq	%r13, %rbx
	testq	%r13, %rax
	je	.LBB5_222
# BB#228:                               # %if.then1873.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB5_227
# BB#229:                               # %L12252.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB5_230
# BB#232:                               # %L9614.i
	movq	8(%rax), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%rbx, %rax
	je	.LBB5_482
# BB#233:                               # %if.then1907.i
	movq	%r15, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_234
# BB#235:                               # %L9616.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_234
# BB#236:                               # %L9618.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_234
# BB#237:                               # %land.lhs.true1964.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_234
# BB#238:                               # %if.then1969.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1040  # TAILCALL
.LBB5_130:                              # %if.end943.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_164:                              # %if.end1286.i
	movq	8(%r12), %r15
	jmp	.LBB5_159
.LBB5_352:                              # %if.end80
	movq	8(%rax), %rbx
	jmp	.LBB5_336
.LBB5_415:                              # %if.end679
	movq	8(%rax), %r15
	jmp	.LBB5_409
.LBB5_132:                              # %L12246.i
	cmpq	$81, %rax
	jne	.LBB5_133
# BB#146:                               # %L9514.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#147:                               # %if.then1117.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#148:                               # %if.then1128.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB5_57
# BB#149:                               # %L9517.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#150:                               # %if.then1157.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262226, %rax           # imm = 0x40052
	jne	.LBB5_259
# BB#151:                               # %L9519.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB5_259
# BB#152:                               # %L9520.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB5_69
# BB#153:                               # %L9521.i
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB5_69
# BB#154:                               # %L9522.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_69
# BB#155:                               # %land.lhs.true1250.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB5_69
# BB#156:                               # %land.lhs.true1250.i
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB5_69
# BB#157:                               # %if.then1257.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1005  # TAILCALL
.LBB5_167:                              # %L12248.i
	cmpq	$129, %rcx
	jne	.LBB5_168
# BB#176:                               # %L9692.i
	movq	8(%rax), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%rbx, %rax
	je	.LBB5_480
# BB#177:                               # %if.then1382.i
	movq	%r15, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_171
# BB#178:                               # %L9694.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_171
# BB#179:                               # %L9696.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_171
# BB#180:                               # %land.lhs.true1439.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_171
# BB#181:                               # %if.then1444.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1053  # TAILCALL
.LBB5_227:                              # %if.end1889.i
	movq	8(%r12), %r15
	jmp	.LBB5_222
.LBB5_389:                              # %if.end387
	movq	8(%rax), %r15
	jmp	.LBB5_383
.LBB5_171:                              # %if.end1319.i
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	jmp	.LBB5_159
.LBB5_422:                              # %if.end695
	movq	8(%r14), %rax
	movq	8(%rax), %r15
.LBB5_409:                              # %if.end655
	movq	8(%r15), %rbx
.LBB5_410:                              # %L12267
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB5_365
# BB#411:                               # %if.then640
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196734, %rcx           # imm = 0x3007E
	jne	.LBB5_412
# BB#423:                               # %L9362
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB5_490
# BB#424:                               # %if.then805
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_399
# BB#425:                               # %L9364
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_431
# BB#426:                               # %if.then834
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_399
# BB#427:                               # %L9366
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_431
# BB#428:                               # %if.then868
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_399
# BB#429:                               # %L9368
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_431
# BB#430:                               # %if.then902
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	%rax, %rax
	je	.LBB5_431
# BB#491:                               # %if.then914
	movabsq	$recog_data, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_945  # TAILCALL
.LBB5_412:                              # %if.end796
	movq	8(%r15), %rbx
	jmp	.LBB5_365
.LBB5_490:                              # %if.end807
	movq	8(%r15), %rbx
	jmp	.LBB5_365
.LBB5_361:                              # %if.end96
	movq	8(%r14), %rax
	movq	8(%rax), %rbx
.LBB5_336:                              # %if.end56
	movq	8(%rbx), %r15
.LBB5_337:                              # %L12263
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_35
# BB#338:                               # %if.then42
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327806, %rcx           # imm = 0x5007E
	jne	.LBB5_35
# BB#339:                               # %L9303
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB5_35
# BB#340:                               # %if.then237
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB5_35
# BB#341:                               # %L9305
	movq	8(%rax), %r15
	movq	$3, %rsi
	movq	%rdx, %rbx
	movq	%r15, %rdi
	callq	memory_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB5_35
# BB#342:                               # %if.then255
	movq	%r15, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB5_35
# BB#343:                               # %L9307
	movq	8(%rax), %r15
	movq	$3, %rsi
	movq	%rdx, %rbx
	movq	%r15, %rdi
	callq	memory_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB5_35
# BB#344:                               # %if.then273
	movq	%r15, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB5_35
# BB#345:                               # %L9309
	movq	8(%rax), %r15
	movq	$5, %rsi
	movq	%rdx, %rbx
	movq	%r15, %rdi
	callq	memory_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB5_35
# BB#346:                               # %if.then291
	movq	%r15, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB5_35
# BB#347:                               # %L9311
	movq	8(%rax), %r14
	xorq	%rsi, %rsi
	movq	%rdx, %rbx
	movq	%r14, %rdi
	callq	scratch_operand
	testq	%rbx, %rax
	je	.LBB5_35
# BB#348:                               # %if.then309
	movl	reload_completed(%rip), %eax
	movq	%r14, recog_data+40(%rip)
	testq	%rax, %rax
	je	.LBB5_35
# BB#349:                               # %if.then313
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_931  # TAILCALL
.LBB5_38:                               # %if.end57.i
	movq	8(%rax), %r12
.LBB5_10:                               # %if.end44.i
	movq	8(%r12), %r15
.LBB5_11:                               # %L12234.i
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_16
# BB#12:                                # %if.then19.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB5_13
# BB#48:                                # %L12240.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$119, %rax
	jg	.LBB5_51
# BB#49:                                # %L12240.i
	addq	$-79, %rax
	andq	%r13, %rax
	cmpq	$11, %rax
	ja	.LBB5_52
# BB#50:                                # %L12240.i
	jmpq	*.LJTI5_2(,%rax,8)
.LBB5_62:                               # %L9475.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#63:                                # %if.then281.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#64:                                # %if.then292.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB5_57
# BB#65:                                # %L9478.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#66:                                # %if.then321.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327760, %rax           # imm = 0x50050
	jne	.LBB5_259
# BB#67:                                # %L9480.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB5_259
# BB#68:                                # %L9481.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB5_69
# BB#70:                                # %L9482.i
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB5_69
# BB#71:                                # %L9483.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_69
# BB#72:                                # %land.lhs.true414.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB5_69
# BB#73:                                # %land.lhs.true419.i
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB5_69
# BB#74:                                # %land.lhs.true419.i
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB5_69
# BB#75:                                # %if.then423.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1001  # TAILCALL
.LBB5_13:                               # %if.end158.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_480:                              # %if.end1384.i
	movq	8(%r12), %r15
	jmp	.LBB5_159
.LBB5_230:                              # %L12252.i
	cmpq	$129, %rcx
	jne	.LBB5_231
# BB#239:                               # %L9740.i
	movq	8(%rax), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%rbx, %rax
	je	.LBB5_482
# BB#240:                               # %if.then1985.i
	movq	%r15, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_234
# BB#241:                               # %L9742.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_234
# BB#242:                               # %L9744.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_234
# BB#243:                               # %land.lhs.true2042.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_234
# BB#244:                               # %if.then2047.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1060  # TAILCALL
.LBB5_133:                              # %sw.epilog952.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_168:                              # %sw.epilog1295.i
	movq	8(%r12), %r15
.LBB5_159:                              # %L12237.i
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %r13
	testq	%rbx, %rax
	je	.LBB5_16
# BB#160:                               # %if.then1275.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB5_182
# BB#161:                               # %L12250.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB5_162
# BB#183:                               # %L9575.i
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_481
# BB#184:                               # %if.then1481.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_57
# BB#185:                               # %L9577.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_186
# BB#195:                               # %L9579.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_186
# BB#196:                               # %land.lhs.true1551.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_186
# BB#197:                               # %land.lhs.true1551.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_186
# BB#198:                               # %land.lhs.true1558.i
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB5_201
# BB#199:                               # %land.lhs.true1563.i
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB5_201
# BB#200:                               # %land.lhs.true1563.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB5_201
.LBB5_186:                              # %L9586.i
	movq	16(%rax), %rax
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#187:                               # %if.then1511.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#188:                               # %L9588.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_57
# BB#189:                               # %land.lhs.true1626.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_57
# BB#190:                               # %land.lhs.true1626.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_57
# BB#191:                               # %land.lhs.true1633.i
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB5_57
# BB#192:                               # %land.lhs.true1638.i
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB5_57
# BB#193:                               # %land.lhs.true1638.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB5_57
# BB#194:                               # %if.then1662.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1035  # TAILCALL
.LBB5_182:                              # %if.end1463.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_162:                              # %L12250.i
	cmpq	$129, %rcx
	jne	.LBB5_163
# BB#202:                               # %L9701.i
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_481
# BB#203:                               # %if.then1678.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_57
# BB#204:                               # %L9703.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_205
# BB#214:                               # %L9705.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_205
# BB#215:                               # %land.lhs.true1748.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_205
# BB#216:                               # %land.lhs.true1748.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_205
# BB#217:                               # %land.lhs.true1755.i
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB5_220
# BB#218:                               # %land.lhs.true1760.i
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB5_220
# BB#219:                               # %land.lhs.true1760.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB5_220
.LBB5_205:                              # %L9712.i
	movq	16(%rax), %rax
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#206:                               # %if.then1708.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#207:                               # %L9714.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_57
# BB#208:                               # %land.lhs.true1824.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_57
# BB#209:                               # %land.lhs.true1824.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_57
# BB#210:                               # %land.lhs.true1831.i
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB5_57
# BB#211:                               # %land.lhs.true1836.i
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB5_57
# BB#212:                               # %land.lhs.true1836.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB5_57
# BB#213:                               # %if.then1860.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1055  # TAILCALL
.LBB5_481:                              # %if.end1680.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_51:                               # %L12240.i
	cmpq	$120, %rax
	jne	.LBB5_52
# BB#53:                                # %L9146.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r13, %rsi
	testq	%rsi, %rax
	je	.LBB5_478
# BB#54:                                # %if.then180.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	movq	%rsi, %r13
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#55:                                # %L9148.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_57
# BB#56:                                # %land.lhs.true215.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_57
# BB#58:                                # %L9149.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#59:                                # %L9150.i
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#60:                                # %if.then253.i
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	%rax, %rax
	je	.LBB5_259
# BB#61:                                # %if.then265.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_895  # TAILCALL
.LBB5_163:                              # %sw.epilog1472.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_52:                               # %sw.epilog171.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_234:                              # %if.end1922.i
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	jmp	.LBB5_222
.LBB5_396:                              # %if.end403
	movq	8(%r14), %rax
	movq	8(%rax), %r15
.LBB5_383:                              # %if.end363
	movq	8(%r15), %rbx
.LBB5_384:                              # %L12265
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_365
# BB#385:                               # %if.then348
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262270, %rcx           # imm = 0x4007E
	jne	.LBB5_386
# BB#397:                               # %L9334
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB5_488
# BB#398:                               # %if.then513
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_399
# BB#400:                               # %L9336
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_431
# BB#401:                               # %if.then542
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_399
# BB#402:                               # %L9338
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_431
# BB#403:                               # %if.then576
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_399
# BB#404:                               # %L9340
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB5_431
# BB#405:                               # %if.then610
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	%rax, %rax
	je	.LBB5_431
# BB#406:                               # %if.then622
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_938  # TAILCALL
.LBB5_386:                              # %if.end504
	movq	8(%r15), %rbx
	jmp	.LBB5_365
.LBB5_431:                              # %if.end544
	movq	8(%r14), %rax
.LBB5_399:                              # %if.end528
	movq	8(%rax), %r15
	movq	8(%r15), %rbx
	jmp	.LBB5_365
.LBB5_488:                              # %if.end515
	movq	8(%r15), %rbx
.LBB5_365:                              # %L10007
	movzbl	(%rbx), %eax
	cmpq	$59, %rax
	jne	.LBB5_35
# BB#366:                               # %L10008
	movq	16(%r15), %r13
	movzbl	(%r13), %eax
	cmpq	$72, %rax
	jne	.LBB5_35
# BB#367:                               # %L10025
	movq	%r12, %rbx
	movq	8(%r13), %r12
	movzbl	(%r12), %eax
	cmpq	$102, %rax
	jne	.LBB5_368
# BB#432:                               # %L10026
	movq	8(%r12), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB5_368
# BB#433:                               # %if.then951
	movq	%r15, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB5_368
# BB#434:                               # %land.lhs.true960
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB5_368
# BB#435:                               # %L10028
	movq	16(%r13), %rax
	movq	%rax, recog_data(%rip)
	movq	24(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB5_436
# BB#437:                               # %L10030
	movq	8(%r14), %rax
	movq	16(%rax), %r13
	movzbl	(%r13), %ecx
	cmpq	$47, %rcx
	jne	.LBB5_438
# BB#439:                               # %L10031
	movq	8(%r13), %r12
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB5_440
# BB#456:                               # %L10032
	movq	16(%r13), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB5_457
# BB#458:                               # %L10033
	movq	8(%r15), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB5_459
# BB#460:                               # %L10034
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB5_462
# BB#461:                               # %land.lhs.true1059
	movq	8(%rax), %rax
	cmpq	$-1, %rax
	je	.LBB5_463
.LBB5_462:                              # %if.end1065
	movq	8(%r13), %r12
	jmp	.LBB5_440
.LBB5_231:                              # %sw.epilog1898.i
	movq	8(%r12), %r15
	jmp	.LBB5_222
.LBB5_482:                              # %if.end1987.i
	movq	8(%r12), %r15
.LBB5_222:                              # %L12239.i
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %r13
	testq	%rbx, %rax
	je	.LBB5_16
# BB#223:                               # %if.then1878.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB5_245
# BB#224:                               # %L12254.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB5_225
# BB#246:                               # %L9623.i
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_483
# BB#247:                               # %if.then2084.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_57
# BB#248:                               # %L9625.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	movq	%r13, %r15
	cmpq	$49, %rdx
	jne	.LBB5_250
# BB#249:                               # %L9627.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB5_250
# BB#260:                               # %L12256.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB5_250
# BB#261:                               # %L12258.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_250
# BB#262:                               # %L12260.i
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB5_250
# BB#263:                               # %land.lhs.true2188.i
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB5_266
# BB#264:                               # %land.lhs.true2193.i
	movl	8(%rcx), %esi
	addq	$-21, %rsi
	andq	%r15, %rsi
	cmpq	$31, %rsi
	ja	.LBB5_266
# BB#265:                               # %land.lhs.true2193.i
	jmpq	*.LJTI5_1(,%rsi,8)
.LBB5_270:                              # %land.lhs.true2193.i.L12261.i_crit_edge1891
	movl	target_flags(%rip), %esi
	jmp	.LBB5_271
.LBB5_245:                              # %if.end2066.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_225:                              # %L12254.i
	cmpq	$129, %rcx
	jne	.LBB5_226
# BB#279:                               # %L9749.i
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_483
# BB#280:                               # %if.then2359.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB5_57
# BB#281:                               # %L9751.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_282
# BB#291:                               # %L9753.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_282
# BB#292:                               # %land.lhs.true2429.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_282
# BB#293:                               # %land.lhs.true2429.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_282
# BB#294:                               # %land.lhs.true2436.i
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB5_297
# BB#295:                               # %land.lhs.true2441.i
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB5_297
# BB#296:                               # %land.lhs.true2441.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB5_297
.LBB5_282:                              # %L9760.i
	movq	16(%rax), %rax
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#283:                               # %if.then2389.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#284:                               # %L9762.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_57
# BB#285:                               # %land.lhs.true2505.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_57
# BB#286:                               # %land.lhs.true2505.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_57
# BB#287:                               # %land.lhs.true2512.i
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB5_57
# BB#288:                               # %land.lhs.true2517.i
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB5_57
# BB#289:                               # %land.lhs.true2517.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB5_57
# BB#290:                               # %if.then2541.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1062  # TAILCALL
.LBB5_483:                              # %if.end2361.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_436:                              # %if.end977
	movq	8(%r13), %r12
	jmp	.LBB5_368
.LBB5_226:                              # %sw.epilog2075.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_478:                              # %if.end182.i
	movq	%rsi, %r13
	jmp	.LBB5_479
.LBB5_76:                               # %L9501.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#77:                                # %if.then439.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#78:                                # %if.then450.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB5_57
# BB#79:                                # %L9504.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#80:                                # %if.then479.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327762, %rax           # imm = 0x50052
	jne	.LBB5_259
# BB#81:                                # %L9506.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB5_259
# BB#82:                                # %L9507.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r13, %rax
	je	.LBB5_69
# BB#83:                                # %L9508.i
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB5_69
# BB#84:                                # %L9509.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_69
# BB#85:                                # %land.lhs.true572.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB5_69
# BB#86:                                # %land.lhs.true577.i
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB5_69
# BB#87:                                # %land.lhs.true577.i
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB5_69
# BB#88:                                # %if.then582.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1004  # TAILCALL
.LBB5_89:                               # %L9873.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#90:                                # %if.then598.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#91:                                # %if.then609.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#92:                                # %L9876.i
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#93:                                # %if.then638.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#94:                                # %L9878.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_57
# BB#95:                                # %land.lhs.true678.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_57
# BB#96:                                # %land.lhs.true683.i
	movl	target_flags(%rip), %edx
	testq	$33554432, %rdx         # imm = 0x2000000
	jne	.LBB5_57
# BB#97:                                # %land.lhs.true686.i
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r13, %rdi
	je	.LBB5_98
# BB#100:                               # %land.lhs.true691.i
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	jne	.LBB5_101
	jmp	.LBB5_57
.LBB5_102:                              # %L9908.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#103:                               # %if.then709.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#104:                               # %if.then720.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#105:                               # %L9911.i
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#106:                               # %if.then749.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#107:                               # %L9913.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_57
# BB#108:                               # %land.lhs.true789.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_57
# BB#109:                               # %land.lhs.true794.i
	movl	target_flags(%rip), %edx
	testq	$33554432, %rdx         # imm = 0x2000000
	jne	.LBB5_57
# BB#110:                               # %land.lhs.true797.i
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r13, %rdi
	je	.LBB5_111
# BB#113:                               # %land.lhs.true804.i
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	jne	.LBB5_114
	jmp	.LBB5_57
.LBB5_115:                              # %L9926.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#116:                               # %if.then822.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB5_479
# BB#117:                               # %if.then833.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#118:                               # %L9929.i
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r13, %rax
	je	.LBB5_259
# BB#119:                               # %if.then862.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#120:                               # %L9931.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_57
# BB#121:                               # %land.lhs.true902.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_57
# BB#122:                               # %land.lhs.true907.i
	movl	target_flags(%rip), %edx
	testq	$33554432, %rdx         # imm = 0x2000000
	jne	.LBB5_57
# BB#123:                               # %land.lhs.true910.i
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r13, %rdi
	je	.LBB5_124
# BB#126:                               # %land.lhs.true917.i
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	jne	.LBB5_127
	jmp	.LBB5_57
.LBB5_479:                              # %if.end1130.i
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_457:                              # %if.end1038
	movq	8(%r13), %r12
	jmp	.LBB5_440
.LBB5_476:                              # %if.then135.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_893  # TAILCALL
.LBB5_47:                               # %if.end116.i
	movq	8(%r14), %rax
	movq	8(%rax), %r12
	jmp	.LBB5_10
.LBB5_201:                              # %if.then1586.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1034  # TAILCALL
.LBB5_220:                              # %if.then1784.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1054  # TAILCALL
.LBB5_459:                              # %if.end1049
	movq	8(%r13), %r12
	jmp	.LBB5_440
.LBB5_463:                              # %L10035
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_464
# BB#465:                               # %L10036
	movq	8(%rcx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	scratch_operand
	testq	%rbx, %rax
	je	.LBB5_492
# BB#466:                               # %if.then1092
	movq	%r15, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_464
# BB#467:                               # %L10038
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_464
# BB#468:                               # %land.lhs.true1132
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_464
# BB#469:                               # %land.lhs.true1136
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB5_464
# BB#470:                               # %land.lhs.true1138
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_loop(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%rbx, %rsi
	je	.LBB5_464
# BB#471:                               # %land.lhs.true1138
	movl	reload_completed(%rip), %ecx
	testq	%rbx, %rcx
	je	.LBB5_464
# BB#472:                               # %land.lhs.true1143
	movq	recog_data+8(%rip), %rcx
	movl	8(%rcx), %ecx
	cmpq	$2, %rcx
	je	.LBB5_464
# BB#473:                               # %if.then1148
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1162  # TAILCALL
.LBB5_266:                              # %land.lhs.true2217.i
	movl	target_flags(%rip), %esi
	testq	$33554432, %rsi         # imm = 0x2000000
	je	.LBB5_269
# BB#267:                               # %lor.lhs.false2220.i
	cmpq	$61, %rdx
	jne	.LBB5_271
# BB#268:                               # %land.lhs.true2225.i
	movl	8(%rcx), %edi
	movabsq	$4294967288, %rbx       # imm = 0xFFFFFFF8
	andq	%rdi, %rbx
	cmpq	$8, %rbx
	jne	.LBB5_271
.LBB5_269:                              # %if.then2237.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1041  # TAILCALL
.LBB5_297:                              # %if.then2465.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1061  # TAILCALL
.LBB5_69:                               # %if.end376.i
	movq	8(%rcx), %r12
	movq	8(%r12), %r15
	jmp	.LBB5_16
.LBB5_98:                               # %lor.lhs.false.i
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB5_57
# BB#99:                                # %lor.lhs.false.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_57
.LBB5_101:                              # %if.then693.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1082  # TAILCALL
.LBB5_111:                              # %lor.lhs.false801.i
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB5_57
# BB#112:                               # %lor.lhs.false801.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_57
.LBB5_114:                              # %if.then806.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1092  # TAILCALL
.LBB5_124:                              # %lor.lhs.false914.i
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB5_57
# BB#125:                               # %lor.lhs.false914.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_57
.LBB5_127:                              # %if.then919.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1099  # TAILCALL
.LBB5_492:                              # %if.end1094
	movq	8(%r14), %rax
.LBB5_464:                              # %if.end1078
	movq	16(%rax), %r13
	movq	8(%r13), %r12
.LBB5_440:                              # %L10049
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB5_474
# BB#441:                               # %if.then1012
	movq	%r12, recog_data+16(%rip)
	movq	16(%r13), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB5_474
# BB#442:                               # %L10051
	movq	8(%r15), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB5_474
# BB#443:                               # %L10052
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB5_474
# BB#444:                               # %land.lhs.true1208
	movq	8(%rax), %rax
	cmpq	$-1, %rax
	jne	.LBB5_474
# BB#445:                               # %L10053
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_438
# BB#446:                               # %L10054
	movq	8(%rcx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	scratch_operand
	testq	%rbx, %rax
	je	.LBB5_474
# BB#447:                               # %if.then1252
	movq	%r15, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_438
# BB#448:                               # %L10056
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_438
# BB#449:                               # %land.lhs.true1298
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_438
# BB#450:                               # %land.lhs.true1303
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB5_438
# BB#451:                               # %land.lhs.true1306
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_loop(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%rbx, %rsi
	je	.LBB5_438
# BB#452:                               # %land.lhs.true1306
	movl	reload_completed(%rip), %ecx
	testq	%rbx, %rcx
	je	.LBB5_438
# BB#453:                               # %land.lhs.true1312
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB5_475
# BB#454:                               # %lor.lhs.false
	movq	recog_data+8(%rip), %rcx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB5_475
# BB#455:                               # %lor.lhs.false.if.end1323_crit_edge
	movq	8(%r14), %rax
	jmp	.LBB5_438
.LBB5_271:                              # %L12261.i
	cmpq	$61, %rdx
	je	.LBB5_272
# BB#273:                               # %L12261.i
	movabsq	$1, %rdx
	jmp	.LBB5_274
.LBB5_474:                              # %if.end1014
	movq	8(%r14), %rax
.LBB5_438:                              # %if.end990
	movq	8(%rax), %rax
	movq	16(%rax), %r13
	movq	8(%r13), %r12
.LBB5_368:                              # %L10009
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	comparison_operator
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB5_35
# BB#369:                               # %if.then943
	movq	%r12, recog_data(%rip)
	movq	8(%r12), %r15
	xorq	%rsi, %rsi
	movq	%rcx, %rbx
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB5_35
# BB#370:                               # %if.then1340
	movq	%r15, recog_data+8(%rip)
	movq	16(%r12), %r15
	xorq	%rsi, %rsi
	movq	%rcx, %rbx
	movq	%r15, %rdi
	callq	nonimmediate_operand
	movq	%rbx, %rdi
	testq	%rdi, %rax
	je	.LBB5_35
# BB#371:                               # %if.then1348
	movq	%r15, recog_data+16(%rip)
	movq	16(%r13), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%r13), %rax
	movq	%rax, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_35
# BB#372:                               # %L10015
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB5_35
# BB#373:                               # %land.lhs.true1380
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB5_35
# BB#374:                               # %L10016
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_35
# BB#375:                               # %L10017
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB5_35
# BB#376:                               # %land.lhs.true1408
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_35
# BB#377:                               # %L10018
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB5_35
# BB#378:                               # %L10019
	movq	8(%rax), %rbx
	movq	$3, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r14, %rax
	je	.LBB5_35
# BB#379:                               # %if.then1430
	movl	reload_completed(%rip), %eax
	movq	%rbx, recog_data+40(%rip)
	testq	%rax, %rax
	je	.LBB5_35
# BB#380:                               # %if.then1434
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1158  # TAILCALL
.LBB5_475:                              # %if.then1321
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1163  # TAILCALL
.LBB5_272:
	movabsq	$0, %rdx
.LBB5_274:                              # %L12261.i
	testq	$33554432, %rsi         # imm = 0x2000000
	je	.LBB5_250
# BB#275:                               # %L12261.i
	testq	%rdx, %rdx
	jne	.LBB5_250
# BB#276:                               # %land.lhs.true2249.i
	movl	8(%rcx), %ecx
	cmpq	$44, %rcx
	ja	.LBB5_250
# BB#277:                               # %land.lhs.true2249.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$35046933135615, %rcx   # imm = 0x1FE0000000FF
	testq	%rcx, %rdx
	je	.LBB5_250
# BB#278:                               # %if.then2267.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1042  # TAILCALL
.LBB5_250:                              # %if.end2151.i
	movq	16(%rax), %rax
	addq	$8, %rax
	movq	(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r15, %r13
	testq	%r15, %rax
	je	.LBB5_259
# BB#251:                               # %if.then2114.i
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_57
# BB#252:                               # %L9645.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_57
# BB#253:                               # %land.lhs.true2307.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_57
# BB#254:                               # %land.lhs.true2307.i
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB5_57
# BB#255:                               # %land.lhs.true2314.i
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB5_57
# BB#256:                               # %land.lhs.true2319.i
	movl	8(%rcx), %ecx
	cmpq	$52, %rcx
	ja	.LBB5_57
# BB#257:                               # %land.lhs.true2319.i
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$8972015417425920, %rcx # imm = 0x1FE0001FE00000
	testq	%rcx, %rdx
	je	.LBB5_57
# BB#258:                               # %if.then2343.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1043  # TAILCALL
.LBB5_259:                              # %if.end255.i
	movq	8(%r14), %rax
.LBB5_57:                               # %if.end221.i
	movq	8(%rax), %r12
	movq	8(%r12), %r15
.LBB5_16:                               # %L9994.i
	movzbl	(%r15), %eax
	cmpq	$59, %rax
	jne	.LBB5_17
# BB#298:                               # %L9995.i
	movq	16(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$72, %rax
	jne	.LBB5_35
# BB#299:                               # %L9996.i
	movq	8(%rbx), %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	comparison_operator
	movq	%r13, %rcx
	testq	%rcx, %rax
	je	.LBB5_35
# BB#300:                               # %if.then2565.i
	movq	%r12, recog_data(%rip)
	movq	8(%r12), %r15
	xorq	%rsi, %rsi
	movq	%rcx, %r13
	movq	%r15, %rdi
	callq	register_operand
	movq	%r13, %rcx
	testq	%rcx, %rax
	je	.LBB5_35
# BB#301:                               # %if.then2573.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%r12), %r15
	xorq	%rsi, %rsi
	movq	%rcx, %r12
	movq	%r15, %rdi
	callq	nonimmediate_operand
	movq	%r12, %rsi
	testq	%rsi, %rax
	je	.LBB5_35
# BB#302:                               # %if.then2581.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%rbx), %rax
	movq	%rax, recog_data+32(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_35
# BB#303:                               # %L10002.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB5_35
# BB#304:                               # %land.lhs.true2613.i
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB5_35
# BB#305:                               # %L10003.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB5_35
# BB#306:                               # %L10004.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3735613, %rcx          # imm = 0x39003D
	jne	.LBB5_35
# BB#307:                               # %land.lhs.true2641.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB5_35
# BB#308:                               # %land.lhs.true2641.i
	movl	reload_completed(%rip), %eax
	testq	%rsi, %rax
	je	.LBB5_35
# BB#309:                               # %if.then2648.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1157  # TAILCALL
.LBB5_17:                               # %if.end.i
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%r13, %rcx
	testq	%rcx, %rax
	je	.LBB5_35
# BB#18:                                # %if.then9.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r12
	movzbl	(%r12), %eax
	cmpq	$72, %rax
	jne	.LBB5_35
# BB#19:                                # %L10284.i
	movq	8(%r12), %r13
	xorq	%rsi, %rsi
	movq	%rcx, %rbx
	movq	%r13, %rdi
	callq	comparison_operator
	testq	%rbx, %rax
	je	.LBB5_21
# BB#20:                                # %if.then2664.i
	movq	%r13, recog_data+8(%rip)
	movq	8(%r13), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB5_21
# BB#310:                               # %if.then2677.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%r13), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB5_21
# BB#311:                               # %if.then2685.i
	movq	%r15, recog_data+40(%rip)
	movq	16(%r12), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB5_484
# BB#312:                               # %if.then2693.i
	movq	%r15, recog_data+16(%rip)
	movq	24(%r12), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	movq	%rbx, %rdi
	je	.LBB5_485
# BB#313:                               # %if.then2704.i
	movq	%r15, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_314
# BB#315:                               # %L10290.i
	movq	8(%rcx), %rax
	movq	%rax, recog_data+48(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB5_314
# BB#316:                               # %L10292.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB5_314
# BB#317:                               # %land.lhs.true2767.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB5_314
# BB#318:                               # %land.lhs.true2772.i
	movq	recog_data(%rip), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$65535, %rsi            # imm = 0xFFFF
	cmpq	$61, %rsi
	jne	.LBB5_323
# BB#319:                               # %land.lhs.true2777.i
	movl	8(%rcx), %ecx
	leaq	-21(%rcx), %rsi
	andq	%rdi, %rsi
	cmpq	$8, %rsi
	jb	.LBB5_314
# BB#320:                               # %lor.lhs.false2789.i
	andq	%rdi, %rcx
	cmpq	$45, %rcx
	jb	.LBB5_323
# BB#321:                               # %land.lhs.true2795.i
	cmpq	$53, %rcx
	jb	.LBB5_314
# BB#322:                               # %land.lhs.true2795.i
	movl	reload_completed(%rip), %ecx
	testq	%rdi, %rcx
	jne	.LBB5_324
	jmp	.LBB5_314
.LBB5_484:                              # %if.end2695.i
	movq	8(%r12), %r13
	jmp	.LBB5_21
.LBB5_485:                              # %if.end2706.i
	movq	%rdi, %rbx
	movq	8(%r12), %r13
	jmp	.LBB5_21
.LBB5_323:                              # %land.lhs.true2801.i
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB5_314
.LBB5_324:                              # %land.lhs.true2803.i
	movq	$16, %rcx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$46, %rdx
	ja	.LBB5_326
# BB#325:                               # %land.lhs.true2803.i
	movq	$1, %rsi
	movq	%rdx, %rcx
	shlq	%cl, %rsi
	movabsq	$70506183163968, %rcx   # imm = 0x402000008040
	testq	%rcx, %rsi
	jne	.LBB5_329
.LBB5_326:                              # %lor.lhs.false2827.i
	movzbl	target_flags+2(%rip), %ecx
	testq	$4, %rcx
	je	.LBB5_314
# BB#327:                               # %land.lhs.true2830.i
	cmpq	$39, %rdx
	ja	.LBB5_314
# BB#328:                               # %land.lhs.true2830.i
	movq	$1, %rsi
	movq	%rdx, %rcx
	shlq	%cl, %rsi
	movabsq	$627065290800, %rcx     # imm = 0x9200010030
	testq	%rcx, %rsi
	je	.LBB5_314
.LBB5_329:                              # %if.then2866.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1230  # TAILCALL
.LBB5_314:                              # %if.end2719.i
	movq	%rdi, %rbx
	movq	8(%rax), %rax
	movq	16(%rax), %r12
	movq	8(%r12), %r13
.LBB5_21:                               # %L10297.i
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	sse_comparison_operator
	testq	%rbx, %rax
	je	.LBB5_35
# BB#22:                                # %if.then2669.i
	movq	%r13, recog_data+8(%rip)
	movq	8(%r13), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB5_35
# BB#23:                                # %if.then2885.i
	movq	%r15, recog_data+32(%rip)
	movq	16(%r13), %r15
	xorq	%rsi, %rsi
	movq	%rcx, %rbx
	movq	%r15, %rdi
	callq	nonimmediate_operand
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB5_35
# BB#24:                                # %if.then2893.i
	movq	%r15, recog_data+40(%rip)
	movq	16(%r12), %r15
	xorq	%rsi, %rsi
	movq	%rcx, %rbx
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB5_35
# BB#25:                                # %if.then2901.i
	movq	%r15, recog_data+16(%rip)
	movq	24(%r12), %r15
	xorq	%rsi, %rsi
	movq	%rcx, %rbx
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB5_35
# BB#26:                                # %if.then2909.i
	movq	%r15, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB5_35
# BB#27:                                # %L10303.i
	movq	8(%rax), %rax
	movq	%rax, recog_data+48(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB5_35
# BB#28:                                # %L10305.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB5_35
# BB#29:                                # %land.lhs.true2947.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB5_35
# BB#30:                                # %land.lhs.true2952.i
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB5_35
# BB#31:                                # %land.lhs.true2957.i
	movl	8(%rax), %eax
	leaq	-21(%rax), %rcx
	andq	%rdx, %rcx
	cmpq	$8, %rcx
	jae	.LBB5_32
# BB#330:                               # %land.lhs.true2981.i
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB5_331
	jmp	.LBB5_35
.LBB5_32:                               # %lor.lhs.false2969.i
	movq	%rdx, %rcx
	andq	%rcx, %rax
	cmpq	$45, %rax
	jb	.LBB5_35
# BB#33:                                # %land.lhs.true2975.i
	cmpq	$52, %rax
	ja	.LBB5_35
# BB#34:                                # %land.lhs.true2975.i
	movl	reload_completed(%rip), %eax
	testq	%rcx, %rax
	je	.LBB5_35
.LBB5_331:                              # %if.then2983.i
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1231  # TAILCALL
.LBB5_35:                               # %return
	xorq	%rax, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp86:
	.size	split_4, .Ltmp86-split_4
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI5_0:
	.quad	.LBB5_2
	.quad	.LBB5_4
	.quad	.LBB5_362
	.quad	.LBB5_332
.LJTI5_1:
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_266
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
	.quad	.LBB5_270
.LJTI5_2:
	.quad	.LBB5_62
	.quad	.LBB5_52
	.quad	.LBB5_76
	.quad	.LBB5_52
	.quad	.LBB5_52
	.quad	.LBB5_52
	.quad	.LBB5_52
	.quad	.LBB5_52
	.quad	.LBB5_89
	.quad	.LBB5_52
	.quad	.LBB5_102
	.quad	.LBB5_115

	.text
	.globl	peephole2_insns
	.align	16, 0x90
	.type	peephole2_insns,@function
peephole2_insns:                        # @peephole2_insns
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp93:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp94:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp95:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp96:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp97:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp98:
	.cfi_def_cfa_offset 64
.Ltmp99:
	.cfi_offset %rbx, -48
.Ltmp100:
	.cfi_offset %r12, -40
.Ltmp101:
	.cfi_offset %r13, -32
.Ltmp102:
	.cfi_offset %r14, -24
.Ltmp103:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movq	$0, recog_data+1000(%rip)
	movzbl	(%r12), %ecx
	xorq	%rax, %rax
	cmpq	$39, %rcx
	jne	.LBB6_1
# BB#392:                               # %L12270
	movq	8(%r12), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	je	.LBB6_495
# BB#393:                               # %L12270
	movq	%rdx, %r15
	movq	%rsi, %r14
	cmpq	$3, %rcx
	jne	.LBB6_394
# BB#620:                               # %L10562.i
	movq	8(%rax), %rdx
	movzbl	(%rdx), %ecx
	cmpq	$47, %rcx
	jne	.LBB6_724
# BB#621:                               # %L10563.i
	movq	8(%rdx), %rsi
	movl	(%rsi), %ebx
	movq	$16, %rcx
	movq	%rbx, %rdi
	shrq	%cl, %rdi
	andq	$255, %rdi
	cmpq	$5, %rdi
	jne	.LBB6_622
# BB#673:                               # %L12339.i
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$61, %rbx
	jne	.LBB6_724
# BB#674:                               # %land.lhs.true2158.i
	movl	8(%rsi), %ecx
	cmpq	$7, %rcx
	jne	.LBB6_724
# BB#675:                               # %L10702.i
	movq	16(%rdx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327755, %rdx           # imm = 0x5004B
	jne	.LBB6_724
# BB#676:                               # %L10703.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB6_724
# BB#677:                               # %land.lhs.true2194.i
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB6_724
# BB#678:                               # %L10704.i
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB6_724
# BB#679:                               # %L12346.i
	movq	8(%rcx), %rsi
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rsi, %rdx
	jne	.LBB6_724
# BB#680:                               # %if.then2221.i
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$-9, %rdx
	jg	.LBB6_691
# BB#681:                               # %if.then2221.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	movabsq	$4294967280, %rcx       # imm = 0xFFFFFFF0
	cmpq	%rcx, %rsi
	jne	.LBB6_724
# BB#682:                               # %L10717.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$49, %rsi
	jne	.LBB6_724
# BB#683:                               # %L10718.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB6_724
# BB#684:                               # %land.lhs.true2335.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#685:                               # %L10719.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#686:                               # %L10720.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#687:                               # %L10721.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB6_724
# BB#688:                               # %land.lhs.true2376.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_690
# BB#689:                               # %lor.lhs.false2378.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_sub_esp_8(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_690:                              # %if.then2382.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1289
	jmp	.LBB6_723
.LBB6_1:                                # %entry
	cmpq	$47, %rcx
	jne	.LBB6_725
# BB#2:                                 # %L8969
	movq	%rdx, (%rsp)            # 8-byte Spill
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$14, %rax
	jg	.LBB6_5
# BB#3:                                 # %L8969
	addq	$-2, %rax
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$3, %rax
	ja	.LBB6_6
# BB#4:                                 # %L8969
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	jmpq	*.LJTI6_0(,%rax,8)
.LBB6_112:                              # %L12278.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r14, %rax
	je	.LBB6_115
# BB#113:                               # %if.then422.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_131
# BB#114:                               # %if.then435.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_115
# BB#132:                               # %if.end444.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_135
# BB#133:                               # %land.lhs.true449.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_push_memory(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB6_135
# BB#134:                               # %if.then453.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1246
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_135:                              # %if.end458.i
	movq	8(%r12), %rbx
	jmp	.LBB6_115
.LBB6_495:                              # %L10469.i
	movq	%rdx, (%rsp)            # 8-byte Spill
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	8(%rax), %r15
	movzbl	(%r15), %ecx
	cmpq	$47, %rcx
	jne	.LBB6_724
# BB#496:                               # %L10470.i
	movq	8(%r15), %rbx
	movl	(%rbx), %edx
	movq	$16, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$255, %rsi
	cmpq	$5, %rsi
	jne	.LBB6_497
# BB#586:                               # %L12317.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB6_724
# BB#587:                               # %land.lhs.true1488.i
	movl	8(%rbx), %ecx
	cmpq	$7, %rcx
	jne	.LBB6_724
# BB#588:                               # %L10726.i
	movq	16(%r15), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327755, %rdx           # imm = 0x5004B
	jne	.LBB6_724
# BB#589:                               # %L10727.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB6_724
# BB#590:                               # %land.lhs.true1524.i
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB6_724
# BB#591:                               # %L10728.i
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB6_724
# BB#592:                               # %L12328.i
	movq	8(%rcx), %rsi
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rsi, %rdx
	jne	.LBB6_724
# BB#593:                               # %if.then1551.i
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$-9, %rdx
	jg	.LBB6_601
# BB#594:                               # %if.then1551.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	movabsq	$4294967280, %rcx       # imm = 0xFFFFFFF0
	cmpq	%rcx, %rsi
	jne	.LBB6_724
# BB#595:                               # %L10738.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#596:                               # %L10739.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_724
# BB#597:                               # %land.lhs.true1630.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_724
# BB#598:                               # %land.lhs.true1636.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_600
# BB#599:                               # %lor.lhs.false1638.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_sub_esp_8(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_600:                              # %if.then1642.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1291
	jmp	.LBB6_723
.LBB6_394:                              # %L12270
	cmpq	$7, %rcx
	jne	.LBB6_724
# BB#395:                               # %L10108.i
	movq	8(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB6_724
# BB#396:                               # %L10109.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB6_724
# BB#397:                               # %land.lhs.true15.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#398:                               # %L10110.i
	movq	16(%rax), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$3407872, %rcx          # imm = 0x340000
	jne	.LBB6_724
# BB#399:                               # %L12312.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$72, %rax
	jne	.LBB6_400
# BB#444:                               # %L10147.i
	movq	8(%rbx), %r13
	movzbl	(%r13), %eax
	cmpq	$102, %rax
	jne	.LBB6_724
# BB#445:                               # %L10148.i
	movq	8(%r13), %rdi
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#446:                               # %if.then395.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+48(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_724
# BB#447:                               # %land.lhs.true404.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_724
# BB#448:                               # %L10150.i
	movq	16(%rbx), %r13
	movl	(%r13), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3407946, %rax          # imm = 0x34004A
	jne	.LBB6_724
# BB#449:                               # %L10151.i
	movq	8(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#450:                               # %L10152.i
	movq	8(%rax), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#451:                               # %if.then442.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+32(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#452:                               # %L10154.i
	movq	8(%rax), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#453:                               # %if.then463.i
	movq	%r13, recog_data+40(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_724
# BB#454:                               # %land.lhs.true472.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_724
# BB#455:                               # %L10156.i
	movq	8(%r12), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB6_724
# BB#456:                               # %L10157.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#457:                               # %if.then494.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r12), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB6_724
# BB#458:                               # %L10159.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB6_724
# BB#459:                               # %land.lhs.true518.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#460:                               # %L10160.i
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB6_724
# BB#461:                               # %L10161.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB6_724
# BB#462:                               # %land.lhs.true546.i
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB6_724
# BB#463:                               # %L10162.i
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#464:                               # %L10163.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#465:                               # %if.then568.i
	movq	%rbx, recog_data(%rip)
	movq	8(%r12), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#466:                               # %L10165.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#467:                               # %if.then586.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r12), %rax
	movq	56(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#468:                               # %L10167.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#469:                               # %if.then604.i
	movq	%rbx, recog_data+16(%rip)
	movq	$1, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_724
# BB#470:                               # %if.end610.i
	movq	32(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB6_724
# BB#471:                               # %L10169.i
	movq	8(%rbx), %r12
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#472:                               # %if.then624.i
	movq	%r12, recog_data+56(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131181, %rcx           # imm = 0x2006D
	jne	.LBB6_724
# BB#473:                               # %L10171.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB6_724
# BB#474:                               # %land.lhs.true651.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#475:                               # %L10172.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_724
# BB#476:                               # %land.lhs.true664.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_724
# BB#477:                               # %L10173.i
	movq	$2, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_724
# BB#478:                               # %if.end674.i
	movq	32(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB6_724
# BB#479:                               # %L10174.i
	movq	8(%rbx), %r12
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#480:                               # %if.then688.i
	movq	%r12, recog_data+64(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131183, %rcx           # imm = 0x2006F
	jne	.LBB6_724
# BB#481:                               # %L10176.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB6_724
# BB#482:                               # %land.lhs.true715.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#483:                               # %L10177.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_724
# BB#484:                               # %land.lhs.true728.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_724
# BB#485:                               # %L10178.i
	movq	$3, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_724
# BB#486:                               # %if.end738.i22
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB6_724
# BB#487:                               # %L10179.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB6_724
# BB#488:                               # %land.lhs.true753.i26
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#489:                               # %L10180.i
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$74, %rax
	jne	.LBB6_724
# BB#490:                               # %L10181.i
	movq	8(%rbx), %rax
	movq	recog_data+56(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#491:                               # %L10182.i
	movq	16(%rbx), %rax
	movq	recog_data+64(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#492:                               # %land.lhs.true782.i
	movq	recog_data+56(%rip), %rax
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	peep2_reg_dead_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#493:                               # %land.lhs.true786.i
	movq	recog_data+64(%rip), %rax
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	peep2_reg_dead_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#494:                               # %if.then790.i
	movq	$3, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1208
	jmp	.LBB6_723
.LBB6_5:                                # %L8969
	cmpq	$15, %rax
	jne	.LBB6_6
# BB#80:                                # %L12276.i
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB6_7
# BB#81:                                # %if.then276.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_727
# BB#82:                                # %if.then284.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_7
# BB#83:                                # %if.end293.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_86
# BB#84:                                # %land.lhs.true298.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_push_memory(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB6_86
# BB#85:                                # %if.then302.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1244
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_86:                               # %if.end307.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_6:
	movq	%rsi, 8(%rsp)           # 8-byte Spill
.LBB6_7:                                # %L10059.i
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB6_9
# BB#8:                                 # %land.lhs.true.i
	movl	8(%rbx), %eax
	cmpq	$17, %rax
	jne	.LBB6_9
# BB#137:                               # %L10060.i
	movq	16(%r12), %rbx
	movq	%rbx, recog_data(%rip)
	movq	$1, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_138
# BB#140:                               # %if.end544.i
	movq	32(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB6_141
# BB#142:                               # %L10062.i
	movq	8(%rbx), %r13
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB6_728
# BB#143:                               # %if.then561.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%rbx), %r13
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	ix86_comparison_operator
	testq	%r14, %rax
	je	.LBB6_728
# BB#144:                               # %if.then572.i
	movq	%r13, recog_data+16(%rip)
	movq	8(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB6_146
# BB#145:                               # %land.lhs.true584.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_146
# BB#147:                               # %L10065.i
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_149
# BB#148:                               # %land.lhs.true600.i
	cmpq	$0, 8(%rax)
	je	.LBB6_150
.LBB6_149:                              # %if.end606.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_622:                              # %L10563.i
	cmpq	$4, %rdi
	jne	.LBB6_724
# BB#623:                               # %L12338.i
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$61, %rbx
	jne	.LBB6_724
# BB#624:                               # %land.lhs.true1758.i
	movl	8(%rsi), %ecx
	cmpq	$7, %rcx
	jne	.LBB6_724
# BB#625:                               # %L10564.i
	movq	16(%rdx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262219, %rdx           # imm = 0x4004B
	jne	.LBB6_724
# BB#626:                               # %L10565.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB6_724
# BB#627:                               # %land.lhs.true1794.i
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB6_724
# BB#628:                               # %L10566.i
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB6_724
# BB#629:                               # %L12340.i
	movq	8(%rcx), %rsi
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rsi, %rdx
	jne	.LBB6_724
# BB#630:                               # %if.then1821.i
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$-5, %rdx
	jg	.LBB6_641
# BB#631:                               # %if.then1821.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	cmpq	%rcx, %rsi
	jne	.LBB6_724
# BB#632:                               # %L10579.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$49, %rsi
	jne	.LBB6_724
# BB#633:                               # %L10580.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB6_724
# BB#634:                               # %land.lhs.true1935.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#635:                               # %L10581.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#636:                               # %L10582.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#637:                               # %L10583.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB6_724
# BB#638:                               # %land.lhs.true1976.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_640
# BB#639:                               # %lor.lhs.false1978.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_sub_esp_8(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_640:                              # %if.then1982.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1274
	jmp	.LBB6_723
.LBB6_497:                              # %L10470.i
	cmpq	$4, %rsi
	jne	.LBB6_724
# BB#498:                               # %L12316.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB6_500
# BB#499:                               # %land.lhs.true819.i
	movl	8(%rbx), %ecx
	cmpq	$7, %rcx
	jne	.LBB6_500
# BB#517:                               # %L10588.i
	movq	16(%r15), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262219, %rdx           # imm = 0x4004B
	jne	.LBB6_500
# BB#518:                               # %L10589.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB6_500
# BB#519:                               # %land.lhs.true863.i
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB6_500
# BB#520:                               # %L10590.i
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB6_500
# BB#521:                               # %L12318.i
	movq	8(%rcx), %rsi
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rsi, %rdx
	jne	.LBB6_500
# BB#522:                               # %if.then893.i
	movq	$32, %rcx
	movq	%rsi, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$-5, %rdx
	jg	.LBB6_532
# BB#523:                               # %if.then893.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	cmpq	%rcx, %rsi
	jne	.LBB6_500
# BB#524:                               # %L10600.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_500
# BB#525:                               # %L10601.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_531
# BB#526:                               # %land.lhs.true996.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_531
# BB#527:                               # %land.lhs.true1002.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_529
# BB#528:                               # %lor.lhs.false1004.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_sub_esp_8(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_531
.LBB6_529:                              # %if.then1008.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1276
	testq	%rax, %rax
	jne	.LBB6_725
# BB#530:                               # %if.then1008.if.end1014_crit_edge.i
	movq	8(%r12), %rax
	movq	8(%rax), %r15
.LBB6_531:                              # %if.end1014.i
	movq	8(%r15), %rbx
	jmp	.LBB6_500
.LBB6_141:                              # %if.end552.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_87:                               # %L12277.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r14, %rax
	je	.LBB6_90
# BB#88:                                # %if.then313.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_106
# BB#89:                                # %if.then326.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_90
# BB#107:                               # %if.end335.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_110
# BB#108:                               # %land.lhs.true340.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_push_memory(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB6_110
# BB#109:                               # %if.then344.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1245
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_110:                              # %if.end349.i
	movq	8(%r12), %rbx
	jmp	.LBB6_90
.LBB6_55:                               # %L12275.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r14, %rax
	je	.LBB6_58
# BB#56:                                # %if.then169.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_74
# BB#57:                                # %if.then182.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_58
# BB#75:                                # %if.end191.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_78
# BB#76:                                # %land.lhs.true196.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_push_memory(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB6_78
# BB#77:                                # %if.then200.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1242
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_78:                               # %if.end205.i
	movq	8(%r12), %rbx
	jmp	.LBB6_58
.LBB6_24:                               # %L12273.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	testq	%r14, %rax
	je	.LBB6_27
# BB#25:                                # %if.then29.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_39
# BB#26:                                # %if.then42.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_27
# BB#50:                                # %if.end56.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_53
# BB#51:                                # %land.lhs.true61.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_push_memory(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB6_53
# BB#52:                                # %if.then63.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1243
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_53:                               # %if.end68.i
	movq	8(%r12), %rbx
	jmp	.LBB6_27
.LBB6_727:                              # %if.end286.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_728:                              # %if.end574.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_146:                              # %if.end590.i
	movq	16(%r12), %rbx
.LBB6_138:                              # %L10419.i
	movzbl	(%rbx), %eax
	cmpq	$74, %rax
	jne	.LBB6_139
# BB#181:                               # %L10420.i
	movq	8(%rbx), %r13
	movl	(%r13), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$2, %rdx
	je	.LBB6_236
# BB#182:                               # %L10420.i
	cmpq	$3, %rdx
	jne	.LBB6_183
# BB#254:                               # %L12292.i
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB6_256
# BB#255:                               # %if.then1243.i
	movq	%r13, recog_data(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB6_256
# BB#257:                               # %L12298.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	incdec_operand
	testq	%r14, %rax
	je	.LBB6_259
# BB#258:                               # %if.then1262.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_259
# BB#264:                               # %if.end1289.i
	movq	$53, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r14, %rax
	je	.LBB6_267
# BB#265:                               # %land.lhs.true1295.i
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB6_267
# BB#266:                               # %if.then1300.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1284
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_267:                              # %if.end1305.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB6_259:                              # %L12299.i
	movq	8(%rbx), %rax
	cmpq	$128, %rax
	jne	.LBB6_263
# BB#260:                               # %land.lhs.true1269.i
	movq	$53, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r14, %rax
	je	.LBB6_263
# BB#261:                               # %land.lhs.true1272.i
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB6_263
# BB#262:                               # %if.then1277.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1287
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_263:                              # %if.end1282.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_139:                              # %if.end537.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_236:                              # %L12290.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	jne	.LBB6_237
# BB#244:                               # %L10453.i
	movq	8(%r13), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB6_729
# BB#245:                               # %if.then1154.i
	movq	%r14, recog_data(%rip)
	movq	16(%r13), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB6_729
# BB#246:                               # %if.then1165.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_253
# BB#247:                               # %land.lhs.true1177.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_253
# BB#248:                               # %land.lhs.true1182.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB6_253
# BB#249:                               # %land.lhs.true1186.i
	movq	$55, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB6_253
# BB#250:                               # %land.lhs.true1189.i
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	testq	%r15, %rax
	je	.LBB6_253
# BB#251:                               # %land.lhs.true1193.i
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB6_253
# BB#252:                               # %if.then1198.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1258
	testq	%rax, %rax
	jne	.LBB6_725
	jmp	.LBB6_253
.LBB6_183:                              # %L10420.i
	cmpq	$4, %rdx
	jne	.LBB6_184
# BB#185:                               # %L12289.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	jne	.LBB6_186
# BB#196:                               # %L10445.i
	movq	8(%r13), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB6_197
# BB#198:                               # %L12295.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB6_199
# BB#209:                               # %L10462.i
	movq	8(%r15), %rdi
	xorq	%rsi, %rsi
	movq	%rdi, %r14
	callq	ext_register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_729
# BB#210:                               # %if.then843.i
	movq	%r14, recog_data(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_212
# BB#211:                               # %land.lhs.true855.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB6_212
# BB#213:                               # %L10464.i
	movq	24(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_215
# BB#214:                               # %land.lhs.true871.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB6_215
# BB#216:                               # %L10465.i
	movq	16(%r13), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	const_int_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_729
# BB#217:                               # %if.then886.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_224
# BB#218:                               # %land.lhs.true898.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_224
# BB#219:                               # %land.lhs.true903.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rsi
	jne	.LBB6_224
# BB#220:                               # %land.lhs.true907.i
	movq	$55, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_224
# BB#221:                               # %land.lhs.true910.i
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_224
# BB#222:                               # %land.lhs.true914.i
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB6_224
# BB#223:                               # %if.then919.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1259
	testq	%rax, %rax
	jne	.LBB6_725
	jmp	.LBB6_224
.LBB6_256:                              # %if.end1256.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_237:                              # %if.end1140.i
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB6_243
# BB#238:                               # %if.then1143.i
	movq	%r13, recog_data(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB6_253
# BB#239:                               # %if.then1212.i
	movq	%r14, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_9
# BB#240:                               # %if.end1221.i
	movq	$53, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB6_243
# BB#241:                               # %land.lhs.true1227.i
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB6_243
# BB#242:                               # %if.then1232.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1285
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_243:                              # %if.end1145.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_184:                              # %sw.epilog791.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_131:                              # %if.end437.i
	movq	8(%r12), %rbx
.LBB6_115:                              # %L12281.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_7
# BB#116:                               # %if.then427.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB6_124
# BB#117:                               # %land.lhs.true468.i
	cmpq	$0, 8(%rbx)
	jne	.LBB6_124
# BB#118:                               # %land.lhs.true468.i
	movl	optimize_size(%rip), %eax
	testq	%r14, %rax
	jne	.LBB6_124
# BB#119:                               # %land.lhs.true475.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB6_124
# BB#120:                               # %land.lhs.true479.i
	movl	x86_split_long_moves(%rip), %ecx
	andq	%rax, %rcx
	testq	%r14, %rcx
	je	.LBB6_124
# BB#121:                               # %land.lhs.true483.i
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_length
	movq	ix86_cost(%rip), %rdx
	movq	$32, %rcx
	movslq	36(%rdx), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rdx, %rax
	jl	.LBB6_124
# BB#122:                               # %land.lhs.true487.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%r15, %r15
	callq	peep2_regno_dead_p
	testq	%r14, %rax
	je	.LBB6_124
# BB#123:                               # %if.then490.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%r15d, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1249
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_124:                              # %L10414.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r14, %rax
	je	.LBB6_136
# BB#125:                               # %if.then498.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_7
# BB#126:                               # %if.end507.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_130
# BB#127:                               # %land.lhs.true512.i
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_length
	movq	ix86_cost(%rip), %rdx
	movq	$32, %rcx
	movslq	36(%rdx), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rdx, %rax
	jl	.LBB6_130
# BB#128:                               # %land.lhs.true516.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_split_long_moves(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB6_130
# BB#129:                               # %if.then520.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1252
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_130:                              # %if.end525.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_106:                              # %if.end328.i
	movq	8(%r12), %rbx
.LBB6_90:                               # %L12280.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_7
# BB#91:                                # %if.then318.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB6_99
# BB#92:                                # %land.lhs.true359.i
	cmpq	$0, 8(%rbx)
	jne	.LBB6_99
# BB#93:                                # %land.lhs.true359.i
	movl	optimize_size(%rip), %eax
	testq	%r14, %rax
	jne	.LBB6_99
# BB#94:                                # %land.lhs.true366.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB6_99
# BB#95:                                # %land.lhs.true370.i
	movl	x86_split_long_moves(%rip), %ecx
	andq	%rax, %rcx
	testq	%r14, %rcx
	je	.LBB6_99
# BB#96:                                # %land.lhs.true374.i
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_length
	movq	ix86_cost(%rip), %rdx
	movq	$32, %rcx
	movslq	36(%rdx), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rdx, %rax
	jl	.LBB6_99
# BB#97:                                # %land.lhs.true378.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%r15, %r15
	callq	peep2_regno_dead_p
	testq	%r14, %rax
	je	.LBB6_99
# BB#98:                                # %if.then381.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%r15d, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1248
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_99:                               # %L10409.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r14, %rax
	je	.LBB6_111
# BB#100:                               # %if.then389.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_7
# BB#101:                               # %if.end398.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_105
# BB#102:                               # %land.lhs.true403.i
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_length
	movq	ix86_cost(%rip), %rdx
	movq	$32, %rcx
	movslq	36(%rdx), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rdx, %rax
	jl	.LBB6_105
# BB#103:                               # %land.lhs.true407.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_split_long_moves(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB6_105
# BB#104:                               # %if.then411.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1251
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_105:                              # %if.end416.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_74:                               # %if.end184.i
	movq	8(%r12), %rbx
.LBB6_58:                               # %L12279.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_7
# BB#59:                                # %if.then174.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB6_67
# BB#60:                                # %land.lhs.true215.i
	cmpq	$0, 8(%rbx)
	jne	.LBB6_67
# BB#61:                                # %land.lhs.true215.i
	movl	optimize_size(%rip), %eax
	testq	%r14, %rax
	jne	.LBB6_67
# BB#62:                                # %land.lhs.true221.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB6_67
# BB#63:                                # %land.lhs.true225.i
	movl	x86_split_long_moves(%rip), %ecx
	andq	%rax, %rcx
	testq	%r14, %rcx
	je	.LBB6_67
# BB#64:                                # %land.lhs.true229.i
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_length
	movq	ix86_cost(%rip), %rdx
	movq	$32, %rcx
	movslq	36(%rdx), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rdx, %rax
	jl	.LBB6_67
# BB#65:                                # %land.lhs.true232.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%r15, %r15
	callq	peep2_regno_dead_p
	testq	%r14, %rax
	je	.LBB6_67
# BB#66:                                # %if.then235.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%r15d, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1247
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_67:                               # %L10404.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r14, %rax
	je	.LBB6_79
# BB#68:                                # %if.then243.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_7
# BB#69:                                # %if.end252.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_73
# BB#70:                                # %land.lhs.true257.i
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_length
	movq	ix86_cost(%rip), %rdx
	movq	$32, %rcx
	movslq	36(%rdx), %rdx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	cmpq	%rdx, %rax
	jl	.LBB6_73
# BB#71:                                # %land.lhs.true261.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_split_long_moves(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB6_73
# BB#72:                                # %if.then265.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1250
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_73:                               # %if.end270.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_39:                               # %if.end44.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r14, %rax
	je	.LBB6_49
# BB#40:                                # %if.then47.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_27
# BB#41:                                # %if.end75.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB6_45
# BB#42:                                # %land.lhs.true81.i
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r14, %rax
	jne	.LBB6_45
# BB#43:                                # %land.lhs.true85.i
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	x86_64_immediate_operand
	testq	%r14, %rax
	jne	.LBB6_45
# BB#44:                                # %if.then89.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_853
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_45:                               # %L8976.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB6_49
# BB#46:                                # %land.lhs.true97.i
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r14, %rax
	jne	.LBB6_49
# BB#47:                                # %land.lhs.true101.i
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	x86_64_immediate_operand
	testq	%r14, %rax
	jne	.LBB6_49
# BB#48:                                # %if.then105.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_854
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_49:                               # %if.end49.i
	movq	8(%r12), %rbx
.LBB6_27:                               # %L12274.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_7
# BB#28:                                # %if.then34.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r14, %rax
	je	.LBB6_54
# BB#29:                                # %if.then119.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_7
# BB#30:                                # %if.end128.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB6_34
# BB#31:                                # %land.lhs.true134.i
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r14, %rax
	jne	.LBB6_34
# BB#32:                                # %land.lhs.true138.i
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	x86_64_immediate_operand
	testq	%r14, %rax
	jne	.LBB6_34
# BB#33:                                # %if.then142.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_858
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_34:                               # %L8998.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB6_38
# BB#35:                                # %land.lhs.true150.i
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r14, %rax
	jne	.LBB6_38
# BB#36:                                # %land.lhs.true154.i
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	x86_64_immediate_operand
	testq	%r14, %rax
	jne	.LBB6_38
# BB#37:                                # %if.then158.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_859
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_38:                               # %if.end163.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_136:                              # %if.end500.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_111:                              # %if.end391.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_79:                               # %if.end245.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_54:                               # %if.end121.i
	movq	8(%r12), %rbx
	jmp	.LBB6_7
.LBB6_729:                              # %if.end1167.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_253:                              # %if.end1214.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_400:                              # %L12312.i
	cmpq	$74, %rax
	jne	.LBB6_724
# BB#401:                               # %L10111.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#402:                               # %L10112.i
	movq	8(%rax), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#403:                               # %if.then52.i
	movq	%r13, recog_data+32(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#404:                               # %L10114.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#405:                               # %if.then73.i
	movq	%rbx, recog_data+40(%rip)
	movq	8(%r12), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB6_724
# BB#406:                               # %L10116.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#407:                               # %if.then91.i
	movq	%rbx, recog_data+48(%rip)
	movq	8(%r12), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB6_724
# BB#408:                               # %L10118.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#409:                               # %if.then109.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r12), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB6_724
# BB#410:                               # %L10120.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB6_724
# BB#411:                               # %land.lhs.true133.i
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB6_724
# BB#412:                               # %L10121.i
	movq	40(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#413:                               # %L10122.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#414:                               # %if.then155.i
	movq	%rbx, recog_data(%rip)
	movq	8(%r12), %rax
	movq	48(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#415:                               # %L10124.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#416:                               # %if.then173.i
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r12), %rax
	movq	56(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#417:                               # %L10126.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#418:                               # %if.then191.i
	movq	%rbx, recog_data+16(%rip)
	movq	$1, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_724
# BB#419:                               # %if.end197.i
	movq	32(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB6_724
# BB#420:                               # %L10128.i
	movq	8(%rbx), %r12
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#421:                               # %if.then211.i
	movq	%r12, recog_data+56(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131181, %rcx           # imm = 0x2006D
	jne	.LBB6_724
# BB#422:                               # %L10130.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB6_724
# BB#423:                               # %land.lhs.true238.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#424:                               # %L10131.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_724
# BB#425:                               # %land.lhs.true251.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_724
# BB#426:                               # %L10132.i
	movq	$2, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_724
# BB#427:                               # %if.end260.i
	movq	32(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB6_724
# BB#428:                               # %L10133.i
	movq	8(%rbx), %r12
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#429:                               # %if.then274.i
	movq	%r12, recog_data+64(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131183, %rcx           # imm = 0x2006F
	jne	.LBB6_724
# BB#430:                               # %L10135.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB6_724
# BB#431:                               # %land.lhs.true301.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#432:                               # %L10136.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_724
# BB#433:                               # %land.lhs.true314.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_724
# BB#434:                               # %L10137.i
	movq	$3, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_724
# BB#435:                               # %if.end324.i
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB6_724
# BB#436:                               # %L10138.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$61, %rdx
	jne	.LBB6_724
# BB#437:                               # %land.lhs.true339.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#438:                               # %L10139.i
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$74, %rax
	jne	.LBB6_724
# BB#439:                               # %L10140.i
	movq	8(%rbx), %rax
	movq	recog_data+56(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#440:                               # %L10141.i
	movq	16(%rbx), %rax
	movq	recog_data+64(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#441:                               # %land.lhs.true368.i
	movq	recog_data+56(%rip), %rax
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	peep2_reg_dead_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#442:                               # %land.lhs.true372.i
	movq	recog_data+64(%rip), %rax
	movq	$4, %rdi
	movq	%rax, %rsi
	callq	peep2_reg_dead_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB6_724
# BB#443:                               # %if.then376.i
	movq	$3, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1207
	jmp	.LBB6_723
.LBB6_186:                              # %if.end799.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	memory_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB6_193
# BB#187:                               # %if.then802.i
	movq	%r13, recog_data(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_192
# BB#188:                               # %land.lhs.true1054.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_192
# BB#189:                               # %land.lhs.true1059.i
	movq	$55, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r14, %rax
	je	.LBB6_192
# BB#190:                               # %land.lhs.true1059.i
	movl	optimize_size(%rip), %eax
	testq	%r14, %rax
	jne	.LBB6_192
# BB#191:                               # %if.then1064.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1253
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_192:                              # %if.end1069.i
	movq	8(%rbx), %r13
.LBB6_193:                              # %L12291.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB6_195
# BB#194:                               # %if.then807.i
	movq	%r13, recog_data(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB6_195
# BB#225:                               # %L12296.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	incdec_operand
	testq	%r14, %rax
	je	.LBB6_227
# BB#226:                               # %if.then1086.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_227
# BB#232:                               # %if.end1113.i
	movq	$53, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r14, %rax
	je	.LBB6_235
# BB#233:                               # %land.lhs.true1119.i
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB6_235
# BB#234:                               # %if.then1124.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1283
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_235:                              # %if.end1129.i
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB6_227:                              # %L12297.i
	movq	8(%rbx), %rax
	cmpq	$128, %rax
	jne	.LBB6_231
# BB#228:                               # %land.lhs.true1093.i
	movq	$53, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r14, %rax
	je	.LBB6_231
# BB#229:                               # %land.lhs.true1096.i
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB6_231
# BB#230:                               # %if.then1101.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1286
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_231:                              # %if.end1106.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_195:                              # %if.end809.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_197:                              # %if.end821.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_199:                              # %if.end829.i
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%r15, %rcx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB6_208
# BB#200:                               # %if.then832.i
	movq	%rcx, recog_data(%rip)
	movq	16(%r13), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB6_224
# BB#201:                               # %if.then933.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_208
# BB#202:                               # %land.lhs.true945.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_208
# BB#203:                               # %land.lhs.true950.i
	movq	$55, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB6_208
# BB#204:                               # %land.lhs.true953.i
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	testq	%r15, %rax
	jne	.LBB6_206
# BB#205:                               # %cond.true982.i
	movq	recog_data+8(%rip), %rax
	movq	8(%rax), %rax
	addq	$128, %rax
	cmpq	$255, %rax
	ja	.LBB6_208
.LBB6_206:                              # %land.lhs.true1034.i
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	movq	$1, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rdx
	callq	find_regno_note
	testq	%rax, %rax
	je	.LBB6_208
# BB#207:                               # %if.then1039.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1257
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_208:                              # %if.end834.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_150:                              # %L10066.i
	movq	$2, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_138
# BB#151:                               # %if.end613.i
	movq	32(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$39, %rax
	jne	.LBB6_152
# BB#163:                               # %L12287.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB6_164
# BB#165:                               # %L10080.i
	movq	8(%rax), %r15
	movzbl	(%r15), %eax
	cmpq	$47, %rax
	jne	.LBB6_166
# BB#167:                               # %L10081.i
	movq	8(%r15), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	q_regs_operand
	testq	%r14, %rax
	je	.LBB6_169
# BB#168:                               # %if.then701.i
	movq	%r13, recog_data+24(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$121, %rcx
	jne	.LBB6_169
# BB#170:                               # %L10083.i
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB6_171
# BB#172:                               # %L10084.i
	movq	8(%rbx), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_173
# BB#174:                               # %L10085.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_180
# BB#175:                               # %land.lhs.true753.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_180
# BB#176:                               # %land.lhs.true758.i
	movq	recog_data+8(%rip), %rax
	movq	$3, %rdi
	movq	%rax, %rsi
	callq	peep2_reg_dead_p
	testq	%r14, %rax
	jne	.LBB6_178
# BB#177:                               # %lor.lhs.false762.i
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r14, %rax
	je	.LBB6_180
.LBB6_178:                              # %land.lhs.true767.i
	movq	recog_data+24(%rip), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	reg_overlap_mentioned_p
	testq	%r14, %rax
	jne	.LBB6_180
# BB#179:                               # %if.then772.i
	movq	$2, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1165
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_180:                              # %if.end777.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_212:                              # %if.end861.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_691:                              # %if.then2221.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	cmpq	$16, %rsi
	je	.LBB6_712
# BB#692:                               # %if.then2221.i
	cmpq	$8, %rsi
	jne	.LBB6_693
# BB#703:                               # %L10747.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$49, %rsi
	jne	.LBB6_724
# BB#704:                               # %L10748.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB6_724
# BB#705:                               # %land.lhs.true2413.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#706:                               # %L10749.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#707:                               # %L10750.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#708:                               # %L10751.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB6_724
# BB#709:                               # %land.lhs.true2454.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_711
# BB#710:                               # %lor.lhs.false2456.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_add_esp_4(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_711:                              # %if.then2460.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1292
	jmp	.LBB6_723
.LBB6_601:                              # %if.then1551.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	cmpq	$16, %rsi
	je	.LBB6_614
# BB#602:                               # %if.then1551.i
	cmpq	$8, %rsi
	jne	.LBB6_603
# BB#610:                               # %L10783.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#611:                               # %L10784.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_724
# BB#612:                               # %land.lhs.true1673.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_724
# BB#613:                               # %if.then1679.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1295
	jmp	.LBB6_723
.LBB6_224:                              # %if.end935.i
	movq	8(%r12), %rbx
	jmp	.LBB6_9
.LBB6_641:                              # %if.then1821.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	cmpq	$8, %rsi
	je	.LBB6_662
# BB#642:                               # %if.then1821.i
	cmpq	$4, %rsi
	jne	.LBB6_643
# BB#653:                               # %L10609.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$49, %rsi
	jne	.LBB6_724
# BB#654:                               # %L10610.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB6_724
# BB#655:                               # %land.lhs.true2013.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#656:                               # %L10611.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#657:                               # %L10612.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#658:                               # %L10613.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB6_724
# BB#659:                               # %land.lhs.true2054.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_661
# BB#660:                               # %lor.lhs.false2056.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_add_esp_4(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_661:                              # %if.then2060.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1277
	jmp	.LBB6_723
.LBB6_532:                              # %if.then893.i
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	cmpq	$8, %rsi
	je	.LBB6_549
# BB#533:                               # %if.then893.i
	cmpq	$4, %rsi
	jne	.LBB6_534
# BB#543:                               # %L10645.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_500
# BB#544:                               # %L10646.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_548
# BB#545:                               # %land.lhs.true1055.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_548
# BB#546:                               # %if.then1061.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1280
	testq	%rax, %rax
	jne	.LBB6_725
# BB#547:                               # %if.then1061.if.end1067_crit_edge.i
	movq	8(%r12), %rax
	movq	8(%rax), %r15
.LBB6_548:                              # %if.end1067.i
	movq	8(%r15), %rbx
	jmp	.LBB6_500
.LBB6_152:                              # %if.end613.i
	cmpq	$47, %rax
	jne	.LBB6_153
# BB#154:                               # %L10067.i
	movq	8(%rbx), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	q_regs_operand
	testq	%r14, %rax
	je	.LBB6_156
# BB#155:                               # %if.then631.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$121, %rcx
	jne	.LBB6_156
# BB#157:                               # %L10069.i
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB6_162
# BB#158:                               # %land.lhs.true654.i
	movq	recog_data+8(%rip), %rax
	movq	$3, %rdi
	movq	%rax, %rsi
	callq	peep2_reg_dead_p
	testq	%r14, %rax
	jne	.LBB6_160
# BB#159:                               # %lor.lhs.false.i
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r14, %rax
	je	.LBB6_162
.LBB6_160:                              # %land.lhs.true662.i
	movq	recog_data+24(%rip), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	reg_overlap_mentioned_p
	testq	%r14, %rax
	jne	.LBB6_162
# BB#161:                               # %if.then667.i
	movq	$2, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1164
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_162:                              # %if.end672.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_215:                              # %if.end877.i
	movq	8(%r12), %rbx
.LBB6_9:                                # %L10424.i
	movzbl	2(%rbx), %eax
	addq	$-2, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$3, %rax
	ja	.LBB6_10
# BB#726:                               # %L10424.i
	jmpq	*.LJTI6_1(,%rax,8)
.LBB6_341:                              # %L12284.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB6_10
# BB#342:                               # %if.then1702.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %r13
	movl	(%r13), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131158, %rax           # imm = 0x20056
	jne	.LBB6_343
# BB#344:                               # %L10438.i
	movq	8(%r13), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#345:                               # %if.then1726.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_11
# BB#346:                               # %if.end1735.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_355
# BB#347:                               # %land.lhs.true1740.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_355
# BB#348:                               # %land.lhs.true1743.i
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB6_352
# BB#349:                               # %land.lhs.true1745.i
	movq	recog_data(%rip), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB6_354
# BB#350:                               # %lor.lhs.false1750.i
	movq	$2, %rsi
	callq	memory_displacement_operand
	testq	%r15, %rax
	je	.LBB6_354
# BB#351:                               # %lor.lhs.false1754thread-pre-split.i
	movl	ix86_cpu(%rip), %eax
.LBB6_352:                              # %lor.lhs.false1754.i
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB6_355
# BB#353:                               # %land.lhs.true1756.i
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	long_memory_operand
	testq	%r15, %rax
	je	.LBB6_355
.LBB6_354:                              # %if.then1760.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1256
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_355:                              # %if.end1765.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_326:                              # %L12283.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB6_10
# BB#327:                               # %if.then1633.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %r13
	movl	(%r13), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196694, %rax           # imm = 0x30056
	jne	.LBB6_328
# BB#329:                               # %L10432.i
	movq	8(%r13), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#330:                               # %if.then1657.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_11
# BB#331:                               # %if.end1666.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_340
# BB#332:                               # %land.lhs.true1671.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_340
# BB#333:                               # %land.lhs.true1674.i
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB6_337
# BB#334:                               # %land.lhs.true1676.i
	movq	recog_data(%rip), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB6_339
# BB#335:                               # %lor.lhs.false1681.i
	movq	$3, %rsi
	callq	memory_displacement_operand
	testq	%r15, %rax
	je	.LBB6_339
# BB#336:                               # %lor.lhs.false1685thread-pre-split.i
	movl	ix86_cpu(%rip), %eax
.LBB6_337:                              # %lor.lhs.false1685.i
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB6_340
# BB#338:                               # %land.lhs.true1687.i
	movq	recog_data(%rip), %rdi
	movq	$3, %rsi
	callq	long_memory_operand
	testq	%r15, %rax
	je	.LBB6_340
.LBB6_339:                              # %if.then1691.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1255
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_340:                              # %if.end1696.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_268:                              # %L12282.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB6_271
# BB#269:                               # %if.then1314.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262230, %rax           # imm = 0x40056
	jne	.LBB6_270
# BB#277:                               # %L10426.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB6_270
# BB#278:                               # %if.then1343.i
	movq	%r14, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_271
# BB#279:                               # %if.end1352.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_270
# BB#280:                               # %land.lhs.true1357.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_270
# BB#281:                               # %land.lhs.true1360.i
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB6_285
# BB#282:                               # %land.lhs.true1362.i
	movq	recog_data(%rip), %rdi
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	jne	.LBB6_287
# BB#283:                               # %lor.lhs.false1367.i
	movq	$4, %rsi
	callq	memory_displacement_operand
	testq	%r15, %rax
	je	.LBB6_287
# BB#284:                               # %lor.lhs.false1371thread-pre-split.i
	movl	ix86_cpu(%rip), %eax
.LBB6_285:                              # %lor.lhs.false1371.i
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB6_270
# BB#286:                               # %land.lhs.true1373.i
	movq	recog_data(%rip), %rdi
	movq	$4, %rsi
	callq	long_memory_operand
	testq	%r15, %rax
	je	.LBB6_270
.LBB6_287:                              # %if.then1377.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1254
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_270:                              # %if.end1334.i
	movq	8(%r12), %rbx
.LBB6_271:                              # %L12285.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB6_10
# BB#272:                               # %if.then1319.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB6_288
# BB#273:                               # %L12300.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$63, %rax
	je	.LBB6_296
# BB#274:                               # %L12300.i
	cmpq	$75, %rax
	jne	.LBB6_275
# BB#289:                               # %L10520.i
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB6_290
# BB#291:                               # %L10521.i
	movq	16(%r13), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#292:                               # %if.then1424.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_11
# BB#293:                               # %if.end1433.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%rbx, %rbx
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_295
# BB#294:                               # %if.then1439.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%ebx, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1267
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_295:                              # %if.end1444.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_356:                              # %L12286.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB6_10
# BB#357:                               # %if.then1771.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB6_358
# BB#359:                               # %L12306.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB6_360
# BB#362:                               # %L10535.i
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB6_363
# BB#364:                               # %L10536.i
	movq	16(%r13), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#365:                               # %if.then1811.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_11
# BB#366:                               # %if.end1820.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%rbx, %rbx
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_368
# BB#367:                               # %if.then1826.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%ebx, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1269
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_368:                              # %if.end1831.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_10:
	movq	%rbx, %r13
.LBB6_11:                               # %L10509.i
	movzbl	(%r13), %eax
	cmpq	$64, %rax
	jne	.LBB6_12
# BB#377:                               # %L10510.i
	movq	8(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB6_724
# BB#378:                               # %if.then1887.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_724
# BB#379:                               # %land.lhs.true1896.i
	cmpq	$0, 8(%rax)
	jne	.LBB6_724
# BB#380:                               # %land.lhs.true1901.i
	movl	(%rbx), %eax
	andq	$16646144, %rax         # imm = 0xFE0000
	cmpq	$131072, %rax           # imm = 0x20000
	jne	.LBB6_724
# BB#381:                               # %land.lhs.true1913.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB6_383
# BB#382:                               # %land.lhs.true1913.i
	movl	optimize_size(%rip), %eax
	testq	%r15, %rax
	je	.LBB6_724
.LBB6_383:                              # %land.lhs.true1919.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%rbx, %rbx
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_724
# BB#384:                               # %if.then1922.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%ebx, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1265
	jmp	.LBB6_723
.LBB6_12:                               # %if.end23.i
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB6_724
# BB#13:                                # %if.then24.i
	movq	%r13, recog_data(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB6_724
# BB#14:                                # %L12308.i
	movq	8(%rax), %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jne	.LBB6_724
# BB#15:                                # %if.then1945.i
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	%r15, %rcx
	jne	.LBB6_16
# BB#385:                               # %L12311.i
	movzbl	2(%r13), %eax
	leaq	-3(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jb	.LBB6_388
# BB#386:                               # %L12311.i
	cmpq	$5, %rax
	jne	.LBB6_724
# BB#387:                               # %land.lhs.true2021.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB6_724
.LBB6_388:                              # %land.lhs.true2024.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_390
# BB#389:                               # %land.lhs.true2024.i
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB6_724
.LBB6_390:                              # %land.lhs.true2029.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%rbx, %rbx
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_724
# BB#391:                               # %if.then2032.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%ebx, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1266
	jmp	.LBB6_723
.LBB6_343:                              # %if.end1717.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_328:                              # %if.end1648.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_358:                              # %if.end1782.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_16:                               # %if.then1945.i
	testq	%r15, %rax
	jne	.LBB6_724
# BB#17:                                # %L12310.i
	movzbl	2(%r13), %eax
	leaq	-2(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jb	.LBB6_20
# BB#18:                                # %L12310.i
	cmpq	$5, %rax
	jne	.LBB6_724
# BB#19:                                # %land.lhs.true1982.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB6_724
.LBB6_20:                               # %land.lhs.true1985.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB6_22
# BB#21:                                # %land.lhs.true1985.i
	movl	optimize_size(%rip), %eax
	testq	%r15, %rax
	je	.LBB6_724
.LBB6_22:                               # %land.lhs.true1991.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%rbx, %rbx
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_724
# BB#23:                                # %if.then1994.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%ebx, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1264
.LBB6_723:                              # %if.then2547.i
	testq	%rax, %rax
	jne	.LBB6_725
	jmp	.LBB6_724
.LBB6_288:                              # %if.end1394.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_360:                              # %L12306.i
	cmpq	$78, %rax
	jne	.LBB6_361
# BB#369:                               # %L10549.i
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB6_370
# BB#371:                               # %L10550.i
	movq	16(%r13), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#372:                               # %if.then1851.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_11
# BB#373:                               # %if.end1860.i
	movq	recog_data+8(%rip), %rax
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB6_376
# BB#374:                               # %land.lhs.true1870.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%rbx, %rbx
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_376
# BB#375:                               # %if.then1873.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%ebx, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1271
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_376:                              # %if.end1878.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_296:                              # %L12303.i
	movl	16(%r13), %eax
	testq	%rax, %rax
	je	.LBB6_298
# BB#297:                               # %if.end1453.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_275:                              # %L12300.i
	cmpq	$78, %rax
	jne	.LBB6_276
# BB#318:                               # %L10542.i
	movq	8(%r13), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB6_319
# BB#320:                               # %L10543.i
	movq	16(%r13), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#321:                               # %if.then1600.i
	movq	%rbx, recog_data+8(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_11
# BB#322:                               # %if.end1609.i
	movq	recog_data+8(%rip), %rax
	movq	8(%rax), %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB6_325
# BB#323:                               # %land.lhs.true1619.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%rbx, %rbx
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_325
# BB#324:                               # %if.then1622.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%ebx, (%rax)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1270
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_325:                              # %if.end1627.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_361:                              # %sw.epilog1791.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_363:                              # %if.end1802.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_276:                              # %sw.epilog1404.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_290:                              # %if.end1415.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_298:                              # %L10527.i
	movq	8(%r13), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB6_299
# BB#300:                               # %L12304.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB6_301
# BB#303:                               # %L10528.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#304:                               # %if.then1483.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#305:                               # %if.then1494.i
	movq	%rbx, recog_data+16(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_11
# BB#306:                               # %if.end1503.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_309
# BB#307:                               # %land.lhs.true1509.i
	movq	recog_data(%rip), %rax
	movq	recog_data+8(%rip), %rcx
	movl	8(%rax), %eax
	movl	8(%rcx), %ecx
	cmpq	%rcx, %rax
	jne	.LBB6_309
# BB#308:                               # %if.then1518.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1268
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_309:                              # %if.end1523.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_370:                              # %if.end1842.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_319:                              # %if.end1591.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_299:                              # %if.end1465.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_301:                              # %L12304.i
	cmpq	$78, %rax
	jne	.LBB6_302
# BB#310:                               # %L10557.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#311:                               # %if.then1532.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB6_730
# BB#312:                               # %if.then1543.i
	movq	%rbx, recog_data+16(%rip)
	xorq	%rdi, %rdi
	callq	peep2_next_insn
	testq	%rax, %rax
	je	.LBB6_11
# BB#313:                               # %if.end1552.i
	movq	recog_data+8(%rip), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	callq	exact_log2_wide
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB6_317
# BB#314:                               # %land.lhs.true1562.i
	movq	recog_data(%rip), %rax
	movq	recog_data+8(%rip), %rcx
	movl	8(%rax), %eax
	movl	8(%rcx), %ecx
	cmpq	%rcx, %rax
	jne	.LBB6_317
# BB#315:                               # %land.lhs.true1572.i
	xorq	%rdi, %rdi
	movq	$17, %rsi
	xorq	%rbx, %rbx
	callq	peep2_regno_dead_p
	testq	%r15, %rax
	je	.LBB6_317
# BB#316:                               # %if.then1575.i
	movq	(%rsp), %rax            # 8-byte Reload
	movl	%ebx, (%rax)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1272
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_317:                              # %if.end1580.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_730:                              # %if.end1853.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_302:                              # %sw.epilog1474.i
	movq	8(%r12), %r13
	jmp	.LBB6_11
.LBB6_164:                              # %if.end680.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_166:                              # %if.end692.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_169:                              # %if.end714.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_171:                              # %if.end725.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_173:                              # %if.end738.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_712:                              # %L10759.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$49, %rsi
	jne	.LBB6_724
# BB#713:                               # %L10760.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB6_724
# BB#714:                               # %land.lhs.true2491.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#715:                               # %L10761.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#716:                               # %L10762.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#717:                               # %L10763.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB6_724
# BB#718:                               # %L12350.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_720
# BB#719:                               # %lor.lhs.false2535.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_add_esp_8(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_720:                              # %if.then2539.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1293
	testq	%rax, %rax
	jne	.LBB6_725
# BB#721:                               # %L12351.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	je	.LBB6_724
# BB#722:                               # %if.then2547.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1294
	jmp	.LBB6_723
.LBB6_693:                              # %if.then2221.i
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	cmpq	%rcx, %rsi
	jne	.LBB6_724
# BB#694:                               # %L10705.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$49, %rsi
	jne	.LBB6_724
# BB#695:                               # %L10706.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB6_724
# BB#696:                               # %land.lhs.true2257.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#697:                               # %L10707.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#698:                               # %L10708.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#699:                               # %L10709.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB6_724
# BB#700:                               # %land.lhs.true2298.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_702
# BB#701:                               # %lor.lhs.false2300.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_sub_esp_4(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_702:                              # %if.then2304.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1288
	jmp	.LBB6_723
.LBB6_614:                              # %L10792.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#615:                               # %L10793.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_724
# BB#616:                               # %L12334.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_724
# BB#617:                               # %L12336.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1296
	testq	%rax, %rax
	jne	.LBB6_725
# BB#618:                               # %L12337.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	je	.LBB6_724
# BB#619:                               # %if.then1726.i53
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1297
	jmp	.LBB6_723
.LBB6_603:                              # %if.then1551.i
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	cmpq	%rcx, %rsi
	jne	.LBB6_724
# BB#604:                               # %L10729.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#605:                               # %L10730.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_724
# BB#606:                               # %land.lhs.true1587.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_724
# BB#607:                               # %land.lhs.true1593.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_609
# BB#608:                               # %lor.lhs.false1595.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_sub_esp_4(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_609:                              # %if.then1599.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1290
	jmp	.LBB6_723
.LBB6_662:                              # %L10621.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$49, %rsi
	jne	.LBB6_724
# BB#663:                               # %L10622.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB6_724
# BB#664:                               # %land.lhs.true2091.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#665:                               # %L10623.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#666:                               # %L10624.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#667:                               # %L10625.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB6_724
# BB#668:                               # %L12344.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_670
# BB#669:                               # %lor.lhs.false2135.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_add_esp_8(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_670:                              # %if.then2139.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1278
	testq	%rax, %rax
	jne	.LBB6_725
# BB#671:                               # %L12345.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	je	.LBB6_724
# BB#672:                               # %if.then2147.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1279
	jmp	.LBB6_723
.LBB6_643:                              # %if.then1821.i
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	cmpq	%rcx, %rsi
	jne	.LBB6_724
# BB#644:                               # %L10567.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %esi
	cmpq	$49, %rsi
	jne	.LBB6_724
# BB#645:                               # %L10568.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB6_724
# BB#646:                               # %land.lhs.true1857.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_724
# BB#647:                               # %L10569.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#648:                               # %L10570.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB6_724
# BB#649:                               # %L10571.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB6_724
# BB#650:                               # %land.lhs.true1898.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_652
# BB#651:                               # %lor.lhs.false1900.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_sub_esp_4(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_724
.LBB6_652:                              # %if.then1904.i
	xorq	%rax, %rax
	movl	%eax, (%r15)
	movabsq	$recog_data, %rax
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	gen_peephole2_1273
	jmp	.LBB6_723
.LBB6_549:                              # %L10654.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_500
# BB#550:                               # %L10655.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_500
# BB#551:                               # %L12324.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_500
# BB#552:                               # %L12326.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1281
	testq	%rax, %rax
	jne	.LBB6_725
# BB#553:                               # %L12327.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	je	.LBB6_555
# BB#554:                               # %if.then1148.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1282
	testq	%rax, %rax
	jne	.LBB6_725
.LBB6_555:                              # %if.end1154.i
	movq	8(%r12), %rax
	movq	8(%rax), %r15
	movq	8(%r15), %rbx
	jmp	.LBB6_500
.LBB6_534:                              # %if.then893.i
	movabsq	$4294967292, %rcx       # imm = 0xFFFFFFFC
	cmpq	%rcx, %rsi
	jne	.LBB6_500
# BB#535:                               # %L10591.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_500
# BB#536:                               # %L10592.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_542
# BB#537:                               # %land.lhs.true940.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_542
# BB#538:                               # %land.lhs.true946.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB6_540
# BB#539:                               # %lor.lhs.false.i35
	movl	ix86_cpu(%rip), %eax
	movl	x86_sub_esp_4(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rdx, %rdi
	jne	.LBB6_542
.LBB6_540:                              # %if.then949.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	gen_peephole2_1275
	testq	%rax, %rax
	jne	.LBB6_725
# BB#541:                               # %if.then949.if.end955_crit_edge.i
	movq	8(%r12), %rax
	movq	8(%rax), %r15
.LBB6_542:                              # %if.end955.i
	movq	8(%r15), %rbx
.LBB6_500:                              # %L12314.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB6_506
# BB#501:                               # %if.then828.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	arith_or_logical_operator
	testq	%r14, %rax
	je	.LBB6_505
# BB#502:                               # %if.then1168.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%rbx), %r13
	movq	recog_data(%rip), %rsi
	movq	%r13, %rdi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB6_503
# BB#556:                               # %L10473.i
	movq	%r14, %r13
	movq	16(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	memory_operand
	testq	%r13, %rax
	movq	%r13, %rsi
	je	.LBB6_559
# BB#557:                               # %if.then1195.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r12), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB6_558
# BB#560:                               # %L10475.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	movq	%rsi, %r14
	jne	.LBB6_566
# BB#561:                               # %land.lhs.true1236.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_566
# BB#562:                               # %land.lhs.true1236.i
	movl	optimize_size(%rip), %ecx
	testq	%r14, %rcx
	jne	.LBB6_566
# BB#563:                               # %land.lhs.true1244.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_read_modify(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	jne	.LBB6_566
# BB#564:                               # %if.then1248.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1260
	testq	%rax, %rax
	jne	.LBB6_725
# BB#565:                               # %if.then1248.if.end1254_crit_edge.i
	movq	8(%r12), %rax
.LBB6_566:                              # %if.end1254.i
	movq	8(%rax), %r15
	movq	16(%r15), %rbx
	movq	8(%rbx), %r13
	jmp	.LBB6_503
.LBB6_558:                              # %if.end1211.i
	movq	8(%rax), %r15
	movq	16(%r15), %rbx
.LBB6_559:                              # %if.end1197.i
	movq	8(%rbx), %r13
	movq	%rsi, %r14
.LBB6_503:                              # %L10481.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_505
# BB#504:                               # %if.then1184.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%rbx), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB6_505
# BB#567:                               # %L10483.i
	movq	8(%r12), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB6_568
# BB#569:                               # %L10484.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB6_568
# BB#570:                               # %land.lhs.true1309.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_568
# BB#571:                               # %land.lhs.true1309.i
	movl	optimize_size(%rip), %ecx
	testq	%r14, %rcx
	jne	.LBB6_568
# BB#572:                               # %land.lhs.true1317.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_read_modify(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	je	.LBB6_573
.LBB6_568:                              # %if.end1287.i
	movq	8(%rax), %r15
.LBB6_505:                              # %if.end1170.i
	movq	8(%r15), %rbx
.LBB6_506:                              # %L12315.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB6_724
# BB#507:                               # %if.then833.i
	movq	%rbx, recog_data(%rip)
	movq	16(%r15), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	arith_or_logical_operator
	testq	%r14, %rax
	je	.LBB6_724
# BB#508:                               # %if.then1341.i
	movq	%rbx, recog_data+24(%rip)
	movq	8(%rbx), %r13
	movq	recog_data(%rip), %rsi
	movq	%r13, %rdi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB6_509
# BB#575:                               # %L10491.i
	movq	%r14, %r15
	movq	16(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	testq	%r15, %rax
	movq	%r15, %rsi
	je	.LBB6_578
# BB#576:                               # %if.then1362.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%r12), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB6_577
# BB#579:                               # %L10493.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	movq	%rsi, %r14
	jne	.LBB6_585
# BB#580:                               # %land.lhs.true1403.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB6_585
# BB#581:                               # %land.lhs.true1403.i
	movl	optimize_size(%rip), %ecx
	testq	%r14, %rcx
	jne	.LBB6_585
# BB#582:                               # %land.lhs.true1411.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_read_modify_write(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	jne	.LBB6_585
# BB#583:                               # %if.then1415.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1262
	testq	%rax, %rax
	jne	.LBB6_725
# BB#584:                               # %if.then1415.if.end1421_crit_edge.i
	movq	8(%r12), %rax
.LBB6_585:                              # %if.end1421.i
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movq	8(%rbx), %r13
	jmp	.LBB6_509
.LBB6_577:                              # %if.end1378.i
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB6_578:                              # %if.end1364.i
	movq	8(%rbx), %r13
	movq	%rsi, %r14
.LBB6_509:                              # %L10499.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB6_724
# BB#510:                               # %if.then1354.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%rbx), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB6_724
# BB#511:                               # %L10501.i
	movq	8(%r12), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB6_724
# BB#512:                               # %L10502.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB6_724
# BB#513:                               # %land.lhs.true1465.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB6_724
# BB#514:                               # %land.lhs.true1465.i
	movl	optimize_size(%rip), %eax
	testq	%r14, %rax
	jne	.LBB6_724
# BB#515:                               # %land.lhs.true1473.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_read_modify_write(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB6_516
.LBB6_724:                              # %ret0.i58
	xorq	%rax, %rax
.LBB6_725:                              # %return
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB6_573:                              # %if.then1321.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1261
	testq	%rax, %rax
	jne	.LBB6_725
# BB#574:                               # %if.then1321.if.end1327_crit_edge.i
	movq	8(%r12), %rax
	movq	8(%rax), %r15
	jmp	.LBB6_505
.LBB6_516:                              # %if.then1477.i
	xorq	%rax, %rax
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	%eax, (%rcx)
	movabsq	$recog_data, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	gen_peephole2_1263
	jmp	.LBB6_723
.LBB6_153:                              # %sw.epilog622.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.LBB6_156:                              # %if.end644.i
	movq	16(%r12), %rbx
	jmp	.LBB6_138
.Ltmp104:
	.size	peephole2_insns, .Ltmp104-peephole2_insns
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI6_0:
	.quad	.LBB6_112
	.quad	.LBB6_87
	.quad	.LBB6_55
	.quad	.LBB6_24
.LJTI6_1:
	.quad	.LBB6_341
	.quad	.LBB6_326
	.quad	.LBB6_268
	.quad	.LBB6_356

	.text
	.align	16, 0x90
	.type	split_2,@function
split_2:                                # @split_2
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp111:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp112:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp113:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp114:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp115:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp116:
	.cfi_def_cfa_offset 64
.Ltmp117:
	.cfi_offset %rbx, -48
.Ltmp118:
	.cfi_offset %r12, -40
.Ltmp119:
	.cfi_offset %r13, -32
.Ltmp120:
	.cfi_offset %r14, -24
.Ltmp121:
	.cfi_offset %r15, -16
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%rdi), %rax
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	movzbl	2(%r15), %eax
	movq	%rsi, %r13
	cmpq	$14, %rax
	jg	.LBB7_12
# BB#1:                                 # %entry
	cmpq	$3, %rax
	je	.LBB7_112
# BB#2:                                 # %entry
	cmpq	$4, %rax
	jne	.LBB7_3
# BB#49:                                # %L12109
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB7_14
# BB#50:                                # %if.then41
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262265, %rcx           # imm = 0x40079
	jne	.LBB7_51
# BB#52:                                # %L9059
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$2, %rax
	jne	.LBB7_53
# BB#64:                                # %L12123
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB7_67
# BB#65:                                # %if.then134
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_66
# BB#75:                                # %L9089
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_66
# BB#76:                                # %L12125
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_66
# BB#77:                                # %L12127
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_66
# BB#78:                                # %L12129
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB7_66
# BB#79:                                # %land.lhs.true220
	movl	ix86_cpu(%rip), %ecx
	movl	x86_zero_extend_with_and(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	jne	.LBB7_81
# BB#80:                                # %land.lhs.true220
	movq	%rsi, %rdx
.LBB7_81:                               # %land.lhs.true220
	movl	optimize_size(%rip), %edi
	testq	%rdi, %rdi
	je	.LBB7_83
# BB#82:                                # %land.lhs.true220
	movq	%rsi, %rcx
.LBB7_83:                               # %land.lhs.true220
	orq	%rcx, %rdx
	je	.LBB7_90
# BB#84:                                # %land.lhs.true225
	movzbl	(%rbx), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_88
# BB#85:                                # %lor.lhs.false230
	movzbl	target_flags+3(%rip), %esi
	movl	8(%rbx), %ecx
	andq	%r14, %rcx
	testq	$2, %rsi
	je	.LBB7_89
# BB#86:                                # %land.lhs.true237
	cmpq	$44, %rcx
	ja	.LBB7_90
# BB#87:                                # %land.lhs.true237
	movq	$1, %rsi
	shlq	%cl, %rsi
	movabsq	$35046933135615, %rcx   # imm = 0x1FE0000000FF
	testq	%rcx, %rsi
	jne	.LBB7_88
	jmp	.LBB7_90
.LBB7_12:                               # %entry
	cmpq	$15, %rax
	jne	.LBB7_13
# BB#270:                               # %L12113
	movq	%r13, (%rsp)            # 8-byte Spill
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB7_273
# BB#271:                               # %if.then1658
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$983164, %rcx           # imm = 0xF007C
	jne	.LBB7_272
# BB#278:                               # %L9196
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	je	.LBB7_286
# BB#279:                               # %L9196
	cmpq	$17, %rax
	jne	.LBB7_280
# BB#292:                               # %L12149
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_272
# BB#293:                               # %if.then1758
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_288
# BB#294:                               # %L9222
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_285
# BB#295:                               # %if.then1787
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_285
# BB#296:                               # %if.then1800
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_914  # TAILCALL
.LBB7_13:                               # %entry
	cmpq	$16, %rax
	jne	.LBB7_14
# BB#436:                               # %L12116
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB7_439
# BB#437:                               # %if.then2995
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$1048700, %rcx          # imm = 0x10007C
	jne	.LBB7_438
# BB#442:                               # %L9252
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$17, %rax
	jne	.LBB7_443
# BB#449:                               # %L12174
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB7_438
# BB#450:                               # %if.then3034
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_451
# BB#452:                               # %L9254
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB7_448
# BB#453:                               # %if.then3063
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_448
# BB#454:                               # %if.then3076
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_920  # TAILCALL
.LBB7_112:                              # %L12110
	movq	$3, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB7_14
# BB#113:                               # %if.then427
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196729, %rcx           # imm = 0x30079
	jne	.LBB7_114
# BB#115:                               # %L9066
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$131072, %rax           # imm = 0x20000
	jne	.LBB7_116
# BB#117:                               # %L12131
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB7_120
# BB#118:                               # %if.then460
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_119
# BB#128:                               # %L9068
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_119
# BB#129:                               # %L12133
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_119
# BB#130:                               # %L12135
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_119
# BB#131:                               # %L12137
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB7_119
# BB#132:                               # %land.lhs.true546
	movl	ix86_cpu(%rip), %ecx
	movl	x86_zero_extend_with_and(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	jne	.LBB7_134
# BB#133:                               # %land.lhs.true546
	movq	%rsi, %rdx
.LBB7_134:                              # %land.lhs.true546
	movl	optimize_size(%rip), %edi
	testq	%rdi, %rdi
	je	.LBB7_136
# BB#135:                               # %land.lhs.true546
	movq	%rsi, %rcx
.LBB7_136:                              # %land.lhs.true546
	orq	%rcx, %rdx
	je	.LBB7_143
# BB#137:                               # %land.lhs.true552
	movzbl	(%rbx), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_141
# BB#138:                               # %lor.lhs.false557
	movzbl	target_flags+3(%rip), %esi
	movl	8(%rbx), %ecx
	andq	%r14, %rcx
	testq	$2, %rsi
	je	.LBB7_142
# BB#139:                               # %land.lhs.true565
	cmpq	$44, %rcx
	ja	.LBB7_143
# BB#140:                               # %land.lhs.true565
	movq	$1, %rsi
	shlq	%cl, %rsi
	movabsq	$35046933135615, %rcx   # imm = 0x1FE0000000FF
	testq	%rcx, %rsi
	jne	.LBB7_141
	jmp	.LBB7_143
.LBB7_3:                                # %entry
	cmpq	$5, %rax
	jne	.LBB7_14
# BB#4:                                 # %L12111
	movq	%r13, (%rsp)            # 8-byte Spill
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB7_7
# BB#5:                                 # %if.then715
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB7_6
# BB#155:                               # %L9112
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_6
# BB#156:                               # %if.then749
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_157
# BB#158:                               # %L9114
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_157
# BB#159:                               # %land.lhs.true784
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_157
# BB#160:                               # %land.lhs.true789
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB7_157
# BB#161:                               # %land.lhs.true789
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_157
# BB#162:                               # %land.lhs.true794
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rdi
	movq	%rax, %rbx
	andq	%r13, %rbx
	callq	true_regnum
	andq	%r13, %rax
	cmpq	%rax, %rbx
	jne	.LBB7_163
# BB#813:                               # %if.then800
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_890  # TAILCALL
.LBB7_51:                               # %if.end56
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_114:                              # %if.end442
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_53:                               # %L9059
	cmpq	$3, %rax
	jne	.LBB7_54
# BB#55:                                # %L12122
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB7_811
# BB#56:                                # %if.then75
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_57
# BB#58:                                # %L9061
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_57
# BB#59:                                # %land.lhs.true110
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_57
# BB#60:                                # %land.lhs.true110
	movl	reload_completed(%rip), %ecx
	testq	%r14, %rcx
	je	.LBB7_57
# BB#61:                                # %land.lhs.true117
	movl	ix86_cpu(%rip), %ecx
	movl	x86_zero_extend_with_and(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	je	.LBB7_57
# BB#62:                                # %land.lhs.true117
	movl	optimize_size(%rip), %ecx
	testq	%r14, %rcx
	jne	.LBB7_57
# BB#63:                                # %if.then121
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_879  # TAILCALL
.LBB7_286:                              # %L12148
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_272
# BB#287:                               # %if.then1703
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_288
# BB#289:                               # %L9198
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_285
# BB#290:                               # %if.then1732
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_285
# BB#291:                               # %if.then1745
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_910  # TAILCALL
.LBB7_280:                              # %L9196
	cmpq	$18, %rax
	jne	.LBB7_272
# BB#281:                               # %L12150
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_272
# BB#282:                               # %if.then1813
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_288
# BB#283:                               # %L9238
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_285
# BB#284:                               # %if.then1842
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_285
# BB#816:                               # %if.then1855
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_917  # TAILCALL
.LBB7_116:                              # %if.end454
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_288:                              # %if.end1718
	movq	8(%rax), %r12
	jmp	.LBB7_272
.LBB7_443:                              # %L9252
	cmpq	$18, %rax
	jne	.LBB7_438
# BB#444:                               # %L12175
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB7_438
# BB#445:                               # %if.then3089
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_451
# BB#446:                               # %L9270
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB7_448
# BB#447:                               # %if.then3118
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_448
# BB#820:                               # %if.then3131
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_923  # TAILCALL
.LBB7_157:                              # %if.end764
	movq	8(%rax), %r12
.LBB7_6:                                # %if.end751
	movq	8(%r12), %r15
.LBB7_7:                                # %L12112
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_10
# BB#8:                                 # %if.then720
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB7_9
# BB#164:                               # %L12139
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$120, %rax
	jg	.LBB7_175
# BB#165:                               # %L12139
	cmpq	$75, %rax
	je	.LBB7_184
# BB#166:                               # %L12139
	cmpq	$76, %rax
	jne	.LBB7_167
# BB#192:                               # %L9467
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_9
# BB#193:                               # %if.then972
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB7_9
# BB#194:                               # %if.then983
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_178
# BB#195:                               # %L9470
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_178
# BB#196:                               # %land.lhs.true1018
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_178
# BB#197:                               # %land.lhs.true1023
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB7_178
# BB#198:                               # %land.lhs.true1023
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_178
# BB#199:                               # %if.then1028
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_970  # TAILCALL
.LBB7_54:                               # %sw.epilog69
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_175:                              # %L12139
	cmpq	$121, %rax
	jne	.LBB7_9
# BB#176:                               # %L9119
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB7_9
# BB#177:                               # %if.then839
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_178
# BB#179:                               # %L9121
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_178
# BB#180:                               # %land.lhs.true874
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_178
# BB#181:                               # %land.lhs.true879
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB7_178
# BB#182:                               # %land.lhs.true879
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_178
# BB#183:                               # %if.then884
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_891  # TAILCALL
.LBB7_285:                              # %if.end1734
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
.LBB7_272:                              # %if.end1683
	movq	8(%r12), %r15
.LBB7_273:                              # %L12114
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_276
# BB#274:                               # %if.then1663
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$983164, %rcx           # imm = 0xF007C
	jne	.LBB7_275
# BB#297:                               # %L9204
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_275
# BB#298:                               # %if.then1887
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_299
# BB#300:                               # %L9206
	movq	8(%rcx), %rax
	movl	target_flags(%rip), %ecx
	movq	%rax, recog_data+16(%rip)
	testq	$1, %rcx
	je	.LBB7_306
# BB#301:                               # %L9206
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_306
# BB#302:                               # %land.lhs.true1919
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_304
# BB#303:                               # %land.lhs.true1924
	movl	8(%rax), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	je	.LBB7_306
.LBB7_304:                              # %land.lhs.true1936
	movzbl	(%rbx), %eax
	cmpq	$61, %rax
	jne	.LBB7_817
# BB#305:                               # %land.lhs.true1941
	movl	8(%rbx), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jne	.LBB7_817
.LBB7_306:                              # %if.end1955
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB7_275
.LBB7_299:                              # %if.end1902
	movq	8(%rax), %r12
.LBB7_275:                              # %if.end1878
	movq	8(%r12), %r15
.LBB7_276:                              # %L12115
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_277
# BB#307:                               # %if.then1668
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB7_208
# BB#308:                               # %L12151
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$123, %rax
	jg	.LBB7_321
# BB#309:                               # %L12151
	cmpq	$72, %rax
	jne	.LBB7_310
# BB#362:                               # %L10196
	movq	8(%r14), %rbx
	movzbl	(%rbx), %eax
	cmpq	$105, %rax
	jne	.LBB7_363
# BB#400:                               # %L10241
	movq	8(%rbx), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#401:                               # %if.then2720
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB7_208
# BB#402:                               # %L12172
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_408
# BB#403:                               # %if.then2740
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_407
# BB#404:                               # %if.then2756
	movq	%rbx, recog_data+24(%rip)
	movq	24(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_407
# BB#405:                               # %if.then2770
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_406
# BB#423:                               # %L10246
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_435
# BB#424:                               # %land.lhs.true2814
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_435
# BB#425:                               # %land.lhs.true2819
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_435
# BB#426:                               # %land.lhs.true2824
	movl	8(%rax), %eax
	leaq	-21(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jae	.LBB7_427
# BB#430:                               # %land.lhs.true2848
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB7_431
	jmp	.LBB7_435
.LBB7_277:
	movq	(%rsp), %r13            # 8-byte Reload
	jmp	.LBB7_14
.LBB7_321:                              # %L12151
	cmpq	$124, %rax
	jne	.LBB7_322
# BB#331:                               # %L9212
	movq	8(%r14), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	je	.LBB7_340
# BB#332:                               # %L9212
	cmpq	$17, %rax
	jne	.LBB7_333
# BB#348:                               # %L12156
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#349:                               # %if.then2077
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#350:                               # %L9230
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_236
# BB#351:                               # %if.then2106
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_236
# BB#352:                               # %if.then2106
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_236
# BB#353:                               # %if.then2121
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_915  # TAILCALL
.LBB7_310:                              # %L12151
	cmpq	$77, %rax
	jne	.LBB7_208
# BB#311:                               # %L9593
	movq	8(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#312:                               # %if.then2194
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#313:                               # %L9595
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_207
# BB#314:                               # %L12158
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_207
# BB#315:                               # %L12160
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_207
# BB#316:                               # %L12162
	movl	target_flags(%rip), %ecx
	andq	$1, %rcx
	je	.LBB7_207
# BB#317:                               # %land.lhs.true2264
	movq	recog_data(%rip), %rdx
	movl	8(%rdx), %edx
	cmpq	$8, %rdx
	jb	.LBB7_354
# BB#318:                               # %land.lhs.true2270
	cmpq	$15, %rdx
	ja	.LBB7_354
# BB#319:                               # %land.lhs.true2270
	movl	reload_completed(%rip), %edx
	testq	%r13, %rdx
	je	.LBB7_354
# BB#320:                               # %if.then2278
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1036  # TAILCALL
.LBB7_322:                              # %L12151
	cmpq	$129, %rax
	jne	.LBB7_208
# BB#323:                               # %L9719
	movq	8(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#324:                               # %if.then2313
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#325:                               # %L9721
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_207
# BB#326:                               # %L12164
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_207
# BB#327:                               # %L12166
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_207
# BB#328:                               # %L12168
	movl	target_flags(%rip), %edx
	andq	$1, %rdx
	je	.LBB7_207
# BB#329:                               # %land.lhs.true2383
	movq	recog_data(%rip), %rcx
	movl	8(%rcx), %esi
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rcx, %rsi
	cmpq	$8, %rsi
	jne	.LBB7_358
# BB#330:                               # %if.then2395
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1056  # TAILCALL
.LBB7_451:                              # %if.end3049
	movq	8(%rax), %r12
	jmp	.LBB7_438
.LBB7_363:                              # %L10196
	cmpq	$107, %rax
	jne	.LBB7_208
# BB#364:                               # %L10197
	movq	8(%rbx), %r15
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#365:                               # %if.then2442
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB7_208
# BB#366:                               # %L12170
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_372
# BB#367:                               # %if.then2462
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_371
# BB#368:                               # %if.then2478
	movq	%rbx, recog_data+24(%rip)
	movq	24(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_371
# BB#369:                               # %if.then2492
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_370
# BB#387:                               # %L10202
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_399
# BB#388:                               # %land.lhs.true2536
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_399
# BB#389:                               # %land.lhs.true2541
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_399
# BB#390:                               # %land.lhs.true2546
	movl	8(%rax), %eax
	leaq	-21(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jae	.LBB7_391
# BB#394:                               # %land.lhs.true2570
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB7_395
	jmp	.LBB7_399
.LBB7_817:                              # %if.then1953
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_911  # TAILCALL
.LBB7_340:                              # %L12155
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#341:                               # %if.then2003
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#342:                               # %L9214
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_236
# BB#343:                               # %if.then2032
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_236
# BB#344:                               # %if.then2032
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_236
# BB#345:                               # %land.lhs.true2047
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_236
# BB#346:                               # %land.lhs.true2052
	movl	8(%rax), %eax
	movabsq	$4294967288, %rcx       # imm = 0xFFFFFFF8
	andq	%rax, %rcx
	cmpq	$8, %rcx
	jne	.LBB7_236
# BB#347:                               # %if.then2064
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_912  # TAILCALL
.LBB7_333:                              # %L9212
	cmpq	$18, %rax
	jne	.LBB7_208
# BB#334:                               # %L12157
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#335:                               # %if.then2134
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#336:                               # %L9246
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_236
# BB#337:                               # %if.then2163
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_236
# BB#338:                               # %if.then2163
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_236
# BB#339:                               # %if.then2178
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_918  # TAILCALL
.LBB7_448:                              # %if.end3065
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
.LBB7_438:                              # %if.end3015
	movq	8(%r12), %r15
.LBB7_439:                              # %L12117
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB7_14
# BB#440:                               # %if.then3000
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$1048700, %rcx          # imm = 0x10007C
	jne	.LBB7_441
# BB#455:                               # %L9260
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$17, %rax
	jne	.LBB7_456
# BB#458:                               # %L12176
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB7_821
# BB#459:                               # %if.then3173
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_57
# BB#460:                               # %L9262
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB7_73
# BB#461:                               # %if.then3202
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_73
# BB#462:                               # %if.then3202
	movl	reload_completed(%rip), %eax
	testq	%r14, %rax
	je	.LBB7_73
# BB#463:                               # %if.then3217
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_921  # TAILCALL
.LBB7_441:                              # %if.end3154
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_456:                              # %L9260
	cmpq	$18, %rax
	jne	.LBB7_457
# BB#464:                               # %L12177
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB7_821
# BB#465:                               # %if.then3230
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_57
# BB#466:                               # %L9278
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB7_73
# BB#467:                               # %if.then3259
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$1, %rax
	je	.LBB7_73
# BB#468:                               # %if.then3259
	movl	reload_completed(%rip), %eax
	testq	%r14, %rax
	je	.LBB7_73
# BB#469:                               # %if.then3274
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_924  # TAILCALL
.LBB7_821:                              # %if.end3232
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_457:                              # %sw.epilog3167
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_811:                              # %if.end77
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_184:                              # %L9379
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_9
# BB#185:                               # %if.then900
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB7_9
# BB#186:                               # %if.then911
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_178
# BB#187:                               # %L9382
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_178
# BB#188:                               # %land.lhs.true946
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_178
# BB#189:                               # %land.lhs.true951
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB7_178
# BB#190:                               # %land.lhs.true951
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_178
# BB#191:                               # %if.then956
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_952  # TAILCALL
.LBB7_167:                              # %L12139
	cmpq	$77, %rax
	jne	.LBB7_9
# BB#168:                               # %L9559
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB7_9
# BB#169:                               # %if.then1044
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_178
# BB#170:                               # %L9561
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_178
# BB#171:                               # %land.lhs.true1079
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_178
# BB#172:                               # %land.lhs.true1084
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB7_178
# BB#173:                               # %land.lhs.true1084
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_178
# BB#174:                               # %if.then1089
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1028  # TAILCALL
.LBB7_178:                              # %if.end854
	movq	8(%rax), %r12
.LBB7_9:                                # %if.end819
	movq	8(%r12), %r15
.LBB7_10:                               # %L12118
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_11
# BB#200:                               # %if.then725
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB7_208
# BB#201:                               # %L12143
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$120, %rax
	jg	.LBB7_220
# BB#202:                               # %L12143
	cmpq	$86, %rax
	jg	.LBB7_209
# BB#203:                               # %L12143
	cmpq	$75, %rax
	jne	.LBB7_208
# BB#204:                               # %L9442
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#205:                               # %if.then1129
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_nonmemory_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#206:                               # %if.then1140
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#231:                               # %L9445
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_207
# BB#232:                               # %land.lhs.true1175
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_207
# BB#233:                               # %land.lhs.true1180
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB7_207
# BB#234:                               # %land.lhs.true1180
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_207
# BB#235:                               # %land.lhs.true1185
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rbx
	andq	%r13, %rbx
	movq	%rcx, %rdi
	callq	true_regnum
	andq	%r13, %rax
	cmpq	%rax, %rbx
	je	.LBB7_236
# BB#814:                               # %if.then1191
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_960  # TAILCALL
.LBB7_11:
	movq	(%rsp), %r13            # 8-byte Reload
	jmp	.LBB7_14
.LBB7_220:                              # %L12143
	cmpq	$121, %rax
	jne	.LBB7_208
# BB#221:                               # %L9458
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262219, %rcx           # imm = 0x4004B
	jne	.LBB7_222
# BB#237:                               # %L9459
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#238:                               # %if.then1228
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#239:                               # %if.then1239
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#240:                               # %L9462
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_207
# BB#241:                               # %land.lhs.true1274
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_207
# BB#242:                               # %land.lhs.true1274
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_207
# BB#243:                               # %land.lhs.true1281
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rdi
	movq	%rax, %rbx
	andq	%r13, %rbx
	callq	true_regnum
	andq	%r13, %rax
	cmpq	%rax, %rbx
	je	.LBB7_236
# BB#244:                               # %if.then1287
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_962  # TAILCALL
.LBB7_209:                              # %L12143
	cmpq	$87, %rax
	je	.LBB7_245
# BB#210:                               # %L12143
	cmpq	$89, %rax
	jne	.LBB7_211
# BB#262:                               # %L9918
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#263:                               # %if.then1517
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#264:                               # %if.then1528
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#265:                               # %L9921
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_207
# BB#266:                               # %land.lhs.true1563
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_207
# BB#267:                               # %land.lhs.true1568
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB7_207
# BB#268:                               # %land.lhs.true1568
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_207
# BB#269:                               # %if.then1573
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1093  # TAILCALL
.LBB7_222:                              # %if.end1214
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$87, %rax
	jne	.LBB7_208
# BB#223:                               # %L9900
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#224:                               # %if.then1303
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#225:                               # %if.then1314
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#226:                               # %L9903
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_207
# BB#227:                               # %land.lhs.true1349
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_207
# BB#228:                               # %land.lhs.true1349
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_207
# BB#229:                               # %land.lhs.true1356
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rbx
	andq	%r13, %rbx
	movq	%rcx, %rdi
	callq	true_regnum
	andq	%r13, %rax
	cmpq	%rax, %rbx
	je	.LBB7_236
# BB#230:                               # %if.then1362
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1088  # TAILCALL
.LBB7_245:                              # %L9865
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#246:                               # %if.then1378
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB7_249
# BB#247:                               # %if.then1389
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_248
# BB#256:                               # %L9868
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_248
# BB#257:                               # %land.lhs.true1432
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_248
# BB#258:                               # %land.lhs.true1437
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB7_248
# BB#259:                               # %land.lhs.true1437
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_248
# BB#260:                               # %land.lhs.true1442
	movq	recog_data(%rip), %rax
	movq	%rax, %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rbx
	andq	%r13, %rbx
	movq	%rcx, %rdi
	callq	true_regnum
	andq	%r13, %rax
	cmpq	%rax, %rbx
	jne	.LBB7_815
# BB#261:                               # %land.lhs.true1442.if.end1450_crit_edge
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_248:                              # %if.end1409
	movq	8(%rax), %r12
	movq	16(%r12), %rax
	movq	16(%rax), %rbx
.LBB7_249:                              # %L9884
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#250:                               # %if.then1394
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#251:                               # %L9886
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_207
# BB#252:                               # %land.lhs.true1491
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_207
# BB#253:                               # %land.lhs.true1496
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB7_207
# BB#254:                               # %land.lhs.true1496
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_207
# BB#255:                               # %if.then1501
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1083  # TAILCALL
.LBB7_211:                              # %L12143
	cmpq	$90, %rax
	jne	.LBB7_208
# BB#212:                               # %L9936
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#213:                               # %if.then1589
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#214:                               # %if.then1600
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#215:                               # %L9939
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_207
# BB#216:                               # %land.lhs.true1635
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_207
# BB#217:                               # %land.lhs.true1640
	movl	target_flags(%rip), %ecx
	testq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB7_207
# BB#218:                               # %land.lhs.true1640
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_207
# BB#219:                               # %if.then1645
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1100  # TAILCALL
.LBB7_163:                              # %land.lhs.true794.if.end802_crit_edge
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB7_6
.LBB7_354:                              # %L12163
	testq	%r13, %rcx
	je	.LBB7_207
# BB#355:                               # %L12163
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_207
# BB#356:                               # %land.lhs.true2285
	movq	recog_data(%rip), %rcx
	movl	8(%rcx), %ecx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	je	.LBB7_207
# BB#357:                               # %if.then2297
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1037  # TAILCALL
.LBB7_358:                              # %L12169
	testq	%r13, %rdx
	je	.LBB7_207
# BB#359:                               # %L12169
	movl	reload_completed(%rip), %edx
	testq	%r13, %rdx
	je	.LBB7_207
# BB#360:                               # %land.lhs.true2402
	movq	recog_data(%rip), %rdx
	movl	8(%rdx), %edx
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	je	.LBB7_207
# BB#361:                               # %if.then2414
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1057  # TAILCALL
.LBB7_89:                               # %land.lhs.true258
	cmpq	$3, %rcx
	ja	.LBB7_90
.LBB7_88:                               # %if.then264
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_885  # TAILCALL
.LBB7_90:                               # %land.lhs.true268
	movq	recog_data(%rip), %rsi
	movl	target_flags(%rip), %edi
	movzbl	(%rsi), %ecx
	andq	$33554432, %rdi         # imm = 0x2000000
	je	.LBB7_94
# BB#91:                                # %cond.true271
	cmpq	$61, %rcx
	jne	.LBB7_66
# BB#92:                                # %land.lhs.true276
	movl	8(%rsi), %ecx
	cmpq	$44, %rcx
	ja	.LBB7_66
# BB#93:                                # %land.lhs.true276
	movq	$1, %r8
	shlq	%cl, %r8
	movabsq	$35046933135615, %rcx   # imm = 0x1FE0000000FF
	testq	%rcx, %r8
	jne	.LBB7_96
	jmp	.LBB7_66
.LBB7_94:                               # %cond.false294
	cmpq	$61, %rcx
	jne	.LBB7_66
# BB#95:                                # %land.lhs.true299
	movl	8(%rsi), %ecx
	cmpq	$3, %rcx
	ja	.LBB7_66
.LBB7_96:                               # %land.lhs.true305
	movzbl	(%rbx), %ecx
	testq	%r14, %rdi
	je	.LBB7_103
# BB#97:                                # %cond.true308
	cmpq	$61, %rcx
	jne	.LBB7_108
# BB#98:                                # %land.lhs.true313
	movl	8(%rbx), %ecx
	cmpq	$44, %rcx
	ja	.LBB7_66
# BB#99:                                # %land.lhs.true313
	movq	$1, %rdi
	shlq	%cl, %rdi
	movabsq	$35046933135615, %rcx   # imm = 0x1FE0000000FF
	testq	%rcx, %rdi
	je	.LBB7_66
# BB#100:                               # %land.lhs.true347
	testq	$1, %rdx
	jne	.LBB7_66
	jmp	.LBB7_101
.LBB7_142:                              # %land.lhs.true588
	cmpq	$3, %rcx
	ja	.LBB7_143
.LBB7_141:                              # %if.then594
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_881  # TAILCALL
.LBB7_143:                              # %land.lhs.true598
	movq	recog_data(%rip), %rsi
	movzbl	target_flags+3(%rip), %edi
	movzbl	(%rsi), %ecx
	testq	$2, %rdi
	je	.LBB7_148
# BB#144:                               # %cond.true601
	cmpq	$61, %rcx
	jne	.LBB7_119
# BB#145:                               # %land.lhs.true606
	movl	8(%rsi), %ecx
	cmpq	$44, %rcx
	ja	.LBB7_119
# BB#146:                               # %land.lhs.true606
	movq	$1, %rdi
	shlq	%cl, %rdi
	movabsq	$35046933135615, %rcx   # imm = 0x1FE0000000FF
	testq	%rcx, %rdi
	je	.LBB7_119
# BB#147:                               # %land.lhs.true635
	testq	$1, %rdx
	jne	.LBB7_119
	jmp	.LBB7_153
.LBB7_148:                              # %cond.false624
	cmpq	$61, %rcx
	jne	.LBB7_119
# BB#149:                               # %land.lhs.true629
	movl	8(%rsi), %ecx
	cmpq	$3, %rcx
	jbe	.LBB7_150
# BB#151:                               # %land.lhs.true629
	movabsq	$1, %rcx
	jmp	.LBB7_152
.LBB7_427:                              # %lor.lhs.false2836
	andq	%r13, %rax
	cmpq	$45, %rax
	jb	.LBB7_435
# BB#428:                               # %land.lhs.true2842
	cmpq	$52, %rax
	ja	.LBB7_435
# BB#429:                               # %land.lhs.true2842
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_435
.LBB7_431:                              # %land.lhs.true2850
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_433
# BB#432:                               # %land.lhs.true2855
	movq	recog_data+16(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	jne	.LBB7_819
.LBB7_433:                              # %lor.lhs.false2860
	movq	recog_data+8(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_435
# BB#434:                               # %land.lhs.true2865
	movq	recog_data+16(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_435
.LBB7_819:                              # %if.then2870
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1224  # TAILCALL
.LBB7_435:                              # %if.end2872
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_406:                              # %if.end2788
	movq	8(%rax), %r12
	movq	16(%r12), %r14
.LBB7_407:                              # %if.end2758
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
.LBB7_408:                              # %L12173
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#409:                               # %if.then2745
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#410:                               # %if.then2892
	movq	%rbx, recog_data+24(%rip)
	movq	24(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#411:                               # %if.then2903
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#412:                               # %L10257
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_236
# BB#413:                               # %land.lhs.true2938
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_236
# BB#414:                               # %land.lhs.true2943
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_236
# BB#415:                               # %land.lhs.true2948
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jb	.LBB7_236
# BB#416:                               # %land.lhs.true2954
	cmpq	$15, %rax
	ja	.LBB7_236
# BB#417:                               # %land.lhs.true2954
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_236
# BB#418:                               # %land.lhs.true2962
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_420
# BB#419:                               # %land.lhs.true2967
	movq	recog_data+16(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	jne	.LBB7_422
.LBB7_420:                              # %lor.lhs.false2972
	movq	recog_data+8(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_236
# BB#421:                               # %land.lhs.true2977
	movq	recog_data+16(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_236
.LBB7_422:                              # %if.then2982
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1225  # TAILCALL
.LBB7_391:                              # %lor.lhs.false2558
	andq	%r13, %rax
	cmpq	$45, %rax
	jb	.LBB7_399
# BB#392:                               # %land.lhs.true2564
	cmpq	$52, %rax
	ja	.LBB7_399
# BB#393:                               # %land.lhs.true2564
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_399
.LBB7_395:                              # %land.lhs.true2572
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_397
# BB#396:                               # %land.lhs.true2577
	movq	recog_data+16(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	jne	.LBB7_818
.LBB7_397:                              # %lor.lhs.false2582
	movq	recog_data+8(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_399
# BB#398:                               # %land.lhs.true2587
	movq	recog_data+16(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_399
.LBB7_818:                              # %if.then2592
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1218  # TAILCALL
.LBB7_399:                              # %if.end2594
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_370:                              # %if.end2510
	movq	8(%rax), %r12
	movq	16(%r12), %r14
.LBB7_371:                              # %if.end2480
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
.LBB7_372:                              # %L12171
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#373:                               # %if.then2467
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#374:                               # %if.then2614
	movq	%rbx, recog_data+24(%rip)
	movq	24(%r14), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_208
# BB#375:                               # %if.then2625
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_207
# BB#376:                               # %L10213
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_236
# BB#377:                               # %land.lhs.true2660
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_236
# BB#378:                               # %land.lhs.true2665
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_236
# BB#379:                               # %land.lhs.true2670
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jb	.LBB7_236
# BB#380:                               # %land.lhs.true2676
	cmpq	$15, %rax
	ja	.LBB7_236
# BB#381:                               # %land.lhs.true2676
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_236
# BB#382:                               # %land.lhs.true2684
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_384
# BB#383:                               # %land.lhs.true2689
	movq	recog_data+16(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	jne	.LBB7_386
.LBB7_384:                              # %lor.lhs.false2694
	movq	recog_data+8(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_236
# BB#385:                               # %land.lhs.true2699
	movq	recog_data+16(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_236
.LBB7_386:                              # %if.then2704
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1219  # TAILCALL
.LBB7_236:                              # %land.lhs.true1185.if.end1193_crit_edge
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_207:                              # %if.end1155
	movq	8(%rax), %r12
.LBB7_208:                              # %if.end1108
	movq	8(%r12), %r15
	movq	(%rsp), %r13            # 8-byte Reload
	jmp	.LBB7_14
.LBB7_815:                              # %if.then1448
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1081  # TAILCALL
.LBB7_103:                              # %cond.false331
	cmpq	$61, %rcx
	jne	.LBB7_108
# BB#104:                               # %land.lhs.true336
	movl	8(%rbx), %ecx
	cmpq	$3, %rcx
	ja	.LBB7_106
# BB#105:
	movabsq	$0, %rcx
	jmp	.LBB7_107
.LBB7_150:
	movabsq	$0, %rcx
.LBB7_152:                              # %land.lhs.true629
	orq	%rdx, %rcx
	testq	$1, %rcx
	jne	.LBB7_119
.LBB7_153:                              # %land.lhs.true641
	movq	%r13, %r15
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	callq	reg_overlap_mentioned_p
	testq	%r14, %rax
	je	.LBB7_812
# BB#154:                               # %land.lhs.true641.if.end648_crit_edge
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	%r15, %r13
.LBB7_119:                              # %if.end480
	movq	8(%rax), %r12
	movq	16(%r12), %rax
	movq	8(%rax), %rbx
.LBB7_120:                              # %L12132
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB7_127
# BB#121:                               # %if.then465
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_57
# BB#122:                               # %L9082
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_57
# BB#123:                               # %land.lhs.true689
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_57
# BB#124:                               # %land.lhs.true689
	movl	reload_completed(%rip), %ecx
	testq	%r14, %rcx
	je	.LBB7_57
# BB#125:                               # %land.lhs.true696
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rdi
	movq	%rax, %rbx
	andq	%r14, %rbx
	callq	true_regnum
	andq	%r14, %rax
	cmpq	%rax, %rbx
	jne	.LBB7_73
# BB#126:                               # %if.then702
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_883  # TAILCALL
.LBB7_127:                              # %if.end467
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_108:                              # %lor.lhs.false342
	cmpq	$66, %rcx
	je	.LBB7_109
.LBB7_106:                              # %land.lhs.true336
	movabsq	$1, %rcx
	jmp	.LBB7_107
.LBB7_812:                              # %if.then646
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_882  # TAILCALL
.LBB7_109:
	movabsq	$0, %rcx
.LBB7_107:                              # %land.lhs.true336
	orq	%rdx, %rcx
	testq	$1, %rcx
	jne	.LBB7_66
.LBB7_101:                              # %land.lhs.true353
	movq	%r13, %r15
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	callq	reg_overlap_mentioned_p
	testq	%r14, %rax
	je	.LBB7_110
# BB#102:                               # %land.lhs.true353.if.end360_crit_edge
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	%r15, %r13
.LBB7_66:                               # %if.end154
	movq	8(%rax), %r12
	movq	16(%r12), %rax
	movq	8(%rax), %rbx
.LBB7_67:                               # %L12124
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB7_74
# BB#68:                                # %if.then139
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_57
# BB#69:                                # %L9103
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_57
# BB#70:                                # %land.lhs.true401
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_57
# BB#71:                                # %land.lhs.true401
	movl	reload_completed(%rip), %ecx
	testq	%r14, %rcx
	je	.LBB7_57
# BB#72:                                # %land.lhs.true408
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rdi
	movq	%rax, %rbx
	andq	%r14, %rbx
	callq	true_regnum
	andq	%r14, %rax
	cmpq	%rax, %rbx
	jne	.LBB7_73
# BB#111:                               # %if.then414
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_887  # TAILCALL
.LBB7_74:                               # %if.end141
	movq	8(%r12), %r15
	jmp	.LBB7_14
.LBB7_73:                               # %land.lhs.true408.if.end416_crit_edge
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_57:                               # %if.end90
	movq	8(%rax), %r12
	movq	8(%r12), %r15
.LBB7_14:                               # %L9807
	movzbl	(%r15), %eax
	cmpq	$61, %rax
	jne	.LBB7_16
# BB#15:                                # %land.lhs.true
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB7_16
# BB#470:                               # %L9808
	movq	16(%r12), %r14
	movzbl	(%r14), %eax
	cmpq	$74, %rax
	jne	.LBB7_471
# BB#472:                               # %L9809
	movq	%r13, (%rsp)            # 8-byte Spill
	movq	8(%r14), %r13
	movl	(%r13), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-2, %rdx
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rdx
	cmpq	$3, %rdx
	ja	.LBB7_474
# BB#473:                               # %L9809
	jmpq	*.LJTI7_0(,%rdx,8)
.LBB7_524:                              # %L12181
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jne	.LBB7_474
# BB#525:                               # %L9855
	movq	8(%r13), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB7_474
# BB#526:                               # %if.then3829
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_528
# BB#527:                               # %land.lhs.true3838
	cmpq	$0, 8(%rax)
	je	.LBB7_529
.LBB7_528:                              # %if.end3844
	movq	8(%r14), %r13
	jmp	.LBB7_474
.LBB7_471:                              # %if.end3292
	movq	8(%r12), %r15
	jmp	.LBB7_16
.LBB7_513:                              # %L12180
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jne	.LBB7_474
# BB#514:                               # %L9844
	movq	8(%r13), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB7_474
# BB#515:                               # %if.then3713
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_517
# BB#516:                               # %land.lhs.true3722
	cmpq	$0, 8(%rax)
	je	.LBB7_518
.LBB7_517:                              # %if.end3728
	movq	8(%r14), %r13
	jmp	.LBB7_474
.LBB7_489:                              # %L12179
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jne	.LBB7_474
# BB#490:                               # %L9821
	movq	8(%r13), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB7_474
# BB#491:                               # %L12182
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB7_495
# BB#492:                               # %if.then3450
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_494
# BB#493:                               # %land.lhs.true3464
	cmpq	$0, 8(%rax)
	jne	.LBB7_494
# BB#499:                               # %L9823
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB7_500
# BB#501:                               # %L9824
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB7_505
# BB#502:                               # %if.then3506
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262230, %rcx           # imm = 0x40056
	jne	.LBB7_505
# BB#503:                               # %L9826
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB7_505
# BB#504:                               # %land.lhs.true3556
	movq	$55, %rsi
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB7_505
# BB#822:                               # %if.then3559
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1074  # TAILCALL
.LBB7_476:                              # %L12178
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jne	.LBB7_474
# BB#477:                               # %L9810
	movq	8(%r13), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB7_474
# BB#478:                               # %if.then3326
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_480
# BB#479:                               # %land.lhs.true3335
	cmpq	$0, 8(%rax)
	je	.LBB7_481
.LBB7_480:                              # %if.end3340
	movq	8(%r14), %r13
	jmp	.LBB7_474
.LBB7_529:                              # %L9857
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB7_482
# BB#530:                               # %L9858
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB7_534
# BB#531:                               # %if.then3874
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131158, %rcx           # imm = 0x20056
	jne	.LBB7_534
# BB#532:                               # %L9860
	movq	8(%rax), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	(%rsp), %rdi            # 8-byte Reload
	je	.LBB7_534
# BB#533:                               # %land.lhs.true3918
	movq	$55, %rsi
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB7_534
# BB#823:                               # %if.then3921
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1079  # TAILCALL
.LBB7_518:                              # %L9846
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB7_482
# BB#519:                               # %L9847
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB7_534
# BB#520:                               # %if.then3758
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196694, %rcx           # imm = 0x30056
	jne	.LBB7_534
# BB#521:                               # %L9849
	movq	8(%rax), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	(%rsp), %rdi            # 8-byte Reload
	je	.LBB7_534
# BB#522:                               # %land.lhs.true3802
	movq	$55, %rsi
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB7_534
# BB#523:                               # %if.then3805
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1077  # TAILCALL
.LBB7_481:                              # %L9812
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB7_482
# BB#483:                               # %L9813
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB7_534
# BB#484:                               # %if.then3370
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327766, %rcx           # imm = 0x50056
	jne	.LBB7_534
# BB#485:                               # %L9815
	movq	8(%rax), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB7_534
# BB#486:                               # %land.lhs.true3414
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB7_534
# BB#487:                               # %land.lhs.true3417
	movq	%r15, %rbx
	movq	$55, %rsi
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	ix86_match_ccmode
	movq	%rbx, %r15
	testq	%r15, %rax
	je	.LBB7_534
# BB#488:                               # %if.then3420
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1072  # TAILCALL
.LBB7_505:                              # %if.end3508
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_500:                              # %if.end3486
	movq	8(%rax), %r12
	movq	16(%r12), %r14
.LBB7_494:                              # %if.end3470
	movq	8(%r14), %r13
	movq	8(%r13), %rbx
.LBB7_495:                              # %L12183
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB7_474
# BB#496:                               # %if.then3455
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_498
# BB#497:                               # %land.lhs.true3582
	cmpq	$0, 8(%rax)
	je	.LBB7_506
.LBB7_498:                              # %if.end3588
	movq	8(%r14), %r13
	jmp	.LBB7_474
.LBB7_506:                              # %L9834
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB7_482
# BB#507:                               # %L9835
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB7_534
# BB#508:                               # %if.then3618
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB7_534
# BB#509:                               # %L9837
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262230, %rcx           # imm = 0x40056
	jne	.LBB7_534
# BB#510:                               # %L9838
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB7_534
# BB#511:                               # %land.lhs.true3686
	movq	$55, %rsi
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB7_534
# BB#512:                               # %if.then3689
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1075  # TAILCALL
.LBB7_534:                              # %if.end3372
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_482:                              # %if.end3353
	movq	8(%rax), %r12
	movq	16(%r12), %r14
	movq	8(%r14), %r13
.LBB7_474:                              # %L10327
	movzbl	(%r13), %eax
	cmpq	$83, %rax
	jne	.LBB7_475
# BB#535:                               # %L10328
	movq	8(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	aligned_operand
	testq	%r15, %rax
	je	.LBB7_824
# BB#536:                               # %if.then3940
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB7_824
# BB#537:                               # %if.then3951
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_539
# BB#538:                               # %land.lhs.true3963
	cmpq	$0, 8(%rax)
	je	.LBB7_540
.LBB7_539:                              # %if.end3969
	movq	8(%r12), %r15
	jmp	.LBB7_16
.LBB7_475:                              # %if.end3312
	movq	8(%r12), %r15
	jmp	.LBB7_16
.LBB7_824:                              # %if.end3953
	movq	8(%r12), %r15
.LBB7_16:                               # %L9448
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB7_21
# BB#17:                                # %if.then13
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$75, %rax
	je	.LBB7_553
# BB#18:                                # %if.then13
	cmpq	$83, %rax
	jne	.LBB7_19
# BB#562:                               # %L9535
	movq	8(%rbx), %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB7_20
# BB#563:                               # %L9536
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_20
# BB#564:                               # %land.lhs.true4188
	movq	8(%rax), %rax
	cmpq	$-65536, %rax           # imm = 0xFFFFFFFFFFFF0000
	jne	.LBB7_20
# BB#565:                               # %L9537
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_556
# BB#566:                               # %L9538
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_556
# BB#567:                               # %land.lhs.true4227
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_556
# BB#568:                               # %land.lhs.true4227
	movl	optimize_size(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_556
# BB#569:                               # %if.then4234
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1013  # TAILCALL
.LBB7_553:                              # %L9450
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_20
# BB#554:                               # %if.then4101
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB7_20
# BB#555:                               # %if.then4112
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_556
# BB#557:                               # %L9453
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_556
# BB#558:                               # %land.lhs.true4147
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_556
# BB#559:                               # %land.lhs.true4147
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_556
# BB#560:                               # %land.lhs.true4154
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rdi
	movq	%rax, %rbx
	andq	%r13, %rbx
	callq	true_regnum
	andq	%r13, %rax
	cmpq	%rax, %rbx
	je	.LBB7_561
# BB#826:                               # %if.then4160
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_961  # TAILCALL
.LBB7_19:                               # %if.then13
	cmpq	$87, %rax
	jne	.LBB7_20
# BB#570:                               # %L9891
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_20
# BB#571:                               # %if.then4250
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r13, %rax
	je	.LBB7_20
# BB#572:                               # %if.then4261
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_556
# BB#573:                               # %L9894
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_556
# BB#574:                               # %land.lhs.true4296
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_556
# BB#575:                               # %land.lhs.true4296
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_556
# BB#576:                               # %land.lhs.true4303
	movq	recog_data(%rip), %rdi
	callq	true_regnum
	movq	recog_data+8(%rip), %rdi
	movq	%rax, %rbx
	andq	%r13, %rbx
	callq	true_regnum
	andq	%r13, %rax
	cmpq	%rax, %rbx
	jne	.LBB7_577
.LBB7_561:                              # %land.lhs.true4154.if.end4162_crit_edge
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB7_20
.LBB7_556:                              # %if.end4127
	movq	8(%rax), %r12
.LBB7_20:                               # %sw.epilog4092
	movq	8(%r12), %r15
.LBB7_21:                               # %L9541
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB7_24
# BB#22:                                # %if.then18
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$83, %rax
	jne	.LBB7_23
# BB#578:                               # %L9543
	movq	8(%rbx), %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB7_23
# BB#579:                               # %L9544
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB7_23
# BB#580:                               # %L12184
	movq	8(%rax), %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jne	.LBB7_23
# BB#581:                               # %if.then4362
	andq	%r13, %rax
	movabsq	$4294902015, %rcx       # imm = 0xFFFF00FF
	cmpq	%rcx, %rax
	jne	.LBB7_582
# BB#592:                               # %L9553
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_584
# BB#593:                               # %L9554
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_584
# BB#594:                               # %land.lhs.true4464
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_584
# BB#595:                               # %land.lhs.true4470
	movl	optimize_size(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB7_596
# BB#598:                               # %land.lhs.true4476
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	jne	.LBB7_599
	jmp	.LBB7_584
.LBB7_582:                              # %if.then4362
	movabsq	$4294967040, %rcx       # imm = 0xFFFFFF00
	cmpq	%rcx, %rax
	jne	.LBB7_23
# BB#583:                               # %L9545
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_584
# BB#585:                               # %L9546
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_584
# BB#586:                               # %land.lhs.true4407
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_584
# BB#587:                               # %land.lhs.true4413
	movl	optimize_size(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB7_588
# BB#590:                               # %land.lhs.true4419
	movl	reload_completed(%rip), %ecx
	testq	%rcx, %rcx
	jne	.LBB7_591
	jmp	.LBB7_584
.LBB7_540:                              # %L10331
	movq	%rdx, %r15
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB7_541
# BB#542:                               # %L10332
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB7_552
# BB#543:                               # %if.then3996
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$83, %rax
	jne	.LBB7_552
# BB#544:                               # %L10334
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB7_552
# BB#545:                               # %L10335
	movq	16(%rbx), %rdi
	movq	%r15, %rbx
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	%rbx, %rsi
	testq	%rsi, %rax
	je	.LBB7_552
# BB#546:                               # %land.lhs.true4045
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%rsi, %rdx
	jne	.LBB7_552
# BB#547:                               # %land.lhs.true4045
	movl	reload_completed(%rip), %eax
	testq	%rsi, %rax
	je	.LBB7_552
# BB#548:                               # %land.lhs.true4051
	movq	%rsi, %rbx
	movq	$55, %rsi
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB7_552
# BB#549:                               # %land.lhs.true4054
	movq	recog_data(%rip), %rax
	movzbl	2(%rax), %eax
	cmpq	$3, %rax
	je	.LBB7_825
# BB#550:                               # %land.lhs.true4054
	cmpq	$2, %rax
	jne	.LBB7_552
# BB#551:                               # %land.lhs.true4066
	movl	ix86_cpu(%rip), %eax
	movl	x86_promote_QImode(%rip), %edx
	movq	%rcx, %rbx
	movl	optimize_size(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rdx, %rdi
	orq	%rdi, %rsi
	testq	%rbx, %rsi
	je	.LBB7_552
.LBB7_825:                              # %if.then4072
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1237  # TAILCALL
.LBB7_577:                              # %if.then4309
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1087  # TAILCALL
.LBB7_552:                              # %if.end3998
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_541:                              # %if.end3982
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	jmp	.LBB7_16
.LBB7_596:                              # %lor.lhs.false4472
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	jne	.LBB7_584
# BB#597:                               # %lor.lhs.false4472
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_584
.LBB7_599:                              # %if.then4478
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1015  # TAILCALL
.LBB7_588:                              # %lor.lhs.false4415
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	jne	.LBB7_584
# BB#589:                               # %lor.lhs.false4415
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_584
.LBB7_591:                              # %if.then4421
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1014  # TAILCALL
.LBB7_584:                              # %if.end4385
	movq	8(%rax), %r12
.LBB7_23:                               # %if.end4327
	movq	8(%r12), %r15
.LBB7_24:                               # %L9605
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_28
# BB#25:                                # %if.then23
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$77, %rcx
	jne	.LBB7_26
# BB#600:                               # %L9607
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_27
# BB#601:                               # %if.then4506
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_602
# BB#603:                               # %L9609
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_602
# BB#604:                               # %land.lhs.true4544
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_602
# BB#605:                               # %land.lhs.true4550
	movl	target_flags(%rip), %ecx
	testq	$1, %rcx
	je	.LBB7_602
# BB#606:                               # %land.lhs.true4550
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_602
# BB#607:                               # %land.lhs.true4555
	movq	recog_data(%rip), %rcx
	movzbl	2(%rcx), %ecx
	movl	mode_class(,%rcx,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB7_602
# BB#608:                               # %land.lhs.true4555
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB7_602
# BB#609:                               # %if.then4581
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1038  # TAILCALL
.LBB7_26:                               # %if.then23
	cmpq	$129, %rcx
	jne	.LBB7_27
# BB#610:                               # %L9733
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB7_27
# BB#611:                               # %if.then4597
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_602
# BB#612:                               # %L9735
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB7_602
# BB#613:                               # %land.lhs.true4635
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_602
# BB#614:                               # %land.lhs.true4641
	movl	target_flags(%rip), %ecx
	testq	$1, %rcx
	je	.LBB7_602
# BB#615:                               # %land.lhs.true4641
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_602
# BB#616:                               # %land.lhs.true4646
	movq	recog_data(%rip), %rcx
	movzbl	2(%rcx), %ecx
	movl	mode_class(,%rcx,4), %ecx
	cmpq	$8, %rcx
	ja	.LBB7_602
# BB#617:                               # %land.lhs.true4646
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB7_602
# BB#618:                               # %if.then4673
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1058  # TAILCALL
.LBB7_602:                              # %if.end4522
	movq	8(%rax), %r12
.LBB7_27:                               # %sw.epilog4497
	movq	8(%r12), %r15
.LBB7_28:                               # %L9648
	movzbl	2(%r15), %eax
	cmpq	$16, %rax
	je	.LBB7_619
# BB#29:                                # %L9648
	cmpq	$17, %rax
	jne	.LBB7_30
# BB#737:                               # %L12120
	movq	$17, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_31
# BB#738:                               # %if.then5576
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1114112, %rdx          # imm = 0x110000
	jne	.LBB7_739
# BB#740:                               # %L12205
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB7_741
# BB#743:                               # %L9664
	movq	8(%rax), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_833
# BB#744:                               # %if.then5606
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_628
# BB#745:                               # %L9666
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_628
# BB#746:                               # %L12207
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_628
# BB#747:                               # %L12209
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_628
# BB#748:                               # %L12211
	movl	target_flags(%rip), %ecx
	andq	$1, %rcx
	je	.LBB7_628
# BB#749:                               # %land.lhs.true5680
	movq	recog_data(%rip), %rdx
	movl	8(%rdx), %edx
	cmpq	$8, %rdx
	jb	.LBB7_752
# BB#750:                               # %land.lhs.true5687
	cmpq	$15, %rdx
	ja	.LBB7_752
# BB#751:                               # %land.lhs.true5687
	movl	reload_completed(%rip), %edx
	testq	%r13, %rdx
	je	.LBB7_752
# BB#834:                               # %if.then5696
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1048  # TAILCALL
.LBB7_619:                              # %L12119
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_31
# BB#620:                               # %if.then4686
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB7_621
# BB#622:                               # %L12186
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$72, %rax
	je	.LBB7_655
# BB#623:                               # %L12186
	cmpq	$77, %rax
	jne	.LBB7_624
# BB#626:                               # %L9650
	movq	8(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_827
# BB#627:                               # %if.then4717
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_628
# BB#629:                               # %L9652
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_628
# BB#630:                               # %L12189
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_628
# BB#631:                               # %L12191
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_628
# BB#632:                               # %L12193
	movl	target_flags(%rip), %edx
	movq	%rdx, %rcx
	andq	$1, %rcx
	je	.LBB7_636
# BB#633:                               # %land.lhs.true4791
	movq	recog_data(%rip), %rsi
	movl	8(%rsi), %esi
	cmpq	$8, %rsi
	jb	.LBB7_636
# BB#634:                               # %land.lhs.true4798
	cmpq	$15, %rsi
	ja	.LBB7_636
# BB#635:                               # %land.lhs.true4798
	movl	reload_completed(%rip), %esi
	testq	%r13, %rsi
	je	.LBB7_636
# BB#828:                               # %if.then4807
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1044  # TAILCALL
.LBB7_30:                               # %L9648
	cmpq	$18, %rax
	jne	.LBB7_31
# BB#769:                               # %L12121
	movq	$18, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_31
# BB#770:                               # %if.then5857
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1179648, %rdx          # imm = 0x120000
	jne	.LBB7_771
# BB#772:                               # %L12219
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB7_773
# BB#775:                               # %L9678
	movq	8(%rax), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_837
# BB#776:                               # %if.then5887
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_628
# BB#777:                               # %L9680
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_628
# BB#778:                               # %L12221
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_628
# BB#779:                               # %L12223
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_628
# BB#780:                               # %L12225
	movl	target_flags(%rip), %ecx
	andq	$1, %rcx
	je	.LBB7_628
# BB#781:                               # %land.lhs.true5961
	movq	recog_data(%rip), %rdx
	movl	8(%rdx), %edx
	cmpq	$8, %rdx
	jb	.LBB7_784
# BB#782:                               # %land.lhs.true5968
	cmpq	$15, %rdx
	ja	.LBB7_784
# BB#783:                               # %land.lhs.true5968
	movl	reload_completed(%rip), %edx
	testq	%r13, %rdx
	je	.LBB7_784
# BB#838:                               # %if.then5977
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1050  # TAILCALL
.LBB7_739:                              # %if.end5588
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_621:                              # %if.end4698
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_741:                              # %L12205
	cmpq	$129, %rcx
	jne	.LBB7_742
# BB#756:                               # %L9781
	movq	8(%rax), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_835
# BB#757:                               # %if.then5733
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_628
# BB#758:                               # %L9783
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_628
# BB#759:                               # %L12213
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_628
# BB#760:                               # %L12215
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_628
# BB#761:                               # %L12217
	movl	target_flags(%rip), %ecx
	andq	$1, %rcx
	je	.LBB7_628
# BB#762:                               # %land.lhs.true5807
	movq	recog_data(%rip), %rdx
	movl	8(%rdx), %edx
	cmpq	$8, %rdx
	jb	.LBB7_765
# BB#763:                               # %land.lhs.true5814
	cmpq	$15, %rdx
	ja	.LBB7_765
# BB#764:                               # %land.lhs.true5814
	movl	reload_completed(%rip), %edx
	testq	%r13, %rdx
	je	.LBB7_765
# BB#836:                               # %if.then5823
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1067  # TAILCALL
.LBB7_771:                              # %if.end5869
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_655:                              # %L10218
	movq	8(%r14), %rbx
	movzbl	(%rbx), %eax
	cmpq	$105, %rax
	jne	.LBB7_656
# BB#697:                               # %L10263
	movq	8(%rbx), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_699
# BB#698:                               # %if.then5284
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB7_699
# BB#700:                               # %L12203
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_706
# BB#701:                               # %if.then5305
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_705
# BB#702:                               # %if.then5321
	movq	%rbx, recog_data+24(%rip)
	movq	24(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_705
# BB#703:                               # %if.then5335
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_704
# BB#722:                               # %L10268
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_734
# BB#723:                               # %land.lhs.true5382
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_734
# BB#724:                               # %land.lhs.true5388
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_734
# BB#725:                               # %land.lhs.true5394
	movl	8(%rax), %eax
	leaq	-21(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jae	.LBB7_726
# BB#729:                               # %land.lhs.true5422
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB7_730
	jmp	.LBB7_734
.LBB7_624:                              # %L12186
	cmpq	$129, %rax
	jne	.LBB7_625
# BB#641:                               # %L9767
	movq	8(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_829
# BB#642:                               # %if.then4847
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_628
# BB#643:                               # %L9769
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_628
# BB#644:                               # %L12195
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_628
# BB#645:                               # %L12197
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_628
# BB#646:                               # %L12199
	movl	target_flags(%rip), %edx
	movq	%rdx, %rcx
	andq	$1, %rcx
	je	.LBB7_650
# BB#647:                               # %land.lhs.true4921
	movq	recog_data(%rip), %rsi
	movl	8(%rsi), %esi
	cmpq	$8, %rsi
	jb	.LBB7_650
# BB#648:                               # %land.lhs.true4928
	cmpq	$15, %rsi
	ja	.LBB7_650
# BB#649:                               # %land.lhs.true4928
	movl	reload_completed(%rip), %esi
	testq	%r13, %rsi
	je	.LBB7_650
# BB#830:                               # %if.then4937
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1063  # TAILCALL
.LBB7_773:                              # %L12219
	cmpq	$129, %rcx
	jne	.LBB7_774
# BB#788:                               # %L9795
	movq	8(%rax), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_839
# BB#789:                               # %if.then6014
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_628
# BB#790:                               # %L9797
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB7_628
# BB#791:                               # %L12227
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB7_628
# BB#792:                               # %L12229
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB7_628
# BB#793:                               # %L12231
	movl	target_flags(%rip), %ecx
	andq	$1, %rcx
	je	.LBB7_628
# BB#794:                               # %land.lhs.true6088
	movq	recog_data(%rip), %rdx
	movl	8(%rdx), %edx
	cmpq	$8, %rdx
	jb	.LBB7_797
# BB#795:                               # %land.lhs.true6095
	cmpq	$15, %rdx
	ja	.LBB7_797
# BB#796:                               # %land.lhs.true6095
	movl	reload_completed(%rip), %edx
	testq	%r13, %rdx
	je	.LBB7_797
# BB#840:                               # %if.then6104
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1069  # TAILCALL
.LBB7_742:                              # %sw.epilog5597
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_833:                              # %if.end5608
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_656:                              # %L10218
	cmpq	$107, %rax
	jne	.LBB7_657
# BB#658:                               # %L10219
	movq	8(%rbx), %r15
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_660
# BB#659:                               # %if.then4989
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB7_660
# BB#661:                               # %L12201
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_667
# BB#662:                               # %if.then5010
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_666
# BB#663:                               # %if.then5026
	movq	%rbx, recog_data+24(%rip)
	movq	24(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB7_666
# BB#664:                               # %if.then5040
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_665
# BB#683:                               # %L10224
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_695
# BB#684:                               # %land.lhs.true5087
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_695
# BB#685:                               # %land.lhs.true5093
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_695
# BB#686:                               # %land.lhs.true5099
	movl	8(%rax), %eax
	leaq	-21(%rax), %rcx
	andq	%r13, %rcx
	cmpq	$8, %rcx
	jae	.LBB7_687
# BB#690:                               # %land.lhs.true5127
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	jne	.LBB7_691
	jmp	.LBB7_695
.LBB7_625:                              # %sw.epilog4708
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_827:                              # %if.end4719
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_774:                              # %sw.epilog5878
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_699:                              # %if.end5299
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_837:                              # %if.end5889
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_835:                              # %if.end5735
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_657:                              # %sw.epilog4980
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_829:                              # %if.end4849
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_660:                              # %if.end5004
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_839:                              # %if.end6016
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_636:                              # %L12194
	testq	$33554432, %rdx         # imm = 0x2000000
	jne	.LBB7_628
# BB#637:                               # %land.lhs.true4812
	testq	%r13, %rcx
	je	.LBB7_628
# BB#638:                               # %land.lhs.true4812
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_628
# BB#639:                               # %land.lhs.true4817
	movq	recog_data(%rip), %rcx
	movl	8(%rcx), %ecx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	je	.LBB7_628
# BB#640:                               # %if.then4831
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1045  # TAILCALL
.LBB7_752:                              # %L12212
	testq	%r13, %rcx
	je	.LBB7_628
# BB#753:                               # %L12212
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_628
# BB#754:                               # %land.lhs.true5703
	movq	recog_data(%rip), %rcx
	movl	8(%rcx), %ecx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	je	.LBB7_628
# BB#755:                               # %if.then5717
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1049  # TAILCALL
.LBB7_784:                              # %L12226
	testq	%r13, %rcx
	je	.LBB7_628
# BB#785:                               # %L12226
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_628
# BB#786:                               # %land.lhs.true5984
	movq	recog_data(%rip), %rcx
	movl	8(%rcx), %ecx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	je	.LBB7_628
# BB#787:                               # %if.then5998
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1051  # TAILCALL
.LBB7_765:                              # %L12218
	testq	%r13, %rcx
	je	.LBB7_628
# BB#766:                               # %L12218
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_628
# BB#767:                               # %land.lhs.true5830
	movq	recog_data(%rip), %rcx
	movl	8(%rcx), %ecx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	je	.LBB7_628
# BB#768:                               # %if.then5844
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1068  # TAILCALL
.LBB7_650:                              # %L12200
	testq	$33554432, %rdx         # imm = 0x2000000
	jne	.LBB7_628
# BB#651:                               # %land.lhs.true4942
	testq	%r13, %rcx
	je	.LBB7_628
# BB#652:                               # %land.lhs.true4942
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_628
# BB#653:                               # %land.lhs.true4947
	movq	recog_data(%rip), %rcx
	movl	8(%rcx), %ecx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	je	.LBB7_628
# BB#654:                               # %if.then4961
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1064  # TAILCALL
.LBB7_797:                              # %L12232
	testq	%r13, %rcx
	je	.LBB7_628
# BB#798:                               # %L12232
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_628
# BB#799:                               # %land.lhs.true6111
	movq	recog_data(%rip), %rcx
	movl	8(%rcx), %ecx
	movabsq	$4294967288, %rdx       # imm = 0xFFFFFFF8
	andq	%rcx, %rdx
	cmpq	$8, %rdx
	je	.LBB7_628
# BB#800:                               # %if.then6125
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1070  # TAILCALL
.LBB7_110:                              # %if.then358
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_886  # TAILCALL
.LBB7_726:                              # %lor.lhs.false5408
	andq	%r13, %rax
	cmpq	$45, %rax
	jb	.LBB7_734
# BB#727:                               # %land.lhs.true5415
	cmpq	$52, %rax
	ja	.LBB7_734
# BB#728:                               # %land.lhs.true5415
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_734
.LBB7_730:                              # %land.lhs.true5424
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_732
# BB#731:                               # %land.lhs.true5429
	movq	recog_data+16(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	jne	.LBB7_832
.LBB7_732:                              # %lor.lhs.false5434
	movq	recog_data+8(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_734
# BB#733:                               # %land.lhs.true5439
	movq	recog_data+16(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_734
.LBB7_832:                              # %if.then5444
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1227  # TAILCALL
.LBB7_734:                              # %if.end5446
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_704:                              # %if.end5354
	movq	8(%rax), %r12
	movq	16(%r12), %r14
.LBB7_705:                              # %if.end5323
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
.LBB7_706:                              # %L12204
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_721
# BB#707:                               # %if.then5310
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_735
# BB#708:                               # %if.then5466
	movq	%rbx, recog_data+24(%rip)
	movq	24(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_735
# BB#709:                               # %if.then5477
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_628
# BB#710:                               # %L10279
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_736
# BB#711:                               # %land.lhs.true5515
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_736
# BB#712:                               # %land.lhs.true5521
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_736
# BB#713:                               # %land.lhs.true5527
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jb	.LBB7_736
# BB#714:                               # %land.lhs.true5534
	cmpq	$15, %rax
	ja	.LBB7_736
# BB#715:                               # %land.lhs.true5534
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_736
# BB#716:                               # %land.lhs.true5543
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_718
# BB#717:                               # %land.lhs.true5548
	movq	recog_data+16(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	jne	.LBB7_720
.LBB7_718:                              # %lor.lhs.false5553
	movq	recog_data+8(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_736
# BB#719:                               # %land.lhs.true5558
	movq	recog_data+16(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_736
.LBB7_720:                              # %if.then5563
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1228  # TAILCALL
.LBB7_735:                              # %if.end5479
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_721:                              # %if.end5312
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_687:                              # %lor.lhs.false5113
	andq	%r13, %rax
	cmpq	$45, %rax
	jb	.LBB7_695
# BB#688:                               # %land.lhs.true5120
	cmpq	$52, %rax
	ja	.LBB7_695
# BB#689:                               # %land.lhs.true5120
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_695
.LBB7_691:                              # %land.lhs.true5129
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_693
# BB#692:                               # %land.lhs.true5134
	movq	recog_data+16(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	jne	.LBB7_831
.LBB7_693:                              # %lor.lhs.false5139
	movq	recog_data+8(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_695
# BB#694:                               # %land.lhs.true5144
	movq	recog_data+16(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_695
.LBB7_831:                              # %if.then5149
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1221  # TAILCALL
.LBB7_695:                              # %if.end5151
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_665:                              # %if.end5059
	movq	8(%rax), %r12
	movq	16(%r12), %r14
.LBB7_666:                              # %if.end5028
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
.LBB7_667:                              # %L12202
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_682
# BB#668:                               # %if.then5015
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_696
# BB#669:                               # %if.then5171
	movq	%rbx, recog_data+24(%rip)
	movq	24(%r14), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_696
# BB#670:                               # %if.then5182
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB7_628
# BB#671:                               # %L10235
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_736
# BB#672:                               # %land.lhs.true5220
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_736
# BB#673:                               # %land.lhs.true5226
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB7_736
# BB#674:                               # %land.lhs.true5232
	movl	8(%rax), %eax
	cmpq	$8, %rax
	jb	.LBB7_736
# BB#675:                               # %land.lhs.true5239
	cmpq	$15, %rax
	ja	.LBB7_736
# BB#676:                               # %land.lhs.true5239
	movl	reload_completed(%rip), %eax
	testq	%r13, %rax
	je	.LBB7_736
# BB#677:                               # %land.lhs.true5248
	movq	recog_data+8(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_679
# BB#678:                               # %land.lhs.true5253
	movq	recog_data+16(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	jne	.LBB7_681
.LBB7_679:                              # %lor.lhs.false5258
	movq	recog_data+8(%rip), %rax
	movq	recog_data+32(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_736
# BB#680:                               # %land.lhs.true5263
	movq	recog_data+16(%rip), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	operands_match_p
	testq	%r13, %rax
	je	.LBB7_736
.LBB7_681:                              # %if.then5268
	movabsq	$recog_data, %rax
	movq	%rax, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1222  # TAILCALL
.LBB7_682:                              # %if.end5017
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_696:                              # %if.end5184
	movq	8(%r12), %r15
	jmp	.LBB7_31
.LBB7_736:                              # %if.end5270
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB7_628:                              # %if.end4733
	movq	8(%rax), %r12
	movq	8(%r12), %r15
.LBB7_31:                               # %L10317
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_810
# BB#32:                                # %if.then36
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$77, %rax
	jne	.LBB7_33
# BB#801:                               # %L10347
	movq	8(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_810
# BB#802:                               # %if.then6155
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB7_810
# BB#803:                               # %L10349
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_810
# BB#804:                               # %land.lhs.true6182
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_810
# BB#805:                               # %land.lhs.true6188
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r13, %rdx
	jne	.LBB7_810
# BB#806:                               # %land.lhs.true6188
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_810
# BB#807:                               # %land.lhs.true6194
	movq	recog_data(%rip), %rcx
	movzbl	2(%rcx), %ecx
	cmpq	$3, %rcx
	je	.LBB7_841
# BB#808:                               # %land.lhs.true6194
	cmpq	$2, %rcx
	jne	.LBB7_810
# BB#809:                               # %land.lhs.true6208
	movl	x86_promote_QImode(%rip), %ecx
	movl	optimize_size(%rip), %edx
	andq	%rax, %rcx
	orq	%rcx, %rdx
	testq	%r13, %rdx
	je	.LBB7_810
.LBB7_841:                              # %if.then6214
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1239  # TAILCALL
.LBB7_33:                               # %if.end6144
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	promotable_binary_operator
	testq	%r13, %rax
	je	.LBB7_810
# BB#34:                                # %if.then6147
	movq	%rbx, recog_data+24(%rip)
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB7_810
# BB#35:                                # %if.then6222
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	aligned_operand
	testq	%r13, %rax
	je	.LBB7_810
# BB#36:                                # %if.then6230
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB7_810
# BB#37:                                # %L10322
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB7_810
# BB#38:                                # %land.lhs.true6257
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB7_810
# BB#39:                                # %land.lhs.true6263
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r13, %rdx
	jne	.LBB7_810
# BB#40:                                # %land.lhs.true6263
	movl	reload_completed(%rip), %ecx
	testq	%r13, %rcx
	je	.LBB7_810
# BB#41:                                # %land.lhs.true6269
	movq	recog_data(%rip), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	je	.LBB7_47
# BB#42:                                # %land.lhs.true6269
	andq	%r13, %rcx
	cmpq	$196608, %rcx           # imm = 0x30000
	jne	.LBB7_810
# BB#43:                                # %land.lhs.true6276
	movl	optimize_size(%rip), %edx
	testq	%rdx, %rdx
	je	.LBB7_48
# BB#44:                                # %lor.lhs.false6278
	movzbl	(%rbx), %edx
	cmpq	$54, %rdx
	jne	.LBB7_48
# BB#45:                                # %cond.true6315
	movq	8(%rbx), %rdx
	addq	$128, %rdx
	cmpq	$256, %rdx              # imm = 0x100
	jb	.LBB7_48
# BB#46:                                # %lor.lhs.false6375
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB7_810
.LBB7_47:                               # %land.lhs.true6382
	movl	x86_promote_QImode(%rip), %ecx
	movl	optimize_size(%rip), %edx
	andq	%rcx, %rax
	orq	%rax, %rdx
	testq	%r13, %rdx
	je	.LBB7_810
.LBB7_48:                               # %if.then6388
	movabsq	$recog_data, %rdi
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	gen_split_1236  # TAILCALL
.LBB7_810:                              # %return
	xorq	%rax, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp122:
	.size	split_2, .Ltmp122-split_2
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI7_0:
	.quad	.LBB7_524
	.quad	.LBB7_513
	.quad	.LBB7_489
	.quad	.LBB7_476

	.text
	.align	16, 0x90
	.type	recog_26,@function
recog_26:                               # @recog_26
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp129:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp130:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp131:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp132:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp133:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp134:
	.cfi_def_cfa_offset 80
.Ltmp135:
	.cfi_offset %rbx, -48
.Ltmp136:
	.cfi_offset %r12, -40
.Ltmp137:
	.cfi_offset %r13, -32
.Ltmp138:
	.cfi_offset %r14, -24
.Ltmp139:
	.cfi_offset %r15, -16
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movq	8(%rdi), %rax
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	movl	(%r15), %eax
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$51, %rdx
	jg	.LBB8_3
# BB#1:                                 # %entry
	addq	$-2, %rdx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rdx
	cmpq	$16, %rdx
	ja	.LBB8_5
# BB#2:                                 # %entry
	jmpq	*.LJTI8_0(,%rdx,8)
.LBB8_589:                              # %L11569
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_592
# BB#590:                               # %if.then27
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB8_591
# BB#595:                               # %L11670
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$77, %rax
	jg	.LBB8_601
# BB#596:                               # %L11670
	cmpq	$61, %rax
	je	.LBB8_598
# BB#597:                               # %L11670
	cmpq	$63, %rax
	jne	.LBB8_591
.LBB8_598:                              # %L11669
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_591
# BB#599:                               # %if.then59
	movq	%r15, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	movzbl	(%r14), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_600
# BB#625:                               # %L410
	movq	8(%r14), %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_626
# BB#627:                               # %L411
	movq	16(%r14), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	movq	$61, %rax
	jne	.LBB8_1766
.LBB8_626:                              # %if.end305
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB8_591
.LBB8_3:                                # %entry
	cmpq	$52, %rdx
	jne	.LBB8_4
# BB#1623:                              # %L11579
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB8_5
# BB#1624:                              # %land.lhs.true4576
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#1625:                              # %L1237
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3407914, %rax          # imm = 0x34002A
	jne	.LBB8_5
# BB#1626:                              # %land.lhs.true4594
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$2, %rcx
	jne	.LBB8_5
# BB#1627:                              # %land.lhs.true4599
	movl	16(%rbx), %ecx
	cmpq	$12, %rcx
	jne	.LBB8_5
# BB#1628:                              # %L1238
	movq	8(%rax), %r13
	movzbl	2(%r13), %eax
	cmpq	$2, %rax
	je	.LBB8_1648
# BB#1629:                              # %L1238
	cmpq	$4, %rax
	jne	.LBB8_1630
# BB#1640:                              # %L11792
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB8_2432
# BB#1641:                              # %if.then4741
	movq	%r13, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB8_2433
# BB#1642:                              # %if.then4754
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1643:                              # %L1298
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_687
# BB#1644:                              # %if.then4783
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB8_687
# BB#1645:                              # %L1300
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_687
# BB#1646:                              # %L1301
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_687
# BB#1647:                              # %land.lhs.true4837
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$190, %rax
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_4:                                # %entry
	cmpq	$56, %rdx
	jne	.LBB8_5
# BB#1684:                              # %L11584
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$61, %rax
	jne	.LBB8_5
# BB#1685:                              # %land.lhs.true5196
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#1686:                              # %L3802
	movq	16(%r12), %r13
	movl	(%r13), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3670090, %rax          # imm = 0x38004A
	jne	.LBB8_5
# BB#1687:                              # %L3803
	movq	8(%r13), %r14
	movl	(%r14), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-2, %rdx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rdx
	cmpq	$3, %rdx
	ja	.LBB8_5
# BB#1688:                              # %L3803
	jmpq	*.LJTI8_1(,%rdx,8)
.LBB8_1756:                             # %L11800
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$77, %rax
	jne	.LBB8_5
# BB#1757:                              # %L3911
	movq	8(%r14), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB8_2442
# BB#1758:                              # %if.then5935
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1760
# BB#1759:                              # %land.lhs.true5947
	cmpq	$0, 8(%rax)
	je	.LBB8_1761
.LBB8_1760:                             # %if.end5953
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_407:                              # %L11568
	movq	$3, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %r14
	testq	%r14, %rax
	movq	%r12, %rbx
	movq	%r15, %r13
	je	.LBB8_410
# BB#408:                               # %if.then.i9086
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$196608, %rcx           # imm = 0x30000
	jne	.LBB8_409
# BB#414:                               # %L11634.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$120, %rax
	jg	.LBB8_434
# BB#415:                               # %L11634.i
	cmpq	$77, %rax
	jg	.LBB8_422
# BB#416:                               # %L11634.i
	cmpq	$61, %rax
	je	.LBB8_418
# BB#417:                               # %L11634.i
	cmpq	$63, %rax
	jne	.LBB8_409
.LBB8_418:                              # %L11633.i
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#419:                               # %if.then28.i
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_437
# BB#420:                               # %L367.i
	movq	8(%rbx), %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_421
# BB#480:                               # %L368.i
	movq	16(%rbx), %rbx
	movq	recog_data(%rip), %rsi
	movq	%rbx, %rdi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_482
# BB#481:                               # %land.lhs.true565.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	movq	$54, %rax
	jne	.LBB8_1766
.LBB8_482:                              # %L375.i
	movq	recog_data(%rip), %rsi
	movq	%rbx, %rdi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_421
# BB#483:                               # %land.lhs.true574.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	movq	$55, %rax
	je	.LBB8_1766
.LBB8_421:                              # %if.end550.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	jmp	.LBB8_437
.LBB8_24:                               # %L11565
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB8_25
# BB#44:                                # %L11592.i
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	push_operand
	testq	%rbx, %rax
	movq	%r12, %r13
	movq	%r15, %r14
	je	.LBB8_26
# BB#45:                                # %if.then13.i
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	general_no_elim_operand
	testq	%rbx, %rax
	je	.LBB8_2409
# BB#46:                                # %if.then21.i
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_47
# BB#48:                                # %L274.i
	movq	%rbx, %rsi
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB8_49
# BB#50:                                # %L275.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB8_49
# BB#51:                                # %land.lhs.true69.i
	movzbl	target_flags+3(%rip), %edx
	movq	$40, %rax
	testq	$2, %rdx
	je	.LBB8_1766
.LBB8_49:                               # %if.end54.i
	movq	8(%rcx), %r13
	movq	8(%r13), %r14
	movq	%rsi, %rbx
	jmp	.LBB8_26
.LBB8_748:                              # %L11570
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	push_operand
	movq	%rbx, %r14
	testq	%r14, %rax
	je	.LBB8_753
# BB#749:                               # %if.then1436
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_no_elim_operand
	testq	%r14, %rax
	je	.LBB8_752
# BB#750:                               # %if.then1454
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_751
# BB#764:                               # %L520
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB8_751
# BB#765:                               # %L521
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB8_751
# BB#766:                               # %land.lhs.true1505
	movzbl	target_flags+3(%rip), %edx
	movq	$78, %rax
	testq	$2, %rdx
	jne	.LBB8_1766
.LBB8_751:                              # %if.end1469
	movq	8(%rcx), %r12
.LBB8_752:                              # %if.end1456
	movq	8(%r12), %r15
.LBB8_753:                              # %L11571
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_756
# BB#754:                               # %if.then1441
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB8_755
# BB#767:                               # %L11696
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rcx
	movq	16(%rcx), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$120, %rcx
	jg	.LBB8_781
# BB#768:                               # %L11696
	addq	$-66, %rcx
	andq	%r14, %rcx
	movq	%r14, %r13
	cmpq	$25, %rcx
	ja	.LBB8_950
# BB#769:                               # %L11696
	jmpq	*.LJTI8_2(,%rcx,8)
.LBB8_770:                              # %L539.i
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB8_950
# BB#771:                               # %land.lhs.true24.i
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB8_950
# BB#772:                               # %L540.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_950
# BB#773:                               # %L541.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB8_950
# BB#774:                               # %land.lhs.true49.i
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB8_950
# BB#775:                               # %L542.i
	movq	16(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327755, %rcx           # imm = 0x5004B
	jne	.LBB8_950
# BB#776:                               # %L543.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB8_950
# BB#777:                               # %land.lhs.true80.i
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB8_950
# BB#778:                               # %L544.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_950
# BB#779:                               # %land.lhs.true93.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_950
# BB#780:                               # %land.lhs.true97.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$80, %rax
	testq	$2, %rcx
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_1656:                             # %L11583
	movq	$6, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %rsi
	testq	%rsi, %rax
	je	.LBB8_5
# BB#1657:                              # %if.then4963
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$393294, %rax           # imm = 0x6004E
	jne	.LBB8_1658
# BB#1659:                              # %L2237
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$393216, %rdx           # imm = 0x60000
	jne	.LBB8_1660
# BB#1661:                              # %L11794
	movq	%rsi, %r15
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	jne	.LBB8_1662
# BB#1674:                              # %L2274
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1676
# BB#1675:                              # %if.then5103
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393336, %rcx           # imm = 0x60078
	jne	.LBB8_1676
# BB#1677:                              # %L2276
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2437
# BB#1678:                              # %if.then5130
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_763
# BB#1679:                              # %L2278
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_763
# BB#1680:                              # %land.lhs.true5165
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_763
# BB#1681:                              # %land.lhs.true5170
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_763
# BB#1682:                              # %land.lhs.true5173
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$258, %rax              # imm = 0x102
	jne	.LBB8_1766
# BB#1683:                              # %lor.lhs.false5178
	movzbl	(%rbx), %edx
	cmpq	$66, %rdx
	jne	.LBB8_1766
	jmp	.LBB8_763
.LBB8_1266:                             # %L11573
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %r14
	testq	%r14, %rax
	je	.LBB8_1269
# BB#1267:                              # %if.then1683
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB8_1268
# BB#1278:                              # %L11746
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$72, %rax
	jne	.LBB8_1279
# BB#1282:                              # %L7083
	movq	8(%r13), %r15
	movzbl	(%r15), %eax
	cmpq	$105, %rax
	jne	.LBB8_1283
# BB#1310:                              # %L7176
	movq	%r14, %rbx
	movq	8(%r15), %r14
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB8_1285
# BB#1311:                              # %L11749
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_1316
# BB#1312:                              # %if.then1971
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1315
# BB#1313:                              # %if.then1987
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1314
# BB#1322:                              # %L7179
	movq	24(%r13), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1314
# BB#1323:                              # %L7180
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1324
# BB#1325:                              # %L7181
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1324
# BB#1326:                              # %land.lhs.true2056
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1324
# BB#1327:                              # %land.lhs.true2061
	movl	target_flags(%rip), %edx
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB8_1324
# BB#1328:                              # %land.lhs.true2061
	andq	$16, %rdx
	movq	$629, %rax              # imm = 0x275
	testq	%rbx, %rdx
	jne	.LBB8_1766
.LBB8_1324:                             # %if.end2030
	movq	8(%rcx), %r12
	movq	16(%r12), %r13
.LBB8_1314:                             # %if.end2000
	movq	8(%r13), %r15
.LBB8_1315:                             # %if.end1989
	movq	8(%r15), %r14
.LBB8_1316:                             # %L11750
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1285
# BB#1317:                              # %if.then1976
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1285
# BB#1318:                              # %if.then2088
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	movq	%rbx, %r14
	je	.LBB8_1268
# BB#1319:                              # %L7198
	movq	24(%r13), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_1268
# BB#1320:                              # %L7199
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1321
# BB#1329:                              # %L7200
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1321
# BB#1330:                              # %land.lhs.true2145
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1321
# BB#1331:                              # %land.lhs.true2150
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB8_1321
# BB#1332:                              # %land.lhs.true2150
	andq	$16, %rax
	testq	%r14, %rax
	jne	.LBB8_1321
# BB#1333:                              # %land.lhs.true2156
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$630, %rax              # imm = 0x276
	jne	.LBB8_1766
# BB#1334:                              # %lor.lhs.false2161
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB8_1766
.LBB8_1321:                             # %if.end2125
	movq	8(%rcx), %r12
	jmp	.LBB8_1268
.LBB8_1412:                             # %L11574
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %r14
	testq	%r14, %rax
	je	.LBB8_1415
# BB#1413:                              # %if.then2899
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$1048576, %rcx          # imm = 0x100000
	jne	.LBB8_1414
# BB#1424:                              # %L11762
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$72, %rax
	jne	.LBB8_1425
# BB#1428:                              # %L7129
	movq	8(%r13), %r15
	movzbl	(%r15), %eax
	cmpq	$105, %rax
	jne	.LBB8_1429
# BB#1457:                              # %L7222
	movq	%r14, %rbx
	movq	8(%r15), %r14
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB8_1431
# BB#1458:                              # %L11765
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_1463
# BB#1459:                              # %if.then3193
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1462
# BB#1460:                              # %if.then3209
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1461
# BB#1469:                              # %L7225
	movq	24(%r13), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1461
# BB#1470:                              # %L7226
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1471
# BB#1472:                              # %L7227
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1471
# BB#1473:                              # %land.lhs.true3278
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1471
# BB#1474:                              # %land.lhs.true3283
	movl	target_flags(%rip), %edx
	testq	$262144, %rdx           # imm = 0x40000
	je	.LBB8_1471
# BB#1475:                              # %land.lhs.true3286
	movzbl	ix86_fpmath(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1471
# BB#1476:                              # %land.lhs.true3286
	andq	$16, %rdx
	movq	$632, %rax              # imm = 0x278
	testq	%rbx, %rdx
	jne	.LBB8_1766
.LBB8_1471:                             # %if.end3252
	movq	8(%rcx), %r12
	movq	16(%r12), %r13
.LBB8_1461:                             # %if.end3222
	movq	8(%r13), %r15
.LBB8_1462:                             # %if.end3211
	movq	8(%r15), %r14
.LBB8_1463:                             # %L11766
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1431
# BB#1464:                              # %if.then3198
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1431
# BB#1465:                              # %if.then3313
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	movq	%rbx, %r14
	je	.LBB8_1414
# BB#1466:                              # %L7244
	movq	24(%r13), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_1414
# BB#1467:                              # %L7245
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1468
# BB#1477:                              # %L7246
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1468
# BB#1478:                              # %land.lhs.true3370
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1468
# BB#1479:                              # %land.lhs.true3375
	movl	target_flags(%rip), %eax
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB8_1468
# BB#1480:                              # %land.lhs.true3378
	movl	ix86_fpmath(%rip), %edx
	testq	$2, %rdx
	je	.LBB8_1468
# BB#1481:                              # %land.lhs.true3378
	andq	$16, %rax
	testq	%r14, %rax
	jne	.LBB8_1468
# BB#1482:                              # %land.lhs.true3384
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$633, %rax              # imm = 0x279
	jne	.LBB8_1766
# BB#1483:                              # %lor.lhs.false3389
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB8_1766
.LBB8_1468:                             # %if.end3350
	movq	8(%rcx), %r12
	jmp	.LBB8_1414
.LBB8_1571:                             # %L11575
	movq	$17, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %r14
	testq	%r14, %rax
	je	.LBB8_1576
# BB#1572:                              # %if.then4141
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1575
# BB#1573:                              # %if.then4154
	movq	%r14, %r13
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	movzbl	(%r14), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_1574
# BB#1579:                              # %L669
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB8_1580
# BB#1581:                              # %L670
	movq	16(%r14), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	$105, %rax
	jne	.LBB8_1766
.LBB8_1580:                             # %if.end4185
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1574:                             # %if.end4169
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	movq	%r13, %r14
	jmp	.LBB8_1576
.LBB8_1597:                             # %L11576
	movq	$18, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movq	%rbx, %r14
	testq	%r14, %rax
	je	.LBB8_1602
# BB#1598:                              # %if.then4361
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1601
# BB#1599:                              # %if.then4374
	movq	%r14, %r13
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	movzbl	(%r14), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_1600
# BB#1605:                              # %L676
	movq	8(%r14), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB8_1606
# BB#1607:                              # %L677
	movq	16(%r14), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	$106, %rax
	jne	.LBB8_1766
.LBB8_1606:                             # %if.end4405
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1600:                             # %if.end4389
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	movq	%r13, %r14
	jmp	.LBB8_1602
.LBB8_25:                               # %L11565
	cmpq	$133, %rax
	movq	%r12, %r13
	movq	%r15, %r14
	jne	.LBB8_26
# BB#52:                                # %L1769.i
	movq	8(%r15), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	ext_register_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#53:                                # %if.then86.i
	movq	%r14, recog_data(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#54:                                # %land.lhs.true95.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#55:                                # %L1771.i
	movq	24(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#56:                                # %land.lhs.true107.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#57:                                # %L1772.i
	movq	%rbx, %r14
	movq	16(%r12), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB8_5
# BB#58:                                # %L11593.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$85, %rax
	je	.LBB8_121
# BB#59:                                # %L11593.i
	cmpq	$83, %rax
	jne	.LBB8_60
# BB#87:                                # %L3062.i
	movq	8(%rbx), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	(%rax), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB8_5
# BB#88:                                # %L3063.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	8(%rax), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	ext_register_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#89:                                # %if.then363.i
	movq	%r13, recog_data+8(%rip)
	movq	(%rsp), %rax            # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#90:                                # %land.lhs.true372.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#91:                                # %L3065.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#92:                                # %land.lhs.true385.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#93:                                # %L3114.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB8_94
# BB#99:                                # %L11596.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB8_100
# BB#113:                               # %L3171.i
	movq	8(%rbx), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	ext_register_operand
	testq	%r14, %rax
	je	.LBB8_94
# BB#114:                               # %if.then542.i
	movq	%r13, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_94
# BB#115:                               # %land.lhs.true551.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_94
# BB#116:                               # %L3173.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_94
# BB#117:                               # %land.lhs.true564.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_94
# BB#118:                               # %L3174.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_106
# BB#119:                               # %L3175.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_106
# BB#120:                               # %land.lhs.true603.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$306, %rax              # imm = 0x132
	je	.LBB8_1766
	jmp	.LBB8_106
.LBB8_1658:                             # %if.end4978
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_755:                              # %if.end1526
	movq	8(%r12), %r15
	jmp	.LBB8_756
.LBB8_1575:                             # %if.end4156
	movq	8(%r12), %r15
.LBB8_1576:                             # %L11589
	movq	$17, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#1577:                              # %if.then4146
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1114112, %rdx          # imm = 0x110000
	jne	.LBB8_1578
# BB#1582:                              # %L11787
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB8_1583
# BB#1585:                              # %L4032
	movq	8(%rax), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_2426
# BB#1586:                              # %if.then4236
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#1587:                              # %L4034
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#1588:                              # %land.lhs.true4271
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#1589:                              # %land.lhs.true4276
	movl	target_flags(%rip), %ecx
	andq	$33554433, %rcx         # imm = 0x2000001
	cmpq	$1, %rcx
	jne	.LBB8_666
# BB#1590:                              # %land.lhs.true4282
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$17, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$363, %rax              # imm = 0x16B
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_1578:                             # %if.end4218
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1601:                             # %if.end4376
	movq	8(%r12), %r15
.LBB8_1602:                             # %L11590
	movq	$18, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#1603:                              # %if.then4366
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1179648, %rdx          # imm = 0x120000
	jne	.LBB8_1604
# BB#1608:                              # %L11789
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB8_1609
# BB#1611:                              # %L4044
	movq	8(%rax), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_2428
# BB#1612:                              # %if.then4456
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#1613:                              # %L4046
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#1614:                              # %land.lhs.true4491
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#1615:                              # %land.lhs.true4496
	movzbl	target_flags(%rip), %ecx
	testq	$1, %rcx
	je	.LBB8_666
# BB#1616:                              # %land.lhs.true4499
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$18, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$364, %rax              # imm = 0x16C
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_1604:                             # %if.end4438
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_601:                              # %L11670
	cmpq	$78, %rax
	je	.LBB8_610
# BB#602:                               # %L11670
	cmpq	$79, %rax
	jne	.LBB8_603
# BB#619:                               # %L2463
	movq	8(%r15), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_591
# BB#620:                               # %if.then145
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_591
# BB#621:                               # %if.then156
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_613
# BB#622:                               # %L2466
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_613
# BB#623:                               # %land.lhs.true191
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_613
# BB#624:                               # %land.lhs.true196
	movl	ix86_cpu(%rip), %ecx
	movl	x86_qimode_math(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	testq	%rbx, %rsi
	movq	$266, %rax              # imm = 0x10A
	jne	.LBB8_1766
	jmp	.LBB8_613
.LBB8_434:                              # %L11634.i
	cmpq	$121, %rax
	jne	.LBB8_409
# BB#435:                               # %L699.i
	movq	8(%r13), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#436:                               # %if.then39.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_437
# BB#438:                               # %L701.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB8_437
# BB#439:                               # %L11637.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB8_437
# BB#440:                               # %L11639.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_437
# BB#441:                               # %L11641.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_zero_extend_with_and(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rax
	jne	.LBB8_443
# BB#442:                               # %L11641.i
	movq	%rdx, %rax
.LBB8_443:                              # %L11641.i
	movl	optimize_size(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB8_445
# BB#444:                               # %L11641.i
	movq	%rdx, %rcx
.LBB8_445:                              # %L11641.i
	orq	%rcx, %rax
	addq	$109, %rax
	jmp	.LBB8_1766
.LBB8_1660:                             # %if.end4990
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1279:                             # %if.end1717
	movq	$15, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1268
# BB#1280:                              # %if.then1720
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_1281
# BB#1335:                              # %L607
	movq	8(%rbx), %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_1336
# BB#1337:                              # %L608
	movq	16(%rbx), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_1336
# BB#1338:                              # %land.lhs.true2216
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	movq	$91, %rax
	jne	.LBB8_1766
# BB#1339:                              # %lor.lhs.false2218
	movzbl	target_flags+2(%rip), %ecx
	testq	$5, %rcx
	je	.LBB8_1766
.LBB8_1336:                             # %if.end2201
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB8_1268
.LBB8_1425:                             # %if.end2933
	movq	$16, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1414
# BB#1426:                              # %if.then2936
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_1427
# BB#1484:                              # %L630
	movq	8(%rbx), %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_1485
# BB#1486:                              # %L631
	movq	16(%rbx), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_1485
# BB#1487:                              # %land.lhs.true3444
	movl	reload_completed(%rip), %eax
	testq	%rax, %rax
	movq	$96, %rax
	jne	.LBB8_1766
# BB#1488:                              # %lor.lhs.false3446
	movzbl	target_flags+2(%rip), %ecx
	testq	$4, %rcx
	je	.LBB8_1766
.LBB8_1485:                             # %if.end3429
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB8_1414
.LBB8_781:                              # %L11696
	movq	%r14, %r13
	cmpq	$121, %rcx
	jne	.LBB8_950
# BB#782:                               # %L757.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#783:                               # %if.then104.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#784:                               # %L759.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#785:                               # %land.lhs.true128.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#786:                               # %land.lhs.true133.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$115, %rax
	testq	$2, %rcx
	jne	.LBB8_950
	jmp	.LBB8_1766
.LBB8_1583:                             # %L11787
	cmpq	$129, %rcx
	jne	.LBB8_1584
# BB#1591:                              # %L4217
	movq	8(%rax), %rbx
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_2427
# BB#1592:                              # %if.then4300
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#1593:                              # %L4219
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#1594:                              # %land.lhs.true4335
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#1595:                              # %land.lhs.true4340
	movl	target_flags(%rip), %ecx
	andq	$33554433, %rcx         # imm = 0x2000001
	cmpq	$1, %rcx
	jne	.LBB8_666
# BB#1596:                              # %land.lhs.true4346
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$17, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$382, %rax              # imm = 0x17E
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_1609:                             # %L11789
	cmpq	$129, %rcx
	jne	.LBB8_1610
# BB#1617:                              # %L4229
	movq	8(%rax), %rbx
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_2429
# BB#1618:                              # %if.then4517
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#1619:                              # %L4231
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#1620:                              # %land.lhs.true4552
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#1621:                              # %land.lhs.true4557
	movzbl	target_flags(%rip), %ecx
	testq	$1, %rcx
	je	.LBB8_666
# BB#1622:                              # %land.lhs.true4560
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$18, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$383, %rax              # imm = 0x17F
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_2409:                             # %if.end23.i
	movq	8(%r12), %r14
	movq	%r12, %r13
	jmp	.LBB8_26
.LBB8_1648:                             # %L11793
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB8_2434
# BB#1649:                              # %if.then4852
	movq	%r13, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB8_2435
# BB#1650:                              # %if.then4865
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1651:                              # %L1309
	movq	8(%rbx), %r15
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_687
# BB#1652:                              # %if.then4894
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131147, %rax           # imm = 0x2004B
	jne	.LBB8_687
# BB#1653:                              # %L1311
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_687
# BB#1654:                              # %L1312
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_687
# BB#1655:                              # %land.lhs.true4948
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$191, %rax
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_1630:                             # %L1238
	cmpq	$5, %rax
	jne	.LBB8_5
# BB#1631:                              # %L11791
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB8_2430
# BB#1632:                              # %if.then4627
	movq	%r13, recog_data+8(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r14, %rax
	je	.LBB8_2431
# BB#1633:                              # %if.then4640
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1634:                              # %L1241
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_687
# BB#1635:                              # %if.then4669
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB8_687
# BB#1636:                              # %L1243
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_687
# BB#1637:                              # %L1244
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_687
# BB#1638:                              # %land.lhs.true4723
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_687
# BB#1639:                              # %land.lhs.true4726
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$187, %rax
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_47:                               # %if.end35.i
	movq	8(%rcx), %r13
	movq	8(%r13), %r14
.LBB8_26:                               # %L11566.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_29
# BB#27:                                # %if.then.i
	movq	%r14, recog_data(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB8_28
# BB#136:                               # %L11598.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rcx
	movq	16(%rcx), %rbx
	movzbl	(%rbx), %ecx
	addq	$-66, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$25, %rcx
	ja	.LBB8_28
# BB#137:                               # %L11598.i
	jmpq	*.LJTI8_7(,%rcx,8)
.LBB8_138:                              # %L293.i.i
	movq	8(%rbx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB8_28
# BB#139:                               # %land.lhs.true23.i.i
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB8_28
# BB#140:                               # %L294.i.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_28
# BB#141:                               # %L295.i.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB8_28
# BB#142:                               # %land.lhs.true48.i.i
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB8_28
# BB#143:                               # %L296.i.i
	movq	16(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262219, %rcx           # imm = 0x4004B
	jne	.LBB8_28
# BB#144:                               # %L297.i.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB8_28
# BB#145:                               # %land.lhs.true79.i.i
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB8_28
# BB#146:                               # %L298.i.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_28
# BB#147:                               # %land.lhs.true92.i.i
	movq	8(%rax), %rax
	cmpq	$4, %rax
	jne	.LBB8_28
# BB#148:                               # %land.lhs.true96.i.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$42, %rax
	testq	$2, %rcx
	jne	.LBB8_28
	jmp	.LBB8_1766
.LBB8_1746:                             # %L11799
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$77, %rax
	jne	.LBB8_5
# BB#1747:                              # %L3888
	movq	8(%r14), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB8_2441
# BB#1748:                              # %if.then5826
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1750
# BB#1749:                              # %land.lhs.true5838
	cmpq	$0, 8(%rax)
	je	.LBB8_1751
.LBB8_1750:                             # %if.end5844
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1725:                             # %L11797
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$77, %rax
	jne	.LBB8_1726
# BB#1731:                              # %L3846
	movq	8(%r14), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_2440
# BB#1732:                              # %if.then5617
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1734
# BB#1733:                              # %land.lhs.true5629
	cmpq	$0, 8(%rax)
	je	.LBB8_1735
.LBB8_1734:                             # %if.end5635
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1689:                             # %L11796
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$90, %rax
	jne	.LBB8_1690
# BB#1701:                              # %L3857
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327757, %rcx           # imm = 0x5004D
	jne	.LBB8_5
# BB#1702:                              # %L3858
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327767, %rax           # imm = 0x50057
	jne	.LBB8_5
# BB#1703:                              # %L3859
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rax
	je	.LBB8_2439
# BB#1704:                              # %if.then5384
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1706
# BB#1705:                              # %land.lhs.true5396
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB8_1706
# BB#1707:                              # %L3861
	movq	%rdx, %r15
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1709
# BB#1708:                              # %land.lhs.true5412
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB8_1709
# BB#1710:                              # %L3862
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1712
# BB#1711:                              # %land.lhs.true5428
	cmpq	$0, 8(%rax)
	je	.LBB8_1713
.LBB8_1712:                             # %if.end5434
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_422:                              # %L11634.i
	cmpq	$78, %rax
	jne	.LBB8_423
# BB#446:                               # %L2173.i
	movq	8(%r13), %rbx
	movl	(%rbx), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$196608, %rax           # imm = 0x30000
	jne	.LBB8_409
# BB#447:                               # %L11644.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$119, %rcx
	jg	.LBB8_454
# BB#448:                               # %L11644.i
	addq	$-61, %rcx
	andq	%r14, %rcx
	cmpq	$5, %rcx
	ja	.LBB8_409
# BB#449:                               # %L11644.i
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$37, %rax
	je	.LBB8_409
# BB#450:                               # %L11643.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#451:                               # %if.then147.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#452:                               # %if.then350.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_453
# BB#475:                               # %L2176.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_453
# BB#476:                               # %land.lhs.true385.i9113
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_453
# BB#477:                               # %land.lhs.true390.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$252, %rax
	jne	.LBB8_1766
# BB#478:                               # %lor.lhs.false395.i
	movzbl	(%rbx), %edx
	cmpq	$66, %rdx
	jne	.LBB8_1766
.LBB8_453:                              # %if.end365.i
	movq	8(%rcx), %rbx
	movq	8(%rbx), %r13
	jmp	.LBB8_410
.LBB8_1662:                             # %L11794
	cmpq	$121, %rcx
	jne	.LBB8_1663
# BB#1664:                              # %L2238
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1666
# BB#1665:                              # %if.then5008
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393337, %rcx           # imm = 0x60079
	jne	.LBB8_1666
# BB#1667:                              # %L2240
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2436
# BB#1668:                              # %if.then5035
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_763
# BB#1669:                              # %L2242
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_763
# BB#1670:                              # %land.lhs.true5070
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_763
# BB#1671:                              # %land.lhs.true5075
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_763
# BB#1672:                              # %land.lhs.true5078
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$256, %rax              # imm = 0x100
	jne	.LBB8_1766
# BB#1673:                              # %lor.lhs.false5083
	movzbl	(%rbx), %edx
	cmpq	$66, %rdx
	jne	.LBB8_1766
	jmp	.LBB8_763
.LBB8_1283:                             # %L7083
	cmpq	$107, %rax
	jne	.LBB8_1268
# BB#1284:                              # %L7084
	movq	%r14, %rbx
	movq	8(%r15), %r14
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$983040, %rax           # imm = 0xF0000
	jne	.LBB8_1285
# BB#1286:                              # %L11747
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_1291
# BB#1287:                              # %if.then1752
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1290
# BB#1288:                              # %if.then1768
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1289
# BB#1297:                              # %L7087
	movq	24(%r13), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1289
# BB#1298:                              # %L7088
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1299
# BB#1300:                              # %L7089
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1299
# BB#1301:                              # %land.lhs.true1837
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1299
# BB#1302:                              # %land.lhs.true1842
	movl	target_flags(%rip), %edx
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB8_1299
# BB#1303:                              # %land.lhs.true1842
	andq	$16, %rdx
	movq	$623, %rax              # imm = 0x26F
	testq	%rbx, %rdx
	jne	.LBB8_1766
.LBB8_1299:                             # %if.end1811
	movq	8(%rcx), %r12
	movq	16(%r12), %r13
.LBB8_1289:                             # %if.end1781
	movq	8(%r13), %r15
.LBB8_1290:                             # %if.end1770
	movq	8(%r15), %r14
.LBB8_1291:                             # %L11748
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1285
# BB#1292:                              # %if.then1757
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1285
# BB#1293:                              # %if.then1869
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1285
# BB#1294:                              # %L7106
	movq	24(%r13), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1285
# BB#1295:                              # %L7107
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1296
# BB#1304:                              # %L7108
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1296
# BB#1305:                              # %land.lhs.true1926
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1296
# BB#1306:                              # %land.lhs.true1931
	movl	target_flags(%rip), %eax
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB8_1296
# BB#1307:                              # %land.lhs.true1931
	andq	$16, %rax
	testq	%rbx, %rax
	jne	.LBB8_1296
# BB#1308:                              # %land.lhs.true1937
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$624, %rax              # imm = 0x270
	jne	.LBB8_1766
# BB#1309:                              # %lor.lhs.false1942
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB8_1766
.LBB8_1296:                             # %if.end1906
	movq	8(%rcx), %r12
.LBB8_1285:                             # %if.end1746
	movq	8(%r12), %r15
	movq	%rbx, %r14
	jmp	.LBB8_1269
.LBB8_1429:                             # %L7129
	cmpq	$107, %rax
	jne	.LBB8_1414
# BB#1430:                              # %L7130
	movq	%r14, %rbx
	movq	8(%r15), %r14
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB8_1431
# BB#1432:                              # %L11763
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_1437
# BB#1433:                              # %if.then2968
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1436
# BB#1434:                              # %if.then2984
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1435
# BB#1443:                              # %L7133
	movq	24(%r13), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1435
# BB#1444:                              # %L7134
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1445
# BB#1446:                              # %L7135
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1445
# BB#1447:                              # %land.lhs.true3053
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1445
# BB#1448:                              # %land.lhs.true3058
	movl	target_flags(%rip), %eax
	andq	$262160, %rax           # imm = 0x40010
	cmpq	$262160, %rax           # imm = 0x40010
	jne	.LBB8_1445
# BB#1449:                              # %land.lhs.true3064
	movzbl	ix86_fpmath(%rip), %edx
	movq	$626, %rax              # imm = 0x272
	testq	$2, %rdx
	jne	.LBB8_1766
.LBB8_1445:                             # %if.end3027
	movq	8(%rcx), %r12
	movq	16(%r12), %r13
.LBB8_1435:                             # %if.end2997
	movq	8(%r13), %r15
.LBB8_1436:                             # %if.end2986
	movq	8(%r15), %r14
.LBB8_1437:                             # %L11764
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1431
# BB#1438:                              # %if.then2973
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1431
# BB#1439:                              # %if.then3088
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1431
# BB#1440:                              # %L7152
	movq	24(%r13), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_1431
# BB#1441:                              # %L7153
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1442
# BB#1450:                              # %L7154
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1442
# BB#1451:                              # %land.lhs.true3145
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1442
# BB#1452:                              # %land.lhs.true3150
	movl	target_flags(%rip), %eax
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB8_1442
# BB#1453:                              # %land.lhs.true3153
	movl	ix86_fpmath(%rip), %edx
	testq	$2, %rdx
	je	.LBB8_1442
# BB#1454:                              # %land.lhs.true3153
	andq	$16, %rax
	testq	%rbx, %rax
	jne	.LBB8_1442
# BB#1455:                              # %land.lhs.true3159
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$627, %rax              # imm = 0x273
	jne	.LBB8_1766
# BB#1456:                              # %lor.lhs.false3164
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB8_1766
.LBB8_1442:                             # %if.end3125
	movq	8(%rcx), %r12
.LBB8_1431:                             # %if.end2962
	movq	8(%r12), %r15
	movq	%rbx, %r14
	jmp	.LBB8_1415
.LBB8_1584:                             # %sw.epilog4227
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1610:                             # %sw.epilog4447
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2426:                             # %if.end4238
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2428:                             # %if.end4458
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_610:                              # %L2187
	movq	8(%r15), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_591
# BB#611:                               # %if.then70
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_591
# BB#612:                               # %if.then81
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_613
# BB#614:                               # %L2190
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_613
# BB#615:                               # %land.lhs.true115
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_613
# BB#616:                               # %land.lhs.true119
	movl	ix86_cpu(%rip), %ecx
	movl	x86_qimode_math(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	testq	%rbx, %rsi
	je	.LBB8_613
# BB#617:                               # %land.lhs.true121
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$253, %rax
	jne	.LBB8_1766
# BB#618:                               # %lor.lhs.false
	movzbl	(%r14), %ecx
	cmpq	$66, %rcx
	jne	.LBB8_1766
	jmp	.LBB8_613
.LBB8_603:                              # %L11670
	cmpq	$81, %rax
	jne	.LBB8_591
# BB#604:                               # %L2477
	movq	8(%r15), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_591
# BB#605:                               # %if.then215
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_591
# BB#606:                               # %if.then226
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_613
# BB#607:                               # %L2480
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_613
# BB#608:                               # %land.lhs.true261
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_613
# BB#609:                               # %land.lhs.true266
	movl	ix86_cpu(%rip), %eax
	movl	x86_qimode_math(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rbx, %rdi
	movq	$267, %rax              # imm = 0x10B
	jne	.LBB8_1766
.LBB8_613:                              # %if.end96
	movq	8(%rdx), %r12
	jmp	.LBB8_591
.LBB8_1676:                             # %if.end5121
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1281:                             # %if.end2185
	movq	8(%rax), %r12
.LBB8_1268:                             # %if.end1709
	movq	8(%r12), %r15
.LBB8_1269:                             # %L11577
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_1272
# BB#1270:                              # %if.then1688
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB8_1271
# BB#1340:                              # %L11751
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB8_1341
# BB#1365:                              # %L3942
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_1271
# BB#1366:                              # %if.then2502
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB8_1354
# BB#1367:                              # %L3944
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_1360
# BB#1368:                              # %if.then2531
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$5, %rax
	je	.LBB8_1360
# BB#1369:                              # %land.lhs.true2544
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r14, %rcx
	jne	.LBB8_1372
# BB#1370:                              # %lor.lhs.false2548
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1360
# BB#1371:                              # %land.lhs.true2552
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1360
.LBB8_1372:                             # %land.lhs.true2556
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_1360
# BB#1373:                              # %if.then2558
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$356, %rax              # imm = 0x164
	jmp	.LBB8_1766
.LBB8_1341:                             # %L11751
	cmpq	$124, %rcx
	jne	.LBB8_1271
# BB#1342:                              # %L893
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	je	.LBB8_1349
# BB#1343:                              # %L893
	cmpq	$17, %rax
	jne	.LBB8_1344
# BB#1361:                              # %L11755
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1271
# BB#1362:                              # %if.then2388
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1354
# BB#1363:                              # %L926
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1360
# BB#1364:                              # %if.then2417
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$144, %rax
	je	.LBB8_1766
	jmp	.LBB8_1360
.LBB8_1427:                             # %if.end3413
	movq	8(%rax), %r12
.LBB8_1414:                             # %if.end2925
	movq	8(%r12), %r15
.LBB8_1415:                             # %L11578
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_1418
# BB#1416:                              # %if.then2904
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB8_1417
# BB#1489:                              # %L11767
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB8_1490
# BB#1503:                              # %L3983
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_1417
# BB#1504:                              # %if.then3609
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB8_1499
# BB#1505:                              # %L3985
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_1513
# BB#1506:                              # %if.then3638
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB8_1512
# BB#1507:                              # %land.lhs.true3659
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r14, %rcx
	jne	.LBB8_1510
# BB#1508:                              # %lor.lhs.false3663
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1512
# BB#1509:                              # %land.lhs.true3667
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1512
.LBB8_1510:                             # %land.lhs.true3671
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_1512
# BB#1511:                              # %if.then3673
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$359, %rax              # imm = 0x167
	jmp	.LBB8_1766
.LBB8_1490:                             # %L11767
	cmpq	$124, %rcx
	jne	.LBB8_1417
# BB#1491:                              # %L950
	movq	8(%rax), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$17, %rax
	jne	.LBB8_1492
# BB#1497:                              # %L11769
	movq	$17, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1417
# BB#1498:                              # %if.then3495
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1499
# BB#1500:                              # %L952
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1502
# BB#1501:                              # %if.then3524
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$1, %rax
	movq	$148, %rax
	je	.LBB8_1766
	jmp	.LBB8_1502
.LBB8_1726:                             # %if.end5603
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_1730
# BB#1727:                              # %if.then5606
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1729
# BB#1728:                              # %land.lhs.true5719
	cmpq	$0, 8(%rax)
	je	.LBB8_1740
.LBB8_1729:                             # %if.end5725
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1690:                             # %L11796
	cmpq	$77, %rax
	jne	.LBB8_5
# BB#1691:                              # %L3804
	movq	8(%r14), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB8_2438
# BB#1692:                              # %if.then5248
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1694
# BB#1693:                              # %land.lhs.true5260
	cmpq	$0, 8(%rax)
	je	.LBB8_1695
.LBB8_1694:                             # %if.end5266
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2432:                             # %if.end4743
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2434:                             # %if.end4854
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_423:                              # %L11634.i
	cmpq	$79, %rax
	jne	.LBB8_409
# BB#424:                               # %L2658.i
	movq	8(%r13), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#425:                               # %if.then415.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#426:                               # %if.then426.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_437
# BB#427:                               # %L2661.i
	movq	%r14, %r13
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB8_479
# BB#428:                               # %if.then455.i
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196688, %rax           # imm = 0x30050
	jne	.LBB8_479
# BB#429:                               # %L2663.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_479
# BB#430:                               # %L2664.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_479
# BB#431:                               # %land.lhs.true509.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_himode_math(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rsi
	je	.LBB8_479
# BB#432:                               # %land.lhs.true509.i
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_479
# BB#433:                               # %if.then515.i
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$274, %rax              # imm = 0x112
	jmp	.LBB8_1766
.LBB8_437:                              # %if.end54.i9092
	movq	8(%rax), %rbx
	movq	8(%rbx), %r13
	jmp	.LBB8_410
.LBB8_1663:                             # %sw.epilog4999
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_600:                              # %if.end289
	movq	8(%rax), %r12
.LBB8_591:                              # %if.end43
	movq	8(%r12), %r15
.LBB8_592:                              # %L11581
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#593:                               # %if.then32
	movq	%rbx, %r13
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB8_594
# BB#628:                               # %L11673
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-75, %rax
	andq	%r13, %rax
	cmpq	$16, %rax
	ja	.LBB8_630
# BB#629:                               # %L11673
	jmpq	*.LJTI8_5(,%rax,8)
.LBB8_631:                              # %L1679
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2410
# BB#632:                               # %if.then365
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB8_2410
# BB#633:                               # %if.then376
	movq	%r13, %r15
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_634
# BB#635:                               # %L1682
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB8_634
# BB#636:                               # %L11684
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB8_634
# BB#637:                               # %L11686
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_634
# BB#638:                               # %L11688
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r14, %rdx
	testq	%r15, %rdx
	jne	.LBB8_641
# BB#639:                               # %land.lhs.true447
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$221, %rax
	jne	.LBB8_1766
# BB#640:                               # %land.lhs.true447.L11689_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB8_641:                              # %L11689
	movq	%rax, %rcx
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r15, %rbx
	je	.LBB8_643
# BB#642:                               # %land.lhs.true455
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$222, %rax
	jne	.LBB8_1766
.LBB8_643:                              # %if.end459
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	jmp	.LBB8_634
.LBB8_594:                              # %if.end338
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_630:                              # %sw.epilog356
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1492:                             # %L950
	cmpq	$18, %rax
	jne	.LBB8_1417
# BB#1493:                              # %L11770
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1417
# BB#1494:                              # %if.then3552
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1499
# BB#1495:                              # %L965
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1502
# BB#1496:                              # %if.then3581
	movzbl	target_flags(%rip), %ecx
	movq	%rbx, recog_data+16(%rip)
	movq	$150, %rax
	testq	$1, %rcx
	jne	.LBB8_1766
	jmp	.LBB8_1502
.LBB8_1499:                             # %if.end3510
	movq	8(%rax), %r12
	jmp	.LBB8_1417
.LBB8_2427:                             # %if.end4302
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2429:                             # %if.end4519
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2433:                             # %if.end4756
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2435:                             # %if.end4867
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1666:                             # %if.end5026
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1349:                             # %L11753
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1352
# BB#1350:                              # %if.then2268
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1351
# BB#1355:                              # %L895
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1357
# BB#1356:                              # %if.then2305
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$262145, %rax           # imm = 0x40001
	cmpq	$1, %rax
	movq	$139, %rax
	je	.LBB8_1766
.LBB8_1357:                             # %if.end2325
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1351:                             # %if.end2288
	movq	8(%rax), %r12
	movq	16(%r12), %rax
	movq	8(%rax), %rbx
.LBB8_1352:                             # %L11754
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_1271
# BB#1353:                              # %if.then2273
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1354
# BB#1358:                              # %L903
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1360
# BB#1359:                              # %if.then2360
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$262145, %rax           # imm = 0x40001
	cmpq	$262145, %rax           # imm = 0x40001
	movq	$140, %rax
	je	.LBB8_1766
	jmp	.LBB8_1360
.LBB8_1344:                             # %L893
	cmpq	$18, %rax
	jne	.LBB8_1271
# BB#1345:                              # %L11756
	movq	$18, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1271
# BB#1346:                              # %if.then2445
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1354
# BB#1347:                              # %L939
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1360
# BB#1348:                              # %if.then2474
	movzbl	target_flags(%rip), %ecx
	movq	%rbx, recog_data+16(%rip)
	movq	$146, %rax
	testq	$1, %rcx
	jne	.LBB8_1766
.LBB8_1360:                             # %if.end2362
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB8_1271
.LBB8_1354:                             # %if.end2346
	movq	8(%rax), %r12
.LBB8_1271:                             # %if.end2239
	movq	8(%r12), %r15
.LBB8_1272:                             # %L11585
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1275
# BB#1273:                              # %if.then1693
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB8_1274
# BB#1374:                              # %L11757
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB8_1375
# BB#1381:                              # %L3921
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1274
# BB#1382:                              # %if.then2594
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1383
# BB#1384:                              # %L3923
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1383
# BB#1385:                              # %land.lhs.true2629
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_1383
# BB#1386:                              # %land.lhs.true2634
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$15, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$355, %rax              # imm = 0x163
	jne	.LBB8_1766
	jmp	.LBB8_1387
.LBB8_1375:                             # %L11757
	cmpq	$129, %rcx
	jne	.LBB8_1274
# BB#1376:                              # %L4106
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1274
# BB#1377:                              # %if.then2652
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1383
# BB#1378:                              # %L4108
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1383
# BB#1379:                              # %land.lhs.true2687
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_1383
# BB#1380:                              # %land.lhs.true2692
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$15, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$374, %rax              # imm = 0x176
	jne	.LBB8_1766
.LBB8_1387:                             # %land.lhs.true2634.if.end2638_crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB8_1274
.LBB8_1383:                             # %if.end2609
	movq	8(%rax), %r12
.LBB8_1274:                             # %if.end2576
	movq	8(%r12), %r15
.LBB8_1275:                             # %L11586
	movq	$15, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#1276:                              # %if.then1698
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB8_1277
# BB#1388:                              # %L11759
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB8_1389
# BB#1391:                              # %L3950
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_2422
# BB#1392:                              # %if.then2731
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#1393:                              # %L3952
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#1394:                              # %land.lhs.true2766
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#1395:                              # %land.lhs.true2771
	movl	target_flags(%rip), %ecx
	andq	$327681, %rcx           # imm = 0x50001
	cmpq	$1, %rcx
	jne	.LBB8_666
# BB#1396:                              # %land.lhs.true2777
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$15, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$357, %rax              # imm = 0x165
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_1277:                             # %if.end2713
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1389:                             # %L11759
	cmpq	$129, %rcx
	jne	.LBB8_1390
# BB#1397:                              # %L4127
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_2423
# BB#1398:                              # %if.then2795
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB8_1399
# BB#1405:                              # %L4129
	movq	8(%rax), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_687
# BB#1406:                              # %if.then2825
	movzbl	target_flags+2(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$5, %rax
	je	.LBB8_687
# BB#1407:                              # %land.lhs.true2838
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r14, %rcx
	jne	.LBB8_1410
# BB#1408:                              # %lor.lhs.false2842
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_687
# BB#1409:                              # %land.lhs.true2846
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_687
.LBB8_1410:                             # %land.lhs.true2850
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_687
# BB#1411:                              # %if.then2852
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$375, %rax              # imm = 0x177
	jmp	.LBB8_1766
.LBB8_1390:                             # %sw.epilog2722
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2422:                             # %if.end2733
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2423:                             # %if.end2797
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1399:                             # %if.then2795
	cmpq	$49, %rdx
	jne	.LBB8_763
# BB#1400:                              # %L4137
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_687
# BB#1401:                              # %land.lhs.true2873
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_687
# BB#1402:                              # %land.lhs.true2878
	movzbl	target_flags(%rip), %eax
	testq	$1, %rax
	je	.LBB8_687
# BB#1403:                              # %land.lhs.true2881
	movabsq	$recog_data, %rax
	movq	$129, %rdi
	movq	$15, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	je	.LBB8_687
# BB#1404:                              # %land.lhs.true2884
	movzbl	target_flags+2(%rip), %ecx
	movq	$376, %rax              # imm = 0x178
	testq	$5, %rcx
	jne	.LBB8_687
	jmp	.LBB8_1766
.LBB8_2430:                             # %if.end4629
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2442:                             # %if.end5937
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2441:                             # %if.end5828
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2440:                             # %if.end5619
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1512:                             # %if.end3674
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rbx
.LBB8_1513:                             # %L4002
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB8_1502
# BB#1514:                              # %if.then3643
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$33816576, %rax         # imm = 0x2040000
	jne	.LBB8_1502
# BB#1515:                              # %land.lhs.true3688
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r14, %rcx
	jne	.LBB8_1518
# BB#1516:                              # %lor.lhs.false3692
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1502
# BB#1517:                              # %land.lhs.true3696
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1502
.LBB8_1518:                             # %land.lhs.true3700
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_1502
# BB#1519:                              # %if.then3702
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$360, %rax              # imm = 0x168
	jmp	.LBB8_1766
.LBB8_1502:                             # %if.end3526
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
.LBB8_1417:                             # %if.end3467
	movq	8(%r12), %r15
.LBB8_1418:                             # %L11587
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1421
# BB#1419:                              # %if.then2909
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB8_1420
# BB#1520:                              # %L11771
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB8_1521
# BB#1527:                              # %L3962
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1420
# BB#1528:                              # %if.then3738
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1529
# BB#1530:                              # %L3964
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1529
# BB#1531:                              # %land.lhs.true3773
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_1529
# BB#1532:                              # %land.lhs.true3778
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$358, %rax              # imm = 0x166
	jne	.LBB8_1766
	jmp	.LBB8_1533
.LBB8_1521:                             # %L11771
	cmpq	$129, %rcx
	jne	.LBB8_1420
# BB#1522:                              # %L4147
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB8_1420
# BB#1523:                              # %if.then3796
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1529
# BB#1524:                              # %L4149
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1529
# BB#1525:                              # %land.lhs.true3831
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_1529
# BB#1526:                              # %land.lhs.true3836
	movabsq	$recog_data, %rdx
	movq	$129, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$377, %rax              # imm = 0x179
	jne	.LBB8_1766
.LBB8_1533:                             # %land.lhs.true3778.if.end3782_crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	jmp	.LBB8_1420
.LBB8_1529:                             # %if.end3753
	movq	8(%rax), %r12
.LBB8_1420:                             # %if.end3720
	movq	8(%r12), %r15
.LBB8_1421:                             # %L11588
	movq	$16, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#1422:                              # %if.then2914
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB8_1423
# BB#1534:                              # %L11773
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB8_1535
# BB#1537:                              # %L4008
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_2424
# BB#1538:                              # %if.then3875
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#1539:                              # %L4010
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB8_666
# BB#1540:                              # %L11775
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB8_666
# BB#1541:                              # %L11777
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#1542:                              # %L11779
	movl	target_flags(%rip), %eax
	movq	%rax, %rcx
	andq	$33554433, %rcx         # imm = 0x2000001
	cmpq	$1, %rcx
	jne	.LBB8_1545
# BB#1543:                              # %land.lhs.true3948
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$16, %rsi
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$361, %rax              # imm = 0x169
	jne	.LBB8_1766
# BB#1544:                              # %land.lhs.true3948.L11780_crit_edge
	movl	target_flags(%rip), %eax
.LBB8_1545:                             # %L11780
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$33554433, %rax         # imm = 0x2000001
	jne	.LBB8_687
# BB#1546:                              # %land.lhs.true3958
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$16, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$362, %rax              # imm = 0x16A
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_1423:                             # %if.end3857
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1535:                             # %L11773
	cmpq	$129, %rcx
	jne	.LBB8_1536
# BB#1547:                              # %L4168
	movq	8(%rax), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_2425
# BB#1548:                              # %if.then3976
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB8_1549
# BB#1558:                              # %L4170
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_687
# BB#1559:                              # %if.then4006
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB8_1565
# BB#1560:                              # %land.lhs.true4022
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r14, %rcx
	jne	.LBB8_1563
# BB#1561:                              # %lor.lhs.false4026
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1565
# BB#1562:                              # %land.lhs.true4030
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_1565
.LBB8_1563:                             # %land.lhs.true4034
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_1565
# BB#1564:                              # %if.then4036
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$378, %rax              # imm = 0x17A
	jmp	.LBB8_1766
.LBB8_1536:                             # %sw.epilog3866
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2424:                             # %if.end3877
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2425:                             # %if.end3978
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1549:                             # %if.then3976
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#1550:                              # %L4195
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB8_666
# BB#1551:                              # %L11781
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB8_666
# BB#1552:                              # %L11783
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#1553:                              # %L11785
	movl	target_flags(%rip), %eax
	movq	%rax, %rcx
	andq	$33554433, %rcx         # imm = 0x2000001
	cmpq	$1, %rcx
	jne	.LBB8_1556
# BB#1554:                              # %land.lhs.true4116
	movabsq	$recog_data, %rax
	movq	$129, %rdi
	movq	$16, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$380, %rax              # imm = 0x17C
	jne	.LBB8_1766
# BB#1555:                              # %land.lhs.true4116.L11786_crit_edge
	movl	target_flags(%rip), %eax
.LBB8_1556:                             # %L11786
	andq	$33554433, %rax         # imm = 0x2000001
	cmpq	$33554433, %rax         # imm = 0x2000001
	jne	.LBB8_687
# BB#1557:                              # %land.lhs.true4126
	movabsq	$recog_data, %rax
	movq	$129, %rdi
	movq	$16, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r14, %rax
	movq	$381, %rax              # imm = 0x17D
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_1730:                             # %if.end5608
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_644:                              # %L2091
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2411
# BB#645:                               # %if.then473
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB8_2411
# BB#646:                               # %if.then484
	movq	%r13, %r14
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_634
# BB#647:                               # %L2094
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_634
# BB#648:                               # %land.lhs.true519
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_634
# BB#649:                               # %land.lhs.true524
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$246, %rax
	jne	.LBB8_1766
	jmp	.LBB8_650
.LBB8_671:                              # %L3898
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2415
# BB#672:                               # %if.then749
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#673:                               # %L3900
	movq	%r13, %rbx
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#674:                               # %land.lhs.true784
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#675:                               # %land.lhs.true789
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%rbx, %rax
	movq	$353, %rax              # imm = 0x161
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_651:                              # %L3002
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2412
# BB#652:                               # %if.then542
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB8_2412
# BB#653:                               # %if.then553
	movq	%r13, %r14
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_634
# BB#654:                               # %L3005
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_634
# BB#655:                               # %land.lhs.true588
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_634
# BB#656:                               # %land.lhs.true593
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$298, %rax              # imm = 0x12A
	jne	.LBB8_1766
	jmp	.LBB8_650
.LBB8_657:                              # %L3389
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2413
# BB#658:                               # %if.then611
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB8_2413
# BB#659:                               # %if.then622
	movq	%r13, %r14
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_634
# BB#660:                               # %L3392
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_634
# BB#661:                               # %land.lhs.true657
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_634
# BB#662:                               # %land.lhs.true662
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$320, %rax              # imm = 0x140
	jne	.LBB8_1766
.LBB8_650:                              # %land.lhs.true524.if.end528_crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_634:                              # %if.end391
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_663:                              # %L3659
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2414
# BB#664:                               # %if.then680
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB8_2414
# BB#665:                               # %if.then691
	movq	%r13, %r14
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#667:                               # %L3662
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#668:                               # %land.lhs.true726
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#669:                               # %land.lhs.true731
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$338, %rax              # imm = 0x152
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_676:                              # %L4553
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2416
# BB#677:                               # %if.then807
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB8_2417
# BB#678:                               # %if.then818
	movq	%r13, %r15
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#679:                               # %L4556
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB8_666
# BB#680:                               # %L11690
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB8_666
# BB#681:                               # %L11692
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#682:                               # %L11694
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r14, %rdx
	testq	%r15, %rdx
	jne	.LBB8_685
# BB#683:                               # %land.lhs.true889
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$415, %rax              # imm = 0x19F
	jne	.LBB8_1766
# BB#684:                               # %land.lhs.true889.L11695_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB8_685:                              # %L11695
	movq	%rax, %rcx
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r15, %rbx
	je	.LBB8_687
# BB#686:                               # %land.lhs.true897
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$416, %rax              # imm = 0x1A0
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_718:                              # %L5391
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2420
# BB#719:                               # %if.then1177
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	movq	%r13, %rbx
	je	.LBB8_722
# BB#720:                               # %if.then1188
	movq	%rbx, %r14
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_721
# BB#728:                               # %L5394
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_732
# BB#729:                               # %land.lhs.true1231
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_732
# BB#730:                               # %land.lhs.true1236
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	je	.LBB8_732
# BB#731:                               # %land.lhs.true1239
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$474, %rax              # imm = 0x1DA
	je	.LBB8_1766
.LBB8_732:                              # %if.end1244
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_721:                              # %if.end1208
	movq	8(%rax), %r12
	movq	16(%r12), %rax
	movq	16(%rax), %r15
	movq	%r14, %rbx
.LBB8_722:                              # %L5406
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	nonmemory_operand
	testq	%rbx, %rax
	movq	%rbx, %r14
	je	.LBB8_727
# BB#723:                               # %if.then1193
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#724:                               # %L5408
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#725:                               # %land.lhs.true1285
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#726:                               # %land.lhs.true1290
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$475, %rax              # imm = 0x1DB
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_688:                              # %L4915
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2418
# BB#689:                               # %if.then915
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	movq	%r13, %rbx
	je	.LBB8_692
# BB#690:                               # %if.then926
	movq	%rbx, %r14
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_691
# BB#698:                               # %L4918
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_702
# BB#699:                               # %land.lhs.true969
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_702
# BB#700:                               # %land.lhs.true974
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	je	.LBB8_702
# BB#701:                               # %land.lhs.true977
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$440, %rax              # imm = 0x1B8
	je	.LBB8_1766
.LBB8_702:                              # %if.end982
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_691:                              # %if.end946
	movq	8(%rax), %r12
	movq	16(%r12), %rax
	movq	16(%rax), %r15
	movq	%r14, %rbx
.LBB8_692:                              # %L4930
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	nonmemory_operand
	testq	%rbx, %rax
	movq	%rbx, %r14
	je	.LBB8_697
# BB#693:                               # %if.then931
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#694:                               # %L4932
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#695:                               # %land.lhs.true1023
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#696:                               # %land.lhs.true1028
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$441, %rax              # imm = 0x1B9
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_703:                              # %L5221
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2419
# BB#704:                               # %if.then1046
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	movq	%r13, %rbx
	je	.LBB8_707
# BB#705:                               # %if.then1057
	movq	%rbx, %r14
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_706
# BB#713:                               # %L5224
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_717
# BB#714:                               # %land.lhs.true1100
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_717
# BB#715:                               # %land.lhs.true1105
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	je	.LBB8_717
# BB#716:                               # %land.lhs.true1108
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$462, %rax              # imm = 0x1CE
	je	.LBB8_1766
.LBB8_717:                              # %if.end1113
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_706:                              # %if.end1077
	movq	8(%rax), %r12
	movq	16(%r12), %rax
	movq	16(%rax), %r15
	movq	%r14, %rbx
.LBB8_707:                              # %L5236
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	nonmemory_operand
	testq	%rbx, %rax
	movq	%rbx, %r14
	je	.LBB8_712
# BB#708:                               # %if.then1062
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#709:                               # %L5238
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#710:                               # %land.lhs.true1154
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#711:                               # %land.lhs.true1159
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$463, %rax              # imm = 0x1CF
	jne	.LBB8_1766
	jmp	.LBB8_670
.LBB8_733:                              # %L5535
	movq	8(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_2421
# BB#734:                               # %if.then1308
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	movq	%r13, %rbx
	je	.LBB8_737
# BB#735:                               # %if.then1319
	movq	%rbx, %r14
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_736
# BB#743:                               # %L5538
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_747
# BB#744:                               # %land.lhs.true1362
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_747
# BB#745:                               # %land.lhs.true1367
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	je	.LBB8_747
# BB#746:                               # %land.lhs.true1370
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$484, %rax              # imm = 0x1E4
	je	.LBB8_1766
.LBB8_747:                              # %if.end1375
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_736:                              # %if.end1339
	movq	8(%rax), %r12
	movq	16(%r12), %rax
	movq	16(%rax), %r15
	movq	%r14, %rbx
.LBB8_737:                              # %L5550
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	nonmemory_operand
	testq	%rbx, %rax
	movq	%rbx, %r14
	je	.LBB8_742
# BB#738:                               # %if.then1324
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_666
# BB#739:                               # %L5552
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_666
# BB#740:                               # %land.lhs.true1416
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_666
# BB#741:                               # %land.lhs.true1421
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$485, %rax              # imm = 0x1E5
	jne	.LBB8_1766
.LBB8_670:                              # %land.lhs.true731.if.end735_crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	jmp	.LBB8_666
.LBB8_2431:                             # %if.end4642
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2437:                             # %if.end5132
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_149:                              # %L1249.i.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB8_28
# BB#150:                               # %L11610.i.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB8_151
# BB#157:                               # %L1250.i.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262255, %rcx           # imm = 0x4006F
	jne	.LBB8_28
# BB#158:                               # %L1251.i.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_28
# BB#159:                               # %land.lhs.true141.i.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_28
# BB#160:                               # %L1252.i.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_28
# BB#161:                               # %land.lhs.true154.i.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_28
# BB#162:                               # %L1253.i.i
	movq	16(%r14), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#163:                               # %if.then166.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#164:                               # %if.then174.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#165:                               # %L1256.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#166:                               # %land.lhs.true198.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#167:                               # %land.lhs.true203.i.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$188, %rax
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_168:                              # %L1927.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#169:                               # %if.then252.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB8_170
# BB#175:                               # %L1929.i.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262255, %rcx           # imm = 0x4006F
	jne	.LBB8_28
# BB#176:                               # %L1930.i.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_28
# BB#177:                               # %land.lhs.true297.i.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_28
# BB#178:                               # %L1931.i.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_28
# BB#179:                               # %land.lhs.true310.i.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_28
# BB#180:                               # %L1932.i.i
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#181:                               # %if.then322.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#182:                               # %L1934.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#183:                               # %land.lhs.true346.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#184:                               # %land.lhs.true351.i.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$235, %rax
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_231:                              # %L3814.i.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#232:                               # %if.then743.i.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#233:                               # %L3816.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#234:                               # %land.lhs.true767.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#235:                               # %land.lhs.true772.i.i
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$347, %rax              # imm = 0x15B
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_185:                              # %L2918.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#186:                               # %if.then392.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#187:                               # %if.then400.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#188:                               # %L2921.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#189:                               # %land.lhs.true424.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#190:                               # %land.lhs.true429.i.i
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$292, %rax              # imm = 0x124
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_191:                              # %L3239.i.i
	movq	8(%rbx), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB8_28
# BB#192:                               # %L11613.i.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$86, %rax
	jg	.LBB8_201
# BB#193:                               # %L11613.i.i
	addq	$-61, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$5, %rax
	ja	.LBB8_28
# BB#194:                               # %L11613.i.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB8_28
# BB#195:                               # %L11612.i.i
	movq	$4, %rsi
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#196:                               # %if.then451.i.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#197:                               # %if.then657.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#198:                               # %L3242.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#199:                               # %land.lhs.true681.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#200:                               # %land.lhs.true686.i.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$310, %rax              # imm = 0x136
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_225:                              # %L3509.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#226:                               # %if.then696.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#227:                               # %if.then704.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#228:                               # %L3512.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#229:                               # %land.lhs.true728.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#230:                               # %land.lhs.true733.i.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$328, %rax              # imm = 0x148
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_236:                              # %L4455.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#237:                               # %if.then782.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#238:                               # %if.then790.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#239:                               # %L4458.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#240:                               # %land.lhs.true814.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#241:                               # %land.lhs.true819.i.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$408, %rax              # imm = 0x198
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_280:                              # %L5303.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#281:                               # %if.then1120.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_284
# BB#282:                               # %if.then1128.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_283
# BB#289:                               # %L5306.i.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_293
# BB#290:                               # %land.lhs.true1168.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_293
# BB#291:                               # %land.lhs.true1173.i.i
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_293
# BB#292:                               # %land.lhs.true1176.i.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$468, %rax              # imm = 0x1D4
	je	.LBB8_1766
.LBB8_293:                              # %if.end1181.i.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_283:                              # %if.end1145.i.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_284:                              # %L5334.i.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#285:                               # %if.then1133.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#286:                               # %L5336.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#287:                               # %land.lhs.true1214.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#288:                               # %land.lhs.true1219.i.i
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$470, %rax              # imm = 0x1D6
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_242:                              # %L4717.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#243:                               # %if.then829.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_244
# BB#249:                               # %L11615.i.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_252
# BB#250:                               # %if.then847.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_251
# BB#255:                               # %L4720.i.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_251
# BB#256:                               # %land.lhs.true887.i.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_251
# BB#257:                               # %land.lhs.true892.i.i
	movq	8(%rbx), %rcx
	cmpq	$31, %rcx
	jne	.LBB8_251
# BB#258:                               # %land.lhs.true898.i.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_cltd(%rip), %edx
	movl	optimize_size(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rdx, %rdi
	orq	%rdi, %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rsi
	je	.LBB8_251
# BB#259:                               # %land.lhs.true902.i.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$426, %rax              # imm = 0x1AA
	jne	.LBB8_1766
# BB#260:                               # %land.lhs.true902.if.end906_crit_edge.i.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_251:                              # %if.end864.i.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_252:                              # %L11616.i.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_244
# BB#253:                               # %if.then852.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_254
# BB#261:                               # %L4750.i.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_265
# BB#262:                               # %land.lhs.true950.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_265
# BB#263:                               # %land.lhs.true955.i.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_265
# BB#264:                               # %land.lhs.true958.i.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$428, %rax              # imm = 0x1AC
	je	.LBB8_1766
.LBB8_265:                              # %if.end963.i.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_254:                              # %if.end927.i.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_244:                              # %L4778.i.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#245:                               # %if.then842.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#246:                               # %L4780.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#247:                               # %land.lhs.true996.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#248:                               # %land.lhs.true1001.i.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$430, %rax              # imm = 0x1AE
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_266:                              # %L5053.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#267:                               # %if.then1011.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_270
# BB#268:                               # %if.then1019.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_269
# BB#275:                               # %L5056.i.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_279
# BB#276:                               # %land.lhs.true1059.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_279
# BB#277:                               # %land.lhs.true1064.i.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_279
# BB#278:                               # %land.lhs.true1067.i.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$450, %rax              # imm = 0x1C2
	je	.LBB8_1766
.LBB8_279:                              # %if.end1072.i.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_269:                              # %if.end1036.i.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_270:                              # %L5084.i.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#271:                               # %if.then1024.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#272:                               # %L5086.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#273:                               # %land.lhs.true1105.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#274:                               # %land.lhs.true1110.i.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$452, %rax              # imm = 0x1C4
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_294:                              # %L5447.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#295:                               # %if.then1229.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_298
# BB#296:                               # %if.then1237.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_297
# BB#303:                               # %L5450.i.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_307
# BB#304:                               # %land.lhs.true1277.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_307
# BB#305:                               # %land.lhs.true1282.i.i
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_307
# BB#306:                               # %land.lhs.true1285.i.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$478, %rax              # imm = 0x1DE
	je	.LBB8_1766
.LBB8_307:                              # %if.end1290.i.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_297:                              # %if.end1254.i.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_298:                              # %L5478.i.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#299:                               # %if.then1242.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#300:                               # %L5480.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#301:                               # %land.lhs.true1323.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#302:                               # %land.lhs.true1328.i.i
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$480, %rax              # imm = 0x1E0
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_454:                              # %L11644.i
	cmpq	$120, %rcx
	jne	.LBB8_455
# BB#466:                               # %L2220.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#467:                               # %if.then254.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196728, %rcx           # imm = 0x30078
	jne	.LBB8_409
# BB#468:                               # %L2222.i
	movq	8(%rax), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#469:                               # %if.then281.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_460
# BB#470:                               # %L2224.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_460
# BB#471:                               # %land.lhs.true316.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_460
# BB#472:                               # %land.lhs.true321.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_qimode_math(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r14, %rdi
	je	.LBB8_460
# BB#473:                               # %land.lhs.true325.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$255, %rax
	jne	.LBB8_1766
# BB#474:                               # %lor.lhs.false330.i
	movzbl	(%rbx), %ecx
	cmpq	$66, %rcx
	jne	.LBB8_1766
	jmp	.LBB8_460
.LBB8_2438:                             # %if.end5250
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_787:                              # %L1202.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB8_950
# BB#788:                               # %L11710.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB8_789
# BB#799:                               # %L1217.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327791, %rcx           # imm = 0x5006F
	jne	.LBB8_950
# BB#800:                               # %L1218.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_950
# BB#801:                               # %land.lhs.true181.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_950
# BB#802:                               # %L1219.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_950
# BB#803:                               # %land.lhs.true194.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_950
# BB#804:                               # %L1220.i
	movq	16(%r14), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#805:                               # %if.then206.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#806:                               # %if.then214.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#807:                               # %L1223.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#808:                               # %land.lhs.true238.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#809:                               # %land.lhs.true243.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#810:                               # %land.lhs.true246.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$186, %rax
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_814:                              # %L1853.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#815:                               # %if.then356.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB8_816
# BB#825:                               # %L1869.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327791, %rcx           # imm = 0x5006F
	jne	.LBB8_950
# BB#826:                               # %L1870.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_950
# BB#827:                               # %land.lhs.true406.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_950
# BB#828:                               # %L1871.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_950
# BB#829:                               # %land.lhs.true419.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_950
# BB#830:                               # %L1872.i
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#831:                               # %if.then431.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#832:                               # %L1874.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#833:                               # %land.lhs.true455.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#834:                               # %land.lhs.true460.i9163
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#835:                               # %land.lhs.true463.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$231, %rax
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_860:                              # %L3779.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB8_863
# BB#861:                               # %if.then710.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_862
# BB#869:                               # %L3781.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_862
# BB#870:                               # %land.lhs.true750.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_862
# BB#871:                               # %land.lhs.true755.i
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB8_862
# BB#872:                               # %land.lhs.true758.i
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	$344, %rax              # imm = 0x158
	jne	.LBB8_1766
# BB#873:                               # %land.lhs.true758.if.end762_crit_edge.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_862:                              # %if.end727.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rbx
.LBB8_863:                              # %L3791.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#864:                               # %if.then715.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#865:                               # %L3793.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#866:                               # %land.lhs.true795.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#867:                               # %land.lhs.true800.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#868:                               # %land.lhs.true803.i
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r13, %rax
	movq	$345, %rax              # imm = 0x159
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_839:                              # %L2891.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#840:                               # %if.then560.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_szext_general_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#841:                               # %if.then568.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#842:                               # %L2894.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#843:                               # %land.lhs.true592.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#844:                               # %land.lhs.true597.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#845:                               # %land.lhs.true600.i
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$290, %rax              # imm = 0x122
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_846:                              # %L3194.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#847:                               # %if.then610.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#848:                               # %if.then618.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#849:                               # %L3197.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#850:                               # %land.lhs.true642.i9182
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#851:                               # %land.lhs.true647.i9183
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#852:                               # %land.lhs.true650.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$307, %rax              # imm = 0x133
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_853:                              # %L3464.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#854:                               # %if.then660.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#855:                               # %if.then668.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#856:                               # %L3467.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#857:                               # %land.lhs.true692.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#858:                               # %land.lhs.true697.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#859:                               # %land.lhs.true700.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$325, %rax              # imm = 0x145
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_874:                              # %L4373.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#875:                               # %if.then813.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#876:                               # %if.then821.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#877:                               # %L4376.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#878:                               # %land.lhs.true845.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#879:                               # %land.lhs.true850.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#880:                               # %land.lhs.true853.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$403, %rax              # imm = 0x193
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_924:                              # %L5275.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#925:                               # %if.then1169.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB8_928
# BB#926:                               # %if.then1177.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_927
# BB#934:                               # %L5278.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_939
# BB#935:                               # %land.lhs.true1217.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_939
# BB#936:                               # %land.lhs.true1222.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_939
# BB#937:                               # %land.lhs.true1225.i
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB8_939
# BB#938:                               # %land.lhs.true1228.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$466, %rax              # imm = 0x1D2
	je	.LBB8_1766
.LBB8_939:                              # %if.end1233.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_927:                              # %if.end1194.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_928:                              # %L5290.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#929:                               # %if.then1182.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#930:                               # %L5292.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#931:                               # %land.lhs.true1266.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#932:                               # %land.lhs.true1271.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#933:                               # %land.lhs.true1274.i
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$467, %rax              # imm = 0x1D3
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_881:                              # %L4594.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#882:                               # %if.then863.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_883
# BB#889:                               # %L11711.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r13, %rax
	je	.LBB8_892
# BB#890:                               # %if.then881.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_891
# BB#895:                               # %L4597.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_891
# BB#896:                               # %land.lhs.true921.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_891
# BB#897:                               # %land.lhs.true926.i
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB8_891
# BB#898:                               # %land.lhs.true929.i
	movq	8(%rbx), %rcx
	cmpq	$63, %rcx
	jne	.LBB8_891
# BB#899:                               # %land.lhs.true935.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_cltd(%rip), %edx
	movl	optimize_size(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rdx, %rdi
	orq	%rdi, %rsi
	testq	%r13, %rsi
	je	.LBB8_891
# BB#900:                               # %land.lhs.true939.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$418, %rax              # imm = 0x1A2
	jne	.LBB8_1766
# BB#901:                               # %land.lhs.true939.if.end943_crit_edge.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_891:                              # %if.end898.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_892:                              # %L11712.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB8_883
# BB#893:                               # %if.then886.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_894
# BB#902:                               # %L4611.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_907
# BB#903:                               # %land.lhs.true987.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_907
# BB#904:                               # %land.lhs.true992.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_907
# BB#905:                               # %land.lhs.true995.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB8_907
# BB#906:                               # %land.lhs.true998.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$419, %rax              # imm = 0x1A3
	je	.LBB8_1766
.LBB8_907:                              # %if.end1003.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_894:                              # %if.end964.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_883:                              # %L4623.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#884:                               # %if.then876.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#885:                               # %L4625.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#886:                               # %land.lhs.true1036.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#887:                               # %land.lhs.true1041.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#888:                               # %land.lhs.true1044.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$420, %rax              # imm = 0x1A4
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_908:                              # %L4969.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#909:                               # %if.then1054.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB8_912
# BB#910:                               # %if.then1062.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_911
# BB#918:                               # %L4972.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_923
# BB#919:                               # %land.lhs.true1102.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_923
# BB#920:                               # %land.lhs.true1107.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_923
# BB#921:                               # %land.lhs.true1110.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB8_923
# BB#922:                               # %land.lhs.true1113.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$444, %rax              # imm = 0x1BC
	je	.LBB8_1766
.LBB8_923:                              # %if.end1118.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_911:                              # %if.end1079.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_912:                              # %L4984.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#913:                               # %if.then1067.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#914:                               # %L4986.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#915:                               # %land.lhs.true1151.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#916:                               # %land.lhs.true1156.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#917:                               # %land.lhs.true1159.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$445, %rax              # imm = 0x1BD
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_940:                              # %L5419.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#941:                               # %if.then1284.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB8_944
# BB#942:                               # %if.then1292.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_943
# BB#951:                               # %L5422.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_956
# BB#952:                               # %land.lhs.true1332.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_956
# BB#953:                               # %land.lhs.true1337.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_956
# BB#954:                               # %land.lhs.true1340.i
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	je	.LBB8_956
# BB#955:                               # %land.lhs.true1343.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$476, %rax              # imm = 0x1DC
	je	.LBB8_1766
.LBB8_956:                              # %if.end1348.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_943:                              # %if.end1309.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_944:                              # %L5434.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#945:                               # %if.then1297.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#946:                               # %L5436.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#947:                               # %land.lhs.true1381.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#948:                               # %land.lhs.true1386.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#949:                               # %land.lhs.true1389.i
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$477, %rax              # imm = 0x1DD
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_2410:                             # %if.end378
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1565:                             # %L4188
	movl	target_flags(%rip), %eax
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$33816576, %rax         # imm = 0x2040000
	jne	.LBB8_687
# BB#1566:                              # %land.lhs.true4043
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r14, %rcx
	jne	.LBB8_1569
# BB#1567:                              # %lor.lhs.false4047
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	movq	%r14, %rbx
	testq	%rbx, %rax
	je	.LBB8_687
# BB#1568:                              # %land.lhs.true4051
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_687
.LBB8_1569:                             # %land.lhs.true4055
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_687
# BB#1570:                              # %if.then4057
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$379, %rax              # imm = 0x17B
	jmp	.LBB8_1766
.LBB8_2411:                             # %if.end486
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2412:                             # %if.end555
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2413:                             # %if.end624
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2414:                             # %if.end693
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1761:                             # %L3913
	movq	%rdx, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1762:                              # %L3914
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_687
# BB#1763:                              # %if.then5980
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131149, %rcx           # imm = 0x2004D
	jne	.LBB8_687
# BB#1764:                              # %L3916
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_687
# BB#1765:                              # %land.lhs.true6018
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r15, %rax
	movq	$354, %rax              # imm = 0x162
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_1751:                             # %L3890
	movq	%rdx, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1752:                              # %L3891
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_687
# BB#1753:                              # %if.then5871
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196685, %rcx           # imm = 0x3004D
	jne	.LBB8_687
# BB#1754:                              # %L3893
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_687
# BB#1755:                              # %land.lhs.true5909
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r15, %rax
	movq	$352, %rax              # imm = 0x160
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_1735:                             # %L3848
	movq	%rbx, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1736:                              # %L3849
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_687
# BB#1737:                              # %if.then5662
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262221, %rcx           # imm = 0x4004D
	jne	.LBB8_687
# BB#1738:                              # %L3851
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_687
# BB#1739:                              # %land.lhs.true5700
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r15, %rax
	movq	$349, %rax              # imm = 0x15D
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_2439:                             # %if.end5386
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1706:                             # %if.end5402
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2436:                             # %if.end5037
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1740:                             # %L6028
	movq	%rbx, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1741:                              # %L6029
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB8_687
# BB#1742:                              # %if.then5752
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262186, %rcx           # imm = 0x4002A
	jne	.LBB8_687
# BB#1743:                              # %land.lhs.true5774
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	cmpq	$1, %rdx
	jne	.LBB8_687
# BB#1744:                              # %land.lhs.true5780
	movl	16(%rax), %eax
	cmpq	$5, %rax
	jne	.LBB8_687
# BB#1745:                              # %L6031
	movq	8(%rcx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	$524, %rax              # imm = 0x20C
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_2415:                             # %if.end751
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2416:                             # %if.end809
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2417:                             # %if.end820
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2420:                             # %if.end1179
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2418:                             # %if.end917
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2419:                             # %if.end1048
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_2421:                             # %if.end1310
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_455:                              # %L11644.i
	cmpq	$121, %rcx
	jne	.LBB8_409
# BB#456:                               # %L2202.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#457:                               # %if.then158.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196729, %rcx           # imm = 0x30079
	jne	.LBB8_409
# BB#458:                               # %L2204.i
	movq	8(%rax), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_409
# BB#459:                               # %if.then185.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_460
# BB#461:                               # %L2206.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_460
# BB#462:                               # %land.lhs.true220.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_460
# BB#463:                               # %land.lhs.true225.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_qimode_math(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r14, %rdi
	je	.LBB8_460
# BB#464:                               # %land.lhs.true229.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$254, %rax
	jne	.LBB8_1766
# BB#465:                               # %lor.lhs.false234.i
	movzbl	(%rbx), %ecx
	cmpq	$66, %rcx
	jne	.LBB8_1766
.LBB8_460:                              # %if.end200.i
	movq	8(%rdx), %rbx
	movq	8(%rbx), %r13
	jmp	.LBB8_410
.LBB8_409:                              # %if.end14.i
	movq	8(%r12), %r13
	movq	%r12, %rbx
.LBB8_410:                              # %L11580.i
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#411:                               # %if.then7.i
	movq	%r13, recog_data(%rip)
	movq	16(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$196608, %rcx           # imm = 0x30000
	jne	.LBB8_5
# BB#412:                               # %L11646.i
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-75, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$16, %rax
	ja	.LBB8_5
# BB#413:                               # %L11646.i
	jmpq	*.LJTI8_6(,%rax,8)
.LBB8_484:                              # %L1588.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#485:                               # %if.then616.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#486:                               # %if.then624.i
	movq	%rbx, %r13
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#487:                               # %L1591.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#488:                               # %L11659.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#489:                               # %L11661.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r14, %rdx
	testq	%r13, %rdx
	jne	.LBB8_492
# BB#490:                               # %land.lhs.true660.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$215, %rax
	jne	.LBB8_1766
# BB#491:                               # %land.lhs.true660.L11662_crit_edge.i
	movl	ix86_cpu(%rip), %eax
.LBB8_492:                              # %L11662.i
	movq	%rax, %rcx
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r13, %rbx
	je	.LBB8_5
# BB#493:                               # %land.lhs.true668.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$216, %rax
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_494:                              # %L2053.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#495:                               # %if.then678.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	general_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#496:                               # %if.then686.i
	movq	%rbx, %r14
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#497:                               # %L2056.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#498:                               # %land.lhs.true710.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#499:                               # %land.lhs.true715.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$243, %rax
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_518:                              # %L3875.i
	movq	8(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	testq	%rdx, %rax
	je	.LBB8_5
# BB#519:                               # %if.then866.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#520:                               # %L3877.i
	movq	%rdx, %rbx
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#521:                               # %land.lhs.true890.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#522:                               # %land.lhs.true895.i
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%rbx, %rax
	movq	$351, %rax              # imm = 0x15F
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_500:                              # %L2975.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#501:                               # %if.then725.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	general_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#502:                               # %if.then733.i
	movq	%rbx, %r14
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#503:                               # %L2978.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#504:                               # %land.lhs.true757.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#505:                               # %land.lhs.true762.i
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$296, %rax              # imm = 0x128
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_506:                              # %L3344.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#507:                               # %if.then772.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	general_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#508:                               # %if.then780.i
	movq	%rbx, %r14
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#509:                               # %L3347.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#510:                               # %land.lhs.true804.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#511:                               # %land.lhs.true809.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$317, %rax              # imm = 0x13D
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_512:                              # %L3614.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#513:                               # %if.then819.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	general_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#514:                               # %if.then827.i9120
	movq	%rbx, %r14
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#515:                               # %L3617.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#516:                               # %land.lhs.true851.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#517:                               # %land.lhs.true856.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$335, %rax              # imm = 0x14F
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_523:                              # %L4512.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#524:                               # %if.then905.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#525:                               # %if.then913.i
	movq	%rbx, %r13
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#526:                               # %L4515.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#527:                               # %L11665.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#528:                               # %L11667.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r14, %rdx
	testq	%r13, %rdx
	jne	.LBB8_531
# BB#529:                               # %land.lhs.true949.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$412, %rax              # imm = 0x19C
	jne	.LBB8_1766
# BB#530:                               # %land.lhs.true949.L11668_crit_edge.i
	movl	ix86_cpu(%rip), %eax
.LBB8_531:                              # %L11668.i
	movq	%rax, %rcx
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r13, %rbx
	je	.LBB8_5
# BB#532:                               # %land.lhs.true957.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$413, %rax              # imm = 0x19D
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_561:                              # %L5363.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#562:                               # %if.then1185.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r13
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	const_int_1_operand
	movq	%rbx, %r14
	testq	%rbx, %rax
	je	.LBB8_563
# BB#568:                               # %if.then1193.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_574
# BB#569:                               # %L5366.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_573
# BB#570:                               # %land.lhs.true1233.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_573
# BB#571:                               # %land.lhs.true1238.i
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	je	.LBB8_573
# BB#572:                               # %land.lhs.true1241.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$472, %rax              # imm = 0x1D8
	je	.LBB8_1766
.LBB8_573:                              # %if.end1246.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_574:                              # %if.end1210.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %r13
.LBB8_563:                              # %L5378.i
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#564:                               # %if.then1198.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#565:                               # %L5380.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#566:                               # %land.lhs.true1279.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#567:                               # %land.lhs.true1284.i
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$473, %rax              # imm = 0x1D9
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_533:                              # %L4861.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#534:                               # %if.then967.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r13
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	const_int_1_operand
	movq	%rbx, %r14
	testq	%rbx, %rax
	je	.LBB8_535
# BB#540:                               # %if.then975.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_546
# BB#541:                               # %L4864.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_545
# BB#542:                               # %land.lhs.true1015.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_545
# BB#543:                               # %land.lhs.true1020.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	je	.LBB8_545
# BB#544:                               # %land.lhs.true1023.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$436, %rax              # imm = 0x1B4
	je	.LBB8_1766
.LBB8_545:                              # %if.end1028.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_546:                              # %if.end992.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %r13
.LBB8_535:                              # %L4876.i
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#536:                               # %if.then980.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#537:                               # %L4878.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#538:                               # %land.lhs.true1061.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#539:                               # %land.lhs.true1066.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$437, %rax              # imm = 0x1B5
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_547:                              # %L5167.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#548:                               # %if.then1076.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r13
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	const_int_1_operand
	movq	%rbx, %r14
	testq	%rbx, %rax
	je	.LBB8_549
# BB#554:                               # %if.then1084.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_560
# BB#555:                               # %L5170.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_559
# BB#556:                               # %land.lhs.true1124.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_559
# BB#557:                               # %land.lhs.true1129.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	je	.LBB8_559
# BB#558:                               # %land.lhs.true1132.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$458, %rax              # imm = 0x1CA
	je	.LBB8_1766
.LBB8_559:                              # %if.end1137.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_560:                              # %if.end1101.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %r13
.LBB8_549:                              # %L5182.i
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#550:                               # %if.then1089.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#551:                               # %L5184.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#552:                               # %land.lhs.true1170.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#553:                               # %land.lhs.true1175.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$459, %rax              # imm = 0x1CB
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_575:                              # %L5507.i
	movq	8(%r14), %r13
	movq	$3, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_5
# BB#576:                               # %if.then1294.i
	movq	%r13, recog_data+8(%rip)
	movq	16(%r14), %r13
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	const_int_1_operand
	movq	%rbx, %r14
	testq	%rbx, %rax
	je	.LBB8_577
# BB#582:                               # %if.then1302.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_588
# BB#583:                               # %L5510.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_587
# BB#584:                               # %land.lhs.true1342.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_587
# BB#585:                               # %land.lhs.true1347.i
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	je	.LBB8_587
# BB#586:                               # %land.lhs.true1350.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$482, %rax              # imm = 0x1E2
	je	.LBB8_1766
.LBB8_587:                              # %if.end1355.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_588:                              # %if.end1319.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %r13
.LBB8_577:                              # %L5522.i
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#578:                               # %if.then1307.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#579:                               # %L5524.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#580:                               # %land.lhs.true1388.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#581:                               # %land.lhs.true1393.i
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r14, %rax
	movq	$483, %rax              # imm = 0x1E3
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_121:                              # %L3676.i
	movq	8(%rbx), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	(%rax), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB8_5
# BB#122:                               # %L3677.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	8(%rax), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	ext_register_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#123:                               # %if.then673.i
	movq	%r13, recog_data+8(%rip)
	movq	(%rsp), %rax            # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#124:                               # %land.lhs.true682.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#125:                               # %L3679.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#126:                               # %land.lhs.true695.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#127:                               # %L3680.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB8_5
# BB#128:                               # %L3681.i
	movq	8(%rbx), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	ext_register_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#129:                               # %if.then720.i
	movq	%r13, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#130:                               # %land.lhs.true729.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#131:                               # %L3683.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#132:                               # %land.lhs.true742.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#133:                               # %L3684.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#134:                               # %L3685.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#135:                               # %land.lhs.true770.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$339, %rax              # imm = 0x153
	jne	.LBB8_5
	jmp	.LBB8_1766
.LBB8_60:                               # %L11593.i
	cmpq	$75, %rax
	jne	.LBB8_5
# BB#61:                                # %L1773.i
	movq	8(%rbx), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	(%rax), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB8_5
# BB#62:                                # %L1774.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	8(%rax), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	ext_register_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#63:                                # %if.then148.i
	movq	%r13, recog_data+8(%rip)
	movq	(%rsp), %rax            # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#64:                                # %land.lhs.true157.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#65:                                # %L1776.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#66:                                # %land.lhs.true170.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#67:                                # %L1829.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB8_68
# BB#76:                                # %L1830.i
	movq	8(%rbx), %r13
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	ext_register_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#77:                                # %if.then205.i
	movq	%r13, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#78:                                # %land.lhs.true214.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#79:                                # %L1832.i
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_5
# BB#80:                                # %land.lhs.true227.i
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB8_5
# BB#81:                                # %L1833.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#82:                                # %L1834.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#83:                                # %land.lhs.true255.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$229, %rax
	jne	.LBB8_5
	jmp	.LBB8_1766
.LBB8_100:                              # %L11596.i
	cmpq	$121, %rax
	jne	.LBB8_94
# BB#101:                               # %L3115.i
	movq	8(%rbx), %r13
	movq	$2, %rsi
	movq	%r13, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB8_104
# BB#102:                               # %if.then417.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_103
# BB#107:                               # %L3117.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_103
# BB#108:                               # %land.lhs.true460.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_103
# BB#109:                               # %land.lhs.true465.i
	movzbl	target_flags+3(%rip), %edx
	movq	$304, %rax              # imm = 0x130
	testq	$2, %rdx
	je	.LBB8_1766
.LBB8_103:                              # %if.end434.i
	movq	8(%rcx), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
	movq	8(%rbx), %r13
.LBB8_104:                              # %L3143.i
	xorq	%rsi, %rsi
	movq	%r13, %rdi
	callq	ext_register_operand
	testq	%r14, %rax
	je	.LBB8_94
# BB#105:                               # %if.then422.i
	movq	%r13, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_106
# BB#110:                               # %L3145.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_106
# BB#111:                               # %land.lhs.true516.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_106
# BB#112:                               # %land.lhs.true521.i
	movzbl	target_flags+3(%rip), %edx
	movq	$305, %rax              # imm = 0x131
	testq	$2, %rdx
	jne	.LBB8_1766
.LBB8_106:                              # %if.end493.i
	movq	8(%rcx), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_94:                               # %L3066.i
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#95:                                # %if.then403.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#96:                                # %L3068.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#97:                                # %land.lhs.true642.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#98:                                # %land.lhs.true647.i
	movq	8(%rbx), %rax
	cmpq	$256, %rax              # imm = 0x100
	movq	$302, %rax              # imm = 0x12E
	jae	.LBB8_5
	jmp	.LBB8_1766
.LBB8_1709:                             # %if.end5418
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_1713:                             # %L3863
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1714:                              # %L3864
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB8_687
# BB#1715:                              # %if.then5461
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB8_687
# BB#1716:                              # %L3866
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327757, %rcx           # imm = 0x5004D
	jne	.LBB8_687
# BB#1717:                              # %L3867
	movq	8(%rax), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327767, %rax           # imm = 0x50057
	jne	.LBB8_687
# BB#1718:                              # %L3868
	movq	8(%r14), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_687
# BB#1719:                              # %L3869
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_687
# BB#1720:                              # %land.lhs.true5557
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB8_687
# BB#1721:                              # %L3870
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_687
# BB#1722:                              # %land.lhs.true5578
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB8_687
# BB#1723:                              # %land.lhs.true5583
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_687
# BB#1724:                              # %land.lhs.true5586
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r15, %rax
	movq	$350, %rax              # imm = 0x15E
	jne	.LBB8_1766
	jmp	.LBB8_687
.LBB8_1695:                             # %L3806
	movq	%rdx, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_666
# BB#1696:                              # %L3807
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_687
# BB#1697:                              # %if.then5293
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327757, %rcx           # imm = 0x5004D
	jne	.LBB8_687
# BB#1698:                              # %L3809
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_687
# BB#1699:                              # %land.lhs.true5331
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_687
# BB#1700:                              # %land.lhs.true5334
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r15, %rax
	movq	$346, %rax              # imm = 0x15A
	jne	.LBB8_1766
.LBB8_687:                              # %if.end901
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_666:                              # %if.end706
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_479:                              # %if.end457.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
	movq	8(%rbx), %r13
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %r14
	jmp	.LBB8_410
.LBB8_727:                              # %if.end1195
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_697:                              # %if.end933
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_712:                              # %if.end1064
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_742:                              # %if.end1326
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_151:                              # %if.end112.i.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#152:                               # %if.then114.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#153:                               # %if.then213.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#154:                               # %L1471.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#155:                               # %land.lhs.true237.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#156:                               # %land.lhs.true242.i.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$207, %rax
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_170:                              # %if.end267.i.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#171:                               # %if.then270.i.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#172:                               # %L1976.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#173:                               # %land.lhs.true377.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_28
# BB#174:                               # %land.lhs.true382.i.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$237, %rax
	jne	.LBB8_1766
	jmp	.LBB8_28
.LBB8_201:                              # %L11613.i.i
	cmpq	$87, %rax
	jne	.LBB8_202
# BB#214:                               # %L4431.i.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#215:                               # %L4432.i.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	16(%rax), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#216:                               # %if.then467.i.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262234, %rax           # imm = 0x4005A
	jne	.LBB8_28
# BB#217:                               # %L4434.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#218:                               # %if.then488.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131148, %rcx           # imm = 0x2004C
	jne	.LBB8_28
# BB#219:                               # %L4436.i.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB8_28
# BB#220:                               # %land.lhs.true510.i.i
	movq	8(%rcx), %rcx
	cmpq	$32, %rcx
	jne	.LBB8_28
# BB#221:                               # %L4437.i.i
	movq	16(%rax), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#222:                               # %L4438.i.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#223:                               # %L4439.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#224:                               # %land.lhs.true546.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$407, %rax              # imm = 0x197
	jne	.LBB8_28
	jmp	.LBB8_1766
.LBB8_789:                              # %if.end151.i
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#790:                               # %if.then154.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB8_793
# BB#791:                               # %if.then256.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_792
# BB#811:                               # %L1205.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_792
# BB#812:                               # %land.lhs.true296.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_792
# BB#813:                               # %land.lhs.true301.i
	movzbl	target_flags+3(%rip), %edx
	movq	$185, %rax
	testq	$2, %rdx
	je	.LBB8_1766
.LBB8_792:                              # %if.end273.i
	movq	8(%rcx), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_793:                              # %L1392.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#794:                               # %if.then261.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#795:                               # %L1394.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#796:                               # %land.lhs.true338.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#797:                               # %land.lhs.true343.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#798:                               # %land.lhs.true346.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$202, %rax
	jne	.LBB8_1766
	jmp	.LBB8_950
.LBB8_816:                              # %if.end371.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB8_819
# BB#817:                               # %if.then374.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_818
# BB#836:                               # %L1856.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_818
# BB#837:                               # %land.lhs.true500.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_818
# BB#838:                               # %land.lhs.true505.i
	movzbl	target_flags+3(%rip), %edx
	movq	$230, %rax
	testq	$2, %rdx
	je	.LBB8_1766
.LBB8_818:                              # %if.end477.i
	movq	8(%rcx), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_819:                              # %L1890.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r13, %rax
	je	.LBB8_950
# BB#820:                               # %if.then379.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_950
# BB#821:                               # %L1892.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_950
# BB#822:                               # %land.lhs.true542.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_950
# BB#823:                               # %land.lhs.true547.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_950
# BB#824:                               # %land.lhs.true550.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r13, %rax
	movq	$232, %rax
	jne	.LBB8_1766
.LBB8_950:                              # %if.end1533
	movq	8(%r12), %r15
	movq	%r13, %r14
.LBB8_756:                              # %L11572
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#757:                               # %if.then1446
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %r13
	movl	(%r13), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB8_758
# BB#958:                               # %L11714
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rcx
	movq	16(%rcx), %r15
	movzbl	(%r15), %ecx
	cmpq	$120, %rcx
	jg	.LBB8_969
# BB#959:                               # %L11714
	cmpq	$71, %rcx
	jg	.LBB8_967
# BB#960:                               # %L11714
	cmpq	$61, %rcx
	je	.LBB8_962
# BB#961:                               # %L11714
	cmpq	$63, %rcx
	jne	.LBB8_758
.LBB8_962:                              # %L11713.i
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#963:                               # %if.then.i9234
	movq	%r15, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_758
# BB#964:                               # %L588.i
	movq	8(%rbx), %rdi
	movq	%r15, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#965:                               # %L589.i
	movq	16(%rbx), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#966:                               # %land.lhs.true1983.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$87, %rax
	jmp	.LBB8_1180
.LBB8_969:                              # %L11714
	cmpq	$121, %rcx
	jne	.LBB8_758
# BB#970:                               # %L1271.i
	movq	8(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB8_758
# BB#971:                               # %L11724.i
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-75, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$16, %rax
	ja	.LBB8_758
# BB#972:                               # %L11724.i
	jmpq	*.LJTI8_4(,%rax,8)
.LBB8_973:                              # %L1272.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB8_758
# BB#974:                               # %L11735.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB8_975
# BB#982:                               # %L1273.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262255, %rcx           # imm = 0x4006F
	jne	.LBB8_758
# BB#983:                               # %L1274.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_758
# BB#984:                               # %land.lhs.true78.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_758
# BB#985:                               # %L1275.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_758
# BB#986:                               # %land.lhs.true90.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_758
# BB#987:                               # %L1276.i
	movq	16(%r14), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#988:                               # %if.then101.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#989:                               # %if.then109.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#990:                               # %L1279.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#991:                               # %land.lhs.true133.i9240
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#992:                               # %land.lhs.true138.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#993:                               # %land.lhs.true140.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$189, %rax
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_967:                              # %L11714
	addq	$-72, %rcx
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$18, %rcx
	ja	.LBB8_758
# BB#968:                               # %L11714
	jmpq	*.LJTI8_3(,%rcx,8)
.LBB8_1233:                             # %L6973.i
	movq	8(%r15), %rcx
	movzbl	(%rcx), %edx
	cmpq	$111, %rdx
	jne	.LBB8_758
# BB#1234:                              # %L6974.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$3407933, %rsi          # imm = 0x34003D
	jne	.LBB8_758
# BB#1235:                              # %land.lhs.true1882.i
	movl	8(%rdx), %edx
	cmpq	$17, %rdx
	jne	.LBB8_758
# BB#1236:                              # %L6975.i
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB8_758
# BB#1237:                              # %land.lhs.true1895.i
	cmpq	$0, 8(%rcx)
	jne	.LBB8_758
# BB#1238:                              # %L6976.i
	movq	16(%r15), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB8_758
# BB#1239:                              # %land.lhs.true1908.i
	movq	8(%rcx), %rcx
	cmpq	$-1, %rcx
	jne	.LBB8_758
# BB#1240:                              # %L6977.i
	movq	24(%r15), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB8_758
# BB#1241:                              # %land.lhs.true1921.i
	cmpq	$0, 8(%rcx)
	jne	.LBB8_758
# BB#1242:                              # %L6978.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1243:                              # %L6979.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1244:                              # %land.lhs.true1949.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1245:                              # %land.lhs.true1954.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$613, %rax              # imm = 0x265
	jmp	.LBB8_1180
.LBB8_1115:                             # %L2129.i
	movq	8(%r15), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB8_758
# BB#1116:                              # %L11740.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$119, %rax
	jg	.LBB8_1126
# BB#1117:                              # %L11740.i
	addq	$-61, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$5, %rax
	ja	.LBB8_758
# BB#1118:                              # %L11740.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB8_758
# BB#1119:                              # %L11739.i
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1120:                              # %if.then1102.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1121:                              # %if.then1250.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1122:                              # %L2132.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1123:                              # %land.lhs.true1274.i9310
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1124:                              # %land.lhs.true1279.i9311
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1125:                              # %land.lhs.true1282.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$249, %rax
	je	.LBB8_1136
	jmp	.LBB8_1766
.LBB8_1145:                             # %L2504.i
	movq	8(%r15), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1146:                              # %if.then1299.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1147:                              # %if.then1307.i9318
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_758
# BB#1148:                              # %L2507.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1149:                              # %if.then1325.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327760, %rax           # imm = 0x50050
	jne	.LBB8_758
# BB#1150:                              # %L2509.i
	movq	8(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1151:                              # %L2510.i
	movq	16(%rbx), %rbx
	movq	recog_data+24(%rip), %rax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_1157
# BB#1152:                              # %land.lhs.true1355.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1157
# BB#1153:                              # %land.lhs.true1355.i
	movl	optimize_size(%rip), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB8_1157
# BB#1154:                              # %land.lhs.true1360.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_cltd(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rsi
	jne	.LBB8_1157
# BB#1155:                              # %land.lhs.true1360.i
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_1157
# BB#1156:                              # %if.then1366.i
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$268, %rax              # imm = 0x10C
	jmp	.LBB8_1766
.LBB8_1163:                             # %L2682.i
	movq	8(%r15), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1164:                              # %if.then1389.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1165:                              # %if.then1397.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_758
# BB#1166:                              # %L2685.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1167:                              # %if.then1415.i
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327762, %rax           # imm = 0x50052
	jne	.LBB8_758
# BB#1168:                              # %L2687.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1169:                              # %L2688.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1170:                              # %land.lhs.true1445.i
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB8_758
# BB#1171:                              # %land.lhs.true1445.i
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_758
# BB#1172:                              # %if.then1450.i
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$275, %rax              # imm = 0x113
	jmp	.LBB8_1766
.LBB8_1173:                             # %L3269.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB8_758
# BB#1174:                              # %L3270.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1175:                              # %if.then1470.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_zext_immediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1176:                              # %if.then1478.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1177:                              # %L3273.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1178:                              # %land.lhs.true1502.i9330
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1179:                              # %land.lhs.true1507.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$312, %rax              # imm = 0x138
.LBB8_1180:                             # %land.lhs.true1507.i
	testq	$2, %rcx
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1181:                             # %L3539.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB8_758
# BB#1182:                              # %L3540.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1183:                              # %if.then1530.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_zext_immediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1184:                              # %if.then1538.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1185:                              # %L3543.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1186:                              # %land.lhs.true1562.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1187:                              # %land.lhs.true1567.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1188:                              # %land.lhs.true1570.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$330, %rax              # imm = 0x14A
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1221:                             # %L4416.i
	movq	8(%r15), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1222:                              # %if.then1774.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1223:                              # %if.then1782.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1224:                              # %L4419.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1225:                              # %land.lhs.true1806.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1226:                              # %land.lhs.true1811.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$406, %rax              # imm = 0x196
	jmp	.LBB8_1211
.LBB8_1227:                             # %L4678.i
	movq	8(%r15), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1228:                              # %if.then1821.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1229:                              # %if.then1829.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1230:                              # %L4681.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1231:                              # %land.lhs.true1853.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1232:                              # %land.lhs.true1858.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$424, %rax              # imm = 0x1A8
	jmp	.LBB8_1211
.LBB8_1189:                             # %L3826.i
	movq	8(%r15), %r14
	movl	(%r14), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB8_758
# BB#1190:                              # %L11742.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$120, %rax
	jg	.LBB8_1212
# BB#1191:                              # %L11742.i
	cmpq	$61, %rax
	je	.LBB8_1205
# BB#1192:                              # %L11742.i
	cmpq	$63, %rax
	jne	.LBB8_1193
.LBB8_1205:                             # %L11743.i
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1206:                              # %if.then1592.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1207:                              # %if.then1735.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1208:                              # %L5042.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1209:                              # %land.lhs.true1759.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1210:                              # %land.lhs.true1764.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$449, %rax              # imm = 0x1C1
.LBB8_1211:                             # %land.lhs.true1764.i
	testq	$2, %rcx
	jne	.LBB8_758
	jmp	.LBB8_1766
.LBB8_68:                               # %if.end189.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB8_71
# BB#69:                                # %if.then192.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_70
# BB#84:                                # %L1779.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_70
# BB#85:                                # %land.lhs.true293.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_70
# BB#86:                                # %land.lhs.true298.i
	movzbl	target_flags+3(%rip), %edx
	movq	$227, %rax
	testq	$2, %rdx
	je	.LBB8_1766
.LBB8_70:                               # %if.end270.i
	movq	8(%rcx), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_71:                               # %L1803.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB8_5
# BB#72:                                # %if.then197.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#73:                                # %L1805.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#74:                                # %land.lhs.true335.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#75:                                # %land.lhs.true340.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$228, %rax
	testq	$2, %rcx
	jne	.LBB8_1766
	jmp	.LBB8_5
.LBB8_202:                              # %L11613.i.i
	cmpq	$89, %rax
	jne	.LBB8_28
# BB#203:                               # %L4693.i.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#204:                               # %L4694.i.i
	movq	(%rsp), %rax            # 8-byte Reload
	movq	16(%rax), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#205:                               # %if.then566.i.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262231, %rax           # imm = 0x40057
	jne	.LBB8_28
# BB#206:                               # %L4696.i.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#207:                               # %if.then587.i.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131148, %rcx           # imm = 0x2004C
	jne	.LBB8_28
# BB#208:                               # %L4698.i.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB8_28
# BB#209:                               # %land.lhs.true609.i.i
	movq	8(%rcx), %rcx
	cmpq	$32, %rcx
	jne	.LBB8_28
# BB#210:                               # %L4699.i.i
	movq	16(%rax), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_28
# BB#211:                               # %L4700.i.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_28
# BB#212:                               # %L4701.i.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_28
# BB#213:                               # %land.lhs.true645.i.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$425, %rax              # imm = 0x1A9
	je	.LBB8_1766
.LBB8_28:                               # %if.end785.i
	movq	8(%r13), %r14
.LBB8_29:                               # %L11567.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_5
# BB#30:                                # %if.then8.i
	movq	%r14, recog_data(%rip)
	movq	16(%r13), %r13
	movl	(%r13), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB8_31
# BB#308:                               # %L11618.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$120, %rax
	jg	.LBB8_325
# BB#309:                               # %L11618.i
	cmpq	$60, %rax
	jg	.LBB8_316
# BB#310:                               # %L11618.i
	cmpq	$43, %rax
	jne	.LBB8_31
# BB#311:                               # %L11624.i
	movq	8(%r13), %rax
	movl	(%rax), %ecx
	cmpq	$1, %rcx
	jne	.LBB8_31
# BB#312:                               # %land.lhs.true1285.i
	movl	16(%r13), %ecx
	cmpq	$1, %rcx
	jne	.LBB8_31
# BB#313:                               # %L5963.i
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB8_31
# BB#314:                               # %L5964.i
	movq	8(%rbx), %rdi
	movq	%r14, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_315
# BB#381:                               # %L5965.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB8_315
# BB#382:                               # %L5966.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	symbolic_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_315
# BB#383:                               # %if.then1333.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262220, %rcx           # imm = 0x4004C
	jne	.LBB8_315
# BB#384:                               # %L5968.i
	movq	8(%rax), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$59, %rcx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, %rbx
	jne	.LBB8_32
# BB#385:                               # %L5969.i
	movq	%rbx, %rsi
	movq	16(%rax), %rax
	movq	%rax, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_349
# BB#386:                               # %L5971.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_349
# BB#387:                               # %land.lhs.true1390.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_349
# BB#388:                               # %land.lhs.true1395.i
	movzbl	target_flags+3(%rip), %edx
	movq	$518, %rax              # imm = 0x206
	testq	$2, %rdx
	jne	.LBB8_349
	jmp	.LBB8_1766
.LBB8_31:
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	jmp	.LBB8_32
.LBB8_325:                              # %L11618.i
	cmpq	$121, %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	jne	.LBB8_32
# BB#326:                               # %L682.i
	movq	8(%r13), %r14
	movzbl	2(%r14), %eax
	cmpq	$2, %rax
	jne	.LBB8_327
# BB#335:                               # %L11626.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#336:                               # %if.then896.i
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_337
# BB#338:                               # %L730.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB8_337
# BB#339:                               # %L11627.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB8_337
# BB#340:                               # %L11629.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_337
# BB#341:                               # %L11631.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_zero_extend_with_and(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%rbx, %rsi
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rax
	jne	.LBB8_343
# BB#342:                               # %L11631.i
	movq	%rdx, %rax
.LBB8_343:                              # %L11631.i
	movl	optimize_size(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB8_345
# BB#344:                               # %L11631.i
	movq	%rdx, %rcx
.LBB8_345:                              # %L11631.i
	orq	%rcx, %rax
	orq	$112, %rax
	jmp	.LBB8_1766
.LBB8_316:                              # %L11618.i
	cmpq	$71, %rax
	jg	.LBB8_323
# BB#317:                               # %L11618.i
	cmpq	$61, %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	je	.LBB8_319
# BB#318:                               # %L11618.i
	cmpq	$63, %rax
	jne	.LBB8_32
.LBB8_319:                              # %L11617.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#320:                               # %if.then827.i
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	movzbl	(%r14), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_337
# BB#321:                               # %L338.i
	movq	8(%r14), %rdi
	movq	%r13, %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	je	.LBB8_322
# BB#401:                               # %L339.i
	movq	16(%r14), %rdi
	movq	recog_data(%rip), %rsi
	callq	rtx_equal_p
	testq	%rbx, %rax
	movq	$48, %rax
	jne	.LBB8_1766
.LBB8_322:                              # %if.end1542.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_337:                              # %if.end908.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
	jmp	.LBB8_32
.LBB8_327:                              # %L682.i
	cmpq	$3, %rax
	jne	.LBB8_32
# BB#328:                               # %L11625.i
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#329:                               # %if.then842.i
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_330
# BB#331:                               # %L684.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_330
# BB#332:                               # %land.lhs.true874.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_330
# BB#333:                               # %land.lhs.true879.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_zero_extend_with_and(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%rbx, %rdi
	je	.LBB8_330
# BB#334:                               # %land.lhs.true879.i
	movl	optimize_size(%rip), %ecx
	movq	$107, %rax
	testq	%rbx, %rcx
	je	.LBB8_1766
.LBB8_330:                              # %if.end854.i
	movq	8(%rdx), %rax
	movq	16(%rax), %r13
	jmp	.LBB8_32
.LBB8_323:                              # %L11618.i
	addq	$-72, %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$9, %rax
	ja	.LBB8_32
# BB#324:                               # %L11618.i
	jmpq	*.LJTI8_8(,%rax,8)
.LBB8_389:                              # %L7001.i
	movq	8(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$111, %rcx
	jne	.LBB8_32
# BB#390:                               # %L7002.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_32
# BB#391:                               # %land.lhs.true1427.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_32
# BB#392:                               # %L7003.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_32
# BB#393:                               # %land.lhs.true1440.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_32
# BB#394:                               # %L7004.i
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_32
# BB#395:                               # %land.lhs.true1453.i
	movq	8(%rax), %rax
	cmpq	$-1, %rax
	jne	.LBB8_32
# BB#396:                               # %L7005.i
	movq	24(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_32
# BB#397:                               # %land.lhs.true1466.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_32
# BB#398:                               # %L7006.i
	movq	%rbx, %rsi
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_349
# BB#399:                               # %L7007.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_349
# BB#400:                               # %land.lhs.true1502.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$615, %rax              # imm = 0x267
	jne	.LBB8_349
	jmp	.LBB8_1766
.LBB8_346:                              # %L2143.i
	movq	8(%r13), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#347:                               # %if.then987.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#348:                               # %if.then995.i
	movq	%rbx, %rsi
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_349
# BB#350:                               # %L2146.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_349
# BB#351:                               # %land.lhs.true1027.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_349
# BB#352:                               # %land.lhs.true1032.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$250, %rax
	jne	.LBB8_1766
# BB#353:                               # %lor.lhs.false1037.i
	movzbl	(%r14), %edx
	cmpq	$66, %rdx
	jne	.LBB8_1766
.LBB8_349:                              # %if.end1007.i
	movq	8(%rcx), %rax
	movq	16(%rax), %r13
	movq	%rsi, %rbx
	jmp	.LBB8_32
.LBB8_354:                              # %L2581.i
	movq	8(%r13), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#355:                               # %if.then1057.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#356:                               # %if.then1065.i
	movq	%r14, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_357
# BB#358:                               # %L2584.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_380
# BB#359:                               # %if.then1091.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262224, %rax           # imm = 0x40050
	jne	.LBB8_380
# BB#360:                               # %L2586.i
	movq	8(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_380
# BB#361:                               # %L2587.i
	movq	16(%rbx), %rbx
	movq	recog_data+24(%rip), %rax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_366
# BB#362:                               # %L2587.i
	movl	optimize_size(%rip), %eax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB8_366
# BB#363:                               # %land.lhs.true1147.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_cltd(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rsi
	jne	.LBB8_366
# BB#364:                               # %land.lhs.true1147.i
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_366
# BB#365:                               # %if.then1153.i
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$271, %rax              # imm = 0x10F
	jmp	.LBB8_1766
.LBB8_371:                              # %L2734.i
	movq	8(%r13), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#372:                               # %if.then1181.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB8_32
# BB#373:                               # %if.then1189.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_357
# BB#374:                               # %L2737.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_380
# BB#375:                               # %if.then1215.i
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262226, %rax           # imm = 0x40052
	jne	.LBB8_380
# BB#376:                               # %L2739.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_380
# BB#377:                               # %L2740.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_380
# BB#378:                               # %L2740.i
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_380
# BB#379:                               # %if.then1271.i
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$277, %rax              # imm = 0x115
	jmp	.LBB8_1766
.LBB8_994:                              # %L1950.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#995:                               # %if.then192.i9246
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB8_996
# BB#1002:                              # %L1952.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262255, %rcx           # imm = 0x4006F
	jne	.LBB8_758
# BB#1003:                              # %L1953.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1004:                              # %land.lhs.true237.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_758
# BB#1005:                              # %L1954.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_758
# BB#1006:                              # %land.lhs.true250.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_758
# BB#1007:                              # %L1955.i
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1008:                              # %if.then262.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1009:                              # %L1957.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1010:                              # %land.lhs.true286.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1011:                              # %land.lhs.true291.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1012:                              # %land.lhs.true294.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$236, %rax
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1013:                             # %L2158.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1014:                              # %if.then338.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1015:                              # %if.then346.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1016:                              # %L2161.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1017:                              # %land.lhs.true370.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1018:                              # %land.lhs.true375.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1019:                              # %land.lhs.true378.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$251, %rax
	jne	.LBB8_1766
# BB#1020:                              # %lor.lhs.false.i
	movzbl	(%rbx), %ecx
	cmpq	$66, %rcx
	je	.LBB8_758
	jmp	.LBB8_1766
.LBB8_1021:                             # %L2933.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1022:                              # %if.then394.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1023:                              # %if.then402.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1024:                              # %L2936.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1025:                              # %land.lhs.true426.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1026:                              # %land.lhs.true431.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1027:                              # %land.lhs.true434.i
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$293, %rax              # imm = 0x125
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1028:                             # %L3254.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1029:                              # %if.then444.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1030:                              # %if.then452.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1031:                              # %L3257.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1032:                              # %land.lhs.true476.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1033:                              # %land.lhs.true481.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1034:                              # %land.lhs.true484.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$311, %rax              # imm = 0x137
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1035:                             # %L3524.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1036:                              # %if.then494.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1037:                              # %if.then502.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1038:                              # %L3527.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1039:                              # %land.lhs.true526.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1040:                              # %land.lhs.true531.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1041:                              # %land.lhs.true534.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$329, %rax              # imm = 0x149
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1042:                             # %L4470.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1043:                              # %if.then544.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1044:                              # %if.then552.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1045:                              # %L4473.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1046:                              # %land.lhs.true576.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1047:                              # %land.lhs.true581.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1048:                              # %land.lhs.true584.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$409, %rax              # imm = 0x199
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1083:                             # %L5318.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1084:                              # %if.then848.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_1087
# BB#1085:                              # %if.then856.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1086
# BB#1093:                              # %L5321.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_1098
# BB#1094:                              # %land.lhs.true899.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1098
# BB#1095:                              # %land.lhs.true904.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1098
# BB#1096:                              # %land.lhs.true907.i
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_1098
# BB#1097:                              # %land.lhs.true910.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$469, %rax              # imm = 0x1D5
	je	.LBB8_1766
.LBB8_1098:                             # %if.end915.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1086:                             # %if.end873.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_1087:                             # %L5349.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1088:                              # %if.then861.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1089:                              # %L5351.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1090:                              # %land.lhs.true951.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1091:                              # %land.lhs.true956.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1092:                              # %land.lhs.true959.i
	movabsq	$recog_data, %rax
	movq	$88, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$471, %rax              # imm = 0x1D7
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1049:                             # %L4732.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1050:                              # %if.then594.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_1051
# BB#1057:                              # %L11737.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_1060
# BB#1058:                              # %if.then612.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1059
# BB#1063:                              # %L4735.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1059
# BB#1064:                              # %land.lhs.true655.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB8_1059
# BB#1065:                              # %land.lhs.true660.i9270
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB8_1059
# BB#1066:                              # %land.lhs.true663.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_cltd(%rip), %edx
	movl	optimize_size(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rdx, %rdi
	orq	%rdi, %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rsi
	je	.LBB8_1059
# BB#1067:                              # %land.lhs.true668.i9272
	movq	8(%rbx), %rcx
	cmpq	$31, %rcx
	jne	.LBB8_1059
# BB#1068:                              # %land.lhs.true674.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$427, %rax              # imm = 0x1AB
	jne	.LBB8_1766
# BB#1069:                              # %land.lhs.true674.if.end678_crit_edge.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1059:                             # %if.end629.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_1060:                             # %L11738.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_1051
# BB#1061:                              # %if.then617.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1062
# BB#1070:                              # %L4765.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_1075
# BB#1071:                              # %land.lhs.true728.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1075
# BB#1072:                              # %land.lhs.true733.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1075
# BB#1073:                              # %land.lhs.true736.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_1075
# BB#1074:                              # %land.lhs.true739.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$429, %rax              # imm = 0x1AD
	je	.LBB8_1766
.LBB8_1075:                             # %if.end744.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1062:                             # %if.end702.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_1051:                             # %L4793.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1052:                              # %if.then607.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1053:                              # %L4795.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1054:                              # %land.lhs.true780.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1055:                              # %land.lhs.true785.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1056:                              # %land.lhs.true788.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$431, %rax              # imm = 0x1AF
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1076:                             # %L5098.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1077:                              # %if.then798.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1078:                              # %if.then806.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1079:                              # %L5101.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1080:                              # %land.lhs.true830.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1081:                              # %land.lhs.true835.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1082:                              # %land.lhs.true838.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$453, %rax              # imm = 0x1C5
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1099:                             # %L5462.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1100:                              # %if.then969.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_1103
# BB#1101:                              # %if.then977.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1102
# BB#1109:                              # %L5465.i
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_1114
# BB#1110:                              # %land.lhs.true1020.i9292
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1114
# BB#1111:                              # %land.lhs.true1025.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1114
# BB#1112:                              # %land.lhs.true1028.i
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_1114
# BB#1113:                              # %land.lhs.true1031.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$479, %rax              # imm = 0x1DF
	je	.LBB8_1766
.LBB8_1114:                             # %if.end1036.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1102:                             # %if.end994.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_1103:                             # %L5493.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1104:                              # %if.then982.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1105:                              # %L5495.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1106:                              # %land.lhs.true1072.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1107:                              # %land.lhs.true1077.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1108:                              # %land.lhs.true1080.i
	movabsq	$recog_data, %rax
	movq	$91, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$481, %rax              # imm = 0x1E1
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_975:                              # %if.end49.i
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#976:                               # %if.then52.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#977:                               # %if.then150.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#978:                               # %L1486.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#979:                               # %land.lhs.true174.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#980:                               # %land.lhs.true179.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#981:                               # %land.lhs.true182.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$208, %rax
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1126:                             # %L11740.i
	cmpq	$120, %rax
	jne	.LBB8_1127
# BB#1137:                              # %L2292.i
	movq	8(%r14), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1138:                              # %if.then1180.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327800, %rcx           # imm = 0x50078
	jne	.LBB8_758
# BB#1139:                              # %L2294.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1140:                              # %if.then1201.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1141:                              # %L2296.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1142:                              # %land.lhs.true1225.i9304
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1143:                              # %land.lhs.true1230.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB8_758
# BB#1144:                              # %land.lhs.true1233.i9306
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$259, %rax              # imm = 0x103
	je	.LBB8_1136
	jmp	.LBB8_1766
.LBB8_1157:                             # %L2534.i
	movq	recog_data+24(%rip), %rax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1158:                              # %land.lhs.true1371.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1159:                              # %land.lhs.true1374.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_1161
# BB#1160:                              # %lor.lhs.false1376.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_cltd(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rsi
	je	.LBB8_758
.LBB8_1161:                             # %land.lhs.true1380.i
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_758
# BB#1162:                              # %if.then1382.i
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$269, %rax              # imm = 0x10D
	jmp	.LBB8_1766
.LBB8_1212:                             # %L11742.i
	cmpq	$121, %rax
	jne	.LBB8_758
# BB#1213:                              # %L5068.i
	movq	8(%r14), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1214:                              # %if.then1681.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1215:                              # %if.then1689.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1216:                              # %L5071.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1217:                              # %land.lhs.true1713.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1218:                              # %land.lhs.true1718.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1219:                              # %land.lhs.true1721.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1220:                              # %land.lhs.true1724.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$451, %rax              # imm = 0x1C3
	je	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1193:                             # %L11742.i
	cmpq	$77, %rax
	jne	.LBB8_758
# BB#1194:                              # %L3827.i
	movq	8(%r14), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327767, %rax           # imm = 0x50057
	jne	.LBB8_758
# BB#1195:                              # %L3828.i
	movq	8(%r14), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1196:                              # %if.then1613.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_758
# BB#1197:                              # %land.lhs.true1622.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB8_758
# BB#1198:                              # %L3830.i
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_758
# BB#1199:                              # %land.lhs.true1635.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB8_758
# BB#1200:                              # %L3831.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1201:                              # %L3832.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1202:                              # %land.lhs.true1663.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1203:                              # %land.lhs.true1668.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1204:                              # %land.lhs.true1671.i
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$348, %rax              # imm = 0x15C
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_366:                              # %L2611.i
	movq	recog_data+24(%rip), %rax
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_380
# BB#367:                               # %land.lhs.true1158.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_369
# BB#368:                               # %lor.lhs.false1160.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_cltd(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rsi
	je	.LBB8_380
.LBB8_369:                              # %land.lhs.true1164.i
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_380
# BB#370:                               # %if.then1166.i
	movq	$1, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$272, %rax              # imm = 0x110
	jmp	.LBB8_1766
.LBB8_996:                              # %if.end207.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#997:                               # %if.then210.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#998:                               # %L1991.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#999:                               # %land.lhs.true320.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1000:                              # %land.lhs.true325.i9254
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_758
# BB#1001:                              # %land.lhs.true328.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$238, %rax
	jne	.LBB8_1766
	jmp	.LBB8_758
.LBB8_1127:                             # %L11740.i
	cmpq	$121, %rax
	jne	.LBB8_758
# BB#1128:                              # %L2256.i
	movq	8(%r14), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1129:                              # %if.then1110.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB8_758
# BB#1130:                              # %L2258.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_758
# BB#1131:                              # %if.then1131.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_758
# BB#1132:                              # %L2260.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_758
# BB#1133:                              # %land.lhs.true1155.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_758
# BB#1134:                              # %land.lhs.true1160.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB8_758
# BB#1135:                              # %land.lhs.true1163.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$257, %rax              # imm = 0x101
	jne	.LBB8_1766
.LBB8_1136:                             # %lor.lhs.false1168.i
	movzbl	(%rbx), %ecx
	cmpq	$66, %rcx
	jne	.LBB8_1766
.LBB8_758:                              # %L548
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	const0_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB8_761
# BB#759:                               # %if.then1548
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_760
# BB#1246:                              # %L550
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_760
# BB#1247:                              # %land.lhs.true1592
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_760
# BB#1248:                              # %land.lhs.true1597
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_760
# BB#1249:                              # %land.lhs.true1600
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	testq	%rbx, %rsi
	movabsq	$0, %rax
	movabsq	$1, %rsi
	movq	%rax, %rcx
	jne	.LBB8_1251
# BB#1250:                              # %land.lhs.true1600
	movq	%rsi, %rcx
.LBB8_1251:                             # %land.lhs.true1600
	movl	optimize_size(%rip), %edi
	testq	%rdi, %rdi
	je	.LBB8_1253
# BB#1252:                              # %land.lhs.true1600
	movq	%rsi, %rax
.LBB8_1253:                             # %land.lhs.true1600
	orq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB8_760
# BB#1254:                              # %land.lhs.true1600
	movl	reload_completed(%rip), %ecx
	movq	$81, %rax
	testq	%rbx, %rcx
	jne	.LBB8_1766
.LBB8_760:                              # %if.end1572
	movq	8(%rdx), %r12
	movq	16(%r12), %r13
.LBB8_761:                              # %L558
	movq	$5, %rsi
	movq	%r13, %rdi
	callq	const_int_operand
	testq	%rbx, %rax
	je	.LBB8_957
# BB#762:                               # %if.then1553
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_763
# BB#1255:                              # %L560
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_763
# BB#1256:                              # %land.lhs.true1647
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_763
# BB#1257:                              # %land.lhs.true1652
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_763
# BB#1258:                              # %land.lhs.true1655
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movabsq	$0, %rax
	movabsq	$1, %rsi
	movq	%rax, %rdx
	jne	.LBB8_1260
# BB#1259:                              # %land.lhs.true1655
	movq	%rsi, %rdx
.LBB8_1260:                             # %land.lhs.true1655
	movl	optimize_size(%rip), %edi
	testq	%rdi, %rdi
	je	.LBB8_1262
# BB#1261:                              # %land.lhs.true1655
	movq	%rsi, %rax
.LBB8_1262:                             # %land.lhs.true1655
	orq	%rax, %rdx
	je	.LBB8_763
# BB#1263:                              # %land.lhs.true1655
	movl	reload_completed(%rip), %eax
	testq	%rbx, %rax
	je	.LBB8_763
# BB#1264:                              # %land.lhs.true1661
	movzbl	(%r13), %eax
	cmpq	$54, %rax
	jne	.LBB8_763
# BB#1265:                              # %land.lhs.true1666
	movq	8(%r13), %rax
	cmpq	$-1, %rax
	movq	$82, %rax
	je	.LBB8_1766
.LBB8_763:                              # %if.end1627
	movq	8(%rcx), %r12
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_957:                              # %if.end1555
	movq	8(%r12), %r15
	jmp	.LBB8_5
.LBB8_380:                              # %if.end1093.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_357:                              # %if.end1077.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_315:
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %rbx
.LBB8_32:                               # %L302.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	const0_operand
	testq	%rbx, %rax
	je	.LBB8_35
# BB#33:                                # %if.then807.i
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_34
# BB#402:                               # %L304.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_34
# BB#403:                               # %land.lhs.true1596.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_34
# BB#404:                               # %land.lhs.true1596.i
	movl	reload_completed(%rip), %eax
	testq	%rbx, %rax
	je	.LBB8_34
# BB#405:                               # %land.lhs.true1603.i
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	testq	%rbx, %rsi
	movq	$43, %rax
	je	.LBB8_1766
# BB#406:                               # %land.lhs.true1603.i
	movl	optimize_size(%rip), %ecx
	testq	%rbx, %rcx
	jne	.LBB8_1766
.LBB8_34:                               # %if.end1576.i
	movq	8(%rdx), %rax
	movq	16(%rax), %r13
.LBB8_35:                               # %L312.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	immediate_operand
	testq	%rbx, %rax
	je	.LBB8_5
# BB#36:                                # %if.then812.i
	movq	%r13, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_5
# BB#37:                                # %L314.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_5
# BB#38:                                # %land.lhs.true1640.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_5
# BB#39:                                # %land.lhs.true1640.i
	movl	reload_completed(%rip), %eax
	testq	%rbx, %rax
	je	.LBB8_5
# BB#40:                                # %land.lhs.true1647.i
	movzbl	(%r13), %eax
	cmpq	$54, %rax
	jne	.LBB8_5
# BB#41:                                # %land.lhs.true1652.i
	movq	8(%r13), %rax
	cmpq	$-1, %rax
	jne	.LBB8_5
# BB#42:                                # %land.lhs.true1658.i
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$44, %rax
	je	.LBB8_1766
# BB#43:                                # %land.lhs.true1658.i
	movl	optimize_size(%rip), %ecx
	testq	%rbx, %rcx
	jne	.LBB8_1766
.LBB8_5:                                # %L383
	movzbl	(%r15), %eax
	cmpq	$59, %rax
	je	.LBB8_2365
# BB#6:                                 # %L383
	cmpq	$61, %rax
	jne	.LBB8_7
# BB#1809:                              # %L11591
	movl	8(%r15), %eax
	cmpq	$17, %rax
	jne	.LBB8_8
# BB#1810:                              # %L1404
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$74, %rcx
	jne	.LBB8_1811
# BB#1812:                              # %L1405
	movq	8(%rax), %rax
	movzbl	2(%rax), %eax
	addq	$-2, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$3, %rax
	jbe	.LBB8_1813
# BB#1814:                              # %sw.epilog6376
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_2365:                             # %L5862
	movq	16(%r12), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$4, %rax
	jne	.LBB8_2366
# BB#2369:                              # %L11899
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_2367
# BB#2370:                              # %if.then6428
	movq	%rbx, recog_data(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB8_2371
# BB#2372:                              # %L5864
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB8_2371
# BB#2373:                              # %L5865
	movq	8(%rcx), %rax
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, recog_data+8(%rip)
	movq	$505, %rax              # imm = 0x1F9
	testq	$2, %rcx
	jne	.LBB8_2374
	jmp	.LBB8_1766
.LBB8_7:                                # %L383
	cmpq	$64, %rax
	jne	.LBB8_8
# BB#1767:                              # %L384
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$2, %rax
	jne	.LBB8_1768
# BB#1780:                              # %L11803
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	q_regs_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB8_1785
# BB#1781:                              # %if.then6115
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r14, %rax
	je	.LBB8_1784
# BB#1782:                              # %if.then6128
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_1783
# BB#1788:                              # %L423
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_1783
# BB#1789:                              # %land.lhs.true6169
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1783
# BB#1790:                              # %land.lhs.true6169
	movl	reload_completed(%rip), %eax
	testq	%r14, %rax
	je	.LBB8_1783
# BB#1791:                              # %land.lhs.true6176
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	testq	%r14, %rsi
	movq	$63, %rax
	je	.LBB8_1766
# BB#1792:                              # %land.lhs.true6176
	movl	optimize_size(%rip), %ecx
	testq	%r14, %rcx
	jne	.LBB8_1766
.LBB8_1783:                             # %if.end6146
	movq	8(%rdx), %r12
.LBB8_1784:                             # %if.end6130
	movq	8(%r12), %r15
	movq	8(%r15), %rbx
.LBB8_1785:                             # %L11804
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r14, %rax
	je	.LBB8_8
# BB#1786:                              # %if.then6120
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$131072, %rcx           # imm = 0x20000
	jne	.LBB8_1787
# BB#1793:                              # %L11805
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	jne	.LBB8_1794
# BB#1796:                              # %L3017
	movq	8(%r15), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_1797
# BB#1798:                              # %L3018
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB8_2443
# BB#1799:                              # %if.then6232
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1800
# BB#1801:                              # %L3020
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1800
# BB#1802:                              # %land.lhs.true6267
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$299, %rax              # imm = 0x12B
	je	.LBB8_1766
	jmp	.LBB8_1800
.LBB8_2366:                             # %L5862
	cmpq	$5, %rax
	jne	.LBB8_2367
# BB#2375:                              # %L11900
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB8_2367
# BB#2376:                              # %if.then6483
	movq	%rbx, recog_data(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB8_2371
# BB#2377:                              # %L5872
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB8_2371
# BB#2378:                              # %L5873
	movq	8(%rcx), %rax
	movzbl	target_flags+3(%rip), %ecx
	movq	%rax, recog_data+8(%rip)
	movq	$506, %rax              # imm = 0x1FA
	testq	$2, %rcx
	jne	.LBB8_1766
.LBB8_2374:                             # %if.end6472
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2371:                             # %if.end6440
	movq	8(%rax), %r12
	movq	16(%r12), %rbx
.LBB8_2367:                             # %L5897
	movzbl	(%rbx), %eax
	cmpq	$72, %rax
	jne	.LBB8_2368
# BB#2379:                              # %L5898
	movq	8(%rbx), %r13
	movzbl	(%r13), %eax
	cmpq	$102, %rax
	jne	.LBB8_2380
# BB#2381:                              # %L5899
	movq	8(%r13), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB8_2443
# BB#2382:                              # %if.then6552
	movq	%r14, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2384
# BB#2383:                              # %land.lhs.true6564
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB8_2384
# BB#2385:                              # %L5901
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB8_2386
# BB#2387:                              # %L5902
	movq	8(%rax), %rax
	movq	%rax, recog_data(%rip)
	movq	24(%rbx), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB8_2388
# BB#2389:                              # %L5904
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_2390
# BB#2391:                              # %L5905
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB8_2400
# BB#2392:                              # %if.then6623
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB8_2400
# BB#2393:                              # %L5907
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2400
# BB#2394:                              # %L5908
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2400
# BB#2395:                              # %land.lhs.true6677
	movq	8(%rax), %rax
	cmpq	$-1, %rax
	jne	.LBB8_2400
# BB#2396:                              # %land.lhs.true6682
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB8_2400
# BB#2397:                              # %land.lhs.true6685
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_loop(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB8_2400
# BB#2398:                              # %land.lhs.true6685
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	je	.LBB8_2400
# BB#2399:                              # %if.then6691
	movq	$2, %rax
	movq	8(%rsp), %rcx           # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$507, %rax              # imm = 0x1FB
	jmp	.LBB8_1766
.LBB8_2368:                             # %if.end6422
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1811:                             # %if.end6361
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1768:                             # %L384
	cmpq	$3, %rax
	jne	.LBB8_8
# BB#1769:                              # %L11802
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB8_8
# BB#1770:                              # %if.then6043
	movq	%rbx, recog_data(%rip)
	movq	16(%r12), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r14, %rax
	je	.LBB8_2443
# BB#1771:                              # %if.then6051
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rdx
	movq	16(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_1772
# BB#1773:                              # %L387
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB8_1772
# BB#1774:                              # %land.lhs.true6086
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB8_1772
# BB#1775:                              # %land.lhs.true6086
	movl	reload_completed(%rip), %eax
	testq	%r14, %rax
	je	.LBB8_1772
# BB#1776:                              # %land.lhs.true6093
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %esi
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rsi
	testq	%r14, %rsi
	je	.LBB8_1777
# BB#1779:                              # %lor.lhs.false6101
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	movq	$57, %rax
	jne	.LBB8_1766
	jmp	.LBB8_1772
.LBB8_2380:                             # %if.end6543
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1813:                             # %L1405
	jmpq	*.LJTI8_9(,%rax,8)
.LBB8_2167:                             # %L11816
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %r13
	movq	8(%r13), %rbx
	movzbl	(%rbx), %eax
	addq	$-61, %rax
	andq	%r15, %rax
	cmpq	$29, %rax
	ja	.LBB8_2181
# BB#2168:                              # %L11816
	jmpq	*.LJTI8_10(,%rax,8)
.LBB8_2169:                             # %L11818.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2170:                              # %if.then.i9746
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB8_2173
# BB#2171:                              # %if.then1534.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_2172
# BB#2361:                              # %L1740.i
	movq	8(%rcx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2364
# BB#2362:                              # %if.then1568.i
	movq	%rbx, recog_data(%rip)
	movq	$53, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2364
# BB#2363:                              # %land.lhs.true1584.i
	movq	recog_data+16(%rip), %rax
	movzbl	8(%rax), %eax
	cmpq	$128, %rax
	movq	$225, %rax
	jne	.LBB8_1766
.LBB8_2364:                             # %if.end1570.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2172:                             # %if.end1551.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_2173:                             # %L2119.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2174:                              # %if.then1539.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2175:                              # %L2121.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2176:                              # %if.then1618.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196684, %rax           # imm = 0x3004C
	jne	.LBB8_2181
# BB#2177:                              # %L2123.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2178:                              # %L2124.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2179:                              # %land.lhs.true1648.i
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2180:                              # %land.lhs.true1651.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$248, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2384:                             # %if.end6570
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1787:                             # %if.end6203
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1794:                             # %L11805
	cmpq	$84, %rax
	jne	.LBB8_1795
# BB#1803:                              # %L3404
	movq	8(%r15), %rdi
	movq	%rbx, %rsi
	callq	rtx_equal_p
	testq	%r14, %rax
	je	.LBB8_1804
# BB#1805:                              # %L3405
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r14, %rax
	je	.LBB8_2443
# BB#1806:                              # %if.then6298
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rcx
	movq	16(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1800
# BB#1807:                              # %L3407
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB8_1800
# BB#1808:                              # %land.lhs.true6333
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$321, %rax              # imm = 0x141
	je	.LBB8_1766
.LBB8_1800:                             # %if.end6247
	movq	8(%rcx), %r12
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_2443:                             # %if.end6554
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_2002:                             # %L11813
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %r13
	movq	8(%r13), %rbx
	movzbl	(%rbx), %eax
	addq	$-61, %rax
	andq	%r15, %rax
	cmpq	$29, %rax
	ja	.LBB8_2016
# BB#2003:                              # %L11813
	jmpq	*.LJTI8_11(,%rax,8)
.LBB8_2004:                             # %L11815.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2005:                              # %if.then.i9528
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB8_2008
# BB#2006:                              # %if.then1168.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_2007
# BB#2163:                              # %L1649.i
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2166
# BB#2164:                              # %if.then1202.i
	movq	%rbx, recog_data(%rip)
	movq	$53, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2166
# BB#2165:                              # %land.lhs.true1218.i
	movq	recog_data+16(%rip), %rax
	movzbl	8(%rax), %eax
	cmpq	$32768, %rax            # imm = 0x8000
	movq	$219, %rax
	jne	.LBB8_1766
.LBB8_2166:                             # %if.end1204.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2007:                             # %if.end1185.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_2008:                             # %L2081.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2009:                              # %if.then1173.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2010:                              # %L2083.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2011:                              # %if.then1252.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196684, %rax           # imm = 0x3004C
	jne	.LBB8_2016
# BB#2012:                              # %L2085.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2013:                              # %L2086.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2014:                              # %land.lhs.true1282.i9730
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2015:                              # %land.lhs.true1285.i9731
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$245, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2000:                             # %L11810
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	recog_23
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	testq	%rdx, %rdx
	jns	.LBB8_1766
# BB#2001:                              # %if.end6390
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1815:                             # %L11807
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %r13
	movq	8(%r13), %rbx
	movzbl	(%rbx), %eax
	addq	$-61, %rax
	andq	%r15, %rax
	cmpq	$29, %rax
	ja	.LBB8_1830
# BB#1816:                              # %L11807
	jmpq	*.LJTI8_12(,%rax,8)
.LBB8_1817:                             # %L11809.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1818:                              # %if.then.i9352
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_immediate_operand
	testq	%r15, %rax
	je	.LBB8_1821
# BB#1819:                              # %if.then1210.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB8_1820
# BB#1996:                              # %L1438.i
	movq	8(%rcx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_1999
# BB#1997:                              # %if.then1244.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	$2, %rax
	je	.LBB8_1999
# BB#1998:                              # %land.lhs.true1260.i
	movq	$53, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	movq	$205, %rax
	jne	.LBB8_1766
.LBB8_1999:                             # %if.end1246.i9504
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1820:                             # %if.end1227.i
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rbx
.LBB8_1821:                             # %L1917.i
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1822:                              # %if.then1215.i9496
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1823:                              # %L1919.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1824:                              # %if.then1291.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327756, %rax           # imm = 0x5004C
	jne	.LBB8_1830
# BB#1825:                              # %L1921.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1826:                              # %L1922.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1827:                              # %land.lhs.true1321.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1828:                              # %land.lhs.true1324.i
	movq	$52, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1829:                              # %land.lhs.true1327.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$234, %rax
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1795:                             # %sw.epilog6212
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_2386:                             # %if.end6581
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1797:                             # %if.end6223
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_2388:                             # %if.end6596
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1804:                             # %if.end6289
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_2400:                             # %if.end6625
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2390:                             # %if.end6609
	movq	8(%rax), %r12
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1777:                             # %land.lhs.true6097
	movl	x86_partial_reg_stall(%rip), %ecx
	andq	%rax, %rcx
	testq	%r14, %rcx
	movq	$57, %rax
	je	.LBB8_1766
# BB#1778:                              # %land.lhs.true6097
	movl	optimize_size(%rip), %ecx
	testq	%r14, %rcx
	jne	.LBB8_1766
.LBB8_1772:                             # %if.end6066
	movq	8(%rdx), %r12
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_2182:                             # %L1708.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2183:                              # %if.then23.i9755
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2184:                              # %if.then31.i9761
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2185:                              # %land.lhs.true.i9764
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2186:                              # %L1711.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	jne	.LBB8_2187
# BB#2194:                              # %L1757.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2195:                              # %if.then101.i9796
	movq	%rbx, recog_data(%rip)
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2196:                              # %land.lhs.true106.i9800
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$226, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2197
.LBB8_2204:                             # %L2106.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2205:                              # %if.then170.i9842
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2206:                              # %if.then178.i9848
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2207:                              # %land.lhs.true187.i9851
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2208:                              # %L2109.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2209:                              # %L2110.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2210:                              # %if.then209.i9863
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196684, %rax           # imm = 0x3004C
	jne	.LBB8_2181
# BB#2211:                              # %L2112.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2212:                              # %L2113.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2213:                              # %land.lhs.true239.i9874
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2214:                              # %land.lhs.true242.i9877
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$247, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2198:                             # %L1721.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2199:                              # %if.then122.i9813
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2200:                              # %if.then130.i9818
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_2181
# BB#2201:                              # %L1724.i
	movq	8(%rax), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2202:                              # %if.then148.i9825
	movq	%rbx, recog_data(%rip)
	movq	$56, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2203:                              # %land.lhs.true153.i9829
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$224, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2197
.LBB8_2215:                             # %L3033.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$131072, %rax           # imm = 0x20000
	jne	.LBB8_2181
# BB#2216:                              # %L11891.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2222
# BB#2217:                              # %if.then258.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2221
# BB#2218:                              # %if.then271.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2220
# BB#2219:                              # %land.lhs.true283.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2220
# BB#2233:                              # %L3036.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_2234
# BB#2235:                              # %L3037.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2241
# BB#2236:                              # %if.then325.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131155, %rax           # imm = 0x20053
	jne	.LBB8_2241
# BB#2237:                              # %L3039.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2241
# BB#2238:                              # %L3040.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2241
# BB#2239:                              # %land.lhs.true397.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2241
# BB#2240:                              # %land.lhs.true400.i
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$300, %rax              # imm = 0x12C
	jne	.LBB8_1766
.LBB8_2241:                             # %if.end327.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2234:                             # %if.end305.i9892
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_2220:                             # %if.end289.i
	movq	8(%r13), %rbx
.LBB8_2221:                             # %if.end273.i9884
	movq	8(%rbx), %r14
.LBB8_2222:                             # %L11892.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2223:                              # %if.then263.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2224:                              # %if.then424.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2225:                              # %land.lhs.true433.i9919
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2226:                              # %L3049.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2227:                              # %L3050.i
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$64, %rcx
	jne	.LBB8_2181
# BB#2228:                              # %L3051.i
	movq	8(%rax), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2229:                              # %L3052.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131155, %rax           # imm = 0x20053
	jne	.LBB8_2181
# BB#2230:                              # %L3053.i
	movq	8(%rbx), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2231:                              # %L3054.i
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2232:                              # %land.lhs.true493.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	movq	$301, %rax              # imm = 0x12D
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2242:                             # %L3420.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$131072, %rax           # imm = 0x20000
	jne	.LBB8_2181
# BB#2243:                              # %L11893.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2249
# BB#2244:                              # %if.then509.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2248
# BB#2245:                              # %if.then522.i9949
	movq	%r14, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2247
# BB#2246:                              # %land.lhs.true534.i9950
	cmpq	$0, 8(%rax)
	jne	.LBB8_2247
# BB#2260:                              # %L3423.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_2261
# BB#2263:                              # %L3424.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2273
# BB#2264:                              # %if.then577.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131156, %rax           # imm = 0x20054
	jne	.LBB8_2273
# BB#2265:                              # %L3426.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2273
# BB#2266:                              # %L3427.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2273
# BB#2267:                              # %land.lhs.true649.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2273
# BB#2268:                              # %land.lhs.true652.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$322, %rax              # imm = 0x142
	jne	.LBB8_1766
	jmp	.LBB8_2273
.LBB8_2274:                             # %L3705.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2275:                              # %if.then805.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2276:                              # %if.then813.i10009
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2277:                              # %land.lhs.true822.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2278:                              # %L3708.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	jne	.LBB8_2279
# BB#2286:                              # %L3722.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2287:                              # %if.then888.i
	movq	%rbx, recog_data(%rip)
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2288:                              # %land.lhs.true893.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$341, %rax              # imm = 0x155
	jne	.LBB8_1766
.LBB8_2197:                             # %lor.lhs.false.i9804
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2289:                             # %L4363.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2290:                              # %if.then910.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2291:                              # %land.lhs.true919.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2292:                              # %L4365.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2293:                              # %L4366.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2294:                              # %if.then941.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131158, %rcx           # imm = 0x20056
	jne	.LBB8_2181
# BB#2295:                              # %L4368.i
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2296:                              # %land.lhs.true963.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2297:                              # %land.lhs.true966.i
	movabsq	$recog_data, %rax
	movq	$86, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r15, %rax
	movq	$402, %rax              # imm = 0x192
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2298:                             # %L4582.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2299:                              # %if.then976.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_31_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2300:                              # %if.then984.i10043
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2301:                              # %land.lhs.true993.i10046
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2302:                              # %L4585.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2303:                              # %L4586.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2304:                              # %if.then1015.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131159, %rax           # imm = 0x20057
	jne	.LBB8_2181
# BB#2305:                              # %L4588.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2306:                              # %L4589.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2307:                              # %land.lhs.true1045.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2308:                              # %land.lhs.true1048.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$417, %rax              # imm = 0x1A1
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2309:                             # %L4944.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2310:                              # %if.then1058.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_2181
# BB#2311:                              # %L11895.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r15, %rax
	je	.LBB8_2315
# BB#2312:                              # %if.then1071.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2314
# BB#2313:                              # %land.lhs.true1085.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2314
# BB#2325:                              # %L4947.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_2326
# BB#2327:                              # %L4948.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2334
# BB#2328:                              # %if.then1127.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131161, %rax           # imm = 0x20059
	jne	.LBB8_2334
# BB#2329:                              # %L4950.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2334
# BB#2330:                              # %L4951.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2334
# BB#2331:                              # %land.lhs.true1199.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2334
# BB#2332:                              # %land.lhs.true1202.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB8_2334
# BB#2333:                              # %land.lhs.true1206.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$442, %rax              # imm = 0x1BA
	jne	.LBB8_1766
.LBB8_2334:                             # %if.end1129.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2326:                             # %if.end1107.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_2314:                             # %if.end1091.i
	movq	8(%r13), %rax
	movq	16(%rax), %rbx
.LBB8_2315:                             # %L11896.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_31_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2316:                              # %if.then1076.i10061
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2317:                              # %land.lhs.true1231.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2318:                              # %L4960.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2319:                              # %L4961.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2320:                              # %if.then1253.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131161, %rax           # imm = 0x20059
	jne	.LBB8_2181
# BB#2321:                              # %L4963.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2322:                              # %L4964.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2323:                              # %land.lhs.true1283.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2324:                              # %land.lhs.true1286.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$443, %rax              # imm = 0x1BB
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2335:                             # %L5250.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2336:                              # %if.then1296.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_2181
# BB#2337:                              # %L11897.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r15, %rax
	je	.LBB8_2341
# BB#2338:                              # %if.then1309.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2340
# BB#2339:                              # %land.lhs.true1323.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2340
# BB#2351:                              # %L5253.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_2352
# BB#2353:                              # %L5254.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2360
# BB#2354:                              # %if.then1365.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131162, %rax           # imm = 0x2005A
	jne	.LBB8_2360
# BB#2355:                              # %L5256.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2360
# BB#2356:                              # %L5257.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2360
# BB#2357:                              # %land.lhs.true1437.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2360
# BB#2358:                              # %land.lhs.true1440.i10110
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB8_2360
# BB#2359:                              # %land.lhs.true1444.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$464, %rax              # imm = 0x1D0
	jne	.LBB8_1766
.LBB8_2360:                             # %if.end1367.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2352:                             # %if.end1345.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_2340:                             # %if.end1329.i
	movq	8(%r13), %rax
	movq	16(%rax), %rbx
.LBB8_2341:                             # %L11898.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_31_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2342:                              # %if.then1314.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2343:                              # %land.lhs.true1469.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2344:                              # %L5266.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2345:                              # %L5267.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2346:                              # %if.then1491.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131162, %rax           # imm = 0x2005A
	jne	.LBB8_2181
# BB#2347:                              # %L5269.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2348:                              # %L5270.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2349:                              # %land.lhs.true1521.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2350:                              # %land.lhs.true1524.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$465, %rax              # imm = 0x1D1
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2017:                             # %L1617.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2018:                              # %if.then23.i9537
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2019:                              # %if.then31.i9543
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2020:                              # %land.lhs.true.i9546
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2021:                              # %L1620.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	jne	.LBB8_2022
# BB#2029:                              # %L1666.i
	movq	8(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2030:                              # %if.then101.i9571
	movq	%rbx, recog_data(%rip)
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2031:                              # %land.lhs.true106.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$220, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2032
.LBB8_2039:                             # %L2068.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2040:                              # %if.then170.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2041:                              # %if.then178.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2042:                              # %land.lhs.true187.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2043:                              # %L2071.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2044:                              # %L2072.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2045:                              # %if.then209.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196684, %rax           # imm = 0x3004C
	jne	.LBB8_2016
# BB#2046:                              # %L2074.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2047:                              # %L2075.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2048:                              # %land.lhs.true239.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2049:                              # %land.lhs.true242.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$244, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2033:                             # %L1630.i
	movq	8(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2034:                              # %if.then122.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2035:                              # %if.then130.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_2016
# BB#2036:                              # %L1633.i
	movq	8(%rax), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2037:                              # %if.then148.i9581
	movq	%rbx, recog_data(%rip)
	movq	$56, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2038:                              # %land.lhs.true153.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$218, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2032
.LBB8_2050:                             # %L2990.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2051:                              # %if.then252.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2052:                              # %if.then260.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2053:                              # %land.lhs.true269.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2054:                              # %L2993.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2055:                              # %L2994.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2056:                              # %if.then291.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196691, %rax           # imm = 0x30053
	jne	.LBB8_2016
# BB#2057:                              # %L2996.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2058:                              # %L2997.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2059:                              # %land.lhs.true321.i9589
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2060:                              # %land.lhs.true324.i
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$297, %rax              # imm = 0x129
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2061:                             # %L3359.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2062:                              # %if.then334.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2063:                              # %if.then342.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2064:                              # %land.lhs.true351.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2065:                              # %L3362.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	jne	.LBB8_2066
# BB#2073:                              # %L3376.i
	movq	8(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2074:                              # %if.then417.i9603
	movq	%rbx, recog_data(%rip)
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2075:                              # %land.lhs.true422.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$319, %rax              # imm = 0x13F
	jne	.LBB8_1766
	jmp	.LBB8_2032
.LBB8_2076:                             # %L3629.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2077:                              # %if.then439.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2078:                              # %if.then447.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2079:                              # %land.lhs.true456.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2080:                              # %L3632.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	jne	.LBB8_2081
# BB#2088:                              # %L3646.i
	movq	8(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2089:                              # %if.then522.i
	movq	%rbx, recog_data(%rip)
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2090:                              # %land.lhs.true527.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$337, %rax              # imm = 0x151
	jne	.LBB8_1766
.LBB8_2032:                             # %lor.lhs.false.i9575
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2091:                             # %L4347.i
	movq	8(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2092:                              # %if.then544.i9622
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2093:                              # %land.lhs.true553.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2094:                              # %L4349.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2095:                              # %L4350.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2096:                              # %if.then575.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196694, %rcx           # imm = 0x30056
	jne	.LBB8_2016
# BB#2097:                              # %L4352.i
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2098:                              # %land.lhs.true597.i9625
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2099:                              # %land.lhs.true600.i9628
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r15, %rax
	movq	$400, %rax              # imm = 0x190
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2100:                             # %L4541.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2101:                              # %if.then610.i9637
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_31_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2102:                              # %if.then618.i9638
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2103:                              # %land.lhs.true627.i9639
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2104:                              # %L4544.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2105:                              # %L4545.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2106:                              # %if.then649.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196695, %rax           # imm = 0x30057
	jne	.LBB8_2016
# BB#2107:                              # %L4547.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2108:                              # %L4548.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2109:                              # %land.lhs.true679.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2110:                              # %land.lhs.true682.i9645
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$414, %rax              # imm = 0x19E
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2111:                             # %L4890.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2112:                              # %if.then692.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_2016
# BB#2113:                              # %L11887.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r15, %rax
	je	.LBB8_2117
# BB#2114:                              # %if.then705.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2116
# BB#2115:                              # %land.lhs.true719.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2116
# BB#2127:                              # %L4893.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_2128
# BB#2129:                              # %L4894.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2136
# BB#2130:                              # %if.then761.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196697, %rax           # imm = 0x30059
	jne	.LBB8_2136
# BB#2131:                              # %L4896.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2136
# BB#2132:                              # %L4897.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2136
# BB#2133:                              # %land.lhs.true833.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2136
# BB#2134:                              # %land.lhs.true836.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB8_2136
# BB#2135:                              # %land.lhs.true840.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$438, %rax              # imm = 0x1B6
	jne	.LBB8_1766
.LBB8_2136:                             # %if.end763.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2128:                             # %if.end741.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_2116:                             # %if.end725.i
	movq	8(%r13), %rax
	movq	16(%rax), %rbx
.LBB8_2117:                             # %L11888.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_31_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2118:                              # %if.then710.i9654
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2119:                              # %land.lhs.true865.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2120:                              # %L4906.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2121:                              # %L4907.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2122:                              # %if.then887.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196697, %rax           # imm = 0x30059
	jne	.LBB8_2016
# BB#2123:                              # %L4909.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2124:                              # %L4910.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2125:                              # %land.lhs.true917.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2126:                              # %land.lhs.true920.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$439, %rax              # imm = 0x1B7
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2137:                             # %L5196.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2138:                              # %if.then930.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_2016
# BB#2139:                              # %L11889.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r15, %rax
	je	.LBB8_2143
# BB#2140:                              # %if.then943.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2142
# BB#2141:                              # %land.lhs.true957.i9686
	cmpq	$0, 8(%rax)
	jne	.LBB8_2142
# BB#2153:                              # %L5199.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_2154
# BB#2155:                              # %L5200.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2162
# BB#2156:                              # %if.then999.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196698, %rax           # imm = 0x3005A
	jne	.LBB8_2162
# BB#2157:                              # %L5202.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2162
# BB#2158:                              # %L5203.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2162
# BB#2159:                              # %land.lhs.true1071.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2162
# BB#2160:                              # %land.lhs.true1074.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB8_2162
# BB#2161:                              # %land.lhs.true1078.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$460, %rax              # imm = 0x1CC
	jne	.LBB8_1766
.LBB8_2162:                             # %if.end1001.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2154:                             # %if.end979.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_2142:                             # %if.end963.i
	movq	8(%r13), %rax
	movq	16(%rax), %rbx
.LBB8_2143:                             # %L11890.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_31_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2144:                              # %if.then948.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2016
# BB#2145:                              # %land.lhs.true1103.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2016
# BB#2146:                              # %L5212.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2147:                              # %L5213.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2148:                              # %if.then1125.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196698, %rax           # imm = 0x3005A
	jne	.LBB8_2016
# BB#2149:                              # %L5215.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2150:                              # %L5216.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2151:                              # %land.lhs.true1155.i9714
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2152:                              # %land.lhs.true1158.i9715
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$461, %rax              # imm = 0x1CD
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_1831:                             # %L1406.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1832:                              # %if.then23.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1833:                              # %if.then31.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1834:                              # %land.lhs.true.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1835:                              # %L1409.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	jne	.LBB8_1836
# BB#1845:                              # %L1455.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1846:                              # %if.then107.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	$2, %rax
	je	.LBB8_1830
# BB#1847:                              # %land.lhs.true112.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1848:                              # %land.lhs.true115.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %ecx
	movq	recog_data+16(%rip), %rax
	cmpq	$66, %rcx
	jne	.LBB8_1850
# BB#1849:                              # %lor.lhs.false.i9364
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	je	.LBB8_1830
.LBB8_1850:                             # %land.lhs.true124.i
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	movq	$206, %rax
	jne	.LBB8_1830
	jmp	.LBB8_1766
.LBB8_1860:                             # %L1904.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1861:                              # %if.then190.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1862:                              # %if.then198.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1863:                              # %land.lhs.true207.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1864:                              # %L1907.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1865:                              # %L1908.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1866:                              # %if.then229.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327756, %rax           # imm = 0x5004C
	jne	.LBB8_1830
# BB#1867:                              # %L1910.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1868:                              # %L1911.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1869:                              # %land.lhs.true259.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1870:                              # %land.lhs.true262.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1871:                              # %land.lhs.true265.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$233, %rax
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1851:                             # %L1419.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1852:                              # %if.then135.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1853:                              # %if.then143.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB8_1830
# BB#1854:                              # %L1422.i
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1855:                              # %if.then161.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	$2, %rax
	je	.LBB8_1830
# BB#1856:                              # %land.lhs.true166.i
	movq	$56, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1857:                              # %land.lhs.true169.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %ecx
	movq	recog_data+16(%rip), %rax
	cmpq	$66, %rcx
	jne	.LBB8_1859
# BB#1858:                              # %lor.lhs.false174.i
	movzbl	(%rax), %ecx
	cmpq	$66, %rcx
	je	.LBB8_1830
.LBB8_1859:                             # %land.lhs.true179.i9371
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	movq	$204, %rax
	jne	.LBB8_1830
	jmp	.LBB8_1766
.LBB8_1872:                             # %L2906.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1873:                              # %if.then275.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_szext_general_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1874:                              # %if.then283.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1875:                              # %land.lhs.true292.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1876:                              # %L2909.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1877:                              # %L2910.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1878:                              # %if.then314.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327763, %rax           # imm = 0x50053
	jne	.LBB8_1830
# BB#1879:                              # %L2912.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1880:                              # %L2913.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1881:                              # %land.lhs.true344.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1882:                              # %land.lhs.true347.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1883:                              # %land.lhs.true350.i
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$291, %rax              # imm = 0x123
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1884:                             # %L3209.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1885:                              # %if.then360.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1886:                              # %if.then368.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1887:                              # %land.lhs.true377.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1888:                              # %L3212.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	jne	.LBB8_1889
# BB#1897:                              # %L3226.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1898:                              # %if.then446.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	$2, %rax
	je	.LBB8_1830
# BB#1899:                              # %land.lhs.true451.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1900:                              # %land.lhs.true454.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$309, %rax              # imm = 0x135
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1901:                             # %L3479.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1902:                              # %if.then464.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1903:                              # %if.then472.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1904:                              # %land.lhs.true481.i9394
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1905:                              # %L3482.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$49, %rax
	jne	.LBB8_1906
# BB#1914:                              # %L3496.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1915:                              # %if.then550.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data(%rip)
	testq	$2, %rax
	je	.LBB8_1830
# BB#1916:                              # %land.lhs.true555.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1917:                              # %land.lhs.true558.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$327, %rax              # imm = 0x147
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1918:                             # %L4297.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1919:                              # %if.then568.i9408
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1920:                              # %land.lhs.true577.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1921:                              # %L4299.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1922:                              # %L4300.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1923:                              # %if.then599.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327766, %rcx           # imm = 0x50056
	jne	.LBB8_1830
# BB#1924:                              # %L4302.i
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1925:                              # %land.lhs.true621.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1926:                              # %land.lhs.true624.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1927:                              # %land.lhs.true627.i
	movabsq	$recog_data, %rax
	movq	$86, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r15, %rax
	movq	$394, %rax              # imm = 0x18A
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1928:                             # %L4388.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1929:                              # %if.then637.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1930:                              # %if.then645.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1931:                              # %land.lhs.true654.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1932:                              # %L4391.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1933:                              # %L4392.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1934:                              # %if.then676.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327767, %rax           # imm = 0x50057
	jne	.LBB8_1830
# BB#1935:                              # %L4394.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1936:                              # %L4395.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1937:                              # %land.lhs.true706.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1938:                              # %land.lhs.true709.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1939:                              # %land.lhs.true712.i
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$404, %rax              # imm = 0x194
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1940:                             # %L4637.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1941:                              # %if.then722.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_1830
# BB#1942:                              # %L11851.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r15, %rax
	je	.LBB8_1946
# BB#1943:                              # %if.then735.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1945
# BB#1944:                              # %land.lhs.true749.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1945
# BB#1957:                              # %L4640.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_1958
# BB#1959:                              # %L4641.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1967
# BB#1960:                              # %if.then791.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327769, %rax           # imm = 0x50059
	jne	.LBB8_1967
# BB#1961:                              # %L4643.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1967
# BB#1962:                              # %L4644.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1967
# BB#1963:                              # %land.lhs.true863.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1967
# BB#1964:                              # %land.lhs.true866.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1967
# BB#1965:                              # %land.lhs.true869.i
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB8_1967
# BB#1966:                              # %land.lhs.true873.i
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$421, %rax              # imm = 0x1A5
	jne	.LBB8_1766
.LBB8_1967:                             # %if.end793.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1958:                             # %if.end771.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_1945:                             # %if.end755.i
	movq	8(%r13), %rax
	movq	16(%rax), %rbx
.LBB8_1946:                             # %L11852.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1947:                              # %if.then740.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1948:                              # %land.lhs.true898.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1949:                              # %L4653.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1950:                              # %L4654.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1951:                              # %if.then920.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327769, %rax           # imm = 0x50059
	jne	.LBB8_1830
# BB#1952:                              # %L4656.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1953:                              # %L4657.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1954:                              # %land.lhs.true950.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1955:                              # %land.lhs.true953.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1956:                              # %land.lhs.true956.i9446
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$422, %rax              # imm = 0x1A6
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1968:                             # %L4998.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1969:                              # %if.then966.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB8_1830
# BB#1970:                              # %L11853.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r15, %rax
	je	.LBB8_1974
# BB#1971:                              # %if.then979.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1973
# BB#1972:                              # %land.lhs.true993.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1973
# BB#1985:                              # %L5001.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_1986
# BB#1987:                              # %L5002.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1995
# BB#1988:                              # %if.then1035.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB8_1995
# BB#1989:                              # %L5004.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1995
# BB#1990:                              # %L5005.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1995
# BB#1991:                              # %land.lhs.true1107.i9471
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1995
# BB#1992:                              # %land.lhs.true1110.i9474
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1995
# BB#1993:                              # %land.lhs.true1113.i9475
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB8_1995
# BB#1994:                              # %land.lhs.true1117.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$446, %rax              # imm = 0x1BE
	jne	.LBB8_1766
.LBB8_1995:                             # %if.end1037.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_1986:                             # %if.end1015.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_1973:                             # %if.end999.i
	movq	8(%r13), %rax
	movq	16(%rax), %rbx
.LBB8_1974:                             # %L11854.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1975:                              # %if.then984.i
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_1830
# BB#1976:                              # %land.lhs.true1142.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_1830
# BB#1977:                              # %L5014.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1978:                              # %L5015.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1979:                              # %if.then1164.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB8_1830
# BB#1980:                              # %L5017.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1981:                              # %L5018.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1982:                              # %land.lhs.true1194.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1983:                              # %land.lhs.true1197.i
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1984:                              # %land.lhs.true1200.i
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$447, %rax              # imm = 0x1BF
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_2187:                             # %L1711.i
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2188:                              # %L1712.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2189:                              # %if.then59.i9775
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131147, %rax           # imm = 0x2004B
	jne	.LBB8_2181
# BB#2190:                              # %L1714.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2191:                              # %L1715.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2192:                              # %land.lhs.true88.i9786
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2193:                              # %land.lhs.true91.i9789
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$223, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2261:                             # %L3423.i
	cmpq	$49, %rcx
	jne	.LBB8_2262
# BB#2269:                              # %L3451.i
	movq	8(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB8_2273
# BB#2270:                              # %if.then676.i9981
	movq	%rbx, recog_data(%rip)
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2273
# BB#2271:                              # %land.lhs.true695.i9991
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$324, %rax              # imm = 0x144
	jne	.LBB8_1766
# BB#2272:                              # %lor.lhs.false700.i
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	jne	.LBB8_1766
.LBB8_2273:                             # %if.end579.i9961
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_2262:                             # %sw.epilog557.i
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB8_2247:                             # %if.end540.i
	movq	8(%r13), %rbx
.LBB8_2248:                             # %if.end524.i
	movq	8(%rbx), %r14
.LBB8_2249:                             # %L11894.i
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2250:                              # %if.then514.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2251:                              # %if.then726.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB8_2181
# BB#2252:                              # %land.lhs.true735.i
	cmpq	$0, 8(%rax)
	jne	.LBB8_2181
# BB#2253:                              # %L3436.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2254:                              # %L3437.i
	movq	8(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$64, %rcx
	jne	.LBB8_2181
# BB#2255:                              # %L3438.i
	movq	8(%rax), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2256:                              # %L3439.i
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131156, %rax           # imm = 0x20054
	jne	.LBB8_2181
# BB#2257:                              # %L3440.i
	movq	8(%rbx), %rax
	movq	recog_data(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2258:                              # %L3441.i
	movq	16(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2259:                              # %land.lhs.true795.i10002
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	movq	$323, %rax              # imm = 0x143
	jne	.LBB8_1766
	jmp	.LBB8_2181
.LBB8_2279:                             # %L3708.i
	cmpq	$47, %rax
	jne	.LBB8_2181
# BB#2280:                              # %L3709.i
	movq	8(%rbx), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2281:                              # %if.then845.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$131157, %rax           # imm = 0x20055
	jne	.LBB8_2181
# BB#2282:                              # %L3711.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2283:                              # %L3712.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2284:                              # %land.lhs.true875.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2181
# BB#2285:                              # %land.lhs.true878.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$2, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$340, %rax              # imm = 0x154
	jne	.LBB8_1766
.LBB8_2181:                             # %if.end6404
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_2022:                             # %L1620.i
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2023:                              # %L1621.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2024:                              # %if.then59.i9557
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196683, %rax           # imm = 0x3004B
	jne	.LBB8_2016
# BB#2025:                              # %L1623.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2026:                              # %L1624.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2027:                              # %land.lhs.true88.i9566
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2028:                              # %land.lhs.true91.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$217, %rax
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2066:                             # %L3362.i
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2067:                              # %L3363.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2068:                              # %if.then374.i9596
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196692, %rax           # imm = 0x30054
	jne	.LBB8_2016
# BB#2069:                              # %L3365.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2070:                              # %L3366.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2071:                              # %land.lhs.true404.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2072:                              # %land.lhs.true407.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$318, %rax              # imm = 0x13E
	jne	.LBB8_1766
	jmp	.LBB8_2016
.LBB8_2081:                             # %L3632.i
	cmpq	$47, %rax
	jne	.LBB8_2016
# BB#2082:                              # %L3633.i
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2083:                              # %if.then479.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196693, %rax           # imm = 0x30055
	jne	.LBB8_2016
# BB#2084:                              # %L3635.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2085:                              # %L3636.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2086:                              # %land.lhs.true509.i9614
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_2016
# BB#2087:                              # %land.lhs.true512.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$3, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$336, %rax              # imm = 0x150
	jne	.LBB8_1766
.LBB8_2016:                             # %if.end6397
	movq	8(%r12), %r15
	jmp	.LBB8_8
.LBB8_1836:                             # %L1409.i
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1837:                              # %L1410.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1838:                              # %if.then59.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB8_1830
# BB#1839:                              # %L1412.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1840:                              # %L1413.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1841:                              # %land.lhs.true88.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1842:                              # %land.lhs.true90.i9358
	movq	$54, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1843:                              # %land.lhs.true93.i9359
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1844:                              # %land.lhs.true96.i
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	movq	$203, %rax
	jne	.LBB8_1830
	jmp	.LBB8_1766
.LBB8_1889:                             # %L3212.i
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1890:                              # %L3213.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1891:                              # %if.then400.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327764, %rax           # imm = 0x50054
	jne	.LBB8_1830
# BB#1892:                              # %L3215.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1893:                              # %L3216.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1894:                              # %land.lhs.true430.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1895:                              # %land.lhs.true433.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1896:                              # %land.lhs.true436.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$308, %rax              # imm = 0x134
	jne	.LBB8_1766
	jmp	.LBB8_1830
.LBB8_1906:                             # %L3482.i
	cmpq	$47, %rax
	jne	.LBB8_1830
# BB#1907:                              # %L3483.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1908:                              # %if.then504.i
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327765, %rax           # imm = 0x50055
	jne	.LBB8_1830
# BB#1909:                              # %L3485.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1910:                              # %L3486.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1911:                              # %land.lhs.true534.i9400
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB8_1830
# BB#1912:                              # %land.lhs.true537.i
	movq	$55, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	ix86_match_ccmode
	testq	%r15, %rax
	je	.LBB8_1830
# BB#1913:                              # %land.lhs.true540.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r15, %rax
	movq	$326, %rax              # imm = 0x146
	jne	.LBB8_1766
.LBB8_1830:                             # %if.end6383
	movq	8(%r12), %r15
.LBB8_8:                                # %L7491
	movq	%r15, recog_data(%rip)
	movq	16(%r12), %rbx
	movzbl	(%rbx), %eax
	cmpq	$50, %rax
	jne	.LBB8_23
# BB#9:                                 # %L7493
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131138, %rcx           # imm = 0x20042
	jne	.LBB8_23
# BB#10:                                # %L7494
	movq	8(%rax), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB8_23
# BB#11:                                # %L11901
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	constant_call_address_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB8_14
# BB#12:                                # %if.then6733
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB8_13
# BB#2401:                              # %L7497
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB8_13
# BB#2402:                              # %land.lhs.true6780
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB8_13
# BB#2403:                              # %L7498
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262219, %rdx           # imm = 0x4004B
	jne	.LBB8_13
# BB#2404:                              # %L7499
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB8_13
# BB#2405:                              # %land.lhs.true6839
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB8_13
# BB#2406:                              # %L7500
	movq	16(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r14, %rax
	je	.LBB8_2408
# BB#2407:                              # %if.then6865
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+24(%rip)
	movq	$651, %rax              # imm = 0x28B
	testq	$2, %rcx
	je	.LBB8_1766
.LBB8_2408:                             # %if.end6885
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB8_13:                               # %if.end6754
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movq	8(%rbx), %rax
	movq	8(%rax), %r15
.LBB8_14:                               # %L11902
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	call_insn_operand
	testq	%r14, %rax
	je	.LBB8_23
# BB#15:                                # %if.then6738
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movq	%rax, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$47, %rcx
	jne	.LBB8_23
# BB#16:                                # %L7510
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB8_23
# BB#17:                                # %land.lhs.true6925
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB8_23
# BB#18:                                # %L7511
	movq	16(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262219, %rcx           # imm = 0x4004B
	jne	.LBB8_23
# BB#19:                                # %L7512
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB8_23
# BB#20:                                # %land.lhs.true6956
	movl	8(%rcx), %ecx
	cmpq	$7, %rcx
	jne	.LBB8_23
# BB#21:                                # %L7513
	movq	16(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r14, %rax
	je	.LBB8_23
# BB#22:                                # %if.then6968
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+24(%rip)
	movq	$652, %rax              # imm = 0x28C
	testq	$2, %rcx
	je	.LBB8_1766
.LBB8_23:                               # %ret0
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
.LBB8_1766:                             # %return
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp140:
	.size	recog_26, .Ltmp140-recog_26
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI8_0:
	.quad	.LBB8_589
	.quad	.LBB8_407
	.quad	.LBB8_24
	.quad	.LBB8_748
	.quad	.LBB8_1656
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_1266
	.quad	.LBB8_1412
	.quad	.LBB8_1571
	.quad	.LBB8_1597
.LJTI8_1:
	.quad	.LBB8_1756
	.quad	.LBB8_1746
	.quad	.LBB8_1725
	.quad	.LBB8_1689
.LJTI8_2:
	.quad	.LBB8_770
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_787
	.quad	.LBB8_814
	.quad	.LBB8_860
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_950
	.quad	.LBB8_839
	.quad	.LBB8_846
	.quad	.LBB8_853
	.quad	.LBB8_950
	.quad	.LBB8_874
	.quad	.LBB8_924
	.quad	.LBB8_881
	.quad	.LBB8_908
	.quad	.LBB8_940
.LJTI8_3:
	.quad	.LBB8_1233
	.quad	.LBB8_758
	.quad	.LBB8_758
	.quad	.LBB8_758
	.quad	.LBB8_758
	.quad	.LBB8_758
	.quad	.LBB8_1115
	.quad	.LBB8_1145
	.quad	.LBB8_758
	.quad	.LBB8_1163
	.quad	.LBB8_758
	.quad	.LBB8_758
	.quad	.LBB8_1173
	.quad	.LBB8_1181
	.quad	.LBB8_758
	.quad	.LBB8_1221
	.quad	.LBB8_758
	.quad	.LBB8_1227
	.quad	.LBB8_1189
.LJTI8_4:
	.quad	.LBB8_973
	.quad	.LBB8_994
	.quad	.LBB8_758
	.quad	.LBB8_1013
	.quad	.LBB8_758
	.quad	.LBB8_758
	.quad	.LBB8_758
	.quad	.LBB8_758
	.quad	.LBB8_1021
	.quad	.LBB8_1028
	.quad	.LBB8_1035
	.quad	.LBB8_758
	.quad	.LBB8_1042
	.quad	.LBB8_1083
	.quad	.LBB8_1049
	.quad	.LBB8_1076
	.quad	.LBB8_1099
.LJTI8_5:
	.quad	.LBB8_631
	.quad	.LBB8_644
	.quad	.LBB8_671
	.quad	.LBB8_630
	.quad	.LBB8_630
	.quad	.LBB8_630
	.quad	.LBB8_630
	.quad	.LBB8_630
	.quad	.LBB8_651
	.quad	.LBB8_657
	.quad	.LBB8_663
	.quad	.LBB8_630
	.quad	.LBB8_676
	.quad	.LBB8_718
	.quad	.LBB8_688
	.quad	.LBB8_703
	.quad	.LBB8_733
.LJTI8_6:
	.quad	.LBB8_484
	.quad	.LBB8_494
	.quad	.LBB8_518
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_500
	.quad	.LBB8_506
	.quad	.LBB8_512
	.quad	.LBB8_5
	.quad	.LBB8_523
	.quad	.LBB8_561
	.quad	.LBB8_533
	.quad	.LBB8_547
	.quad	.LBB8_575
.LJTI8_7:
	.quad	.LBB8_138
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_149
	.quad	.LBB8_168
	.quad	.LBB8_231
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_28
	.quad	.LBB8_185
	.quad	.LBB8_191
	.quad	.LBB8_225
	.quad	.LBB8_28
	.quad	.LBB8_236
	.quad	.LBB8_280
	.quad	.LBB8_242
	.quad	.LBB8_266
	.quad	.LBB8_294
.LJTI8_8:
	.quad	.LBB8_389
	.quad	.LBB8_32
	.quad	.LBB8_32
	.quad	.LBB8_32
	.quad	.LBB8_32
	.quad	.LBB8_32
	.quad	.LBB8_346
	.quad	.LBB8_354
	.quad	.LBB8_32
	.quad	.LBB8_371
.LJTI8_9:
	.quad	.LBB8_2167
	.quad	.LBB8_2002
	.quad	.LBB8_2000
	.quad	.LBB8_1815
.LJTI8_10:
	.quad	.LBB8_2169
	.quad	.LBB8_2181
	.quad	.LBB8_2169
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2169
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2182
	.quad	.LBB8_2204
	.quad	.LBB8_2198
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2181
	.quad	.LBB8_2215
	.quad	.LBB8_2242
	.quad	.LBB8_2274
	.quad	.LBB8_2289
	.quad	.LBB8_2298
	.quad	.LBB8_2181
	.quad	.LBB8_2309
	.quad	.LBB8_2335
.LJTI8_11:
	.quad	.LBB8_2004
	.quad	.LBB8_2016
	.quad	.LBB8_2004
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2004
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2017
	.quad	.LBB8_2039
	.quad	.LBB8_2033
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2016
	.quad	.LBB8_2050
	.quad	.LBB8_2061
	.quad	.LBB8_2076
	.quad	.LBB8_2091
	.quad	.LBB8_2100
	.quad	.LBB8_2016
	.quad	.LBB8_2111
	.quad	.LBB8_2137
.LJTI8_12:
	.quad	.LBB8_1817
	.quad	.LBB8_1830
	.quad	.LBB8_1817
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1817
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1831
	.quad	.LBB8_1860
	.quad	.LBB8_1851
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1830
	.quad	.LBB8_1872
	.quad	.LBB8_1884
	.quad	.LBB8_1901
	.quad	.LBB8_1918
	.quad	.LBB8_1928
	.quad	.LBB8_1830
	.quad	.LBB8_1940
	.quad	.LBB8_1968

	.text
	.align	16, 0x90
	.type	recog_29,@function
recog_29:                               # @recog_29
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp147:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp148:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp149:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp150:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp151:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp152:
	.cfi_def_cfa_offset 80
.Ltmp153:
	.cfi_offset %rbx, -48
.Ltmp154:
	.cfi_offset %r12, -40
.Ltmp155:
	.cfi_offset %r13, -32
.Ltmp156:
	.cfi_offset %r14, -24
.Ltmp157:
	.cfi_offset %r15, -16
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	movq	8(%rdi), %rax
	movq	8(%rax), %rdi
	movq	8(%rdi), %r12
	movl	(%r12), %ebx
	movq	$16, %rcx
	movq	%rbx, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-2, %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$14, %rdx
	ja	.LBB9_727
# BB#1:                                 # %entry
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	jmpq	*.LJTI9_0(,%rdx,8)
.LBB9_709:                              # %L11921
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$66, %rbx
	jne	.LBB9_727
# BB#710:                               # %L6695
	movq	%rdi, %r14
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$5, %rax
	jne	.LBB9_711
# BB#759:                               # %L11984
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB9_726
# BB#760:                               # %if.then2964
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_725
# BB#761:                               # %if.then2972
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_550
# BB#762:                               # %L6710
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_767
# BB#763:                               # %if.then3001
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB9_767
# BB#764:                               # %L6712
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB9_767
# BB#765:                               # %L6713
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_767
# BB#766:                               # %land.lhs.true3055
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB9_767
# BB#768:                               # %L6714
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_550
# BB#769:                               # %L6715
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB9_550
# BB#770:                               # %land.lhs.true3099
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_550
# BB#771:                               # %land.lhs.true3104
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB9_550
# BB#772:                               # %land.lhs.true3107
	movl	x86_single_stringop(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdi
	movq	$601, %rbx              # imm = 0x259
	jne	.LBB9_833
	jmp	.LBB9_550
.LBB9_491:                              # %L11920
	andq	$65535, %rbx            # imm = 0xFFFF
	movq	%rdi, %r14
	cmpq	$66, %rbx
	jne	.LBB9_492
# BB#501:                               # %L6671
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$5, %rax
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	jne	.LBB9_502
# BB#518:                               # %L11970
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_493
# BB#519:                               # %if.then907
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_836
# BB#520:                               # %if.then915
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_506
# BB#521:                               # %L6686
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_526
# BB#522:                               # %if.then944
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB9_526
# BB#523:                               # %L6688
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB9_526
# BB#524:                               # %L6689
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_526
# BB#525:                               # %land.lhs.true998
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB9_526
# BB#527:                               # %L6690
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_506
# BB#528:                               # %L6691
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB9_513
# BB#529:                               # %land.lhs.true1042
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_513
# BB#530:                               # %land.lhs.true1047
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB9_513
# BB#531:                               # %land.lhs.true1050
	movl	x86_single_stringop(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	orq	%rsi, %rdi
	testq	%r13, %rdi
	movq	$599, %rbx              # imm = 0x257
	jne	.LBB9_833
	jmp	.LBB9_513
.LBB9_2:                                # %L11917
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$61, %rbx
	jne	.LBB9_3
# BB#30:                                # %L11924.i
	movl	8(%r12), %ecx
	cmpq	$7, %rcx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#31:                                # %L5999.i
	movq	16(%rdi), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262219, %rdx           # imm = 0x4004B
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#32:                                # %L6000.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#33:                                # %land.lhs.true45.i
	movl	8(%rdx), %edx
	cmpq	$6, %rdx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#34:                                # %L6001.i
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#35:                                # %land.lhs.true61.i
	movq	8(%rcx), %rcx
	cmpq	$4, %rcx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#36:                                # %L6002.i
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#37:                                # %L6003.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#38:                                # %land.lhs.true99.i
	movl	8(%rdx), %edx
	cmpq	$6, %rdx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#39:                                # %L6004.i
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262210, %rdx           # imm = 0x40042
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#40:                                # %L6005.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#41:                                # %land.lhs.true146.i
	movl	8(%rcx), %ecx
	cmpq	$6, %rcx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#42:                                # %L6006.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#43:                                # %L6007.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#44:                                # %L6008.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#45:                                # %land.lhs.true206.i
	movzbl	target_flags+3(%rip), %eax
	movq	$522, %rbx              # imm = 0x20A
	testq	$2, %rax
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
	jmp	.LBB9_833
.LBB9_247:                              # %L11918
	andq	$65535, %rbx            # imm = 0xFFFF
	cmpq	$61, %rbx
	jne	.LBB9_249
# BB#248:                               # %land.lhs.true
	movl	8(%r12), %ecx
	cmpq	$7, %rcx
	jne	.LBB9_249
# BB#257:                               # %L6012
	movq	16(%rdi), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327755, %rdx           # imm = 0x5004B
	jne	.LBB9_249
# BB#258:                               # %L6013
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB9_249
# BB#259:                               # %land.lhs.true63
	movl	8(%rdx), %edx
	cmpq	$6, %rdx
	jne	.LBB9_249
# BB#260:                               # %L6014
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB9_249
# BB#261:                               # %land.lhs.true79
	movq	8(%rcx), %rcx
	cmpq	$8, %rcx
	jne	.LBB9_249
# BB#262:                               # %L6015
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB9_249
# BB#263:                               # %L6016
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB9_249
# BB#264:                               # %land.lhs.true117
	movl	8(%rdx), %edx
	cmpq	$6, %rdx
	jne	.LBB9_249
# BB#265:                               # %L6017
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327746, %rdx           # imm = 0x50042
	jne	.LBB9_249
# BB#266:                               # %L6018
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB9_249
# BB#267:                               # %land.lhs.true164
	movl	8(%rcx), %ecx
	cmpq	$6, %rcx
	jne	.LBB9_249
# BB#268:                               # %L6019
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_249
# BB#269:                               # %L6020
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB9_249
# BB#270:                               # %L6021
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB9_249
# BB#271:                               # %land.lhs.true224
	movzbl	target_flags+3(%rip), %eax
	movq	$523, %rbx              # imm = 0x20B
	testq	$2, %rax
	jne	.LBB9_833
.LBB9_249:                              # %L11908
	movq	%rdi, %rbx
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB9_252
# BB#250:                               # %if.then23
	movq	%r12, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$327680, %rdx           # imm = 0x50000
	jne	.LBB9_251
# BB#272:                               # %L11945
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$66, %rcx
	jne	.LBB9_273
# BB#282:                               # %L526
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327741, %rcx           # imm = 0x5003D
	jne	.LBB9_251
# BB#283:                               # %land.lhs.true268
	movl	8(%rax), %eax
	cmpq	$7, %rax
	jne	.LBB9_251
# BB#284:                               # %L527
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB9_285
# BB#286:                               # %L528
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB9_285
# BB#287:                               # %land.lhs.true307
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB9_285
# BB#288:                               # %L529
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327755, %rdx           # imm = 0x5004B
	jne	.LBB9_285
# BB#289:                               # %L530
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$327741, %rsi           # imm = 0x5003D
	jne	.LBB9_285
# BB#290:                               # %land.lhs.true354
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB9_285
# BB#291:                               # %L531
	movq	%r15, %rsi
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB9_293
# BB#292:                               # %land.lhs.true375
	movq	8(%rcx), %rcx
	cmpq	$8, %rcx
	jne	.LBB9_293
# BB#294:                               # %L532
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_293
# BB#295:                               # %L533
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB9_293
# BB#296:                               # %L534
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$62, %rcx
	jne	.LBB9_293
# BB#297:                               # %land.lhs.true435
	movzbl	target_flags+3(%rip), %ecx
	movq	$79, %rbx
	testq	$2, %rcx
	jne	.LBB9_833
.LBB9_293:                              # %if.end381
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	movq	%rax, %rbx
	movq	%rsi, %r15
	jmp	.LBB9_252
.LBB9_572:                              # %L11915
	movq	%rdi, %rbx
	movq	$15, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB9_575
# BB#573:                               # %if.then1549
	movq	%r12, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	jne	.LBB9_574
# BB#577:                               # %L11973
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB9_578
# BB#587:                               # %L3933
	movq	8(%rax), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_574
# BB#588:                               # %if.then1583
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_589
# BB#590:                               # %L3935
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB9_598
# BB#591:                               # %if.then1612
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_589
# BB#592:                               # %L3937
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_598
# BB#593:                               # %land.lhs.true1652
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_598
# BB#594:                               # %land.lhs.true1657
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB9_598
# BB#595:                               # %land.lhs.true1660
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$356, %rbx              # imm = 0x164
	jne	.LBB9_833
	jmp	.LBB9_596
.LBB9_632:                              # %L11916
	movq	%rdi, %rbx
	movq	$16, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB9_635
# BB#633:                               # %if.then2109
	movq	%r12, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB9_634
# BB#637:                               # %L11975
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$77, %rcx
	jne	.LBB9_638
# BB#655:                               # %L3974
	movq	8(%rax), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_634
# BB#656:                               # %if.then2143
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_657
# BB#658:                               # %L3976
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB9_661
# BB#659:                               # %if.then2172
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_660
# BB#670:                               # %L3978
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_676
# BB#671:                               # %land.lhs.true2217
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_676
# BB#672:                               # %land.lhs.true2222
	movl	target_flags(%rip), %eax
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB9_676
# BB#673:                               # %land.lhs.true2228
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$359, %rbx              # imm = 0x167
	jne	.LBB9_833
# BB#674:                               # %lor.lhs.false2232
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_676
# BB#675:                               # %land.lhs.true2236
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	jne	.LBB9_833
.LBB9_676:                              # %if.end2241
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_660:                              # %if.end2197
	movq	16(%rax), %rax
	movq	8(%rax), %rbx
.LBB9_661:                              # %L3993
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB9_669
# BB#662:                               # %if.then2177
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_657
# BB#663:                               # %L3995
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_669
# BB#664:                               # %land.lhs.true2279
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_669
# BB#665:                               # %land.lhs.true2284
	movl	target_flags(%rip), %eax
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$33816576, %rax         # imm = 0x2040000
	jne	.LBB9_669
# BB#666:                               # %land.lhs.true2290
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$360, %rbx              # imm = 0x168
	jne	.LBB9_833
# BB#667:                               # %lor.lhs.false2294
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_669
# BB#668:                               # %land.lhs.true2298
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	jne	.LBB9_833
	jmp	.LBB9_669
.LBB9_492:
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	jmp	.LBB9_493
.LBB9_3:                                # %L11917
	cmpq	$66, %rbx
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#46:                                # %L6635.i
	movq	8(%r12), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$4, %rax
	jne	.LBB9_47
# BB#70:                                # %L11926.i
	movq	$4, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rdi, %r15
	movq	%r12, %r13
	je	.LBB9_4
# BB#71:                                # %if.then472.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%rdi), %r15
	movq	$4, %rsi
	movq	%rdi, %rbx
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB9_834
# BB#72:                                # %if.then480.i
	movq	%rbx, %r14
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_51
# BB#73:                                # %L6650.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_76
# BB#74:                                # %if.then510.i
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB9_76
# BB#75:                                # %L6652.i
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB9_76
# BB#77:                                # %L6653.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	movq	%r14, %rdi
	jne	.LBB9_79
# BB#78:                                # %land.lhs.true567.i
	movq	8(%rax), %rax
	cmpq	$4, %rax
	jne	.LBB9_79
# BB#80:                                # %L6654.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_64
# BB#81:                                # %L6655.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB9_64
# BB#82:                                # %land.lhs.true615.i
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_64
# BB#83:                                # %land.lhs.true621.i
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB9_64
# BB#84:                                # %land.lhs.true624.i
	movl	x86_single_stringop(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movq	%rdi, %rbx
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdi
	movq	%rbx, %rdi
	movq	$596, %rbx              # imm = 0x254
	jne	.LBB9_833
	jmp	.LBB9_64
.LBB9_711:                              # %L6695
	cmpq	$4, %rax
	jne	.LBB9_726
# BB#712:                               # %L11983
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB9_726
# BB#713:                               # %if.then2803
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_725
# BB#714:                               # %if.then2811
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_550
# BB#715:                               # %L6698
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_767
# BB#716:                               # %if.then2840
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB9_767
# BB#717:                               # %L6700
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	je	.LBB9_767
# BB#718:                               # %L6701
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_767
# BB#719:                               # %land.lhs.true2894
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB9_767
# BB#720:                               # %L6702
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_550
# BB#721:                               # %L6703
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB9_550
# BB#722:                               # %land.lhs.true2938
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_550
# BB#723:                               # %land.lhs.true2943
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB9_550
# BB#724:                               # %land.lhs.true2946
	movl	x86_single_stringop(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdi
	movq	$600, %rbx              # imm = 0x258
	jne	.LBB9_833
	jmp	.LBB9_550
.LBB9_502:                              # %L6671
	cmpq	$4, %rax
	jne	.LBB9_493
# BB#503:                               # %L11969
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_493
# BB#504:                               # %if.then747
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_836
# BB#505:                               # %if.then755
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_506
# BB#507:                               # %L6674
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_526
# BB#508:                               # %if.then784
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB9_526
# BB#509:                               # %L6676
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB9_526
# BB#510:                               # %L6677
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_526
# BB#511:                               # %land.lhs.true838
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB9_526
# BB#512:                               # %L6678
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_513
# BB#514:                               # %L6679
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB9_513
# BB#515:                               # %land.lhs.true882
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_513
# BB#516:                               # %land.lhs.true887
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	jne	.LBB9_513
# BB#517:                               # %land.lhs.true890
	movl	x86_single_stringop(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	orq	%rsi, %rdi
	testq	%r13, %rdi
	movq	$598, %rbx              # imm = 0x256
	jne	.LBB9_833
.LBB9_513:                              # %if.end862
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	movq	%rax, %r14
	jmp	.LBB9_493
.LBB9_273:                              # %L11945
	cmpq	$120, %rcx
	jne	.LBB9_251
# BB#274:                               # %L784
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_251
# BB#275:                               # %if.then453
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_285
# BB#276:                               # %L786
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB9_285
# BB#277:                               # %land.lhs.true488
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_285
# BB#278:                               # %L787
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_285
# BB#279:                               # %L788
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB9_835
# BB#280:                               # %if.then526
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	movq	$119, %rbx
	testq	$2, %rax
	je	.LBB9_833
# BB#281:                               # %if.end540
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	movq	%rax, %rbx
	jmp	.LBB9_252
.LBB9_578:                              # %L11973
	cmpq	$129, %rcx
	jne	.LBB9_574
# BB#579:                               # %L4118
	movq	8(%rax), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_574
# BB#580:                               # %if.then1687
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_589
# BB#581:                               # %L4120
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB9_598
# BB#582:                               # %if.then1716
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_589
# BB#583:                               # %L4122
	movq	8(%rcx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_598
# BB#584:                               # %land.lhs.true1756
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_598
# BB#585:                               # %land.lhs.true1761
	movzbl	target_flags+2(%rip), %eax
	testq	$5, %rax
	je	.LBB9_598
# BB#586:                               # %land.lhs.true1764
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$375, %rbx              # imm = 0x177
	jne	.LBB9_833
.LBB9_596:                              # %lor.lhs.false1664
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_598
# BB#597:                               # %land.lhs.true1772
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	jne	.LBB9_833
.LBB9_598:                              # %if.end1614
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
	jmp	.LBB9_574
.LBB9_638:                              # %L11975
	cmpq	$129, %rcx
	jne	.LBB9_634
# BB#639:                               # %L4159
	movq	8(%rax), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_634
# BB#640:                               # %if.then2317
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_657
# BB#641:                               # %L4161
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r13, %rax
	je	.LBB9_669
# BB#642:                               # %if.then2346
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_657
# BB#643:                               # %L4163
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB9_657
# BB#644:                               # %L11977
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB9_657
# BB#645:                               # %L11979
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_657
# BB#646:                               # %L11981
	movl	target_flags(%rip), %eax
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB9_650
# BB#647:                               # %land.lhs.true2424
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$378, %rbx              # imm = 0x17A
	jne	.LBB9_833
# BB#648:                               # %lor.lhs.false2428
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_650
# BB#649:                               # %land.lhs.true2432
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	jne	.LBB9_833
.LBB9_650:                              # %L11982
	movl	target_flags(%rip), %eax
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$33816576, %rax         # imm = 0x2040000
	jne	.LBB9_654
# BB#651:                               # %land.lhs.true2443
	movl	reload_in_progress(%rip), %eax
	movl	reload_completed(%rip), %ecx
	orq	%rax, %rcx
	testq	%r13, %rcx
	movq	$379, %rbx              # imm = 0x17B
	jne	.LBB9_833
# BB#652:                               # %lor.lhs.false2447
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_654
# BB#653:                               # %land.lhs.true2451
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r13, %rax
	jne	.LBB9_833
.LBB9_654:                              # %if.end2456
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %r12
	movq	%rax, %rbx
	jmp	.LBB9_635
.LBB9_47:                               # %L6635.i
	cmpq	$5, %rax
	movq	%rdi, %r15
	movq	%r12, %r13
	jne	.LBB9_4
# BB#48:                                # %L11925.i
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rdi, %r15
	movq	%r12, %r13
	je	.LBB9_4
# BB#49:                                # %if.then230.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%rdi), %r15
	movq	$4, %rsi
	movq	%rdi, %rbx
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB9_834
# BB#50:                                # %if.then238.i
	movq	%rbx, %r14
	movq	%r15, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_51
# BB#52:                                # %L6638.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_76
# BB#53:                                # %if.then267.i
	movq	%r15, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB9_76
# BB#54:                                # %L6640.i
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB9_76
# BB#55:                                # %L6641.i
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_76
# BB#56:                                # %L11927.i
	movq	8(%rax), %rax
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	%rax, %rdx
	jne	.LBB9_76
# BB#57:                                # %if.then340.i
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$4, %rax
	jne	.LBB9_58
# BB#65:                                # %L6666.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_51
# BB#66:                                # %L6667.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	movq	%r14, %rdi
	jne	.LBB9_64
# BB#67:                                # %land.lhs.true445.i
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_64
# BB#68:                                # %land.lhs.true451.i
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB9_64
# BB#69:                                # %land.lhs.true454.i
	movl	x86_single_stringop(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movq	%rdi, %rbx
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdi
	movq	%rbx, %rdi
	movq	$597, %rbx              # imm = 0x255
	jne	.LBB9_833
	jmp	.LBB9_64
.LBB9_657:                              # %if.end2158
	movq	8(%rax), %rbx
	jmp	.LBB9_634
.LBB9_589:                              # %if.end1598
	movq	8(%rax), %rbx
.LBB9_574:                              # %if.end1565
	movq	8(%rbx), %r12
.LBB9_575:                              # %L11922
	movq	$15, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_576
# BB#600:                               # %if.then1554
	movq	%r12, recog_data(%rip)
	movq	%rbx, %rdi
	movq	16(%rdi), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$983112, %rax           # imm = 0xF0048
	jne	.LBB9_599
# BB#601:                               # %L7289
	movq	%rdi, %r14
	movq	8(%r15), %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	sse_comparison_operator
	testq	%r13, %rax
	je	.LBB9_603
# BB#602:                               # %if.then1807
	movq	%r12, recog_data+8(%rip)
	movq	8(%r12), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_603
# BB#606:                               # %if.then1823
	movq	%rbx, recog_data+32(%rip)
	movq	16(%r12), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_603
# BB#607:                               # %if.then1831
	movq	%rbx, recog_data+40(%rip)
	movq	16(%r15), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_837
# BB#608:                               # %if.then1839
	movq	%rbx, recog_data+16(%rip)
	movq	24(%r15), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_837
# BB#609:                               # %if.then1850
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_610
# BB#611:                               # %L7295
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r13, %rax
	je	.LBB9_838
# BB#612:                               # %if.then1882
	movq	%rbx, recog_data+48(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_610
# BB#613:                               # %L7297
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB9_610
# BB#614:                               # %land.lhs.true1928
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_610
# BB#615:                               # %land.lhs.true1933
	movl	target_flags(%rip), %ecx
	testq	$327680, %rcx           # imm = 0x50000
	je	.LBB9_610
# BB#616:                               # %land.lhs.true1936
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB9_618
# BB#617:                               # %lor.lhs.false1941
	movq	recog_data+24(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	je	.LBB9_610
.LBB9_618:                              # %land.lhs.true1946
	testq	$16, %rcx
	movq	$637, %rbx              # imm = 0x27D
	je	.LBB9_833
# BB#619:                               # %lor.lhs.false1949
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	andq	$65534, %rcx            # imm = 0xFFFE
	cmpq	$102, %rcx
	je	.LBB9_610
	jmp	.LBB9_833
.LBB9_576:
	movq	%rbx, %rdi
	jmp	.LBB9_727
.LBB9_599:                              # %if.end1798
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_725:                              # %if.end2813
	movq	8(%r14), %r12
	jmp	.LBB9_726
.LBB9_836:                              # %if.end917
	movq	8(%r14), %r12
	jmp	.LBB9_493
.LBB9_285:                              # %if.end287
	movq	8(%rax), %rbx
.LBB9_251:                              # %if.end244
	movq	8(%rbx), %r12
.LBB9_252:                              # %L11909
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB9_255
# BB#253:                               # %if.then28
	movq	%r12, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327806, %rcx           # imm = 0x5007E
	jne	.LBB9_254
# BB#298:                               # %L1019
	movq	8(%rax), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_254
# BB#299:                               # %if.then570
	movq	%r14, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_300
# BB#301:                               # %L1021
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB9_314
# BB#302:                               # %if.then599
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_300
# BB#303:                               # %L1023
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB9_314
# BB#304:                               # %if.then633
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	testq	$1, %rax
	je	.LBB9_314
# BB#305:                               # %land.lhs.true646
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %edx
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB9_314
# BB#306:                               # %land.lhs.true646
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB9_314
# BB#307:                               # %land.lhs.true668
	andq	$16711680, %rdx         # imm = 0xFF0000
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB9_309
# BB#308:                               # %land.lhs.true668
	movq	%rdx, %rcx
	andq	%r15, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB9_311
.LBB9_309:                              # %lor.lhs.false677
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB9_312
# BB#310:                               # %lor.lhs.false677
	andq	%r15, %rdx
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB9_312
.LBB9_311:                              # %lor.lhs.false686
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB9_314
.LBB9_312:                              # %land.lhs.true689
	cmpq	$0, 16(%rsp)            # 8-byte Folded Reload
	je	.LBB9_314
# BB#313:                               # %if.then691
	movq	$1, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$154, %rbx
	jmp	.LBB9_833
.LBB9_300:                              # %if.end585
	movq	8(%rax), %rbx
	jmp	.LBB9_254
.LBB9_526:                              # %if.end786
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_506:                              # %if.end770
	movq	8(%rax), %r14
	movq	8(%r14), %r12
.LBB9_493:                              # %L11911
	movq	$3, %rsi
	movq	%r12, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB9_496
# BB#494:                               # %if.then727
	movq	%r12, recog_data(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196734, %rcx           # imm = 0x3007E
	jne	.LBB9_495
# BB#532:                               # %L1093
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_495
# BB#533:                               # %if.then1087
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_534
# BB#535:                               # %L1095
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB9_545
# BB#536:                               # %if.then1116
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_534
# BB#537:                               # %L1097
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB9_545
# BB#538:                               # %if.then1150
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	testq	$1, %rax
	je	.LBB9_545
# BB#539:                               # %land.lhs.true1163
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %edx
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB9_545
# BB#540:                               # %land.lhs.true1163
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB9_545
# BB#541:                               # %land.lhs.true1187
	andq	$16711680, %rdx         # imm = 0xFF0000
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB9_543
# BB#542:                               # %land.lhs.true1187
	movq	%rdx, %rcx
	andq	%r13, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB9_545
.LBB9_543:                              # %lor.lhs.false1196
	testq	$262144, %rax           # imm = 0x40000
	movq	$164, %rbx
	je	.LBB9_833
# BB#544:                               # %lor.lhs.false1196
	andq	%r13, %rdx
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB9_833
.LBB9_545:                              # %if.end1118
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r14
	jmp	.LBB9_495
.LBB9_534:                              # %if.end1102
	movq	8(%rax), %r14
.LBB9_495:                              # %if.end1078
	movq	8(%r14), %r12
.LBB9_496:                              # %L11914
	movq	$3, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_726
# BB#497:                               # %if.then732
	movq	%r12, recog_data(%rip)
	movq	%r14, %rdi
	movq	16(%rdi), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$196608, %rcx           # imm = 0x30000
	jne	.LBB9_546
# BB#498:                               # %L11971
	movq	%rdi, %r12
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$79, %rax
	jne	.LBB9_499
# BB#547:                               # %L2645
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_500
# BB#548:                               # %if.then1241
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_500
# BB#549:                               # %if.then1252
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_550
# BB#551:                               # %L2648
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_767
# BB#552:                               # %if.then1281
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196688, %rax           # imm = 0x30050
	jne	.LBB9_767
# BB#553:                               # %L2650
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB9_767
# BB#554:                               # %L2651
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %rdx
	testq	%r13, %rax
	je	.LBB9_555
# BB#556:                               # %L2652
	movq	24(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_555
# BB#557:                               # %L2653
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_555
# BB#558:                               # %land.lhs.true1374
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_555
# BB#559:                               # %land.lhs.true1379
	movl	ix86_cpu(%rip), %eax
	movl	x86_himode_math(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	movq	$274, %rbx              # imm = 0x112
	jne	.LBB9_833
.LBB9_555:                              # %if.end1336
	movq	8(%rdx), %rdi
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_546:                              # %if.end1223
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_499:                              # %L11971
	cmpq	$81, %rax
	jne	.LBB9_500
# BB#560:                               # %L2788
	movq	8(%rbx), %r15
	movq	$3, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_500
# BB#561:                               # %if.then1398
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_500
# BB#562:                               # %if.then1409
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_550
# BB#563:                               # %L2791
	movq	8(%rbx), %r15
	movq	$3, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_767
# BB#564:                               # %if.then1438
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196690, %rax           # imm = 0x30052
	jne	.LBB9_767
# BB#565:                               # %L2793
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB9_767
# BB#566:                               # %L2794
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %rcx
	testq	%r13, %rax
	je	.LBB9_567
# BB#568:                               # %L2795
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB9_567
# BB#569:                               # %L2796
	movq	8(%rax), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_767
# BB#570:                               # %if.then1525
	movq	%rbx, recog_data+32(%rip)
	cmpq	$0, 16(%rsp)            # 8-byte Folded Reload
	je	.LBB9_767
# BB#571:                               # %if.then1537
	movq	$1, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$279, %rbx              # imm = 0x117
	jmp	.LBB9_833
.LBB9_500:                              # %sw.epilog1232
	movq	%r12, %rdi
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_314:                              # %if.end601
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
.LBB9_254:                              # %if.end561
	movq	8(%rbx), %r12
.LBB9_255:                              # %L11912
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_256
# BB#316:                               # %if.then33
	movq	%r12, recog_data(%rip)
	movq	%rbx, %rdi
	movq	16(%rdi), %rax
	movl	(%rax), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB9_315
# BB#317:                               # %L11947
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$74, %rax
	jg	.LBB9_334
# BB#318:                               # %L11947
	cmpq	$42, %rax
	jne	.LBB9_490
# BB#319:                               # %L11956.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB9_490
# BB#320:                               # %land.lhs.true1143.i
	movl	16(%rbx), %ecx
	testq	%rcx, %rcx
	jne	.LBB9_490
# BB#321:                               # %L6959.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB9_490
# BB#322:                               # %L6960.i
	movq	8(%rax), %r15
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%r15, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#323:                               # %if.then1170.i
	movq	%r15, recog_data+40(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %r15
	movq	$2, %rsi
	movq	%rdi, %r14
	movq	%r15, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#324:                               # %if.then1180.i
	movq	%r15, recog_data+16(%rip)
	movq	8(%rbx), %rax
	movq	24(%rax), %r15
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%r15, %rdi
	callq	immediate_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#325:                               # %if.then1190.i
	movq	%r15, recog_data+24(%rip)
	movq	8(%rbx), %rax
	movq	32(%rax), %r14
	movq	$5, %rsi
	movq	%rdi, %rbx
	movq	%r14, %rdi
	callq	register_operand
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#326:                               # %if.then1200.i
	movq	%r14, recog_data+32(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_490
# BB#327:                               # %L6965.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB9_490
# BB#328:                               # %land.lhs.true1224.i
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_490
# BB#329:                               # %L6966.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#330:                               # %L6967.i
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#331:                               # %if.then1246.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB9_490
# BB#332:                               # %if.then1246.i
	cmpq	$0, 16(%rsp)            # 8-byte Folded Reload
	je	.LBB9_490
# BB#333:                               # %if.then1253.i
	movq	$1, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$612, %rbx              # imm = 0x264
	jmp	.LBB9_833
.LBB9_256:
	movq	%rbx, %rdi
	jmp	.LBB9_727
.LBB9_315:                              # %if.end709
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_334:                              # %L11947
	cmpq	$120, %rax
	jg	.LBB9_349
# BB#335:                               # %L11947
	cmpq	$78, %rax
	jg	.LBB9_347
# BB#336:                               # %L11947
	cmpq	$75, %rax
	jne	.LBB9_490
# BB#337:                               # %L7278.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%rdi, %r15
	movq	%r14, %rdi
	callq	register_operand
	movq	%r15, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#338:                               # %if.then1260.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%rdi, %rbx
	movq	%r14, %rdi
	callq	x86_64_immediate_operand
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#339:                               # %if.then1268.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_490
# BB#340:                               # %L7281.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB9_490
# BB#341:                               # %land.lhs.true1292.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_490
# BB#342:                               # %L7282.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#343:                               # %L7283.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB9_490
# BB#344:                               # %L7284.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB9_490
# BB#345:                               # %land.lhs.true1328.i
	movzbl	target_flags+3(%rip), %eax
	movq	$636, %rbx              # imm = 0x27C
	jmp	.LBB9_346
.LBB9_349:                              # %L11947
	cmpq	$121, %rax
	jne	.LBB9_350
# BB#381:                               # %L2359.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262266, %rcx           # imm = 0x4007A
	jne	.LBB9_490
# BB#382:                               # %L2360.i
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB9_490
# BB#383:                               # %L2361.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327758, %rax           # imm = 0x5004E
	jne	.LBB9_490
# BB#384:                               # %L2362.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$327680, %rdx           # imm = 0x50000
	jne	.LBB9_490
# BB#385:                               # %L11959.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	jne	.LBB9_386
# BB#399:                               # %L2440.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%rdi, %r12
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r12, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#400:                               # %if.then404.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327800, %rcx           # imm = 0x50078
	jne	.LBB9_490
# BB#401:                               # %L2442.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%rdi, %r15
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r15, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#402:                               # %if.then425.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_490
# BB#403:                               # %land.lhs.true434.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB9_490
# BB#404:                               # %L2444.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#405:                               # %L2445.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	scratch_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#406:                               # %if.then456.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#407:                               # %L2447.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_490
# BB#408:                               # %land.lhs.true480.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_490
# BB#409:                               # %land.lhs.true485.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB9_490
# BB#410:                               # %land.lhs.true488.i
	movq	%rdi, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$265, %rbx              # imm = 0x109
	je	.LBB9_368
	jmp	.LBB9_833
.LBB9_837:                              # %if.end1841
	movq	8(%r15), %r12
.LBB9_603:
	movq	%r14, %rdi
.LBB9_604:                              # %L7311
	movzbl	(%r12), %eax
	cmpq	$103, %rax
	jne	.LBB9_605
# BB#620:                               # %L7312
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%r12), %r14
	movq	$15, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_841
# BB#621:                               # %if.then1977
	movq	%r14, recog_data+24(%rip)
	movq	16(%r12), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_841
# BB#622:                               # %if.then1988
	movq	%rbx, recog_data+32(%rip)
	movq	16(%r15), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_841
# BB#623:                               # %if.then1999
	movq	%rbx, recog_data+8(%rip)
	movq	24(%r15), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_841
# BB#624:                               # %if.then2010
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_550
# BB#625:                               # %L7317
	movq	8(%rcx), %rbx
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r13, %rax
	je	.LBB9_767
# BB#626:                               # %if.then2039
	movq	%rbx, recog_data+40(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_550
# BB#627:                               # %L7319
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB9_550
# BB#628:                               # %land.lhs.true2079
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_550
# BB#629:                               # %land.lhs.true2084
	movzbl	target_flags+2(%rip), %ecx
	testq	$5, %rcx
	je	.LBB9_550
# BB#630:                               # %land.lhs.true2087
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	movq	$638, %rbx              # imm = 0x27E
	jne	.LBB9_833
	jmp	.LBB9_631
.LBB9_605:                              # %if.end1814
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_834:                              # %if.end240.i
	movq	8(%rbx), %r13
	movq	%rbx, %r15
	movq	%rbx, %rdi
	jmp	.LBB9_4
.LBB9_347:                              # %L11947
	addq	$-79, %rax
	andq	%r15, %rax
	cmpq	$11, %rax
	ja	.LBB9_490
# BB#348:                               # %L11947
	jmpq	*.LJTI9_1(,%rax,8)
.LBB9_411:                              # %L2491.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB9_490
# BB#412:                               # %L11961.i
	movq	%rdi, %r14
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_418
# BB#413:                               # %if.then511.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_417
# BB#414:                               # %if.then524.i
	movq	%r15, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_415
# BB#430:                               # %L2494.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_433
# BB#431:                               # %if.then556.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327760, %rax           # imm = 0x50050
	jne	.LBB9_433
# BB#432:                               # %L2496.i
	movq	8(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_433
# BB#434:                               # %L2497.i
	movq	16(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_435
# BB#436:                               # %L2498.i
	movq	24(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_435
# BB#437:                               # %L2499.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB9_435
# BB#438:                               # %L11963.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$61, %rcx
	jne	.LBB9_435
# BB#439:                               # %L11965.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_435
# BB#440:                               # %L11967.i
	movl	target_flags(%rip), %esi
	movl	optimize_size(%rip), %eax
	andq	$33554432, %rsi         # imm = 0x2000000
	movq	%r14, %rdi
	je	.LBB9_443
# BB#441:                               # %L11967.i
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB9_443
# BB#442:                               # %land.lhs.true710.i
	movl	ix86_cpu(%rip), %ecx
	movq	%rdi, %r8
	movl	x86_use_cltd(%rip), %edi
	movq	$1, %rbx
	shlq	%cl, %rbx
	andq	%rdi, %rbx
	movq	%r8, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rbx
	movq	$268, %rbx              # imm = 0x10C
	je	.LBB9_833
.LBB9_443:                              # %L11968.i
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rsi
	je	.LBB9_446
# BB#444:                               # %land.lhs.true717.i
	movq	%rdi, %r8
	movq	$269, %rbx              # imm = 0x10D
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB9_833
# BB#445:                               # %lor.lhs.false719.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_cltd(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	movq	%r8, %rdi
	jne	.LBB9_833
.LBB9_446:                              # %if.end724.i
	movq	%rdi, %r14
	movq	8(%rdx), %rax
	jmp	.LBB9_416
.LBB9_350:                              # %L11947
	cmpq	$122, %rax
	jne	.LBB9_490
# BB#351:                               # %L2309.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$393306, %rax           # imm = 0x6005A
	jne	.LBB9_490
# BB#352:                               # %L2310.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$393294, %rax           # imm = 0x6004E
	jne	.LBB9_490
# BB#353:                               # %L2311.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$393216, %rdx           # imm = 0x60000
	jne	.LBB9_490
# BB#354:                               # %L11957.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	jne	.LBB9_355
# BB#369:                               # %L2389.i
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%rdi, %r12
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r12, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#370:                               # %if.then148.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393336, %rcx           # imm = 0x60078
	jne	.LBB9_490
# BB#371:                               # %L2391.i
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%rdi, %r15
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r15, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#372:                               # %if.then169.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_490
# BB#373:                               # %land.lhs.true178.i
	movq	8(%rax), %rax
	cmpq	$64, %rax
	jne	.LBB9_490
# BB#374:                               # %L2393.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#375:                               # %L2394.i
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	scratch_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#376:                               # %if.then200.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#377:                               # %L2396.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_490
# BB#378:                               # %land.lhs.true224.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_490
# BB#379:                               # %land.lhs.true229.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB9_490
# BB#380:                               # %land.lhs.true232.i
	movq	%rdi, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$263, %rbx              # imm = 0x107
	je	.LBB9_368
	jmp	.LBB9_833
.LBB9_669:                              # %if.end2179
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
.LBB9_634:                              # %if.end2125
	movq	8(%rbx), %r12
.LBB9_635:                              # %L11923
	movq	$16, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_636
# BB#678:                               # %if.then2114
	movq	%r12, recog_data(%rip)
	movq	%rbx, %rdi
	movq	16(%rdi), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$1048648, %rax          # imm = 0x100048
	jne	.LBB9_677
# BB#679:                               # %L7333
	movq	%rdi, %r14
	movq	8(%r15), %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	sse_comparison_operator
	testq	%r13, %rax
	je	.LBB9_681
# BB#680:                               # %if.then2486
	movq	%r12, recog_data+8(%rip)
	movq	8(%r12), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_681
# BB#684:                               # %if.then2502
	movq	%rbx, recog_data+32(%rip)
	movq	16(%r12), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_681
# BB#685:                               # %if.then2510
	movq	%rbx, recog_data+40(%rip)
	movq	16(%r15), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_839
# BB#686:                               # %if.then2518
	movq	%rbx, recog_data+16(%rip)
	movq	24(%r15), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_839
# BB#687:                               # %if.then2529
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_688
# BB#689:                               # %L7339
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r13, %rax
	je	.LBB9_840
# BB#690:                               # %if.then2561
	movq	%rbx, recog_data+48(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_688
# BB#691:                               # %L7341
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB9_688
# BB#692:                               # %land.lhs.true2607
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_688
# BB#693:                               # %land.lhs.true2612
	movl	target_flags(%rip), %ecx
	testq	$262144, %rcx           # imm = 0x40000
	je	.LBB9_688
# BB#694:                               # %land.lhs.true2615
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	jne	.LBB9_696
# BB#695:                               # %lor.lhs.false2620
	movq	recog_data+24(%rip), %rdx
	movzbl	(%rdx), %edx
	cmpq	$66, %rdx
	je	.LBB9_688
.LBB9_696:                              # %land.lhs.true2625
	testq	$16, %rcx
	movq	$639, %rbx              # imm = 0x27F
	je	.LBB9_833
# BB#697:                               # %lor.lhs.false2628
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	andq	$65534, %rcx            # imm = 0xFFFE
	cmpq	$102, %rcx
	je	.LBB9_688
	jmp	.LBB9_833
.LBB9_636:
	movq	%rbx, %rdi
	jmp	.LBB9_727
.LBB9_677:                              # %if.end2477
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_839:                              # %if.end2520
	movq	8(%r15), %r12
.LBB9_681:
	movq	%r14, %rdi
.LBB9_682:                              # %L7355
	movzbl	(%r12), %eax
	cmpq	$103, %rax
	jne	.LBB9_683
# BB#698:                               # %L7356
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%r12), %r14
	movq	$16, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_841
# BB#699:                               # %if.then2656
	movq	%r14, recog_data+24(%rip)
	movq	16(%r12), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_841
# BB#700:                               # %if.then2667
	movq	%rbx, recog_data+32(%rip)
	movq	16(%r15), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_841
# BB#701:                               # %if.then2678
	movq	%rbx, recog_data+8(%rip)
	movq	24(%r15), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_841
# BB#702:                               # %if.then2689
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_550
# BB#703:                               # %L7361
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r13, %rax
	je	.LBB9_767
# BB#704:                               # %if.then2718
	movq	%rbx, recog_data+40(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_550
# BB#705:                               # %L7363
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB9_550
# BB#706:                               # %land.lhs.true2758
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_550
# BB#707:                               # %land.lhs.true2763
	movzbl	target_flags+2(%rip), %ecx
	testq	$5, %rcx
	je	.LBB9_550
# BB#708:                               # %land.lhs.true2766
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	movq	$640, %rbx              # imm = 0x280
	jne	.LBB9_833
.LBB9_631:                              # %lor.lhs.false2092
	movq	recog_data+24(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	je	.LBB9_550
	jmp	.LBB9_833
.LBB9_841:                              # %if.end1979
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_683:                              # %if.end2493
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_767:                              # %if.end1283
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_550:                              # %if.end1267
	movq	8(%rax), %rdi
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_838:                              # %if.end1884
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_610:                              # %if.end1865
	movq	8(%rax), %rdi
	movq	16(%rdi), %r15
	movq	8(%r15), %r12
	jmp	.LBB9_604
.LBB9_840:                              # %if.end2563
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_688:                              # %if.end2544
	movq	8(%rax), %rdi
	movq	16(%rdi), %r15
	movq	8(%r15), %r12
	jmp	.LBB9_682
.LBB9_79:                               # %if.end574.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	jmp	.LBB9_64
.LBB9_447:                              # %L2669.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%r15, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#448:                               # %if.then820.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%rdi, %rbx
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#449:                               # %if.then828.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB9_490
# BB#450:                               # %L2672.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%r15, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#451:                               # %if.then846.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327762, %rax           # imm = 0x50052
	jne	.LBB9_490
# BB#452:                               # %L2674.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rdi, %r14
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#453:                               # %L2675.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rdi, %rbx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#454:                               # %L2676.i
	movq	%rdi, %rbx
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB9_455
# BB#459:                               # %L2716.i
	movq	8(%rax), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%rbx, %rdi
	je	.LBB9_490
# BB#460:                               # %land.lhs.true916.i
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB9_490
# BB#461:                               # %land.lhs.true916.i
	cmpq	$0, 16(%rsp)            # 8-byte Folded Reload
	je	.LBB9_490
# BB#462:                               # %if.then921.i
	movq	$1, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$276, %rbx              # imm = 0x114
	jmp	.LBB9_833
.LBB9_463:                              # %L4400.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%rdi, %r15
	movq	%r14, %rdi
	callq	register_operand
	movq	%r15, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#464:                               # %if.then928.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%rdi, %rbx
	movq	%r14, %rdi
	callq	nonmemory_operand
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#465:                               # %if.then936.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#466:                               # %L4403.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	scratch_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#467:                               # %if.then954.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#468:                               # %L4405.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_490
# BB#469:                               # %land.lhs.true978.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_490
# BB#470:                               # %land.lhs.true983.i
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB9_490
# BB#471:                               # %land.lhs.true986.i
	movl	x86_cmove(%rip), %edx
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	andq	$327680, %rax           # imm = 0x50000
	orq	%rsi, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$405, %rbx              # imm = 0x195
	jne	.LBB9_833
	jmp	.LBB9_490
.LBB9_472:                              # %L4662.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%rdi, %r15
	movq	%r14, %rdi
	callq	register_operand
	movq	%r15, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#473:                               # %if.then1000.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%rdi, %rbx
	movq	%r14, %rdi
	callq	nonmemory_operand
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#474:                               # %if.then1008.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#475:                               # %L4665.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	scratch_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#476:                               # %if.then1026.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#477:                               # %L4667.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_490
# BB#478:                               # %land.lhs.true1050.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_490
# BB#479:                               # %land.lhs.true1055.i
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB9_490
# BB#480:                               # %land.lhs.true1058.i
	movl	x86_cmove(%rip), %edx
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	andq	$327680, %rax           # imm = 0x50000
	orq	%rsi, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$423, %rbx              # imm = 0x1A7
	jne	.LBB9_833
	jmp	.LBB9_490
.LBB9_481:                              # %L5023.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%rdi, %r15
	movq	%r14, %rdi
	callq	register_operand
	movq	%r15, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#482:                               # %if.then1072.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %r14
	movq	$2, %rsi
	movq	%rdi, %rbx
	movq	%r14, %rdi
	callq	nonmemory_operand
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#483:                               # %if.then1080.i
	movq	%r14, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#484:                               # %L5026.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	scratch_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#485:                               # %if.then1098.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#486:                               # %L5028.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_490
# BB#487:                               # %land.lhs.true1122.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_490
# BB#488:                               # %land.lhs.true1127.i
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB9_490
# BB#489:                               # %land.lhs.true1130.i
	movl	x86_cmove(%rip), %edx
	movl	ix86_arch(%rip), %ecx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	andq	$327680, %rax           # imm = 0x50000
	orq	%rsi, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	$448, %rbx              # imm = 0x1C0
	jne	.LBB9_833
	jmp	.LBB9_490
.LBB9_835:                              # %if.end528
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %rbx
	jmp	.LBB9_251
.LBB9_567:                              # %if.end1493
	movq	8(%rcx), %rdi
	movq	8(%rdi), %r12
	jmp	.LBB9_727
.LBB9_386:                              # %L11959.i
	cmpq	$121, %rcx
	jne	.LBB9_490
# BB#387:                               # %L2363.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%rdi, %r12
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r12, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#388:                               # %if.then303.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB9_490
# BB#389:                               # %L2365.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%rdi, %r15
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r15, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#390:                               # %if.then324.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_490
# BB#391:                               # %land.lhs.true333.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB9_490
# BB#392:                               # %L2367.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#393:                               # %L2368.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	scratch_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#394:                               # %if.then355.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#395:                               # %L2370.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_490
# BB#396:                               # %land.lhs.true379.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_490
# BB#397:                               # %land.lhs.true384.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB9_490
# BB#398:                               # %land.lhs.true387.i
	movq	%rdi, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$262, %rbx              # imm = 0x106
	je	.LBB9_368
	jmp	.LBB9_833
.LBB9_355:                              # %L11957.i
	cmpq	$121, %rcx
	jne	.LBB9_490
# BB#356:                               # %L2312.i
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%rdi, %r12
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r12, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#357:                               # %if.then51.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393337, %rcx           # imm = 0x60079
	jne	.LBB9_490
# BB#358:                               # %L2314.i
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%rdi, %r15
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movq	%r15, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#359:                               # %if.then72.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_490
# BB#360:                               # %land.lhs.true81.i
	movq	8(%rax), %rax
	cmpq	$64, %rax
	jne	.LBB9_490
# BB#361:                               # %L2316.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#362:                               # %L2317.i
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	scratch_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#363:                               # %if.then102.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_490
# BB#364:                               # %L2319.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_490
# BB#365:                               # %land.lhs.true126.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_490
# BB#366:                               # %land.lhs.true130.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB9_490
# BB#367:                               # %land.lhs.true132.i
	movq	%rdi, %rcx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$260, %rbx              # imm = 0x104
	jne	.LBB9_833
.LBB9_368:                              # %lor.lhs.false.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%rcx, %rdi
	je	.LBB9_490
	jmp	.LBB9_833
.LBB9_58:                               # %if.then340.i
	cmpq	$8, %rax
	jne	.LBB9_76
# BB#59:                                # %L6642.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_51
# BB#60:                                # %L6643.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	movq	%r14, %rdi
	jne	.LBB9_64
# BB#61:                                # %land.lhs.true390.i
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_64
# BB#62:                                # %land.lhs.true396.i
	movzbl	target_flags+3(%rip), %ecx
	testq	$2, %rcx
	je	.LBB9_64
# BB#63:                                # %land.lhs.true399.i
	movl	x86_single_stringop(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movq	%rdi, %rbx
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rdi
	movq	%rbx, %rdi
	movq	$595, %rbx              # imm = 0x253
	jne	.LBB9_833
.LBB9_64:                               # %if.end404.i
	movq	8(%rax), %r15
	movq	8(%r15), %r13
	jmp	.LBB9_4
.LBB9_76:                               # %if.end269.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_51:                               # %if.end253.i
	movq	8(%rax), %r15
	movq	8(%r15), %r13
	movq	%r14, %rdi
.LBB9_4:                                # %L11907.i
	movq	%rdi, %r14
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_7
# BB#5:                                 # %if.then.i
	movq	%r13, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262210, %rcx           # imm = 0x40042
	jne	.LBB9_6
# BB#85:                                # %L280.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB9_6
# BB#86:                                # %land.lhs.true671.i
	movl	8(%rax), %eax
	cmpq	$7, %rax
	jne	.LBB9_6
# BB#87:                                # %L281.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$47, %rdx
	jne	.LBB9_88
# BB#89:                                # %L282.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB9_88
# BB#90:                                # %land.lhs.true714.i
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB9_88
# BB#91:                                # %L283.i
	movq	16(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262219, %rdx           # imm = 0x4004B
	jne	.LBB9_88
# BB#92:                                # %L284.i
	movq	8(%rcx), %rdx
	movl	(%rdx), %esi
	andq	$16777215, %rsi         # imm = 0xFFFFFF
	cmpq	$262205, %rsi           # imm = 0x4003D
	jne	.LBB9_88
# BB#93:                                # %land.lhs.true766.i
	movl	8(%rdx), %edx
	cmpq	$7, %rdx
	jne	.LBB9_88
# BB#94:                                # %L285.i
	movq	16(%rcx), %rcx
	movzbl	(%rcx), %edx
	cmpq	$54, %rdx
	jne	.LBB9_88
# BB#95:                                # %land.lhs.true789.i
	movq	8(%rcx), %rcx
	cmpq	$4, %rcx
	jne	.LBB9_88
# BB#96:                                # %L286.i
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_88
# BB#97:                                # %L287.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3342402, %rdx          # imm = 0x330042
	jne	.LBB9_88
# BB#98:                                # %L288.i
	movq	8(%rcx), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$62, %rcx
	movq	%r14, %rdx
	jne	.LBB9_100
# BB#99:                                # %land.lhs.true854.i
	movzbl	target_flags+3(%rip), %ecx
	movq	$41, %rbx
	testq	$2, %rcx
	je	.LBB9_833
.LBB9_100:                              # %if.end858.i
	movq	%rdx, %r14
	movq	8(%rax), %r15
	jmp	.LBB9_6
.LBB9_88:                               # %if.end692.i
	movq	8(%rax), %r15
.LBB9_6:                                # %if.end654.i
	movq	8(%r15), %r13
.LBB9_7:                                # %L11910.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	memory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_10
# BB#8:                                 # %if.then8.i
	movq	%r13, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262270, %rcx           # imm = 0x4007E
	jne	.LBB9_9
# BB#101:                               # %L1056.i
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB9_9
# BB#102:                               # %if.then890.i
	movq	%rbx, recog_data+8(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_103
# BB#104:                               # %L1058.i
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB9_114
# BB#105:                               # %if.then920.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_103
# BB#106:                               # %L1060.i
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r13, %rax
	je	.LBB9_114
# BB#107:                               # %if.then955.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	testq	$1, %rax
	je	.LBB9_114
# BB#108:                               # %land.lhs.true968.i
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %edx
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB9_114
# BB#109:                               # %land.lhs.true968.i
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB9_114
# BB#110:                               # %land.lhs.true994.i
	andq	$16711680, %rdx         # imm = 0xFF0000
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB9_112
# BB#111:                               # %land.lhs.true994.i
	movq	%rdx, %rcx
	movabsq	$4294967295, %rsi       # imm = 0xFFFFFFFF
	andq	%rsi, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB9_114
.LBB9_112:                              # %lor.lhs.false1005.i
	testq	$262144, %rax           # imm = 0x40000
	movq	$159, %rbx
	je	.LBB9_833
# BB#113:                               # %lor.lhs.false1005.i
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB9_833
.LBB9_114:                              # %if.end922.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	8(%rax), %r15
	jmp	.LBB9_9
.LBB9_103:                              # %if.end906.i
	movq	8(%rax), %r15
.LBB9_9:                                # %if.end881.i
	movq	8(%r15), %r13
.LBB9_10:                               # %L11913.i
	movq	$4, %rsi
	movq	%r13, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_726
# BB#11:                                # %if.then13.i
	movq	%r13, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	movq	%r14, %rdi
	jne	.LBB9_727
# BB#12:                                # %L11929.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$121, %rax
	jg	.LBB9_119
# BB#13:                                # %L11929.i
	cmpq	$74, %rax
	jg	.LBB9_115
# BB#14:                                # %L11929.i
	cmpq	$42, %rax
	jne	.LBB9_727
# BB#15:                                # %L11934.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB9_727
# BB#16:                                # %land.lhs.true1743.i
	movl	16(%rbx), %ecx
	testq	%rcx, %rcx
	jne	.LBB9_727
# BB#17:                                # %L6930.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB9_727
# BB#18:                                # %L6931.i
	movq	%rdi, %r14
	movq	8(%rax), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB9_726
# BB#19:                                # %if.then1773.i
	movq	%r15, recog_data+40(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %r15
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_726
# BB#20:                                # %if.then1783.i
	movq	%r15, recog_data+16(%rip)
	movq	8(%rbx), %rax
	movq	24(%rax), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	immediate_operand
	testq	%r13, %rax
	je	.LBB9_726
# BB#21:                                # %if.then1793.i
	movq	%r15, recog_data+24(%rip)
	movq	8(%rbx), %rax
	movq	32(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_726
# BB#22:                                # %if.then1803.i
	movq	%rbx, recog_data+32(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB9_726
# BB#23:                                # %L6936.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB9_726
# BB#24:                                # %land.lhs.true1830.i
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB9_726
# BB#25:                                # %L6937.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_726
# BB#26:                                # %L6938.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_726
# BB#27:                                # %if.then1854.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB9_726
# BB#28:                                # %if.then1854.i
	cmpq	$0, 16(%rsp)            # 8-byte Folded Reload
	movq	%r14, %rdi
	je	.LBB9_727
# BB#29:                                # %if.then1862.i
	movq	$1, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$611, %rbx              # imm = 0x263
	jmp	.LBB9_833
.LBB9_726:                              # %L5602
	movq	%r14, %rdi
	jmp	.LBB9_727
.LBB9_119:                              # %L11929.i
	cmpq	$122, %rax
	jne	.LBB9_727
# BB#120:                               # %L2334.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB9_727
# BB#121:                               # %L2335.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327758, %rax           # imm = 0x5004E
	jne	.LBB9_727
# BB#122:                               # %L2336.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$327680, %rdx           # imm = 0x50000
	jne	.LBB9_727
# BB#123:                               # %L11935.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	jne	.LBB9_124
# BB#147:                               # %L2414.i
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	testq	%r13, %rax
	je	.LBB9_148
# BB#149:                               # %if.then1205.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327800, %rcx           # imm = 0x50078
	jne	.LBB9_150
# BB#151:                               # %L2416.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_152
# BB#153:                               # %if.then1228.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_154
# BB#155:                               # %land.lhs.true1238.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB9_156
# BB#157:                               # %L2418.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_158
# BB#159:                               # %L2419.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_160
# BB#161:                               # %if.then1262.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_162
# BB#163:                               # %L2421.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_164
# BB#165:                               # %land.lhs.true1289.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_166
# BB#167:                               # %land.lhs.true1295.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$264, %rbx              # imm = 0x108
	jne	.LBB9_833
# BB#168:                               # %lor.lhs.false1301.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	je	.LBB9_727
	jmp	.LBB9_833
.LBB9_115:                              # %L11929.i
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	cmpq	$75, %rax
	je	.LBB9_236
# BB#116:                               # %L11929.i
	cmpq	$79, %rax
	movabsq	$4294967295, %r13       # imm = 0xFFFFFFFF
	jne	.LBB9_117
# BB#169:                               # %L2568.i
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB9_170
# BB#171:                               # %L11937.i
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_177
# BB#172:                               # %if.then1321.i
	movq	%r15, recog_data+16(%rip)
	movq	16(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_176
# BB#173:                               # %if.then1334.i
	movq	%r15, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB9_174
# BB#181:                               # %L2571.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_184
# BB#182:                               # %if.then1367.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262224, %rax           # imm = 0x40050
	jne	.LBB9_184
# BB#183:                               # %L2573.i
	movq	8(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB9_184
# BB#185:                               # %L2574.i
	movq	16(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %rcx
	testq	%r13, %rax
	je	.LBB9_186
# BB#187:                               # %L2575.i
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB9_186
# BB#188:                               # %L2576.i
	movq	8(%rax), %rax
	movl	(%rax), %edx
	movq	%rdx, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	cmpq	$3407872, %rsi          # imm = 0x340000
	jne	.LBB9_186
# BB#189:                               # %L11939.i
	andq	$65535, %rdx            # imm = 0xFFFF
	cmpq	$61, %rdx
	jne	.LBB9_186
# BB#190:                               # %L11941.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_186
# BB#191:                               # %L11943.i
	movl	optimize_size(%rip), %eax
	testq	%rax, %rax
	movq	$272, %rbx              # imm = 0x110
	jne	.LBB9_833
# BB#192:                               # %land.lhs.true1524.i
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_cltd(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r13, %rsi
	jne	.LBB9_193
# BB#194:                               # %land.lhs.true1524.i
	movabsq	$1, %rbx
	jmp	.LBB9_195
.LBB9_236:                              # %L7267.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB9_237
# BB#238:                               # %if.then1869.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB9_239
# BB#240:                               # %if.then1877.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	movq	8(%rsp), %rdi           # 8-byte Reload
	jne	.LBB9_727
# BB#241:                               # %L7270.i
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB9_727
# BB#242:                               # %land.lhs.true1904.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_727
# BB#243:                               # %L7271.i
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_727
# BB#244:                               # %L7272.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB9_727
# BB#245:                               # %L7273.i
	movq	8(%rax), %rax
	movzbl	(%rax), %eax
	cmpq	$62, %rax
	jne	.LBB9_727
# BB#246:                               # %land.lhs.true1945.i
	movzbl	target_flags+3(%rip), %eax
	movq	$635, %rbx              # imm = 0x27B
	testq	$2, %rax
	jne	.LBB9_727
	jmp	.LBB9_833
.LBB9_117:                              # %L11929.i
	cmpq	$81, %rax
	jne	.LBB9_118
# BB#212:                               # %L2721.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_213
# BB#214:                               # %if.then1634.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_215
# BB#216:                               # %if.then1642.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB9_217
# BB#218:                               # %L2724.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_219
# BB#220:                               # %if.then1661.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262226, %rax           # imm = 0x40052
	jne	.LBB9_221
# BB#222:                               # %L2726.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_223
# BB#224:                               # %L2727.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_225
# BB#226:                               # %L2728.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB9_227
# BB#232:                               # %L2768.i
	movq	8(%rax), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_233
# BB#234:                               # %L2768.i
	cmpq	$0, 16(%rsp)            # 8-byte Folded Reload
	movq	8(%rsp), %rdi           # 8-byte Reload
	je	.LBB9_727
# BB#235:                               # %if.then1736.i
	movq	$1, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$278, %rbx              # imm = 0x116
	jmp	.LBB9_833
.LBB9_170:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_118:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_237:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_239:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_124:                              # %L11935.i
	cmpq	$121, %rcx
	jne	.LBB9_727
# BB#125:                               # %L2337.i
	movq	%rdi, %r13
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_126
# BB#127:                               # %if.then1096.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB9_128
# BB#129:                               # %L2339.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_130
# BB#131:                               # %if.then1119.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB9_132
# BB#133:                               # %land.lhs.true1129.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB9_134
# BB#135:                               # %L2341.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_136
# BB#137:                               # %L2342.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_138
# BB#139:                               # %if.then1153.i
	movq	%rbx, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_140
# BB#141:                               # %L2344.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_142
# BB#143:                               # %land.lhs.true1180.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_144
# BB#145:                               # %land.lhs.true1186.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$261, %rbx              # imm = 0x105
	jne	.LBB9_833
# BB#146:                               # %lor.lhs.false1192.i
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	%r13, %rdi
	je	.LBB9_727
	jmp	.LBB9_833
.LBB9_213:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_215:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_217:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_148:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_150:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_433:                              # %if.end558.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_415:                              # %if.end539.i
	movq	8(%rax), %rax
	jmp	.LBB9_416
.LBB9_435:                              # %if.end620.i
	movq	8(%rdx), %rax
.LBB9_416:                              # %L11962.i
	movq	16(%rax), %rbx
.LBB9_417:                              # %if.end526.i
	movq	8(%rbx), %r15
.LBB9_418:                              # %L11962.i
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%r14, %rdi
	je	.LBB9_490
# BB#419:                               # %if.then516.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#420:                               # %if.then741.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB9_490
# BB#421:                               # %L2557.i
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%r15, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#422:                               # %if.then759.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327760, %rax           # imm = 0x50050
	jne	.LBB9_490
# BB#423:                               # %L2559.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rdi, %r14
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#424:                               # %L2560.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rdi, %rbx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%rbx, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#425:                               # %L2561.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB9_490
# BB#426:                               # %L2562.i
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rdi, %r14
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r14, %rdi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_490
# BB#427:                               # %if.then806.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB9_490
# BB#428:                               # %if.then806.i
	cmpq	$0, 16(%rsp)            # 8-byte Folded Reload
	je	.LBB9_490
# BB#429:                               # %if.then813.i
	movq	$1, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$270, %rbx              # imm = 0x10E
	jmp	.LBB9_833
.LBB9_455:                              # %L2676.i
	cmpq	$49, %rcx
	movq	%rbx, %rdi
	jne	.LBB9_490
# BB#456:                               # %L2677.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_490
# BB#457:                               # %land.lhs.true900.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_490
# BB#458:                               # %land.lhs.true905.i
	movzbl	target_flags+3(%rip), %eax
	movq	$275, %rbx              # imm = 0x113
.LBB9_346:                              # %land.lhs.true1328.i
	testq	$2, %rax
	jne	.LBB9_833
.LBB9_490:                              # %if.end716
	movq	8(%rdi), %r12
.LBB9_727:                              # %L5602
	movzbl	(%r12), %eax
	cmpq	$59, %rax
	jne	.LBB9_832
# BB#728:                               # %L5603
	movq	16(%rdi), %r12
	movzbl	(%r12), %eax
	cmpq	$72, %rax
	jne	.LBB9_832
# BB#729:                               # %L5604
	movq	8(%r12), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	comparison_operator
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB9_832
# BB#730:                               # %if.then3136
	movq	%rbx, recog_data(%rip)
	movq	8(%rbx), %r14
	xorq	%rsi, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_832
# BB#731:                               # %if.then3144
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB9_735
# BB#732:                               # %if.then3152
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$59, %rcx
	jne	.LBB9_733
# BB#793:                               # %L5677
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB9_734
# BB#794:                               # %L5678
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_775
# BB#795:                               # %L5680
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB9_775
# BB#796:                               # %land.lhs.true3425
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB9_775
# BB#797:                               # %L5681
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_775
# BB#798:                               # %L5682
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB9_775
# BB#799:                               # %land.lhs.true3481
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_775
# BB#800:                               # %land.lhs.true3486
	movl	ix86_arch(%rip), %ecx
	movl	target_flags(%rip), %esi
	movl	x86_cmove(%rip), %edx
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rdx, %rdi
	movq	%rsi, %rcx
	andq	$327680, %rcx           # imm = 0x50000
	orq	%rdi, %rcx
	testq	%r15, %rcx
	je	.LBB9_775
# BB#801:                               # %land.lhs.true3486
	movq	%rsi, %rcx
	andq	$1, %rcx
	je	.LBB9_775
# BB#802:                               # %land.lhs.true3496
	testq	$327680, %rsi           # imm = 0x50000
	je	.LBB9_804
# BB#803:                               # %land.lhs.true3499
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB9_775
.LBB9_804:                              # %lor.lhs.false3505
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %edx
	testq	$262144, %rsi           # imm = 0x40000
	je	.LBB9_806
# BB#805:                               # %lor.lhs.false3505
	movq	%rdx, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	andq	%r15, %rcx
	cmpq	$1048576, %rcx          # imm = 0x100000
	je	.LBB9_775
.LBB9_806:                              # %land.lhs.true3514
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB9_775
# BB#807:                               # %land.lhs.true3514
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB9_775
# BB#808:                               # %land.lhs.true3538
	movl	(%rbx), %ecx
	xorq	%rdx, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB9_775
# BB#809:                               # %land.lhs.true3548
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	$495, %rbx              # imm = 0x1EF
	jmp	.LBB9_791
.LBB9_733:                              # %if.then3152
	cmpq	$67, %rcx
	jne	.LBB9_734
# BB#773:                               # %L5608
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%r12), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB9_734
# BB#774:                               # %L5610
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_775
# BB#776:                               # %L5611
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB9_775
# BB#777:                               # %land.lhs.true3228
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB9_775
# BB#778:                               # %L5612
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_775
# BB#779:                               # %L5613
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB9_775
# BB#780:                               # %land.lhs.true3284
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB9_775
# BB#781:                               # %land.lhs.true3289
	movl	ix86_arch(%rip), %ecx
	movl	target_flags(%rip), %esi
	movl	x86_cmove(%rip), %edx
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rdx, %rdi
	movq	%rsi, %rcx
	andq	$327680, %rcx           # imm = 0x50000
	orq	%rdi, %rcx
	testq	%r15, %rcx
	je	.LBB9_775
# BB#782:                               # %land.lhs.true3289
	movq	%rsi, %rcx
	andq	$1, %rcx
	je	.LBB9_775
# BB#783:                               # %land.lhs.true3299
	testq	$327680, %rsi           # imm = 0x50000
	je	.LBB9_785
# BB#784:                               # %land.lhs.true3302
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB9_775
.LBB9_785:                              # %lor.lhs.false3308
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %edx
	testq	$262144, %rsi           # imm = 0x40000
	je	.LBB9_787
# BB#786:                               # %lor.lhs.false3308
	movq	%rdx, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	andq	%r15, %rcx
	cmpq	$1048576, %rcx          # imm = 0x100000
	je	.LBB9_775
.LBB9_787:                              # %land.lhs.true3317
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB9_775
# BB#788:                               # %land.lhs.true3317
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB9_775
# BB#789:                               # %land.lhs.true3341
	movl	(%rbx), %ecx
	xorq	%rdx, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB9_775
# BB#790:                               # %land.lhs.true3351
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	$492, %rbx              # imm = 0x1EC
.LBB9_791:                              # %land.lhs.true3351
	testq	%rax, %rax
	jne	.LBB9_833
# BB#792:                               # %land.lhs.true3351.if.end3357_crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_775:                              # %if.end3202
	movq	8(%rax), %rax
	movq	16(%rax), %r12
.LBB9_734:                              # %sw.epilog3168
	movq	8(%r12), %rax
	movq	16(%rax), %rbx
.LBB9_735:                              # %L5629
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB9_832
# BB#736:                               # %if.then3157
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$59, %rcx
	jne	.LBB9_737
# BB#810:                               # %L5701
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB9_832
# BB#811:                               # %L5702
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_832
# BB#812:                               # %L5704
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB9_832
# BB#813:                               # %land.lhs.true3752
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB9_832
# BB#814:                               # %L5705
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_832
# BB#815:                               # %L5706
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3735613, %rcx          # imm = 0x39003D
	jne	.LBB9_832
# BB#816:                               # %L11993
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_832
# BB#817:                               # %L11995
	movl	target_flags(%rip), %eax
	testq	$1, %rax
	je	.LBB9_825
# BB#818:                               # %land.lhs.true3791
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB9_820
# BB#819:                               # %land.lhs.true3794
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB9_822
.LBB9_820:                              # %lor.lhs.false3800
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB9_825
# BB#821:                               # %land.lhs.true3803
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB9_825
.LBB9_822:                              # %land.lhs.true3809
	movl	(%rbx), %edx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB9_825
# BB#823:                               # %land.lhs.true3819
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	$496, %rbx              # imm = 0x1F0
	testq	%rax, %rax
	jne	.LBB9_833
# BB#824:                               # %land.lhs.true3819.L11996_crit_edge
	movl	target_flags(%rip), %eax
.LBB9_825:                              # %L11996
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB9_827
# BB#826:                               # %land.lhs.true3828
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB9_829
.LBB9_827:                              # %lor.lhs.false3834
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB9_832
# BB#828:                               # %land.lhs.true3837
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB9_832
.LBB9_829:                              # %land.lhs.true3843
	movq	recog_data+16(%rip), %rax
	movl	(%rax), %eax
	xorq	%rcx, %rax
	testq	$16711680, %rax         # imm = 0xFF0000
	jne	.LBB9_832
# BB#830:                               # %land.lhs.true3853
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	$497, %rbx              # imm = 0x1F1
	jmp	.LBB9_831
.LBB9_737:                              # %if.then3157
	cmpq	$67, %rcx
	jne	.LBB9_832
# BB#738:                               # %L5631
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%r12), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB9_832
# BB#739:                               # %L5633
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB9_832
# BB#740:                               # %L5634
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB9_832
# BB#741:                               # %land.lhs.true3611
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB9_832
# BB#742:                               # %L5635
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB9_832
# BB#743:                               # %L5636
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3735613, %rcx          # imm = 0x39003D
	jne	.LBB9_832
# BB#744:                               # %L11987
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB9_832
# BB#745:                               # %L11989
	movl	target_flags(%rip), %eax
	testq	$1, %rax
	je	.LBB9_753
# BB#746:                               # %land.lhs.true3650
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB9_748
# BB#747:                               # %land.lhs.true3653
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB9_750
.LBB9_748:                              # %lor.lhs.false3659
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB9_753
# BB#749:                               # %land.lhs.true3662
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB9_753
.LBB9_750:                              # %land.lhs.true3668
	movl	(%rbx), %edx
	xorq	%rcx, %rdx
	testq	$16711680, %rdx         # imm = 0xFF0000
	jne	.LBB9_753
# BB#751:                               # %land.lhs.true3678
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	$493, %rbx              # imm = 0x1ED
	testq	%rax, %rax
	jne	.LBB9_833
# BB#752:                               # %land.lhs.true3678.L11990_crit_edge
	movl	target_flags(%rip), %eax
.LBB9_753:                              # %L11990
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB9_755
# BB#754:                               # %land.lhs.true3687
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$983040, %rdx           # imm = 0xF0000
	je	.LBB9_757
.LBB9_755:                              # %lor.lhs.false3693
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB9_832
# BB#756:                               # %land.lhs.true3696
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$1048576, %rax          # imm = 0x100000
	jne	.LBB9_832
.LBB9_757:                              # %land.lhs.true3702
	movq	recog_data+16(%rip), %rax
	movl	(%rax), %eax
	xorq	%rcx, %rax
	testq	$16711680, %rax         # imm = 0xFF0000
	jne	.LBB9_832
# BB#758:                               # %land.lhs.true3712
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	$494, %rbx              # imm = 0x1EE
.LBB9_831:                              # %land.lhs.true3853
	testq	%rax, %rax
	jne	.LBB9_833
.LBB9_832:                              # %ret0
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
.LBB9_833:                              # %return
	movq	%rbx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB9_152:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_154:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_156:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_158:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_160:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_162:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_164:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_166:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_184:                              # %if.end1369.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
.LBB9_174:                              # %if.end1350.i
	movq	8(%rax), %rax
	jmp	.LBB9_175
.LBB9_186:                              # %if.end1433.i
	movq	8(%rcx), %rax
.LBB9_175:                              # %L11938.i
	movq	16(%rax), %rbx
.LBB9_176:                              # %if.end1336.i
	movq	8(%rbx), %r15
.LBB9_177:                              # %L11938.i
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_178
# BB#179:                               # %if.then1326.i
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB9_180
# BB#196:                               # %if.then1553.i
	movq	%rbx, recog_data+16(%rip)
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB9_197
# BB#198:                               # %L2634.i
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r13, %rax
	je	.LBB9_199
# BB#200:                               # %if.then1572.i
	movq	%r15, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262224, %rax           # imm = 0x40050
	jne	.LBB9_201
# BB#202:                               # %L2636.i
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_203
# BB#204:                               # %L2637.i
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_205
# BB#206:                               # %L2638.i
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB9_207
# BB#208:                               # %L2639.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB9_209
# BB#210:                               # %if.then1622.i
	movq	%rbx, recog_data+32(%rip)
	cmpq	$0, 16(%rsp)            # 8-byte Folded Reload
	movq	8(%rsp), %rdi           # 8-byte Reload
	je	.LBB9_727
# BB#211:                               # %if.then1627.i
	movq	$1, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$273, %rbx              # imm = 0x111
	jmp	.LBB9_833
.LBB9_178:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_180:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_197:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_193:
	movabsq	$0, %rbx
.LBB9_195:                              # %land.lhs.true1524.i
	xorq	$1, %rbx
	addq	$271, %rbx              # imm = 0x10F
	jmp	.LBB9_833
.LBB9_219:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_221:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_223:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_225:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_227:                              # %L2728.i
	cmpq	$49, %rcx
	jne	.LBB9_228
# BB#229:                               # %L2729.i
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB9_230
# BB#231:                               # %land.lhs.true1719.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$277, %rbx              # imm = 0x115
	movq	8(%rsp), %rdi           # 8-byte Reload
	jne	.LBB9_727
	jmp	.LBB9_833
.LBB9_233:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_126:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_128:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_130:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_132:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_134:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_136:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_138:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_140:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_142:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_144:
	movq	%r13, %rdi
	jmp	.LBB9_727
.LBB9_199:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_201:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_203:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_205:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_207:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_209:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_228:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.LBB9_230:
	movq	8(%rsp), %rdi           # 8-byte Reload
	jmp	.LBB9_727
.Ltmp158:
	.size	recog_29, .Ltmp158-recog_29
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI9_0:
	.quad	.LBB9_709
	.quad	.LBB9_491
	.quad	.LBB9_2
	.quad	.LBB9_247
	.quad	.LBB9_727
	.quad	.LBB9_727
	.quad	.LBB9_727
	.quad	.LBB9_727
	.quad	.LBB9_727
	.quad	.LBB9_727
	.quad	.LBB9_727
	.quad	.LBB9_727
	.quad	.LBB9_727
	.quad	.LBB9_572
	.quad	.LBB9_632
.LJTI9_1:
	.quad	.LBB9_411
	.quad	.LBB9_490
	.quad	.LBB9_447
	.quad	.LBB9_490
	.quad	.LBB9_490
	.quad	.LBB9_490
	.quad	.LBB9_490
	.quad	.LBB9_490
	.quad	.LBB9_463
	.quad	.LBB9_490
	.quad	.LBB9_472
	.quad	.LBB9_481

	.text
	.align	16, 0x90
	.type	recog_30,@function
recog_30:                               # @recog_30
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp165:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp166:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp167:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp168:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp169:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp170:
	.cfi_def_cfa_offset 64
.Ltmp171:
	.cfi_offset %rbx, -48
.Ltmp172:
	.cfi_offset %r12, -40
.Ltmp173:
	.cfi_offset %r13, -32
.Ltmp174:
	.cfi_offset %r14, -24
.Ltmp175:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movq	8(%r14), %rax
	movq	8(%rax), %r13
	movq	8(%r13), %r12
	movl	(%r12), %eax
	movq	%rsi, %r15
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$50, %rdx
	jg	.LBB10_3
# BB#1:                                 # %entry
	addq	$-2, %rdx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rdx
	cmpq	$3, %rdx
	ja	.LBB10_4
# BB#2:                                 # %entry
	jmpq	*.LJTI10_0(,%rdx,8)
.LBB10_355:                             # %L12009
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB10_4
# BB#356:                               # %L6472
	movq	8(%r12), %r15
	movzbl	2(%r15), %eax
	cmpq	$5, %rax
	jne	.LBB10_357
# BB#379:                               # %L12024
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_4
# BB#380:                               # %if.then3861
	movq	%rbx, %r12
	movq	%r15, recog_data+16(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131138, %rcx           # imm = 0x20042
	jne	.LBB10_40
# BB#381:                               # %L6492
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_40
# BB#382:                               # %if.then3885
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#383:                               # %L6494
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_441
# BB#384:                               # %if.then3914
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_441
# BB#385:                               # %L6496
	movq	8(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	movq	8(%rsp), %rdx           # 8-byte Reload
	je	.LBB10_386
# BB#387:                               # %L6497
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_386
# BB#388:                               # %land.lhs.true3968
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB10_386
# BB#389:                               # %L6498
	movq	8(%rdx), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#390:                               # %L6499
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_441
# BB#391:                               # %if.then4006
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_441
# BB#392:                               # %L6501
	movq	8(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB10_441
# BB#393:                               # %L6502
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_441
# BB#394:                               # %land.lhs.true4060
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB10_441
# BB#395:                               # %L6503
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rdx
	movq	32(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB10_374
# BB#396:                               # %L6504
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB10_374
# BB#397:                               # %land.lhs.true4104
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB10_374
# BB#398:                               # %land.lhs.true4109
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB10_374
# BB#399:                               # %land.lhs.true4112
	movl	x86_single_stringop(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdi
	testq	%r12, %rdi
	movq	$589, %rax              # imm = 0x24D
	jne	.LBB10_515
	jmp	.LBB10_374
.LBB10_3:                               # %entry
	cmpq	$51, %rdx
	jne	.LBB10_4
# BB#400:                               # %L12010
	movq	%r14, 8(%rsp)           # 8-byte Spill
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB10_5
# BB#401:                               # %L8680
	movq	8(%r12), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_5
# BB#402:                               # %L8681
	movq	8(%r14), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB10_5
# BB#403:                               # %if.then4151
	movq	%rbx, recog_data(%rip)
	movq	16(%r14), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB10_5
# BB#404:                               # %if.then4159
	movq	%rbx, recog_data+32(%rip)
	movq	16(%r13), %rcx
	movl	(%rcx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$3342378, %rax          # imm = 0x33002A
	jne	.LBB10_407
# BB#405:                               # %land.lhs.true4173
	movq	8(%rcx), %rax
	movl	(%rax), %edx
	cmpq	$8, %rdx
	jne	.LBB10_407
# BB#406:                               # %land.lhs.true4179
	movl	16(%rcx), %ecx
	cmpq	$13, %rcx
	jne	.LBB10_407
# BB#408:                               # %L8684
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB10_410
# BB#409:                               # %land.lhs.true4202
	movl	8(%rcx), %ecx
	cmpq	$21, %rcx
	jne	.LBB10_410
# BB#411:                               # %L8685
	movq	16(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB10_413
# BB#412:                               # %land.lhs.true4225
	movl	8(%rcx), %ecx
	cmpq	$22, %rcx
	jne	.LBB10_413
# BB#414:                               # %L8686
	movq	24(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB10_416
# BB#415:                               # %land.lhs.true4248
	movl	8(%rcx), %ecx
	cmpq	$23, %rcx
	jne	.LBB10_416
# BB#417:                               # %L8687
	movq	32(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB10_419
# BB#418:                               # %land.lhs.true4271
	movl	8(%rcx), %ecx
	cmpq	$24, %rcx
	jne	.LBB10_419
# BB#420:                               # %L8688
	movq	40(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB10_422
# BB#421:                               # %land.lhs.true4294
	movl	8(%rcx), %ecx
	cmpq	$25, %rcx
	jne	.LBB10_422
# BB#423:                               # %L8689
	movq	48(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB10_425
# BB#424:                               # %land.lhs.true4317
	movl	8(%rcx), %ecx
	cmpq	$26, %rcx
	jne	.LBB10_425
# BB#426:                               # %L8690
	movq	56(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327741, %rdx           # imm = 0x5003D
	jne	.LBB10_428
# BB#427:                               # %land.lhs.true4340
	movl	8(%rcx), %ecx
	cmpq	$27, %rcx
	jne	.LBB10_428
# BB#429:                               # %L8691
	movq	64(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327741, %rcx           # imm = 0x5003D
	jne	.LBB10_431
# BB#430:                               # %land.lhs.true4363
	movl	8(%rax), %eax
	cmpq	$28, %rax
	jne	.LBB10_431
# BB#432:                               # %L8692
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_124
# BB#433:                               # %L8693
	movq	8(%rcx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#434:                               # %if.then4396
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_124
# BB#435:                               # %L8695
	movq	8(%rcx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#436:                               # %if.then4430
	movq	%rbx, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_124
# BB#437:                               # %L8697
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$327747, %rdx           # imm = 0x50043
	jne	.LBB10_124
# BB#438:                               # %L8698
	movq	8(%rcx), %rax
	movl	target_flags(%rip), %edx
	movq	%rax, recog_data+24(%rip)
	andq	$33554432, %rdx         # imm = 0x2000000
	je	.LBB10_441
# BB#439:                               # %land.lhs.true4486
	movq	recog_data+32(%rip), %rax
	movq	8(%rax), %rax
	movabsq	$4294705152, %rcx       # imm = 0xFFFC0000
	andq	%rcx, %rdx
	movq	$18, %rcx
	shrq	%cl, %rdx
	leaq	-16(%rdx,%rax), %rcx
	cmpq	$127, %rcx
	jg	.LBB10_441
# BB#440:                               # %land.lhs.true4495
	movq	8(%rbx), %rdx
	movq	$4, %rcx
	shlq	%cl, %rdx
	addq	%rax, %rdx
	cmpq	$-129, %rdx
	movq	$805, %rax              # imm = 0x325
	jg	.LBB10_515
	jmp	.LBB10_441
.LBB10_270:                             # %L12008
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB10_271
# BB#288:                               # %L6436
	movq	8(%r12), %r15
	movzbl	2(%r15), %eax
	cmpq	$5, %rax
	jne	.LBB10_289
# BB#317:                               # %L12022
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_271
# BB#318:                               # %if.then2922
	movq	%r15, recog_data+16(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196674, %rcx           # imm = 0x30042
	jne	.LBB10_292
# BB#319:                               # %L6456
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_292
# BB#320:                               # %if.then2946
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_295
# BB#321:                               # %L6458
	movq	%r14, %r15
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_323
# BB#322:                               # %if.then2975
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_323
# BB#324:                               # %L6460
	movq	8(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%r15, %r14
	je	.LBB10_325
# BB#326:                               # %L6461
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_325
# BB#327:                               # %land.lhs.true3029
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB10_325
# BB#328:                               # %L6462
	movq	8(%r14), %rax
	movq	%r14, %r15
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_303
# BB#329:                               # %L6463
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_301
# BB#330:                               # %if.then3067
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_301
# BB#331:                               # %L6465
	movq	8(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_301
# BB#332:                               # %L6466
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_301
# BB#333:                               # %land.lhs.true3121
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB10_301
# BB#334:                               # %L6467
	movq	8(%r15), %rdx
	movq	32(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB10_312
# BB#335:                               # %L6468
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB10_312
# BB#336:                               # %land.lhs.true3165
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB10_312
# BB#337:                               # %land.lhs.true3170
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB10_312
# BB#338:                               # %land.lhs.true3173
	movl	x86_single_stringop(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	movq	$587, %rax              # imm = 0x24B
	jne	.LBB10_515
	jmp	.LBB10_312
.LBB10_154:                             # %L12007
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB10_155
# BB#175:                               # %L6400
	movq	8(%r12), %r15
	movzbl	2(%r15), %eax
	cmpq	$5, %rax
	jne	.LBB10_176
# BB#204:                               # %L12016
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_155
# BB#205:                               # %if.then1572
	movq	%r15, recog_data+16(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262210, %rcx           # imm = 0x40042
	jne	.LBB10_179
# BB#206:                               # %L6420
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_179
# BB#207:                               # %if.then1596
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_182
# BB#208:                               # %L6422
	movq	%r14, %r15
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_210
# BB#209:                               # %if.then1625
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_210
# BB#211:                               # %L6424
	movq	8(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%r15, %r14
	je	.LBB10_212
# BB#213:                               # %L6425
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_212
# BB#214:                               # %land.lhs.true1679
	movq	8(%rax), %rax
	cmpq	$4, %rax
	jne	.LBB10_212
# BB#215:                               # %L6426
	movq	8(%r14), %rax
	movq	%r14, %r15
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_190
# BB#216:                               # %L6427
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_188
# BB#217:                               # %if.then1717
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_188
# BB#218:                               # %L6429
	movq	8(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_188
# BB#219:                               # %L6430
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_188
# BB#220:                               # %land.lhs.true1771
	movq	8(%rax), %rax
	cmpq	$4, %rax
	jne	.LBB10_188
# BB#221:                               # %L6431
	movq	8(%r15), %rdx
	movq	32(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB10_199
# BB#222:                               # %L6432
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB10_199
# BB#223:                               # %land.lhs.true1815
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB10_199
# BB#224:                               # %land.lhs.true1820
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB10_199
# BB#225:                               # %land.lhs.true1823
	movl	x86_single_stringop(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	movq	$585, %rax              # imm = 0x249
	jne	.LBB10_515
	jmp	.LBB10_199
.LBB10_31:                              # %L12006
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$66, %rax
	jne	.LBB10_32
# BB#41:                                # %L6382
	movq	8(%r12), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_32
# BB#42:                                # %if.then33
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327746, %rcx           # imm = 0x50042
	jne	.LBB10_43
# BB#44:                                # %L6384
	movq	8(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_516
# BB#45:                                # %if.then56
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_46
# BB#47:                                # %L6386
	movq	%r14, %r12
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_49
# BB#48:                                # %if.then85
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_49
# BB#50:                                # %L6388
	movq	8(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	movq	%r12, %r14
	je	.LBB10_51
# BB#52:                                # %L6389
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_51
# BB#53:                                # %land.lhs.true139
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB10_51
# BB#54:                                # %L6390
	movq	8(%r14), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_46
# BB#55:                                # %L6391
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_60
# BB#56:                                # %if.then176
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB10_60
# BB#57:                                # %L6393
	movq	8(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_60
# BB#58:                                # %L6394
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_60
# BB#59:                                # %land.lhs.true230
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB10_60
# BB#61:                                # %L6395
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rdx
	movq	32(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB10_62
# BB#63:                                # %L6396
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB10_62
# BB#64:                                # %land.lhs.true274
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB10_62
# BB#65:                                # %land.lhs.true278
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB10_62
# BB#66:                                # %land.lhs.true280
	movl	x86_single_stringop(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	movq	$583, %rax              # imm = 0x247
	jne	.LBB10_515
.LBB10_62:                              # %if.end254
	movq	8(%rdx), %r13
	movq	8(%r13), %r12
	movq	8(%rsp), %r14           # 8-byte Reload
	jmp	.LBB10_32
.LBB10_407:                             # %if.end4185
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_357:                             # %L6472
	cmpq	$4, %rax
	jne	.LBB10_4
# BB#358:                               # %L12023
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_4
# BB#359:                               # %if.then3592
	movq	%rbx, %r12
	movq	%r15, recog_data+16(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$131138, %rcx           # imm = 0x20042
	jne	.LBB10_40
# BB#360:                               # %L6474
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_40
# BB#361:                               # %if.then3616
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#362:                               # %L6476
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_441
# BB#363:                               # %if.then3645
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB10_441
# BB#364:                               # %L6478
	movq	8(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB10_441
# BB#365:                               # %L6479
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_441
# BB#366:                               # %land.lhs.true3699
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB10_441
# BB#367:                               # %L6480
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#368:                               # %L6481
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_441
# BB#369:                               # %if.then3737
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB10_441
# BB#370:                               # %L6483
	movq	8(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB10_441
# BB#371:                               # %L6484
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_441
# BB#372:                               # %land.lhs.true3791
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB10_441
# BB#373:                               # %L6485
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rdx
	movq	32(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB10_374
# BB#375:                               # %L6486
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB10_374
# BB#376:                               # %land.lhs.true3835
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB10_374
# BB#377:                               # %land.lhs.true3840
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB10_374
# BB#378:                               # %land.lhs.true3843
	movl	x86_single_stringop(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdi
	testq	%r12, %rdi
	movq	$588, %rax              # imm = 0x24C
	jne	.LBB10_515
.LBB10_374:                             # %if.end3815
	movq	8(%rdx), %r13
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_289:                             # %L6436
	cmpq	$4, %rax
	jne	.LBB10_271
# BB#290:                               # %L12021
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_271
# BB#291:                               # %if.then2653
	movq	%r15, recog_data+16(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196674, %rcx           # imm = 0x30042
	jne	.LBB10_292
# BB#293:                               # %L6438
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_292
# BB#294:                               # %if.then2677
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_295
# BB#296:                               # %L6440
	movq	%r14, %r15
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_323
# BB#297:                               # %if.then2706
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB10_323
# BB#298:                               # %L6442
	movq	8(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_323
# BB#299:                               # %L6443
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_301
# BB#300:                               # %land.lhs.true2760
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB10_301
# BB#302:                               # %L6444
	movq	8(%r15), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_303
# BB#306:                               # %L6445
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_301
# BB#307:                               # %if.then2798
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB10_301
# BB#308:                               # %L6447
	movq	8(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_301
# BB#309:                               # %L6448
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_301
# BB#310:                               # %land.lhs.true2852
	movq	8(%rax), %rax
	cmpq	$2, %rax
	jne	.LBB10_301
# BB#311:                               # %L6449
	movq	8(%r15), %rdx
	movq	32(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB10_312
# BB#313:                               # %L6450
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB10_312
# BB#314:                               # %land.lhs.true2896
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB10_312
# BB#315:                               # %land.lhs.true2901
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB10_312
# BB#316:                               # %land.lhs.true2904
	movl	x86_single_stringop(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	movq	$586, %rax              # imm = 0x24A
	jne	.LBB10_515
.LBB10_312:                             # %if.end2876
	movq	8(%rdx), %r13
	jmp	.LBB10_304
.LBB10_176:                             # %L6400
	cmpq	$4, %rax
	jne	.LBB10_155
# BB#177:                               # %L12015
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_155
# BB#178:                               # %if.then1303
	movq	%r15, recog_data+16(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262210, %rcx           # imm = 0x40042
	jne	.LBB10_179
# BB#180:                               # %L6402
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_179
# BB#181:                               # %if.then1327
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_182
# BB#183:                               # %L6404
	movq	%r14, %r15
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_210
# BB#184:                               # %if.then1356
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB10_210
# BB#185:                               # %L6406
	movq	8(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_210
# BB#186:                               # %L6407
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_188
# BB#187:                               # %land.lhs.true1410
	movq	8(%rax), %rax
	cmpq	$4, %rax
	jne	.LBB10_188
# BB#189:                               # %L6408
	movq	8(%r15), %rax
	movq	24(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_190
# BB#193:                               # %L6409
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_188
# BB#194:                               # %if.then1448
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB10_188
# BB#195:                               # %L6411
	movq	8(%rbx), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_188
# BB#196:                               # %L6412
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_188
# BB#197:                               # %land.lhs.true1502
	movq	8(%rax), %rax
	cmpq	$4, %rax
	jne	.LBB10_188
# BB#198:                               # %L6413
	movq	8(%r15), %rdx
	movq	32(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$48, %rcx
	jne	.LBB10_199
# BB#200:                               # %L6414
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262205, %rcx           # imm = 0x4003D
	jne	.LBB10_199
# BB#201:                               # %land.lhs.true1546
	movl	8(%rax), %eax
	cmpq	$19, %rax
	jne	.LBB10_199
# BB#202:                               # %land.lhs.true1551
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB10_199
# BB#203:                               # %land.lhs.true1554
	movl	x86_single_stringop(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rsi
	movl	optimize_size(%rip), %edi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdi
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	testq	%rax, %rdi
	movq	$584, %rax              # imm = 0x248
	jne	.LBB10_515
.LBB10_199:                             # %if.end1526
	movq	8(%rdx), %r13
	jmp	.LBB10_191
.LBB10_43:                              # %if.end47
	movq	8(%r13), %r12
	jmp	.LBB10_32
.LBB10_516:                             # %if.end58
	movq	8(%r13), %r12
	jmp	.LBB10_32
.LBB10_410:                             # %if.end4208
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_295:                             # %if.end2692
	movq	8(%rax), %r13
	jmp	.LBB10_292
.LBB10_182:                             # %if.end1342
	movq	8(%rax), %r13
	jmp	.LBB10_179
.LBB10_49:                              # %if.end108
	movq	%r12, %r14
	movq	8(%r14), %rax
	jmp	.LBB10_46
.LBB10_323:                             # %if.end2708
	movq	%r15, %r14
.LBB10_325:                             # %if.end3014
	movq	8(%r14), %rax
	movq	8(%rax), %r13
.LBB10_292:                             # %if.end2668
	movq	8(%r13), %r12
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
.LBB10_271:                             # %L12002
	movq	$3, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB10_274
# BB#272:                               # %if.then2633
	movq	%rbx, %r15
	movq	%r12, recog_data(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$196734, %rcx           # imm = 0x3007E
	jne	.LBB10_273
# BB#339:                               # %L1081
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_273
# BB#340:                               # %if.then3210
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_341
# BB#342:                               # %L1083
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB10_354
# BB#343:                               # %if.then3239
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_341
# BB#344:                               # %L1085
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB10_354
# BB#345:                               # %if.then3273
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_341
# BB#346:                               # %L1087
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB10_354
# BB#347:                               # %if.then3307
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$1, %rax
	je	.LBB10_354
# BB#348:                               # %land.lhs.true3320
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %edx
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB10_354
# BB#349:                               # %land.lhs.true3320
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB10_354
# BB#350:                               # %land.lhs.true3344
	andq	$16711680, %rdx         # imm = 0xFF0000
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB10_352
# BB#351:                               # %land.lhs.true3344
	movq	%rdx, %rcx
	andq	%r15, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB10_354
.LBB10_352:                             # %lor.lhs.false3353
	testq	$262144, %rax           # imm = 0x40000
	movq	$163, %rax
	je	.LBB10_515
# BB#353:                               # %lor.lhs.false3353
	andq	%r15, %rdx
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB10_515
.LBB10_354:                             # %if.end3241
	movq	8(%r14), %rax
	movq	8(%rax), %r13
	jmp	.LBB10_273
.LBB10_341:                             # %if.end3225
	movq	8(%rax), %r13
.LBB10_273:                             # %if.end3201
	movq	8(%r13), %r12
	movq	%r15, %rbx
.LBB10_274:                             # %L12005
	movq	$3, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_4
# BB#275:                               # %if.then2638
	movq	%rbx, %r15
	movq	%r12, recog_data(%rip)
	movq	16(%r13), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196689, %rax           # imm = 0x30051
	jne	.LBB10_40
# BB#276:                               # %L2773
	movq	8(%rbx), %r12
	movq	$3, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#277:                               # %if.then3393
	movq	%r12, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#278:                               # %if.then3404
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#279:                               # %L2776
	movq	8(%rbx), %r14
	movq	$3, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#280:                               # %if.then3433
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$196690, %rax           # imm = 0x30052
	jne	.LBB10_441
# BB#281:                               # %L2778
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	8(%rsp), %r14           # 8-byte Reload
	je	.LBB10_128
# BB#282:                               # %L2779
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r15, %rax
	je	.LBB10_130
# BB#283:                               # %L2780
	movq	%r15, %rbx
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB10_130
# BB#284:                               # %L2781
	movq	8(%rax), %r15
	movq	$3, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_128
# BB#285:                               # %if.then3520
	movq	%r15, recog_data+32(%rip)
	movq	8(%r14), %rcx
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB10_130
# BB#286:                               # %L2783
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB10_130
# BB#287:                               # %land.lhs.true3560
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$279, %rax              # imm = 0x117
	jne	.LBB10_130
	jmp	.LBB10_515
.LBB10_210:                             # %if.end1358
	movq	%r15, %r14
.LBB10_212:                             # %if.end1664
	movq	8(%r14), %rax
	movq	8(%rax), %r13
.LBB10_179:                             # %if.end1318
	movq	8(%r13), %r12
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
.LBB10_155:                             # %L12001
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	testq	%rbx, %rax
	je	.LBB10_158
# BB#156:                               # %if.then1283
	movq	%rbx, %r15
	movq	%r12, recog_data(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262270, %rcx           # imm = 0x4007E
	jne	.LBB10_157
# BB#226:                               # %L1044
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_157
# BB#227:                               # %if.then1860
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_228
# BB#229:                               # %L1046
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB10_241
# BB#230:                               # %if.then1889
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_228
# BB#231:                               # %L1048
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB10_241
# BB#232:                               # %if.then1923
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_228
# BB#233:                               # %L1050
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB10_241
# BB#234:                               # %if.then1957
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$1, %rax
	je	.LBB10_241
# BB#235:                               # %land.lhs.true1970
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %edx
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB10_241
# BB#236:                               # %land.lhs.true1970
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB10_241
# BB#237:                               # %land.lhs.true1994
	andq	$16711680, %rdx         # imm = 0xFF0000
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB10_239
# BB#238:                               # %land.lhs.true1994
	movq	%rdx, %rcx
	andq	%r15, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB10_241
.LBB10_239:                             # %lor.lhs.false2003
	testq	$262144, %rax           # imm = 0x40000
	movq	$158, %rax
	je	.LBB10_515
# BB#240:                               # %lor.lhs.false2003
	andq	%r15, %rdx
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB10_515
.LBB10_241:                             # %if.end1891
	movq	8(%r14), %rax
	movq	8(%rax), %r13
	jmp	.LBB10_157
.LBB10_228:                             # %if.end1875
	movq	8(%rax), %r13
.LBB10_157:                             # %if.end1851
	movq	8(%r13), %r12
	movq	%r15, %rbx
.LBB10_158:                             # %L12004
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_4
# BB#159:                               # %if.then1288
	movq	%rbx, %r15
	movq	%r12, recog_data(%rip)
	movq	16(%r13), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB10_40
# BB#160:                               # %L12017
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$42, %rax
	je	.LBB10_254
# BB#161:                               # %L12017
	cmpq	$79, %rax
	jne	.LBB10_162
# BB#242:                               # %L2616
	movq	8(%rbx), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#243:                               # %if.then2049
	movq	%r12, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#244:                               # %if.then2060
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#245:                               # %L2619
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#246:                               # %if.then2089
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262224, %rax           # imm = 0x40050
	jne	.LBB10_441
# BB#247:                               # %L2621
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	8(%rsp), %r14           # 8-byte Reload
	je	.LBB10_128
# BB#248:                               # %L2622
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r15, %rax
	je	.LBB10_130
# BB#249:                               # %L2623
	movq	%r15, %rbx
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB10_130
# BB#250:                               # %L2624
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_441
# BB#251:                               # %if.then2176
	movq	%r14, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rcx
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB10_130
# BB#252:                               # %L2626
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB10_130
# BB#253:                               # %land.lhs.true2216
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$273, %rax              # imm = 0x111
	jne	.LBB10_130
	jmp	.LBB10_515
.LBB10_254:                             # %L12020
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB10_40
# BB#255:                               # %land.lhs.true2423
	movl	16(%rbx), %ecx
	testq	%rcx, %rcx
	jne	.LBB10_40
# BB#256:                               # %L6915
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB10_40
# BB#257:                               # %L6916
	movq	8(%rax), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#258:                               # %if.then2456
	movq	%r12, recog_data+40(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %r12
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#259:                               # %if.then2469
	movq	%r12, recog_data+16(%rip)
	movq	8(%rbx), %rax
	movq	24(%rax), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#260:                               # %if.then2482
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	%r12, recog_data+24(%rip)
	movq	8(%rbx), %rax
	movq	32(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_517
# BB#261:                               # %if.then2495
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_124
# BB#262:                               # %L6921
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB10_124
# BB#263:                               # %land.lhs.true2530
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB10_124
# BB#264:                               # %L6922
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_124
# BB#265:                               # %L6923
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#266:                               # %if.then2568
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rcx
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB10_130
# BB#267:                               # %L6925
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB10_130
# BB#268:                               # %land.lhs.true2608
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB10_130
# BB#269:                               # %land.lhs.true2613
	movzbl	target_flags+3(%rip), %edx
	movq	$611, %rax              # imm = 0x263
	testq	$2, %rdx
	jne	.LBB10_130
	jmp	.LBB10_515
.LBB10_162:                             # %L12017
	cmpq	$81, %rax
	jne	.LBB10_40
# BB#163:                               # %L2745
	movq	8(%rbx), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#164:                               # %if.then2236
	movq	%r12, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#165:                               # %if.then2247
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#166:                               # %L2748
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#167:                               # %if.then2276
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262226, %rax           # imm = 0x40052
	jne	.LBB10_441
# BB#168:                               # %L2750
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	8(%rsp), %r14           # 8-byte Reload
	je	.LBB10_128
# BB#169:                               # %L2751
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r15, %rax
	movq	%r15, %rbx
	je	.LBB10_130
# BB#170:                               # %L2752
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB10_130
# BB#171:                               # %L2753
	movq	8(%rax), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	8(%rcx), %rcx
	testq	%rbx, %rax
	je	.LBB10_130
# BB#172:                               # %L2754
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB10_130
# BB#173:                               # %L2755
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB10_130
# BB#174:                               # %land.lhs.true2403
	movl	8(%rax), %eax
	cmpq	$17, %rax
	movq	$278, %rax              # imm = 0x116
	jne	.LBB10_130
	jmp	.LBB10_515
.LBB10_51:                              # %if.end124
	movq	8(%r14), %rax
.LBB10_46:                              # %if.end71
	movq	8(%rax), %r13
	movq	8(%r13), %r12
.LBB10_32:                              # %L11999
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	testq	%rbx, %rax
	je	.LBB10_35
# BB#33:                                # %if.then15
	movq	%r12, recog_data(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327806, %rcx           # imm = 0x5007E
	jne	.LBB10_34
# BB#67:                                # %L995
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_34
# BB#68:                                # %if.then315
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_69
# BB#70:                                # %L997
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_84
# BB#71:                                # %if.then344
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_69
# BB#72:                                # %L999
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_84
# BB#73:                                # %if.then378
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_69
# BB#74:                                # %L1001
	movq	8(%rcx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB10_84
# BB#75:                                # %if.then412
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$1, %rax
	je	.LBB10_84
# BB#76:                                # %land.lhs.true425
	movq	recog_data+8(%rip), %rcx
	movl	(%rcx), %edx
	movq	$14, %rcx
	movq	%rdx, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB10_84
# BB#77:                                # %land.lhs.true425
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB10_84
# BB#78:                                # %land.lhs.true448
	movq	%r14, %rsi
	andq	$16711680, %rdx         # imm = 0xFF0000
	testq	$327680, %rax           # imm = 0x50000
	je	.LBB10_80
# BB#79:                                # %land.lhs.true448
	movq	%rdx, %rcx
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	andq	%rdi, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	je	.LBB10_82
.LBB10_80:                              # %lor.lhs.false457
	testq	$262144, %rax           # imm = 0x40000
	je	.LBB10_85
# BB#81:                                # %lor.lhs.false457
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$1048576, %rdx          # imm = 0x100000
	jne	.LBB10_85
.LBB10_82:                              # %lor.lhs.false466
	testq	$33554432, %rax         # imm = 0x2000000
	movq	%rsi, %r14
	jne	.LBB10_84
# BB#83:                                # %lor.lhs.false466
	testq	%r15, %r15
	jne	.LBB10_86
	jmp	.LBB10_84
.LBB10_69:                              # %if.end330
	movq	8(%rax), %r13
	jmp	.LBB10_34
.LBB10_413:                             # %if.end4231
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_386:                             # %if.end3953
	movq	8(%rdx), %rax
	jmp	.LBB10_124
.LBB10_416:                             # %if.end4254
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_419:                             # %if.end4277
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_422:                             # %if.end4300
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_425:                             # %if.end4323
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_428:                             # %if.end4346
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_431:                             # %if.end4369
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_60:                              # %if.end178
	movq	8(%rsp), %r14           # 8-byte Reload
	movq	8(%r14), %rax
	jmp	.LBB10_46
.LBB10_303:                             # %if.end2784
	movq	8(%rax), %r13
.LBB10_304:                             # %L12002
	movq	8(%r13), %r12
	movq	%r15, %r14
	jmp	.LBB10_305
.LBB10_301:                             # %if.end2766
	movq	%r15, %r14
	movq	8(%r14), %rax
	movq	8(%rax), %r13
	movq	8(%r13), %r12
.LBB10_305:                             # %L12002
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %rbx
	jmp	.LBB10_271
.LBB10_190:                             # %if.end1434
	movq	8(%rax), %r13
.LBB10_191:                             # %L12001
	movq	8(%r13), %r12
	movq	%r15, %r14
	jmp	.LBB10_192
.LBB10_188:                             # %if.end1416
	movq	%r15, %r14
	movq	8(%r14), %rax
	movq	8(%rax), %r13
	movq	8(%r13), %r12
.LBB10_192:                             # %L12001
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, %rbx
	jmp	.LBB10_155
.LBB10_85:                              # %land.lhs.true469
	testq	%r15, %r15
	movq	%rsi, %r14
	je	.LBB10_84
.LBB10_86:                              # %if.then471
	movq	$1, %rax
	movl	%eax, (%r15)
	movq	$153, %rax
	jmp	.LBB10_515
.LBB10_84:                              # %if.end346
	movq	8(%r14), %rax
	movq	8(%rax), %r13
.LBB10_34:                              # %if.end306
	movq	8(%r13), %r12
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
.LBB10_35:                              # %L12000
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	memory_operand
	testq	%rbx, %rax
	je	.LBB10_38
# BB#36:                                # %if.then20
	movq	%rbx, %r15
	movq	%r12, recog_data(%rip)
	movq	16(%r13), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327806, %rcx           # imm = 0x5007E
	jne	.LBB10_37
# BB#87:                                # %L1007
	movq	8(%rax), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_37
# BB#88:                                # %if.then502
	movq	%rbx, recog_data+8(%rip)
	movq	8(%r14), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_89
# BB#90:                                # %L1009
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB10_104
# BB#91:                                # %if.then531
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_89
# BB#92:                                # %L1011
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB10_104
# BB#93:                                # %if.then565
	movq	%rbx, recog_data+24(%rip)
	movq	8(%r14), %rax
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_89
# BB#94:                                # %L1013
	movq	8(%rcx), %rbx
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r15, %rax
	je	.LBB10_104
# BB#95:                                # %if.then599
	movl	target_flags(%rip), %edx
	movq	%rbx, recog_data+32(%rip)
	testq	$1, %rdx
	je	.LBB10_104
# BB#96:                                # %land.lhs.true612
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	cmpq	$8, %rcx
	ja	.LBB10_104
# BB#97:                                # %land.lhs.true612
	movq	$1, %rsi
	shlq	%cl, %rsi
	testq	$324, %rsi              # imm = 0x144
	je	.LBB10_104
# BB#98:                                # %land.lhs.true636
	andq	$16711680, %rax         # imm = 0xFF0000
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB10_100
# BB#99:                                # %land.lhs.true636
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB10_100
# BB#103:                               # %lor.lhs.false654
	testq	$33554432, %rdx         # imm = 0x2000000
	movq	$154, %rax
	jne	.LBB10_104
	jmp	.LBB10_515
.LBB10_89:                              # %if.end517
	movq	8(%rax), %r13
	jmp	.LBB10_37
.LBB10_100:                             # %lor.lhs.false645
	cmpq	$1048576, %rax          # imm = 0x100000
	movq	$154, %rax
	jne	.LBB10_515
# BB#101:                               # %lor.lhs.false645
	movq	%rdx, %rcx
	andq	$262144, %rcx           # imm = 0x40000
	testq	%r15, %rcx
	je	.LBB10_515
# BB#102:                               # %lor.lhs.false645
	andq	$33554432, %rdx         # imm = 0x2000000
	testq	%r15, %rdx
	je	.LBB10_515
.LBB10_104:                             # %if.end533
	movq	8(%r14), %rax
	movq	8(%rax), %r13
.LBB10_37:                              # %if.end493
	movq	8(%r13), %r12
	movq	%r15, %rbx
.LBB10_38:                              # %L12003
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_4
# BB#39:                                # %if.then25
	movq	%rbx, %r15
	movq	%r12, recog_data(%rip)
	movq	16(%r13), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB10_40
# BB#105:                               # %L12011
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$42, %rax
	je	.LBB10_138
# BB#106:                               # %L12011
	cmpq	$79, %rax
	jne	.LBB10_107
# BB#121:                               # %L2539
	movq	8(%rbx), %r12
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#122:                               # %if.then694
	movq	%r12, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#123:                               # %if.then705
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#125:                               # %L2542
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#126:                               # %if.then734
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327760, %rax           # imm = 0x50050
	jne	.LBB10_441
# BB#127:                               # %L2544
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	8(%rsp), %r14           # 8-byte Reload
	je	.LBB10_128
# BB#129:                               # %L2545
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r15, %rax
	je	.LBB10_130
# BB#131:                               # %L2546
	movq	%r15, %rbx
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB10_130
# BB#132:                               # %L2547
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%rbx, %rax
	je	.LBB10_441
# BB#133:                               # %if.then821
	movq	%r14, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rcx
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB10_130
# BB#134:                               # %L2549
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB10_130
# BB#135:                               # %land.lhs.true861
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB10_130
# BB#136:                               # %land.lhs.true866
	movzbl	target_flags+3(%rip), %edx
	movq	$270, %rax              # imm = 0x10E
	jmp	.LBB10_137
.LBB10_4:
	movq	%r14, 8(%rsp)           # 8-byte Spill
.LBB10_5:                               # %L5743
	movzbl	(%r12), %eax
	cmpq	$59, %rax
	jne	.LBB10_514
# BB#6:                                 # %L5744
	movq	16(%r13), %r13
	movzbl	(%r13), %eax
	cmpq	$72, %rax
	jne	.LBB10_514
# BB#7:                                 # %L5879
	movq	8(%r13), %r15
	movzbl	(%r15), %eax
	cmpq	$102, %rax
	jne	.LBB10_8
# BB#442:                               # %L5880
	movq	8(%r15), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB10_8
# BB#443:                               # %if.then4546
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_8
# BB#444:                               # %land.lhs.true4556
	movq	8(%rax), %rax
	cmpq	$1, %rax
	jne	.LBB10_8
# BB#445:                               # %L5882
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB10_446
# BB#447:                               # %L5883
	movq	8(%rax), %rax
	movq	%rax, recog_data(%rip)
	movq	24(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB10_448
# BB#449:                               # %L5885
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_450
# BB#452:                               # %L5886
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_518
# BB#453:                               # %if.then4619
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB10_518
# BB#454:                               # %L5888
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	movq	8(%rsp), %rdx           # 8-byte Reload
	je	.LBB10_455
# BB#456:                               # %L5889
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB10_455
# BB#457:                               # %land.lhs.true4685
	movq	8(%rax), %rax
	cmpq	$-1, %rax
	je	.LBB10_458
.LBB10_455:                             # %if.end4666
	movq	8(%rdx), %rax
	jmp	.LBB10_450
.LBB10_446:                             # %if.end4572
	movq	8(%r13), %r15
	jmp	.LBB10_8
.LBB10_138:                             # %L12014
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	cmpq	$4, %rcx
	jne	.LBB10_40
# BB#139:                               # %land.lhs.true1073
	movl	16(%rbx), %ecx
	testq	%rcx, %rcx
	jne	.LBB10_40
# BB#140:                               # %L6944
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3342402, %rcx          # imm = 0x330042
	jne	.LBB10_40
# BB#141:                               # %L6945
	movq	8(%rax), %r12
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#142:                               # %if.then1106
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	%r12, recog_data+40(%rip)
	movq	8(%rbx), %rax
	movq	16(%rax), %r14
	movq	$2, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_517
# BB#143:                               # %if.then1119
	movq	%r14, recog_data+16(%rip)
	movq	8(%rbx), %rax
	movq	24(%rax), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	je	.LBB10_517
# BB#144:                               # %if.then1132
	movq	%r14, recog_data+24(%rip)
	movq	8(%rbx), %rax
	movq	32(%rax), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_517
# BB#145:                               # %if.then1145
	movq	%rbx, recog_data+32(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$48, %rdx
	jne	.LBB10_124
# BB#146:                               # %L6950
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$262205, %rdx           # imm = 0x4003D
	jne	.LBB10_124
# BB#147:                               # %land.lhs.true1180
	movl	8(%rcx), %ecx
	cmpq	$19, %rcx
	jne	.LBB10_124
# BB#148:                               # %L6951
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_124
# BB#149:                               # %L6952
	movq	8(%rcx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#150:                               # %if.then1218
	movq	%rbx, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rcx
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB10_130
# BB#151:                               # %L6954
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB10_130
# BB#152:                               # %land.lhs.true1258
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB10_130
# BB#153:                               # %land.lhs.true1263
	movzbl	target_flags+3(%rip), %edx
	movq	$612, %rax              # imm = 0x264
	jmp	.LBB10_137
.LBB10_107:                             # %L12011
	cmpq	$81, %rax
	jne	.LBB10_40
# BB#108:                               # %L2693
	movq	8(%rbx), %r12
	movq	$5, %rsi
	movq	%r12, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#109:                               # %if.then884
	movq	%r12, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r15, %rax
	je	.LBB10_40
# BB#110:                               # %if.then895
	movq	%rbx, recog_data+16(%rip)
	movq	8(%r14), %rax
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB10_124
# BB#111:                               # %L2696
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_441
# BB#112:                               # %if.then924
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327762, %rax           # imm = 0x50052
	jne	.LBB10_441
# BB#113:                               # %L2698
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r15, %rax
	movq	8(%rsp), %r14           # 8-byte Reload
	je	.LBB10_128
# BB#114:                               # %L2699
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	movq	8(%r14), %rcx
	testq	%r15, %rax
	movq	%r15, %rbx
	je	.LBB10_130
# BB#115:                               # %L2700
	movq	24(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$48, %rdx
	jne	.LBB10_130
# BB#116:                               # %L2701
	movq	8(%rax), %rax
	movq	recog_data+24(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	8(%rcx), %rcx
	testq	%rbx, %rax
	je	.LBB10_130
# BB#117:                               # %L2702
	movq	32(%rcx), %rax
	movzbl	(%rax), %edx
	cmpq	$49, %rdx
	jne	.LBB10_130
# BB#118:                               # %L2703
	movq	8(%rax), %rax
	movl	(%rax), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB10_130
# BB#119:                               # %land.lhs.true1051
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB10_130
# BB#120:                               # %land.lhs.true1056
	movzbl	target_flags+3(%rip), %edx
	movq	$276, %rax              # imm = 0x114
.LBB10_137:                             # %land.lhs.true866
	testq	$2, %rdx
	jne	.LBB10_515
.LBB10_130:                             # %if.end789
	movq	8(%rcx), %r13
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_40:                              # %if.end675
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_441:                             # %if.end736
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB10_124:                             # %if.end720
	movq	8(%rax), %r13
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_448:                             # %if.end4588
	movq	8(%r13), %r15
	jmp	.LBB10_8
.LBB10_128:                             # %if.end773
	movq	8(%r14), %rax
	jmp	.LBB10_124
.LBB10_517:                             # %if.end2497
	movq	8(%r13), %r12
	jmp	.LBB10_5
.LBB10_458:                             # %L5890
	movq	8(%rdx), %rax
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_450
# BB#459:                               # %L5891
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r12, %rax
	je	.LBB10_518
# BB#460:                               # %if.then4731
	movq	%rbx, recog_data+24(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rdx
	movq	32(%rdx), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB10_461
# BB#462:                               # %L5893
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB10_461
# BB#463:                               # %land.lhs.true4780
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB10_461
# BB#464:                               # %land.lhs.true4786
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB10_461
# BB#465:                               # %land.lhs.true4789
	movl	ix86_cpu(%rip), %eax
	movl	x86_use_loop(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r12, %rdi
	movq	$507, %rax              # imm = 0x1FB
	jne	.LBB10_515
.LBB10_461:                             # %if.end4755
	movq	8(%rdx), %rax
	jmp	.LBB10_451
.LBB10_518:                             # %if.end4621
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB10_450:                             # %if.end4602
	movq	8(%rax), %rax
.LBB10_451:                             # %L5745
	movq	16(%rax), %r13
	movq	8(%r13), %r15
.LBB10_8:                               # %L5745
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	comparison_operator
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB10_514
# BB#9:                                 # %if.then4538
	movq	%r15, recog_data(%rip)
	movq	8(%r15), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_514
# BB#10:                                # %if.then4811
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB10_14
# BB#11:                                # %if.then4819
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$59, %rcx
	jne	.LBB10_12
# BB#482:                               # %L5775
	movq	24(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB10_13
# BB#483:                               # %L5776
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_468
# BB#484:                               # %L5778
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB10_468
# BB#485:                               # %land.lhs.true5149
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB10_468
# BB#486:                               # %L5779
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_468
# BB#487:                               # %L5780
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB10_468
# BB#488:                               # %land.lhs.true5209
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB10_468
# BB#489:                               # %L5781
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_468
# BB#490:                               # %L5782
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r12, %rax
	je	.LBB10_498
# BB#491:                               # %if.then5261
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$1, %rax
	je	.LBB10_498
# BB#492:                               # %land.lhs.true5280
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-15, %rdx
	andq	%r12, %rdx
	cmpq	$1, %rdx
	ja	.LBB10_498
# BB#493:                               # %land.lhs.true5294
	movq	recog_data+16(%rip), %rcx
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB10_498
# BB#494:                               # %land.lhs.true5305
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_use_fcomi_compare
	testq	%r12, %rax
	jne	.LBB10_498
# BB#495:                               # %land.lhs.true5311
	movq	recog_data(%rip), %rax
	movq	recog_data+8(%rip), %rcx
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	ix86_cc_mode
	andq	%r12, %rax
	cmpq	$57, %rax
	jne	.LBB10_498
# BB#496:                               # %land.lhs.true5320
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	%rax, %rcx
	movq	$499, %rax              # imm = 0x1F3
	jmp	.LBB10_497
.LBB10_12:                              # %if.then4819
	cmpq	$67, %rcx
	jne	.LBB10_13
# BB#466:                               # %L5749
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB10_13
# BB#467:                               # %L5751
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_468
# BB#469:                               # %L5752
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB10_468
# BB#470:                               # %land.lhs.true4899
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB10_468
# BB#471:                               # %L5753
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_468
# BB#472:                               # %L5754
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB10_468
# BB#473:                               # %land.lhs.true4959
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB10_468
# BB#474:                               # %L5755
	movq	32(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_468
# BB#475:                               # %L5756
	movq	8(%rcx), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r12, %rax
	je	.LBB10_498
# BB#476:                               # %if.then5011
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$1, %rax
	je	.LBB10_498
# BB#477:                               # %land.lhs.true5030
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	addq	$-15, %rdx
	andq	%r12, %rdx
	cmpq	$1, %rdx
	ja	.LBB10_498
# BB#478:                               # %land.lhs.true5044
	movq	recog_data+16(%rip), %rcx
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB10_498
# BB#479:                               # %land.lhs.true5055
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_use_fcomi_compare
	testq	%r12, %rax
	jne	.LBB10_498
# BB#480:                               # %land.lhs.true5061
	movq	recog_data(%rip), %rax
	movq	recog_data+8(%rip), %rcx
	movq	recog_data+16(%rip), %rdx
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	ix86_cc_mode
	andq	%r12, %rax
	cmpq	$57, %rax
	jne	.LBB10_498
# BB#481:                               # %land.lhs.true5070
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	%rax, %rcx
	movq	$498, %rax              # imm = 0x1F2
.LBB10_497:                             # %land.lhs.true5320
	testq	%rcx, %rcx
	jne	.LBB10_515
.LBB10_498:                             # %if.end5013
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB10_468:                             # %if.end4871
	movq	8(%rax), %rax
	movq	16(%rax), %r13
.LBB10_13:                              # %sw.epilog4835
	movq	8(%r13), %rax
	movq	16(%rax), %rbx
.LBB10_14:                              # %L5800
	xorq	%rsi, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB10_514
# BB#15:                                # %if.then4824
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$59, %rcx
	jne	.LBB10_16
# BB#499:                               # %L5828
	movq	24(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$67, %rcx
	jne	.LBB10_514
# BB#500:                               # %L5829
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_514
# BB#501:                               # %L5831
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB10_514
# BB#502:                               # %land.lhs.true5532
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB10_514
# BB#503:                               # %L5832
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_514
# BB#504:                               # %L5833
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB10_514
# BB#505:                               # %land.lhs.true5564
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB10_514
# BB#506:                               # %L5834
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB10_514
# BB#507:                               # %L5835
	movq	8(%rax), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r12, %rax
	je	.LBB10_514
# BB#508:                               # %if.then5588
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$1, %rax
	je	.LBB10_514
# BB#509:                               # %land.lhs.true5593
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB10_514
# BB#510:                               # %land.lhs.true5593
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB10_514
# BB#511:                               # %land.lhs.true5620
	movq	recog_data+16(%rip), %rcx
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB10_514
# BB#512:                               # %land.lhs.true5631
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	%rax, %rcx
	movq	$501, %rax              # imm = 0x1F5
	jmp	.LBB10_513
.LBB10_16:                              # %if.then4824
	cmpq	$67, %rcx
	jne	.LBB10_514
# BB#17:                                # %L5802
	movq	8(%rax), %rax
	movq	%rax, recog_data+24(%rip)
	movq	24(%r13), %rax
	movzbl	(%rax), %eax
	cmpq	$59, %rax
	jne	.LBB10_514
# BB#18:                                # %L5804
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_514
# BB#19:                                # %L5805
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB10_514
# BB#20:                                # %land.lhs.true5388
	movl	8(%rcx), %ecx
	cmpq	$18, %rcx
	jne	.LBB10_514
# BB#21:                                # %L5806
	movq	24(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB10_514
# BB#22:                                # %L5807
	movq	8(%rcx), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3735613, %rdx          # imm = 0x39003D
	jne	.LBB10_514
# BB#23:                                # %land.lhs.true5420
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB10_514
# BB#24:                                # %L5808
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$49, %rcx
	jne	.LBB10_514
# BB#25:                                # %L5809
	movq	8(%rax), %rbx
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r12, %rax
	je	.LBB10_514
# BB#26:                                # %if.then5444
	movzbl	target_flags(%rip), %eax
	movq	%rbx, recog_data+32(%rip)
	testq	$1, %rax
	je	.LBB10_514
# BB#27:                                # %land.lhs.true5449
	movq	recog_data+8(%rip), %rax
	movl	(%rax), %eax
	movq	$14, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$1020, %rdx             # imm = 0x3FC
	movl	mode_class(%rdx), %ecx
	cmpq	$8, %rcx
	ja	.LBB10_514
# BB#28:                                # %land.lhs.true5449
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$324, %rdx              # imm = 0x144
	je	.LBB10_514
# BB#29:                                # %land.lhs.true5476
	movq	recog_data+16(%rip), %rcx
	movl	(%rcx), %ecx
	xorq	%rax, %rcx
	testq	$16711680, %rcx         # imm = 0xFF0000
	jne	.LBB10_514
# BB#30:                                # %land.lhs.true5487
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	movq	%rax, %rdi
	callq	ix86_fp_jump_nontrivial_p
	movq	%rax, %rcx
	movq	$500, %rax              # imm = 0x1F4
.LBB10_513:                             # %land.lhs.true5631
	testq	%rcx, %rcx
	jne	.LBB10_515
.LBB10_514:                             # %ret0
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
.LBB10_515:                             # %return
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp176:
	.size	recog_30, .Ltmp176-recog_30
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI10_0:
	.quad	.LBB10_355
	.quad	.LBB10_270
	.quad	.LBB10_154
	.quad	.LBB10_31

	.text
	.align	16, 0x90
	.type	recog_23,@function
recog_23:                               # @recog_23
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp183:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp184:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp185:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp186:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp187:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp188:
	.cfi_def_cfa_offset 64
.Ltmp189:
	.cfi_offset %rbx, -48
.Ltmp190:
	.cfi_offset %r12, -40
.Ltmp191:
	.cfi_offset %r13, -32
.Ltmp192:
	.cfi_offset %r14, -24
.Ltmp193:
	.cfi_offset %r15, -16
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%rdi), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	movq	8(%r14), %r15
	movzbl	(%r15), %eax
	movq	%rsi, %r13
	addq	$-61, %rax
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rax
	cmpq	$29, %rax
	ja	.LBB11_477
# BB#1:                                 # %entry
	jmpq	*.LJTI11_0(,%rax,8)
.LBB11_2:                               # %L11812
	movq	$4, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#3:                                 # %if.then
	movq	%r15, recog_data+8(%rip)
	movq	16(%r14), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	const_int_operand
	testq	%rbx, %rax
	movq	%rbx, %r14
	je	.LBB11_6
# BB#4:                                 # %if.then4000
	movq	%r15, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rcx
	movzbl	(%rcx), %edx
	cmpq	$49, %rdx
	jne	.LBB11_5
# BB#465:                               # %L1558
	movq	8(%rcx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r14, %rax
	je	.LBB11_468
# BB#466:                               # %if.then4034
	movq	%rbx, recog_data(%rip)
	movq	$53, %rsi
	movq	%r13, %rdi
	callq	ix86_match_ccmode
	testq	%r14, %rax
	je	.LBB11_468
# BB#467:                               # %land.lhs.true4050
	movq	recog_data+16(%rip), %rax
	movl	8(%rax), %eax
	movabsq	$2147483648, %rcx       # imm = 0x80000000
	cmpq	%rcx, %rax
	movq	$213, %rax
	jne	.LBB11_478
.LBB11_468:                             # %if.end4036
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_5:                               # %if.end4017
	movq	8(%rax), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %r15
.LBB11_6:                               # %L2031
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	general_operand
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#7:                                 # %if.then4005
	movq	%r15, recog_data+16(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#8:                                 # %L2033
	movq	%rdx, %r15
	movq	8(%rbx), %r14
	movzbl	2(%r14), %eax
	cmpq	$5, %rax
	jne	.LBB11_9
# BB#469:                               # %L11886
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#470:                               # %if.then4132
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#471:                               # %L2046
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262220, %rax           # imm = 0x4004C
	jne	.LBB11_477
# BB#472:                               # %L2047
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#473:                               # %L2048
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#474:                               # %land.lhs.true4175
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#475:                               # %land.lhs.true4178
	movq	$52, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#476:                               # %land.lhs.true4181
	movq	%rdx, %rbx
	movabsq	$recog_data, %rdx
	movq	$76, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$242, %rax
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_16:                              # %L1499
	movq	8(%r15), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	movq	%rdx, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#17:                                # %if.then23
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	general_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#18:                                # %if.then31
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#19:                                # %land.lhs.true
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#20:                                # %L1502
	movq	%rdx, %rbx
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r15
	movzbl	(%r15), %eax
	cmpq	$49, %rax
	jne	.LBB11_21
# BB#40:                                # %L1575
	movq	8(%r15), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	scratch_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#41:                                # %if.then171
	movq	%r14, recog_data(%rip)
	movq	$54, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#42:                                # %land.lhs.true176
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	movq	recog_data+16(%rip), %rdi
	cmpq	$66, %rax
	jne	.LBB11_44
# BB#43:                                # %lor.lhs.false
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	je	.LBB11_477
.LBB11_44:                              # %land.lhs.true185
	xorq	%rsi, %rsi
	movq	%rdx, %rbx
	callq	pic_symbolic_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$214, %rax
	jne	.LBB11_477
	jmp	.LBB11_478
.LBB11_63:                              # %L2004
	movq	8(%r15), %r12
	movl	(%r12), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB11_477
# BB#64:                                # %L11857
	movq	%r13, %rbx
	movq	$4, %rsi
	movq	%r12, %rdi
	movq	%rdx, %r13
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB11_70
# BB#65:                                # %if.then318
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	general_operand
	testq	%r13, %rax
	je	.LBB11_69
# BB#66:                                # %if.then331
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_68
# BB#67:                                # %land.lhs.true343
	cmpq	$0, 8(%rax)
	jne	.LBB11_68
# BB#83:                                # %L2007
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r15
	movzbl	(%r15), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_84
# BB#85:                                # %L2008
	movq	8(%r15), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB11_92
# BB#86:                                # %if.then385
	movq	%r14, recog_data(%rip)
	movq	16(%r15), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262220, %rax           # imm = 0x4004C
	jne	.LBB11_92
# BB#87:                                # %L2010
	movq	8(%r14), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB11_92
# BB#88:                                # %L2011
	movq	16(%r14), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	%r13, %rcx
	je	.LBB11_91
# BB#89:                                # %land.lhs.true457
	movq	$54, %rsi
	movq	%rbx, %rdi
	movq	%rcx, %r14
	callq	ix86_match_ccmode
	movq	%r14, %rcx
	testq	%rcx, %rax
	je	.LBB11_91
# BB#90:                                # %land.lhs.true460
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rcx, %r14
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%r14, %rcx
	testq	%rcx, %rax
	movq	$239, %rax
	jne	.LBB11_478
.LBB11_91:                              # %if.end464
	movq	%rcx, %r13
.LBB11_92:                              # %if.end387
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_84:                              # %if.end365
	movq	8(%rax), %rax
	movq	16(%rax), %r14
.LBB11_68:                              # %if.end349
	movq	8(%r14), %r15
.LBB11_69:                              # %if.end333
	movq	8(%r15), %r12
.LBB11_70:                              # %L11858
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	register_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	movq	%rbx, %r13
	je	.LBB11_477
# BB#71:                                # %if.then323
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	general_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#72:                                # %if.then484
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#73:                                # %land.lhs.true493
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#74:                                # %L2020
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#75:                                # %L2021
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#76:                                # %if.then515
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#77:                                # %L2023
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262220, %rax           # imm = 0x4004C
	jne	.LBB11_477
# BB#78:                                # %L2024
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#79:                                # %L2025
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#80:                                # %land.lhs.true558
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#81:                                # %land.lhs.true561
	movq	$54, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#82:                                # %land.lhs.true564
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$240, %rax
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_45:                              # %L1526
	movq	8(%r15), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	general_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#46:                                # %if.then196
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%rdx, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#47:                                # %if.then204
	movq	%rdx, %r12
	movq	%r14, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_48
# BB#54:                                # %L1546
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#55:                                # %if.then249
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#56:                                # %L1548
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB11_477
# BB#57:                                # %L1549
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#58:                                # %L1550
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#59:                                # %land.lhs.true292
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#60:                                # %land.lhs.true295
	movq	$56, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#61:                                # %land.lhs.true298
	movq	%rdx, %rbx
	movabsq	$recog_data, %rdx
	movq	$75, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#62:                                # %land.lhs.true301
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	movq	%rdx, %rbx
	callq	pic_symbolic_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$212, %rax
	jne	.LBB11_477
	jmp	.LBB11_478
.LBB11_93:                              # %L2949
	movq	8(%r15), %r12
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB11_477
# BB#94:                                # %L11860
	movq	%r13, %rbx
	movq	%rdx, %r13
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB11_95
# BB#108:                               # %L3087
	movq	8(%r12), %rdi
	movq	%rdi, (%rsp)            # 8-byte Spill
	xorq	%rsi, %rsi
	callq	ext_register_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#109:                               # %if.then593
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#110:                               # %land.lhs.true602
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#111:                               # %L3089
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#112:                               # %land.lhs.true615
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#113:                               # %L3090
	movq	16(%r15), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	movq	%rdx, %r12
	callq	const_int_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#114:                               # %if.then627
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#115:                               # %land.lhs.true636
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#116:                               # %L3092
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r13
	movzbl	(%r13), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#117:                               # %L3093
	movq	8(%r13), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB11_477
# BB#118:                               # %L3094
	movq	8(%r14), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	movq	%rdx, %r12
	callq	ext_register_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#119:                               # %if.then671
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#120:                               # %land.lhs.true680
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#121:                               # %L3096
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#122:                               # %land.lhs.true693
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#123:                               # %L3097
	movq	16(%r13), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262227, %rax           # imm = 0x40053
	jne	.LBB11_477
# BB#124:                               # %L3098
	movq	8(%r12), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB11_477
# BB#125:                               # %L3099
	movq	8(%r14), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r15
	callq	rtx_equal_p
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#126:                               # %L3100
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#127:                               # %land.lhs.true740
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#128:                               # %L3101
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#129:                               # %land.lhs.true753
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#130:                               # %L3102
	movq	16(%r12), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#131:                               # %land.lhs.true766
	movq	$55, %rsi
	movq	%rbx, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#132:                               # %land.lhs.true769
	movq	recog_data+16(%rip), %rax
	movq	8(%rax), %rax
	cmpq	$256, %rax              # imm = 0x100
	movq	$303, %rax              # imm = 0x12F
	jae	.LBB11_477
	jmp	.LBB11_478
.LBB11_141:                             # %L3286
	movq	8(%r15), %r12
	movq	$4, %rsi
	movq	%r12, %rdi
	movq	%rdx, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#142:                               # %if.then919
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	general_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_143
# BB#156:                               # %if.then927
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_158
# BB#157:                               # %land.lhs.true941
	cmpq	$0, 8(%rax)
	je	.LBB11_160
.LBB11_158:                             # %if.end947
	movq	%rdx, %r12
.LBB11_159:                             # %L3314
	movq	8(%r14), %rax
	movq	16(%rax), %r15
	jmp	.LBB11_144
.LBB11_186:                             # %L3556
	movq	8(%r15), %r12
	movl	(%r12), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB11_477
# BB#187:                               # %L11866
	movq	%r13, %rbx
	movq	%rdx, %r13
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$133, %rax
	jne	.LBB11_188
# BB#203:                               # %L3737
	movq	8(%r12), %rdi
	movq	%rdi, (%rsp)            # 8-byte Spill
	xorq	%rsi, %rsi
	callq	ext_register_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#204:                               # %if.then1381
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#205:                               # %land.lhs.true1390
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#206:                               # %L3739
	movq	24(%r12), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#207:                               # %land.lhs.true1403
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#208:                               # %L3740
	movq	16(%r15), %r15
	movq	$2, %rsi
	movq	%r15, %rdi
	movq	%rdx, %r12
	callq	general_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_209
# BB#230:                               # %if.then1415
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_232
# BB#231:                               # %land.lhs.true1429
	cmpq	$0, 8(%rax)
	je	.LBB11_234
.LBB11_232:                             # %if.end1435
	movq	%rdx, %r13
	jmp	.LBB11_233
.LBB11_283:                             # %L4319
	movq	8(%r15), %rbx
	movl	(%rbx), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB11_477
# BB#284:                               # %L11869
	movq	$4, %rsi
	movq	%rbx, %rdi
	movq	%rdx, %r15
	callq	nonimmediate_operand
	movq	%r15, %rcx
	movq	%rcx, %r12
	testq	%rcx, %rax
	je	.LBB11_285
# BB#296:                               # %if.then2317
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_298
# BB#297:                               # %land.lhs.true2331
	cmpq	$0, 8(%rax)
	jne	.LBB11_298
# BB#299:                               # %L4321
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_300
# BB#301:                               # %L4322
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB11_306
# BB#302:                               # %if.then2373
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262230, %rcx           # imm = 0x40056
	jne	.LBB11_306
# BB#303:                               # %L4324
	movq	8(%rax), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB11_306
# BB#304:                               # %land.lhs.true2423
	movq	$55, %rsi
	movq	%r13, %rdi
	callq	ix86_match_ccmode
	testq	%r12, %rax
	je	.LBB11_306
# BB#305:                               # %land.lhs.true2426
	movabsq	$recog_data, %rdx
	movq	$86, %rdi
	movq	$4, %rsi
	callq	ix86_unary_operator_ok
	testq	%r12, %rax
	movq	$397, %rax              # imm = 0x18D
	jne	.LBB11_478
.LBB11_306:                             # %if.end2375
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_300:                             # %if.end2353
	movq	8(%rax), %rax
	movq	16(%rax), %r14
.LBB11_298:                             # %if.end2337
	movq	8(%r14), %rax
	movq	8(%rax), %rbx
.LBB11_285:                             # %L11870
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#286:                               # %if.then2322
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#287:                               # %land.lhs.true2451
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#288:                               # %L4332
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#289:                               # %L4333
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#290:                               # %if.then2473
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#291:                               # %L4335
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262230, %rcx           # imm = 0x40056
	jne	.LBB11_477
# BB#292:                               # %L4336
	movq	8(%rax), %rdi
	movq	recog_data+8(%rip), %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#293:                               # %land.lhs.true2508
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#294:                               # %land.lhs.true2511
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#295:                               # %land.lhs.true2514
	movabsq	$recog_data, %rax
	movq	$86, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$398, %rax              # imm = 0x18E
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_307:                             # %L4486
	movq	8(%r15), %r12
	movl	(%r12), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB11_477
# BB#308:                               # %L11871
	movq	%r13, %rbx
	movq	$4, %rsi
	movq	%r12, %rdi
	movq	%rdx, %r13
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB11_314
# BB#309:                               # %if.then2530
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r12
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	const_int_1_31_operand
	testq	%r13, %rax
	je	.LBB11_313
# BB#310:                               # %if.then2543
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_312
# BB#311:                               # %land.lhs.true2555
	cmpq	$0, 8(%rax)
	jne	.LBB11_312
# BB#327:                               # %L4489
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r15
	movzbl	(%r15), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_328
# BB#329:                               # %L4490
	movq	8(%r15), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB11_336
# BB#330:                               # %if.then2597
	movq	%r14, recog_data(%rip)
	movq	16(%r15), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262231, %rax           # imm = 0x40057
	jne	.LBB11_336
# BB#331:                               # %L4492
	movq	8(%r14), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB11_336
# BB#332:                               # %L4493
	movq	16(%r14), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	movq	%r13, %rcx
	je	.LBB11_335
# BB#333:                               # %land.lhs.true2669
	movq	$54, %rsi
	movq	%rbx, %rdi
	movq	%rcx, %r14
	callq	ix86_match_ccmode
	movq	%r14, %rcx
	testq	%rcx, %rax
	je	.LBB11_335
# BB#334:                               # %land.lhs.true2672
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$4, %rsi
	movq	%rcx, %r14
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%r14, %rcx
	testq	%rcx, %rax
	movq	$410, %rax              # imm = 0x19A
	jne	.LBB11_478
.LBB11_335:                             # %if.end2676
	movq	%rcx, %r13
.LBB11_336:                             # %if.end2599
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_328:                             # %if.end2577
	movq	8(%rax), %rax
	movq	16(%rax), %r14
.LBB11_312:                             # %if.end2561
	movq	8(%r14), %r15
.LBB11_313:                             # %if.end2545
	movq	8(%r15), %r12
.LBB11_314:                             # %L11872
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	register_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	movq	%rbx, %r13
	je	.LBB11_477
# BB#315:                               # %if.then2535
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r15
	movq	$2, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	const_int_1_31_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#316:                               # %if.then2696
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#317:                               # %land.lhs.true2705
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#318:                               # %L4502
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#319:                               # %L4503
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#320:                               # %if.then2727
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#321:                               # %L4505
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262231, %rax           # imm = 0x40057
	jne	.LBB11_477
# BB#322:                               # %L4506
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#323:                               # %L4507
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#324:                               # %land.lhs.true2770
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#325:                               # %land.lhs.true2773
	movq	$54, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#326:                               # %land.lhs.true2776
	movabsq	$recog_data, %rax
	movq	$87, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$411, %rax              # imm = 0x19B
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_337:                             # %L4808
	movq	8(%r15), %r12
	movl	(%r12), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB11_477
# BB#338:                               # %L11873
	movq	%r13, (%rsp)            # 8-byte Spill
	movq	$4, %rsi
	movq	%r12, %rdi
	movq	%rdx, %rbx
	callq	nonimmediate_operand
	testq	%rbx, %rax
	movq	%rbx, %r13
	je	.LBB11_341
# BB#339:                               # %if.then2792
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r12
	movzbl	(%r12), %eax
	cmpq	$54, %rax
	jne	.LBB11_340
# BB#356:                               # %L11875
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB11_360
# BB#357:                               # %if.then2813
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_359
# BB#358:                               # %land.lhs.true2830
	cmpq	$0, 8(%rax)
	jne	.LBB11_359
# BB#364:                               # %L4811
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_365
# BB#366:                               # %L4812
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB11_374
# BB#367:                               # %if.then2872
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262233, %rax           # imm = 0x40059
	jne	.LBB11_374
# BB#368:                               # %L4814
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB11_374
# BB#369:                               # %L4815
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r13, %rdx
	testq	%rdx, %rax
	movq	(%rsp), %rax            # 8-byte Reload
	je	.LBB11_373
# BB#370:                               # %land.lhs.true2944
	movq	$54, %rsi
	movq	%rax, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_373
# BB#371:                               # %land.lhs.true2947
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_373
# BB#372:                               # %land.lhs.true2951
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$432, %rax              # imm = 0x1B0
	jne	.LBB11_478
.LBB11_373:                             # %if.end2955
	movq	%rdx, %r13
.LBB11_374:                             # %if.end2874
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_365:                             # %if.end2852
	movq	8(%rax), %rax
	movq	16(%rax), %r14
.LBB11_359:                             # %if.end2836
	movq	8(%r14), %r15
	movq	16(%r15), %r12
.LBB11_360:                             # %L11876
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	const_int_1_31_operand
	testq	%r13, %rax
	je	.LBB11_340
# BB#361:                               # %if.then2818
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_363
# BB#362:                               # %land.lhs.true2976
	cmpq	$0, 8(%rax)
	je	.LBB11_375
.LBB11_363:                             # %if.end2982
	movq	8(%r14), %r15
.LBB11_340:                             # %if.end2807
	movq	8(%r15), %r12
.LBB11_341:                             # %L11874
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	register_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	movq	(%rsp), %r13            # 8-byte Reload
	je	.LBB11_477
# BB#342:                               # %if.then2797
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB11_477
# BB#343:                               # %L11877
	movq	$2, %rsi
	movq	%rbx, %rdi
	movq	%rdx, %r15
	callq	const_int_1_operand
	movq	%r15, %rcx
	movq	%rcx, %r12
	testq	%rcx, %rax
	je	.LBB11_344
# BB#385:                               # %if.then3122
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_387
# BB#386:                               # %land.lhs.true3136
	cmpq	$0, 8(%rax)
	jne	.LBB11_387
# BB#388:                               # %L4824
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_389
# BB#390:                               # %L4825
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB11_400
# BB#391:                               # %if.then3178
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_400
# BB#392:                               # %L4827
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262233, %rax           # imm = 0x40059
	jne	.LBB11_400
# BB#393:                               # %L4828
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB11_400
# BB#394:                               # %L4829
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_399
# BB#395:                               # %land.lhs.true3277
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_399
# BB#396:                               # %land.lhs.true3280
	movq	$52, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_399
# BB#397:                               # %land.lhs.true3283
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_399
# BB#398:                               # %land.lhs.true3287
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$433, %rax              # imm = 0x1B1
	jne	.LBB11_478
.LBB11_399:                             # %if.end3291
	movq	%rdx, %r12
.LBB11_400:                             # %if.end3180
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_389:                             # %if.end3158
	movq	8(%rax), %rax
	movq	16(%rax), %r14
.LBB11_387:                             # %if.end3142
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
.LBB11_344:                             # %L11878
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_31_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#345:                               # %if.then3127
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#346:                               # %land.lhs.true3312
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#347:                               # %L4851
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#348:                               # %L4852
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#349:                               # %if.then3334
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#350:                               # %L4854
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262233, %rax           # imm = 0x40059
	jne	.LBB11_477
# BB#351:                               # %L4855
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#352:                               # %L4856
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#353:                               # %land.lhs.true3377
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#354:                               # %land.lhs.true3380
	movq	$54, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#355:                               # %land.lhs.true3383
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$435, %rax              # imm = 0x1B3
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_401:                             # %L5114
	movq	8(%r15), %r12
	movl	(%r12), %eax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$262144, %rax           # imm = 0x40000
	jne	.LBB11_477
# BB#402:                               # %L11879
	movq	%r13, (%rsp)            # 8-byte Spill
	movq	$4, %rsi
	movq	%r12, %rdi
	movq	%rdx, %rbx
	callq	nonimmediate_operand
	testq	%rbx, %rax
	movq	%rbx, %r13
	je	.LBB11_405
# BB#403:                               # %if.then3399
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r12
	movzbl	(%r12), %eax
	cmpq	$54, %rax
	jne	.LBB11_404
# BB#420:                               # %L11881
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	const_int_1_operand
	testq	%r13, %rax
	je	.LBB11_424
# BB#421:                               # %if.then3420
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_423
# BB#422:                               # %land.lhs.true3437
	cmpq	$0, 8(%rax)
	jne	.LBB11_423
# BB#428:                               # %L5117
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_429
# BB#430:                               # %L5118
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB11_438
# BB#431:                               # %if.then3479
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262234, %rax           # imm = 0x4005A
	jne	.LBB11_438
# BB#432:                               # %L5120
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB11_438
# BB#433:                               # %L5121
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r13, %rdx
	testq	%rdx, %rax
	movq	(%rsp), %rax            # 8-byte Reload
	je	.LBB11_437
# BB#434:                               # %land.lhs.true3551
	movq	$54, %rsi
	movq	%rax, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_437
# BB#435:                               # %land.lhs.true3554
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_437
# BB#436:                               # %land.lhs.true3558
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$454, %rax              # imm = 0x1C6
	jne	.LBB11_478
.LBB11_437:                             # %if.end3562
	movq	%rdx, %r13
.LBB11_438:                             # %if.end3481
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_429:                             # %if.end3459
	movq	8(%rax), %rax
	movq	16(%rax), %r14
.LBB11_423:                             # %if.end3443
	movq	8(%r14), %r15
	movq	16(%r15), %r12
.LBB11_424:                             # %L11882
	movq	$2, %rsi
	movq	%r12, %rdi
	callq	const_int_1_31_operand
	testq	%r13, %rax
	je	.LBB11_404
# BB#425:                               # %if.then3425
	movq	%r12, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_427
# BB#426:                               # %land.lhs.true3583
	cmpq	$0, 8(%rax)
	je	.LBB11_439
.LBB11_427:                             # %if.end3589
	movq	8(%r14), %r15
.LBB11_404:                             # %if.end3414
	movq	8(%r15), %r12
.LBB11_405:                             # %L11880
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	register_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	movq	(%rsp), %r13            # 8-byte Reload
	je	.LBB11_477
# BB#406:                               # %if.then3404
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB11_477
# BB#407:                               # %L11883
	movq	$2, %rsi
	movq	%rbx, %rdi
	movq	%rdx, %r15
	callq	const_int_1_operand
	movq	%r15, %rcx
	movq	%rcx, %r12
	testq	%rcx, %rax
	je	.LBB11_408
# BB#449:                               # %if.then3729
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_451
# BB#450:                               # %land.lhs.true3743
	cmpq	$0, 8(%rax)
	jne	.LBB11_451
# BB#452:                               # %L5130
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_453
# BB#454:                               # %L5131
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB11_464
# BB#455:                               # %if.then3785
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB11_464
# BB#456:                               # %L5133
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_464
# BB#457:                               # %L5134
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB11_464
# BB#458:                               # %L5135
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_463
# BB#459:                               # %land.lhs.true3884
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_463
# BB#460:                               # %land.lhs.true3887
	movq	$54, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_463
# BB#461:                               # %land.lhs.true3890
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_463
# BB#462:                               # %land.lhs.true3894
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$455, %rax              # imm = 0x1C7
	jne	.LBB11_478
.LBB11_463:                             # %if.end3898
	movq	%rdx, %r12
.LBB11_464:                             # %if.end3787
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_453:                             # %if.end3765
	movq	8(%rax), %rax
	movq	16(%rax), %r14
.LBB11_451:                             # %if.end3749
	movq	8(%r14), %rax
	movq	16(%rax), %rbx
.LBB11_408:                             # %L11884
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_31_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#409:                               # %if.then3734
	movq	%rbx, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#410:                               # %land.lhs.true3919
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#411:                               # %L5157
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#412:                               # %L5158
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#413:                               # %if.then3941
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB11_477
# BB#414:                               # %L5160
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#415:                               # %L5161
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#416:                               # %L5162
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#417:                               # %land.lhs.true3984
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#418:                               # %land.lhs.true3987
	movq	$54, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#419:                               # %land.lhs.true3990
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$457, %rax              # imm = 0x1C9
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_9:                               # %L2033
	cmpq	$4, %rax
	movq	%r15, %rdx
	jne	.LBB11_477
# BB#10:                                # %L11885
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	nonimmediate_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#11:                                # %if.then4092
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262220, %rax           # imm = 0x4004C
	jne	.LBB11_477
# BB#12:                                # %L2035
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#13:                                # %L2036
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#14:                                # %land.lhs.true4122
	movq	$52, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#15:                                # %land.lhs.true4125
	movq	%rdx, %rbx
	movabsq	$recog_data, %rdx
	movq	$76, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$241, %rax
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_95:                              # %if.end582
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	movq	%rbx, %r13
	je	.LBB11_477
# BB#96:                                # %if.then585
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	general_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#97:                                # %if.then782
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#98:                                # %land.lhs.true791
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#99:                                # %L2952
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#100:                               # %L2953
	movq	%rdx, %r15
	movq	8(%rbx), %r14
	movzbl	2(%r14), %eax
	cmpq	$5, %rax
	jne	.LBB11_101
# BB#133:                               # %L11862
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#134:                               # %if.then860
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#135:                               # %L2968
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262227, %rax           # imm = 0x40053
	jne	.LBB11_477
# BB#136:                               # %L2969
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#137:                               # %L2970
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#138:                               # %land.lhs.true903
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#139:                               # %land.lhs.true906
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#140:                               # %land.lhs.true909
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$295, %rax              # imm = 0x127
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_188:                             # %if.end1370
	movq	$4, %rsi
	movq	%r12, %rdi
	callq	nonimmediate_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	movq	%rbx, %r13
	je	.LBB11_477
# BB#189:                               # %if.then1373
	movq	%r12, recog_data+8(%rip)
	movq	16(%r15), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	movq	%rdx, %rbx
	callq	general_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_190
# BB#254:                               # %if.then1876
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_256
# BB#255:                               # %land.lhs.true1890
	cmpq	$0, 8(%rax)
	je	.LBB11_258
.LBB11_256:                             # %if.end1896
	movq	%rdx, %r12
.LBB11_257:                             # %L3584
	movq	8(%r14), %rax
	movq	16(%rax), %r15
	jmp	.LBB11_191
.LBB11_143:
	movq	%rdx, %r12
.LBB11_144:                             # %L3314
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	x86_64_zext_immediate_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#145:                               # %if.then932
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#146:                               # %land.lhs.true1281
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#147:                               # %L3316
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#148:                               # %L3317
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#149:                               # %if.then1303
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327764, %rax           # imm = 0x50054
	jne	.LBB11_477
# BB#150:                               # %L3319
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#151:                               # %L3320
	movq	8(%rax), %rdi
	movq	recog_data+8(%rip), %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#152:                               # %L3321
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#153:                               # %land.lhs.true1346
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#154:                               # %land.lhs.true1349
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#155:                               # %land.lhs.true1352
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$315, %rax              # imm = 0x13B
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_48:                              # %if.then204
	cmpq	$49, %rax
	movq	%r12, %rdx
	jne	.LBB11_477
# BB#49:                                # %L1529
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%rdx, %rbx
	callq	scratch_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#50:                                # %if.then223
	movq	%r14, recog_data(%rip)
	movq	$56, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#51:                                # %land.lhs.true228
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	movq	recog_data+16(%rip), %rdi
	cmpq	$66, %rax
	jne	.LBB11_53
# BB#52:                                # %lor.lhs.false233
	movzbl	(%rdi), %eax
	cmpq	$66, %rax
	je	.LBB11_477
.LBB11_53:                              # %land.lhs.true238
	xorq	%rsi, %rsi
	movq	%rdx, %rbx
	callq	pic_symbolic_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$211, %rax
	jne	.LBB11_477
	jmp	.LBB11_478
.LBB11_160:                             # %L3289
	movq	%rdx, %r12
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_161
# BB#163:                               # %L3290
	movq	8(%rbx), %r14
	movzbl	2(%r14), %ecx
	cmpq	$4, %rcx
	jne	.LBB11_164
# BB#173:                               # %L11863
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB11_185
# BB#174:                               # %if.then1005
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262228, %rax           # imm = 0x40054
	jne	.LBB11_185
# BB#175:                               # %L3292
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB11_185
# BB#176:                               # %L3293
	movq	16(%rbx), %rdi
	movq	recog_data+16(%rip), %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	movq	%r12, %rcx
	je	.LBB11_179
# BB#177:                               # %land.lhs.true1077
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB11_179
# BB#178:                               # %land.lhs.true1080
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$4, %rsi
	movq	%rcx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rcx
	testq	%rcx, %rax
	movq	$313, %rax              # imm = 0x139
	jne	.LBB11_478
	jmp	.LBB11_179
.LBB11_190:
	movq	%rdx, %r12
.LBB11_191:                             # %L3584
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	x86_64_zext_immediate_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#192:                               # %if.then1881
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#193:                               # %land.lhs.true2230
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#194:                               # %L3586
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#195:                               # %L3587
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	register_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#196:                               # %if.then2252
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327765, %rax           # imm = 0x50055
	jne	.LBB11_477
# BB#197:                               # %L3589
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#198:                               # %L3590
	movq	8(%rax), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#199:                               # %L3591
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#200:                               # %land.lhs.true2295
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#201:                               # %land.lhs.true2298
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#202:                               # %land.lhs.true2301
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$333, %rax              # imm = 0x14D
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_21:                              # %L1502
	cmpq	$47, %rax
	movq	%rbx, %rdx
	jne	.LBB11_477
# BB#22:                                # %L1503
	movq	%rdx, %rbx
	movq	8(%r15), %r14
	movzbl	2(%r14), %eax
	cmpq	$5, %rax
	jne	.LBB11_23
# BB#31:                                # %L11856
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#32:                                # %if.then109
	movq	%r14, recog_data(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_477
# BB#33:                                # %L1518
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB11_477
# BB#34:                                # %L1519
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#35:                                # %L1520
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#36:                                # %land.lhs.true152
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#37:                                # %land.lhs.true154
	movq	$54, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#38:                                # %land.lhs.true157
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#39:                                # %land.lhs.true160
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	movq	%rdx, %rbx
	callq	pic_symbolic_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$210, %rax
	jne	.LBB11_477
	jmp	.LBB11_478
.LBB11_161:                             # %L3289
	cmpq	$49, %rcx
	jne	.LBB11_162
# BB#180:                               # %L3331
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r12, %rax
	je	.LBB11_185
# BB#181:                               # %if.then1230
	movq	%rbx, recog_data(%rip)
	movq	$55, %rsi
	movq	%r13, %rdi
	callq	ix86_match_ccmode
	testq	%r12, %rax
	movq	%r12, %rdx
	je	.LBB11_184
# BB#182:                               # %land.lhs.true1249
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$316, %rax              # imm = 0x13C
	jne	.LBB11_478
# BB#183:                               # %lor.lhs.false1254
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	jne	.LBB11_478
.LBB11_184:                             # %if.end1260
	movq	%rdx, %r12
	jmp	.LBB11_185
.LBB11_258:                             # %L3559
	movq	%rdx, %r12
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_259
# BB#261:                               # %L3560
	movq	8(%rbx), %r14
	movzbl	2(%r14), %ecx
	cmpq	$4, %rcx
	jne	.LBB11_262
# BB#271:                               # %L11867
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB11_282
# BB#272:                               # %if.then1954
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262229, %rax           # imm = 0x40055
	jne	.LBB11_282
# BB#273:                               # %L3562
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB11_282
# BB#274:                               # %L3563
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r12, %rcx
	testq	%rcx, %rax
	je	.LBB11_277
# BB#275:                               # %land.lhs.true2026
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB11_277
# BB#276:                               # %land.lhs.true2029
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$4, %rsi
	movq	%rcx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rcx
	testq	%rcx, %rax
	movq	$331, %rax              # imm = 0x14B
	jne	.LBB11_478
	jmp	.LBB11_277
.LBB11_164:                             # %L3290
	cmpq	$5, %rcx
	jne	.LBB11_162
# BB#165:                               # %L11864
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB11_185
# BB#166:                               # %if.then1101
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_185
# BB#167:                               # %L3305
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262228, %rax           # imm = 0x40054
	jne	.LBB11_185
# BB#168:                               # %L3306
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB11_185
# BB#169:                               # %L3307
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r12, %rcx
	testq	%rcx, %rax
	je	.LBB11_179
# BB#170:                               # %land.lhs.true1200
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_179
# BB#171:                               # %land.lhs.true1203
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB11_179
# BB#172:                               # %land.lhs.true1206
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$4, %rsi
	movq	%rcx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rcx
	testq	%rcx, %rax
	movq	$314, %rax              # imm = 0x13A
	jne	.LBB11_478
.LBB11_179:                             # %if.end1084
	movq	%rcx, %r12
.LBB11_185:                             # %if.end1007
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_162:                             # %sw.epilog964
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	jmp	.LBB11_159
.LBB11_375:                             # %L4838
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_376
# BB#377:                               # %L4839
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB11_384
# BB#378:                               # %if.then3018
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262233, %rax           # imm = 0x40059
	jne	.LBB11_384
# BB#379:                               # %L4841
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB11_384
# BB#380:                               # %L4842
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r13, %rcx
	testq	%rcx, %rax
	movq	(%rsp), %rax            # 8-byte Reload
	je	.LBB11_383
# BB#381:                               # %land.lhs.true3090
	movq	$54, %rsi
	movq	%rax, %rdi
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB11_383
# BB#382:                               # %land.lhs.true3093
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rcx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rcx
	testq	%rcx, %rax
	movq	$434, %rax              # imm = 0x1B2
	jne	.LBB11_478
.LBB11_383:                             # %if.end3097
	movq	%rcx, %r13
.LBB11_384:                             # %if.end3020
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_376:                             # %if.end2998
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	movq	8(%r14), %r15
	jmp	.LBB11_340
.LBB11_439:                             # %L5144
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
	movzbl	(%rbx), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_440
# BB#441:                               # %L5145
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r13, %rax
	je	.LBB11_448
# BB#442:                               # %if.then3625
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262234, %rax           # imm = 0x4005A
	jne	.LBB11_448
# BB#443:                               # %L5147
	movq	8(%rbx), %rdi
	movq	recog_data+8(%rip), %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB11_448
# BB#444:                               # %L5148
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r13, %rcx
	testq	%rcx, %rax
	movq	(%rsp), %rax            # 8-byte Reload
	je	.LBB11_447
# BB#445:                               # %land.lhs.true3697
	movq	$54, %rsi
	movq	%rax, %rdi
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB11_447
# BB#446:                               # %land.lhs.true3700
	movabsq	$recog_data, %rax
	movq	$90, %rdi
	movq	$3, %rsi
	movq	%rcx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rcx
	testq	%rcx, %rax
	movq	$456, %rax              # imm = 0x1C8
	jne	.LBB11_478
.LBB11_447:                             # %if.end3704
	movq	%rcx, %r13
.LBB11_448:                             # %if.end3627
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_440:                             # %if.end3605
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	movq	8(%r14), %r15
	jmp	.LBB11_404
.LBB11_23:                              # %L1503
	cmpq	$4, %rax
	movq	%rbx, %rdx
	jne	.LBB11_477
# BB#24:                                # %L11855
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%rdx, %rbx
	callq	nonimmediate_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#25:                                # %if.then65
	movq	%r14, recog_data(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB11_477
# BB#26:                                # %L1505
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#27:                                # %L1506
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#28:                                # %land.lhs.true95
	movq	$54, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#29:                                # %land.lhs.true98
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#30:                                # %land.lhs.true101
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	movq	%rdx, %rbx
	callq	pic_symbolic_operand
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$209, %rax
	jne	.LBB11_477
	jmp	.LBB11_478
.LBB11_259:                             # %L3559
	cmpq	$49, %rcx
	jne	.LBB11_260
# BB#278:                               # %L3601
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	scratch_operand
	testq	%r12, %rax
	je	.LBB11_282
# BB#279:                               # %if.then2179
	movq	%rbx, recog_data(%rip)
	movq	$55, %rsi
	movq	%r13, %rdi
	callq	ix86_match_ccmode
	testq	%r12, %rax
	je	.LBB11_282
# BB#280:                               # %land.lhs.true2198
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$334, %rax              # imm = 0x14E
	jne	.LBB11_478
# BB#281:                               # %lor.lhs.false2203
	movq	recog_data+16(%rip), %rcx
	movzbl	(%rcx), %ecx
	cmpq	$66, %rcx
	movq	%rdx, %r12
	movq	%rsi, %r13
	jne	.LBB11_478
	jmp	.LBB11_282
.LBB11_101:                             # %L2953
	cmpq	$4, %rax
	movq	%r15, %rdx
	jne	.LBB11_477
# BB#102:                               # %L11861
	movq	$4, %rsi
	movq	%r14, %rdi
	movq	%rdx, %r15
	callq	nonimmediate_operand
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#103:                               # %if.then820
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262227, %rax           # imm = 0x40053
	jne	.LBB11_477
# BB#104:                               # %L2955
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#105:                               # %L2956
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %rbx
	callq	rtx_equal_p
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#106:                               # %land.lhs.true850
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#107:                               # %land.lhs.true853
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$4, %rsi
	movq	%rdx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$294, %rax              # imm = 0x126
	jne	.LBB11_478
	jmp	.LBB11_477
.LBB11_262:                             # %L3560
	cmpq	$5, %rcx
	jne	.LBB11_260
# BB#263:                               # %L11868
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB11_282
# BB#264:                               # %if.then2050
	movq	%r14, recog_data(%rip)
	movq	16(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB11_282
# BB#265:                               # %L3575
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262229, %rax           # imm = 0x40055
	jne	.LBB11_282
# BB#266:                               # %L3576
	movq	8(%rbx), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r12, %rax
	je	.LBB11_282
# BB#267:                               # %L3577
	movq	16(%rbx), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r12, %rcx
	testq	%rcx, %rax
	je	.LBB11_277
# BB#268:                               # %land.lhs.true2149
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_277
# BB#269:                               # %land.lhs.true2152
	movq	$55, %rsi
	movq	%r13, %rdi
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%rcx, %rax
	je	.LBB11_277
# BB#270:                               # %land.lhs.true2155
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$4, %rsi
	movq	%rcx, %rbx
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	movq	%rbx, %rcx
	testq	%rcx, %rax
	movq	$332, %rax              # imm = 0x14C
	jne	.LBB11_478
.LBB11_277:                             # %if.end2033
	movq	%rcx, %r12
.LBB11_282:                             # %if.end1956
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_260:                             # %sw.epilog1913
	movq	8(%rax), %rax
	movq	16(%rax), %r14
	jmp	.LBB11_257
.LBB11_209:
	movq	%rdx, %r13
	jmp	.LBB11_210
.LBB11_234:                             # %L3742
	movq	%rdx, %r13
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r15
	movzbl	(%r15), %ecx
	cmpq	$47, %rcx
	jne	.LBB11_235
# BB#236:                               # %L3743
	movq	8(%r15), %r14
	movl	(%r14), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262277, %rcx           # imm = 0x40085
	jne	.LBB11_235
# BB#237:                               # %L3744
	movq	8(%r14), %r12
	xorq	%rsi, %rsi
	movq	%r12, %rdi
	callq	ext_register_operand
	testq	%r13, %rax
	je	.LBB11_253
# BB#238:                               # %if.then1498
	movq	%r12, recog_data(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_253
# BB#239:                               # %land.lhs.true1521
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_253
# BB#240:                               # %L3746
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_253
# BB#241:                               # %land.lhs.true1548
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_253
# BB#242:                               # %L3747
	movq	16(%r15), %r15
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262229, %rax           # imm = 0x40055
	jne	.LBB11_253
# BB#243:                               # %L3748
	movq	8(%r15), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB11_253
# BB#244:                               # %L3749
	movq	8(%r14), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	testq	%r13, %rax
	je	.LBB11_253
# BB#245:                               # %L3750
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_253
# BB#246:                               # %land.lhs.true1651
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_253
# BB#247:                               # %L3751
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_253
# BB#248:                               # %land.lhs.true1678
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_253
# BB#249:                               # %L3752
	movq	16(%r15), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	rtx_equal_p
	movq	%r13, %rcx
	testq	%rcx, %rax
	movq	%rbx, %r14
	je	.LBB11_252
# BB#250:                               # %land.lhs.true1705
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	jne	.LBB11_252
# BB#251:                               # %land.lhs.true1708
	movq	$55, %rsi
	movq	%r14, %rdi
	movq	%rcx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rcx
	testq	%rcx, %rax
	movq	$342, %rax              # imm = 0x156
	jne	.LBB11_478
.LBB11_252:                             # %if.end1712
	movq	%r14, %rbx
	movq	%rcx, %r13
.LBB11_253:                             # %if.end1500
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
.LBB11_235:                             # %if.end1451
	movq	8(%rax), %rax
	movq	16(%rax), %r14
.LBB11_233:                             # %L3762
	movq	8(%r14), %rax
	movq	16(%rax), %r15
.LBB11_210:                             # %L3762
	movq	$2, %rsi
	movq	%r15, %rdi
	callq	nonmemory_operand
	movq	%r13, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#211:                               # %if.then1420
	movq	%r15, recog_data+16(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#212:                               # %land.lhs.true1733
	cmpq	$0, 8(%rax)
	jne	.LBB11_477
# BB#213:                               # %L3764
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movq	16(%rax), %r13
	movzbl	(%r13), %eax
	cmpq	$47, %rax
	jne	.LBB11_477
# BB#214:                               # %L3765
	movq	8(%r13), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB11_477
# BB#215:                               # %L3766
	movq	8(%r14), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	movq	%rdx, %r12
	callq	ext_register_operand
	movq	%r12, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#216:                               # %if.then1768
	movq	%r15, recog_data(%rip)
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#217:                               # %land.lhs.true1777
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#218:                               # %L3768
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#219:                               # %land.lhs.true1790
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#220:                               # %L3769
	movq	16(%r13), %r12
	movl	(%r12), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262229, %rax           # imm = 0x40055
	jne	.LBB11_477
# BB#221:                               # %L3770
	movq	8(%r12), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262277, %rax           # imm = 0x40085
	jne	.LBB11_477
# BB#222:                               # %L3771
	movq	8(%r14), %rax
	movq	recog_data+8(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r15
	callq	rtx_equal_p
	movq	%r15, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#223:                               # %L3772
	movq	16(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#224:                               # %land.lhs.true1837
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#225:                               # %L3773
	movq	24(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB11_477
# BB#226:                               # %land.lhs.true1850
	movq	8(%rax), %rax
	cmpq	$8, %rax
	jne	.LBB11_477
# BB#227:                               # %L3774
	movq	16(%r12), %rax
	movq	recog_data+16(%rip), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	%rdx, %r14
	callq	rtx_equal_p
	movq	%r14, %rdx
	testq	%rdx, %rax
	je	.LBB11_477
# BB#228:                               # %land.lhs.true1863
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB11_477
# BB#229:                               # %land.lhs.true1866
	movq	$55, %rsi
	movq	%rbx, %rdi
	movq	%rdx, %rbx
	callq	ix86_match_ccmode
	movq	%rbx, %rdx
	testq	%rdx, %rax
	movq	$343, %rax              # imm = 0x157
	jne	.LBB11_478
.LBB11_477:                             # %ret0
	movq	%rdx, %rax
.LBB11_478:                             # %return
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp194:
	.size	recog_23, .Ltmp194-recog_23
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI11_0:
	.quad	.LBB11_2
	.quad	.LBB11_477
	.quad	.LBB11_2
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_2
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_16
	.quad	.LBB11_63
	.quad	.LBB11_45
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_477
	.quad	.LBB11_93
	.quad	.LBB11_141
	.quad	.LBB11_186
	.quad	.LBB11_283
	.quad	.LBB11_307
	.quad	.LBB11_477
	.quad	.LBB11_337
	.quad	.LBB11_401

	.text
	.align	16, 0x90
	.type	recog_5,@function
recog_5:                                # @recog_5
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp201:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp202:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp203:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp204:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp205:
	.cfi_def_cfa_offset 48
	subq	$32, %rsp
.Ltmp206:
	.cfi_def_cfa_offset 80
.Ltmp207:
	.cfi_offset %rbx, -48
.Ltmp208:
	.cfi_offset %r12, -40
.Ltmp209:
	.cfi_offset %r13, -32
.Ltmp210:
	.cfi_offset %r14, -24
.Ltmp211:
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movq	8(%r13), %rbx
	movq	%rsi, %r14
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	push_operand
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	testq	%r12, %rax
	je	.LBB12_3
# BB#1:                                 # %if.then
	movq	%rbx, recog_data(%rip)
	movq	16(%r13), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_no_elim_operand
	testq	%r12, %rax
	je	.LBB12_14
# BB#2:                                 # %if.then34
	movl	target_flags(%rip), %eax
	movq	$25, %rcx
	shrq	%cl, %rax
	andq	$1, %rax
	orq	$76, %rax
	movq	%rbx, recog_data+8(%rip)
	jmp	.LBB12_615
.LBB12_3:                               # %if.end
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	testq	%r15, %rax
	je	.LBB12_15
# BB#4:                                 # %if.then4
	movq	%rbx, recog_data(%rip)
	movq	16(%r13), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB12_55
# BB#5:                                 # %if.then55
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB12_54
# BB#6:                                 # %land.lhs.true
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_mov0(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB12_8
# BB#7:                                 # %land.lhs.true
	movq	%rdx, %rcx
.LBB12_8:                               # %land.lhs.true
	movl	optimize_size(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB12_10
# BB#9:                                 # %land.lhs.true
	movq	%rdx, %rax
.LBB12_10:                              # %land.lhs.true
	orq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB12_54
# BB#11:                                # %land.lhs.true
	movl	reload_completed(%rip), %eax
	testq	%r15, %rax
	je	.LBB12_54
# BB#12:                                # %land.lhs.true
	testq	%r14, %r14
	je	.LBB12_54
# BB#13:                                # %if.then75
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$81, %rax
	jmp	.LBB12_615
.LBB12_54:                              # %if.end76
	movq	16(%r13), %rbx
.LBB12_55:                              # %L563
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB12_14
# BB#56:                                # %if.then60
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB12_14
# BB#57:                                # %land.lhs.true82
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB12_59
# BB#58:                                # %land.lhs.true82
	movq	%rdx, %rcx
.LBB12_59:                              # %land.lhs.true82
	movl	optimize_size(%rip), %esi
	testq	%rsi, %rsi
	je	.LBB12_61
# BB#60:                                # %land.lhs.true82
	movq	%rdx, %rax
.LBB12_61:                              # %land.lhs.true82
	orq	%rax, %rcx
	je	.LBB12_14
# BB#62:                                # %land.lhs.true82
	movl	reload_completed(%rip), %eax
	testq	%r15, %rax
	je	.LBB12_14
# BB#63:                                # %land.lhs.true88
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB12_14
# BB#64:                                # %land.lhs.true93
	movq	8(%rbx), %rax
	cmpq	$-1, %rax
	jne	.LBB12_14
# BB#65:                                # %land.lhs.true93
	testq	%r14, %r14
	je	.LBB12_14
# BB#66:                                # %if.then100
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$82, %rax
	jmp	.LBB12_615
.LBB12_14:                              # %if.end36
	movq	8(%r13), %rbx
.LBB12_15:                              # %L10864
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_25
# BB#16:                                # %if.then9
	movq	%rbx, recog_data(%rip)
	movq	16(%r13), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB12_17
# BB#67:                                # %L11038
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$119, %rax
	jg	.LBB12_76
# BB#68:                                # %L11038
	cmpq	$75, %rax
	jne	.LBB12_17
# BB#69:                                # %L1209
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB12_17
# BB#70:                                # %L11043
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$75, %rax
	jne	.LBB12_71
# BB#104:                               # %L1228
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327791, %rcx           # imm = 0x5006F
	jne	.LBB12_17
# BB#105:                               # %L1229
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB12_17
# BB#106:                               # %land.lhs.true270
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB12_17
# BB#107:                               # %L1230
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_17
# BB#108:                               # %land.lhs.true282
	cmpq	$0, 8(%rax)
	jne	.LBB12_17
# BB#109:                               # %L1231
	movq	16(%r15), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_17
# BB#110:                               # %if.then294
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	x86_64_general_operand
	testq	%r12, %rax
	je	.LBB12_17
# BB#111:                               # %if.then302
	movzbl	target_flags+3(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_115
# BB#112:                               # %land.lhs.true307
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_115
# BB#113:                               # %land.lhs.true307
	testq	%r14, %r14
	je	.LBB12_115
# BB#114:                               # %if.then312
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$186, %rax
	jmp	.LBB12_615
.LBB12_76:                              # %L11038
	cmpq	$120, %rax
	je	.LBB12_85
# BB#77:                                # %L11038
	cmpq	$126, %rax
	jne	.LBB12_78
# BB#90:                                # %L975
	movq	8(%rbx), %r15
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_17
# BB#91:                                # %if.then169
	movl	target_flags(%rip), %edx
	movq	%r15, recog_data+8(%rip)
	testq	$1, %rdx
	je	.LBB12_103
# BB#92:                                # %land.lhs.true174
	movl	(%r15), %eax
	movq	$14, %rcx
	movq	%rax, %rsi
	shrq	%cl, %rsi
	andq	$1020, %rsi             # imm = 0x3FC
	movl	mode_class(%rsi), %ecx
	movq	%rcx, %rsi
	orq	$4, %rsi
	andq	%r12, %rsi
	cmpq	$6, %rsi
	jne	.LBB12_93
# BB#96:                                # %land.lhs.true197
	movl	reload_completed(%rip), %ecx
	movl	reload_in_progress(%rip), %esi
	orq	%rcx, %rsi
	testq	%r12, %rsi
	jne	.LBB12_103
	jmp	.LBB12_97
.LBB12_85:                              # %L793
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_17
# BB#86:                                # %if.then152
	movl	target_flags(%rip), %eax
	movq	%r15, recog_data+8(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB12_89
# BB#87:                                # %if.then152
	testq	%r14, %r14
	je	.LBB12_89
# BB#88:                                # %if.then159
	movq	$2, %rax
	movl	%eax, (%r14)
	movq	$119, %rax
	jmp	.LBB12_615
.LBB12_78:                              # %L11038
	cmpq	$121, %rax
	jne	.LBB12_17
# BB#79:                                # %L763
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_17
# BB#80:                                # %if.then131
	movl	target_flags(%rip), %ecx
	movq	%r15, recog_data+8(%rip)
	andq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB12_83
# BB#81:                                # %if.then131
	testq	%r14, %r14
	je	.LBB12_83
# BB#82:                                # %if.then138
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$115, %rax
	jmp	.LBB12_615
.LBB12_71:                              # %if.end240
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_17
# BB#72:                                # %if.then243
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_17
# BB#73:                                # %if.then322
	movl	target_flags(%rip), %eax
	movq	%r15, recog_data+16(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB12_115
# BB#74:                                # %if.then322
	testq	%r14, %r14
	je	.LBB12_115
# BB#75:                                # %if.then329
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$185, %rax
	jmp	.LBB12_615
.LBB12_89:                              # %if.end160
	movq	16(%r13), %rbx
	jmp	.LBB12_17
.LBB12_83:                              # %L769
	movq	$116, %rax
	testq	%r12, %rcx
	jne	.LBB12_615
# BB#84:                                # %if.end143
	movq	16(%r13), %rbx
	jmp	.LBB12_17
.LBB12_93:                              # %lor.lhs.false189
	andq	%r12, %rcx
	cmpq	$8, %rcx
	jne	.LBB12_103
# BB#94:                                # %lor.lhs.false189
	movl	reload_completed(%rip), %ecx
	testq	%r12, %rcx
	jne	.LBB12_103
# BB#95:                                # %lor.lhs.false189
	movl	reload_in_progress(%rip), %ecx
	testq	%r12, %rcx
	jne	.LBB12_103
.LBB12_97:                              # %land.lhs.true201
	andq	$16711680, %rax         # imm = 0xFF0000
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB12_99
# BB#98:                                # %land.lhs.true201
	movq	%rax, %rcx
	andq	%r12, %rcx
	cmpq	$983040, %rcx           # imm = 0xF0000
	jne	.LBB12_99
# BB#102:                               # %lor.lhs.false219
	testq	$33554432, %rdx         # imm = 0x2000000
	movq	$152, %rax
	jne	.LBB12_103
	jmp	.LBB12_615
.LBB12_99:                              # %lor.lhs.false210
	cmpq	$1048576, %rax          # imm = 0x100000
	movq	$152, %rax
	jne	.LBB12_615
# BB#100:                               # %lor.lhs.false210
	movq	%rdx, %rcx
	andq	$262144, %rcx           # imm = 0x40000
	testq	%r12, %rcx
	je	.LBB12_615
# BB#101:                               # %lor.lhs.false210
	andq	$33554432, %rdx         # imm = 0x2000000
	testq	%r12, %rdx
	je	.LBB12_615
.LBB12_103:                             # %if.end223
	movq	16(%r13), %rbx
.LBB12_17:                              # %L567
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_24
# BB#18:                                # %if.then115
	movl	target_flags(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	andq	$33554432, %rcx         # imm = 0x2000000
	jne	.LBB12_22
# BB#19:                                # %land.lhs.true336
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$83, %rax
	jne	.LBB12_615
# BB#20:                                # %lor.lhs.false341
	movzbl	(%rbx), %edx
	cmpq	$66, %rdx
	jne	.LBB12_615
# BB#21:                                # %L572
	testq	%r12, %rcx
	je	.LBB12_24
.LBB12_22:                              # %land.lhs.true350
	movq	recog_data(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$84, %rax
	jne	.LBB12_615
# BB#23:                                # %lor.lhs.false355
	movzbl	(%rbx), %ecx
	cmpq	$66, %rcx
	jne	.LBB12_615
.LBB12_24:                              # %if.end117
	movq	8(%r13), %rbx
.LBB12_25:                              # %L10865
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	jne	.LBB12_26
# BB#116:                               # %L575
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	x86_64_movabs_operand
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	testq	%r14, %rax
	je	.LBB12_33
# BB#117:                               # %if.then370
	movq	%r15, recog_data(%rip)
	movq	16(%r13), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r14, %rax
	je	.LBB12_32
# BB#118:                               # %if.then378
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$85, %rax
	testq	$2, %rcx
	jne	.LBB12_615
	jmp	.LBB12_32
.LBB12_26:                              # %if.end13
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_33
# BB#27:                                # %if.then16
	movq	%rbx, recog_data(%rip)
	movq	16(%r13), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB12_28
# BB#119:                               # %L11044
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$83, %rax
	jg	.LBB12_123
# BB#120:                               # %L11044
	cmpq	$66, %rax
	jne	.LBB12_28
# BB#121:                               # %L581.i
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_movabs_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#122:                               # %if.then.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$86, %rax
.LBB12_193:                             # %if.then226.i
	testq	$2, %rcx
	jne	.LBB12_615
	jmp	.LBB12_28
.LBB12_123:                             # %L11044
	cmpq	$119, %rax
	jg	.LBB12_138
# BB#124:                               # %L11044
	cmpq	$84, %rax
	je	.LBB12_316
# BB#125:                               # %L11044
	cmpq	$85, %rax
	jne	.LBB12_126
# BB#322:                               # %L3547.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB12_28
# BB#323:                               # %L3548.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#324:                               # %if.then948.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_zext_immediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#325:                               # %if.then956.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#326:                               # %land.lhs.true961.i
	movabsq	$recog_data, %rdx
	movq	$85, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#327:                               # %land.lhs.true961.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#328:                               # %if.then966.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$330, %rax              # imm = 0x14A
	jmp	.LBB12_615
.LBB12_138:                             # %L11044
	addq	$-120, %rax
	andq	%r12, %rax
	cmpq	$6, %rax
	ja	.LBB12_28
# BB#139:                               # %L11044
	jmpq	*.LJTI12_0(,%rax,8)
.LBB12_275:                             # %L798.i
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$2, %rax
	je	.LBB12_282
# BB#276:                               # %L798.i
	cmpq	$3, %rax
	jne	.LBB12_277
# BB#280:                               # %L11076.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#281:                               # %if.then690.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$121, %rax
	jmp	.LBB12_193
.LBB12_316:                             # %L3277.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB12_28
# BB#317:                               # %L3278.i
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#318:                               # %if.then913.i
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_zext_immediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#319:                               # %if.then921.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB12_28
# BB#320:                               # %if.then921.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#321:                               # %if.then928.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$312, %rax              # imm = 0x138
	jmp	.LBB12_615
.LBB12_126:                             # %L11044
	cmpq	$90, %rax
	jne	.LBB12_28
# BB#127:                               # %L3836.i
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327757, %rcx           # imm = 0x5004D
	jne	.LBB12_28
# BB#128:                               # %L3837.i
	movq	8(%rax), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327767, %rax           # imm = 0x50057
	jne	.LBB12_28
# BB#129:                               # %L3838.i
	movq	8(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#130:                               # %if.then999.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_28
# BB#131:                               # %land.lhs.true1008.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB12_28
# BB#132:                               # %L3840.i
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_28
# BB#133:                               # %land.lhs.true1021.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB12_28
# BB#134:                               # %land.lhs.true1026.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB12_28
# BB#135:                               # %land.lhs.true1029.i
	movabsq	$recog_data, %rax
	movq	$77, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#136:                               # %land.lhs.true1029.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#137:                               # %if.then1034.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$348, %rax              # imm = 0x15C
	jmp	.LBB12_615
.LBB12_115:                             # %if.end330
	movq	16(%r13), %rbx
	jmp	.LBB12_17
.LBB12_140:                             # %L773.i
	movq	8(%r15), %rbx
	movl	(%rbx), %eax
	movq	$16, %rcx
	movq	%rax, %rdx
	shrq	%cl, %rdx
	andq	$255, %rdx
	cmpq	$2, %rdx
	je	.LBB12_145
# BB#141:                               # %L773.i
	cmpq	$4, %rdx
	jne	.LBB12_142
# BB#147:                               # %L11054.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$119, %rax
	jg	.LBB12_155
# BB#148:                               # %L11054.i
	cmpq	$74, %rax
	jg	.LBB12_153
# BB#149:                               # %L11054.i
	cmpq	$63, %rax
	jne	.LBB12_28
# BB#150:                               # %L11064.i
	movl	16(%rbx), %eax
	testq	%rax, %rax
	jne	.LBB12_28
# BB#151:                               # %L1326.i
	movq	8(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	address_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#152:                               # %if.then289.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$194, %rax
	jmp	.LBB12_193
.LBB12_291:                             # %L2323.i
	movq	8(%r15), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$393306, %rax           # imm = 0x6005A
	jne	.LBB12_28
# BB#292:                               # %L2324.i
	movq	8(%rbx), %r14
	movl	(%r14), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$393294, %rax           # imm = 0x6004E
	jne	.LBB12_28
# BB#293:                               # %L2325.i
	movq	8(%r14), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$393216, %rdx           # imm = 0x60000
	jne	.LBB12_28
# BB#294:                               # %L11080.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	jne	.LBB12_295
# BB#306:                               # %L2403.i
	movq	8(%rax), %rdi
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	$5, %rsi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#307:                               # %if.then843.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393336, %rcx           # imm = 0x60078
	jne	.LBB12_28
# BB#308:                               # %L2405.i
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#309:                               # %if.then864.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_28
# BB#310:                               # %land.lhs.true873.i
	movq	8(%rax), %rax
	cmpq	$64, %rax
	jne	.LBB12_28
# BB#311:                               # %land.lhs.true878.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB12_28
# BB#312:                               # %land.lhs.true881.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB12_314
# BB#313:                               # %lor.lhs.false886.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	je	.LBB12_28
.LBB12_314:                             # %land.lhs.true891.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#315:                               # %if.then893.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$263, %rax              # imm = 0x107
	jmp	.LBB12_615
.LBB12_284:                             # %L1028.i
	movq	8(%r15), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$16, %rax
	jne	.LBB12_285
# BB#289:                               # %L11079.i
	movq	$16, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#290:                               # %if.then730.i
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	andq	$33816576, %rax         # imm = 0x2040000
	cmpq	$33816576, %rax         # imm = 0x2040000
	movq	$156, %rax
	je	.LBB12_615
	jmp	.LBB12_28
.LBB12_285:                             # %L1028.i
	cmpq	$15, %rax
	jne	.LBB12_28
# BB#286:                               # %L11078.i
	movq	$15, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#287:                               # %if.then718.i
	movl	target_flags(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	testq	$33554432, %rcx         # imm = 0x2000000
	je	.LBB12_28
# BB#288:                               # %if.then718.i
	andq	$327680, %rcx           # imm = 0x50000
	movq	$155, %rax
	testq	%r12, %rcx
	jne	.LBB12_615
	jmp	.LBB12_28
.LBB12_282:                             # %L11077.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#283:                               # %if.then699.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$122, %rax
	jmp	.LBB12_193
.LBB12_277:                             # %L798.i
	cmpq	$4, %rax
	jne	.LBB12_28
# BB#278:                               # %L11075.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#279:                               # %if.then681.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$120, %rax
	jmp	.LBB12_193
.LBB12_145:                             # %L11053.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#146:                               # %if.then36.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$118, %rax
	jmp	.LBB12_193
.LBB12_142:                             # %L773.i
	cmpq	$3, %rdx
	jne	.LBB12_28
# BB#143:                               # %L11052.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#144:                               # %if.then27.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$117, %rax
	jmp	.LBB12_193
.LBB12_155:                             # %L11054.i
	cmpq	$122, %rax
	jne	.LBB12_156
# BB#229:                               # %L2375.i
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327770, %rax           # imm = 0x5005A
	jne	.LBB12_28
# BB#230:                               # %L2376.i
	movq	8(%rbx), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movl	(%rax), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327758, %rax           # imm = 0x5004E
	jne	.LBB12_28
# BB#231:                               # %L2377.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	movq	%rcx, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	cmpq	$327680, %rdx           # imm = 0x50000
	jne	.LBB12_28
# BB#232:                               # %L11073.i
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$120, %rcx
	jne	.LBB12_233
# BB#244:                               # %L2455.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#245:                               # %if.then526.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327800, %rcx           # imm = 0x50078
	jne	.LBB12_28
# BB#246:                               # %L2457.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#247:                               # %if.then547.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_28
# BB#248:                               # %land.lhs.true556.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB12_28
# BB#249:                               # %land.lhs.true561.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB12_28
# BB#250:                               # %land.lhs.true564.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB12_252
# BB#251:                               # %lor.lhs.false569.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	je	.LBB12_28
.LBB12_252:                             # %land.lhs.true574.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#253:                               # %if.then576.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$265, %rax              # imm = 0x109
	jmp	.LBB12_615
.LBB12_153:                             # %L11054.i
	addq	$-75, %rax
	andq	%r12, %rax
	cmpq	$11, %rax
	ja	.LBB12_28
# BB#154:                               # %L11054.i
	jmpq	*.LJTI12_1(,%rax,8)
.LBB12_163:                             # %L1284.i
	movq	8(%rbx), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB12_28
# BB#164:                               # %L11067.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$74, %rax
	jg	.LBB12_173
# BB#165:                               # %L11067.i
	addq	$-61, %rax
	andq	%r12, %rax
	cmpq	$5, %rax
	ja	.LBB12_28
# BB#166:                               # %L11067.i
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$37, %rdx
	je	.LBB12_28
# BB#167:                               # %L11069.i
	movq	$4, %rsi
	movq	16(%rsp), %rdi          # 8-byte Reload
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#168:                               # %if.then101.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#169:                               # %if.then266.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#170:                               # %land.lhs.true271.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#171:                               # %land.lhs.true271.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#172:                               # %if.then276.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$208, %rax
	jmp	.LBB12_615
.LBB12_295:                             # %L11080.i
	cmpq	$121, %rcx
	jne	.LBB12_28
# BB#296:                               # %L2326.i
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#297:                               # %if.then786.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%r14), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$393337, %rcx           # imm = 0x60079
	jne	.LBB12_28
# BB#298:                               # %L2328.i
	movq	8(%rax), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#299:                               # %if.then807.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_28
# BB#300:                               # %land.lhs.true816.i
	movq	8(%rax), %rax
	cmpq	$64, %rax
	jne	.LBB12_28
# BB#301:                               # %land.lhs.true821.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB12_28
# BB#302:                               # %land.lhs.true824.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB12_304
# BB#303:                               # %lor.lhs.false829.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	je	.LBB12_28
.LBB12_304:                             # %land.lhs.true834.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#305:                               # %if.then836.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$260, %rax              # imm = 0x104
	jmp	.LBB12_615
.LBB12_156:                             # %L11054.i
	cmpq	$120, %rax
	jne	.LBB12_28
# BB#157:                               # %L818.i
	movq	8(%rbx), %rbx
	movzbl	2(%rbx), %eax
	cmpq	$2, %rax
	jne	.LBB12_158
# BB#161:                               # %L11066.i
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#162:                               # %if.then78.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$127, %rax
	jmp	.LBB12_193
.LBB12_233:                             # %L11073.i
	cmpq	$121, %rcx
	jne	.LBB12_28
# BB#234:                               # %L2378.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#235:                               # %if.then469.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB12_28
# BB#236:                               # %L2380.i
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#237:                               # %if.then490.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_28
# BB#238:                               # %land.lhs.true499.i
	movq	8(%rax), %rax
	cmpq	$32, %rax
	jne	.LBB12_28
# BB#239:                               # %land.lhs.true504.i
	movzbl	target_flags+3(%rip), %eax
	testq	$2, %rax
	je	.LBB12_28
# BB#240:                               # %land.lhs.true507.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB12_242
# BB#241:                               # %lor.lhs.false512.i
	movzbl	(%r14), %eax
	cmpq	$66, %rax
	je	.LBB12_28
.LBB12_242:                             # %land.lhs.true517.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#243:                               # %if.then519.i
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$262, %rax              # imm = 0x106
	jmp	.LBB12_615
.LBB12_205:                             # %L1962.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#206:                               # %if.then301.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$262219, %rax           # imm = 0x4004B
	jne	.LBB12_207
# BB#212:                               # %L1964.i
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$262255, %rcx           # imm = 0x4006F
	jne	.LBB12_28
# BB#213:                               # %L1965.i
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB12_28
# BB#214:                               # %land.lhs.true346.i
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB12_28
# BB#215:                               # %L1966.i
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_28
# BB#216:                               # %land.lhs.true359.i
	cmpq	$0, 8(%rax)
	jne	.LBB12_28
# BB#217:                               # %L1967.i
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#218:                               # %if.then371.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#219:                               # %land.lhs.true376.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#220:                               # %land.lhs.true376.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#221:                               # %if.then381.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$236, %rax
	jmp	.LBB12_615
.LBB12_222:                             # %L2166.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#223:                               # %if.then397.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#224:                               # %if.then405.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#225:                               # %land.lhs.true410.i
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB12_227
# BB#226:                               # %lor.lhs.false.i
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB12_28
.LBB12_227:                             # %land.lhs.true419.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#228:                               # %if.then421.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$251, %rax
	jmp	.LBB12_615
.LBB12_254:                             # %L2941.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#255:                               # %if.then583.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#256:                               # %if.then591.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#257:                               # %land.lhs.true596.i
	movabsq	$recog_data, %rax
	movq	$83, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#258:                               # %land.lhs.true596.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#259:                               # %if.then601.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$293, %rax              # imm = 0x125
	jmp	.LBB12_615
.LBB12_260:                             # %L3262.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#261:                               # %if.then608.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#262:                               # %if.then616.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#263:                               # %land.lhs.true621.i
	movabsq	$recog_data, %rax
	movq	$84, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#264:                               # %land.lhs.true621.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#265:                               # %if.then626.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$311, %rax              # imm = 0x137
	jmp	.LBB12_615
.LBB12_266:                             # %L3532.i
	movq	8(%rbx), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#267:                               # %if.then633.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#268:                               # %if.then641.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#269:                               # %land.lhs.true646.i
	movabsq	$recog_data, %rax
	movq	$85, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#270:                               # %land.lhs.true646.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#271:                               # %if.then651.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$329, %rax              # imm = 0x149
	jmp	.LBB12_615
.LBB12_272:                             # %L4312.i
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#273:                               # %if.then658.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#274:                               # %land.lhs.true663.i
	movabsq	$recog_data, %rax
	movq	$86, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_unary_operator_ok
	testq	%r12, %rax
	movq	$396, %rax              # imm = 0x18C
	jne	.LBB12_615
	jmp	.LBB12_28
.LBB12_173:                             # %L11067.i
	cmpq	$75, %rax
	jne	.LBB12_174
# BB#179:                               # %L1285.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	(%rax), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB12_28
# BB#180:                               # %L11070.i
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$110, %rax
	jg	.LBB12_194
# BB#181:                               # %L11070.i
	cmpq	$61, %rax
	je	.LBB12_189
# BB#182:                               # %L11070.i
	cmpq	$63, %rax
	jne	.LBB12_183
.LBB12_189:                             # %L11071.i
	movq	$4, %rsi
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#190:                               # %if.then121.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	%rax, recog_data+8(%rip)
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#191:                               # %if.then218.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#192:                               # %if.then226.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+24(%rip)
	movq	$197, %rax
	jmp	.LBB12_193
.LBB12_158:                             # %L818.i
	cmpq	$3, %rax
	jne	.LBB12_28
# BB#159:                               # %L11065.i
	movq	$3, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#160:                               # %if.then69.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+8(%rip)
	movq	$124, %rax
	jmp	.LBB12_193
.LBB12_207:                             # %if.end316.i
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#208:                               # %if.then319.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#209:                               # %land.lhs.true385.i
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#210:                               # %land.lhs.true385.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#211:                               # %if.then390.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$238, %rax
	jmp	.LBB12_615
.LBB12_174:                             # %L11067.i
	cmpq	$78, %rax
	jne	.LBB12_28
# BB#175:                               # %L1362.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#176:                               # %if.then238.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	const248_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#177:                               # %if.then246.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#178:                               # %if.then254.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+24(%rip)
	movq	$199, %rax
	jmp	.LBB12_193
.LBB12_194:                             # %L11070.i
	cmpq	$111, %rax
	jne	.LBB12_28
# BB#195:                               # %L1286.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB12_28
# BB#196:                               # %land.lhs.true134.i
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB12_28
# BB#197:                               # %L1287.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_28
# BB#198:                               # %land.lhs.true146.i
	cmpq	$0, 8(%rax)
	jne	.LBB12_28
# BB#199:                               # %L1288.i
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#200:                               # %if.then157.i
	movq	%r14, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#201:                               # %if.then165.i
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_28
# BB#202:                               # %land.lhs.true170.i
	movabsq	$recog_data, %rax
	movq	$75, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_28
# BB#203:                               # %land.lhs.true170.i
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_28
# BB#204:                               # %if.then175.i
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$189, %rax
	jmp	.LBB12_615
.LBB12_183:                             # %L11070.i
	cmpq	$78, %rax
	jne	.LBB12_28
# BB#184:                               # %L1382.i
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#185:                               # %if.then182.i
	movq	%r14, recog_data+8(%rip)
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	16(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	const248_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#186:                               # %if.then190.i
	movq	%r14, recog_data+16(%rip)
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	16(%rax), %r14
	movq	$4, %rsi
	movq	%r14, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#187:                               # %if.then198.i
	movq	%r14, recog_data+24(%rip)
	movq	16(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	immediate_operand
	testq	%r12, %rax
	je	.LBB12_28
# BB#188:                               # %if.then206.i
	movzbl	target_flags+3(%rip), %ecx
	movq	%rbx, recog_data+32(%rip)
	movq	$201, %rax
	jmp	.LBB12_193
.LBB12_28:                              # %L1330
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	address_operand
	testq	%r12, %rax
	je	.LBB12_31
# BB#29:                                # %if.then402
	movzbl	target_flags+3(%rip), %ecx
	movq	%r15, recog_data+8(%rip)
	movq	$195, %rax
	testq	$2, %rcx
	jne	.LBB12_615
# BB#30:                                # %if.end425
	movq	16(%r13), %r15
.LBB12_31:                              # %L2135
	movl	(%r15), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327758, %rax           # imm = 0x5004E
	jne	.LBB12_32
# BB#329:                               # %L2136
	movq	8(%r15), %rbx
	movl	(%rbx), %ecx
	movq	%rcx, %rax
	andq	$16711680, %rax         # imm = 0xFF0000
	cmpq	$327680, %rax           # imm = 0x50000
	jne	.LBB12_32
# BB#330:                               # %L11083
	andq	$65535, %rcx            # imm = 0xFFFF
	cmpq	$119, %rcx
	jg	.LBB12_340
# BB#331:                               # %L11083
	addq	$-61, %rcx
	andq	%r12, %rcx
	cmpq	$5, %rcx
	ja	.LBB12_32
# BB#332:                               # %L11083
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$37, %rax
	je	.LBB12_32
# BB#333:                               # %L11082
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_32
# BB#334:                               # %if.then452
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r12, %rax
	je	.LBB12_32
# BB#335:                               # %if.then577
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB12_32
# BB#336:                               # %land.lhs.true585
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB12_338
# BB#337:                               # %lor.lhs.false590
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB12_32
.LBB12_338:                             # %land.lhs.true595
	testq	%rcx, %rcx
	je	.LBB12_32
# BB#339:                               # %if.then597
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$249, %rax
	jmp	.LBB12_615
.LBB12_340:                             # %L11083
	cmpq	$120, %rcx
	jne	.LBB12_341
# BB#350:                               # %L2301
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_32
# BB#351:                               # %if.then520
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327800, %rcx           # imm = 0x50078
	jne	.LBB12_32
# BB#352:                               # %L2303
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	je	.LBB12_32
# BB#353:                               # %if.then547
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	jne	.LBB12_32
# BB#354:                               # %land.lhs.true555
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB12_356
# BB#355:                               # %lor.lhs.false560
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB12_32
.LBB12_356:                             # %land.lhs.true565
	testq	%rcx, %rcx
	je	.LBB12_32
# BB#357:                               # %if.then567
	movq	$1, %rax
	movl	%eax, (%rcx)
	movq	$259, %rax              # imm = 0x103
	jmp	.LBB12_615
.LBB12_341:                             # %L11083
	cmpq	$121, %rcx
	jne	.LBB12_32
# BB#342:                               # %L2265
	movq	8(%rbx), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_32
# BB#343:                               # %if.then463
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327801, %rcx           # imm = 0x50079
	jne	.LBB12_32
# BB#344:                               # %L2267
	movq	8(%rax), %rbx
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_32
# BB#345:                               # %if.then490
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	jne	.LBB12_32
# BB#346:                               # %land.lhs.true498
	movq	recog_data+8(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	jne	.LBB12_348
# BB#347:                               # %lor.lhs.false503
	movzbl	(%rbx), %eax
	cmpq	$66, %rax
	je	.LBB12_32
.LBB12_348:                             # %land.lhs.true508
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_32
# BB#349:                               # %if.then510
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$257, %rax              # imm = 0x101
	jmp	.LBB12_615
.LBB12_32:                              # %if.end454
	movq	8(%r13), %rbx
.LBB12_33:                              # %L10883
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_36
# BB#34:                                # %if.then21
	movq	%rbx, recog_data(%rip)
	movq	16(%r13), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB12_35
# BB#358:                               # %L11085
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-75, %rax
	andq	%r12, %rax
	cmpq	$16, %rax
	ja	.LBB12_35
# BB#359:                               # %L11085
	jmpq	*.LJTI12_2(,%rax,8)
.LBB12_360:                             # %L1398
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#361:                               # %if.then638
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#362:                               # %if.then649
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_35
# BB#363:                               # %land.lhs.true657
	movabsq	$recog_data, %rdx
	movq	$75, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_35
# BB#364:                               # %land.lhs.true657
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_35
# BB#365:                               # %if.then662
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$202, %rax
	jmp	.LBB12_615
.LBB12_366:                             # %L1860
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#367:                               # %if.then672
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movl	(%rbx), %eax
	andq	$16777215, %rax         # imm = 0xFFFFFF
	cmpq	$327755, %rax           # imm = 0x5004B
	jne	.LBB12_368
# BB#378:                               # %L1880
	movq	8(%rbx), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$327791, %rcx           # imm = 0x5006F
	jne	.LBB12_35
# BB#379:                               # %L1881
	movq	8(%rax), %rcx
	movl	(%rcx), %edx
	andq	$16777215, %rdx         # imm = 0xFFFFFF
	cmpq	$3407933, %rdx          # imm = 0x34003D
	jne	.LBB12_35
# BB#380:                               # %land.lhs.true731
	movl	8(%rcx), %ecx
	cmpq	$17, %rcx
	jne	.LBB12_35
# BB#381:                               # %L1882
	movq	16(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_35
# BB#382:                               # %land.lhs.true747
	cmpq	$0, 8(%rax)
	jne	.LBB12_35
# BB#383:                               # %L1883
	movq	16(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#384:                               # %if.then762
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_35
# BB#385:                               # %land.lhs.true770
	movabsq	$recog_data, %rax
	movq	$76, %rdi
	movq	$5, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_35
# BB#386:                               # %land.lhs.true770
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_35
# BB#387:                               # %if.then775
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$231, %rax
	jmp	.LBB12_615
.LBB12_407:                             # %L3785
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_408
# BB#414:                               # %if.then911
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	movq	24(%rsp), %r14          # 8-byte Reload
	jne	.LBB12_418
# BB#415:                               # %land.lhs.true924
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$5, %rsi
	callq	ix86_unary_operator_ok
	testq	%r12, %rax
	je	.LBB12_418
# BB#416:                               # %land.lhs.true924
	testq	%r14, %r14
	je	.LBB12_418
# BB#417:                               # %if.then929
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$344, %rax              # imm = 0x158
	jmp	.LBB12_615
.LBB12_389:                             # %L2898
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#390:                               # %if.then809
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_szext_general_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#391:                               # %if.then820
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_35
# BB#392:                               # %land.lhs.true828
	movabsq	$recog_data, %rdx
	movq	$83, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_35
# BB#393:                               # %land.lhs.true828
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_35
# BB#394:                               # %if.then833
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$290, %rax              # imm = 0x122
	jmp	.LBB12_615
.LBB12_395:                             # %L3201
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#396:                               # %if.then843
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#397:                               # %if.then854
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_35
# BB#398:                               # %land.lhs.true862
	movabsq	$recog_data, %rdx
	movq	$84, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_35
# BB#399:                               # %land.lhs.true862
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_35
# BB#400:                               # %if.then867
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$307, %rax              # imm = 0x133
	jmp	.LBB12_615
.LBB12_401:                             # %L3471
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#402:                               # %if.then877
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#403:                               # %if.then888
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_35
# BB#404:                               # %land.lhs.true896
	movabsq	$recog_data, %rdx
	movq	$85, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_35
# BB#405:                               # %land.lhs.true896
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_35
# BB#406:                               # %if.then901
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$325, %rax              # imm = 0x145
	jmp	.LBB12_615
.LBB12_419:                             # %L4290
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#420:                               # %if.then954
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB12_35
# BB#421:                               # %land.lhs.true962
	movabsq	$recog_data, %rdx
	movq	$86, %rdi
	movq	$5, %rsi
	callq	ix86_unary_operator_ok
	testq	%r12, %rax
	movq	$393, %rax              # imm = 0x189
	jne	.LBB12_615
	jmp	.LBB12_35
.LBB12_422:                             # %L4380
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#423:                               # %if.then975
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#424:                               # %if.then986
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_35
# BB#425:                               # %land.lhs.true994
	movabsq	$recog_data, %rdx
	movq	$87, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_35
# BB#426:                               # %land.lhs.true994
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_35
# BB#427:                               # %if.then999
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$403, %rax              # imm = 0x193
	jmp	.LBB12_615
.LBB12_466:                             # %L5282
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#467:                               # %if.then1162
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r12, %rax
	je	.LBB12_468
# BB#478:                               # %if.then1173
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	movq	24(%rsp), %r14          # 8-byte Reload
	je	.LBB12_479
# BB#474:                               # %land.lhs.true1186
	movabsq	$recog_data, %rdx
	movq	$88, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_479
# BB#475:                               # %land.lhs.true1189
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_479
# BB#476:                               # %land.lhs.true1189
	testq	%r14, %r14
	je	.LBB12_479
# BB#477:                               # %if.then1195
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$466, %rax              # imm = 0x1D2
	jmp	.LBB12_615
.LBB12_428:                             # %L4601
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#429:                               # %if.then1009
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB12_430
# BB#436:                               # %L11097
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB12_437
# BB#449:                               # %if.then1033
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	movq	24(%rsp), %r14          # 8-byte Reload
	je	.LBB12_450
# BB#444:                               # %land.lhs.true1043
	movq	8(%rbx), %rax
	cmpq	$63, %rax
	jne	.LBB12_450
# BB#445:                               # %land.lhs.true1049
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_cltd(%rip), %eax
	movl	optimize_size(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdx
	testq	%r12, %rdx
	je	.LBB12_450
# BB#446:                               # %land.lhs.true1055
	movabsq	$recog_data, %rdx
	movq	$89, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_450
# BB#447:                               # %land.lhs.true1055
	testq	%r14, %r14
	je	.LBB12_450
# BB#448:                               # %if.then1060
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$418, %rax              # imm = 0x1A2
	jmp	.LBB12_615
.LBB12_452:                             # %L4976
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#453:                               # %if.then1104
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r12, %rax
	je	.LBB12_454
# BB#464:                               # %if.then1115
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	movq	24(%rsp), %r14          # 8-byte Reload
	je	.LBB12_465
# BB#460:                               # %land.lhs.true1128
	movabsq	$recog_data, %rdx
	movq	$90, %rdi
	movq	$3, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_465
# BB#461:                               # %land.lhs.true1131
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_465
# BB#462:                               # %land.lhs.true1131
	testq	%r14, %r14
	je	.LBB12_465
# BB#463:                               # %if.then1137
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$444, %rax              # imm = 0x1BC
	jmp	.LBB12_615
.LBB12_480:                             # %L5426
	movq	8(%r15), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_35
# BB#481:                               # %if.then1220
	movq	%rbx, recog_data+8(%rip)
	movq	16(%r15), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r12, %rax
	je	.LBB12_482
# BB#492:                               # %if.then1231
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	movq	24(%rsp), %r14          # 8-byte Reload
	je	.LBB12_493
# BB#488:                               # %land.lhs.true1244
	movabsq	$recog_data, %rdx
	movq	$91, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_493
# BB#489:                               # %land.lhs.true1247
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_493
# BB#490:                               # %land.lhs.true1247
	testq	%r14, %r14
	je	.LBB12_493
# BB#491:                               # %if.then1253
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$476, %rax              # imm = 0x1DC
	jmp	.LBB12_615
.LBB12_418:                             # %if.end930
	movq	16(%r13), %rax
	movq	8(%rax), %rbx
	jmp	.LBB12_409
.LBB12_408:
	movq	24(%rsp), %r14          # 8-byte Reload
.LBB12_409:                             # %L3797
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_494
# BB#410:                               # %if.then916
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+8(%rip)
	testq	$2, %rax
	je	.LBB12_494
# BB#411:                               # %land.lhs.true939
	movabsq	$recog_data, %rdx
	movq	$77, %rdi
	movq	$5, %rsi
	callq	ix86_unary_operator_ok
	testq	%r12, %rax
	je	.LBB12_494
# BB#412:                               # %land.lhs.true939
	testq	%r14, %r14
	je	.LBB12_494
# BB#413:                               # %if.then944
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$345, %rax              # imm = 0x159
	jmp	.LBB12_615
.LBB12_368:                             # %if.end690
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	general_operand
	testq	%r12, %rax
	je	.LBB12_369
# BB#375:                               # %if.then693
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	movq	24(%rsp), %r14          # 8-byte Reload
	jne	.LBB12_388
# BB#376:                               # %if.then693
	testq	%r14, %r14
	je	.LBB12_388
# BB#377:                               # %if.then784
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$230, %rax
	jmp	.LBB12_615
.LBB12_430:
	movq	24(%rsp), %r14          # 8-byte Reload
	jmp	.LBB12_431
.LBB12_479:                             # %if.end1196
	movq	16(%r13), %rax
	movq	16(%rax), %rbx
	jmp	.LBB12_469
.LBB12_465:                             # %if.end1138
	movq	16(%r13), %rax
	movq	16(%rax), %rbx
	jmp	.LBB12_455
.LBB12_493:                             # %if.end1254
	movq	16(%r13), %rax
	movq	16(%rax), %rbx
	jmp	.LBB12_483
.LBB12_468:
	movq	24(%rsp), %r14          # 8-byte Reload
.LBB12_469:                             # %L5297
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_494
# BB#470:                               # %if.then1178
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_494
# BB#471:                               # %land.lhs.true1205
	movabsq	$recog_data, %rdx
	movq	$88, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_494
# BB#472:                               # %land.lhs.true1205
	testq	%r14, %r14
	je	.LBB12_494
# BB#473:                               # %if.then1210
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$467, %rax              # imm = 0x1D3
	jmp	.LBB12_615
.LBB12_454:
	movq	24(%rsp), %r14          # 8-byte Reload
.LBB12_455:                             # %L4991
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_494
# BB#456:                               # %if.then1120
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_494
# BB#457:                               # %land.lhs.true1147
	movabsq	$recog_data, %rdx
	movq	$90, %rdi
	movq	$3, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_494
# BB#458:                               # %land.lhs.true1147
	testq	%r14, %r14
	je	.LBB12_494
# BB#459:                               # %if.then1152
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$445, %rax              # imm = 0x1BD
	jmp	.LBB12_615
.LBB12_482:
	movq	24(%rsp), %r14          # 8-byte Reload
.LBB12_483:                             # %L5441
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_494
# BB#484:                               # %if.then1236
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_494
# BB#485:                               # %land.lhs.true1263
	movabsq	$recog_data, %rdx
	movq	$91, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_494
# BB#486:                               # %land.lhs.true1263
	testq	%r14, %r14
	je	.LBB12_494
# BB#487:                               # %if.then1268
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$477, %rax              # imm = 0x1DD
	jmp	.LBB12_615
.LBB12_450:                             # %if.end1061
	movq	16(%r13), %rax
	movq	16(%rax), %rbx
	jmp	.LBB12_438
.LBB12_437:
	movq	24(%rsp), %r14          # 8-byte Reload
.LBB12_438:                             # %L11098
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r12, %rax
	je	.LBB12_431
# BB#439:                               # %if.then1038
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_451
# BB#440:                               # %land.lhs.true1070
	movabsq	$recog_data, %rdx
	movq	$89, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_451
# BB#441:                               # %land.lhs.true1073
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_451
# BB#442:                               # %land.lhs.true1073
	testq	%r14, %r14
	je	.LBB12_451
# BB#443:                               # %if.then1079
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$419, %rax              # imm = 0x1A3
	jmp	.LBB12_615
.LBB12_369:
	movq	24(%rsp), %r14          # 8-byte Reload
	jmp	.LBB12_370
.LBB12_388:                             # %if.end785
	movq	16(%r13), %rax
	movq	16(%rax), %rbx
.LBB12_370:                             # %L1897
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	x86_64_general_operand
	testq	%r12, %rax
	je	.LBB12_494
# BB#371:                               # %if.then698
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_494
# BB#372:                               # %land.lhs.true794
	movabsq	$recog_data, %rdx
	movq	$76, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_494
# BB#373:                               # %land.lhs.true794
	testq	%r14, %r14
	je	.LBB12_494
# BB#374:                               # %if.then799
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$232, %rax
	jmp	.LBB12_615
.LBB12_451:                             # %if.end1080
	movq	16(%r13), %rax
	movq	16(%rax), %rbx
.LBB12_431:                             # %L4630
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_494
# BB#432:                               # %if.then1025
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_494
# BB#433:                               # %land.lhs.true1089
	movabsq	$recog_data, %rdx
	movq	$89, %rdi
	movq	$5, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_494
# BB#434:                               # %land.lhs.true1089
	testq	%r14, %r14
	je	.LBB12_494
# BB#435:                               # %if.then1094
	movq	$1, %rax
	movl	%eax, (%r14)
	movq	$420, %rax              # imm = 0x1A4
	jmp	.LBB12_615
.LBB12_494:                             # %if.end700
	movq	%r14, 24(%rsp)          # 8-byte Spill
.LBB12_35:                              # %if.end610
	movq	8(%r13), %rbx
.LBB12_36:                              # %L10890
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#37:                                # %if.then26
	movq	%rbx, recog_data(%rip)
	movq	16(%r13), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB12_53
# BB#38:                                # %L11099
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$120, %rax
	jg	.LBB12_520
# BB#39:                                # %L11099
	cmpq	$86, %rax
	jg	.LBB12_495
# BB#40:                                # %L11099
	cmpq	$72, %rax
	jne	.LBB12_53
# BB#41:                                # %L6983
	movq	8(%rbx), %r15
	movzbl	(%r15), %eax
	cmpq	$111, %rax
	jne	.LBB12_42
# BB#604:                               # %L6984
	movq	8(%r15), %rax
	movl	(%rax), %ecx
	andq	$16777215, %rcx         # imm = 0xFFFFFF
	cmpq	$3407933, %rcx          # imm = 0x34003D
	jne	.LBB12_42
# BB#605:                               # %land.lhs.true1724
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB12_42
# BB#606:                               # %L6985
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_42
# BB#607:                               # %land.lhs.true1737
	cmpq	$0, 8(%rax)
	jne	.LBB12_42
# BB#608:                               # %L6986
	movq	16(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_42
# BB#609:                               # %land.lhs.true1750
	movq	8(%rax), %rax
	cmpq	$-1, %rax
	jne	.LBB12_42
# BB#610:                               # %L6987
	movq	24(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_42
# BB#611:                               # %land.lhs.true1766
	cmpq	$0, 8(%rax)
	jne	.LBB12_42
# BB#612:                               # %land.lhs.true1771
	movl	target_flags(%rip), %eax
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB12_42
# BB#613:                               # %land.lhs.true1771
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_42
# BB#614:                               # %if.then1776
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$613, %rax              # imm = 0x265
	jmp	.LBB12_615
.LBB12_520:                             # %L11099
	cmpq	$121, %rax
	jne	.LBB12_53
# BB#521:                               # %L4477
	movq	8(%rbx), %rbx
	movl	(%rbx), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$262144, %rcx           # imm = 0x40000
	jne	.LBB12_53
# BB#522:                               # %L11104
	andq	$65535, %rax            # imm = 0xFFFF
	addq	$-87, %rax
	andq	%r12, %rax
	cmpq	$4, %rax
	ja	.LBB12_53
# BB#523:                               # %L11104
	jmpq	*.LJTI12_3(,%rax,8)
.LBB12_524:                             # %L4478
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#525:                               # %if.then1349
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#526:                               # %if.then1357
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_53
# BB#527:                               # %land.lhs.true1362
	movabsq	$recog_data, %rdx
	movq	$87, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_53
# BB#528:                               # %land.lhs.true1362
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#529:                               # %if.then1367
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$409, %rax              # imm = 0x199
	jmp	.LBB12_615
.LBB12_495:                             # %L11099
	cmpq	$87, %rax
	je	.LBB12_509
# BB#496:                               # %L11099
	cmpq	$89, %rax
	jne	.LBB12_497
# BB#584:                               # %L4671
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#585:                               # %if.then1595
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#586:                               # %if.then1603
	movl	target_flags(%rip), %edx
	movq	%rbx, recog_data+16(%rip)
	movq	%rdx, %rax
	andq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB12_53
# BB#587:                               # %land.lhs.true1608
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r12, %rdi
	je	.LBB12_588
# BB#593:                               # %land.lhs.true1615
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB12_594
	jmp	.LBB12_53
.LBB12_42:                              # %L6991
	xorq	%rsi, %rsi
	movq	%r15, %rdi
	callq	ix86_comparison_operator
	testq	%r12, %rax
	je	.LBB12_53
# BB#43:                                # %if.then1710
	movq	%r15, recog_data+8(%rip)
	movq	8(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$61, %rcx
	jne	.LBB12_53
# BB#44:                                # %land.lhs.true1787
	movl	8(%rax), %eax
	cmpq	$17, %rax
	jne	.LBB12_53
# BB#45:                                # %L6993
	movq	16(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$54, %rcx
	jne	.LBB12_53
# BB#46:                                # %land.lhs.true1800
	cmpq	$0, 8(%rax)
	jne	.LBB12_53
# BB#47:                                # %L6994
	movq	16(%rbx), %r14
	movq	$5, %rsi
	movq	%r14, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#48:                                # %if.then1812
	movq	%r14, recog_data+16(%rip)
	movq	24(%rbx), %rbx
	movq	$5, %rsi
	movq	%rbx, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#49:                                # %if.then1820
	movl	target_flags(%rip), %eax
	movq	%rbx, recog_data+24(%rip)
	testq	$33554432, %rax         # imm = 0x2000000
	je	.LBB12_53
# BB#50:                                # %land.lhs.true1825
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	andq	$327680, %rax           # imm = 0x50000
	orq	%rsi, %rax
	testq	%r12, %rax
	je	.LBB12_53
# BB#51:                                # %land.lhs.true1832
	movq	recog_data+16(%rip), %rax
	movzbl	(%rax), %eax
	cmpq	$66, %rax
	movq	$614, %rax              # imm = 0x266
	jne	.LBB12_615
# BB#52:                                # %lor.lhs.false1837
	movzbl	(%rbx), %ecx
	cmpq	$66, %rcx
	jne	.LBB12_615
	jmp	.LBB12_53
.LBB12_509:                             # %L4409
	movq	8(%rbx), %r15
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#510:                               # %if.then1296
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#511:                               # %if.then1304
	movl	target_flags(%rip), %edx
	movq	%rbx, recog_data+16(%rip)
	movq	%rdx, %rax
	andq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB12_53
# BB#512:                               # %land.lhs.true1309
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r12, %rdi
	je	.LBB12_513
# BB#518:                               # %land.lhs.true1316
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB12_519
	jmp	.LBB12_53
.LBB12_497:                             # %L11099
	cmpq	$90, %rax
	jne	.LBB12_53
# BB#498:                               # %L5032
	movq	8(%rbx), %r15
	movl	(%r15), %eax
	movq	%rax, %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	cmpq	$327680, %rcx           # imm = 0x50000
	jne	.LBB12_53
# BB#499:                               # %L11112
	andq	$65535, %rax            # imm = 0xFFFF
	cmpq	$121, %rax
	jne	.LBB12_500
# BB#595:                               # %L5076
	movq	8(%r15), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#596:                               # %if.then1649
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#597:                               # %if.then1657
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_53
# BB#598:                               # %land.lhs.true1662
	movabsq	$recog_data, %rdx
	movq	$90, %rdi
	movq	$3, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_53
# BB#599:                               # %land.lhs.true1665
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_53
# BB#600:                               # %land.lhs.true1665
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#601:                               # %if.then1671
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$451, %rax              # imm = 0x1C3
	jmp	.LBB12_615
.LBB12_558:                             # %L5326
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#559:                               # %if.then1491
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r12, %rax
	je	.LBB12_566
# BB#560:                               # %if.then1499
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_565
# BB#561:                               # %land.lhs.true1509
	movabsq	$recog_data, %rdx
	movq	$88, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_565
# BB#562:                               # %land.lhs.true1512
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_565
# BB#563:                               # %land.lhs.true1512
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_565
# BB#564:                               # %if.then1518
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$469, %rax              # imm = 0x1D5
	jmp	.LBB12_615
.LBB12_530:                             # %L4740
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#531:                               # %if.then1374
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movzbl	(%rbx), %eax
	cmpq	$54, %rax
	jne	.LBB12_532
# BB#537:                               # %L11109
	movq	$4, %rsi
	movq	%rbx, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB12_545
# BB#538:                               # %if.then1392
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_544
# BB#539:                               # %land.lhs.true1402
	movl	ix86_cpu(%rip), %ecx
	movl	x86_use_cltd(%rip), %eax
	movl	optimize_size(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	orq	%rsi, %rdx
	testq	%r12, %rdx
	je	.LBB12_544
# BB#540:                               # %land.lhs.true1408
	movq	8(%rbx), %rax
	cmpq	$31, %rax
	jne	.LBB12_544
# BB#541:                               # %land.lhs.true1414
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_544
# BB#542:                               # %land.lhs.true1414
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_544
# BB#543:                               # %if.then1419
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$427, %rax              # imm = 0x1AB
	jmp	.LBB12_615
.LBB12_552:                             # %L5106
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	nonimmediate_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#553:                               # %if.then1466
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#554:                               # %if.then1474
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_53
# BB#555:                               # %land.lhs.true1479
	movabsq	$recog_data, %rdx
	movq	$90, %rdi
	movq	$3, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_53
# BB#556:                               # %land.lhs.true1479
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#557:                               # %if.then1484
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$453, %rax              # imm = 0x1C5
	jmp	.LBB12_615
.LBB12_571:                             # %L5470
	movq	8(%rbx), %r15
	movq	$4, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#572:                               # %if.then1543
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r12, %rax
	je	.LBB12_579
# BB#573:                               # %if.then1551
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_578
# BB#574:                               # %land.lhs.true1561
	movabsq	$recog_data, %rdx
	movq	$91, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_578
# BB#575:                               # %land.lhs.true1564
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_578
# BB#576:                               # %land.lhs.true1564
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_578
# BB#577:                               # %if.then1570
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$479, %rax              # imm = 0x1DF
	jmp	.LBB12_615
.LBB12_500:                             # %if.end1638
	movq	$5, %rsi
	movq	%r15, %rdi
	callq	register_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#501:                               # %if.then1641
	movq	%r15, recog_data+8(%rip)
	movq	16(%rbx), %rbx
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#502:                               # %if.then1678
	movl	target_flags(%rip), %edx
	movq	%rbx, recog_data+16(%rip)
	movq	%rdx, %rax
	andq	$33554432, %rax         # imm = 0x2000000
	jne	.LBB12_53
# BB#503:                               # %land.lhs.true1683
	movl	ix86_arch(%rip), %ecx
	movl	x86_cmove(%rip), %esi
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r12, %rdi
	je	.LBB12_504
# BB#602:                               # %land.lhs.true1690
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	jne	.LBB12_603
	jmp	.LBB12_53
.LBB12_588:                             # %lor.lhs.false1612
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB12_590
# BB#589:                               # %lor.lhs.false1612
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_590
.LBB12_594:                             # %if.then1617
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$423, %rax              # imm = 0x1A7
	jmp	.LBB12_615
.LBB12_513:                             # %lor.lhs.false1313
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB12_515
# BB#514:                               # %lor.lhs.false1313
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_515
.LBB12_519:                             # %if.then1318
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$405, %rax              # imm = 0x195
	jmp	.LBB12_615
.LBB12_565:                             # %if.end1519
	movq	16(%r13), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB12_566:                             # %L5357
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#567:                               # %if.then1504
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_53
# BB#568:                               # %land.lhs.true1531
	movabsq	$recog_data, %rdx
	movq	$88, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_53
# BB#569:                               # %land.lhs.true1531
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#570:                               # %if.then1536
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$471, %rax              # imm = 0x1D7
	jmp	.LBB12_615
.LBB12_578:                             # %if.end1571
	movq	16(%r13), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB12_579:                             # %L5501
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#580:                               # %if.then1556
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_53
# BB#581:                               # %land.lhs.true1583
	movabsq	$recog_data, %rdx
	movq	$91, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_53
# BB#582:                               # %land.lhs.true1583
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#583:                               # %if.then1588
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$481, %rax              # imm = 0x1E1
	jmp	.LBB12_615
.LBB12_590:                             # %L4687
	testq	%r12, %rax
	jne	.LBB12_53
# BB#591:                               # %L4687
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#592:                               # %if.then1623
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$424, %rax              # imm = 0x1A8
	jmp	.LBB12_615
.LBB12_515:                             # %L4425
	testq	%r12, %rax
	jne	.LBB12_53
# BB#516:                               # %L4425
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#517:                               # %if.then1324
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$406, %rax              # imm = 0x196
	jmp	.LBB12_615
.LBB12_544:                             # %if.end1420
	movq	16(%r13), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB12_545:                             # %L11110
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	const_int_1_operand
	testq	%r12, %rax
	je	.LBB12_532
# BB#546:                               # %if.then1397
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_551
# BB#547:                               # %land.lhs.true1432
	movabsq	$recog_data, %rax
	movq	$89, %rdi
	movq	$4, %rsi
	movq	%rax, %rdx
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_551
# BB#548:                               # %land.lhs.true1435
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_551
# BB#549:                               # %land.lhs.true1435
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_551
# BB#550:                               # %if.then1441
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$429, %rax              # imm = 0x1AD
	jmp	.LBB12_615
.LBB12_504:                             # %lor.lhs.false1687
	testq	$327680, %rdx           # imm = 0x50000
	je	.LBB12_506
# BB#505:                               # %lor.lhs.false1687
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_506
.LBB12_603:                             # %if.then1692
	movq	$2, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$448, %rax              # imm = 0x1C0
	jmp	.LBB12_615
.LBB12_551:                             # %if.end1442
	movq	16(%r13), %rax
	movq	8(%rax), %rax
	movq	16(%rax), %rbx
.LBB12_532:                             # %L4801
	movq	$2, %rsi
	movq	%rbx, %rdi
	callq	nonmemory_operand
	testq	%r12, %rax
	je	.LBB12_53
# BB#533:                               # %if.then1387
	movzbl	target_flags+3(%rip), %eax
	movq	%rbx, recog_data+16(%rip)
	testq	$2, %rax
	je	.LBB12_53
# BB#534:                               # %land.lhs.true1454
	movabsq	$recog_data, %rdx
	movq	$89, %rdi
	movq	$4, %rsi
	callq	ix86_binary_operator_ok
	testq	%r12, %rax
	je	.LBB12_53
# BB#535:                               # %land.lhs.true1454
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#536:                               # %if.then1459
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$431, %rax              # imm = 0x1AF
	jmp	.LBB12_615
.LBB12_506:                             # %L5048
	testq	%r12, %rax
	jne	.LBB12_53
# BB#507:                               # %L5048
	cmpq	$0, 24(%rsp)            # 8-byte Folded Reload
	je	.LBB12_53
# BB#508:                               # %if.then1698
	movq	$1, %rax
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rcx)
	movq	$449, %rax              # imm = 0x1C1
	jmp	.LBB12_615
.LBB12_53:                              # %ret0
	movq	%r12, %rax
.LBB12_615:                             # %return
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.Ltmp212:
	.size	recog_5, .Ltmp212-recog_5
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI12_0:
	.quad	.LBB12_275
	.quad	.LBB12_140
	.quad	.LBB12_291
	.quad	.LBB12_28
	.quad	.LBB12_28
	.quad	.LBB12_28
	.quad	.LBB12_284
.LJTI12_1:
	.quad	.LBB12_163
	.quad	.LBB12_205
	.quad	.LBB12_28
	.quad	.LBB12_222
	.quad	.LBB12_28
	.quad	.LBB12_28
	.quad	.LBB12_28
	.quad	.LBB12_28
	.quad	.LBB12_254
	.quad	.LBB12_260
	.quad	.LBB12_266
	.quad	.LBB12_272
.LJTI12_2:
	.quad	.LBB12_360
	.quad	.LBB12_366
	.quad	.LBB12_407
	.quad	.LBB12_35
	.quad	.LBB12_35
	.quad	.LBB12_35
	.quad	.LBB12_35
	.quad	.LBB12_35
	.quad	.LBB12_389
	.quad	.LBB12_395
	.quad	.LBB12_401
	.quad	.LBB12_419
	.quad	.LBB12_422
	.quad	.LBB12_466
	.quad	.LBB12_428
	.quad	.LBB12_452
	.quad	.LBB12_480
.LJTI12_3:
	.quad	.LBB12_524
	.quad	.LBB12_558
	.quad	.LBB12_530
	.quad	.LBB12_552
	.quad	.LBB12_571


	.ident	"clang version 3.5 (trunk)"
	.section	".note.GNU-stack","",@progbits
