; ModuleID = 'real.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type opaque
%struct.realvaluetype = type { [3 x i64] }

@ezero = constant [6 x i16] zeroinitializer, align 2
@.str = private unnamed_addr constant [27 x i8] c"conversion from NaN to int\00", align 1
@.str1 = private unnamed_addr constant [36 x i8] c"conversion from NaN to unsigned int\00", align 1
@mode_class = external constant [59 x i32]
@.str2 = private unnamed_addr constant [7 x i8] c"real.c\00", align 1
@__FUNCTION__.ereal_from_int = private unnamed_addr constant [15 x i8] c"ereal_from_int\00", align 1
@eone = constant [6 x i16] [i16 0, i16 0, i16 0, i16 0, i16 -32768, i16 16383], align 2
@mode_bitsize = external constant [59 x i16]
@__FUNCTION__.ereal_from_uint = private unnamed_addr constant [16 x i8] c"ereal_from_uint\00", align 1
@stderr = external constant %struct._IO_FILE*
@ehalf = constant [6 x i16] [i16 0, i16 0, i16 0, i16 0, i16 -32768, i16 16382], align 2
@etwo = constant [6 x i16] [i16 0, i16 0, i16 0, i16 0, i16 -32768, i16 16384], align 2
@e32 = constant [6 x i16] [i16 0, i16 0, i16 0, i16 0, i16 -32768, i16 16388], align 2
@elog2 = constant [6 x i16] [i16 -13852, i16 31147, i16 -11825, i16 6135, i16 -20110, i16 16382], align 2
@esqrt2 = constant [6 x i16] [i16 22910, i16 25732, i16 -1570, i16 -3277, i16 -19196, i16 16383], align 2
@epi = constant [6 x i16] [i16 -15162, i16 -15820, i16 8552, i16 -9566, i16 -14065, i16 16384], align 2
@rndprc = global i32 80, align 4
@merror = global i32 0, align 4
@__FUNCTION__.significand_size = private unnamed_addr constant [17 x i8] c"significand_size\00", align 1
@rlast = internal unnamed_addr global i32 -1, align 4
@rbit = internal global [9 x i16] zeroinitializer, align 16
@rw = internal unnamed_addr global i32 0, align 4
@rmsk = internal unnamed_addr global i16 0, align 2
@rmbit = internal unnamed_addr global i16 0, align 2
@re = internal unnamed_addr global i32 0, align 4
@rebit = internal unnamed_addr global i16 0, align 2
@extra_warnings = external global i32
@.str4 = private unnamed_addr constant [24 x i8] c"floating point overflow\00", align 1
@.str5 = private unnamed_addr constant [8 x i8] c"enormlz\00", align 1
@.str6 = private unnamed_addr constant [5 x i8] c"esub\00", align 1
@.str7 = private unnamed_addr constant [12 x i8] c"subtraction\00", align 1
@.str8 = private unnamed_addr constant [5 x i8] c"ediv\00", align 1
@.str9 = private unnamed_addr constant [9 x i8] c"division\00", align 1
@.str10 = private unnamed_addr constant [5 x i8] c"emul\00", align 1
@.str11 = private unnamed_addr constant [15 x i8] c"multiplication\00", align 1
@.str12 = private unnamed_addr constant [14 x i8] c"normalization\00", align 1
@.str13 = private unnamed_addr constant [7 x i8] c"etoasc\00", align 1
@.str14 = private unnamed_addr constant [19 x i8] c"conversion to text\00", align 1
@.str15 = private unnamed_addr constant [7 x i8] c"asctoe\00", align 1
@.str16 = private unnamed_addr constant [8 x i8] c"parsing\00", align 1
@.str17 = private unnamed_addr constant [8 x i8] c"eremain\00", align 1
@.str18 = private unnamed_addr constant [8 x i8] c"modulus\00", align 1
@.str19 = private unnamed_addr constant [6 x i8] c"esqrt\00", align 1
@.str20 = private unnamed_addr constant [12 x i8] c"square root\00", align 1
@.str21 = private unnamed_addr constant [26 x i8] c"%s: argument domain error\00", align 1
@.str22 = private unnamed_addr constant [25 x i8] c"%s: function singularity\00", align 1
@.str23 = private unnamed_addr constant [25 x i8] c"%s: overflow range error\00", align 1
@.str24 = private unnamed_addr constant [26 x i8] c"%s: underflow range error\00", align 1
@.str25 = private unnamed_addr constant [28 x i8] c"%s: total loss of precision\00", align 1
@.str26 = private unnamed_addr constant [30 x i8] c"%s: partial loss of precision\00", align 1
@.str27 = private unnamed_addr constant [30 x i8] c"%s: NaN - producing operation\00", align 1
@__FUNCTION__.mtherr = private unnamed_addr constant [7 x i8] c"mtherr\00", align 1
@_hex_value = external constant [256 x i8]
@_sch_istable = external constant [256 x i16]
@etens = internal constant [13 x [6 x i16]] [[6 x i16] [i16 -14004, i16 -26726, i16 -30176, i16 20994, i16 -15264, i16 29989], [6 x i16] [i16 -22707, i16 24036, i16 -15043, i16 15197, i16 -24949, i16 23186], [6 x i16] [i16 25869, i16 3095, i16 -32395, i16 30086, i16 -13962, i16 19784], [6 x i16] [i16 -13211, i16 -28218, i16 -23026, i16 -24402, i16 -7399, i16 18083], [6 x i16] [i16 -8772, i16 -8563, i16 -25095, i16 -5125, i16 -21890, i16 17233], [6 x i16] [i16 -14737, i16 -29473, i16 -32535, i16 18377, i16 -27718, i16 16808], [6 x i16] [i16 15551, i16 -22827, i16 -49, i16 8009, i16 -15752, i16 16595], [6 x i16] [i16 -4064, i16 -19043, i16 11120, i16 -21080, i16 -25147, i16 16489], [6 x i16] [i16 0, i16 0, i16 1024, i16 -13889, i16 -29157, i16 16436], [6 x i16] [i16 0, i16 0, i16 0, i16 8192, i16 -16708, i16 16409], [6 x i16] [i16 0, i16 0, i16 0, i16 0, i16 -25536, i16 16396], [6 x i16] [i16 0, i16 0, i16 0, i16 0, i16 -14336, i16 16389], [6 x i16] [i16 0, i16 0, i16 0, i16 0, i16 -24576, i16 16386]], align 16
@equot = internal global [9 x i16] zeroinitializer, align 16
@wstring = internal global [80 x i8] zeroinitializer, align 16
@.str28 = private unnamed_addr constant [6 x i8] c" NaN \00", align 1
@.str29 = private unnamed_addr constant [12 x i8] c" -Infinity \00", align 1
@.str30 = private unnamed_addr constant [11 x i8] c" Infinity \00", align 1
@emtens = internal constant [13 x [6 x i16]] [[6 x i16] [i16 11748, i16 -24610, i16 -11570, i16 1224, i16 -22819, i16 2776], [6 x i16] [i16 18725, i16 11748, i16 13366, i16 21327, i16 -12626, i16 9579], [6 x i16] [i16 -30810, i16 -16195, i16 -9641, i16 -32091, i16 -23898, i16 12981], [6 x i16] [i16 28979, i16 -11748, i16 -9437, i16 -4558, i16 -28599, i16 14682], [6 x i16] [i16 -1391, i16 6457, i16 25466, i16 17189, i16 -16335, i16 15532], [6 x i16] [i16 -21379, i16 -7008, i16 25788, i16 18044, i16 -8752, i16 15957], [6 x i16] [i16 16164, i16 -5723, i16 -23239, i16 -5593, i16 -22401, i16 16170], [6 x i16] [i16 26590, i16 -27462, i16 17721, i16 7853, i16 -12367, i16 16276], [6 x i16] [i16 19503, i16 -7845, i16 -15283, i16 -27458, i16 -6507, i16 16329], [6 x i16] [i16 -574, i16 -12548, i16 -31647, i16 30481, i16 -21556, i16 16356], [6 x i16] [i16 -11325, i16 25899, i16 -7655, i16 5976, i16 -11849, i16 16369], [6 x i16] [i16 15729, i16 -10486, i16 28835, i16 2621, i16 -23593, i16 16376], [6 x i16] [i16 -13107, i16 -13108, i16 -13108, i16 -13108, i16 -13108, i16 16379]], align 16
@.str32 = private unnamed_addr constant [4 x i8] c"e%d\00", align 1
@bmask = internal unnamed_addr constant [17 x i16] [i16 -1, i16 -2, i16 -4, i16 -8, i16 -16, i16 -32, i16 -64, i16 -128, i16 -256, i16 -512, i16 -1024, i16 -2048, i16 -4096, i16 -8192, i16 -16384, i16 -32768, i16 0], align 16
@.str33 = private unnamed_addr constant [43 x i8] c"overflow on truncation to unsigned integer\00", align 1
@.str34 = private unnamed_addr constant [34 x i8] c"overflow on truncation to integer\00", align 1
@subflg = internal unnamed_addr global i1 false

; Function Attrs: nounwind uwtable
define void @earith(%struct.realvaluetype* nocapture %value, i32 %icode, %struct.realvaluetype* nocapture readonly %r1, %struct.realvaluetype* nocapture readonly %r2) #0 {
entry:
  %d1 = alloca [6 x i16], align 2
  %d2 = alloca [6 x i16], align 2
  %v = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %d1 to i8*
  %1 = bitcast %struct.realvaluetype* %r1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %2 = bitcast [6 x i16]* %d2 to i8*
  %3 = bitcast %struct.realvaluetype* %r2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 0
  %arrayidx.i = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 5
  %4 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %4, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %entry ]
  %5 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %5, 0
  br i1 %cmp5.i, label %for.inc.i, label %do.body

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

do.body:                                          ; preds = %for.body.i
  %6 = bitcast %struct.realvaluetype* %value to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %0, i64 12, i32 2, i1 false)
  %add.ptr = getelementptr inbounds i8* %6, i64 12
  call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 12, i32 1, i1 false)
  br label %do.end49

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay1 = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 0
  %arrayidx.i71 = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 5
  %7 = load i16* %arrayidx.i71, align 2, !tbaa !1
  %and.i72 = and i16 %7, 32767
  %cmp.i73 = icmp eq i16 %and.i72, 32767
  br i1 %cmp.i73, label %for.body.i77, label %if.end8

for.body.i77:                                     ; preds = %if.end, %for.inc.i81
  %i.012.i74 = phi i32 [ %inc.i79, %for.inc.i81 ], [ 0, %if.end ]
  %x.addr.011.i75 = phi i16* [ %incdec.ptr.i78, %for.inc.i81 ], [ %arraydecay1, %if.end ]
  %8 = load i16* %x.addr.011.i75, align 2, !tbaa !1
  %cmp5.i76 = icmp eq i16 %8, 0
  br i1 %cmp5.i76, label %for.inc.i81, label %do.body5

for.inc.i81:                                      ; preds = %for.body.i77
  %incdec.ptr.i78 = getelementptr inbounds i16* %x.addr.011.i75, i64 1
  %inc.i79 = add nsw i32 %i.012.i74, 1
  %cmp2.i80 = icmp slt i32 %inc.i79, 5
  br i1 %cmp2.i80, label %for.body.i77, label %if.end8

do.body5:                                         ; preds = %for.body.i77
  %9 = bitcast %struct.realvaluetype* %value to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %2, i64 12, i32 2, i1 false)
  %add.ptr6 = getelementptr inbounds i8* %9, i64 12
  call void @llvm.memset.p0i8.i64(i8* %add.ptr6, i8 0, i64 12, i32 1, i1 false)
  br label %do.end49

if.end8:                                          ; preds = %for.inc.i81, %if.end
  switch i32 %icode, label %sw.default [
    i32 59, label %sw.bb
    i32 60, label %sw.bb12
    i32 61, label %sw.bb16
    i32 70, label %sw.bb20
    i32 78, label %sw.bb24
    i32 79, label %sw.bb34
  ]

sw.bb:                                            ; preds = %if.end8
  %arraydecay11 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 0
  call fastcc void @eadd(i16* %arraydecay1, i16* %arraydecay, i16* %arraydecay11)
  br label %do.body47

sw.bb12:                                          ; preds = %if.end8
  %arraydecay15 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 0
  call fastcc void @esub(i16* %arraydecay1, i16* %arraydecay, i16* %arraydecay15)
  br label %do.body47

sw.bb16:                                          ; preds = %if.end8
  %arraydecay19 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 0
  call fastcc void @emul(i16* %arraydecay1, i16* %arraydecay, i16* %arraydecay19)
  br label %do.body47

sw.bb20:                                          ; preds = %if.end8
  %arraydecay23 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 0
  call fastcc void @ediv(i16* %arraydecay1, i16* %arraydecay, i16* %arraydecay23)
  br label %do.body47

sw.bb24:                                          ; preds = %if.end8
  %call27 = call fastcc i32 @ecmp(i16* %arraydecay, i16* %arraydecay1)
  %cmp = icmp slt i32 %call27, 0
  %arraydecay30 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 0
  br i1 %cmp, label %if.then28, label %if.else

if.then28:                                        ; preds = %sw.bb24
  %incdec.ptr.i94 = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 1
  %10 = load i16* %arraydecay, align 2, !tbaa !1
  %incdec.ptr1.i95 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 1
  store i16 %10, i16* %arraydecay30, align 2, !tbaa !1
  %incdec.ptr.1.i96 = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 2
  %11 = load i16* %incdec.ptr.i94, align 2, !tbaa !1
  %incdec.ptr1.1.i97 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 2
  store i16 %11, i16* %incdec.ptr1.i95, align 2, !tbaa !1
  %incdec.ptr.2.i98 = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 3
  %12 = load i16* %incdec.ptr.1.i96, align 2, !tbaa !1
  %incdec.ptr1.2.i99 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 3
  store i16 %12, i16* %incdec.ptr1.1.i97, align 2, !tbaa !1
  %incdec.ptr.3.i100 = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 4
  %13 = load i16* %incdec.ptr.2.i98, align 2, !tbaa !1
  %incdec.ptr1.3.i101 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 4
  store i16 %13, i16* %incdec.ptr1.2.i99, align 2, !tbaa !1
  %14 = load i16* %incdec.ptr.3.i100, align 2, !tbaa !1
  %incdec.ptr1.4.i103 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 5
  store i16 %14, i16* %incdec.ptr1.3.i101, align 2, !tbaa !1
  store i16 %4, i16* %incdec.ptr1.4.i103, align 2, !tbaa !1
  br label %do.body47

if.else:                                          ; preds = %sw.bb24
  %incdec.ptr.i84 = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 1
  %15 = load i16* %arraydecay1, align 2, !tbaa !1
  %incdec.ptr1.i85 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 1
  store i16 %15, i16* %arraydecay30, align 2, !tbaa !1
  %incdec.ptr.1.i86 = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 2
  %16 = load i16* %incdec.ptr.i84, align 2, !tbaa !1
  %incdec.ptr1.1.i87 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 2
  store i16 %16, i16* %incdec.ptr1.i85, align 2, !tbaa !1
  %incdec.ptr.2.i88 = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 3
  %17 = load i16* %incdec.ptr.1.i86, align 2, !tbaa !1
  %incdec.ptr1.2.i89 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 3
  store i16 %17, i16* %incdec.ptr1.1.i87, align 2, !tbaa !1
  %incdec.ptr.3.i90 = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 4
  %18 = load i16* %incdec.ptr.2.i88, align 2, !tbaa !1
  %incdec.ptr1.3.i91 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 4
  store i16 %18, i16* %incdec.ptr1.2.i89, align 2, !tbaa !1
  %19 = load i16* %incdec.ptr.3.i90, align 2, !tbaa !1
  %incdec.ptr1.4.i93 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 5
  store i16 %19, i16* %incdec.ptr1.3.i91, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr1.4.i93, align 2, !tbaa !1
  br label %do.body47

sw.bb34:                                          ; preds = %if.end8
  %call37 = call fastcc i32 @ecmp(i16* %arraydecay, i16* %arraydecay1)
  %cmp38 = icmp sgt i32 %call37, 0
  %arraydecay41 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 0
  br i1 %cmp38, label %if.then39, label %if.else42

if.then39:                                        ; preds = %sw.bb34
  %incdec.ptr.i61 = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 1
  %20 = load i16* %arraydecay, align 2, !tbaa !1
  %incdec.ptr1.i62 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 1
  store i16 %20, i16* %arraydecay41, align 2, !tbaa !1
  %incdec.ptr.1.i63 = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 2
  %21 = load i16* %incdec.ptr.i61, align 2, !tbaa !1
  %incdec.ptr1.1.i64 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 2
  store i16 %21, i16* %incdec.ptr1.i62, align 2, !tbaa !1
  %incdec.ptr.2.i65 = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 3
  %22 = load i16* %incdec.ptr.1.i63, align 2, !tbaa !1
  %incdec.ptr1.2.i66 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 3
  store i16 %22, i16* %incdec.ptr1.1.i64, align 2, !tbaa !1
  %incdec.ptr.3.i67 = getelementptr inbounds [6 x i16]* %d1, i64 0, i64 4
  %23 = load i16* %incdec.ptr.2.i65, align 2, !tbaa !1
  %incdec.ptr1.3.i68 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 4
  store i16 %23, i16* %incdec.ptr1.2.i66, align 2, !tbaa !1
  %24 = load i16* %incdec.ptr.3.i67, align 2, !tbaa !1
  %incdec.ptr1.4.i70 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 5
  store i16 %24, i16* %incdec.ptr1.3.i68, align 2, !tbaa !1
  store i16 %4, i16* %incdec.ptr1.4.i70, align 2, !tbaa !1
  br label %do.body47

if.else42:                                        ; preds = %sw.bb34
  %incdec.ptr.i55 = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 1
  %25 = load i16* %arraydecay1, align 2, !tbaa !1
  %incdec.ptr1.i56 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 1
  store i16 %25, i16* %arraydecay41, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 2
  %26 = load i16* %incdec.ptr.i55, align 2, !tbaa !1
  %incdec.ptr1.1.i57 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 2
  store i16 %26, i16* %incdec.ptr1.i56, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 3
  %27 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr1.2.i58 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 3
  store i16 %27, i16* %incdec.ptr1.1.i57, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds [6 x i16]* %d2, i64 0, i64 4
  %28 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr1.3.i59 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 4
  store i16 %28, i16* %incdec.ptr1.2.i58, align 2, !tbaa !1
  %29 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr1.4.i60 = getelementptr inbounds [6 x i16]* %v, i64 0, i64 5
  store i16 %29, i16* %incdec.ptr1.3.i59, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr1.4.i60, align 2, !tbaa !1
  br label %do.body47

sw.default:                                       ; preds = %if.end8
  %30 = bitcast [6 x i16]* %v to i8*
  call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 12, i32 2, i1 false)
  br label %do.body47

do.body47:                                        ; preds = %sw.bb, %sw.bb12, %sw.bb16, %sw.bb20, %sw.default, %if.else, %if.then28, %if.else42, %if.then39
  %31 = bitcast %struct.realvaluetype* %value to i8*
  %32 = bitcast [6 x i16]* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 12, i32 2, i1 false)
  %add.ptr48 = getelementptr inbounds i8* %31, i64 12
  call void @llvm.memset.p0i8.i64(i8* %add.ptr48, i8 0, i64 12, i32 1, i1 false)
  br label %do.end49

do.end49:                                         ; preds = %do.body, %do.body5, %do.body47
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @eadd(i16* nocapture readonly %a, i16* nocapture readonly %b, i16* %c) #0 {
entry:
  %arrayidx.i = getelementptr inbounds i16* %a, i64 5
  %0 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %a, %entry ]
  %1 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %1, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %incdec.ptr.i25 = getelementptr inbounds i16* %a, i64 1
  %2 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr1.i = getelementptr inbounds i16* %c, i64 1
  store i16 %2, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds i16* %a, i64 2
  %3 = load i16* %incdec.ptr.i25, align 2, !tbaa !1
  %incdec.ptr1.1.i = getelementptr inbounds i16* %c, i64 2
  store i16 %3, i16* %incdec.ptr1.i, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds i16* %a, i64 3
  %4 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr1.2.i = getelementptr inbounds i16* %c, i64 3
  store i16 %4, i16* %incdec.ptr1.1.i, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds i16* %a, i64 4
  %5 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr1.3.i = getelementptr inbounds i16* %c, i64 4
  store i16 %5, i16* %incdec.ptr1.2.i, align 2, !tbaa !1
  %6 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr1.4.i = getelementptr inbounds i16* %c, i64 5
  store i16 %6, i16* %incdec.ptr1.3.i, align 2, !tbaa !1
  %7 = load i16* %arrayidx.i, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr1.4.i, align 2, !tbaa !1
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arrayidx.i26 = getelementptr inbounds i16* %b, i64 5
  %8 = load i16* %arrayidx.i26, align 2, !tbaa !1
  %and.i27 = and i16 %8, 32767
  %cmp.i28 = icmp eq i16 %and.i27, 32767
  br i1 %cmp.i28, label %for.body.i32, label %if.end4

for.body.i32:                                     ; preds = %if.end, %for.inc.i36
  %i.012.i29 = phi i32 [ %inc.i34, %for.inc.i36 ], [ 0, %if.end ]
  %x.addr.011.i30 = phi i16* [ %incdec.ptr.i33, %for.inc.i36 ], [ %b, %if.end ]
  %9 = load i16* %x.addr.011.i30, align 2, !tbaa !1
  %cmp5.i31 = icmp eq i16 %9, 0
  br i1 %cmp5.i31, label %for.inc.i36, label %if.then3

for.inc.i36:                                      ; preds = %for.body.i32
  %incdec.ptr.i33 = getelementptr inbounds i16* %x.addr.011.i30, i64 1
  %inc.i34 = add nsw i32 %i.012.i29, 1
  %cmp2.i35 = icmp slt i32 %inc.i34, 5
  br i1 %cmp2.i35, label %for.body.i32, label %if.end4

if.then3:                                         ; preds = %for.body.i32
  %incdec.ptr.i56 = getelementptr inbounds i16* %b, i64 1
  %10 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr1.i57 = getelementptr inbounds i16* %c, i64 1
  store i16 %10, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i58 = getelementptr inbounds i16* %b, i64 2
  %11 = load i16* %incdec.ptr.i56, align 2, !tbaa !1
  %incdec.ptr1.1.i59 = getelementptr inbounds i16* %c, i64 2
  store i16 %11, i16* %incdec.ptr1.i57, align 2, !tbaa !1
  %incdec.ptr.2.i60 = getelementptr inbounds i16* %b, i64 3
  %12 = load i16* %incdec.ptr.1.i58, align 2, !tbaa !1
  %incdec.ptr1.2.i61 = getelementptr inbounds i16* %c, i64 3
  store i16 %12, i16* %incdec.ptr1.1.i59, align 2, !tbaa !1
  %incdec.ptr.3.i62 = getelementptr inbounds i16* %b, i64 4
  %13 = load i16* %incdec.ptr.2.i60, align 2, !tbaa !1
  %incdec.ptr1.3.i63 = getelementptr inbounds i16* %c, i64 4
  store i16 %13, i16* %incdec.ptr1.2.i61, align 2, !tbaa !1
  %14 = load i16* %incdec.ptr.3.i62, align 2, !tbaa !1
  %incdec.ptr1.4.i65 = getelementptr inbounds i16* %c, i64 5
  store i16 %14, i16* %incdec.ptr1.3.i63, align 2, !tbaa !1
  %15 = load i16* %arrayidx.i26, align 2, !tbaa !1
  store i16 %15, i16* %incdec.ptr1.4.i65, align 2, !tbaa !1
  br label %return

if.end4:                                          ; preds = %for.inc.i36, %if.end
  br i1 %cmp.i, label %for.body.i.i47, label %if.end13

for.body.i.i47:                                   ; preds = %if.end4, %for.inc.i.i51
  %i.012.i.i44 = phi i32 [ %inc.i.i49, %for.inc.i.i51 ], [ 0, %if.end4 ]
  %x.addr.011.i.i45 = phi i16* [ %incdec.ptr.i.i48, %for.inc.i.i51 ], [ %a, %if.end4 ]
  %16 = load i16* %x.addr.011.i.i45, align 2, !tbaa !1
  %cmp5.i.i46 = icmp eq i16 %16, 0
  br i1 %cmp5.i.i46, label %for.inc.i.i51, label %if.end13

for.inc.i.i51:                                    ; preds = %for.body.i.i47
  %incdec.ptr.i.i48 = getelementptr inbounds i16* %x.addr.011.i.i45, i64 1
  %inc.i.i49 = add nsw i32 %i.012.i.i44, 1
  %cmp2.i.i50 = icmp slt i32 %inc.i.i49, 5
  br i1 %cmp2.i.i50, label %for.body.i.i47, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.inc.i.i51
  br i1 %cmp.i28, label %for.body.i.i, label %if.end13

for.body.i.i:                                     ; preds = %land.lhs.true, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %land.lhs.true ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %b, %land.lhs.true ]
  %17 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %17, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.end13

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %land.lhs.true9

land.lhs.true9:                                   ; preds = %for.inc.i.i
  %cmp.unshifted = xor i16 %8, %0
  %cmp = icmp sgt i16 %cmp.unshifted, -1
  br i1 %cmp, label %if.end13, label %if.then12

if.then12:                                        ; preds = %land.lhs.true9
  tail call fastcc void @mtherr(i8* getelementptr inbounds ([5 x i8]* @.str6, i64 0, i64 0), i32 7)
  %scevgep.i = getelementptr i16* %c, i64 5
  %18 = bitcast i16* %c to i64*
  store i64 0, i64* %18, align 2
  %scevgep8.i = getelementptr i16* %c, i64 4
  store i16 -16384, i16* %scevgep8.i, align 2, !tbaa !1
  store i16 32767, i16* %scevgep.i, align 2, !tbaa !1
  br label %return

if.end13:                                         ; preds = %for.body.i.i47, %for.body.i.i, %land.lhs.true, %if.end4, %land.lhs.true9
  store i1 false, i1* @subflg, align 1
  tail call fastcc void @eadd1(i16* %a, i16* %b, i16* %c)
  br label %return

return:                                           ; preds = %if.end13, %if.then12, %if.then3, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @esub(i16* nocapture readonly %a, i16* nocapture readonly %b, i16* %c) #0 {
entry:
  %arrayidx.i = getelementptr inbounds i16* %a, i64 5
  %0 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %a, %entry ]
  %1 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %1, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %incdec.ptr.i25 = getelementptr inbounds i16* %a, i64 1
  %2 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr1.i = getelementptr inbounds i16* %c, i64 1
  store i16 %2, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds i16* %a, i64 2
  %3 = load i16* %incdec.ptr.i25, align 2, !tbaa !1
  %incdec.ptr1.1.i = getelementptr inbounds i16* %c, i64 2
  store i16 %3, i16* %incdec.ptr1.i, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds i16* %a, i64 3
  %4 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr1.2.i = getelementptr inbounds i16* %c, i64 3
  store i16 %4, i16* %incdec.ptr1.1.i, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds i16* %a, i64 4
  %5 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr1.3.i = getelementptr inbounds i16* %c, i64 4
  store i16 %5, i16* %incdec.ptr1.2.i, align 2, !tbaa !1
  %6 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr1.4.i = getelementptr inbounds i16* %c, i64 5
  store i16 %6, i16* %incdec.ptr1.3.i, align 2, !tbaa !1
  %7 = load i16* %arrayidx.i, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr1.4.i, align 2, !tbaa !1
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arrayidx.i26 = getelementptr inbounds i16* %b, i64 5
  %8 = load i16* %arrayidx.i26, align 2, !tbaa !1
  %and.i27 = and i16 %8, 32767
  %cmp.i28 = icmp eq i16 %and.i27, 32767
  br i1 %cmp.i28, label %for.body.i32, label %if.end4

for.body.i32:                                     ; preds = %if.end, %for.inc.i36
  %i.012.i29 = phi i32 [ %inc.i34, %for.inc.i36 ], [ 0, %if.end ]
  %x.addr.011.i30 = phi i16* [ %incdec.ptr.i33, %for.inc.i36 ], [ %b, %if.end ]
  %9 = load i16* %x.addr.011.i30, align 2, !tbaa !1
  %cmp5.i31 = icmp eq i16 %9, 0
  br i1 %cmp5.i31, label %for.inc.i36, label %if.then3

for.inc.i36:                                      ; preds = %for.body.i32
  %incdec.ptr.i33 = getelementptr inbounds i16* %x.addr.011.i30, i64 1
  %inc.i34 = add nsw i32 %i.012.i29, 1
  %cmp2.i35 = icmp slt i32 %inc.i34, 5
  br i1 %cmp2.i35, label %for.body.i32, label %if.end4

if.then3:                                         ; preds = %for.body.i32
  %incdec.ptr.i56 = getelementptr inbounds i16* %b, i64 1
  %10 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr1.i57 = getelementptr inbounds i16* %c, i64 1
  store i16 %10, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i58 = getelementptr inbounds i16* %b, i64 2
  %11 = load i16* %incdec.ptr.i56, align 2, !tbaa !1
  %incdec.ptr1.1.i59 = getelementptr inbounds i16* %c, i64 2
  store i16 %11, i16* %incdec.ptr1.i57, align 2, !tbaa !1
  %incdec.ptr.2.i60 = getelementptr inbounds i16* %b, i64 3
  %12 = load i16* %incdec.ptr.1.i58, align 2, !tbaa !1
  %incdec.ptr1.2.i61 = getelementptr inbounds i16* %c, i64 3
  store i16 %12, i16* %incdec.ptr1.1.i59, align 2, !tbaa !1
  %incdec.ptr.3.i62 = getelementptr inbounds i16* %b, i64 4
  %13 = load i16* %incdec.ptr.2.i60, align 2, !tbaa !1
  %incdec.ptr1.3.i63 = getelementptr inbounds i16* %c, i64 4
  store i16 %13, i16* %incdec.ptr1.2.i61, align 2, !tbaa !1
  %14 = load i16* %incdec.ptr.3.i62, align 2, !tbaa !1
  %incdec.ptr1.4.i65 = getelementptr inbounds i16* %c, i64 5
  store i16 %14, i16* %incdec.ptr1.3.i63, align 2, !tbaa !1
  %15 = load i16* %arrayidx.i26, align 2, !tbaa !1
  store i16 %15, i16* %incdec.ptr1.4.i65, align 2, !tbaa !1
  br label %return

if.end4:                                          ; preds = %for.inc.i36, %if.end
  br i1 %cmp.i, label %for.body.i.i47, label %if.end13

for.body.i.i47:                                   ; preds = %if.end4, %for.inc.i.i51
  %i.012.i.i44 = phi i32 [ %inc.i.i49, %for.inc.i.i51 ], [ 0, %if.end4 ]
  %x.addr.011.i.i45 = phi i16* [ %incdec.ptr.i.i48, %for.inc.i.i51 ], [ %a, %if.end4 ]
  %16 = load i16* %x.addr.011.i.i45, align 2, !tbaa !1
  %cmp5.i.i46 = icmp eq i16 %16, 0
  br i1 %cmp5.i.i46, label %for.inc.i.i51, label %if.end13

for.inc.i.i51:                                    ; preds = %for.body.i.i47
  %incdec.ptr.i.i48 = getelementptr inbounds i16* %x.addr.011.i.i45, i64 1
  %inc.i.i49 = add nsw i32 %i.012.i.i44, 1
  %cmp2.i.i50 = icmp slt i32 %inc.i.i49, 5
  br i1 %cmp2.i.i50, label %for.body.i.i47, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.inc.i.i51
  br i1 %cmp.i28, label %for.body.i.i, label %if.end13

for.body.i.i:                                     ; preds = %land.lhs.true, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %land.lhs.true ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %b, %land.lhs.true ]
  %17 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %17, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.end13

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %land.lhs.true9

land.lhs.true9:                                   ; preds = %for.inc.i.i
  %cmp.unshifted = xor i16 %8, %0
  %cmp = icmp sgt i16 %cmp.unshifted, -1
  br i1 %cmp, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true9
  tail call fastcc void @mtherr(i8* getelementptr inbounds ([5 x i8]* @.str6, i64 0, i64 0), i32 7)
  %scevgep.i = getelementptr i16* %c, i64 5
  %18 = bitcast i16* %c to i64*
  store i64 0, i64* %18, align 2
  %scevgep8.i = getelementptr i16* %c, i64 4
  store i16 -16384, i16* %scevgep8.i, align 2, !tbaa !1
  store i16 32767, i16* %scevgep.i, align 2, !tbaa !1
  br label %return

if.end13:                                         ; preds = %for.body.i.i47, %for.body.i.i, %land.lhs.true, %if.end4, %land.lhs.true9
  store i1 true, i1* @subflg, align 1
  tail call fastcc void @eadd1(i16* %a, i16* %b, i16* %c)
  br label %return

return:                                           ; preds = %if.end13, %if.then12, %if.then3, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @emul(i16* %a, i16* %b, i16* %c) #0 {
entry:
  %ai = alloca [9 x i16], align 16
  %bi = alloca [9 x i16], align 16
  %a.idx = getelementptr i16* %a, i64 5
  %a.idx.val = load i16* %a.idx, align 2, !tbaa !1
  %x.5.val.lobit.i = lshr i16 %a.idx.val, 15
  %b.idx = getelementptr i16* %b, i64 5
  %b.idx.val = load i16* %b.idx, align 2, !tbaa !1
  %x.5.val.lobit.i107 = lshr i16 %b.idx.val, 15
  %xor256 = xor i16 %x.5.val.lobit.i107, %x.5.val.lobit.i
  %and.i = and i16 %a.idx.val, 32767
  %cmp.i108 = icmp eq i16 %and.i, 32767
  br i1 %cmp.i108, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i109, %for.inc.i ], [ %a, %entry ]
  %0 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %0, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i109 = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %incdec.ptr.i110 = getelementptr inbounds i16* %a, i64 1
  %1 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr1.i = getelementptr inbounds i16* %c, i64 1
  store i16 %1, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds i16* %a, i64 2
  %2 = load i16* %incdec.ptr.i110, align 2, !tbaa !1
  %incdec.ptr1.1.i = getelementptr inbounds i16* %c, i64 2
  store i16 %2, i16* %incdec.ptr1.i, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds i16* %a, i64 3
  %3 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr1.2.i = getelementptr inbounds i16* %c, i64 3
  store i16 %3, i16* %incdec.ptr1.1.i, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds i16* %a, i64 4
  %4 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr1.3.i = getelementptr inbounds i16* %c, i64 4
  store i16 %4, i16* %incdec.ptr1.2.i, align 2, !tbaa !1
  %5 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr1.4.i = getelementptr inbounds i16* %c, i64 5
  store i16 %5, i16* %incdec.ptr1.3.i, align 2, !tbaa !1
  %6 = load i16* %a.idx, align 2, !tbaa !1
  store i16 %6, i16* %incdec.ptr1.4.i, align 2, !tbaa !1
  br label %if.end79

if.end:                                           ; preds = %for.inc.i, %entry
  %and.i113 = and i16 %b.idx.val, 32767
  %cmp.i114 = icmp eq i16 %and.i113, 32767
  br i1 %cmp.i114, label %for.body.i118, label %if.end6

for.body.i118:                                    ; preds = %if.end, %for.inc.i122
  %i.012.i115 = phi i32 [ %inc.i120, %for.inc.i122 ], [ 0, %if.end ]
  %x.addr.011.i116 = phi i16* [ %incdec.ptr.i119, %for.inc.i122 ], [ %b, %if.end ]
  %7 = load i16* %x.addr.011.i116, align 2, !tbaa !1
  %cmp5.i117 = icmp eq i16 %7, 0
  br i1 %cmp5.i117, label %for.inc.i122, label %if.then5

for.inc.i122:                                     ; preds = %for.body.i118
  %incdec.ptr.i119 = getelementptr inbounds i16* %x.addr.011.i116, i64 1
  %inc.i120 = add nsw i32 %i.012.i115, 1
  %cmp2.i121 = icmp slt i32 %inc.i120, 5
  br i1 %cmp2.i121, label %for.body.i118, label %if.end6

if.then5:                                         ; preds = %for.body.i118
  %incdec.ptr.i206 = getelementptr inbounds i16* %b, i64 1
  %8 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr1.i207 = getelementptr inbounds i16* %c, i64 1
  store i16 %8, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i208 = getelementptr inbounds i16* %b, i64 2
  %9 = load i16* %incdec.ptr.i206, align 2, !tbaa !1
  %incdec.ptr1.1.i209 = getelementptr inbounds i16* %c, i64 2
  store i16 %9, i16* %incdec.ptr1.i207, align 2, !tbaa !1
  %incdec.ptr.2.i210 = getelementptr inbounds i16* %b, i64 3
  %10 = load i16* %incdec.ptr.1.i208, align 2, !tbaa !1
  %incdec.ptr1.2.i211 = getelementptr inbounds i16* %c, i64 3
  store i16 %10, i16* %incdec.ptr1.1.i209, align 2, !tbaa !1
  %incdec.ptr.3.i212 = getelementptr inbounds i16* %b, i64 4
  %11 = load i16* %incdec.ptr.2.i210, align 2, !tbaa !1
  %incdec.ptr1.3.i213 = getelementptr inbounds i16* %c, i64 4
  store i16 %11, i16* %incdec.ptr1.2.i211, align 2, !tbaa !1
  %12 = load i16* %incdec.ptr.3.i212, align 2, !tbaa !1
  %incdec.ptr1.4.i215 = getelementptr inbounds i16* %c, i64 5
  store i16 %12, i16* %incdec.ptr1.3.i213, align 2, !tbaa !1
  %13 = load i16* %b.idx, align 2, !tbaa !1
  store i16 %13, i16* %incdec.ptr1.4.i215, align 2, !tbaa !1
  br label %if.end79

if.end6:                                          ; preds = %for.inc.i122, %if.end
  br i1 %cmp.i108, label %for.body.i.i222, label %lor.lhs.false

for.body.i.i222:                                  ; preds = %if.end6, %for.inc.i.i226
  %i.012.i.i219 = phi i32 [ %inc.i.i224, %for.inc.i.i226 ], [ 0, %if.end6 ]
  %x.addr.011.i.i220 = phi i16* [ %incdec.ptr.i.i223, %for.inc.i.i226 ], [ %a, %if.end6 ]
  %14 = load i16* %x.addr.011.i.i220, align 2, !tbaa !1
  %cmp5.i.i221 = icmp eq i16 %14, 0
  br i1 %cmp5.i.i221, label %for.inc.i.i226, label %lor.lhs.false

for.inc.i.i226:                                   ; preds = %for.body.i.i222
  %incdec.ptr.i.i223 = getelementptr inbounds i16* %x.addr.011.i.i220, i64 1
  %inc.i.i224 = add nsw i32 %i.012.i.i219, 1
  %cmp2.i.i225 = icmp slt i32 %inc.i.i224, 5
  br i1 %cmp2.i.i225, label %for.body.i.i222, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.inc.i.i226
  %call9 = call fastcc i32 @ecmp(i16* %b, i16* getelementptr inbounds ([6 x i16]* @ezero, i64 0, i64 0))
  %cmp = icmp eq i32 %call9, 0
  br i1 %cmp, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.i.i222, %if.end6, %land.lhs.true
  br i1 %cmp.i114, label %for.body.i.i237, label %if.end16

for.body.i.i237:                                  ; preds = %lor.lhs.false, %for.inc.i.i241
  %i.012.i.i234 = phi i32 [ %inc.i.i239, %for.inc.i.i241 ], [ 0, %lor.lhs.false ]
  %x.addr.011.i.i235 = phi i16* [ %incdec.ptr.i.i238, %for.inc.i.i241 ], [ %b, %lor.lhs.false ]
  %15 = load i16* %x.addr.011.i.i235, align 2, !tbaa !1
  %cmp5.i.i236 = icmp eq i16 %15, 0
  br i1 %cmp5.i.i236, label %for.inc.i.i241, label %if.end16

for.inc.i.i241:                                   ; preds = %for.body.i.i237
  %incdec.ptr.i.i238 = getelementptr inbounds i16* %x.addr.011.i.i235, i64 1
  %inc.i.i239 = add nsw i32 %i.012.i.i234, 1
  %cmp2.i.i240 = icmp slt i32 %inc.i.i239, 5
  br i1 %cmp2.i.i240, label %for.body.i.i237, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %for.inc.i.i241
  %call13 = call fastcc i32 @ecmp(i16* %a, i16* getelementptr inbounds ([6 x i16]* @ezero, i64 0, i64 0))
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true12, %land.lhs.true
  call fastcc void @mtherr(i8* getelementptr inbounds ([5 x i8]* @.str10, i64 0, i64 0), i32 7)
  %scevgep.i204 = getelementptr i16* %c, i64 5
  %16 = bitcast i16* %c to i64*
  store i64 0, i64* %16, align 2
  %scevgep8.i = getelementptr i16* %c, i64 4
  store i16 -16384, i16* %scevgep8.i, align 2, !tbaa !1
  %shl.i = shl nuw i16 %xor256, 15
  %or.i205 = or i16 %shl.i, 32767
  store i16 %or.i205, i16* %scevgep.i204, align 2, !tbaa !1
  br label %if.end79

if.end16:                                         ; preds = %for.body.i.i237, %lor.lhs.false, %land.lhs.true12
  br i1 %cmp.i108, label %for.body.i.i195, label %lor.lhs.false19

for.body.i.i195:                                  ; preds = %if.end16, %for.inc.i.i199
  %i.012.i.i192 = phi i32 [ %inc.i.i197, %for.inc.i.i199 ], [ 0, %if.end16 ]
  %x.addr.011.i.i193 = phi i16* [ %incdec.ptr.i.i196, %for.inc.i.i199 ], [ %a, %if.end16 ]
  %17 = load i16* %x.addr.011.i.i193, align 2, !tbaa !1
  %cmp5.i.i194 = icmp eq i16 %17, 0
  br i1 %cmp5.i.i194, label %for.inc.i.i199, label %lor.lhs.false19

for.inc.i.i199:                                   ; preds = %for.body.i.i195
  %incdec.ptr.i.i196 = getelementptr inbounds i16* %x.addr.011.i.i193, i64 1
  %inc.i.i197 = add nsw i32 %i.012.i.i192, 1
  %cmp2.i.i198 = icmp slt i32 %inc.i.i197, 5
  br i1 %cmp2.i.i198, label %for.body.i.i195, label %if.then22

lor.lhs.false19:                                  ; preds = %for.body.i.i195, %if.end16
  br i1 %cmp.i114, label %for.body.i.i183, label %if.end23

for.body.i.i183:                                  ; preds = %lor.lhs.false19, %for.inc.i.i187
  %i.012.i.i180 = phi i32 [ %inc.i.i185, %for.inc.i.i187 ], [ 0, %lor.lhs.false19 ]
  %x.addr.011.i.i181 = phi i16* [ %incdec.ptr.i.i184, %for.inc.i.i187 ], [ %b, %lor.lhs.false19 ]
  %18 = load i16* %x.addr.011.i.i181, align 2, !tbaa !1
  %cmp5.i.i182 = icmp eq i16 %18, 0
  br i1 %cmp5.i.i182, label %for.inc.i.i187, label %if.end23

for.inc.i.i187:                                   ; preds = %for.body.i.i183
  %incdec.ptr.i.i184 = getelementptr inbounds i16* %x.addr.011.i.i181, i64 1
  %inc.i.i185 = add nsw i32 %i.012.i.i180, 1
  %cmp2.i.i186 = icmp slt i32 %inc.i.i185, 5
  br i1 %cmp2.i.i186, label %for.body.i.i183, label %if.then22

if.then22:                                        ; preds = %for.inc.i.i199, %for.inc.i.i187
  %x5.i = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i, i8 0, i64 10, i32 2, i1 false) #1
  %scevgep.i = getelementptr i16* %c, i64 5
  %19 = load i16* %scevgep.i, align 2, !tbaa !1
  %or.i177 = or i16 %19, 32767
  store i16 %or.i177, i16* %scevgep.i, align 2, !tbaa !1
  br label %mulsign

if.end23:                                         ; preds = %for.body.i.i183, %lor.lhs.false19
  %arraydecay = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 0
  %incdec.ptr.i136 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 1
  %.lobit.i137 = ashr i16 %a.idx.val, 15
  store i16 %.lobit.i137, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i138 = getelementptr inbounds i16* %a, i64 4
  %incdec.ptr3.i139 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 2
  store i16 %and.i, i16* %incdec.ptr.i136, align 2, !tbaa !1
  br i1 %cmp.i108, label %for.body.i.i148, label %if.end28.i175

for.body.i.i148:                                  ; preds = %if.end23, %for.inc.i.i152
  %i.012.i.i145 = phi i32 [ %inc.i.i150, %for.inc.i.i152 ], [ 0, %if.end23 ]
  %x.addr.011.i.i146 = phi i16* [ %incdec.ptr.i.i149, %for.inc.i.i152 ], [ %a, %if.end23 ]
  %20 = load i16* %x.addr.011.i.i146, align 2, !tbaa !1
  %cmp5.i.i147 = icmp eq i16 %20, 0
  br i1 %cmp5.i.i147, label %for.inc.i.i152, label %if.then13.i165

for.inc.i.i152:                                   ; preds = %for.body.i.i148
  %incdec.ptr.i.i149 = getelementptr inbounds i16* %x.addr.011.i.i146, i64 1
  %inc.i.i150 = add nsw i32 %i.012.i.i145, 1
  %cmp2.i.i151 = icmp slt i32 %inc.i.i150, 5
  br i1 %cmp2.i.i151, label %for.body.i.i148, label %for.cond20.preheader.i154

for.cond20.preheader.i154:                        ; preds = %for.inc.i.i152
  %scevgep69.i153 = bitcast i16* %incdec.ptr3.i139 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i153, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit176

if.then13.i165:                                   ; preds = %for.body.i.i148
  %incdec.ptr14.i155 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i139, align 4, !tbaa !1
  %incdec.ptr17.i156 = getelementptr inbounds i16* %a, i64 3
  %21 = load i16* %incdec.ptr2.i138, align 2, !tbaa !1
  %incdec.ptr18.i157 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %21, i16* %incdec.ptr14.i155, align 2, !tbaa !1
  %incdec.ptr17.1.i158 = getelementptr inbounds i16* %a, i64 2
  %22 = load i16* %incdec.ptr17.i156, align 2, !tbaa !1
  %incdec.ptr18.1.i159 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %22, i16* %incdec.ptr18.i157, align 8, !tbaa !1
  %incdec.ptr17.2.i160 = getelementptr inbounds i16* %a, i64 1
  %23 = load i16* %incdec.ptr17.1.i158, align 2, !tbaa !1
  %incdec.ptr18.2.i161 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %23, i16* %incdec.ptr18.1.i159, align 2, !tbaa !1
  %24 = load i16* %incdec.ptr17.2.i160, align 2, !tbaa !1
  %incdec.ptr18.3.i162 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %24, i16* %incdec.ptr18.2.i161, align 4, !tbaa !1
  %incdec.ptr17.4.i163 = getelementptr inbounds i16* %a, i64 -1
  %25 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr18.4.i164 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 8
  store i16 %25, i16* %incdec.ptr18.3.i162, align 2, !tbaa !1
  %26 = load i16* %incdec.ptr17.4.i163, align 2, !tbaa !1
  store i16 %26, i16* %incdec.ptr18.4.i164, align 16, !tbaa !1
  br label %emovi.exit176

if.end28.i175:                                    ; preds = %if.end23
  %incdec.ptr29.i166 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i139, align 4, !tbaa !1
  %incdec.ptr34.i167 = getelementptr inbounds i16* %a, i64 3
  %27 = load i16* %incdec.ptr2.i138, align 2, !tbaa !1
  %incdec.ptr35.i168 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %27, i16* %incdec.ptr29.i166, align 2, !tbaa !1
  %incdec.ptr34.1.i169 = getelementptr inbounds i16* %a, i64 2
  %28 = load i16* %incdec.ptr34.i167, align 2, !tbaa !1
  %incdec.ptr35.1.i170 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %28, i16* %incdec.ptr35.i168, align 8, !tbaa !1
  %incdec.ptr34.2.i171 = getelementptr inbounds i16* %a, i64 1
  %29 = load i16* %incdec.ptr34.1.i169, align 2, !tbaa !1
  %incdec.ptr35.2.i172 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %29, i16* %incdec.ptr35.1.i170, align 2, !tbaa !1
  %30 = load i16* %incdec.ptr34.2.i171, align 2, !tbaa !1
  %incdec.ptr35.3.i173 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %30, i16* %incdec.ptr35.2.i172, align 4, !tbaa !1
  %31 = load i16* %a, align 2, !tbaa !1
  store i16 %31, i16* %incdec.ptr35.3.i173, align 2, !tbaa !1
  %scevgep70.i174 = getelementptr [9 x i16]* %ai, i64 0, i64 8
  store i16 0, i16* %scevgep70.i174, align 16, !tbaa !1
  br label %emovi.exit176

emovi.exit176:                                    ; preds = %for.cond20.preheader.i154, %if.then13.i165, %if.end28.i175
  %arraydecay24 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 0
  %incdec.ptr.i126 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 1
  %.lobit.i = ashr i16 %b.idx.val, 15
  store i16 %.lobit.i, i16* %arraydecay24, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %b, i64 4
  %incdec.ptr3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 2
  store i16 %and.i113, i16* %incdec.ptr.i126, align 2, !tbaa !1
  br i1 %cmp.i114, label %for.body.i.i129, label %if.end28.i

for.body.i.i129:                                  ; preds = %emovi.exit176, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %emovi.exit176 ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %b, %emovi.exit176 ]
  %32 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %32, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then13.i

for.inc.i.i:                                      ; preds = %for.body.i.i129
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i130 = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i130, label %for.body.i.i129, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i
  %scevgep69.i = bitcast i16* %incdec.ptr3.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i129
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %b, i64 3
  %33 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i131 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  store i16 %33, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %b, i64 2
  %34 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i132 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  store i16 %34, i16* %incdec.ptr18.i131, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %b, i64 1
  %35 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i133 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  store i16 %35, i16* %incdec.ptr18.1.i132, align 2, !tbaa !1
  %36 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i134 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %36, i16* %incdec.ptr18.2.i133, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %b, i64 -1
  %37 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 8
  store i16 %37, i16* %incdec.ptr18.3.i134, align 2, !tbaa !1
  %38 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %38, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

if.end28.i:                                       ; preds = %emovi.exit176
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %b, i64 3
  %39 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  store i16 %39, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %b, i64 2
  %40 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  store i16 %40, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %b, i64 1
  %41 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  store i16 %41, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %42 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %42, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %43 = load i16* %b, align 2, !tbaa !1
  store i16 %43, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %bi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i, %if.end28.i
  %conv = zext i16 %and.i to i32
  %conv26 = zext i16 %and.i113 to i32
  %cmp29 = icmp eq i16 %and.i, 0
  br i1 %cmp29, label %for.body, label %mnzer1

for.cond:                                         ; preds = %for.body
  %44 = trunc i64 %indvars.iv259 to i32
  %cmp32 = icmp slt i32 %44, 8
  br i1 %cmp32, label %for.cond.for.body_crit_edge, label %for.end

for.cond.for.body_crit_edge:                      ; preds = %for.cond
  %arrayidx34.phi.trans.insert = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 %indvars.iv259
  %.pre261 = load i16* %arrayidx34.phi.trans.insert, align 2, !tbaa !1
  %phitmp263 = icmp eq i16 %.pre261, 0
  %phitmp264 = add i64 %indvars.iv259, 1
  br label %for.body

for.body:                                         ; preds = %emovi.exit, %for.cond.for.body_crit_edge
  %45 = phi i1 [ %phitmp263, %for.cond.for.body_crit_edge ], [ true, %emovi.exit ]
  %indvars.iv259 = phi i64 [ %phitmp264, %for.cond.for.body_crit_edge ], [ 2, %emovi.exit ]
  br i1 %45, label %for.cond, label %if.then38

if.then38:                                        ; preds = %for.body
  %call40 = call fastcc i32 @enormlz(i16* %arraydecay)
  %sub = sub nsw i32 %conv, %call40
  %.pr = load i16* %incdec.ptr.i126, align 2, !tbaa !1
  br label %mnzer1

for.end:                                          ; preds = %for.cond
  %x4.i111 = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i111, i8 0, i64 12, i32 2, i1 false) #1
  br label %mulsign

mnzer1:                                           ; preds = %emovi.exit, %if.then38
  %46 = phi i16 [ %and.i113, %emovi.exit ], [ %.pr, %if.then38 ]
  %lta.0 = phi i32 [ %conv, %emovi.exit ], [ %sub, %if.then38 ]
  %cmp45 = icmp eq i16 %46, 0
  br i1 %cmp45, label %for.body51, label %mnzer2

for.cond48:                                       ; preds = %for.body51
  %47 = trunc i64 %indvars.iv to i32
  %cmp49 = icmp slt i32 %47, 8
  br i1 %cmp49, label %for.cond48.for.body51_crit_edge, label %for.end64

for.cond48.for.body51_crit_edge:                  ; preds = %for.cond48
  %arrayidx53.phi.trans.insert = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 %indvars.iv
  %.pre = load i16* %arrayidx53.phi.trans.insert, align 2, !tbaa !1
  %phitmp = icmp eq i16 %.pre, 0
  %phitmp262 = add i64 %indvars.iv, 1
  br label %for.body51

for.body51:                                       ; preds = %mnzer1, %for.cond48.for.body51_crit_edge
  %48 = phi i1 [ %phitmp, %for.cond48.for.body51_crit_edge ], [ true, %mnzer1 ]
  %indvars.iv = phi i64 [ %phitmp262, %for.cond48.for.body51_crit_edge ], [ 2, %mnzer1 ]
  br i1 %48, label %for.cond48, label %if.then57

if.then57:                                        ; preds = %for.body51
  %call59 = call fastcc i32 @enormlz(i16* %arraydecay24)
  %sub60 = sub nsw i32 %conv26, %call59
  br label %mnzer2

for.end64:                                        ; preds = %for.cond48
  %x4.i = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 12, i32 2, i1 false) #1
  br label %mulsign

mnzer2:                                           ; preds = %mnzer1, %if.then57
  %ltb.0 = phi i32 [ %sub60, %if.then57 ], [ %conv26, %mnzer1 ]
  %call68 = call fastcc i32 @emulm(i16* %arraydecay, i16* %arraydecay24)
  %add = add i32 %lta.0, -16382
  %sub69 = add i32 %add, %ltb.0
  call fastcc void @emdnorm(i16* %arraydecay24, i32 %call68, i32 0, i32 %sub69, i32 64)
  %add.ptr.i = getelementptr inbounds i16* %c, i64 5
  %49 = bitcast [9 x i16]* %bi to i32*
  %50 = load i32* %49, align 16
  %51 = bitcast [9 x i16]* %bi to i64*
  %52 = load i64* %51, align 16
  %53 = trunc i64 %52 to i32
  %54 = trunc i64 %52 to i16
  %tobool.i = icmp eq i16 %54, 0
  %55 = lshr i32 %53, 16
  %56 = trunc i32 %55 to i16
  %or.i = or i16 %56, -32768
  %storemerge.i = select i1 %tobool.i, i16 %56, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i, align 2, !tbaa !1
  %.mask = and i32 %50, -65536
  %cmp.i = icmp eq i32 %.mask, 2147418112
  %57 = trunc i64 %52 to i16
  br i1 %cmp.i, label %for.body.i.i, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %58 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %58, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end13.i

for.body.i.i:                                     ; preds = %mnzer2, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %mnzer2 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 %indvars.iv.i.i
  %59 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %59, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i
  %cmp.i32.i = icmp ne i16 %57, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %60 = bitcast i16* %c to i64*
  store i64 0, i64* %60, align 2
  %scevgep8.i.i = getelementptr i16* %c, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %mulsign

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %mulsign

if.end14.i:                                       ; preds = %mnzer2
  %61 = lshr i64 %52, 48
  %62 = trunc i64 %61 to i16
  %q.0.i = getelementptr inbounds i16* %c, i64 4
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds i16* %c, i64 3
  store i16 %62, i16* %q.0.i, align 2, !tbaa !1
  %63 = bitcast i16* %incdec.ptr18.i to i64*
  %64 = load i64* %63, align 8
  %65 = trunc i64 %64 to i32
  %66 = trunc i64 %64 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %c, i64 2
  store i16 %66, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %67 = lshr i32 %65, 16
  %68 = trunc i32 %67 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %c, i64 1
  store i16 %68, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %69 = lshr i64 %64, 32
  %70 = trunc i64 %69 to i16
  store i16 %70, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %71 = lshr i64 %64, 48
  %72 = trunc i64 %71 to i16
  store i16 %72, i16* %c, align 2, !tbaa !1
  br label %mulsign

mulsign:                                          ; preds = %if.end14.i, %if.end13.i, %if.then11.i, %for.end64, %for.end, %if.then22
  %73 = phi i16 [ %storemerge.i, %if.end14.i ], [ %or.i.i, %if.end13.i ], [ %or.i31.i, %if.then11.i ], [ 0, %for.end64 ], [ 0, %for.end ], [ %or.i177, %if.then22 ]
  %tobool72 = icmp eq i16 %x.5.val.lobit.i, %x.5.val.lobit.i107
  %add.ptr = getelementptr inbounds i16* %c, i64 5
  br i1 %tobool72, label %if.else, label %if.then73

if.then73:                                        ; preds = %mulsign
  %or = or i16 %73, -32768
  store i16 %or, i16* %add.ptr, align 2, !tbaa !1
  br label %if.end79

if.else:                                          ; preds = %mulsign
  %and = and i16 %73, 32767
  store i16 %and, i16* %add.ptr, align 2, !tbaa !1
  br label %if.end79

if.end79:                                         ; preds = %if.then, %if.then5, %if.then15, %if.else, %if.then73
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @ediv(i16* %a, i16* %b, i16* %c) #0 {
entry:
  %ai = alloca [9 x i16], align 16
  %bi = alloca [9 x i16], align 16
  %a.idx = getelementptr i16* %a, i64 5
  %a.idx.val = load i16* %a.idx, align 2, !tbaa !1
  %x.5.val.lobit.i = lshr i16 %a.idx.val, 15
  %b.idx = getelementptr i16* %b, i64 5
  %b.idx.val = load i16* %b.idx, align 2, !tbaa !1
  %x.5.val.lobit.i110 = lshr i16 %b.idx.val, 15
  %xor262 = xor i16 %x.5.val.lobit.i110, %x.5.val.lobit.i
  %and.i = and i16 %a.idx.val, 32767
  %cmp.i111 = icmp eq i16 %and.i, 32767
  br i1 %cmp.i111, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i112, %for.inc.i ], [ %a, %entry ]
  %0 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %0, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i112 = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %incdec.ptr.i113 = getelementptr inbounds i16* %a, i64 1
  %1 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr1.i = getelementptr inbounds i16* %c, i64 1
  store i16 %1, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds i16* %a, i64 2
  %2 = load i16* %incdec.ptr.i113, align 2, !tbaa !1
  %incdec.ptr1.1.i = getelementptr inbounds i16* %c, i64 2
  store i16 %2, i16* %incdec.ptr1.i, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds i16* %a, i64 3
  %3 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr1.2.i = getelementptr inbounds i16* %c, i64 3
  store i16 %3, i16* %incdec.ptr1.1.i, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds i16* %a, i64 4
  %4 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr1.3.i = getelementptr inbounds i16* %c, i64 4
  store i16 %4, i16* %incdec.ptr1.2.i, align 2, !tbaa !1
  %5 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr1.4.i = getelementptr inbounds i16* %c, i64 5
  store i16 %5, i16* %incdec.ptr1.3.i, align 2, !tbaa !1
  %6 = load i16* %a.idx, align 2, !tbaa !1
  store i16 %6, i16* %incdec.ptr1.4.i, align 2, !tbaa !1
  br label %if.end80

if.end:                                           ; preds = %for.inc.i, %entry
  %and.i116 = and i16 %b.idx.val, 32767
  %cmp.i117 = icmp eq i16 %and.i116, 32767
  br i1 %cmp.i117, label %for.body.i121, label %if.end6

for.body.i121:                                    ; preds = %if.end, %for.inc.i125
  %i.012.i118 = phi i32 [ %inc.i123, %for.inc.i125 ], [ 0, %if.end ]
  %x.addr.011.i119 = phi i16* [ %incdec.ptr.i122, %for.inc.i125 ], [ %b, %if.end ]
  %7 = load i16* %x.addr.011.i119, align 2, !tbaa !1
  %cmp5.i120 = icmp eq i16 %7, 0
  br i1 %cmp5.i120, label %for.inc.i125, label %if.then5

for.inc.i125:                                     ; preds = %for.body.i121
  %incdec.ptr.i122 = getelementptr inbounds i16* %x.addr.011.i119, i64 1
  %inc.i123 = add nsw i32 %i.012.i118, 1
  %cmp2.i124 = icmp slt i32 %inc.i123, 5
  br i1 %cmp2.i124, label %for.body.i121, label %if.end6

if.then5:                                         ; preds = %for.body.i121
  %incdec.ptr.i128 = getelementptr inbounds i16* %b, i64 1
  %8 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr1.i129 = getelementptr inbounds i16* %c, i64 1
  store i16 %8, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i130 = getelementptr inbounds i16* %b, i64 2
  %9 = load i16* %incdec.ptr.i128, align 2, !tbaa !1
  %incdec.ptr1.1.i131 = getelementptr inbounds i16* %c, i64 2
  store i16 %9, i16* %incdec.ptr1.i129, align 2, !tbaa !1
  %incdec.ptr.2.i132 = getelementptr inbounds i16* %b, i64 3
  %10 = load i16* %incdec.ptr.1.i130, align 2, !tbaa !1
  %incdec.ptr1.2.i133 = getelementptr inbounds i16* %c, i64 3
  store i16 %10, i16* %incdec.ptr1.1.i131, align 2, !tbaa !1
  %incdec.ptr.3.i134 = getelementptr inbounds i16* %b, i64 4
  %11 = load i16* %incdec.ptr.2.i132, align 2, !tbaa !1
  %incdec.ptr1.3.i135 = getelementptr inbounds i16* %c, i64 4
  store i16 %11, i16* %incdec.ptr1.2.i133, align 2, !tbaa !1
  %12 = load i16* %incdec.ptr.3.i134, align 2, !tbaa !1
  %incdec.ptr1.4.i137 = getelementptr inbounds i16* %c, i64 5
  store i16 %12, i16* %incdec.ptr1.3.i135, align 2, !tbaa !1
  %13 = load i16* %b.idx, align 2, !tbaa !1
  store i16 %13, i16* %incdec.ptr1.4.i137, align 2, !tbaa !1
  br label %if.end80

if.end6:                                          ; preds = %for.inc.i125, %if.end
  %call7 = call fastcc i32 @ecmp(i16* %a, i16* getelementptr inbounds ([6 x i16]* @ezero, i64 0, i64 0))
  %cmp = icmp eq i32 %call7, 0
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %if.end6
  %call8 = call fastcc i32 @ecmp(i16* %b, i16* getelementptr inbounds ([6 x i16]* @ezero, i64 0, i64 0))
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end6
  br i1 %cmp.i111, label %for.body.i.i228, label %if.end16

for.body.i.i228:                                  ; preds = %lor.lhs.false, %for.inc.i.i232
  %i.012.i.i225 = phi i32 [ %inc.i.i230, %for.inc.i.i232 ], [ 0, %lor.lhs.false ]
  %x.addr.011.i.i226 = phi i16* [ %incdec.ptr.i.i229, %for.inc.i.i232 ], [ %a, %lor.lhs.false ]
  %14 = load i16* %x.addr.011.i.i226, align 2, !tbaa !1
  %cmp5.i.i227 = icmp eq i16 %14, 0
  br i1 %cmp5.i.i227, label %for.inc.i.i232, label %if.end16

for.inc.i.i232:                                   ; preds = %for.body.i.i228
  %incdec.ptr.i.i229 = getelementptr inbounds i16* %x.addr.011.i.i226, i64 1
  %inc.i.i230 = add nsw i32 %i.012.i.i225, 1
  %cmp2.i.i231 = icmp slt i32 %inc.i.i230, 5
  br i1 %cmp2.i.i231, label %for.body.i.i228, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %for.inc.i.i232
  br i1 %cmp.i117, label %for.body.i.i243, label %if.end20

for.body.i.i243:                                  ; preds = %land.lhs.true12, %for.inc.i.i247
  %i.012.i.i240 = phi i32 [ %inc.i.i245, %for.inc.i.i247 ], [ 0, %land.lhs.true12 ]
  %x.addr.011.i.i241 = phi i16* [ %incdec.ptr.i.i244, %for.inc.i.i247 ], [ %b, %land.lhs.true12 ]
  %15 = load i16* %x.addr.011.i.i241, align 2, !tbaa !1
  %cmp5.i.i242 = icmp eq i16 %15, 0
  br i1 %cmp5.i.i242, label %for.inc.i.i247, label %if.end16

for.inc.i.i247:                                   ; preds = %for.body.i.i243
  %incdec.ptr.i.i244 = getelementptr inbounds i16* %x.addr.011.i.i241, i64 1
  %inc.i.i245 = add nsw i32 %i.012.i.i240, 1
  %cmp2.i.i246 = icmp slt i32 %inc.i.i245, 5
  br i1 %cmp2.i.i246, label %for.body.i.i243, label %if.then15

if.then15:                                        ; preds = %for.inc.i.i247, %land.lhs.true
  call fastcc void @mtherr(i8* getelementptr inbounds ([5 x i8]* @.str8, i64 0, i64 0), i32 7)
  %scevgep.i220 = getelementptr i16* %c, i64 5
  %16 = bitcast i16* %c to i64*
  store i64 0, i64* %16, align 2
  %scevgep8.i = getelementptr i16* %c, i64 4
  store i16 -16384, i16* %scevgep8.i, align 2, !tbaa !1
  %shl.i = shl nuw i16 %xor262, 15
  %or.i221 = or i16 %shl.i, 32767
  store i16 %or.i221, i16* %scevgep.i220, align 2, !tbaa !1
  br label %if.end80

if.end16:                                         ; preds = %for.body.i.i228, %for.body.i.i243, %lor.lhs.false
  br i1 %cmp.i117, label %for.body.i.i211, label %if.end20

for.body.i.i211:                                  ; preds = %if.end16, %for.inc.i.i215
  %i.012.i.i208 = phi i32 [ %inc.i.i213, %for.inc.i.i215 ], [ 0, %if.end16 ]
  %x.addr.011.i.i209 = phi i16* [ %incdec.ptr.i.i212, %for.inc.i.i215 ], [ %b, %if.end16 ]
  %17 = load i16* %x.addr.011.i.i209, align 2, !tbaa !1
  %cmp5.i.i210 = icmp eq i16 %17, 0
  br i1 %cmp5.i.i210, label %for.inc.i.i215, label %if.end20

for.inc.i.i215:                                   ; preds = %for.body.i.i211
  %incdec.ptr.i.i212 = getelementptr inbounds i16* %x.addr.011.i.i209, i64 1
  %inc.i.i213 = add nsw i32 %i.012.i.i208, 1
  %cmp2.i.i214 = icmp slt i32 %inc.i.i213, 5
  br i1 %cmp2.i.i214, label %for.body.i.i211, label %if.then19

if.then19:                                        ; preds = %for.inc.i.i215
  %x5.i202 = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i202, i8 0, i64 10, i32 2, i1 false) #1
  %scevgep.i203 = getelementptr i16* %c, i64 5
  %18 = load i16* %scevgep.i203, align 2, !tbaa !1
  %or.i204 = or i16 %18, 32767
  store i16 %or.i204, i16* %scevgep.i203, align 2, !tbaa !1
  br label %divsign

if.end20:                                         ; preds = %for.body.i.i211, %land.lhs.true12, %if.end16
  br i1 %cmp.i111, label %for.body.i.i196, label %if.end24

for.body.i.i196:                                  ; preds = %if.end20, %for.inc.i.i200
  %i.012.i.i193 = phi i32 [ %inc.i.i198, %for.inc.i.i200 ], [ 0, %if.end20 ]
  %x.addr.011.i.i194 = phi i16* [ %incdec.ptr.i.i197, %for.inc.i.i200 ], [ %a, %if.end20 ]
  %19 = load i16* %x.addr.011.i.i194, align 2, !tbaa !1
  %cmp5.i.i195 = icmp eq i16 %19, 0
  br i1 %cmp5.i.i195, label %for.inc.i.i200, label %if.end24

for.inc.i.i200:                                   ; preds = %for.body.i.i196
  %incdec.ptr.i.i197 = getelementptr inbounds i16* %x.addr.011.i.i194, i64 1
  %inc.i.i198 = add nsw i32 %i.012.i.i193, 1
  %cmp2.i.i199 = icmp slt i32 %inc.i.i198, 5
  br i1 %cmp2.i.i199, label %for.body.i.i196, label %if.then23

if.then23:                                        ; preds = %for.inc.i.i200
  %x4.i190 = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i190, i8 0, i64 12, i32 2, i1 false) #1
  br label %divsign

if.end24:                                         ; preds = %for.body.i.i196, %if.end20
  %arraydecay = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 0
  %incdec.ptr.i149 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 1
  %.lobit.i150 = ashr i16 %a.idx.val, 15
  store i16 %.lobit.i150, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i151 = getelementptr inbounds i16* %a, i64 4
  %incdec.ptr3.i152 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 2
  store i16 %and.i, i16* %incdec.ptr.i149, align 2, !tbaa !1
  br i1 %cmp.i111, label %for.body.i.i161, label %if.end28.i188

for.body.i.i161:                                  ; preds = %if.end24, %for.inc.i.i165
  %i.012.i.i158 = phi i32 [ %inc.i.i163, %for.inc.i.i165 ], [ 0, %if.end24 ]
  %x.addr.011.i.i159 = phi i16* [ %incdec.ptr.i.i162, %for.inc.i.i165 ], [ %a, %if.end24 ]
  %20 = load i16* %x.addr.011.i.i159, align 2, !tbaa !1
  %cmp5.i.i160 = icmp eq i16 %20, 0
  br i1 %cmp5.i.i160, label %for.inc.i.i165, label %if.then13.i178

for.inc.i.i165:                                   ; preds = %for.body.i.i161
  %incdec.ptr.i.i162 = getelementptr inbounds i16* %x.addr.011.i.i159, i64 1
  %inc.i.i163 = add nsw i32 %i.012.i.i158, 1
  %cmp2.i.i164 = icmp slt i32 %inc.i.i163, 5
  br i1 %cmp2.i.i164, label %for.body.i.i161, label %for.cond20.preheader.i167

for.cond20.preheader.i167:                        ; preds = %for.inc.i.i165
  %scevgep69.i166 = bitcast i16* %incdec.ptr3.i152 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i166, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit189

if.then13.i178:                                   ; preds = %for.body.i.i161
  %incdec.ptr14.i168 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i152, align 4, !tbaa !1
  %incdec.ptr17.i169 = getelementptr inbounds i16* %a, i64 3
  %21 = load i16* %incdec.ptr2.i151, align 2, !tbaa !1
  %incdec.ptr18.i170 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %21, i16* %incdec.ptr14.i168, align 2, !tbaa !1
  %incdec.ptr17.1.i171 = getelementptr inbounds i16* %a, i64 2
  %22 = load i16* %incdec.ptr17.i169, align 2, !tbaa !1
  %incdec.ptr18.1.i172 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %22, i16* %incdec.ptr18.i170, align 8, !tbaa !1
  %incdec.ptr17.2.i173 = getelementptr inbounds i16* %a, i64 1
  %23 = load i16* %incdec.ptr17.1.i171, align 2, !tbaa !1
  %incdec.ptr18.2.i174 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %23, i16* %incdec.ptr18.1.i172, align 2, !tbaa !1
  %24 = load i16* %incdec.ptr17.2.i173, align 2, !tbaa !1
  %incdec.ptr18.3.i175 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %24, i16* %incdec.ptr18.2.i174, align 4, !tbaa !1
  %incdec.ptr17.4.i176 = getelementptr inbounds i16* %a, i64 -1
  %25 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr18.4.i177 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 8
  store i16 %25, i16* %incdec.ptr18.3.i175, align 2, !tbaa !1
  %26 = load i16* %incdec.ptr17.4.i176, align 2, !tbaa !1
  store i16 %26, i16* %incdec.ptr18.4.i177, align 16, !tbaa !1
  br label %emovi.exit189

if.end28.i188:                                    ; preds = %if.end24
  %incdec.ptr29.i179 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i152, align 4, !tbaa !1
  %incdec.ptr34.i180 = getelementptr inbounds i16* %a, i64 3
  %27 = load i16* %incdec.ptr2.i151, align 2, !tbaa !1
  %incdec.ptr35.i181 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %27, i16* %incdec.ptr29.i179, align 2, !tbaa !1
  %incdec.ptr34.1.i182 = getelementptr inbounds i16* %a, i64 2
  %28 = load i16* %incdec.ptr34.i180, align 2, !tbaa !1
  %incdec.ptr35.1.i183 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %28, i16* %incdec.ptr35.i181, align 8, !tbaa !1
  %incdec.ptr34.2.i184 = getelementptr inbounds i16* %a, i64 1
  %29 = load i16* %incdec.ptr34.1.i182, align 2, !tbaa !1
  %incdec.ptr35.2.i185 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %29, i16* %incdec.ptr35.1.i183, align 2, !tbaa !1
  %30 = load i16* %incdec.ptr34.2.i184, align 2, !tbaa !1
  %incdec.ptr35.3.i186 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %30, i16* %incdec.ptr35.2.i185, align 4, !tbaa !1
  %31 = load i16* %a, align 2, !tbaa !1
  store i16 %31, i16* %incdec.ptr35.3.i186, align 2, !tbaa !1
  %scevgep70.i187 = getelementptr [9 x i16]* %ai, i64 0, i64 8
  store i16 0, i16* %scevgep70.i187, align 16, !tbaa !1
  br label %emovi.exit189

emovi.exit189:                                    ; preds = %for.cond20.preheader.i167, %if.then13.i178, %if.end28.i188
  %arraydecay25 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 0
  %incdec.ptr.i139 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 1
  %.lobit.i = ashr i16 %b.idx.val, 15
  store i16 %.lobit.i, i16* %arraydecay25, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %b, i64 4
  %incdec.ptr3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 2
  store i16 %and.i116, i16* %incdec.ptr.i139, align 2, !tbaa !1
  br i1 %cmp.i117, label %for.body.i.i142, label %if.end28.i

for.body.i.i142:                                  ; preds = %emovi.exit189, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %emovi.exit189 ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %b, %emovi.exit189 ]
  %32 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %32, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then13.i

for.inc.i.i:                                      ; preds = %for.body.i.i142
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i143 = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i143, label %for.body.i.i142, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i
  %scevgep69.i = bitcast i16* %incdec.ptr3.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i142
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %b, i64 3
  %33 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i144 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  store i16 %33, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %b, i64 2
  %34 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i145 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  store i16 %34, i16* %incdec.ptr18.i144, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %b, i64 1
  %35 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i146 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  store i16 %35, i16* %incdec.ptr18.1.i145, align 2, !tbaa !1
  %36 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i147 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %36, i16* %incdec.ptr18.2.i146, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %b, i64 -1
  %37 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 8
  store i16 %37, i16* %incdec.ptr18.3.i147, align 2, !tbaa !1
  %38 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %38, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

if.end28.i:                                       ; preds = %emovi.exit189
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %b, i64 3
  %39 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  store i16 %39, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %b, i64 2
  %40 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  store i16 %40, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %b, i64 1
  %41 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  store i16 %41, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %42 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %42, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %43 = load i16* %b, align 2, !tbaa !1
  store i16 %43, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %bi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i, %if.end28.i
  %conv = zext i16 %and.i to i32
  %conv27 = zext i16 %and.i116 to i32
  %cmp30 = icmp eq i16 %and.i116, 0
  br i1 %cmp30, label %for.body, label %dnzro1

for.cond:                                         ; preds = %for.body
  %44 = trunc i64 %indvars.iv267 to i32
  %cmp33 = icmp slt i32 %44, 8
  br i1 %cmp33, label %for.cond.for.body_crit_edge, label %for.end

for.cond.for.body_crit_edge:                      ; preds = %for.cond
  %arrayidx35.phi.trans.insert = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 %indvars.iv267
  %.pre271 = load i16* %arrayidx35.phi.trans.insert, align 2, !tbaa !1
  %phitmp273 = icmp eq i16 %.pre271, 0
  %phitmp274 = add i64 %indvars.iv267, 1
  br label %for.body

for.body:                                         ; preds = %emovi.exit, %for.cond.for.body_crit_edge
  %45 = phi i1 [ %phitmp273, %for.cond.for.body_crit_edge ], [ true, %emovi.exit ]
  %indvars.iv267 = phi i64 [ %phitmp274, %for.cond.for.body_crit_edge ], [ 2, %emovi.exit ]
  br i1 %45, label %for.cond, label %if.then39

if.then39:                                        ; preds = %for.body
  %call41 = call fastcc i32 @enormlz(i16* %arraydecay25)
  %sub = sub nsw i32 %conv27, %call41
  %.pre269 = load i16* %incdec.ptr.i149, align 2, !tbaa !1
  br label %dnzro1

for.end:                                          ; preds = %for.cond
  %x4.i = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 12, i32 2, i1 false) #1
  br label %divsign

dnzro1:                                           ; preds = %emovi.exit, %if.then39
  %46 = phi i16 [ %.pre269, %if.then39 ], [ %and.i, %emovi.exit ]
  %ltb.0 = phi i32 [ %sub, %if.then39 ], [ %conv27, %emovi.exit ]
  %cmp46 = icmp eq i16 %46, 0
  br i1 %cmp46, label %for.body52, label %dnzro2

for.cond49:                                       ; preds = %for.body52
  %47 = trunc i64 %indvars.iv to i32
  %cmp50 = icmp slt i32 %47, 8
  br i1 %cmp50, label %for.cond49.for.body52_crit_edge, label %for.end65

for.cond49.for.body52_crit_edge:                  ; preds = %for.cond49
  %arrayidx54.phi.trans.insert = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 %indvars.iv
  %.pre270 = load i16* %arrayidx54.phi.trans.insert, align 2, !tbaa !1
  %phitmp = icmp eq i16 %.pre270, 0
  %phitmp272 = add i64 %indvars.iv, 1
  br label %for.body52

for.body52:                                       ; preds = %dnzro1, %for.cond49.for.body52_crit_edge
  %48 = phi i1 [ %phitmp, %for.cond49.for.body52_crit_edge ], [ true, %dnzro1 ]
  %indvars.iv = phi i64 [ %phitmp272, %for.cond49.for.body52_crit_edge ], [ 2, %dnzro1 ]
  br i1 %48, label %for.cond49, label %if.then58

if.then58:                                        ; preds = %for.body52
  %call60 = call fastcc i32 @enormlz(i16* %arraydecay)
  %sub61 = sub nsw i32 %conv, %call60
  br label %dnzro2

for.end65:                                        ; preds = %for.cond49
  %x5.i = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i, i8 0, i64 10, i32 2, i1 false) #1
  %scevgep.i = getelementptr i16* %c, i64 5
  %49 = load i16* %scevgep.i, align 2, !tbaa !1
  %or.i114 = or i16 %49, 32767
  store i16 %or.i114, i16* %scevgep.i, align 2, !tbaa !1
  call fastcc void @mtherr(i8* getelementptr inbounds ([5 x i8]* @.str8, i64 0, i64 0), i32 2)
  %.pre = load i16* %scevgep.i, align 2, !tbaa !1
  br label %divsign

dnzro2:                                           ; preds = %dnzro1, %if.then58
  %lta.0 = phi i32 [ %sub61, %if.then58 ], [ %conv, %dnzro1 ]
  %call69 = call fastcc i32 @edivm(i16* %arraydecay, i16* %arraydecay25)
  %sub70 = add i32 %ltb.0, 16383
  %add = sub i32 %sub70, %lta.0
  call fastcc void @emdnorm(i16* %arraydecay25, i32 %call69, i32 0, i32 %add, i32 64)
  %add.ptr.i = getelementptr inbounds i16* %c, i64 5
  %50 = bitcast [9 x i16]* %bi to i32*
  %51 = load i32* %50, align 16
  %52 = bitcast [9 x i16]* %bi to i64*
  %53 = load i64* %52, align 16
  %54 = trunc i64 %53 to i32
  %55 = trunc i64 %53 to i16
  %tobool.i = icmp eq i16 %55, 0
  %56 = lshr i32 %54, 16
  %57 = trunc i32 %56 to i16
  %or.i = or i16 %57, -32768
  %storemerge.i = select i1 %tobool.i, i16 %57, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i, align 2, !tbaa !1
  %.mask = and i32 %51, -65536
  %cmp.i = icmp eq i32 %.mask, 2147418112
  %58 = trunc i64 %53 to i16
  br i1 %cmp.i, label %for.body.i.i, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %59 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %59, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end13.i

for.body.i.i:                                     ; preds = %dnzro2, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %dnzro2 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 %indvars.iv.i.i
  %60 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %60, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i
  %cmp.i32.i = icmp ne i16 %58, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %61 = bitcast i16* %c to i64*
  store i64 0, i64* %61, align 2
  %scevgep8.i.i = getelementptr i16* %c, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %divsign

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %divsign

if.end14.i:                                       ; preds = %dnzro2
  %62 = lshr i64 %53, 48
  %63 = trunc i64 %62 to i16
  %q.0.i = getelementptr inbounds i16* %c, i64 4
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds i16* %c, i64 3
  store i16 %63, i16* %q.0.i, align 2, !tbaa !1
  %64 = bitcast i16* %incdec.ptr18.i to i64*
  %65 = load i64* %64, align 8
  %66 = trunc i64 %65 to i32
  %67 = trunc i64 %65 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %c, i64 2
  store i16 %67, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %68 = lshr i32 %66, 16
  %69 = trunc i32 %68 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %c, i64 1
  store i16 %69, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %70 = lshr i64 %65, 32
  %71 = trunc i64 %70 to i16
  store i16 %71, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %72 = lshr i64 %65, 48
  %73 = trunc i64 %72 to i16
  store i16 %73, i16* %c, align 2, !tbaa !1
  br label %divsign

divsign:                                          ; preds = %if.end14.i, %if.end13.i, %if.then11.i, %for.end65, %for.end, %if.then23, %if.then19
  %74 = phi i16 [ %storemerge.i, %if.end14.i ], [ %or.i.i, %if.end13.i ], [ %or.i31.i, %if.then11.i ], [ %.pre, %for.end65 ], [ 0, %for.end ], [ 0, %if.then23 ], [ %or.i204, %if.then19 ]
  %tobool73 = icmp eq i16 %x.5.val.lobit.i, %x.5.val.lobit.i110
  %add.ptr = getelementptr inbounds i16* %c, i64 5
  br i1 %tobool73, label %if.else, label %if.then74

if.then74:                                        ; preds = %divsign
  %or = or i16 %74, -32768
  store i16 %or, i16* %add.ptr, align 2, !tbaa !1
  br label %if.end80

if.else:                                          ; preds = %divsign
  %and = and i16 %74, 32767
  store i16 %and, i16* %add.ptr, align 2, !tbaa !1
  br label %if.end80

if.end80:                                         ; preds = %if.then, %if.then5, %if.then15, %if.else, %if.then74
  ret void
}

; Function Attrs: nounwind readonly uwtable
define internal fastcc i32 @ecmp(i16* nocapture readonly %a, i16* nocapture readonly %b) #2 {
entry:
  %ai = alloca [9 x i16], align 16
  %bi = alloca [9 x i16], align 16
  %arrayidx.i = getelementptr inbounds i16* %a, i64 5
  %0 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %lor.lhs.false

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %a, %entry ]
  %1 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %1, 0
  br i1 %cmp5.i, label %for.inc.i, label %return

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.inc.i, %entry
  %arrayidx.i108 = getelementptr inbounds i16* %b, i64 5
  %2 = load i16* %arrayidx.i108, align 2, !tbaa !1
  %and.i109 = and i16 %2, 32767
  %cmp.i110 = icmp eq i16 %and.i109, 32767
  br i1 %cmp.i110, label %for.body.i114, label %if.end

for.body.i114:                                    ; preds = %lor.lhs.false, %for.inc.i118
  %i.012.i111 = phi i32 [ %inc.i116, %for.inc.i118 ], [ 0, %lor.lhs.false ]
  %x.addr.011.i112 = phi i16* [ %incdec.ptr.i115, %for.inc.i118 ], [ %b, %lor.lhs.false ]
  %3 = load i16* %x.addr.011.i112, align 2, !tbaa !1
  %cmp5.i113 = icmp eq i16 %3, 0
  br i1 %cmp5.i113, label %for.inc.i118, label %return

for.inc.i118:                                     ; preds = %for.body.i114
  %incdec.ptr.i115 = getelementptr inbounds i16* %x.addr.011.i112, i64 1
  %inc.i116 = add nsw i32 %i.012.i111, 1
  %cmp2.i117 = icmp slt i32 %inc.i116, 5
  br i1 %cmp2.i117, label %for.body.i114, label %if.end

if.end:                                           ; preds = %for.inc.i118, %lor.lhs.false
  %arraydecay = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 0
  %incdec.ptr.i67 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 1
  %.lobit.i68 = ashr i16 %0, 15
  store i16 %.lobit.i68, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i69 = getelementptr inbounds i16* %a, i64 4
  %incdec.ptr3.i70 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 2
  store i16 %and.i, i16* %incdec.ptr.i67, align 2, !tbaa !1
  br i1 %cmp.i, label %for.body.i.i79, label %if.end28.i106

for.body.i.i79:                                   ; preds = %if.end, %for.inc.i.i83
  %i.012.i.i76 = phi i32 [ %inc.i.i81, %for.inc.i.i83 ], [ 0, %if.end ]
  %x.addr.011.i.i77 = phi i16* [ %incdec.ptr.i.i80, %for.inc.i.i83 ], [ %a, %if.end ]
  %4 = load i16* %x.addr.011.i.i77, align 2, !tbaa !1
  %cmp5.i.i78 = icmp eq i16 %4, 0
  br i1 %cmp5.i.i78, label %for.inc.i.i83, label %if.then13.i96

for.inc.i.i83:                                    ; preds = %for.body.i.i79
  %incdec.ptr.i.i80 = getelementptr inbounds i16* %x.addr.011.i.i77, i64 1
  %inc.i.i81 = add nsw i32 %i.012.i.i76, 1
  %cmp2.i.i82 = icmp slt i32 %inc.i.i81, 5
  br i1 %cmp2.i.i82, label %for.body.i.i79, label %for.cond20.preheader.i85

for.cond20.preheader.i85:                         ; preds = %for.inc.i.i83
  %scevgep69.i84 = bitcast i16* %incdec.ptr3.i70 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i84, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit107

if.then13.i96:                                    ; preds = %for.body.i.i79
  %incdec.ptr14.i86 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i70, align 4, !tbaa !1
  %incdec.ptr17.i87 = getelementptr inbounds i16* %a, i64 3
  %5 = load i16* %incdec.ptr2.i69, align 2, !tbaa !1
  %incdec.ptr18.i88 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %5, i16* %incdec.ptr14.i86, align 2, !tbaa !1
  %incdec.ptr17.1.i89 = getelementptr inbounds i16* %a, i64 2
  %6 = load i16* %incdec.ptr17.i87, align 2, !tbaa !1
  %incdec.ptr18.1.i90 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %6, i16* %incdec.ptr18.i88, align 8, !tbaa !1
  %incdec.ptr17.2.i91 = getelementptr inbounds i16* %a, i64 1
  %7 = load i16* %incdec.ptr17.1.i89, align 2, !tbaa !1
  %incdec.ptr18.2.i92 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %7, i16* %incdec.ptr18.1.i90, align 2, !tbaa !1
  %8 = load i16* %incdec.ptr17.2.i91, align 2, !tbaa !1
  %incdec.ptr18.3.i93 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %8, i16* %incdec.ptr18.2.i92, align 4, !tbaa !1
  %incdec.ptr17.4.i94 = getelementptr inbounds i16* %a, i64 -1
  %9 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr18.4.i95 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 8
  store i16 %9, i16* %incdec.ptr18.3.i93, align 2, !tbaa !1
  %10 = load i16* %incdec.ptr17.4.i94, align 2, !tbaa !1
  store i16 %10, i16* %incdec.ptr18.4.i95, align 16, !tbaa !1
  br label %emovi.exit107

if.end28.i106:                                    ; preds = %if.end
  %incdec.ptr29.i97 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i70, align 4, !tbaa !1
  %incdec.ptr34.i98 = getelementptr inbounds i16* %a, i64 3
  %11 = load i16* %incdec.ptr2.i69, align 2, !tbaa !1
  %incdec.ptr35.i99 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %11, i16* %incdec.ptr29.i97, align 2, !tbaa !1
  %incdec.ptr34.1.i100 = getelementptr inbounds i16* %a, i64 2
  %12 = load i16* %incdec.ptr34.i98, align 2, !tbaa !1
  %incdec.ptr35.1.i101 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %12, i16* %incdec.ptr35.i99, align 8, !tbaa !1
  %incdec.ptr34.2.i102 = getelementptr inbounds i16* %a, i64 1
  %13 = load i16* %incdec.ptr34.1.i100, align 2, !tbaa !1
  %incdec.ptr35.2.i103 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %13, i16* %incdec.ptr35.1.i101, align 2, !tbaa !1
  %14 = load i16* %incdec.ptr34.2.i102, align 2, !tbaa !1
  %incdec.ptr35.3.i104 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %14, i16* %incdec.ptr35.2.i103, align 4, !tbaa !1
  %15 = load i16* %a, align 2, !tbaa !1
  store i16 %15, i16* %incdec.ptr35.3.i104, align 2, !tbaa !1
  %scevgep70.i105 = getelementptr [9 x i16]* %ai, i64 0, i64 8
  store i16 0, i16* %scevgep70.i105, align 16, !tbaa !1
  br label %emovi.exit107

emovi.exit107:                                    ; preds = %for.cond20.preheader.i85, %if.then13.i96, %if.end28.i106
  %arraydecay4 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 0
  %incdec.ptr.i64 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 1
  %.lobit.i = ashr i16 %2, 15
  store i16 %.lobit.i, i16* %arraydecay4, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %b, i64 4
  %incdec.ptr3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 2
  store i16 %and.i109, i16* %incdec.ptr.i64, align 2, !tbaa !1
  br i1 %cmp.i110, label %for.body.i.i, label %if.end28.i

for.body.i.i:                                     ; preds = %emovi.exit107, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %emovi.exit107 ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %b, %emovi.exit107 ]
  %16 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %16, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then13.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i
  %scevgep69.i = bitcast i16* %incdec.ptr3.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %b, i64 3
  %17 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  store i16 %17, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %b, i64 2
  %18 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  store i16 %18, i16* %incdec.ptr18.i, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %b, i64 1
  %19 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  store i16 %19, i16* %incdec.ptr18.1.i, align 2, !tbaa !1
  %20 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %20, i16* %incdec.ptr18.2.i, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %b, i64 -1
  %21 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 8
  store i16 %21, i16* %incdec.ptr18.3.i, align 2, !tbaa !1
  %22 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %22, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

if.end28.i:                                       ; preds = %emovi.exit107
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %b, i64 3
  %23 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  store i16 %23, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %b, i64 2
  %24 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  store i16 %24, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %b, i64 1
  %25 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  store i16 %25, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %26 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %26, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %27 = load i16* %b, align 2, !tbaa !1
  store i16 %27, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %bi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i, %if.end28.i
  %cmp = icmp eq i16 %.lobit.i68, %.lobit.i
  br i1 %cmp, label %if.end27, label %for.body

for.cond:                                         ; preds = %if.end15
  %28 = trunc i64 %indvars.iv.next to i32
  %cmp9 = icmp slt i32 %28, 8
  br i1 %cmp9, label %for.cond.for.body_crit_edge, label %return

for.cond.for.body_crit_edge:                      ; preds = %for.cond
  %arrayidx.phi.trans.insert = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 %indvars.iv.next
  %.pre138 = load i16* %arrayidx.phi.trans.insert, align 2, !tbaa !1
  br label %for.body

for.body:                                         ; preds = %emovi.exit, %for.cond.for.body_crit_edge
  %29 = phi i16 [ %.pre138, %for.cond.for.body_crit_edge ], [ %and.i, %emovi.exit ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond.for.body_crit_edge ], [ 1, %emovi.exit ]
  %cmp12 = icmp eq i16 %29, 0
  br i1 %cmp12, label %if.end15, label %nzro

if.end15:                                         ; preds = %for.body
  %arrayidx17 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 %indvars.iv
  %30 = load i16* %arrayidx17, align 2, !tbaa !1
  %cmp19 = icmp eq i16 %30, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp19, label %for.cond, label %nzro

nzro:                                             ; preds = %if.end15, %for.body
  %cmp24 = icmp eq i16 %.lobit.i68, 0
  %. = select i1 %cmp24, i32 1, i32 -1
  br label %return

if.end27:                                         ; preds = %emovi.exit
  %cmp29 = icmp eq i16 %.lobit.i68, 0
  %.63 = select i1 %cmp29, i32 1, i32 -1
  br label %do.body

do.body:                                          ; preds = %do.cond.do.body_crit_edge, %if.end27
  %31 = phi i16 [ %.lobit.i68, %if.end27 ], [ %.pre137, %do.cond.do.body_crit_edge ]
  %32 = phi i16 [ %.lobit.i68, %if.end27 ], [ %.pre, %do.cond.do.body_crit_edge ]
  %p.0 = phi i16* [ %arraydecay, %if.end27 ], [ %incdec.ptr, %do.cond.do.body_crit_edge ]
  %q.0 = phi i16* [ %arraydecay4, %if.end27 ], [ %incdec.ptr35, %do.cond.do.body_crit_edge ]
  %i.1 = phi i32 [ 7, %if.end27 ], [ %phitmp, %do.cond.do.body_crit_edge ]
  %cmp37 = icmp eq i16 %32, %31
  br i1 %cmp37, label %do.cond, label %diff

do.cond:                                          ; preds = %do.body
  %incdec.ptr35 = getelementptr inbounds i16* %q.0, i64 1
  %incdec.ptr = getelementptr inbounds i16* %p.0, i64 1
  %cmp41 = icmp sgt i32 %i.1, 0
  br i1 %cmp41, label %do.cond.do.body_crit_edge, label %return

do.cond.do.body_crit_edge:                        ; preds = %do.cond
  %.pre = load i16* %incdec.ptr, align 2, !tbaa !1
  %.pre137 = load i16* %incdec.ptr35, align 2, !tbaa !1
  %phitmp = add i32 %i.1, -1
  br label %do.body

diff:                                             ; preds = %do.body
  %cmp47 = icmp ugt i16 %32, %31
  %sub = sub nsw i32 0, %.63
  %.63.sub = select i1 %cmp47, i32 %.63, i32 %sub
  ret i32 %.63.sub

return:                                           ; preds = %for.body.i, %for.body.i114, %for.cond, %do.cond, %nzro
  %retval.0 = phi i32 [ %., %nzro ], [ 0, %do.cond ], [ 0, %for.cond ], [ -2, %for.body.i114 ], [ -2, %for.body.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @etrunci(%struct.realvaluetype* noalias nocapture sret %agg.result, %struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %yi.i = alloca [9 x i16], align 16
  %f = alloca [6 x i16], align 2
  %g = alloca [6 x i16], align 8
  %r.sroa.0 = alloca [3 x i64], align 8
  %l = alloca i64, align 8
  %0 = bitcast [6 x i16]* %g to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 8, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %g, i64 0, i64 0
  %arrayidx.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 5
  %2 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %2, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %entry ]
  %3 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %3, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %4 = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %1, i64 24, i32 8, i1 false), !tbaa.struct !5
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay2 = getelementptr inbounds [6 x i16]* %f, i64 0, i64 0
  call fastcc void @eifrac(i16* %arraydecay, i64* %l, i16* %arraydecay2)
  %l.val = load i64* %l, align 8, !tbaa !7
  %5 = bitcast [9 x i16]* %yi.i to i8*
  call void @llvm.lifetime.start(i64 18, i8* %5) #1
  %arraydecay.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 18, i32 16, i1 false) #1
  %cmp.i9 = icmp slt i64 %l.val, 0
  br i1 %cmp.i9, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.end
  %sub.i = sub nsw i64 0, %l.val
  store i16 -1, i16* %arraydecay.i, align 16, !tbaa !1
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.end
  %ll.0.i = phi i64 [ %sub.i, %if.then.i ], [ %l.val, %if.end ]
  %shr.i = lshr i64 %ll.0.i, 48
  %conv.i = trunc i64 %shr.i to i16
  %arrayidx1.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 2
  store i16 %conv.i, i16* %arrayidx1.i, align 4, !tbaa !1
  %shr2.i = lshr i64 %ll.0.i, 32
  %conv3.i = trunc i64 %shr2.i to i16
  %arrayidx4.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 3
  store i16 %conv3.i, i16* %arrayidx4.i, align 2, !tbaa !1
  %shr5.i = lshr i64 %ll.0.i, 16
  %conv6.i = trunc i64 %shr5.i to i16
  %arrayidx7.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 4
  store i16 %conv6.i, i16* %arrayidx7.i, align 8, !tbaa !1
  %conv8.i = trunc i64 %ll.0.i to i16
  %arrayidx9.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 5
  store i16 %conv8.i, i16* %arrayidx9.i, align 2, !tbaa !1
  %arrayidx10.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 1
  store i16 16430, i16* %arrayidx10.i, align 2, !tbaa !1
  %call.i = call fastcc i32 @enormlz(i16* %arraydecay.i) #1
  %cmp12.i = icmp sgt i32 %call.i, 80
  br i1 %cmp12.i, label %if.end23.thread.i, label %if.end23.i

if.end23.thread.i:                                ; preds = %if.end.i
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 18, i32 16, i1 false) #1
  store i16 0, i16* %arrayidx.i, align 2, !tbaa !1
  br label %if.end14.i.i

if.end23.i:                                       ; preds = %if.end.i
  %6 = load i16* %arrayidx10.i, align 2, !tbaa !1
  %conv20.i = zext i16 %6 to i32
  %sub21.i = sub nsw i32 %conv20.i, %call.i
  %conv22.i = trunc i32 %sub21.i to i16
  store i16 %conv22.i, i16* %arrayidx10.i, align 2, !tbaa !1
  %7 = bitcast [9 x i16]* %yi.i to i32*
  %8 = load i32* %7, align 16
  %9 = bitcast [9 x i16]* %yi.i to i64*
  %.pre.i = load i64* %9, align 16
  %10 = trunc i64 %.pre.i to i32
  %11 = trunc i64 %.pre.i to i16
  %12 = lshr i32 %10, 16
  %13 = trunc i32 %12 to i16
  %phitmp.i = icmp eq i16 %11, 0
  %.mask.i = and i32 %8, -65536
  %phitmp2.i = icmp eq i32 %.mask.i, 2147418112
  %or.i.i = or i16 %13, -32768
  %storemerge.i.i = select i1 %phitmp.i, i16 %13, i16 %or.i.i
  store i16 %storemerge.i.i, i16* %arrayidx.i, align 2, !tbaa !1
  br i1 %phitmp2.i, label %for.body.i.i.i, label %if.end23.i.if.end14.i.i_crit_edge

if.end23.i.if.end14.i.i_crit_edge:                ; preds = %if.end23.i
  %14 = lshr i64 %.pre.i, 48
  %15 = trunc i64 %14 to i16
  %.phi.trans.insert = bitcast i16* %arrayidx7.i to i64*
  %.pre = load i64* %.phi.trans.insert, align 8
  br label %if.end14.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %16 = trunc i64 %indvars.iv.next.i.i.i to i32
  %cmp2.i.i.i = icmp slt i32 %16, 9
  br i1 %cmp2.i.i.i, label %for.body.i.i.i, label %if.end13.i.i

for.body.i.i.i:                                   ; preds = %if.end23.i, %for.cond.i.i.i
  %indvars.iv.i.i.i = phi i64 [ %indvars.iv.next.i.i.i, %for.cond.i.i.i ], [ 3, %if.end23.i ]
  %arrayidx4.i.i.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 %indvars.iv.i.i.i
  %17 = load i16* %arrayidx4.i.i.i, align 2, !tbaa !1
  %cmp6.i.i.i = icmp eq i16 %17, 0
  %indvars.iv.next.i.i.i = add nuw nsw i64 %indvars.iv.i.i.i, 1
  br i1 %cmp6.i.i.i, label %for.cond.i.i.i, label %if.then11.i.i

if.then11.i.i:                                    ; preds = %for.body.i.i.i
  %cmp.i32.i.i = icmp ne i16 %11, 0
  %conv1.i.i.i = zext i1 %cmp.i32.i.i to i16
  %18 = bitcast [6 x i16]* %g to i64*
  store i64 0, i64* %18, align 8
  %scevgep8.i.i.i = getelementptr [6 x i16]* %g, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i.i, align 8, !tbaa !1
  %shl.i.i.i = shl nuw i16 %conv1.i.i.i, 15
  %or.i31.i.i = or i16 %shl.i.i.i, 32767
  store i16 %or.i31.i.i, i16* %arrayidx.i, align 2, !tbaa !1
  br label %ltoe.exit

if.end13.i.i:                                     ; preds = %for.cond.i.i.i
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 10, i32 8, i1 false) #1
  %or.i.i.i = or i16 %storemerge.i.i, 32767
  store i16 %or.i.i.i, i16* %arrayidx.i, align 2, !tbaa !1
  br label %ltoe.exit

if.end14.i.i:                                     ; preds = %if.end23.i.if.end14.i.i_crit_edge, %if.end23.thread.i
  %19 = phi i64 [ 0, %if.end23.thread.i ], [ %.pre, %if.end23.i.if.end14.i.i_crit_edge ]
  %20 = phi i16 [ 0, %if.end23.thread.i ], [ %15, %if.end23.i.if.end14.i.i_crit_edge ]
  %q.0.i.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 4
  %incdec.ptr19.i.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 3
  store i16 %20, i16* %q.0.i.i, align 8, !tbaa !1
  %21 = trunc i64 %19 to i32
  %22 = trunc i64 %19 to i16
  %incdec.ptr19.1.i.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 2
  store i16 %22, i16* %incdec.ptr19.i.i, align 2, !tbaa !1
  %23 = lshr i32 %21, 16
  %24 = trunc i32 %23 to i16
  %incdec.ptr19.2.i.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 1
  store i16 %24, i16* %incdec.ptr19.1.i.i, align 4, !tbaa !1
  %25 = lshr i64 %19, 32
  %26 = trunc i64 %25 to i16
  store i16 %26, i16* %incdec.ptr19.2.i.i, align 2, !tbaa !1
  %27 = lshr i64 %19, 48
  %28 = trunc i64 %27 to i16
  store i16 %28, i16* %arraydecay, align 8, !tbaa !1
  br label %ltoe.exit

ltoe.exit:                                        ; preds = %if.then11.i.i, %if.end13.i.i, %if.end14.i.i
  call void @llvm.lifetime.end(i64 18, i8* %5) #1
  %r.sroa.0.0..sroa_cast6 = bitcast [3 x i64]* %r.sroa.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast6, i8* %0, i64 12, i32 8, i1 false)
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast6, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast, i8* %r.sroa.0.0..sroa_cast6, i64 24, i32 8, i1 false)
  br label %return

return:                                           ; preds = %ltoe.exit, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @eifrac(i16* nocapture readonly %x, i64* nocapture %i, i16* nocapture %frac) #0 {
entry:
  %xi = alloca [9 x i16], align 16
  %arraydecay = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 0
  %add.ptr.i = getelementptr inbounds i16* %x, i64 5
  %0 = load i16* %add.ptr.i, align 2, !tbaa !1
  %incdec.ptr.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 1
  %.lobit.i = ashr i16 %0, 15
  store i16 %.lobit.i, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 2
  %and5.i = and i16 %0, 32767
  store i16 %and5.i, i16* %incdec.ptr.i, align 2, !tbaa !1
  %cmp.i = icmp eq i16 %and5.i, 32767
  br i1 %cmp.i, label %for.body.i.i, label %if.end28.i

for.body.i.i:                                     ; preds = %entry, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %entry ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %x, %entry ]
  %1 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %1, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then13.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i
  %scevgep69.i = bitcast i16* %incdec.ptr3.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %x, i64 3
  %2 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %2, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %x, i64 2
  %3 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %3, i16* %incdec.ptr18.i, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %x, i64 1
  %4 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %4, i16* %incdec.ptr18.1.i, align 2, !tbaa !1
  %5 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %5, i16* %incdec.ptr18.2.i, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %x, i64 -1
  %6 = load i16* %x, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 8
  store i16 %6, i16* %incdec.ptr18.3.i, align 2, !tbaa !1
  %7 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

if.end28.i:                                       ; preds = %entry
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %x, i64 3
  %8 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %8, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %x, i64 2
  %9 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %9, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %x, i64 1
  %10 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %10, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %11 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %11, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %12 = load i16* %x, align 2, !tbaa !1
  store i16 %12, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %xi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i, %if.end28.i
  %13 = phi i16 [ 0, %for.cond20.preheader.i ], [ %6, %if.then13.i ], [ %12, %if.end28.i ]
  %14 = phi i16 [ 0, %for.cond20.preheader.i ], [ %5, %if.then13.i ], [ %11, %if.end28.i ]
  %15 = phi i16 [ 0, %for.cond20.preheader.i ], [ %4, %if.then13.i ], [ %10, %if.end28.i ]
  %16 = phi i16 [ 0, %for.cond20.preheader.i ], [ %3, %if.then13.i ], [ %9, %if.end28.i ]
  %17 = phi i16 [ 0, %for.cond20.preheader.i ], [ %2, %if.then13.i ], [ %8, %if.end28.i ]
  %conv = zext i16 %and5.i to i32
  %sub = add nsw i32 %conv, -16382
  %cmp = icmp slt i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %emovi.exit
  store i64 0, i64* %i, align 8, !tbaa !7
  %add.ptr.i95 = getelementptr inbounds i16* %frac, i64 5
  %tobool.i97 = icmp eq i16 %.lobit.i, 0
  %or.i98 = or i16 %0, -32768
  %storemerge.i99 = select i1 %tobool.i97, i16 %and5.i, i16 %or.i98
  store i16 %storemerge.i99, i16* %add.ptr.i95, align 2, !tbaa !1
  br i1 %cmp.i, label %for.body.i.i107, label %if.end14.i127

for.cond.i.i102:                                  ; preds = %for.body.i.i107
  %18 = trunc i64 %indvars.iv.i.i103 to i32
  %cmp2.i.i101 = icmp slt i32 %18, 9
  br i1 %cmp2.i.i101, label %for.cond.i.i102.for.body.i.i107_crit_edge, label %if.end13.i117

for.cond.i.i102.for.body.i.i107_crit_edge:        ; preds = %for.cond.i.i102
  %arrayidx4.i.i104.phi.trans.insert = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 %indvars.iv.i.i103
  %.pre = load i16* %arrayidx4.i.i104.phi.trans.insert, align 2, !tbaa !1
  %phitmp145 = add i64 %indvars.iv.i.i103, 1
  br label %for.body.i.i107

for.body.i.i107:                                  ; preds = %if.then, %for.cond.i.i102.for.body.i.i107_crit_edge
  %19 = phi i16 [ %.pre, %for.cond.i.i102.for.body.i.i107_crit_edge ], [ %17, %if.then ]
  %indvars.iv.i.i103 = phi i64 [ %phitmp145, %for.cond.i.i102.for.body.i.i107_crit_edge ], [ 4, %if.then ]
  %cmp6.i.i105 = icmp eq i16 %19, 0
  br i1 %cmp6.i.i105, label %for.cond.i.i102, label %if.then11.i114

if.then11.i114:                                   ; preds = %for.body.i.i107
  %cmp.i32.i109 = icmp ne i16 %.lobit.i, 0
  %conv1.i.i110 = zext i1 %cmp.i32.i109 to i16
  %20 = bitcast i16* %frac to i64*
  store i64 0, i64* %20, align 2
  %scevgep8.i.i111 = getelementptr i16* %frac, i64 4
  store i16 -16384, i16* %scevgep8.i.i111, align 2, !tbaa !1
  %shl.i.i112 = shl nuw i16 %conv1.i.i110, 15
  %or.i31.i113 = or i16 %shl.i.i112, 32767
  store i16 %or.i31.i113, i16* %add.ptr.i95, align 2, !tbaa !1
  br label %return

if.end13.i117:                                    ; preds = %for.cond.i.i102
  %x5.i.i115 = bitcast i16* %frac to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i115, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i116 = or i16 %storemerge.i99, 32767
  store i16 %or.i.i116, i16* %add.ptr.i95, align 2, !tbaa !1
  br label %return

if.end14.i127:                                    ; preds = %if.then
  %q.0.i118 = getelementptr inbounds i16* %frac, i64 4
  %incdec.ptr19.i121 = getelementptr inbounds i16* %frac, i64 3
  store i16 %17, i16* %q.0.i118, align 2, !tbaa !1
  %incdec.ptr19.1.i123 = getelementptr inbounds i16* %frac, i64 2
  store i16 %16, i16* %incdec.ptr19.i121, align 2, !tbaa !1
  %incdec.ptr19.2.i125 = getelementptr inbounds i16* %frac, i64 1
  store i16 %15, i16* %incdec.ptr19.1.i123, align 2, !tbaa !1
  store i16 %14, i16* %incdec.ptr19.2.i125, align 2, !tbaa !1
  store i16 %13, i16* %frac, align 2, !tbaa !1
  br label %return

if.end:                                           ; preds = %emovi.exit
  %cmp3 = icmp sgt i32 %sub, 63
  br i1 %cmp3, label %if.then5, label %if.else13

if.then5:                                         ; preds = %if.end
  %tobool = icmp eq i16 %.lobit.i, 0
  %. = select i1 %tobool, i64 9223372036854775807, i64 -9223372036854775808
  store i64 %., i64* %i, align 8, !tbaa !7
  %call = call fastcc i32 @eshift(i16* %arraydecay, i32 %sub)
  %21 = load i32* @extra_warnings, align 4, !tbaa !9
  %tobool10 = icmp eq i32 %21, 0
  br i1 %tobool10, label %if.end46, label %if.then11

if.then11:                                        ; preds = %if.then5
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([34 x i8]* @.str34, i64 0, i64 0)) #1
  br label %if.end46

if.else13:                                        ; preds = %if.end
  %cmp14 = icmp sgt i32 %sub, 16
  br i1 %cmp14, label %if.then16, label %if.else35

if.then16:                                        ; preds = %if.else13
  %shr84 = and i32 %sub, -16
  %sub17 = sub nsw i32 %sub, %shr84
  %call19 = call fastcc i32 @eshift(i16* %arraydecay, i32 %sub17)
  %22 = bitcast i16* %incdec.ptr3.i to i32*
  %23 = load i32* %22, align 4
  %24 = zext i32 %23 to i64
  %conv21 = and i64 %24, 65535
  %add.ptr1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  %incdec.ptr.i130 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  %incdec.ptr.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  %incdec.ptr.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  %incdec.ptr.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  %incdec.ptr.4.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 8
  %25 = lshr i32 %23, 16
  %26 = trunc i32 %25 to i16
  %27 = bitcast i16* %incdec.ptr.i130 to i64*
  %28 = load i64* %27, align 8
  %29 = trunc i64 %28 to i32
  %30 = trunc i64 %28 to i16
  %31 = lshr i32 %29, 16
  %32 = trunc i32 %31 to i16
  %33 = lshr i64 %28, 32
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %28, 48
  %36 = trunc i64 %35 to i16
  %incdec.ptr.4.i.promoted = load i16* %incdec.ptr.4.i, align 16, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %do.body, %if.then16
  %37 = phi i16 [ %incdec.ptr.4.i.promoted, %if.then16 ], [ 0, %do.body ]
  %38 = phi i16 [ %36, %if.then16 ], [ %37, %do.body ]
  %39 = phi i16 [ %34, %if.then16 ], [ %38, %do.body ]
  %40 = phi i16 [ %32, %if.then16 ], [ %39, %do.body ]
  %41 = phi i16 [ %30, %if.then16 ], [ %40, %do.body ]
  %42 = phi i16 [ %26, %if.then16 ], [ %41, %do.body ]
  %k.0 = phi i32 [ %shr84, %if.then16 ], [ %sub27, %do.body ]
  %ll.0 = phi i64 [ %conv21, %if.then16 ], [ %or, %do.body ]
  %shl24 = shl i64 %ll.0, 16
  %conv26 = zext i16 %42 to i64
  %or = or i64 %conv26, %shl24
  %sub27 = add nsw i32 %k.0, -16
  %cmp28 = icmp sgt i32 %sub27, 0
  br i1 %cmp28, label %do.body, label %do.end

do.end:                                           ; preds = %do.body
  store i16 %41, i16* %add.ptr1.i, align 2, !tbaa !1
  store i16 %42, i16* %incdec.ptr3.i, align 4, !tbaa !1
  store i16 %40, i16* %incdec.ptr.i130, align 8, !tbaa !1
  store i16 %39, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  store i16 %38, i16* %incdec.ptr.2.i, align 4, !tbaa !1
  store i16 %37, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr.4.i, align 16, !tbaa !1
  store i64 %or, i64* %i, align 8, !tbaa !7
  %43 = load i16* %arraydecay, align 16, !tbaa !1
  %tobool31 = icmp eq i16 %43, 0
  br i1 %tobool31, label %if.end46, label %if.then32

if.then32:                                        ; preds = %do.end
  %sub33 = sub nsw i64 0, %or
  store i64 %sub33, i64* %i, align 8, !tbaa !7
  br label %if.end46

if.else35:                                        ; preds = %if.else13
  %call37 = call fastcc i32 @eshift(i16* %arraydecay, i32 %sub)
  %44 = load i16* %incdec.ptr3.i, align 4, !tbaa !1
  %conv39 = zext i16 %44 to i64
  store i64 %conv39, i64* %i, align 8, !tbaa !7
  %45 = load i16* %arraydecay, align 16, !tbaa !1
  %tobool41 = icmp eq i16 %45, 0
  br i1 %tobool41, label %if.end46, label %if.then42

if.then42:                                        ; preds = %if.else35
  %sub43 = sub nsw i64 0, %conv39
  store i64 %sub43, i64* %i, align 8, !tbaa !7
  br label %if.end46

if.end46:                                         ; preds = %if.then5, %do.end, %if.else35, %if.then32, %if.then42, %if.then11
  store i16 0, i16* %arraydecay, align 16, !tbaa !1
  store i16 16382, i16* %incdec.ptr.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %call51 = call fastcc i32 @enormlz(i16* %arraydecay)
  %cmp52 = icmp sgt i32 %call51, 80
  br i1 %cmp52, label %if.end63.thread, label %if.end63

if.end63.thread:                                  ; preds = %if.end46
  %xi4.i = bitcast [9 x i16]* %xi to i8*
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  %add.ptr.i85146 = getelementptr inbounds i16* %frac, i64 5
  store i16 0, i16* %add.ptr.i85146, align 2, !tbaa !1
  br label %if.end14.i

if.end63:                                         ; preds = %if.end46
  %46 = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %conv60 = zext i16 %46 to i32
  %sub61 = sub nsw i32 %conv60, %call51
  %conv62 = trunc i32 %sub61 to i16
  store i16 %conv62, i16* %incdec.ptr.i, align 2, !tbaa !1
  %47 = bitcast [9 x i16]* %xi to i32*
  %48 = load i32* %47, align 16
  %49 = bitcast [9 x i16]* %xi to i64*
  %.pre142 = load i64* %49, align 16
  %50 = trunc i64 %.pre142 to i32
  %51 = trunc i64 %.pre142 to i16
  %52 = lshr i32 %50, 16
  %53 = trunc i32 %52 to i16
  %54 = lshr i64 %.pre142, 48
  %55 = trunc i64 %54 to i16
  %56 = trunc i64 %.pre142 to i16
  %phitmp = icmp eq i16 %51, 0
  %.mask = and i32 %48, -65536
  %phitmp144 = icmp eq i32 %.mask, 2147418112
  %add.ptr.i85 = getelementptr inbounds i16* %frac, i64 5
  %or.i = or i16 %53, -32768
  %storemerge.i = select i1 %phitmp, i16 %53, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i85, align 2, !tbaa !1
  br i1 %phitmp144, label %for.body.i.i89, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i89
  %57 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i88 = icmp slt i32 %57, 9
  br i1 %cmp2.i.i88, label %for.body.i.i89, label %if.end13.i

for.body.i.i89:                                   ; preds = %if.end63, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %if.end63 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 %indvars.iv.i.i
  %58 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %58, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i90

if.then11.i90:                                    ; preds = %for.body.i.i89
  %cmp.i32.i = icmp ne i16 %56, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %59 = bitcast i16* %frac to i64*
  store i64 0, i64* %59, align 2
  %scevgep8.i.i = getelementptr i16* %frac, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i85, align 2, !tbaa !1
  br label %return

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %frac to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i85, align 2, !tbaa !1
  br label %return

if.end14.i:                                       ; preds = %if.end63.thread, %if.end63
  %60 = phi i16 [ 0, %if.end63.thread ], [ %55, %if.end63 ]
  %q.0.i = getelementptr inbounds i16* %frac, i64 4
  %incdec.ptr18.i91 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds i16* %frac, i64 3
  store i16 %60, i16* %q.0.i, align 2, !tbaa !1
  %61 = bitcast i16* %incdec.ptr18.i91 to i64*
  %62 = load i64* %61, align 8
  %63 = trunc i64 %62 to i32
  %64 = trunc i64 %62 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %frac, i64 2
  store i16 %64, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %65 = lshr i32 %63, 16
  %66 = trunc i32 %65 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %frac, i64 1
  store i16 %66, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %67 = lshr i64 %62, 32
  %68 = trunc i64 %67 to i16
  store i16 %68, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %69 = lshr i64 %62, 48
  %70 = trunc i64 %69 to i16
  store i16 %70, i16* %frac, align 2, !tbaa !1
  br label %return

return:                                           ; preds = %if.end14.i, %if.end13.i, %if.then11.i90, %if.end14.i127, %if.end13.i117, %if.then11.i114
  ret void
}

; Function Attrs: nounwind uwtable
define void @etruncui(%struct.realvaluetype* noalias nocapture sret %agg.result, %struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %yi.i = alloca [9 x i16], align 16
  %f = alloca [6 x i16], align 2
  %g = alloca [6 x i16], align 8
  %r.sroa.0 = alloca [3 x i64], align 8
  %l = alloca i64, align 8
  %0 = bitcast [6 x i16]* %g to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 8, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %g, i64 0, i64 0
  %arrayidx.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 5
  %2 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %2, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %entry ]
  %3 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %3, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %4 = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %1, i64 24, i32 8, i1 false), !tbaa.struct !5
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay2 = getelementptr inbounds [6 x i16]* %f, i64 0, i64 0
  call fastcc void @euifrac(i16* %arraydecay, i64* %l, i16* %arraydecay2)
  %l.val = load i64* %l, align 8, !tbaa !7
  %5 = bitcast [9 x i16]* %yi.i to i8*
  call void @llvm.lifetime.start(i64 18, i8* %5) #1
  %arraydecay.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 18, i32 16, i1 false) #1
  %shr.i = lshr i64 %l.val, 48
  %conv.i = trunc i64 %shr.i to i16
  %arrayidx.i9 = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 2
  store i16 %conv.i, i16* %arrayidx.i9, align 4, !tbaa !1
  %shr1.i = lshr i64 %l.val, 32
  %conv2.i = trunc i64 %shr1.i to i16
  %arrayidx3.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 3
  store i16 %conv2.i, i16* %arrayidx3.i, align 2, !tbaa !1
  %shr4.i = lshr i64 %l.val, 16
  %conv5.i = trunc i64 %shr4.i to i16
  %arrayidx6.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 4
  store i16 %conv5.i, i16* %arrayidx6.i, align 8, !tbaa !1
  %conv7.i = trunc i64 %l.val to i16
  %arrayidx8.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 5
  store i16 %conv7.i, i16* %arrayidx8.i, align 2, !tbaa !1
  %arrayidx9.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 1
  store i16 16430, i16* %arrayidx9.i, align 2, !tbaa !1
  %call.i = call fastcc i32 @enormlz(i16* %arraydecay.i) #1
  %cmp.i10 = icmp sgt i32 %call.i, 80
  br i1 %cmp.i10, label %ultoe.exit.thread, label %ultoe.exit

ultoe.exit.thread:                                ; preds = %if.end
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 18, i32 16, i1 false) #1
  store i16 0, i16* %arrayidx.i, align 2, !tbaa !1
  br label %if.end14.i

ultoe.exit:                                       ; preds = %if.end
  %6 = load i16* %arrayidx9.i, align 2, !tbaa !1
  %conv16.i = zext i16 %6 to i32
  %sub.i = sub nsw i32 %conv16.i, %call.i
  %conv17.i = trunc i32 %sub.i to i16
  store i16 %conv17.i, i16* %arrayidx9.i, align 2, !tbaa !1
  %7 = bitcast [9 x i16]* %yi.i to i32*
  %8 = load i32* %7, align 16
  %9 = bitcast [9 x i16]* %yi.i to i64*
  %.pre = load i64* %9, align 16
  %10 = trunc i64 %.pre to i32
  %11 = trunc i64 %.pre to i16
  %12 = lshr i32 %10, 16
  %13 = trunc i32 %12 to i16
  %14 = lshr i64 %.pre, 48
  %15 = trunc i64 %14 to i16
  %16 = trunc i64 %.pre to i16
  %phitmp = icmp eq i16 %11, 0
  %.mask = and i32 %8, -65536
  %phitmp17 = icmp eq i32 %.mask, 2147418112
  %or.i = or i16 %13, -32768
  %storemerge.i = select i1 %phitmp, i16 %13, i16 %or.i
  store i16 %storemerge.i, i16* %arrayidx.i, align 2, !tbaa !1
  br i1 %phitmp17, label %for.body.i.i, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %17 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %17, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end13.i

for.body.i.i:                                     ; preds = %ultoe.exit, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %ultoe.exit ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 %indvars.iv.i.i
  %18 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %18, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i
  %cmp.i32.i = icmp ne i16 %16, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %19 = bitcast [6 x i16]* %g to i64*
  store i64 0, i64* %19, align 8
  %scevgep8.i.i = getelementptr [6 x i16]* %g, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 8, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %arrayidx.i, align 2, !tbaa !1
  br label %emovo.exit

if.end13.i:                                       ; preds = %for.cond.i.i
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 10, i32 8, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %arrayidx.i, align 2, !tbaa !1
  br label %emovo.exit

if.end14.i:                                       ; preds = %ultoe.exit.thread, %ultoe.exit
  %20 = phi i16 [ 0, %ultoe.exit.thread ], [ %15, %ultoe.exit ]
  %q.0.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 3
  store i16 %20, i16* %q.0.i, align 8, !tbaa !1
  %21 = bitcast i16* %arrayidx6.i to i64*
  %22 = load i64* %21, align 8
  %23 = trunc i64 %22 to i32
  %24 = trunc i64 %22 to i16
  %incdec.ptr19.1.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 2
  store i16 %24, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %25 = lshr i32 %23, 16
  %26 = trunc i32 %25 to i16
  %incdec.ptr19.2.i = getelementptr inbounds [6 x i16]* %g, i64 0, i64 1
  store i16 %26, i16* %incdec.ptr19.1.i, align 4, !tbaa !1
  %27 = lshr i64 %22, 32
  %28 = trunc i64 %27 to i16
  store i16 %28, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %29 = lshr i64 %22, 48
  %30 = trunc i64 %29 to i16
  store i16 %30, i16* %arraydecay, align 8, !tbaa !1
  br label %emovo.exit

emovo.exit:                                       ; preds = %if.then11.i, %if.end13.i, %if.end14.i
  call void @llvm.lifetime.end(i64 18, i8* %5) #1
  %r.sroa.0.0..sroa_cast6 = bitcast [3 x i64]* %r.sroa.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast6, i8* %0, i64 12, i32 8, i1 false)
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast6, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast, i8* %r.sroa.0.0..sroa_cast6, i64 24, i32 8, i1 false)
  br label %return

return:                                           ; preds = %emovo.exit, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @euifrac(i16* nocapture readonly %x, i64* nocapture %i, i16* nocapture %frac) #0 {
entry:
  %xi = alloca [9 x i16], align 16
  %arraydecay = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 0
  %add.ptr.i = getelementptr inbounds i16* %x, i64 5
  %0 = load i16* %add.ptr.i, align 2, !tbaa !1
  %incdec.ptr.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 1
  %.lobit.i = ashr i16 %0, 15
  store i16 %.lobit.i, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 2
  %and5.i = and i16 %0, 32767
  store i16 %and5.i, i16* %incdec.ptr.i, align 2, !tbaa !1
  %cmp.i = icmp eq i16 %and5.i, 32767
  br i1 %cmp.i, label %for.body.i.i, label %if.end28.i

for.body.i.i:                                     ; preds = %entry, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %entry ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %x, %entry ]
  %1 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %1, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then13.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i
  %scevgep69.i = bitcast i16* %incdec.ptr3.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %x, i64 3
  %2 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %2, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %x, i64 2
  %3 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %3, i16* %incdec.ptr18.i, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %x, i64 1
  %4 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %4, i16* %incdec.ptr18.1.i, align 2, !tbaa !1
  %5 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %5, i16* %incdec.ptr18.2.i, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %x, i64 -1
  %6 = load i16* %x, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 8
  store i16 %6, i16* %incdec.ptr18.3.i, align 2, !tbaa !1
  %7 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

if.end28.i:                                       ; preds = %entry
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %x, i64 3
  %8 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %8, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %x, i64 2
  %9 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %9, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %x, i64 1
  %10 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %10, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %11 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %11, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %12 = load i16* %x, align 2, !tbaa !1
  store i16 %12, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %xi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i, %if.end28.i
  %13 = phi i16 [ 0, %for.cond20.preheader.i ], [ %6, %if.then13.i ], [ %12, %if.end28.i ]
  %14 = phi i16 [ 0, %for.cond20.preheader.i ], [ %5, %if.then13.i ], [ %11, %if.end28.i ]
  %15 = phi i16 [ 0, %for.cond20.preheader.i ], [ %4, %if.then13.i ], [ %10, %if.end28.i ]
  %16 = phi i16 [ 0, %for.cond20.preheader.i ], [ %3, %if.then13.i ], [ %9, %if.end28.i ]
  %17 = phi i16 [ 0, %for.cond20.preheader.i ], [ %2, %if.then13.i ], [ %8, %if.end28.i ]
  %conv = zext i16 %and5.i to i32
  %sub = add nsw i32 %conv, -16382
  %cmp = icmp slt i32 %sub, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %emovi.exit
  store i64 0, i64* %i, align 8, !tbaa !7
  %add.ptr.i81 = getelementptr inbounds i16* %frac, i64 5
  %tobool.i83 = icmp eq i16 %.lobit.i, 0
  %or.i84 = or i16 %0, -32768
  %storemerge.i85 = select i1 %tobool.i83, i16 %and5.i, i16 %or.i84
  store i16 %storemerge.i85, i16* %add.ptr.i81, align 2, !tbaa !1
  br i1 %cmp.i, label %for.body.i.i93, label %if.end14.i113

for.cond.i.i88:                                   ; preds = %for.body.i.i93
  %18 = trunc i64 %indvars.iv.i.i89 to i32
  %cmp2.i.i87 = icmp slt i32 %18, 9
  br i1 %cmp2.i.i87, label %for.cond.i.i88.for.body.i.i93_crit_edge, label %if.end13.i103

for.cond.i.i88.for.body.i.i93_crit_edge:          ; preds = %for.cond.i.i88
  %arrayidx4.i.i90.phi.trans.insert = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 %indvars.iv.i.i89
  %.pre = load i16* %arrayidx4.i.i90.phi.trans.insert, align 2, !tbaa !1
  %phitmp131 = add i64 %indvars.iv.i.i89, 1
  br label %for.body.i.i93

for.body.i.i93:                                   ; preds = %if.then, %for.cond.i.i88.for.body.i.i93_crit_edge
  %19 = phi i16 [ %.pre, %for.cond.i.i88.for.body.i.i93_crit_edge ], [ %17, %if.then ]
  %indvars.iv.i.i89 = phi i64 [ %phitmp131, %for.cond.i.i88.for.body.i.i93_crit_edge ], [ 4, %if.then ]
  %cmp6.i.i91 = icmp eq i16 %19, 0
  br i1 %cmp6.i.i91, label %for.cond.i.i88, label %if.then11.i100

if.then11.i100:                                   ; preds = %for.body.i.i93
  %cmp.i32.i95 = icmp ne i16 %.lobit.i, 0
  %conv1.i.i96 = zext i1 %cmp.i32.i95 to i16
  %20 = bitcast i16* %frac to i64*
  store i64 0, i64* %20, align 2
  %scevgep8.i.i97 = getelementptr i16* %frac, i64 4
  store i16 -16384, i16* %scevgep8.i.i97, align 2, !tbaa !1
  %shl.i.i98 = shl nuw i16 %conv1.i.i96, 15
  %or.i31.i99 = or i16 %shl.i.i98, 32767
  store i16 %or.i31.i99, i16* %add.ptr.i81, align 2, !tbaa !1
  br label %return

if.end13.i103:                                    ; preds = %for.cond.i.i88
  %x5.i.i101 = bitcast i16* %frac to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i101, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i102 = or i16 %storemerge.i85, 32767
  store i16 %or.i.i102, i16* %add.ptr.i81, align 2, !tbaa !1
  br label %return

if.end14.i113:                                    ; preds = %if.then
  %q.0.i104 = getelementptr inbounds i16* %frac, i64 4
  %incdec.ptr19.i107 = getelementptr inbounds i16* %frac, i64 3
  store i16 %17, i16* %q.0.i104, align 2, !tbaa !1
  %incdec.ptr19.1.i109 = getelementptr inbounds i16* %frac, i64 2
  store i16 %16, i16* %incdec.ptr19.i107, align 2, !tbaa !1
  %incdec.ptr19.2.i111 = getelementptr inbounds i16* %frac, i64 1
  store i16 %15, i16* %incdec.ptr19.1.i109, align 2, !tbaa !1
  store i16 %14, i16* %incdec.ptr19.2.i111, align 2, !tbaa !1
  store i16 %13, i16* %frac, align 2, !tbaa !1
  br label %return

if.end:                                           ; preds = %emovi.exit
  %cmp3 = icmp sgt i32 %sub, 64
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  store i64 -1, i64* %i, align 8, !tbaa !7
  %call = call fastcc i32 @eshift(i16* %arraydecay, i32 %sub)
  %21 = load i32* @extra_warnings, align 4, !tbaa !9
  %tobool = icmp eq i32 %21, 0
  br i1 %tobool, label %if.end31, label %if.then7

if.then7:                                         ; preds = %if.then5
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([43 x i8]* @.str33, i64 0, i64 0)) #1
  br label %if.end31

if.else:                                          ; preds = %if.end
  %cmp9 = icmp sgt i32 %sub, 16
  br i1 %cmp9, label %if.then11, label %if.else25

if.then11:                                        ; preds = %if.else
  %shr70 = and i32 %sub, -16
  %sub12 = sub nsw i32 %sub, %shr70
  %call14 = call fastcc i32 @eshift(i16* %arraydecay, i32 %sub12)
  %22 = bitcast i16* %incdec.ptr3.i to i32*
  %23 = load i32* %22, align 4
  %24 = zext i32 %23 to i64
  %conv16 = and i64 %24, 65535
  %add.ptr1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  %incdec.ptr.i116 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  %incdec.ptr.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  %incdec.ptr.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  %incdec.ptr.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  %incdec.ptr.4.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 8
  %25 = lshr i32 %23, 16
  %26 = trunc i32 %25 to i16
  %27 = bitcast i16* %incdec.ptr.i116 to i64*
  %28 = load i64* %27, align 8
  %29 = trunc i64 %28 to i32
  %30 = trunc i64 %28 to i16
  %31 = lshr i32 %29, 16
  %32 = trunc i32 %31 to i16
  %33 = lshr i64 %28, 32
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %28, 48
  %36 = trunc i64 %35 to i16
  %incdec.ptr.4.i.promoted = load i16* %incdec.ptr.4.i, align 16, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %do.body, %if.then11
  %37 = phi i16 [ %incdec.ptr.4.i.promoted, %if.then11 ], [ 0, %do.body ]
  %38 = phi i16 [ %36, %if.then11 ], [ %37, %do.body ]
  %39 = phi i16 [ %34, %if.then11 ], [ %38, %do.body ]
  %40 = phi i16 [ %32, %if.then11 ], [ %39, %do.body ]
  %41 = phi i16 [ %30, %if.then11 ], [ %40, %do.body ]
  %42 = phi i16 [ %26, %if.then11 ], [ %41, %do.body ]
  %ll.0 = phi i64 [ %conv16, %if.then11 ], [ %or, %do.body ]
  %k.0 = phi i32 [ %shr70, %if.then11 ], [ %sub22, %do.body ]
  %shl19 = shl i64 %ll.0, 16
  %conv21 = zext i16 %42 to i64
  %or = or i64 %conv21, %shl19
  %sub22 = add nsw i32 %k.0, -16
  %cmp23 = icmp sgt i32 %sub22, 0
  br i1 %cmp23, label %do.body, label %do.end

do.end:                                           ; preds = %do.body
  store i16 %41, i16* %add.ptr1.i, align 2, !tbaa !1
  store i16 %42, i16* %incdec.ptr3.i, align 4, !tbaa !1
  store i16 %40, i16* %incdec.ptr.i116, align 8, !tbaa !1
  store i16 %39, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  store i16 %38, i16* %incdec.ptr.2.i, align 4, !tbaa !1
  store i16 %37, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr.4.i, align 16, !tbaa !1
  store i64 %or, i64* %i, align 8, !tbaa !7
  br label %if.end31

if.else25:                                        ; preds = %if.else
  %call27 = call fastcc i32 @eshift(i16* %arraydecay, i32 %sub)
  %43 = load i16* %incdec.ptr3.i, align 4, !tbaa !1
  %conv29 = zext i16 %43 to i64
  store i64 %conv29, i64* %i, align 8, !tbaa !7
  br label %if.end31

if.end31:                                         ; preds = %if.then5, %do.end, %if.else25, %if.then7
  %44 = load i16* %arraydecay, align 16, !tbaa !1
  %tobool33 = icmp eq i16 %44, 0
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %if.end31
  store i64 0, i64* %i, align 8, !tbaa !7
  br label %if.end35

if.end35:                                         ; preds = %if.end31, %if.then34
  store i16 0, i16* %arraydecay, align 16, !tbaa !1
  store i16 16382, i16* %incdec.ptr.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %call40 = call fastcc i32 @enormlz(i16* %arraydecay)
  %cmp41 = icmp sgt i32 %call40, 80
  br i1 %cmp41, label %if.end52.thread, label %if.end52

if.end52.thread:                                  ; preds = %if.end35
  %xi4.i = bitcast [9 x i16]* %xi to i8*
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  %add.ptr.i71132 = getelementptr inbounds i16* %frac, i64 5
  store i16 0, i16* %add.ptr.i71132, align 2, !tbaa !1
  br label %if.end14.i

if.end52:                                         ; preds = %if.end35
  %45 = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %conv49 = zext i16 %45 to i32
  %sub50 = sub nsw i32 %conv49, %call40
  %conv51 = trunc i32 %sub50 to i16
  store i16 %conv51, i16* %incdec.ptr.i, align 2, !tbaa !1
  %46 = bitcast [9 x i16]* %xi to i32*
  %47 = load i32* %46, align 16
  %48 = bitcast [9 x i16]* %xi to i64*
  %.pre128 = load i64* %48, align 16
  %49 = trunc i64 %.pre128 to i32
  %50 = trunc i64 %.pre128 to i16
  %51 = lshr i32 %49, 16
  %52 = trunc i32 %51 to i16
  %53 = lshr i64 %.pre128, 48
  %54 = trunc i64 %53 to i16
  %55 = trunc i64 %.pre128 to i16
  %phitmp = icmp eq i16 %50, 0
  %.mask = and i32 %47, -65536
  %phitmp130 = icmp eq i32 %.mask, 2147418112
  %add.ptr.i71 = getelementptr inbounds i16* %frac, i64 5
  %or.i = or i16 %52, -32768
  %storemerge.i = select i1 %phitmp, i16 %52, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i71, align 2, !tbaa !1
  br i1 %phitmp130, label %for.body.i.i75, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i75
  %56 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i74 = icmp slt i32 %56, 9
  br i1 %cmp2.i.i74, label %for.body.i.i75, label %if.end13.i

for.body.i.i75:                                   ; preds = %if.end52, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %if.end52 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 %indvars.iv.i.i
  %57 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %57, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i76

if.then11.i76:                                    ; preds = %for.body.i.i75
  %cmp.i32.i = icmp ne i16 %55, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %58 = bitcast i16* %frac to i64*
  store i64 0, i64* %58, align 2
  %scevgep8.i.i = getelementptr i16* %frac, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i71, align 2, !tbaa !1
  br label %return

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %frac to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i71, align 2, !tbaa !1
  br label %return

if.end14.i:                                       ; preds = %if.end52.thread, %if.end52
  %59 = phi i16 [ 0, %if.end52.thread ], [ %54, %if.end52 ]
  %q.0.i = getelementptr inbounds i16* %frac, i64 4
  %incdec.ptr18.i77 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds i16* %frac, i64 3
  store i16 %59, i16* %q.0.i, align 2, !tbaa !1
  %60 = bitcast i16* %incdec.ptr18.i77 to i64*
  %61 = load i64* %60, align 8
  %62 = trunc i64 %61 to i32
  %63 = trunc i64 %61 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %frac, i64 2
  store i16 %63, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %64 = lshr i32 %62, 16
  %65 = trunc i32 %64 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %frac, i64 1
  store i16 %65, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %66 = lshr i64 %61, 32
  %67 = trunc i64 %66 to i16
  store i16 %67, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %68 = lshr i64 %61, 48
  %69 = trunc i64 %68 to i16
  store i16 %69, i16* %frac, align 2, !tbaa !1
  br label %return

return:                                           ; preds = %if.end14.i, %if.end13.i, %if.then11.i76, %if.end14.i113, %if.end13.i103, %if.then11.i100
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_atof(%struct.realvaluetype* noalias nocapture sret %agg.result, i8* nocapture readonly %s, i32 %t) #0 {
entry:
  %tem = alloca [6 x i16], align 2
  %e = alloca [6 x i16], align 8
  %r.sroa.0 = alloca [3 x i64], align 8
  switch i32 %t, label %sw.default [
    i32 13, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb3
    i32 18, label %sw.bb7
    i32 17, label %sw.bb7
  ]

sw.bb:                                            ; preds = %entry, %entry
  %arraydecay = getelementptr inbounds [6 x i16]* %tem, i64 0, i64 0
  call fastcc void @asctoeg(i8* %s, i16* %arraydecay, i32 24) #1
  %arraydecay2 = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  %arraydecay.val = load i16* %arraydecay, align 2, !tbaa !1
  %arraydecay.idx = getelementptr [6 x i16]* %tem, i64 0, i64 1
  %arraydecay.idx.val = load i16* %arraydecay.idx, align 2, !tbaa !1
  call fastcc void @e24toe(i16 %arraydecay.val, i16 %arraydecay.idx.val, i16* %arraydecay2)
  br label %do.body

sw.bb3:                                           ; preds = %entry
  %arraydecay4 = getelementptr inbounds [6 x i16]* %tem, i64 0, i64 0
  call fastcc void @asctoeg(i8* %s, i16* %arraydecay4, i32 53) #1
  %arraydecay6 = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  call fastcc void @e53toe(i16* %arraydecay4, i16* %arraydecay6)
  br label %do.body

sw.bb7:                                           ; preds = %entry, %entry
  %arraydecay8 = getelementptr inbounds [6 x i16]* %tem, i64 0, i64 0
  call fastcc void @asctoeg(i8* %s, i16* %arraydecay8, i32 64) #1
  %arraydecay10 = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  %x5.i.i.i = bitcast [6 x i16]* %e to i8*
  %incdec.ptr4.i = getelementptr inbounds [6 x i16]* %tem, i64 0, i64 1
  %0 = load i16* %arraydecay8, align 2, !tbaa !1
  %incdec.ptr4.1.i = getelementptr inbounds [6 x i16]* %tem, i64 0, i64 2
  %1 = load i16* %incdec.ptr4.i, align 2, !tbaa !1
  %incdec.ptr4.2.i = getelementptr inbounds [6 x i16]* %tem, i64 0, i64 3
  %2 = load i16* %incdec.ptr4.1.i, align 2, !tbaa !1
  %incdec.ptr4.3.i = getelementptr inbounds [6 x i16]* %tem, i64 0, i64 4
  %3 = load i16* %incdec.ptr4.2.i, align 2, !tbaa !1
  %4 = load i16* %incdec.ptr4.3.i, align 2, !tbaa !1
  %and.i = and i16 %4, 32767
  switch i16 %and.i, label %for.cond87.preheader.i [
    i16 0, label %land.lhs.true.i
    i16 32767, label %for.body30.i
  ]

land.lhs.true.i:                                  ; preds = %sw.bb7
  %cmp14.i = icmp sgt i16 %3, -1
  br i1 %cmp14.i, label %if.end14.i.i, label %for.cond87.preheader.i

if.end14.i.i:                                     ; preds = %land.lhs.true.i
  %.lobit.2.i.i = lshr i16 %0, 15
  %shl.2.i.i = shl i16 %0, 1
  %.lobit.3.i.i = lshr i16 %1, 15
  %shl.3.i.i = shl i16 %1, 1
  %5 = or i16 %shl.3.i.i, %.lobit.2.i.i
  %.lobit.4.i.i = lshr i16 %2, 15
  %shl.4.i.i = shl i16 %2, 1
  %6 = or i16 %shl.4.i.i, %.lobit.3.i.i
  %shl.5.i.i = shl i16 %3, 1
  %7 = or i16 %shl.5.i.i, %.lobit.4.i.i
  %add.ptr.i121.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %8 = and i16 %4, -32768
  store i16 %8, i16* %add.ptr.i121.i, align 2, !tbaa !1
  %q.0.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 4
  %incdec.ptr19.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 3
  store i16 %7, i16* %q.0.i.i, align 8, !tbaa !1
  %incdec.ptr19.1.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 2
  store i16 %6, i16* %incdec.ptr19.i.i, align 2, !tbaa !1
  %incdec.ptr19.2.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 1
  store i16 %5, i16* %incdec.ptr19.1.i.i, align 4, !tbaa !1
  store i16 %shl.2.i.i, i16* %incdec.ptr19.2.i.i, align 2, !tbaa !1
  store i16 0, i16* %arraydecay10, align 8, !tbaa !1
  br label %do.body

for.cond87.preheader.i:                           ; preds = %land.lhs.true.i, %sw.bb7
  %incdec.ptr92.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 1
  store i16 0, i16* %arraydecay10, align 8, !tbaa !1
  %incdec.ptr92.1.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 2
  store i16 %0, i16* %incdec.ptr92.i, align 2, !tbaa !1
  %incdec.ptr92.2.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 3
  store i16 %1, i16* %incdec.ptr92.1.i, align 4, !tbaa !1
  %incdec.ptr92.3.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 4
  store i16 %2, i16* %incdec.ptr92.2.i, align 2, !tbaa !1
  %incdec.ptr92.4.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  store i16 %3, i16* %incdec.ptr92.3.i, align 8, !tbaa !1
  store i16 %4, i16* %incdec.ptr92.4.i, align 2, !tbaa !1
  br label %do.body

for.body30.i:                                     ; preds = %sw.bb7, %for.inc52.for.body30_crit_edge.i
  %9 = phi i16 [ %.pre.i, %for.inc52.for.body30_crit_edge.i ], [ %0, %sw.bb7 ]
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.inc52.for.body30_crit_edge.i ], [ 0, %sw.bb7 ]
  %10 = trunc i64 %indvars.iv.i to i32
  %cond.i = icmp eq i32 %10, 3
  br i1 %cond.i, label %land.lhs.true40.i, label %land.lhs.true33.i

land.lhs.true33.i:                                ; preds = %for.body30.i
  %cmp36.i = icmp eq i16 %9, 0
  br i1 %cmp36.i, label %for.inc52.i, label %if.then46.i

land.lhs.true40.i:                                ; preds = %for.body30.i
  %cmp44.i = icmp eq i16 %9, -32768
  br i1 %cmp44.i, label %for.inc52.i, label %if.then46.i

if.then46.i:                                      ; preds = %land.lhs.true40.i, %land.lhs.true33.i
  %scevgep.i119.i = getelementptr [6 x i16]* %e, i64 0, i64 5
  %11 = bitcast [6 x i16]* %e to i64*
  store i64 0, i64* %11, align 8
  %scevgep8.i.i = getelementptr [6 x i16]* %e, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 8, !tbaa !1
  %or.i120.i = or i16 %4, 32767
  store i16 %or.i120.i, i16* %scevgep.i119.i, align 2, !tbaa !1
  br label %do.body

for.inc52.i:                                      ; preds = %land.lhs.true40.i, %land.lhs.true33.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %12 = trunc i64 %indvars.iv.next.i to i32
  %cmp28.i = icmp slt i32 %12, 4
  br i1 %cmp28.i, label %for.inc52.for.body30_crit_edge.i, label %if.end80.i

for.inc52.for.body30_crit_edge.i:                 ; preds = %for.inc52.i
  %arrayidx42.phi.trans.insert.i = getelementptr inbounds [6 x i16]* %tem, i64 0, i64 %indvars.iv.next.i
  %.pre.i = load i16* %arrayidx42.phi.trans.insert.i, align 2, !tbaa !1
  br label %for.body30.i

if.end80.i:                                       ; preds = %for.inc52.i
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i.i, i8 0, i64 10, i32 8, i1 false) #1
  %scevgep.i.i = getelementptr [6 x i16]* %e, i64 0, i64 5
  %13 = or i16 %4, 32767
  store i16 %13, i16* %scevgep.i.i, align 2, !tbaa !1
  br label %do.body

sw.default:                                       ; preds = %entry
  %arraydecay11 = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  call fastcc void @asctoeg(i8* %s, i16* %arraydecay11, i32 80) #1
  br label %do.body

do.body:                                          ; preds = %if.end80.i, %if.then46.i, %for.cond87.preheader.i, %if.end14.i.i, %sw.bb, %sw.bb3, %sw.default
  %r.sroa.0.0..sroa_cast13 = bitcast [6 x i16]* %e to i8*
  %r.sroa.0.0..sroa_cast14 = bitcast [3 x i64]* %r.sroa.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast14, i8* %r.sroa.0.0..sroa_cast13, i64 12, i32 8, i1 false)
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast14, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast, i8* %r.sroa.0.0..sroa_cast14, i64 24, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @e24toe(i16 %pe.val, i16 %pe.1.val, i16* nocapture %y) #0 {
entry:
  %yy = alloca [9 x i16], align 16
  %arraydecay = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 0
  %xi4.i = bitcast [9 x i16]* %yy to i8*
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  %pe.1.val.lobit = ashr i16 %pe.1.val, 15
  store i16 %pe.1.val.lobit, i16* %arraydecay, align 16, !tbaa !1
  %and3 = and i16 %pe.1.val, 127
  %or = or i16 %and3, 128
  %arrayidx5 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 2
  store i16 %or, i16* %arrayidx5, align 4, !tbaa !1
  %and7 = and i16 %pe.1.val, 32640
  %cmp = icmp eq i16 %and7, 32640
  br i1 %cmp, label %if.then11, label %if.end31

if.then11:                                        ; preds = %entry
  %0 = or i16 %and3, %pe.val
  %1 = icmp eq i16 %0, 0
  br i1 %1, label %if.end26, label %if.then21

if.then21:                                        ; preds = %if.then11
  %cmp24 = icmp ne i16 %pe.1.val.lobit, 0
  %conv25 = zext i1 %cmp24 to i16
  %scevgep.i82 = getelementptr i16* %y, i64 5
  %2 = bitcast i16* %y to i64*
  store i64 0, i64* %2, align 2
  %scevgep8.i = getelementptr i16* %y, i64 4
  store i16 -16384, i16* %scevgep8.i, align 2, !tbaa !1
  %shl.i = shl nuw i16 %conv25, 15
  %or.i83 = or i16 %shl.i, 32767
  store i16 %or.i83, i16* %scevgep.i82, align 2, !tbaa !1
  br label %return

if.end26:                                         ; preds = %if.then11
  %x4.i = bitcast i16* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 10, i32 2, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 10, i32 2, i1 false) #1
  %scevgep.i84 = getelementptr i16* %y, i64 5
  %tobool28 = icmp eq i16 %pe.1.val.lobit, 0
  %. = select i1 %tobool28, i16 32767, i16 -1
  store i16 %., i16* %scevgep.i84, align 2, !tbaa !1
  ret void

if.end31:                                         ; preds = %entry
  %shr81 = lshr exact i16 %and7, 7
  %cmp35 = icmp eq i16 %shr81, 0
  br i1 %cmp35, label %if.then37, label %if.end42

if.then37:                                        ; preds = %if.end31
  store i16 %and3, i16* %arrayidx5, align 4, !tbaa !1
  br label %if.end42

if.end42:                                         ; preds = %if.then37, %if.end31
  %denorm.0 = phi i1 [ true, %if.then37 ], [ false, %if.end31 ]
  %add = add i16 %shr81, 16256
  %arrayidx45 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 1
  store i16 %add, i16* %arrayidx45, align 2, !tbaa !1
  %arrayidx46 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 3
  store i16 %pe.val, i16* %arrayidx46, align 2, !tbaa !1
  %call = call fastcc i32 @eshift(i16* %arraydecay, i32 -8)
  br i1 %denorm.0, label %if.then50, label %if.end64

if.then50:                                        ; preds = %if.end42
  %call52 = call fastcc i32 @enormlz(i16* %arraydecay)
  %cmp53 = icmp sgt i32 %call52, 80
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.then50
  %scevgep7.i = bitcast i16* %arrayidx45 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep7.i, i8 0, i64 16, i32 2, i1 false) #1
  br label %if.end64

if.else:                                          ; preds = %if.then50
  %3 = load i16* %arrayidx45, align 2, !tbaa !1
  %conv60 = zext i16 %3 to i32
  %sub.neg = sub i32 -65535, %call52
  %sub61 = add i32 %sub.neg, %conv60
  %conv62 = trunc i32 %sub61 to i16
  store i16 %conv62, i16* %arrayidx45, align 2, !tbaa !1
  br label %if.end64

if.end64:                                         ; preds = %if.then55, %if.else, %if.end42
  %add.ptr.i = getelementptr inbounds i16* %y, i64 5
  %4 = bitcast [9 x i16]* %yy to i32*
  %5 = load i32* %4, align 16
  %6 = bitcast [9 x i16]* %yy to i64*
  %7 = load i64* %6, align 16
  %8 = trunc i64 %7 to i32
  %9 = trunc i64 %7 to i16
  %tobool.i = icmp eq i16 %9, 0
  %10 = lshr i32 %8, 16
  %11 = trunc i32 %10 to i16
  %or.i = or i16 %11, -32768
  %storemerge.i = select i1 %tobool.i, i16 %11, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i, align 2, !tbaa !1
  %.mask = and i32 %5, -65536
  %cmp.i = icmp eq i32 %.mask, 2147418112
  %12 = trunc i64 %7 to i16
  br i1 %cmp.i, label %for.body.i.i, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %13 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %13, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end13.i

for.body.i.i:                                     ; preds = %if.end64, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %if.end64 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 %indvars.iv.i.i
  %14 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %14, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i
  %cmp.i32.i = icmp ne i16 %12, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %15 = bitcast i16* %y to i64*
  store i64 0, i64* %15, align 2
  %scevgep8.i.i = getelementptr i16* %y, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %return

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %return

if.end14.i:                                       ; preds = %if.end64
  %16 = lshr i64 %7, 48
  %17 = trunc i64 %16 to i16
  %q.0.i = getelementptr inbounds i16* %y, i64 4
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds i16* %y, i64 3
  store i16 %17, i16* %q.0.i, align 2, !tbaa !1
  %18 = bitcast i16* %incdec.ptr18.i to i64*
  %19 = load i64* %18, align 8
  %20 = trunc i64 %19 to i32
  %21 = trunc i64 %19 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %y, i64 2
  store i16 %21, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %22 = lshr i32 %20, 16
  %23 = trunc i32 %22 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %y, i64 1
  store i16 %23, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %24 = lshr i64 %19, 32
  %25 = trunc i64 %24 to i16
  store i16 %25, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %26 = lshr i64 %19, 48
  %27 = trunc i64 %26 to i16
  store i16 %27, i16* %y, align 2, !tbaa !1
  br label %return

return:                                           ; preds = %if.end14.i, %if.end13.i, %if.then11.i, %if.then21
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @e53toe(i16* nocapture readonly %pe, i16* nocapture %y) #0 {
entry:
  %yy = alloca [9 x i16], align 16
  %arraydecay = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 0
  %xi4.i = bitcast [9 x i16]* %yy to i8*
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  %add.ptr = getelementptr inbounds i16* %pe, i64 3
  %0 = load i16* %add.ptr, align 2, !tbaa !1
  %.lobit = ashr i16 %0, 15
  store i16 %.lobit, i16* %arraydecay, align 16, !tbaa !1
  %and3 = and i16 %0, 15
  %or = or i16 %and3, 16
  %arrayidx5 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 2
  store i16 %or, i16* %arrayidx5, align 4, !tbaa !1
  %and7 = and i16 %0, 32752
  %cmp = icmp eq i16 %and7, 32752
  br i1 %cmp, label %if.then11, label %if.end41

if.then11:                                        ; preds = %entry
  %cmp15 = icmp eq i16 %and3, 0
  br i1 %cmp15, label %lor.lhs.false, label %if.then31

lor.lhs.false:                                    ; preds = %if.then11
  %arrayidx17 = getelementptr inbounds i16* %pe, i64 2
  %1 = load i16* %arrayidx17, align 2, !tbaa !1
  %cmp19 = icmp eq i16 %1, 0
  br i1 %cmp19, label %lor.lhs.false21, label %if.then31

lor.lhs.false21:                                  ; preds = %lor.lhs.false
  %arrayidx22 = getelementptr inbounds i16* %pe, i64 1
  %2 = load i16* %arrayidx22, align 2, !tbaa !1
  %cmp24 = icmp eq i16 %2, 0
  br i1 %cmp24, label %lor.lhs.false26, label %if.then31

lor.lhs.false26:                                  ; preds = %lor.lhs.false21
  %3 = load i16* %pe, align 2, !tbaa !1
  %cmp29 = icmp eq i16 %3, 0
  br i1 %cmp29, label %if.end36, label %if.then31

if.then31:                                        ; preds = %lor.lhs.false26, %lor.lhs.false21, %lor.lhs.false, %if.then11
  %cmp34 = icmp ne i16 %.lobit, 0
  %conv35 = zext i1 %cmp34 to i16
  %scevgep.i102 = getelementptr i16* %y, i64 5
  %4 = bitcast i16* %y to i64*
  store i64 0, i64* %4, align 2
  %scevgep8.i = getelementptr i16* %y, i64 4
  store i16 -16384, i16* %scevgep8.i, align 2, !tbaa !1
  %shl.i = shl nuw i16 %conv35, 15
  %or.i103 = or i16 %shl.i, 32767
  store i16 %or.i103, i16* %scevgep.i102, align 2, !tbaa !1
  br label %return

if.end36:                                         ; preds = %lor.lhs.false26
  %x4.i = bitcast i16* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 10, i32 2, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 10, i32 2, i1 false) #1
  %scevgep.i104 = getelementptr i16* %y, i64 5
  %tobool38 = icmp eq i16 %.lobit, 0
  %. = select i1 %tobool38, i16 32767, i16 -1
  store i16 %., i16* %scevgep.i104, align 2, !tbaa !1
  ret void

if.end41:                                         ; preds = %entry
  %shr101 = lshr exact i16 %and7, 4
  %cmp45 = icmp eq i16 %shr101, 0
  br i1 %cmp45, label %if.then47, label %if.end52

if.then47:                                        ; preds = %if.end41
  store i16 %and3, i16* %arrayidx5, align 4, !tbaa !1
  br label %if.end52

if.end52:                                         ; preds = %if.then47, %if.end41
  %denorm.0 = phi i1 [ true, %if.then47 ], [ false, %if.end41 ]
  %add = add i16 %shr101, 15360
  %arrayidx55 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 1
  store i16 %add, i16* %arrayidx55, align 2, !tbaa !1
  %arrayidx56 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 3
  %incdec.ptr = getelementptr inbounds i16* %pe, i64 2
  %5 = load i16* %incdec.ptr, align 2, !tbaa !1
  %incdec.ptr57 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 4
  store i16 %5, i16* %arrayidx56, align 2, !tbaa !1
  %incdec.ptr58 = getelementptr inbounds i16* %pe, i64 1
  %6 = load i16* %incdec.ptr58, align 2, !tbaa !1
  %incdec.ptr59 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 5
  store i16 %6, i16* %incdec.ptr57, align 8, !tbaa !1
  %7 = load i16* %pe, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr59, align 2, !tbaa !1
  %call = call fastcc i32 @eshift(i16* %arraydecay, i32 -5)
  br i1 %denorm.0, label %if.then64, label %if.end78

if.then64:                                        ; preds = %if.end52
  %call66 = call fastcc i32 @enormlz(i16* %arraydecay)
  %cmp67 = icmp sgt i32 %call66, 80
  br i1 %cmp67, label %if.then69, label %if.else

if.then69:                                        ; preds = %if.then64
  %scevgep7.i = bitcast i16* %arrayidx55 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep7.i, i8 0, i64 16, i32 2, i1 false) #1
  br label %if.end78

if.else:                                          ; preds = %if.then64
  %8 = load i16* %arrayidx55, align 2, !tbaa !1
  %conv74 = zext i16 %8 to i32
  %sub.neg = sub i32 -65535, %call66
  %sub75 = add i32 %sub.neg, %conv74
  %conv76 = trunc i32 %sub75 to i16
  store i16 %conv76, i16* %arrayidx55, align 2, !tbaa !1
  br label %if.end78

if.end78:                                         ; preds = %if.then69, %if.else, %if.end52
  %add.ptr.i = getelementptr inbounds i16* %y, i64 5
  %9 = bitcast [9 x i16]* %yy to i32*
  %10 = load i32* %9, align 16
  %11 = bitcast [9 x i16]* %yy to i64*
  %12 = load i64* %11, align 16
  %13 = trunc i64 %12 to i32
  %14 = trunc i64 %12 to i16
  %tobool.i = icmp eq i16 %14, 0
  %15 = lshr i32 %13, 16
  %16 = trunc i32 %15 to i16
  %or.i = or i16 %16, -32768
  %storemerge.i = select i1 %tobool.i, i16 %16, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i, align 2, !tbaa !1
  %.mask = and i32 %10, -65536
  %cmp.i = icmp eq i32 %.mask, 2147418112
  %17 = trunc i64 %12 to i16
  br i1 %cmp.i, label %for.body.i.i, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %18 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %18, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end13.i

for.body.i.i:                                     ; preds = %if.end78, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %if.end78 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 %indvars.iv.i.i
  %19 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %19, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i
  %cmp.i32.i = icmp ne i16 %17, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %20 = bitcast i16* %y to i64*
  store i64 0, i64* %20, align 2
  %scevgep8.i.i = getelementptr i16* %y, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %return

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %return

if.end14.i:                                       ; preds = %if.end78
  %21 = lshr i64 %12, 48
  %22 = trunc i64 %21 to i16
  %q.0.i = getelementptr inbounds i16* %y, i64 4
  %incdec.ptr19.i = getelementptr inbounds i16* %y, i64 3
  store i16 %22, i16* %q.0.i, align 2, !tbaa !1
  %23 = bitcast i16* %incdec.ptr57 to i64*
  %24 = load i64* %23, align 8
  %25 = trunc i64 %24 to i32
  %26 = trunc i64 %24 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %y, i64 2
  store i16 %26, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %27 = lshr i32 %25, 16
  %28 = trunc i32 %27 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %y, i64 1
  store i16 %28, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %29 = lshr i64 %24, 32
  %30 = trunc i64 %29 to i16
  store i16 %30, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %31 = lshr i64 %24, 48
  %32 = trunc i64 %31 to i16
  store i16 %32, i16* %y, align 2, !tbaa !1
  br label %return

return:                                           ; preds = %if.end14.i, %if.end13.i, %if.then11.i, %if.then31
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_negate(%struct.realvaluetype* noalias nocapture sret %agg.result, %struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %r.sroa.0.sroa.3 = alloca [12 x i8], align 4
  %0 = bitcast %struct.realvaluetype* %x to i8*
  %agg.result1213 = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %agg.result1213, i8* %0, i64 10, i32 8, i1 false)
  %e.sroa.2.0..sroa_idx = getelementptr inbounds i8* %0, i64 10
  %e.sroa.2.0..sroa_cast = bitcast i8* %e.sroa.2.0..sroa_idx to i16*
  %e.sroa.2.0.copyload = load i16* %e.sroa.2.0..sroa_cast, align 2
  %xor.i = xor i16 %e.sroa.2.0.copyload, -32768
  %r.sroa.0.sroa.3.0.add.ptr.sroa_idx = getelementptr inbounds [12 x i8]* %r.sroa.0.sroa.3, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.sroa.3.0.add.ptr.sroa_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  %r.sroa.0.sroa.2.0.r.sroa.0.0..sroa_cast.sroa_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast, i64 10
  %r.sroa.0.sroa.2.0.r.sroa.0.0..sroa_cast.sroa_cast = bitcast i8* %r.sroa.0.sroa.2.0.r.sroa.0.0..sroa_cast.sroa_idx to i16*
  store i16 %xor.i, i16* %r.sroa.0.sroa.2.0.r.sroa.0.0..sroa_cast.sroa_cast, align 2
  %r.sroa.0.sroa.3.0.r.sroa.0.0..sroa_cast.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.sroa.3.0.r.sroa.0.0..sroa_cast.sroa_raw_idx, i8* %r.sroa.0.sroa.3.0.add.ptr.sroa_idx, i64 12, i32 4, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @efixi(%struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %f = alloca [6 x i16], align 2
  %g = alloca [6 x i16], align 2
  %l = alloca i64, align 8
  %0 = bitcast [6 x i16]* %f to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %f, i64 0, i64 0
  %arrayidx.i = getelementptr inbounds [6 x i16]* %f, i64 0, i64 5
  %2 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %2, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %entry ]
  %3 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %3, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([27 x i8]* @.str, i64 0, i64 0)) #1
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay2 = getelementptr inbounds [6 x i16]* %g, i64 0, i64 0
  call fastcc void @eifrac(i16* %arraydecay, i64* %l, i16* %arraydecay2)
  %4 = load i64* %l, align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ -1, %if.then ], [ %4, %if.end ]
  ret i64 %retval.0
}

declare void @warning(i8*, ...) #3

; Function Attrs: nounwind uwtable
define i64 @efixui(%struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %f = alloca [6 x i16], align 2
  %g = alloca [6 x i16], align 2
  %l = alloca i64, align 8
  %0 = bitcast [6 x i16]* %f to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %f, i64 0, i64 0
  %arrayidx.i = getelementptr inbounds [6 x i16]* %f, i64 0, i64 5
  %2 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %2, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %entry ]
  %3 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %3, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([36 x i8]* @.str1, i64 0, i64 0)) #1
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay2 = getelementptr inbounds [6 x i16]* %g, i64 0, i64 0
  call fastcc void @euifrac(i16* %arraydecay, i64* %l, i16* %arraydecay2)
  %4 = load i64* %l, align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ -1, %if.then ], [ %4, %if.end ]
  ret i64 %retval.0
}

; Function Attrs: nounwind uwtable
define void @ereal_from_int(%struct.realvaluetype* nocapture %d, i64 %i, i64 %j, i32 %mode) #0 {
entry:
  %yi.i = alloca [9 x i16], align 16
  %df = alloca [6 x i16], align 8
  %dg = alloca [6 x i16], align 8
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !6
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0), i32 869, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.ereal_from_int, i64 0, i64 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %cmp1 = icmp slt i64 %j, 0
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %tobool = icmp eq i64 %i, 0
  br i1 %tobool, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then2
  %neg = xor i64 %j, -1
  %sub = sub nsw i64 0, %i
  br label %if.end5

if.else:                                          ; preds = %if.then2
  %add = sub i64 0, %j
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.else, %if.end
  %i151 = phi i64 [ %sub, %if.then3 ], [ 0, %if.else ], [ %i, %if.end ]
  %j150 = phi i64 [ %neg, %if.then3 ], [ %add, %if.else ], [ %j, %if.end ]
  %sign.0 = phi i1 [ true, %if.then3 ], [ true, %if.else ], [ false, %if.end ]
  %arraydecay = getelementptr inbounds [6 x i16]* %df, i64 0, i64 0
  call fastcc void @eldexp(i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i32 64, i16* %arraydecay)
  %arraydecay6 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 0
  %1 = bitcast [9 x i16]* %yi.i to i8*
  call void @llvm.lifetime.start(i64 18, i8* %1) #1
  %arraydecay.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 18, i32 16, i1 false) #1
  %shr.i = lshr i64 %j150, 48
  %conv.i = trunc i64 %shr.i to i16
  %arrayidx.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 2
  store i16 %conv.i, i16* %arrayidx.i, align 4, !tbaa !1
  %shr1.i = lshr i64 %j150, 32
  %conv2.i = trunc i64 %shr1.i to i16
  %arrayidx3.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 3
  store i16 %conv2.i, i16* %arrayidx3.i, align 2, !tbaa !1
  %shr4.i = lshr i64 %j150, 16
  %conv5.i = trunc i64 %shr4.i to i16
  %arrayidx6.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 4
  store i16 %conv5.i, i16* %arrayidx6.i, align 8, !tbaa !1
  %conv7.i = trunc i64 %j150 to i16
  %arrayidx8.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 5
  store i16 %conv7.i, i16* %arrayidx8.i, align 2, !tbaa !1
  %arrayidx9.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 1
  store i16 16430, i16* %arrayidx9.i, align 2, !tbaa !1
  %call.i = call fastcc i32 @enormlz(i16* %arraydecay.i) #1
  %cmp.i = icmp sgt i32 %call.i, 80
  br i1 %cmp.i, label %ultoe.exit.thread, label %ultoe.exit

ultoe.exit.thread:                                ; preds = %if.end5
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 18, i32 16, i1 false) #1
  %add.ptr.i66169 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 5
  store i16 0, i16* %add.ptr.i66169, align 2, !tbaa !1
  br label %if.end14.i98

ultoe.exit:                                       ; preds = %if.end5
  %2 = load i16* %arrayidx9.i, align 2, !tbaa !1
  %conv16.i = zext i16 %2 to i32
  %sub.i = sub nsw i32 %conv16.i, %call.i
  %conv17.i = trunc i32 %sub.i to i16
  store i16 %conv17.i, i16* %arrayidx9.i, align 2, !tbaa !1
  %3 = bitcast [9 x i16]* %yi.i to i32*
  %4 = load i32* %3, align 16
  %5 = bitcast [9 x i16]* %yi.i to i64*
  %.pre = load i64* %5, align 16
  %6 = trunc i64 %.pre to i32
  %7 = trunc i64 %.pre to i16
  %8 = lshr i32 %6, 16
  %9 = trunc i32 %8 to i16
  %10 = lshr i64 %.pre, 48
  %11 = trunc i64 %10 to i16
  %12 = trunc i64 %.pre to i16
  %phitmp = icmp eq i16 %7, 0
  %.mask = and i32 %4, -65536
  %phitmp155 = icmp eq i32 %.mask, 2147418112
  %add.ptr.i66 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 5
  %or.i69 = or i16 %9, -32768
  %storemerge.i70 = select i1 %phitmp, i16 %9, i16 %or.i69
  store i16 %storemerge.i70, i16* %add.ptr.i66, align 2, !tbaa !1
  br i1 %phitmp155, label %for.body.i.i78, label %if.end14.i98

for.cond.i.i73:                                   ; preds = %for.body.i.i78
  %13 = trunc i64 %indvars.iv.next.i.i77 to i32
  %cmp2.i.i72 = icmp slt i32 %13, 9
  br i1 %cmp2.i.i72, label %for.body.i.i78, label %if.end13.i88

for.body.i.i78:                                   ; preds = %ultoe.exit, %for.cond.i.i73
  %indvars.iv.i.i74 = phi i64 [ %indvars.iv.next.i.i77, %for.cond.i.i73 ], [ 3, %ultoe.exit ]
  %arrayidx4.i.i75 = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 %indvars.iv.i.i74
  %14 = load i16* %arrayidx4.i.i75, align 2, !tbaa !1
  %cmp6.i.i76 = icmp eq i16 %14, 0
  %indvars.iv.next.i.i77 = add nuw nsw i64 %indvars.iv.i.i74, 1
  br i1 %cmp6.i.i76, label %for.cond.i.i73, label %if.then11.i85

if.then11.i85:                                    ; preds = %for.body.i.i78
  %cmp.i32.i80 = icmp ne i16 %12, 0
  %conv1.i.i81 = zext i1 %cmp.i32.i80 to i16
  %15 = bitcast [6 x i16]* %dg to i64*
  store i64 0, i64* %15, align 8
  %scevgep8.i.i82 = getelementptr [6 x i16]* %dg, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i82, align 8, !tbaa !1
  %shl.i.i83 = shl nuw i16 %conv1.i.i81, 15
  %or.i31.i84 = or i16 %shl.i.i83, 32767
  store i16 %or.i31.i84, i16* %add.ptr.i66, align 2, !tbaa !1
  br label %emovo.exit99

if.end13.i88:                                     ; preds = %for.cond.i.i73
  %x5.i.i86 = bitcast [6 x i16]* %dg to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i86, i8 0, i64 10, i32 8, i1 false) #1
  %or.i.i87 = or i16 %storemerge.i70, 32767
  store i16 %or.i.i87, i16* %add.ptr.i66, align 2, !tbaa !1
  br label %emovo.exit99

if.end14.i98:                                     ; preds = %ultoe.exit.thread, %ultoe.exit
  %add.ptr.i66173 = phi i16* [ %add.ptr.i66169, %ultoe.exit.thread ], [ %add.ptr.i66, %ultoe.exit ]
  %16 = phi i16 [ 0, %ultoe.exit.thread ], [ %11, %ultoe.exit ]
  %q.0.i89 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  %incdec.ptr19.i92 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %16, i16* %q.0.i89, align 8, !tbaa !1
  %17 = bitcast i16* %arrayidx6.i to i64*
  %18 = load i64* %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = trunc i64 %18 to i16
  %incdec.ptr19.1.i94 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %20, i16* %incdec.ptr19.i92, align 2, !tbaa !1
  %21 = lshr i32 %19, 16
  %22 = trunc i32 %21 to i16
  %incdec.ptr19.2.i96 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 %22, i16* %incdec.ptr19.1.i94, align 4, !tbaa !1
  %23 = lshr i64 %18, 32
  %24 = trunc i64 %23 to i16
  store i16 %24, i16* %incdec.ptr19.2.i96, align 2, !tbaa !1
  %25 = lshr i64 %18, 48
  %26 = trunc i64 %25 to i16
  store i16 %26, i16* %arraydecay6, align 8, !tbaa !1
  br label %emovo.exit99

emovo.exit99:                                     ; preds = %if.then11.i85, %if.end13.i88, %if.end14.i98
  %add.ptr.i66172 = phi i16* [ %add.ptr.i66, %if.then11.i85 ], [ %add.ptr.i66, %if.end13.i88 ], [ %add.ptr.i66173, %if.end14.i98 ]
  call void @llvm.lifetime.end(i64 18, i8* %1) #1
  call fastcc void @emul(i16* %arraydecay6, i16* %arraydecay, i16* %arraydecay6)
  call void @llvm.lifetime.start(i64 18, i8* %1) #1
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 18, i32 16, i1 false) #1
  %shr.i44 = lshr i64 %i151, 48
  %conv.i45 = trunc i64 %shr.i44 to i16
  store i16 %conv.i45, i16* %arrayidx.i, align 4, !tbaa !1
  %shr1.i47 = lshr i64 %i151, 32
  %conv2.i48 = trunc i64 %shr1.i47 to i16
  store i16 %conv2.i48, i16* %arrayidx3.i, align 2, !tbaa !1
  %shr4.i50 = lshr i64 %i151, 16
  %conv5.i51 = trunc i64 %shr4.i50 to i16
  store i16 %conv5.i51, i16* %arrayidx6.i, align 8, !tbaa !1
  %conv7.i53 = trunc i64 %i151 to i16
  store i16 %conv7.i53, i16* %arrayidx8.i, align 2, !tbaa !1
  store i16 16430, i16* %arrayidx9.i, align 2, !tbaa !1
  %call.i56 = call fastcc i32 @enormlz(i16* %arraydecay.i) #1
  %cmp.i57 = icmp sgt i32 %call.i56, 80
  br i1 %cmp.i57, label %ultoe.exit63.thread, label %ultoe.exit63

ultoe.exit63.thread:                              ; preds = %emovo.exit99
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 18, i32 16, i1 false) #1
  %add.ptr.i174 = getelementptr inbounds [6 x i16]* %df, i64 0, i64 5
  store i16 0, i16* %add.ptr.i174, align 2, !tbaa !1
  br label %if.end14.i

ultoe.exit63:                                     ; preds = %emovo.exit99
  %27 = load i16* %arrayidx9.i, align 2, !tbaa !1
  %conv16.i59 = zext i16 %27 to i32
  %sub.i60 = sub nsw i32 %conv16.i59, %call.i56
  %conv17.i61 = trunc i32 %sub.i60 to i16
  store i16 %conv17.i61, i16* %arrayidx9.i, align 2, !tbaa !1
  %28 = bitcast [9 x i16]* %yi.i to i32*
  %29 = load i32* %28, align 16
  %30 = bitcast [9 x i16]* %yi.i to i64*
  %.pre152 = load i64* %30, align 16
  %31 = trunc i64 %.pre152 to i32
  %32 = trunc i64 %.pre152 to i16
  %33 = lshr i32 %31, 16
  %34 = trunc i32 %33 to i16
  %35 = lshr i64 %.pre152, 48
  %36 = trunc i64 %35 to i16
  %37 = trunc i64 %.pre152 to i16
  %phitmp156 = icmp eq i16 %32, 0
  %.mask158 = and i32 %29, -65536
  %phitmp157 = icmp eq i32 %.mask158, 2147418112
  %add.ptr.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 5
  %or.i = or i16 %34, -32768
  %storemerge.i = select i1 %phitmp156, i16 %34, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i, align 2, !tbaa !1
  br i1 %phitmp157, label %for.body.i.i, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %38 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %38, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end13.i

for.body.i.i:                                     ; preds = %ultoe.exit63, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %ultoe.exit63 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 %indvars.iv.i.i
  %39 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %39, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i
  %cmp.i32.i = icmp ne i16 %37, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %40 = bitcast [6 x i16]* %df to i64*
  store i64 0, i64* %40, align 8
  %scevgep8.i.i = getelementptr [6 x i16]* %df, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 8, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %emovo.exit

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast [6 x i16]* %df to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 8, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %emovo.exit

if.end14.i:                                       ; preds = %ultoe.exit63.thread, %ultoe.exit63
  %41 = phi i16 [ 0, %ultoe.exit63.thread ], [ %36, %ultoe.exit63 ]
  %q.0.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 3
  store i16 %41, i16* %q.0.i, align 8, !tbaa !1
  %42 = bitcast i16* %arrayidx6.i to i64*
  %43 = load i64* %42, align 8
  %44 = trunc i64 %43 to i32
  %45 = trunc i64 %43 to i16
  %incdec.ptr19.1.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 2
  store i16 %45, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %46 = lshr i32 %44, 16
  %47 = trunc i32 %46 to i16
  %incdec.ptr19.2.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 1
  store i16 %47, i16* %incdec.ptr19.1.i, align 4, !tbaa !1
  %48 = lshr i64 %43, 32
  %49 = trunc i64 %48 to i16
  store i16 %49, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %50 = lshr i64 %43, 48
  %51 = trunc i64 %50 to i16
  store i16 %51, i16* %arraydecay, align 8, !tbaa !1
  br label %emovo.exit

emovo.exit:                                       ; preds = %if.then11.i, %if.end13.i, %if.end14.i
  call void @llvm.lifetime.end(i64 18, i8* %1) #1
  call fastcc void @eadd(i16* %arraydecay, i16* %arraydecay6, i16* %arraydecay6)
  br i1 %sign.0, label %if.then15, label %if.end17

if.then15:                                        ; preds = %emovo.exit
  %52 = load i16* %add.ptr.i66172, align 2, !tbaa !1
  %xor.i = xor i16 %52, -32768
  store i16 %xor.i, i16* %add.ptr.i66172, align 2, !tbaa !1
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %emovo.exit
  %arrayidx19 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %53 = load i16* %arrayidx19, align 2, !tbaa !1
  %conv = zext i16 %53 to i32
  switch i32 %conv, label %sw.default [
    i32 32, label %sw.bb
    i32 64, label %sw.bb24
    i32 96, label %sw.bb29
    i32 128, label %sw.bb34
  ]

sw.bb:                                            ; preds = %if.end17
  call fastcc void @etoe24(i16* %arraydecay6, i16* %arraydecay)
  %54 = bitcast [6 x i16]* %df to i32*
  %arraydecay.val = load i32* %54, align 8
  %55 = trunc i32 %arraydecay.val to i16
  %56 = lshr i32 %arraydecay.val, 16
  %57 = trunc i32 %56 to i16
  call fastcc void @e24toe(i16 %55, i16 %57, i16* %arraydecay6)
  br label %do.body

sw.bb24:                                          ; preds = %if.end17
  call fastcc void @etoe53(i16* %arraydecay6, i16* %arraydecay)
  call fastcc void @e53toe(i16* %arraydecay, i16* %arraydecay6)
  br label %do.body

sw.bb29:                                          ; preds = %if.end17
  call fastcc void @etoe64(i16* %arraydecay6, i16* %arraydecay)
  %x5.i.i.i101 = bitcast [6 x i16]* %dg to i8*
  %58 = bitcast [6 x i16]* %df to i64*
  %59 = load i64* %58, align 8
  %60 = trunc i64 %59 to i32
  %61 = trunc i64 %59 to i16
  %62 = lshr i32 %60, 16
  %63 = trunc i32 %62 to i16
  %64 = lshr i64 %59, 32
  %65 = trunc i64 %64 to i16
  %incdec.ptr4.3.i105 = getelementptr inbounds [6 x i16]* %df, i64 0, i64 4
  %66 = lshr i64 %59, 48
  %67 = trunc i64 %66 to i16
  %68 = load i16* %incdec.ptr4.3.i105, align 8, !tbaa !1
  %and.i106 = and i16 %68, 32767
  switch i16 %and.i106, label %for.cond87.preheader.i127 [
    i16 0, label %land.lhs.true.i108
    i16 32767, label %for.body30.i130
  ]

land.lhs.true.i108:                               ; preds = %sw.bb29
  %cmp14.i107 = icmp sgt i16 %67, -1
  br i1 %cmp14.i107, label %if.end14.i.i121, label %for.cond87.preheader.i127

if.end14.i.i121:                                  ; preds = %land.lhs.true.i108
  %.lobit.2.i.i109 = lshr i16 %61, 15
  %shl.2.i.i110 = shl i16 %61, 1
  %.lobit.3.i.i111164 = lshr i32 %60, 31
  %.lobit.3.i.i111 = trunc i32 %.lobit.3.i.i111164 to i16
  %shl.3.i.i112165 = shl nuw nsw i32 %62, 1
  %shl.3.i.i112 = trunc i32 %shl.3.i.i112165 to i16
  %69 = or i16 %shl.3.i.i112, %.lobit.2.i.i109
  %.lobit.4.i.i113166 = lshr i64 %59, 47
  %.lobit.4.i.i113166.tr = trunc i64 %.lobit.4.i.i113166 to i16
  %.lobit.4.i.i113 = and i16 %.lobit.4.i.i113166.tr, 1
  %shl.4.i.i114167 = shl nuw nsw i64 %64, 1
  %shl.4.i.i114 = trunc i64 %shl.4.i.i114167 to i16
  %70 = or i16 %shl.4.i.i114, %.lobit.3.i.i111
  %shl.5.i.i115168 = shl nuw nsw i64 %66, 1
  %shl.5.i.i115 = trunc i64 %shl.5.i.i115168 to i16
  %71 = or i16 %shl.5.i.i115, %.lobit.4.i.i113
  %72 = and i16 %68, -32768
  store i16 %72, i16* %add.ptr.i66172, align 2, !tbaa !1
  %q.0.i.i117 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  %incdec.ptr19.i.i118 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %71, i16* %q.0.i.i117, align 8, !tbaa !1
  %incdec.ptr19.1.i.i119 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %70, i16* %incdec.ptr19.i.i118, align 2, !tbaa !1
  %incdec.ptr19.2.i.i120 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 %69, i16* %incdec.ptr19.1.i.i119, align 4, !tbaa !1
  store i16 %shl.2.i.i110, i16* %incdec.ptr19.2.i.i120, align 2, !tbaa !1
  store i16 0, i16* %arraydecay6, align 8, !tbaa !1
  br label %do.body

for.cond87.preheader.i127:                        ; preds = %land.lhs.true.i108, %sw.bb29
  %incdec.ptr92.i122 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 0, i16* %arraydecay6, align 8, !tbaa !1
  %incdec.ptr92.1.i123 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %61, i16* %incdec.ptr92.i122, align 2, !tbaa !1
  %incdec.ptr92.2.i124 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %63, i16* %incdec.ptr92.1.i123, align 4, !tbaa !1
  %incdec.ptr92.3.i125 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  store i16 %65, i16* %incdec.ptr92.2.i124, align 2, !tbaa !1
  store i16 %67, i16* %incdec.ptr92.3.i125, align 8, !tbaa !1
  store i16 %68, i16* %add.ptr.i66172, align 2, !tbaa !1
  br label %do.body

for.body30.i130:                                  ; preds = %sw.bb29, %for.inc52.for.body30_crit_edge.i144
  %73 = phi i16 [ %.pre.i143, %for.inc52.for.body30_crit_edge.i144 ], [ %61, %sw.bb29 ]
  %indvars.iv.i128 = phi i64 [ %indvars.iv.next.i139, %for.inc52.for.body30_crit_edge.i144 ], [ 0, %sw.bb29 ]
  %74 = trunc i64 %indvars.iv.i128 to i32
  %cond.i129 = icmp eq i32 %74, 3
  br i1 %cond.i129, label %land.lhs.true40.i134, label %land.lhs.true33.i132

land.lhs.true33.i132:                             ; preds = %for.body30.i130
  %cmp36.i131 = icmp eq i16 %73, 0
  br i1 %cmp36.i131, label %for.inc52.i141, label %if.then46.i138

land.lhs.true40.i134:                             ; preds = %for.body30.i130
  %cmp44.i133 = icmp eq i16 %73, -32768
  br i1 %cmp44.i133, label %for.inc52.i141, label %if.then46.i138

if.then46.i138:                                   ; preds = %land.lhs.true40.i134, %land.lhs.true33.i132
  %75 = bitcast [6 x i16]* %dg to i64*
  store i64 0, i64* %75, align 8
  %scevgep8.i.i136 = getelementptr [6 x i16]* %dg, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i136, align 8, !tbaa !1
  %or.i120.i137 = or i16 %68, 32767
  store i16 %or.i120.i137, i16* %add.ptr.i66172, align 2, !tbaa !1
  br label %do.body

for.inc52.i141:                                   ; preds = %land.lhs.true40.i134, %land.lhs.true33.i132
  %indvars.iv.next.i139 = add nuw nsw i64 %indvars.iv.i128, 1
  %76 = trunc i64 %indvars.iv.next.i139 to i32
  %cmp28.i140 = icmp slt i32 %76, 4
  br i1 %cmp28.i140, label %for.inc52.for.body30_crit_edge.i144, label %if.end80.i146

for.inc52.for.body30_crit_edge.i144:              ; preds = %for.inc52.i141
  %arrayidx42.phi.trans.insert.i142 = getelementptr inbounds [6 x i16]* %df, i64 0, i64 %indvars.iv.next.i139
  %.pre.i143 = load i16* %arrayidx42.phi.trans.insert.i142, align 2, !tbaa !1
  br label %for.body30.i130

if.end80.i146:                                    ; preds = %for.inc52.i141
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i.i101, i8 0, i64 10, i32 8, i1 false) #1
  %77 = or i16 %68, 32767
  store i16 %77, i16* %add.ptr.i66172, align 2, !tbaa !1
  br label %do.body

sw.bb34:                                          ; preds = %if.end17
  call fastcc void @etoe64(i16* %arraydecay6, i16* %arraydecay)
  %x5.i.i.i = bitcast [6 x i16]* %dg to i8*
  %78 = bitcast [6 x i16]* %df to i64*
  %79 = load i64* %78, align 8
  %80 = trunc i64 %79 to i32
  %81 = trunc i64 %79 to i16
  %82 = lshr i32 %80, 16
  %83 = trunc i32 %82 to i16
  %84 = lshr i64 %79, 32
  %85 = trunc i64 %84 to i16
  %incdec.ptr4.3.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 4
  %86 = lshr i64 %79, 48
  %87 = trunc i64 %86 to i16
  %88 = load i16* %incdec.ptr4.3.i, align 8, !tbaa !1
  %and.i = and i16 %88, 32767
  switch i16 %and.i, label %for.cond87.preheader.i [
    i16 0, label %land.lhs.true.i
    i16 32767, label %for.body30.i
  ]

land.lhs.true.i:                                  ; preds = %sw.bb34
  %cmp14.i = icmp sgt i16 %87, -1
  br i1 %cmp14.i, label %if.end14.i.i, label %for.cond87.preheader.i

if.end14.i.i:                                     ; preds = %land.lhs.true.i
  %.lobit.2.i.i = lshr i16 %81, 15
  %shl.2.i.i = shl i16 %81, 1
  %.lobit.3.i.i159 = lshr i32 %80, 31
  %.lobit.3.i.i = trunc i32 %.lobit.3.i.i159 to i16
  %shl.3.i.i160 = shl nuw nsw i32 %82, 1
  %shl.3.i.i = trunc i32 %shl.3.i.i160 to i16
  %89 = or i16 %shl.3.i.i, %.lobit.2.i.i
  %.lobit.4.i.i161 = lshr i64 %79, 47
  %.lobit.4.i.i161.tr = trunc i64 %.lobit.4.i.i161 to i16
  %.lobit.4.i.i = and i16 %.lobit.4.i.i161.tr, 1
  %shl.4.i.i162 = shl nuw nsw i64 %84, 1
  %shl.4.i.i = trunc i64 %shl.4.i.i162 to i16
  %90 = or i16 %shl.4.i.i, %.lobit.3.i.i
  %shl.5.i.i163 = shl nuw nsw i64 %86, 1
  %shl.5.i.i = trunc i64 %shl.5.i.i163 to i16
  %91 = or i16 %shl.5.i.i, %.lobit.4.i.i
  %92 = and i16 %88, -32768
  store i16 %92, i16* %add.ptr.i66172, align 2, !tbaa !1
  %q.0.i.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  %incdec.ptr19.i.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %91, i16* %q.0.i.i, align 8, !tbaa !1
  %incdec.ptr19.1.i.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %90, i16* %incdec.ptr19.i.i, align 2, !tbaa !1
  %incdec.ptr19.2.i.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 %89, i16* %incdec.ptr19.1.i.i, align 4, !tbaa !1
  store i16 %shl.2.i.i, i16* %incdec.ptr19.2.i.i, align 2, !tbaa !1
  store i16 0, i16* %arraydecay6, align 8, !tbaa !1
  br label %do.body

for.cond87.preheader.i:                           ; preds = %land.lhs.true.i, %sw.bb34
  %incdec.ptr92.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 0, i16* %arraydecay6, align 8, !tbaa !1
  %incdec.ptr92.1.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %81, i16* %incdec.ptr92.i, align 2, !tbaa !1
  %incdec.ptr92.2.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %83, i16* %incdec.ptr92.1.i, align 4, !tbaa !1
  %incdec.ptr92.3.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  store i16 %85, i16* %incdec.ptr92.2.i, align 2, !tbaa !1
  store i16 %87, i16* %incdec.ptr92.3.i, align 8, !tbaa !1
  store i16 %88, i16* %add.ptr.i66172, align 2, !tbaa !1
  br label %do.body

for.body30.i:                                     ; preds = %sw.bb34, %for.inc52.for.body30_crit_edge.i
  %93 = phi i16 [ %.pre.i, %for.inc52.for.body30_crit_edge.i ], [ %81, %sw.bb34 ]
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.inc52.for.body30_crit_edge.i ], [ 0, %sw.bb34 ]
  %94 = trunc i64 %indvars.iv.i to i32
  %cond.i = icmp eq i32 %94, 3
  br i1 %cond.i, label %land.lhs.true40.i, label %land.lhs.true33.i

land.lhs.true33.i:                                ; preds = %for.body30.i
  %cmp36.i = icmp eq i16 %93, 0
  br i1 %cmp36.i, label %for.inc52.i, label %if.then46.i

land.lhs.true40.i:                                ; preds = %for.body30.i
  %cmp44.i = icmp eq i16 %93, -32768
  br i1 %cmp44.i, label %for.inc52.i, label %if.then46.i

if.then46.i:                                      ; preds = %land.lhs.true40.i, %land.lhs.true33.i
  %95 = bitcast [6 x i16]* %dg to i64*
  store i64 0, i64* %95, align 8
  %scevgep8.i.i100 = getelementptr [6 x i16]* %dg, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i100, align 8, !tbaa !1
  %or.i120.i = or i16 %88, 32767
  store i16 %or.i120.i, i16* %add.ptr.i66172, align 2, !tbaa !1
  br label %do.body

for.inc52.i:                                      ; preds = %land.lhs.true40.i, %land.lhs.true33.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %96 = trunc i64 %indvars.iv.next.i to i32
  %cmp28.i = icmp slt i32 %96, 4
  br i1 %cmp28.i, label %for.inc52.for.body30_crit_edge.i, label %if.end80.i

for.inc52.for.body30_crit_edge.i:                 ; preds = %for.inc52.i
  %arrayidx42.phi.trans.insert.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 %indvars.iv.next.i
  %.pre.i = load i16* %arrayidx42.phi.trans.insert.i, align 2, !tbaa !1
  br label %for.body30.i

if.end80.i:                                       ; preds = %for.inc52.i
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i.i, i8 0, i64 10, i32 8, i1 false) #1
  %97 = or i16 %88, 32767
  store i16 %97, i16* %add.ptr.i66172, align 2, !tbaa !1
  br label %do.body

sw.default:                                       ; preds = %if.end17
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0), i32 921, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.ereal_from_int, i64 0, i64 0)) #7
  unreachable

do.body:                                          ; preds = %if.end80.i, %if.then46.i, %for.cond87.preheader.i, %if.end14.i.i, %if.end80.i146, %if.then46.i138, %for.cond87.preheader.i127, %if.end14.i.i121, %sw.bb, %sw.bb24
  %98 = bitcast %struct.realvaluetype* %d to i8*
  %99 = bitcast [6 x i16]* %dg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %98, i8* %99, i64 12, i32 2, i1 false)
  %add.ptr = getelementptr inbounds i8* %98, i64 12
  call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 12, i32 1, i1 false)
  ret void
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #4

; Function Attrs: nounwind uwtable
define internal fastcc void @eldexp(i16* nocapture readonly %x, i32 %pwr2, i16* nocapture %y) #0 {
entry:
  %xi = alloca [9 x i16], align 16
  %arraydecay = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 0
  %add.ptr.i = getelementptr inbounds i16* %x, i64 5
  %0 = load i16* %add.ptr.i, align 2, !tbaa !1
  %incdec.ptr.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 1
  %.lobit.i = ashr i16 %0, 15
  store i16 %.lobit.i, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 2
  %and5.i = and i16 %0, 32767
  store i16 %and5.i, i16* %incdec.ptr.i, align 2, !tbaa !1
  %cmp.i = icmp eq i16 %and5.i, 32767
  br i1 %cmp.i, label %for.body.i.i, label %if.end28.i

for.body.i.i:                                     ; preds = %entry, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %entry ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %x, %entry ]
  %1 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %1, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then13.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i
  %scevgep69.i = bitcast i16* %incdec.ptr3.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %x, i64 3
  %2 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %2, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %x, i64 2
  %3 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %3, i16* %incdec.ptr18.i, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %x, i64 1
  %4 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %4, i16* %incdec.ptr18.1.i, align 2, !tbaa !1
  %5 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %5, i16* %incdec.ptr18.2.i, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %x, i64 -1
  %6 = load i16* %x, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 8
  store i16 %6, i16* %incdec.ptr18.3.i, align 2, !tbaa !1
  %7 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

if.end28.i:                                       ; preds = %entry
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %x, i64 3
  %8 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %8, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %x, i64 2
  %9 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %9, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %x, i64 1
  %10 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %10, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %11 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %11, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %12 = load i16* %x, align 2, !tbaa !1
  store i16 %12, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %xi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i, %if.end28.i
  %conv = zext i16 %and5.i to i32
  %add = add nsw i32 %conv, %pwr2
  call fastcc void @emdnorm(i16* %arraydecay, i32 0, i32 0, i32 %add, i32 64)
  %add.ptr.i5 = getelementptr inbounds i16* %y, i64 5
  %13 = bitcast [9 x i16]* %xi to i32*
  %14 = load i32* %13, align 16
  %15 = bitcast [9 x i16]* %xi to i64*
  %16 = load i64* %15, align 16
  %17 = trunc i64 %16 to i32
  %18 = trunc i64 %16 to i16
  %tobool.i = icmp eq i16 %18, 0
  %19 = lshr i32 %17, 16
  %20 = trunc i32 %19 to i16
  %or.i = or i16 %20, -32768
  %storemerge.i = select i1 %tobool.i, i16 %20, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i5, align 2, !tbaa !1
  %.mask = and i32 %14, -65536
  %cmp.i7 = icmp eq i32 %.mask, 2147418112
  %21 = trunc i64 %16 to i16
  br i1 %cmp.i7, label %for.body.i.i9, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i9
  %22 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i8 = icmp slt i32 %22, 9
  br i1 %cmp2.i.i8, label %for.body.i.i9, label %if.end13.i

for.body.i.i9:                                    ; preds = %emovi.exit, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %emovi.exit ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 %indvars.iv.i.i
  %23 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %23, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i10

if.then11.i10:                                    ; preds = %for.body.i.i9
  %cmp.i32.i = icmp ne i16 %21, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %24 = bitcast i16* %y to i64*
  store i64 0, i64* %24, align 2
  %scevgep8.i.i = getelementptr i16* %y, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i5, align 2, !tbaa !1
  br label %emovo.exit

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i5, align 2, !tbaa !1
  br label %emovo.exit

if.end14.i:                                       ; preds = %emovi.exit
  %25 = lshr i64 %16, 48
  %26 = trunc i64 %25 to i16
  %q.0.i = getelementptr inbounds i16* %y, i64 4
  %incdec.ptr18.i11 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds i16* %y, i64 3
  store i16 %26, i16* %q.0.i, align 2, !tbaa !1
  %27 = bitcast i16* %incdec.ptr18.i11 to i64*
  %28 = load i64* %27, align 8
  %29 = trunc i64 %28 to i32
  %30 = trunc i64 %28 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %y, i64 2
  store i16 %30, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %31 = lshr i32 %29, 16
  %32 = trunc i32 %31 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %y, i64 1
  store i16 %32, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %33 = lshr i64 %28, 32
  %34 = trunc i64 %33 to i16
  store i16 %34, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %35 = lshr i64 %28, 48
  %36 = trunc i64 %35 to i16
  store i16 %36, i16* %y, align 2, !tbaa !1
  br label %emovo.exit

emovo.exit:                                       ; preds = %if.then11.i10, %if.end13.i, %if.end14.i
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @etoe24(i16* nocapture readonly %x, i16* nocapture %e) #0 {
entry:
  %xi = alloca [9 x i16], align 16
  %arrayidx.i = getelementptr inbounds i16* %x, i64 5
  %0 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %x, %entry ]
  %1 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %1, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %x.5.val.lobit.i = and i16 %0, -32768
  store i16 0, i16* %e, align 2, !tbaa !1
  %scevgep.i = getelementptr i16* %e, i64 1
  %or.i18 = or i16 %x.5.val.lobit.i, 32704
  store i16 %or.i18, i16* %scevgep.i, align 2, !tbaa !1
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 0
  %incdec.ptr.i20 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 1
  %.lobit.i = ashr i16 %0, 15
  store i16 %.lobit.i, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr3.i21 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 2
  store i16 %and.i, i16* %incdec.ptr.i20, align 2, !tbaa !1
  br i1 %cmp.i, label %for.body.i.i25, label %emovi.exit.thread

for.body.i.i25:                                   ; preds = %if.end, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %if.end ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %x, %if.end ]
  %2 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %2, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then13.i

for.inc.i.i:                                      ; preds = %for.body.i.i25
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i26 = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i26, label %for.body.i.i25, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i
  %scevgep69.i = bitcast i16* %incdec.ptr3.i21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i25
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i21, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %x, i64 3
  %3 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %3, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %x, i64 2
  %4 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %4, i16* %incdec.ptr18.i, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %x, i64 1
  %5 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %5, i16* %incdec.ptr18.1.i, align 2, !tbaa !1
  %6 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %6, i16* %incdec.ptr18.2.i, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %x, i64 -1
  %7 = load i16* %x, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 8
  store i16 %7, i16* %incdec.ptr18.3.i, align 2, !tbaa !1
  %8 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %8, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit.thread:                                ; preds = %if.end
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i21, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %x, i64 3
  %9 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %9, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %x, i64 2
  %10 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %10, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %x, i64 1
  %11 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %11, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %12 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %12, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %13 = load i16* %x, align 2, !tbaa !1
  store i16 %13, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %xi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %nonorm

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i
  br i1 %cmp.i, label %for.body.i.i33, label %nonorm

for.body.i.i33:                                   ; preds = %emovi.exit, %for.inc.i.i37
  %i.012.i.i30 = phi i32 [ %inc.i.i35, %for.inc.i.i37 ], [ 0, %emovi.exit ]
  %x.addr.011.i.i31 = phi i16* [ %incdec.ptr.i.i34, %for.inc.i.i37 ], [ %x, %emovi.exit ]
  %14 = load i16* %x.addr.011.i.i31, align 2, !tbaa !1
  %cmp5.i.i32 = icmp eq i16 %14, 0
  br i1 %cmp5.i.i32, label %for.inc.i.i37, label %nonorm

for.inc.i.i37:                                    ; preds = %for.body.i.i33
  %incdec.ptr.i.i34 = getelementptr inbounds i16* %x.addr.011.i.i31, i64 1
  %inc.i.i35 = add nsw i32 %i.012.i.i30, 1
  %cmp2.i.i36 = icmp slt i32 %inc.i.i35, 5
  br i1 %cmp2.i.i36, label %for.body.i.i33, label %for.body.i.i

nonorm:                                           ; preds = %for.body.i.i33, %emovi.exit, %emovi.exit.thread
  %conv = zext i16 %and.i to i32
  %sub = add nsw i32 %conv, -16256
  %15 = load i32* @rndprc, align 4, !tbaa !9
  store i32 24, i32* @rndprc, align 4, !tbaa !9
  call fastcc void @emdnorm(i16* %arraydecay, i32 0, i32 0, i32 %sub, i32 64)
  store i32 %15, i32* @rndprc, align 4, !tbaa !9
  %.pre = load i16* %incdec.ptr.i20, align 2, !tbaa !1
  %phitmp = and i16 %.pre, 32767
  %phitmp45 = icmp eq i16 %phitmp, 32767
  br i1 %phitmp45, label %for.body.i.i, label %if.end.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %16 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %16, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end.i

for.body.i.i:                                     ; preds = %nonorm, %for.inc.i.i37, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %for.inc.i.i37 ], [ 3, %nonorm ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 %indvars.iv.i.i
  %17 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %17, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then.i

if.then.i:                                        ; preds = %for.body.i.i
  %x.val.i = load i16* %arraydecay, align 16, !tbaa !1
  %cmp.i50.i = icmp ne i16 %x.val.i, 0
  %conv1.i.i = zext i1 %cmp.i50.i to i16
  store i16 0, i16* %e, align 2, !tbaa !1
  %scevgep.i.i = getelementptr i16* %e, i64 1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i.i = or i16 %shl.i.i, 32704
  store i16 %or.i.i, i16* %scevgep.i.i, align 2, !tbaa !1
  br label %return

if.end.i:                                         ; preds = %for.cond.i.i, %nonorm
  %add.ptr.i = getelementptr inbounds i16* %e, i64 1
  %18 = bitcast [9 x i16]* %xi to i32*
  %19 = load i32* %18, align 16
  %20 = trunc i32 %19 to i16
  %tobool2.i = icmp eq i16 %20, 0
  %..i = select i1 %tobool2.i, i16 0, i16 -32768
  store i16 %..i, i16* %add.ptr.i, align 2, !tbaa !1
  %21 = lshr i32 %19, 16
  %22 = trunc i32 %21 to i16
  %cmp.i12 = icmp ugt i16 %22, 254
  br i1 %cmp.i12, label %if.then7.i, label %if.end11.i

if.then7.i:                                       ; preds = %if.end.i
  %or.i = or i16 %..i, 32640
  store i16 %or.i, i16* %add.ptr.i, align 2, !tbaa !1
  store i16 0, i16* %e, align 2, !tbaa !1
  br label %return

if.end11.i:                                       ; preds = %if.end.i
  %cmp13.i = icmp eq i16 %22, 0
  br i1 %cmp13.i, label %if.then15.i, label %if.else.i

if.then15.i:                                      ; preds = %if.end11.i
  %call16.i = call fastcc i32 @eshift(i16* %arraydecay, i32 7) #1
  br label %if.end20.i

if.else.i:                                        ; preds = %if.end11.i
  %shl.i46 = shl nuw nsw i32 %21, 7
  %shl.i = trunc i32 %shl.i46 to i16
  %call19.i = call fastcc i32 @eshift(i16* %arraydecay, i32 8) #1
  br label %if.end20.i

if.end20.i:                                       ; preds = %if.else.i, %if.then15.i
  %i.0.i = phi i16 [ 0, %if.then15.i ], [ %shl.i, %if.else.i ]
  %23 = bitcast i16* %incdec.ptr3.i21 to i32*
  %24 = load i32* %23, align 4
  %25 = trunc i32 %24 to i16
  %and.i13 = and i16 %25, 127
  %or24.i = or i16 %and.i13, %i.0.i
  %26 = load i16* %add.ptr.i, align 2, !tbaa !1
  %or2849.i = or i16 %or24.i, %26
  store i16 %or2849.i, i16* %add.ptr.i, align 2, !tbaa !1
  %27 = lshr i32 %24, 16
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %e, align 2, !tbaa !1
  br label %return

return:                                           ; preds = %if.end20.i, %if.then7.i, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @etoe53(i16* nocapture readonly %x, i16* nocapture %e) #0 {
entry:
  %xi = alloca [9 x i16], align 16
  %arrayidx.i = getelementptr inbounds i16* %x, i64 5
  %0 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %x, %entry ]
  %1 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %1, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %x.5.val.lobit.i = and i16 %0, -32768
  %incdec.ptr3.i = getelementptr inbounds i16* %e, i64 1
  store i16 0, i16* %e, align 2, !tbaa !1
  %incdec.ptr3.i.1 = getelementptr inbounds i16* %e, i64 2
  store i16 0, i16* %incdec.ptr3.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr3.i.1, align 2, !tbaa !1
  %scevgep.i = getelementptr i16* %e, i64 3
  %or.i = or i16 %x.5.val.lobit.i, 32760
  store i16 %or.i, i16* %scevgep.i, align 2, !tbaa !1
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 0
  %incdec.ptr.i16 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 1
  %.lobit.i = ashr i16 %0, 15
  store i16 %.lobit.i, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr3.i17 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 2
  store i16 %and.i, i16* %incdec.ptr.i16, align 2, !tbaa !1
  br i1 %cmp.i, label %for.body.i.i24, label %emovi.exit.thread

for.body.i.i24:                                   ; preds = %if.end, %for.inc.i.i28
  %i.012.i.i21 = phi i32 [ %inc.i.i26, %for.inc.i.i28 ], [ 0, %if.end ]
  %x.addr.011.i.i22 = phi i16* [ %incdec.ptr.i.i25, %for.inc.i.i28 ], [ %x, %if.end ]
  %2 = load i16* %x.addr.011.i.i22, align 2, !tbaa !1
  %cmp5.i.i23 = icmp eq i16 %2, 0
  br i1 %cmp5.i.i23, label %for.inc.i.i28, label %if.then13.i

for.inc.i.i28:                                    ; preds = %for.body.i.i24
  %incdec.ptr.i.i25 = getelementptr inbounds i16* %x.addr.011.i.i22, i64 1
  %inc.i.i26 = add nsw i32 %i.012.i.i21, 1
  %cmp2.i.i27 = icmp slt i32 %inc.i.i26, 5
  br i1 %cmp2.i.i27, label %for.body.i.i24, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i28
  %scevgep69.i = bitcast i16* %incdec.ptr3.i17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i24
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i17, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %x, i64 3
  %3 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %3, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %x, i64 2
  %4 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %4, i16* %incdec.ptr18.i, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %x, i64 1
  %5 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %5, i16* %incdec.ptr18.1.i, align 2, !tbaa !1
  %6 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %6, i16* %incdec.ptr18.2.i, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %x, i64 -1
  %7 = load i16* %x, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 8
  store i16 %7, i16* %incdec.ptr18.3.i, align 2, !tbaa !1
  %8 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %8, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit.thread:                                ; preds = %if.end
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i17, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %x, i64 3
  %9 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %9, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %x, i64 2
  %10 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %10, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %x, i64 1
  %11 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %11, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %12 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %12, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %13 = load i16* %x, align 2, !tbaa !1
  store i16 %13, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %xi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %if.end5

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i
  br i1 %cmp.i, label %for.body.i.i, label %if.end5

for.body.i.i:                                     ; preds = %emovi.exit, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %emovi.exit ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %x, %emovi.exit ]
  %14 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %14, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.end5

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %nonorm

if.end5:                                          ; preds = %for.body.i.i, %emovi.exit.thread, %emovi.exit
  %conv = zext i16 %and.i to i32
  %sub = add nsw i32 %conv, -15360
  %15 = load i32* @rndprc, align 4, !tbaa !9
  store i32 53, i32* @rndprc, align 4, !tbaa !9
  call fastcc void @emdnorm(i16* %arraydecay, i32 0, i32 0, i32 %sub, i32 64)
  store i32 %15, i32* @rndprc, align 4, !tbaa !9
  br label %nonorm

nonorm:                                           ; preds = %for.inc.i.i, %if.end5
  call fastcc void @toe53(i16* %arraydecay, i16* %e)
  br label %return

return:                                           ; preds = %nonorm, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @etoe64(i16* nocapture readonly %x, i16* nocapture %e) #0 {
entry:
  %xi = alloca [9 x i16], align 16
  %arrayidx.i = getelementptr inbounds i16* %x, i64 5
  %0 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %x, %entry ]
  %1 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %1, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %x.5.val.lobit.i = and i16 %0, -32768
  %incdec.ptr3.i = getelementptr inbounds i16* %e, i64 1
  store i16 0, i16* %e, align 2, !tbaa !1
  %incdec.ptr3.i.1 = getelementptr inbounds i16* %e, i64 2
  store i16 0, i16* %incdec.ptr3.i, align 2, !tbaa !1
  %incdec.ptr3.i.2 = getelementptr inbounds i16* %e, i64 3
  store i16 0, i16* %incdec.ptr3.i.1, align 2, !tbaa !1
  %incdec.ptr3.i.3 = getelementptr inbounds i16* %e, i64 4
  store i16 -16384, i16* %incdec.ptr3.i.2, align 2, !tbaa !1
  store i16 -1, i16* %incdec.ptr3.i.3, align 2, !tbaa !1
  %scevgep.i = getelementptr i16* %e, i64 5
  store i16 %x.5.val.lobit.i, i16* %scevgep.i, align 2, !tbaa !1
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 0
  %incdec.ptr.i16 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 1
  %.lobit.i = ashr i16 %0, 15
  store i16 %.lobit.i, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr3.i17 = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 2
  store i16 %and.i, i16* %incdec.ptr.i16, align 2, !tbaa !1
  br i1 %cmp.i, label %for.body.i.i24, label %emovi.exit.thread

for.body.i.i24:                                   ; preds = %if.end, %for.inc.i.i28
  %i.012.i.i21 = phi i32 [ %inc.i.i26, %for.inc.i.i28 ], [ 0, %if.end ]
  %x.addr.011.i.i22 = phi i16* [ %incdec.ptr.i.i25, %for.inc.i.i28 ], [ %x, %if.end ]
  %2 = load i16* %x.addr.011.i.i22, align 2, !tbaa !1
  %cmp5.i.i23 = icmp eq i16 %2, 0
  br i1 %cmp5.i.i23, label %for.inc.i.i28, label %if.then13.i

for.inc.i.i28:                                    ; preds = %for.body.i.i24
  %incdec.ptr.i.i25 = getelementptr inbounds i16* %x.addr.011.i.i22, i64 1
  %inc.i.i26 = add nsw i32 %i.012.i.i21, 1
  %cmp2.i.i27 = icmp slt i32 %inc.i.i26, 5
  br i1 %cmp2.i.i27, label %for.body.i.i24, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i28
  %scevgep69.i = bitcast i16* %incdec.ptr3.i17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i24
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i17, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %x, i64 3
  %3 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %3, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %x, i64 2
  %4 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %4, i16* %incdec.ptr18.i, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %x, i64 1
  %5 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %5, i16* %incdec.ptr18.1.i, align 2, !tbaa !1
  %6 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %6, i16* %incdec.ptr18.2.i, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %x, i64 -1
  %7 = load i16* %x, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 8
  store i16 %7, i16* %incdec.ptr18.3.i, align 2, !tbaa !1
  %8 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %8, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit.thread:                                ; preds = %if.end
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i17, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %x, i64 3
  %9 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 4
  store i16 %9, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %x, i64 2
  %10 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 5
  store i16 %10, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %x, i64 1
  %11 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 6
  store i16 %11, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %12 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %xi, i64 0, i64 7
  store i16 %12, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %13 = load i16* %x, align 2, !tbaa !1
  store i16 %13, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %xi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %if.end5

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i
  br i1 %cmp.i, label %for.body.i.i, label %if.end5

for.body.i.i:                                     ; preds = %emovi.exit, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %emovi.exit ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %x, %emovi.exit ]
  %14 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %14, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.end5

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %nonorm

if.end5:                                          ; preds = %for.body.i.i, %emovi.exit.thread, %emovi.exit
  %conv = zext i16 %and.i to i32
  %15 = load i32* @rndprc, align 4, !tbaa !9
  store i32 64, i32* @rndprc, align 4, !tbaa !9
  call fastcc void @emdnorm(i16* %arraydecay, i32 0, i32 0, i32 %conv, i32 64)
  store i32 %15, i32* @rndprc, align 4, !tbaa !9
  br label %nonorm

nonorm:                                           ; preds = %for.inc.i.i, %if.end5
  call fastcc void @toe64(i16* %arraydecay, i16* %e)
  br label %return

return:                                           ; preds = %nonorm, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_from_uint(%struct.realvaluetype* nocapture %d, i64 %i, i64 %j, i32 %mode) #0 {
entry:
  %yi.i = alloca [9 x i16], align 16
  %df = alloca [6 x i16], align 8
  %dg = alloca [6 x i16], align 8
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !6
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0), i32 940, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.ereal_from_uint, i64 0, i64 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [6 x i16]* %df, i64 0, i64 0
  call fastcc void @eldexp(i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i32 64, i16* %arraydecay)
  %arraydecay1 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 0
  %1 = bitcast [9 x i16]* %yi.i to i8*
  call void @llvm.lifetime.start(i64 18, i8* %1) #1
  %arraydecay.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 18, i32 16, i1 false) #1
  %shr.i = lshr i64 %j, 48
  %conv.i = trunc i64 %shr.i to i16
  %arrayidx.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 2
  store i16 %conv.i, i16* %arrayidx.i, align 4, !tbaa !1
  %shr1.i = lshr i64 %j, 32
  %conv2.i = trunc i64 %shr1.i to i16
  %arrayidx3.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 3
  store i16 %conv2.i, i16* %arrayidx3.i, align 2, !tbaa !1
  %shr4.i = lshr i64 %j, 16
  %conv5.i = trunc i64 %shr4.i to i16
  %arrayidx6.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 4
  store i16 %conv5.i, i16* %arrayidx6.i, align 8, !tbaa !1
  %conv7.i = trunc i64 %j to i16
  %arrayidx8.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 5
  store i16 %conv7.i, i16* %arrayidx8.i, align 2, !tbaa !1
  %arrayidx9.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 1
  store i16 16430, i16* %arrayidx9.i, align 2, !tbaa !1
  %call.i = call fastcc i32 @enormlz(i16* %arraydecay.i) #1
  %cmp.i = icmp sgt i32 %call.i, 80
  br i1 %cmp.i, label %ultoe.exit.thread, label %ultoe.exit

ultoe.exit.thread:                                ; preds = %if.end
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 18, i32 16, i1 false) #1
  %add.ptr.i57156 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 5
  store i16 0, i16* %add.ptr.i57156, align 2, !tbaa !1
  br label %if.end14.i89

ultoe.exit:                                       ; preds = %if.end
  %2 = load i16* %arrayidx9.i, align 2, !tbaa !1
  %conv16.i = zext i16 %2 to i32
  %sub.i = sub nsw i32 %conv16.i, %call.i
  %conv17.i = trunc i32 %sub.i to i16
  store i16 %conv17.i, i16* %arrayidx9.i, align 2, !tbaa !1
  %3 = bitcast [9 x i16]* %yi.i to i32*
  %4 = load i32* %3, align 16
  %5 = bitcast [9 x i16]* %yi.i to i64*
  %.pre = load i64* %5, align 16
  %6 = trunc i64 %.pre to i32
  %7 = trunc i64 %.pre to i16
  %8 = lshr i32 %6, 16
  %9 = trunc i32 %8 to i16
  %10 = lshr i64 %.pre, 48
  %11 = trunc i64 %10 to i16
  %12 = trunc i64 %.pre to i16
  %phitmp = icmp eq i16 %7, 0
  %.mask = and i32 %4, -65536
  %phitmp142 = icmp eq i32 %.mask, 2147418112
  %add.ptr.i57 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 5
  %or.i60 = or i16 %9, -32768
  %storemerge.i61 = select i1 %phitmp, i16 %9, i16 %or.i60
  store i16 %storemerge.i61, i16* %add.ptr.i57, align 2, !tbaa !1
  br i1 %phitmp142, label %for.body.i.i69, label %if.end14.i89

for.cond.i.i64:                                   ; preds = %for.body.i.i69
  %13 = trunc i64 %indvars.iv.next.i.i68 to i32
  %cmp2.i.i63 = icmp slt i32 %13, 9
  br i1 %cmp2.i.i63, label %for.body.i.i69, label %if.end13.i79

for.body.i.i69:                                   ; preds = %ultoe.exit, %for.cond.i.i64
  %indvars.iv.i.i65 = phi i64 [ %indvars.iv.next.i.i68, %for.cond.i.i64 ], [ 3, %ultoe.exit ]
  %arrayidx4.i.i66 = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 %indvars.iv.i.i65
  %14 = load i16* %arrayidx4.i.i66, align 2, !tbaa !1
  %cmp6.i.i67 = icmp eq i16 %14, 0
  %indvars.iv.next.i.i68 = add nuw nsw i64 %indvars.iv.i.i65, 1
  br i1 %cmp6.i.i67, label %for.cond.i.i64, label %if.then11.i76

if.then11.i76:                                    ; preds = %for.body.i.i69
  %cmp.i32.i71 = icmp ne i16 %12, 0
  %conv1.i.i72 = zext i1 %cmp.i32.i71 to i16
  %15 = bitcast [6 x i16]* %dg to i64*
  store i64 0, i64* %15, align 8
  %scevgep8.i.i73 = getelementptr [6 x i16]* %dg, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i73, align 8, !tbaa !1
  %shl.i.i74 = shl nuw i16 %conv1.i.i72, 15
  %or.i31.i75 = or i16 %shl.i.i74, 32767
  store i16 %or.i31.i75, i16* %add.ptr.i57, align 2, !tbaa !1
  br label %emovo.exit90

if.end13.i79:                                     ; preds = %for.cond.i.i64
  %x5.i.i77 = bitcast [6 x i16]* %dg to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i77, i8 0, i64 10, i32 8, i1 false) #1
  %or.i.i78 = or i16 %storemerge.i61, 32767
  store i16 %or.i.i78, i16* %add.ptr.i57, align 2, !tbaa !1
  br label %emovo.exit90

if.end14.i89:                                     ; preds = %ultoe.exit.thread, %ultoe.exit
  %add.ptr.i57160 = phi i16* [ %add.ptr.i57156, %ultoe.exit.thread ], [ %add.ptr.i57, %ultoe.exit ]
  %16 = phi i16 [ 0, %ultoe.exit.thread ], [ %11, %ultoe.exit ]
  %q.0.i80 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  %incdec.ptr19.i83 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %16, i16* %q.0.i80, align 8, !tbaa !1
  %17 = bitcast i16* %arrayidx6.i to i64*
  %18 = load i64* %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = trunc i64 %18 to i16
  %incdec.ptr19.1.i85 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %20, i16* %incdec.ptr19.i83, align 2, !tbaa !1
  %21 = lshr i32 %19, 16
  %22 = trunc i32 %21 to i16
  %incdec.ptr19.2.i87 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 %22, i16* %incdec.ptr19.1.i85, align 4, !tbaa !1
  %23 = lshr i64 %18, 32
  %24 = trunc i64 %23 to i16
  store i16 %24, i16* %incdec.ptr19.2.i87, align 2, !tbaa !1
  %25 = lshr i64 %18, 48
  %26 = trunc i64 %25 to i16
  store i16 %26, i16* %arraydecay1, align 8, !tbaa !1
  br label %emovo.exit90

emovo.exit90:                                     ; preds = %if.then11.i76, %if.end13.i79, %if.end14.i89
  %add.ptr.i57159 = phi i16* [ %add.ptr.i57, %if.then11.i76 ], [ %add.ptr.i57, %if.end13.i79 ], [ %add.ptr.i57160, %if.end14.i89 ]
  call void @llvm.lifetime.end(i64 18, i8* %1) #1
  call fastcc void @emul(i16* %arraydecay1, i16* %arraydecay, i16* %arraydecay1)
  call void @llvm.lifetime.start(i64 18, i8* %1) #1
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 18, i32 16, i1 false) #1
  %shr.i35 = lshr i64 %i, 48
  %conv.i36 = trunc i64 %shr.i35 to i16
  store i16 %conv.i36, i16* %arrayidx.i, align 4, !tbaa !1
  %shr1.i38 = lshr i64 %i, 32
  %conv2.i39 = trunc i64 %shr1.i38 to i16
  store i16 %conv2.i39, i16* %arrayidx3.i, align 2, !tbaa !1
  %shr4.i41 = lshr i64 %i, 16
  %conv5.i42 = trunc i64 %shr4.i41 to i16
  store i16 %conv5.i42, i16* %arrayidx6.i, align 8, !tbaa !1
  %conv7.i44 = trunc i64 %i to i16
  store i16 %conv7.i44, i16* %arrayidx8.i, align 2, !tbaa !1
  store i16 16430, i16* %arrayidx9.i, align 2, !tbaa !1
  %call.i47 = call fastcc i32 @enormlz(i16* %arraydecay.i) #1
  %cmp.i48 = icmp sgt i32 %call.i47, 80
  br i1 %cmp.i48, label %ultoe.exit54.thread, label %ultoe.exit54

ultoe.exit54.thread:                              ; preds = %emovo.exit90
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 18, i32 16, i1 false) #1
  %add.ptr.i161 = getelementptr inbounds [6 x i16]* %df, i64 0, i64 5
  store i16 0, i16* %add.ptr.i161, align 2, !tbaa !1
  br label %if.end14.i

ultoe.exit54:                                     ; preds = %emovo.exit90
  %27 = load i16* %arrayidx9.i, align 2, !tbaa !1
  %conv16.i50 = zext i16 %27 to i32
  %sub.i51 = sub nsw i32 %conv16.i50, %call.i47
  %conv17.i52 = trunc i32 %sub.i51 to i16
  store i16 %conv17.i52, i16* %arrayidx9.i, align 2, !tbaa !1
  %28 = bitcast [9 x i16]* %yi.i to i32*
  %29 = load i32* %28, align 16
  %30 = bitcast [9 x i16]* %yi.i to i64*
  %.pre139 = load i64* %30, align 16
  %31 = trunc i64 %.pre139 to i32
  %32 = trunc i64 %.pre139 to i16
  %33 = lshr i32 %31, 16
  %34 = trunc i32 %33 to i16
  %35 = lshr i64 %.pre139, 48
  %36 = trunc i64 %35 to i16
  %37 = trunc i64 %.pre139 to i16
  %phitmp143 = icmp eq i16 %32, 0
  %.mask145 = and i32 %29, -65536
  %phitmp144 = icmp eq i32 %.mask145, 2147418112
  %add.ptr.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 5
  %or.i = or i16 %34, -32768
  %storemerge.i = select i1 %phitmp143, i16 %34, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i, align 2, !tbaa !1
  br i1 %phitmp144, label %for.body.i.i, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %38 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %38, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end13.i

for.body.i.i:                                     ; preds = %ultoe.exit54, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %ultoe.exit54 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %yi.i, i64 0, i64 %indvars.iv.i.i
  %39 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %39, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i
  %cmp.i32.i = icmp ne i16 %37, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %40 = bitcast [6 x i16]* %df to i64*
  store i64 0, i64* %40, align 8
  %scevgep8.i.i56 = getelementptr [6 x i16]* %df, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i56, align 8, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %emovo.exit

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast [6 x i16]* %df to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 8, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %emovo.exit

if.end14.i:                                       ; preds = %ultoe.exit54.thread, %ultoe.exit54
  %41 = phi i16 [ 0, %ultoe.exit54.thread ], [ %36, %ultoe.exit54 ]
  %q.0.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 3
  store i16 %41, i16* %q.0.i, align 8, !tbaa !1
  %42 = bitcast i16* %arrayidx6.i to i64*
  %43 = load i64* %42, align 8
  %44 = trunc i64 %43 to i32
  %45 = trunc i64 %43 to i16
  %incdec.ptr19.1.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 2
  store i16 %45, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %46 = lshr i32 %44, 16
  %47 = trunc i32 %46 to i16
  %incdec.ptr19.2.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 1
  store i16 %47, i16* %incdec.ptr19.1.i, align 4, !tbaa !1
  %48 = lshr i64 %43, 32
  %49 = trunc i64 %48 to i16
  store i16 %49, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %50 = lshr i64 %43, 48
  %51 = trunc i64 %50 to i16
  store i16 %51, i16* %arraydecay, align 8, !tbaa !1
  br label %emovo.exit

emovo.exit:                                       ; preds = %if.then11.i, %if.end13.i, %if.end14.i
  call void @llvm.lifetime.end(i64 18, i8* %1) #1
  call fastcc void @eadd(i16* %arraydecay, i16* %arraydecay1, i16* %arraydecay1)
  %arrayidx10 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %52 = load i16* %arrayidx10, align 2, !tbaa !1
  %conv = zext i16 %52 to i32
  switch i32 %conv, label %sw.default [
    i32 32, label %sw.bb
    i32 64, label %sw.bb15
    i32 96, label %sw.bb20
    i32 128, label %sw.bb25
  ]

sw.bb:                                            ; preds = %emovo.exit
  call fastcc void @etoe24(i16* %arraydecay1, i16* %arraydecay)
  %53 = bitcast [6 x i16]* %df to i32*
  %arraydecay.val = load i32* %53, align 8
  %54 = trunc i32 %arraydecay.val to i16
  %55 = lshr i32 %arraydecay.val, 16
  %56 = trunc i32 %55 to i16
  call fastcc void @e24toe(i16 %54, i16 %56, i16* %arraydecay1)
  br label %do.body

sw.bb15:                                          ; preds = %emovo.exit
  call fastcc void @etoe53(i16* %arraydecay1, i16* %arraydecay)
  call fastcc void @e53toe(i16* %arraydecay, i16* %arraydecay1)
  br label %do.body

sw.bb20:                                          ; preds = %emovo.exit
  call fastcc void @etoe64(i16* %arraydecay1, i16* %arraydecay)
  %x5.i.i.i = bitcast [6 x i16]* %dg to i8*
  %57 = bitcast [6 x i16]* %df to i64*
  %58 = load i64* %57, align 8
  %59 = trunc i64 %58 to i32
  %60 = trunc i64 %58 to i16
  %61 = lshr i32 %59, 16
  %62 = trunc i32 %61 to i16
  %63 = lshr i64 %58, 32
  %64 = trunc i64 %63 to i16
  %incdec.ptr4.3.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 4
  %65 = lshr i64 %58, 48
  %66 = trunc i64 %65 to i16
  %67 = load i16* %incdec.ptr4.3.i, align 8, !tbaa !1
  %and.i = and i16 %67, 32767
  switch i16 %and.i, label %for.cond87.preheader.i [
    i16 0, label %land.lhs.true.i
    i16 32767, label %for.body30.i
  ]

land.lhs.true.i:                                  ; preds = %sw.bb20
  %cmp14.i = icmp sgt i16 %66, -1
  br i1 %cmp14.i, label %if.end14.i.i, label %for.cond87.preheader.i

if.end14.i.i:                                     ; preds = %land.lhs.true.i
  %.lobit.2.i.i = lshr i16 %60, 15
  %shl.2.i.i = shl i16 %60, 1
  %.lobit.3.i.i151 = lshr i32 %59, 31
  %.lobit.3.i.i = trunc i32 %.lobit.3.i.i151 to i16
  %shl.3.i.i152 = shl nuw nsw i32 %61, 1
  %shl.3.i.i = trunc i32 %shl.3.i.i152 to i16
  %68 = or i16 %shl.3.i.i, %.lobit.2.i.i
  %.lobit.4.i.i153 = lshr i64 %58, 47
  %.lobit.4.i.i153.tr = trunc i64 %.lobit.4.i.i153 to i16
  %.lobit.4.i.i = and i16 %.lobit.4.i.i153.tr, 1
  %shl.4.i.i154 = shl nuw nsw i64 %63, 1
  %shl.4.i.i = trunc i64 %shl.4.i.i154 to i16
  %69 = or i16 %shl.4.i.i, %.lobit.3.i.i
  %shl.5.i.i155 = shl nuw nsw i64 %65, 1
  %shl.5.i.i = trunc i64 %shl.5.i.i155 to i16
  %70 = or i16 %shl.5.i.i, %.lobit.4.i.i
  %71 = and i16 %67, -32768
  store i16 %71, i16* %add.ptr.i57159, align 2, !tbaa !1
  %q.0.i.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  %incdec.ptr19.i.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %70, i16* %q.0.i.i, align 8, !tbaa !1
  %incdec.ptr19.1.i.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %69, i16* %incdec.ptr19.i.i, align 2, !tbaa !1
  %incdec.ptr19.2.i.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 %68, i16* %incdec.ptr19.1.i.i, align 4, !tbaa !1
  store i16 %shl.2.i.i, i16* %incdec.ptr19.2.i.i, align 2, !tbaa !1
  store i16 0, i16* %arraydecay1, align 8, !tbaa !1
  br label %do.body

for.cond87.preheader.i:                           ; preds = %land.lhs.true.i, %sw.bb20
  %incdec.ptr92.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 0, i16* %arraydecay1, align 8, !tbaa !1
  %incdec.ptr92.1.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %60, i16* %incdec.ptr92.i, align 2, !tbaa !1
  %incdec.ptr92.2.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %62, i16* %incdec.ptr92.1.i, align 4, !tbaa !1
  %incdec.ptr92.3.i = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  store i16 %64, i16* %incdec.ptr92.2.i, align 2, !tbaa !1
  store i16 %66, i16* %incdec.ptr92.3.i, align 8, !tbaa !1
  store i16 %67, i16* %add.ptr.i57159, align 2, !tbaa !1
  br label %do.body

for.body30.i:                                     ; preds = %sw.bb20, %for.inc52.for.body30_crit_edge.i
  %72 = phi i16 [ %.pre.i, %for.inc52.for.body30_crit_edge.i ], [ %60, %sw.bb20 ]
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.inc52.for.body30_crit_edge.i ], [ 0, %sw.bb20 ]
  %73 = trunc i64 %indvars.iv.i to i32
  %cond.i = icmp eq i32 %73, 3
  br i1 %cond.i, label %land.lhs.true40.i, label %land.lhs.true33.i

land.lhs.true33.i:                                ; preds = %for.body30.i
  %cmp36.i = icmp eq i16 %72, 0
  br i1 %cmp36.i, label %for.inc52.i, label %if.then46.i

land.lhs.true40.i:                                ; preds = %for.body30.i
  %cmp44.i = icmp eq i16 %72, -32768
  br i1 %cmp44.i, label %for.inc52.i, label %if.then46.i

if.then46.i:                                      ; preds = %land.lhs.true40.i, %land.lhs.true33.i
  %74 = bitcast [6 x i16]* %dg to i64*
  store i64 0, i64* %74, align 8
  %scevgep8.i.i = getelementptr [6 x i16]* %dg, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 8, !tbaa !1
  %or.i120.i = or i16 %67, 32767
  store i16 %or.i120.i, i16* %add.ptr.i57159, align 2, !tbaa !1
  br label %do.body

for.inc52.i:                                      ; preds = %land.lhs.true40.i, %land.lhs.true33.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %75 = trunc i64 %indvars.iv.next.i to i32
  %cmp28.i = icmp slt i32 %75, 4
  br i1 %cmp28.i, label %for.inc52.for.body30_crit_edge.i, label %if.end80.i

for.inc52.for.body30_crit_edge.i:                 ; preds = %for.inc52.i
  %arrayidx42.phi.trans.insert.i = getelementptr inbounds [6 x i16]* %df, i64 0, i64 %indvars.iv.next.i
  %.pre.i = load i16* %arrayidx42.phi.trans.insert.i, align 2, !tbaa !1
  br label %for.body30.i

if.end80.i:                                       ; preds = %for.inc52.i
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i.i, i8 0, i64 10, i32 8, i1 false) #1
  %76 = or i16 %67, 32767
  store i16 %76, i16* %add.ptr.i57159, align 2, !tbaa !1
  br label %do.body

sw.bb25:                                          ; preds = %emovo.exit
  call fastcc void @etoe64(i16* %arraydecay1, i16* %arraydecay)
  %x5.i.i.i91 = bitcast [6 x i16]* %dg to i8*
  %77 = bitcast [6 x i16]* %df to i64*
  %78 = load i64* %77, align 8
  %79 = trunc i64 %78 to i32
  %80 = trunc i64 %78 to i16
  %81 = lshr i32 %79, 16
  %82 = trunc i32 %81 to i16
  %83 = lshr i64 %78, 32
  %84 = trunc i64 %83 to i16
  %incdec.ptr4.3.i95 = getelementptr inbounds [6 x i16]* %df, i64 0, i64 4
  %85 = lshr i64 %78, 48
  %86 = trunc i64 %85 to i16
  %87 = load i16* %incdec.ptr4.3.i95, align 8, !tbaa !1
  %and.i96 = and i16 %87, 32767
  switch i16 %and.i96, label %for.cond87.preheader.i117 [
    i16 0, label %land.lhs.true.i98
    i16 32767, label %for.body30.i120
  ]

land.lhs.true.i98:                                ; preds = %sw.bb25
  %cmp14.i97 = icmp sgt i16 %86, -1
  br i1 %cmp14.i97, label %if.end14.i.i111, label %for.cond87.preheader.i117

if.end14.i.i111:                                  ; preds = %land.lhs.true.i98
  %.lobit.2.i.i99 = lshr i16 %80, 15
  %shl.2.i.i100 = shl i16 %80, 1
  %.lobit.3.i.i101146 = lshr i32 %79, 31
  %.lobit.3.i.i101 = trunc i32 %.lobit.3.i.i101146 to i16
  %shl.3.i.i102147 = shl nuw nsw i32 %81, 1
  %shl.3.i.i102 = trunc i32 %shl.3.i.i102147 to i16
  %88 = or i16 %shl.3.i.i102, %.lobit.2.i.i99
  %.lobit.4.i.i103148 = lshr i64 %78, 47
  %.lobit.4.i.i103148.tr = trunc i64 %.lobit.4.i.i103148 to i16
  %.lobit.4.i.i103 = and i16 %.lobit.4.i.i103148.tr, 1
  %shl.4.i.i104149 = shl nuw nsw i64 %83, 1
  %shl.4.i.i104 = trunc i64 %shl.4.i.i104149 to i16
  %89 = or i16 %shl.4.i.i104, %.lobit.3.i.i101
  %shl.5.i.i105150 = shl nuw nsw i64 %85, 1
  %shl.5.i.i105 = trunc i64 %shl.5.i.i105150 to i16
  %90 = or i16 %shl.5.i.i105, %.lobit.4.i.i103
  %91 = and i16 %87, -32768
  store i16 %91, i16* %add.ptr.i57159, align 2, !tbaa !1
  %q.0.i.i107 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  %incdec.ptr19.i.i108 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %90, i16* %q.0.i.i107, align 8, !tbaa !1
  %incdec.ptr19.1.i.i109 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %89, i16* %incdec.ptr19.i.i108, align 2, !tbaa !1
  %incdec.ptr19.2.i.i110 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 %88, i16* %incdec.ptr19.1.i.i109, align 4, !tbaa !1
  store i16 %shl.2.i.i100, i16* %incdec.ptr19.2.i.i110, align 2, !tbaa !1
  store i16 0, i16* %arraydecay1, align 8, !tbaa !1
  br label %do.body

for.cond87.preheader.i117:                        ; preds = %land.lhs.true.i98, %sw.bb25
  %incdec.ptr92.i112 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 1
  store i16 0, i16* %arraydecay1, align 8, !tbaa !1
  %incdec.ptr92.1.i113 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 2
  store i16 %80, i16* %incdec.ptr92.i112, align 2, !tbaa !1
  %incdec.ptr92.2.i114 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 3
  store i16 %82, i16* %incdec.ptr92.1.i113, align 4, !tbaa !1
  %incdec.ptr92.3.i115 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 4
  store i16 %84, i16* %incdec.ptr92.2.i114, align 2, !tbaa !1
  store i16 %86, i16* %incdec.ptr92.3.i115, align 8, !tbaa !1
  store i16 %87, i16* %add.ptr.i57159, align 2, !tbaa !1
  br label %do.body

for.body30.i120:                                  ; preds = %sw.bb25, %for.inc52.for.body30_crit_edge.i134
  %92 = phi i16 [ %.pre.i133, %for.inc52.for.body30_crit_edge.i134 ], [ %80, %sw.bb25 ]
  %indvars.iv.i118 = phi i64 [ %indvars.iv.next.i129, %for.inc52.for.body30_crit_edge.i134 ], [ 0, %sw.bb25 ]
  %93 = trunc i64 %indvars.iv.i118 to i32
  %cond.i119 = icmp eq i32 %93, 3
  br i1 %cond.i119, label %land.lhs.true40.i124, label %land.lhs.true33.i122

land.lhs.true33.i122:                             ; preds = %for.body30.i120
  %cmp36.i121 = icmp eq i16 %92, 0
  br i1 %cmp36.i121, label %for.inc52.i131, label %if.then46.i128

land.lhs.true40.i124:                             ; preds = %for.body30.i120
  %cmp44.i123 = icmp eq i16 %92, -32768
  br i1 %cmp44.i123, label %for.inc52.i131, label %if.then46.i128

if.then46.i128:                                   ; preds = %land.lhs.true40.i124, %land.lhs.true33.i122
  %94 = bitcast [6 x i16]* %dg to i64*
  store i64 0, i64* %94, align 8
  %scevgep8.i.i126 = getelementptr [6 x i16]* %dg, i64 0, i64 4
  store i16 -16384, i16* %scevgep8.i.i126, align 8, !tbaa !1
  %or.i120.i127 = or i16 %87, 32767
  store i16 %or.i120.i127, i16* %add.ptr.i57159, align 2, !tbaa !1
  br label %do.body

for.inc52.i131:                                   ; preds = %land.lhs.true40.i124, %land.lhs.true33.i122
  %indvars.iv.next.i129 = add nuw nsw i64 %indvars.iv.i118, 1
  %95 = trunc i64 %indvars.iv.next.i129 to i32
  %cmp28.i130 = icmp slt i32 %95, 4
  br i1 %cmp28.i130, label %for.inc52.for.body30_crit_edge.i134, label %if.end80.i136

for.inc52.for.body30_crit_edge.i134:              ; preds = %for.inc52.i131
  %arrayidx42.phi.trans.insert.i132 = getelementptr inbounds [6 x i16]* %df, i64 0, i64 %indvars.iv.next.i129
  %.pre.i133 = load i16* %arrayidx42.phi.trans.insert.i132, align 2, !tbaa !1
  br label %for.body30.i120

if.end80.i136:                                    ; preds = %for.inc52.i131
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i.i91, i8 0, i64 10, i32 8, i1 false) #1
  %96 = or i16 %87, 32767
  store i16 %96, i16* %add.ptr.i57159, align 2, !tbaa !1
  br label %do.body

sw.default:                                       ; preds = %emovo.exit
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0), i32 980, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.ereal_from_uint, i64 0, i64 0)) #7
  unreachable

do.body:                                          ; preds = %if.end80.i136, %if.then46.i128, %for.cond87.preheader.i117, %if.end14.i.i111, %if.end80.i, %if.then46.i, %for.cond87.preheader.i, %if.end14.i.i, %sw.bb, %sw.bb15
  %97 = bitcast %struct.realvaluetype* %d to i8*
  %98 = bitcast [6 x i16]* %dg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 12, i32 2, i1 false)
  %add.ptr = getelementptr inbounds i8* %97, i64 12
  call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 12, i32 1, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_to_int(i64* nocapture %low, i64* nocapture %high, %struct.realvaluetype* byval nocapture readonly align 8 %rr) #0 {
entry:
  %d = alloca [6 x i16], align 2
  %df = alloca [6 x i16], align 2
  %dg = alloca [6 x i16], align 2
  %dh = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %d to i8*
  %1 = bitcast %struct.realvaluetype* %rr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %d, i64 0, i64 0
  %arrayidx.i = getelementptr inbounds [6 x i16]* %d, i64 0, i64 5
  %2 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %2, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %entry ]
  %3 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %3, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([27 x i8]* @.str, i64 0, i64 0)) #1
  store i64 -1, i64* %low, align 8, !tbaa !7
  store i64 -1, i64* %high, align 8, !tbaa !7
  br label %if.end23

if.end:                                           ; preds = %for.inc.i, %entry
  %tobool3 = icmp sgt i16 %2, -1
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end
  %xor.i = xor i16 %2, -32768
  store i16 %xor.i, i16* %arrayidx.i, align 2, !tbaa !1
  %arraydecay7.c = getelementptr inbounds [6 x i16]* %df, i64 0, i64 0
  call fastcc void @eldexp(i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i32 64, i16* %arraydecay7.c)
  %arraydecay10.c = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 0
  call fastcc void @ediv(i16* %arraydecay7.c, i16* %arraydecay, i16* %arraydecay10.c)
  %arraydecay12.c = getelementptr inbounds [6 x i16]* %dh, i64 0, i64 0
  call fastcc void @euifrac(i16* %arraydecay10.c, i64* %high, i16* %arraydecay12.c)
  call fastcc void @emul(i16* %arraydecay7.c, i16* %arraydecay12.c, i16* %arraydecay10.c)
  call fastcc void @euifrac(i16* %arraydecay10.c, i64* %low, i16* %arraydecay12.c)
  %4 = load i64* %high, align 8, !tbaa !7
  %neg = xor i64 %4, -1
  store i64 %neg, i64* %high, align 8, !tbaa !7
  %5 = load i64* %low, align 8, !tbaa !7
  %tobool20 = icmp eq i64 %5, 0
  br i1 %tobool20, label %if.else, label %if.then21

if.end6:                                          ; preds = %if.end
  %arraydecay7 = getelementptr inbounds [6 x i16]* %df, i64 0, i64 0
  call fastcc void @eldexp(i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i32 64, i16* %arraydecay7)
  %arraydecay10 = getelementptr inbounds [6 x i16]* %dg, i64 0, i64 0
  call fastcc void @ediv(i16* %arraydecay7, i16* %arraydecay, i16* %arraydecay10)
  %arraydecay12 = getelementptr inbounds [6 x i16]* %dh, i64 0, i64 0
  call fastcc void @euifrac(i16* %arraydecay10, i64* %high, i16* %arraydecay12)
  call fastcc void @emul(i16* %arraydecay7, i16* %arraydecay12, i16* %arraydecay10)
  call fastcc void @euifrac(i16* %arraydecay10, i64* %low, i16* %arraydecay12)
  br label %if.end23

if.then21:                                        ; preds = %if.then4
  %sub = sub nsw i64 0, %5
  store i64 %sub, i64* %low, align 8, !tbaa !7
  br label %if.end23

if.else:                                          ; preds = %if.then4
  %add = sub i64 0, %4
  store i64 %add, i64* %high, align 8, !tbaa !7
  br label %if.end23

if.end23:                                         ; preds = %if.end6, %if.then21, %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_ldexp(%struct.realvaluetype* noalias nocapture sret %agg.result, %struct.realvaluetype* byval nocapture readonly align 8 %x, i32 %n) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %r.sroa.0 = alloca [3 x i64], align 8
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  %arrayidx.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %2 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %2, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %entry ]
  %3 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %3, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %4 = bitcast %struct.realvaluetype* %agg.result to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %1, i64 24, i32 8, i1 false), !tbaa.struct !5
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %r.sroa.01112 = bitcast [3 x i64]* %r.sroa.0 to i16*
  call fastcc void @eldexp(i16* %arraydecay, i32 %n, i16* %r.sroa.01112)
  %r.sroa.0.0..sroa_cast5 = bitcast [3 x i64]* %r.sroa.0 to i8*
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast5, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast, i8* %r.sroa.0.0..sroa_cast5, i64 24, i32 8, i1 false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @target_isinf(%struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arrayidx.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %2 = load i16* %arrayidx.i.i, align 2, !tbaa !1
  %and.i.i = and i16 %2, 32767
  %cmp.i.i = icmp eq i16 %and.i.i, 32767
  br i1 %cmp.i.i, label %for.body.i.i.preheader, label %if.end.i

for.body.i.i.preheader:                           ; preds = %entry
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %for.body.i.i.preheader ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %arraydecay, %for.body.i.i.preheader ]
  %3 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %3, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %eisinf.exit

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end.i

if.end.i:                                         ; preds = %for.inc.i.i, %entry
  %..i = zext i1 %cmp.i.i to i32
  br label %eisinf.exit

eisinf.exit:                                      ; preds = %for.body.i.i, %if.end.i
  %retval.0.i = phi i32 [ %..i, %if.end.i ], [ 0, %for.body.i.i ]
  ret i32 %retval.0.i
}

; Function Attrs: nounwind uwtable
define i32 @target_isnan(%struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arrayidx.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %2 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %2, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i.preheader, label %eisnan.exit

for.body.i.preheader:                             ; preds = %entry
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %for.body.i.preheader ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %for.body.i.preheader ]
  %3 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %3, 0
  br i1 %cmp5.i, label %for.inc.i, label %eisnan.exit

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %eisnan.exit

eisnan.exit:                                      ; preds = %for.body.i, %for.inc.i, %entry
  %retval.0.i = phi i32 [ 0, %entry ], [ 1, %for.body.i ], [ 0, %for.inc.i ]
  ret i32 %retval.0.i
}

; Function Attrs: nounwind uwtable
define i32 @target_negative(%struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %tmp2 = bitcast %struct.realvaluetype* %x to i8*
  %x1.sroa.1.0.tmp2.sroa_idx = getelementptr inbounds i8* %tmp2, i64 10
  %x1.sroa.1.0.tmp2.sroa_cast = bitcast i8* %x1.sroa.1.0.tmp2.sroa_idx to i16*
  %x1.sroa.1.0.copyload = load i16* %x1.sroa.1.0.tmp2.sroa_cast, align 2
  %x.5.val.lobit.i.i = lshr i16 %x1.sroa.1.0.copyload, 15
  %0 = zext i16 %x.5.val.lobit.i.i to i32
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define i32 @ereal_isneg(%struct.realvaluetype* byval nocapture readonly align 8 %x) #0 {
entry:
  %0 = bitcast %struct.realvaluetype* %x to i8*
  %ex.sroa.1.0..sroa_idx = getelementptr inbounds i8* %0, i64 10
  %ex.sroa.1.0..sroa_cast = bitcast i8* %ex.sroa.1.0..sroa_idx to i16*
  %ex.sroa.1.0.copyload = load i16* %ex.sroa.1.0..sroa_cast, align 2
  %x.5.val.lobit.i = lshr i16 %ex.sroa.1.0.copyload, 15
  %1 = zext i16 %x.5.val.lobit.i to i32
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define void @real_value_truncate(%struct.realvaluetype* noalias nocapture sret %agg.result, i32 %mode, %struct.realvaluetype* byval nocapture readonly align 8 %arg) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %t = alloca [6 x i16], align 8
  %r.sroa.0 = alloca [3 x i64], align 8
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %arg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  %arrayidx.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %2 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %2, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %entry ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %entry ]
  %3 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %3, 0
  br i1 %cmp5.i, label %for.inc.i, label %if.then

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %if.end

if.then:                                          ; preds = %for.body.i
  %4 = bitcast %struct.realvaluetype* %agg.result to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %1, i64 24, i32 8, i1 false), !tbaa.struct !5
  br label %return

if.end:                                           ; preds = %for.inc.i, %entry
  %arraydecay1 = getelementptr inbounds [6 x i16]* %t, i64 0, i64 0
  %x4.i = bitcast [6 x i16]* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 12, i32 8, i1 false) #1
  switch i32 %mode, label %sw.default [
    i32 18, label %sw.bb
    i32 17, label %sw.bb
    i32 16, label %sw.bb6
    i32 15, label %sw.bb11
    i32 13, label %sw.bb11
    i32 4, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  call fastcc void @etoe64(i16* %arraydecay, i16* %arraydecay1)
  %incdec.ptr4.i = getelementptr inbounds [6 x i16]* %t, i64 0, i64 1
  %5 = bitcast [6 x i16]* %t to i64*
  %6 = load i64* %5, align 8
  %7 = trunc i64 %6 to i32
  %8 = trunc i64 %6 to i16
  %incdec.ptr4.1.i = getelementptr inbounds [6 x i16]* %t, i64 0, i64 2
  %9 = lshr i32 %7, 16
  %10 = trunc i32 %9 to i16
  %incdec.ptr4.2.i = getelementptr inbounds [6 x i16]* %t, i64 0, i64 3
  %11 = lshr i64 %6, 32
  %12 = trunc i64 %11 to i16
  %incdec.ptr4.3.i = getelementptr inbounds [6 x i16]* %t, i64 0, i64 4
  %13 = lshr i64 %6, 48
  %14 = trunc i64 %13 to i16
  %15 = load i16* %incdec.ptr4.3.i, align 8, !tbaa !1
  %and.i26 = and i16 %15, 32767
  switch i16 %and.i26, label %for.cond87.preheader.i [
    i16 0, label %land.lhs.true.i
    i16 32767, label %for.body30.i
  ]

land.lhs.true.i:                                  ; preds = %sw.bb
  %cmp14.i = icmp sgt i16 %14, -1
  br i1 %cmp14.i, label %if.end14.i.i, label %for.cond87.preheader.i

if.end14.i.i:                                     ; preds = %land.lhs.true.i
  %.lobit.2.i.i = lshr i16 %8, 15
  %shl.2.i.i = shl i16 %8, 1
  %.lobit.3.i.i31 = lshr i32 %7, 31
  %.lobit.3.i.i = trunc i32 %.lobit.3.i.i31 to i16
  %shl.3.i.i32 = shl nuw nsw i32 %9, 1
  %shl.3.i.i = trunc i32 %shl.3.i.i32 to i16
  %16 = or i16 %shl.3.i.i, %.lobit.2.i.i
  %.lobit.4.i.i33 = lshr i64 %6, 47
  %.lobit.4.i.i33.tr = trunc i64 %.lobit.4.i.i33 to i16
  %.lobit.4.i.i = and i16 %.lobit.4.i.i33.tr, 1
  %shl.4.i.i34 = shl nuw nsw i64 %11, 1
  %shl.4.i.i = trunc i64 %shl.4.i.i34 to i16
  %17 = or i16 %shl.4.i.i, %.lobit.3.i.i
  %shl.5.i.i35 = shl nuw nsw i64 %13, 1
  %shl.5.i.i = trunc i64 %shl.5.i.i35 to i16
  %18 = or i16 %shl.5.i.i, %.lobit.4.i.i
  %add.ptr.i121.i = getelementptr inbounds [6 x i16]* %t, i64 0, i64 5
  %19 = and i16 %15, -32768
  store i16 %19, i16* %add.ptr.i121.i, align 2, !tbaa !1
  store i16 %18, i16* %incdec.ptr4.3.i, align 8, !tbaa !1
  store i16 %17, i16* %incdec.ptr4.2.i, align 2, !tbaa !1
  store i16 %16, i16* %incdec.ptr4.1.i, align 4, !tbaa !1
  store i16 %shl.2.i.i, i16* %incdec.ptr4.i, align 2, !tbaa !1
  store i16 0, i16* %arraydecay1, align 8, !tbaa !1
  br label %do.body

for.cond87.preheader.i:                           ; preds = %land.lhs.true.i, %sw.bb
  store i16 0, i16* %arraydecay1, align 8, !tbaa !1
  store i16 %8, i16* %incdec.ptr4.i, align 2, !tbaa !1
  store i16 %10, i16* %incdec.ptr4.1.i, align 4, !tbaa !1
  store i16 %12, i16* %incdec.ptr4.2.i, align 2, !tbaa !1
  %incdec.ptr92.4.i = getelementptr inbounds [6 x i16]* %t, i64 0, i64 5
  store i16 %14, i16* %incdec.ptr4.3.i, align 8, !tbaa !1
  store i16 %15, i16* %incdec.ptr92.4.i, align 2, !tbaa !1
  br label %do.body

for.body30.i:                                     ; preds = %sw.bb, %for.inc52.for.body30_crit_edge.i
  %20 = phi i16 [ %.pre.i, %for.inc52.for.body30_crit_edge.i ], [ %8, %sw.bb ]
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.inc52.for.body30_crit_edge.i ], [ 0, %sw.bb ]
  %21 = trunc i64 %indvars.iv.i to i32
  %cond.i = icmp eq i32 %21, 3
  br i1 %cond.i, label %land.lhs.true40.i, label %land.lhs.true33.i

land.lhs.true33.i:                                ; preds = %for.body30.i
  %cmp36.i = icmp eq i16 %20, 0
  br i1 %cmp36.i, label %for.inc52.i, label %if.then46.i

land.lhs.true40.i:                                ; preds = %for.body30.i
  %cmp44.i = icmp eq i16 %20, -32768
  br i1 %cmp44.i, label %for.inc52.i, label %if.then46.i

if.then46.i:                                      ; preds = %land.lhs.true40.i, %land.lhs.true33.i
  %scevgep.i119.i = getelementptr [6 x i16]* %t, i64 0, i64 5
  %22 = bitcast [6 x i16]* %t to i64*
  store i64 0, i64* %22, align 8
  store i16 -16384, i16* %incdec.ptr4.3.i, align 8, !tbaa !1
  %or.i120.i = or i16 %15, 32767
  store i16 %or.i120.i, i16* %scevgep.i119.i, align 2, !tbaa !1
  br label %do.body

for.inc52.i:                                      ; preds = %land.lhs.true40.i, %land.lhs.true33.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %23 = trunc i64 %indvars.iv.next.i to i32
  %cmp28.i = icmp slt i32 %23, 4
  br i1 %cmp28.i, label %for.inc52.for.body30_crit_edge.i, label %if.end80.i

for.inc52.for.body30_crit_edge.i:                 ; preds = %for.inc52.i
  %arrayidx42.phi.trans.insert.i = getelementptr inbounds [6 x i16]* %t, i64 0, i64 %indvars.iv.next.i
  %.pre.i = load i16* %arrayidx42.phi.trans.insert.i, align 2, !tbaa !1
  br label %for.body30.i

if.end80.i:                                       ; preds = %for.inc52.i
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 10, i32 8, i1 false) #1
  %scevgep.i.i = getelementptr [6 x i16]* %t, i64 0, i64 5
  %24 = or i16 %15, 32767
  store i16 %24, i16* %scevgep.i.i, align 2, !tbaa !1
  br label %do.body

sw.bb6:                                           ; preds = %if.end
  call fastcc void @etoe53(i16* %arraydecay, i16* %arraydecay1)
  call fastcc void @e53toe(i16* %arraydecay1, i16* %arraydecay1)
  br label %do.body

sw.bb11:                                          ; preds = %if.end, %if.end
  call fastcc void @etoe24(i16* %arraydecay, i16* %arraydecay1)
  %25 = bitcast [6 x i16]* %t to i32*
  %arraydecay1.val = load i32* %25, align 8
  %26 = trunc i32 %arraydecay1.val to i16
  %27 = lshr i32 %arraydecay1.val, 16
  %28 = trunc i32 %27 to i16
  call fastcc void @e24toe(i16 %26, i16 %28, i16* %arraydecay1)
  br label %do.body

sw.bb16:                                          ; preds = %if.end
  %r.sroa.030 = bitcast [3 x i64]* %r.sroa.0 to %struct.realvaluetype*
  call void @etrunci(%struct.realvaluetype* sret %r.sroa.030, %struct.realvaluetype* byval align 8 %arg)
  %r.sroa.0.0..sroa_cast17 = bitcast [3 x i64]* %r.sroa.0 to i8*
  %r.sroa.0.0..sroa_cast18 = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast18, i8* %r.sroa.0.0..sroa_cast17, i64 24, i32 8, i1 false)
  br label %return

sw.default:                                       ; preds = %if.end
  %29 = bitcast %struct.realvaluetype* %agg.result to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %1, i64 24, i32 8, i1 false), !tbaa.struct !5
  br label %return

do.body:                                          ; preds = %if.end80.i, %if.then46.i, %for.cond87.preheader.i, %if.end14.i.i, %sw.bb6, %sw.bb11
  %r.sroa.0.0..sroa_cast23 = bitcast [3 x i64]* %r.sroa.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast23, i8* %x4.i, i64 12, i32 8, i1 false)
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast23, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast20 = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast20, i8* %r.sroa.0.0..sroa_cast23, i64 24, i32 8, i1 false)
  br label %return

return:                                           ; preds = %do.body, %sw.default, %sw.bb16, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @exact_real_inverse(i32 %mode, %struct.realvaluetype* nocapture %r) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %einv = alloca [6 x i16], align 2
  %rinv = alloca %struct.realvaluetype, align 8
  %tmp = alloca %struct.realvaluetype, align 8
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  %arrayidx.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %2 = load i16* %arrayidx.i.i, align 2, !tbaa !1
  %and.i.i = and i16 %2, 32767
  %cmp.i.i = icmp eq i16 %and.i.i, 32767
  br i1 %cmp.i.i, label %for.body.i.i, label %lor.lhs.false4

for.body.i.i:                                     ; preds = %entry, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %entry ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %arraydecay, %entry ]
  %3 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %3, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %lor.lhs.false

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %return

lor.lhs.false:                                    ; preds = %for.body.i.i
  br i1 %cmp.i.i, label %for.body.i, label %lor.lhs.false4

for.body.i:                                       ; preds = %lor.lhs.false, %for.inc.i
  %i.012.i = phi i32 [ %inc.i, %for.inc.i ], [ 0, %lor.lhs.false ]
  %x.addr.011.i = phi i16* [ %incdec.ptr.i, %for.inc.i ], [ %arraydecay, %lor.lhs.false ]
  %4 = load i16* %x.addr.011.i, align 2, !tbaa !1
  %cmp5.i = icmp eq i16 %4, 0
  br i1 %cmp5.i, label %for.inc.i, label %return

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i = getelementptr inbounds i16* %x.addr.011.i, i64 1
  %inc.i = add nsw i32 %i.012.i, 1
  %cmp2.i = icmp slt i32 %inc.i, 5
  br i1 %cmp2.i, label %for.body.i, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %for.inc.i, %entry, %lor.lhs.false
  %call6 = call fastcc i32 @ecmp(i16* %arraydecay, i16* getelementptr inbounds ([6 x i16]* @ezero, i64 0, i64 0))
  %cmp = icmp eq i32 %call6, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false4
  %arrayidx = getelementptr inbounds [6 x i16]* %e, i64 0, i64 4
  %5 = load i16* %arrayidx, align 2, !tbaa !1
  %cmp7 = icmp eq i16 %5, -32768
  br i1 %cmp7, label %for.body, label %return

for.cond:                                         ; preds = %for.body
  %6 = trunc i64 %indvars.iv.next108 to i32
  %cmp11 = icmp slt i32 %6, 4
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %if.end, %for.cond
  %indvars.iv107 = phi i64 [ %indvars.iv.next108, %for.cond ], [ 0, %if.end ]
  %arrayidx13 = getelementptr inbounds [6 x i16]* %e, i64 0, i64 %indvars.iv107
  %7 = load i16* %arrayidx13, align 2, !tbaa !1
  %cmp15 = icmp eq i16 %7, 0
  %indvars.iv.next108 = add nuw nsw i64 %indvars.iv107, 1
  br i1 %cmp15, label %for.cond, label %return

for.end:                                          ; preds = %for.cond
  %arraydecay20 = getelementptr inbounds [6 x i16]* %einv, i64 0, i64 0
  call fastcc void @ediv(i16* %arraydecay, i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i16* %arraydecay20)
  %8 = bitcast %struct.realvaluetype* %rinv to i8*
  %9 = bitcast [6 x i16]* %einv to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 12, i32 2, i1 false)
  %add.ptr = getelementptr inbounds i8* %8, i64 12
  call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 12, i32 4, i1 false)
  call void @real_value_truncate(%struct.realvaluetype* sret %tmp, i32 %mode, %struct.realvaluetype* byval align 8 %rinv)
  %10 = bitcast %struct.realvaluetype* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %10, i64 24, i32 8, i1 false), !tbaa.struct !5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 12, i32 2, i1 false)
  %arrayidx21 = getelementptr inbounds [6 x i16]* %einv, i64 0, i64 4
  %11 = load i16* %arrayidx21, align 2, !tbaa !1
  %cmp23 = icmp eq i16 %11, -32768
  br i1 %cmp23, label %for.body30, label %return

for.cond27:                                       ; preds = %for.body30
  %12 = trunc i64 %indvars.iv.next to i32
  %cmp28 = icmp slt i32 %12, 4
  br i1 %cmp28, label %for.body30, label %for.end40

for.body30:                                       ; preds = %for.end, %for.cond27
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond27 ], [ 0, %for.end ]
  %arrayidx32 = getelementptr inbounds [6 x i16]* %einv, i64 0, i64 %indvars.iv
  %13 = load i16* %arrayidx32, align 2, !tbaa !1
  %cmp34 = icmp eq i16 %13, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp34, label %for.cond27, label %return

for.end40:                                        ; preds = %for.cond27
  %arrayidx.i.i79 = getelementptr inbounds [6 x i16]* %einv, i64 0, i64 5
  %14 = load i16* %arrayidx.i.i79, align 2, !tbaa !1
  %and.i.i80 = and i16 %14, 32767
  %cmp.i.i81 = icmp eq i16 %and.i.i80, 32767
  br i1 %cmp.i.i81, label %for.body.i.i85, label %lor.lhs.false48

for.body.i.i85:                                   ; preds = %for.end40, %for.inc.i.i89
  %i.012.i.i82 = phi i32 [ %inc.i.i87, %for.inc.i.i89 ], [ 0, %for.end40 ]
  %x.addr.011.i.i83 = phi i16* [ %incdec.ptr.i.i86, %for.inc.i.i89 ], [ %arraydecay20, %for.end40 ]
  %15 = load i16* %x.addr.011.i.i83, align 2, !tbaa !1
  %cmp5.i.i84 = icmp eq i16 %15, 0
  br i1 %cmp5.i.i84, label %for.inc.i.i89, label %lor.lhs.false44

for.inc.i.i89:                                    ; preds = %for.body.i.i85
  %incdec.ptr.i.i86 = getelementptr inbounds i16* %x.addr.011.i.i83, i64 1
  %inc.i.i87 = add nsw i32 %i.012.i.i82, 1
  %cmp2.i.i88 = icmp slt i32 %inc.i.i87, 5
  br i1 %cmp2.i.i88, label %for.body.i.i85, label %return

lor.lhs.false44:                                  ; preds = %for.body.i.i85
  br i1 %cmp.i.i81, label %for.body.i72, label %lor.lhs.false48

for.body.i72:                                     ; preds = %lor.lhs.false44, %for.inc.i76
  %i.012.i69 = phi i32 [ %inc.i74, %for.inc.i76 ], [ 0, %lor.lhs.false44 ]
  %x.addr.011.i70 = phi i16* [ %incdec.ptr.i73, %for.inc.i76 ], [ %arraydecay20, %lor.lhs.false44 ]
  %16 = load i16* %x.addr.011.i70, align 2, !tbaa !1
  %cmp5.i71 = icmp eq i16 %16, 0
  br i1 %cmp5.i71, label %for.inc.i76, label %return

for.inc.i76:                                      ; preds = %for.body.i72
  %incdec.ptr.i73 = getelementptr inbounds i16* %x.addr.011.i70, i64 1
  %inc.i74 = add nsw i32 %i.012.i69, 1
  %cmp2.i75 = icmp slt i32 %inc.i74, 5
  br i1 %cmp2.i75, label %for.body.i72, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %for.inc.i76, %for.end40, %lor.lhs.false44
  %call50 = call fastcc i32 @ecmp(i16* %arraydecay20, i16* getelementptr inbounds ([6 x i16]* @ezero, i64 0, i64 0))
  %cmp51 = icmp eq i32 %call50, 0
  br i1 %cmp51, label %return, label %do.body55

do.body55:                                        ; preds = %lor.lhs.false48
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %9, i64 12, i32 2, i1 false)
  %add.ptr56 = getelementptr inbounds i8* %1, i64 12
  call void @llvm.memset.p0i8.i64(i8* %add.ptr56, i8 0, i64 12, i32 1, i1 false)
  br label %return

return:                                           ; preds = %for.inc.i.i, %for.body.i, %for.body, %for.body30, %for.inc.i.i89, %for.body.i72, %lor.lhs.false48, %for.end, %if.end, %lor.lhs.false4, %do.body55
  %retval.0 = phi i32 [ 1, %do.body55 ], [ 0, %lor.lhs.false4 ], [ 0, %if.end ], [ 0, %for.end ], [ 0, %lor.lhs.false48 ], [ 0, %for.body.i72 ], [ 0, %for.inc.i.i89 ], [ 0, %for.body30 ], [ 0, %for.body ], [ 0, %for.body.i ], [ 0, %for.inc.i.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @debug_real(%struct.realvaluetype* byval nocapture readonly align 8 %r) #0 {
entry:
  %dstr = alloca [30 x i8], align 16
  %arraydecay = getelementptr inbounds [30 x i8]* %dstr, i64 0, i64 0
  call void @ereal_to_decimal(%struct.realvaluetype* byval align 8 %r, i8* %arraydecay)
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !11
  %fputs = call i32 @fputs(i8* %arraydecay, %struct._IO_FILE* %0) #8
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_to_decimal(%struct.realvaluetype* byval nocapture readonly align 8 %x, i8* nocapture %s) #0 {
entry:
  %f.i.i = alloca [6 x i16], align 2
  %y.i = alloca [9 x i16], align 16
  %t.i = alloca [9 x i16], align 16
  %u.i = alloca [9 x i16], align 16
  %w.i = alloca [9 x i16], align 16
  %e = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  %2 = bitcast [9 x i16]* %y.i to i8*
  call void @llvm.lifetime.start(i64 18, i8* %2) #1
  %3 = bitcast [9 x i16]* %t.i to i8*
  call void @llvm.lifetime.start(i64 18, i8* %3) #1
  %4 = bitcast [9 x i16]* %u.i to i8*
  call void @llvm.lifetime.start(i64 18, i8* %4) #1
  %5 = bitcast [9 x i16]* %w.i to i8*
  call void @llvm.lifetime.start(i64 18, i8* %5) #1
  %6 = load i32* @rndprc, align 4, !tbaa !9
  store i8 0, i8* %s, align 1, !tbaa !6
  store i8 0, i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 0), align 16, !tbaa !6
  %arrayidx.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %7 = load i16* %arrayidx.i.i, align 2, !tbaa !1
  %and.i.i = and i16 %7, 32767
  %cmp.i.i = icmp eq i16 %and.i.i, 32767
  br i1 %cmp.i.i, label %for.body.i.i, label %if.end.i

for.body.i.i:                                     ; preds = %entry, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %entry ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %arraydecay, %entry ]
  %8 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %8, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then.i

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end.i

if.then.i:                                        ; preds = %for.body.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @.str28, i64 0, i64 0), i64 6, i32 1, i1 false) #1
  br label %bxit.i

if.end.i:                                         ; preds = %for.inc.i.i, %entry
  store i32 80, i32* @rndprc, align 4, !tbaa !9
  %arraydecay.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 0
  %incdec.ptr.i9.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 1
  %9 = load i16* %arraydecay, align 2, !tbaa !1
  %incdec.ptr1.i.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 1
  store i16 %9, i16* %arraydecay.i, align 16, !tbaa !1
  %incdec.ptr.1.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 2
  %10 = load i16* %incdec.ptr.i9.i, align 2, !tbaa !1
  %incdec.ptr1.1.i.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 2
  store i16 %10, i16* %incdec.ptr1.i.i, align 2, !tbaa !1
  %incdec.ptr.2.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 3
  %11 = load i16* %incdec.ptr.1.i.i, align 2, !tbaa !1
  %incdec.ptr1.2.i.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 3
  store i16 %11, i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %incdec.ptr.3.i.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 4
  %12 = load i16* %incdec.ptr.2.i.i, align 2, !tbaa !1
  %incdec.ptr1.3.i.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 4
  store i16 %12, i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %13 = load i16* %incdec.ptr.3.i.i, align 2, !tbaa !1
  %incdec.ptr1.4.i.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 5
  store i16 %13, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %tobool2.i = icmp sgt i16 %7, -1
  %.and.i.i = select i1 %tobool2.i, i16 %7, i16 %and.i.i
  store i16 %.and.i.i, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %arraydecay9.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 0
  %incdec.ptr1.i12.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 1
  %incdec.ptr1.1.i13.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 2
  %incdec.ptr1.2.i14.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 3
  %incdec.ptr1.3.i15.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 4
  %incdec.ptr1.4.i16.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 5
  %14 = bitcast [9 x i16]* %t.i to i64*
  store i64 0, i64* %14, align 16
  store i16 -32768, i16* %incdec.ptr1.3.i15.i, align 8, !tbaa !1
  store i16 16383, i16* %incdec.ptr1.4.i16.i, align 2, !tbaa !1
  switch i16 %.and.i.i, label %land.lhs.true.i [
    i16 0, label %for.body.i.preheader
    i16 32767, label %if.then27.i
  ]

for.body.i.preheader:                             ; preds = %if.end.i
  %cmp18.i36 = icmp eq i16 %9, 0
  br i1 %cmp18.i36, label %for.cond.i, label %if.end46.i

for.cond.i:                                       ; preds = %for.body.i.preheader, %for.cond.for.body_crit_edge.i
  %indvars.iv634.i37 = phi i64 [ %phitmp675.i, %for.cond.for.body_crit_edge.i ], [ 1, %for.body.i.preheader ]
  %15 = trunc i64 %indvars.iv634.i37 to i32
  %cmp14.i = icmp slt i32 %15, 5
  br i1 %cmp14.i, label %for.cond.for.body_crit_edge.i, label %isone.i

for.cond.for.body_crit_edge.i:                    ; preds = %for.cond.i
  %arrayidx16.phi.trans.insert.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 %indvars.iv634.i37
  %.pre.i = load i16* %arrayidx16.phi.trans.insert.i, align 2, !tbaa !1
  %phitmp675.i = add i64 %indvars.iv634.i37, 1
  %cmp18.i = icmp eq i16 %.pre.i, 0
  br i1 %cmp18.i, label %for.cond.i, label %if.end46.i

if.then27.i:                                      ; preds = %if.end.i
  br i1 %tobool2.i, label %if.else31.i, label %if.then29.i

if.then29.i:                                      ; preds = %if.then27.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @.str29, i64 0, i64 0), i64 12, i32 1, i1 false) #1
  br label %bxit.i

if.else31.i:                                      ; preds = %if.then27.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @.str30, i64 0, i64 0), i64 11, i32 1, i1 false) #1
  br label %bxit.i

land.lhs.true.i:                                  ; preds = %if.end.i
  %cmp42.i = icmp sgt i16 %13, -1
  br i1 %cmp42.i, label %if.then44.i, label %if.end46.i

if.then44.i:                                      ; preds = %land.lhs.true.i
  call fastcc void @mtherr(i8* getelementptr inbounds ([7 x i8]* @.str13, i64 0, i64 0), i32 1) #1
  store i32 5136718, i32* bitcast ([80 x i8]* @wstring to i32*), align 16
  br label %bxit.i

if.end46.i:                                       ; preds = %for.cond.for.body_crit_edge.i, %for.body.i.preheader, %land.lhs.true.i
  %16 = phi i16 [ %.and.i.i, %land.lhs.true.i ], [ 0, %for.body.i.preheader ], [ 0, %for.cond.for.body_crit_edge.i ]
  %call48.i = call fastcc i32 @ecmp(i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i16* %arraydecay.i) #1
  switch i32 %call48.i, label %if.end56.i [
    i32 0, label %isone.i
    i32 -2, label %if.then55.i
  ]

if.then55.i:                                      ; preds = %if.end46.i
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0), i32 4888, i8* getelementptr inbounds ([7 x i8]* @.str13, i64 0, i64 0)) #7
  unreachable

if.end56.i:                                       ; preds = %if.end46.i
  %cmp57.i = icmp slt i32 %call48.i, 0
  br i1 %cmp57.i, label %if.then59.i, label %if.else126.i

if.then59.i:                                      ; preds = %if.end56.i
  %arraydecay61.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 0
  %incdec.ptr1.i83.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 1
  store i16 %9, i16* %arraydecay61.i, align 16, !tbaa !1
  %incdec.ptr1.1.i85.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 2
  store i16 %10, i16* %incdec.ptr1.i83.i, align 2, !tbaa !1
  %incdec.ptr1.2.i87.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 3
  store i16 %11, i16* %incdec.ptr1.1.i85.i, align 4, !tbaa !1
  %incdec.ptr1.3.i89.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 4
  store i16 %12, i16* %incdec.ptr1.2.i87.i, align 2, !tbaa !1
  %incdec.ptr1.4.i91.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 5
  store i16 %13, i16* %incdec.ptr1.3.i89.i, align 8, !tbaa !1
  store i16 16462, i16* %incdec.ptr1.4.i91.i, align 2, !tbaa !1
  %arraydecay66.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 0
  %17 = bitcast [6 x i16]* %f.i.i to i8*
  %arraydecay.i.i = getelementptr inbounds [6 x i16]* %f.i.i, i64 0, i64 0
  %incdec.ptr1.i.i.i = getelementptr inbounds [6 x i16]* %f.i.i, i64 0, i64 1
  %incdec.ptr1.1.i.i.i = getelementptr inbounds [6 x i16]* %f.i.i, i64 0, i64 2
  %incdec.ptr1.2.i.i.i = getelementptr inbounds [6 x i16]* %f.i.i, i64 0, i64 3
  %incdec.ptr1.3.i.i.i = getelementptr inbounds [6 x i16]* %f.i.i, i64 0, i64 4
  %incdec.ptr1.4.i.i.i = getelementptr inbounds [6 x i16]* %f.i.i, i64 0, i64 5
  %incdec.ptr1.i51.i.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 1
  %incdec.ptr1.1.i53.i.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 2
  %incdec.ptr1.2.i55.i.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 3
  %incdec.ptr1.3.i57.i.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 4
  %incdec.ptr1.4.i59.i.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 5
  %18 = bitcast i16* %incdec.ptr1.3.i15.i to i32*
  br label %do.body.i

do.body.i:                                        ; preds = %noint.i, %if.then59.i
  %p.0.i = phi i16* [ getelementptr inbounds ([13 x [6 x i16]]* @etens, i64 0, i64 8, i64 0), %if.then59.i ], [ %add.ptr.i, %noint.i ]
  %expon.0.i = phi i32 [ 0, %if.then59.i ], [ %expon.1.i, %noint.i ]
  %m.0.i = phi i16 [ 16, %if.then59.i ], [ %shr7.i, %noint.i ]
  call fastcc void @ediv(i16* %p.0.i, i16* %arraydecay61.i, i16* %arraydecay9.i) #1
  call void @llvm.lifetime.start(i64 12, i8* %17) #1
  %19 = load i64* %14, align 16
  %20 = trunc i64 %19 to i32
  %21 = trunc i64 %19 to i16
  store i16 %21, i16* %arraydecay.i.i, align 2, !tbaa !1
  %22 = lshr i32 %20, 16
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %incdec.ptr1.i.i.i, align 2, !tbaa !1
  %24 = lshr i64 %19, 32
  %25 = trunc i64 %24 to i16
  store i16 %25, i16* %incdec.ptr1.1.i.i.i, align 2, !tbaa !1
  %26 = lshr i64 %19, 48
  %27 = trunc i64 %26 to i16
  store i16 %27, i16* %incdec.ptr1.2.i.i.i, align 2, !tbaa !1
  %28 = load i32* %18, align 8
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %incdec.ptr1.3.i.i.i, align 2, !tbaa !1
  %30 = lshr i32 %28, 16
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %incdec.ptr1.4.i.i.i, align 2, !tbaa !1
  %and.i228.i = and i32 %30, 32767
  %sub.i.i = add nsw i32 %and.i228.i, -16382
  %cmp.i229.i = icmp slt i32 %sub.i.i, 1
  br i1 %cmp.i229.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %do.body.i
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 12, i32 16, i1 false) #1
  br label %isitneg.i.i

if.end.i.i:                                       ; preds = %do.body.i
  %sub2.i.i = sub i32 16462, %and.i228.i
  store i16 %21, i16* %arraydecay66.i, align 16, !tbaa !1
  store i16 %23, i16* %incdec.ptr1.i51.i.i, align 2, !tbaa !1
  store i16 %25, i16* %incdec.ptr1.1.i53.i.i, align 4, !tbaa !1
  store i16 %27, i16* %incdec.ptr1.2.i55.i.i, align 2, !tbaa !1
  store i16 %29, i16* %incdec.ptr1.3.i57.i.i, align 8, !tbaa !1
  store i16 %31, i16* %incdec.ptr1.4.i59.i.i, align 2, !tbaa !1
  %cmp4.i.i = icmp slt i32 %sub2.i.i, 1
  br i1 %cmp4.i.i, label %for.body70.i, label %while.cond.preheader.i.i

while.cond.preheader.i.i:                         ; preds = %if.end.i.i
  %cmp961.i.i = icmp sgt i32 %sub2.i.i, 15
  br i1 %cmp961.i.i, label %while.body.lr.ph.i.i, label %while.end.i.i

while.body.lr.ph.i.i:                             ; preds = %while.cond.preheader.i.i
  %32 = sub i32 16446, %and.i228.i
  %33 = lshr i32 %32, 4
  %34 = shl nuw i32 %33, 4
  %35 = zext i32 %33 to i64
  %36 = add i64 %35, 1
  %37 = shl nuw nsw i64 %35, 1
  %38 = add i64 %37, 2
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 %38, i32 16, i1 false) #1
  %39 = sub i32 %32, %34
  %scevgep.i230.i = getelementptr [9 x i16]* %w.i, i64 0, i64 %36
  %.pre65.i.i = load i16* %scevgep.i230.i, align 2, !tbaa !1
  br label %while.end.i.i

while.end.i.i:                                    ; preds = %while.body.lr.ph.i.i, %while.cond.preheader.i.i
  %40 = phi i16 [ %.pre65.i.i, %while.body.lr.ph.i.i ], [ %21, %while.cond.preheader.i.i ]
  %p.0.lcssa.i.i = phi i16* [ %scevgep.i230.i, %while.body.lr.ph.i.i ], [ %arraydecay66.i, %while.cond.preheader.i.i ]
  %e.0.lcssa.i.i = phi i32 [ %39, %while.body.lr.ph.i.i ], [ %sub2.i.i, %while.cond.preheader.i.i ]
  %idxprom.i.i = sext i32 %e.0.lcssa.i.i to i64
  %arrayidx12.i.i = getelementptr inbounds [17 x i16]* @bmask, i64 0, i64 %idxprom.i.i
  %41 = load i16* %arrayidx12.i.i, align 2, !tbaa !1
  %and1549.i.i = and i16 %41, %40
  store i16 %and1549.i.i, i16* %p.0.lcssa.i.i, align 2, !tbaa !1
  br label %isitneg.i.i

isitneg.i.i:                                      ; preds = %while.end.i.i, %if.then.i.i
  %tobool.i231.i = icmp slt i16 %31, 0
  br i1 %tobool.i231.i, label %for.body.i232.preheader.i, label %for.body70.i

for.body.i232.preheader.i:                        ; preds = %isitneg.i.i
  %42 = load i16* %arraydecay66.i, align 16, !tbaa !1
  %cmp29.i595.i = icmp eq i16 %21, %42
  br i1 %cmp29.i595.i, label %for.cond.i.i, label %if.then31.i.i

for.cond.i.i:                                     ; preds = %for.body.i232.preheader.i, %for.cond.for.body_crit_edge.i.i
  %indvars.iv.next.i596.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.for.body_crit_edge.i.i ], [ 1, %for.body.i232.preheader.i ]
  %43 = trunc i64 %indvars.iv.next.i596.i to i32
  %cmp21.i.i = icmp slt i32 %43, 5
  br i1 %cmp21.i.i, label %for.cond.for.body_crit_edge.i.i, label %for.body70.i

for.cond.for.body_crit_edge.i.i:                  ; preds = %for.cond.i.i
  %arrayidx24.phi.trans.insert.i.i = getelementptr inbounds [6 x i16]* %f.i.i, i64 0, i64 %indvars.iv.next.i596.i
  %.pre.i.i = load i16* %arrayidx24.phi.trans.insert.i.i, align 2, !tbaa !1
  %arrayidx27.i.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 %indvars.iv.next.i596.i
  %44 = load i16* %arrayidx27.i.i, align 2, !tbaa !1
  %cmp29.i.i = icmp eq i16 %.pre.i.i, %44
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.next.i596.i, 1
  br i1 %cmp29.i.i, label %for.cond.i.i, label %if.then31.i.i

if.then31.i.i:                                    ; preds = %for.cond.for.body_crit_edge.i.i, %for.body.i232.preheader.i
  call fastcc void @esub(i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i16* %arraydecay66.i, i16* %arraydecay66.i) #1
  br label %for.body70.i

for.cond67.i:                                     ; preds = %for.body70.i
  %45 = trunc i64 %indvars.iv.next.i to i32
  %cmp68.i = icmp slt i32 %45, 5
  br i1 %cmp68.i, label %for.body70.i, label %for.end83.i

for.body70.i:                                     ; preds = %if.then31.i.i, %isitneg.i.i, %if.end.i.i, %for.cond.i.i, %for.cond67.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.cond67.i ], [ 0, %for.cond.i.i ], [ 0, %if.end.i.i ], [ 0, %isitneg.i.i ], [ 0, %if.then31.i.i ]
  %arrayidx72.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 %indvars.iv.i
  %46 = load i16* %arrayidx72.i, align 2, !tbaa !1
  %arrayidx75.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 %indvars.iv.i
  %47 = load i16* %arrayidx75.i, align 2, !tbaa !1
  %cmp77.i = icmp eq i16 %46, %47
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  br i1 %cmp77.i, label %for.cond67.i, label %noint.i

for.end83.i:                                      ; preds = %for.cond67.i
  %48 = load i64* %14, align 16
  %49 = trunc i64 %48 to i32
  %50 = trunc i64 %48 to i16
  store i16 %50, i16* %arraydecay61.i, align 16, !tbaa !1
  %51 = lshr i32 %49, 16
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %incdec.ptr1.i83.i, align 2, !tbaa !1
  %53 = lshr i64 %48, 32
  %54 = trunc i64 %53 to i16
  store i16 %54, i16* %incdec.ptr1.1.i85.i, align 4, !tbaa !1
  %55 = lshr i64 %48, 48
  %56 = trunc i64 %55 to i16
  store i16 %56, i16* %incdec.ptr1.2.i87.i, align 2, !tbaa !1
  %57 = load i32* %18, align 8
  %58 = trunc i32 %57 to i16
  store i16 %58, i16* %incdec.ptr1.3.i89.i, align 8, !tbaa !1
  %59 = lshr i32 %57, 16
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %incdec.ptr1.4.i91.i, align 2, !tbaa !1
  %conv86.i = zext i16 %m.0.i to i32
  %add.i = add nsw i32 %conv86.i, %expon.0.i
  br label %noint.i

noint.i:                                          ; preds = %for.body70.i, %for.end83.i
  %expon.1.i = phi i32 [ %add.i, %for.end83.i ], [ %expon.0.i, %for.body70.i ]
  %add.ptr.i = getelementptr inbounds i16* %p.0.i, i64 6
  %shr7.i = lshr i16 %m.0.i, 1
  %cmp90.i = icmp eq i16 %shr7.i, 0
  br i1 %cmp90.i, label %do.end.i, label %do.body.i

do.end.i:                                         ; preds = %noint.i
  %61 = load i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %sub.i = add i16 %61, -16462
  %62 = load i16* %incdec.ptr1.4.i91.i, align 2, !tbaa !1
  %add96.i = add i16 %sub.i, %62
  store i16 %add96.i, i16* %incdec.ptr1.4.i91.i, align 2, !tbaa !1
  %63 = bitcast [9 x i16]* %u.i to i64*
  %64 = load i64* %63, align 16
  %65 = trunc i64 %64 to i32
  %66 = trunc i64 %64 to i16
  store i16 %66, i16* %arraydecay.i, align 16, !tbaa !1
  %67 = lshr i32 %65, 16
  %68 = trunc i32 %67 to i16
  store i16 %68, i16* %incdec.ptr1.i.i, align 2, !tbaa !1
  %69 = lshr i64 %64, 32
  %70 = trunc i64 %69 to i16
  store i16 %70, i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %71 = lshr i64 %64, 48
  %72 = trunc i64 %71 to i16
  store i16 %72, i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %73 = bitcast i16* %incdec.ptr1.3.i89.i to i32*
  %74 = load i32* %73, align 8
  %75 = trunc i32 %74 to i16
  store i16 %75, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %76 = lshr i32 %74, 16
  %77 = trunc i32 %76 to i16
  store i16 %77, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  store i64 0, i64* %14, align 16
  store i16 -32768, i16* %incdec.ptr1.3.i15.i, align 8, !tbaa !1
  store i16 16383, i16* %incdec.ptr1.4.i16.i, align 2, !tbaa !1
  %call102587.i = call fastcc i32 @ecmp(i16* getelementptr inbounds ([13 x [6 x i16]]* @etens, i64 0, i64 12, i64 0), i16* %arraydecay61.i) #1
  %cmp103588.i = icmp slt i32 %call102587.i, 1
  br i1 %cmp103588.i, label %while.body.i, label %isone.i

while.cond.i:                                     ; preds = %if.end116.i
  %add.ptr125.i = getelementptr inbounds i16* %p.1589.i, i64 6
  %call102.i = call fastcc i32 @ecmp(i16* getelementptr inbounds ([13 x [6 x i16]]* @etens, i64 0, i64 12, i64 0), i16* %arraydecay61.i) #1
  %cmp103.i = icmp slt i32 %call102.i, 1
  br i1 %cmp103.i, label %while.body.i, label %isone.i

while.body.i:                                     ; preds = %do.end.i, %while.cond.i
  %m.1591.i = phi i32 [ %shr118.i, %while.cond.i ], [ 4096, %do.end.i ]
  %expon.2590.i = phi i32 [ %expon.3.i, %while.cond.i ], [ %expon.1.i, %do.end.i ]
  %p.1589.i = phi i16* [ %add.ptr125.i, %while.cond.i ], [ getelementptr inbounds ([13 x [6 x i16]]* @etens, i64 0, i64 0, i64 0), %do.end.i ]
  %call106.i = call fastcc i32 @ecmp(i16* %p.1589.i, i16* %arraydecay61.i) #1
  %cmp107.i = icmp slt i32 %call106.i, 1
  br i1 %cmp107.i, label %if.then109.i, label %if.end116.i

if.then109.i:                                     ; preds = %while.body.i
  call fastcc void @ediv(i16* %p.1589.i, i16* %arraydecay61.i, i16* %arraydecay61.i) #1
  call fastcc void @emul(i16* %p.1589.i, i16* %arraydecay9.i, i16* %arraydecay9.i) #1
  %add115.i = add nsw i32 %expon.2590.i, %m.1591.i
  br label %if.end116.i

if.end116.i:                                      ; preds = %if.then109.i, %while.body.i
  %expon.3.i = phi i32 [ %add115.i, %if.then109.i ], [ %expon.2590.i, %while.body.i ]
  %shr118.i = ashr i32 %m.1591.i, 1
  %conv120.i = and i32 %shr118.i, 65535
  %cmp121.i = icmp eq i32 %conv120.i, 0
  br i1 %cmp121.i, label %isone.i, label %while.cond.i

if.else126.i:                                     ; preds = %if.end56.i
  %cmp129.i = icmp eq i16 %16, 0
  br i1 %cmp129.i, label %while.cond132.preheader.i, label %if.else143.i

while.cond132.preheader.i:                        ; preds = %if.else126.i
  %78 = bitcast i16* %incdec.ptr1.3.i.i to i32*
  %79 = load i32* %78, align 8
  %80 = trunc i32 %79 to i16
  %cmp136606.i = icmp sgt i16 %80, -1
  br i1 %cmp136606.i, label %while.body138.i, label %if.end200.loopexit.i

while.body138.i:                                  ; preds = %while.cond132.preheader.i, %while.body138.i
  %expon.4607.i = phi i32 [ %sub141.i, %while.body138.i ], [ 0, %while.cond132.preheader.i ]
  call fastcc void @emul(i16* getelementptr inbounds ([13 x [6 x i16]]* @etens, i64 0, i64 12, i64 0), i16* %arraydecay.i, i16* %arraydecay.i) #1
  %sub141.i = add nsw i32 %expon.4607.i, -1
  %81 = load i32* %78, align 8
  %82 = trunc i32 %81 to i16
  %cmp136.i = icmp sgt i16 %82, -1
  br i1 %cmp136.i, label %while.body138.i, label %if.end200.loopexit.i

if.else143.i:                                     ; preds = %if.else126.i
  %arraydecay145.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 0
  %incdec.ptr.i343.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 1
  %.lobit.i344.i = ashr i16 %16, 15
  store i16 %.lobit.i344.i, i16* %arraydecay145.i, align 16, !tbaa !1
  %incdec.ptr3.i346.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 2
  %and5.i347.i = and i16 %16, 32767
  store i16 %and5.i347.i, i16* %incdec.ptr.i343.i, align 2, !tbaa !1
  %cmp.i348.i = icmp eq i16 %and5.i347.i, 32767
  br i1 %cmp.i348.i, label %for.body.i.i355.i.preheader, label %if.end28.i382.i

for.body.i.i355.i.preheader:                      ; preds = %if.else143.i
  %cmp5.i.i354.i33 = icmp eq i16 %9, 0
  br i1 %cmp5.i.i354.i33, label %for.inc.i.i359.i, label %if.then13.i372.i

for.inc.i.i359.i:                                 ; preds = %for.body.i.i355.i.preheader, %for.inc.i.i359.for.body.i.i355_crit_edge.i
  %x.addr.011.i.i353.i35 = phi i16* [ %incdec.ptr.i.i356.i, %for.inc.i.i359.for.body.i.i355_crit_edge.i ], [ %arraydecay.i, %for.body.i.i355.i.preheader ]
  %i.012.i.i352.i34 = phi i32 [ %phitmp.i, %for.inc.i.i359.for.body.i.i355_crit_edge.i ], [ 1, %for.body.i.i355.i.preheader ]
  %incdec.ptr.i.i356.i = getelementptr inbounds i16* %x.addr.011.i.i353.i35, i64 1
  %cmp2.i.i358.i = icmp slt i32 %i.012.i.i352.i34, 5
  br i1 %cmp2.i.i358.i, label %for.inc.i.i359.for.body.i.i355_crit_edge.i, label %for.cond20.preheader.i361.i

for.inc.i.i359.for.body.i.i355_crit_edge.i:       ; preds = %for.inc.i.i359.i
  %.pre636.i = load i16* %incdec.ptr.i.i356.i, align 2, !tbaa !1
  %phitmp.i = add i32 %i.012.i.i352.i34, 1
  %cmp5.i.i354.i = icmp eq i16 %.pre636.i, 0
  br i1 %cmp5.i.i354.i, label %for.inc.i.i359.i, label %if.then13.i372.i

for.cond20.preheader.i361.i:                      ; preds = %for.inc.i.i359.i
  %scevgep69.i360.i = bitcast i16* %incdec.ptr3.i346.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i360.i, i8 0, i64 14, i32 4, i1 false) #1
  %arrayidx150.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 8
  %incdec.ptr.2.i388.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 3
  %incdec.ptr.3.i390.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 4
  %incdec.ptr.4.i392.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 5
  %incdec.ptr.5.i394.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 6
  %incdec.ptr.6.i396.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 7
  br label %for.cond146.preheader.i

if.then13.i372.i:                                 ; preds = %for.inc.i.i359.for.body.i.i355_crit_edge.i, %for.body.i.i355.i.preheader
  %incdec.ptr14.i362.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i346.i, align 4, !tbaa !1
  %incdec.ptr18.i364.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 4
  store i16 %13, i16* %incdec.ptr14.i362.i, align 2, !tbaa !1
  %incdec.ptr18.1.i366.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 5
  store i16 %12, i16* %incdec.ptr18.i364.i, align 8, !tbaa !1
  %incdec.ptr18.2.i368.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 6
  store i16 %11, i16* %incdec.ptr18.1.i366.i, align 2, !tbaa !1
  %incdec.ptr18.3.i369.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 7
  store i16 %10, i16* %incdec.ptr18.2.i368.i, align 4, !tbaa !1
  %incdec.ptr18.4.i371.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 8
  store i16 %9, i16* %incdec.ptr18.3.i369.i, align 2, !tbaa !1
  br label %for.cond146.preheader.i

if.end28.i382.i:                                  ; preds = %if.else143.i
  %incdec.ptr29.i373.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i346.i, align 4, !tbaa !1
  %incdec.ptr35.i375.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 4
  store i16 %13, i16* %incdec.ptr29.i373.i, align 2, !tbaa !1
  %incdec.ptr35.1.i377.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 5
  store i16 %12, i16* %incdec.ptr35.i375.i, align 8, !tbaa !1
  %incdec.ptr35.2.i379.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 6
  store i16 %11, i16* %incdec.ptr35.1.i377.i, align 2, !tbaa !1
  %incdec.ptr35.3.i380.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 7
  store i16 %10, i16* %incdec.ptr35.2.i379.i, align 4, !tbaa !1
  store i16 %9, i16* %incdec.ptr35.3.i380.i, align 2, !tbaa !1
  %scevgep70.i381.i = getelementptr [9 x i16]* %w.i, i64 0, i64 8
  store i16 0, i16* %scevgep70.i381.i, align 16, !tbaa !1
  br label %for.cond146.preheader.i

for.cond146.preheader.i:                          ; preds = %if.end28.i382.i, %if.then13.i372.i, %for.cond20.preheader.i361.i
  %incdec.ptr.6.i396.pre-phi.i = phi i16* [ %incdec.ptr.6.i396.pre.i, %for.cond20.preheader.i361.i ], [ %incdec.ptr18.3.i369.i, %if.then13.i372.i ], [ %incdec.ptr35.3.i380.i, %if.end28.i382.i ]
  %incdec.ptr.5.i394.pre-phi.i = phi i16* [ %incdec.ptr.5.i394.pre.i, %for.cond20.preheader.i361.i ], [ %incdec.ptr18.2.i368.i, %if.then13.i372.i ], [ %incdec.ptr35.2.i379.i, %if.end28.i382.i ]
  %incdec.ptr.4.i392.pre-phi.i = phi i16* [ %incdec.ptr.4.i392.pre.i, %for.cond20.preheader.i361.i ], [ %incdec.ptr18.1.i366.i, %if.then13.i372.i ], [ %incdec.ptr35.1.i377.i, %if.end28.i382.i ]
  %incdec.ptr.3.i390.pre-phi.i = phi i16* [ %incdec.ptr.3.i390.pre.i, %for.cond20.preheader.i361.i ], [ %incdec.ptr18.i364.i, %if.then13.i372.i ], [ %incdec.ptr35.i375.i, %if.end28.i382.i ]
  %incdec.ptr.2.i388.pre-phi.i = phi i16* [ %incdec.ptr.2.i388.pre.i, %for.cond20.preheader.i361.i ], [ %incdec.ptr14.i362.i, %if.then13.i372.i ], [ %incdec.ptr29.i373.i, %if.end28.i382.i ]
  %arrayidx150.pre-phi.i = phi i16* [ %arrayidx150.pre.i, %for.cond20.preheader.i361.i ], [ %incdec.ptr18.4.i371.i, %if.then13.i372.i ], [ %scevgep70.i381.i, %if.end28.i382.i ]
  %83 = phi i16 [ 0, %for.cond20.preheader.i361.i ], [ %9, %if.then13.i372.i ], [ %9, %if.end28.i382.i ]
  %84 = phi i16 [ 0, %for.cond20.preheader.i361.i ], [ %10, %if.then13.i372.i ], [ %10, %if.end28.i382.i ]
  %85 = phi i16 [ 0, %for.cond20.preheader.i361.i ], [ %11, %if.then13.i372.i ], [ %11, %if.end28.i382.i ]
  %86 = phi i16 [ 0, %for.cond20.preheader.i361.i ], [ %12, %if.then13.i372.i ], [ %12, %if.end28.i382.i ]
  %87 = phi i16 [ 0, %for.cond20.preheader.i361.i ], [ %13, %if.then13.i372.i ], [ %13, %if.end28.i382.i ]
  %arraydecay158.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 0
  %incdec.ptr1.i385.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 1
  %incdec.ptr1.1.i387.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 2
  %incdec.ptr1.2.i389.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 3
  %incdec.ptr1.3.i391.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 4
  %incdec.ptr1.4.i393.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 5
  %incdec.ptr1.5.i395.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 6
  %incdec.ptr1.6.i397.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 7
  %scevgep.i398.i = getelementptr [9 x i16]* %u.i, i64 0, i64 8
  %88 = bitcast [9 x i16]* %u.i to i64*
  br label %if.end156.i

if.end156.i:                                      ; preds = %if.end191.i.if.end156.i_crit_edge, %for.cond146.preheader.i
  %89 = phi i32 [ 0, %for.cond146.preheader.i ], [ %phitmp, %if.end191.i.if.end156.i_crit_edge ]
  %90 = phi i16 [ %83, %for.cond146.preheader.i ], [ %137, %if.end191.i.if.end156.i_crit_edge ]
  %91 = phi i16 [ %84, %for.cond146.preheader.i ], [ %138, %if.end191.i.if.end156.i_crit_edge ]
  %92 = phi i16 [ %85, %for.cond146.preheader.i ], [ %139, %if.end191.i.if.end156.i_crit_edge ]
  %93 = phi i16 [ %86, %for.cond146.preheader.i ], [ %140, %if.end191.i.if.end156.i_crit_edge ]
  %94 = phi i16 [ %87, %for.cond146.preheader.i ], [ %161, %if.end191.i.if.end156.i_crit_edge ]
  %95 = phi i16 [ 0, %for.cond146.preheader.i ], [ %159, %if.end191.i.if.end156.i_crit_edge ]
  %96 = phi i16 [ %and5.i347.i, %for.cond146.preheader.i ], [ %157, %if.end191.i.if.end156.i_crit_edge ]
  %97 = phi i16 [ %.lobit.i344.i, %for.cond146.preheader.i ], [ %155, %if.end191.i.if.end156.i_crit_edge ]
  %expon.5619.i = phi i32 [ 0, %for.cond146.preheader.i ], [ %sub194.i, %if.end191.i.if.end156.i_crit_edge ]
  %i.0618.i = phi i32 [ 1, %for.cond146.preheader.i ], [ %phitmp62, %if.end191.i.if.end156.i_crit_edge ]
  store i16 %97, i16* %arraydecay158.i, align 16, !tbaa !1
  %shr22.i.i = lshr i16 %95, 1
  %shr22.1.i.i = lshr i16 %94, 1
  %98 = shl i16 %95, 15
  %99 = or i16 %98, %shr22.1.i.i
  %shr22.2.i.i = lshr i16 %93, 1
  %100 = shl i16 %94, 15
  %101 = or i16 %100, %shr22.2.i.i
  %shr22.3.i.i = lshr i16 %92, 1
  %102 = shl i16 %93, 15
  %103 = or i16 %102, %shr22.3.i.i
  %shr22.4.i.i = lshr i16 %91, 1
  %104 = shl i16 %92, 15
  %105 = or i16 %104, %shr22.4.i.i
  %shr22.5.i.i = lshr i16 %90, 1
  %106 = shl i16 %91, 15
  %107 = or i16 %106, %shr22.5.i.i
  %shr22.i408.i = lshr i16 %95, 2
  %shr22.1.i410.i = lshr i16 %99, 1
  %108 = shl i16 %shr22.i.i, 15
  %109 = or i16 %shr22.1.i410.i, %108
  %shr22.2.i412.i = lshr i16 %101, 1
  %110 = shl i16 %shr22.1.i.i, 15
  %111 = or i16 %shr22.2.i412.i, %110
  %shr22.3.i414.i = lshr i16 %103, 1
  %112 = shl i16 %shr22.2.i.i, 15
  %113 = or i16 %shr22.3.i414.i, %112
  %shr22.4.i416.i = lshr i16 %105, 1
  %114 = shl i16 %shr22.3.i.i, 15
  %115 = or i16 %shr22.4.i416.i, %114
  %shr22.5.i418.i = lshr i16 %107, 1
  %116 = shl i16 %shr22.4.i.i, 15
  %117 = or i16 %shr22.5.i418.i, %116
  %shl.5.i419.i = shl i16 %shr22.5.i.i, 15
  %118 = shl i16 %90, 14
  %shr22.6.i421.i = and i16 %118, 16384
  %119 = or i16 %shr22.6.i421.i, %shl.5.i419.i
  %conv.1.i511.i = zext i16 %90 to i32
  %conv2.1.i512.i = zext i16 %117 to i32
  %add3.1.i514.i = add i32 %conv2.1.i512.i, %conv.1.i511.i
  %and.1.i515.i = lshr i32 %add3.1.i514.i, 16
  %and.lobit.1.i516.i = and i32 %and.1.i515.i, 1
  %conv4.1.i517.i = trunc i32 %add3.1.i514.i to i16
  %conv.2.i520.i = zext i16 %91 to i32
  %conv2.2.i521.i = zext i16 %115 to i32
  %add.2.i522.i = add i32 %conv2.2.i521.i, %conv.2.i520.i
  %add3.2.i523.i = add i32 %add.2.i522.i, %and.lobit.1.i516.i
  %and.2.i524.i = lshr i32 %add3.2.i523.i, 16
  %and.lobit.2.i525.i = and i32 %and.2.i524.i, 1
  %conv4.2.i526.i = trunc i32 %add3.2.i523.i to i16
  %conv.3.i529.i = zext i16 %92 to i32
  %conv2.3.i530.i = zext i16 %113 to i32
  %add.3.i531.i = add i32 %conv2.3.i530.i, %conv.3.i529.i
  %add3.3.i532.i = add i32 %add.3.i531.i, %and.lobit.2.i525.i
  %and.3.i533.i = lshr i32 %add3.3.i532.i, 16
  %and.lobit.3.i534.i = and i32 %and.3.i533.i, 1
  %conv4.3.i535.i = trunc i32 %add3.3.i532.i to i16
  %conv.4.i538.i = zext i16 %93 to i32
  %conv2.4.i539.i = zext i16 %111 to i32
  %add.4.i540.i = add i32 %conv2.4.i539.i, %conv.4.i538.i
  %add3.4.i541.i = add i32 %add.4.i540.i, %and.lobit.3.i534.i
  %and.4.i542.i = lshr i32 %add3.4.i541.i, 16
  %and.lobit.4.i543.i = and i32 %and.4.i542.i, 1
  %conv4.4.i544.i = trunc i32 %add3.4.i541.i to i16
  %conv.5.i547.i = zext i16 %94 to i32
  %conv2.5.i548.i = zext i16 %109 to i32
  %add.5.i549.i = add i32 %conv2.5.i548.i, %conv.5.i547.i
  %add3.5.i550.i = add i32 %add.5.i549.i, %and.lobit.4.i543.i
  %and.5.i551.i = lshr i32 %add3.5.i550.i, 16
  %and.lobit.5.i552.i = and i32 %and.5.i551.i, 1
  %conv4.5.i553.i = trunc i32 %add3.5.i550.i to i16
  store i16 %conv4.5.i553.i, i16* %incdec.ptr1.2.i389.i, align 2, !tbaa !1
  %conv2.6.i557.i = zext i16 %shr22.i408.i to i32
  %add.6.i558.i = add i32 %89, %conv2.6.i557.i
  %add3.6.i559.i = add i32 %add.6.i558.i, %and.lobit.5.i552.i
  %conv4.6.i560.i = trunc i32 %add3.6.i559.i to i16
  store i16 %conv4.6.i560.i, i16* %incdec.ptr1.1.i387.i, align 4, !tbaa !1
  %add165.i = add i16 %96, 3
  store i16 %add165.i, i16* %incdec.ptr1.i385.i, align 2, !tbaa !1
  %cmp170609.i = icmp eq i16 %conv4.6.i560.i, 0
  br i1 %cmp170609.i, label %while.end178.i, label %while.body172.i

while.body172.i:                                  ; preds = %if.end156.i, %while.body172.i
  %add176617.i = phi i16 [ %add176.i, %while.body172.i ], [ %add165.i, %if.end156.i ]
  %120 = phi i16 [ %136, %while.body172.i ], [ %119, %if.end156.i ]
  %121 = phi i16 [ %135, %while.body172.i ], [ %conv4.1.i517.i, %if.end156.i ]
  %122 = phi i16 [ %133, %while.body172.i ], [ %conv4.2.i526.i, %if.end156.i ]
  %123 = phi i16 [ %131, %while.body172.i ], [ %conv4.3.i535.i, %if.end156.i ]
  %124 = phi i16 [ %129, %while.body172.i ], [ %conv4.4.i544.i, %if.end156.i ]
  %125 = phi i16 [ %127, %while.body172.i ], [ %conv4.5.i553.i, %if.end156.i ]
  %shr22.i487611.i = phi i16 [ %shr22.i487.i, %while.body172.i ], [ %conv4.6.i560.i, %if.end156.i ]
  %shr22.i487.i = lshr i16 %shr22.i487611.i, 1
  %shr22.1.i489.i = lshr i16 %125, 1
  %126 = shl i16 %shr22.i487611.i, 15
  %127 = or i16 %126, %shr22.1.i489.i
  %shr22.2.i491.i = lshr i16 %124, 1
  %128 = shl i16 %125, 15
  %129 = or i16 %128, %shr22.2.i491.i
  %shr22.3.i493.i = lshr i16 %123, 1
  %130 = shl i16 %124, 15
  %131 = or i16 %130, %shr22.3.i493.i
  %shr22.4.i495.i = lshr i16 %122, 1
  %132 = shl i16 %123, 15
  %133 = or i16 %132, %shr22.4.i495.i
  %shr22.5.i497.i = lshr i16 %121, 1
  %134 = shl i16 %122, 15
  %135 = or i16 %134, %shr22.5.i497.i
  %shl.5.i498.i = shl i16 %121, 15
  %shr22.6.i500.i = lshr i16 %120, 1
  %136 = or i16 %shl.5.i498.i, %shr22.6.i500.i
  %add176.i = add i16 %add176617.i, 1
  %cmp170.i = icmp eq i16 %shr22.i487.i, 0
  br i1 %cmp170.i, label %while.cond167.while.end178_crit_edge.i, label %while.body172.i

while.cond167.while.end178_crit_edge.i:           ; preds = %while.body172.i
  store i16 0, i16* %incdec.ptr1.1.i387.i, align 4, !tbaa !1
  store i16 %127, i16* %incdec.ptr1.2.i389.i, align 2, !tbaa !1
  store i16 %add176.i, i16* %incdec.ptr1.i385.i, align 2, !tbaa !1
  br label %while.end178.i

while.end178.i:                                   ; preds = %while.cond167.while.end178_crit_edge.i, %if.end156.i
  %137 = phi i16 [ %135, %while.cond167.while.end178_crit_edge.i ], [ %conv4.1.i517.i, %if.end156.i ]
  %138 = phi i16 [ %133, %while.cond167.while.end178_crit_edge.i ], [ %conv4.2.i526.i, %if.end156.i ]
  %139 = phi i16 [ %131, %while.cond167.while.end178_crit_edge.i ], [ %conv4.3.i535.i, %if.end156.i ]
  %140 = phi i16 [ %129, %while.cond167.while.end178_crit_edge.i ], [ %conv4.4.i544.i, %if.end156.i ]
  %141 = phi i16 [ %136, %while.cond167.while.end178_crit_edge.i ], [ %119, %if.end156.i ]
  %storemerge6.lcssa.i = phi i16 [ %add176.i, %while.cond167.while.end178_crit_edge.i ], [ %add165.i, %if.end156.i ]
  %cmp181.i = icmp ne i16 %141, 0
  %cmp188.i = icmp ugt i16 %storemerge6.lcssa.i, 16382
  %or.cond.i = or i1 %cmp181.i, %cmp188.i
  br i1 %or.cond.i, label %while.end178.for.end197_crit_edge.i, label %if.end191.i

while.end178.for.end197_crit_edge.i:              ; preds = %while.end178.i
  store i16 %141, i16* %scevgep.i398.i, align 16, !tbaa !1
  store i16 %137, i16* %incdec.ptr1.6.i397.i, align 2, !tbaa !1
  store i16 %138, i16* %incdec.ptr1.5.i395.i, align 4, !tbaa !1
  store i16 %139, i16* %incdec.ptr1.4.i393.i, align 2, !tbaa !1
  store i16 %140, i16* %incdec.ptr1.3.i391.i, align 8, !tbaa !1
  %142 = bitcast [9 x i16]* %w.i to i32*
  %143 = load i32* %142, align 16
  %144 = bitcast [9 x i16]* %w.i to i64*
  %.pre637.i = load i64* %144, align 16
  %145 = trunc i64 %.pre637.i to i32
  %146 = trunc i64 %.pre637.i to i16
  %147 = lshr i32 %145, 16
  %148 = trunc i32 %147 to i16
  %149 = lshr i32 %143, 16
  %150 = trunc i32 %149 to i16
  %151 = lshr i64 %.pre637.i, 48
  %152 = trunc i64 %151 to i16
  br label %for.end197.i

if.end191.i:                                      ; preds = %while.end178.i
  %153 = load i64* %88, align 16
  %154 = trunc i64 %153 to i32
  %155 = trunc i64 %153 to i16
  store i16 %155, i16* %arraydecay145.i, align 16, !tbaa !1
  %156 = lshr i32 %154, 16
  %157 = trunc i32 %156 to i16
  store i16 %157, i16* %incdec.ptr.i343.i, align 2, !tbaa !1
  %158 = lshr i64 %153, 32
  %159 = trunc i64 %158 to i16
  store i16 %159, i16* %incdec.ptr3.i346.i, align 4, !tbaa !1
  %160 = lshr i64 %153, 48
  %161 = trunc i64 %160 to i16
  store i16 %161, i16* %incdec.ptr.2.i388.pre-phi.i, align 2, !tbaa !1
  store i16 %140, i16* %incdec.ptr.3.i390.pre-phi.i, align 8, !tbaa !1
  store i16 %139, i16* %incdec.ptr.4.i392.pre-phi.i, align 2, !tbaa !1
  store i16 %138, i16* %incdec.ptr.5.i394.pre-phi.i, align 4, !tbaa !1
  store i16 %137, i16* %incdec.ptr.6.i396.pre-phi.i, align 2, !tbaa !1
  store i16 0, i16* %arrayidx150.pre-phi.i, align 16, !tbaa !1
  %sub194.i = add nsw i32 %expon.5619.i, -1
  %cmp147.i = icmp slt i32 %i.0618.i, 24
  br i1 %cmp147.i, label %if.end191.i.if.end156.i_crit_edge, label %for.end197.i.loopexit

if.end191.i.if.end156.i_crit_edge:                ; preds = %if.end191.i
  %.pre = load i16* %incdec.ptr3.i346.i, align 4, !tbaa !1
  %phitmp = zext i16 %.pre to i32
  %phitmp62 = add i32 %i.0618.i, 1
  br label %if.end156.i

for.end197.i.loopexit:                            ; preds = %if.end191.i
  store i16 0, i16* %scevgep.i398.i, align 16, !tbaa !1
  store i16 %137, i16* %incdec.ptr1.6.i397.i, align 2, !tbaa !1
  store i16 %138, i16* %incdec.ptr1.5.i395.i, align 4, !tbaa !1
  store i16 %139, i16* %incdec.ptr1.4.i393.i, align 2, !tbaa !1
  store i16 %140, i16* %incdec.ptr1.3.i391.i, align 8, !tbaa !1
  br label %for.end197.i

for.end197.i:                                     ; preds = %for.end197.i.loopexit, %while.end178.for.end197_crit_edge.i
  %a.val.i450.i = phi i16 [ %146, %while.end178.for.end197_crit_edge.i ], [ %155, %for.end197.i.loopexit ]
  %162 = phi i16 [ %152, %while.end178.for.end197_crit_edge.i ], [ %161, %for.end197.i.loopexit ]
  %163 = phi i16 [ %150, %while.end178.for.end197_crit_edge.i ], [ %157, %for.end197.i.loopexit ]
  %164 = phi i16 [ %148, %while.end178.for.end197_crit_edge.i ], [ %157, %for.end197.i.loopexit ]
  %expon.5.lcssa.i = phi i32 [ %expon.5619.i, %while.end178.for.end197_crit_edge.i ], [ %sub194.i, %for.end197.i.loopexit ]
  %tobool.i439.i = icmp eq i16 %a.val.i450.i, 0
  %or.i440.i = or i16 %164, -32768
  %storemerge.i441.i = select i1 %tobool.i439.i, i16 %164, i16 %or.i440.i
  store i16 %storemerge.i441.i, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %cmp.i442.i = icmp eq i16 %163, 32767
  br i1 %cmp.i442.i, label %for.body.i.i449.i, label %if.end14.i469.i

for.cond.i.i444.i:                                ; preds = %for.body.i.i449.i
  %165 = trunc i64 %indvars.iv.next.i.i448.i to i32
  %cmp2.i.i443.i = icmp slt i32 %165, 9
  br i1 %cmp2.i.i443.i, label %for.body.i.i449.i, label %if.end13.i459.i

for.body.i.i449.i:                                ; preds = %for.end197.i, %for.cond.i.i444.i
  %indvars.iv.i.i445.i = phi i64 [ %indvars.iv.next.i.i448.i, %for.cond.i.i444.i ], [ 3, %for.end197.i ]
  %arrayidx4.i.i446.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 %indvars.iv.i.i445.i
  %166 = load i16* %arrayidx4.i.i446.i, align 2, !tbaa !1
  %cmp6.i.i447.i = icmp eq i16 %166, 0
  %indvars.iv.next.i.i448.i = add nuw nsw i64 %indvars.iv.i.i445.i, 1
  br i1 %cmp6.i.i447.i, label %for.cond.i.i444.i, label %if.then11.i456.i

if.then11.i456.i:                                 ; preds = %for.body.i.i449.i
  %cmp.i32.i451.i = icmp ne i16 %a.val.i450.i, 0
  %conv1.i.i452.i = zext i1 %cmp.i32.i451.i to i16
  %167 = bitcast [9 x i16]* %y.i to i64*
  store i64 0, i64* %167, align 16
  store i16 -16384, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %shl.i.i454.i = shl nuw i16 %conv1.i.i452.i, 15
  %or.i31.i455.i = or i16 %shl.i.i454.i, 32767
  store i16 %or.i31.i455.i, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  br label %if.end200.i

if.end13.i459.i:                                  ; preds = %for.cond.i.i444.i
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 10, i32 16, i1 false) #1
  %or.i.i458.i = or i16 %storemerge.i441.i, 32767
  store i16 %or.i.i458.i, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  br label %if.end200.i

if.end14.i469.i:                                  ; preds = %for.end197.i
  store i16 %162, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %168 = bitcast i16* %incdec.ptr.3.i390.pre-phi.i to i64*
  %169 = load i64* %168, align 8
  %170 = trunc i64 %169 to i32
  %171 = trunc i64 %169 to i16
  store i16 %171, i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %172 = lshr i32 %170, 16
  %173 = trunc i32 %172 to i16
  store i16 %173, i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %174 = lshr i64 %169, 32
  %175 = trunc i64 %174 to i16
  store i16 %175, i16* %incdec.ptr1.i.i, align 2, !tbaa !1
  %176 = lshr i64 %169, 48
  %177 = trunc i64 %176 to i16
  store i16 %177, i16* %arraydecay.i, align 16, !tbaa !1
  br label %if.end200.i

if.end200.loopexit.i:                             ; preds = %while.body138.i, %while.cond132.preheader.i
  %.in.in.i = phi i32 [ %79, %while.cond132.preheader.i ], [ %81, %while.body138.i ]
  %178 = phi i16 [ %80, %while.cond132.preheader.i ], [ %82, %while.body138.i ]
  %expon.4.lcssa.i = phi i32 [ 0, %while.cond132.preheader.i ], [ %sub141.i, %while.body138.i ]
  %.in.i = lshr i32 %.in.in.i, 16
  %179 = trunc i32 %.in.i to i16
  %180 = bitcast [9 x i16]* %y.i to i64*
  %181 = load i64* %180, align 16
  %182 = trunc i64 %181 to i32
  %183 = trunc i64 %181 to i16
  %184 = lshr i32 %182, 16
  %185 = trunc i32 %184 to i16
  %186 = lshr i64 %181, 32
  %187 = trunc i64 %186 to i16
  %188 = lshr i64 %181, 48
  %189 = trunc i64 %188 to i16
  %arraydecay202.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 0
  %incdec.ptr1.i428.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 1
  %incdec.ptr1.1.i430.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 2
  %incdec.ptr1.2.i432.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 3
  %incdec.ptr1.3.i434.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 4
  %incdec.ptr1.4.i436.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 5
  br label %if.end200.i

if.end200.i:                                      ; preds = %if.end200.loopexit.i, %if.end14.i469.i, %if.end13.i459.i, %if.then11.i456.i
  %incdec.ptr1.4.i436.pre-phi.i = phi i16* [ %incdec.ptr1.4.i436.pre.i, %if.end200.loopexit.i ], [ %incdec.ptr.4.i392.pre-phi.i, %if.end14.i469.i ], [ %incdec.ptr.4.i392.pre-phi.i, %if.end13.i459.i ], [ %incdec.ptr.4.i392.pre-phi.i, %if.then11.i456.i ]
  %incdec.ptr1.3.i434.pre-phi.i = phi i16* [ %incdec.ptr1.3.i434.pre.i, %if.end200.loopexit.i ], [ %incdec.ptr.3.i390.pre-phi.i, %if.end14.i469.i ], [ %incdec.ptr.3.i390.pre-phi.i, %if.end13.i459.i ], [ %incdec.ptr.3.i390.pre-phi.i, %if.then11.i456.i ]
  %incdec.ptr1.2.i432.pre-phi.i = phi i16* [ %incdec.ptr1.2.i432.pre.i, %if.end200.loopexit.i ], [ %incdec.ptr.2.i388.pre-phi.i, %if.end14.i469.i ], [ %incdec.ptr.2.i388.pre-phi.i, %if.end13.i459.i ], [ %incdec.ptr.2.i388.pre-phi.i, %if.then11.i456.i ]
  %incdec.ptr1.1.i430.pre-phi.i = phi i16* [ %incdec.ptr1.1.i430.pre.i, %if.end200.loopexit.i ], [ %incdec.ptr3.i346.i, %if.end14.i469.i ], [ %incdec.ptr3.i346.i, %if.end13.i459.i ], [ %incdec.ptr3.i346.i, %if.then11.i456.i ]
  %incdec.ptr1.i428.pre-phi.i = phi i16* [ %incdec.ptr1.i428.pre.i, %if.end200.loopexit.i ], [ %incdec.ptr.i343.i, %if.end14.i469.i ], [ %incdec.ptr.i343.i, %if.end13.i459.i ], [ %incdec.ptr.i343.i, %if.then11.i456.i ]
  %arraydecay202.pre-phi.i = phi i16* [ %arraydecay202.pre.i, %if.end200.loopexit.i ], [ %arraydecay145.i, %if.end14.i469.i ], [ %arraydecay145.i, %if.end13.i459.i ], [ %arraydecay145.i, %if.then11.i456.i ]
  %190 = phi i16 [ %179, %if.end200.loopexit.i ], [ %storemerge.i441.i, %if.end14.i469.i ], [ %or.i.i458.i, %if.end13.i459.i ], [ %or.i31.i455.i, %if.then11.i456.i ]
  %191 = phi i16 [ %178, %if.end200.loopexit.i ], [ %162, %if.end14.i469.i ], [ 0, %if.end13.i459.i ], [ -16384, %if.then11.i456.i ]
  %192 = phi i16 [ %189, %if.end200.loopexit.i ], [ %171, %if.end14.i469.i ], [ 0, %if.end13.i459.i ], [ 0, %if.then11.i456.i ]
  %193 = phi i16 [ %187, %if.end200.loopexit.i ], [ %173, %if.end14.i469.i ], [ 0, %if.end13.i459.i ], [ 0, %if.then11.i456.i ]
  %194 = phi i16 [ %185, %if.end200.loopexit.i ], [ %175, %if.end14.i469.i ], [ 0, %if.end13.i459.i ], [ 0, %if.then11.i456.i ]
  %195 = phi i16 [ %183, %if.end200.loopexit.i ], [ %177, %if.end14.i469.i ], [ 0, %if.end13.i459.i ], [ 0, %if.then11.i456.i ]
  %expon.6.i = phi i32 [ %expon.4.lcssa.i, %if.end200.loopexit.i ], [ %expon.5.lcssa.i, %if.end14.i469.i ], [ %expon.5.lcssa.i, %if.end13.i459.i ], [ %expon.5.lcssa.i, %if.then11.i456.i ]
  store i16 %195, i16* %arraydecay202.pre-phi.i, align 16, !tbaa !1
  store i16 %194, i16* %incdec.ptr1.i428.pre-phi.i, align 2, !tbaa !1
  store i16 %193, i16* %incdec.ptr1.1.i430.pre-phi.i, align 4, !tbaa !1
  store i16 %192, i16* %incdec.ptr1.2.i432.pre-phi.i, align 2, !tbaa !1
  store i16 %191, i16* %incdec.ptr1.3.i434.pre-phi.i, align 8, !tbaa !1
  store i16 %190, i16* %incdec.ptr1.4.i436.pre-phi.i, align 2, !tbaa !1
  store i64 0, i64* %14, align 16
  store i16 -32768, i16* %incdec.ptr1.3.i15.i, align 8, !tbaa !1
  store i16 16383, i16* %incdec.ptr1.4.i16.i, align 2, !tbaa !1
  %call206598.i = call fastcc i32 @ecmp(i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i16* %arraydecay202.pre-phi.i) #1
  %cmp207599.i = icmp sgt i32 %call206598.i, 0
  br i1 %cmp207599.i, label %while.body209.i, label %while.end227.i

while.body209.i:                                  ; preds = %if.end200.i, %if.end224.i
  %expon.7603.i = phi i32 [ %expon.8.i, %if.end224.i ], [ %expon.6.i, %if.end200.i ]
  %k.1602.i = phi i32 [ %div.i, %if.end224.i ], [ -4096, %if.end200.i ]
  %r.0601.i = phi i16* [ %add.ptr226.i, %if.end224.i ], [ getelementptr inbounds ([13 x [6 x i16]]* @etens, i64 0, i64 0, i64 0), %if.end200.i ]
  %p.2600.i = phi i16* [ %add.ptr225.i, %if.end224.i ], [ getelementptr inbounds ([13 x [6 x i16]]* @emtens, i64 0, i64 0, i64 0), %if.end200.i ]
  %call211.i = call fastcc i32 @ecmp(i16* %p.2600.i, i16* %arraydecay202.pre-phi.i) #1
  %cmp212.i = icmp sgt i32 %call211.i, -1
  br i1 %cmp212.i, label %if.then214.i, label %if.end220.i

if.then214.i:                                     ; preds = %while.body209.i
  call fastcc void @emul(i16* %r.0601.i, i16* %arraydecay202.pre-phi.i, i16* %arraydecay202.pre-phi.i) #1
  call fastcc void @emul(i16* %r.0601.i, i16* %arraydecay9.i, i16* %arraydecay9.i) #1
  %add219.i = add nsw i32 %k.1602.i, %expon.7603.i
  br label %if.end220.i

if.end220.i:                                      ; preds = %if.then214.i, %while.body209.i
  %expon.8.i = phi i32 [ %add219.i, %if.then214.i ], [ %expon.7603.i, %while.body209.i ]
  %k.1.off.i = add i32 %k.1602.i, 1
  %196 = icmp ult i32 %k.1.off.i, 3
  br i1 %196, label %while.end227.i, label %if.end224.i

if.end224.i:                                      ; preds = %if.end220.i
  %div.i = sdiv i32 %k.1602.i, 2
  %add.ptr225.i = getelementptr inbounds i16* %p.2600.i, i64 6
  %add.ptr226.i = getelementptr inbounds i16* %r.0601.i, i64 6
  %call206.i = call fastcc i32 @ecmp(i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i16* %arraydecay202.pre-phi.i) #1
  %cmp207.i = icmp sgt i32 %call206.i, 0
  br i1 %cmp207.i, label %while.body209.i, label %while.end227.i

while.end227.i:                                   ; preds = %if.end224.i, %if.end220.i, %if.end200.i
  %expon.9.i = phi i32 [ %expon.6.i, %if.end200.i ], [ %expon.8.i, %if.end220.i ], [ %expon.8.i, %if.end224.i ]
  call fastcc void @ediv(i16* %arraydecay9.i, i16* getelementptr inbounds ([6 x i16]* @eone, i64 0, i64 0), i16* %arraydecay9.i) #1
  br label %isone.i

isone.i:                                          ; preds = %for.cond.i, %if.end116.i, %while.cond.i, %while.end227.i, %do.end.i, %if.end46.i
  %expon.10.i = phi i32 [ 0, %if.end46.i ], [ %expon.9.i, %while.end227.i ], [ %expon.1.i, %do.end.i ], [ %expon.3.i, %while.cond.i ], [ %expon.3.i, %if.end116.i ], [ 0, %for.cond.i ]
  %arraydecay232.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 0
  %197 = load i16* %incdec.ptr1.4.i16.i, align 2, !tbaa !1
  %incdec.ptr.i296.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 1
  %.lobit.i297.i = ashr i16 %197, 15
  store i16 %.lobit.i297.i, i16* %arraydecay232.i, align 16, !tbaa !1
  %incdec.ptr3.i299.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 2
  %and5.i300.i = and i16 %197, 32767
  store i16 %and5.i300.i, i16* %incdec.ptr.i296.i, align 2, !tbaa !1
  %cmp.i301.i = icmp eq i16 %and5.i300.i, 32767
  br i1 %cmp.i301.i, label %for.body.i.i308.i, label %if.end28.i335.i

for.body.i.i308.i:                                ; preds = %isone.i, %for.inc.i.i312.i
  %i.012.i.i305.i = phi i32 [ %inc.i.i310.i, %for.inc.i.i312.i ], [ 0, %isone.i ]
  %x.addr.011.i.i306.i = phi i16* [ %incdec.ptr.i.i309.i, %for.inc.i.i312.i ], [ %arraydecay9.i, %isone.i ]
  %198 = load i16* %x.addr.011.i.i306.i, align 2, !tbaa !1
  %cmp5.i.i307.i = icmp eq i16 %198, 0
  br i1 %cmp5.i.i307.i, label %for.inc.i.i312.i, label %if.then13.i325.i

for.inc.i.i312.i:                                 ; preds = %for.body.i.i308.i
  %incdec.ptr.i.i309.i = getelementptr inbounds i16* %x.addr.011.i.i306.i, i64 1
  %inc.i.i310.i = add nsw i32 %i.012.i.i305.i, 1
  %cmp2.i.i311.i = icmp slt i32 %inc.i.i310.i, 5
  br i1 %cmp2.i.i311.i, label %for.body.i.i308.i, label %for.cond20.preheader.i314.i

for.cond20.preheader.i314.i:                      ; preds = %for.inc.i.i312.i
  %scevgep69.i313.i = bitcast i16* %incdec.ptr3.i299.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i313.i, i8 0, i64 14, i32 4, i1 false) #1
  %incdec.ptr.2.i284.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 3
  %incdec.ptr.3.i286.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 4
  %incdec.ptr.4.i288.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 5
  %incdec.ptr.5.i290.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 6
  %incdec.ptr.6.i292.pre.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 7
  br label %emovi.exit336.i

if.then13.i325.i:                                 ; preds = %for.body.i.i308.i
  %incdec.ptr14.i315.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i299.i, align 4, !tbaa !1
  %199 = load i16* %incdec.ptr1.3.i15.i, align 8, !tbaa !1
  %incdec.ptr18.i317.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 4
  store i16 %199, i16* %incdec.ptr14.i315.i, align 2, !tbaa !1
  %200 = load i16* %incdec.ptr1.2.i14.i, align 2, !tbaa !1
  %incdec.ptr18.1.i319.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 5
  store i16 %200, i16* %incdec.ptr18.i317.i, align 8, !tbaa !1
  %201 = load i16* %incdec.ptr1.1.i13.i, align 4, !tbaa !1
  %incdec.ptr18.2.i321.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 6
  store i16 %201, i16* %incdec.ptr18.1.i319.i, align 2, !tbaa !1
  %202 = load i16* %incdec.ptr1.i12.i, align 2, !tbaa !1
  %incdec.ptr18.3.i322.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 7
  store i16 %202, i16* %incdec.ptr18.2.i321.i, align 4, !tbaa !1
  %incdec.ptr17.4.i323.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 -1
  %203 = load i16* %arraydecay9.i, align 16, !tbaa !1
  %incdec.ptr18.4.i324.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 8
  store i16 %203, i16* %incdec.ptr18.3.i322.i, align 2, !tbaa !1
  %204 = load i16* %incdec.ptr17.4.i323.i, align 2, !tbaa !1
  store i16 %204, i16* %incdec.ptr18.4.i324.i, align 16, !tbaa !1
  br label %emovi.exit336.i

if.end28.i335.i:                                  ; preds = %isone.i
  %incdec.ptr29.i326.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i299.i, align 4, !tbaa !1
  %205 = load i16* %incdec.ptr1.3.i15.i, align 8, !tbaa !1
  %incdec.ptr35.i328.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 4
  store i16 %205, i16* %incdec.ptr29.i326.i, align 2, !tbaa !1
  %206 = load i16* %incdec.ptr1.2.i14.i, align 2, !tbaa !1
  %incdec.ptr35.1.i330.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 5
  store i16 %206, i16* %incdec.ptr35.i328.i, align 8, !tbaa !1
  %207 = load i16* %incdec.ptr1.1.i13.i, align 4, !tbaa !1
  %incdec.ptr35.2.i332.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 6
  store i16 %207, i16* %incdec.ptr35.1.i330.i, align 2, !tbaa !1
  %208 = load i16* %incdec.ptr1.i12.i, align 2, !tbaa !1
  %incdec.ptr35.3.i333.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 7
  store i16 %208, i16* %incdec.ptr35.2.i332.i, align 4, !tbaa !1
  %209 = load i16* %arraydecay9.i, align 16, !tbaa !1
  store i16 %209, i16* %incdec.ptr35.3.i333.i, align 2, !tbaa !1
  %scevgep70.i334.i = getelementptr [9 x i16]* %w.i, i64 0, i64 8
  store i16 0, i16* %scevgep70.i334.i, align 16, !tbaa !1
  br label %emovi.exit336.i

emovi.exit336.i:                                  ; preds = %if.end28.i335.i, %if.then13.i325.i, %for.cond20.preheader.i314.i
  %incdec.ptr.6.i292.pre-phi.i = phi i16* [ %incdec.ptr.6.i292.pre.i, %for.cond20.preheader.i314.i ], [ %incdec.ptr18.3.i322.i, %if.then13.i325.i ], [ %incdec.ptr35.3.i333.i, %if.end28.i335.i ]
  %incdec.ptr.5.i290.pre-phi.i = phi i16* [ %incdec.ptr.5.i290.pre.i, %for.cond20.preheader.i314.i ], [ %incdec.ptr18.2.i321.i, %if.then13.i325.i ], [ %incdec.ptr35.2.i332.i, %if.end28.i335.i ]
  %incdec.ptr.4.i288.pre-phi.i = phi i16* [ %incdec.ptr.4.i288.pre.i, %for.cond20.preheader.i314.i ], [ %incdec.ptr18.1.i319.i, %if.then13.i325.i ], [ %incdec.ptr35.1.i330.i, %if.end28.i335.i ]
  %incdec.ptr.3.i286.pre-phi.i = phi i16* [ %incdec.ptr.3.i286.pre.i, %for.cond20.preheader.i314.i ], [ %incdec.ptr18.i317.i, %if.then13.i325.i ], [ %incdec.ptr35.i328.i, %if.end28.i335.i ]
  %incdec.ptr.2.i284.pre-phi.i = phi i16* [ %incdec.ptr.2.i284.pre.i, %for.cond20.preheader.i314.i ], [ %incdec.ptr14.i315.i, %if.then13.i325.i ], [ %incdec.ptr29.i326.i, %if.end28.i335.i ]
  %210 = phi i16 [ 0, %for.cond20.preheader.i314.i ], [ %203, %if.then13.i325.i ], [ %209, %if.end28.i335.i ]
  %211 = phi i16 [ 0, %for.cond20.preheader.i314.i ], [ %202, %if.then13.i325.i ], [ %208, %if.end28.i335.i ]
  %212 = phi i16 [ 0, %for.cond20.preheader.i314.i ], [ %201, %if.then13.i325.i ], [ %207, %if.end28.i335.i ]
  %213 = phi i16 [ 0, %for.cond20.preheader.i314.i ], [ %200, %if.then13.i325.i ], [ %206, %if.end28.i335.i ]
  %214 = phi i16 [ 0, %for.cond20.preheader.i314.i ], [ %199, %if.then13.i325.i ], [ %205, %if.end28.i335.i ]
  store i16 %.lobit.i297.i, i16* %arraydecay9.i, align 16, !tbaa !1
  store i16 %and5.i300.i, i16* %incdec.ptr1.i12.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr1.1.i13.i, align 4, !tbaa !1
  store i16 %214, i16* %incdec.ptr1.2.i14.i, align 2, !tbaa !1
  store i16 %213, i16* %incdec.ptr1.3.i15.i, align 8, !tbaa !1
  %incdec.ptr1.5.i291.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 6
  store i16 %212, i16* %incdec.ptr1.4.i16.i, align 2, !tbaa !1
  %incdec.ptr1.6.i293.i = getelementptr inbounds [9 x i16]* %t.i, i64 0, i64 7
  store i16 %211, i16* %incdec.ptr1.5.i291.i, align 4, !tbaa !1
  store i16 %210, i16* %incdec.ptr1.6.i293.i, align 2, !tbaa !1
  %scevgep.i294.i = getelementptr [9 x i16]* %t.i, i64 0, i64 8
  store i16 0, i16* %scevgep.i294.i, align 16, !tbaa !1
  %215 = load i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %.lobit.i270.i = ashr i16 %215, 15
  store i16 %.lobit.i270.i, i16* %arraydecay232.i, align 16, !tbaa !1
  %and5.i.i = and i16 %215, 32767
  store i16 %and5.i.i, i16* %incdec.ptr.i296.i, align 2, !tbaa !1
  %cmp.i271.i = icmp eq i16 %and5.i.i, 32767
  br i1 %cmp.i271.i, label %for.body.i.i273.i, label %if.end28.i.i

for.body.i.i273.i:                                ; preds = %emovi.exit336.i, %for.inc.i.i.i
  %i.012.i.i.i = phi i32 [ %inc.i.i.i, %for.inc.i.i.i ], [ 0, %emovi.exit336.i ]
  %x.addr.011.i.i.i = phi i16* [ %incdec.ptr.i.i274.i, %for.inc.i.i.i ], [ %arraydecay.i, %emovi.exit336.i ]
  %216 = load i16* %x.addr.011.i.i.i, align 2, !tbaa !1
  %cmp5.i.i.i = icmp eq i16 %216, 0
  br i1 %cmp5.i.i.i, label %for.inc.i.i.i, label %if.then13.i.i

for.inc.i.i.i:                                    ; preds = %for.body.i.i273.i
  %incdec.ptr.i.i274.i = getelementptr inbounds i16* %x.addr.011.i.i.i, i64 1
  %inc.i.i.i = add nsw i32 %i.012.i.i.i, 1
  %cmp2.i.i275.i = icmp slt i32 %inc.i.i.i, 5
  br i1 %cmp2.i.i275.i, label %for.body.i.i273.i, label %for.cond20.preheader.i.i

for.cond20.preheader.i.i:                         ; preds = %for.inc.i.i.i
  %scevgep69.i.i = bitcast i16* %incdec.ptr3.i299.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit.i

if.then13.i.i:                                    ; preds = %for.body.i.i273.i
  store i16 0, i16* %incdec.ptr3.i299.i, align 4, !tbaa !1
  %217 = load i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  store i16 %217, i16* %incdec.ptr.2.i284.pre-phi.i, align 2, !tbaa !1
  %218 = load i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  store i16 %218, i16* %incdec.ptr.3.i286.pre-phi.i, align 8, !tbaa !1
  %219 = load i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  store i16 %219, i16* %incdec.ptr.4.i288.pre-phi.i, align 2, !tbaa !1
  %220 = load i16* %incdec.ptr1.i.i, align 2, !tbaa !1
  store i16 %220, i16* %incdec.ptr.5.i290.pre-phi.i, align 4, !tbaa !1
  %incdec.ptr17.4.i.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 -1
  %221 = load i16* %arraydecay.i, align 16, !tbaa !1
  %incdec.ptr18.4.i.i = getelementptr inbounds [9 x i16]* %w.i, i64 0, i64 8
  store i16 %221, i16* %incdec.ptr.6.i292.pre-phi.i, align 2, !tbaa !1
  %222 = load i16* %incdec.ptr17.4.i.i, align 2, !tbaa !1
  store i16 %222, i16* %incdec.ptr18.4.i.i, align 16, !tbaa !1
  br label %emovi.exit.i

if.end28.i.i:                                     ; preds = %emovi.exit336.i
  store i16 0, i16* %incdec.ptr3.i299.i, align 4, !tbaa !1
  %223 = load i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  store i16 %223, i16* %incdec.ptr.2.i284.pre-phi.i, align 2, !tbaa !1
  %224 = load i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  store i16 %224, i16* %incdec.ptr.3.i286.pre-phi.i, align 8, !tbaa !1
  %225 = load i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  store i16 %225, i16* %incdec.ptr.4.i288.pre-phi.i, align 2, !tbaa !1
  %226 = load i16* %incdec.ptr1.i.i, align 2, !tbaa !1
  store i16 %226, i16* %incdec.ptr.5.i290.pre-phi.i, align 4, !tbaa !1
  %227 = load i16* %arraydecay.i, align 16, !tbaa !1
  store i16 %227, i16* %incdec.ptr.6.i292.pre-phi.i, align 2, !tbaa !1
  %scevgep70.i.i = getelementptr [9 x i16]* %w.i, i64 0, i64 8
  store i16 0, i16* %scevgep70.i.i, align 16, !tbaa !1
  br label %emovi.exit.i

emovi.exit.i:                                     ; preds = %if.end28.i.i, %if.then13.i.i, %for.cond20.preheader.i.i
  %228 = phi i16 [ 0, %for.cond20.preheader.i.i ], [ %221, %if.then13.i.i ], [ %227, %if.end28.i.i ]
  %229 = phi i16 [ 0, %for.cond20.preheader.i.i ], [ %220, %if.then13.i.i ], [ %226, %if.end28.i.i ]
  %230 = phi i16 [ 0, %for.cond20.preheader.i.i ], [ %219, %if.then13.i.i ], [ %225, %if.end28.i.i ]
  %231 = phi i16 [ 0, %for.cond20.preheader.i.i ], [ %218, %if.then13.i.i ], [ %224, %if.end28.i.i ]
  %232 = phi i16 [ 0, %for.cond20.preheader.i.i ], [ %217, %if.then13.i.i ], [ %223, %if.end28.i.i ]
  store i16 %.lobit.i270.i, i16* %arraydecay.i, align 16, !tbaa !1
  store i16 %and5.i.i, i16* %incdec.ptr1.i.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  store i16 %232, i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  store i16 %231, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %incdec.ptr1.5.i264.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 6
  store i16 %230, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %incdec.ptr1.6.i266.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 7
  store i16 %229, i16* %incdec.ptr1.5.i264.i, align 4, !tbaa !1
  store i16 %228, i16* %incdec.ptr1.6.i266.i, align 2, !tbaa !1
  %scevgep.i267.i = getelementptr [9 x i16]* %y.i, i64 0, i64 8
  store i16 0, i16* %scevgep.i267.i, align 16, !tbaa !1
  call fastcc void @eiremain(i16* %arraydecay9.i, i16* %arraydecay.i) #1
  %digit.0581.i = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16
  %cmp243582.i = icmp eq i16 %digit.0581.i, 0
  br i1 %cmp243582.i, label %land.rhs.lr.ph.i, label %while.end260.i

land.rhs.lr.ph.i:                                 ; preds = %emovi.exit.i
  %arraydecay252.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 0
  %incdec.ptr1.i193.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 1
  %incdec.ptr1.1.i195.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 2
  %incdec.ptr1.2.i197.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 3
  %incdec.ptr1.3.i199.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 4
  %incdec.ptr1.4.i201.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 5
  %incdec.ptr1.5.i203.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 6
  %incdec.ptr1.6.i205.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 7
  %add.ptr.i172.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 8
  %233 = bitcast i16* %incdec.ptr1.3.i.i to i64*
  %234 = bitcast [9 x i16]* %y.i to i64*
  br label %land.rhs.i

land.rhs.i:                                       ; preds = %while.body249.i, %land.rhs.lr.ph.i
  %expon.11583.i = phi i32 [ %expon.10.i, %land.rhs.lr.ph.i ], [ %sub259.i, %while.body249.i ]
  %call246.i = call fastcc i32 @ecmp(i16* %arraydecay.i, i16* getelementptr inbounds ([6 x i16]* @ezero, i64 0, i64 0)) #1
  %cmp247.i = icmp eq i32 %call246.i, 0
  br i1 %cmp247.i, label %while.end260.thread.i, label %while.body249.i

while.end260.thread.i:                            ; preds = %land.rhs.i
  %.565.i = select i1 %tobool2.i, i8 32, i8 45
  store i8 %.565.i, i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 0), align 16, !tbaa !6
  br label %if.else287.i

while.body249.i:                                  ; preds = %land.rhs.i
  %235 = load i16* %scevgep.i267.i, align 16, !tbaa !1
  %.lobit.i208.i = lshr i16 %235, 15
  %shl.i209.i = shl i16 %235, 1
  store i16 %shl.i209.i, i16* %scevgep.i267.i, align 16, !tbaa !1
  %236 = load i16* %incdec.ptr1.6.i266.i, align 2, !tbaa !1
  %.lobit.1.i211.i = lshr i16 %236, 15
  %shl.1.i212.i = shl i16 %236, 1
  %237 = or i16 %shl.1.i212.i, %.lobit.i208.i
  store i16 %237, i16* %incdec.ptr1.6.i266.i, align 2, !tbaa !1
  %238 = bitcast i16* %incdec.ptr1.5.i264.i to i32*
  %239 = load i32* %238, align 4
  %240 = trunc i32 %239 to i16
  %.lobit.2.i214.i = lshr i16 %240, 15
  %shl.2.i215.i = shl i16 %240, 1
  %241 = or i16 %shl.2.i215.i, %.lobit.1.i211.i
  store i16 %241, i16* %incdec.ptr1.5.i264.i, align 4, !tbaa !1
  %242 = load i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %.lobit.3.i217.i = lshr i16 %242, 15
  %shl.3.i218.i = shl i16 %242, 1
  %243 = or i16 %shl.3.i218.i, %.lobit.2.i214.i
  store i16 %243, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %244 = load i64* %233, align 8
  %245 = trunc i64 %244 to i32
  %246 = trunc i64 %244 to i16
  %.lobit.4.i220.i = lshr i16 %246, 15
  %shl.4.i221.i = shl i16 %246, 1
  %247 = or i16 %shl.4.i221.i, %.lobit.3.i217.i
  store i16 %247, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %248 = load i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %.lobit.5.i223.i = lshr i16 %248, 15
  %shl.5.i224.i = shl i16 %248, 1
  %249 = or i16 %shl.5.i224.i, %.lobit.4.i220.i
  store i16 %249, i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %250 = load i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %shl.6.i226.i = shl i16 %250, 1
  %251 = or i16 %shl.6.i226.i, %.lobit.5.i223.i
  store i16 %251, i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %252 = load i64* %234, align 16
  %253 = trunc i64 %252 to i32
  %254 = trunc i64 %252 to i16
  store i16 %254, i16* %arraydecay252.i, align 16, !tbaa !1
  %255 = lshr i32 %253, 16
  %256 = trunc i32 %255 to i16
  store i16 %256, i16* %incdec.ptr1.i193.i, align 2, !tbaa !1
  %257 = lshr i64 %252, 32
  %258 = lshr i64 %252, 48
  %259 = lshr i32 %245, 16
  %260 = lshr i64 %244, 32
  %261 = lshr i64 %244, 48
  %.lobit.1.i176658.i = lshr i64 %244, 63
  %.lobit.2.i179660.i = lshr i64 %244, 47
  %.lobit.2.i179660.tr.i = trunc i64 %.lobit.2.i179660.i to i16
  %.lobit.2.i179.i = and i16 %.lobit.2.i179660.tr.i, 1
  %shl.2.i180661.i = shl nuw nsw i64 %260, 1
  %262 = or i64 %shl.2.i180661.i, %.lobit.1.i176658.i
  %263 = trunc i64 %262 to i16
  %.lobit.3.i182662.i = lshr i32 %245, 31
  %.lobit.3.i182.i = trunc i32 %.lobit.3.i182662.i to i16
  %shl.3.i183663.i = shl nuw nsw i32 %259, 1
  %shl.3.i183.i = trunc i32 %shl.3.i183663.i to i16
  %264 = or i16 %shl.3.i183.i, %.lobit.2.i179.i
  %265 = lshr i16 %246, 14
  %.lobit.4.i185.i = and i16 %265, 1
  %shl.4.i186.i = shl i16 %247, 1
  %266 = or i16 %shl.4.i186.i, %.lobit.3.i182.i
  %.lobit.5.i188664.i = lshr i64 %252, 63
  %shl.5.i189665.i = shl nuw nsw i64 %258, 1
  %shl.5.i189.i = trunc i64 %shl.5.i189665.i to i16
  %267 = or i16 %shl.5.i189.i, %.lobit.4.i185.i
  %shl.6.i191666.i = shl nuw nsw i64 %257, 1
  %268 = or i64 %shl.6.i191666.i, %.lobit.5.i188664.i
  %269 = trunc i64 %268 to i16
  store i16 0, i16* %add.ptr.i172.i, align 16, !tbaa !1
  %.lobit.1.i156667.i = lshr i64 %244, 62
  %.lobit.1.i156667.tr.i = trunc i64 %.lobit.1.i156667.i to i16
  %.lobit.1.i156.i = and i16 %.lobit.1.i156667.tr.i, 1
  %shl.1.i157669.i = shl nuw nsw i64 %261, 2
  %shl.1.i157.i = trunc i64 %shl.1.i157669.i to i16
  store i16 %shl.1.i157.i, i16* %incdec.ptr1.6.i205.i, align 2, !tbaa !1
  %.lobit.2.i159.i = lshr i16 %263, 15
  %shl.2.i160.i = shl i16 %263, 1
  %270 = or i16 %shl.2.i160.i, %.lobit.1.i156.i
  store i16 %270, i16* %incdec.ptr1.5.i203.i, align 4, !tbaa !1
  %.lobit.3.i162671.i = lshr i32 %245, 30
  %.lobit.3.i162671.tr.i = trunc i32 %.lobit.3.i162671.i to i16
  %.lobit.3.i162.i = and i16 %.lobit.3.i162671.tr.i, 1
  %shl.3.i163.i = shl i16 %264, 1
  %271 = or i16 %shl.3.i163.i, %.lobit.2.i159.i
  store i16 %271, i16* %incdec.ptr1.4.i201.i, align 2, !tbaa !1
  %272 = lshr i16 %246, 13
  %.lobit.4.i165.i = and i16 %272, 1
  %shl.4.i166.i = shl i16 %266, 1
  %273 = or i16 %shl.4.i166.i, %.lobit.3.i162.i
  store i16 %273, i16* %incdec.ptr1.3.i199.i, align 8, !tbaa !1
  %.lobit.5.i168673.i = lshr i64 %252, 62
  %.lobit.5.i168673.tr.i = trunc i64 %.lobit.5.i168673.i to i16
  %.lobit.5.i168.i = and i16 %.lobit.5.i168673.tr.i, 1
  %shl.5.i169.i = shl i16 %267, 1
  %274 = or i16 %shl.5.i169.i, %.lobit.4.i165.i
  store i16 %274, i16* %incdec.ptr1.2.i197.i, align 2, !tbaa !1
  %shl.6.i171.i = shl i16 %269, 1
  %275 = or i16 %shl.6.i171.i, %.lobit.5.i168.i
  store i16 %275, i16* %incdec.ptr1.1.i195.i, align 4, !tbaa !1
  %276 = trunc i64 %shl.1.i157669.i to i32
  %conv.1.i102.i = and i32 %276, 65532
  %277 = lshr i32 %239, 16
  %add3.1.i105.i = add i32 %277, %conv.1.i102.i
  %and.1.i106.i = lshr i32 %add3.1.i105.i, 16
  %and.lobit.1.i107.i = and i32 %and.1.i106.i, 1
  %conv4.1.i108.i = trunc i32 %add3.1.i105.i to i16
  store i16 %conv4.1.i108.i, i16* %incdec.ptr1.6.i266.i, align 2, !tbaa !1
  %conv.2.i111.i = zext i16 %270 to i32
  %conv2.2.i112.i = zext i16 %241 to i32
  %add.2.i113.i = add i32 %conv.2.i111.i, %conv2.2.i112.i
  %add3.2.i114.i = add i32 %add.2.i113.i, %and.lobit.1.i107.i
  %and.2.i115.i = lshr i32 %add3.2.i114.i, 16
  %and.lobit.2.i116.i = and i32 %and.2.i115.i, 1
  %conv4.2.i117.i = trunc i32 %add3.2.i114.i to i16
  store i16 %conv4.2.i117.i, i16* %incdec.ptr1.5.i264.i, align 4, !tbaa !1
  %conv.3.i120.i = zext i16 %271 to i32
  %278 = load i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %conv2.3.i121.i = zext i16 %278 to i32
  %add.3.i122.i = add i32 %conv.3.i120.i, %conv2.3.i121.i
  %add3.3.i123.i = add i32 %add.3.i122.i, %and.lobit.2.i116.i
  %and.3.i124.i = lshr i32 %add3.3.i123.i, 16
  %and.lobit.3.i125.i = and i32 %and.3.i124.i, 1
  %conv4.3.i126.i = trunc i32 %add3.3.i123.i to i16
  store i16 %conv4.3.i126.i, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %conv.4.i129.i = zext i16 %273 to i32
  %279 = load i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %conv2.4.i130.i = zext i16 %279 to i32
  %add.4.i131.i = add i32 %conv2.4.i130.i, %conv.4.i129.i
  %add3.4.i132.i = add i32 %add.4.i131.i, %and.lobit.3.i125.i
  %and.4.i133.i = lshr i32 %add3.4.i132.i, 16
  %and.lobit.4.i134.i = and i32 %and.4.i133.i, 1
  %conv4.4.i135.i = trunc i32 %add3.4.i132.i to i16
  store i16 %conv4.4.i135.i, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %conv.5.i138.i = zext i16 %274 to i32
  %280 = load i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %conv2.5.i139.i = zext i16 %280 to i32
  %add.5.i140.i = add i32 %conv.5.i138.i, %conv2.5.i139.i
  %add3.5.i141.i = add i32 %add.5.i140.i, %and.lobit.4.i134.i
  %and.5.i142.i = lshr i32 %add3.5.i141.i, 16
  %and.lobit.5.i143.i = and i32 %and.5.i142.i, 1
  %conv4.5.i144.i = trunc i32 %add3.5.i141.i to i16
  store i16 %conv4.5.i144.i, i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %conv.6.i147.i = zext i16 %275 to i32
  %281 = load i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %conv2.6.i148.i = zext i16 %281 to i32
  %add.6.i149.i = add i32 %conv2.6.i148.i, %conv.6.i147.i
  %add3.6.i150.i = add i32 %add.6.i149.i, %and.lobit.5.i143.i
  %conv4.6.i151.i = trunc i32 %add3.6.i150.i to i16
  store i16 %conv4.6.i151.i, i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  call fastcc void @eiremain(i16* %arraydecay9.i, i16* %arraydecay.i) #1
  %sub259.i = add nsw i32 %expon.11583.i, -1
  %digit.0.i = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16
  %cmp243.i = icmp eq i16 %digit.0.i, 0
  br i1 %cmp243.i, label %land.rhs.i, label %while.end260.i

while.end260.i:                                   ; preds = %while.body249.i, %emovi.exit.i
  %digit.0.lcssa.i = phi i16 [ %digit.0581.i, %emovi.exit.i ], [ %digit.0.i, %while.body249.i ]
  %expon.11.lcssa.i = phi i32 [ %expon.10.i, %emovi.exit.i ], [ %sub259.i, %while.body249.i ]
  %..i = select i1 %tobool2.i, i8 32, i8 45
  store i8 %..i, i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 0), align 16, !tbaa !6
  %cmp275.i = icmp eq i16 %digit.0.lcssa.i, 10
  br i1 %cmp275.i, label %if.then277.i, label %if.else287.i

if.then277.i:                                     ; preds = %while.end260.i
  store i8 49, i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 1), align 1, !tbaa !6
  store i8 46, i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 2), align 2, !tbaa !6
  store i8 48, i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 3), align 1, !tbaa !6
  %add286.i = add nsw i32 %expon.11.lcssa.i, 1
  br label %if.end294.i

if.else287.i:                                     ; preds = %while.end260.i, %while.end260.thread.i
  %digit.0572.i = phi i16 [ 0, %while.end260.thread.i ], [ %digit.0.lcssa.i, %while.end260.i ]
  %expon.11570.i = phi i32 [ %expon.11583.i, %while.end260.thread.i ], [ %expon.11.lcssa.i, %while.end260.i ]
  %conv288.i = trunc i16 %digit.0572.i to i8
  %add290.i = add i8 %conv288.i, 48
  store i8 %add290.i, i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 1), align 1, !tbaa !6
  store i8 46, i8* getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 2), align 2, !tbaa !6
  br label %if.end294.i

if.end294.i:                                      ; preds = %if.else287.i, %if.then277.i
  %expon.12.i = phi i32 [ %add286.i, %if.then277.i ], [ %expon.11570.i, %if.else287.i ]
  %ndigs.addr.3.i = phi i32 [ 19, %if.then277.i ], [ 20, %if.else287.i ]
  %s.1.i = phi i8* [ getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 4), %if.then277.i ], [ getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 3), %if.else287.i ]
  %arraydecay301.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 0
  %incdec.ptr1.i52.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 1
  %incdec.ptr1.1.i54.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 2
  %incdec.ptr1.2.i56.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 3
  %incdec.ptr1.3.i58.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 4
  %incdec.ptr1.4.i60.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 5
  %incdec.ptr1.5.i.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 6
  %incdec.ptr1.6.i.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 7
  %add.ptr.i31.i = getelementptr inbounds [9 x i16]* %u.i, i64 0, i64 8
  %282 = bitcast i16* %incdec.ptr1.3.i.i to i64*
  %283 = bitcast [9 x i16]* %y.i to i64*
  br label %for.body298.i

for.body298.i:                                    ; preds = %for.body298.i, %if.end294.i
  %s.2580.i = phi i8* [ %s.1.i, %if.end294.i ], [ %incdec.ptr312.i, %for.body298.i ]
  %k.2579.i = phi i32 [ 0, %if.end294.i ], [ %inc314.i, %for.body298.i ]
  %284 = load i16* %scevgep.i267.i, align 16, !tbaa !1
  %.lobit.i63.i = lshr i16 %284, 15
  %shl.i64.i = shl i16 %284, 1
  store i16 %shl.i64.i, i16* %scevgep.i267.i, align 16, !tbaa !1
  %285 = load i16* %incdec.ptr1.6.i266.i, align 2, !tbaa !1
  %.lobit.1.i66.i = lshr i16 %285, 15
  %shl.1.i67.i = shl i16 %285, 1
  %286 = or i16 %shl.1.i67.i, %.lobit.i63.i
  store i16 %286, i16* %incdec.ptr1.6.i266.i, align 2, !tbaa !1
  %287 = bitcast i16* %incdec.ptr1.5.i264.i to i32*
  %288 = load i32* %287, align 4
  %289 = trunc i32 %288 to i16
  %.lobit.2.i69.i = lshr i16 %289, 15
  %shl.2.i70.i = shl i16 %289, 1
  %290 = or i16 %shl.2.i70.i, %.lobit.1.i66.i
  store i16 %290, i16* %incdec.ptr1.5.i264.i, align 4, !tbaa !1
  %291 = load i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %.lobit.3.i72.i = lshr i16 %291, 15
  %shl.3.i73.i = shl i16 %291, 1
  %292 = or i16 %shl.3.i73.i, %.lobit.2.i69.i
  store i16 %292, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %293 = load i64* %282, align 8
  %294 = trunc i64 %293 to i32
  %295 = trunc i64 %293 to i16
  %.lobit.4.i75.i = lshr i16 %295, 15
  %shl.4.i76.i = shl i16 %295, 1
  %296 = or i16 %shl.4.i76.i, %.lobit.3.i72.i
  store i16 %296, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %297 = load i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %.lobit.5.i78.i = lshr i16 %297, 15
  %shl.5.i79.i = shl i16 %297, 1
  %298 = or i16 %shl.5.i79.i, %.lobit.4.i75.i
  store i16 %298, i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %299 = load i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %shl.6.i81.i = shl i16 %299, 1
  %300 = or i16 %shl.6.i81.i, %.lobit.5.i78.i
  store i16 %300, i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %301 = load i64* %283, align 16
  %302 = trunc i64 %301 to i32
  %303 = trunc i64 %301 to i16
  store i16 %303, i16* %arraydecay301.i, align 16, !tbaa !1
  %304 = lshr i32 %302, 16
  %305 = trunc i32 %304 to i16
  store i16 %305, i16* %incdec.ptr1.i52.i, align 2, !tbaa !1
  %306 = lshr i64 %301, 32
  %307 = lshr i64 %301, 48
  %308 = lshr i32 %294, 16
  %309 = lshr i64 %293, 32
  %310 = lshr i64 %293, 48
  %.lobit.1.i35640.i = lshr i64 %293, 63
  %.lobit.2.i38642.i = lshr i64 %293, 47
  %.lobit.2.i38642.tr.i = trunc i64 %.lobit.2.i38642.i to i16
  %.lobit.2.i38.i = and i16 %.lobit.2.i38642.tr.i, 1
  %shl.2.i39643.i = shl nuw nsw i64 %309, 1
  %311 = or i64 %shl.2.i39643.i, %.lobit.1.i35640.i
  %312 = trunc i64 %311 to i16
  %.lobit.3.i41644.i = lshr i32 %294, 31
  %.lobit.3.i41.i = trunc i32 %.lobit.3.i41644.i to i16
  %shl.3.i42645.i = shl nuw nsw i32 %308, 1
  %shl.3.i42.i = trunc i32 %shl.3.i42645.i to i16
  %313 = or i16 %shl.3.i42.i, %.lobit.2.i38.i
  %314 = lshr i16 %295, 14
  %.lobit.4.i44.i = and i16 %314, 1
  %shl.4.i45.i = shl i16 %296, 1
  %315 = or i16 %shl.4.i45.i, %.lobit.3.i41.i
  %.lobit.5.i47646.i = lshr i64 %301, 63
  %shl.5.i48647.i = shl nuw nsw i64 %307, 1
  %shl.5.i48.i = trunc i64 %shl.5.i48647.i to i16
  %316 = or i16 %shl.5.i48.i, %.lobit.4.i44.i
  %shl.6.i50648.i = shl nuw nsw i64 %306, 1
  %317 = or i64 %shl.6.i50648.i, %.lobit.5.i47646.i
  %318 = trunc i64 %317 to i16
  store i16 0, i16* %add.ptr.i31.i, align 16, !tbaa !1
  %.lobit.1.i649.i = lshr i64 %293, 62
  %.lobit.1.i649.tr.i = trunc i64 %.lobit.1.i649.i to i16
  %.lobit.1.i.i = and i16 %.lobit.1.i649.tr.i, 1
  %shl.1.i651.i = shl nuw nsw i64 %310, 2
  %shl.1.i.i = trunc i64 %shl.1.i651.i to i16
  store i16 %shl.1.i.i, i16* %incdec.ptr1.6.i.i, align 2, !tbaa !1
  %.lobit.2.i.i = lshr i16 %312, 15
  %shl.2.i.i = shl i16 %312, 1
  %319 = or i16 %shl.2.i.i, %.lobit.1.i.i
  store i16 %319, i16* %incdec.ptr1.5.i.i, align 4, !tbaa !1
  %.lobit.3.i653.i = lshr i32 %294, 30
  %.lobit.3.i653.tr.i = trunc i32 %.lobit.3.i653.i to i16
  %.lobit.3.i.i = and i16 %.lobit.3.i653.tr.i, 1
  %shl.3.i.i = shl i16 %313, 1
  %320 = or i16 %shl.3.i.i, %.lobit.2.i.i
  store i16 %320, i16* %incdec.ptr1.4.i60.i, align 2, !tbaa !1
  %321 = lshr i16 %295, 13
  %.lobit.4.i.i = and i16 %321, 1
  %shl.4.i.i = shl i16 %315, 1
  %322 = or i16 %shl.4.i.i, %.lobit.3.i.i
  store i16 %322, i16* %incdec.ptr1.3.i58.i, align 8, !tbaa !1
  %.lobit.5.i655.i = lshr i64 %301, 62
  %.lobit.5.i655.tr.i = trunc i64 %.lobit.5.i655.i to i16
  %.lobit.5.i.i = and i16 %.lobit.5.i655.tr.i, 1
  %shl.5.i.i = shl i16 %316, 1
  %323 = or i16 %shl.5.i.i, %.lobit.4.i.i
  store i16 %323, i16* %incdec.ptr1.2.i56.i, align 2, !tbaa !1
  %shl.6.i.i = shl i16 %318, 1
  %324 = or i16 %shl.6.i.i, %.lobit.5.i.i
  store i16 %324, i16* %incdec.ptr1.1.i54.i, align 4, !tbaa !1
  %325 = trunc i64 %shl.1.i651.i to i32
  %conv.1.i.i = and i32 %325, 65532
  %326 = lshr i32 %288, 16
  %add3.1.i.i = add i32 %326, %conv.1.i.i
  %and.1.i.i = lshr i32 %add3.1.i.i, 16
  %and.lobit.1.i.i = and i32 %and.1.i.i, 1
  %conv4.1.i.i = trunc i32 %add3.1.i.i to i16
  store i16 %conv4.1.i.i, i16* %incdec.ptr1.6.i266.i, align 2, !tbaa !1
  %conv.2.i.i = zext i16 %319 to i32
  %conv2.2.i.i = zext i16 %290 to i32
  %add.2.i.i = add i32 %conv.2.i.i, %conv2.2.i.i
  %add3.2.i.i = add i32 %add.2.i.i, %and.lobit.1.i.i
  %and.2.i.i = lshr i32 %add3.2.i.i, 16
  %and.lobit.2.i.i = and i32 %and.2.i.i, 1
  %conv4.2.i.i = trunc i32 %add3.2.i.i to i16
  store i16 %conv4.2.i.i, i16* %incdec.ptr1.5.i264.i, align 4, !tbaa !1
  %conv.3.i.i = zext i16 %320 to i32
  %327 = load i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %conv2.3.i.i = zext i16 %327 to i32
  %add.3.i.i = add i32 %conv.3.i.i, %conv2.3.i.i
  %add3.3.i.i = add i32 %add.3.i.i, %and.lobit.2.i.i
  %and.3.i.i = lshr i32 %add3.3.i.i, 16
  %and.lobit.3.i.i = and i32 %and.3.i.i, 1
  %conv4.3.i.i = trunc i32 %add3.3.i.i to i16
  store i16 %conv4.3.i.i, i16* %incdec.ptr1.4.i.i, align 2, !tbaa !1
  %conv.4.i.i = zext i16 %322 to i32
  %328 = load i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %conv2.4.i.i = zext i16 %328 to i32
  %add.4.i.i = add i32 %conv2.4.i.i, %conv.4.i.i
  %add3.4.i.i = add i32 %add.4.i.i, %and.lobit.3.i.i
  %and.4.i.i = lshr i32 %add3.4.i.i, 16
  %and.lobit.4.i.i = and i32 %and.4.i.i, 1
  %conv4.4.i.i = trunc i32 %add3.4.i.i to i16
  store i16 %conv4.4.i.i, i16* %incdec.ptr1.3.i.i, align 8, !tbaa !1
  %conv.5.i.i = zext i16 %323 to i32
  %329 = load i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %conv2.5.i.i = zext i16 %329 to i32
  %add.5.i.i = add i32 %conv.5.i.i, %conv2.5.i.i
  %add3.5.i.i = add i32 %add.5.i.i, %and.lobit.4.i.i
  %and.5.i.i = lshr i32 %add3.5.i.i, 16
  %and.lobit.5.i.i = and i32 %and.5.i.i, 1
  %conv4.5.i.i = trunc i32 %add3.5.i.i to i16
  store i16 %conv4.5.i.i, i16* %incdec.ptr1.2.i.i, align 2, !tbaa !1
  %conv.6.i.i = zext i16 %324 to i32
  %330 = load i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  %conv2.6.i.i = zext i16 %330 to i32
  %add.6.i.i = add i32 %conv2.6.i.i, %conv.6.i.i
  %add3.6.i.i = add i32 %add.6.i.i, %and.lobit.5.i.i
  %conv4.6.i.i = trunc i32 %add3.6.i.i to i16
  store i16 %conv4.6.i.i, i16* %incdec.ptr1.1.i.i, align 4, !tbaa !1
  call fastcc void @eiremain(i16* %arraydecay9.i, i16* %arraydecay.i) #1
  %331 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  %conv308.i = trunc i16 %331 to i8
  %add310.i = add i8 %conv308.i, 48
  %incdec.ptr312.i = getelementptr inbounds i8* %s.2580.i, i64 1
  store i8 %add310.i, i8* %s.2580.i, align 1, !tbaa !6
  %inc314.i = add nsw i32 %k.2579.i, 1
  %cmp296.i = icmp slt i32 %k.2579.i, %ndigs.addr.3.i
  br i1 %cmp296.i, label %for.body298.i, label %for.end315.i

for.end315.i:                                     ; preds = %for.body298.i
  %332 = zext i32 %ndigs.addr.3.i to i64
  %333 = bitcast [9 x i16]* %y.i to i32*
  %scevgep.i = getelementptr i8* %s.1.i, i64 %332
  %334 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  %cmp318.i = icmp sgt i16 %334, 4
  br i1 %cmp318.i, label %if.then320.i, label %doexp.i

if.then320.i:                                     ; preds = %for.end315.i
  %cmp322.i = icmp eq i16 %334, 5
  br i1 %cmp322.i, label %if.then324.i, label %roun.preheader.i

if.then324.i:                                     ; preds = %if.then320.i
  %335 = load i32* %333, align 16
  %336 = load i64* %283, align 16
  %337 = trunc i64 %336 to i32
  %338 = trunc i64 %336 to i16
  %tobool.i.i = icmp eq i16 %338, 0
  %339 = lshr i32 %337, 16
  %340 = trunc i32 %339 to i16
  %or.i.i = or i16 %340, -32768
  %storemerge.i.i = select i1 %tobool.i.i, i16 %340, i16 %or.i.i
  store i16 %storemerge.i.i, i16* %incdec.ptr1.4.i16.i, align 2, !tbaa !1
  %.mask.i = and i32 %335, -65536
  %cmp.i11.i = icmp eq i32 %.mask.i, 2147418112
  br i1 %cmp.i11.i, label %for.body.i.i.i, label %if.end14.i.i

for.cond.i.i.i:                                   ; preds = %for.body.i.i.i
  %341 = trunc i64 %indvars.iv.next.i.i.i to i32
  %cmp2.i.i.i = icmp slt i32 %341, 9
  br i1 %cmp2.i.i.i, label %for.body.i.i.i, label %if.end13.i.i

for.body.i.i.i:                                   ; preds = %if.then324.i, %for.cond.i.i.i
  %indvars.iv.i.i.i = phi i64 [ %indvars.iv.next.i.i.i, %for.cond.i.i.i ], [ 3, %if.then324.i ]
  %arrayidx4.i.i.i = getelementptr inbounds [9 x i16]* %y.i, i64 0, i64 %indvars.iv.i.i.i
  %342 = load i16* %arrayidx4.i.i.i, align 2, !tbaa !1
  %cmp6.i.i.i = icmp eq i16 %342, 0
  %indvars.iv.next.i.i.i = add nuw nsw i64 %indvars.iv.i.i.i, 1
  br i1 %cmp6.i.i.i, label %for.cond.i.i.i, label %if.then11.i.i

if.then11.i.i:                                    ; preds = %for.body.i.i.i
  %cmp.i32.i.i = icmp ne i16 %338, 0
  %conv1.i.i.i = zext i1 %cmp.i32.i.i to i16
  store i64 0, i64* %14, align 16
  store i16 -16384, i16* %incdec.ptr1.3.i15.i, align 8, !tbaa !1
  %shl.i.i.i = shl nuw i16 %conv1.i.i.i, 15
  %or.i31.i.i = or i16 %shl.i.i.i, 32767
  store i16 %or.i31.i.i, i16* %incdec.ptr1.4.i16.i, align 2, !tbaa !1
  br label %emovo.exit.i

if.end13.i.i:                                     ; preds = %for.cond.i.i.i
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 10, i32 16, i1 false) #1
  %or.i.i.i = or i16 %storemerge.i.i, 32767
  store i16 %or.i.i.i, i16* %incdec.ptr1.4.i16.i, align 2, !tbaa !1
  br label %emovo.exit.i

if.end14.i.i:                                     ; preds = %if.then324.i
  %343 = lshr i64 %336, 48
  %344 = trunc i64 %343 to i16
  store i16 %344, i16* %incdec.ptr1.3.i15.i, align 8, !tbaa !1
  %345 = load i64* %282, align 8
  %346 = trunc i64 %345 to i32
  %347 = trunc i64 %345 to i16
  store i16 %347, i16* %incdec.ptr1.2.i14.i, align 2, !tbaa !1
  %348 = lshr i32 %346, 16
  %349 = trunc i32 %348 to i16
  store i16 %349, i16* %incdec.ptr1.1.i13.i, align 4, !tbaa !1
  %350 = lshr i64 %345, 32
  %351 = trunc i64 %350 to i16
  store i16 %351, i16* %incdec.ptr1.i12.i, align 2, !tbaa !1
  %352 = lshr i64 %345, 48
  %353 = trunc i64 %352 to i16
  store i16 %353, i16* %arraydecay9.i, align 16, !tbaa !1
  br label %emovo.exit.i

emovo.exit.i:                                     ; preds = %if.end14.i.i, %if.end13.i.i, %if.then11.i.i
  %call328.i = call fastcc i32 @ecmp(i16* %arraydecay9.i, i16* getelementptr inbounds ([6 x i16]* @ezero, i64 0, i64 0)) #1
  %cmp329.i = icmp eq i32 %call328.i, 0
  br i1 %cmp329.i, label %if.end332.i, label %roun.preheader.i

if.end332.i:                                      ; preds = %emovo.exit.i
  %scevgep.sum657.i = add i64 %332, -1
  %add.ptr333.i = getelementptr inbounds i8* %s.1.i, i64 %scevgep.sum657.i
  %354 = load i8* %add.ptr333.i, align 1, !tbaa !6
  %and335.i = and i8 %354, 1
  %cmp336.i = icmp eq i8 %and335.i, 0
  br i1 %cmp336.i, label %doexp.i, label %roun.preheader.i

roun.preheader.i:                                 ; preds = %if.end332.i, %emovo.exit.i, %if.then320.i
  %scevgep.sum.i = add i64 %332, -1
  %incdec.ptr341573.i = getelementptr inbounds i8* %s.1.i, i64 %scevgep.sum.i
  %355 = load i8* %incdec.ptr341573.i, align 1, !tbaa !6
  %conv3422574.i = zext i8 %355 to i32
  %and343575.i = and i32 %conv3422574.i, 127
  %cmp344576.i = icmp eq i32 %and343575.i, 46
  br i1 %cmp344576.i, label %if.then346.i, label %if.end356.i

if.then346.i:                                     ; preds = %if.then361.i, %roun.preheader.i
  %s.3.lcssa.i = phi i8* [ %scevgep.i, %roun.preheader.i ], [ %incdec.ptr341577.i, %if.then361.i ]
  %incdec.ptr347.i = getelementptr inbounds i8* %s.3.lcssa.i, i64 -2
  %356 = load i8* %incdec.ptr347.i, align 1, !tbaa !6
  %add349.i = add i8 %356, 1
  store i8 %add349.i, i8* %incdec.ptr347.i, align 1, !tbaa !6
  %cmp351.i = icmp sgt i8 %356, 56
  br i1 %cmp351.i, label %if.then353.i, label %doexp.i

if.then353.i:                                     ; preds = %if.then346.i
  %add354.i = add nsw i32 %expon.12.i, 1
  store i8 49, i8* %incdec.ptr347.i, align 1, !tbaa !6
  br label %doexp.i

if.end356.i:                                      ; preds = %roun.preheader.i, %if.then361.i
  %and343578.i = phi i32 [ %and343.i, %if.then361.i ], [ %and343575.i, %roun.preheader.i ]
  %incdec.ptr341577.i = phi i8* [ %incdec.ptr341.i, %if.then361.i ], [ %incdec.ptr341573.i, %roun.preheader.i ]
  %add357.i = add nsw i32 %and343578.i, 1
  %conv358.i = trunc i32 %add357.i to i8
  store i8 %conv358.i, i8* %incdec.ptr341577.i, align 1, !tbaa !6
  %cmp359.i = icmp ugt i32 %add357.i, 57
  br i1 %cmp359.i, label %if.then361.i, label %doexp.i

if.then361.i:                                     ; preds = %if.end356.i
  store i8 48, i8* %incdec.ptr341577.i, align 1, !tbaa !6
  %incdec.ptr341.i = getelementptr inbounds i8* %incdec.ptr341577.i, i64 -1
  %357 = load i8* %incdec.ptr341.i, align 1, !tbaa !6
  %conv3422.i = zext i8 %357 to i32
  %and343.i = and i32 %conv3422.i, 127
  %cmp344.i = icmp eq i32 %and343.i, 46
  br i1 %cmp344.i, label %if.then346.i, label %if.end356.i

doexp.i:                                          ; preds = %if.end356.i, %if.then353.i, %if.then346.i, %if.end332.i, %for.end315.i
  %expon.13.i = phi i32 [ %add354.i, %if.then353.i ], [ %expon.12.i, %if.then346.i ], [ %expon.12.i, %if.end332.i ], [ %expon.12.i, %for.end315.i ], [ %expon.12.i, %if.end356.i ]
  %call364.i = call i32 (i8*, i8*, ...)* @sprintf(i8* %scevgep.i, i8* getelementptr inbounds ([4 x i8]* @.str32, i64 0, i64 0), i32 %expon.13.i) #1
  br label %bxit.i

bxit.i:                                           ; preds = %doexp.i, %if.then44.i, %if.else31.i, %if.then29.i, %if.then.i
  store i32 %6, i32* @rndprc, align 4, !tbaa !9
  br label %while.cond365.i

while.cond365.i:                                  ; preds = %while.cond365.i, %bxit.i
  %ss.0.i = phi i8* [ getelementptr inbounds ([80 x i8]* @wstring, i64 0, i64 0), %bxit.i ], [ %incdec.ptr370.i, %while.cond365.i ]
  %358 = load i8* %ss.0.i, align 1, !tbaa !6
  %cmp367.i = icmp eq i8 %358, 32
  %incdec.ptr370.i = getelementptr inbounds i8* %ss.0.i, i64 1
  br i1 %cmp367.i, label %while.cond365.i, label %while.cond372.i.preheader

while.cond372.i.preheader:                        ; preds = %while.cond365.i
  store i8 %358, i8* %s, align 1, !tbaa !6
  %cmp376.i20 = icmp eq i8 %358, 0
  br i1 %cmp376.i20, label %etoasc.exit, label %while.cond372.while.cond372_crit_edge.i

while.cond372.while.cond372_crit_edge.i:          ; preds = %while.cond372.i.preheader, %while.cond372.while.cond372_crit_edge.i
  %ss.0.i.pn = phi i8* [ %incdec.ptr373.i22, %while.cond372.while.cond372_crit_edge.i ], [ %ss.0.i, %while.cond372.i.preheader ]
  %s.4.i21 = phi i8* [ %incdec.ptr374.i, %while.cond372.while.cond372_crit_edge.i ], [ %s, %while.cond372.i.preheader ]
  %incdec.ptr373.i22 = getelementptr inbounds i8* %ss.0.i.pn, i64 1
  %incdec.ptr374.i = getelementptr inbounds i8* %s.4.i21, i64 1
  %.pre639.i = load i8* %incdec.ptr373.i22, align 1, !tbaa !6
  store i8 %.pre639.i, i8* %incdec.ptr374.i, align 1, !tbaa !6
  %cmp376.i = icmp eq i8 %.pre639.i, 0
  br i1 %cmp376.i, label %etoasc.exit, label %while.cond372.while.cond372_crit_edge.i

etoasc.exit:                                      ; preds = %while.cond372.while.cond372_crit_edge.i, %while.cond372.i.preheader
  call void @llvm.lifetime.end(i64 18, i8* %2) #1
  call void @llvm.lifetime.end(i64 18, i8* %3) #1
  call void @llvm.lifetime.end(i64 18, i8* %4) #1
  call void @llvm.lifetime.end(i64 18, i8* %5) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @etartdouble(%struct.realvaluetype* byval nocapture readonly align 8 %r, i64* nocapture %l) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  call fastcc void @etoe64(i16* %arraydecay, i16* %arraydecay)
  %arrayidx.i = getelementptr inbounds i64* %l, i64 3
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !13
  %arrayidx2.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %2 = load i16* %arrayidx2.i, align 2, !tbaa !1
  %conv.i = zext i16 %2 to i64
  %arrayidx3.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 4
  %3 = load i16* %arrayidx3.i, align 2, !tbaa !1
  %conv4.i = zext i16 %3 to i64
  %shl.i = shl nuw nsw i64 %conv.i, 16
  %or.i = or i64 %conv4.i, %shl.i
  %arrayidx6.i = getelementptr inbounds i64* %l, i64 2
  store i64 %or.i, i64* %arrayidx6.i, align 8, !tbaa !13
  %arrayidx8.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 3
  %4 = load i16* %arrayidx8.i, align 2, !tbaa !1
  %arrayidx11.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 2
  %5 = load i16* %arrayidx11.i, align 2, !tbaa !1
  %arrayidx18.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 1
  %6 = load i16* %arrayidx18.i, align 2, !tbaa !1
  %7 = insertelement <2 x i16> undef, i16 %6, i32 0
  %8 = insertelement <2 x i16> %7, i16 %4, i32 1
  %9 = zext <2 x i16> %8 to <2 x i64>
  %10 = load i16* %arraydecay, align 2, !tbaa !1
  %11 = insertelement <2 x i16> undef, i16 %10, i32 0
  %12 = insertelement <2 x i16> %11, i16 %5, i32 1
  %13 = zext <2 x i16> %12 to <2 x i64>
  %14 = shl <2 x i64> %9, <i64 16, i64 16>
  %15 = or <2 x i64> %13, %14
  %16 = bitcast i64* %l to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !13
  ret void
}

; Function Attrs: nounwind uwtable
define void @etarldouble(%struct.realvaluetype* byval nocapture readonly align 8 %r, i64* nocapture %l) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  call fastcc void @etoe64(i16* %arraydecay, i16* %arraydecay)
  %arrayidx2.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 5
  %2 = load i16* %arrayidx2.i, align 2, !tbaa !1
  %conv.i = zext i16 %2 to i64
  %arrayidx3.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 4
  %3 = load i16* %arrayidx3.i, align 2, !tbaa !1
  %conv4.i = zext i16 %3 to i64
  %shl.i = shl nuw nsw i64 %conv.i, 16
  %or.i = or i64 %conv4.i, %shl.i
  %arrayidx6.i = getelementptr inbounds i64* %l, i64 2
  store i64 %or.i, i64* %arrayidx6.i, align 8, !tbaa !13
  %arrayidx8.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 3
  %4 = load i16* %arrayidx8.i, align 2, !tbaa !1
  %arrayidx11.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 2
  %5 = load i16* %arrayidx11.i, align 2, !tbaa !1
  %arrayidx18.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 1
  %6 = load i16* %arrayidx18.i, align 2, !tbaa !1
  %7 = insertelement <2 x i16> undef, i16 %6, i32 0
  %8 = insertelement <2 x i16> %7, i16 %4, i32 1
  %9 = zext <2 x i16> %8 to <2 x i64>
  %10 = load i16* %arraydecay, align 2, !tbaa !1
  %11 = insertelement <2 x i16> undef, i16 %10, i32 0
  %12 = insertelement <2 x i16> %11, i16 %5, i32 1
  %13 = zext <2 x i16> %12 to <2 x i64>
  %14 = shl <2 x i64> %9, <i64 16, i64 16>
  %15 = or <2 x i64> %13, %14
  %16 = bitcast i64* %l to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !13
  ret void
}

; Function Attrs: nounwind uwtable
define void @etardouble(%struct.realvaluetype* byval nocapture readonly align 8 %r, i64* nocapture %l) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  call fastcc void @etoe53(i16* %arraydecay, i16* %arraydecay)
  %arrayidx8.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 3
  %2 = load i16* %arrayidx8.i, align 2, !tbaa !1
  %arrayidx11.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 2
  %3 = load i16* %arrayidx11.i, align 2, !tbaa !1
  %arrayidx18.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 1
  %4 = load i16* %arrayidx18.i, align 2, !tbaa !1
  %5 = insertelement <2 x i16> undef, i16 %4, i32 0
  %6 = insertelement <2 x i16> %5, i16 %2, i32 1
  %7 = zext <2 x i16> %6 to <2 x i64>
  %8 = load i16* %arraydecay, align 2, !tbaa !1
  %9 = insertelement <2 x i16> undef, i16 %8, i32 0
  %10 = insertelement <2 x i16> %9, i16 %3, i32 1
  %11 = zext <2 x i16> %10 to <2 x i64>
  %12 = shl <2 x i64> %7, <i64 16, i64 16>
  %13 = or <2 x i64> %11, %12
  %14 = bitcast i64* %l to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 8, !tbaa !13
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @etarsingle(%struct.realvaluetype* byval nocapture readonly align 8 %r) #0 {
entry:
  %e = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %e to i8*
  %1 = bitcast %struct.realvaluetype* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %e, i64 0, i64 0
  call fastcc void @etoe24(i16* %arraydecay, i16* %arraydecay)
  %arrayidx18.i = getelementptr inbounds [6 x i16]* %e, i64 0, i64 1
  %2 = load i16* %arrayidx18.i, align 2, !tbaa !1
  %conv19.i = zext i16 %2 to i64
  %3 = load i16* %arraydecay, align 2, !tbaa !1
  %conv22.i = zext i16 %3 to i64
  %shl24.i = shl nuw nsw i64 %conv19.i, 16
  %or25.i = or i64 %conv22.i, %shl24.i
  ret i64 %or25.i
}

; Function Attrs: nounwind uwtable
define i32 @ereal_cmp(%struct.realvaluetype* byval nocapture readonly align 8 %x, %struct.realvaluetype* byval nocapture readonly align 8 %y) #0 {
entry:
  %ex = alloca [6 x i16], align 2
  %ey = alloca [6 x i16], align 2
  %0 = bitcast [6 x i16]* %ex to i8*
  %1 = bitcast %struct.realvaluetype* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 2, i1 false)
  %2 = bitcast [6 x i16]* %ey to i8*
  %3 = bitcast %struct.realvaluetype* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 12, i32 2, i1 false)
  %arraydecay = getelementptr inbounds [6 x i16]* %ex, i64 0, i64 0
  %arraydecay1 = getelementptr inbounds [6 x i16]* %ey, i64 0, i64 0
  %call = call fastcc i32 @ecmp(i16* %arraydecay, i16* %arraydecay1)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define void @ereal_unto_float(%struct.realvaluetype* noalias nocapture sret %agg.result, i64 %f) #0 {
entry:
  %r.sroa.0 = alloca [3 x i64], align 8
  %conv = trunc i64 %f to i16
  %shr10 = lshr i64 %f, 16
  %conv1 = trunc i64 %shr10 to i16
  %r.sroa.01112 = bitcast [3 x i64]* %r.sroa.0 to i16*
  call fastcc void @e24toe(i16 %conv, i16 %conv1, i16* %r.sroa.01112)
  %r.sroa.0.0..sroa_cast6 = bitcast [3 x i64]* %r.sroa.0 to i8*
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast6, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast, i8* %r.sroa.0.0..sroa_cast6, i64 24, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_unto_double(%struct.realvaluetype* noalias nocapture sret %agg.result, i64* nocapture readonly %d) #0 {
entry:
  %r.sroa.0 = alloca [3 x i64], align 8
  %s = alloca [4 x i16], align 2
  %0 = load i64* %d, align 8, !tbaa !13
  %conv = trunc i64 %0 to i16
  %arrayidx1 = getelementptr inbounds [4 x i16]* %s, i64 0, i64 0
  store i16 %conv, i16* %arrayidx1, align 2, !tbaa !1
  %shr21 = lshr i64 %0, 16
  %conv3 = trunc i64 %shr21 to i16
  %arrayidx4 = getelementptr inbounds [4 x i16]* %s, i64 0, i64 1
  store i16 %conv3, i16* %arrayidx4, align 2, !tbaa !1
  %arrayidx5 = getelementptr inbounds i64* %d, i64 1
  %1 = load i64* %arrayidx5, align 8, !tbaa !13
  %conv6 = trunc i64 %1 to i16
  %arrayidx7 = getelementptr inbounds [4 x i16]* %s, i64 0, i64 2
  store i16 %conv6, i16* %arrayidx7, align 2, !tbaa !1
  %shr922 = lshr i64 %1, 16
  %conv10 = trunc i64 %shr922 to i16
  %arrayidx11 = getelementptr inbounds [4 x i16]* %s, i64 0, i64 3
  store i16 %conv10, i16* %arrayidx11, align 2, !tbaa !1
  %r.sroa.02324 = bitcast [3 x i64]* %r.sroa.0 to i16*
  call fastcc void @e53toe(i16* %arrayidx1, i16* %r.sroa.02324)
  %r.sroa.0.0..sroa_cast15 = bitcast [3 x i64]* %r.sroa.0 to i8*
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast15, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast, i8* %r.sroa.0.0..sroa_cast15, i64 24, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_from_float(%struct.realvaluetype* noalias nocapture sret %agg.result, i64 %f) #0 {
entry:
  %r.sroa.0 = alloca [3 x i64], align 8
  %conv = trunc i64 %f to i16
  %shr10 = lshr i64 %f, 16
  %conv1 = trunc i64 %shr10 to i16
  %r.sroa.01112 = bitcast [3 x i64]* %r.sroa.0 to i16*
  call fastcc void @e24toe(i16 %conv, i16 %conv1, i16* %r.sroa.01112)
  %r.sroa.0.0..sroa_cast6 = bitcast [3 x i64]* %r.sroa.0 to i8*
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast6, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast, i8* %r.sroa.0.0..sroa_cast6, i64 24, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define void @ereal_from_double(%struct.realvaluetype* noalias nocapture sret %agg.result, i64* nocapture readonly %d) #0 {
entry:
  %r.sroa.0 = alloca [3 x i64], align 8
  %s = alloca [4 x i16], align 2
  %0 = load i64* %d, align 8, !tbaa !7
  %conv = trunc i64 %0 to i16
  %arrayidx1 = getelementptr inbounds [4 x i16]* %s, i64 0, i64 0
  store i16 %conv, i16* %arrayidx1, align 2, !tbaa !1
  %shr22 = lshr i64 %0, 16
  %conv3 = trunc i64 %shr22 to i16
  %arrayidx4 = getelementptr inbounds [4 x i16]* %s, i64 0, i64 1
  store i16 %conv3, i16* %arrayidx4, align 2, !tbaa !1
  %shr623 = lshr i64 %0, 32
  %conv7 = trunc i64 %shr623 to i16
  %arrayidx8 = getelementptr inbounds [4 x i16]* %s, i64 0, i64 2
  store i16 %conv7, i16* %arrayidx8, align 2, !tbaa !1
  %shr1024 = lshr i64 %0, 48
  %conv11 = trunc i64 %shr1024 to i16
  %arrayidx12 = getelementptr inbounds [4 x i16]* %s, i64 0, i64 3
  store i16 %conv11, i16* %arrayidx12, align 2, !tbaa !1
  %r.sroa.02526 = bitcast [3 x i64]* %r.sroa.0 to i16*
  call fastcc void @e53toe(i16* %arrayidx1, i16* %r.sroa.02526)
  %r.sroa.0.0..sroa_cast16 = bitcast [3 x i64]* %r.sroa.0 to i8*
  %r.sroa.0.12.add.ptr.sroa_raw_idx = getelementptr inbounds i8* %r.sroa.0.0..sroa_cast16, i64 12
  call void @llvm.memset.p0i8.i64(i8* %r.sroa.0.12.add.ptr.sroa_raw_idx, i8 0, i64 12, i32 4, i1 false)
  %r.sroa.0.0..sroa_cast = bitcast %struct.realvaluetype* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r.sroa.0.0..sroa_cast, i8* %r.sroa.0.0..sroa_cast16, i64 24, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @significand_size(i32 %mode) #0 {
entry:
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %0 = load i16* %arrayidx, align 2, !tbaa !1
  %conv = zext i16 %0 to i32
  switch i32 %conv, label %sw.default [
    i32 32, label %return
    i32 64, label %sw.bb1
    i32 96, label %sw.bb2
    i32 128, label %sw.bb3
  ]

sw.bb1:                                           ; preds = %entry
  br label %return

sw.bb2:                                           ; preds = %entry
  br label %return

sw.bb3:                                           ; preds = %entry
  br label %return

sw.default:                                       ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0), i32 6993, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.significand_size, i64 0, i64 0)) #7
  unreachable

return:                                           ; preds = %entry, %sw.bb3, %sw.bb2, %sw.bb1
  %retval.0 = phi i32 [ 64, %sw.bb3 ], [ 64, %sw.bb2 ], [ 53, %sw.bb1 ], [ 24, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @emdnorm(i16* %s, i32 %lost, i32 %subflg, i32 %exp, i32 %rcntrl) #0 {
entry:
  %call = tail call fastcc i32 @enormlz(i16* %s)
  %sub = sub nsw i32 %exp, %call
  %cmp = icmp sgt i32 %call, 80
  %cmp1 = icmp slt i32 %sub, 32767
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %scevgep.i = getelementptr i16* %s, i64 1
  %scevgep7.i = bitcast i16* %scevgep.i to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %scevgep7.i, i8 0, i64 16, i32 2, i1 false) #1
  br label %if.end145

if.end:                                           ; preds = %entry
  %cmp2 = icmp slt i32 %sub, 0
  br i1 %cmp2, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %sub, -81
  br i1 %cmp5, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then4
  %call8 = tail call fastcc i32 @eshift(i16* %s, i32 %sub)
  %tobool = icmp eq i32 %call8, 0
  %lost. = select i1 %tobool, i32 %lost, i32 1
  br label %if.end12

if.else:                                          ; preds = %if.then4
  %scevgep.i202 = getelementptr i16* %s, i64 1
  %scevgep7.i203 = bitcast i16* %scevgep.i202 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %scevgep7.i203, i8 0, i64 16, i32 2, i1 false) #1
  br label %if.end145

if.end12:                                         ; preds = %if.then7, %if.end
  %lost.addr.0 = phi i32 [ %lost, %if.end ], [ %lost., %if.then7 ]
  %cmp13 = icmp eq i32 %rcntrl, 0
  br i1 %cmp13, label %mdfin, label %if.end16

if.end16:                                         ; preds = %if.end12
  %0 = load i32* @rndprc, align 4, !tbaa !9
  %1 = load i32* @rlast, align 4, !tbaa !9
  %cmp17 = icmp eq i32 %0, %1
  br i1 %cmp17, label %if.end29, label %if.then19

if.then19:                                        ; preds = %if.end16
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([9 x i16]* @rbit to i8*), i8 0, i64 18, i32 16, i1 false) #1
  switch i32 %0, label %sw.bb [
    i32 24, label %sw.bb28
    i32 113, label %sw.bb21
    i32 64, label %sw.bb22
    i32 56, label %sw.bb24
    i32 53, label %sw.bb25
    i32 32, label %sw.bb26
  ]

sw.bb:                                            ; preds = %if.then19
  store i32 8, i32* @rw, align 4, !tbaa !9
  store i16 -1, i16* @rmsk, align 2, !tbaa !1
  store i16 -32768, i16* @rmbit, align 2, !tbaa !1
  store i32 7, i32* @re, align 4, !tbaa !9
  store i16 1, i16* @rebit, align 2, !tbaa !1
  br label %sw.epilog

sw.bb21:                                          ; preds = %if.then19
  store i32 10, i32* @rw, align 4, !tbaa !9
  store i16 32767, i16* @rmsk, align 2, !tbaa !1
  store i16 16384, i16* @rmbit, align 2, !tbaa !1
  store i16 -32768, i16* @rebit, align 2, !tbaa !1
  store i32 10, i32* @re, align 4, !tbaa !9
  br label %sw.epilog

sw.bb22:                                          ; preds = %if.then19
  store i32 7, i32* @rw, align 4, !tbaa !9
  store i16 -1, i16* @rmsk, align 2, !tbaa !1
  store i16 -32768, i16* @rmbit, align 2, !tbaa !1
  store i32 6, i32* @re, align 4, !tbaa !9
  store i16 1, i16* @rebit, align 2, !tbaa !1
  br label %sw.epilog

sw.bb24:                                          ; preds = %if.then19
  store i32 6, i32* @rw, align 4, !tbaa !9
  store i16 255, i16* @rmsk, align 2, !tbaa !1
  store i16 128, i16* @rmbit, align 2, !tbaa !1
  store i16 256, i16* @rebit, align 2, !tbaa !1
  store i32 6, i32* @re, align 4, !tbaa !9
  br label %sw.epilog

sw.bb25:                                          ; preds = %if.then19
  store i32 6, i32* @rw, align 4, !tbaa !9
  store i16 2047, i16* @rmsk, align 2, !tbaa !1
  store i16 1024, i16* @rmbit, align 2, !tbaa !1
  store i16 2048, i16* @rebit, align 2, !tbaa !1
  store i32 6, i32* @re, align 4, !tbaa !9
  br label %sw.epilog

sw.bb26:                                          ; preds = %if.then19
  store i32 5, i32* @rw, align 4, !tbaa !9
  store i16 -1, i16* @rmsk, align 2, !tbaa !1
  store i16 -32768, i16* @rmbit, align 2, !tbaa !1
  store i16 1, i16* @rebit, align 2, !tbaa !1
  store i32 4, i32* @re, align 4, !tbaa !9
  br label %sw.epilog

sw.bb28:                                          ; preds = %if.then19
  store i32 4, i32* @rw, align 4, !tbaa !9
  store i16 255, i16* @rmsk, align 2, !tbaa !1
  store i16 128, i16* @rmbit, align 2, !tbaa !1
  store i16 256, i16* @rebit, align 2, !tbaa !1
  store i32 4, i32* @re, align 4, !tbaa !9
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb28, %sw.bb26, %sw.bb25, %sw.bb24, %sw.bb22, %sw.bb21, %sw.bb
  %2 = phi i64 [ 4, %sw.bb28 ], [ 4, %sw.bb26 ], [ 6, %sw.bb25 ], [ 6, %sw.bb24 ], [ 6, %sw.bb22 ], [ 10, %sw.bb21 ], [ 7, %sw.bb ]
  %3 = phi i16 [ 256, %sw.bb28 ], [ 1, %sw.bb26 ], [ 2048, %sw.bb25 ], [ 256, %sw.bb24 ], [ 1, %sw.bb22 ], [ -32768, %sw.bb21 ], [ 1, %sw.bb ]
  %arrayidx = getelementptr inbounds [9 x i16]* @rbit, i64 0, i64 %2
  store i16 %3, i16* %arrayidx, align 2, !tbaa !1
  store i32 %0, i32* @rlast, align 4, !tbaa !9
  br label %if.end29

if.end29:                                         ; preds = %if.end16, %sw.epilog
  %cmp30 = icmp slt i32 %sub, 1
  %cmp33 = icmp ne i32 %0, 80
  %or.cond146 = and i1 %cmp30, %cmp33
  br i1 %or.cond146, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.end29
  %arrayidx41 = getelementptr inbounds i16* %s, i64 8
  %4 = load i16* %arrayidx41, align 2, !tbaa !1
  %conv42 = zext i16 %4 to i32
  %and = and i32 %conv42, 1
  %or = or i32 %and, %lost.addr.0
  %add.ptr.i204 = getelementptr inbounds i16* %s, i64 2
  %5 = load i16* %add.ptr.i204, align 2, !tbaa !1
  %shr22.i205 = lshr i16 %5, 1
  store i16 %shr22.i205, i16* %add.ptr.i204, align 2, !tbaa !1
  %incdec.ptr.i206 = getelementptr inbounds i16* %s, i64 3
  %6 = load i16* %incdec.ptr.i206, align 2, !tbaa !1
  %shr22.1.i207 = lshr i16 %6, 1
  %7 = shl i16 %5, 15
  %8 = or i16 %shr22.1.i207, %7
  store i16 %8, i16* %incdec.ptr.i206, align 2, !tbaa !1
  %incdec.ptr.1.i208 = getelementptr inbounds i16* %s, i64 4
  %9 = load i16* %incdec.ptr.1.i208, align 2, !tbaa !1
  %shr22.2.i209 = lshr i16 %9, 1
  %10 = shl i16 %6, 15
  %11 = or i16 %shr22.2.i209, %10
  store i16 %11, i16* %incdec.ptr.1.i208, align 2, !tbaa !1
  %incdec.ptr.2.i210 = getelementptr inbounds i16* %s, i64 5
  %12 = load i16* %incdec.ptr.2.i210, align 2, !tbaa !1
  %shr22.3.i211 = lshr i16 %12, 1
  %13 = shl i16 %9, 15
  %14 = or i16 %shr22.3.i211, %13
  store i16 %14, i16* %incdec.ptr.2.i210, align 2, !tbaa !1
  %incdec.ptr.3.i212 = getelementptr inbounds i16* %s, i64 6
  %15 = load i16* %incdec.ptr.3.i212, align 2, !tbaa !1
  %shr22.4.i213 = lshr i16 %15, 1
  %16 = shl i16 %12, 15
  %17 = or i16 %shr22.4.i213, %16
  store i16 %17, i16* %incdec.ptr.3.i212, align 2, !tbaa !1
  %incdec.ptr.4.i214 = getelementptr inbounds i16* %s, i64 7
  %18 = load i16* %incdec.ptr.4.i214, align 2, !tbaa !1
  %shr22.5.i215 = lshr i16 %18, 1
  %19 = shl i16 %15, 15
  %20 = or i16 %shr22.5.i215, %19
  store i16 %20, i16* %incdec.ptr.4.i214, align 2, !tbaa !1
  %shl.5.i216 = shl i16 %18, 15
  %shr22.6.i218 = lshr i16 %4, 1
  %21 = or i16 %shr22.6.i218, %shl.5.i216
  store i16 %21, i16* %arrayidx41, align 2, !tbaa !1
  br label %if.end43

if.end43:                                         ; preds = %if.then40, %if.end29
  %lost.addr.1 = phi i32 [ %or, %if.then40 ], [ %lost.addr.0, %if.end29 ]
  %22 = load i32* @rw, align 4, !tbaa !9
  %idxprom44 = sext i32 %22 to i64
  %arrayidx45 = getelementptr inbounds i16* %s, i64 %idxprom44
  %23 = load i16* %arrayidx45, align 2, !tbaa !1
  %24 = load i16* @rmsk, align 2, !tbaa !1
  %and48191 = and i16 %24, %23
  %cmp50 = icmp slt i32 %0, 80
  br i1 %cmp50, label %while.cond.preheader, label %if.end65

while.cond.preheader:                             ; preds = %if.end43
  %i.0220 = add i32 %22, 1
  %cmp53221 = icmp slt i32 %i.0220, 9
  br i1 %cmp53221, label %while.body.lr.ph, label %if.end65

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %25 = sext i32 %i.0220 to i64
  %26 = sub i32 7, %22
  %27 = zext i32 %26 to i64
  %28 = add i64 %27, 1
  %end.idx = add i64 %28, %25
  %n.vec = and i64 %28, -2
  %end.idx.rnd.down = add i64 %n.vec, %25
  %cmp.zero = icmp eq i64 %n.vec, 0
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end = add i32 %cast.crd, %i.0220
  %29 = insertelement <2 x i16> <i16 undef, i16 0>, i16 %and48191, i32 0
  br i1 %cmp.zero, label %middle.block, label %vector.body

vector.body:                                      ; preds = %while.body.lr.ph, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ %25, %while.body.lr.ph ]
  %vec.phi = phi <2 x i16> [ %34, %vector.body ], [ %29, %while.body.lr.ph ]
  %30 = getelementptr inbounds i16* %s, i64 %index
  %31 = bitcast i16* %30 to <2 x i16>*
  %wide.load = load <2 x i16>* %31, align 2
  %32 = icmp ne <2 x i16> %wide.load, zeroinitializer
  %33 = zext <2 x i1> %32 to <2 x i16>
  %34 = or <2 x i16> %33, %vec.phi
  %35 = bitcast i16* %30 to <2 x i16>*
  store <2 x i16> zeroinitializer, <2 x i16>* %35, align 2
  %index.next = add i64 %index, 2
  %36 = icmp eq i64 %index.next, %end.idx.rnd.down
  br i1 %36, label %middle.block, label %vector.body, !llvm.loop !15

middle.block:                                     ; preds = %vector.body, %while.body.lr.ph
  %resume.val = phi i64 [ %25, %while.body.lr.ph ], [ %end.idx.rnd.down, %vector.body ]
  %resume.val233 = phi i32 [ %i.0220, %while.body.lr.ph ], [ %ind.end, %vector.body ]
  %rdx.vec.exit.phi = phi <2 x i16> [ %29, %while.body.lr.ph ], [ %34, %vector.body ]
  %rdx.shuf = shufflevector <2 x i16> %rdx.vec.exit.phi, <2 x i16> undef, <2 x i32> <i32 1, i32 undef>
  %bin.rdx = or <2 x i16> %rdx.vec.exit.phi, %rdx.shuf
  %37 = extractelement <2 x i16> %bin.rdx, i32 0
  %cmp.n = icmp eq i64 %end.idx, %resume.val
  br i1 %cmp.n, label %while.cond.if.end65.loopexit_crit_edge, label %while.body

while.body:                                       ; preds = %middle.block, %while.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %while.body ], [ %resume.val, %middle.block ]
  %i.0223 = phi i32 [ %i.0, %while.body ], [ %resume.val233, %middle.block ]
  %r.0222 = phi i16 [ %r.0.or60, %while.body ], [ %37, %middle.block ]
  %arrayidx56 = getelementptr inbounds i16* %s, i64 %indvars.iv
  %38 = load i16* %arrayidx56, align 2, !tbaa !1
  %not.tobool57 = icmp ne i16 %38, 0
  %or60 = zext i1 %not.tobool57 to i16
  %r.0.or60 = or i16 %or60, %r.0222
  store i16 0, i16* %arrayidx56, align 2, !tbaa !1
  %i.0 = add nsw i32 %i.0223, 1
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i32 %i.0, 9
  br i1 %exitcond, label %while.cond.if.end65.loopexit_crit_edge, label %while.body, !llvm.loop !18

while.cond.if.end65.loopexit_crit_edge:           ; preds = %middle.block, %while.body
  %r.0.or60.lcssa = phi i16 [ %r.0.or60, %while.body ], [ %37, %middle.block ]
  %.pre228.pre = load i16* @rmsk, align 2, !tbaa !1
  %.pre229.pre = load i16* %arrayidx45, align 2, !tbaa !1
  br label %if.end65

if.end65:                                         ; preds = %while.cond.preheader, %while.cond.if.end65.loopexit_crit_edge, %if.end43
  %39 = phi i16 [ %23, %if.end43 ], [ %.pre229.pre, %while.cond.if.end65.loopexit_crit_edge ], [ %23, %while.cond.preheader ]
  %40 = phi i16 [ %24, %if.end43 ], [ %.pre228.pre, %while.cond.if.end65.loopexit_crit_edge ], [ %24, %while.cond.preheader ]
  %r.2 = phi i16 [ %and48191, %if.end43 ], [ %r.0.or60.lcssa, %while.cond.if.end65.loopexit_crit_edge ], [ %and48191, %while.cond.preheader ]
  %neg = xor i16 %40, -1
  %and70 = and i16 %39, %neg
  store i16 %and70, i16* %arrayidx45, align 2, !tbaa !1
  %41 = load i16* @rmbit, align 2, !tbaa !1
  %and74192 = and i16 %41, %r.2
  %cmp75 = icmp eq i16 %and74192, 0
  br i1 %cmp75, label %mddone, label %if.then77

if.then77:                                        ; preds = %if.end65
  %cmp80 = icmp eq i16 %r.2, %41
  br i1 %cmp80, label %if.then82, label %if.end101

if.then82:                                        ; preds = %if.then77
  %cmp83 = icmp eq i32 %lost.addr.1, 0
  br i1 %cmp83, label %if.then85, label %if.else95

if.then85:                                        ; preds = %if.then82
  %42 = load i32* @re, align 4, !tbaa !9
  %idxprom86 = sext i32 %42 to i64
  %arrayidx87 = getelementptr inbounds i16* %s, i64 %idxprom86
  %43 = load i16* %arrayidx87, align 2, !tbaa !1
  %44 = load i16* @rebit, align 2, !tbaa !1
  %and90193 = and i16 %44, %43
  %cmp91 = icmp eq i16 %and90193, 0
  br i1 %cmp91, label %mddone, label %if.end101

if.else95:                                        ; preds = %if.then82
  %cmp96 = icmp eq i32 %subflg, 0
  br i1 %cmp96, label %if.end101, label %mddone

if.end101:                                        ; preds = %if.else95, %if.then85, %if.then77
  tail call fastcc void @eaddm(i16* getelementptr inbounds ([9 x i16]* @rbit, i64 0, i64 0), i16* %s)
  br label %mddone

mddone:                                           ; preds = %if.else95, %if.end65, %if.end101, %if.then85
  %45 = load i32* @rndprc, align 4
  %cmp106 = icmp ne i32 %45, 80
  %or.cond148 = and i1 %cmp30, %cmp106
  br i1 %or.cond148, label %if.then114, label %mddone.if.end115_crit_edge

mddone.if.end115_crit_edge:                       ; preds = %mddone
  %arrayidx116.phi.trans.insert = getelementptr inbounds i16* %s, i64 2
  %.pre230 = load i16* %arrayidx116.phi.trans.insert, align 2, !tbaa !1
  br label %if.end115

if.then114:                                       ; preds = %mddone
  %add.ptr.i194 = getelementptr inbounds i16* %s, i64 8
  %46 = load i16* %add.ptr.i194, align 2, !tbaa !1
  %.lobit.i = lshr i16 %46, 15
  %shl.i = shl i16 %46, 1
  store i16 %shl.i, i16* %add.ptr.i194, align 2, !tbaa !1
  %incdec.ptr.i195 = getelementptr inbounds i16* %s, i64 7
  %47 = load i16* %incdec.ptr.i195, align 2, !tbaa !1
  %.lobit.1.i = lshr i16 %47, 15
  %shl.1.i = shl i16 %47, 1
  %48 = or i16 %shl.1.i, %.lobit.i
  store i16 %48, i16* %incdec.ptr.i195, align 2, !tbaa !1
  %incdec.ptr.1.i196 = getelementptr inbounds i16* %s, i64 6
  %49 = load i16* %incdec.ptr.1.i196, align 2, !tbaa !1
  %.lobit.2.i = lshr i16 %49, 15
  %shl.2.i = shl i16 %49, 1
  %50 = or i16 %shl.2.i, %.lobit.1.i
  store i16 %50, i16* %incdec.ptr.1.i196, align 2, !tbaa !1
  %incdec.ptr.2.i197 = getelementptr inbounds i16* %s, i64 5
  %51 = load i16* %incdec.ptr.2.i197, align 2, !tbaa !1
  %.lobit.3.i = lshr i16 %51, 15
  %shl.3.i = shl i16 %51, 1
  %52 = or i16 %shl.3.i, %.lobit.2.i
  store i16 %52, i16* %incdec.ptr.2.i197, align 2, !tbaa !1
  %incdec.ptr.3.i198 = getelementptr inbounds i16* %s, i64 4
  %53 = load i16* %incdec.ptr.3.i198, align 2, !tbaa !1
  %.lobit.4.i = lshr i16 %53, 15
  %shl.4.i = shl i16 %53, 1
  %54 = or i16 %shl.4.i, %.lobit.3.i
  store i16 %54, i16* %incdec.ptr.3.i198, align 2, !tbaa !1
  %incdec.ptr.4.i199 = getelementptr inbounds i16* %s, i64 3
  %55 = load i16* %incdec.ptr.4.i199, align 2, !tbaa !1
  %.lobit.5.i = lshr i16 %55, 15
  %shl.5.i200 = shl i16 %55, 1
  %56 = or i16 %shl.5.i200, %.lobit.4.i
  store i16 %56, i16* %incdec.ptr.4.i199, align 2, !tbaa !1
  %incdec.ptr.5.i201 = getelementptr inbounds i16* %s, i64 2
  %57 = load i16* %incdec.ptr.5.i201, align 2, !tbaa !1
  %shl.6.i = shl i16 %57, 1
  %58 = or i16 %shl.6.i, %.lobit.5.i
  store i16 %58, i16* %incdec.ptr.5.i201, align 2, !tbaa !1
  br label %if.end115

if.end115:                                        ; preds = %mddone.if.end115_crit_edge, %if.then114
  %59 = phi i16 [ %.pre230, %mddone.if.end115_crit_edge ], [ %58, %if.then114 ]
  %cmp118 = icmp eq i16 %59, 0
  br i1 %cmp118, label %mdfin, label %if.then120

if.then120:                                       ; preds = %if.end115
  %arrayidx116 = getelementptr inbounds i16* %s, i64 2
  %shr22.i = lshr i16 %59, 1
  store i16 %shr22.i, i16* %arrayidx116, align 2, !tbaa !1
  %incdec.ptr.i = getelementptr inbounds i16* %s, i64 3
  %60 = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %shr22.1.i = lshr i16 %60, 1
  %61 = shl i16 %59, 15
  %62 = or i16 %shr22.1.i, %61
  store i16 %62, i16* %incdec.ptr.i, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds i16* %s, i64 4
  %63 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %shr22.2.i = lshr i16 %63, 1
  %64 = shl i16 %60, 15
  %65 = or i16 %shr22.2.i, %64
  store i16 %65, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds i16* %s, i64 5
  %66 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %shr22.3.i = lshr i16 %66, 1
  %67 = shl i16 %63, 15
  %68 = or i16 %shr22.3.i, %67
  store i16 %68, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds i16* %s, i64 6
  %69 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %shr22.4.i = lshr i16 %69, 1
  %70 = shl i16 %66, 15
  %71 = or i16 %shr22.4.i, %70
  store i16 %71, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr.4.i = getelementptr inbounds i16* %s, i64 7
  %72 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %shr22.5.i = lshr i16 %72, 1
  %73 = shl i16 %69, 15
  %74 = or i16 %shr22.5.i, %73
  store i16 %74, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %shl.5.i = shl i16 %72, 15
  %incdec.ptr.5.i = getelementptr inbounds i16* %s, i64 8
  %75 = load i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %shr22.6.i = lshr i16 %75, 1
  %76 = or i16 %shr22.6.i, %shl.5.i
  store i16 %76, i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %add121 = add nsw i32 %sub, 1
  br label %mdfin

mdfin:                                            ; preds = %if.end115, %if.then120, %if.end12
  %exp.addr.0 = phi i32 [ %sub, %if.end12 ], [ %add121, %if.then120 ], [ %sub, %if.end115 ]
  %arrayidx123 = getelementptr inbounds i16* %s, i64 8
  store i16 0, i16* %arrayidx123, align 2, !tbaa !1
  %cmp125 = icmp sgt i32 %exp.addr.0, 32766
  br i1 %cmp125, label %if.then127, label %if.end137

if.then127:                                       ; preds = %mdfin
  %arrayidx128 = getelementptr inbounds i16* %s, i64 1
  store i16 32767, i16* %arrayidx128, align 2, !tbaa !1
  %scevgep = getelementptr i16* %s, i64 2
  %scevgep224 = bitcast i16* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep224, i8 0, i64 12, i32 2, i1 false)
  %77 = load i32* @extra_warnings, align 4, !tbaa !9
  %tobool134 = icmp eq i32 %77, 0
  br i1 %tobool134, label %if.end145, label %if.then135

if.then135:                                       ; preds = %if.then127
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([24 x i8]* @.str4, i64 0, i64 0)) #1
  br label %if.end145

if.end137:                                        ; preds = %mdfin
  %cmp138 = icmp slt i32 %exp.addr.0, 0
  br i1 %cmp138, label %if.then140, label %if.else142

if.then140:                                       ; preds = %if.end137
  %arrayidx141 = getelementptr inbounds i16* %s, i64 1
  store i16 0, i16* %arrayidx141, align 2, !tbaa !1
  br label %if.end145

if.else142:                                       ; preds = %if.end137
  %conv143 = trunc i32 %exp.addr.0 to i16
  %arrayidx144 = getelementptr inbounds i16* %s, i64 1
  store i16 %conv143, i16* %arrayidx144, align 2, !tbaa !1
  br label %if.end145

if.end145:                                        ; preds = %if.then127, %if.then135, %if.then, %if.else, %if.else142, %if.then140
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @enormlz(i16* %x) #0 {
entry:
  %arrayidx = getelementptr inbounds i16* %x, i64 2
  %0 = load i16* %arrayidx, align 2, !tbaa !1
  %cmp = icmp eq i16 %0, 0
  br i1 %cmp, label %if.end, label %normdn

if.end:                                           ; preds = %entry
  %incdec.ptr = getelementptr inbounds i16* %x, i64 3
  %1 = load i16* %incdec.ptr, align 2, !tbaa !1
  %tobool = icmp slt i16 %1, 0
  br i1 %tobool, label %return, label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.end
  %cmp6158 = icmp eq i16 %1, 0
  br i1 %cmp6158, label %while.body.lr.ph, label %while.cond12.preheader

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %incdec.ptr.i = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr.1.i = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.2.i = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.3.i = getelementptr inbounds i16* %x, i64 7
  %incdec.ptr.4.i = getelementptr inbounds i16* %x, i64 8
  %incdec.ptr.i.promoted = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %incdec.ptr.1.i.promoted = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr.2.i.promoted = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr.3.i.promoted = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr.4.i.promoted = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  br label %while.body

while.condthread-pre-split:                       ; preds = %while.body
  %cmp6 = icmp eq i16 %6, 0
  br i1 %cmp6, label %while.body, label %while.cond.while.cond12.preheader_crit_edge

while.cond.while.cond12.preheader_crit_edge:      ; preds = %while.condthread-pre-split
  store i16 0, i16* %arrayidx, align 2, !tbaa !1
  store i16 %5, i16* %incdec.ptr.i, align 2, !tbaa !1
  store i16 %6, i16* %incdec.ptr, align 2, !tbaa !1
  store i16 %4, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  store i16 %3, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  store i16 %2, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  br label %while.cond12.preheader

while.cond12.preheader:                           ; preds = %while.cond.while.cond12.preheader_crit_edge, %while.cond.preheader
  %incdec.ptr.promoted156 = phi i16 [ %6, %while.cond.while.cond12.preheader_crit_edge ], [ %1, %while.cond.preheader ]
  %sc.0.lcssa = phi i32 [ %add, %while.cond.while.cond12.preheader_crit_edge ], [ 0, %while.cond.preheader ]
  %cmp15147 = icmp ult i16 %incdec.ptr.promoted156, 256
  br i1 %cmp15147, label %while.body17.lr.ph, label %while.cond20.preheader

while.body17.lr.ph:                               ; preds = %while.cond12.preheader
  %add.ptr.i71 = getelementptr inbounds i16* %x, i64 8
  %incdec.ptr.i72 = getelementptr inbounds i16* %x, i64 7
  %incdec.ptr.1.i73 = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.2.i74 = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.3.i75 = getelementptr inbounds i16* %x, i64 4
  %add.ptr.i71.promoted = load i16* %add.ptr.i71, align 2, !tbaa !1
  %incdec.ptr.i72.promoted = load i16* %incdec.ptr.i72, align 2, !tbaa !1
  %incdec.ptr.1.i73.promoted = load i16* %incdec.ptr.1.i73, align 2, !tbaa !1
  %incdec.ptr.2.i74.promoted = load i16* %incdec.ptr.2.i74, align 2, !tbaa !1
  %incdec.ptr.3.i75.promoted = load i16* %incdec.ptr.3.i75, align 2, !tbaa !1
  br label %while.body17

while.body:                                       ; preds = %while.body.lr.ph, %while.condthread-pre-split
  %2 = phi i16 [ %incdec.ptr.4.i.promoted, %while.body.lr.ph ], [ 0, %while.condthread-pre-split ]
  %3 = phi i16 [ %incdec.ptr.3.i.promoted, %while.body.lr.ph ], [ %2, %while.condthread-pre-split ]
  %4 = phi i16 [ %incdec.ptr.2.i.promoted, %while.body.lr.ph ], [ %3, %while.condthread-pre-split ]
  %5 = phi i16 [ %incdec.ptr.1.i.promoted, %while.body.lr.ph ], [ %4, %while.condthread-pre-split ]
  %6 = phi i16 [ %incdec.ptr.i.promoted, %while.body.lr.ph ], [ %5, %while.condthread-pre-split ]
  %sc.0159 = phi i32 [ 0, %while.body.lr.ph ], [ %add, %while.condthread-pre-split ]
  %add = add nsw i32 %sc.0159, 16
  %cmp8 = icmp sgt i32 %add, 80
  br i1 %cmp8, label %return.loopexit125, label %while.condthread-pre-split

while.cond12.while.cond20.preheader_crit_edge:    ; preds = %while.body17
  store i16 %shl.i, i16* %add.ptr.i71, align 2, !tbaa !1
  store i16 %or13.1.i, i16* %incdec.ptr.i72, align 2, !tbaa !1
  store i16 %or13.2.i, i16* %incdec.ptr.1.i73, align 2, !tbaa !1
  store i16 %or13.3.i, i16* %incdec.ptr.2.i74, align 2, !tbaa !1
  store i16 %or13.4.i, i16* %incdec.ptr.3.i75, align 2, !tbaa !1
  store i16 %or13.5.i, i16* %incdec.ptr, align 2, !tbaa !1
  store i16 %or13.6.i, i16* %arrayidx, align 2, !tbaa !1
  br label %while.cond20.preheader

while.cond20.preheader:                           ; preds = %while.cond12.while.cond20.preheader_crit_edge, %while.cond12.preheader
  %arrayidx.promoted = phi i16 [ %or13.6.i, %while.cond12.while.cond20.preheader_crit_edge ], [ 0, %while.cond12.preheader ]
  %incdec.ptr.promoted = phi i16 [ %or13.5.i, %while.cond12.while.cond20.preheader_crit_edge ], [ %incdec.ptr.promoted156, %while.cond12.preheader ]
  %sc.1.lcssa = phi i32 [ %add18, %while.cond12.while.cond20.preheader_crit_edge ], [ %sc.0.lcssa, %while.cond12.preheader ]
  %cmp23130 = icmp sgt i16 %incdec.ptr.promoted, -1
  br i1 %cmp23130, label %while.body25.lr.ph, label %return

while.body25.lr.ph:                               ; preds = %while.cond20.preheader
  %add.ptr.i110 = getelementptr inbounds i16* %x, i64 8
  %incdec.ptr.i112 = getelementptr inbounds i16* %x, i64 7
  %incdec.ptr.1.i114 = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.2.i116 = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.3.i118 = getelementptr inbounds i16* %x, i64 4
  %add.ptr.i110.promoted = load i16* %add.ptr.i110, align 2, !tbaa !1
  %incdec.ptr.i112.promoted = load i16* %incdec.ptr.i112, align 2, !tbaa !1
  %incdec.ptr.1.i114.promoted = load i16* %incdec.ptr.1.i114, align 2, !tbaa !1
  %incdec.ptr.2.i116.promoted = load i16* %incdec.ptr.2.i116, align 2, !tbaa !1
  %incdec.ptr.3.i118.promoted = load i16* %incdec.ptr.3.i118, align 2, !tbaa !1
  br label %while.body25

while.body17:                                     ; preds = %while.body17.lr.ph, %while.body17
  %7 = phi i16 [ 0, %while.body17.lr.ph ], [ %or13.6.i, %while.body17 ]
  %8 = phi i16 [ %incdec.ptr.promoted156, %while.body17.lr.ph ], [ %or13.5.i, %while.body17 ]
  %or13.4.i155 = phi i16 [ %incdec.ptr.3.i75.promoted, %while.body17.lr.ph ], [ %or13.4.i, %while.body17 ]
  %or13.3.i154 = phi i16 [ %incdec.ptr.2.i74.promoted, %while.body17.lr.ph ], [ %or13.3.i, %while.body17 ]
  %or13.2.i153 = phi i16 [ %incdec.ptr.1.i73.promoted, %while.body17.lr.ph ], [ %or13.2.i, %while.body17 ]
  %or13.1.i152 = phi i16 [ %incdec.ptr.i72.promoted, %while.body17.lr.ph ], [ %or13.1.i, %while.body17 ]
  %shl.i151 = phi i16 [ %add.ptr.i71.promoted, %while.body17.lr.ph ], [ %shl.i, %while.body17 ]
  %sc.1148 = phi i32 [ %sc.0.lcssa, %while.body17.lr.ph ], [ %add18, %while.body17 ]
  %shr12.i = lshr i16 %shl.i151, 8
  %shl.i = shl i16 %shl.i151, 8
  %shr12.1.i = lshr i16 %or13.1.i152, 8
  %shl.1.i = shl i16 %or13.1.i152, 8
  %or13.1.i = or i16 %shl.1.i, %shr12.i
  %shr12.2.i = lshr i16 %or13.2.i153, 8
  %shl.2.i = shl i16 %or13.2.i153, 8
  %or13.2.i = or i16 %shl.2.i, %shr12.1.i
  %shr12.3.i = lshr i16 %or13.3.i154, 8
  %shl.3.i = shl i16 %or13.3.i154, 8
  %or13.3.i = or i16 %shl.3.i, %shr12.2.i
  %shr12.4.i = lshr i16 %or13.4.i155, 8
  %shl.4.i = shl i16 %or13.4.i155, 8
  %or13.4.i = or i16 %shl.4.i, %shr12.3.i
  %shr12.5.i = lshr i16 %8, 8
  %shl.5.i = shl i16 %8, 8
  %or13.5.i = or i16 %shl.5.i, %shr12.4.i
  %shl.6.i = shl i16 %7, 8
  %or13.6.i = or i16 %shl.6.i, %shr12.5.i
  %add18 = add nsw i32 %sc.1148, 8
  %cmp15 = icmp ult i16 %or13.5.i, 256
  br i1 %cmp15, label %while.body17, label %while.cond12.while.cond20.preheader_crit_edge

while.cond20thread-pre-split:                     ; preds = %while.body25
  %cmp23 = icmp sgt i16 %18, -1
  br i1 %cmp23, label %while.body25, label %while.cond20.return.loopexit_crit_edge

while.body25:                                     ; preds = %while.body25.lr.ph, %while.cond20thread-pre-split
  %9 = phi i16 [ %arrayidx.promoted, %while.body25.lr.ph ], [ %19, %while.cond20thread-pre-split ]
  %.pr124142 = phi i16 [ %incdec.ptr.promoted, %while.body25.lr.ph ], [ %18, %while.cond20thread-pre-split ]
  %10 = phi i16 [ %incdec.ptr.3.i118.promoted, %while.body25.lr.ph ], [ %17, %while.cond20thread-pre-split ]
  %11 = phi i16 [ %incdec.ptr.2.i116.promoted, %while.body25.lr.ph ], [ %16, %while.cond20thread-pre-split ]
  %12 = phi i16 [ %incdec.ptr.1.i114.promoted, %while.body25.lr.ph ], [ %15, %while.cond20thread-pre-split ]
  %13 = phi i16 [ %incdec.ptr.i112.promoted, %while.body25.lr.ph ], [ %14, %while.cond20thread-pre-split ]
  %shl.i111132 = phi i16 [ %add.ptr.i110.promoted, %while.body25.lr.ph ], [ %shl.i111, %while.cond20thread-pre-split ]
  %sc.2131 = phi i32 [ %sc.1.lcssa, %while.body25.lr.ph ], [ %add26, %while.cond20thread-pre-split ]
  %.lobit.i = lshr i16 %shl.i111132, 15
  %shl.i111 = shl i16 %shl.i111132, 1
  %.lobit.1.i = lshr i16 %13, 15
  %shl.1.i113 = shl i16 %13, 1
  %14 = or i16 %shl.1.i113, %.lobit.i
  %.lobit.2.i = lshr i16 %12, 15
  %shl.2.i115 = shl i16 %12, 1
  %15 = or i16 %shl.2.i115, %.lobit.1.i
  %.lobit.3.i = lshr i16 %11, 15
  %shl.3.i117 = shl i16 %11, 1
  %16 = or i16 %shl.3.i117, %.lobit.2.i
  %.lobit.4.i = lshr i16 %10, 15
  %shl.4.i119 = shl i16 %10, 1
  %17 = or i16 %shl.4.i119, %.lobit.3.i
  %.lobit.5.i = lshr i16 %.pr124142, 15
  %shl.5.i121 = shl i16 %.pr124142, 1
  %18 = or i16 %shl.5.i121, %.lobit.4.i
  %shl.6.i123 = shl i16 %9, 1
  %19 = or i16 %shl.6.i123, %.lobit.5.i
  %add26 = add nsw i32 %sc.2131, 1
  %cmp27 = icmp sgt i32 %sc.2131, 79
  br i1 %cmp27, label %if.then29, label %while.cond20thread-pre-split

if.then29:                                        ; preds = %while.body25
  store i16 %shl.i111, i16* %add.ptr.i110, align 2, !tbaa !1
  store i16 %14, i16* %incdec.ptr.i112, align 2, !tbaa !1
  store i16 %15, i16* %incdec.ptr.1.i114, align 2, !tbaa !1
  store i16 %16, i16* %incdec.ptr.2.i116, align 2, !tbaa !1
  store i16 %17, i16* %incdec.ptr.3.i118, align 2, !tbaa !1
  store i16 %18, i16* %incdec.ptr, align 2, !tbaa !1
  store i16 %19, i16* %arrayidx, align 2, !tbaa !1
  tail call fastcc void @mtherr(i8* getelementptr inbounds ([8 x i8]* @.str5, i64 0, i64 0), i32 4)
  br label %return

normdn:                                           ; preds = %entry
  %tobool34 = icmp ugt i16 %0, 255
  br i1 %tobool34, label %if.then35, label %normdn.while.cond37.preheader_crit_edge

normdn.while.cond37.preheader_crit_edge:          ; preds = %normdn
  %incdec.ptr.i78.pre = getelementptr inbounds i16* %x, i64 3
  %incdec.ptr.1.i79.pre = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr.2.i80.pre = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.3.i81.pre = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.4.i82.pre = getelementptr inbounds i16* %x, i64 7
  %incdec.ptr.5.i84.pre = getelementptr inbounds i16* %x, i64 8
  br label %while.cond37.preheader

if.then35:                                        ; preds = %normdn
  %shl.i86 = shl i16 %0, 8
  %shr12.i87 = lshr i16 %0, 8
  store i16 %shr12.i87, i16* %arrayidx, align 2, !tbaa !1
  %incdec.ptr.i88 = getelementptr inbounds i16* %x, i64 3
  %20 = load i16* %incdec.ptr.i88, align 2, !tbaa !1
  %shl.1.i89 = shl i16 %20, 8
  %shr12.1.i90 = lshr i16 %20, 8
  %or13.1.i91 = or i16 %shr12.1.i90, %shl.i86
  store i16 %or13.1.i91, i16* %incdec.ptr.i88, align 2, !tbaa !1
  %incdec.ptr.1.i92 = getelementptr inbounds i16* %x, i64 4
  %21 = load i16* %incdec.ptr.1.i92, align 2, !tbaa !1
  %shl.2.i93 = shl i16 %21, 8
  %shr12.2.i94 = lshr i16 %21, 8
  %or13.2.i95 = or i16 %shr12.2.i94, %shl.1.i89
  store i16 %or13.2.i95, i16* %incdec.ptr.1.i92, align 2, !tbaa !1
  %incdec.ptr.2.i96 = getelementptr inbounds i16* %x, i64 5
  %22 = load i16* %incdec.ptr.2.i96, align 2, !tbaa !1
  %shl.3.i97 = shl i16 %22, 8
  %shr12.3.i98 = lshr i16 %22, 8
  %or13.3.i99 = or i16 %shr12.3.i98, %shl.2.i93
  store i16 %or13.3.i99, i16* %incdec.ptr.2.i96, align 2, !tbaa !1
  %incdec.ptr.3.i100 = getelementptr inbounds i16* %x, i64 6
  %23 = load i16* %incdec.ptr.3.i100, align 2, !tbaa !1
  %shl.4.i101 = shl i16 %23, 8
  %shr12.4.i102 = lshr i16 %23, 8
  %or13.4.i103 = or i16 %shr12.4.i102, %shl.3.i97
  store i16 %or13.4.i103, i16* %incdec.ptr.3.i100, align 2, !tbaa !1
  %incdec.ptr.4.i104 = getelementptr inbounds i16* %x, i64 7
  %24 = load i16* %incdec.ptr.4.i104, align 2, !tbaa !1
  %shl.5.i105 = shl i16 %24, 8
  %shr12.5.i106 = lshr i16 %24, 8
  %or13.5.i107 = or i16 %shr12.5.i106, %shl.4.i101
  store i16 %or13.5.i107, i16* %incdec.ptr.4.i104, align 2, !tbaa !1
  %incdec.ptr.5.i108 = getelementptr inbounds i16* %x, i64 8
  %25 = load i16* %incdec.ptr.5.i108, align 2, !tbaa !1
  %shr12.6.i = lshr i16 %25, 8
  %or13.6.i109 = or i16 %shr12.6.i, %shl.5.i105
  store i16 %or13.6.i109, i16* %incdec.ptr.5.i108, align 2, !tbaa !1
  br label %while.cond37.preheader

while.cond37.preheader:                           ; preds = %normdn.while.cond37.preheader_crit_edge, %if.then35
  %incdec.ptr.5.i84.pre-phi = phi i16* [ %incdec.ptr.5.i84.pre, %normdn.while.cond37.preheader_crit_edge ], [ %incdec.ptr.5.i108, %if.then35 ]
  %incdec.ptr.4.i82.pre-phi = phi i16* [ %incdec.ptr.4.i82.pre, %normdn.while.cond37.preheader_crit_edge ], [ %incdec.ptr.4.i104, %if.then35 ]
  %incdec.ptr.3.i81.pre-phi = phi i16* [ %incdec.ptr.3.i81.pre, %normdn.while.cond37.preheader_crit_edge ], [ %incdec.ptr.3.i100, %if.then35 ]
  %incdec.ptr.2.i80.pre-phi = phi i16* [ %incdec.ptr.2.i80.pre, %normdn.while.cond37.preheader_crit_edge ], [ %incdec.ptr.2.i96, %if.then35 ]
  %incdec.ptr.1.i79.pre-phi = phi i16* [ %incdec.ptr.1.i79.pre, %normdn.while.cond37.preheader_crit_edge ], [ %incdec.ptr.1.i92, %if.then35 ]
  %incdec.ptr.i78.pre-phi = phi i16* [ %incdec.ptr.i78.pre, %normdn.while.cond37.preheader_crit_edge ], [ %incdec.ptr.i88, %if.then35 ]
  %26 = phi i16 [ %0, %normdn.while.cond37.preheader_crit_edge ], [ %shr12.i87, %if.then35 ]
  %sc.3.ph = phi i32 [ 0, %normdn.while.cond37.preheader_crit_edge ], [ -8, %if.then35 ]
  br label %while.cond37

while.cond37:                                     ; preds = %while.cond37.preheader, %while.body41
  %27 = phi i16 [ %shr22.i, %while.body41 ], [ %26, %while.cond37.preheader ]
  %sc.3 = phi i32 [ %sub42, %while.body41 ], [ %sc.3.ph, %while.cond37.preheader ]
  %cmp39 = icmp eq i16 %27, 0
  br i1 %cmp39, label %return, label %while.body41

while.body41:                                     ; preds = %while.cond37
  %shr22.i = lshr i16 %27, 1
  store i16 %shr22.i, i16* %arrayidx, align 2, !tbaa !1
  %28 = load i16* %incdec.ptr.i78.pre-phi, align 2, !tbaa !1
  %shr22.1.i = lshr i16 %28, 1
  %29 = shl i16 %27, 15
  %30 = or i16 %shr22.1.i, %29
  store i16 %30, i16* %incdec.ptr.i78.pre-phi, align 2, !tbaa !1
  %31 = load i16* %incdec.ptr.1.i79.pre-phi, align 2, !tbaa !1
  %shr22.2.i = lshr i16 %31, 1
  %32 = shl i16 %28, 15
  %33 = or i16 %shr22.2.i, %32
  store i16 %33, i16* %incdec.ptr.1.i79.pre-phi, align 2, !tbaa !1
  %34 = load i16* %incdec.ptr.2.i80.pre-phi, align 2, !tbaa !1
  %shr22.3.i = lshr i16 %34, 1
  %35 = shl i16 %31, 15
  %36 = or i16 %shr22.3.i, %35
  store i16 %36, i16* %incdec.ptr.2.i80.pre-phi, align 2, !tbaa !1
  %37 = load i16* %incdec.ptr.3.i81.pre-phi, align 2, !tbaa !1
  %shr22.4.i = lshr i16 %37, 1
  %38 = shl i16 %34, 15
  %39 = or i16 %shr22.4.i, %38
  store i16 %39, i16* %incdec.ptr.3.i81.pre-phi, align 2, !tbaa !1
  %40 = load i16* %incdec.ptr.4.i82.pre-phi, align 2, !tbaa !1
  %shr22.5.i = lshr i16 %40, 1
  %41 = shl i16 %37, 15
  %42 = or i16 %shr22.5.i, %41
  store i16 %42, i16* %incdec.ptr.4.i82.pre-phi, align 2, !tbaa !1
  %shl.5.i83 = shl i16 %40, 15
  %43 = load i16* %incdec.ptr.5.i84.pre-phi, align 2, !tbaa !1
  %shr22.6.i = lshr i16 %43, 1
  %44 = or i16 %shr22.6.i, %shl.5.i83
  store i16 %44, i16* %incdec.ptr.5.i84.pre-phi, align 2, !tbaa !1
  %sub42 = add nsw i32 %sc.3, -1
  %cmp43 = icmp slt i32 %sc.3, -79
  br i1 %cmp43, label %if.then45, label %while.cond37

if.then45:                                        ; preds = %while.body41
  tail call fastcc void @mtherr(i8* getelementptr inbounds ([8 x i8]* @.str5, i64 0, i64 0), i32 3)
  br label %return

while.cond20.return.loopexit_crit_edge:           ; preds = %while.cond20thread-pre-split
  store i16 %shl.i111, i16* %add.ptr.i110, align 2, !tbaa !1
  store i16 %14, i16* %incdec.ptr.i112, align 2, !tbaa !1
  store i16 %15, i16* %incdec.ptr.1.i114, align 2, !tbaa !1
  store i16 %16, i16* %incdec.ptr.2.i116, align 2, !tbaa !1
  store i16 %17, i16* %incdec.ptr.3.i118, align 2, !tbaa !1
  store i16 %18, i16* %incdec.ptr, align 2, !tbaa !1
  store i16 %19, i16* %arrayidx, align 2, !tbaa !1
  br label %return

return.loopexit125:                               ; preds = %while.body
  store i16 0, i16* %arrayidx, align 2, !tbaa !1
  store i16 %5, i16* %incdec.ptr.i, align 2, !tbaa !1
  store i16 %6, i16* %incdec.ptr, align 2, !tbaa !1
  store i16 %4, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  store i16 %3, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  store i16 %2, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  br label %return

return:                                           ; preds = %while.cond37, %while.cond20.preheader, %while.cond20.return.loopexit_crit_edge, %return.loopexit125, %if.end, %if.then45, %if.then29
  %retval.0 = phi i32 [ %sub42, %if.then45 ], [ %add26, %if.then29 ], [ 0, %if.end ], [ %add, %return.loopexit125 ], [ %add26, %while.cond20.return.loopexit_crit_edge ], [ %sc.1.lcssa, %while.cond20.preheader ], [ %sc.3, %while.cond37 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @eshift(i16* %x, i32 %sc) #0 {
entry:
  %cmp = icmp eq i32 %sc, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %add.ptr1 = getelementptr inbounds i16* %x, i64 8
  %cmp2 = icmp slt i32 %sc, 0
  br i1 %cmp2, label %if.then3, label %while.cond29.preheader

while.cond29.preheader:                           ; preds = %if.end
  %cmp30195 = icmp sgt i32 %sc, 15
  br i1 %cmp30195, label %while.body32.lr.ph, label %while.cond35.preheader

while.body32.lr.ph:                               ; preds = %while.cond29.preheader
  %add.ptr1.i = getelementptr inbounds i16* %x, i64 3
  %incdec.ptr.i99 = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr.1.i101 = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.2.i103 = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.3.i105 = getelementptr inbounds i16* %x, i64 7
  %add.ptr1.i.promoted = load i16* %add.ptr1.i, align 2, !tbaa !1
  %incdec.ptr.i99.promoted = load i16* %incdec.ptr.i99, align 2, !tbaa !1
  %incdec.ptr.1.i101.promoted = load i16* %incdec.ptr.1.i101, align 2, !tbaa !1
  %incdec.ptr.2.i103.promoted = load i16* %incdec.ptr.2.i103, align 2, !tbaa !1
  %incdec.ptr.3.i105.promoted = load i16* %incdec.ptr.3.i105, align 2, !tbaa !1
  %add.ptr1.promoted204 = load i16* %add.ptr1, align 2, !tbaa !1
  br label %while.body32

if.then3:                                         ; preds = %if.end
  %sub = sub nsw i32 0, %sc
  %cmp4164 = icmp sgt i32 %sub, 15
  br i1 %cmp4164, label %while.body.lr.ph, label %while.cond8.preheader

while.body.lr.ph:                                 ; preds = %if.then3
  %incdec.ptr.i = getelementptr inbounds i16* %x, i64 7
  %incdec.ptr.1.i = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.2.i = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.3.i = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr.4.i = getelementptr inbounds i16* %x, i64 3
  %incdec.ptr.5.i = getelementptr inbounds i16* %x, i64 2
  %add.ptr1.promoted169 = load i16* %add.ptr1, align 2, !tbaa !1
  %incdec.ptr.i.promoted = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %incdec.ptr.1.i.promoted = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr.2.i.promoted = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr.3.i.promoted = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr.4.i.promoted = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %incdec.ptr.5.i.promoted = load i16* %incdec.ptr.5.i, align 2, !tbaa !1
  br label %while.body

while.cond.while.cond8.preheader_crit_edge:       ; preds = %while.body
  %0 = sub i32 0, %sc
  %1 = and i32 %0, 15
  store i16 %7, i16* %add.ptr1, align 2, !tbaa !1
  store i16 %6, i16* %incdec.ptr.i, align 2, !tbaa !1
  store i16 %5, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  store i16 %4, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  store i16 %3, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  store i16 %2, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr.5.i, align 2, !tbaa !1
  br label %while.cond8.preheader

while.cond8.preheader:                            ; preds = %while.cond.while.cond8.preheader_crit_edge, %if.then3
  %lost.0.lcssa = phi i16 [ %or77, %while.cond.while.cond8.preheader_crit_edge ], [ 0, %if.then3 ]
  %sc.addr.0.lcssa = phi i32 [ %1, %while.cond.while.cond8.preheader_crit_edge ], [ %sub, %if.then3 ]
  %cmp9152 = icmp sgt i32 %sc.addr.0.lcssa, 7
  br i1 %cmp9152, label %while.body11.lr.ph, label %while.cond18.preheader

while.body11.lr.ph:                               ; preds = %while.cond8.preheader
  %add.ptr.i117 = getelementptr inbounds i16* %x, i64 2
  %incdec.ptr.i120 = getelementptr inbounds i16* %x, i64 3
  %incdec.ptr.1.i124 = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr.2.i128 = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.3.i132 = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.4.i136 = getelementptr inbounds i16* %x, i64 7
  %add.ptr1.promoted157 = load i16* %add.ptr1, align 2, !tbaa !1
  %add.ptr.i117.promoted = load i16* %add.ptr.i117, align 2, !tbaa !1
  %incdec.ptr.i120.promoted = load i16* %incdec.ptr.i120, align 2, !tbaa !1
  %incdec.ptr.1.i124.promoted = load i16* %incdec.ptr.1.i124, align 2, !tbaa !1
  %incdec.ptr.2.i128.promoted = load i16* %incdec.ptr.2.i128, align 2, !tbaa !1
  %incdec.ptr.3.i132.promoted = load i16* %incdec.ptr.3.i132, align 2, !tbaa !1
  %incdec.ptr.4.i136.promoted = load i16* %incdec.ptr.4.i136, align 2, !tbaa !1
  br label %while.body11

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %2 = phi i16 [ %incdec.ptr.5.i.promoted, %while.body.lr.ph ], [ 0, %while.body ]
  %3 = phi i16 [ %incdec.ptr.4.i.promoted, %while.body.lr.ph ], [ %2, %while.body ]
  %4 = phi i16 [ %incdec.ptr.3.i.promoted, %while.body.lr.ph ], [ %3, %while.body ]
  %5 = phi i16 [ %incdec.ptr.2.i.promoted, %while.body.lr.ph ], [ %4, %while.body ]
  %6 = phi i16 [ %incdec.ptr.1.i.promoted, %while.body.lr.ph ], [ %5, %while.body ]
  %7 = phi i16 [ %incdec.ptr.i.promoted, %while.body.lr.ph ], [ %6, %while.body ]
  %8 = phi i16 [ %add.ptr1.promoted169, %while.body.lr.ph ], [ %7, %while.body ]
  %lost.0166 = phi i16 [ 0, %while.body.lr.ph ], [ %or77, %while.body ]
  %sc.addr.0165 = phi i32 [ %sub, %while.body.lr.ph ], [ %sub7, %while.body ]
  %or77 = or i16 %8, %lost.0166
  %sub7 = add nsw i32 %sc.addr.0165, -16
  %cmp4 = icmp sgt i32 %sub7, 15
  br i1 %cmp4, label %while.body, label %while.cond.while.cond8.preheader_crit_edge

while.cond8.while.cond18.preheader_crit_edge:     ; preds = %while.body11
  %9 = and i32 %sc.addr.0.lcssa, 7
  store i16 %or13.6.i141, i16* %add.ptr1, align 2, !tbaa !1
  store i16 %shr12.i119, i16* %add.ptr.i117, align 2, !tbaa !1
  store i16 %or13.1.i123, i16* %incdec.ptr.i120, align 2, !tbaa !1
  store i16 %or13.2.i127, i16* %incdec.ptr.1.i124, align 2, !tbaa !1
  store i16 %or13.3.i131, i16* %incdec.ptr.2.i128, align 2, !tbaa !1
  store i16 %or13.4.i135, i16* %incdec.ptr.3.i132, align 2, !tbaa !1
  store i16 %or13.5.i139, i16* %incdec.ptr.4.i136, align 2, !tbaa !1
  br label %while.cond18.preheader

while.cond18.preheader:                           ; preds = %while.cond8.while.cond18.preheader_crit_edge, %while.cond8.preheader
  %lost.1.lcssa = phi i16 [ %or14, %while.cond8.while.cond18.preheader_crit_edge ], [ %lost.0.lcssa, %while.cond8.preheader ]
  %sc.addr.1.lcssa = phi i32 [ %9, %while.cond8.while.cond18.preheader_crit_edge ], [ %sc.addr.0.lcssa, %while.cond8.preheader ]
  %cmp19143 = icmp sgt i32 %sc.addr.1.lcssa, 0
  br i1 %cmp19143, label %while.body21.lr.ph, label %if.end47

while.body21.lr.ph:                               ; preds = %while.cond18.preheader
  %add.ptr.i109 = getelementptr inbounds i16* %x, i64 2
  %incdec.ptr.i110 = getelementptr inbounds i16* %x, i64 3
  %incdec.ptr.1.i111 = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr.2.i112 = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.3.i113 = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.4.i114 = getelementptr inbounds i16* %x, i64 7
  %add.ptr1.promoted = load i16* %add.ptr1, align 2, !tbaa !1
  %add.ptr.i109.promoted = load i16* %add.ptr.i109, align 2, !tbaa !1
  %incdec.ptr.i110.promoted = load i16* %incdec.ptr.i110, align 2, !tbaa !1
  %incdec.ptr.1.i111.promoted = load i16* %incdec.ptr.1.i111, align 2, !tbaa !1
  %incdec.ptr.2.i112.promoted = load i16* %incdec.ptr.2.i112, align 2, !tbaa !1
  %incdec.ptr.3.i113.promoted = load i16* %incdec.ptr.3.i113, align 2, !tbaa !1
  %incdec.ptr.4.i114.promoted = load i16* %incdec.ptr.4.i114, align 2, !tbaa !1
  br label %while.body21

while.body11:                                     ; preds = %while.body11.lr.ph, %while.body11
  %or13.5.i139163 = phi i16 [ %incdec.ptr.4.i136.promoted, %while.body11.lr.ph ], [ %or13.5.i139, %while.body11 ]
  %or13.4.i135162 = phi i16 [ %incdec.ptr.3.i132.promoted, %while.body11.lr.ph ], [ %or13.4.i135, %while.body11 ]
  %or13.3.i131161 = phi i16 [ %incdec.ptr.2.i128.promoted, %while.body11.lr.ph ], [ %or13.3.i131, %while.body11 ]
  %or13.2.i127160 = phi i16 [ %incdec.ptr.1.i124.promoted, %while.body11.lr.ph ], [ %or13.2.i127, %while.body11 ]
  %or13.1.i123159 = phi i16 [ %incdec.ptr.i120.promoted, %while.body11.lr.ph ], [ %or13.1.i123, %while.body11 ]
  %shr12.i119158 = phi i16 [ %add.ptr.i117.promoted, %while.body11.lr.ph ], [ %shr12.i119, %while.body11 ]
  %10 = phi i16 [ %add.ptr1.promoted157, %while.body11.lr.ph ], [ %or13.6.i141, %while.body11 ]
  %lost.1154 = phi i16 [ %lost.0.lcssa, %while.body11.lr.ph ], [ %or14, %while.body11 ]
  %sc.addr.1153 = phi i32 [ %sc.addr.0.lcssa, %while.body11.lr.ph ], [ %sub16, %while.body11 ]
  %and = and i16 %10, 255
  %or14 = or i16 %and, %lost.1154
  %shl.i118 = shl i16 %shr12.i119158, 8
  %shr12.i119 = lshr i16 %shr12.i119158, 8
  %shl.1.i121 = shl i16 %or13.1.i123159, 8
  %shr12.1.i122 = lshr i16 %or13.1.i123159, 8
  %or13.1.i123 = or i16 %shr12.1.i122, %shl.i118
  %shl.2.i125 = shl i16 %or13.2.i127160, 8
  %shr12.2.i126 = lshr i16 %or13.2.i127160, 8
  %or13.2.i127 = or i16 %shr12.2.i126, %shl.1.i121
  %shl.3.i129 = shl i16 %or13.3.i131161, 8
  %shr12.3.i130 = lshr i16 %or13.3.i131161, 8
  %or13.3.i131 = or i16 %shr12.3.i130, %shl.2.i125
  %shl.4.i133 = shl i16 %or13.4.i135162, 8
  %shr12.4.i134 = lshr i16 %or13.4.i135162, 8
  %or13.4.i135 = or i16 %shr12.4.i134, %shl.3.i129
  %shl.5.i137 = shl i16 %or13.5.i139163, 8
  %shr12.5.i138 = lshr i16 %or13.5.i139163, 8
  %or13.5.i139 = or i16 %shr12.5.i138, %shl.4.i133
  %shr12.6.i = lshr i16 %10, 8
  %or13.6.i141 = or i16 %shr12.6.i, %shl.5.i137
  %sub16 = add nsw i32 %sc.addr.1153, -8
  %cmp9 = icmp sgt i32 %sub16, 7
  br i1 %cmp9, label %while.body11, label %while.cond8.while.cond18.preheader_crit_edge

while.body21:                                     ; preds = %while.body21.lr.ph, %while.body21
  %11 = phi i16 [ %incdec.ptr.4.i114.promoted, %while.body21.lr.ph ], [ %26, %while.body21 ]
  %12 = phi i16 [ %incdec.ptr.3.i113.promoted, %while.body21.lr.ph ], [ %24, %while.body21 ]
  %13 = phi i16 [ %incdec.ptr.2.i112.promoted, %while.body21.lr.ph ], [ %22, %while.body21 ]
  %14 = phi i16 [ %incdec.ptr.1.i111.promoted, %while.body21.lr.ph ], [ %20, %while.body21 ]
  %15 = phi i16 [ %incdec.ptr.i110.promoted, %while.body21.lr.ph ], [ %18, %while.body21 ]
  %shr22.i146 = phi i16 [ %add.ptr.i109.promoted, %while.body21.lr.ph ], [ %shr22.i, %while.body21 ]
  %16 = phi i16 [ %add.ptr1.promoted, %while.body21.lr.ph ], [ %27, %while.body21 ]
  %lost.2145 = phi i16 [ %lost.1.lcssa, %while.body21.lr.ph ], [ %or25, %while.body21 ]
  %sc.addr.2144 = phi i32 [ %sc.addr.1.lcssa, %while.body21.lr.ph ], [ %sub27, %while.body21 ]
  %and23 = and i16 %16, 1
  %or25 = or i16 %and23, %lost.2145
  %shr22.i = lshr i16 %shr22.i146, 1
  %shr22.1.i = lshr i16 %15, 1
  %17 = shl i16 %shr22.i146, 15
  %18 = or i16 %shr22.1.i, %17
  %shr22.2.i = lshr i16 %14, 1
  %19 = shl i16 %15, 15
  %20 = or i16 %shr22.2.i, %19
  %shr22.3.i = lshr i16 %13, 1
  %21 = shl i16 %14, 15
  %22 = or i16 %shr22.3.i, %21
  %shr22.4.i = lshr i16 %12, 1
  %23 = shl i16 %13, 15
  %24 = or i16 %shr22.4.i, %23
  %shr22.5.i = lshr i16 %11, 1
  %25 = shl i16 %12, 15
  %26 = or i16 %shr22.5.i, %25
  %shl.5.i115 = shl i16 %11, 15
  %shr22.6.i = lshr i16 %16, 1
  %27 = or i16 %shr22.6.i, %shl.5.i115
  %sub27 = add nsw i32 %sc.addr.2144, -1
  %cmp19 = icmp sgt i32 %sub27, 0
  br i1 %cmp19, label %while.body21, label %while.cond18.if.end47.loopexit_crit_edge

while.cond29.while.cond35.preheader_crit_edge:    ; preds = %while.body32
  %add.ptr.i98 = getelementptr inbounds i16* %x, i64 2
  %28 = and i32 %sc, 15
  store i16 %33, i16* %add.ptr1.i, align 2, !tbaa !1
  store i16 %34, i16* %add.ptr.i98, align 2, !tbaa !1
  store i16 %32, i16* %incdec.ptr.i99, align 2, !tbaa !1
  store i16 %31, i16* %incdec.ptr.1.i101, align 2, !tbaa !1
  store i16 %30, i16* %incdec.ptr.2.i103, align 2, !tbaa !1
  store i16 %29, i16* %incdec.ptr.3.i105, align 2, !tbaa !1
  store i16 0, i16* %add.ptr1, align 2, !tbaa !1
  br label %while.cond35.preheader

while.cond35.preheader:                           ; preds = %while.cond29.while.cond35.preheader_crit_edge, %while.cond29.preheader
  %sc.addr.3.lcssa = phi i32 [ %28, %while.cond29.while.cond35.preheader_crit_edge ], [ %sc, %while.cond29.preheader ]
  %cmp36185 = icmp sgt i32 %sc.addr.3.lcssa, 7
  br i1 %cmp36185, label %while.body38.lr.ph, label %while.cond41.preheader

while.body38.lr.ph:                               ; preds = %while.cond35.preheader
  %incdec.ptr.i86 = getelementptr inbounds i16* %x, i64 7
  %incdec.ptr.1.i88 = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.2.i90 = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.3.i92 = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr.4.i94 = getelementptr inbounds i16* %x, i64 3
  %incdec.ptr.5.i96 = getelementptr inbounds i16* %x, i64 2
  %add.ptr1.promoted188 = load i16* %add.ptr1, align 2, !tbaa !1
  %incdec.ptr.i86.promoted = load i16* %incdec.ptr.i86, align 2, !tbaa !1
  %incdec.ptr.1.i88.promoted = load i16* %incdec.ptr.1.i88, align 2, !tbaa !1
  %incdec.ptr.2.i90.promoted = load i16* %incdec.ptr.2.i90, align 2, !tbaa !1
  %incdec.ptr.3.i92.promoted = load i16* %incdec.ptr.3.i92, align 2, !tbaa !1
  %incdec.ptr.4.i94.promoted = load i16* %incdec.ptr.4.i94, align 2, !tbaa !1
  %incdec.ptr.5.i96.promoted = load i16* %incdec.ptr.5.i96, align 2, !tbaa !1
  br label %while.body38

while.body32:                                     ; preds = %while.body32.lr.ph, %while.body32
  %29 = phi i16 [ %add.ptr1.promoted204, %while.body32.lr.ph ], [ 0, %while.body32 ]
  %30 = phi i16 [ %incdec.ptr.3.i105.promoted, %while.body32.lr.ph ], [ %29, %while.body32 ]
  %31 = phi i16 [ %incdec.ptr.2.i103.promoted, %while.body32.lr.ph ], [ %30, %while.body32 ]
  %32 = phi i16 [ %incdec.ptr.1.i101.promoted, %while.body32.lr.ph ], [ %31, %while.body32 ]
  %33 = phi i16 [ %incdec.ptr.i99.promoted, %while.body32.lr.ph ], [ %32, %while.body32 ]
  %34 = phi i16 [ %add.ptr1.i.promoted, %while.body32.lr.ph ], [ %33, %while.body32 ]
  %sc.addr.3196 = phi i32 [ %sc, %while.body32.lr.ph ], [ %sub33, %while.body32 ]
  %sub33 = add nsw i32 %sc.addr.3196, -16
  %cmp30 = icmp sgt i32 %sub33, 15
  br i1 %cmp30, label %while.body32, label %while.cond29.while.cond35.preheader_crit_edge

while.cond35.while.cond41.preheader_crit_edge:    ; preds = %while.body38
  %35 = and i32 %sc.addr.3.lcssa, 7
  store i16 %shl.i85, i16* %add.ptr1, align 2, !tbaa !1
  store i16 %or13.1.i, i16* %incdec.ptr.i86, align 2, !tbaa !1
  store i16 %or13.2.i, i16* %incdec.ptr.1.i88, align 2, !tbaa !1
  store i16 %or13.3.i, i16* %incdec.ptr.2.i90, align 2, !tbaa !1
  store i16 %or13.4.i, i16* %incdec.ptr.3.i92, align 2, !tbaa !1
  store i16 %or13.5.i, i16* %incdec.ptr.4.i94, align 2, !tbaa !1
  store i16 %or13.6.i, i16* %incdec.ptr.5.i96, align 2, !tbaa !1
  br label %while.cond41.preheader

while.cond41.preheader:                           ; preds = %while.cond35.while.cond41.preheader_crit_edge, %while.cond35.preheader
  %sc.addr.4.lcssa = phi i32 [ %35, %while.cond35.while.cond41.preheader_crit_edge ], [ %sc.addr.3.lcssa, %while.cond35.preheader ]
  %cmp42176 = icmp sgt i32 %sc.addr.4.lcssa, 0
  br i1 %cmp42176, label %while.body44.lr.ph, label %if.end47

while.body44.lr.ph:                               ; preds = %while.cond41.preheader
  %incdec.ptr.i78 = getelementptr inbounds i16* %x, i64 7
  %incdec.ptr.1.i79 = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr.2.i80 = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr.3.i81 = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr.4.i82 = getelementptr inbounds i16* %x, i64 3
  %incdec.ptr.5.i83 = getelementptr inbounds i16* %x, i64 2
  %add.ptr1.promoted178 = load i16* %add.ptr1, align 2, !tbaa !1
  %incdec.ptr.i78.promoted = load i16* %incdec.ptr.i78, align 2, !tbaa !1
  %incdec.ptr.1.i79.promoted = load i16* %incdec.ptr.1.i79, align 2, !tbaa !1
  %incdec.ptr.2.i80.promoted = load i16* %incdec.ptr.2.i80, align 2, !tbaa !1
  %incdec.ptr.3.i81.promoted = load i16* %incdec.ptr.3.i81, align 2, !tbaa !1
  %incdec.ptr.4.i82.promoted = load i16* %incdec.ptr.4.i82, align 2, !tbaa !1
  %incdec.ptr.5.i83.promoted = load i16* %incdec.ptr.5.i83, align 2, !tbaa !1
  br label %while.body44

while.body38:                                     ; preds = %while.body38.lr.ph, %while.body38
  %or13.6.i194 = phi i16 [ %incdec.ptr.5.i96.promoted, %while.body38.lr.ph ], [ %or13.6.i, %while.body38 ]
  %or13.5.i193 = phi i16 [ %incdec.ptr.4.i94.promoted, %while.body38.lr.ph ], [ %or13.5.i, %while.body38 ]
  %or13.4.i192 = phi i16 [ %incdec.ptr.3.i92.promoted, %while.body38.lr.ph ], [ %or13.4.i, %while.body38 ]
  %or13.3.i191 = phi i16 [ %incdec.ptr.2.i90.promoted, %while.body38.lr.ph ], [ %or13.3.i, %while.body38 ]
  %or13.2.i190 = phi i16 [ %incdec.ptr.1.i88.promoted, %while.body38.lr.ph ], [ %or13.2.i, %while.body38 ]
  %or13.1.i189 = phi i16 [ %incdec.ptr.i86.promoted, %while.body38.lr.ph ], [ %or13.1.i, %while.body38 ]
  %36 = phi i16 [ %add.ptr1.promoted188, %while.body38.lr.ph ], [ %shl.i85, %while.body38 ]
  %sc.addr.4186 = phi i32 [ %sc.addr.3.lcssa, %while.body38.lr.ph ], [ %sub39, %while.body38 ]
  %shr12.i = lshr i16 %36, 8
  %shl.i85 = shl i16 %36, 8
  %shr12.1.i = lshr i16 %or13.1.i189, 8
  %shl.1.i87 = shl i16 %or13.1.i189, 8
  %or13.1.i = or i16 %shl.1.i87, %shr12.i
  %shr12.2.i = lshr i16 %or13.2.i190, 8
  %shl.2.i89 = shl i16 %or13.2.i190, 8
  %or13.2.i = or i16 %shl.2.i89, %shr12.1.i
  %shr12.3.i = lshr i16 %or13.3.i191, 8
  %shl.3.i91 = shl i16 %or13.3.i191, 8
  %or13.3.i = or i16 %shl.3.i91, %shr12.2.i
  %shr12.4.i = lshr i16 %or13.4.i192, 8
  %shl.4.i93 = shl i16 %or13.4.i192, 8
  %or13.4.i = or i16 %shl.4.i93, %shr12.3.i
  %shr12.5.i = lshr i16 %or13.5.i193, 8
  %shl.5.i95 = shl i16 %or13.5.i193, 8
  %or13.5.i = or i16 %shl.5.i95, %shr12.4.i
  %shl.6.i97 = shl i16 %or13.6.i194, 8
  %or13.6.i = or i16 %shl.6.i97, %shr12.5.i
  %sub39 = add nsw i32 %sc.addr.4186, -8
  %cmp36 = icmp sgt i32 %sub39, 7
  br i1 %cmp36, label %while.body38, label %while.cond35.while.cond41.preheader_crit_edge

while.body44:                                     ; preds = %while.body44.lr.ph, %while.body44
  %37 = phi i16 [ %incdec.ptr.5.i83.promoted, %while.body44.lr.ph ], [ %49, %while.body44 ]
  %38 = phi i16 [ %incdec.ptr.4.i82.promoted, %while.body44.lr.ph ], [ %48, %while.body44 ]
  %39 = phi i16 [ %incdec.ptr.3.i81.promoted, %while.body44.lr.ph ], [ %47, %while.body44 ]
  %40 = phi i16 [ %incdec.ptr.2.i80.promoted, %while.body44.lr.ph ], [ %46, %while.body44 ]
  %41 = phi i16 [ %incdec.ptr.1.i79.promoted, %while.body44.lr.ph ], [ %45, %while.body44 ]
  %42 = phi i16 [ %incdec.ptr.i78.promoted, %while.body44.lr.ph ], [ %44, %while.body44 ]
  %43 = phi i16 [ %add.ptr1.promoted178, %while.body44.lr.ph ], [ %shl.i, %while.body44 ]
  %sc.addr.5177 = phi i32 [ %sc.addr.4.lcssa, %while.body44.lr.ph ], [ %sub45, %while.body44 ]
  %.lobit.i = lshr i16 %43, 15
  %shl.i = shl i16 %43, 1
  %.lobit.1.i = lshr i16 %42, 15
  %shl.1.i = shl i16 %42, 1
  %44 = or i16 %shl.1.i, %.lobit.i
  %.lobit.2.i = lshr i16 %41, 15
  %shl.2.i = shl i16 %41, 1
  %45 = or i16 %shl.2.i, %.lobit.1.i
  %.lobit.3.i = lshr i16 %40, 15
  %shl.3.i = shl i16 %40, 1
  %46 = or i16 %shl.3.i, %.lobit.2.i
  %.lobit.4.i = lshr i16 %39, 15
  %shl.4.i = shl i16 %39, 1
  %47 = or i16 %shl.4.i, %.lobit.3.i
  %.lobit.5.i = lshr i16 %38, 15
  %shl.5.i = shl i16 %38, 1
  %48 = or i16 %shl.5.i, %.lobit.4.i
  %shl.6.i = shl i16 %37, 1
  %49 = or i16 %shl.6.i, %.lobit.5.i
  %sub45 = add nsw i32 %sc.addr.5177, -1
  %cmp42 = icmp sgt i32 %sub45, 0
  br i1 %cmp42, label %while.body44, label %while.cond41.if.end47.loopexit142_crit_edge

while.cond18.if.end47.loopexit_crit_edge:         ; preds = %while.body21
  store i16 %27, i16* %add.ptr1, align 2, !tbaa !1
  store i16 %shr22.i, i16* %add.ptr.i109, align 2, !tbaa !1
  store i16 %18, i16* %incdec.ptr.i110, align 2, !tbaa !1
  store i16 %20, i16* %incdec.ptr.1.i111, align 2, !tbaa !1
  store i16 %22, i16* %incdec.ptr.2.i112, align 2, !tbaa !1
  store i16 %24, i16* %incdec.ptr.3.i113, align 2, !tbaa !1
  store i16 %26, i16* %incdec.ptr.4.i114, align 2, !tbaa !1
  br label %if.end47

while.cond41.if.end47.loopexit142_crit_edge:      ; preds = %while.body44
  store i16 %shl.i, i16* %add.ptr1, align 2, !tbaa !1
  store i16 %44, i16* %incdec.ptr.i78, align 2, !tbaa !1
  store i16 %45, i16* %incdec.ptr.1.i79, align 2, !tbaa !1
  store i16 %46, i16* %incdec.ptr.2.i80, align 2, !tbaa !1
  store i16 %47, i16* %incdec.ptr.3.i81, align 2, !tbaa !1
  store i16 %48, i16* %incdec.ptr.4.i82, align 2, !tbaa !1
  store i16 %49, i16* %incdec.ptr.5.i83, align 2, !tbaa !1
  br label %if.end47

if.end47:                                         ; preds = %while.cond41.preheader, %while.cond41.if.end47.loopexit142_crit_edge, %while.cond18.preheader, %while.cond18.if.end47.loopexit_crit_edge
  %lost.3 = phi i16 [ %or25, %while.cond18.if.end47.loopexit_crit_edge ], [ %lost.1.lcssa, %while.cond18.preheader ], [ 0, %while.cond41.if.end47.loopexit142_crit_edge ], [ 0, %while.cond41.preheader ]
  %not.tobool = icmp ne i16 %lost.3, 0
  %conv50 = zext i1 %not.tobool to i32
  br label %return

return:                                           ; preds = %entry, %if.end47
  %retval.0 = phi i32 [ %conv50, %if.end47 ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @eaddm(i16* nocapture readonly %x, i16* nocapture %y) #0 {
entry:
  %add.ptr = getelementptr inbounds i16* %x, i64 8
  %add.ptr1 = getelementptr inbounds i16* %y, i64 8
  %0 = load i16* %add.ptr, align 2, !tbaa !1
  %conv = zext i16 %0 to i32
  %1 = load i16* %add.ptr1, align 2, !tbaa !1
  %conv2 = zext i16 %1 to i32
  %add3 = add i32 %conv, %conv2
  %and = lshr i32 %add3, 16
  %and.lobit = and i32 %and, 1
  %conv4 = trunc i32 %add3 to i16
  store i16 %conv4, i16* %add.ptr1, align 2, !tbaa !1
  %incdec.ptr = getelementptr inbounds i16* %x, i64 7
  %incdec.ptr5 = getelementptr inbounds i16* %y, i64 7
  %2 = load i16* %incdec.ptr, align 2, !tbaa !1
  %conv.1 = zext i16 %2 to i32
  %3 = load i16* %incdec.ptr5, align 2, !tbaa !1
  %conv2.1 = zext i16 %3 to i32
  %add.1 = add i32 %conv.1, %and.lobit
  %add3.1 = add i32 %add.1, %conv2.1
  %and.1 = lshr i32 %add3.1, 16
  %and.lobit.1 = and i32 %and.1, 1
  %conv4.1 = trunc i32 %add3.1 to i16
  store i16 %conv4.1, i16* %incdec.ptr5, align 2, !tbaa !1
  %incdec.ptr.1 = getelementptr inbounds i16* %x, i64 6
  %incdec.ptr5.1 = getelementptr inbounds i16* %y, i64 6
  %4 = load i16* %incdec.ptr.1, align 2, !tbaa !1
  %conv.2 = zext i16 %4 to i32
  %5 = load i16* %incdec.ptr5.1, align 2, !tbaa !1
  %conv2.2 = zext i16 %5 to i32
  %add.2 = add i32 %conv.2, %and.lobit.1
  %add3.2 = add i32 %add.2, %conv2.2
  %and.2 = lshr i32 %add3.2, 16
  %and.lobit.2 = and i32 %and.2, 1
  %conv4.2 = trunc i32 %add3.2 to i16
  store i16 %conv4.2, i16* %incdec.ptr5.1, align 2, !tbaa !1
  %incdec.ptr.2 = getelementptr inbounds i16* %x, i64 5
  %incdec.ptr5.2 = getelementptr inbounds i16* %y, i64 5
  %6 = load i16* %incdec.ptr.2, align 2, !tbaa !1
  %conv.3 = zext i16 %6 to i32
  %7 = load i16* %incdec.ptr5.2, align 2, !tbaa !1
  %conv2.3 = zext i16 %7 to i32
  %add.3 = add i32 %conv.3, %and.lobit.2
  %add3.3 = add i32 %add.3, %conv2.3
  %and.3 = lshr i32 %add3.3, 16
  %and.lobit.3 = and i32 %and.3, 1
  %conv4.3 = trunc i32 %add3.3 to i16
  store i16 %conv4.3, i16* %incdec.ptr5.2, align 2, !tbaa !1
  %incdec.ptr.3 = getelementptr inbounds i16* %x, i64 4
  %incdec.ptr5.3 = getelementptr inbounds i16* %y, i64 4
  %8 = load i16* %incdec.ptr.3, align 2, !tbaa !1
  %conv.4 = zext i16 %8 to i32
  %9 = load i16* %incdec.ptr5.3, align 2, !tbaa !1
  %conv2.4 = zext i16 %9 to i32
  %add.4 = add i32 %conv.4, %and.lobit.3
  %add3.4 = add i32 %add.4, %conv2.4
  %and.4 = lshr i32 %add3.4, 16
  %and.lobit.4 = and i32 %and.4, 1
  %conv4.4 = trunc i32 %add3.4 to i16
  store i16 %conv4.4, i16* %incdec.ptr5.3, align 2, !tbaa !1
  %incdec.ptr.4 = getelementptr inbounds i16* %x, i64 3
  %incdec.ptr5.4 = getelementptr inbounds i16* %y, i64 3
  %10 = load i16* %incdec.ptr.4, align 2, !tbaa !1
  %conv.5 = zext i16 %10 to i32
  %11 = load i16* %incdec.ptr5.4, align 2, !tbaa !1
  %conv2.5 = zext i16 %11 to i32
  %add.5 = add i32 %conv.5, %and.lobit.4
  %add3.5 = add i32 %add.5, %conv2.5
  %and.5 = lshr i32 %add3.5, 16
  %and.lobit.5 = and i32 %and.5, 1
  %conv4.5 = trunc i32 %add3.5 to i16
  store i16 %conv4.5, i16* %incdec.ptr5.4, align 2, !tbaa !1
  %incdec.ptr.5 = getelementptr inbounds i16* %x, i64 2
  %incdec.ptr5.5 = getelementptr inbounds i16* %y, i64 2
  %12 = load i16* %incdec.ptr.5, align 2, !tbaa !1
  %conv.6 = zext i16 %12 to i32
  %13 = load i16* %incdec.ptr5.5, align 2, !tbaa !1
  %conv2.6 = zext i16 %13 to i32
  %add.6 = add i32 %conv.6, %and.lobit.5
  %add3.6 = add i32 %add.6, %conv2.6
  %conv4.6 = trunc i32 %add3.6 to i16
  store i16 %conv4.6, i16* %incdec.ptr5.5, align 2, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @mtherr(i8* %name, i32 %code) #0 {
entry:
  %call = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([5 x i8]* @.str6, i64 0, i64 0)) #1
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.end34, label %if.else

if.else:                                          ; preds = %entry
  %call1 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([5 x i8]* @.str8, i64 0, i64 0)) #1
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.end34, label %if.else4

if.else4:                                         ; preds = %if.else
  %call5 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([5 x i8]* @.str10, i64 0, i64 0)) #1
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.end34, label %if.else8

if.else8:                                         ; preds = %if.else4
  %call9 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([8 x i8]* @.str5, i64 0, i64 0)) #1
  %cmp10 = icmp eq i32 %call9, 0
  br i1 %cmp10, label %if.end34, label %if.else12

if.else12:                                        ; preds = %if.else8
  %call13 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([7 x i8]* @.str13, i64 0, i64 0)) #1
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.end34, label %if.else16

if.else16:                                        ; preds = %if.else12
  %call17 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([7 x i8]* @.str15, i64 0, i64 0)) #1
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.end34, label %if.else20

if.else20:                                        ; preds = %if.else16
  %call21 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([8 x i8]* @.str17, i64 0, i64 0)) #1
  %cmp22 = icmp eq i32 %call21, 0
  br i1 %cmp22, label %if.end34, label %if.else24

if.else24:                                        ; preds = %if.else20
  %call25 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([6 x i8]* @.str19, i64 0, i64 0)) #1
  %cmp26 = icmp eq i32 %call25, 0
  %.name = select i1 %cmp26, i8* getelementptr inbounds ([12 x i8]* @.str20, i64 0, i64 0), i8* %name
  br label %if.end34

if.end34:                                         ; preds = %if.else24, %if.else20, %if.else16, %if.else12, %if.else8, %if.else4, %if.else, %entry
  %name.addr.0 = phi i8* [ getelementptr inbounds ([12 x i8]* @.str7, i64 0, i64 0), %entry ], [ getelementptr inbounds ([9 x i8]* @.str9, i64 0, i64 0), %if.else ], [ getelementptr inbounds ([15 x i8]* @.str11, i64 0, i64 0), %if.else4 ], [ getelementptr inbounds ([14 x i8]* @.str12, i64 0, i64 0), %if.else8 ], [ getelementptr inbounds ([19 x i8]* @.str14, i64 0, i64 0), %if.else12 ], [ getelementptr inbounds ([8 x i8]* @.str16, i64 0, i64 0), %if.else16 ], [ getelementptr inbounds ([8 x i8]* @.str18, i64 0, i64 0), %if.else20 ], [ %.name, %if.else24 ]
  %0 = load i32* @extra_warnings, align 4, !tbaa !9
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end42, label %if.then35

if.then35:                                        ; preds = %if.end34
  switch i32 %code, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb36
    i32 3, label %sw.bb37
    i32 4, label %sw.bb38
    i32 5, label %sw.bb39
    i32 6, label %sw.bb40
    i32 7, label %sw.bb41
  ]

sw.bb:                                            ; preds = %if.then35
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([26 x i8]* @.str21, i64 0, i64 0), i8* %name.addr.0) #1
  br label %if.end42

sw.bb36:                                          ; preds = %if.then35
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([25 x i8]* @.str22, i64 0, i64 0), i8* %name.addr.0) #1
  br label %if.end42

sw.bb37:                                          ; preds = %if.then35
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([25 x i8]* @.str23, i64 0, i64 0), i8* %name.addr.0) #1
  br label %if.end42

sw.bb38:                                          ; preds = %if.then35
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([26 x i8]* @.str24, i64 0, i64 0), i8* %name.addr.0) #1
  br label %if.end42

sw.bb39:                                          ; preds = %if.then35
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([28 x i8]* @.str25, i64 0, i64 0), i8* %name.addr.0) #1
  br label %if.end42

sw.bb40:                                          ; preds = %if.then35
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([30 x i8]* @.str26, i64 0, i64 0), i8* %name.addr.0) #1
  br label %if.end42

sw.bb41:                                          ; preds = %if.then35
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([30 x i8]* @.str27, i64 0, i64 0), i8* %name.addr.0) #1
  br label %if.end42

sw.default:                                       ; preds = %if.then35
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0), i32 5819, i8* getelementptr inbounds ([7 x i8]* @__FUNCTION__.mtherr, i64 0, i64 0)) #7
  unreachable

if.end42:                                         ; preds = %if.end34, %sw.bb, %sw.bb36, %sw.bb37, %sw.bb38, %sw.bb39, %sw.bb40, %sw.bb41
  %add = add nsw i32 %code, 1
  store i32 %add, i32* @merror, align 4, !tbaa !9
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #5

; Function Attrs: nounwind uwtable
define internal fastcc void @asctoeg(i8* nocapture readonly %ss, i16* nocapture %y, i32 %oprec) #0 {
entry:
  %yy = alloca [9 x i16], align 16
  %xt = alloca [9 x i16], align 16
  %tt = alloca [9 x i16], align 16
  %call = call i64 @strlen(i8* %ss) #1
  %add = add i64 %call, 1
  %0 = alloca i8, i64 %add, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %ss.addr.0 = phi i8* [ %ss, %entry ], [ %incdec.ptr, %while.cond ]
  %1 = load i8* %ss.addr.0, align 1, !tbaa !6
  %cmp = icmp eq i8 %1, 32
  %incdec.ptr = getelementptr inbounds i8* %ss.addr.0, i64 1
  br i1 %cmp, label %while.cond, label %while.cond2

while.cond2:                                      ; preds = %while.cond, %while.cond2.while.cond2_crit_edge
  %2 = phi i8 [ %.pre, %while.cond2.while.cond2_crit_edge ], [ %1, %while.cond ]
  %sp.0 = phi i8* [ %incdec.ptr4, %while.cond2.while.cond2_crit_edge ], [ %0, %while.cond ]
  %ss.addr.1 = phi i8* [ %incdec.ptr3, %while.cond2.while.cond2_crit_edge ], [ %ss.addr.0, %while.cond ]
  %incdec.ptr3 = getelementptr inbounds i8* %ss.addr.1, i64 1
  store i8 %2, i8* %sp.0, align 1, !tbaa !6
  %cmp6 = icmp eq i8 %2, 0
  br i1 %cmp6, label %while.end9, label %while.cond2.while.cond2_crit_edge

while.cond2.while.cond2_crit_edge:                ; preds = %while.cond2
  %incdec.ptr4 = getelementptr inbounds i8* %sp.0, i64 1
  %.pre = load i8* %incdec.ptr3, align 1, !tbaa !6
  br label %while.cond2

while.end9:                                       ; preds = %while.cond2
  %3 = load i8* %0, align 1, !tbaa !6
  %cmp11 = icmp eq i8 %3, 48
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.end9
  %arrayidx13 = getelementptr inbounds i8* %0, i64 1
  %4 = load i8* %arrayidx13, align 1, !tbaa !6
  switch i8 %4, label %if.end [
    i8 120, label %if.then
    i8 88, label %if.then
  ]

if.then:                                          ; preds = %land.lhs.true, %land.lhs.true
  %add.ptr = getelementptr inbounds i8* %0, i64 2
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %if.then, %while.end9
  %s.0 = phi i8* [ %add.ptr, %if.then ], [ %0, %while.end9 ], [ %0, %land.lhs.true ]
  %base.0 = phi i32 [ 16, %if.then ], [ 10, %while.end9 ], [ 10, %land.lhs.true ]
  %5 = load i32* @rndprc, align 4, !tbaa !9
  store i32 80, i32* @rndprc, align 4, !tbaa !9
  %arraydecay = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 0
  %xi4.i = bitcast [9 x i16]* %yy to i8*
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  %cmp51 = icmp eq i32 %base.0, 16
  %arrayidx113 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 2
  %add.ptr.i523 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 8
  %incdec.ptr.i524 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 7
  %incdec.ptr.1.i = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 6
  %incdec.ptr.2.i = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 5
  %incdec.ptr.3.i = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 4
  %incdec.ptr.4.i = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 3
  %xi4.i701 = bitcast [9 x i16]* %xt to i8*
  %arrayidx143 = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 7
  %add.ptr.i703 = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 8
  %incdec.ptr.1.i720 = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 6
  %incdec.ptr.2.i729 = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 5
  %incdec.ptr.3.i738 = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 4
  %incdec.ptr.4.i747 = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 3
  %incdec.ptr.5.i756 = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 2
  %arraydecay135 = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 0
  %incdec.ptr.i619 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 1
  %incdec.ptr1.i = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 1
  %cmp150 = icmp eq i32 %base.0, 10
  br label %nxtcom

nxtcom:                                           ; preds = %donchr, %if.end
  %sgnflg.0 = phi i32 [ 0, %if.end ], [ %sgnflg.1, %donchr ]
  %nexp.0 = phi i32 [ 0, %if.end ], [ %nexp.5, %donchr ]
  %prec.0 = phi i32 [ 0, %if.end ], [ %prec.1, %donchr ]
  %lost.0 = phi i32 [ 0, %if.end ], [ %lost.2, %donchr ]
  %trail.0 = phi i32 [ 0, %if.end ], [ %trail.2, %donchr ]
  %decflg.0 = phi i32 [ 0, %if.end ], [ %decflg.1, %donchr ]
  %nsign.0 = phi i16 [ 0, %if.end ], [ %nsign.2, %donchr ]
  %s.1 = phi i8* [ %s.0, %if.end ], [ %incdec.ptr178, %donchr ]
  %6 = load i8* %s.1, align 1, !tbaa !6
  %idxprom = zext i8 %6 to i64
  %arrayidx21 = getelementptr inbounds [256 x i8]* @_hex_value, i64 0, i64 %idxprom
  %7 = load i8* %arrayidx21, align 1, !tbaa !6
  %conv22 = sext i8 %7 to i32
  %cmp23 = icmp sgt i8 %7, -1
  %cmp26 = icmp slt i32 %conv22, %base.0
  %or.cond = and i1 %cmp23, %cmp26
  br i1 %or.cond, label %if.then28, label %if.end159

if.then28:                                        ; preds = %nxtcom
  %cmp32 = icmp eq i32 %decflg.0, 0
  %8 = or i32 %decflg.0, %prec.0
  %9 = icmp eq i32 %8, 0
  %cmp35 = icmp eq i8 %7, 0
  %or.cond386 = and i1 %9, %cmp35
  br i1 %or.cond386, label %donchr, label %if.end38

if.end38:                                         ; preds = %if.then28
  %cmp39 = icmp eq i32 %trail.0, 0
  %cmp42 = icmp ne i32 %decflg.0, 0
  %or.cond387 = and i1 %cmp39, %cmp42
  br i1 %or.cond387, label %while.cond45.preheader, label %if.end112

while.cond45.preheader:                           ; preds = %if.end38
  br i1 %cmp51, label %while.cond45.us, label %while.cond45

while.cond45.us:                                  ; preds = %while.cond45.preheader, %while.body60.us
  %10 = phi i8 [ %.pre967, %while.body60.us ], [ %6, %while.cond45.preheader ]
  %sp.1.us = phi i8* [ %incdec.ptr61.us, %while.body60.us ], [ %s.1, %while.cond45.preheader ]
  %idxprom47.us = zext i8 %10 to i64
  %arrayidx48.us = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom47.us
  %11 = load i16* %arrayidx48.us, align 2, !tbaa !1
  %12 = and i16 %11, 260
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %while.end62, label %while.body60.us

while.body60.us:                                  ; preds = %while.cond45.us
  %incdec.ptr61.us = getelementptr inbounds i8* %sp.1.us, i64 1
  %.pre967 = load i8* %incdec.ptr61.us, align 1, !tbaa !6
  br label %while.cond45.us

while.cond45:                                     ; preds = %while.cond45.preheader, %while.body60
  %14 = phi i8 [ %.pre969, %while.body60 ], [ %6, %while.cond45.preheader ]
  %sp.1 = phi i8* [ %incdec.ptr61, %while.body60 ], [ %s.1, %while.cond45.preheader ]
  %idxprom47 = zext i8 %14 to i64
  %arrayidx48 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom47
  %15 = load i16* %arrayidx48, align 2, !tbaa !1
  %and50 = and i16 %15, 4
  %tobool = icmp eq i16 %and50, 0
  br i1 %tobool, label %while.end62, label %while.body60

while.body60:                                     ; preds = %while.cond45
  %incdec.ptr61 = getelementptr inbounds i8* %sp.1, i64 1
  %.pre969 = load i8* %incdec.ptr61, align 1, !tbaa !6
  br label %while.cond45

while.end62:                                      ; preds = %while.cond45, %while.cond45.us
  %.lcssa = phi i8 [ %10, %while.cond45.us ], [ %14, %while.cond45 ]
  %sp.1.lcssa = phi i8* [ %sp.1.us, %while.cond45.us ], [ %sp.1, %while.cond45 ]
  %conv63521 = zext i8 %.lcssa to i32
  %and64 = and i32 %conv63521, 127
  switch i32 %base.0, label %land.lhs.true82 [
    i32 10, label %lor.lhs.false67
    i32 16, label %lor.lhs.false76
  ]

lor.lhs.false67:                                  ; preds = %while.end62
  switch i32 %and64, label %unexpected_char_error [
    i32 101, label %while.cond100.preheader
    i32 69, label %while.cond100.preheader
    i32 44, label %while.cond100.preheader
    i32 32, label %while.cond100.preheader
    i32 13, label %while.cond100.preheader
    i32 10, label %while.cond100.preheader
    i32 0, label %while.cond100.preheader
  ]

lor.lhs.false76:                                  ; preds = %while.end62
  switch i32 %and64, label %unexpected_char_error [
    i32 112, label %while.cond100.preheader
    i32 80, label %while.cond100.preheader
    i32 44, label %while.cond100.preheader
    i32 32, label %while.cond100.preheader
    i32 13, label %while.cond100.preheader
    i32 10, label %while.cond100.preheader
    i32 0, label %while.cond100.preheader
  ]

land.lhs.true82:                                  ; preds = %while.end62
  switch i32 %and64, label %unexpected_char_error [
    i32 44, label %while.cond100.preheader
    i32 32, label %while.cond100.preheader
    i32 13, label %while.cond100.preheader
    i32 10, label %while.cond100.preheader
    i32 0, label %while.cond100.preheader
  ]

while.cond100.preheader:                          ; preds = %land.lhs.true82, %land.lhs.true82, %land.lhs.true82, %land.lhs.true82, %land.lhs.true82, %lor.lhs.false76, %lor.lhs.false76, %lor.lhs.false76, %lor.lhs.false76, %lor.lhs.false76, %lor.lhs.false76, %lor.lhs.false76, %lor.lhs.false67, %lor.lhs.false67, %lor.lhs.false67, %lor.lhs.false67, %lor.lhs.false67, %lor.lhs.false67, %lor.lhs.false67
  %sp.2939 = getelementptr inbounds i8* %sp.1.lcssa, i64 -1
  %16 = load i8* %sp.2939, align 1, !tbaa !6
  %cmp102940 = icmp eq i8 %16, 48
  br i1 %cmp102940, label %while.body104, label %while.end106

while.body104:                                    ; preds = %while.cond100.preheader, %while.body104
  %sp.2941 = phi i8* [ %sp.2, %while.body104 ], [ %sp.2939, %while.cond100.preheader ]
  store i8 122, i8* %sp.2941, align 1, !tbaa !6
  %sp.2 = getelementptr inbounds i8* %sp.2941, i64 -1
  %17 = load i8* %sp.2, align 1, !tbaa !6
  %cmp102 = icmp eq i8 %17, 48
  br i1 %cmp102, label %while.body104, label %while.cond100.while.end106_crit_edge

while.cond100.while.end106_crit_edge:             ; preds = %while.body104
  %.pre968 = load i8* %s.1, align 1, !tbaa !6
  br label %while.end106

while.end106:                                     ; preds = %while.cond100.while.end106_crit_edge, %while.cond100.preheader
  %18 = phi i8 [ %.pre968, %while.cond100.while.end106_crit_edge ], [ %6, %while.cond100.preheader ]
  %cmp108 = icmp eq i8 %18, 122
  br i1 %cmp108, label %donchr, label %if.end112

if.end112:                                        ; preds = %while.end106, %if.end38
  %trail.1 = phi i32 [ 1, %while.end106 ], [ %trail.0, %if.end38 ]
  %19 = load i16* %arrayidx113, align 4, !tbaa !1
  %20 = bitcast i16* %arrayidx113 to i32*
  %21 = load i32* %20, align 4
  %22 = trunc i32 %21 to i16
  %cmp115 = icmp eq i16 %22, 0
  %23 = lshr i32 %21, 16
  br i1 %cmp115, label %if.then117, label %if.else146

if.then117:                                       ; preds = %if.end112
  br i1 %cmp51, label %if.then120, label %if.else

if.then120:                                       ; preds = %if.then117
  %add123 = add nsw i32 %nexp.0, 4
  %add123.nexp.0 = select i1 %cmp42, i32 %add123, i32 %nexp.0
  %24 = load i16* %add.ptr.i523, align 16, !tbaa !1
  %.lobit.i = lshr i16 %24, 15
  %25 = load i16* %incdec.ptr.i524, align 2, !tbaa !1
  %.lobit.1.i = lshr i16 %25, 15
  %shl.1.i = shl i16 %25, 1
  %26 = or i16 %shl.1.i, %.lobit.i
  store i16 %26, i16* %incdec.ptr.i524, align 2, !tbaa !1
  %27 = load i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %.lobit.2.i = lshr i16 %27, 15
  %shl.2.i = shl i16 %27, 1
  %28 = or i16 %shl.2.i, %.lobit.1.i
  store i16 %28, i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %29 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %.lobit.3.i = lshr i16 %29, 15
  %shl.3.i = shl i16 %29, 1
  %30 = or i16 %shl.3.i, %.lobit.2.i
  store i16 %30, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %31 = bitcast i16* %incdec.ptr.3.i to i32*
  %32 = load i32* %31, align 8
  %33 = bitcast i16* %incdec.ptr.3.i to i64*
  %34 = load i64* %33, align 8
  %35 = trunc i64 %34 to i16
  %.lobit.4.i = lshr i16 %35, 15
  %shl.4.i = shl i16 %35, 1
  %36 = or i16 %shl.4.i, %.lobit.3.i
  %.lobit.5.i1007 = lshr i32 %21, 31
  %shl.5.i1008 = shl nuw nsw i32 %23, 1
  %shl.5.i = trunc i32 %shl.5.i1008 to i16
  %37 = or i16 %shl.5.i, %.lobit.4.i
  %38 = lshr i16 %24, 14
  %.lobit.i540 = and i16 %38, 1
  %.lobit.1.i5431009 = lshr i64 %34, 63
  %.lobit.1.i543 = trunc i64 %.lobit.1.i5431009 to i16
  %39 = lshr i64 %34, 47
  %.tr = trunc i64 %39 to i16
  %shl.1.i544 = and i16 %.tr, 16382
  %40 = or i16 %shl.1.i544, %.lobit.i540
  %.lobit.2.i5461011 = lshr i64 %34, 47
  %.lobit.2.i5461011.tr = trunc i64 %.lobit.2.i5461011 to i16
  %.lobit.2.i546 = and i16 %.lobit.2.i5461011.tr, 1
  %41 = lshr i64 %34, 31
  %.tr1013 = trunc i64 %41 to i16
  %shl.2.i547 = and i16 %.tr1013, 16382
  %42 = or i16 %shl.2.i547, %.lobit.1.i543
  %.lobit.3.i5491014 = lshr i32 %32, 31
  %.lobit.3.i549 = trunc i32 %.lobit.3.i5491014 to i16
  %43 = lshr i32 %32, 15
  %.tr1016 = trunc i32 %43 to i16
  %shl.3.i550 = and i16 %.tr1016, 16382
  %44 = or i16 %shl.3.i550, %.lobit.2.i546
  %45 = lshr i16 %35, 14
  %.lobit.4.i552 = and i16 %45, 1
  %shl.4.i553 = shl i16 %36, 1
  %46 = or i16 %shl.4.i553, %.lobit.3.i549
  %.lobit.5.i5551017 = lshr i32 %21, 30
  %.lobit.5.i5551017.tr = trunc i32 %.lobit.5.i5551017 to i16
  %.lobit.5.i555 = and i16 %.lobit.5.i5551017.tr, 1
  %shl.5.i556 = shl i16 %37, 1
  %47 = or i16 %shl.5.i556, %.lobit.4.i552
  %shl.6.i5581019 = shl nuw nsw i32 %.lobit.5.i1007, 1
  %shl.6.i558 = trunc i32 %shl.6.i5581019 to i16
  %48 = or i16 %shl.6.i558, %.lobit.5.i555
  %49 = lshr i16 %24, 13
  %.lobit.i560 = and i16 %49, 1
  %.lobit.1.i5631021 = lshr i64 %34, 62
  %.lobit.1.i5631021.tr = trunc i64 %.lobit.1.i5631021 to i16
  %.lobit.1.i563 = and i16 %.lobit.1.i5631021.tr, 1
  %shl.1.i564 = shl nuw nsw i16 %40, 1
  %50 = or i16 %shl.1.i564, %.lobit.i560
  %.lobit.2.i5661023 = lshr i64 %34, 46
  %.lobit.2.i5661023.tr = trunc i64 %.lobit.2.i5661023 to i16
  %.lobit.2.i566 = and i16 %.lobit.2.i5661023.tr, 1
  %shl.2.i567 = shl nuw nsw i16 %42, 1
  %51 = or i16 %shl.2.i567, %.lobit.1.i563
  %.lobit.3.i5691025 = lshr i32 %32, 30
  %.lobit.3.i5691025.tr = trunc i32 %.lobit.3.i5691025 to i16
  %.lobit.3.i569 = and i16 %.lobit.3.i5691025.tr, 1
  %shl.3.i570 = shl nuw nsw i16 %44, 1
  %52 = or i16 %shl.3.i570, %.lobit.2.i566
  %53 = lshr i16 %35, 13
  %.lobit.4.i572 = and i16 %53, 1
  %shl.4.i573 = shl i16 %46, 1
  %54 = or i16 %shl.4.i573, %.lobit.3.i569
  %55 = lshr i32 %21, 29
  %56 = trunc i32 %55 to i16
  %.lobit.5.i575 = and i16 %56, 1
  %shl.5.i576 = shl i16 %47, 1
  %57 = or i16 %shl.5.i576, %.lobit.4.i572
  %shl.6.i578 = shl nuw nsw i16 %48, 1
  %58 = or i16 %shl.6.i578, %.lobit.5.i575
  %59 = lshr i16 %24, 12
  %.lobit.i580 = and i16 %59, 1
  %shl.i581 = shl i16 %24, 4
  store i16 %shl.i581, i16* %add.ptr.i523, align 16, !tbaa !1
  %60 = lshr i64 %34, 61
  %61 = trunc i64 %60 to i16
  %.lobit.1.i583 = and i16 %61, 1
  %shl.1.i584 = shl nuw i16 %50, 1
  %62 = or i16 %shl.1.i584, %.lobit.i580
  store i16 %62, i16* %incdec.ptr.i524, align 2, !tbaa !1
  %63 = lshr i64 %34, 45
  %64 = trunc i64 %63 to i16
  %.lobit.2.i586 = and i16 %64, 1
  %shl.2.i587 = shl nuw i16 %51, 1
  %65 = or i16 %shl.2.i587, %.lobit.1.i583
  store i16 %65, i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %66 = lshr i32 %32, 29
  %67 = trunc i32 %66 to i16
  %.lobit.3.i589 = and i16 %67, 1
  %shl.3.i590 = shl nuw i16 %52, 1
  %68 = or i16 %shl.3.i590, %.lobit.2.i586
  store i16 %68, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %69 = lshr i16 %35, 12
  %.lobit.4.i592 = and i16 %69, 1
  %shl.4.i593 = shl i16 %54, 1
  %70 = or i16 %shl.4.i593, %.lobit.3.i589
  store i16 %70, i16* %incdec.ptr.3.i, align 8, !tbaa !1
  %71 = lshr i32 %21, 28
  %72 = trunc i32 %71 to i16
  %.lobit.5.i595 = and i16 %72, 1
  %shl.5.i596 = shl i16 %57, 1
  %73 = or i16 %shl.5.i596, %.lobit.4.i592
  store i16 %73, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %shl.6.i598 = shl nuw nsw i16 %58, 1
  %74 = or i16 %shl.6.i598, %.lobit.5.i595
  store i16 %74, i16* %arrayidx113, align 4, !tbaa !1
  br label %if.end140

if.else:                                          ; preds = %if.then117
  %add131 = zext i1 %cmp42 to i32
  %add131.nexp.0 = add nsw i32 %add131, %nexp.0
  %75 = load i16* %add.ptr.i523, align 16, !tbaa !1
  %.lobit.i600 = lshr i16 %75, 15
  %shl.i601 = shl i16 %75, 1
  store i16 %shl.i601, i16* %add.ptr.i523, align 16, !tbaa !1
  %76 = load i16* %incdec.ptr.i524, align 2, !tbaa !1
  %.lobit.1.i603 = lshr i16 %76, 15
  %shl.1.i604 = shl i16 %76, 1
  %77 = or i16 %shl.1.i604, %.lobit.i600
  store i16 %77, i16* %incdec.ptr.i524, align 2, !tbaa !1
  %78 = load i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %.lobit.2.i606 = lshr i16 %78, 15
  %shl.2.i607 = shl i16 %78, 1
  %79 = or i16 %shl.2.i607, %.lobit.1.i603
  store i16 %79, i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %80 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %.lobit.3.i609 = lshr i16 %80, 15
  %shl.3.i610 = shl i16 %80, 1
  %81 = or i16 %shl.3.i610, %.lobit.2.i606
  store i16 %81, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %82 = bitcast i16* %incdec.ptr.3.i to i32*
  %83 = bitcast i16* %incdec.ptr.3.i to i64*
  %84 = load i64* %83, align 8
  %85 = trunc i64 %84 to i32
  %86 = trunc i64 %84 to i16
  %.lobit.4.i612 = lshr i16 %86, 15
  %shl.4.i613 = shl i16 %86, 1
  %87 = or i16 %shl.4.i613, %.lobit.3.i609
  store i16 %87, i16* %incdec.ptr.3.i, align 8, !tbaa !1
  %.lobit.5.i615988 = lshr i32 %21, 31
  %.lobit.5.i615 = trunc i32 %.lobit.5.i615988 to i16
  %shl.5.i616989 = shl nuw nsw i32 %23, 1
  %shl.5.i616 = trunc i32 %shl.5.i616989 to i16
  %88 = or i16 %shl.5.i616, %.lobit.4.i612
  store i16 %88, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %shl.6.i618 = shl i16 %19, 1
  %89 = or i16 %shl.6.i618, %.lobit.5.i615
  store i16 %89, i16* %arrayidx113, align 4, !tbaa !1
  %90 = bitcast [9 x i16]* %yy to i64*
  %91 = load i64* %90, align 16
  %92 = trunc i64 %91 to i32
  %93 = trunc i64 %91 to i16
  store i16 %93, i16* %arraydecay135, align 16, !tbaa !1
  %94 = lshr i32 %92, 16
  %95 = trunc i32 %94 to i16
  store i16 %95, i16* %incdec.ptr1.i, align 2, !tbaa !1
  %96 = lshr i64 %91, 32
  %97 = lshr i64 %91, 48
  %98 = lshr i32 %85, 16
  %99 = lshr i64 %84, 32
  %100 = lshr i64 %84, 48
  %.lobit.1.i629990 = lshr i64 %84, 63
  %.lobit.2.i632992 = lshr i64 %84, 47
  %.lobit.2.i632992.tr = trunc i64 %.lobit.2.i632992 to i16
  %.lobit.2.i632 = and i16 %.lobit.2.i632992.tr, 1
  %shl.2.i633993 = shl nuw nsw i64 %99, 1
  %101 = or i64 %shl.2.i633993, %.lobit.1.i629990
  %102 = trunc i64 %101 to i16
  %.lobit.3.i635994 = lshr i32 %85, 31
  %.lobit.3.i635 = trunc i32 %.lobit.3.i635994 to i16
  %shl.3.i636995 = shl nuw nsw i32 %98, 1
  %shl.3.i636 = trunc i32 %shl.3.i636995 to i16
  %103 = or i16 %shl.3.i636, %.lobit.2.i632
  %104 = lshr i16 %86, 14
  %.lobit.4.i638 = and i16 %104, 1
  %shl.4.i639 = shl i16 %87, 1
  %105 = or i16 %shl.4.i639, %.lobit.3.i635
  %.lobit.5.i641996 = lshr i64 %91, 63
  %shl.5.i642997 = shl nuw nsw i64 %97, 1
  %shl.5.i642 = trunc i64 %shl.5.i642997 to i16
  %106 = or i16 %shl.5.i642, %.lobit.4.i638
  %shl.6.i644998 = shl nuw nsw i64 %96, 1
  %107 = or i64 %shl.6.i644998, %.lobit.5.i641996
  %108 = trunc i64 %107 to i16
  store i16 0, i16* %add.ptr.i703, align 16, !tbaa !1
  %.lobit.1.i662999 = lshr i64 %84, 62
  %.lobit.1.i662999.tr = trunc i64 %.lobit.1.i662999 to i16
  %.lobit.1.i662 = and i16 %.lobit.1.i662999.tr, 1
  %shl.1.i6631001 = shl nuw nsw i64 %100, 2
  %shl.1.i663 = trunc i64 %shl.1.i6631001 to i16
  store i16 %shl.1.i663, i16* %arrayidx143, align 2, !tbaa !1
  %.lobit.2.i665 = lshr i16 %102, 15
  %shl.2.i666 = shl i16 %102, 1
  %109 = or i16 %shl.2.i666, %.lobit.1.i662
  store i16 %109, i16* %incdec.ptr.1.i720, align 4, !tbaa !1
  %.lobit.3.i6681003 = lshr i32 %85, 30
  %.lobit.3.i6681003.tr = trunc i32 %.lobit.3.i6681003 to i16
  %.lobit.3.i668 = and i16 %.lobit.3.i6681003.tr, 1
  %shl.3.i669 = shl i16 %103, 1
  %110 = or i16 %shl.3.i669, %.lobit.2.i665
  store i16 %110, i16* %incdec.ptr.2.i729, align 2, !tbaa !1
  %111 = lshr i16 %86, 13
  %.lobit.4.i671 = and i16 %111, 1
  %shl.4.i672 = shl i16 %105, 1
  %112 = or i16 %shl.4.i672, %.lobit.3.i668
  store i16 %112, i16* %incdec.ptr.3.i738, align 8, !tbaa !1
  %.lobit.5.i6741005 = lshr i64 %91, 62
  %.lobit.5.i6741005.tr = trunc i64 %.lobit.5.i6741005 to i16
  %.lobit.5.i674 = and i16 %.lobit.5.i6741005.tr, 1
  %shl.5.i675 = shl i16 %106, 1
  %113 = or i16 %shl.5.i675, %.lobit.4.i671
  store i16 %113, i16* %incdec.ptr.4.i747, align 2, !tbaa !1
  %shl.6.i677 = shl i16 %108, 1
  %114 = or i16 %shl.6.i677, %.lobit.5.i674
  store i16 %114, i16* %incdec.ptr.5.i756, align 4, !tbaa !1
  %115 = load i16* %add.ptr.i523, align 16, !tbaa !1
  %116 = trunc i64 %shl.1.i6631001 to i32
  %conv.1.i = and i32 %116, 65532
  %117 = load i16* %incdec.ptr.i524, align 2, !tbaa !1
  %conv2.1.i = zext i16 %117 to i32
  %add3.1.i = add i32 %conv2.1.i, %conv.1.i
  %and.1.i = lshr i32 %add3.1.i, 16
  %and.lobit.1.i = and i32 %and.1.i, 1
  %conv4.1.i = trunc i32 %add3.1.i to i16
  store i16 %conv4.1.i, i16* %incdec.ptr.i524, align 2, !tbaa !1
  %conv.2.i = zext i16 %109 to i32
  %118 = load i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %conv2.2.i = zext i16 %118 to i32
  %add.2.i = add i32 %conv2.2.i, %conv.2.i
  %add3.2.i = add i32 %add.2.i, %and.lobit.1.i
  %and.2.i = lshr i32 %add3.2.i, 16
  %and.lobit.2.i = and i32 %and.2.i, 1
  %conv4.2.i = trunc i32 %add3.2.i to i16
  store i16 %conv4.2.i, i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %conv.3.i = zext i16 %110 to i32
  %119 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %conv2.3.i = zext i16 %119 to i32
  %add.3.i = add i32 %conv2.3.i, %conv.3.i
  %add3.3.i = add i32 %add.3.i, %and.lobit.2.i
  %and.3.i = lshr i32 %add3.3.i, 16
  %and.lobit.3.i = and i32 %and.3.i, 1
  %conv4.3.i = trunc i32 %add3.3.i to i16
  store i16 %conv4.3.i, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %conv.4.i = zext i16 %112 to i32
  %120 = load i32* %82, align 8
  %121 = bitcast i16* %incdec.ptr.3.i to i64*
  %122 = load i64* %121, align 8
  %123 = trunc i64 %122 to i32
  %conv2.4.i = and i32 %123, 65535
  %add.4.i = add i32 %conv2.4.i, %conv.4.i
  %add3.4.i = add i32 %add.4.i, %and.lobit.3.i
  %and.4.i = lshr i32 %add3.4.i, 16
  %and.lobit.4.i = and i32 %and.4.i, 1
  %conv4.4.i = trunc i32 %add3.4.i to i16
  store i16 %conv4.4.i, i16* %incdec.ptr.3.i, align 8, !tbaa !1
  %conv.5.i = zext i16 %113 to i32
  %124 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %conv2.5.i = zext i16 %124 to i32
  %add.5.i = add i32 %conv2.5.i, %conv.5.i
  %add3.5.i = add i32 %add.5.i, %and.lobit.4.i
  %and.5.i = lshr i32 %add3.5.i, 16
  %and.lobit.5.i = and i32 %and.5.i, 1
  %conv4.5.i = trunc i32 %add3.5.i to i16
  store i16 %conv4.5.i, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %conv.6.i = zext i16 %114 to i32
  %125 = load i32* %20, align 4
  %add.6.i = add i32 %125, %conv.6.i
  %add3.6.i = add i32 %add.6.i, %and.lobit.5.i
  %conv4.6.i = trunc i32 %add3.6.i to i16
  store i16 %conv4.6.i, i16* %arrayidx113, align 4, !tbaa !1
  %126 = lshr i64 %122, 48
  %127 = trunc i64 %126 to i16
  %128 = lshr i64 %122, 32
  %129 = trunc i64 %128 to i16
  %130 = lshr i32 %120, 16
  %131 = trunc i32 %130 to i16
  %132 = lshr i32 %125, 16
  %133 = trunc i32 %132 to i16
  br label %if.end140

if.end140:                                        ; preds = %if.else, %if.then120
  %134 = phi i16 [ %74, %if.then120 ], [ %conv4.6.i, %if.else ]
  %135 = phi i16 [ %73, %if.then120 ], [ %133, %if.else ]
  %136 = phi i16 [ %70, %if.then120 ], [ %conv4.4.i, %if.else ]
  %137 = phi i16 [ %68, %if.then120 ], [ %131, %if.else ]
  %138 = phi i16 [ %65, %if.then120 ], [ %129, %if.else ]
  %139 = phi i16 [ %62, %if.then120 ], [ %127, %if.else ]
  %140 = phi i16 [ %shl.i581, %if.then120 ], [ %115, %if.else ]
  %nexp.3 = phi i32 [ %add123.nexp.0, %if.then120 ], [ %add131.nexp.0, %if.else ]
  call void @llvm.memset.p0i8.i64(i8* %xi4.i701, i8 0, i64 18, i32 16, i1 false) #1
  %conv142 = sext i8 %7 to i16
  store i16 %conv142, i16* %arrayidx143, align 2, !tbaa !1
  store i16 %140, i16* %add.ptr.i523, align 16, !tbaa !1
  %conv.1.i713 = zext i16 %conv142 to i32
  %conv2.1.i714 = zext i16 %139 to i32
  %add3.1.i716 = add i32 %conv2.1.i714, %conv.1.i713
  %and.1.i717 = lshr i32 %add3.1.i716, 16
  %and.lobit.1.i718 = and i32 %and.1.i717, 1
  %conv4.1.i719 = trunc i32 %add3.1.i716 to i16
  store i16 %conv4.1.i719, i16* %incdec.ptr.i524, align 2, !tbaa !1
  %conv2.2.i723 = zext i16 %138 to i32
  %add3.2.i725 = add i32 %conv2.2.i723, %and.lobit.1.i718
  %and.2.i726 = lshr i32 %add3.2.i725, 16
  %and.lobit.2.i727 = and i32 %and.2.i726, 1
  %conv4.2.i728 = trunc i32 %add3.2.i725 to i16
  store i16 %conv4.2.i728, i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %conv2.3.i732 = zext i16 %137 to i32
  %add3.3.i734 = add i32 %conv2.3.i732, %and.lobit.2.i727
  %and.3.i735 = lshr i32 %add3.3.i734, 16
  %and.lobit.3.i736 = and i32 %and.3.i735, 1
  %conv4.3.i737 = trunc i32 %add3.3.i734 to i16
  store i16 %conv4.3.i737, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %conv2.4.i741 = zext i16 %136 to i32
  %add3.4.i743 = add i32 %conv2.4.i741, %and.lobit.3.i736
  %and.4.i744 = lshr i32 %add3.4.i743, 16
  %and.lobit.4.i745 = and i32 %and.4.i744, 1
  %conv4.4.i746 = trunc i32 %add3.4.i743 to i16
  store i16 %conv4.4.i746, i16* %incdec.ptr.3.i, align 8, !tbaa !1
  %conv2.5.i750 = zext i16 %135 to i32
  %add3.5.i752 = add i32 %conv2.5.i750, %and.lobit.4.i745
  %and.5.i753 = lshr i32 %add3.5.i752, 16
  %and.lobit.5.i754 = and i32 %and.5.i753, 1
  %conv4.5.i755 = trunc i32 %add3.5.i752 to i16
  store i16 %conv4.5.i755, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %conv2.6.i759 = zext i16 %134 to i32
  %add3.6.i761 = add i32 %conv2.6.i759, %and.lobit.5.i754
  %conv4.6.i762 = trunc i32 %add3.6.i761 to i16
  store i16 %conv4.6.i762, i16* %arrayidx113, align 4, !tbaa !1
  br label %if.end157

if.else146:                                       ; preds = %if.end112
  %or = or i32 %conv22, %lost.0
  br i1 %cmp32, label %if.then149, label %if.end157

if.then149:                                       ; preds = %if.else146
  br i1 %cmp150, label %if.then152, label %if.else153

if.then152:                                       ; preds = %if.then149
  %sub = add nsw i32 %nexp.0, -1
  br label %if.end157

if.else153:                                       ; preds = %if.then149
  %sub154 = add nsw i32 %nexp.0, -4
  br label %if.end157

if.end157:                                        ; preds = %if.else146, %if.else153, %if.then152, %if.end140
  %nexp.4 = phi i32 [ %nexp.3, %if.end140 ], [ %sub, %if.then152 ], [ %sub154, %if.else153 ], [ %nexp.0, %if.else146 ]
  %lost.1 = phi i32 [ %lost.0, %if.end140 ], [ %or, %if.then152 ], [ %or, %if.else153 ], [ %or, %if.else146 ]
  %add158 = add nsw i32 %prec.0, 1
  br label %donchr

if.end159:                                        ; preds = %nxtcom
  %conv160 = sext i8 %6 to i32
  switch i32 %conv160, label %unexpected_char_error [
    i32 122, label %donchr
    i32 69, label %for.body
    i32 101, label %for.body
    i32 80, label %for.body
    i32 112, label %for.body
    i32 46, label %sw.bb161
    i32 45, label %sw.bb165
    i32 43, label %sw.bb170
    i32 44, label %daldone
    i32 32, label %daldone
    i32 0, label %daldone
    i32 10, label %daldone
    i32 13, label %daldone
    i32 105, label %infinite
    i32 73, label %infinite
  ]

sw.bb161:                                         ; preds = %if.end159
  %tobool162 = icmp eq i32 %decflg.0, 0
  br i1 %tobool162, label %donchr, label %unexpected_char_error

sw.bb165:                                         ; preds = %if.end159
  %tobool166 = icmp eq i32 %sgnflg.0, 0
  br i1 %tobool166, label %donchr, label %unexpected_char_error

sw.bb170:                                         ; preds = %if.end159
  %tobool171 = icmp eq i32 %sgnflg.0, 0
  br i1 %tobool171, label %donchr, label %unexpected_char_error

unexpected_char_error:                            ; preds = %lor.lhs.false67, %land.lhs.true82, %lor.lhs.false76, %sw.bb161, %sw.bb165, %sw.bb170, %if.end159
  %nsign.1 = phi i16 [ %nsign.0, %land.lhs.true82 ], [ %nsign.0, %lor.lhs.false76 ], [ %nsign.0, %if.end159 ], [ %nsign.0, %sw.bb170 ], [ -1, %sw.bb165 ], [ %nsign.0, %sw.bb161 ], [ %nsign.0, %lor.lhs.false67 ]
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  store i16 32767, i16* %incdec.ptr.i619, align 2, !tbaa !1
  store i16 -16384, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  br label %aexit

donchr:                                           ; preds = %sw.bb170, %sw.bb165, %sw.bb161, %if.end159, %while.end106, %if.then28, %if.end157
  %sgnflg.1 = phi i32 [ %sgnflg.0, %if.then28 ], [ %sgnflg.0, %while.end106 ], [ %sgnflg.0, %if.end157 ], [ %sgnflg.0, %if.end159 ], [ %sgnflg.0, %sw.bb161 ], [ 1, %sw.bb165 ], [ 1, %sw.bb170 ]
  %nexp.5 = phi i32 [ %nexp.0, %if.then28 ], [ %nexp.0, %while.end106 ], [ %nexp.4, %if.end157 ], [ %nexp.0, %if.end159 ], [ %nexp.0, %sw.bb161 ], [ %nexp.0, %sw.bb165 ], [ %nexp.0, %sw.bb170 ]
  %prec.1 = phi i32 [ %prec.0, %if.then28 ], [ %prec.0, %while.end106 ], [ %add158, %if.end157 ], [ %prec.0, %if.end159 ], [ %prec.0, %sw.bb161 ], [ %prec.0, %sw.bb165 ], [ %prec.0, %sw.bb170 ]
  %lost.2 = phi i32 [ %lost.0, %if.then28 ], [ %lost.0, %while.end106 ], [ %lost.1, %if.end157 ], [ %lost.0, %if.end159 ], [ %lost.0, %sw.bb161 ], [ %lost.0, %sw.bb165 ], [ %lost.0, %sw.bb170 ]
  %trail.2 = phi i32 [ %trail.0, %if.then28 ], [ 1, %while.end106 ], [ %trail.1, %if.end157 ], [ %trail.0, %if.end159 ], [ %trail.0, %sw.bb161 ], [ %trail.0, %sw.bb165 ], [ %trail.0, %sw.bb170 ]
  %decflg.1 = phi i32 [ %decflg.0, %if.then28 ], [ %decflg.0, %while.end106 ], [ %decflg.0, %if.end157 ], [ %decflg.0, %if.end159 ], [ 1, %sw.bb161 ], [ %decflg.0, %sw.bb165 ], [ %decflg.0, %sw.bb170 ]
  %nsign.2 = phi i16 [ %nsign.0, %if.then28 ], [ %nsign.0, %while.end106 ], [ %nsign.0, %if.end157 ], [ %nsign.0, %if.end159 ], [ %nsign.0, %sw.bb161 ], [ -1, %sw.bb165 ], [ %nsign.0, %sw.bb170 ]
  %incdec.ptr178 = getelementptr inbounds i8* %s.1, i64 1
  br label %nxtcom

for.cond:                                         ; preds = %for.body
  %141 = trunc i64 %indvars.iv.next966 to i32
  %cmp179 = icmp slt i32 %141, 9
  br i1 %cmp179, label %for.body, label %aexit

for.body:                                         ; preds = %if.end159, %if.end159, %if.end159, %if.end159, %for.cond
  %indvars.iv965 = phi i64 [ %indvars.iv.next966, %for.cond ], [ 0, %if.end159 ], [ 0, %if.end159 ], [ 0, %if.end159 ], [ 0, %if.end159 ]
  %arrayidx182 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 %indvars.iv965
  %142 = load i16* %arrayidx182, align 2, !tbaa !1
  %cmp184 = icmp eq i16 %142, 0
  %indvars.iv.next966 = add nuw nsw i64 %indvars.iv965, 1
  br i1 %cmp184, label %for.cond, label %read_expnt

read_expnt:                                       ; preds = %for.body
  %incdec.ptr189 = getelementptr inbounds i8* %s.1, i64 1
  %143 = load i8* %incdec.ptr189, align 1, !tbaa !6
  %cmp191 = icmp eq i8 %143, 45
  %incdec.ptr194 = getelementptr inbounds i8* %s.1, i64 2
  %incdec.ptr194.incdec.ptr189 = select i1 %cmp191, i8* %incdec.ptr194, i8* %incdec.ptr189
  %144 = load i8* %incdec.ptr194.incdec.ptr189, align 1, !tbaa !6
  %cmp197 = icmp eq i8 %144, 43
  %incdec.ptr200 = getelementptr inbounds i8* %incdec.ptr194.incdec.ptr189, i64 1
  %incdec.ptr200.incdec.ptr194.incdec.ptr189 = select i1 %cmp197, i8* %incdec.ptr200, i8* %incdec.ptr194.incdec.ptr189
  br label %while.cond202

while.cond202:                                    ; preds = %read_expnt, %while.body210
  %exp.0 = phi i32 [ %add214, %while.body210 ], [ 0, %read_expnt ]
  %s.3 = phi i8* [ %incdec.ptr211, %while.body210 ], [ %incdec.ptr200.incdec.ptr194.incdec.ptr189, %read_expnt ]
  %145 = load i8* %s.3, align 1, !tbaa !6
  %conv203 = sext i8 %145 to i32
  %and204 = and i32 %conv203, 255
  %idxprom205519 = zext i32 %and204 to i64
  %arrayidx206 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom205519
  %146 = load i16* %arrayidx206, align 2, !tbaa !1
  %and208 = and i16 %146, 4
  %tobool209 = icmp eq i16 %and208, 0
  br i1 %tobool209, label %while.end219, label %while.body210

while.body210:                                    ; preds = %while.cond202
  %mul = mul nsw i32 %exp.0, 10
  %incdec.ptr211 = getelementptr inbounds i8* %s.3, i64 1
  %sub213 = add i32 %mul, -48
  %add214 = add i32 %sub213, %conv203
  %cmp215 = icmp sgt i32 %add214, 999999
  br i1 %cmp215, label %while.end219, label %while.cond202

while.end219:                                     ; preds = %while.cond202, %while.body210
  %exp.1 = phi i32 [ %add214, %while.body210 ], [ %exp.0, %while.cond202 ]
  %sub223 = sub nsw i32 0, %exp.1
  %sub223.exp.1 = select i1 %cmp191, i32 %sub223, i32 %exp.1
  %cmp225 = icmp sgt i32 %sub223.exp.1, 4932
  %or.cond408 = and i1 %cmp225, %cmp150
  br i1 %or.cond408, label %infinite, label %if.end233

infinite:                                         ; preds = %if.end159, %if.end159, %if.end251, %while.end219
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  store i16 32767, i16* %incdec.ptr.i619, align 2, !tbaa !1
  br label %aexit

if.end233:                                        ; preds = %while.end219
  %cmp234 = icmp slt i32 %sub223.exp.1, -4956
  %or.cond410 = and i1 %cmp234, %cmp150
  br i1 %or.cond410, label %zero, label %daldone

zero:                                             ; preds = %if.end261, %if.end233
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  br label %aexit

daldone:                                          ; preds = %if.end159, %if.end159, %if.end159, %if.end159, %if.end159, %if.end233
  %exp.3 = phi i32 [ %sub223.exp.1, %if.end233 ], [ 0, %if.end159 ], [ 0, %if.end159 ], [ 0, %if.end159 ], [ 0, %if.end159 ], [ 0, %if.end159 ]
  br i1 %cmp51, label %if.then244, label %if.end268

if.then244:                                       ; preds = %daldone
  %call246 = call fastcc i32 @enormlz(i16* %arraydecay)
  %cmp247 = icmp sgt i32 %call246, 80
  br i1 %cmp247, label %if.then249, label %if.end251

if.then249:                                       ; preds = %if.then244
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  br label %aexit

if.end251:                                        ; preds = %if.then244
  %147 = load i16* %incdec.ptr.i619, align 2, !tbaa !1
  %conv254 = zext i16 %147 to i32
  %sub252 = sub i32 16462, %nexp.0
  %add255 = add i32 %sub252, %exp.3
  %add256 = sub i32 %add255, %call246
  %sub257 = add i32 %add256, %conv254
  %cmp258 = icmp sgt i32 %sub257, 32767
  br i1 %cmp258, label %infinite, label %if.end261

if.end261:                                        ; preds = %if.end251
  %cmp262 = icmp slt i32 %sub257, 0
  br i1 %cmp262, label %zero, label %if.end265

if.end265:                                        ; preds = %if.end261
  %conv266 = trunc i32 %sub257 to i16
  store i16 %conv266, i16* %incdec.ptr.i619, align 2, !tbaa !1
  br label %expdon

if.end268:                                        ; preds = %daldone
  %sub269 = sub nsw i32 %exp.3, %nexp.0
  %cmp271934 = icmp sgt i32 %sub269, 0
  br i1 %cmp271934, label %land.rhs273.lr.ph, label %while.end296

land.rhs273.lr.ph:                                ; preds = %if.end268
  %.pre970 = load i16* %arrayidx113, align 4, !tbaa !1
  %148 = bitcast [9 x i16]* %yy to i64*
  br label %land.rhs273

land.rhs273:                                      ; preds = %land.rhs273.lr.ph, %if.end292
  %149 = phi i16 [ %.pre970, %land.rhs273.lr.ph ], [ %198, %if.end292 ]
  %nexp.6935 = phi i32 [ %sub269, %land.rhs273.lr.ph ], [ %sub293, %if.end292 ]
  %cmp276 = icmp eq i16 %149, 0
  br i1 %cmp276, label %while.body279, label %while.end296

while.body279:                                    ; preds = %land.rhs273
  %150 = load i64* %148, align 16
  %151 = trunc i64 %150 to i32
  %152 = trunc i64 %150 to i16
  store i16 %152, i16* %arraydecay135, align 16, !tbaa !1
  %153 = lshr i32 %151, 16
  %154 = trunc i32 %153 to i16
  store i16 %154, i16* %incdec.ptr1.i, align 2, !tbaa !1
  %155 = lshr i64 %150, 32
  %156 = lshr i64 %150, 48
  %157 = bitcast i16* %incdec.ptr.3.i to i32*
  %158 = load i32* %157, align 8
  %159 = bitcast i16* %incdec.ptr.3.i to i64*
  %160 = load i64* %159, align 8
  %161 = trunc i64 %160 to i32
  %162 = trunc i64 %160 to i16
  %163 = lshr i32 %161, 16
  %164 = lshr i64 %160, 32
  %165 = lshr i64 %160, 48
  %.lobit.1.i882971 = lshr i64 %160, 63
  %.lobit.2.i885973 = lshr i64 %160, 47
  %.lobit.2.i885973.tr = trunc i64 %.lobit.2.i885973 to i16
  %.lobit.2.i885 = and i16 %.lobit.2.i885973.tr, 1
  %shl.2.i886974 = shl nuw nsw i64 %164, 1
  %166 = or i64 %shl.2.i886974, %.lobit.1.i882971
  %167 = trunc i64 %166 to i16
  %.lobit.3.i888975 = lshr i32 %161, 31
  %.lobit.3.i888 = trunc i32 %.lobit.3.i888975 to i16
  %shl.3.i889976 = shl nuw nsw i32 %163, 1
  %shl.3.i889 = trunc i32 %shl.3.i889976 to i16
  %168 = or i16 %shl.3.i889, %.lobit.2.i885
  %.lobit.4.i891 = lshr i16 %162, 15
  %shl.4.i892 = shl i16 %162, 1
  %169 = or i16 %shl.4.i892, %.lobit.3.i888
  %.lobit.5.i894977 = lshr i64 %150, 63
  %shl.5.i895978 = shl nuw nsw i64 %156, 1
  %shl.5.i895 = trunc i64 %shl.5.i895978 to i16
  %170 = or i16 %shl.5.i895, %.lobit.4.i891
  %shl.6.i897979 = shl nuw nsw i64 %155, 1
  %171 = or i64 %shl.6.i897979, %.lobit.5.i894977
  %172 = trunc i64 %171 to i32
  %.lobit.1.i862980 = lshr i64 %160, 62
  %.lobit.1.i862980.tr = trunc i64 %.lobit.1.i862980 to i16
  %.lobit.1.i862 = and i16 %.lobit.1.i862980.tr, 1
  %shl.1.i863982 = shl nuw nsw i64 %165, 2
  %.lobit.2.i865 = lshr i16 %167, 15
  %shl.2.i866 = shl i16 %167, 1
  %173 = or i16 %shl.2.i866, %.lobit.1.i862
  %.lobit.3.i868984 = lshr i32 %161, 30
  %.lobit.3.i868984.tr = trunc i32 %.lobit.3.i868984 to i16
  %.lobit.3.i868 = and i16 %.lobit.3.i868984.tr, 1
  %shl.3.i869 = shl i16 %168, 1
  %174 = or i16 %shl.3.i869, %.lobit.2.i865
  %175 = lshr i16 %162, 14
  %.lobit.4.i871 = and i16 %175, 1
  %shl.4.i872 = shl i16 %169, 1
  %176 = or i16 %shl.4.i872, %.lobit.3.i868
  %.lobit.5.i874986 = lshr i64 %150, 62
  %.lobit.5.i874986.tr = trunc i64 %.lobit.5.i874986 to i32
  %.lobit.5.i874 = and i32 %.lobit.5.i874986.tr, 1
  %shl.5.i875 = shl i16 %170, 1
  %177 = or i16 %shl.5.i875, %.lobit.4.i871
  %shl.6.i877 = shl i32 %172, 1
  %178 = load i16* %add.ptr.i523, align 16, !tbaa !1
  %179 = trunc i64 %165 to i32
  %180 = trunc i64 %shl.1.i863982 to i32
  %conv2.1.i809 = and i32 %180, 65532
  %add3.1.i811 = add i32 %conv2.1.i809, %179
  %and.1.i812 = lshr i32 %add3.1.i811, 16
  %and.lobit.1.i813 = and i32 %and.1.i812, 1
  %conv4.1.i814 = trunc i32 %add3.1.i811 to i16
  %181 = trunc i64 %164 to i32
  %conv.2.i817 = and i32 %181, 65535
  %conv2.2.i818 = zext i16 %173 to i32
  %add.2.i819 = add i32 %conv2.2.i818, %conv.2.i817
  %add3.2.i820 = add i32 %add.2.i819, %and.lobit.1.i813
  %and.2.i821 = lshr i32 %add3.2.i820, 16
  %and.lobit.2.i822 = and i32 %and.2.i821, 1
  %conv4.2.i823 = trunc i32 %add3.2.i820 to i16
  %182 = lshr i32 %158, 16
  %conv2.3.i827 = zext i16 %174 to i32
  %add.3.i828 = add i32 %conv2.3.i827, %182
  %add3.3.i829 = add i32 %add.3.i828, %and.lobit.2.i822
  %and.3.i830 = lshr i32 %add3.3.i829, 16
  %and.lobit.3.i831 = and i32 %and.3.i830, 1
  %conv4.3.i832 = trunc i32 %add3.3.i829 to i16
  %trunc = trunc i64 %160 to i32
  %conv.4.i835 = and i32 %trunc, 65535
  %conv2.4.i836 = zext i16 %176 to i32
  %add.4.i837 = add i32 %conv2.4.i836, %conv.4.i835
  %add3.4.i838 = add i32 %add.4.i837, %and.lobit.3.i831
  %and.4.i839 = lshr i32 %add3.4.i838, 16
  %and.lobit.4.i840 = and i32 %and.4.i839, 1
  %conv4.4.i841 = trunc i32 %add3.4.i838 to i16
  %183 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %conv.5.i844 = zext i16 %183 to i32
  %conv2.5.i845 = zext i16 %177 to i32
  %add.5.i846 = add i32 %conv2.5.i845, %conv.5.i844
  %add3.5.i847 = add i32 %add.5.i846, %and.lobit.4.i840
  %and.5.i848 = lshr i32 %add3.5.i847, 16
  %and.lobit.5.i849 = and i32 %and.5.i848, 1
  %conv4.5.i850 = trunc i32 %add3.5.i847 to i16
  %184 = load i16* %arrayidx113, align 4, !tbaa !1
  %conv.6.i853 = zext i16 %184 to i32
  %conv2.6.i854 = or i32 %shl.6.i877, %.lobit.5.i874
  %add.6.i855 = add i32 %conv2.6.i854, %conv.6.i853
  %add3.6.i856 = add i32 %add.6.i855, %and.lobit.5.i849
  %conv4.6.i857 = trunc i32 %add3.6.i856 to i16
  %.lobit.i779 = lshr i16 %178, 15
  %shl.i780 = shl i16 %178, 1
  store i16 %shl.i780, i16* %add.ptr.i703, align 16, !tbaa !1
  %.lobit.1.i782 = lshr i16 %conv4.1.i814, 15
  %shl.1.i783 = shl i16 %conv4.1.i814, 1
  %185 = or i16 %shl.1.i783, %.lobit.i779
  store i16 %185, i16* %arrayidx143, align 2, !tbaa !1
  %.lobit.2.i785 = lshr i16 %conv4.2.i823, 15
  %shl.2.i786 = shl i16 %conv4.2.i823, 1
  %186 = or i16 %shl.2.i786, %.lobit.1.i782
  store i16 %186, i16* %incdec.ptr.1.i720, align 4, !tbaa !1
  %.lobit.3.i788 = lshr i16 %conv4.3.i832, 15
  %shl.3.i789 = shl i16 %conv4.3.i832, 1
  %187 = or i16 %shl.3.i789, %.lobit.2.i785
  store i16 %187, i16* %incdec.ptr.2.i729, align 2, !tbaa !1
  %.lobit.4.i791 = lshr i16 %conv4.4.i841, 15
  %shl.4.i792 = shl i16 %conv4.4.i841, 1
  %188 = or i16 %shl.4.i792, %.lobit.3.i788
  store i16 %188, i16* %incdec.ptr.3.i738, align 8, !tbaa !1
  %.lobit.5.i794 = lshr i16 %conv4.5.i850, 15
  %shl.5.i795 = shl i16 %conv4.5.i850, 1
  %189 = or i16 %shl.5.i795, %.lobit.4.i791
  store i16 %189, i16* %incdec.ptr.4.i747, align 2, !tbaa !1
  %shl.6.i797 = shl i16 %conv4.6.i857, 1
  %190 = or i16 %shl.6.i797, %.lobit.5.i794
  store i16 %190, i16* %incdec.ptr.5.i756, align 4, !tbaa !1
  %cmp289 = icmp eq i16 %190, 0
  br i1 %cmp289, label %if.end292, label %while.end296

if.end292:                                        ; preds = %while.body279
  %sub293 = add nsw i32 %nexp.6935, -1
  %191 = bitcast [9 x i16]* %xt to i64*
  %192 = load i64* %191, align 16
  %193 = trunc i64 %192 to i32
  %194 = trunc i64 %192 to i16
  store i16 %194, i16* %arraydecay, align 16, !tbaa !1
  %195 = lshr i32 %193, 16
  %196 = trunc i32 %195 to i16
  store i16 %196, i16* %incdec.ptr.i619, align 2, !tbaa !1
  %197 = lshr i64 %192, 32
  %198 = trunc i64 %197 to i16
  store i16 %198, i16* %arrayidx113, align 4, !tbaa !1
  %199 = lshr i64 %192, 48
  %200 = trunc i64 %199 to i16
  store i16 %200, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  store i16 %188, i16* %incdec.ptr.3.i, align 8, !tbaa !1
  store i16 %187, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  store i16 %186, i16* %incdec.ptr.1.i, align 4, !tbaa !1
  store i16 %185, i16* %incdec.ptr.i524, align 2, !tbaa !1
  store i16 0, i16* %add.ptr.i523, align 16, !tbaa !1
  %cmp271 = icmp sgt i32 %sub293, 0
  br i1 %cmp271, label %land.rhs273, label %while.end296

while.end296:                                     ; preds = %land.rhs273, %if.end292, %while.body279, %if.end268
  %nexp.6.lcssa = phi i32 [ %sub269, %if.end268 ], [ %nexp.6935, %land.rhs273 ], [ %sub293, %if.end292 ], [ %nexp.6935, %while.body279 ]
  %call298 = call fastcc i32 @enormlz(i16* %arraydecay)
  %cmp299 = icmp sgt i32 %call298, 80
  br i1 %cmp299, label %if.then301, label %if.end303

if.then301:                                       ; preds = %while.end296
  call void @llvm.memset.p0i8.i64(i8* %xi4.i, i8 0, i64 18, i32 16, i1 false) #1
  br label %aexit

if.end303:                                        ; preds = %while.end296
  %sub304 = sub nsw i32 16462, %call298
  call fastcc void @emdnorm(i16* %arraydecay, i32 %lost.0, i32 0, i32 %sub304, i32 64)
  %201 = load i16* %incdec.ptr.i619, align 2, !tbaa !1
  %conv307 = zext i16 %201 to i32
  %cmp308 = icmp eq i32 %nexp.6.lcssa, 0
  br i1 %cmp308, label %expdon, label %if.end311

if.end311:                                        ; preds = %if.end303
  %cmp312 = icmp slt i32 %nexp.6.lcssa, 0
  br i1 %cmp312, label %if.then314, label %if.end329

if.then314:                                       ; preds = %if.end311
  %sub315 = sub nsw i32 0, %nexp.6.lcssa
  %cmp316 = icmp sgt i32 %sub315, 4096
  br i1 %cmp316, label %if.then318, label %if.end329

if.then318:                                       ; preds = %if.then314
  %arraydecay319 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 0
  %incdec.ptr.i692 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 1
  store i16 0, i16* %arraydecay319, align 16, !tbaa !1
  %incdec.ptr3.i693 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 2
  store i16 29989, i16* %incdec.ptr.i692, align 2, !tbaa !1
  %incdec.ptr29.i694 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i693, align 4, !tbaa !1
  %incdec.ptr35.i695 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 4
  store i16 -15264, i16* %incdec.ptr29.i694, align 2, !tbaa !1
  %incdec.ptr35.1.i696 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 5
  store i16 20994, i16* %incdec.ptr35.i695, align 8, !tbaa !1
  %incdec.ptr35.2.i697 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 6
  store i16 -30176, i16* %incdec.ptr35.1.i696, align 2, !tbaa !1
  %incdec.ptr35.3.i698 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 7
  store i16 -26726, i16* %incdec.ptr35.2.i697, align 4, !tbaa !1
  store i16 -14004, i16* %incdec.ptr35.3.i698, align 2, !tbaa !1
  %scevgep70.i699 = getelementptr [9 x i16]* %tt, i64 0, i64 8
  store i16 0, i16* %scevgep70.i699, align 16, !tbaa !1
  %call325 = call fastcc i32 @edivm(i16* %arraydecay319, i16* %arraydecay)
  %add326 = add i32 %conv307, -13606
  %sub327 = sub i32 -4096, %nexp.6.lcssa
  br label %if.end329

if.end329:                                        ; preds = %if.then314, %if.then318, %if.end311
  %nexp.7 = phi i32 [ %sub327, %if.then318 ], [ %sub315, %if.then314 ], [ %nexp.6.lcssa, %if.end311 ]
  %esign.1 = phi i32 [ -1, %if.then318 ], [ -1, %if.then314 ], [ 1, %if.end311 ]
  %lexp.0 = phi i32 [ %add326, %if.then318 ], [ %conv307, %if.then314 ], [ %conv307, %if.end311 ]
  %202 = bitcast [9 x i16]* %xt to i64*
  store i64 0, i64* %202, align 16
  store i16 -32768, i16* %incdec.ptr.3.i738, align 8, !tbaa !1
  store i16 16383, i16* %incdec.ptr.2.i729, align 2, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %if.end339, %if.end329
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end339 ], [ 12, %if.end329 ]
  %exp.4 = phi i32 [ %add340, %if.end339 ], [ 1, %if.end329 ]
  %and331 = and i32 %exp.4, %nexp.7
  %tobool332 = icmp eq i32 %and331, 0
  br i1 %tobool332, label %if.end339, label %if.then333

if.then333:                                       ; preds = %do.body
  %arraydecay336 = getelementptr inbounds [13 x [6 x i16]]* @etens, i64 0, i64 %indvars.iv, i64 0
  call fastcc void @emul(i16* %arraydecay336, i16* %arraydecay135, i16* %arraydecay135)
  br label %if.end339

if.end339:                                        ; preds = %do.body, %if.then333
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %add340 = shl nsw i32 %exp.4, 1
  %cmp341 = icmp slt i32 %add340, 4097
  br i1 %cmp341, label %do.body, label %do.end

do.end:                                           ; preds = %if.end339
  %arraydecay344 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 0
  %203 = load i16* %incdec.ptr.2.i729, align 2, !tbaa !1
  %incdec.ptr.i646 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 1
  %.lobit.i647 = ashr i16 %203, 15
  store i16 %.lobit.i647, i16* %arraydecay344, align 16, !tbaa !1
  %incdec.ptr3.i = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 2
  %and5.i = and i16 %203, 32767
  store i16 %and5.i, i16* %incdec.ptr.i646, align 2, !tbaa !1
  %cmp.i648 = icmp eq i16 %and5.i, 32767
  br i1 %cmp.i648, label %for.body.i.i652, label %if.end28.i

for.body.i.i652:                                  ; preds = %do.end, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %do.end ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %arraydecay135, %do.end ]
  %204 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %204, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.then13.i

for.inc.i.i:                                      ; preds = %for.body.i.i652
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i653 = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i653, label %for.body.i.i652, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i
  %scevgep69.i = bitcast i16* %incdec.ptr3.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i652
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %205 = load i16* %incdec.ptr.3.i738, align 8, !tbaa !1
  %incdec.ptr18.i654 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 4
  store i16 %205, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %206 = load i16* %incdec.ptr.4.i747, align 2, !tbaa !1
  %incdec.ptr18.1.i655 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 5
  store i16 %206, i16* %incdec.ptr18.i654, align 8, !tbaa !1
  %207 = load i16* %incdec.ptr.5.i756, align 4, !tbaa !1
  %incdec.ptr18.2.i656 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 6
  store i16 %207, i16* %incdec.ptr18.1.i655, align 2, !tbaa !1
  %208 = load i16* %incdec.ptr1.i, align 2, !tbaa !1
  %incdec.ptr18.3.i657 = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 7
  store i16 %208, i16* %incdec.ptr18.2.i656, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds [9 x i16]* %xt, i64 0, i64 -1
  %209 = load i16* %arraydecay135, align 16, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 8
  store i16 %209, i16* %incdec.ptr18.3.i657, align 2, !tbaa !1
  %210 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %210, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

if.end28.i:                                       ; preds = %do.end
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %211 = load i16* %incdec.ptr.3.i738, align 8, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 4
  store i16 %211, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %212 = load i16* %incdec.ptr.4.i747, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 5
  store i16 %212, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %213 = load i16* %incdec.ptr.5.i756, align 4, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 6
  store i16 %213, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %214 = load i16* %incdec.ptr1.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %tt, i64 0, i64 7
  store i16 %214, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %215 = load i16* %arraydecay135, align 16, !tbaa !1
  store i16 %215, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %tt, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i, %if.end28.i
  %cmp345 = icmp slt i32 %esign.1, 0
  %conv349 = zext i16 %and5.i to i32
  br i1 %cmp345, label %if.then347, label %if.else355

if.then347:                                       ; preds = %emovi.exit
  %call353 = call fastcc i32 @edivm(i16* %arraydecay344, i16* %arraydecay)
  %sub350 = add i32 %lexp.0, 16383
  %add354 = sub i32 %sub350, %conv349
  br label %expdon

if.else355:                                       ; preds = %emovi.exit
  %call361 = call fastcc i32 @emulm(i16* %arraydecay344, i16* %arraydecay)
  %add358 = add i32 %lexp.0, -16382
  %sub362 = add i32 %add358, %conv349
  br label %expdon

expdon:                                           ; preds = %if.then347, %if.else355, %if.end303, %if.end265
  %lost.3 = phi i32 [ %lost.0, %if.end265 ], [ 0, %if.end303 ], [ %call353, %if.then347 ], [ %call361, %if.else355 ]
  %lexp.2 = phi i32 [ %sub257, %if.end265 ], [ %conv307, %if.end303 ], [ %add354, %if.then347 ], [ %sub362, %if.else355 ]
  switch i32 %oprec, label %if.end374 [
    i32 53, label %if.then366
    i32 24, label %if.then371
  ]

if.then366:                                       ; preds = %expdon
  %sub367 = add nsw i32 %lexp.2, -15360
  br label %if.end374

if.then371:                                       ; preds = %expdon
  %sub372 = add nsw i32 %lexp.2, -16256
  br label %if.end374

if.end374:                                        ; preds = %expdon, %if.then371, %if.then366
  %lexp.3 = phi i32 [ %sub367, %if.then366 ], [ %sub372, %if.then371 ], [ %lexp.2, %expdon ]
  store i32 %oprec, i32* @rndprc, align 4, !tbaa !9
  call fastcc void @emdnorm(i16* %arraydecay, i32 %lost.3, i32 0, i32 %lexp.3, i32 64)
  br label %aexit

aexit:                                            ; preds = %for.cond, %if.end374, %if.then301, %if.then249, %zero, %infinite, %unexpected_char_error
  %a.val.i = phi i16 [ %nsign.1, %unexpected_char_error ], [ %nsign.0, %infinite ], [ %nsign.0, %if.then249 ], [ %nsign.0, %zero ], [ %nsign.0, %if.end374 ], [ %nsign.0, %if.then301 ], [ %nsign.0, %for.cond ]
  store i32 %5, i32* @rndprc, align 4, !tbaa !9
  store i16 %a.val.i, i16* %arraydecay, align 16, !tbaa !1
  switch i32 %oprec, label %sw.epilog385 [
    i32 53, label %sw.bb377
    i32 24, label %sw.bb379
    i32 64, label %sw.bb381
    i32 80, label %sw.bb383
  ]

sw.bb377:                                         ; preds = %aexit
  call fastcc void @toe53(i16* %arraydecay, i16* %y)
  br label %sw.epilog385

sw.bb379:                                         ; preds = %aexit
  %216 = load i16* %incdec.ptr.i619, align 2, !tbaa !1
  %and.i.i = and i16 %216, 32767
  %cmp.i.i = icmp eq i16 %and.i.i, 32767
  br i1 %cmp.i.i, label %for.body.i.i531, label %if.end.i

for.cond.i.i526:                                  ; preds = %for.body.i.i531
  %217 = trunc i64 %indvars.iv.next.i.i530 to i32
  %cmp2.i.i525 = icmp slt i32 %217, 9
  br i1 %cmp2.i.i525, label %for.body.i.i531, label %if.end.i

for.body.i.i531:                                  ; preds = %sw.bb379, %for.cond.i.i526
  %indvars.iv.i.i527 = phi i64 [ %indvars.iv.next.i.i530, %for.cond.i.i526 ], [ 3, %sw.bb379 ]
  %arrayidx4.i.i528 = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 %indvars.iv.i.i527
  %218 = load i16* %arrayidx4.i.i528, align 2, !tbaa !1
  %cmp6.i.i529 = icmp eq i16 %218, 0
  %indvars.iv.next.i.i530 = add nuw nsw i64 %indvars.iv.i.i527, 1
  br i1 %cmp6.i.i529, label %for.cond.i.i526, label %if.then.i

if.then.i:                                        ; preds = %for.body.i.i531
  %cmp.i50.i = icmp ne i16 %a.val.i, 0
  %conv1.i.i532 = zext i1 %cmp.i50.i to i16
  store i16 0, i16* %y, align 2, !tbaa !1
  %scevgep.i.i = getelementptr i16* %y, i64 1
  %shl.i.i533 = shl nuw i16 %conv1.i.i532, 15
  %or.i.i534 = or i16 %shl.i.i533, 32704
  store i16 %or.i.i534, i16* %scevgep.i.i, align 2, !tbaa !1
  br label %sw.epilog385

if.end.i:                                         ; preds = %for.cond.i.i526, %sw.bb379
  %add.ptr.i535 = getelementptr inbounds i16* %y, i64 1
  %tobool2.i = icmp eq i16 %a.val.i, 0
  %..i = select i1 %tobool2.i, i16 0, i16 -32768
  store i16 %..i, i16* %add.ptr.i535, align 2, !tbaa !1
  %cmp.i536 = icmp ugt i16 %216, 254
  br i1 %cmp.i536, label %if.then7.i, label %if.end11.i

if.then7.i:                                       ; preds = %if.end.i
  %or.i537 = or i16 %..i, 32640
  store i16 %or.i537, i16* %add.ptr.i535, align 2, !tbaa !1
  store i16 0, i16* %y, align 2, !tbaa !1
  br label %sw.epilog385

if.end11.i:                                       ; preds = %if.end.i
  %cmp13.i = icmp eq i16 %216, 0
  br i1 %cmp13.i, label %if.then15.i, label %if.else.i

if.then15.i:                                      ; preds = %if.end11.i
  %call16.i = call fastcc i32 @eshift(i16* %arraydecay, i32 7) #1
  br label %if.end20.i

if.else.i:                                        ; preds = %if.end11.i
  %shl.i538 = shl i16 %216, 7
  %call19.i = call fastcc i32 @eshift(i16* %arraydecay, i32 8) #1
  br label %if.end20.i

if.end20.i:                                       ; preds = %if.else.i, %if.then15.i
  %i.0.i = phi i16 [ 0, %if.then15.i ], [ %shl.i538, %if.else.i ]
  %219 = bitcast i16* %arrayidx113 to i32*
  %220 = load i32* %219, align 4
  %221 = trunc i32 %220 to i16
  %and.i = and i16 %221, 127
  %or24.i = or i16 %and.i, %i.0.i
  %222 = load i16* %add.ptr.i535, align 2, !tbaa !1
  %or2849.i = or i16 %or24.i, %222
  store i16 %or2849.i, i16* %add.ptr.i535, align 2, !tbaa !1
  %223 = lshr i32 %220, 16
  %224 = trunc i32 %223 to i16
  store i16 %224, i16* %y, align 2, !tbaa !1
  br label %sw.epilog385

sw.bb381:                                         ; preds = %aexit
  call fastcc void @toe64(i16* %arraydecay, i16* %y)
  br label %sw.epilog385

sw.bb383:                                         ; preds = %aexit
  %add.ptr.i = getelementptr inbounds i16* %y, i64 5
  %tobool.i = icmp eq i16 %a.val.i, 0
  %225 = load i16* %incdec.ptr.i619, align 2, !tbaa !1
  %or.i = or i16 %225, -32768
  %storemerge.i = select i1 %tobool.i, i16 %225, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i, align 2, !tbaa !1
  %cmp.i = icmp eq i16 %225, 32767
  br i1 %cmp.i, label %for.body.i.i, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i
  %226 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %226, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.end13.i

for.body.i.i:                                     ; preds = %sw.bb383, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %sw.bb383 ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %yy, i64 0, i64 %indvars.iv.i.i
  %227 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %227, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i
  %cmp.i32.i = icmp ne i16 %a.val.i, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %228 = bitcast i16* %y to i64*
  store i64 0, i64* %228, align 2
  %scevgep8.i.i = getelementptr i16* %y, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %sw.epilog385

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %sw.epilog385

if.end14.i:                                       ; preds = %sw.bb383
  %q.0.i = getelementptr inbounds i16* %y, i64 4
  %229 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %incdec.ptr19.i = getelementptr inbounds i16* %y, i64 3
  store i16 %229, i16* %q.0.i, align 2, !tbaa !1
  %230 = bitcast i16* %incdec.ptr.3.i to i64*
  %231 = load i64* %230, align 8
  %232 = trunc i64 %231 to i32
  %233 = trunc i64 %231 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %y, i64 2
  store i16 %233, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %234 = lshr i32 %232, 16
  %235 = trunc i32 %234 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %y, i64 1
  store i16 %235, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %236 = lshr i64 %231, 32
  %237 = trunc i64 %236 to i16
  store i16 %237, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %238 = lshr i64 %231, 48
  %239 = trunc i64 %238 to i16
  store i16 %239, i16* %y, align 2, !tbaa !1
  br label %sw.epilog385

sw.epilog385:                                     ; preds = %if.end14.i, %if.end13.i, %if.then11.i, %if.end20.i, %if.then7.i, %if.then.i, %aexit, %sw.bb381, %sw.bb377
  ret void
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #5

; Function Attrs: nounwind uwtable
define internal fastcc i32 @edivm(i16* nocapture readonly %den, i16* %num) #0 {
entry:
  %tprod = alloca [10 x i16], align 16
  %0 = load i16* %num, align 2, !tbaa !1
  store i16 %0, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 0), align 16, !tbaa !1
  %arrayidx1 = getelementptr inbounds i16* %num, i64 1
  %1 = load i16* %arrayidx1, align 2, !tbaa !1
  store i16 %1, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 1), align 2, !tbaa !1
  call void @llvm.memset.p0i8.i64(i8* bitcast (i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2) to i8*), i8 0, i64 14, i32 4, i1 false)
  %add.ptr.i = getelementptr inbounds i16* %num, i64 2
  %2 = load i16* %add.ptr.i, align 2, !tbaa !1
  %shr22.i = lshr i16 %2, 1
  store i16 %shr22.i, i16* %add.ptr.i, align 2, !tbaa !1
  %incdec.ptr.i = getelementptr inbounds i16* %num, i64 3
  %3 = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %shr22.1.i = lshr i16 %3, 1
  %4 = shl i16 %2, 15
  %5 = or i16 %shr22.1.i, %4
  store i16 %5, i16* %incdec.ptr.i, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds i16* %num, i64 4
  %6 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %shr22.2.i = lshr i16 %6, 1
  %7 = shl i16 %3, 15
  %8 = or i16 %shr22.2.i, %7
  store i16 %8, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds i16* %num, i64 5
  %9 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %shr22.3.i = lshr i16 %9, 1
  %10 = shl i16 %6, 15
  %11 = or i16 %shr22.3.i, %10
  store i16 %11, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds i16* %num, i64 6
  %12 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %shr22.4.i = lshr i16 %12, 1
  %13 = shl i16 %9, 15
  %14 = or i16 %shr22.4.i, %13
  store i16 %14, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr.4.i = getelementptr inbounds i16* %num, i64 7
  %15 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %shr22.5.i = lshr i16 %15, 1
  %16 = shl i16 %12, 15
  %17 = or i16 %shr22.5.i, %16
  store i16 %17, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %shl.5.i = shl i16 %15, 15
  %incdec.ptr.5.i = getelementptr inbounds i16* %num, i64 8
  %18 = load i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %shr22.6.i = lshr i16 %18, 1
  %19 = or i16 %shr22.6.i, %shl.5.i
  store i16 %19, i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %arrayidx4 = getelementptr inbounds i16* %den, i64 3
  %20 = load i16* %arrayidx4, align 2, !tbaa !1
  %conv11 = zext i16 %20 to i64
  %mul = mul i64 %conv11, 65535
  %arraydecay = getelementptr inbounds [10 x i16]* %tprod, i64 0, i64 0
  %add.ptr.i238 = getelementptr inbounds [10 x i16]* %tprod, i64 0, i64 2
  %add.ptr.i106 = getelementptr inbounds [10 x i16]* %tprod, i64 0, i64 8
  %incdec.ptr.i108 = getelementptr inbounds [10 x i16]* %tprod, i64 0, i64 7
  %incdec.ptr.1.i109 = getelementptr inbounds [10 x i16]* %tprod, i64 0, i64 6
  %incdec.ptr.2.i110 = getelementptr inbounds [10 x i16]* %tprod, i64 0, i64 5
  %incdec.ptr.3.i111 = getelementptr inbounds [10 x i16]* %tprod, i64 0, i64 4
  %incdec.ptr.4.i112 = getelementptr inbounds [10 x i16]* %tprod, i64 0, i64 3
  %add.ptr.i178 = getelementptr inbounds i16* %den, i64 8
  %incdec.ptr.i186 = getelementptr inbounds i16* %den, i64 7
  %incdec.ptr.1.i195 = getelementptr inbounds i16* %den, i64 6
  %incdec.ptr.2.i204 = getelementptr inbounds i16* %den, i64 5
  %incdec.ptr.3.i213 = getelementptr inbounds i16* %den, i64 4
  %incdec.ptr.5.i231 = getelementptr inbounds i16* %den, i64 2
  %conv15 = zext i16 %20 to i32
  br label %for.body7

for.cond42.preheader:                             ; preds = %if.end35
  %or99.1 = or i16 %74, %73
  %or99.2 = or i16 %75, %or99.1
  %or99.3 = or i16 %76, %or99.2
  %or99.4 = or i16 %77, %or99.3
  %or99.5 = or i16 %78, %or99.4
  %21 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 0), align 16, !tbaa !1
  store i16 %21, i16* %num, align 2, !tbaa !1
  %22 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 1), align 2, !tbaa !1
  store i16 %22, i16* %arrayidx1, align 2, !tbaa !1
  %23 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2), align 4, !tbaa !1
  store i16 %23, i16* %add.ptr.i, align 2, !tbaa !1
  %24 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 3), align 2, !tbaa !1
  store i16 %24, i16* %incdec.ptr.i, align 2, !tbaa !1
  %25 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4), align 8, !tbaa !1
  store i16 %25, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %26 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 5), align 2, !tbaa !1
  store i16 %26, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %27 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 6), align 4, !tbaa !1
  store i16 %27, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %28 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 7), align 2, !tbaa !1
  store i16 %28, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %29 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  store i16 %29, i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %not.tobool = icmp ne i16 %or99.5, 0
  %conv66 = zext i1 %not.tobool to i32
  ret i32 %conv66

for.body7:                                        ; preds = %if.end35, %entry
  %30 = phi i16 [ %5, %entry ], [ %74, %if.end35 ]
  %31 = phi i16 [ %shr22.i, %entry ], [ %73, %if.end35 ]
  %indvars.iv = phi i64 [ 2, %entry ], [ %indvars.iv.next, %if.end35 ]
  %conv = zext i16 %31 to i32
  %shl = shl nuw i32 %conv, 16
  %conv10 = zext i16 %30 to i32
  %add = or i32 %shl, %conv10
  %conv12 = zext i32 %add to i64
  %cmp13 = icmp ult i64 %mul, %conv12
  br i1 %cmp13, label %if.end, label %if.else

if.else:                                          ; preds = %for.body7
  %div = udiv i32 %add, %conv15
  %conv16 = trunc i32 %div to i16
  br label %if.end

if.end:                                           ; preds = %for.body7, %if.else
  %tquot.0 = phi i16 [ %conv16, %if.else ], [ -1, %for.body7 ]
  %conv17 = zext i16 %tquot.0 to i32
  call fastcc void @m16m(i32 %conv17, i16* %den, i16* %arraydecay)
  br label %for.body.i244

for.body.i244:                                    ; preds = %for.inc.i249, %if.end
  %i.021.i240 = phi i32 [ 2, %if.end ], [ %inc.i247, %for.inc.i249 ]
  %b.addr.020.i241 = phi i16* [ %add.ptr.i, %if.end ], [ %incdec.ptr2.i245, %for.inc.i249 ]
  %a.addr.019.i242 = phi i16* [ %add.ptr.i238, %if.end ], [ %incdec.ptr.i246, %for.inc.i249 ]
  %32 = load i16* %a.addr.019.i242, align 2, !tbaa !1
  %33 = load i16* %b.addr.020.i241, align 2, !tbaa !1
  %cmp4.i243 = icmp eq i16 %32, %33
  br i1 %cmp4.i243, label %for.inc.i249, label %difrnt.i252

for.inc.i249:                                     ; preds = %for.body.i244
  %incdec.ptr2.i245 = getelementptr inbounds i16* %b.addr.020.i241, i64 1
  %incdec.ptr.i246 = getelementptr inbounds i16* %a.addr.019.i242, i64 1
  %inc.i247 = add nsw i32 %i.021.i240, 1
  %cmp.i248 = icmp slt i32 %inc.i247, 9
  br i1 %cmp.i248, label %for.body.i244, label %if.end35

difrnt.i252:                                      ; preds = %for.body.i244
  %cmp10.i250 = icmp ugt i16 %32, %33
  br i1 %cmp10.i250, label %if.then21, label %if.end35

if.then21:                                        ; preds = %difrnt.i252
  %sub = add i16 %tquot.0, -1
  %34 = load i16* %add.ptr.i106, align 16, !tbaa !1
  %conv.i180 = zext i16 %34 to i32
  %35 = load i16* %add.ptr.i178, align 2, !tbaa !1
  %conv2.i181 = zext i16 %35 to i32
  %sub.i182 = sub i32 %conv.i180, %conv2.i181
  %and.i183 = lshr i32 %sub.i182, 16
  %and.lobit.i184 = and i32 %and.i183, 1
  %conv4.i185 = trunc i32 %sub.i182 to i16
  store i16 %conv4.i185, i16* %add.ptr.i106, align 16, !tbaa !1
  %36 = load i16* %incdec.ptr.i108, align 2, !tbaa !1
  %conv.1.i188 = zext i16 %36 to i32
  %37 = load i16* %incdec.ptr.i186, align 2, !tbaa !1
  %conv2.1.i189 = zext i16 %37 to i32
  %sub.1.i190 = sub i32 %conv.1.i188, %conv2.1.i189
  %sub3.1.i191 = sub i32 %sub.1.i190, %and.lobit.i184
  %and.1.i192 = lshr i32 %sub3.1.i191, 16
  %and.lobit.1.i193 = and i32 %and.1.i192, 1
  %conv4.1.i194 = trunc i32 %sub3.1.i191 to i16
  store i16 %conv4.1.i194, i16* %incdec.ptr.i108, align 2, !tbaa !1
  %38 = load i16* %incdec.ptr.1.i109, align 4, !tbaa !1
  %conv.2.i197 = zext i16 %38 to i32
  %39 = load i16* %incdec.ptr.1.i195, align 2, !tbaa !1
  %conv2.2.i198 = zext i16 %39 to i32
  %sub.2.i199 = sub i32 %conv.2.i197, %conv2.2.i198
  %sub3.2.i200 = sub i32 %sub.2.i199, %and.lobit.1.i193
  %and.2.i201 = lshr i32 %sub3.2.i200, 16
  %and.lobit.2.i202 = and i32 %and.2.i201, 1
  %conv4.2.i203 = trunc i32 %sub3.2.i200 to i16
  store i16 %conv4.2.i203, i16* %incdec.ptr.1.i109, align 4, !tbaa !1
  %40 = load i16* %incdec.ptr.2.i110, align 2, !tbaa !1
  %conv.3.i206 = zext i16 %40 to i32
  %41 = load i16* %incdec.ptr.2.i204, align 2, !tbaa !1
  %conv2.3.i207 = zext i16 %41 to i32
  %sub.3.i208 = sub i32 %conv.3.i206, %conv2.3.i207
  %sub3.3.i209 = sub i32 %sub.3.i208, %and.lobit.2.i202
  %and.3.i210 = lshr i32 %sub3.3.i209, 16
  %and.lobit.3.i211 = and i32 %and.3.i210, 1
  %conv4.3.i212 = trunc i32 %sub3.3.i209 to i16
  store i16 %conv4.3.i212, i16* %incdec.ptr.2.i110, align 2, !tbaa !1
  %42 = bitcast i16* %incdec.ptr.3.i111 to i32*
  %43 = load i32* %42, align 8
  %44 = bitcast i16* %incdec.ptr.3.i111 to i64*
  %45 = load i64* %44, align 8
  %46 = trunc i64 %45 to i32
  %conv.4.i215 = and i32 %46, 65535
  %47 = load i16* %incdec.ptr.3.i213, align 2, !tbaa !1
  %conv2.4.i216 = zext i16 %47 to i32
  %sub.4.i217 = sub i32 %conv.4.i215, %conv2.4.i216
  %sub3.4.i218 = sub i32 %sub.4.i217, %and.lobit.3.i211
  %and.4.i219 = lshr i32 %sub3.4.i218, 16
  %and.lobit.4.i220 = and i32 %and.4.i219, 1
  %conv4.4.i221 = trunc i32 %sub3.4.i218 to i16
  store i16 %conv4.4.i221, i16* %incdec.ptr.3.i111, align 8, !tbaa !1
  %48 = load i16* %incdec.ptr.4.i112, align 2, !tbaa !1
  %conv.5.i224 = zext i16 %48 to i32
  %49 = load i16* %arrayidx4, align 2, !tbaa !1
  %conv2.5.i225 = zext i16 %49 to i32
  %sub.5.i226 = sub i32 %conv.5.i224, %conv2.5.i225
  %sub3.5.i227 = sub i32 %sub.5.i226, %and.lobit.4.i220
  %and.5.i228 = lshr i32 %sub3.5.i227, 16
  %and.lobit.5.i229 = and i32 %and.5.i228, 1
  %conv4.5.i230 = trunc i32 %sub3.5.i227 to i16
  store i16 %conv4.5.i230, i16* %incdec.ptr.4.i112, align 2, !tbaa !1
  %50 = bitcast i16* %add.ptr.i238 to i32*
  %51 = load i32* %50, align 4
  %52 = load i16* %incdec.ptr.5.i231, align 2, !tbaa !1
  %conv2.6.i234 = zext i16 %52 to i32
  %sub.6.i235 = sub i32 %51, %conv2.6.i234
  %sub3.6.i236 = sub i32 %sub.6.i235, %and.lobit.5.i229
  %conv4.6.i237 = trunc i32 %sub3.6.i236 to i16
  store i16 %conv4.6.i237, i16* %add.ptr.i238, align 4, !tbaa !1
  %53 = lshr i64 %45, 48
  %54 = trunc i64 %53 to i32
  %55 = lshr i64 %45, 32
  %56 = trunc i64 %55 to i32
  %57 = lshr i32 %43, 16
  %58 = lshr i32 %51, 16
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i.for.body.i_crit_edge, %if.then21
  %59 = phi i16 [ %conv4.6.i237, %if.then21 ], [ %.pre, %for.inc.i.for.body.i_crit_edge ]
  %i.021.i = phi i32 [ 3, %if.then21 ], [ %phitmp, %for.inc.i.for.body.i_crit_edge ]
  %b.addr.020.i = phi i16* [ %add.ptr.i, %if.then21 ], [ %incdec.ptr2.i176, %for.inc.i.for.body.i_crit_edge ]
  %a.addr.019.i = phi i16* [ %add.ptr.i238, %if.then21 ], [ %incdec.ptr.i177, %for.inc.i.for.body.i_crit_edge ]
  %60 = load i16* %b.addr.020.i, align 2, !tbaa !1
  %cmp4.i = icmp eq i16 %59, %60
  br i1 %cmp4.i, label %for.inc.i, label %difrnt.i

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr.i177 = getelementptr inbounds i16* %a.addr.019.i, i64 1
  %cmp.i = icmp slt i32 %i.021.i, 9
  br i1 %cmp.i, label %for.inc.i.for.body.i_crit_edge, label %if.end35

for.inc.i.for.body.i_crit_edge:                   ; preds = %for.inc.i
  %incdec.ptr2.i176 = getelementptr inbounds i16* %b.addr.020.i, i64 1
  %.pre = load i16* %incdec.ptr.i177, align 2, !tbaa !1
  %phitmp = add i32 %i.021.i, 1
  br label %for.body.i

difrnt.i:                                         ; preds = %for.body.i
  %cmp10.i = icmp ugt i16 %59, %60
  br i1 %cmp10.i, label %if.then29, label %if.end35

if.then29:                                        ; preds = %difrnt.i
  %sub31 = add i16 %tquot.0, -2
  %conv.i116 = and i32 %sub.i182, 65535
  %sub.i118 = sub i32 %conv.i116, %conv2.i181
  %and.i119 = lshr i32 %sub.i118, 16
  %and.lobit.i120 = and i32 %and.i119, 1
  %conv4.i121 = trunc i32 %sub.i118 to i16
  store i16 %conv4.i121, i16* %add.ptr.i106, align 16, !tbaa !1
  %sub.1.i126 = sub i32 %54, %conv2.1.i189
  %sub3.1.i127 = sub i32 %sub.1.i126, %and.lobit.i120
  %and.1.i128 = lshr i32 %sub3.1.i127, 16
  %and.lobit.1.i129 = and i32 %and.1.i128, 1
  %conv4.1.i130 = trunc i32 %sub3.1.i127 to i16
  store i16 %conv4.1.i130, i16* %incdec.ptr.i108, align 2, !tbaa !1
  %conv.2.i133 = and i32 %56, 65535
  %sub.2.i135 = sub i32 %conv.2.i133, %conv2.2.i198
  %sub3.2.i136 = sub i32 %sub.2.i135, %and.lobit.1.i129
  %and.2.i137 = lshr i32 %sub3.2.i136, 16
  %and.lobit.2.i138 = and i32 %and.2.i137, 1
  %conv4.2.i139 = trunc i32 %sub3.2.i136 to i16
  store i16 %conv4.2.i139, i16* %incdec.ptr.1.i109, align 4, !tbaa !1
  %sub.3.i144 = sub i32 %57, %conv2.3.i207
  %sub3.3.i145 = sub i32 %sub.3.i144, %and.lobit.2.i138
  %and.3.i146 = lshr i32 %sub3.3.i145, 16
  %and.lobit.3.i147 = and i32 %and.3.i146, 1
  %conv4.3.i148 = trunc i32 %sub3.3.i145 to i16
  store i16 %conv4.3.i148, i16* %incdec.ptr.2.i110, align 2, !tbaa !1
  %conv.4.i151 = and i32 %sub3.4.i218, 65535
  %sub.4.i153 = sub i32 %conv.4.i151, %conv2.4.i216
  %sub3.4.i154 = sub i32 %sub.4.i153, %and.lobit.3.i147
  %and.4.i155 = lshr i32 %sub3.4.i154, 16
  %and.lobit.4.i156 = and i32 %and.4.i155, 1
  %conv4.4.i157 = trunc i32 %sub3.4.i154 to i16
  store i16 %conv4.4.i157, i16* %incdec.ptr.3.i111, align 8, !tbaa !1
  %sub.5.i162 = sub i32 %58, %conv2.5.i225
  %sub3.5.i163 = sub i32 %sub.5.i162, %and.lobit.4.i156
  %and.5.i164 = lshr i32 %sub3.5.i163, 16
  %and.lobit.5.i165 = and i32 %and.5.i164, 1
  %conv4.5.i166 = trunc i32 %sub3.5.i163 to i16
  store i16 %conv4.5.i166, i16* %incdec.ptr.4.i112, align 2, !tbaa !1
  %sub.6.i171 = sub i32 %sub3.6.i236, %conv2.6.i234
  %sub3.6.i172 = sub i32 %sub.6.i171, %and.lobit.5.i165
  %conv4.6.i173 = trunc i32 %sub3.6.i172 to i16
  store i16 %conv4.6.i173, i16* %add.ptr.i238, align 4, !tbaa !1
  br label %if.end35

if.end35:                                         ; preds = %for.inc.i249, %for.inc.i, %difrnt.i, %difrnt.i252, %if.then29
  %tquot.1 = phi i16 [ %sub31, %if.then29 ], [ %tquot.0, %difrnt.i252 ], [ %sub, %difrnt.i ], [ %sub, %for.inc.i ], [ %tquot.0, %for.inc.i249 ]
  %61 = load i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %conv.i = zext i16 %61 to i32
  %62 = load i16* %add.ptr.i106, align 16, !tbaa !1
  %conv2.i = zext i16 %62 to i32
  %sub.i = sub i32 %conv.i, %conv2.i
  %and.i = lshr i32 %sub.i, 16
  %and.lobit.i = and i32 %and.i, 1
  %conv4.i = trunc i32 %sub.i to i16
  store i16 %conv4.i, i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %63 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %conv.1.i = zext i16 %63 to i32
  %64 = load i16* %incdec.ptr.i108, align 2, !tbaa !1
  %conv2.1.i = zext i16 %64 to i32
  %sub.1.i = sub i32 %conv.1.i, %conv2.1.i
  %sub3.1.i = sub i32 %sub.1.i, %and.lobit.i
  %and.1.i = lshr i32 %sub3.1.i, 16
  %and.lobit.1.i = and i32 %and.1.i, 1
  %conv4.1.i = trunc i32 %sub3.1.i to i16
  store i16 %conv4.1.i, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %65 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %conv.2.i = zext i16 %65 to i32
  %66 = load i16* %incdec.ptr.1.i109, align 4, !tbaa !1
  %conv2.2.i = zext i16 %66 to i32
  %sub.2.i = sub i32 %conv.2.i, %conv2.2.i
  %sub3.2.i = sub i32 %sub.2.i, %and.lobit.1.i
  %and.2.i = lshr i32 %sub3.2.i, 16
  %and.lobit.2.i = and i32 %and.2.i, 1
  %conv4.2.i = trunc i32 %sub3.2.i to i16
  store i16 %conv4.2.i, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %67 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %conv.3.i = zext i16 %67 to i32
  %68 = load i16* %incdec.ptr.2.i110, align 2, !tbaa !1
  %conv2.3.i = zext i16 %68 to i32
  %sub.3.i = sub i32 %conv.3.i, %conv2.3.i
  %sub3.3.i = sub i32 %sub.3.i, %and.lobit.2.i
  %and.3.i = lshr i32 %sub3.3.i, 16
  %and.lobit.3.i = and i32 %and.3.i, 1
  %conv4.3.i = trunc i32 %sub3.3.i to i16
  store i16 %conv4.3.i, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %69 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %conv.4.i = zext i16 %69 to i32
  %70 = load i16* %incdec.ptr.3.i111, align 8, !tbaa !1
  %conv2.4.i = zext i16 %70 to i32
  %sub.4.i = sub i32 %conv.4.i, %conv2.4.i
  %sub3.4.i = sub i32 %sub.4.i, %and.lobit.3.i
  %and.4.i = lshr i32 %sub3.4.i, 16
  %and.lobit.4.i = and i32 %and.4.i, 1
  %conv4.4.i = trunc i32 %sub3.4.i to i16
  store i16 %conv4.4.i, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %71 = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %conv.5.i = zext i16 %71 to i32
  %72 = load i16* %incdec.ptr.4.i112, align 2, !tbaa !1
  %conv2.5.i = zext i16 %72 to i32
  %sub.5.i = sub i32 %conv.5.i, %conv2.5.i
  %sub3.5.i = sub i32 %sub.5.i, %and.lobit.4.i
  %conv4.5.i = trunc i32 %sub3.5.i to i16
  store i16 %conv4.5.i, i16* %incdec.ptr.i, align 2, !tbaa !1
  %arrayidx37 = getelementptr inbounds [9 x i16]* @equot, i64 0, i64 %indvars.iv
  store i16 %tquot.1, i16* %arrayidx37, align 2, !tbaa !1
  %73 = load i16* %incdec.ptr.i, align 2, !tbaa !1
  store i16 %73, i16* %add.ptr.i, align 2, !tbaa !1
  %74 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  store i16 %74, i16* %incdec.ptr.i, align 2, !tbaa !1
  %75 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  store i16 %75, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %76 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  store i16 %76, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %77 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  store i16 %77, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %78 = load i16* %incdec.ptr.5.i, align 2, !tbaa !1
  store i16 %78, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 9
  br i1 %exitcond, label %for.cond42.preheader, label %for.body7
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @emulm(i16* nocapture readonly %a, i16* nocapture %b) #0 {
entry:
  %pprod = alloca [9 x i16], align 16
  %0 = load i16* %b, align 2, !tbaa !1
  store i16 %0, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 0), align 16, !tbaa !1
  %arrayidx1 = getelementptr inbounds i16* %b, i64 1
  %1 = load i16* %arrayidx1, align 2, !tbaa !1
  store i16 %1, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 1), align 2, !tbaa !1
  call void @llvm.memset.p0i8.i64(i8* bitcast (i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2) to i8*), i8 0, i64 14, i32 4, i1 false)
  %arrayidx3 = getelementptr inbounds i16* %a, i64 8
  %arraydecay = getelementptr inbounds [9 x i16]* %pprod, i64 0, i64 0
  %add.ptr.i = getelementptr inbounds [9 x i16]* %pprod, i64 0, i64 8
  %incdec.ptr.i = getelementptr inbounds [9 x i16]* %pprod, i64 0, i64 7
  %incdec.ptr.1.i = getelementptr inbounds [9 x i16]* %pprod, i64 0, i64 6
  %incdec.ptr.2.i = getelementptr inbounds [9 x i16]* %pprod, i64 0, i64 5
  %incdec.ptr.3.i = getelementptr inbounds [9 x i16]* %pprod, i64 0, i64 4
  %incdec.ptr.4.i = getelementptr inbounds [9 x i16]* %pprod, i64 0, i64 3
  %incdec.ptr.5.i = getelementptr inbounds [9 x i16]* %pprod, i64 0, i64 2
  br label %for.body6

for.cond18.preheader:                             ; preds = %if.end
  %2 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 0), align 16, !tbaa !1
  store i16 %2, i16* %b, align 2, !tbaa !1
  %3 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 1), align 2, !tbaa !1
  store i16 %3, i16* %arrayidx1, align 2, !tbaa !1
  %4 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2), align 4, !tbaa !1
  %arrayidx25.2 = getelementptr inbounds i16* %b, i64 2
  store i16 %4, i16* %arrayidx25.2, align 2, !tbaa !1
  %5 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 3), align 2, !tbaa !1
  %arrayidx25.3 = getelementptr inbounds i16* %b, i64 3
  store i16 %5, i16* %arrayidx25.3, align 2, !tbaa !1
  %6 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4), align 8, !tbaa !1
  %arrayidx25.4 = getelementptr inbounds i16* %b, i64 4
  store i16 %6, i16* %arrayidx25.4, align 2, !tbaa !1
  %7 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 5), align 2, !tbaa !1
  %arrayidx25.5 = getelementptr inbounds i16* %b, i64 5
  store i16 %7, i16* %arrayidx25.5, align 2, !tbaa !1
  %8 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 6), align 4, !tbaa !1
  %arrayidx25.6 = getelementptr inbounds i16* %b, i64 6
  store i16 %8, i16* %arrayidx25.6, align 2, !tbaa !1
  %9 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 7), align 2, !tbaa !1
  %arrayidx25.7 = getelementptr inbounds i16* %b, i64 7
  store i16 %9, i16* %arrayidx25.7, align 2, !tbaa !1
  %10 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  %arrayidx25.8 = getelementptr inbounds i16* %b, i64 8
  store i16 %10, i16* %arrayidx25.8, align 2, !tbaa !1
  ret i32 %or

for.body6:                                        ; preds = %if.end, %entry
  %11 = phi i16 [ 0, %entry ], [ %41, %if.end ]
  %12 = phi i16 [ 0, %entry ], [ %48, %if.end ]
  %13 = phi i16 [ 0, %entry ], [ %52, %if.end ]
  %14 = phi i16 [ 0, %entry ], [ %50, %if.end ]
  %15 = phi i16 [ 0, %entry ], [ %45, %if.end ]
  %i.146 = phi i32 [ 3, %entry ], [ %inc16, %if.end ]
  %j.045 = phi i32 [ 0, %entry ], [ %or, %if.end ]
  %p.044 = phi i16* [ %arrayidx3, %entry ], [ %incdec.ptr, %if.end ]
  %16 = load i16* %p.044, align 2, !tbaa !1
  %cmp7 = icmp eq i16 %16, 0
  %incdec.ptr = getelementptr inbounds i16* %p.044, i64 -1
  br i1 %cmp7, label %if.end, label %if.else

if.else:                                          ; preds = %for.body6
  %conv = zext i16 %16 to i32
  call fastcc void @m16m(i32 %conv, i16* %b, i16* %arraydecay)
  %17 = load i16* %add.ptr.i, align 16, !tbaa !1
  %conv.i = zext i16 %17 to i32
  %18 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  %conv2.i = zext i16 %18 to i32
  %add3.i = add i32 %conv2.i, %conv.i
  %and.i = lshr i32 %add3.i, 16
  %and.lobit.i = and i32 %and.i, 1
  %conv4.i = trunc i32 %add3.i to i16
  store i16 %conv4.i, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  %19 = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %conv.1.i = zext i16 %19 to i32
  %20 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 7), align 2, !tbaa !1
  %conv2.1.i = zext i16 %20 to i32
  %add.1.i = add i32 %conv2.1.i, %conv.1.i
  %add3.1.i = add i32 %add.1.i, %and.lobit.i
  %and.1.i = lshr i32 %add3.1.i, 16
  %and.lobit.1.i = and i32 %and.1.i, 1
  %conv4.1.i = trunc i32 %add3.1.i to i16
  store i16 %conv4.1.i, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 7), align 2, !tbaa !1
  %21 = load i16* %incdec.ptr.1.i, align 4, !tbaa !1
  %conv.2.i = zext i16 %21 to i32
  %22 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 6), align 4, !tbaa !1
  %conv2.2.i = zext i16 %22 to i32
  %add.2.i = add i32 %conv2.2.i, %conv.2.i
  %add3.2.i = add i32 %add.2.i, %and.lobit.1.i
  %and.2.i = lshr i32 %add3.2.i, 16
  %and.lobit.2.i = and i32 %and.2.i, 1
  %conv4.2.i = trunc i32 %add3.2.i to i16
  store i16 %conv4.2.i, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 6), align 4, !tbaa !1
  %23 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %conv.3.i = zext i16 %23 to i32
  %24 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 5), align 2, !tbaa !1
  %conv2.3.i = zext i16 %24 to i32
  %add.3.i = add i32 %conv2.3.i, %conv.3.i
  %add3.3.i = add i32 %add.3.i, %and.lobit.2.i
  %and.3.i = lshr i32 %add3.3.i, 16
  %and.lobit.3.i = and i32 %and.3.i, 1
  %conv4.3.i = trunc i32 %add3.3.i to i16
  store i16 %conv4.3.i, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 5), align 2, !tbaa !1
  %25 = load i16* %incdec.ptr.3.i, align 8, !tbaa !1
  %conv.4.i = zext i16 %25 to i32
  %26 = load i32* bitcast (i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4) to i32*), align 8
  %27 = load i64* bitcast (i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4) to i64*), align 8
  %28 = trunc i64 %27 to i32
  %conv2.4.i = and i32 %28, 65535
  %add.4.i = add i32 %conv2.4.i, %conv.4.i
  %add3.4.i = add i32 %add.4.i, %and.lobit.3.i
  %and.4.i = lshr i32 %add3.4.i, 16
  %and.lobit.4.i = and i32 %and.4.i, 1
  %conv4.4.i = trunc i32 %add3.4.i to i16
  store i16 %conv4.4.i, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4), align 8, !tbaa !1
  %29 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %conv.5.i = zext i16 %29 to i32
  %30 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 3), align 2, !tbaa !1
  %conv2.5.i = zext i16 %30 to i32
  %add.5.i = add i32 %conv2.5.i, %conv.5.i
  %add3.5.i = add i32 %add.5.i, %and.lobit.4.i
  %and.5.i = lshr i32 %add3.5.i, 16
  %and.lobit.5.i = and i32 %and.5.i, 1
  %conv4.5.i = trunc i32 %add3.5.i to i16
  store i16 %conv4.5.i, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 3), align 2, !tbaa !1
  %31 = load i16* %incdec.ptr.5.i, align 4, !tbaa !1
  %conv.6.i = zext i16 %31 to i32
  %32 = load i32* bitcast (i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2) to i32*), align 4
  %add.6.i = add i32 %32, %conv.6.i
  %add3.6.i = add i32 %add.6.i, %and.lobit.5.i
  %conv4.6.i = trunc i32 %add3.6.i to i16
  store i16 %conv4.6.i, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2), align 4, !tbaa !1
  %33 = lshr i64 %27, 48
  %34 = trunc i64 %33 to i16
  %35 = lshr i64 %27, 32
  %36 = trunc i64 %35 to i16
  %37 = lshr i32 %26, 16
  %38 = trunc i32 %37 to i16
  %39 = lshr i32 %32, 16
  %40 = trunc i32 %39 to i16
  br label %if.end

if.end:                                           ; preds = %for.body6, %if.else
  %41 = phi i16 [ 0, %for.body6 ], [ %conv4.6.i, %if.else ]
  %42 = phi i16 [ %11, %for.body6 ], [ %40, %if.else ]
  %43 = phi i16 [ %12, %for.body6 ], [ %38, %if.else ]
  %44 = phi i16 [ %13, %for.body6 ], [ %36, %if.else ]
  %45 = phi i16 [ %14, %for.body6 ], [ %34, %if.else ]
  %46 = phi i16 [ %15, %for.body6 ], [ %conv4.i, %if.else ]
  %conv12 = zext i16 %46 to i32
  %or = or i32 %conv12, %j.045
  store i16 %45, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  store i16 %44, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 7), align 2, !tbaa !1
  store i16 %43, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 6), align 4, !tbaa !1
  %47 = load i64* bitcast (i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4) to i64*), align 8
  %48 = trunc i64 %47 to i16
  store i16 %48, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 5), align 2, !tbaa !1
  store i16 %42, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4), align 8, !tbaa !1
  store i16 %41, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 3), align 2, !tbaa !1
  store i16 0, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2), align 4, !tbaa !1
  %inc16 = add nsw i32 %i.146, 1
  %exitcond = icmp eq i32 %inc16, 9
  %49 = lshr i64 %47, 48
  %50 = trunc i64 %49 to i16
  %51 = lshr i64 %47, 32
  %52 = trunc i64 %51 to i16
  br i1 %exitcond, label %for.cond18.preheader, label %for.body6
}

; Function Attrs: nounwind uwtable
define internal fastcc void @toe53(i16* %x, i16* nocapture %y) #0 {
entry:
  %arrayidx.i = getelementptr inbounds i16* %x, i64 1
  %0 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.cond.i:                                       ; preds = %for.body.i
  %1 = trunc i64 %indvars.iv.next.i to i32
  %cmp2.i = icmp slt i32 %1, 9
  br i1 %cmp2.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.cond.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.cond.i ], [ 3, %entry ]
  %arrayidx4.i = getelementptr inbounds i16* %x, i64 %indvars.iv.i
  %2 = load i16* %arrayidx4.i, align 2, !tbaa !1
  %cmp6.i = icmp eq i16 %2, 0
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  br i1 %cmp6.i, label %for.cond.i, label %if.then

if.then:                                          ; preds = %for.body.i
  %x.val = load i16* %x, align 2, !tbaa !1
  %cmp.i62 = icmp ne i16 %x.val, 0
  %conv1.i = zext i1 %cmp.i62 to i16
  %incdec.ptr3.i = getelementptr inbounds i16* %y, i64 1
  store i16 0, i16* %y, align 2, !tbaa !1
  %incdec.ptr3.i.1 = getelementptr inbounds i16* %y, i64 2
  store i16 0, i16* %incdec.ptr3.i, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr3.i.1, align 2, !tbaa !1
  %scevgep.i = getelementptr i16* %y, i64 3
  %shl.i = shl nuw i16 %conv1.i, 15
  %or.i = or i16 %shl.i, 32760
  store i16 %or.i, i16* %scevgep.i, align 2, !tbaa !1
  br label %return

if.end:                                           ; preds = %for.cond.i, %entry
  %add.ptr = getelementptr inbounds i16* %y, i64 3
  store i16 0, i16* %add.ptr, align 2, !tbaa !1
  %3 = load i16* %x, align 2, !tbaa !1
  %tobool2 = icmp eq i16 %3, 0
  %. = select i1 %tobool2, i16 0, i16 -32768
  store i16 %., i16* %add.ptr, align 2, !tbaa !1
  %incdec.ptr5 = getelementptr inbounds i16* %x, i64 2
  %4 = load i16* %arrayidx.i, align 2, !tbaa !1
  %cmp = icmp ugt i16 %4, 2046
  br i1 %cmp, label %if.then7, label %if.end13

if.then7:                                         ; preds = %if.end
  %or = or i16 %., 32752
  store i16 %or, i16* %add.ptr, align 2, !tbaa !1
  %incdec.ptr10 = getelementptr inbounds i16* %y, i64 2
  store i16 0, i16* %incdec.ptr10, align 2, !tbaa !1
  %incdec.ptr11 = getelementptr inbounds i16* %y, i64 1
  store i16 0, i16* %incdec.ptr11, align 2, !tbaa !1
  store i16 0, i16* %y, align 2, !tbaa !1
  br label %return

if.end13:                                         ; preds = %if.end
  %cmp15 = icmp eq i16 %4, 0
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end13
  %call18 = tail call fastcc i32 @eshift(i16* %x, i32 4)
  br label %if.end22

if.else:                                          ; preds = %if.end13
  %shl = shl i16 %4, 4
  %call21 = tail call fastcc i32 @eshift(i16* %x, i32 5)
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then17
  %i.0 = phi i16 [ 0, %if.then17 ], [ %shl, %if.else ]
  %incdec.ptr23 = getelementptr inbounds i16* %x, i64 3
  %5 = load i16* %incdec.ptr5, align 2, !tbaa !1
  %and = and i16 %5, 15
  %or26 = or i16 %and, %i.0
  %6 = load i16* %add.ptr, align 2, !tbaa !1
  %or3061 = or i16 %or26, %6
  store i16 %or3061, i16* %add.ptr, align 2, !tbaa !1
  %incdec.ptr32 = getelementptr inbounds i16* %x, i64 4
  %7 = load i16* %incdec.ptr23, align 2, !tbaa !1
  %incdec.ptr33 = getelementptr inbounds i16* %y, i64 2
  store i16 %7, i16* %incdec.ptr33, align 2, !tbaa !1
  %incdec.ptr34 = getelementptr inbounds i16* %x, i64 5
  %8 = load i16* %incdec.ptr32, align 2, !tbaa !1
  %incdec.ptr35 = getelementptr inbounds i16* %y, i64 1
  store i16 %8, i16* %incdec.ptr35, align 2, !tbaa !1
  %9 = load i16* %incdec.ptr34, align 2, !tbaa !1
  store i16 %9, i16* %y, align 2, !tbaa !1
  br label %return

return:                                           ; preds = %if.end22, %if.then7, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @toe64(i16* nocapture %a, i16* nocapture %b) #0 {
entry:
  %arrayidx.i = getelementptr inbounds i16* %a, i64 1
  %0 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.cond.i:                                       ; preds = %for.body.i
  %1 = trunc i64 %indvars.iv.next.i to i32
  %cmp2.i = icmp slt i32 %1, 9
  br i1 %cmp2.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.cond.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.cond.i ], [ 3, %entry ]
  %arrayidx4.i = getelementptr inbounds i16* %a, i64 %indvars.iv.i
  %2 = load i16* %arrayidx4.i, align 2, !tbaa !1
  %cmp6.i = icmp eq i16 %2, 0
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  br i1 %cmp6.i, label %for.cond.i, label %if.then

if.then:                                          ; preds = %for.body.i
  %a.val = load i16* %a, align 2, !tbaa !1
  %cmp.i50 = icmp ne i16 %a.val, 0
  %conv1.i = zext i1 %cmp.i50 to i16
  %incdec.ptr3.i = getelementptr inbounds i16* %b, i64 1
  store i16 0, i16* %b, align 2, !tbaa !1
  %incdec.ptr3.i.1 = getelementptr inbounds i16* %b, i64 2
  store i16 0, i16* %incdec.ptr3.i, align 2, !tbaa !1
  %incdec.ptr3.i.2 = getelementptr inbounds i16* %b, i64 3
  store i16 0, i16* %incdec.ptr3.i.1, align 2, !tbaa !1
  %incdec.ptr3.i.3 = getelementptr inbounds i16* %b, i64 4
  store i16 -16384, i16* %incdec.ptr3.i.2, align 2, !tbaa !1
  store i16 -1, i16* %incdec.ptr3.i.3, align 2, !tbaa !1
  %scevgep.i = getelementptr i16* %b, i64 5
  %shl.i = shl nuw i16 %conv1.i, 15
  store i16 %shl.i, i16* %scevgep.i, align 2, !tbaa !1
  br label %for.end

if.end:                                           ; preds = %for.cond.i, %entry
  %cmp = icmp eq i16 %0, 0
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %add.ptr.i = getelementptr inbounds i16* %a, i64 2
  %3 = load i16* %add.ptr.i, align 2, !tbaa !1
  %shr22.i = lshr i16 %3, 1
  store i16 %shr22.i, i16* %add.ptr.i, align 2, !tbaa !1
  %incdec.ptr.i = getelementptr inbounds i16* %a, i64 3
  %4 = load i16* %incdec.ptr.i, align 2, !tbaa !1
  %shr22.1.i = lshr i16 %4, 1
  %5 = shl i16 %3, 15
  %6 = or i16 %shr22.1.i, %5
  store i16 %6, i16* %incdec.ptr.i, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds i16* %a, i64 4
  %7 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %shr22.2.i = lshr i16 %7, 1
  %8 = shl i16 %4, 15
  %9 = or i16 %shr22.2.i, %8
  store i16 %9, i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds i16* %a, i64 5
  %10 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %shr22.3.i = lshr i16 %10, 1
  %11 = shl i16 %7, 15
  %12 = or i16 %shr22.3.i, %11
  store i16 %12, i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds i16* %a, i64 6
  %13 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %shr22.4.i = lshr i16 %13, 1
  %14 = shl i16 %10, 15
  %15 = or i16 %shr22.4.i, %14
  store i16 %15, i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr.4.i = getelementptr inbounds i16* %a, i64 7
  %16 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %shr22.5.i = lshr i16 %16, 1
  %17 = shl i16 %13, 15
  %18 = or i16 %shr22.5.i, %17
  store i16 %18, i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %shl.5.i = shl i16 %16, 15
  %incdec.ptr.5.i = getelementptr inbounds i16* %a, i64 8
  %19 = load i16* %incdec.ptr.5.i, align 2, !tbaa !1
  %shr22.6.i = lshr i16 %19, 1
  %20 = or i16 %shr22.6.i, %shl.5.i
  store i16 %20, i16* %incdec.ptr.5.i, align 2, !tbaa !1
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %add.ptr = getelementptr inbounds i16* %b, i64 4
  %add.ptr5 = getelementptr inbounds i16* %b, i64 5
  store i16 0, i16* %add.ptr5, align 2, !tbaa !1
  %21 = load i16* %a, align 2, !tbaa !1
  %tobool6 = icmp eq i16 %21, 0
  %22 = load i16* %arrayidx.i, align 2, !tbaa !1
  %or = or i16 %22, -32768
  %storemerge = select i1 %tobool6, i16 %22, i16 %or
  %q.0 = getelementptr inbounds i16* %b, i64 3
  store i16 %storemerge, i16* %add.ptr, align 2, !tbaa !1
  %23 = load i16* %arrayidx.i, align 2, !tbaa !1
  %and.i.i = and i16 %23, 32767
  %cmp.i.i = icmp eq i16 %and.i.i, 32767
  br i1 %cmp.i.i, label %for.body.i.i, label %if.end22

for.cond.i.i:                                     ; preds = %for.body.i.i
  %24 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i = icmp slt i32 %24, 9
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.then18

for.body.i.i:                                     ; preds = %if.end4, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %if.end4 ]
  %arrayidx4.i.i = getelementptr inbounds i16* %a, i64 %indvars.iv.i.i
  %25 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %25, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.end22

if.then18:                                        ; preds = %for.cond.i.i
  %incdec.ptr19 = getelementptr inbounds i16* %b, i64 2
  store i16 -32768, i16* %q.0, align 2, !tbaa !1
  %incdec.ptr20 = getelementptr inbounds i16* %b, i64 1
  store i16 0, i16* %incdec.ptr19, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr20, align 2, !tbaa !1
  store i16 0, i16* %b, align 2, !tbaa !1
  br label %for.end

if.end22:                                         ; preds = %for.body.i.i, %if.end4
  %incdec.ptr15 = getelementptr inbounds i16* %a, i64 3
  %incdec.ptr26 = getelementptr inbounds i16* %a, i64 4
  %26 = load i16* %incdec.ptr15, align 2, !tbaa !1
  %incdec.ptr27 = getelementptr inbounds i16* %b, i64 2
  store i16 %26, i16* %q.0, align 2, !tbaa !1
  %incdec.ptr26.1 = getelementptr inbounds i16* %a, i64 5
  %27 = load i16* %incdec.ptr26, align 2, !tbaa !1
  %incdec.ptr27.1 = getelementptr inbounds i16* %b, i64 1
  store i16 %27, i16* %incdec.ptr27, align 2, !tbaa !1
  %incdec.ptr26.2 = getelementptr inbounds i16* %a, i64 6
  %28 = load i16* %incdec.ptr26.1, align 2, !tbaa !1
  store i16 %28, i16* %incdec.ptr27.1, align 2, !tbaa !1
  %29 = load i16* %incdec.ptr26.2, align 2, !tbaa !1
  store i16 %29, i16* %b, align 2, !tbaa !1
  br label %for.end

for.end:                                          ; preds = %if.end22, %if.then, %if.then18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @m16m(i32 %a, i16* nocapture readonly %b, i16* nocapture %c) #0 {
entry:
  %p = alloca [9 x i16], align 16
  %arrayidx = getelementptr inbounds [9 x i16]* %p, i64 0, i64 7
  %incdec.ptr = getelementptr inbounds [9 x i16]* %p, i64 0, i64 8
  store i16 0, i16* %arrayidx, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr, align 16, !tbaa !1
  %arrayidx1 = getelementptr inbounds i16* %b, i64 8
  %0 = load i16* %arrayidx1, align 2, !tbaa !1
  %cmp2 = icmp eq i16 %0, 0
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %incdec.ptr5 = getelementptr inbounds [9 x i16]* %p, i64 0, i64 7
  %add.ptr = getelementptr inbounds [9 x i16]* %p, i64 0, i64 6
  store i16 0, i16* %add.ptr, align 4, !tbaa !1
  br label %for.inc

if.else:                                          ; preds = %entry
  %conv = zext i16 %0 to i32
  %mul = mul i32 %conv, %a
  %conv9 = trunc i32 %mul to i16
  %incdec.ptr10 = getelementptr inbounds [9 x i16]* %p, i64 0, i64 7
  store i16 %conv9, i16* %incdec.ptr, align 16, !tbaa !1
  %shr11 = lshr i32 %mul, 16
  %conv15 = trunc i32 %shr11 to i16
  store i16 %conv15, i16* %incdec.ptr10, align 2, !tbaa !1
  %add.ptr18 = getelementptr inbounds [9 x i16]* %p, i64 0, i64 6
  store i16 0, i16* %add.ptr18, align 4, !tbaa !1
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else
  %1 = phi i32 [ 0, %if.then ], [ %shr11, %if.else ]
  %pp.1 = phi i16* [ %incdec.ptr5, %if.then ], [ %incdec.ptr10, %if.else ]
  %ps.1 = getelementptr inbounds i16* %b, i64 7
  %2 = load i16* %ps.1, align 2, !tbaa !1
  %cmp2.1 = icmp eq i16 %2, 0
  br i1 %cmp2.1, label %if.then.1, label %if.else.1

if.else.1:                                        ; preds = %for.inc
  %conv.1 = zext i16 %2 to i32
  %mul.1 = mul i32 %conv.1, %a
  %and.1 = and i32 %mul.1, 65535
  %add.1 = add i32 %1, %and.1
  %conv9.1 = trunc i32 %add.1 to i16
  %incdec.ptr10.1 = getelementptr inbounds i16* %pp.1, i64 -1
  store i16 %conv9.1, i16* %pp.1, align 2, !tbaa !1
  %shr.1 = lshr i32 %add.1, 16
  %shr11.1 = lshr i32 %mul.1, 16
  %3 = load i16* %incdec.ptr10.1, align 2, !tbaa !1
  %conv13.1 = zext i16 %3 to i32
  %add12.1 = add i32 %conv13.1, %shr11.1
  %add14.1 = add i32 %add12.1, %shr.1
  %conv15.1 = trunc i32 %add14.1 to i16
  store i16 %conv15.1, i16* %incdec.ptr10.1, align 2, !tbaa !1
  %shr16.1 = lshr i32 %add14.1, 16
  %conv17.1 = trunc i32 %shr16.1 to i16
  %add.ptr18.1 = getelementptr inbounds i16* %pp.1, i64 -2
  store i16 %conv17.1, i16* %add.ptr18.1, align 2, !tbaa !1
  br label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %incdec.ptr5.1 = getelementptr inbounds i16* %pp.1, i64 -1
  %add.ptr.1 = getelementptr inbounds i16* %pp.1, i64 -2
  store i16 0, i16* %add.ptr.1, align 2, !tbaa !1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %if.else.1
  %pp.1.1 = phi i16* [ %incdec.ptr5.1, %if.then.1 ], [ %incdec.ptr10.1, %if.else.1 ]
  %ps.1.1 = getelementptr inbounds i16* %b, i64 6
  %4 = load i16* %ps.1.1, align 2, !tbaa !1
  %cmp2.2 = icmp eq i16 %4, 0
  br i1 %cmp2.2, label %if.then.2, label %if.else.2

if.else.2:                                        ; preds = %for.inc.1
  %conv.2 = zext i16 %4 to i32
  %mul.2 = mul i32 %conv.2, %a
  %and.2 = and i32 %mul.2, 65535
  %5 = load i16* %pp.1.1, align 2, !tbaa !1
  %conv8.2 = zext i16 %5 to i32
  %add.2 = add i32 %conv8.2, %and.2
  %conv9.2 = trunc i32 %add.2 to i16
  %incdec.ptr10.2 = getelementptr inbounds i16* %pp.1.1, i64 -1
  store i16 %conv9.2, i16* %pp.1.1, align 2, !tbaa !1
  %shr.2 = lshr i32 %add.2, 16
  %shr11.2 = lshr i32 %mul.2, 16
  %6 = load i16* %incdec.ptr10.2, align 2, !tbaa !1
  %conv13.2 = zext i16 %6 to i32
  %add12.2 = add i32 %conv13.2, %shr11.2
  %add14.2 = add i32 %add12.2, %shr.2
  %conv15.2 = trunc i32 %add14.2 to i16
  store i16 %conv15.2, i16* %incdec.ptr10.2, align 2, !tbaa !1
  %shr16.2 = lshr i32 %add14.2, 16
  %conv17.2 = trunc i32 %shr16.2 to i16
  %add.ptr18.2 = getelementptr inbounds i16* %pp.1.1, i64 -2
  store i16 %conv17.2, i16* %add.ptr18.2, align 2, !tbaa !1
  br label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %incdec.ptr5.2 = getelementptr inbounds i16* %pp.1.1, i64 -1
  %add.ptr.2 = getelementptr inbounds i16* %pp.1.1, i64 -2
  store i16 0, i16* %add.ptr.2, align 2, !tbaa !1
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %if.else.2
  %pp.1.2 = phi i16* [ %incdec.ptr5.2, %if.then.2 ], [ %incdec.ptr10.2, %if.else.2 ]
  %ps.1.2 = getelementptr inbounds i16* %b, i64 5
  %7 = load i16* %ps.1.2, align 2, !tbaa !1
  %cmp2.3 = icmp eq i16 %7, 0
  br i1 %cmp2.3, label %if.then.3, label %if.else.3

if.else.3:                                        ; preds = %for.inc.2
  %conv.3 = zext i16 %7 to i32
  %mul.3 = mul i32 %conv.3, %a
  %and.3 = and i32 %mul.3, 65535
  %8 = load i16* %pp.1.2, align 2, !tbaa !1
  %conv8.3 = zext i16 %8 to i32
  %add.3 = add i32 %conv8.3, %and.3
  %conv9.3 = trunc i32 %add.3 to i16
  %incdec.ptr10.3 = getelementptr inbounds i16* %pp.1.2, i64 -1
  store i16 %conv9.3, i16* %pp.1.2, align 2, !tbaa !1
  %shr.3 = lshr i32 %add.3, 16
  %shr11.3 = lshr i32 %mul.3, 16
  %9 = load i16* %incdec.ptr10.3, align 2, !tbaa !1
  %conv13.3 = zext i16 %9 to i32
  %add12.3 = add i32 %conv13.3, %shr11.3
  %add14.3 = add i32 %add12.3, %shr.3
  %conv15.3 = trunc i32 %add14.3 to i16
  store i16 %conv15.3, i16* %incdec.ptr10.3, align 2, !tbaa !1
  %shr16.3 = lshr i32 %add14.3, 16
  %conv17.3 = trunc i32 %shr16.3 to i16
  %add.ptr18.3 = getelementptr inbounds i16* %pp.1.2, i64 -2
  store i16 %conv17.3, i16* %add.ptr18.3, align 2, !tbaa !1
  br label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %incdec.ptr5.3 = getelementptr inbounds i16* %pp.1.2, i64 -1
  %add.ptr.3 = getelementptr inbounds i16* %pp.1.2, i64 -2
  store i16 0, i16* %add.ptr.3, align 2, !tbaa !1
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %if.else.3
  %pp.1.3 = phi i16* [ %incdec.ptr5.3, %if.then.3 ], [ %incdec.ptr10.3, %if.else.3 ]
  %ps.1.3 = getelementptr inbounds i16* %b, i64 4
  %10 = load i16* %ps.1.3, align 2, !tbaa !1
  %cmp2.4 = icmp eq i16 %10, 0
  br i1 %cmp2.4, label %if.then.4, label %if.else.4

if.else.4:                                        ; preds = %for.inc.3
  %conv.4 = zext i16 %10 to i32
  %mul.4 = mul i32 %conv.4, %a
  %and.4 = and i32 %mul.4, 65535
  %11 = load i16* %pp.1.3, align 2, !tbaa !1
  %conv8.4 = zext i16 %11 to i32
  %add.4 = add i32 %conv8.4, %and.4
  %conv9.4 = trunc i32 %add.4 to i16
  %incdec.ptr10.4 = getelementptr inbounds i16* %pp.1.3, i64 -1
  store i16 %conv9.4, i16* %pp.1.3, align 2, !tbaa !1
  %shr.4 = lshr i32 %add.4, 16
  %shr11.4 = lshr i32 %mul.4, 16
  %12 = load i16* %incdec.ptr10.4, align 2, !tbaa !1
  %conv13.4 = zext i16 %12 to i32
  %add12.4 = add i32 %conv13.4, %shr11.4
  %add14.4 = add i32 %add12.4, %shr.4
  %conv15.4 = trunc i32 %add14.4 to i16
  store i16 %conv15.4, i16* %incdec.ptr10.4, align 2, !tbaa !1
  %shr16.4 = lshr i32 %add14.4, 16
  %conv17.4 = trunc i32 %shr16.4 to i16
  %add.ptr18.4 = getelementptr inbounds i16* %pp.1.3, i64 -2
  store i16 %conv17.4, i16* %add.ptr18.4, align 2, !tbaa !1
  br label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %incdec.ptr5.4 = getelementptr inbounds i16* %pp.1.3, i64 -1
  %add.ptr.4 = getelementptr inbounds i16* %pp.1.3, i64 -2
  store i16 0, i16* %add.ptr.4, align 2, !tbaa !1
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %if.else.4
  %pp.1.4 = phi i16* [ %incdec.ptr5.4, %if.then.4 ], [ %incdec.ptr10.4, %if.else.4 ]
  %ps.1.4 = getelementptr inbounds i16* %b, i64 3
  %13 = load i16* %ps.1.4, align 2, !tbaa !1
  %cmp2.5 = icmp eq i16 %13, 0
  br i1 %cmp2.5, label %if.then.5, label %if.else.5

if.else.5:                                        ; preds = %for.inc.4
  %conv.5 = zext i16 %13 to i32
  %mul.5 = mul i32 %conv.5, %a
  %and.5 = and i32 %mul.5, 65535
  %14 = load i16* %pp.1.4, align 2, !tbaa !1
  %conv8.5 = zext i16 %14 to i32
  %add.5 = add i32 %conv8.5, %and.5
  %conv9.5 = trunc i32 %add.5 to i16
  %incdec.ptr10.5 = getelementptr inbounds i16* %pp.1.4, i64 -1
  store i16 %conv9.5, i16* %pp.1.4, align 2, !tbaa !1
  %shr.5 = lshr i32 %add.5, 16
  %shr11.5 = lshr i32 %mul.5, 16
  %15 = load i16* %incdec.ptr10.5, align 2, !tbaa !1
  %conv13.5 = zext i16 %15 to i32
  %add12.5 = add i32 %conv13.5, %shr11.5
  %add14.5 = add i32 %add12.5, %shr.5
  %conv15.5 = trunc i32 %add14.5 to i16
  store i16 %conv15.5, i16* %incdec.ptr10.5, align 2, !tbaa !1
  %shr16.5 = lshr i32 %add14.5, 16
  %conv17.5 = trunc i32 %shr16.5 to i16
  %add.ptr18.5 = getelementptr inbounds i16* %pp.1.4, i64 -2
  store i16 %conv17.5, i16* %add.ptr18.5, align 2, !tbaa !1
  br label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %add.ptr.5 = getelementptr inbounds i16* %pp.1.4, i64 -2
  store i16 0, i16* %add.ptr.5, align 2, !tbaa !1
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %if.else.5
  %scevgep = getelementptr i16* %c, i64 2
  %scevgep52 = bitcast i16* %scevgep to i8*
  %scevgep53 = getelementptr [9 x i16]* %p, i64 0, i64 2
  %scevgep5354 = bitcast i16* %scevgep53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep52, i8* %scevgep5354, i64 14, i32 2, i1 false)
  ret void
}

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #6

; Function Attrs: nounwind uwtable
define internal fastcc void @eiremain(i16* %den, i16* %num) #0 {
entry:
  %arrayidx = getelementptr inbounds i16* %den, i64 1
  %0 = load i16* %arrayidx, align 2, !tbaa !1
  %conv = zext i16 %0 to i32
  %call = tail call fastcc i32 @enormlz(i16* %den)
  %sub = sub nsw i32 %conv, %call
  %arrayidx1 = getelementptr inbounds i16* %num, i64 1
  %1 = load i16* %arrayidx1, align 2, !tbaa !1
  %conv2 = zext i16 %1 to i32
  %call3 = tail call fastcc i32 @enormlz(i16* %num)
  %sub4 = sub nsw i32 %conv2, %call3
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([9 x i16]* @equot to i8*), i8 0, i64 18, i32 16, i1 false) #1
  %cmp54 = icmp slt i32 %sub4, %sub
  br i1 %cmp54, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %add.ptr.i = getelementptr inbounds i16* %den, i64 2
  %add.ptr1.i = getelementptr inbounds i16* %num, i64 2
  %add.ptr.i26 = getelementptr inbounds i16* %den, i64 8
  %add.ptr1.i27 = getelementptr inbounds i16* %num, i64 8
  %incdec.ptr.i29 = getelementptr inbounds i16* %den, i64 7
  %incdec.ptr5.i = getelementptr inbounds i16* %num, i64 7
  %incdec.ptr.1.i = getelementptr inbounds i16* %den, i64 6
  %incdec.ptr5.1.i = getelementptr inbounds i16* %num, i64 6
  %incdec.ptr.2.i = getelementptr inbounds i16* %den, i64 5
  %incdec.ptr5.2.i = getelementptr inbounds i16* %num, i64 5
  %incdec.ptr.3.i = getelementptr inbounds i16* %den, i64 4
  %incdec.ptr5.3.i = getelementptr inbounds i16* %num, i64 4
  %incdec.ptr.4.i = getelementptr inbounds i16* %den, i64 3
  %incdec.ptr5.4.i = getelementptr inbounds i16* %num, i64 3
  %2 = add i32 %call3, -1
  %3 = sub i32 %2, %conv2
  %4 = add i32 %call, -1
  %5 = sub i32 %4, %conv
  %6 = icmp sgt i32 %3, %5
  %smax = select i1 %6, i32 %3, i32 %5
  br label %while.body

while.body:                                       ; preds = %if.end, %while.body.lr.ph
  %ln.055 = phi i32 [ %sub4, %while.body.lr.ph ], [ %sub12, %if.end ]
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %while.body
  %i.021.i = phi i32 [ 2, %while.body ], [ %inc.i, %for.inc.i ]
  %b.addr.020.i = phi i16* [ %add.ptr1.i, %while.body ], [ %incdec.ptr2.i, %for.inc.i ]
  %a.addr.019.i = phi i16* [ %add.ptr.i, %while.body ], [ %incdec.ptr.i, %for.inc.i ]
  %7 = load i16* %a.addr.019.i, align 2, !tbaa !1
  %8 = load i16* %b.addr.020.i, align 2, !tbaa !1
  %cmp4.i = icmp eq i16 %7, %8
  br i1 %cmp4.i, label %for.inc.i, label %difrnt.i

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr2.i = getelementptr inbounds i16* %b.addr.020.i, i64 1
  %incdec.ptr.i = getelementptr inbounds i16* %a.addr.019.i, i64 1
  %inc.i = add nsw i32 %i.021.i, 1
  %cmp.i25 = icmp slt i32 %inc.i, 9
  br i1 %cmp.i25, label %for.body.i, label %if.then

difrnt.i:                                         ; preds = %for.body.i
  %cmp10.i = icmp ugt i16 %7, %8
  br i1 %cmp10.i, label %if.end, label %if.then

if.then:                                          ; preds = %for.inc.i, %difrnt.i
  %9 = load i16* %add.ptr1.i27, align 2, !tbaa !1
  %conv.i = zext i16 %9 to i32
  %10 = load i16* %add.ptr.i26, align 2, !tbaa !1
  %conv2.i = zext i16 %10 to i32
  %sub.i28 = sub i32 %conv.i, %conv2.i
  %and.i = lshr i32 %sub.i28, 16
  %and.lobit.i = and i32 %and.i, 1
  %conv4.i = trunc i32 %sub.i28 to i16
  store i16 %conv4.i, i16* %add.ptr1.i27, align 2, !tbaa !1
  %11 = load i16* %incdec.ptr5.i, align 2, !tbaa !1
  %conv.1.i = zext i16 %11 to i32
  %12 = load i16* %incdec.ptr.i29, align 2, !tbaa !1
  %conv2.1.i = zext i16 %12 to i32
  %sub.1.i = sub i32 %conv.1.i, %conv2.1.i
  %sub3.1.i = sub i32 %sub.1.i, %and.lobit.i
  %and.1.i = lshr i32 %sub3.1.i, 16
  %and.lobit.1.i = and i32 %and.1.i, 1
  %conv4.1.i = trunc i32 %sub3.1.i to i16
  store i16 %conv4.1.i, i16* %incdec.ptr5.i, align 2, !tbaa !1
  %13 = load i16* %incdec.ptr5.1.i, align 2, !tbaa !1
  %conv.2.i = zext i16 %13 to i32
  %14 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %conv2.2.i = zext i16 %14 to i32
  %sub.2.i = sub i32 %conv.2.i, %conv2.2.i
  %sub3.2.i = sub i32 %sub.2.i, %and.lobit.1.i
  %and.2.i = lshr i32 %sub3.2.i, 16
  %and.lobit.2.i = and i32 %and.2.i, 1
  %conv4.2.i = trunc i32 %sub3.2.i to i16
  store i16 %conv4.2.i, i16* %incdec.ptr5.1.i, align 2, !tbaa !1
  %15 = load i16* %incdec.ptr5.2.i, align 2, !tbaa !1
  %conv.3.i = zext i16 %15 to i32
  %16 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %conv2.3.i = zext i16 %16 to i32
  %sub.3.i = sub i32 %conv.3.i, %conv2.3.i
  %sub3.3.i = sub i32 %sub.3.i, %and.lobit.2.i
  %and.3.i = lshr i32 %sub3.3.i, 16
  %and.lobit.3.i = and i32 %and.3.i, 1
  %conv4.3.i = trunc i32 %sub3.3.i to i16
  store i16 %conv4.3.i, i16* %incdec.ptr5.2.i, align 2, !tbaa !1
  %17 = load i16* %incdec.ptr5.3.i, align 2, !tbaa !1
  %conv.4.i = zext i16 %17 to i32
  %18 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %conv2.4.i = zext i16 %18 to i32
  %sub.4.i = sub i32 %conv.4.i, %conv2.4.i
  %sub3.4.i = sub i32 %sub.4.i, %and.lobit.3.i
  %and.4.i = lshr i32 %sub3.4.i, 16
  %and.lobit.4.i = and i32 %and.4.i, 1
  %conv4.4.i = trunc i32 %sub3.4.i to i16
  store i16 %conv4.4.i, i16* %incdec.ptr5.3.i, align 2, !tbaa !1
  %19 = load i16* %incdec.ptr5.4.i, align 2, !tbaa !1
  %conv.5.i = zext i16 %19 to i32
  %20 = load i16* %incdec.ptr.4.i, align 2, !tbaa !1
  %conv2.5.i = zext i16 %20 to i32
  %sub.5.i = sub i32 %conv.5.i, %conv2.5.i
  %sub3.5.i = sub i32 %sub.5.i, %and.lobit.4.i
  %and.5.i = lshr i32 %sub3.5.i, 16
  %and.lobit.5.i = and i32 %and.5.i, 1
  %conv4.5.i = trunc i32 %sub3.5.i to i16
  store i16 %conv4.5.i, i16* %incdec.ptr5.4.i, align 2, !tbaa !1
  %21 = load i16* %add.ptr1.i, align 2, !tbaa !1
  %conv.6.i = zext i16 %21 to i32
  %22 = load i16* %add.ptr.i, align 2, !tbaa !1
  %conv2.6.i = zext i16 %22 to i32
  %sub.6.i = sub i32 %conv.6.i, %conv2.6.i
  %sub3.6.i = sub i32 %sub.6.i, %and.lobit.5.i
  %conv4.6.i = trunc i32 %sub3.6.i to i16
  store i16 %conv4.6.i, i16* %add.ptr1.i, align 2, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %difrnt.i, %if.then
  %j.0 = phi i16 [ 1, %if.then ], [ 0, %difrnt.i ]
  %23 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  %.lobit.i = lshr i16 %23, 15
  %shl.i = shl i16 %23, 1
  %24 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 7), align 2, !tbaa !1
  %.lobit.1.i = lshr i16 %24, 15
  %shl.1.i = shl i16 %24, 1
  %25 = or i16 %shl.1.i, %.lobit.i
  store i16 %25, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 7), align 2, !tbaa !1
  %26 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 6), align 4, !tbaa !1
  %.lobit.2.i = lshr i16 %26, 15
  %shl.2.i = shl i16 %26, 1
  %27 = or i16 %shl.2.i, %.lobit.1.i
  store i16 %27, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 6), align 4, !tbaa !1
  %28 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 5), align 2, !tbaa !1
  %.lobit.3.i = lshr i16 %28, 15
  %shl.3.i = shl i16 %28, 1
  %29 = or i16 %shl.3.i, %.lobit.2.i
  store i16 %29, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 5), align 2, !tbaa !1
  %30 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4), align 8, !tbaa !1
  %.lobit.4.i = lshr i16 %30, 15
  %shl.4.i = shl i16 %30, 1
  %31 = or i16 %shl.4.i, %.lobit.3.i
  store i16 %31, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 4), align 8, !tbaa !1
  %32 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 3), align 2, !tbaa !1
  %.lobit.5.i = lshr i16 %32, 15
  %shl.5.i = shl i16 %32, 1
  %33 = or i16 %shl.5.i, %.lobit.4.i
  store i16 %33, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 3), align 2, !tbaa !1
  %34 = load i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2), align 4, !tbaa !1
  %shl.6.i = shl i16 %34, 1
  %35 = or i16 %shl.6.i, %.lobit.5.i
  store i16 %35, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 2), align 4, !tbaa !1
  %or = or i16 %shl.i, %j.0
  store i16 %or, i16* getelementptr inbounds ([9 x i16]* @equot, i64 0, i64 8), align 16, !tbaa !1
  %36 = load i16* %add.ptr1.i27, align 2, !tbaa !1
  %.lobit.i31 = lshr i16 %36, 15
  %shl.i32 = shl i16 %36, 1
  store i16 %shl.i32, i16* %add.ptr1.i27, align 2, !tbaa !1
  %37 = load i16* %incdec.ptr5.i, align 2, !tbaa !1
  %.lobit.1.i34 = lshr i16 %37, 15
  %shl.1.i35 = shl i16 %37, 1
  %38 = or i16 %shl.1.i35, %.lobit.i31
  store i16 %38, i16* %incdec.ptr5.i, align 2, !tbaa !1
  %39 = load i16* %incdec.ptr5.1.i, align 2, !tbaa !1
  %.lobit.2.i37 = lshr i16 %39, 15
  %shl.2.i38 = shl i16 %39, 1
  %40 = or i16 %shl.2.i38, %.lobit.1.i34
  store i16 %40, i16* %incdec.ptr5.1.i, align 2, !tbaa !1
  %41 = load i16* %incdec.ptr5.2.i, align 2, !tbaa !1
  %.lobit.3.i40 = lshr i16 %41, 15
  %shl.3.i41 = shl i16 %41, 1
  %42 = or i16 %shl.3.i41, %.lobit.2.i37
  store i16 %42, i16* %incdec.ptr5.2.i, align 2, !tbaa !1
  %43 = load i16* %incdec.ptr5.3.i, align 2, !tbaa !1
  %.lobit.4.i43 = lshr i16 %43, 15
  %shl.4.i44 = shl i16 %43, 1
  %44 = or i16 %shl.4.i44, %.lobit.3.i40
  store i16 %44, i16* %incdec.ptr5.3.i, align 2, !tbaa !1
  %45 = load i16* %incdec.ptr5.4.i, align 2, !tbaa !1
  %.lobit.5.i46 = lshr i16 %45, 15
  %shl.5.i47 = shl i16 %45, 1
  %46 = or i16 %shl.5.i47, %.lobit.4.i43
  store i16 %46, i16* %incdec.ptr5.4.i, align 2, !tbaa !1
  %47 = load i16* %add.ptr1.i, align 2, !tbaa !1
  %shl.6.i49 = shl i16 %47, 1
  %48 = or i16 %shl.6.i49, %.lobit.5.i46
  store i16 %48, i16* %add.ptr1.i, align 2, !tbaa !1
  %sub12 = add nsw i32 %ln.055, -1
  %cmp = icmp sgt i32 %ln.055, %sub
  br i1 %cmp, label %while.body, label %while.cond.while.end_crit_edge

while.cond.while.end_crit_edge:                   ; preds = %if.end
  %49 = sub i32 -2, %smax
  br label %while.end

while.end:                                        ; preds = %while.cond.while.end_crit_edge, %entry
  %ln.0.lcssa = phi i32 [ %49, %while.cond.while.end_crit_edge ], [ %sub4, %entry ]
  %call.i = tail call fastcc i32 @enormlz(i16* %num) #1
  %sub.i = sub nsw i32 %ln.0.lcssa, %call.i
  %cmp.i = icmp sgt i32 %call.i, 80
  %cmp1.i = icmp slt i32 %sub.i, 32767
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  br i1 %or.cond.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %while.end
  %scevgep7.i.i = bitcast i16* %arrayidx1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %scevgep7.i.i, i8 0, i64 16, i32 2, i1 false) #1
  br label %emdnorm.exit

if.end.i:                                         ; preds = %while.end
  %cmp2.i = icmp slt i32 %sub.i, 0
  br i1 %cmp2.i, label %if.then4.i, label %if.end12.i

if.then4.i:                                       ; preds = %if.end.i
  %cmp5.i = icmp sgt i32 %sub.i, -81
  br i1 %cmp5.i, label %if.then7.i, label %if.else.i

if.then7.i:                                       ; preds = %if.then4.i
  %call8.i = tail call fastcc i32 @eshift(i16* %num, i32 %sub.i) #1
  br label %if.end12.i

if.else.i:                                        ; preds = %if.then4.i
  %scevgep7.i203.i = bitcast i16* %arrayidx1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %scevgep7.i203.i, i8 0, i64 16, i32 2, i1 false) #1
  br label %emdnorm.exit

if.end12.i:                                       ; preds = %if.then7.i, %if.end.i
  %arrayidx123.i = getelementptr inbounds i16* %num, i64 8
  store i16 0, i16* %arrayidx123.i, align 2, !tbaa !1
  %cmp125.i = icmp sgt i32 %sub.i, 32766
  br i1 %cmp125.i, label %if.then127.i, label %if.end137.i

if.then127.i:                                     ; preds = %if.end12.i
  store i16 32767, i16* %arrayidx1, align 2, !tbaa !1
  %scevgep.i = getelementptr i16* %num, i64 2
  %scevgep224.i = bitcast i16* %scevgep.i to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %scevgep224.i, i8 0, i64 12, i32 2, i1 false) #1
  %50 = load i32* @extra_warnings, align 4, !tbaa !9
  %tobool134.i = icmp eq i32 %50, 0
  br i1 %tobool134.i, label %emdnorm.exit, label %if.then135.i

if.then135.i:                                     ; preds = %if.then127.i
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([24 x i8]* @.str4, i64 0, i64 0)) #1
  br label %emdnorm.exit

if.end137.i:                                      ; preds = %if.end12.i
  br i1 %cmp2.i, label %if.then140.i, label %if.else142.i

if.then140.i:                                     ; preds = %if.end137.i
  store i16 0, i16* %arrayidx1, align 2, !tbaa !1
  br label %emdnorm.exit

if.else142.i:                                     ; preds = %if.end137.i
  %conv143.i = trunc i32 %sub.i to i16
  store i16 %conv143.i, i16* %arrayidx1, align 2, !tbaa !1
  br label %emdnorm.exit

emdnorm.exit:                                     ; preds = %if.then.i, %if.else.i, %if.then127.i, %if.then135.i, %if.then140.i, %if.else142.i
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @eadd1(i16* nocapture readonly %a, i16* nocapture readonly %b, i16* %c) #0 {
entry:
  %ai = alloca [9 x i16], align 16
  %bi = alloca [9 x i16], align 16
  %arrayidx.i.i = getelementptr inbounds i16* %a, i64 5
  %0 = load i16* %arrayidx.i.i, align 2, !tbaa !1
  %and.i.i = and i16 %0, 32767
  %cmp.i.i = icmp eq i16 %and.i.i, 32767
  br i1 %cmp.i.i, label %for.body.i.i, label %if.end3

for.body.i.i:                                     ; preds = %entry, %for.inc.i.i
  %i.012.i.i = phi i32 [ %inc.i.i, %for.inc.i.i ], [ 0, %entry ]
  %x.addr.011.i.i = phi i16* [ %incdec.ptr.i.i, %for.inc.i.i ], [ %a, %entry ]
  %1 = load i16* %x.addr.011.i.i, align 2, !tbaa !1
  %cmp5.i.i = icmp eq i16 %1, 0
  br i1 %cmp5.i.i, label %for.inc.i.i, label %if.end3

for.inc.i.i:                                      ; preds = %for.body.i.i
  %incdec.ptr.i.i = getelementptr inbounds i16* %x.addr.011.i.i, i64 1
  %inc.i.i = add nsw i32 %i.012.i.i, 1
  %cmp2.i.i = icmp slt i32 %inc.i.i, 5
  br i1 %cmp2.i.i, label %for.body.i.i, label %if.then

if.then:                                          ; preds = %for.inc.i.i
  %incdec.ptr.i139 = getelementptr inbounds i16* %a, i64 1
  %2 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr1.i = getelementptr inbounds i16* %c, i64 1
  store i16 %2, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i = getelementptr inbounds i16* %a, i64 2
  %3 = load i16* %incdec.ptr.i139, align 2, !tbaa !1
  %incdec.ptr1.1.i = getelementptr inbounds i16* %c, i64 2
  store i16 %3, i16* %incdec.ptr1.i, align 2, !tbaa !1
  %incdec.ptr.2.i = getelementptr inbounds i16* %a, i64 3
  %4 = load i16* %incdec.ptr.1.i, align 2, !tbaa !1
  %incdec.ptr1.2.i = getelementptr inbounds i16* %c, i64 3
  store i16 %4, i16* %incdec.ptr1.1.i, align 2, !tbaa !1
  %incdec.ptr.3.i = getelementptr inbounds i16* %a, i64 4
  %5 = load i16* %incdec.ptr.2.i, align 2, !tbaa !1
  %incdec.ptr1.3.i = getelementptr inbounds i16* %c, i64 4
  store i16 %5, i16* %incdec.ptr1.2.i, align 2, !tbaa !1
  %6 = load i16* %incdec.ptr.3.i, align 2, !tbaa !1
  %incdec.ptr1.4.i = getelementptr inbounds i16* %c, i64 5
  store i16 %6, i16* %incdec.ptr1.3.i, align 2, !tbaa !1
  %7 = load i16* %arrayidx.i.i, align 2, !tbaa !1
  store i16 %7, i16* %incdec.ptr1.4.i, align 2, !tbaa !1
  %.b136 = load i1* @subflg, align 1
  br i1 %.b136, label %if.then2, label %return

if.then2:                                         ; preds = %if.then
  %xor.i251 = xor i16 %7, -32768
  store i16 %xor.i251, i16* %incdec.ptr1.4.i, align 2, !tbaa !1
  br label %return

if.end3:                                          ; preds = %for.body.i.i, %entry
  %arrayidx.i.i369 = getelementptr inbounds i16* %b, i64 5
  %8 = load i16* %arrayidx.i.i369, align 2, !tbaa !1
  %and.i.i370 = and i16 %8, 32767
  %cmp.i.i371 = icmp eq i16 %and.i.i370, 32767
  br i1 %cmp.i.i371, label %for.body.i.i375, label %if.end7

for.body.i.i375:                                  ; preds = %if.end3, %for.inc.i.i379
  %i.012.i.i372 = phi i32 [ %inc.i.i377, %for.inc.i.i379 ], [ 0, %if.end3 ]
  %x.addr.011.i.i373 = phi i16* [ %incdec.ptr.i.i376, %for.inc.i.i379 ], [ %b, %if.end3 ]
  %9 = load i16* %x.addr.011.i.i373, align 2, !tbaa !1
  %cmp5.i.i374 = icmp eq i16 %9, 0
  br i1 %cmp5.i.i374, label %for.inc.i.i379, label %if.end7

for.inc.i.i379:                                   ; preds = %for.body.i.i375
  %incdec.ptr.i.i376 = getelementptr inbounds i16* %x.addr.011.i.i373, i64 1
  %inc.i.i377 = add nsw i32 %i.012.i.i372, 1
  %cmp2.i.i378 = icmp slt i32 %inc.i.i377, 5
  br i1 %cmp2.i.i378, label %for.body.i.i375, label %if.then6

if.then6:                                         ; preds = %for.inc.i.i379
  %incdec.ptr.i359 = getelementptr inbounds i16* %b, i64 1
  %10 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr1.i360 = getelementptr inbounds i16* %c, i64 1
  store i16 %10, i16* %c, align 2, !tbaa !1
  %incdec.ptr.1.i361 = getelementptr inbounds i16* %b, i64 2
  %11 = load i16* %incdec.ptr.i359, align 2, !tbaa !1
  %incdec.ptr1.1.i362 = getelementptr inbounds i16* %c, i64 2
  store i16 %11, i16* %incdec.ptr1.i360, align 2, !tbaa !1
  %incdec.ptr.2.i363 = getelementptr inbounds i16* %b, i64 3
  %12 = load i16* %incdec.ptr.1.i361, align 2, !tbaa !1
  %incdec.ptr1.2.i364 = getelementptr inbounds i16* %c, i64 3
  store i16 %12, i16* %incdec.ptr1.1.i362, align 2, !tbaa !1
  %incdec.ptr.3.i365 = getelementptr inbounds i16* %b, i64 4
  %13 = load i16* %incdec.ptr.2.i363, align 2, !tbaa !1
  %incdec.ptr1.3.i366 = getelementptr inbounds i16* %c, i64 4
  store i16 %13, i16* %incdec.ptr1.2.i364, align 2, !tbaa !1
  %14 = load i16* %incdec.ptr.3.i365, align 2, !tbaa !1
  %incdec.ptr1.4.i368 = getelementptr inbounds i16* %c, i64 5
  store i16 %14, i16* %incdec.ptr1.3.i366, align 2, !tbaa !1
  %15 = load i16* %arrayidx.i.i369, align 2, !tbaa !1
  store i16 %15, i16* %incdec.ptr1.4.i368, align 2, !tbaa !1
  br label %return

if.end7:                                          ; preds = %for.body.i.i375, %if.end3
  %arraydecay = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 0
  %incdec.ptr.i318 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 1
  %.lobit.i319 = ashr i16 %0, 15
  store i16 %.lobit.i319, i16* %arraydecay, align 16, !tbaa !1
  %incdec.ptr2.i320 = getelementptr inbounds i16* %a, i64 4
  %incdec.ptr3.i321 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 2
  store i16 %and.i.i, i16* %incdec.ptr.i318, align 2, !tbaa !1
  br i1 %cmp.i.i, label %for.body.i.i330, label %if.end28.i357

for.body.i.i330:                                  ; preds = %if.end7, %for.inc.i.i334
  %i.012.i.i327 = phi i32 [ %inc.i.i332, %for.inc.i.i334 ], [ 0, %if.end7 ]
  %x.addr.011.i.i328 = phi i16* [ %incdec.ptr.i.i331, %for.inc.i.i334 ], [ %a, %if.end7 ]
  %16 = load i16* %x.addr.011.i.i328, align 2, !tbaa !1
  %cmp5.i.i329 = icmp eq i16 %16, 0
  br i1 %cmp5.i.i329, label %for.inc.i.i334, label %if.then13.i347

for.inc.i.i334:                                   ; preds = %for.body.i.i330
  %incdec.ptr.i.i331 = getelementptr inbounds i16* %x.addr.011.i.i328, i64 1
  %inc.i.i332 = add nsw i32 %i.012.i.i327, 1
  %cmp2.i.i333 = icmp slt i32 %inc.i.i332, 5
  br i1 %cmp2.i.i333, label %for.body.i.i330, label %for.cond20.preheader.i336

for.cond20.preheader.i336:                        ; preds = %for.inc.i.i334
  %scevgep69.i335 = bitcast i16* %incdec.ptr3.i321 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i335, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit358

if.then13.i347:                                   ; preds = %for.body.i.i330
  %incdec.ptr14.i337 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i321, align 4, !tbaa !1
  %incdec.ptr17.i338 = getelementptr inbounds i16* %a, i64 3
  %17 = load i16* %incdec.ptr2.i320, align 2, !tbaa !1
  %incdec.ptr18.i339 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %17, i16* %incdec.ptr14.i337, align 2, !tbaa !1
  %incdec.ptr17.1.i340 = getelementptr inbounds i16* %a, i64 2
  %18 = load i16* %incdec.ptr17.i338, align 2, !tbaa !1
  %incdec.ptr18.1.i341 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %18, i16* %incdec.ptr18.i339, align 8, !tbaa !1
  %incdec.ptr17.2.i342 = getelementptr inbounds i16* %a, i64 1
  %19 = load i16* %incdec.ptr17.1.i340, align 2, !tbaa !1
  %incdec.ptr18.2.i343 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %19, i16* %incdec.ptr18.1.i341, align 2, !tbaa !1
  %20 = load i16* %incdec.ptr17.2.i342, align 2, !tbaa !1
  %incdec.ptr18.3.i344 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %20, i16* %incdec.ptr18.2.i343, align 4, !tbaa !1
  %incdec.ptr17.4.i345 = getelementptr inbounds i16* %a, i64 -1
  %21 = load i16* %a, align 2, !tbaa !1
  %incdec.ptr18.4.i346 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 8
  store i16 %21, i16* %incdec.ptr18.3.i344, align 2, !tbaa !1
  %22 = load i16* %incdec.ptr17.4.i345, align 2, !tbaa !1
  store i16 %22, i16* %incdec.ptr18.4.i346, align 16, !tbaa !1
  br label %emovi.exit358

if.end28.i357:                                    ; preds = %if.end7
  %incdec.ptr29.i348 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i321, align 4, !tbaa !1
  %incdec.ptr34.i349 = getelementptr inbounds i16* %a, i64 3
  %23 = load i16* %incdec.ptr2.i320, align 2, !tbaa !1
  %incdec.ptr35.i350 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %23, i16* %incdec.ptr29.i348, align 2, !tbaa !1
  %incdec.ptr34.1.i351 = getelementptr inbounds i16* %a, i64 2
  %24 = load i16* %incdec.ptr34.i349, align 2, !tbaa !1
  %incdec.ptr35.1.i352 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %24, i16* %incdec.ptr35.i350, align 8, !tbaa !1
  %incdec.ptr34.2.i353 = getelementptr inbounds i16* %a, i64 1
  %25 = load i16* %incdec.ptr34.1.i351, align 2, !tbaa !1
  %incdec.ptr35.2.i354 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %25, i16* %incdec.ptr35.1.i352, align 2, !tbaa !1
  %26 = load i16* %incdec.ptr34.2.i353, align 2, !tbaa !1
  %incdec.ptr35.3.i355 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %26, i16* %incdec.ptr35.2.i354, align 4, !tbaa !1
  %27 = load i16* %a, align 2, !tbaa !1
  store i16 %27, i16* %incdec.ptr35.3.i355, align 2, !tbaa !1
  %scevgep70.i356 = getelementptr [9 x i16]* %ai, i64 0, i64 8
  store i16 0, i16* %scevgep70.i356, align 16, !tbaa !1
  br label %emovi.exit358

emovi.exit358:                                    ; preds = %for.cond20.preheader.i336, %if.then13.i347, %if.end28.i357
  %28 = phi i16 [ 0, %for.cond20.preheader.i336 ], [ %21, %if.then13.i347 ], [ %27, %if.end28.i357 ]
  %29 = phi i16 [ 0, %for.cond20.preheader.i336 ], [ %20, %if.then13.i347 ], [ %26, %if.end28.i357 ]
  %30 = phi i16 [ 0, %for.cond20.preheader.i336 ], [ %19, %if.then13.i347 ], [ %25, %if.end28.i357 ]
  %31 = phi i16 [ 0, %for.cond20.preheader.i336 ], [ %18, %if.then13.i347 ], [ %24, %if.end28.i357 ]
  %32 = phi i16 [ 0, %for.cond20.preheader.i336 ], [ %17, %if.then13.i347 ], [ %23, %if.end28.i357 ]
  %arraydecay8 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 0
  %incdec.ptr.i298 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 1
  %.lobit.i299 = ashr i16 %8, 15
  store i16 %.lobit.i299, i16* %arraydecay8, align 16, !tbaa !1
  %incdec.ptr2.i300 = getelementptr inbounds i16* %b, i64 4
  %incdec.ptr3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 2
  store i16 %and.i.i370, i16* %incdec.ptr.i298, align 2, !tbaa !1
  br i1 %cmp.i.i371, label %for.body.i.i308, label %if.end28.i

for.body.i.i308:                                  ; preds = %emovi.exit358, %for.inc.i.i312
  %i.012.i.i305 = phi i32 [ %inc.i.i310, %for.inc.i.i312 ], [ 0, %emovi.exit358 ]
  %x.addr.011.i.i306 = phi i16* [ %incdec.ptr.i.i309, %for.inc.i.i312 ], [ %b, %emovi.exit358 ]
  %33 = load i16* %x.addr.011.i.i306, align 2, !tbaa !1
  %cmp5.i.i307 = icmp eq i16 %33, 0
  br i1 %cmp5.i.i307, label %for.inc.i.i312, label %if.then13.i

for.inc.i.i312:                                   ; preds = %for.body.i.i308
  %incdec.ptr.i.i309 = getelementptr inbounds i16* %x.addr.011.i.i306, i64 1
  %inc.i.i310 = add nsw i32 %i.012.i.i305, 1
  %cmp2.i.i311 = icmp slt i32 %inc.i.i310, 5
  br i1 %cmp2.i.i311, label %for.body.i.i308, label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.inc.i.i312
  %scevgep69.i = bitcast i16* %incdec.ptr3.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep69.i, i8 0, i64 14, i32 4, i1 false) #1
  br label %emovi.exit

if.then13.i:                                      ; preds = %for.body.i.i308
  %incdec.ptr14.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr17.i = getelementptr inbounds i16* %b, i64 3
  %34 = load i16* %incdec.ptr2.i300, align 2, !tbaa !1
  %incdec.ptr18.i313 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  store i16 %34, i16* %incdec.ptr14.i, align 2, !tbaa !1
  %incdec.ptr17.1.i = getelementptr inbounds i16* %b, i64 2
  %35 = load i16* %incdec.ptr17.i, align 2, !tbaa !1
  %incdec.ptr18.1.i314 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  store i16 %35, i16* %incdec.ptr18.i313, align 8, !tbaa !1
  %incdec.ptr17.2.i = getelementptr inbounds i16* %b, i64 1
  %36 = load i16* %incdec.ptr17.1.i, align 2, !tbaa !1
  %incdec.ptr18.2.i315 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  store i16 %36, i16* %incdec.ptr18.1.i314, align 2, !tbaa !1
  %37 = load i16* %incdec.ptr17.2.i, align 2, !tbaa !1
  %incdec.ptr18.3.i316 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %37, i16* %incdec.ptr18.2.i315, align 4, !tbaa !1
  %incdec.ptr17.4.i = getelementptr inbounds i16* %b, i64 -1
  %38 = load i16* %b, align 2, !tbaa !1
  %incdec.ptr18.4.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 8
  store i16 %38, i16* %incdec.ptr18.3.i316, align 2, !tbaa !1
  %39 = load i16* %incdec.ptr17.4.i, align 2, !tbaa !1
  store i16 %39, i16* %incdec.ptr18.4.i, align 16, !tbaa !1
  br label %emovi.exit

if.end28.i:                                       ; preds = %emovi.exit358
  %incdec.ptr29.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr34.i = getelementptr inbounds i16* %b, i64 3
  %40 = load i16* %incdec.ptr2.i300, align 2, !tbaa !1
  %incdec.ptr35.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  store i16 %40, i16* %incdec.ptr29.i, align 2, !tbaa !1
  %incdec.ptr34.1.i = getelementptr inbounds i16* %b, i64 2
  %41 = load i16* %incdec.ptr34.i, align 2, !tbaa !1
  %incdec.ptr35.1.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  store i16 %41, i16* %incdec.ptr35.i, align 8, !tbaa !1
  %incdec.ptr34.2.i = getelementptr inbounds i16* %b, i64 1
  %42 = load i16* %incdec.ptr34.1.i, align 2, !tbaa !1
  %incdec.ptr35.2.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  store i16 %42, i16* %incdec.ptr35.1.i, align 2, !tbaa !1
  %43 = load i16* %incdec.ptr34.2.i, align 2, !tbaa !1
  %incdec.ptr35.3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %43, i16* %incdec.ptr35.2.i, align 4, !tbaa !1
  %44 = load i16* %b, align 2, !tbaa !1
  store i16 %44, i16* %incdec.ptr35.3.i, align 2, !tbaa !1
  %scevgep70.i = getelementptr [9 x i16]* %bi, i64 0, i64 8
  store i16 0, i16* %scevgep70.i, align 16, !tbaa !1
  br label %emovi.exit

emovi.exit:                                       ; preds = %for.cond20.preheader.i, %if.then13.i, %if.end28.i
  %45 = phi i16 [ 0, %for.cond20.preheader.i ], [ %39, %if.then13.i ], [ 0, %if.end28.i ]
  %46 = phi i16 [ 0, %for.cond20.preheader.i ], [ %38, %if.then13.i ], [ %44, %if.end28.i ]
  %47 = phi i16 [ 0, %for.cond20.preheader.i ], [ %37, %if.then13.i ], [ %43, %if.end28.i ]
  %48 = phi i16 [ 0, %for.cond20.preheader.i ], [ %36, %if.then13.i ], [ %42, %if.end28.i ]
  %49 = phi i16 [ 0, %for.cond20.preheader.i ], [ %35, %if.then13.i ], [ %41, %if.end28.i ]
  %50 = phi i16 [ 0, %for.cond20.preheader.i ], [ %34, %if.then13.i ], [ %40, %if.end28.i ]
  %.b135 = load i1* @subflg, align 1
  br i1 %.b135, label %if.then10, label %if.end13

if.then10:                                        ; preds = %emovi.exit
  %neg = xor i16 %.lobit.i319, -1
  store i16 %neg, i16* %arraydecay, align 16, !tbaa !1
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %emovi.exit
  %51 = phi i16 [ %neg, %if.then10 ], [ %.lobit.i319, %emovi.exit ]
  %conv15 = zext i16 %and.i.i to i32
  %conv17 = zext i16 %and.i.i370 to i32
  %sub = sub nsw i32 %conv15, %conv17
  %cmp = icmp sgt i32 %sub, 0
  br i1 %cmp, label %if.then20, label %if.end30

if.then20:                                        ; preds = %if.end13
  %incdec.ptr.2.i286 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  %incdec.ptr.3.i288 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  %incdec.ptr.4.i290 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  %incdec.ptr.5.i292 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  %incdec.ptr.6.i294 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %51, i16* %arraydecay8, align 16, !tbaa !1
  store i16 %and.i.i, i16* %incdec.ptr.i298, align 2, !tbaa !1
  %incdec.ptr.2.i271 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr.3.i273 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %32, i16* %incdec.ptr.2.i286, align 2, !tbaa !1
  %incdec.ptr.4.i275 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %31, i16* %incdec.ptr.3.i288, align 8, !tbaa !1
  %incdec.ptr.5.i277 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %30, i16* %incdec.ptr.4.i290, align 2, !tbaa !1
  %incdec.ptr.6.i279 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %29, i16* %incdec.ptr.5.i292, align 4, !tbaa !1
  store i16 %28, i16* %incdec.ptr.6.i294, align 2, !tbaa !1
  %scevgep.i281 = getelementptr [9 x i16]* %bi, i64 0, i64 8
  store i16 0, i16* %scevgep.i281, align 16, !tbaa !1
  store i16 %.lobit.i299, i16* %arraydecay, align 16, !tbaa !1
  store i16 %and.i.i370, i16* %incdec.ptr.i318, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr3.i321, align 4, !tbaa !1
  store i16 %50, i16* %incdec.ptr.2.i271, align 2, !tbaa !1
  store i16 %49, i16* %incdec.ptr.3.i273, align 8, !tbaa !1
  store i16 %48, i16* %incdec.ptr.4.i275, align 2, !tbaa !1
  store i16 %47, i16* %incdec.ptr.5.i277, align 4, !tbaa !1
  store i16 %46, i16* %incdec.ptr.6.i279, align 2, !tbaa !1
  %scevgep.i266 = getelementptr [9 x i16]* %ai, i64 0, i64 8
  store i16 0, i16* %scevgep.i266, align 16, !tbaa !1
  %sub29 = sub nsw i32 0, %sub
  br label %if.end30

if.end30:                                         ; preds = %if.then20, %if.end13
  %52 = phi i16 [ %46, %if.then20 ], [ %28, %if.end13 ]
  %53 = phi i16 [ %47, %if.then20 ], [ %29, %if.end13 ]
  %54 = phi i16 [ %48, %if.then20 ], [ %30, %if.end13 ]
  %55 = phi i16 [ %49, %if.then20 ], [ %31, %if.end13 ]
  %56 = phi i16 [ %and.i.i370, %if.then20 ], [ %and.i.i, %if.end13 ]
  %57 = phi i16 [ %31, %if.then20 ], [ %49, %if.end13 ]
  %58 = phi i16 [ %30, %if.then20 ], [ %48, %if.end13 ]
  %59 = phi i16 [ %29, %if.then20 ], [ %47, %if.end13 ]
  %60 = phi i16 [ %28, %if.then20 ], [ %46, %if.end13 ]
  %61 = phi i16 [ 0, %if.then20 ], [ %45, %if.end13 ]
  %62 = phi i16 [ %50, %if.then20 ], [ %32, %if.end13 ]
  %63 = phi i16 [ %.lobit.i299, %if.then20 ], [ %51, %if.end13 ]
  %64 = phi i16 [ %32, %if.then20 ], [ %50, %if.end13 ]
  %65 = phi i16 [ %and.i.i, %if.then20 ], [ %and.i.i370, %if.end13 ]
  %66 = phi i16 [ %51, %if.then20 ], [ %.lobit.i299, %if.end13 ]
  %lt.0 = phi i32 [ %sub29, %if.then20 ], [ %sub, %if.end13 ]
  %ltb.0 = phi i32 [ %conv15, %if.then20 ], [ %conv17, %if.end13 ]
  %cmp32 = icmp eq i32 %lt.0, 0
  br i1 %cmp32, label %for.body.i, label %if.then34

if.then34:                                        ; preds = %if.end30
  %cmp35 = icmp slt i32 %lt.0, -81
  br i1 %cmp35, label %done, label %if.end38

if.end38:                                         ; preds = %if.then34
  %call40 = call fastcc i32 @eshift(i16* %arraydecay, i32 %lt.0)
  %67 = bitcast [9 x i16]* %ai to i64*
  %68 = load i64* %67, align 16
  %69 = trunc i64 %68 to i16
  %70 = bitcast [9 x i16]* %bi to i64*
  %71 = load i64* %70, align 16
  %72 = trunc i64 %71 to i16
  %73 = lshr i64 %68, 48
  %74 = trunc i64 %73 to i16
  %75 = lshr i64 %71, 48
  %76 = trunc i64 %75 to i16
  %77 = lshr i64 %68, 32
  %78 = trunc i64 %77 to i32
  %79 = lshr i64 %71, 32
  %80 = trunc i64 %79 to i32
  %81 = trunc i64 %79 to i32
  %phitmp = and i32 %81, 65535
  %82 = trunc i64 %77 to i32
  %phitmp409 = and i32 %82, 65535
  %phitmp410 = and i32 %78, 65535
  %phitmp411 = and i32 %80, 65535
  br label %if.end97

for.body.i:                                       ; preds = %if.end30, %for.inc.i.for.body.i_crit_edge
  %83 = phi i16 [ %.pre407, %for.inc.i.for.body.i_crit_edge ], [ 0, %if.end30 ]
  %84 = phi i16 [ %.pre406, %for.inc.i.for.body.i_crit_edge ], [ 0, %if.end30 ]
  %i.021.i = phi i32 [ %phitmp412, %for.inc.i.for.body.i_crit_edge ], [ 3, %if.end30 ]
  %b.addr.020.i = phi i16* [ %incdec.ptr2.i, %for.inc.i.for.body.i_crit_edge ], [ %incdec.ptr3.i, %if.end30 ]
  %a.addr.019.i = phi i16* [ %incdec.ptr.i246, %for.inc.i.for.body.i_crit_edge ], [ %incdec.ptr3.i321, %if.end30 ]
  %cmp4.i = icmp eq i16 %84, %83
  br i1 %cmp4.i, label %for.inc.i, label %if.end86

for.inc.i:                                        ; preds = %for.body.i
  %incdec.ptr2.i = getelementptr inbounds i16* %b.addr.020.i, i64 1
  %incdec.ptr.i246 = getelementptr inbounds i16* %a.addr.019.i, i64 1
  %cmp.i247 = icmp slt i32 %i.021.i, 9
  br i1 %cmp.i247, label %for.inc.i.for.body.i_crit_edge, label %if.then46

for.inc.i.for.body.i_crit_edge:                   ; preds = %for.inc.i
  %.pre406 = load i16* %incdec.ptr.i246, align 2, !tbaa !1
  %.pre407 = load i16* %incdec.ptr2.i, align 2, !tbaa !1
  %phitmp412 = add i32 %i.021.i, 1
  br label %for.body.i

if.then46:                                        ; preds = %for.inc.i
  %85 = bitcast [9 x i16]* %bi to i64*
  %86 = load i64* %85, align 16
  %87 = trunc i64 %86 to i16
  %cmp51 = icmp eq i16 %63, %87
  br i1 %cmp51, label %if.end54, label %if.then53

if.then53:                                        ; preds = %if.then46
  %x4.i243 = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i243, i8 0, i64 12, i32 2, i1 false) #1
  br label %return

if.end54:                                         ; preds = %if.then46
  %88 = lshr i64 %86, 48
  %89 = trunc i64 %88 to i16
  %cmp57 = icmp eq i16 %65, 0
  br i1 %cmp57, label %land.lhs.true, label %for.cond.preheader

for.cond.preheader:                               ; preds = %land.lhs.true, %if.end54
  %90 = phi i16 [ %64, %land.lhs.true ], [ %89, %if.end54 ]
  br label %for.body

land.lhs.true:                                    ; preds = %if.end54
  %cmp61 = icmp sgt i16 %64, -1
  br i1 %cmp61, label %done.thread, label %for.cond.preheader

done.thread:                                      ; preds = %land.lhs.true
  %arrayidx59 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  %add.ptr.i236 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 8
  %.lobit.i = lshr i16 %61, 15
  %shl.i = shl i16 %61, 1
  store i16 %shl.i, i16* %add.ptr.i236, align 16, !tbaa !1
  %incdec.ptr.i237 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  %.lobit.1.i = lshr i16 %60, 15
  %shl.1.i = shl i16 %60, 1
  %91 = or i16 %shl.1.i, %.lobit.i
  store i16 %91, i16* %incdec.ptr.i237, align 2, !tbaa !1
  %incdec.ptr.1.i238 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  %.lobit.2.i = lshr i16 %59, 15
  %shl.2.i = shl i16 %59, 1
  %92 = or i16 %shl.2.i, %.lobit.1.i
  store i16 %92, i16* %incdec.ptr.1.i238, align 4, !tbaa !1
  %incdec.ptr.2.i239 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  %.lobit.3.i = lshr i16 %58, 15
  %shl.3.i = shl i16 %58, 1
  %93 = or i16 %shl.3.i, %.lobit.2.i
  store i16 %93, i16* %incdec.ptr.2.i239, align 2, !tbaa !1
  %incdec.ptr.3.i240 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  %.lobit.4.i = lshr i16 %57, 15
  %shl.4.i = shl i16 %57, 1
  %94 = or i16 %shl.4.i, %.lobit.3.i
  store i16 %94, i16* %incdec.ptr.3.i240, align 8, !tbaa !1
  %.lobit.5.i = lshr i16 %64, 15
  %shl.5.i = shl i16 %64, 1
  %95 = or i16 %shl.5.i, %.lobit.4.i
  store i16 %95, i16* %arrayidx59, align 2, !tbaa !1
  %96 = bitcast i16* %incdec.ptr3.i to i32*
  %97 = load i32* %96, align 4
  %98 = trunc i32 %97 to i16
  %shl.6.i = shl i16 %98, 1
  %99 = or i16 %shl.6.i, %.lobit.5.i
  store i16 %99, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %100 = lshr i32 %97, 16
  %101 = trunc i32 %100 to i16
  %add.ptr.i414 = getelementptr inbounds i16* %c, i64 5
  %tobool.i415 = icmp eq i16 %63, 0
  %storemerge.i417 = select i1 %tobool.i415, i16 0, i16 -32768
  store i16 %storemerge.i417, i16* %add.ptr.i414, align 2, !tbaa !1
  br label %if.end14.i

for.cond:                                         ; preds = %for.body
  %102 = trunc i64 %indvars.iv to i32
  %cmp66 = icmp slt i32 %102, 8
  br i1 %cmp66, label %for.cond.for.body_crit_edge, label %for.end

for.cond.for.body_crit_edge:                      ; preds = %for.cond
  %arrayidx68.phi.trans.insert = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 %indvars.iv
  %.pre408 = load i16* %arrayidx68.phi.trans.insert, align 2, !tbaa !1
  %phitmp413 = add i64 %indvars.iv, 1
  br label %for.body

for.body:                                         ; preds = %for.cond.for.body_crit_edge, %for.cond.preheader
  %103 = phi i16 [ %65, %for.cond.preheader ], [ %.pre408, %for.cond.for.body_crit_edge ]
  %indvars.iv = phi i64 [ 2, %for.cond.preheader ], [ %phitmp413, %for.cond.for.body_crit_edge ]
  %cmp70 = icmp eq i16 %103, 0
  br i1 %cmp70, label %for.cond, label %if.then72

if.then72:                                        ; preds = %for.body
  %add = add nsw i32 %ltb.0, 1
  %cmp73 = icmp ugt i32 %add, 32766
  br i1 %cmp73, label %if.then75, label %for.end

if.then75:                                        ; preds = %if.then72
  %x4.i = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 12, i32 2, i1 false) #1
  %cmp78 = icmp eq i16 %63, 0
  %scevgep.i234.pre = getelementptr i16* %c, i64 5
  br i1 %cmp78, label %if.end81, label %if.then80

if.then80:                                        ; preds = %if.then75
  store i16 -32768, i16* %scevgep.i234.pre, align 2, !tbaa !1
  br label %if.end81

if.end81:                                         ; preds = %if.then75, %if.then80
  %104 = phi i16 [ -1, %if.then80 ], [ 32767, %if.then75 ]
  call void @llvm.memset.p0i8.i64(i8* %x4.i, i8 0, i64 10, i32 2, i1 false) #1
  store i16 %104, i16* %scevgep.i234.pre, align 2, !tbaa !1
  br label %return

for.end:                                          ; preds = %for.cond, %if.then72
  %ltb.1 = phi i32 [ %add, %if.then72 ], [ %ltb.0, %for.cond ]
  %conv84 = trunc i32 %ltb.1 to i16
  store i16 %conv84, i16* %incdec.ptr.i298, align 2, !tbaa !1
  br label %done

if.end86:                                         ; preds = %for.body.i
  %cmp10.i = icmp ugt i16 %84, %83
  br i1 %cmp10.i, label %if.then89, label %if.end97

if.then89:                                        ; preds = %if.end86
  %incdec.ptr.2.i223 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  %incdec.ptr.3.i225 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  %incdec.ptr.4.i227 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  %incdec.ptr.5.i229 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  %incdec.ptr.6.i231 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  store i16 %63, i16* %arraydecay8, align 16, !tbaa !1
  store i16 %56, i16* %incdec.ptr.i298, align 2, !tbaa !1
  %incdec.ptr.2.i208 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 3
  store i16 0, i16* %incdec.ptr3.i, align 4, !tbaa !1
  %incdec.ptr.3.i210 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  store i16 %62, i16* %incdec.ptr.2.i223, align 2, !tbaa !1
  %incdec.ptr.4.i212 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  store i16 %55, i16* %incdec.ptr.3.i225, align 8, !tbaa !1
  %incdec.ptr.5.i214 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  store i16 %54, i16* %incdec.ptr.4.i227, align 2, !tbaa !1
  %incdec.ptr.6.i216 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  store i16 %53, i16* %incdec.ptr.5.i229, align 4, !tbaa !1
  store i16 %52, i16* %incdec.ptr.6.i231, align 2, !tbaa !1
  %scevgep.i218 = getelementptr [9 x i16]* %bi, i64 0, i64 8
  store i16 0, i16* %scevgep.i218, align 16, !tbaa !1
  store i16 %66, i16* %arraydecay, align 16, !tbaa !1
  store i16 %65, i16* %incdec.ptr.i318, align 2, !tbaa !1
  store i16 0, i16* %incdec.ptr3.i321, align 4, !tbaa !1
  store i16 %64, i16* %incdec.ptr.2.i208, align 2, !tbaa !1
  store i16 %57, i16* %incdec.ptr.3.i210, align 8, !tbaa !1
  store i16 %58, i16* %incdec.ptr.4.i212, align 2, !tbaa !1
  store i16 %59, i16* %incdec.ptr.5.i214, align 4, !tbaa !1
  store i16 %60, i16* %incdec.ptr.6.i216, align 2, !tbaa !1
  %scevgep.i = getelementptr [9 x i16]* %ai, i64 0, i64 8
  store i16 0, i16* %scevgep.i, align 16, !tbaa !1
  br label %if.end97

if.end97:                                         ; preds = %if.end86, %if.then89, %if.end38
  %105 = phi i32 [ %phitmp409, %if.end38 ], [ 0, %if.then89 ], [ 0, %if.end86 ]
  %106 = phi i32 [ %phitmp, %if.end38 ], [ 0, %if.then89 ], [ 0, %if.end86 ]
  %107 = phi i16 [ %74, %if.end38 ], [ %64, %if.then89 ], [ %62, %if.end86 ]
  %108 = phi i16 [ %76, %if.end38 ], [ %62, %if.then89 ], [ %64, %if.end86 ]
  %109 = phi i32 [ %phitmp411, %if.end38 ], [ 0, %if.then89 ], [ 0, %if.end86 ]
  %110 = phi i32 [ %phitmp410, %if.end38 ], [ 0, %if.then89 ], [ 0, %if.end86 ]
  %111 = phi i16 [ %72, %if.end38 ], [ %63, %if.then89 ], [ %66, %if.end86 ]
  %112 = phi i16 [ %69, %if.end38 ], [ %66, %if.then89 ], [ %63, %if.end86 ]
  %lost.0 = phi i32 [ %call40, %if.end38 ], [ 0, %if.then89 ], [ 0, %if.end86 ]
  %cmp102 = icmp eq i16 %112, %111
  %add.ptr.i146 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 8
  %add.ptr1.i147 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 8
  br i1 %cmp102, label %if.then104, label %if.else107

if.then104:                                       ; preds = %if.end97
  %113 = load i16* %add.ptr.i146, align 16, !tbaa !1
  %conv.i148 = zext i16 %113 to i32
  %114 = load i16* %add.ptr1.i147, align 16, !tbaa !1
  %conv2.i149 = zext i16 %114 to i32
  %add3.i = add i32 %conv2.i149, %conv.i148
  %and.i150 = lshr i32 %add3.i, 16
  %and.lobit.i151 = and i32 %and.i150, 1
  %conv4.i152 = trunc i32 %add3.i to i16
  store i16 %conv4.i152, i16* %add.ptr1.i147, align 16, !tbaa !1
  %incdec.ptr.i153 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  %incdec.ptr5.i154 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  %115 = load i16* %incdec.ptr.i153, align 2, !tbaa !1
  %conv.1.i155 = zext i16 %115 to i32
  %116 = load i16* %incdec.ptr5.i154, align 2, !tbaa !1
  %conv2.1.i156 = zext i16 %116 to i32
  %add.1.i = add i32 %conv2.1.i156, %conv.1.i155
  %add3.1.i = add i32 %add.1.i, %and.lobit.i151
  %and.1.i157 = lshr i32 %add3.1.i, 16
  %and.lobit.1.i158 = and i32 %and.1.i157, 1
  %conv4.1.i159 = trunc i32 %add3.1.i to i16
  store i16 %conv4.1.i159, i16* %incdec.ptr5.i154, align 2, !tbaa !1
  %incdec.ptr.1.i160 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  %incdec.ptr5.1.i161 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  %117 = load i16* %incdec.ptr.1.i160, align 4, !tbaa !1
  %conv.2.i162 = zext i16 %117 to i32
  %118 = load i16* %incdec.ptr5.1.i161, align 4, !tbaa !1
  %conv2.2.i163 = zext i16 %118 to i32
  %add.2.i = add i32 %conv2.2.i163, %conv.2.i162
  %add3.2.i = add i32 %add.2.i, %and.lobit.1.i158
  %and.2.i164 = lshr i32 %add3.2.i, 16
  %and.lobit.2.i165 = and i32 %and.2.i164, 1
  %conv4.2.i166 = trunc i32 %add3.2.i to i16
  store i16 %conv4.2.i166, i16* %incdec.ptr5.1.i161, align 4, !tbaa !1
  %incdec.ptr.2.i167 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  %incdec.ptr5.2.i168 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  %119 = load i16* %incdec.ptr.2.i167, align 2, !tbaa !1
  %conv.3.i169 = zext i16 %119 to i32
  %120 = load i16* %incdec.ptr5.2.i168, align 2, !tbaa !1
  %conv2.3.i170 = zext i16 %120 to i32
  %add.3.i = add i32 %conv2.3.i170, %conv.3.i169
  %add3.3.i = add i32 %add.3.i, %and.lobit.2.i165
  %and.3.i171 = lshr i32 %add3.3.i, 16
  %and.lobit.3.i172 = and i32 %and.3.i171, 1
  %conv4.3.i173 = trunc i32 %add3.3.i to i16
  store i16 %conv4.3.i173, i16* %incdec.ptr5.2.i168, align 2, !tbaa !1
  %incdec.ptr.3.i174 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  %incdec.ptr5.3.i175 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  %121 = load i16* %incdec.ptr.3.i174, align 8, !tbaa !1
  %conv.4.i176 = zext i16 %121 to i32
  %122 = load i16* %incdec.ptr5.3.i175, align 8, !tbaa !1
  %conv2.4.i177 = zext i16 %122 to i32
  %add.4.i = add i32 %conv2.4.i177, %conv.4.i176
  %add3.4.i = add i32 %add.4.i, %and.lobit.3.i172
  %and.4.i178 = lshr i32 %add3.4.i, 16
  %and.lobit.4.i179 = and i32 %and.4.i178, 1
  %conv4.4.i180 = trunc i32 %add3.4.i to i16
  store i16 %conv4.4.i180, i16* %incdec.ptr5.3.i175, align 8, !tbaa !1
  %incdec.ptr5.4.i182 = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  %conv.5.i183 = zext i16 %107 to i32
  %conv2.5.i184 = zext i16 %108 to i32
  %add.5.i = add i32 %conv2.5.i184, %conv.5.i183
  %add3.5.i = add i32 %add.5.i, %and.lobit.4.i179
  %and.5.i185 = lshr i32 %add3.5.i, 16
  %and.lobit.5.i186 = and i32 %and.5.i185, 1
  %conv4.5.i187 = trunc i32 %add3.5.i to i16
  store i16 %conv4.5.i187, i16* %incdec.ptr5.4.i182, align 2, !tbaa !1
  %add.6.i = add i32 %109, %110
  %add3.6.i = add i32 %add.6.i, %and.lobit.5.i186
  br label %if.end110

if.else107:                                       ; preds = %if.end97
  %123 = load i16* %add.ptr1.i147, align 16, !tbaa !1
  %conv.i = zext i16 %123 to i32
  %124 = load i16* %add.ptr.i146, align 16, !tbaa !1
  %conv2.i = zext i16 %124 to i32
  %sub.i = sub i32 %conv.i, %conv2.i
  %and.i = lshr i32 %sub.i, 16
  %and.lobit.i = and i32 %and.i, 1
  %conv4.i = trunc i32 %sub.i to i16
  store i16 %conv4.i, i16* %add.ptr1.i147, align 16, !tbaa !1
  %incdec.ptr.i141 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 7
  %incdec.ptr5.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 7
  %125 = load i16* %incdec.ptr5.i, align 2, !tbaa !1
  %conv.1.i = zext i16 %125 to i32
  %126 = load i16* %incdec.ptr.i141, align 2, !tbaa !1
  %conv2.1.i = zext i16 %126 to i32
  %sub.1.i = sub i32 %conv.1.i, %conv2.1.i
  %sub3.1.i = sub i32 %sub.1.i, %and.lobit.i
  %and.1.i = lshr i32 %sub3.1.i, 16
  %and.lobit.1.i = and i32 %and.1.i, 1
  %conv4.1.i = trunc i32 %sub3.1.i to i16
  store i16 %conv4.1.i, i16* %incdec.ptr5.i, align 2, !tbaa !1
  %incdec.ptr.1.i142 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 6
  %incdec.ptr5.1.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 6
  %127 = load i16* %incdec.ptr5.1.i, align 4, !tbaa !1
  %conv.2.i = zext i16 %127 to i32
  %128 = load i16* %incdec.ptr.1.i142, align 4, !tbaa !1
  %conv2.2.i = zext i16 %128 to i32
  %sub.2.i = sub i32 %conv.2.i, %conv2.2.i
  %sub3.2.i = sub i32 %sub.2.i, %and.lobit.1.i
  %and.2.i = lshr i32 %sub3.2.i, 16
  %and.lobit.2.i = and i32 %and.2.i, 1
  %conv4.2.i = trunc i32 %sub3.2.i to i16
  store i16 %conv4.2.i, i16* %incdec.ptr5.1.i, align 4, !tbaa !1
  %incdec.ptr.2.i143 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 5
  %incdec.ptr5.2.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 5
  %129 = load i16* %incdec.ptr5.2.i, align 2, !tbaa !1
  %conv.3.i = zext i16 %129 to i32
  %130 = load i16* %incdec.ptr.2.i143, align 2, !tbaa !1
  %conv2.3.i = zext i16 %130 to i32
  %sub.3.i = sub i32 %conv.3.i, %conv2.3.i
  %sub3.3.i = sub i32 %sub.3.i, %and.lobit.2.i
  %and.3.i = lshr i32 %sub3.3.i, 16
  %and.lobit.3.i = and i32 %and.3.i, 1
  %conv4.3.i = trunc i32 %sub3.3.i to i16
  store i16 %conv4.3.i, i16* %incdec.ptr5.2.i, align 2, !tbaa !1
  %incdec.ptr.3.i144 = getelementptr inbounds [9 x i16]* %ai, i64 0, i64 4
  %incdec.ptr5.3.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  %131 = load i16* %incdec.ptr5.3.i, align 8, !tbaa !1
  %conv.4.i = zext i16 %131 to i32
  %132 = load i16* %incdec.ptr.3.i144, align 8, !tbaa !1
  %conv2.4.i = zext i16 %132 to i32
  %sub.4.i = sub i32 %conv.4.i, %conv2.4.i
  %sub3.4.i = sub i32 %sub.4.i, %and.lobit.3.i
  %and.4.i = lshr i32 %sub3.4.i, 16
  %and.lobit.4.i = and i32 %and.4.i, 1
  %conv4.4.i = trunc i32 %sub3.4.i to i16
  store i16 %conv4.4.i, i16* %incdec.ptr5.3.i, align 8, !tbaa !1
  %incdec.ptr5.4.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 3
  %conv.5.i = zext i16 %108 to i32
  %conv2.5.i = zext i16 %107 to i32
  %sub.5.i = sub i32 %conv.5.i, %conv2.5.i
  %sub3.5.i = sub i32 %sub.5.i, %and.lobit.4.i
  %and.5.i = lshr i32 %sub3.5.i, 16
  %and.lobit.5.i = and i32 %and.5.i, 1
  %conv4.5.i = trunc i32 %sub3.5.i to i16
  store i16 %conv4.5.i, i16* %incdec.ptr5.4.i, align 2, !tbaa !1
  %sub.6.i = sub i32 %106, %105
  %sub3.6.i = sub i32 %sub.6.i, %and.lobit.5.i
  br label %if.end110

if.end110:                                        ; preds = %if.else107, %if.then104
  %storemerge395.in = phi i32 [ %add3.6.i, %if.then104 ], [ %sub3.6.i, %if.else107 ]
  %storemerge = phi i1 [ false, %if.then104 ], [ true, %if.else107 ]
  %storemerge395 = trunc i32 %storemerge395.in to i16
  store i16 %storemerge395, i16* %incdec.ptr3.i, align 4, !tbaa !1
  store i1 %storemerge, i1* @subflg, align 1
  %133 = zext i1 %storemerge to i32
  call fastcc void @emdnorm(i16* %arraydecay8, i32 %lost.0, i32 %133, i32 %ltb.0, i32 64)
  %134 = bitcast [9 x i16]* %bi to i32*
  %135 = load i32* %134, align 16
  %136 = bitcast [9 x i16]* %bi to i64*
  %.pre = load i64* %136, align 16
  %137 = trunc i64 %.pre to i32
  %138 = trunc i64 %.pre to i16
  %139 = lshr i32 %137, 16
  %140 = trunc i32 %139 to i16
  %141 = lshr i32 %135, 16
  %142 = trunc i32 %141 to i16
  %143 = lshr i64 %.pre, 48
  %144 = trunc i64 %143 to i16
  %145 = trunc i64 %.pre to i16
  br label %done

done:                                             ; preds = %if.then34, %if.end110, %for.end
  %a.val.i = phi i16 [ %66, %if.then34 ], [ %145, %if.end110 ], [ %63, %for.end ]
  %146 = phi i16 [ %64, %if.then34 ], [ %144, %if.end110 ], [ %90, %for.end ]
  %147 = phi i16 [ %65, %if.then34 ], [ %142, %if.end110 ], [ %conv84, %for.end ]
  %148 = phi i16 [ %65, %if.then34 ], [ %140, %if.end110 ], [ %conv84, %for.end ]
  %149 = phi i16 [ %66, %if.then34 ], [ %138, %if.end110 ], [ %63, %for.end ]
  %add.ptr.i = getelementptr inbounds i16* %c, i64 5
  %tobool.i = icmp eq i16 %149, 0
  %or.i = or i16 %148, -32768
  %storemerge.i = select i1 %tobool.i, i16 %148, i16 %or.i
  store i16 %storemerge.i, i16* %add.ptr.i, align 2, !tbaa !1
  %cmp.i = icmp eq i16 %147, 32767
  br i1 %cmp.i, label %for.body.i.i138, label %if.end14.i

for.cond.i.i:                                     ; preds = %for.body.i.i138
  %150 = trunc i64 %indvars.iv.next.i.i to i32
  %cmp2.i.i137 = icmp slt i32 %150, 9
  br i1 %cmp2.i.i137, label %for.body.i.i138, label %if.end13.i

for.body.i.i138:                                  ; preds = %done, %for.cond.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %for.cond.i.i ], [ 3, %done ]
  %arrayidx4.i.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 %indvars.iv.i.i
  %151 = load i16* %arrayidx4.i.i, align 2, !tbaa !1
  %cmp6.i.i = icmp eq i16 %151, 0
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  br i1 %cmp6.i.i, label %for.cond.i.i, label %if.then11.i

if.then11.i:                                      ; preds = %for.body.i.i138
  %cmp.i32.i = icmp ne i16 %a.val.i, 0
  %conv1.i.i = zext i1 %cmp.i32.i to i16
  %152 = bitcast i16* %c to i64*
  store i64 0, i64* %152, align 2
  %scevgep8.i.i = getelementptr i16* %c, i64 4
  store i16 -16384, i16* %scevgep8.i.i, align 2, !tbaa !1
  %shl.i.i = shl nuw i16 %conv1.i.i, 15
  %or.i31.i = or i16 %shl.i.i, 32767
  store i16 %or.i31.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %return

if.end13.i:                                       ; preds = %for.cond.i.i
  %x5.i.i = bitcast i16* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %x5.i.i, i8 0, i64 10, i32 2, i1 false) #1
  %or.i.i = or i16 %storemerge.i, 32767
  store i16 %or.i.i, i16* %add.ptr.i, align 2, !tbaa !1
  br label %return

if.end14.i:                                       ; preds = %done.thread, %done
  %153 = phi i16 [ %101, %done.thread ], [ %146, %done ]
  %q.0.i = getelementptr inbounds i16* %c, i64 4
  %incdec.ptr18.i = getelementptr inbounds [9 x i16]* %bi, i64 0, i64 4
  %incdec.ptr19.i = getelementptr inbounds i16* %c, i64 3
  store i16 %153, i16* %q.0.i, align 2, !tbaa !1
  %154 = bitcast i16* %incdec.ptr18.i to i64*
  %155 = load i64* %154, align 8
  %156 = trunc i64 %155 to i32
  %157 = trunc i64 %155 to i16
  %incdec.ptr19.1.i = getelementptr inbounds i16* %c, i64 2
  store i16 %157, i16* %incdec.ptr19.i, align 2, !tbaa !1
  %158 = lshr i32 %156, 16
  %159 = trunc i32 %158 to i16
  %incdec.ptr19.2.i = getelementptr inbounds i16* %c, i64 1
  store i16 %159, i16* %incdec.ptr19.1.i, align 2, !tbaa !1
  %160 = lshr i64 %155, 32
  %161 = trunc i64 %160 to i16
  store i16 %161, i16* %incdec.ptr19.2.i, align 2, !tbaa !1
  %162 = lshr i64 %155, 48
  %163 = trunc i64 %162 to i16
  store i16 %163, i16* %c, align 2, !tbaa !1
  br label %return

return:                                           ; preds = %if.end14.i, %if.end13.i, %if.then11.i, %if.then, %if.then2, %if.end81, %if.then53, %if.then6
  ret void
}

; Function Attrs: nounwind
declare i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { cold }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"short", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{i64 0, i64 24, metadata !6}
!6 = metadata !{metadata !3, metadata !3, i64 0}
!7 = metadata !{metadata !8, metadata !8, i64 0}
!8 = metadata !{metadata !"long long", metadata !3, i64 0}
!9 = metadata !{metadata !10, metadata !10, i64 0}
!10 = metadata !{metadata !"int", metadata !3, i64 0}
!11 = metadata !{metadata !12, metadata !12, i64 0}
!12 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!13 = metadata !{metadata !14, metadata !14, i64 0}
!14 = metadata !{metadata !"long", metadata !3, i64 0}
!15 = metadata !{metadata !15, metadata !16, metadata !17}
!16 = metadata !{metadata !"llvm.vectorizer.width", i32 1}
!17 = metadata !{metadata !"llvm.vectorizer.unroll", i32 1}
!18 = metadata !{metadata !18, metadata !16, metadata !17}
